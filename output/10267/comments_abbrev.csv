jonasschnelli,2017-04-24T06:12:08Z,"Yeah. Why not. This can be useful.\n\n* I would recommend to use `-addconf=` (otherwise user may think it replaces the bitcoin.conf configuration file).\n* If I follow `GetConfigFile()` correctly, you can also use absolut paths, right?",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296533141,296533141,
NicolasDorier,2017-04-24T07:15:46Z,Why not making the existing `-config` a repeatable argument.,https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296551716,296551716,
kallewoof,2017-04-24T08:00:00Z,"@jonasschnelli Good point - will switch to `-addconf=`. Yes, you can use absolute paths. My worry above is for when a user presumes the path is relative to the config file when it is in fact not.\n\n@NicolasDorier I think `-config` simply tells what name to use and defaults to `bitcoin.conf` -- it doesn't actually load the file. This feature lets you load other files arbitrarily from within `bit",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296565587,296565587,
kallewoof,2017-04-24T09:35:45Z,[Unsquashed history](https://github.com/kallewoof/bitcoin/tree/feature-config-readconfig-unsquashed): [1](https://github.com/kallewoof/bitcoin/commit/b2c56e1ae2dad03bfd8af64cdf0d185317b19662) → [2](https://github.com/kallewoof/bitcoin/commit/770b88e3514a1d289bb64d0d66d276ca24197b06) → [3⊱1](https://github.com/kallewoof/bitcoin/commit/bc4a972bcc50ad37d5b386b52cfe7f7a5b3d87cd) → [4⊱2](https://github,https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296595191,296595191,
laanwj,2017-04-24T11:53:18Z,"Concept ACK\n\n> My worry above is for when a user presumes the path is relative to the config file when it is in fact not.\n\nYes, making it relative to the data directory is a good choice. I think we should handle all relative paths in `bitcoind` that way.\n\n> Why not making the existing -config a repeatable argument.\n\nThat was also my first thought, but it may just be confusing as it",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296636109,296636109,
jtimon,2017-04-24T16:50:28Z,"Concept ACK. Don't care much about the name, but what about -extraconf ?",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296739899,296739899,
kallewoof,2017-04-25T01:47:24Z,"From the given suggestions I think `includeconf` is the most clear so I'll switch to that.\n\n@laanwj:\n\n> Yes, making it relative to the data directory is a good choice. I think we should handle all relative paths in bitcoind that way.\n\nTo clarify, you mean that the relative path inside /dir/file.conf should be /dir/, not [bitcoin datadir], right? It will require some lines of code I bet",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296868359,296868359,
kallewoof,2017-04-25T03:00:18Z,"The `includeconf` feature now defines the path relative to the file being read, if any. For command line, it is [datadir], for `/dir/abc.conf` it is `/dir/`. I tested this with\n```\nsrc/testreadconfig/bitcoin.conf: [...] includeconf=../global.conf\nsrc/global.conf: includeconf=secrets.conf\nsrc/secrets.conf: rpcpassword=foo\n```\nwith `bitcoind  -datadir=testreadconfig`. Ensured `bitcoin-cl",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296880385,296880385,
laanwj,2017-04-25T05:14:44Z,"> To clarify, you mean that the relative path inside /dir/file.conf should be /dir/, not [bitcoin datadir], right? It > will require some lines of code I bet but I think that makes sense too.\n\nYes, seems good to me too. So it's like C's include """" - I wasn't thinking about relative includes in other includes.\n",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296910968,296910968,
kallewoof,2017-04-25T07:34:47Z,"To clarify, the code now does what @laanwj suggested.",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-296942171,296942171,
laanwj,2017-05-01T11:59:53Z,"> I am not sure how to test this in a neat manner. Feedback on this would be nice. Will dig/think though.\n\nSome ideas:\n- RPC test that creates a tree of bitcoin config files including each other beneath the data directory\n- Starts a node w/ `-includeconf=<path>`\n- Then interrogate node over RPC to verify the files got included, in the right order\n\nTo achieve the latter the option `ua",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-298323813,298323813,
jnewbery,2017-05-01T21:43:21Z,@laanwj's suggested test method seems sensible. I'm happy to review that or lend a hand implementing it. Feel free to reach me on IRC.,https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-298440791,298440791,
kallewoof,2017-05-02T01:28:44Z,"Thanks for the suggestion! I added a test that checks for load order and ensures circular include is guarded against. @jnewbery review would be wonderful :)\n\nEdit: If anyone has ideas why travis is failing I'd appreciate it. It works fine on all the machines I test it on locally (mac, linux).",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-298475283,298475283,
jnewbery,2017-05-02T15:33:53Z,"> If anyone has ideas why travis is failing I'd appreciate it\n\nYou've made `ReadConfigFile()` recursive (through `ProcessSetting()`). `ReadConfigFile()` locks cs_args, and then at the end calls `ClearDatadirCache()`, which locks csPathCached. That means that the bottom-most `ReadConfigFile()` locks csPathCached while cs_args is still held.\n\nThere's already a function that locks in the othe",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-298671493,298671493,
kallewoof,2017-05-08T04:02:22Z,"@jnewbery Thanks a lot for the explanation! I should've paid closer attention to locks considering the added recursiveness.\n\n97ee63b fixes this by moving the conditionally-locked code into a new `ReadConfigStream` function which is called with locking/clearing in one case and without in the other, based on a `bool lockAndClear` added to `ReadConfigFile`.\n\n(Also had to tweak tests a tiny bi",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-299767955,299767955,
jnewbery,2017-05-15T19:57:19Z,"I think you've introduced a subtle bug here. If `-datadir` is configured in one of the additional config files, then the datadir cache won't be cleared, which means that bitcoind will continue to use the old datadir.\n\nI think you should try to not make ReadConfigFile recursive. For me, it would be acceptable to only allow one level of redirection here (ie the ""base"" config file can specify `-i",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-301586719,301586719,
kallewoof,2017-05-16T00:54:23Z,"@jnewbery Hm, no the datadir cache is cleared after any recursions happen, which means it is always cleared, just not directly after the config file has been parsed. There are two cases:\n1. ParseParameters ([util.cpp:407](https://github.com/kallewoof/bitcoin/blame/feature-config-readconfig-unsquashed/src/util.cpp#L407) called from [bitcoind.cpp:75](https://github.com/kallewoof/bitcoin/blame/feat",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-301644638,301644638,
jnewbery,2017-05-16T15:00:40Z,"@kallewoof yes you're right. datadir cache is cleared after all files are read. My mistake.\n\nI still don't like the recursion and the fact that there can be multiple levels of imports. It means there are more edge cases and unexpected behaviour. For example, if `-includeconf` is included as a command line parameter, then the includeconf file is read *before* the regular conf file, and so takes",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-301810263,301810263,
kallewoof,2017-05-17T02:22:53Z,"@jnewbery Thanks a lot for all the feedback.\n\n> I still don't like the recursion and the fact that there can be multiple levels of imports. It means there are more edge cases and unexpected behaviour. For example, if -includeconf is included as a command line parameter, then the includeconf file is read before the regular conf file, and so takes precedence. If an includeconf line is included i",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-301967013,301967013,
kallewoof,2017-06-01T05:45:24Z,Updated and squashed. [Unsquashed history](https://github.com/kallewoof/bitcoin/tree/feature-config-readconfig-unsquashed).,https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-305394856,305394856,
jnewbery,2017-06-01T13:56:08Z,"Looks great. Tested ACK bc4f7a4b3f614dc2125c6af60da448606b622688\n\nOne suggestion for adding to the testcase. Up to you whether you want to take it.",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-305500672,305500672,
jtimon,2017-06-01T14:32:38Z,"This conflicts a little bit with https://github.com/bitcoin/bitcoin/pull/8994/commits/7246faea3e4421e609e6a24294bd23a45d2343de\n\nThere I use the old ArgsManager::ReadConfigFile(path) which this PR remove.\nCould you conserve that method even if it's temporarily unused (although preferrably using it internally like ""ArgsManager::ReadConfigFile(fs::ifstream& streamConfig)"")?\n\n```\nvoid Args",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-305511658,305511658,
kallewoof,2017-06-05T00:06:30Z,"@jtimon The method was not removed, it was renamed. If you change to `ReadConfigFiles` you should get the exact same result after this is merged. Let me know if that is not the case!",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-306076660,306076660,
jtimon,2017-06-05T19:01:13Z,"The method that is removed is the one that allows you to call with a path, ```ArgsManager::ReadConfigFile(const std::string& confPath)```.  The new ```ReadConfigFiles()``` will work just fine here, but in #8994 I cannot use it, because want I want is precisely to load from a different file (and not allow -includeconf or command line for ""custom chainparams"" configuration). If I use ```AgsManager::",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-306274454,306274454,
kallewoof,2017-06-06T00:35:21Z,"Ohh, damn... It seems the removal of the path may have been premature. What do you think of `ReadConfigFiles()` → `ReadConfigFiles(std::string path = """", bool allowIncludes = true)` whose default does exactly what `ReadConfigFiles` does now? @jtimon @jnewbery",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-306348380,306348380,
jnewbery,2017-06-06T17:14:47Z,I think ReadConfigFiles() shouldn't take any arguments and should be responsible for finding and reading all config files. I don't understand why you'd want to read config files from other places in the codebase in #8994. It seems to me to be much simpler to reason about what config is loaded if it all happens in one place.,https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-306555188,306555188,
jtimon,2017-06-06T23:53:45Z,"@kallewoof yeah, I think that would work too, and you could still call it without parameters. That solution is very simple for me to ""restore"" on #8994 if people don't like it here. There's no need to slow this down if other people don't like my request. Thank you for offering a good and simple solution to my concern.\n\n@jnewbery I don't want the chain custom parameters to be perceived as ""conf",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-306646616,306646616,
jnewbery,2017-06-14T21:12:11Z,"@jtimon \n\n> I don't want the chain custom parameters to be perceived as ""config"".\n\nI actually think having the customchain config file contain general config could be useful. There seemed to be some enthusiasm for #9374 , which is similar in nature - it allows a separate config file for each separate chain.\n\nThis is a bit of a sidetrack from this PR though, which I think is a good and ",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-308559653,308559653,
jnewbery,2017-06-14T21:30:49Z,"alternative: this PR could move the:\n\n```\nfs::ifstream streamConfig(GetConfigFile(confPath));\nif (!streamConfig.good())\n```\nlines into the new `ReadConfigFile()` function instead of leaving them in `ReadConfigFiles()`, and have `ReadConfigFile()` take a `std::string` instead of a `fs::ifstream&`. That would remove some code duplication (since that's called for both the 'base' config fi",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-308564058,308564058,
kallewoof,2017-06-15T03:44:16Z,"@jnewbery I would need to either change the return value to be a success flag for `streamConfig.good()`, or add an additional `bool warnOnFailure` flag, like I had before, as we currently don't warn for the main config missing, but we do warn for `includeconf`s.\n\nRebased, btw.",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-308620359,308620359,
jnewbery,2017-08-14T18:14:39Z,"Required rebase after `gArgs` PR #10607. I've rebased here: https://github.com/jnewbery/bitcoin/tree/pr10267\n\nI've also implemented my suggested change to make `ReadConfigFile` take a `std::string` here: https://github.com/jnewbery/bitcoin/tree/pr10267.1.\n\n@kallewoof - can you let me know what you think? I think this resolves @jtimon's concerns so this doesn't conflict badly with his PR.",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-322266401,322266401,
kallewoof,2017-08-15T03:12:25Z,"@jnewbery Looks great! I rebased and adopted your changes. I tried to pull your commits into my branch but things exploded. Sorry about that. :/\nWill squash if you think ca507fc looks OK. (I picked slightly different varnames from you -- any reason for using snake case? I don't see it used elsewhere.)",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-322366193,322366193,
jnewbery,2017-08-15T14:09:14Z,"@kallewoof - no problem. My branch was just an example. Feel free to do whatever you want with it. (for future reference if you want to take the commits from my branch, easiest way is to add github.com/jnewbery/bitcoin as a remote, then `git fetch` from my remote, then `git reset --hard <sha of my branch>` from your branch).\n\nFor snake case convention, see 'symbol naming conventions' here: htt",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-322476990,322476990,
kallewoof,2017-08-16T05:12:52Z,"@jnewbery That's what I did, but when I tried rebasing master on top of it things exploded. I'll try again.\n\nAs for the symbol naming convention, I'm amazed I didn't catch that considering I'm a big fan of conventions myself. Will definitely start using it. The `m_foo` thing for class member vars looks ugly as hell to me, but ah well.\n\nEdit: worked fine this time. Must've fatfingered somet",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-322668144,322668144,
kallewoof,2017-08-16T09:14:20Z,"@jnewbery Digging, but:\n```\nPOTENTIAL DEADLOCK DETECTED\nPrevious lock order was:\n (1) cs_args  util.cpp:628\n (2) csPathCached  util.cpp:558\nCurrent lock order is:\n (2) csPathCached  util.cpp:558\n (1) cs_args  util.cpp:432\nAssertion failed: (false), function potential_deadlock_detected, file sync.cpp, line 98.\n```\nIt looks like there are two paths that may end up in a deadlock",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-322713074,322713074,
promag,2017-11-23T12:08:48Z,Needs rebase. Is this still valid?,https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-346601837,346601837,
kallewoof,2017-11-24T04:20:46Z,"Rebased. It is valid, yes.",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-346740060,346740060,
meshcollider,2017-12-11T10:40:17Z,"Concept ACK\nN.B. this could be very useful in the context of https://github.com/bitcoin/bitcoin/pull/11862, using `-regtest.includeconf` for example",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-350686669,350686669,
kallewoof,2018-02-23T08:16:26Z,@laanwj Ping (since you self-assigned),https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-367940221,367940221,
kallewoof,2018-03-23T04:30:02Z,"@jnewbery Thanks a lot for review / code suggestions. I'll add multiple includeconf support and then push updated code.\n\nEdit: I put some comments on your commit, and made the changes on my end.",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-375541721,375541721,
kallewoof,2018-03-23T08:09:23Z,"This PR times out on job 2 without the timeout bump in 47848d0. I have not investigated the cause for this increase, and I find it unlikely that the new tests would be the actual cause.",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-375574743,375574743,
jnewbery,2018-03-23T19:10:20Z,"The travis job is timing out when running `make check` (the unit tests):\n\n```\n$ if [ ""$RUN_TESTS"" = ""true"" ]; then travis_wait 40 make $MAKEJOBS check VERBOSE=1; fi    1913.41s\n```\n\nHere's the end of the output from that command:\n\n```\nmake[1]: Leaving directory `/home/travis/build/bitcoin/bitcoin/build/bitcoin-i686-w64-mingw32'\n/home/travis/.travis/job_stages: line 169: 28077 T",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-375770224,375770224,
ryanofsky,2018-03-23T19:26:37Z,"> @MarcoFalke / @laanwj - any idea why the unit tests would stall for half an hour here?\n\nSomething must have changed recently, but I think one reason why tests are slow is that they are running using wine to emulate windows. I'm also seeing the same timeouts with 11851.\n\n",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-375774124,375774124,
MarcoFalke,2018-03-23T19:33:29Z,"I am fine with bumping to 40 or 50 minutes. In case we need that much time, it will time out due to the global limit anyway. The long term solution would be to somehow speed up the unit tests on Wine, but that doesn't have to block this (and other) pull requests.\n\nCould cherry-pick that change to a separate pull request, though.",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-375775708,375775708,
jnewbery,2018-03-23T20:00:13Z,"> Could cherry-pick that change to a separate pull request, though.\n\nHere you go: #12772",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-375782090,375782090,
jnewbery,2018-04-16T19:11:55Z,"#11862 is merged. Please rebase.\n\nI'll commit to re-reviewing this once it's rebased.",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-381716576,381716576,
kallewoof,2018-04-17T04:40:39Z,"Edit: resolved. I am now checking both `""-includeconf""` and `""-"" + GetChainName() + "".includeconf""` explicitly.",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-381838265,381838265,
kallewoof,2018-04-18T01:30:44Z,Addressed @jnewbery nits (sans bracket removal).,https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-382214756,382214756,
kallewoof,2018-04-18T05:22:43Z,"@ajtowns \n\n> I think this is subtly ""wrong"" fwiw: if you have [main] includeconf=foo.conf in bitcoin.conf, and then set testnet=1 in foo.conf, you'll have foo.conf included, and be running testnet not mainnet, so you ""shouldn't"" have included foo.conf (and any other settings from the [main] section won't have been used). That might be too subtle to worry about though.\n\nI don't think we nee",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-382265510,382265510,
kallewoof,2018-04-18T05:37:23Z,"@ajtowns Thanks for review! I believe I addressed your concerns, except for the discussion ^.",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-382267874,382267874,
jnewbery,2018-04-18T14:08:13Z,"ACK f083a0e57ca7c991af56425e44cb5aeeaa383a50 with a couple of comments.\n\nI agree with @kallewoof that the include precedence in the current implementation is fine. Perhaps more detailed documentation would satisfy @ajtowns ?",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-382399228,382399228,
ajtowns,2018-04-18T15:30:41Z,"I'd be happier if there weren't any weird edge cases, but I'm okay with not fixing them. I'll have another look over the latest commits tomorrow, but expect I'd beh appy to ack them as is.",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-382428494,382428494,
kallewoof,2018-04-19T01:01:12Z,"After testing `-noincludeconf`, I did some tweaks so that you *can* do `-noincludeconf` from command line to disable `includeconf` stuff inside the main config file.",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-382575752,382575752,
kallewoof,2018-04-19T03:06:44Z,"Addressed @promag nits.\n\nEdit: Actually, hm. I didn't address the release note point. Will make another update after verifying behavior.\n\nEdit 2: I believe I covered the specific case @promag is talking about now.",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-382595503,382595503,
laanwj,2018-04-25T09:12:17Z,utACK 8eebf2a55f43bbcf83b64051f5d1a6355b0d0145,https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-384218656,384218656,
laanwj,2018-04-25T11:46:34Z,@kallewoof Feel free to take over https://github.com/laanwj/bitcoin/commit/57b1b57cba84ea60e4de7cc0549aa448132e7573  to fix the stderr issue (and check stderr output),https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-384258422,384258422,
kallewoof,2018-04-26T03:45:33Z,"@laanwj Ohh, nice. Thanks for the fix. I squashed it into 488f947.",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-384503926,384503926,
jnewbery,2018-04-30T20:54:36Z,"I'd prefer to not to have special stderr checking for this test. I have a PR open here: #12755 which adds stderr checking to the test framework.\n\nI've also prepared a branch here: https://github.com/bitcoin/bitcoin/compare/master...jnewbery:pr10267.3?expand=1 which rebases this PR on #12755 and adds explicit stderr checking.\n\nWould you mind either:\n- removing the stderr checking from thi",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-385525703,385525703,
kallewoof,2018-05-01T04:31:26Z,@jnewbery Wouldn't it be simpler to fix this in a follow-up PR once #12755 is merged?,https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-385596813,385596813,
kallewoof,2018-05-02T05:27:59Z,@jnewbery Thanks for review! Addressed your nits.,https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-385868625,385868625,
kallewoof,2018-05-02T05:31:26Z,"@jnewbery I'm a little confused. Should I close this PR in favor of #12755? I thought #12755 only added the error stuff, but it includes this PR as well now.",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-385869030,385869030,
jnewbery,2018-05-03T19:48:28Z,"Tested ACK 25b7ab9c02f691be6c1aa71a9cf51ac1a6ea9db4.\n\n>  I'm a little confused. Should I close this PR in favor of #12755? I thought #12755 only added the error stuff, but it includes this PR as well now.\n\nSorry - I haven't been very clear in my updates. Now that this PR includes stderr testing, it conflicts with #12755. My initial suggestions were to remove the stderr testing from this te",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-386414819,386414819,
jnewbery,2018-05-08T19:11:59Z,"I think this is very nearly ready for merge. Are previous reviewers @laanwj, @ajtowns @promag, @ryanofsky, @MarcoFalke @MeshCollider, @jonasschnelli able to re-review this?",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-387510818,387510818,
laanwj,2018-05-08T19:40:06Z,utACK 25b7ab9c02f691be6c1aa71a9cf51ac1a6ea9db4\n\n\n,https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-387518534,387518534,
promag,2018-05-08T21:20:31Z,"utACK 25b7ab9.\n\nI suggest to add a warning if -includeconf is used in  an included file (follow up PR).",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-387546144,387546144,
practicalswift,2018-05-12T20:30:42Z,"When working on the locking annotations (see #13126) I noticed that `ArgsManager::ReadConfigFiles()` introduced in this PR accesses `m_override_args` without first locking `cs_args`.\n\nThe PR #13126 adds the correct locking. FWIW Travis will catch this type of `cs_args` locking violations when #13126 is merged :-)",https://github.com/bitcoin/bitcoin/pull/10267#issuecomment-388580967,388580967,
jnewbery,2017-05-31T19:52:40Z,"I think it'd be clearer to rename this to `ReadConfigFiles()`. You could remove the `confPath` argument since it's a property of the `ArgsManager` class. The three places where this is called can just call `gArgs.ReadConfigFiles()`.\n\nThe responsibilities of this function then becomes very clear: read all the config files.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119456769,119456769,src/util.cpp
jnewbery,2017-05-31T19:53:57Z,"I'd prefer to name this function ReadConfigFile(). At the moment, the only type of input it can read is a file, so naming it `ReadInputStream()` is a little misleading.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119457041,119457041,src/util.cpp
jnewbery,2017-05-31T20:02:39Z,Can we have an else clause that prints an error message if we fail to open an includeconfig file?,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119459000,119459000,src/util.cpp
jnewbery,2017-05-31T20:02:41Z,"Why not directly:\n\n```\nfs::ifstream includeConfig(GetConfigFile(includeconf));\n```\n\n(like above)\n",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119459007,119459007,src/util.cpp
jnewbery,2017-05-31T20:04:15Z,"Is it possible to add a log to this function to output which file it's reading, or is it too early to start logging?\n\nSorry - by my earlier comment, I didn't mean you should remove the logging on failure, just that the structure of the function suggested to me that it shouldn't be called recursively.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119459369,119459369,src/util.cpp
jnewbery,2017-05-31T20:08:27Z,not required. `setup_network()` in the base class just calls `setup_nodes()` when there's only one node.,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119460309,119460309,test/functional/includeconf.py
jnewbery,2017-05-31T20:08:46Z,no space before open parentheses please. ,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119460371,119460371,test/functional/includeconf.py
jnewbery,2017-05-31T20:08:56Z,nit: spaces around `+` please,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119460418,119460418,test/functional/includeconf.py
jnewbery,2017-05-31T20:09:28Z,My personal preference is to have the description of the test in the module-level doc string (since that's the first thing people see when they open the file).,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119460514,119460514,test/functional/includeconf.py
jnewbery,2017-05-31T20:10:43Z,"It'd be nice to have a couple of other subtests:\n\n- including `--includeconf` in the command line argument has no effect\n- including `includeconf` in an includeconf file has no effect.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119460768,119460768,test/functional/includeconf.py
kallewoof,2017-06-01T03:26:28Z,"I named if for the fact it got an`ifstream` as argument, but you're right that it's probably better to just name it `ReadConfigFile`.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119521331,119521331,src/util.cpp
kallewoof,2017-06-01T03:27:05Z,I am logging before the call to this method now. That should cover it I think.,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119521387,119521387,src/util.cpp
kallewoof,2017-06-01T03:27:19Z,Done!,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119521430,119521430,src/util.cpp
kallewoof,2017-06-01T03:29:07Z,"I'm not sure what a neat and tidy way to test that would look like. Should I just make multiple classes, one for each, and then call them one at a time in the bottom `if __name__ == '__main__':`?",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119521548,119521548,test/functional/includeconf.py
jnewbery,2017-06-01T13:55:14Z,"These don't actually need to be separate tests. You can just have the following in `setup_chain()`:\n\n```python\n        with open(os.path.join(self.options.tmpdir + ""/node0"", ""relative.conf""), ""w"", encoding=""utf8"") as f:\n            f.write(""uacomment=relative\nincludeconf=relativeofrelative.conf\n"")\n        with open(os.path.join(self.options.tmpdir + ""/node0"", ""bitcoin.conf""), 'a', enco",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119619962,119619962,test/functional/includeconf.py
jtimon,2017-06-01T14:34:34Z,"Shouldn't ClearDatadirCache() be called from ArgsManager::ReadConfigFile(fs::ifstream& streamConfig) ?\n",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r119630957,119630957,src/util.cpp
kallewoof,2017-06-05T00:05:49Z,"ReadConfigFile is only called from ReadConfigFiles, which clears the data cache already, so it should be fine I think.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r120025037,120025037,src/util.cpp
jtimon,2017-06-05T18:50:59Z,"Yes, unless you conserve a ```ArgsManager::ReadConfigFile(const std::string& confPath)```, then that will presumably call call ```ArgsManager::ReadConfigFile(fs::ifstream& streamConfig``` too.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r120181681,120181681,src/util.cpp
jnewbery,2018-03-20T14:51:03Z,No need to update this file.,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r175794947,175794947,doc/man/bitcoin-qt.1
jnewbery,2018-03-20T14:51:10Z,No need to update this file.,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r175794997,175794997,doc/man/bitcoind.1
jnewbery,2018-03-20T14:51:38Z,No need to update this file.,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r175795168,175795168,src/qt/bitcoinstrings.cpp
jnewbery,2018-03-20T14:53:07Z,This should be the only change in your second commit. I recommend just squashing it with the first commit.,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r175795753,175795753,src/init.cpp
jnewbery,2018-03-20T15:27:18Z,"I think it'd be useful to be able to include multiple `-includeconf` arguments in the main config file (for example, if we want a `main.includeconf`, `test.includeconf` and `regtest.includeconf`). Can you make this a string vector and then iterate through the `includeconf`s?",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r175810328,175810328,src/util.cpp
jnewbery,2018-03-20T15:30:00Z,This test now needs to be named `feature_includeconf`,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r175811425,175811425,test/functional/includeconf.py
kallewoof,2018-03-23T04:00:49Z,"Oh, coolness.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r176634706,176634706,src/init.cpp
kallewoof,2018-03-23T04:01:57Z,"That makes sense, yeah.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r176634795,176634795,src/util.cpp
jnewbery,2018-03-23T19:29:41Z,Can remove ` (Currently fails)`,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r176842599,176842599,test/functional/feature_includeconf.py
kallewoof,2018-03-24T03:30:59Z,"Thanks, fixed.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r176898318,176898318,test/functional/feature_includeconf.py
jnewbery,2018-04-17T20:08:58Z,Help text could be expanded a bit to say that this can't be set from the command line - only from within the .conf file.,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182209546,182209546,src/init.cpp
jnewbery,2018-04-17T20:58:05Z,"I was going to say that this isn't required because `ArgsManager::GetArgs()` already checks the network-specific config. However, we haven't yet set `m_network` (that only happens in `SelectParams()`) so you're right and you do need this manual check.\n\nI don't know if there's a better way to avoid doing this manually. Perhaps @ajtowns can suggest something? At the least, I think you should add",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182231465,182231465,src/util.cpp
kallewoof,2018-04-18T00:52:29Z,I thought I had done that already. Fixing.,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182282359,182282359,src/init.cpp
kallewoof,2018-04-18T00:52:52Z,"Good point on adding comment. I added braces to throw `includeconf_net` out of scope as it was no longer used, and this makes that obvious.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182282430,182282430,src/util.cpp
kallewoof,2018-04-18T01:04:57Z,Updated. Feedback welcome!,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182283781,182283781,src/init.cpp
ajtowns,2018-04-18T03:31:54Z,Should use doc/release-notes-pr10267.md instead?,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182300203,182300203,doc/release-notes.md
ajtowns,2018-04-18T03:32:58Z,Seems like this change should have been in the `-includepath` commit,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182300289,182300289,src/init.cpp
ajtowns,2018-04-18T03:35:17Z,Should this issue a warning rather than just silently ignoring it? I'd be inclined to move this check into `ParseParameters` fwiw.,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182300485,182300485,src/util.cpp
ajtowns,2018-04-18T04:30:53Z,"I think this is subtly ""wrong"" fwiw: if you have `[main] includeconf=foo.conf` in bitcoin.conf, and then set `testnet=1` in foo.conf, you'll have foo.conf included, and be running testnet not mainnet, so you ""shouldn't"" have included foo.conf (and any other settings from the [main] section won't have been used). That might be too subtle to worry about though.\n\nIt's perhaps less subtly wrong in",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182305880,182305880,src/util.cpp
ajtowns,2018-04-18T04:35:44Z,"I was expecting subversion to end with ""main; relative"", which would ensure relative.conf's options are being used despite it trying to recurse into relative2. No big deal either way.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182306366,182306366,test/functional/feature_includeconf.py
kallewoof,2018-04-18T04:59:48Z,"Should that be a new file with only the changes, or a copy of `doc/release-notes.md`? Never seen that way of adding release notes before.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182309263,182309263,doc/release-notes.md
kallewoof,2018-04-18T05:00:13Z,"You mean the `-includeconf` commit? I tend to separate doc and code commits, usually.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182309304,182309304,src/init.cpp
kallewoof,2018-04-18T05:01:02Z,"A warning would probably be helpful, yeah. Will look into moving into `ParseParameters`.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182309378,182309378,src/util.cpp
kallewoof,2018-04-18T05:05:53Z,Good point -- I am readding `uacomment=relative\n` to `relative.conf` and checking that subversion ends with `main; relative)`.,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182309989,182309989,test/functional/feature_includeconf.py
ajtowns,2018-04-18T05:10:42Z,"Err, yeah. You add the help message in the -includeconf commit, then change it in the release notes commit.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182310473,182310473,src/init.cpp
ajtowns,2018-04-18T05:12:19Z,"It's brand new! Just a new file with the section you want to add. There's a couple there already (12823, 12892) to use as examples.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182310660,182310660,doc/release-notes.md
kallewoof,2018-04-18T05:36:17Z,OH. Fixed! Thanks...,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182313273,182313273,src/init.cpp
kallewoof,2018-04-18T05:36:54Z,"Warning added -- I used `fprintf(stderr, ..)` though, cause it hasn't processed `-printtoconsole` or anything yet.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182313367,182313367,src/util.cpp
jnewbery,2018-04-18T13:49:03Z,"I think that these are good observations, but that we don't necessarily need to police such pathological edge-cases. The special casing for `[regtest] testnet=1` etc in https://github.com/bitcoin/bitcoin/pull/11862/commits/005ad266491f43d7a9bfd959396037416cb32a55 was useful because it's easy enough to have a config file like:\n\n```\noption1=0\noption2=1\n[regtest]\noption3=1\n```\n\nand ",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182432653,182432653,src/util.cpp
jnewbery,2018-04-18T13:57:36Z,"May be clearer to append to the config file, rather than rewrite the `uacomment` param:\n\n```python\n        with open(os.path.join(self.options.tmpdir + ""/node0"", ""relative.conf""), ""a"", encoding=""utf8"") as f:\n            f.write(""includeconf=relative2.conf\n"")\n```\n\nalthough you may disagree, in which case it's fine to leave as is!\n\nYou should certainly update the log above though:",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182435641,182435641,test/functional/feature_includeconf.py
jnewbery,2018-04-18T14:06:53Z,"@kallewoof \n\n>  I added braces to throw includeconf_net out of scope\n\nI don't know of any other places in the codebase that add blocks to throw local variables out of scope. Obviously functionally the same, but I'd personally have a preference to not add code blocks like this, since it makes the code slightly less clear.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182439174,182439174,src/util.cpp
kallewoof,2018-04-18T23:23:13Z,Makes sense! Fixed.,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182597187,182597187,test/functional/feature_includeconf.py
promag,2018-04-18T23:42:56Z,"This should be a loop, otherwise only the first `-includeconf` is removed from `m_override_args`. Also update comment above accordingly.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182600198,182600198,src/util.cpp
promag,2018-04-18T23:46:33Z,Maybe `Skipping invalid configuration file ...`?,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182600785,182600785,src/util.cpp
promag,2018-04-18T23:52:13Z,Prefer to log the success case since you also log the failure case?,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182601598,182601598,src/util.cpp
promag,2018-04-18T23:54:02Z,"Nit, keep sorted?",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182601882,182601882,src/init.cpp
promag,2018-04-18T23:55:16Z,"Nit, remove extra `-`.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182602070,182602070,doc/release-notes-pr10267.md
promag,2018-04-19T00:06:23Z,"Agree with @jnewbery, there is no reason to do this. At first sight I thought there was a lock somewhere.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182603623,182603623,src/util.cpp
kallewoof,2018-04-19T00:19:19Z,"It is defined as a `std::map<std::string, std::vector<std::string>>`, which may only have one entry per key. It removes the vector itself, which may contain multiple values. (I am only showing the first for simplicity in the error output.)",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182605242,182605242,src/util.cpp
kallewoof,2018-04-19T00:21:41Z,"Addressing the nit below (log success), I believe the current form looks better:\n```C++\n                    LogPrintf(""Included configuration file %s\n"", to_include.c_str());\n                } else {\n                    LogPrintf(""Failed to include configuration file %s\n"", to_include.c_str());\n```",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182605519,182605519,src/util.cpp
kallewoof,2018-04-19T00:22:31Z,"Holy crap, it's sorted! No idea how I failed to see that. Thanks.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182605641,182605641,src/init.cpp
promag,2018-04-19T00:25:02Z,Right. Either log all or nothing?,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182605997,182605997,src/util.cpp
promag,2018-04-19T00:29:53Z,Remove this condition. If it's empty then there is nothing to loop below.,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182606658,182606658,src/util.cpp
kallewoof,2018-04-19T00:31:49Z,Makes sense. Added loop over vector.,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182606905,182606905,src/util.cpp
kallewoof,2018-04-19T00:32:53Z,"If someone does `-noincludeconf`, I believe it will exist, but the vector will be empty. See line 682, which adds the key to the map, but clears it (the vector, not the map).",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182607042,182607042,src/util.cpp
kallewoof,2018-04-19T00:34:28Z,"Sorry, line 950, not 682. 682 is for `m_override_args`.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182607235,182607235,src/util.cpp
kallewoof,2018-04-19T00:36:37Z,"Actually, nevermind, you're right. The for loop will just skip.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182607501,182607501,src/util.cpp
promag,2018-04-19T01:34:26Z,`printf`?,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182614119,182614119,src/util.cpp
promag,2018-04-19T01:34:42Z,`fprintf(stderr`?,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r182614146,182614146,src/util.cpp
jnewbery,2018-04-24T16:16:10Z,"I don't understand why this is a print statement. It'll get printed every time bitcoind or bitcoin-qt is started, and each time bitcoin-cli is called.\n\nI think just a normal log here is fine.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r183794447,183794447,src/util.cpp
jnewbery,2018-04-24T16:16:43Z,Can you add a comment to explain why you're checking that count == 0?,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r183794610,183794610,src/util.cpp
jnewbery,2018-04-24T16:25:46Z,"It'd be nice if we could be more aggressive here and fail to start if a `-includeconf` argument is provided on the command line (since continuing to startup would be continuing with config that the user has specified that they don't want).\n\n`ParseParameters()` doesn't currently have a way to return errors, and callers don't wrap calls with try-except (unlike `GetChainName()` for example). Perh",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r183797689,183797689,src/util.cpp
jnewbery,2018-04-24T16:32:04Z,"nit: prefer `os.path.join(self.options.tmpdir, ""node0"", ""relative.conf"")` for better portability.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r183799692,183799692,test/functional/feature_includeconf.py
kallewoof,2018-04-25T02:24:03Z,The reason is because `-printtoconsole` or `-debug` etc. have not been activated yet. A log would effectively be a NOP.,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r183929801,183929801,src/util.cpp
kallewoof,2018-04-25T02:29:58Z,"Makes sense. I'm leaving it for now as it sounds like a future thing, I think.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r183930353,183930353,src/util.cpp
kallewoof,2018-04-25T05:54:12Z,"Hm, you're right that it prints every time you call bitcoin-cli etc. That's ugly. I'll think of something.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r183947741,183947741,src/util.cpp
kallewoof,2018-04-25T06:10:46Z,"I'm removing this entirely. As LogPrintf it is NOP and as printf it is ugly. I think we can live without being told the include was successful. The error case will be spammy, but I think that's okay.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r183949676,183949676,src/util.cpp
laanwj,2018-04-25T08:05:20Z,"`fprintf(stderr, ...`?",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r183971226,183971226,src/util.cpp
kallewoof,2018-04-25T08:10:29Z,Makes sense. Done.,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r183972503,183972503,src/util.cpp
kallewoof,2018-04-25T08:31:40Z,"Actually, I remember now. The reason was because travis fails for certain tests when using fprintf.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r183978555,183978555,src/util.cpp
laanwj,2018-04-25T08:48:55Z,Should probably fix the test instead in that case :-),https://github.com/bitcoin/bitcoin/pull/10267#discussion_r183983398,183983398,src/util.cpp
kallewoof,2018-04-25T09:04:44Z,I thought it was a travis internal thing to automatically assume error when stderr was printed to. I can't find any reference to this though... digging.,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r183987899,183987899,src/util.cpp
kallewoof,2018-04-25T09:10:41Z,"It's actually `test_runner.py`, not travis. Digging more.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r183989514,183989514,src/util.cpp
ajtowns,2018-04-25T23:05:29Z,LogPrintf gets stored and replayed when going to a logfile; we could fix it so the same thing happens with printtoconsole?,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r184230829,184230829,src/util.cpp
kallewoof,2018-04-26T03:41:10Z,"@ajtowns Really? I thought I checked the log file and didn't see it. If it is replayed, I should add it back.",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r184263533,184263533,src/util.cpp
kallewoof,2018-04-26T03:46:43Z,I restored LogPrintf line.,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r184264063,184264063,src/util.cpp
ajtowns,2018-04-26T12:16:20Z,#13088 should add support replay for console logs as well as debug.log fwiw,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r184366910,184366910,src/util.cpp
jnewbery,2018-05-01T13:42:07Z,"nit: PEP8 import ordering please (std library first, then local application imports)",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r185223531,185223531,test/functional/feature_includeconf.py
jnewbery,2018-05-01T13:44:10Z,micronit: all other tests have `set_test_params()` as the first method. I think that makes more logical sense since that method is called by `__init__()`. Do you mind doing the same here?,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r185223953,185223953,test/functional/feature_includeconf.py
MarcoFalke,2018-06-01T20:13:27Z,"nit: should probably be an (init)error, since it is clearly an invalid command line",https://github.com/bitcoin/bitcoin/pull/10267#discussion_r192503723,192503723,test/functional/feature_includeconf.py
MarcoFalke,2018-06-01T20:14:43Z,nit: return false on error?,https://github.com/bitcoin/bitcoin/pull/10267#discussion_r192504008,192504008,src/util.cpp
