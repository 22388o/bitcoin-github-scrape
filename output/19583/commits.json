[
  {
    "sha": "634144a1c2a3506fd6285e76f3ce0cbb3648cc69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzQxNDRhMWMyYTM1MDZmZDYyODVlNzZmM2NlMGNiYjM2NDhjYzY5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-07-24T07:03:48Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-07-25T14:49:24Z"
      },
      "message": "[net processing] Fixup MaybeDiscourageAndDisconnect() style\n\nBased on review comments from Marco Falke and Jon Atack.",
      "tree": {
        "sha": "6ab0d71d53aed91c843d2bf11fcdc5d1557681b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ab0d71d53aed91c843d2bf11fcdc5d1557681b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/634144a1c2a3506fd6285e76f3ce0cbb3648cc69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/634144a1c2a3506fd6285e76f3ce0cbb3648cc69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/634144a1c2a3506fd6285e76f3ce0cbb3648cc69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/634144a1c2a3506fd6285e76f3ce0cbb3648cc69/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40a04814d130dfc9131af3f568eb44533e2bcbfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40a04814d130dfc9131af3f568eb44533e2bcbfc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40a04814d130dfc9131af3f568eb44533e2bcbfc"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "b0d6f4f04f7ce19fd7883c767ea01864514155bc",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/634144a1c2a3506fd6285e76f3ce0cbb3648cc69/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/634144a1c2a3506fd6285e76f3ce0cbb3648cc69/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=634144a1c2a3506fd6285e76f3ce0cbb3648cc69",
        "patch": "@@ -3723,32 +3723,32 @@ void ProcessMessage(\n  */\n bool PeerLogicValidation::MaybeDiscourageAndDisconnect(CNode& pnode)\n {\n-    NodeId peer_id{pnode.GetId()};\n+    const NodeId peer_id{pnode.GetId()};\n     {\n         LOCK(cs_main);\n-        CNodeState &state = *State(peer_id);\n+        CNodeState& state = *State(peer_id);\n \n         // There's nothing to do if the m_should_discourage flag isn't set\n         if (!state.m_should_discourage) return false;\n \n-        // Reset m_should_discourage\n         state.m_should_discourage = false;\n     } // cs_main\n \n     if (pnode.HasPermission(PF_NOBAN)) {\n-        // Peer has the NOBAN permission flag - log but don't disconnect\n+        // We never disconnect or discourage peers for bad behavior if they have the NOBAN permission flag\n         LogPrintf(\"Warning: not punishing noban peer %d!\\n\", peer_id);\n         return false;\n     }\n \n     if (pnode.m_manual_connection) {\n-        // Peer is a manual connection - log but don't disconnect\n+        // We never disconnect or discourage manual peers for bad behavior\n         LogPrintf(\"Warning: not punishing manually connected peer %d!\\n\", peer_id);\n         return false;\n     }\n \n     if (pnode.addr.IsLocal()) {\n-        // Peer is on a local address. Disconnect this peer, but don't discourage the local address\n+        // We disconnect local peers for bad behavior but don't discourage (since that would discourage\n+        // all peers on the same local address)\n         LogPrintf(\"Warning: disconnecting but not discouraging local peer %d!\\n\", peer_id);\n         pnode.fDisconnect = true;\n         return true;"
      }
    ]
  },
  {
    "sha": "d15b3afb4cd1b00ad698e6dd19c5861a53e01c42",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTViM2FmYjRjZDFiMDBhZDY5OGU2ZGQxOWM1ODYxYTUzZTAxYzQy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-19T16:05:31Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-07-25T14:50:34Z"
      },
      "message": "[net processing] Always supply debug message to Misbehaving()\n\nMisbehaving() could optionally take a debug string for printing to the\nlog file. Make this mandatory and always provide the string.\n\nA couple of additional minor changes:\n\n- remove the unnecessary forward declaration of Misbehaving()\n- don't include the nodeid or newline in the passed debug message.\nMisbehaving() adds these itself.",
      "tree": {
        "sha": "4db0e8f9a45eb581285dc699d0e4695c54968202",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4db0e8f9a45eb581285dc699d0e4695c54968202"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d15b3afb4cd1b00ad698e6dd19c5861a53e01c42",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d15b3afb4cd1b00ad698e6dd19c5861a53e01c42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d15b3afb4cd1b00ad698e6dd19c5861a53e01c42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d15b3afb4cd1b00ad698e6dd19c5861a53e01c42/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "634144a1c2a3506fd6285e76f3ce0cbb3648cc69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/634144a1c2a3506fd6285e76f3ce0cbb3648cc69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/634144a1c2a3506fd6285e76f3ce0cbb3648cc69"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 9,
      "deletions": 12
    },
    "files": [
      {
        "sha": "4bc32bca56fe3f65d1e0b4d9331af5c5a1e3b5f3",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d15b3afb4cd1b00ad698e6dd19c5861a53e01c42/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d15b3afb4cd1b00ad698e6dd19c5861a53e01c42/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d15b3afb4cd1b00ad698e6dd19c5861a53e01c42",
        "patch": "@@ -157,9 +157,6 @@ std::map<uint256, std::map<uint256, COrphanTx>::iterator> g_orphans_by_wtxid GUA\n \n void EraseOrphansFor(NodeId peer);\n \n-/** Increase a node's misbehavior score. */\n-void Misbehaving(NodeId nodeid, int howmuch, const std::string& message=\"\") EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-\n // Internal stuff\n namespace {\n     /** Number of nodes with fSyncStarted. */\n@@ -1799,7 +1796,7 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     for (size_t i = 0; i < req.indexes.size(); i++) {\n         if (req.indexes[i] >= block.vtx.size()) {\n             LOCK(cs_main);\n-            Misbehaving(pfrom.GetId(), 100, strprintf(\"Peer %d sent us a getblocktxn with out-of-bounds tx indices\", pfrom.GetId()));\n+            Misbehaving(pfrom.GetId(), 100, \"getblocktxn with out-of-bounds tx indices\");\n             return;\n         }\n         resp.txn[i] = block.vtx[req.indexes[i]];\n@@ -1848,7 +1845,7 @@ static void ProcessHeadersMessage(CNode& pfrom, CConnman& connman, ChainstateMan\n             UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n \n             if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(pfrom.GetId(), 20);\n+                Misbehaving(pfrom.GetId(), 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n             }\n             return;\n         }\n@@ -2307,7 +2304,7 @@ void ProcessMessage(\n         if (pfrom.nVersion != 0)\n         {\n             LOCK(cs_main);\n-            Misbehaving(pfrom.GetId(), 1);\n+            Misbehaving(pfrom.GetId(), 1, \"redundant version message\");\n             return;\n         }\n \n@@ -2468,7 +2465,7 @@ void ProcessMessage(\n     if (pfrom.nVersion == 0) {\n         // Must have a version message before anything else\n         LOCK(cs_main);\n-        Misbehaving(pfrom.GetId(), 1);\n+        Misbehaving(pfrom.GetId(), 1, \"non-version message before version handshake\");\n         return;\n     }\n \n@@ -2535,7 +2532,7 @@ void ProcessMessage(\n     if (!pfrom.fSuccessfullyConnected) {\n         // Must have a verack message before anything else\n         LOCK(cs_main);\n-        Misbehaving(pfrom.GetId(), 1);\n+        Misbehaving(pfrom.GetId(), 1, \"non-verack message before version handshake\");\n         return;\n     }\n \n@@ -3203,7 +3200,7 @@ void ProcessMessage(\n                 ReadStatus status = partialBlock.InitData(cmpctblock, vExtraTxnForCompact);\n                 if (status == READ_STATUS_INVALID) {\n                     MarkBlockAsReceived(pindex->GetBlockHash()); // Reset in-flight state in case Misbehaving does not result in a disconnect\n-                    Misbehaving(pfrom.GetId(), 100, strprintf(\"Peer %d sent us invalid compact block\\n\", pfrom.GetId()));\n+                    Misbehaving(pfrom.GetId(), 100, \"invalid compact block\");\n                     return;\n                 } else if (status == READ_STATUS_FAILED) {\n                     // Duplicate txindexes, the block is now in-flight, so just request it\n@@ -3336,7 +3333,7 @@ void ProcessMessage(\n             ReadStatus status = partialBlock.FillBlock(*pblock, resp.txn);\n             if (status == READ_STATUS_INVALID) {\n                 MarkBlockAsReceived(resp.blockhash); // Reset in-flight state in case Misbehaving does not result in a disconnect\n-                Misbehaving(pfrom.GetId(), 100, strprintf(\"Peer %d sent us invalid compact block/non-matching block transactions\\n\", pfrom.GetId()));\n+                Misbehaving(pfrom.GetId(), 100, \"invalid compact block/non-matching block transactions\");\n                 return;\n             } else if (status == READ_STATUS_FAILED) {\n                 // Might have collided, fall back to getdata now :(\n@@ -3605,7 +3602,7 @@ void ProcessMessage(\n         {\n             // There is no excuse for sending a too-large filter\n             LOCK(cs_main);\n-            Misbehaving(pfrom.GetId(), 100);\n+            Misbehaving(pfrom.GetId(), 100, \"too-large bloom filter\");\n         }\n         else if (pfrom.m_tx_relay != nullptr)\n         {\n@@ -3639,7 +3636,7 @@ void ProcessMessage(\n         }\n         if (bad) {\n             LOCK(cs_main);\n-            Misbehaving(pfrom.GetId(), 100);\n+            Misbehaving(pfrom.GetId(), 100, \"bad filteradd message\");\n         }\n         return;\n     }"
      }
    ]
  },
  {
    "sha": "a8865f8b7215a975fd3dd9d97d7f791ac93ea65d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODg2NWY4YjcyMTVhOTc1ZmQzZGQ5ZDk3ZDdmNzkxYWM5M2VhNjVk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-19T16:19:41Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-07-25T14:52:23Z"
      },
      "message": "[net processing] Tidy up Misbehaving()\n\n- Make const things const.\n- Replace conditional return with assert.\n- Don't log the peer's IP address.\n- Log the name Misbehaving directly instead of relying on __func__.",
      "tree": {
        "sha": "b689616184dd5d771a6a71e080907c84cc829c65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b689616184dd5d771a6a71e080907c84cc829c65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8865f8b7215a975fd3dd9d97d7f791ac93ea65d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8865f8b7215a975fd3dd9d97d7f791ac93ea65d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8865f8b7215a975fd3dd9d97d7f791ac93ea65d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8865f8b7215a975fd3dd9d97d7f791ac93ea65d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d15b3afb4cd1b00ad698e6dd19c5861a53e01c42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d15b3afb4cd1b00ad698e6dd19c5861a53e01c42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d15b3afb4cd1b00ad698e6dd19c5861a53e01c42"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 9,
      "deletions": 10
    },
    "files": [
      {
        "sha": "ca701a7e5b2ef2f8b65f595c38867ff7629ebfda",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8865f8b7215a975fd3dd9d97d7f791ac93ea65d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8865f8b7215a975fd3dd9d97d7f791ac93ea65d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a8865f8b7215a975fd3dd9d97d7f791ac93ea65d",
        "patch": "@@ -1059,23 +1059,22 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n  * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node\n  * to be discouraged, meaning the peer might be disconnected and added to the discouragement filter.\n  */\n-void Misbehaving(NodeId pnode, int howmuch, const std::string& message) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    if (howmuch == 0)\n-        return;\n+    assert(howmuch > 0);\n \n-    CNodeState *state = State(pnode);\n-    if (state == nullptr)\n-        return;\n+    CNodeState* const state = State(pnode);\n+    if (state == nullptr) return;\n \n     state->nMisbehavior += howmuch;\n-    std::string message_prefixed = message.empty() ? \"\" : (\": \" + message);\n+    const std::string message_prefixed = message.empty() ? \"\" : (\": \" + message);\n     if (state->nMisbehavior >= DISCOURAGEMENT_THRESHOLD && state->nMisbehavior - howmuch < DISCOURAGEMENT_THRESHOLD)\n     {\n-        LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d) DISCOURAGE THRESHOLD EXCEEDED%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n+        LogPrint(BCLog::NET, \"Misbehaving: peer=%d (%d -> %d) DISCOURAGE THRESHOLD EXCEEDED%s\\n\", pnode, state->nMisbehavior - howmuch, state->nMisbehavior, message_prefixed);\n         state->m_should_discourage = true;\n-    } else\n-        LogPrint(BCLog::NET, \"%s: %s peer=%d (%d -> %d)%s\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior, message_prefixed);\n+    } else {\n+        LogPrint(BCLog::NET, \"Misbehaving: peer=%d (%d -> %d)%s\\n\", pnode, state->nMisbehavior - howmuch, state->nMisbehavior, message_prefixed);\n+    }\n }\n \n /**"
      }
    ]
  }
]