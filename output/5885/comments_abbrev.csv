gmaxwell,2015-03-12T20:50:44Z,"I'm happy about this approach.\n\nWe've seen operating system RNG's fail silently in really frightening ways several times over the last few years,  a belt-and-suspenders approach where silent failure at least gets a best effort bit of entropy-snake-oil (or maybe not so snakeoil: after going and writing a bunch of entropy collecting code I'm more impressed with the performance than I expected) see",https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-78611027,78611027,
laanwj,2015-03-13T12:21:32Z,"Concept ACK, although as discussed I'd prefer it as a subtree'd external library like secp256k1 and leveldb - so that other (wallet) software which needs a good random source can use it too, and it receives more testing and review than an internal module in Bitcoin Core.\n",https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-78947335,78947335,
Krellan,2015-03-15T08:58:40Z,"Good idea.  I thought about this when implementing random numbers for the ping nonce.  They don't need to be cryptographically secure, just random enough to serve their purpose.  At the time, thought about calling the OpenSSL insecure rand, but its API was not orthogonal to secure rand, unfortunately.  It had side effects I wasn't happy with, so just stuck with the regular OpenSSL secure rand, eve",https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-80925946,80925946,
gmaxwell,2015-03-15T09:04:48Z,"@Krellan There is nothing ""consumed"" in the entropy pool. \n",https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-80927318,80927318,
laanwj,2015-03-18T12:14:21Z,@Krellan After this pull the insecure random is certainly good enough to use for ping nonces.\n,https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-82942767,82942767,
gavinandresen,2015-03-18T19:02:06Z,Running the Fortuna implementation's output through http://csrc.nist.gov/groups/ST/toolkit/rng/documentation_software.html would be spiffy. Or maybe the Python port of that:  http://gerhardt.ch/random.php\n,https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-83122968,83122968,
theuni,2015-03-20T05:52:11Z,"@sipa Very nice work.\n\nTaking advantage of the aes classes introduced here, I've added cbc functionality on top to replace our usage of openssl for wallet encryption/decryption and passphrase usage. See here: https://github.com/theuni/bitcoin/commits/aes-keys. This is a WIP; it still needs loads more testing.\n\nI'll submit a PR to discuss that after this is merged, but in the meantime you may w",https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-83921828,83921828,
mikehearn,2015-04-10T11:24:45Z,"This sounds good, but I have to play devils advocate here. The problems with OS randomness on Android was caused by exactly this kind of logic:   ""we can do better than the kernel with a spiffy userspace RNG"". And then they screwed it up.\n\nNow, I trust sipa and gmaxwell to not screw things up. I am much less sure about the faceless unknowable individuals who will come later in the years after si",https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-91521871,91521871,
gmaxwell,2015-04-10T14:34:38Z,"The primary reason is because the kernel has repeatedly screwed it up too on various systems, both due to OS bugs (e.g. recent Netbsd and Freebsd examples) and because of things like running in virtual machines where the environment was just too deterministic.  These are not hypothetical problems, but have been observed in practice and recently too.\n\n> Kernels are unlikely to ship in a broken st",https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-91576653,91576653,
mikehearn,2015-04-10T14:54:52Z,"Minor aside: in Linux there is a getrandom() syscall to avoid the problems with fd exhaustion, or /dev/urandom being a regular file. The non-blocking variant is fine of course, it's just an iterated hash over the entropy pool: http://man7.org/linux/man-pages/man2/getrandom.2.html\n\nI guess this boils down to which you consider to be more fragile: Bitcoin Core or the users kernel. Combining them s",https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-91583339,91583339,
gmaxwell,2015-04-10T15:53:15Z,"thanks, I hope that when we're up to having something worth merging you'll scrutinize the heck out of the implementation for its future riskyness. :)    (WRT blocking; the issue there is that the non-blocking will give non-entropy when the kernel isn't seeded yet; though getrandom has a mode that will handle that)\n",https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-91599010,91599010,
laanwj,2015-04-10T19:57:37Z,"@mikehearn That's the kind of argument I've given to not make this part of Bitcoin Core, but make it a library like secp256k1 (can be subtree'ed). If the code is shared with other software - e.g. wallets, or other crypto software that doesn't want to depend on OpenSSL - that needs a secure Random Number Generator, more eyes will be on the source code and it will be tested more, and this initiative",https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-91665224,91665224,
gmaxwell,2015-04-10T23:15:55Z,"(FWIW, I think sipa and I were onboard with that)\n",https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-91713927,91713927,
jgarzik,2015-04-10T23:22:31Z,"/me is onboard too.\n\nFWIW, you probably want to non-block + fail if entropy is absent.\n",https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-91714839,91714839,
sipa,2015-04-11T08:32:40Z,"All very reasonable comments here.\n\nI agree with making this available separately (though the API needs some rethinking). There is definitely a fair amount of complexity here, which - assuming the OS randomness works fine - is totally irrelevant. The whole point of course is belt-and-suspenders: what if somehow the OS randomness is not fine. For that reason, I also agree the result should be tri",https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-91795132,91795132,
jwilkins,2015-04-17T16:27:41Z,You want to add extra assurance for your entropy source because constant testing for poor entropy is a horrible path to go down.  You can never distinguish good randomness from properly secured bad randomness (eg attacker replaces your /dev/random with stream cipher output for which only they have the key).  This is code that needs (and I am sure will get) plenty of attention and auditing.\n\nAs f,https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-94021388,94021388,
jwilkins,2015-04-17T16:52:15Z,Forgot to point out http://en.wikipedia.org/wiki/Blum_Blum_Shub\n,https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-94026005,94026005,
gmaxwell,2015-04-18T17:53:44Z,"On the points raised by DJB, (FWIW, I'm familiar with that post; and it influenced our work. I'm also familiar with it in another way: on account of that post the ""watch that basket"" argument is the go-to trope in the IETF used to argue against any non-TLS crypto)\n\nFortuna itself designed to be robust against malicious inputs.  If we assume the kernel is maliciously observing our process (e.g. t",https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-94187417,94187417,
mikehearn,2015-04-19T14:48:48Z,"> Processes were launched by forking(), the new tasks got a copy of the rng state and replayed randomness. If they each independently had been adding additional (even low entropy, like the address of their stack) randomness then the problem would have been avoided \n\nI have to disagree with this. I think it's the opposite. Android _was_ mixing in additional low entropy (the pid counter) and this ",https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-94284329,94284329,
jwilkins,2015-06-04T20:14:51Z,"The problem is people unfamiliar with the research thinking they know better.  Not the case here, gmaxwell and sipa are very knowledgable and prudent.  It is only with an abundance of caution that they are suggesting this and inviting extensive external review as we have all repeatedly observed the underlying layers fail. \n",https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-109035206,109035206,
jgarzik,2015-09-15T18:08:09Z,"Re-reviewing this, @laanwj probably has the right approach.\n\nI think this is probably easier to roll out into bitcoin via a libsecp256k1-like separate library.\n",https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-140486195,140486195,
sipa,2015-09-15T18:09:14Z,Agree.\n,https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-140486447,140486447,
jgarzik,2015-09-15T18:19:28Z,"OK, closing.  Let's re-open this same Pull Request (to preserve the history) when libspiffyrng git subtree appears.\n",https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-140489027,140489027,
laanwj,2015-12-03T11:55:01Z,"Slated for 0.13 (with the goal of getting rid of OpenSSL dependency by then), opened #7162 to track this\n",https://github.com/bitcoin/bitcoin/pull/5885#issuecomment-161609639,161609639,
