DrahtBot,2021-02-01 23:42:19,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21270 ([Bundle 4/n] Prune g_chainman usage in validation-adjacent modules by dongcarl)\n* #21090 (Default to NODE_WITNESS",https://github.com/bitcoin/bitcoin/pull/21055#issuecomment-771238834,771238834,
dongcarl,2021-02-18 20:09:09,"Pushed f5ee2f37742da70d1731508e647dccd9b6035a7c -> eb8f8e42dcca3448ceddb2d774342a524475dd6e\n- Rebased on master\n\n> Note: Have not yet addressed review.",https://github.com/bitcoin/bitcoin/pull/21055#issuecomment-781604848,781604848,
dongcarl,2021-02-18 20:48:47,"Pushed eb8f8e42dcca3448ceddb2d774342a524475dd6e -> 914e9d321608b909f7f8f0442fa64cb425fcd955\n- Addressed: https://github.com/bitcoin/bitcoin/pull/21055#discussion_r572046550",https://github.com/bitcoin/bitcoin/pull/21055#issuecomment-781625212,781625212,
jnewbery,2021-02-20 10:47:01,Concept ACK. This may need rebase now that #20750 is merged.,https://github.com/bitcoin/bitcoin/pull/21055#issuecomment-782604784,782604784,
dongcarl,2021-02-22 16:16:19,"@MarcoFalke w/re https://github.com/bitcoin/bitcoin/pull/20750#discussion_r579400663, it seems like making the change would require changing all callers as well (sorta out of scope for this PR), how about we just do the following for now to ensure that the theoretical UB won't happen?\n\n```diff\ndiff --git a/src/validation.cpp b/src/validation.cpp\nindex a66c3d09e3..2bd7046e0f 100644\n--- a/",https://github.com/bitcoin/bitcoin/pull/21055#issuecomment-783489761,783489761,
dongcarl,2021-02-22 16:17:54,"Pushed 914e9d321608b909f7f8f0442fa64cb425fcd955 → 1e0d2d83f6ba8761eee4d2b97828e18204804dc3\n- Rebased on master",https://github.com/bitcoin/bitcoin/pull/21055#issuecomment-783490856,783490856,
dongcarl,2021-02-22 17:20:16,"Pushed 1e0d2d83f6ba8761eee4d2b97828e18204804dc3 → 0bd83b71afd7cd60bca6870ce9428b9fe5bc120e\n- Prepended commit 9da106be4db692fa5db7b4de79f9cf7bfef37075 to address https://github.com/bitcoin/bitcoin/pull/20750#discussion_r579400663",https://github.com/bitcoin/bitcoin/pull/21055#issuecomment-783534045,783534045,
dongcarl,2021-03-01 22:59:30,"Pushed 0bd83b71afd7cd60bca6870ce9428b9fe5bc120e -> ef83bb85507ad9e4e6801aa2197f195e9e42a948\n- Addressed some of jnewbery's review comments",https://github.com/bitcoin/bitcoin/pull/21055#issuecomment-788371769,788371769,
jnewbery,2021-03-02 12:59:50,"Changes look good, @dongcarl! I've left a couple more comments.",https://github.com/bitcoin/bitcoin/pull/21055#issuecomment-788890730,788890730,
dongcarl,2021-03-03 19:58:01,"Pushed ef83bb85507ad9e4e6801aa2197f195e9e42a948 -> e11b6496506246882df450586acf735dabedf731\n- Applied https://github.com/bitcoin/bitcoin/pull/21055#discussion_r585113995\n- Addressed https://github.com/bitcoin/bitcoin/pull/21055#discussion_r585535526\n\nThanks jnewbery for your diligent review!",https://github.com/bitcoin/bitcoin/pull/21055#issuecomment-790015129,790015129,
laanwj,2021-03-04 13:50:44,Code review ACK e11b6496506246882df450586acf735dabedf731,https://github.com/bitcoin/bitcoin/pull/21055#issuecomment-790631660,790631660,
ryanofsky,2021-02-02 21:19:39,"In commit ""validation: Move LoadBlockIndexDB to CChainState"" (fa730f7a871c49072e2e899cefbc8275e5f67057)\n\nIt seems chainman variable wasn't really needed here, just the chainman.m_blockman member, so this might make more sense as a BlockManager method instead of CChainState method",https://github.com/bitcoin/bitcoin/pull/21055#discussion_r568938343,568938343,src/validation.cpp
ryanofsky,2021-02-02 21:50:34,"In commit ""validation: Pass in spendheight to CTxMemPool::check"" (a765747415aebd432d5feffb6cb609be62e2592b)\n\nI think it would be nice to delete the BlockManager::GetSpendHeight method entirely instead of adding new calls to it. It's basically a one-line function returning height of active_coins_tip + 1, and it would seem more straightforward to pass active_coins_tip and active_coins_tip height",https://github.com/bitcoin/bitcoin/pull/21055#discussion_r568955284,568955284,src/net_processing.cpp
ariard,2021-02-08 13:06:43,"This global was introduced by d23f6c6. At that commit, the global`VersionBitsTipState`'s unique caller`BIP9SoftForkDesc` didn't require `cs_main` locking. \n\nThose methods were refactored by 3862e47, where the new `BIP9SoftForkDescPushBack` did require the lock. I think since then this lock has been useless and could have been substituted by an annotation.\n\nSo not a concern to get rid of th",https://github.com/bitcoin/bitcoin/pull/21055#discussion_r572031775,572031775,src/validation.cpp
ariard,2021-02-08 13:29:57,Shouldn't an assert be added here and before the following invocations ? The `CCoinsViewCache` pointer is used throughout `CTxMemPool::check.,https://github.com/bitcoin/bitcoin/pull/21055#discussion_r572046550,572046550,src/net_processing.cpp
dongcarl,2021-02-18 20:19:52,Unfortunately we need `setBlockIndexCandidates` which is a member off `CChainState`... If you think `LoadBlockIndexDB` makes more sense logically as a method of `BlockManager` rather than `CChainState` we can pass in the `setBlockIndexCandidates`. Let me know!,https://github.com/bitcoin/bitcoin/pull/21055#discussion_r578720086,578720086,src/validation.cpp
dongcarl,2021-02-18 20:33:20,"Not entirely sure what you mean here by an ""offset height""... Looking at all the uses of `spendheight` in `CTxMemPool::check` it seems that this ""offset height"" is exactly what `CheckInputsAndUpdateCoins` wants?",https://github.com/bitcoin/bitcoin/pull/21055#discussion_r578727450,578727450,src/net_processing.cpp
dongcarl,2021-02-18 20:49:25,Fixed in: 52c29d9aedcf8d141b75a6d923a5d5bea53f4079,https://github.com/bitcoin/bitcoin/pull/21055#discussion_r578736168,578736168,src/net_processing.cpp
jnewbery,2021-02-28 14:18:57,Don't split `{` into a new line.,https://github.com/bitcoin/bitcoin/pull/21055#discussion_r584304639,584304639,src/validation.cpp
jnewbery,2021-02-28 14:33:04,"Perhaps change this function to be annotated with `EXCLUSIVE_LOCKS_REQUIRED(cs_main)` and assert that cs_main is held, rather than locking cs_main in the first line of the function.\n\nThis function is always called with cs_main held. Without that guarantee, there's the possibility that one thread calls it with `::ChainstateActive()`, another thread updates the active chainstate, and then this t",https://github.com/bitcoin/bitcoin/pull/21055#discussion_r584306548,584306548,src/validation.cpp
jnewbery,2021-02-28 14:36:33,This function no longer exists. Remove the declaration.,https://github.com/bitcoin/bitcoin/pull/21055#discussion_r584307383,584307383,src/validation.h
jnewbery,2021-02-28 14:42:43,Remove `EXCLUSIVE_LOCKS_REQUIRED(cs_main)` (which is now on the declaration in validation.h),https://github.com/bitcoin/bitcoin/pull/21055#discussion_r584308221,584308221,src/validation.cpp
jnewbery,2021-02-28 15:37:40,"I agree with @ryanofsky that the use of `BlockManager::GetSpendHeight()` is quite ugly. We can get the height directly from `::ChainstateActive().m_chain.Height() + 1`.\n\nI also think it'd be preferable to not have net_processing reach inside validation for the various active chainstate fields, just to call a `check()` function (which defaults to a no-op with default `-mempoolcheck`). Could we ",https://github.com/bitcoin/bitcoin/pull/21055#discussion_r584315503,584315503,src/net_processing.cpp
dongcarl,2021-03-01 23:00:44,Fixed in 4bada76237,https://github.com/bitcoin/bitcoin/pull/21055#discussion_r585112131,585112131,src/validation.cpp
dongcarl,2021-03-01 23:01:19,Fixed in ef83bb8550,https://github.com/bitcoin/bitcoin/pull/21055#discussion_r585112410,585112410,src/validation.cpp
dongcarl,2021-03-01 23:01:34,Fixed in: 8b99efbcc0,https://github.com/bitcoin/bitcoin/pull/21055#discussion_r585112504,585112504,src/validation.h
dongcarl,2021-03-01 23:01:50,Fixed in 8cdb2f7e58,https://github.com/bitcoin/bitcoin/pull/21055#discussion_r585112603,585112603,src/validation.cpp
dongcarl,2021-03-01 23:03:56,"I'm not sure I can easily convince myself that moving this check into `ATMP` is completely safe. However, I do see how this is ugly.\n\nDo you think the following patch would be an acceptable solution?\n\n```diff\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\nindex 614a3e0791..022f2e0574 100644\n--- a/src/net_processing.cpp\n+++ b/src/net_processing.cpp\n@@ -2301,10 +2301,",https://github.com/bitcoin/bitcoin/pull/21055#discussion_r585113995,585113995,src/net_processing.cpp
jnewbery,2021-03-02 12:47:59,Perhaps also add `AssertLockHeld(cs_main)` to the top of the function body?,https://github.com/bitcoin/bitcoin/pull/21055#discussion_r585535526,585535526,src/validation.cpp
jnewbery,2021-03-02 12:59:24,"> I'm not sure I can easily convince myself that moving this check into ATMP is completely safe.\n\nI think you're right to be wary. The call to ATMP from UpdateMempoolForReorg probably can't call `check()`.\n\nI like your proposed change.",https://github.com/bitcoin/bitcoin/pull/21055#discussion_r585543214,585543214,src/net_processing.cpp
dongcarl,2021-03-03 19:58:43,Fixed in e11b649650,https://github.com/bitcoin/bitcoin/pull/21055#discussion_r586736886,586736886,src/validation.cpp
dongcarl,2021-03-03 19:59:02,Fixed in 4744efc9ba,https://github.com/bitcoin/bitcoin/pull/21055#discussion_r586737126,586737126,src/net_processing.cpp
ryanofsky,2021-03-05 18:26:23,"re: https://github.com/bitcoin/bitcoin/pull/21055#discussion_r578720086\n\n> Unfortunately we need `setBlockIndexCandidates` which is a member off `CChainState`... If you think `LoadBlockIndexDB` makes more sense logically as a method of `BlockManager` rather than `CChainState` we can pass in the `setBlockIndexCandidates`. Let me know!\n\nThanks, I didn't recognize the `setBlockIndexCandidates",https://github.com/bitcoin/bitcoin/pull/21055#discussion_r588558678,588558678,src/validation.cpp
