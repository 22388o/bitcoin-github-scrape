DrahtBot,2021-03-23 10:28:19,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21506 (p2p, refactor: make NetPermissionFlags an enum class by jonatack)\n* #21160 (Net/Net processing: Move tx inventory",https://github.com/bitcoin/bitcoin/pull/21509#issuecomment-804791121,804791121,
prayank23,2021-03-23 10:58:20,"Concept ACK\n\nBitcoin Core follows BIP 133: [feefilter messages](https://github.com/bitcoin/bitcoin/blob/master/doc/bips.md)\n\n[BIP 133](https://github.com/bitcoin/bips/blob/master/bip-0133.mediawiki#abstract): Add a new message, ""feefilter"", which serves to instruct peers not to send ""inv""'s to the node for **transactions with fees below the specified fee rate**. \n\n-[blocksonly](https:/",https://github.com/bitcoin/bitcoin/pull/21509#issuecomment-804809251,804809251,
glozow,2021-03-23 14:40:03,"> My first reaction was to suggest that they send the MAX_FILTER once, so that feefilter could slowly replace the fRelay mechanism to enable/disable tx relay.\n\nIs it possible to replace exactly? Disabling tx relay using `fRelay` means you disconnect them for sending you a tx, but it's ok if they ignore a fee filter, right?",https://github.com/bitcoin/bitcoin/pull/21509#issuecomment-804957876,804957876,
MarcoFalke,2021-03-23 14:49:58,"Yeah, we'd have to disconnect on feefilter violations (at least MAX_FITLER ones). There might be a large overlap between peers that ignore fRelay (and get disconnected) with peers that ignore feefilter, but I haven't collected data on this.",https://github.com/bitcoin/bitcoin/pull/21509#issuecomment-804966039,804966039,
glozow,2021-03-23 15:34:39,"> Yeah, we'd have to disconnect on feefilter violations (at least MAX_FITLER ones). There might be a large overlap between peers that ignore fRelay (and get disconnected) with peers that ignore feefilter, but I haven't collected data on this.\n\nJust curious. Have you seen https://github.com/bitcoin/bitcoin/pull/20895#issuecomment-757387607?",https://github.com/bitcoin/bitcoin/pull/21509#issuecomment-805002891,805002891,
MarcoFalke,2021-03-23 17:21:45,"I did and I agree. I was hypothesising *if* the set of peers that ignore fRelay is identical to the set of nodes that ignore MAX_FILTER, then there is practically no difference whether they are disconnected due to ignoring either.",https://github.com/bitcoin/bitcoin/pull/21509#issuecomment-805084669,805084669,
mzumsande,2021-03-23 17:49:41,This discussion drifted away from the scope of this PR a bit - but what is the motivation behind the idea of replacing the `fRelay` mechanism by a MAX_FILTER feefilter?,https://github.com/bitcoin/bitcoin/pull/21509#issuecomment-805105065,805105065,
glozow,2021-03-23 21:36:48,"> This discussion drifted away from the scope of this PR a bit - but what is the motivation behind the idea of replacing the `fRelay` mechanism by a MAX_FILTER feefilter?\n\nSorry about that ðŸ˜…. AFAIK, `fRelay` was introduced as a `VERSION` field in BIP37 as a way to turn tx relay off until a bloom filter is sent. That means it's not very flexible, since you can't send multiple versions and we do",https://github.com/bitcoin/bitcoin/pull/21509#issuecomment-805279983,805279983,
glozow,2021-03-23 21:44:39,Separate from the `fRelay` convo... Concept ACK to having consistent behavior towards our block-relay-only peers as when we're in blocksonly mode. I don't see how there'd be any benefit of sending them fee filters right now ðŸ¤” ,https://github.com/bitcoin/bitcoin/pull/21509#issuecomment-805286501,805286501,
jnewbery,2021-03-24 13:12:09,"utACK 18a9b27dd68dc9044a82fba0802b8cb5c68d10ce\n\nI think the whole fee filter sending logic could be cleaned up substantially:\n\n- remove the `-feefilter` option, which is debug only and isn't used in any of our tests. Seems wasteful to check this option for every peer on every iteration of the message handler loop.\n- factor this logic out into its own function. The compiler will inline it",https://github.com/bitcoin/bitcoin/pull/21509#issuecomment-805808485,805808485,
glozow,2021-03-24 18:51:23,tested ACK 18a9b27dd68dc9044a82fba0802b8cb5c68d10ce using [this](https://github.com/glozow/bitcoin/commit/9989c728a027d1d268b3e66d64d6b5fdbd5c7fa2). Looks like we didn't have a test for block-relay-only either.,https://github.com/bitcoin/bitcoin/pull/21509#issuecomment-806072950,806072950,
mzumsande,2021-03-25 21:13:40,"> I wonder if we should also skip processing the message if we are in `-blocksonly` mode, but the processing is pretty trivial, so doesn't seem like it would matter much.\n\nI had thought about that but decided against it, since sending transactions in `-blocksonly` mode is unusual but not impossible (`sendrawtransaction` as was recently discussed in [IRC](http://www.erisian.com.au/bitcoin-core-",https://github.com/bitcoin/bitcoin/pull/21509#issuecomment-807499012,807499012,
glozow,2021-03-25 22:14:45,re ACK beead33a21483c4901e76799ba5c8f7d6fdfffe9 ðŸ™‚ thanks for adding the test!,https://github.com/bitcoin/bitcoin/pull/21509#issuecomment-807600568,807600568,
amitiuttarwar,2021-03-26 05:15:00,"reACK beead33a21483c4901e76799ba5c8f7d6fdfffe9 \n\n> I had thought about that but decided against it, since sending transactions in -blocksonly mode is unusual but not impossible (sendrawtransaction as was recently discussed in IRC, and I think we'd also answer unsolicited GETDATAs). In that case, it would be nice to also respect our peers' feefilters.\n\nyeah, great point :) ",https://github.com/bitcoin/bitcoin/pull/21509#issuecomment-807941441,807941441,
MarcoFalke,2021-03-26 07:08:54,"* remove the -feefilter option, which is debug only and isn't used in any of our tests. Seems wasteful to check this option for every peer on every iteration of the message handler loop.\n\nACK, seems redundant with forcerelay\n\n* move the logic out of the cs_main lock scope. I don't think there's anything in there that requires cs_main.\n\nround isn't thread-safe, so it needs a lock. See\",https://github.com/bitcoin/bitcoin/pull/21509#issuecomment-807992199,807992199,
MarcoFalke,2021-03-26 07:09:10,review ACK beead33a21483c4901e76799ba5c8f7d6fdfffe9,https://github.com/bitcoin/bitcoin/pull/21509#issuecomment-807992368,807992368,
jnewbery,2021-03-29 09:54:37,reACK beead33a21483c4901e76799ba5c8f7d6fdfffe9,https://github.com/bitcoin/bitcoin/pull/21509#issuecomment-809244971,809244971,
MarcoFalke,2021-03-23 06:41:13,"It might be good to split each `&&` into its own line, to clarify that each condition needs to be fulfilled independently",https://github.com/bitcoin/bitcoin/pull/21509#discussion_r599305809,599305809,src/net_processing.cpp
mzumsande,2021-03-23 18:00:00,Done.,https://github.com/bitcoin/bitcoin/pull/21509#discussion_r599810286,599810286,src/net_processing.cpp
