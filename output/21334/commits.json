[
  {
    "sha": "3ba9283a47ac358168db9db7840ae559f443486c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmE5MjgzYTQ3YWMzNTgxNjhkYjlkYjc4NDBhZTU1OWY0NDM0ODZj",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-10-19T10:49:42Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-03-03T13:12:16Z"
      },
      "message": "tests: more helpful errors for failing versionbits tests\n\nCo-authored-by: Sjors Provoost <sjors@sprovoost.nl>",
      "tree": {
        "sha": "b04af7b4e5c69ec069be42e4e70b189d905d5838",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b04af7b4e5c69ec069be42e4e70b189d905d5838"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ba9283a47ac358168db9db7840ae559f443486c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmA/izIACgkQV/+b28ww\nEAks3w//VOYmUC9jUsc7tfa63iM4rX4uKuOaprqCgPgLRcW+SOXnxAkfN9CqlxN1\np1yVFhnZS07zgVygnWv/rZIrcjWbxghZwVojc1SI8RYN7LF1tuZX+UTWQ+iFA1/h\nfxcyynduj43BZ60yj/tHW8MUxbEE1ZsPVrGh6O70zXoU/WCaQG9yjL/HsYG8nur5\naNyqhIPHF/JXukkKOV9XHsIIDxOvyFtGI/grlg8nPOHqER5ofw1JG4oDjk6HfOil\nuZh3V2waF5ZoDgJRQ+AIVWmvtVLchX9tB51nz4J9VIoMlkRw6jn6cfOnkgJMz/zk\n/nu2VKOef//UwIy0+Dd1PnYIrnHRTqD/sF30jit1y94F9Uoxocqf+4SFU5yKU69c\npDeiv1DU8ZNo4u0B8doVWiYJ48xoVVccHvdyfRFlRgsd2X2wBky7LL+S2oOnwZcF\nyh8jh9ijM3ekYXOXurO7SYY/dzV7qCmFybblZKlcBBETHWwpu2IF1KDG0WW6OgRC\ntR0/b1bTeBddELi2U5HLC8ToV87sPgEcAPldU8Htiv/t2hCjgwkcItgH4y5/jloI\nx68CvpmL5jpV1m6M/Xv/d8sW/jhF2pJKcwYX62Gu8CDEior6wSfgbYrEGk+izLDj\n3/iaVgiwqSsjwYBG1xKCPwH5E0zlHc7nR48UcWEbwznuyZwbtZw=\n=tnq7\n-----END PGP SIGNATURE-----",
        "payload": "tree b04af7b4e5c69ec069be42e4e70b189d905d5838\nparent 831675c8dccfa6525ffe751da3cc60709c380953\nauthor Anthony Towns <aj@erisian.com.au> 1603104582 +1000\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1614777136 +0100\n\ntests: more helpful errors for failing versionbits tests\n\nCo-authored-by: Sjors Provoost <sjors@sprovoost.nl>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ba9283a47ac358168db9db7840ae559f443486c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ba9283a47ac358168db9db7840ae559f443486c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ba9283a47ac358168db9db7840ae559f443486c/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "831675c8dccfa6525ffe751da3cc60709c380953",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/831675c8dccfa6525ffe751da3cc60709c380953",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/831675c8dccfa6525ffe751da3cc60709c380953"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 26,
      "deletions": 46
    },
    "files": [
      {
        "sha": "23b1709c8f7b0c71d28b5982c5ceb71b2e081dae",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 46,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba9283a47ac358168db9db7840ae559f443486c/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba9283a47ac358168db9db7840ae559f443486c/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=3ba9283a47ac358168db9db7840ae559f443486c",
        "patch": "@@ -14,6 +14,18 @@\n /* Define a virtual block time, one block per 10 minutes after Nov 14 2014, 0:55:36am */\n static int32_t TestTime(int nHeight) { return 1415926536 + 600 * nHeight; }\n \n+static const std::string StateName(ThresholdState state)\n+{\n+    switch (state) {\n+    case ThresholdState::DEFINED:   return \"DEFINED\";\n+    case ThresholdState::STARTED:   return \"STARTED\";\n+    case ThresholdState::LOCKED_IN: return \"LOCKED_IN\";\n+    case ThresholdState::ACTIVE:    return \"ACTIVE\";\n+    case ThresholdState::FAILED:    return \"FAILED\";\n+    } // no default case, so the compiler can warn about missing cases\n+    return \"\";\n+}\n+\n static const Consensus::Params paramsDummy = Consensus::Params();\n \n class TestConditionChecker : public AbstractThresholdConditionChecker\n@@ -98,60 +110,28 @@ class VersionBitsTester\n         return *this;\n     }\n \n-    VersionBitsTester& TestDefined() {\n-        for (int i = 0; i < CHECKERS; i++) {\n-            if (InsecureRandBits(i) == 0) {\n-                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? nullptr : vpblock.back()) == ThresholdState::DEFINED, strprintf(\"Test %i for DEFINED\", num));\n-                BOOST_CHECK_MESSAGE(checker_always[i].GetStateFor(vpblock.empty() ? nullptr : vpblock.back()) == ThresholdState::ACTIVE, strprintf(\"Test %i for ACTIVE (always active)\", num));\n-            }\n-        }\n-        num++;\n-        return *this;\n-    }\n-\n-    VersionBitsTester& TestStarted() {\n-        for (int i = 0; i < CHECKERS; i++) {\n-            if (InsecureRandBits(i) == 0) {\n-                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? nullptr : vpblock.back()) == ThresholdState::STARTED, strprintf(\"Test %i for STARTED\", num));\n-                BOOST_CHECK_MESSAGE(checker_always[i].GetStateFor(vpblock.empty() ? nullptr : vpblock.back()) == ThresholdState::ACTIVE, strprintf(\"Test %i for ACTIVE (always active)\", num));\n-            }\n-        }\n-        num++;\n-        return *this;\n-    }\n-\n-    VersionBitsTester& TestLockedIn() {\n+    VersionBitsTester& TestState(ThresholdState exp) {\n         for (int i = 0; i < CHECKERS; i++) {\n             if (InsecureRandBits(i) == 0) {\n-                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? nullptr : vpblock.back()) == ThresholdState::LOCKED_IN, strprintf(\"Test %i for LOCKED_IN\", num));\n-                BOOST_CHECK_MESSAGE(checker_always[i].GetStateFor(vpblock.empty() ? nullptr : vpblock.back()) == ThresholdState::ACTIVE, strprintf(\"Test %i for ACTIVE (always active)\", num));\n+                const CBlockIndex* pindex = vpblock.empty() ? nullptr : vpblock.back();\n+                ThresholdState got = checker[i].GetStateFor(pindex);\n+                ThresholdState got_always = checker_always[i].GetStateFor(pindex);\n+                // nHeight of the next block. If vpblock is empty, the next (ie first)\n+                // block should be the genesis block with nHeight == 0.\n+                int height = pindex == nullptr ? 0 : pindex->nHeight + 1;\n+                BOOST_CHECK_MESSAGE(got == exp, strprintf(\"Test %i for %s height %d (got %s)\", num, StateName(exp), height, StateName(got)));\n+                BOOST_CHECK_MESSAGE(got_always == ThresholdState::ACTIVE, strprintf(\"Test %i for ACTIVE height %d (got %s; always active case)\", num, height, StateName(got_always)));\n             }\n         }\n         num++;\n         return *this;\n     }\n \n-    VersionBitsTester& TestActive() {\n-        for (int i = 0; i < CHECKERS; i++) {\n-            if (InsecureRandBits(i) == 0) {\n-                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? nullptr : vpblock.back()) == ThresholdState::ACTIVE, strprintf(\"Test %i for ACTIVE\", num));\n-                BOOST_CHECK_MESSAGE(checker_always[i].GetStateFor(vpblock.empty() ? nullptr : vpblock.back()) == ThresholdState::ACTIVE, strprintf(\"Test %i for ACTIVE (always active)\", num));\n-            }\n-        }\n-        num++;\n-        return *this;\n-    }\n-\n-    VersionBitsTester& TestFailed() {\n-        for (int i = 0; i < CHECKERS; i++) {\n-            if (InsecureRandBits(i) == 0) {\n-                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? nullptr : vpblock.back()) == ThresholdState::FAILED, strprintf(\"Test %i for FAILED\", num));\n-                BOOST_CHECK_MESSAGE(checker_always[i].GetStateFor(vpblock.empty() ? nullptr : vpblock.back()) == ThresholdState::ACTIVE, strprintf(\"Test %i for ACTIVE (always active)\", num));\n-            }\n-        }\n-        num++;\n-        return *this;\n-    }\n+    VersionBitsTester& TestDefined() { return TestState(ThresholdState::DEFINED); }\n+    VersionBitsTester& TestStarted() { return TestState(ThresholdState::STARTED); }\n+    VersionBitsTester& TestLockedIn() { return TestState(ThresholdState::LOCKED_IN); }\n+    VersionBitsTester& TestActive() { return TestState(ThresholdState::ACTIVE); }\n+    VersionBitsTester& TestFailed() { return TestState(ThresholdState::FAILED); }\n \n     CBlockIndex * Tip() { return vpblock.size() ? vpblock.back() : nullptr; }\n };"
      }
    ]
  },
  {
    "sha": "0c471a5f306044cbd2eb230714571f05dd6aaf3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzQ3MWE1ZjMwNjA0NGNiZDJlYjIzMDcxNDU3MWYwNWRkNmFhZjNj",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-10-19T12:59:50Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-03-03T13:14:40Z"
      },
      "message": "tests: check never active versionbits",
      "tree": {
        "sha": "6c5c83cb4ccc6efdbdbb28744cbb89a7a1405343",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c5c83cb4ccc6efdbdbb28744cbb89a7a1405343"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c471a5f306044cbd2eb230714571f05dd6aaf3c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmA/i8IACgkQV/+b28ww\nEAk7zg/9GJTKjaKu/5wb4edmpVq6Dt1N2r4WMBxCow1qWQ+PYWSx1gzb0fyxa53V\ncEDZ5J/h73Plv3JBqdME89/O5Uv/rt1JHEuH2mB/15FeI/ucBqONoOQ4NyAVyJvA\nm7MHaCgDyXh/hnlvECZLuhRfF/b5UOJQy6Y+Pcikhgf6+P6QqoWxWi7coNbl0A/Y\nA56hkTXkzg544I7nQ4WhwTPcLk0T8gDY0UOBi6uH1WwQN4bT7OhvLDSIuUocc5Ho\nmukoi0CzBZEkaO4gcejnuHnVA77N1hF7i8dmPygXkTDq60dKYzJFVAlQ5AbUWo+L\nEcecrxz8qE1p2ruWiM8uPyHNL/TRi8VLCvRzyV9uAxuR1icnVwDwe6zafSG8A28p\n55IQiXsBG5ceT25UgAEK4FSs5h7AxqqFWXQwyrwNZuR9tXePxQ1eV6osQDzA268e\nrTGY8qjEqDt38KBv+2IJGZc5ki9B3ufY6l5oVnSo8ULwaN9FW7a50MZk/TyNv3Fu\n0WZIx/74UiaJ412F2dxlvZ1FuxB13SMaXqSdbfvbNCZSLFoMd4hD4hG/UpW7X/7y\n6D+wCjRBl1mlj5+iE93U6KctuL/cnv9cWQe7OcyKCDv5IqpatFHMkjVGf/2301A/\nsRDnFuudvhUwgvYtTvjWqgBVr0Y0NNETvS5CnGxE3TtXFy9bLHQ=\n=AI1+\n-----END PGP SIGNATURE-----",
        "payload": "tree 6c5c83cb4ccc6efdbdbb28744cbb89a7a1405343\nparent 3ba9283a47ac358168db9db7840ae559f443486c\nauthor Anthony Towns <aj@erisian.com.au> 1603112390 +1000\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1614777280 +0100\n\ntests: check never active versionbits\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c471a5f306044cbd2eb230714571f05dd6aaf3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c471a5f306044cbd2eb230714571f05dd6aaf3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c471a5f306044cbd2eb230714571f05dd6aaf3c/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ba9283a47ac358168db9db7840ae559f443486c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ba9283a47ac358168db9db7840ae559f443486c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ba9283a47ac358168db9db7840ae559f443486c"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8841a540f2dfd426cdb324fcaa8bd6d058807b8a",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c471a5f306044cbd2eb230714571f05dd6aaf3c/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c471a5f306044cbd2eb230714571f05dd6aaf3c/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=0c471a5f306044cbd2eb230714571f05dd6aaf3c",
        "patch": "@@ -50,6 +50,13 @@ class TestAlwaysActiveConditionChecker : public TestConditionChecker\n     int64_t BeginTime(const Consensus::Params& params) const override { return Consensus::BIP9Deployment::ALWAYS_ACTIVE; }\n };\n \n+class TestNeverActiveConditionChecker : public TestConditionChecker\n+{\n+public:\n+    int64_t BeginTime(const Consensus::Params& params) const override { return 0; }\n+    int64_t EndTime(const Consensus::Params& params) const override { return 1230768000; }\n+};\n+\n #define CHECKERS 6\n \n class VersionBitsTester\n@@ -63,6 +70,8 @@ class VersionBitsTester\n     TestConditionChecker checker[CHECKERS];\n     // Another 6 that assume always active activation\n     TestAlwaysActiveConditionChecker checker_always[CHECKERS];\n+    // Another 6 that assume never active activation\n+    TestNeverActiveConditionChecker checker_never[CHECKERS];\n \n     // Test counter (to identify failures)\n     int num;\n@@ -77,6 +86,7 @@ class VersionBitsTester\n         for (unsigned int  i = 0; i < CHECKERS; i++) {\n             checker[i] = TestConditionChecker();\n             checker_always[i] = TestAlwaysActiveConditionChecker();\n+            checker_never[i] = TestNeverActiveConditionChecker();\n         }\n         vpblock.clear();\n         return *this;\n@@ -104,6 +114,10 @@ class VersionBitsTester\n             if (InsecureRandBits(i) == 0) {\n                 BOOST_CHECK_MESSAGE(checker[i].GetStateSinceHeightFor(vpblock.empty() ? nullptr : vpblock.back()) == height, strprintf(\"Test %i for StateSinceHeight\", num));\n                 BOOST_CHECK_MESSAGE(checker_always[i].GetStateSinceHeightFor(vpblock.empty() ? nullptr : vpblock.back()) == 0, strprintf(\"Test %i for StateSinceHeight (always active)\", num));\n+\n+                // never active may go from DEFINED -> FAILED at the first period\n+                const auto never_height = checker_never[i].GetStateSinceHeightFor(vpblock.empty() ? nullptr : vpblock.back());\n+                BOOST_CHECK_MESSAGE(never_height == 0 || never_height == checker_never[i].Period(paramsDummy), strprintf(\"Test %i for StateSinceHeight (never active)\", num));\n             }\n         }\n         num++;\n@@ -116,11 +130,13 @@ class VersionBitsTester\n                 const CBlockIndex* pindex = vpblock.empty() ? nullptr : vpblock.back();\n                 ThresholdState got = checker[i].GetStateFor(pindex);\n                 ThresholdState got_always = checker_always[i].GetStateFor(pindex);\n+                ThresholdState got_never = checker_never[i].GetStateFor(pindex);\n                 // nHeight of the next block. If vpblock is empty, the next (ie first)\n                 // block should be the genesis block with nHeight == 0.\n                 int height = pindex == nullptr ? 0 : pindex->nHeight + 1;\n                 BOOST_CHECK_MESSAGE(got == exp, strprintf(\"Test %i for %s height %d (got %s)\", num, StateName(exp), height, StateName(got)));\n                 BOOST_CHECK_MESSAGE(got_always == ThresholdState::ACTIVE, strprintf(\"Test %i for ACTIVE height %d (got %s; always active case)\", num, height, StateName(got_always)));\n+                BOOST_CHECK_MESSAGE(got_never == ThresholdState::DEFINED|| got_never == ThresholdState::FAILED, strprintf(\"Test %i for DEFINED/FAILED height %d (got %s; never active case)\", num, height, StateName(got_never)));\n             }\n         }\n         num++;"
      }
    ]
  }
]