[
  {
    "sha": "fdf8888b6f0c63e8a4cb1459752625e642d6a4dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGY4ODg4YjZmMGM2M2U4YTRjYjE0NTk3NTI2MjVlNjQyZDZhNGRk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-02T17:41:12Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-09T21:53:08Z"
      },
      "message": "[build] Move CheckTransaction from lib_server to lib_consensus\n\nCheckTransaction is a context-free function that does not require access\nto the blockchain or mempool. Move it from src/consensus/tx_verify in\nlib_server to a new unit src/consensus/tx_check in lib_consensus so that\nit can be called by non-server libraries.",
      "tree": {
        "sha": "f68fbaf3d09a60b9dd63abb5be6bc079d0a0cdb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f68fbaf3d09a60b9dd63abb5be6bc079d0a0cdb5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93de9abe6d6847bce6db8da15f15b50b01972e70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93de9abe6d6847bce6db8da15f15b50b01972e70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93de9abe6d6847bce6db8da15f15b50b01972e70"
      }
    ],
    "stats": {
      "total": 139,
      "additions": 84,
      "deletions": 55
    },
    "files": [
      {
        "sha": "227b1ebcd21d18e4858c8314ab482c5fb6893761",
        "filename": "build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj?ref=fdf8888b6f0c63e8a4cb1459752625e642d6a4dd",
        "patch": "@@ -22,6 +22,7 @@\n   <ItemGroup>\n     <ClCompile Include=\"..\\..\\src\\arith_uint256.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\consensus\\merkle.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\consensus\\tx_check.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\crypto\\aes.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\crypto\\chacha20.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\crypto\\hmac_sha256.cpp\" />"
      },
      {
        "sha": "cb0745835aac4e74adc9f434075cb973065c8eda",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fdf8888b6f0c63e8a4cb1459752625e642d6a4dd",
        "patch": "@@ -124,6 +124,7 @@ BITCOIN_CORE_H = \\\n   compat/sanity.h \\\n   compressor.h \\\n   consensus/consensus.h \\\n+  consensus/tx_check.h \\\n   consensus/tx_verify.h \\\n   core_io.h \\\n   core_memusage.h \\\n@@ -391,6 +392,7 @@ libbitcoin_consensus_a_SOURCES = \\\n   consensus/merkle.cpp \\\n   consensus/merkle.h \\\n   consensus/params.h \\\n+  consensus/tx_check.cpp \\\n   consensus/validation.h \\\n   hash.cpp \\\n   hash.h \\"
      },
      {
        "sha": "61a607ef7f7870ec2d1bec96c0e6003e5f3b7aa4",
        "filename": "src/consensus/tx_check.cpp",
        "status": "added",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/src/consensus/tx_check.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/src/consensus/tx_check.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_check.cpp?ref=fdf8888b6f0c63e8a4cb1459752625e642d6a4dd",
        "patch": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/tx_check.h>\n+\n+#include <primitives/transaction.h>\n+#include <consensus/validation.h>\n+\n+bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fCheckDuplicateInputs)\n+{\n+    // Basic checks that don't depend on any context\n+    if (tx.vin.empty())\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n+    if (tx.vout.empty())\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n+    // Size limits (this doesn't take the witness into account, as that hasn't been checked for malleability)\n+    if (::GetSerializeSize(tx, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n+\n+    // Check for negative or overflow output values\n+    CAmount nValueOut = 0;\n+    for (const auto& txout : tx.vout)\n+    {\n+        if (txout.nValue < 0)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n+        if (txout.nValue > MAX_MONEY)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n+        nValueOut += txout.nValue;\n+        if (!MoneyRange(nValueOut))\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n+    }\n+\n+    // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n+    if (fCheckDuplicateInputs) {\n+        std::set<COutPoint> vInOutPoints;\n+        for (const auto& txin : tx.vin)\n+        {\n+            if (!vInOutPoints.insert(txin.prevout).second)\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n+        }\n+    }\n+\n+    if (tx.IsCoinBase())\n+    {\n+        if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n+    }\n+    else\n+    {\n+        for (const auto& txin : tx.vin)\n+            if (txin.prevout.IsNull())\n+                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "bcfdf36bf95c59698af3886bae421eab39bfdfa8",
        "filename": "src/consensus/tx_check.h",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/src/consensus/tx_check.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/src/consensus/tx_check.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_check.h?ref=fdf8888b6f0c63e8a4cb1459752625e642d6a4dd",
        "patch": "@@ -0,0 +1,20 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_TX_CHECK_H\n+#define BITCOIN_CONSENSUS_TX_CHECK_H\n+\n+/**\n+ * Context-independent transaction checking code that can be called outside the\n+ * bitcoin server and doesn't depend on chain or mempool state. Transaction\n+ * verification code that does call server functions or depend on server state\n+ * belongs in tx_verify.h/cpp instead.\n+ */\n+\n+class CTransaction;\n+class CValidationState;\n+\n+bool CheckTransaction(const CTransaction& tx, CValidationState& state, bool fCheckDuplicateInputs=true);\n+\n+#endif // BITCOIN_CONSENSUS_TX_CHECK_H"
      },
      {
        "sha": "fbbbcfd04035b28a0ff46776ce3451c41853b0b0",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 49,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=fdf8888b6f0c63e8a4cb1459752625e642d6a4dd",
        "patch": "@@ -156,55 +156,6 @@ int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& i\n     return nSigOps;\n }\n \n-bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fCheckDuplicateInputs)\n-{\n-    // Basic checks that don't depend on any context\n-    if (tx.vin.empty())\n-        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n-    if (tx.vout.empty())\n-        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n-    // Size limits (this doesn't take the witness into account, as that hasn't been checked for malleability)\n-    if (::GetSerializeSize(tx, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n-\n-    // Check for negative or overflow output values\n-    CAmount nValueOut = 0;\n-    for (const auto& txout : tx.vout)\n-    {\n-        if (txout.nValue < 0)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n-        if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n-        nValueOut += txout.nValue;\n-        if (!MoneyRange(nValueOut))\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n-    }\n-\n-    // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n-        if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n-                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n-    }\n-\n-    return true;\n-}\n-\n bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight, CAmount& txfee)\n {\n     // are the actual inputs available?"
      },
      {
        "sha": "3519fc555dbfa304d8fb796dfdb949218135fcae",
        "filename": "src/consensus/tx_verify.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/src/consensus/tx_verify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/src/consensus/tx_verify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.h?ref=fdf8888b6f0c63e8a4cb1459752625e642d6a4dd",
        "patch": "@@ -17,9 +17,6 @@ class CValidationState;\n \n /** Transaction validation functions */\n \n-/** Context-independent validity checks */\n-bool CheckTransaction(const CTransaction& tx, CValidationState& state, bool fCheckDuplicateInputs=true);\n-\n namespace Consensus {\n /**\n  * Check whether all inputs of this transaction are valid (no double spends and amounts)"
      },
      {
        "sha": "07f433722124c26a69cdb59b473b0740477d516a",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=fdf8888b6f0c63e8a4cb1459752625e642d6a4dd",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <consensus/tx_verify.h>\n+#include <consensus/tx_check.h>\n #include <consensus/validation.h>\n #include <test/data/sighash.json.h>\n #include <hash.h>"
      },
      {
        "sha": "24a599f8d7b25ac668f985b896116de2c28904ac",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=fdf8888b6f0c63e8a4cb1459752625e642d6a4dd",
        "patch": "@@ -8,7 +8,7 @@\n \n #include <clientversion.h>\n #include <checkqueue.h>\n-#include <consensus/tx_verify.h>\n+#include <consensus/tx_check.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n #include <key.h>"
      },
      {
        "sha": "88a7ba9fd47a1f2387222fe465d5eed2524106ff",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fdf8888b6f0c63e8a4cb1459752625e642d6a4dd",
        "patch": "@@ -12,6 +12,7 @@\n #include <checkqueue.h>\n #include <consensus/consensus.h>\n #include <consensus/merkle.h>\n+#include <consensus/tx_check.h>\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n #include <cuckoocache.h>"
      },
      {
        "sha": "3122cd6fa480af2347047f9b6b4a3d348b7a0494",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=fdf8888b6f0c63e8a4cb1459752625e642d6a4dd",
        "patch": "@@ -5,7 +5,7 @@\n \n #include <wallet/walletdb.h>\n \n-#include <consensus/tx_verify.h>\n+#include <consensus/tx_check.h>\n #include <consensus/validation.h>\n #include <fs.h>\n #include <key_io.h>"
      }
    ]
  },
  {
    "sha": "4a75c9d6512a5580e60104103ea11d2cd9586354",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTc1YzlkNjUxMmE1NTgwZTYwMTA0MTAzZWExMWQyY2Q5NTg2MzU0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-02T18:14:58Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-09T21:53:08Z"
      },
      "message": "[build] Move policy settings to new src/policy/settings unit\n\nThis moves the following policy settings functions and globals to a new\nsrc/policy/settings unit in lib_server:\n\n- `incrementalRelayFee`\n- `dustRelayFee`\n- `nBytesPerSigOp`\n- `fIsBareMultisigStd`\n\nThese settings are only required by the node and should not be accessed\nby other libraries.",
      "tree": {
        "sha": "03928bbefeff422d8be4fa400c88be34c1150328",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03928bbefeff422d8be4fa400c88be34c1150328"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a75c9d6512a5580e60104103ea11d2cd9586354",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a75c9d6512a5580e60104103ea11d2cd9586354",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a75c9d6512a5580e60104103ea11d2cd9586354",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a75c9d6512a5580e60104103ea11d2cd9586354/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fdf8888b6f0c63e8a4cb1459752625e642d6a4dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdf8888b6f0c63e8a4cb1459752625e642d6a4dd"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 47,
      "deletions": 14
    },
    "files": [
      {
        "sha": "c07e268863421f310542fee3a723962b86aed945",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a75c9d6512a5580e60104103ea11d2cd9586354/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a75c9d6512a5580e60104103ea11d2cd9586354/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4a75c9d6512a5580e60104103ea11d2cd9586354",
        "patch": "@@ -164,6 +164,7 @@ BITCOIN_CORE_H = \\\n   policy/fees.h \\\n   policy/policy.h \\\n   policy/rbf.h \\\n+  policy/settings.h \\\n   pow.h \\\n   protocol.h \\\n   psbt.h \\\n@@ -269,8 +270,8 @@ libbitcoin_server_a_SOURCES = \\\n   noui.cpp \\\n   outputtype.cpp \\\n   policy/fees.cpp \\\n-  policy/policy.cpp \\\n   policy/rbf.cpp \\\n+  policy/settings.cpp \\\n   pow.cpp \\\n   rest.cpp \\\n   rpc/blockchain.cpp \\\n@@ -436,6 +437,7 @@ libbitcoin_common_a_SOURCES = \\\n   netaddress.cpp \\\n   netbase.cpp \\\n   policy/feerate.cpp \\\n+  policy/policy.cpp \\\n   protocol.cpp \\\n   psbt.cpp \\\n   scheduler.cpp \\"
      },
      {
        "sha": "652b99474cb85218984e011662872f0d93a5427b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a75c9d6512a5580e60104103ea11d2cd9586354/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a75c9d6512a5580e60104103ea11d2cd9586354/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4a75c9d6512a5580e60104103ea11d2cd9586354",
        "patch": "@@ -31,6 +31,7 @@\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n+#include <policy/settings.h>\n #include <rpc/server.h>\n #include <rpc/register.h>\n #include <rpc/blockchain.h>"
      },
      {
        "sha": "13e7848cc64d3c8121b984686c2eb5dbefd43c58",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a75c9d6512a5580e60104103ea11d2cd9586354/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a75c9d6512a5580e60104103ea11d2cd9586354/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=4a75c9d6512a5580e60104103ea11d2cd9586354",
        "patch": "@@ -13,6 +13,7 @@\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n+#include <policy/settings.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <protocol.h>"
      },
      {
        "sha": "73a507413324eeea32c14333b4d34aca5a6bcc2b",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a75c9d6512a5580e60104103ea11d2cd9586354/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a75c9d6512a5580e60104103ea11d2cd9586354/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=4a75c9d6512a5580e60104103ea11d2cd9586354",
        "patch": "@@ -20,6 +20,7 @@\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n+#include <policy/settings.h>\n #include <primitives/block.h>\n #include <rpc/server.h>\n #include <scheduler.h>"
      },
      {
        "sha": "f1e6aadb5af79b59f54df3e69d5f3fb0b4a34c07",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a75c9d6512a5580e60104103ea11d2cd9586354/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a75c9d6512a5580e60104103ea11d2cd9586354/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=4a75c9d6512a5580e60104103ea11d2cd9586354",
        "patch": "@@ -10,6 +10,7 @@\n #include <consensus/validation.h>\n #include <validation.h>\n #include <coins.h>\n+#include <policy/settings.h>\n #include <tinyformat.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n@@ -239,10 +240,6 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n-CFeeRate incrementalRelayFee = CFeeRate(DEFAULT_INCREMENTAL_RELAY_FEE);\n-CFeeRate dustRelayFee = CFeeRate(DUST_RELAY_TX_FEE);\n-unsigned int nBytesPerSigOp = DEFAULT_BYTES_PER_SIGOP;\n-\n int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost)\n {\n     return (std::max(nWeight, nSigOpCost * nBytesPerSigOp) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;"
      },
      {
        "sha": "8660af26de00958003d5d97a346191f5fcb0f329",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a75c9d6512a5580e60104103ea11d2cd9586354/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a75c9d6512a5580e60104103ea11d2cd9586354/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=4a75c9d6512a5580e60104103ea11d2cd9586354",
        "patch": "@@ -34,6 +34,8 @@ static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n static const unsigned int DEFAULT_INCREMENTAL_RELAY_FEE = 1000;\n /** Default for -bytespersigop */\n static const unsigned int DEFAULT_BYTES_PER_SIGOP = 20;\n+/** Default for -permitbaremultisig */\n+static const bool DEFAULT_PERMIT_BAREMULTISIG = true;\n /** The maximum number of witness stack items in a standard P2WSH script */\n static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEMS = 100;\n /** The maximum size of each witness stack item in a standard P2WSH script */\n@@ -98,10 +100,6 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n      */\n bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n-extern CFeeRate incrementalRelayFee;\n-extern CFeeRate dustRelayFee;\n-extern unsigned int nBytesPerSigOp;\n-\n /** Compute the virtual transaction size (weight reinterpreted as bytes). */\n int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost);\n int64_t GetVirtualTransactionSize(const CTransaction& tx, int64_t nSigOpCost = 0);"
      },
      {
        "sha": "e8e1559407a3f59c3bdcbe380443288de1490cc4",
        "filename": "src/policy/settings.cpp",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a75c9d6512a5580e60104103ea11d2cd9586354/src/policy/settings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a75c9d6512a5580e60104103ea11d2cd9586354/src/policy/settings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/settings.cpp?ref=4a75c9d6512a5580e60104103ea11d2cd9586354",
        "patch": "@@ -0,0 +1,14 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/settings.h>\n+\n+#include <policy/feerate.h>\n+#include <policy/policy.h>\n+\n+bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;\n+CFeeRate incrementalRelayFee = CFeeRate(DEFAULT_INCREMENTAL_RELAY_FEE);\n+CFeeRate dustRelayFee = CFeeRate(DUST_RELAY_TX_FEE);\n+unsigned int nBytesPerSigOp = DEFAULT_BYTES_PER_SIGOP;"
      },
      {
        "sha": "1d2a1fb880cadb06b66f1aa0ef7a8a27992636ec",
        "filename": "src/policy/settings.h",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a75c9d6512a5580e60104103ea11d2cd9586354/src/policy/settings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a75c9d6512a5580e60104103ea11d2cd9586354/src/policy/settings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/settings.h?ref=4a75c9d6512a5580e60104103ea11d2cd9586354",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_SETTINGS_H\n+#define BITCOIN_POLICY_SETTINGS_H\n+\n+class CFeeRate;\n+\n+// Policy settings which are configurable at runtime.\n+extern CFeeRate incrementalRelayFee;\n+extern CFeeRate dustRelayFee;\n+extern unsigned int nBytesPerSigOp;\n+extern bool fIsBareMultisigStd;\n+\n+#endif // BITCOIN_POLICY_SETTINGS_H"
      },
      {
        "sha": "e8cdce623caabed5dcff6736349e81474966fcf5",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a75c9d6512a5580e60104103ea11d2cd9586354/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a75c9d6512a5580e60104103ea11d2cd9586354/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=4a75c9d6512a5580e60104103ea11d2cd9586354",
        "patch": "@@ -12,6 +12,7 @@\n #include <net_processing.h>\n #include <netbase.h>\n #include <policy/policy.h>\n+#include <policy/settings.h>\n #include <rpc/protocol.h>\n #include <rpc/util.h>\n #include <sync.h>"
      },
      {
        "sha": "400c89726f7e2ead43580924d4887d08db95099f",
        "filename": "src/test/script_p2sh_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a75c9d6512a5580e60104103ea11d2cd9586354/src/test/script_p2sh_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a75c9d6512a5580e60104103ea11d2cd9586354/src/test/script_p2sh_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_p2sh_tests.cpp?ref=4a75c9d6512a5580e60104103ea11d2cd9586354",
        "patch": "@@ -10,6 +10,7 @@\n #include <policy/policy.h>\n #include <script/script.h>\n #include <script/script_error.h>\n+#include <policy/settings.h>\n #include <script/sign.h>\n #include <script/ismine.h>\n #include <test/test_bitcoin.h>"
      },
      {
        "sha": "ed77b7f52b358c72e287f40b5ceea4a67fe2c5d2",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a75c9d6512a5580e60104103ea11d2cd9586354/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a75c9d6512a5580e60104103ea11d2cd9586354/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=4a75c9d6512a5580e60104103ea11d2cd9586354",
        "patch": "@@ -15,6 +15,7 @@\n #include <keystore.h>\n #include <validation.h>\n #include <policy/policy.h>\n+#include <policy/settings.h>\n #include <script/script.h>\n #include <script/sign.h>\n #include <script/script_error.h>"
      },
      {
        "sha": "daac24cc4061c7d1f452fbfb1fc99fa205040a93",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a75c9d6512a5580e60104103ea11d2cd9586354/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a75c9d6512a5580e60104103ea11d2cd9586354/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4a75c9d6512a5580e60104103ea11d2cd9586354",
        "patch": "@@ -11,6 +11,7 @@\n #include <validation.h>\n #include <policy/policy.h>\n #include <policy/fees.h>\n+#include <policy/settings.h>\n #include <reverse_iterator.h>\n #include <streams.h>\n #include <timedata.h>"
      },
      {
        "sha": "8cdc7a9273a78bf62c3c8dee363d5149c8967f6e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a75c9d6512a5580e60104103ea11d2cd9586354/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a75c9d6512a5580e60104103ea11d2cd9586354/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4a75c9d6512a5580e60104103ea11d2cd9586354",
        "patch": "@@ -22,6 +22,7 @@\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n+#include <policy/settings.h>\n #include <pow.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n@@ -237,7 +238,6 @@ std::atomic_bool fImporting(false);\n std::atomic_bool fReindex(false);\n bool fHavePruned = false;\n bool fPruneMode = false;\n-bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;\n bool fRequireStandard = true;\n bool fCheckBlockIndex = false;\n bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;"
      },
      {
        "sha": "673067dc35b9d832e6dcea870896c5da0ad945d9",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a75c9d6512a5580e60104103ea11d2cd9586354/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a75c9d6512a5580e60104103ea11d2cd9586354/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=4a75c9d6512a5580e60104103ea11d2cd9586354",
        "patch": "@@ -114,8 +114,6 @@ static const int64_t DEFAULT_MAX_TIP_AGE = 24 * 60 * 60;\n /** Maximum age of our tip in seconds for us to be considered current for fee estimation */\n static const int64_t MAX_FEE_ESTIMATION_TIP_AGE = 3 * 60 * 60;\n \n-/** Default for -permitbaremultisig */\n-static const bool DEFAULT_PERMIT_BAREMULTISIG = true;\n static const bool DEFAULT_CHECKPOINTS_ENABLED = true;\n static const bool DEFAULT_TXINDEX = false;\n static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n@@ -159,7 +157,6 @@ extern uint256 g_best_block;\n extern std::atomic_bool fImporting;\n extern std::atomic_bool fReindex;\n extern int nScriptCheckThreads;\n-extern bool fIsBareMultisigStd;\n extern bool fRequireStandard;\n extern bool fCheckBlockIndex;\n extern bool fCheckpointsEnabled;"
      },
      {
        "sha": "7775e769485217d16b920f4b05e90c1cdd1dcfcd",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a75c9d6512a5580e60104103ea11d2cd9586354/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a75c9d6512a5580e60104103ea11d2cd9586354/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=4a75c9d6512a5580e60104103ea11d2cd9586354",
        "patch": "@@ -13,7 +13,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"checkpoints -> validation -> checkpoints\"\n     \"index/txindex -> validation -> index/txindex\"\n     \"policy/fees -> txmempool -> policy/fees\"\n-    \"policy/policy -> validation -> policy/policy\"\n+    \"policy/policy -> policy/settings -> policy/policy\"\n     \"qt/addresstablemodel -> qt/walletmodel -> qt/addresstablemodel\"\n     \"qt/bantablemodel -> qt/clientmodel -> qt/bantablemodel\"\n     \"qt/bitcoingui -> qt/utilitydialog -> qt/bitcoingui\"\n@@ -31,6 +31,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n     \"policy/fees -> policy/policy -> validation -> policy/fees\"\n+    \"policy/policy -> validation -> policy/policy\"\n     \"policy/rbf -> txmempool -> validation -> policy/rbf\"\n     \"qt/addressbookpage -> qt/bitcoingui -> qt/walletview -> qt/addressbookpage\"\n     \"qt/guiutil -> qt/walletmodel -> qt/optionsmodel -> qt/guiutil\""
      }
    ]
  },
  {
    "sha": "1acc61f8746bc6efb905e121a9f607c4f5982b35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWNjNjFmODc0NmJjNmVmYjkwNWUxMjFhOWY2MDdjNGY1OTgyYjM1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-02T20:42:51Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-09T21:53:08Z"
      },
      "message": "[build] Move rpc utility methods to rpc/util\n\nMoves the following utility methods to rpc/util and moves that unit to\nlibbitcoin_common so they can be accessed by all libraries.\n\n- `RPCTypeCheck`\n- `RPCTypeCheckArgument`\n- `RPCTypeCheckObj`\n- `AmountFromValue`\n- `ParseHashV``ParseHashO`\n- `ParseHexV`\n- `ParseHexO`\n- `HelpExampleCli`\n- `HelpExampleRpc`",
      "tree": {
        "sha": "0b332f29a18351a6bbe7d8536890a7f7894178f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b332f29a18351a6bbe7d8536890a7f7894178f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1acc61f8746bc6efb905e121a9f607c4f5982b35",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1acc61f8746bc6efb905e121a9f607c4f5982b35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1acc61f8746bc6efb905e121a9f607c4f5982b35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1acc61f8746bc6efb905e121a9f607c4f5982b35/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a75c9d6512a5580e60104103ea11d2cd9586354",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a75c9d6512a5580e60104103ea11d2cd9586354",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a75c9d6512a5580e60104103ea11d2cd9586354"
      }
    ],
    "stats": {
      "total": 296,
      "additions": 148,
      "deletions": 148
    },
    "files": [
      {
        "sha": "cbbf35ccb9eb07df272582841a341a27f2987c09",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1acc61f8746bc6efb905e121a9f607c4f5982b35/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1acc61f8746bc6efb905e121a9f607c4f5982b35/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=1acc61f8746bc6efb905e121a9f607c4f5982b35",
        "patch": "@@ -280,7 +280,6 @@ libbitcoin_server_a_SOURCES = \\\n   rpc/net.cpp \\\n   rpc/rawtransaction.cpp \\\n   rpc/server.cpp \\\n-  rpc/util.cpp \\\n   script/sigcache.cpp \\\n   shutdown.cpp \\\n   timedata.cpp \\\n@@ -440,6 +439,7 @@ libbitcoin_common_a_SOURCES = \\\n   policy/policy.cpp \\\n   protocol.cpp \\\n   psbt.cpp \\\n+  rpc/util.cpp \\\n   scheduler.cpp \\\n   script/descriptor.cpp \\\n   script/ismine.cpp \\"
      },
      {
        "sha": "a97e3704ed924383e5b287f3be0a5d56f0d4e968",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 104,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1acc61f8746bc6efb905e121a9f607c4f5982b35/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1acc61f8746bc6efb905e121a9f607c4f5982b35/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=1acc61f8746bc6efb905e121a9f607c4f5982b35",
        "patch": "@@ -77,99 +77,6 @@ void RPCServer::OnStopped(std::function<void ()> slot)\n     g_rpcSignals.Stopped.connect(slot);\n }\n \n-void RPCTypeCheck(const UniValue& params,\n-                  const std::list<UniValueType>& typesExpected,\n-                  bool fAllowNull)\n-{\n-    unsigned int i = 0;\n-    for (const UniValueType& t : typesExpected) {\n-        if (params.size() <= i)\n-            break;\n-\n-        const UniValue& v = params[i];\n-        if (!(fAllowNull && v.isNull())) {\n-            RPCTypeCheckArgument(v, t);\n-        }\n-        i++;\n-    }\n-}\n-\n-void RPCTypeCheckArgument(const UniValue& value, const UniValueType& typeExpected)\n-{\n-    if (!typeExpected.typeAny && value.type() != typeExpected.type) {\n-        throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Expected type %s, got %s\", uvTypeName(typeExpected.type), uvTypeName(value.type())));\n-    }\n-}\n-\n-void RPCTypeCheckObj(const UniValue& o,\n-    const std::map<std::string, UniValueType>& typesExpected,\n-    bool fAllowNull,\n-    bool fStrict)\n-{\n-    for (const auto& t : typesExpected) {\n-        const UniValue& v = find_value(o, t.first);\n-        if (!fAllowNull && v.isNull())\n-            throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Missing %s\", t.first));\n-\n-        if (!(t.second.typeAny || v.type() == t.second.type || (fAllowNull && v.isNull()))) {\n-            std::string err = strprintf(\"Expected type %s for %s, got %s\",\n-                uvTypeName(t.second.type), t.first, uvTypeName(v.type()));\n-            throw JSONRPCError(RPC_TYPE_ERROR, err);\n-        }\n-    }\n-\n-    if (fStrict)\n-    {\n-        for (const std::string& k : o.getKeys())\n-        {\n-            if (typesExpected.count(k) == 0)\n-            {\n-                std::string err = strprintf(\"Unexpected key %s\", k);\n-                throw JSONRPCError(RPC_TYPE_ERROR, err);\n-            }\n-        }\n-    }\n-}\n-\n-CAmount AmountFromValue(const UniValue& value)\n-{\n-    if (!value.isNum() && !value.isStr())\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Amount is not a number or string\");\n-    CAmount amount;\n-    if (!ParseFixedPoint(value.getValStr(), 8, &amount))\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n-    if (!MoneyRange(amount))\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Amount out of range\");\n-    return amount;\n-}\n-\n-uint256 ParseHashV(const UniValue& v, std::string strName)\n-{\n-    std::string strHex(v.get_str());\n-    if (64 != strHex.length())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", strName, 64, strHex.length(), strHex));\n-    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n-    return uint256S(strHex);\n-}\n-uint256 ParseHashO(const UniValue& o, std::string strKey)\n-{\n-    return ParseHashV(find_value(o, strKey), strKey);\n-}\n-std::vector<unsigned char> ParseHexV(const UniValue& v, std::string strName)\n-{\n-    std::string strHex;\n-    if (v.isStr())\n-        strHex = v.get_str();\n-    if (!IsHex(strHex))\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n-    return ParseHex(strHex);\n-}\n-std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey)\n-{\n-    return ParseHexV(find_value(o, strKey), strKey);\n-}\n-\n std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest& helpreq) const\n {\n     std::string strRet;\n@@ -581,17 +488,6 @@ std::vector<std::string> CRPCTable::listCommands() const\n     return commandList;\n }\n \n-std::string HelpExampleCli(const std::string& methodname, const std::string& args)\n-{\n-    return \"> bitcoin-cli \" + methodname + \" \" + args + \"\\n\";\n-}\n-\n-std::string HelpExampleRpc(const std::string& methodname, const std::string& args)\n-{\n-    return \"> curl --user myusername --data-binary '{\\\"jsonrpc\\\": \\\"1.0\\\", \\\"id\\\":\\\"curltest\\\", \"\n-        \"\\\"method\\\": \\\"\" + methodname + \"\\\", \\\"params\\\": [\" + args + \"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\\n\";\n-}\n-\n void RPCSetTimerInterfaceIfUnset(RPCTimerInterface *iface)\n {\n     if (!timerInterface)"
      },
      {
        "sha": "431ff0bb7c97991064a8af2677087b6a2030ac49",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 0,
        "deletions": 42,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1acc61f8746bc6efb905e121a9f607c4f5982b35/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1acc61f8746bc6efb905e121a9f607c4f5982b35/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=1acc61f8746bc6efb905e121a9f607c4f5982b35",
        "patch": "@@ -27,15 +27,6 @@ namespace RPCServer\n     void OnStopped(std::function<void ()> slot);\n }\n \n-/** Wrapper for UniValue::VType, which includes typeAny:\n- * Used to denote don't care type. */\n-struct UniValueType {\n-    UniValueType(UniValue::VType _type) : typeAny(false), type(_type) {}\n-    UniValueType() : typeAny(true) {}\n-    bool typeAny;\n-    UniValue::VType type;\n-};\n-\n class JSONRPCRequest\n {\n public:\n@@ -65,26 +56,6 @@ void SetRPCWarmupFinished();\n /* returns the current warmup state.  */\n bool RPCIsInWarmup(std::string *outStatus);\n \n-/**\n- * Type-check arguments; throws JSONRPCError if wrong type given. Does not check that\n- * the right number of arguments are passed, just that any passed are the correct type.\n- */\n-void RPCTypeCheck(const UniValue& params,\n-                  const std::list<UniValueType>& typesExpected, bool fAllowNull=false);\n-\n-/**\n- * Type-check one argument; throws JSONRPCError if wrong type given.\n- */\n-void RPCTypeCheckArgument(const UniValue& value, const UniValueType& typeExpected);\n-\n-/*\n-  Check for expected keys/value types in an Object.\n-*/\n-void RPCTypeCheckObj(const UniValue& o,\n-    const std::map<std::string, UniValueType>& typesExpected,\n-    bool fAllowNull = false,\n-    bool fStrict = false);\n-\n /** Opaque base class for timers returned by NewTimerFunc.\n  * This provides no methods at the moment, but makes sure that delete\n  * cleans up the whole state.\n@@ -204,19 +175,6 @@ bool IsDeprecatedRPCEnabled(const std::string& method);\n \n extern CRPCTable tableRPC;\n \n-/**\n- * Utilities: convert hex-encoded Values\n- * (throws error if not hex).\n- */\n-extern uint256 ParseHashV(const UniValue& v, std::string strName);\n-extern uint256 ParseHashO(const UniValue& o, std::string strKey);\n-extern std::vector<unsigned char> ParseHexV(const UniValue& v, std::string strName);\n-extern std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey);\n-\n-extern CAmount AmountFromValue(const UniValue& value);\n-extern std::string HelpExampleCli(const std::string& methodname, const std::string& args);\n-extern std::string HelpExampleRpc(const std::string& methodname, const std::string& args);\n-\n void StartRPC();\n void InterruptRPC();\n void StopRPC();"
      },
      {
        "sha": "78e919140914b075f39c5d8a28e339844294a4fc",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 104,
        "deletions": 0,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1acc61f8746bc6efb905e121a9f607c4f5982b35/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1acc61f8746bc6efb905e121a9f607c4f5982b35/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=1acc61f8746bc6efb905e121a9f607c4f5982b35",
        "patch": "@@ -10,6 +10,110 @@\n \n InitInterfaces* g_rpc_interfaces = nullptr;\n \n+void RPCTypeCheck(const UniValue& params,\n+                  const std::list<UniValueType>& typesExpected,\n+                  bool fAllowNull)\n+{\n+    unsigned int i = 0;\n+    for (const UniValueType& t : typesExpected) {\n+        if (params.size() <= i)\n+            break;\n+\n+        const UniValue& v = params[i];\n+        if (!(fAllowNull && v.isNull())) {\n+            RPCTypeCheckArgument(v, t);\n+        }\n+        i++;\n+    }\n+}\n+\n+void RPCTypeCheckArgument(const UniValue& value, const UniValueType& typeExpected)\n+{\n+    if (!typeExpected.typeAny && value.type() != typeExpected.type) {\n+        throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Expected type %s, got %s\", uvTypeName(typeExpected.type), uvTypeName(value.type())));\n+    }\n+}\n+\n+void RPCTypeCheckObj(const UniValue& o,\n+    const std::map<std::string, UniValueType>& typesExpected,\n+    bool fAllowNull,\n+    bool fStrict)\n+{\n+    for (const auto& t : typesExpected) {\n+        const UniValue& v = find_value(o, t.first);\n+        if (!fAllowNull && v.isNull())\n+            throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Missing %s\", t.first));\n+\n+        if (!(t.second.typeAny || v.type() == t.second.type || (fAllowNull && v.isNull()))) {\n+            std::string err = strprintf(\"Expected type %s for %s, got %s\",\n+                uvTypeName(t.second.type), t.first, uvTypeName(v.type()));\n+            throw JSONRPCError(RPC_TYPE_ERROR, err);\n+        }\n+    }\n+\n+    if (fStrict)\n+    {\n+        for (const std::string& k : o.getKeys())\n+        {\n+            if (typesExpected.count(k) == 0)\n+            {\n+                std::string err = strprintf(\"Unexpected key %s\", k);\n+                throw JSONRPCError(RPC_TYPE_ERROR, err);\n+            }\n+        }\n+    }\n+}\n+\n+CAmount AmountFromValue(const UniValue& value)\n+{\n+    if (!value.isNum() && !value.isStr())\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Amount is not a number or string\");\n+    CAmount amount;\n+    if (!ParseFixedPoint(value.getValStr(), 8, &amount))\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n+    if (!MoneyRange(amount))\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Amount out of range\");\n+    return amount;\n+}\n+\n+uint256 ParseHashV(const UniValue& v, std::string strName)\n+{\n+    std::string strHex(v.get_str());\n+    if (64 != strHex.length())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", strName, 64, strHex.length(), strHex));\n+    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n+    return uint256S(strHex);\n+}\n+uint256 ParseHashO(const UniValue& o, std::string strKey)\n+{\n+    return ParseHashV(find_value(o, strKey), strKey);\n+}\n+std::vector<unsigned char> ParseHexV(const UniValue& v, std::string strName)\n+{\n+    std::string strHex;\n+    if (v.isStr())\n+        strHex = v.get_str();\n+    if (!IsHex(strHex))\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n+    return ParseHex(strHex);\n+}\n+std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey)\n+{\n+    return ParseHexV(find_value(o, strKey), strKey);\n+}\n+\n+std::string HelpExampleCli(const std::string& methodname, const std::string& args)\n+{\n+    return \"> bitcoin-cli \" + methodname + \" \" + args + \"\\n\";\n+}\n+\n+std::string HelpExampleRpc(const std::string& methodname, const std::string& args)\n+{\n+    return \"> curl --user myusername --data-binary '{\\\"jsonrpc\\\": \\\"1.0\\\", \\\"id\\\":\\\"curltest\\\", \"\n+        \"\\\"method\\\": \\\"\" + methodname + \"\\\", \\\"params\\\": [\" + args + \"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\\n\";\n+}\n+\n // Converts a hex string to a public key if possible\n CPubKey HexToPubKey(const std::string& hex_in)\n {"
      },
      {
        "sha": "b5b578925342bd3d30b61da36517d0280ce5c2e1",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1acc61f8746bc6efb905e121a9f607c4f5982b35/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1acc61f8746bc6efb905e121a9f607c4f5982b35/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=1acc61f8746bc6efb905e121a9f607c4f5982b35",
        "patch": "@@ -26,6 +26,48 @@ struct InitInterfaces;\n //! state to RPC method implementations.\n extern InitInterfaces* g_rpc_interfaces;\n \n+/** Wrapper for UniValue::VType, which includes typeAny:\n+ * Used to denote don't care type. */\n+struct UniValueType {\n+    UniValueType(UniValue::VType _type) : typeAny(false), type(_type) {}\n+    UniValueType() : typeAny(true) {}\n+    bool typeAny;\n+    UniValue::VType type;\n+};\n+\n+/**\n+ * Type-check arguments; throws JSONRPCError if wrong type given. Does not check that\n+ * the right number of arguments are passed, just that any passed are the correct type.\n+ */\n+void RPCTypeCheck(const UniValue& params,\n+                  const std::list<UniValueType>& typesExpected, bool fAllowNull=false);\n+\n+/**\n+ * Type-check one argument; throws JSONRPCError if wrong type given.\n+ */\n+void RPCTypeCheckArgument(const UniValue& value, const UniValueType& typeExpected);\n+\n+/*\n+  Check for expected keys/value types in an Object.\n+*/\n+void RPCTypeCheckObj(const UniValue& o,\n+    const std::map<std::string, UniValueType>& typesExpected,\n+    bool fAllowNull = false,\n+    bool fStrict = false);\n+\n+/**\n+ * Utilities: convert hex-encoded Values\n+ * (throws error if not hex).\n+ */\n+extern uint256 ParseHashV(const UniValue& v, std::string strName);\n+extern uint256 ParseHashO(const UniValue& o, std::string strKey);\n+extern std::vector<unsigned char> ParseHexV(const UniValue& v, std::string strName);\n+extern std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey);\n+\n+extern CAmount AmountFromValue(const UniValue& value);\n+extern std::string HelpExampleCli(const std::string& methodname, const std::string& args);\n+extern std::string HelpExampleRpc(const std::string& methodname, const std::string& args);\n+\n CPubKey HexToPubKey(const std::string& hex_in);\n CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in);\n CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey>& pubkeys);"
      },
      {
        "sha": "b964c6e4794e39c82f4fd6b5b5832dab4cde13c8",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1acc61f8746bc6efb905e121a9f607c4f5982b35/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1acc61f8746bc6efb905e121a9f607c4f5982b35/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=1acc61f8746bc6efb905e121a9f607c4f5982b35",
        "patch": "@@ -13,7 +13,7 @@\n #include <util/system.h>\n #include <util/strencodings.h>\n #include <test/test_bitcoin.h>\n-#include <rpc/server.h>\n+#include <rpc/util.h>\n \n #if defined(HAVE_CONSENSUS_LIB)\n #include <script/bitcoinconsensus.h>"
      }
    ]
  },
  {
    "sha": "0509465542d63a5bbe7296f283f44dd491e74f78",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTA5NDY1NTQyZDYzYTViYmU3Mjk2ZjI4M2Y0NGRkNDkxZTc0Zjc4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-02T20:51:32Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-09T21:53:08Z"
      },
      "message": "[build] Move rpc rawtransaction util functions to rpc/rawtransaction_util.cpp\n\nrpc/rawtransaction.cpp moves to libbitcoin_server since it should not be\naccessed by non-node libraries. The utility following utility methods\nmove to their own unit rpc/rawtransaction_util since they need to be\naccessed by non-node libraries:\n\n- `ConstructTransaction`\n- `TxInErrorToJSON`\n- `SignTransaction`",
      "tree": {
        "sha": "142c4a2249c49d0060cd9e64d89f63b77e6e3445",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/142c4a2249c49d0060cd9e64d89f63b77e6e3445"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0509465542d63a5bbe7296f283f44dd491e74f78",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0509465542d63a5bbe7296f283f44dd491e74f78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0509465542d63a5bbe7296f283f44dd491e74f78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0509465542d63a5bbe7296f283f44dd491e74f78/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1acc61f8746bc6efb905e121a9f607c4f5982b35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1acc61f8746bc6efb905e121a9f607c4f5982b35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1acc61f8746bc6efb905e121a9f607c4f5982b35"
      }
    ],
    "stats": {
      "total": 584,
      "additions": 301,
      "deletions": 283
    },
    "files": [
      {
        "sha": "b0d718f60a7a355805d5cfdc990c1322f7c1092e",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0509465542d63a5bbe7296f283f44dd491e74f78/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0509465542d63a5bbe7296f283f44dd491e74f78/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=0509465542d63a5bbe7296f283f44dd491e74f78",
        "patch": "@@ -176,7 +176,7 @@ BITCOIN_CORE_H = \\\n   rpc/mining.h \\\n   rpc/protocol.h \\\n   rpc/server.h \\\n-  rpc/rawtransaction.h \\\n+  rpc/rawtransaction_util.h \\\n   rpc/register.h \\\n   rpc/util.h \\\n   scheduler.h \\\n@@ -439,6 +439,7 @@ libbitcoin_common_a_SOURCES = \\\n   policy/policy.cpp \\\n   protocol.cpp \\\n   psbt.cpp \\\n+  rpc/rawtransaction_util.cpp \\\n   rpc/util.cpp \\\n   scheduler.cpp \\\n   script/descriptor.cpp \\"
      },
      {
        "sha": "4da952060efdec96102416cda3c7c7e2216e78d0",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 277,
        "changes": 278,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0509465542d63a5bbe7296f283f44dd491e74f78/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0509465542d63a5bbe7296f283f44dd491e74f78/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=0509465542d63a5bbe7296f283f44dd491e74f78",
        "patch": "@@ -20,7 +20,7 @@\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n #include <psbt.h>\n-#include <rpc/rawtransaction.h>\n+#include <rpc/rawtransaction_util.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n #include <script/script.h>\n@@ -359,119 +359,6 @@ static UniValue verifytxoutproof(const JSONRPCRequest& request)\n     return res;\n }\n \n-CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, const UniValue& rbf)\n-{\n-    if (inputs_in.isNull() || outputs_in.isNull())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, arguments 1 and 2 must be non-null\");\n-\n-    UniValue inputs = inputs_in.get_array();\n-    const bool outputs_is_obj = outputs_in.isObject();\n-    UniValue outputs = outputs_is_obj ? outputs_in.get_obj() : outputs_in.get_array();\n-\n-    CMutableTransaction rawTx;\n-\n-    if (!locktime.isNull()) {\n-        int64_t nLockTime = locktime.get_int64();\n-        if (nLockTime < 0 || nLockTime > LOCKTIME_MAX)\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, locktime out of range\");\n-        rawTx.nLockTime = nLockTime;\n-    }\n-\n-    bool rbfOptIn = rbf.isTrue();\n-\n-    for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n-        const UniValue& input = inputs[idx];\n-        const UniValue& o = input.get_obj();\n-\n-        uint256 txid = ParseHashO(o, \"txid\");\n-\n-        const UniValue& vout_v = find_value(o, \"vout\");\n-        if (!vout_v.isNum())\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, missing vout key\");\n-        int nOutput = vout_v.get_int();\n-        if (nOutput < 0)\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout must be positive\");\n-\n-        uint32_t nSequence;\n-        if (rbfOptIn) {\n-            nSequence = MAX_BIP125_RBF_SEQUENCE; /* CTxIn::SEQUENCE_FINAL - 2 */\n-        } else if (rawTx.nLockTime) {\n-            nSequence = CTxIn::SEQUENCE_FINAL - 1;\n-        } else {\n-            nSequence = CTxIn::SEQUENCE_FINAL;\n-        }\n-\n-        // set the sequence number if passed in the parameters object\n-        const UniValue& sequenceObj = find_value(o, \"sequence\");\n-        if (sequenceObj.isNum()) {\n-            int64_t seqNr64 = sequenceObj.get_int64();\n-            if (seqNr64 < 0 || seqNr64 > CTxIn::SEQUENCE_FINAL) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, sequence number is out of range\");\n-            } else {\n-                nSequence = (uint32_t)seqNr64;\n-            }\n-        }\n-\n-        CTxIn in(COutPoint(txid, nOutput), CScript(), nSequence);\n-\n-        rawTx.vin.push_back(in);\n-    }\n-\n-    if (!outputs_is_obj) {\n-        // Translate array of key-value pairs into dict\n-        UniValue outputs_dict = UniValue(UniValue::VOBJ);\n-        for (size_t i = 0; i < outputs.size(); ++i) {\n-            const UniValue& output = outputs[i];\n-            if (!output.isObject()) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, key-value pair not an object as expected\");\n-            }\n-            if (output.size() != 1) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, key-value pair must contain exactly one key\");\n-            }\n-            outputs_dict.pushKVs(output);\n-        }\n-        outputs = std::move(outputs_dict);\n-    }\n-\n-    // Duplicate checking\n-    std::set<CTxDestination> destinations;\n-    bool has_data{false};\n-\n-    for (const std::string& name_ : outputs.getKeys()) {\n-        if (name_ == \"data\") {\n-            if (has_data) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, duplicate key: data\");\n-            }\n-            has_data = true;\n-            std::vector<unsigned char> data = ParseHexV(outputs[name_].getValStr(), \"Data\");\n-\n-            CTxOut out(0, CScript() << OP_RETURN << data);\n-            rawTx.vout.push_back(out);\n-        } else {\n-            CTxDestination destination = DecodeDestination(name_);\n-            if (!IsValidDestination(destination)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(\"Invalid Bitcoin address: \") + name_);\n-            }\n-\n-            if (!destinations.insert(destination).second) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, duplicated address: \") + name_);\n-            }\n-\n-            CScript scriptPubKey = GetScriptForDestination(destination);\n-            CAmount nAmount = AmountFromValue(outputs[name_]);\n-\n-            CTxOut out(nAmount, scriptPubKey);\n-            rawTx.vout.push_back(out);\n-        }\n-    }\n-\n-    if (!rbf.isNull() && rawTx.vin.size() > 0 && rbfOptIn != SignalsOptInRBF(CTransaction(rawTx))) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter combination: Sequence number(s) contradict replaceable option\");\n-    }\n-\n-    return rawTx;\n-}\n-\n static UniValue createrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 4) {\n@@ -717,23 +604,6 @@ static UniValue decodescript(const JSONRPCRequest& request)\n     return r;\n }\n \n-/** Pushes a JSON object for script verification or signing errors to vErrorsRet. */\n-static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::string& strMessage)\n-{\n-    UniValue entry(UniValue::VOBJ);\n-    entry.pushKV(\"txid\", txin.prevout.hash.ToString());\n-    entry.pushKV(\"vout\", (uint64_t)txin.prevout.n);\n-    UniValue witness(UniValue::VARR);\n-    for (unsigned int i = 0; i < txin.scriptWitness.stack.size(); i++) {\n-        witness.push_back(HexStr(txin.scriptWitness.stack[i].begin(), txin.scriptWitness.stack[i].end()));\n-    }\n-    entry.pushKV(\"witness\", witness);\n-    entry.pushKV(\"scriptSig\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n-    entry.pushKV(\"sequence\", (uint64_t)txin.nSequence);\n-    entry.pushKV(\"error\", strMessage);\n-    vErrorsRet.push_back(entry);\n-}\n-\n static UniValue combinerawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n@@ -818,152 +688,6 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n     return EncodeHexTx(CTransaction(mergedTx));\n }\n \n-// TODO(https://github.com/bitcoin/bitcoin/pull/10973#discussion_r267084237):\n-// This function is called from both wallet and node rpcs\n-// (signrawtransactionwithwallet and signrawtransactionwithkey). It should be\n-// moved to a util file so wallet code doesn't need to link against node code.\n-// Also the dependency on interfaces::Chain should be removed, so\n-// signrawtransactionwithkey doesn't need access to a Chain instance.\n-UniValue SignTransaction(interfaces::Chain& chain, CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore *keystore, bool is_temp_keystore, const UniValue& hashType)\n-{\n-    // Fetch previous transactions (inputs):\n-    std::map<COutPoint, Coin> coins;\n-    for (const CTxIn& txin : mtx.vin) {\n-        coins[txin.prevout]; // Create empty map entry keyed by prevout.\n-    }\n-    chain.findCoins(coins);\n-\n-    // Add previous txouts given in the RPC call:\n-    if (!prevTxsUnival.isNull()) {\n-        UniValue prevTxs = prevTxsUnival.get_array();\n-        for (unsigned int idx = 0; idx < prevTxs.size(); ++idx) {\n-            const UniValue& p = prevTxs[idx];\n-            if (!p.isObject()) {\n-                throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"expected object with {\\\"txid'\\\",\\\"vout\\\",\\\"scriptPubKey\\\"}\");\n-            }\n-\n-            UniValue prevOut = p.get_obj();\n-\n-            RPCTypeCheckObj(prevOut,\n-                {\n-                    {\"txid\", UniValueType(UniValue::VSTR)},\n-                    {\"vout\", UniValueType(UniValue::VNUM)},\n-                    {\"scriptPubKey\", UniValueType(UniValue::VSTR)},\n-                });\n-\n-            uint256 txid = ParseHashO(prevOut, \"txid\");\n-\n-            int nOut = find_value(prevOut, \"vout\").get_int();\n-            if (nOut < 0) {\n-                throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"vout must be positive\");\n-            }\n-\n-            COutPoint out(txid, nOut);\n-            std::vector<unsigned char> pkData(ParseHexO(prevOut, \"scriptPubKey\"));\n-            CScript scriptPubKey(pkData.begin(), pkData.end());\n-\n-            {\n-                auto coin = coins.find(out);\n-                if (coin != coins.end() && !coin->second.IsSpent() && coin->second.out.scriptPubKey != scriptPubKey) {\n-                    std::string err(\"Previous output scriptPubKey mismatch:\\n\");\n-                    err = err + ScriptToAsmStr(coin->second.out.scriptPubKey) + \"\\nvs:\\n\"+\n-                        ScriptToAsmStr(scriptPubKey);\n-                    throw JSONRPCError(RPC_DESERIALIZATION_ERROR, err);\n-                }\n-                Coin newcoin;\n-                newcoin.out.scriptPubKey = scriptPubKey;\n-                newcoin.out.nValue = MAX_MONEY;\n-                if (prevOut.exists(\"amount\")) {\n-                    newcoin.out.nValue = AmountFromValue(find_value(prevOut, \"amount\"));\n-                }\n-                newcoin.nHeight = 1;\n-                coins[out] = std::move(newcoin);\n-            }\n-\n-            // if redeemScript and private keys were given, add redeemScript to the keystore so it can be signed\n-            if (is_temp_keystore && (scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash())) {\n-                RPCTypeCheckObj(prevOut,\n-                    {\n-                        {\"redeemScript\", UniValueType(UniValue::VSTR)},\n-                        {\"witnessScript\", UniValueType(UniValue::VSTR)},\n-                    }, true);\n-                UniValue rs = find_value(prevOut, \"redeemScript\");\n-                if (!rs.isNull()) {\n-                    std::vector<unsigned char> rsData(ParseHexV(rs, \"redeemScript\"));\n-                    CScript redeemScript(rsData.begin(), rsData.end());\n-                    keystore->AddCScript(redeemScript);\n-                    // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n-                    // This is only for compatibility, it is encouraged to use the explicit witnessScript field instead.\n-                    keystore->AddCScript(GetScriptForWitness(redeemScript));\n-                }\n-                UniValue ws = find_value(prevOut, \"witnessScript\");\n-                if (!ws.isNull()) {\n-                    std::vector<unsigned char> wsData(ParseHexV(ws, \"witnessScript\"));\n-                    CScript witnessScript(wsData.begin(), wsData.end());\n-                    keystore->AddCScript(witnessScript);\n-                    // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n-                    keystore->AddCScript(GetScriptForWitness(witnessScript));\n-                }\n-            }\n-        }\n-    }\n-\n-    int nHashType = ParseSighashString(hashType);\n-\n-    bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n-\n-    // Script verification errors\n-    UniValue vErrors(UniValue::VARR);\n-\n-    // Use CTransaction for the constant parts of the\n-    // transaction to avoid rehashing.\n-    const CTransaction txConst(mtx);\n-    // Sign what we can:\n-    for (unsigned int i = 0; i < mtx.vin.size(); i++) {\n-        CTxIn& txin = mtx.vin[i];\n-        auto coin = coins.find(txin.prevout);\n-        if (coin == coins.end() || coin->second.IsSpent()) {\n-            TxInErrorToJSON(txin, vErrors, \"Input not found or already spent\");\n-            continue;\n-        }\n-        const CScript& prevPubKey = coin->second.out.scriptPubKey;\n-        const CAmount& amount = coin->second.out.nValue;\n-\n-        SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out);\n-        // Only sign SIGHASH_SINGLE if there's a corresponding output:\n-        if (!fHashSingle || (i < mtx.vout.size())) {\n-            ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, nHashType), prevPubKey, sigdata);\n-        }\n-\n-        UpdateInput(txin, sigdata);\n-\n-        // amount must be specified for valid segwit signature\n-        if (amount == MAX_MONEY && !txin.scriptWitness.IsNull()) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Missing amount for %s\", coin->second.out.ToString()));\n-        }\n-\n-        ScriptError serror = SCRIPT_ERR_OK;\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount), &serror)) {\n-            if (serror == SCRIPT_ERR_INVALID_STACK_OPERATION) {\n-                // Unable to sign input and verification failed (possible attempt to partially sign).\n-                TxInErrorToJSON(txin, vErrors, \"Unable to sign input, invalid stack size (possibly missing key)\");\n-            } else {\n-                TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));\n-            }\n-        }\n-    }\n-    bool fComplete = vErrors.empty();\n-\n-    UniValue result(UniValue::VOBJ);\n-    result.pushKV(\"hex\", EncodeHexTx(CTransaction(mtx)));\n-    result.pushKV(\"complete\", fComplete);\n-    if (!vErrors.empty()) {\n-        result.pushKV(\"errors\", vErrors);\n-    }\n-\n-    return result;\n-}\n-\n static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)"
      },
      {
        "sha": "8b2ab8fa916955d2f5dc101749f17d4f605a5d05",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "added",
        "additions": 293,
        "deletions": 0,
        "changes": 293,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0509465542d63a5bbe7296f283f44dd491e74f78/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0509465542d63a5bbe7296f283f44dd491e74f78/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=0509465542d63a5bbe7296f283f44dd491e74f78",
        "patch": "@@ -0,0 +1,293 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <rpc/rawtransaction_util.h>\n+\n+#include <coins.h>\n+#include <core_io.h>\n+#include <interfaces/chain.h>\n+#include <key_io.h>\n+#include <keystore.h>\n+#include <policy/policy.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <rpc/protocol.h>\n+#include <rpc/util.h>\n+#include <tinyformat.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+\n+CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, const UniValue& rbf)\n+{\n+    if (inputs_in.isNull() || outputs_in.isNull())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, arguments 1 and 2 must be non-null\");\n+\n+    UniValue inputs = inputs_in.get_array();\n+    const bool outputs_is_obj = outputs_in.isObject();\n+    UniValue outputs = outputs_is_obj ? outputs_in.get_obj() : outputs_in.get_array();\n+\n+    CMutableTransaction rawTx;\n+\n+    if (!locktime.isNull()) {\n+        int64_t nLockTime = locktime.get_int64();\n+        if (nLockTime < 0 || nLockTime > LOCKTIME_MAX)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, locktime out of range\");\n+        rawTx.nLockTime = nLockTime;\n+    }\n+\n+    bool rbfOptIn = rbf.isTrue();\n+\n+    for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n+        const UniValue& input = inputs[idx];\n+        const UniValue& o = input.get_obj();\n+\n+        uint256 txid = ParseHashO(o, \"txid\");\n+\n+        const UniValue& vout_v = find_value(o, \"vout\");\n+        if (!vout_v.isNum())\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, missing vout key\");\n+        int nOutput = vout_v.get_int();\n+        if (nOutput < 0)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout must be positive\");\n+\n+        uint32_t nSequence;\n+        if (rbfOptIn) {\n+            nSequence = MAX_BIP125_RBF_SEQUENCE; /* CTxIn::SEQUENCE_FINAL - 2 */\n+        } else if (rawTx.nLockTime) {\n+            nSequence = CTxIn::SEQUENCE_FINAL - 1;\n+        } else {\n+            nSequence = CTxIn::SEQUENCE_FINAL;\n+        }\n+\n+        // set the sequence number if passed in the parameters object\n+        const UniValue& sequenceObj = find_value(o, \"sequence\");\n+        if (sequenceObj.isNum()) {\n+            int64_t seqNr64 = sequenceObj.get_int64();\n+            if (seqNr64 < 0 || seqNr64 > CTxIn::SEQUENCE_FINAL) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, sequence number is out of range\");\n+            } else {\n+                nSequence = (uint32_t)seqNr64;\n+            }\n+        }\n+\n+        CTxIn in(COutPoint(txid, nOutput), CScript(), nSequence);\n+\n+        rawTx.vin.push_back(in);\n+    }\n+\n+    if (!outputs_is_obj) {\n+        // Translate array of key-value pairs into dict\n+        UniValue outputs_dict = UniValue(UniValue::VOBJ);\n+        for (size_t i = 0; i < outputs.size(); ++i) {\n+            const UniValue& output = outputs[i];\n+            if (!output.isObject()) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, key-value pair not an object as expected\");\n+            }\n+            if (output.size() != 1) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, key-value pair must contain exactly one key\");\n+            }\n+            outputs_dict.pushKVs(output);\n+        }\n+        outputs = std::move(outputs_dict);\n+    }\n+\n+    // Duplicate checking\n+    std::set<CTxDestination> destinations;\n+    bool has_data{false};\n+\n+    for (const std::string& name_ : outputs.getKeys()) {\n+        if (name_ == \"data\") {\n+            if (has_data) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, duplicate key: data\");\n+            }\n+            has_data = true;\n+            std::vector<unsigned char> data = ParseHexV(outputs[name_].getValStr(), \"Data\");\n+\n+            CTxOut out(0, CScript() << OP_RETURN << data);\n+            rawTx.vout.push_back(out);\n+        } else {\n+            CTxDestination destination = DecodeDestination(name_);\n+            if (!IsValidDestination(destination)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(\"Invalid Bitcoin address: \") + name_);\n+            }\n+\n+            if (!destinations.insert(destination).second) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, duplicated address: \") + name_);\n+            }\n+\n+            CScript scriptPubKey = GetScriptForDestination(destination);\n+            CAmount nAmount = AmountFromValue(outputs[name_]);\n+\n+            CTxOut out(nAmount, scriptPubKey);\n+            rawTx.vout.push_back(out);\n+        }\n+    }\n+\n+    if (!rbf.isNull() && rawTx.vin.size() > 0 && rbfOptIn != SignalsOptInRBF(CTransaction(rawTx))) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter combination: Sequence number(s) contradict replaceable option\");\n+    }\n+\n+    return rawTx;\n+}\n+\n+/** Pushes a JSON object for script verification or signing errors to vErrorsRet. */\n+static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::string& strMessage)\n+{\n+    UniValue entry(UniValue::VOBJ);\n+    entry.pushKV(\"txid\", txin.prevout.hash.ToString());\n+    entry.pushKV(\"vout\", (uint64_t)txin.prevout.n);\n+    UniValue witness(UniValue::VARR);\n+    for (unsigned int i = 0; i < txin.scriptWitness.stack.size(); i++) {\n+        witness.push_back(HexStr(txin.scriptWitness.stack[i].begin(), txin.scriptWitness.stack[i].end()));\n+    }\n+    entry.pushKV(\"witness\", witness);\n+    entry.pushKV(\"scriptSig\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n+    entry.pushKV(\"sequence\", (uint64_t)txin.nSequence);\n+    entry.pushKV(\"error\", strMessage);\n+    vErrorsRet.push_back(entry);\n+}\n+\n+// TODO(https://github.com/bitcoin/bitcoin/pull/10973#discussion_r267084237):\n+// The dependency on interfaces::Chain should be removed, so\n+// signrawtransactionwithkey doesn't need access to a Chain instance.\n+UniValue SignTransaction(interfaces::Chain& chain, CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore *keystore, bool is_temp_keystore, const UniValue& hashType)\n+{\n+    // Fetch previous transactions (inputs):\n+    std::map<COutPoint, Coin> coins;\n+    for (const CTxIn& txin : mtx.vin) {\n+        coins[txin.prevout]; // Create empty map entry keyed by prevout.\n+    }\n+    chain.findCoins(coins);\n+\n+    // Add previous txouts given in the RPC call:\n+    if (!prevTxsUnival.isNull()) {\n+        UniValue prevTxs = prevTxsUnival.get_array();\n+        for (unsigned int idx = 0; idx < prevTxs.size(); ++idx) {\n+            const UniValue& p = prevTxs[idx];\n+            if (!p.isObject()) {\n+                throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"expected object with {\\\"txid'\\\",\\\"vout\\\",\\\"scriptPubKey\\\"}\");\n+            }\n+\n+            UniValue prevOut = p.get_obj();\n+\n+            RPCTypeCheckObj(prevOut,\n+                {\n+                    {\"txid\", UniValueType(UniValue::VSTR)},\n+                    {\"vout\", UniValueType(UniValue::VNUM)},\n+                    {\"scriptPubKey\", UniValueType(UniValue::VSTR)},\n+                });\n+\n+            uint256 txid = ParseHashO(prevOut, \"txid\");\n+\n+            int nOut = find_value(prevOut, \"vout\").get_int();\n+            if (nOut < 0) {\n+                throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"vout must be positive\");\n+            }\n+\n+            COutPoint out(txid, nOut);\n+            std::vector<unsigned char> pkData(ParseHexO(prevOut, \"scriptPubKey\"));\n+            CScript scriptPubKey(pkData.begin(), pkData.end());\n+\n+            {\n+                auto coin = coins.find(out);\n+                if (coin != coins.end() && !coin->second.IsSpent() && coin->second.out.scriptPubKey != scriptPubKey) {\n+                    std::string err(\"Previous output scriptPubKey mismatch:\\n\");\n+                    err = err + ScriptToAsmStr(coin->second.out.scriptPubKey) + \"\\nvs:\\n\"+\n+                        ScriptToAsmStr(scriptPubKey);\n+                    throw JSONRPCError(RPC_DESERIALIZATION_ERROR, err);\n+                }\n+                Coin newcoin;\n+                newcoin.out.scriptPubKey = scriptPubKey;\n+                newcoin.out.nValue = MAX_MONEY;\n+                if (prevOut.exists(\"amount\")) {\n+                    newcoin.out.nValue = AmountFromValue(find_value(prevOut, \"amount\"));\n+                }\n+                newcoin.nHeight = 1;\n+                coins[out] = std::move(newcoin);\n+            }\n+\n+            // if redeemScript and private keys were given, add redeemScript to the keystore so it can be signed\n+            if (is_temp_keystore && (scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash())) {\n+                RPCTypeCheckObj(prevOut,\n+                    {\n+                        {\"redeemScript\", UniValueType(UniValue::VSTR)},\n+                        {\"witnessScript\", UniValueType(UniValue::VSTR)},\n+                    }, true);\n+                UniValue rs = find_value(prevOut, \"redeemScript\");\n+                if (!rs.isNull()) {\n+                    std::vector<unsigned char> rsData(ParseHexV(rs, \"redeemScript\"));\n+                    CScript redeemScript(rsData.begin(), rsData.end());\n+                    keystore->AddCScript(redeemScript);\n+                    // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n+                    // This is only for compatibility, it is encouraged to use the explicit witnessScript field instead.\n+                    keystore->AddCScript(GetScriptForWitness(redeemScript));\n+                }\n+                UniValue ws = find_value(prevOut, \"witnessScript\");\n+                if (!ws.isNull()) {\n+                    std::vector<unsigned char> wsData(ParseHexV(ws, \"witnessScript\"));\n+                    CScript witnessScript(wsData.begin(), wsData.end());\n+                    keystore->AddCScript(witnessScript);\n+                    // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n+                    keystore->AddCScript(GetScriptForWitness(witnessScript));\n+                }\n+            }\n+        }\n+    }\n+\n+    int nHashType = ParseSighashString(hashType);\n+\n+    bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n+\n+    // Script verification errors\n+    UniValue vErrors(UniValue::VARR);\n+\n+    // Use CTransaction for the constant parts of the\n+    // transaction to avoid rehashing.\n+    const CTransaction txConst(mtx);\n+    // Sign what we can:\n+    for (unsigned int i = 0; i < mtx.vin.size(); i++) {\n+        CTxIn& txin = mtx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            TxInErrorToJSON(txin, vErrors, \"Input not found or already spent\");\n+            continue;\n+        }\n+        const CScript& prevPubKey = coin->second.out.scriptPubKey;\n+        const CAmount& amount = coin->second.out.nValue;\n+\n+        SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out);\n+        // Only sign SIGHASH_SINGLE if there's a corresponding output:\n+        if (!fHashSingle || (i < mtx.vout.size())) {\n+            ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, nHashType), prevPubKey, sigdata);\n+        }\n+\n+        UpdateInput(txin, sigdata);\n+\n+        // amount must be specified for valid segwit signature\n+        if (amount == MAX_MONEY && !txin.scriptWitness.IsNull()) {\n+            throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Missing amount for %s\", coin->second.out.ToString()));\n+        }\n+\n+        ScriptError serror = SCRIPT_ERR_OK;\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount), &serror)) {\n+            if (serror == SCRIPT_ERR_INVALID_STACK_OPERATION) {\n+                // Unable to sign input and verification failed (possible attempt to partially sign).\n+                TxInErrorToJSON(txin, vErrors, \"Unable to sign input, invalid stack size (possibly missing key)\");\n+            } else {\n+                TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));\n+            }\n+        }\n+    }\n+    bool fComplete = vErrors.empty();\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"hex\", EncodeHexTx(CTransaction(mtx)));\n+    result.pushKV(\"complete\", fComplete);\n+    if (!vErrors.empty()) {\n+        result.pushKV(\"errors\", vErrors);\n+    }\n+\n+    return result;\n+}"
      },
      {
        "sha": "5529dedbd47bf0e5af321780554569c7fa85b950",
        "filename": "src/rpc/rawtransaction_util.h",
        "status": "renamed",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0509465542d63a5bbe7296f283f44dd491e74f78/src/rpc/rawtransaction_util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0509465542d63a5bbe7296f283f44dd491e74f78/src/rpc/rawtransaction_util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.h?ref=0509465542d63a5bbe7296f283f44dd491e74f78",
        "patch": "@@ -2,12 +2,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_RPC_RAWTRANSACTION_H\n-#define BITCOIN_RPC_RAWTRANSACTION_H\n+#ifndef BITCOIN_RPC_RAWTRANSACTION_UTIL_H\n+#define BITCOIN_RPC_RAWTRANSACTION_UTIL_H\n \n class CBasicKeyStore;\n-struct CMutableTransaction;\n class UniValue;\n+struct CMutableTransaction;\n \n namespace interfaces {\n class Chain;\n@@ -19,4 +19,4 @@ UniValue SignTransaction(interfaces::Chain& chain, CMutableTransaction& mtx, con\n /** Create a transaction from univalue parameters */\n CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, const UniValue& rbf);\n \n-#endif // BITCOIN_RPC_RAWTRANSACTION_H\n+#endif // BITCOIN_RPC_RAWTRANSACTION_UTIL_H",
        "previous_filename": "src/rpc/rawtransaction.h"
      },
      {
        "sha": "de063153cb32b8223a12a6775ec0beef5b74bf82",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0509465542d63a5bbe7296f283f44dd491e74f78/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0509465542d63a5bbe7296f283f44dd491e74f78/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0509465542d63a5bbe7296f283f44dd491e74f78",
        "patch": "@@ -19,7 +19,7 @@\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n-#include <rpc/rawtransaction.h>\n+#include <rpc/rawtransaction_util.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n #include <script/descriptor.h>"
      }
    ]
  },
  {
    "sha": "99517866b62c261f990e1f897502855afc12f2a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTUxNzg2NmI2MmMyNjFmOTkwZTFmODk3NTAyODU1YWZjMTJmMmE3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-02T20:57:36Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-09T21:53:08Z"
      },
      "message": "[build] Move several units into common libraries\n\nMoves the following units into libbitcoin_util or libbitcoin_common\nsince they are required by multiple libraries:\n\n- bloom\n- interfaces/handler\n- merkleblock\n- outputtype",
      "tree": {
        "sha": "e84f391ca416d9d0968c97185cb74d863ea8627a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e84f391ca416d9d0968c97185cb74d863ea8627a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99517866b62c261f990e1f897502855afc12f2a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99517866b62c261f990e1f897502855afc12f2a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99517866b62c261f990e1f897502855afc12f2a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99517866b62c261f990e1f897502855afc12f2a7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0509465542d63a5bbe7296f283f44dd491e74f78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0509465542d63a5bbe7296f283f44dd491e74f78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0509465542d63a5bbe7296f283f44dd491e74f78"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "0a41088430d3071c56b7eff2d18944f896d2ab61",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99517866b62c261f990e1f897502855afc12f2a7/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99517866b62c261f990e1f897502855afc12f2a7/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=99517866b62c261f990e1f897502855afc12f2a7",
        "patch": "@@ -245,7 +245,6 @@ libbitcoin_server_a_SOURCES = \\\n   addrdb.cpp \\\n   addrman.cpp \\\n   banman.cpp \\\n-  bloom.cpp \\\n   blockencodings.cpp \\\n   blockfilter.cpp \\\n   chain.cpp \\\n@@ -257,18 +256,15 @@ libbitcoin_server_a_SOURCES = \\\n   index/base.cpp \\\n   index/txindex.cpp \\\n   interfaces/chain.cpp \\\n-  interfaces/handler.cpp \\\n   interfaces/node.cpp \\\n   init.cpp \\\n   dbwrapper.cpp \\\n-  merkleblock.cpp \\\n   miner.cpp \\\n   net.cpp \\\n   net_processing.cpp \\\n   node/coin.cpp \\\n   node/transaction.cpp \\\n   noui.cpp \\\n-  outputtype.cpp \\\n   policy/fees.cpp \\\n   policy/rbf.cpp \\\n   policy/settings.cpp \\\n@@ -425,6 +421,7 @@ libbitcoin_common_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_common_a_SOURCES = \\\n   base58.cpp \\\n   bech32.cpp \\\n+  bloom.cpp \\\n   chainparams.cpp \\\n   coins.cpp \\\n   compressor.cpp \\\n@@ -433,8 +430,10 @@ libbitcoin_common_a_SOURCES = \\\n   key.cpp \\\n   key_io.cpp \\\n   keystore.cpp \\\n+  merkleblock.cpp \\\n   netaddress.cpp \\\n   netbase.cpp \\\n+  outputtype.cpp \\\n   policy/feerate.cpp \\\n   policy/policy.cpp \\\n   protocol.cpp \\\n@@ -463,6 +462,7 @@ libbitcoin_util_a_SOURCES = \\\n   compat/glibcxx_sanity.cpp \\\n   compat/strnlen.cpp \\\n   fs.cpp \\\n+  interfaces/handler.cpp \\\n   logging.cpp \\\n   random.cpp \\\n   rpc/protocol.cpp \\"
      }
    ]
  },
  {
    "sha": "91a25d1e711bfc0617027eee18b9777ff368d6b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWEyNWQxZTcxMWJmYzA2MTcwMjdlZWUxOGI5Nzc3ZmYzNjhkNmI5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-02T21:03:37Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-09T21:53:08Z"
      },
      "message": "[build] Add several util units\n\nAdds the following util units and adds them to libbitcoin_util:\n\n- `util/url.cpp` takes `urlDecode` from `httpserver.cpp`\n- `util/error.cpp` takes `TransactionErrorString` from\n  `node/transaction.cpp` and `AmountHighWarn` and `AmountErrMsg` from\n  `ui_interface.cpp`\n- `util/fees.cpp` takes `StringForFeeReason` and `FeeModeFromString` from `policy/fees.cpp`\n- `util/rbf.cpp` takes `SignalsOptInRBF` from `policy/rbf.cpp`\n- 'util/validation.cpp` takes `FormatStateMessage` and `strMessageMagic` from 'validation.cpp`",
      "tree": {
        "sha": "af7b5dbb366b9f9aac68ecf668f330d180bc31f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af7b5dbb366b9f9aac68ecf668f330d180bc31f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91a25d1e711bfc0617027eee18b9777ff368d6b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91a25d1e711bfc0617027eee18b9777ff368d6b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91a25d1e711bfc0617027eee18b9777ff368d6b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91a25d1e711bfc0617027eee18b9777ff368d6b9/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99517866b62c261f990e1f897502855afc12f2a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99517866b62c261f990e1f897502855afc12f2a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99517866b62c261f990e1f897502855afc12f2a7"
      }
    ],
    "stats": {
      "total": 425,
      "additions": 282,
      "deletions": 143
    },
    "files": [
      {
        "sha": "21fd365d38e95fc8fe4543c7c8d74f7e524035d0",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -203,10 +203,15 @@ BITCOIN_CORE_H = \\\n   undo.h \\\n   util/bip32.h \\\n   util/bytevectorhash.h \\\n+  util/error.h \\\n+  util/fees.h \\\n   util/system.h \\\n   util/memory.h \\\n   util/moneystr.h \\\n+  util/rbf.h \\\n   util/time.h \\\n+  util/url.h \\\n+  util/validation.h \\\n   validation.h \\\n   validationinterface.h \\\n   versionbits.h \\\n@@ -471,10 +476,15 @@ libbitcoin_util_a_SOURCES = \\\n   threadinterrupt.cpp \\\n   util/bip32.cpp \\\n   util/bytevectorhash.cpp \\\n+  util/error.cpp \\\n+  util/fees.cpp \\\n   util/system.cpp \\\n   util/moneystr.cpp \\\n+  util/rbf.cpp \\\n   util/strencodings.cpp \\\n   util/time.cpp \\\n+  util/url.cpp \\\n+  util/validation.cpp \\\n   $(BITCOIN_CORE_H)\n \n if GLIBC_BACK_COMPAT"
      },
      {
        "sha": "7f41ea7aed7176e22a1044baebc8d6dfe50df24b",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -18,6 +18,7 @@\n #include <script/script.h>\n #include <script/sign.h>\n #include <univalue.h>\n+#include <util/rbf.h>\n #include <util/system.h>\n #include <util/moneystr.h>\n #include <util/strencodings.h>"
      },
      {
        "sha": "5d9c3d2c1a41f01b8dfd3f6cd4f5c3e12e851d56",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -655,15 +655,3 @@ void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n         pathHandlers.erase(i);\n     }\n }\n-\n-std::string urlDecode(const std::string &urlEncoded) {\n-    std::string res;\n-    if (!urlEncoded.empty()) {\n-        char *decoded = evhttp_uridecode(urlEncoded.c_str(), false, nullptr);\n-        if (decoded) {\n-            res = std::string(decoded);\n-            free(decoded);\n-        }\n-    }\n-    return res;\n-}"
      },
      {
        "sha": "7943f0094b0c064d49defbb36ec9e9aa285d1f13",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -148,6 +148,4 @@ class HTTPEvent\n     struct event* ev;\n };\n \n-std::string urlDecode(const std::string &urlEncoded);\n-\n #endif // BITCOIN_HTTPSERVER_H"
      },
      {
        "sha": "f5347bb8fff7eab76eed03f5ff215d883810e3eb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -47,6 +47,7 @@\n #include <ui_interface.h>\n #include <util/system.h>\n #include <util/moneystr.h>\n+#include <util/validation.h>\n #include <validationinterface.h>\n #include <warnings.h>\n #include <walletinitinterface.h>"
      },
      {
        "sha": "6a88e8321d866523bbba714fe3bef203d50f242f",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -23,6 +23,7 @@\n #include <timedata.h>\n #include <util/moneystr.h>\n #include <util/system.h>\n+#include <util/validation.h>\n #include <validationinterface.h>\n \n #include <algorithm>"
      },
      {
        "sha": "74e33189dc502d857472e3015f9906269ddf9ad8",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -29,6 +29,7 @@\n #include <util/system.h>\n #include <util/moneystr.h>\n #include <util/strencodings.h>\n+#include <util/validation.h>\n \n #include <memory>\n "
      },
      {
        "sha": "5ffb15ed3ce35e50c17b864b55091dab9b038ed7",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 26,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -6,38 +6,13 @@\n #include <consensus/validation.h>\n #include <net.h>\n #include <txmempool.h>\n+#include <util/validation.h>\n #include <validation.h>\n #include <validationinterface.h>\n #include <node/transaction.h>\n \n #include <future>\n \n-std::string TransactionErrorString(const TransactionError err)\n-{\n-    switch (err) {\n-        case TransactionError::OK:\n-            return \"No error\";\n-        case TransactionError::MISSING_INPUTS:\n-            return \"Missing inputs\";\n-        case TransactionError::ALREADY_IN_CHAIN:\n-            return \"Transaction already in block chain\";\n-        case TransactionError::P2P_DISABLED:\n-            return \"Peer-to-peer functionality missing or disabled\";\n-        case TransactionError::MEMPOOL_REJECTED:\n-            return \"Transaction rejected by AcceptToMemoryPool\";\n-        case TransactionError::MEMPOOL_ERROR:\n-            return \"AcceptToMemoryPool failed\";\n-        case TransactionError::INVALID_PSBT:\n-            return \"PSBT is not sane\";\n-        case TransactionError::PSBT_MISMATCH:\n-            return \"PSBTs not compatible (different transactions)\";\n-        case TransactionError::SIGHASH_MISMATCH:\n-            return \"Specified sighash value does not match existing value\";\n-        // no default case, so the compiler can warn about missing cases\n-    }\n-    assert(false);\n-}\n-\n TransactionError BroadcastTransaction(const CTransactionRef tx, uint256& hashTx, std::string& err_string, const CAmount& highfee)\n {\n     std::promise<void> promise;"
      },
      {
        "sha": "51033f94e56eab288556ebeb4e37ed9d4c5af38f",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 14,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -8,20 +8,7 @@\n #include <attributes.h>\n #include <primitives/transaction.h>\n #include <uint256.h>\n-\n-enum class TransactionError {\n-    OK, //!< No error\n-    MISSING_INPUTS,\n-    ALREADY_IN_CHAIN,\n-    P2P_DISABLED,\n-    MEMPOOL_REJECTED,\n-    MEMPOOL_ERROR,\n-    INVALID_PSBT,\n-    PSBT_MISMATCH,\n-    SIGHASH_MISMATCH,\n-};\n-\n-std::string TransactionErrorString(const TransactionError error);\n+#include <util/error.h>\n \n /**\n  * Broadcast a transaction"
      },
      {
        "sha": "524afd014e69ab85eb9b0242943843b624685312",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 34,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -27,40 +27,6 @@ std::string StringForFeeEstimateHorizon(FeeEstimateHorizon horizon) {\n     return horizon_string->second;\n }\n \n-std::string StringForFeeReason(FeeReason reason) {\n-    static const std::map<FeeReason, std::string> fee_reason_strings = {\n-        {FeeReason::NONE, \"None\"},\n-        {FeeReason::HALF_ESTIMATE, \"Half Target 60% Threshold\"},\n-        {FeeReason::FULL_ESTIMATE, \"Target 85% Threshold\"},\n-        {FeeReason::DOUBLE_ESTIMATE, \"Double Target 95% Threshold\"},\n-        {FeeReason::CONSERVATIVE, \"Conservative Double Target longer horizon\"},\n-        {FeeReason::MEMPOOL_MIN, \"Mempool Min Fee\"},\n-        {FeeReason::PAYTXFEE, \"PayTxFee set\"},\n-        {FeeReason::FALLBACK, \"Fallback fee\"},\n-        {FeeReason::REQUIRED, \"Minimum Required Fee\"},\n-        {FeeReason::MAXTXFEE, \"MaxTxFee limit\"}\n-    };\n-    auto reason_string = fee_reason_strings.find(reason);\n-\n-    if (reason_string == fee_reason_strings.end()) return \"Unknown\";\n-\n-    return reason_string->second;\n-}\n-\n-bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_estimate_mode) {\n-    static const std::map<std::string, FeeEstimateMode> fee_modes = {\n-        {\"UNSET\", FeeEstimateMode::UNSET},\n-        {\"ECONOMICAL\", FeeEstimateMode::ECONOMICAL},\n-        {\"CONSERVATIVE\", FeeEstimateMode::CONSERVATIVE},\n-    };\n-    auto mode = fee_modes.find(mode_string);\n-\n-    if (mode == fee_modes.end()) return false;\n-\n-    fee_estimate_mode = mode->second;\n-    return true;\n-}\n-\n /**\n  * We will instantiate an instance of this class to track transactions that were\n  * included in a block. We will lump transactions into a bucket according to their"
      },
      {
        "sha": "6e61f76178e236ef2b981941b5f33bb6f38dd0a2",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -46,17 +46,13 @@ enum class FeeReason {\n     MAXTXFEE,\n };\n \n-std::string StringForFeeReason(FeeReason reason);\n-\n /* Used to determine type of fee estimation requested */\n enum class FeeEstimateMode {\n     UNSET,        //!< Use default settings based on other criteria\n     ECONOMICAL,   //!< Force estimateSmartFee to use non-conservative estimates\n     CONSERVATIVE, //!< Force estimateSmartFee to use conservative estimates\n };\n \n-bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_estimate_mode);\n-\n /* Used to return detailed information about a feerate bucket */\n struct EstimatorBucket\n {"
      },
      {
        "sha": "44c23661fbdc20d25130b197c36ecf85fd5f84db",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -8,7 +8,6 @@\n #include <policy/policy.h>\n \n #include <consensus/validation.h>\n-#include <validation.h>\n #include <coins.h>\n #include <policy/settings.h>\n #include <tinyformat.h>"
      },
      {
        "sha": "b4b8341d77471cae3daa67b802696e9986fb23e1",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -3,16 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <policy/rbf.h>\n-\n-bool SignalsOptInRBF(const CTransaction &tx)\n-{\n-    for (const CTxIn &txin : tx.vin) {\n-        if (txin.nSequence <= MAX_BIP125_RBF_SEQUENCE) {\n-            return true;\n-        }\n-    }\n-    return false;\n-}\n+#include <util/rbf.h>\n \n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool)\n {"
      },
      {
        "sha": "0707b0044f9748321e23a298de0edf1c546d888b",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -7,18 +7,12 @@\n \n #include <txmempool.h>\n \n-static const uint32_t MAX_BIP125_RBF_SEQUENCE = 0xfffffffd;\n-\n enum class RBFTransactionState {\n     UNKNOWN,\n     REPLACEABLE_BIP125,\n     FINAL\n };\n \n-// Check whether the sequence numbers on this transaction are signaling\n-// opt-in to replace-by-fee, according to BIP 125\n-bool SignalsOptInRBF(const CTransaction &tx);\n-\n // Determine whether an in-mempool transaction is signaling opt-in to RBF\n // according to BIP 125\n // This involves checking sequence numbers of the transaction, as well"
      },
      {
        "sha": "64cc85d62349778298ba4b619f6ddb7c270e9ea7",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -11,7 +11,7 @@\n #include <qt/walletmodel.h>\n \n #include <key_io.h>\n-#include <validation.h> // For strMessageMagic\n+#include <util/validation.h> // For strMessageMagic\n #include <wallet/wallet.h>\n \n #include <string>"
      },
      {
        "sha": "3db24080dbd208f5f4f5e823cc6d312629e6bb0f",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -29,6 +29,7 @@\n #include <txmempool.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n+#include <util/validation.h>\n #include <validation.h>\n #include <validationinterface.h>\n #include <versionbitsinfo.h>"
      },
      {
        "sha": "c636102b20b2d34f84842bd3e869f94ecce33255",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -21,8 +21,10 @@\n #include <rpc/util.h>\n #include <shutdown.h>\n #include <txmempool.h>\n+#include <util/fees.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n+#include <util/validation.h>\n #include <validation.h>\n #include <validationinterface.h>\n #include <versionbitsinfo.h>"
      },
      {
        "sha": "f221847347253de04430cc1dd5b64f46960951d6",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -20,6 +20,7 @@\n #include <timedata.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n+#include <util/validation.h>\n #include <warnings.h>\n \n #include <stdint.h>"
      },
      {
        "sha": "728fc62e25fd8cca639f99ca47f66b8f9df24059",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -11,12 +11,12 @@\n #include <key_io.h>\n #include <keystore.h>\n #include <policy/policy.h>\n-#include <policy/rbf.h>\n #include <primitives/transaction.h>\n #include <rpc/protocol.h>\n #include <rpc/util.h>\n #include <tinyformat.h>\n #include <univalue.h>\n+#include <util/rbf.h>\n #include <util/strencodings.h>\n \n CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, const UniValue& rbf)"
      },
      {
        "sha": "b72f156646afe47e4eef4eebcf99945e38a9d361",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -19,6 +19,7 @@\n #include <script/sigcache.h>\n #include <streams.h>\n #include <ui_interface.h>\n+#include <util/validation.h>\n #include <validation.h>\n \n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;"
      },
      {
        "sha": "c084c4e0e2b0c66bf4b9f971a06987ebfc18dc7f",
        "filename": "src/ui_interface.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/ui_interface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/ui_interface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -69,13 +69,3 @@ void InitWarning(const std::string& str)\n {\n     uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_WARNING);\n }\n-\n-std::string AmountHighWarn(const std::string& optname)\n-{\n-    return strprintf(_(\"%s is set very high!\"), optname);\n-}\n-\n-std::string AmountErrMsg(const char* const optname, const std::string& strValue)\n-{\n-    return strprintf(_(\"Invalid amount for -%s=<amount>: '%s'\"), optname, strValue);\n-}"
      },
      {
        "sha": "60d85bc142e37392a57a78496f7c817d8a42ae76",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -129,10 +129,6 @@ void InitWarning(const std::string& str);\n /** Show error message **/\n bool InitError(const std::string& str);\n \n-std::string AmountHighWarn(const std::string& optname);\n-\n-std::string AmountErrMsg(const char* const optname, const std::string& strValue);\n-\n extern CClientUIInterface uiInterface;\n \n #endif // BITCOIN_UI_INTERFACE_H"
      },
      {
        "sha": "68ffd8b04671a5c8d683381abfe6a915d59501d3",
        "filename": "src/util/error.cpp",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/util/error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/util/error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/error.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2010-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/error.h>\n+\n+#include <util/system.h>\n+\n+std::string TransactionErrorString(const TransactionError err)\n+{\n+    switch (err) {\n+        case TransactionError::OK:\n+            return \"No error\";\n+        case TransactionError::MISSING_INPUTS:\n+            return \"Missing inputs\";\n+        case TransactionError::ALREADY_IN_CHAIN:\n+            return \"Transaction already in block chain\";\n+        case TransactionError::P2P_DISABLED:\n+            return \"Peer-to-peer functionality missing or disabled\";\n+        case TransactionError::MEMPOOL_REJECTED:\n+            return \"Transaction rejected by AcceptToMemoryPool\";\n+        case TransactionError::MEMPOOL_ERROR:\n+            return \"AcceptToMemoryPool failed\";\n+        case TransactionError::INVALID_PSBT:\n+            return \"PSBT is not sane\";\n+        case TransactionError::PSBT_MISMATCH:\n+            return \"PSBTs not compatible (different transactions)\";\n+        case TransactionError::SIGHASH_MISMATCH:\n+            return \"Specified sighash value does not match existing value\";\n+        // no default case, so the compiler can warn about missing cases\n+    }\n+    assert(false);\n+}\n+\n+std::string AmountHighWarn(const std::string& optname)\n+{\n+    return strprintf(_(\"%s is set very high!\"), optname);\n+}\n+\n+std::string AmountErrMsg(const char* const optname, const std::string& strValue)\n+{\n+    return strprintf(_(\"Invalid amount for -%s=<amount>: '%s'\"), optname, strValue);\n+}"
      },
      {
        "sha": "d93309551b98c5a222802cc8ef124bd2a4f36ca5",
        "filename": "src/util/error.h",
        "status": "added",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/util/error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/util/error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/error.h?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -0,0 +1,38 @@\n+// Copyright (c) 2010-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_ERROR_H\n+#define BITCOIN_UTIL_ERROR_H\n+\n+/**\n+ * util/error.h is a common place for definitions of simple error types and\n+ * string functions. Types and functions defined here should not require any\n+ * outside dependencies.\n+ *\n+ * Error types defined here can be used in different parts of the bitcoin\n+ * codebase, to avoid the need to write boilerplate code catching and\n+ * translating errors passed across wallet/node/rpc/gui code boundaries.\n+ */\n+\n+#include <string>\n+\n+enum class TransactionError {\n+    OK, //!< No error\n+    MISSING_INPUTS,\n+    ALREADY_IN_CHAIN,\n+    P2P_DISABLED,\n+    MEMPOOL_REJECTED,\n+    MEMPOOL_ERROR,\n+    INVALID_PSBT,\n+    PSBT_MISMATCH,\n+    SIGHASH_MISMATCH,\n+};\n+\n+std::string TransactionErrorString(const TransactionError error);\n+\n+std::string AmountHighWarn(const std::string& optname);\n+\n+std::string AmountErrMsg(const char* const optname, const std::string& strValue);\n+\n+#endif // BITCOIN_UTIL_ERROR_H"
      },
      {
        "sha": "5fdaa1284cd357b9b4717994406b296333cd1ae9",
        "filename": "src/util/fees.cpp",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/util/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/util/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/fees.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/fees.h>\n+\n+#include <string>\n+\n+std::string StringForFeeReason(FeeReason reason) {\n+    static const std::map<FeeReason, std::string> fee_reason_strings = {\n+        {FeeReason::NONE, \"None\"},\n+        {FeeReason::HALF_ESTIMATE, \"Half Target 60% Threshold\"},\n+        {FeeReason::FULL_ESTIMATE, \"Target 85% Threshold\"},\n+        {FeeReason::DOUBLE_ESTIMATE, \"Double Target 95% Threshold\"},\n+        {FeeReason::CONSERVATIVE, \"Conservative Double Target longer horizon\"},\n+        {FeeReason::MEMPOOL_MIN, \"Mempool Min Fee\"},\n+        {FeeReason::PAYTXFEE, \"PayTxFee set\"},\n+        {FeeReason::FALLBACK, \"Fallback fee\"},\n+        {FeeReason::REQUIRED, \"Minimum Required Fee\"},\n+        {FeeReason::MAXTXFEE, \"MaxTxFee limit\"}\n+    };\n+    auto reason_string = fee_reason_strings.find(reason);\n+\n+    if (reason_string == fee_reason_strings.end()) return \"Unknown\";\n+\n+    return reason_string->second;\n+}\n+\n+bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_estimate_mode) {\n+    static const std::map<std::string, FeeEstimateMode> fee_modes = {\n+        {\"UNSET\", FeeEstimateMode::UNSET},\n+        {\"ECONOMICAL\", FeeEstimateMode::ECONOMICAL},\n+        {\"CONSERVATIVE\", FeeEstimateMode::CONSERVATIVE},\n+    };\n+    auto mode = fee_modes.find(mode_string);\n+\n+    if (mode == fee_modes.end()) return false;\n+\n+    fee_estimate_mode = mode->second;\n+    return true;\n+}"
      },
      {
        "sha": "fc355ce9c2387ea4e758f37ac3b80ad070159911",
        "filename": "src/util/fees.h",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/util/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/util/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/fees.h?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -0,0 +1,16 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_UTIL_FEES_H\n+#define BITCOIN_UTIL_FEES_H\n+\n+#include <string>\n+\n+enum class FeeEstimateMode;\n+enum class FeeReason;\n+\n+bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_estimate_mode);\n+std::string StringForFeeReason(FeeReason reason);\n+\n+#endif // BITCOIN_UTIL_FEES_H"
      },
      {
        "sha": "d520a9606dfdba9ac03650701f4898ef4e5e1443",
        "filename": "src/util/rbf.cpp",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/util/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/util/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/rbf.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2016-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/rbf.h>\n+\n+#include <primitives/transaction.h>\n+\n+bool SignalsOptInRBF(const CTransaction &tx)\n+{\n+    for (const CTxIn &txin : tx.vin) {\n+        if (txin.nSequence <= MAX_BIP125_RBF_SEQUENCE) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}"
      },
      {
        "sha": "d3ef11062826f9d31b2b0a0b046d4018c84564ec",
        "filename": "src/util/rbf.h",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/util/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/util/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/rbf.h?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2016-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_RBF_H\n+#define BITCOIN_UTIL_RBF_H\n+\n+#include <cstdint>\n+\n+class CTransaction;\n+\n+static const uint32_t MAX_BIP125_RBF_SEQUENCE = 0xfffffffd;\n+\n+// Check whether the sequence numbers on this transaction are signaling\n+// opt-in to replace-by-fee, according to BIP 125\n+bool SignalsOptInRBF(const CTransaction &tx);\n+\n+#endif // BITCOIN_UTIL_RBF_H"
      },
      {
        "sha": "49eacbf2d019edd4e68fb2ca67589e7d4aa9cb15",
        "filename": "src/util/url.cpp",
        "status": "added",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/util/url.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/util/url.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/url.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -0,0 +1,21 @@\n+// Copyright (c) 2015-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/url.h>\n+\n+#include <event2/http.h>\n+#include <stdlib.h>\n+#include <string>\n+\n+std::string urlDecode(const std::string &urlEncoded) {\n+    std::string res;\n+    if (!urlEncoded.empty()) {\n+        char *decoded = evhttp_uridecode(urlEncoded.c_str(), false, nullptr);\n+        if (decoded) {\n+            res = std::string(decoded);\n+            free(decoded);\n+        }\n+    }\n+    return res;\n+}"
      },
      {
        "sha": "3d7315a3383050b0ca39b577832ca6488f4d0fe4",
        "filename": "src/util/url.h",
        "status": "added",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/util/url.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/util/url.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/url.h?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -0,0 +1,12 @@\n+// Copyright (c) 2015-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_URL_H\n+#define BITCOIN_UTIL_URL_H\n+\n+#include <string>\n+\n+std::string urlDecode(const std::string &urlEncoded);\n+\n+#endif // BITCOIN_UTIL_URL_H"
      },
      {
        "sha": "fe1f5a277e8aababc4fc49fb25bbcff864a9e0fc",
        "filename": "src/util/validation.cpp",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/util/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/util/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/validation.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -0,0 +1,20 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/validation.h>\n+\n+#include <consensus/validation.h>\n+#include <tinyformat.h>\n+\n+/** Convert CValidationState to a human-readable message for logging */\n+std::string FormatStateMessage(const CValidationState &state)\n+{\n+    return strprintf(\"%s%s (code %i)\",\n+        state.GetRejectReason(),\n+        state.GetDebugMessage().empty() ? \"\" : \", \"+state.GetDebugMessage(),\n+        state.GetRejectCode());\n+}\n+\n+const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";"
      },
      {
        "sha": "32559853ee61cc017c4c7cda8dac4a012767d49d",
        "filename": "src/util/validation.h",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/util/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/util/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/validation.h?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_VALIDATION_H\n+#define BITCOIN_UTIL_VALIDATION_H\n+\n+#include <string>\n+\n+class CValidationState;\n+\n+/** Convert CValidationState to a human-readable message for logging */\n+std::string FormatStateMessage(const CValidationState &state);\n+\n+extern const std::string strMessageMagic;\n+\n+#endif // BITCOIN_UTIL_VALIDATION_H"
      },
      {
        "sha": "b681d7b757120f1c6fd5316a3d5952691ad84b3a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -39,8 +39,10 @@\n #include <ui_interface.h>\n #include <undo.h>\n #include <util/moneystr.h>\n+#include <util/rbf.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n+#include <util/validation.h>\n #include <validationinterface.h>\n #include <warnings.h>\n \n@@ -259,8 +261,6 @@ std::atomic_bool g_is_mempool_loaded{false};\n /** Constant stuff for coinbase transactions we create: */\n CScript COINBASE_FLAGS;\n \n-const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n-\n // Internal stuff\n namespace {\n     CBlockIndex *&pindexBestInvalid = g_chainstate.pindexBestInvalid;\n@@ -462,15 +462,6 @@ static void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age)\n         pcoinsTip->Uncache(removed);\n }\n \n-/** Convert CValidationState to a human-readable message for logging */\n-std::string FormatStateMessage(const CValidationState &state)\n-{\n-    return strprintf(\"%s%s (code %i)\",\n-        state.GetRejectReason(),\n-        state.GetDebugMessage().empty() ? \"\" : \", \"+state.GetDebugMessage(),\n-        state.GetRejectCode());\n-}\n-\n static bool IsCurrentForFeeEstimation() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);"
      },
      {
        "sha": "9f00cab49ec15b0e6e8de16cc538025d0d1ed4e9",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -150,7 +150,6 @@ extern CTxMemPool mempool;\n extern std::atomic_bool g_is_mempool_loaded;\n typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n extern BlockMap& mapBlockIndex GUARDED_BY(cs_main);\n-extern const std::string strMessageMagic;\n extern Mutex g_best_block_mutex;\n extern std::condition_variable g_best_block_cv;\n extern uint256 g_best_block;\n@@ -298,9 +297,6 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n                         bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-/** Convert CValidationState to a human-readable message for logging */\n-std::string FormatStateMessage(const CValidationState &state);\n-\n /** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);\n "
      },
      {
        "sha": "e0f083b8ea71646e15b7592d110b5cf14c7891b5",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -14,7 +14,9 @@\n #include <validation.h> //for mempool access\n #include <txmempool.h>\n #include <util/moneystr.h>\n+#include <util/rbf.h>\n #include <util/system.h>\n+#include <util/validation.h>\n #include <net.h>\n \n //! Check whether transaction has descendant in wallet or mempool, or has been"
      },
      {
        "sha": "1b4d69bc3713577dcc6cae409dae78257ced3e38",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -9,6 +9,7 @@\n #include <net.h>\n #include <scheduler.h>\n #include <outputtype.h>\n+#include <util/error.h>\n #include <util/system.h>\n #include <util/moneystr.h>\n #include <validation.h>"
      },
      {
        "sha": "37e2930ee611c830a34af883829424a3fb0451b4",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -7,7 +7,6 @@\n #include <chain.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n-#include <httpserver.h>\n #include <init.h>\n #include <interfaces/chain.h>\n #include <validation.h>\n@@ -27,8 +26,11 @@\n #include <shutdown.h>\n #include <timedata.h>\n #include <util/bip32.h>\n+#include <util/fees.h>\n #include <util/system.h>\n #include <util/moneystr.h>\n+#include <util/url.h>\n+#include <util/validation.h>\n #include <wallet/coincontrol.h>\n #include <wallet/feebumper.h>\n #include <wallet/psbtwallet.h>"
      },
      {
        "sha": "2ef6850a2efbb7a1270b1c625eccfd3f65791c61",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -29,7 +29,11 @@\n #include <timedata.h>\n #include <txmempool.h>\n #include <util/bip32.h>\n+#include <util/error.h>\n+#include <util/fees.h>\n #include <util/moneystr.h>\n+#include <util/rbf.h>\n+#include <util/validation.h>\n #include <wallet/fees.h>\n \n #include <algorithm>"
      },
      {
        "sha": "87b451dbbd475ac683c328a79693cf3210ebf219",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a25d1e711bfc0617027eee18b9777ff368d6b9/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a25d1e711bfc0617027eee18b9777ff368d6b9/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "patch": "@@ -30,8 +30,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"wallet/coincontrol -> wallet/wallet -> wallet/coincontrol\"\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n-    \"policy/fees -> policy/policy -> validation -> policy/fees\"\n-    \"policy/policy -> validation -> policy/policy\"\n+    \"policy/fees -> txmempool -> validation -> policy/fees\"\n     \"policy/rbf -> txmempool -> validation -> policy/rbf\"\n     \"qt/addressbookpage -> qt/bitcoingui -> qt/walletview -> qt/addressbookpage\"\n     \"qt/guiutil -> qt/walletmodel -> qt/optionsmodel -> qt/guiutil\""
      }
    ]
  },
  {
    "sha": "9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWFlYjdmYjhkNGFiMGQ0NDkzODQ5ZTZjMTdlMzE0ZmQ3NWZlYTlj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-02T21:11:26Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-09T21:53:08Z"
      },
      "message": "[build] Move wallet load functions to wallet/load unit\n\nMoves the following wallet load functions to a new wallet/load unit in\nthe libbitcoin_wallet library. All other functions in wallet/init remain\nin libbitcoin_server:\n\n- `VerifyWallets`\n- `LoadWallets`\n- `StartWallets`\n- `FlushWallets`\n- `StopWallets`\n- `UnloadWallets`",
      "tree": {
        "sha": "dfb23b946a85eecd6a59529bac0590f6de346a00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfb23b946a85eecd6a59529bac0590f6de346a00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91a25d1e711bfc0617027eee18b9777ff368d6b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91a25d1e711bfc0617027eee18b9777ff368d6b9"
      }
    ],
    "stats": {
      "total": 281,
      "additions": 159,
      "deletions": 122
    },
    "files": [
      {
        "sha": "0b4aa1e40756f828b7c8689adb2107e1ae145a09",
        "filename": "build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in?ref=9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c",
        "patch": "@@ -151,6 +151,9 @@\n   </ItemDefinitionGroup>\n   <ItemGroup>\n @SOURCE_FILES@\n+    <ClCompile Include=\"..\\..\\src\\wallet\\init.cpp\">\n+      <ObjectFileName>$(IntDir)wallet_init.obj</ObjectFileName>\n+    </ClCompile>\n   </ItemGroup>\n   <ItemGroup>\n     <None Include=\"packages.config\" />"
      },
      {
        "sha": "7849e4740bc9c638a70702e4137c84e0ec52dabb",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c",
        "patch": "@@ -222,6 +222,7 @@ BITCOIN_CORE_H = \\\n   wallet/db.h \\\n   wallet/feebumper.h \\\n   wallet/fees.h \\\n+  wallet/load.h \\\n   wallet/psbtwallet.h \\\n   wallet/rpcwallet.h \\\n   wallet/wallet.h \\\n@@ -293,6 +294,9 @@ libbitcoin_server_a_SOURCES = \\\n   versionbits.cpp \\\n   $(BITCOIN_CORE_H)\n \n+if ENABLE_WALLET\n+libbitcoin_server_a_SOURCES += wallet/init.cpp\n+endif\n if !ENABLE_WALLET\n libbitcoin_server_a_SOURCES += dummywallet.cpp\n endif\n@@ -319,7 +323,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/db.cpp \\\n   wallet/feebumper.cpp \\\n   wallet/fees.cpp \\\n-  wallet/init.cpp \\\n+  wallet/load.cpp \\\n   wallet/psbtwallet.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\"
      },
      {
        "sha": "f98a49f9b11f52cbb3e16b08b5fc6602f7faf33c",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c",
        "patch": "@@ -29,6 +29,7 @@\n #include <wallet/feebumper.h>\n #include <wallet/fees.h>\n #include <wallet/rpcwallet.h>\n+#include <wallet/load.h>\n #include <wallet/wallet.h>\n #include <wallet/walletutil.h>\n "
      },
      {
        "sha": "e7eea94e06c6a05929d19656db6417b3f4e89d9d",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 101,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c",
        "patch": "@@ -131,58 +131,6 @@ bool WalletInit::ParameterInteraction() const\n     return true;\n }\n \n-bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files)\n-{\n-    if (gArgs.IsArgSet(\"-walletdir\")) {\n-        fs::path wallet_dir = gArgs.GetArg(\"-walletdir\", \"\");\n-        boost::system::error_code error;\n-        // The canonical path cleans the path, preventing >1 Berkeley environment instances for the same directory\n-        fs::path canonical_wallet_dir = fs::canonical(wallet_dir, error);\n-        if (error || !fs::exists(wallet_dir)) {\n-            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), wallet_dir.string()));\n-            return false;\n-        } else if (!fs::is_directory(wallet_dir)) {\n-            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\"), wallet_dir.string()));\n-            return false;\n-        // The canonical path transforms relative paths into absolute ones, so we check the non-canonical version\n-        } else if (!wallet_dir.is_absolute()) {\n-            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\"), wallet_dir.string()));\n-            return false;\n-        }\n-        gArgs.ForceSetArg(\"-walletdir\", canonical_wallet_dir.string());\n-    }\n-\n-    LogPrintf(\"Using wallet directory %s\\n\", GetWalletDir().string());\n-\n-    chain.initMessage(_(\"Verifying wallet(s)...\"));\n-\n-    // Parameter interaction code should have thrown an error if -salvagewallet\n-    // was enabled with more than wallet file, so the wallet_files size check\n-    // here should have no effect.\n-    bool salvage_wallet = gArgs.GetBoolArg(\"-salvagewallet\", false) && wallet_files.size() <= 1;\n-\n-    // Keep track of each wallet absolute path to detect duplicates.\n-    std::set<fs::path> wallet_paths;\n-\n-    for (const auto& wallet_file : wallet_files) {\n-        WalletLocation location(wallet_file);\n-\n-        if (!wallet_paths.insert(location.GetPath()).second) {\n-            chain.initError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), wallet_file));\n-            return false;\n-        }\n-\n-        std::string error_string;\n-        std::string warning_string;\n-        bool verify_success = CWallet::Verify(chain, location, salvage_wallet, error_string, warning_string);\n-        if (!error_string.empty()) chain.initError(error_string);\n-        if (!warning_string.empty()) chain.initWarning(warning_string);\n-        if (!verify_success) return false;\n-    }\n-\n-    return true;\n-}\n-\n void WalletInit::Construct(InitInterfaces& interfaces) const\n {\n     if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n@@ -192,52 +140,3 @@ void WalletInit::Construct(InitInterfaces& interfaces) const\n     gArgs.SoftSetArg(\"-wallet\", \"\");\n     interfaces.chain_clients.emplace_back(interfaces::MakeWalletClient(*interfaces.chain, gArgs.GetArgs(\"-wallet\")));\n }\n-\n-bool LoadWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files)\n-{\n-    for (const std::string& walletFile : wallet_files) {\n-        std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(chain, WalletLocation(walletFile));\n-        if (!pwallet) {\n-            return false;\n-        }\n-        AddWallet(pwallet);\n-    }\n-\n-    return true;\n-}\n-\n-void StartWallets(CScheduler& scheduler)\n-{\n-    for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n-        pwallet->postInitProcess();\n-    }\n-\n-    // Schedule periodic wallet flushes and tx rebroadcasts\n-    scheduler.scheduleEvery(MaybeCompactWalletDB, 500);\n-    scheduler.scheduleEvery(MaybeResendWalletTxs, 1000);\n-}\n-\n-void FlushWallets()\n-{\n-    for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n-        pwallet->Flush(false);\n-    }\n-}\n-\n-void StopWallets()\n-{\n-    for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n-        pwallet->Flush(true);\n-    }\n-}\n-\n-void UnloadWallets()\n-{\n-    auto wallets = GetWallets();\n-    while (!wallets.empty()) {\n-        auto wallet = wallets.back();\n-        wallets.pop_back();\n-        RemoveWallet(wallet);\n-        UnloadWallet(std::move(wallet));\n-    }\n-}"
      },
      {
        "sha": "79c5f439df7ca658252f17bf1bab632d42eb654f",
        "filename": "src/wallet/load.cpp",
        "status": "added",
        "additions": 112,
        "deletions": 0,
        "changes": 112,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c",
        "patch": "@@ -0,0 +1,112 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/load.h>\n+\n+#include <interfaces/chain.h>\n+#include <scheduler.h>\n+#include <util/system.h>\n+#include <wallet/wallet.h>\n+\n+bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files)\n+{\n+    if (gArgs.IsArgSet(\"-walletdir\")) {\n+        fs::path wallet_dir = gArgs.GetArg(\"-walletdir\", \"\");\n+        boost::system::error_code error;\n+        // The canonical path cleans the path, preventing >1 Berkeley environment instances for the same directory\n+        fs::path canonical_wallet_dir = fs::canonical(wallet_dir, error);\n+        if (error || !fs::exists(wallet_dir)) {\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), wallet_dir.string()));\n+            return false;\n+        } else if (!fs::is_directory(wallet_dir)) {\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\"), wallet_dir.string()));\n+            return false;\n+        // The canonical path transforms relative paths into absolute ones, so we check the non-canonical version\n+        } else if (!wallet_dir.is_absolute()) {\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\"), wallet_dir.string()));\n+            return false;\n+        }\n+        gArgs.ForceSetArg(\"-walletdir\", canonical_wallet_dir.string());\n+    }\n+\n+    LogPrintf(\"Using wallet directory %s\\n\", GetWalletDir().string());\n+\n+    chain.initMessage(_(\"Verifying wallet(s)...\"));\n+\n+    // Parameter interaction code should have thrown an error if -salvagewallet\n+    // was enabled with more than wallet file, so the wallet_files size check\n+    // here should have no effect.\n+    bool salvage_wallet = gArgs.GetBoolArg(\"-salvagewallet\", false) && wallet_files.size() <= 1;\n+\n+    // Keep track of each wallet absolute path to detect duplicates.\n+    std::set<fs::path> wallet_paths;\n+\n+    for (const auto& wallet_file : wallet_files) {\n+        WalletLocation location(wallet_file);\n+\n+        if (!wallet_paths.insert(location.GetPath()).second) {\n+            chain.initError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), wallet_file));\n+            return false;\n+        }\n+\n+        std::string error_string;\n+        std::string warning_string;\n+        bool verify_success = CWallet::Verify(chain, location, salvage_wallet, error_string, warning_string);\n+        if (!error_string.empty()) chain.initError(error_string);\n+        if (!warning_string.empty()) chain.initWarning(warning_string);\n+        if (!verify_success) return false;\n+    }\n+\n+    return true;\n+}\n+\n+bool LoadWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files)\n+{\n+    for (const std::string& walletFile : wallet_files) {\n+        std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(chain, WalletLocation(walletFile));\n+        if (!pwallet) {\n+            return false;\n+        }\n+        AddWallet(pwallet);\n+    }\n+\n+    return true;\n+}\n+\n+void StartWallets(CScheduler& scheduler)\n+{\n+    for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n+        pwallet->postInitProcess();\n+    }\n+\n+    // Schedule periodic wallet flushes and tx rebroadcasts\n+    scheduler.scheduleEvery(MaybeCompactWalletDB, 500);\n+    scheduler.scheduleEvery(MaybeResendWalletTxs, 1000);\n+}\n+\n+void FlushWallets()\n+{\n+    for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n+        pwallet->Flush(false);\n+    }\n+}\n+\n+void StopWallets()\n+{\n+    for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n+        pwallet->Flush(true);\n+    }\n+}\n+\n+void UnloadWallets()\n+{\n+    auto wallets = GetWallets();\n+    while (!wallets.empty()) {\n+        auto wallet = wallets.back();\n+        wallets.pop_back();\n+        RemoveWallet(wallet);\n+        UnloadWallet(std::move(wallet));\n+    }\n+}"
      },
      {
        "sha": "9bb6f2166e0905238c546c060048d3367f04a67b",
        "filename": "src/wallet/load.h",
        "status": "added",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c/src/wallet/load.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c/src/wallet/load.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.h?ref=9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c",
        "patch": "@@ -0,0 +1,38 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_LOAD_H\n+#define BITCOIN_WALLET_LOAD_H\n+\n+#include <string>\n+#include <vector>\n+\n+class CScheduler;\n+\n+namespace interfaces {\n+class Chain;\n+} // namespace interfaces\n+\n+//! Responsible for reading and validating the -wallet arguments and verifying the wallet database.\n+//! This function will perform salvage on the wallet if requested, as long as only one wallet is\n+//! being loaded (WalletParameterInteraction forbids -salvagewallet, -zapwallettxes or -upgradewallet with multiwallet).\n+bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files);\n+\n+//! Load wallet databases.\n+bool LoadWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files);\n+\n+//! Complete startup of wallets.\n+void StartWallets(CScheduler& scheduler);\n+\n+//! Flush all wallets in preparation for shutdown.\n+void FlushWallets();\n+\n+//! Stop all wallets. Wallets will be flushed first.\n+void StopWallets();\n+\n+//! Close all wallets.\n+void UnloadWallets();\n+\n+#endif // BITCOIN_WALLET_LOAD_H"
      },
      {
        "sha": "cefdf479c6ba5c41eab3332231644c7aae2274e6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c",
        "patch": "@@ -35,26 +35,6 @@\n #include <utility>\n #include <vector>\n \n-//! Responsible for reading and validating the -wallet arguments and verifying the wallet database.\n-//! This function will perform salvage on the wallet if requested, as long as only one wallet is\n-//! being loaded (WalletParameterInteraction forbids -salvagewallet, -zapwallettxes or -upgradewallet with multiwallet).\n-bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files);\n-\n-//! Load wallet databases.\n-bool LoadWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files);\n-\n-//! Complete startup of wallets.\n-void StartWallets(CScheduler& scheduler);\n-\n-//! Flush all wallets in preparation for shutdown.\n-void FlushWallets();\n-\n-//! Stop all wallets. Wallets will be flushed first.\n-void StopWallets();\n-\n-//! Close all wallets.\n-void UnloadWallets();\n-\n //! Explicitly unload and delete the wallet.\n //! Blocks the current thread after signaling the unload intent so that all\n //! wallet clients release the wallet."
      }
    ]
  },
  {
    "sha": "fd509bd1f71df628b933ea7a135a9a957a5e0136",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDUwOWJkMWY3MWRmNjI4YjkzM2VhN2ExMzVhOWE5NTdhNWUwMTM2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-02T21:14:35Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-09T21:53:08Z"
      },
      "message": "[docs] Document src subdirectories and different libraries",
      "tree": {
        "sha": "c9e056e1ad1897f6ad33ce5b0b9a6d754ce6afc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9e056e1ad1897f6ad33ce5b0b9a6d754ce6afc6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd509bd1f71df628b933ea7a135a9a957a5e0136",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd509bd1f71df628b933ea7a135a9a957a5e0136",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd509bd1f71df628b933ea7a135a9a957a5e0136",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd509bd1f71df628b933ea7a135a9a957a5e0136/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 25,
      "deletions": 0
    },
    "files": [
      {
        "sha": "17e72a79066b67203d85c963e393969be70301d2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd509bd1f71df628b933ea7a135a9a957a5e0136/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd509bd1f71df628b933ea7a135a9a957a5e0136/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fd509bd1f71df628b933ea7a135a9a957a5e0136",
        "patch": "@@ -245,6 +245,9 @@ obj/build.h: FORCE\n libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h\n \n # server: shared between bitcoind and bitcoin-qt\n+# Contains code accessing mempool and chain state that is meant to be separated\n+# from wallet and gui code (see node/README.md). Shared code should go in\n+# libbitcoin_common or libbitcoin_util libraries, instead.\n libbitcoin_server_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS)\n libbitcoin_server_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_server_a_SOURCES = \\"
      },
      {
        "sha": "e99a7175344b97e0475ed049841aff10353b025d",
        "filename": "src/node/README.md",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd509bd1f71df628b933ea7a135a9a957a5e0136/src/node/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd509bd1f71df628b933ea7a135a9a957a5e0136/src/node/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/README.md?ref=fd509bd1f71df628b933ea7a135a9a957a5e0136",
        "patch": "@@ -0,0 +1,22 @@\n+# src/node/\n+\n+The [`src/node/`](./) directory contains code that needs to access node state\n+(state in `CChain`, `CBlockIndex`, `CCoinsView`, `CTxMemPool`, and similar\n+classes).\n+\n+Code in [`src/node/`](./) is meant to be segregated from code in\n+[`src/wallet/`](../wallet/) and [`src/qt/`](../qt/), to ensure wallet and GUI\n+code changes don't interfere with node operation, to allow wallet and GUI code\n+to run in separate processes, and to perhaps eventually allow wallet and GUI\n+code to be maintained in separate source repositories.\n+\n+As a rule of thumb, code in one of the [`src/node/`](./),\n+[`src/wallet/`](../wallet/), or [`src/qt/`](../qt/) directories should avoid\n+calling code in the other directories directly, and only invoke it indirectly\n+through the more limited [`src/interfaces/`](../interfaces/) classes.\n+\n+The [`src/node/`](./) directory is a new directory introduced in\n+[#14978](https://github.com/bitcoin/bitcoin/pull/14978) and at the moment is\n+sparsely populated. Eventually more substantial files like\n+[`src/validation.cpp`](../validation.cpp) and\n+[`src/txmempool.cpp`](../txmempool.cpp) might be moved there."
      }
    ]
  },
  {
    "sha": "4d074e84a2cf419510e2920417799f62747f4b07",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDA3NGU4NGEyY2Y0MTk1MTBlMjkyMDQxNzc5OWY2Mjc0N2Y0YjA3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-04-08T20:33:05Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-04-09T21:53:08Z"
      },
      "message": "[build] Move AnalyzePSBT from psbt.cpp to node/psbt.cpp\n\npsbt.cpp definitions except for AnalyzePSBT are used by the wallet and need to\nbe linked into the wallet binary. AnalyzePSBT is an exception in that it is not\nused by the wallet, and depends on node classes like CCoinsViewCache, and on\nnode global variables like nBytesPerSigOp.\n\nSo AnalyzePSBT is more at home in libbitcoin_server than libbitcoin_common, and\nin any case needs to be defined in a separate object file than other PSBT\nutilities, to avoid dragging link dependencies on node functions and global\nvariables into the wallet.",
      "tree": {
        "sha": "545a1e6e757086c1e29becb5e202422f1a40688b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/545a1e6e757086c1e29becb5e202422f1a40688b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d074e84a2cf419510e2920417799f62747f4b07",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d074e84a2cf419510e2920417799f62747f4b07",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d074e84a2cf419510e2920417799f62747f4b07",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d074e84a2cf419510e2920417799f62747f4b07/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd509bd1f71df628b933ea7a135a9a957a5e0136",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd509bd1f71df628b933ea7a135a9a957a5e0136",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd509bd1f71df628b933ea7a135a9a957a5e0136"
      }
    ],
    "stats": {
      "total": 336,
      "additions": 180,
      "deletions": 156
    },
    "files": [
      {
        "sha": "cb0604391e5a7db48e808c96dc46af4cb82bb2a3",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d074e84a2cf419510e2920417799f62747f4b07/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d074e84a2cf419510e2920417799f62747f4b07/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4d074e84a2cf419510e2920417799f62747f4b07",
        "patch": "@@ -156,6 +156,7 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   netmessagemaker.h \\\n   node/coin.h \\\n+  node/psbt.h \\\n   node/transaction.h \\\n   noui.h \\\n   optional.h \\\n@@ -272,6 +273,7 @@ libbitcoin_server_a_SOURCES = \\\n   net.cpp \\\n   net_processing.cpp \\\n   node/coin.cpp \\\n+  node/psbt.cpp \\\n   node/transaction.cpp \\\n   noui.cpp \\\n   policy/fees.cpp \\"
      },
      {
        "sha": "12559c5a5f19748ffc24d6627de0a95c3950d042",
        "filename": "src/node/psbt.cpp",
        "status": "added",
        "additions": 134,
        "deletions": 0,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d074e84a2cf419510e2920417799f62747f4b07/src/node/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d074e84a2cf419510e2920417799f62747f4b07/src/node/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.cpp?ref=4d074e84a2cf419510e2920417799f62747f4b07",
        "patch": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <node/psbt.h>\n+#include <policy/policy.h>\n+#include <policy/settings.h>\n+\n+#include <numeric>\n+\n+PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n+{\n+    // Go through each input and build status\n+    PSBTAnalysis result;\n+\n+    bool calc_fee = true;\n+    bool all_final = true;\n+    bool only_missing_sigs = true;\n+    bool only_missing_final = false;\n+    CAmount in_amt = 0;\n+\n+    result.inputs.resize(psbtx.tx->vin.size());\n+\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        PSBTInput& input = psbtx.inputs[i];\n+        PSBTInputAnalysis& input_analysis = result.inputs[i];\n+\n+        // Check for a UTXO\n+        CTxOut utxo;\n+        if (psbtx.GetInputUTXO(utxo, i)) {\n+            in_amt += utxo.nValue;\n+            input_analysis.has_utxo = true;\n+        } else {\n+            input_analysis.has_utxo = false;\n+            input_analysis.is_final = false;\n+            input_analysis.next = PSBTRole::UPDATER;\n+            calc_fee = false;\n+        }\n+\n+        // Check if it is final\n+        if (!utxo.IsNull() && !PSBTInputSigned(input)) {\n+            input_analysis.is_final = false;\n+            all_final = false;\n+\n+            // Figure out what is missing\n+            SignatureData outdata;\n+            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, &outdata);\n+\n+            // Things are missing\n+            if (!complete) {\n+                input_analysis.missing_pubkeys = outdata.missing_pubkeys;\n+                input_analysis.missing_redeem_script = outdata.missing_redeem_script;\n+                input_analysis.missing_witness_script = outdata.missing_witness_script;\n+                input_analysis.missing_sigs = outdata.missing_sigs;\n+\n+                // If we are only missing signatures and nothing else, then next is signer\n+                if (outdata.missing_pubkeys.empty() && outdata.missing_redeem_script.IsNull() && outdata.missing_witness_script.IsNull() && !outdata.missing_sigs.empty()) {\n+                    input_analysis.next = PSBTRole::SIGNER;\n+                } else {\n+                    only_missing_sigs = false;\n+                    input_analysis.next = PSBTRole::UPDATER;\n+                }\n+            } else {\n+                only_missing_final = true;\n+                input_analysis.next = PSBTRole::FINALIZER;\n+            }\n+        } else if (!utxo.IsNull()){\n+            input_analysis.is_final = true;\n+        }\n+    }\n+\n+    if (all_final) {\n+        only_missing_sigs = false;\n+        result.next = PSBTRole::EXTRACTOR;\n+    }\n+    if (calc_fee) {\n+        // Get the output amount\n+        CAmount out_amt = std::accumulate(psbtx.tx->vout.begin(), psbtx.tx->vout.end(), CAmount(0),\n+            [](CAmount a, const CTxOut& b) {\n+                return a += b.nValue;\n+            }\n+        );\n+\n+        // Get the fee\n+        CAmount fee = in_amt - out_amt;\n+        result.fee = fee;\n+\n+        // Estimate the size\n+        CMutableTransaction mtx(*psbtx.tx);\n+        CCoinsView view_dummy;\n+        CCoinsViewCache view(&view_dummy);\n+        bool success = true;\n+\n+        for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+            PSBTInput& input = psbtx.inputs[i];\n+            Coin newcoin;\n+\n+            if (!SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, nullptr, true) || !psbtx.GetInputUTXO(newcoin.out, i)) {\n+                success = false;\n+                break;\n+            } else {\n+                mtx.vin[i].scriptSig = input.final_script_sig;\n+                mtx.vin[i].scriptWitness = input.final_script_witness;\n+                newcoin.nHeight = 1;\n+                view.AddCoin(psbtx.tx->vin[i].prevout, std::move(newcoin), true);\n+            }\n+        }\n+\n+        if (success) {\n+            CTransaction ctx = CTransaction(mtx);\n+            size_t size = GetVirtualTransactionSize(ctx, GetTransactionSigOpCost(ctx, view, STANDARD_SCRIPT_VERIFY_FLAGS));\n+            result.estimated_vsize = size;\n+            // Estimate fee rate\n+            CFeeRate feerate(fee, size);\n+            result.estimated_feerate = feerate;\n+        }\n+\n+        if (only_missing_sigs) {\n+            result.next = PSBTRole::SIGNER;\n+        } else if (only_missing_final) {\n+            result.next = PSBTRole::FINALIZER;\n+        } else if (all_final) {\n+            result.next = PSBTRole::EXTRACTOR;\n+        } else {\n+            result.next = PSBTRole::UPDATER;\n+        }\n+    } else {\n+        result.next = PSBTRole::UPDATER;\n+    }\n+\n+    return result;\n+}"
      },
      {
        "sha": "e04366a20f88f6fa0648f07fb78d6d09a1db929c",
        "filename": "src/node/psbt.h",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d074e84a2cf419510e2920417799f62747f4b07/src/node/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d074e84a2cf419510e2920417799f62747f4b07/src/node/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/psbt.h?ref=4d074e84a2cf419510e2920417799f62747f4b07",
        "patch": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_PSBT_H\n+#define BITCOIN_NODE_PSBT_H\n+\n+#include <psbt.h>\n+\n+/**\n+ * Holds an analysis of one input from a PSBT\n+ */\n+struct PSBTInputAnalysis {\n+    bool has_utxo; //!< Whether we have UTXO information for this input\n+    bool is_final; //!< Whether the input has all required information including signatures\n+    PSBTRole next; //!< Which of the BIP 174 roles needs to handle this input next\n+\n+    std::vector<CKeyID> missing_pubkeys; //!< Pubkeys whose BIP32 derivation path is missing\n+    std::vector<CKeyID> missing_sigs;    //!< Pubkeys whose signatures are missing\n+    uint160 missing_redeem_script;       //!< Hash160 of redeem script, if missing\n+    uint256 missing_witness_script;      //!< SHA256 of witness script, if missing\n+};\n+\n+/**\n+ * Holds the results of AnalyzePSBT (miscellaneous information about a PSBT)\n+ */\n+struct PSBTAnalysis {\n+    Optional<size_t> estimated_vsize;      //!< Estimated weight of the transaction\n+    Optional<CFeeRate> estimated_feerate;  //!< Estimated feerate (fee / weight) of the transaction\n+    Optional<CAmount> fee;                 //!< Amount of fee being paid by the transaction\n+    std::vector<PSBTInputAnalysis> inputs; //!< More information about the individual inputs of the transaction\n+    PSBTRole next;                         //!< Which of the BIP 174 roles needs to handle the transaction next\n+};\n+\n+/**\n+ * Provides helpful miscellaneous information about where a PSBT is in the signing workflow.\n+ *\n+ * @param[in] psbtx the PSBT to analyze\n+ * @return A PSBTAnalysis with information about the provided PSBT.\n+ */\n+PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx);\n+\n+#endif // BITCOIN_NODE_PSBT_H"
      },
      {
        "sha": "f31f2af0d1497f6f91e5864ea235795ee662d1f4",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 123,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d074e84a2cf419510e2920417799f62747f4b07/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d074e84a2cf419510e2920417799f62747f4b07/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=4d074e84a2cf419510e2920417799f62747f4b07",
        "patch": "@@ -340,129 +340,6 @@ std::string PSBTRoleName(PSBTRole role) {\n     }\n }\n \n-PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n-{\n-    // Go through each input and build status\n-    PSBTAnalysis result;\n-\n-    bool calc_fee = true;\n-    bool all_final = true;\n-    bool only_missing_sigs = true;\n-    bool only_missing_final = false;\n-    CAmount in_amt = 0;\n-\n-    result.inputs.resize(psbtx.tx->vin.size());\n-\n-    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        PSBTInput& input = psbtx.inputs[i];\n-        PSBTInputAnalysis& input_analysis = result.inputs[i];\n-\n-        // Check for a UTXO\n-        CTxOut utxo;\n-        if (psbtx.GetInputUTXO(utxo, i)) {\n-            in_amt += utxo.nValue;\n-            input_analysis.has_utxo = true;\n-        } else {\n-            input_analysis.has_utxo = false;\n-            input_analysis.is_final = false;\n-            input_analysis.next = PSBTRole::UPDATER;\n-            calc_fee = false;\n-        }\n-\n-        // Check if it is final\n-        if (!utxo.IsNull() && !PSBTInputSigned(input)) {\n-            input_analysis.is_final = false;\n-            all_final = false;\n-\n-            // Figure out what is missing\n-            SignatureData outdata;\n-            bool complete = SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, &outdata);\n-\n-            // Things are missing\n-            if (!complete) {\n-                input_analysis.missing_pubkeys = outdata.missing_pubkeys;\n-                input_analysis.missing_redeem_script = outdata.missing_redeem_script;\n-                input_analysis.missing_witness_script = outdata.missing_witness_script;\n-                input_analysis.missing_sigs = outdata.missing_sigs;\n-\n-                // If we are only missing signatures and nothing else, then next is signer\n-                if (outdata.missing_pubkeys.empty() && outdata.missing_redeem_script.IsNull() && outdata.missing_witness_script.IsNull() && !outdata.missing_sigs.empty()) {\n-                    input_analysis.next = PSBTRole::SIGNER;\n-                } else {\n-                    only_missing_sigs = false;\n-                    input_analysis.next = PSBTRole::UPDATER;\n-                }\n-            } else {\n-                only_missing_final = true;\n-                input_analysis.next = PSBTRole::FINALIZER;\n-            }\n-        } else if (!utxo.IsNull()){\n-            input_analysis.is_final = true;\n-        }\n-    }\n-\n-    if (all_final) {\n-        only_missing_sigs = false;\n-        result.next = PSBTRole::EXTRACTOR;\n-    }\n-    if (calc_fee) {\n-        // Get the output amount\n-        CAmount out_amt = std::accumulate(psbtx.tx->vout.begin(), psbtx.tx->vout.end(), CAmount(0),\n-            [](CAmount a, const CTxOut& b) {\n-                return a += b.nValue;\n-            }\n-        );\n-\n-        // Get the fee\n-        CAmount fee = in_amt - out_amt;\n-        result.fee = fee;\n-\n-        // Estimate the size\n-        CMutableTransaction mtx(*psbtx.tx);\n-        CCoinsView view_dummy;\n-        CCoinsViewCache view(&view_dummy);\n-        bool success = true;\n-\n-        for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-            PSBTInput& input = psbtx.inputs[i];\n-            Coin newcoin;\n-\n-            if (!SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, 1, nullptr, true) || !psbtx.GetInputUTXO(newcoin.out, i)) {\n-                success = false;\n-                break;\n-            } else {\n-                mtx.vin[i].scriptSig = input.final_script_sig;\n-                mtx.vin[i].scriptWitness = input.final_script_witness;\n-                newcoin.nHeight = 1;\n-                view.AddCoin(psbtx.tx->vin[i].prevout, std::move(newcoin), true);\n-            }\n-        }\n-\n-        if (success) {\n-            CTransaction ctx = CTransaction(mtx);\n-            size_t size = GetVirtualTransactionSize(ctx, GetTransactionSigOpCost(ctx, view, STANDARD_SCRIPT_VERIFY_FLAGS));\n-            result.estimated_vsize = size;\n-            // Estimate fee rate\n-            CFeeRate feerate(fee, size);\n-            result.estimated_feerate = feerate;\n-        }\n-\n-        if (only_missing_sigs) {\n-            result.next = PSBTRole::SIGNER;\n-        } else if (only_missing_final) {\n-            result.next = PSBTRole::FINALIZER;\n-        } else if (all_final) {\n-            result.next = PSBTRole::EXTRACTOR;\n-        } else {\n-            result.next = PSBTRole::UPDATER;\n-        }\n-    } else {\n-        result.next = PSBTRole::UPDATER;\n-    }\n-\n-    return result;\n-}\n-\n bool DecodeBase64PSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error)\n {\n     bool invalid;"
      },
      {
        "sha": "1bc1e91a84ec2ee93cb3025fc11d5da557208ebc",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 0,
        "deletions": 33,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d074e84a2cf419510e2920417799f62747f4b07/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d074e84a2cf419510e2920417799f62747f4b07/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=4d074e84a2cf419510e2920417799f62747f4b07",
        "patch": "@@ -557,31 +557,6 @@ enum class PSBTRole {\n     EXTRACTOR\n };\n \n-/**\n- * Holds an analysis of one input from a PSBT\n- */\n-struct PSBTInputAnalysis {\n-    bool has_utxo; //!< Whether we have UTXO information for this input\n-    bool is_final; //!< Whether the input has all required information including signatures\n-    PSBTRole next; //!< Which of the BIP 174 roles needs to handle this input next\n-\n-    std::vector<CKeyID> missing_pubkeys; //!< Pubkeys whose BIP32 derivation path is missing\n-    std::vector<CKeyID> missing_sigs;    //!< Pubkeys whose signatures are missing\n-    uint160 missing_redeem_script;       //!< Hash160 of redeem script, if missing\n-    uint256 missing_witness_script;      //!< SHA256 of witness script, if missing\n-};\n-\n-/**\n- * Holds the results of AnalyzePSBT (miscellaneous information about a PSBT)\n- */\n-struct PSBTAnalysis {\n-    Optional<size_t> estimated_vsize;      //!< Estimated weight of the transaction\n-    Optional<CFeeRate> estimated_feerate;  //!< Estimated feerate (fee / weight) of the transaction\n-    Optional<CAmount> fee;                 //!< Amount of fee being paid by the transaction\n-    std::vector<PSBTInputAnalysis> inputs; //!< More information about the individual inputs of the transaction\n-    PSBTRole next;                         //!< Which of the BIP 174 roles needs to handle the transaction next\n-};\n-\n std::string PSBTRoleName(PSBTRole role);\n \n /** Checks whether a PSBTInput is already signed. */\n@@ -616,14 +591,6 @@ bool FinalizeAndExtractPSBT(PartiallySignedTransaction& psbtx, CMutableTransacti\n  */\n NODISCARD TransactionError CombinePSBTs(PartiallySignedTransaction& out, const std::vector<PartiallySignedTransaction>& psbtxs);\n \n-/**\n- * Provides helpful miscellaneous information about where a PSBT is in the signing workflow.\n- *\n- * @param[in] psbtx the PSBT to analyze\n- * @return A PSBTAnalysis with information about the provided PSBT.\n- */\n-PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx);\n-\n //! Decode a base64ed PSBT into a PartiallySignedTransaction\n NODISCARD bool DecodeBase64PSBT(PartiallySignedTransaction& decoded_psbt, const std::string& base64_psbt, std::string& error);\n //! Decode a raw (binary blob) PSBT into a PartiallySignedTransaction"
      },
      {
        "sha": "8d15ecc28e524377060341d1f7b6e44f250470bb",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d074e84a2cf419510e2920417799f62747f4b07/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d074e84a2cf419510e2920417799f62747f4b07/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=4d074e84a2cf419510e2920417799f62747f4b07",
        "patch": "@@ -15,6 +15,7 @@\n #include <key_io.h>\n #include <keystore.h>\n #include <merkleblock.h>\n+#include <node/psbt.h>\n #include <node/transaction.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>"
      }
    ]
  }
]