dgenr8,2016-03-03T20:19:46Z,Does this algorithm claim to select the optimum descendant subtree for a given independent transaction?\n,https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-191945078,191945078,
sdaftuar,2016-03-03T21:04:47Z,"This algorithm is by no means guaranteed to produce maximum fee blocks for a given mempool, if that's what you're trying to ask.\n\nThe algorithm this PR is trying to implement is straightforward:\n\n```\nLook at highest ancestor-feerate tx in mempool:\n - Add tx's package (tx + unconfirmed ancestors) to block\n - Remove tx's package from the mempool and re-sort (so that descendants of tx and its ",https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-191962193,191962193,
sipa,2016-03-04T21:57:04Z,"Would it be possible to have a CTxMempool::check that accurately checks the ancestor-based statistics, rather than just lower bounding them to 1 level up?\n",https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-192487265,192487265,
sdaftuar,2016-03-17T15:11:41Z,Updated now that #7594 has been merged.\n,https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-197926092,197926092,
btcdrak,2016-03-17T17:28:42Z,Is this still WIP?\n,https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-197987996,197987996,
sdaftuar,2016-03-17T17:32:14Z,"@btcdrak: I was thinking I'd leave this marked as WIP until the other dependent PR (#7598) is merged, since I'll have to rebase this on top of whatever the final version of the refactor ends up being. \n\nI should add -- if you want to start reviewing now, please do!\n",https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-197989822,197989822,
btcdrak,2016-03-17T17:43:06Z,"@sdaftuar Github tasklists are maybe better for this kind of thing, and they show up as tasks even on ticket lists. https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments\n",https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-197994652,197994652,
sdaftuar,2016-05-18T18:39:14Z,Rebased on the latest #7598 \n,https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-220119556,220119556,
sdaftuar,2016-06-09T14:37:57Z,Rebased again and built off the latest version of #7598.\n,https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-224915073,224915073,
seweso,2016-06-10T08:19:08Z,"Very nice!\n\n> Additionally, my guess is that user behavior may not have adapted to this type of transaction selection being widely deployed, and so in the future perhaps we might expect to see larger differences. \n\nYes you would definitely expect bigger difference as this becomes available. As entities will be able to underpay transactions without risking getting dropped from the mempool. (for",https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-225121067,225121067,
sdaftuar,2016-06-11T15:43:14Z,"> Is this algorithm also used to determine which transactions to drop?\n\n@seweso  The algorithm for eviction of transactions from the mempool is unchanged.  In a sense, the transaction eviction algorithm for the mempool is already assuming we're doing something like what this PR implements for transaction selection, in that a transaction is less likely to be evicted from the mempool if its feerat",https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-225370732,225370732,
MarcoFalke,2016-06-13T09:52:02Z,Needs rebase\n,https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-225537007,225537007,
sdaftuar,2016-06-13T14:08:30Z,Rebased after #7598 has been merged.  This PR is ready for review!\n,https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-225591617,225591617,
MarcoFalke,2016-06-14T11:36:19Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-225855171,225855171,
JeremyRubin,2016-06-14T18:24:56Z,utAck\n,https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-225971779,225971779,
sdaftuar,2016-06-15T16:31:40Z,"Pushed commits addressing @mrbandrews comments.\n\nre: @JeremyRubin's nits, I'm leaving `TestPackage` alone, I think it's pretty readable in its current form, and the >= shouldn't matter for anything and is consistent with addScoreTx's behavior.\n\nI'll do another round of testing locally, similar to what I did before when I opened the pull, with the current version of the code and report back.\n",https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-226243521,226243521,
sdaftuar,2016-06-15T21:15:37Z,"I re-tested my code by simulating on data from 2016-02-23 -to 2016-02-29, comparing the default mining code in master against the mining code introduced here, by calling CreateNewBlock every 100 transactions.\n\nI looked at the fees produced in the last call to CNB before each block found by the network, and the code in this PR produced higher fee blocks in each instance (894 data points).\n\nI wa",https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-226322511,226322511,
gmaxwell,2016-06-15T21:28:52Z,"ACK.\n\nBeyond review, I tested this on several mining nodes for about a week (in addition to prior testing I did months back); I also took nodes running this and a tight getblocktemplate loop through a number of reorg tests with debugging turned up.  Finally, rather than using sdaftuar record and replay framework, I scraped all the recent transactions out of recent blocks, reorged the chain back ",https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-226325742,226325742,
mrbandrews,2016-06-16T15:37:30Z,"ACK.\nCode review ACK and in my testing, though not nearly as comprehensive as sdaftuar and gmaxwell's testing, the new code yields higher fees by 1% to 15%.\n",https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-226524005,226524005,
sipa,2016-06-16T16:34:20Z,ACK f3c65512a416cb9890a291d16204c83b5702b11e (with tree 66fb31f4aaaf3c49ef03c93b3b8155b531359e05).\n\nUpdate: ACK b428fb2656b3cdf3021faf508eb78e6831e5a276 (with tree 2e6a8674a4e7179aea0041931d68076a442d0132).\n\nCan you squash the fixups?\n,https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-226540713,226540713,
sdaftuar,2016-06-16T16:38:48Z,"Thanks, squashed.\n",https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-226541921,226541921,
sipa,2016-06-16T16:41:08Z,ReACK 29fac19c93fabfed4163ee9ffa85f9188c9ee6ac (tree 2e6a8674a4e7179aea0041931d68076a442d0132).\n,https://github.com/bitcoin/bitcoin/pull/7600#issuecomment-226542544,226542544,
JeremyRubin,2016-06-14T17:04:35Z,"~~Nit: may as well have ++iit in the for loop because it always occurs.~~\n\n```\nfor (CTxMemPool::setEntries::iterator iit = testSet.begin(); iit != testSet.end(); ++iit) {\n         // Only test txs not already in the block\n         if (inBlock.count(*iit)) \n             testSet.erase(iit);\n }\n```\n\nEdit: ignore, erasing an iterator invalidates iit.\n",https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67012735,67012735,src/miner.cpp
JeremyRubin,2016-06-14T17:45:17Z,nit: Can just have\n`return ! (nBlockSize + packageSize >= nBlockMaxSize || nBlockSigOps + packageSigOps >= MAX_BLOCK_SIGOPS)`\n\nor\n\n`return (nBlockSize + packageSize < nBlockMaxSize && nBlockSigOps + packageSigOps < MAX_BLOCK_SIGOPS)`\n,https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67020156,67020156,src/miner.cpp
JeremyRubin,2016-06-14T17:46:09Z,nit: >= should really be just > because we allow up to the max sizes.\n,https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67020333,67020333,src/miner.cpp
mrbandrews,2016-06-15T14:46:29Z,"Nit: since block size and sigops have already been checked, it shouldn't be necessary to re-check and assert here.\n",https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67175848,67175848,src/miner.cpp
mrbandrews,2016-06-15T14:53:29Z,nit: modifiying -> modifying\n,https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67177283,67177283,src/miner.cpp
mrbandrews,2016-06-15T15:02:17Z,"Nit: perhaps SkipMapTxEntry could just be included here to avoid the separate method.  Alternatively, if the code would be a little too messy, failedTxs could be a local variable passed to the helper function rather than a class member variable.\n",https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67179126,67179126,src/miner.cpp
mrbandrews,2016-06-15T15:04:45Z,mapModifiedTxs should be cleared at the end of this function.  Or it could be a local variable and passed as needed. \n,https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67179693,67179693,src/miner.cpp
sdaftuar,2016-06-15T16:24:51Z,"I guess I left these asserts in to make the logic in addPackageTxs easier to review, in that if you weren't sure whether the mapModifiedTx calculations were correct, this assertion ensures that it doesn't underestimate.  But I suppose this would be caught in TestBlockValidity anyway, so I'll remove.\n",https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67195937,67195937,src/miner.cpp
sipa,2016-06-16T15:50:25Z,"If I understand it correctly, this means you can't call addPackageTxs() twice (or have another add*Tx() that also calls `UpdatePackagesForAdded(inBlock);`. That could be solved by keeping a set of things in `inBlock` that have already been counted for package updates, but I guess it's sufficient to just document that this must not be called twice.\n",https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67370905,67370905,src/miner.cpp
sdaftuar,2016-06-16T15:53:55Z,"Calling it twice doesn't really make sense, as addPackageTx's would fill up your block the first time.  I think if you wanted to implement custom transaction selection, you'd implement it in a function that is called before you'd call addPackageTx's to fill the rest of the block (like how priority tx's are done).\n\nI can add a comment though to make this clearer.\n",https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67371518,67371518,src/miner.cpp
sipa,2016-06-16T15:56:47Z,"Nit: this can move into the else branch below.\n\nEdit: nevermind, you're using it in the comparator.\n",https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67372031,67372031,src/miner.cpp
sdaftuar,2016-06-16T15:57:56Z,"Oh I forgot to mention: this function no longer changes global state, after I addressed @mrbandrews comments in a later commit and moved mapModifiedTx to be a local variable in addPackageTxs.  So this can be reused, though it's pretty tied to the package selection.\n",https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67372247,67372247,src/miner.cpp
sipa,2016-06-16T16:03:39Z,"Couldn't CTxMempoolModifiedEntry be indexed by its CTxMemPool::txiter entry instead? Not sure if that's comparable/hashable, though.\n",https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67373389,67373389,src/miner.h
sipa,2016-06-16T16:05:52Z,"The addScoreTxs method can be deleted, I think?\n",https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67373749,67373749,src/miner.cpp
sipa,2016-06-16T16:09:18Z,"ACK, fixed by the later commit.\n",https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67374405,67374405,src/miner.cpp
sdaftuar,2016-06-16T16:10:29Z,"I don't remember anymore but I feel like I tried that in the past and failed.  If you have a patch, I will be happy to incorporate.\n",https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67374602,67374602,src/miner.h
sdaftuar,2016-06-16T16:17:19Z,"I raised that question at the beginning of this pull, and no discussion has happened; I'd like to defer that to its own PR to give anyone who is clinging to the old behavior a chance to argue for keeping the code?\n",https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67375801,67375801,src/miner.cpp
sipa,2016-06-16T16:25:58Z,See https://github.com/sipa/bitcoin/commits/cpfp\n,https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67377794,67377794,src/miner.h
sipa,2016-06-16T16:27:53Z,Fair enough.\n,https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67378150,67378150,src/miner.cpp
sdaftuar,2016-06-16T16:34:55Z,Thanks!  Looks good.\n,https://github.com/bitcoin/bitcoin/pull/7600#discussion_r67379371,67379371,src/miner.h
