[
  {
    "sha": "48c6d43cd2a6d6cc70984260c8c5b307697449c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGM2ZDQzY2QyYTZkNmNjNzA5ODQyNjBjOGM1YjMwNzY5NzQ0OWM2",
    "commit": {
      "author": {
        "name": "Timo Hanke",
        "email": "timo.hanke@web.de",
        "date": "2014-10-18T03:38:49Z"
      },
      "committer": {
        "name": "Timo Hanke",
        "email": "timo.hanke@web.de",
        "date": "2014-10-29T02:34:16Z"
      },
      "message": "Non-forking extra nonce added to Bitcoin header.\n\nBlock version set to 3.\nUnittest included (in src/test/miner_tests.cpp).\nRe-define 15 unused bits of the version field as an extra nonce inside the block header.\nAccompanied by a BIP, see wiki (https://github.com/BlockheaderNonce2/bitcoin/wiki).\nNot forking.\nBackwards compatible with GBT clients that are not aware of this.\n\nTimo Hanke & Sergio Lerner",
      "tree": {
        "sha": "202c8d9133e8f7a15ecb06ef178719867add82d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/202c8d9133e8f7a15ecb06ef178719867add82d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48c6d43cd2a6d6cc70984260c8c5b307697449c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48c6d43cd2a6d6cc70984260c8c5b307697449c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48c6d43cd2a6d6cc70984260c8c5b307697449c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48c6d43cd2a6d6cc70984260c8c5b307697449c6/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "723c7526368badda15df8ac1ffc047a0ab2e384a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723c7526368badda15df8ac1ffc047a0ab2e384a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/723c7526368badda15df8ac1ffc047a0ab2e384a"
      }
    ],
    "stats": {
      "total": 166,
      "additions": 153,
      "deletions": 13
    },
    "files": [
      {
        "sha": "3425f211c034f43e74c8dc97ac9112ea24c353b8",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48c6d43cd2a6d6cc70984260c8c5b307697449c6/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48c6d43cd2a6d6cc70984260c8c5b307697449c6/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=48c6d43cd2a6d6cc70984260c8c5b307697449c6",
        "patch": "@@ -129,7 +129,8 @@ class CBlockIndex\n     unsigned int nStatus;\n \n     // block header\n-    int nVersion;\n+    uint16_t nVersion;\n+    uint16_t nNonce2;\n     uint256 hashMerkleRoot;\n     unsigned int nTime;\n     unsigned int nBits;\n@@ -154,6 +155,7 @@ class CBlockIndex\n         nSequenceId = 0;\n \n         nVersion       = 0;\n+        nNonce2        = 0;\n         hashMerkleRoot = 0;\n         nTime          = 0;\n         nBits          = 0;\n@@ -170,6 +172,7 @@ class CBlockIndex\n         SetNull();\n \n         nVersion       = block.nVersion;\n+        nNonce2        = block.nNonce2;\n         hashMerkleRoot = block.hashMerkleRoot;\n         nTime          = block.nTime;\n         nBits          = block.nBits;\n@@ -198,6 +201,7 @@ class CBlockIndex\n     {\n         CBlockHeader block;\n         block.nVersion       = nVersion;\n+        block.nNonce2        = nNonce2;\n         if (pprev)\n             block.hashPrevBlock = pprev->GetBlockHash();\n         block.hashMerkleRoot = hashMerkleRoot;\n@@ -243,7 +247,7 @@ class CBlockIndex\n      * in the last Params().ToCheckBlockUpgradeMajority() blocks, starting at pstart \n      * and going backwards.\n      */\n-    static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart,\n+    static bool IsSuperMajority(uint16_t minVersion, const CBlockIndex* pstart,\n                                 unsigned int nRequired);\n \n     std::string ToString() const\n@@ -318,6 +322,7 @@ class CDiskBlockIndex : public CBlockIndex\n \n         // block header\n         READWRITE(this->nVersion);\n+        READWRITE(this->nNonce2);\n         READWRITE(hashPrev);\n         READWRITE(hashMerkleRoot);\n         READWRITE(nTime);\n@@ -329,6 +334,7 @@ class CDiskBlockIndex : public CBlockIndex\n     {\n         CBlockHeader block;\n         block.nVersion        = nVersion;\n+        block.nNonce2         = nNonce2;\n         block.hashPrevBlock   = hashPrev;\n         block.hashMerkleRoot  = hashMerkleRoot;\n         block.nTime           = nTime;"
      },
      {
        "sha": "6fae44d69a8f797fd5dfcf45ecfed51208cfd56b",
        "filename": "src/core/block.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48c6d43cd2a6d6cc70984260c8c5b307697449c6/src/core/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48c6d43cd2a6d6cc70984260c8c5b307697449c6/src/core/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core/block.cpp?ref=48c6d43cd2a6d6cc70984260c8c5b307697449c6",
        "patch": "@@ -111,9 +111,10 @@ uint256 CBlock::CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMer\n std::string CBlock::ToString() const\n {\n     std::stringstream s;\n-    s << strprintf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%u)\\n\",\n+    s << strprintf(\"CBlock(hash=%s, ver=%u, nNonce2=%u, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%u)\\n\",\n         GetHash().ToString(),\n         nVersion,\n+        nNonce2,\n         hashPrevBlock.ToString(),\n         hashMerkleRoot.ToString(),\n         nTime, nBits, nNonce,"
      },
      {
        "sha": "913993b423bd8dd3a824cb80a30e6f569271ba18",
        "filename": "src/core/block.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48c6d43cd2a6d6cc70984260c8c5b307697449c6/src/core/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48c6d43cd2a6d6cc70984260c8c5b307697449c6/src/core/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core/block.h?ref=48c6d43cd2a6d6cc70984260c8c5b307697449c6",
        "patch": "@@ -21,8 +21,9 @@ class CBlockHeader\n {\n public:\n     // header\n-    static const int32_t CURRENT_VERSION=2;\n-    int32_t nVersion;\n+    static const uint16_t CURRENT_VERSION=3;\n+    uint16_t nVersion;\n+    uint16_t nNonce2;\n     uint256 hashPrevBlock;\n     uint256 hashMerkleRoot;\n     uint32_t nTime;\n@@ -40,6 +41,7 @@ class CBlockHeader\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(this->nVersion);\n         nVersion = this->nVersion;\n+        READWRITE(nNonce2);\n         READWRITE(hashPrevBlock);\n         READWRITE(hashMerkleRoot);\n         READWRITE(nTime);\n@@ -50,6 +52,7 @@ class CBlockHeader\n     void SetNull()\n     {\n         nVersion = CBlockHeader::CURRENT_VERSION;\n+        nNonce2 = 0;\n         hashPrevBlock = 0;\n         hashMerkleRoot = 0;\n         nTime = 0;\n@@ -110,6 +113,7 @@ class CBlock : public CBlockHeader\n     {\n         CBlockHeader block;\n         block.nVersion       = nVersion;\n+        block.nNonce2        = nNonce2;\n         block.hashPrevBlock  = hashPrevBlock;\n         block.hashMerkleRoot = hashMerkleRoot;\n         block.nTime          = nTime;"
      },
      {
        "sha": "4116c8a4c8eb4775b9349072abee41831970a709",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48c6d43cd2a6d6cc70984260c8c5b307697449c6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48c6d43cd2a6d6cc70984260c8c5b307697449c6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=48c6d43cd2a6d6cc70984260c8c5b307697449c6",
        "patch": "@@ -1766,9 +1766,10 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     nTimeBestReceived = GetTime();\n     mempool.AddTransactionsUpdated(1);\n \n-    LogPrintf(\"UpdateTip: new best=%s  height=%d  log2_work=%.8g  tx=%lu  date=%s progress=%f  cache=%u\\n\",\n+    LogPrintf(\"UpdateTip: new best=%s  height=%d  log2_work=%.8g  tx=%lu  date=%s  block.nVersion=%u  block.nNonce2=%u  progress=%f  cache=%u\\n\",\n       chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(), log(chainActive.Tip()->nChainWork.getdouble())/log(2.0), (unsigned long)chainActive.Tip()->nChainTx,\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n+      chainActive.Tip()->nVersion, chainActive.Tip()->nNonce2,\n       Checkpoints::GuessVerificationProgress(chainActive.Tip()), (unsigned int)pcoinsTip->GetCacheSize());\n \n     cvBlockChange.notify_all();\n@@ -2359,8 +2360,13 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n         if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n             return state.DoS(100, error(\"%s : forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n \n+        // Reject nNonce2 15th bit set until we decide to hardfork and re-enable the use of this bit.\n+        if (block.nNonce2 & 0x8000u)\n+            return state.Invalid(error(\"%s : rejected nNonce2 15th-bit set\", __func__),\n+                                 REJECT_INVALID, \"bad-nNonce2\");\n+\n         // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n-        if (block.nVersion < 2 && \n+        if (block.nVersion < 2 &&\n             CBlockIndex::IsSuperMajority(2, pindexPrev, Params().RejectBlockOutdatedMajority()))\n         {\n             return state.Invalid(error(\"%s : rejected nVersion=1 block\", __func__),\n@@ -2442,7 +2448,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n     return true;\n }\n \n-bool CBlockIndex::IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned int nRequired)\n+bool CBlockIndex::IsSuperMajority(uint16_t minVersion, const CBlockIndex* pstart, unsigned int nRequired)\n {\n     unsigned int nToCheck = Params().ToCheckBlockUpgradeMajority();\n     unsigned int nFound = 0;"
      },
      {
        "sha": "c572bee1ac8603595eb6d5efd3905a5350ed1a35",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48c6d43cd2a6d6cc70984260c8c5b307697449c6/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48c6d43cd2a6d6cc70984260c8c5b307697449c6/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=48c6d43cd2a6d6cc70984260c8c5b307697449c6",
        "patch": "@@ -333,16 +333,26 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n     return pblocktemplate.release();\n }\n \n-void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n+void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce, uint16_t& nNonce2)\n {\n-    // Update nExtraNonce\n+    // Update extra nonces: nNonce2 and nExtraNonce\n     static uint256 hashPrevBlock;\n     if (hashPrevBlock != pblock->hashPrevBlock)\n     {\n+        nNonce2 = 0;\n         nExtraNonce = 0;\n         hashPrevBlock = pblock->hashPrevBlock;\n     }\n-    ++nExtraNonce;\n+    ++nNonce2;\n+\t\n+    // Do not use bit 15 because old clients interpret this bit as the sign bit of nVersion\n+    if (nNonce2 == 0x8000u)\n+    { \n+        nNonce2 = 0;\n+    \t++nExtraNonce;\n+    }\n+\n+    pblock->nNonce2 = nNonce2;\n     unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2\n     CMutableTransaction txCoinbase(pblock->vtx[0]);\n     txCoinbase.vin[0].scriptSig = (CScript() << nHeight << CScriptNum(nExtraNonce)) + COINBASE_FLAGS;\n@@ -443,7 +453,7 @@ void static BitcoinMiner(CWallet *pwallet)\n     // Each thread has its own key and counter\n     CReserveKey reservekey(pwallet);\n     unsigned int nExtraNonce = 0;\n-\n+    uint16_t nNonce2 = 0;\n     try {\n         while (true) {\n             if (Params().MiningRequiresPeers()) {\n@@ -466,7 +476,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                 return;\n             }\n             CBlock *pblock = &pblocktemplate->block;\n-            IncrementExtraNonce(pblock, pindexPrev, nExtraNonce);\n+            IncrementExtraNonce(pblock, pindexPrev, nExtraNonce, nNonce2);\n \n             LogPrintf(\"Running BitcoinMiner with %u transactions in block (%u bytes)\\n\", pblock->vtx.size(),\n                 ::GetSerializeSize(*pblock, SER_NETWORK, PROTOCOL_VERSION));"
      },
      {
        "sha": "6cd352954a41c9082629f156ee7893079ed74416",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48c6d43cd2a6d6cc70984260c8c5b307697449c6/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48c6d43cd2a6d6cc70984260c8c5b307697449c6/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=48c6d43cd2a6d6cc70984260c8c5b307697449c6",
        "patch": "@@ -62,6 +62,7 @@ Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)\n     result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n     result.push_back(Pair(\"height\", blockindex->nHeight));\n     result.push_back(Pair(\"version\", block.nVersion));\n+    result.push_back(Pair(\"nonce2\", block.nNonce2));\n     result.push_back(Pair(\"merkleroot\", block.hashMerkleRoot.GetHex()));\n     Array txs;\n     BOOST_FOREACH(const CTransaction&tx, block.vtx)"
      },
      {
        "sha": "4dd23f925d7b33f6085004f7aa8c09e31e0e9ecd",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 112,
        "deletions": 0,
        "changes": 112,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48c6d43cd2a6d6cc70984260c8c5b307697449c6/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48c6d43cd2a6d6cc70984260c8c5b307697449c6/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=48c6d43cd2a6d6cc70984260c8c5b307697449c6",
        "patch": "@@ -261,3 +261,115 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n }\n \n BOOST_AUTO_TEST_SUITE_END()\n+\n+BOOST_AUTO_TEST_SUITE(nonce2_tests)\n+\n+static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+\n+void SetBlockDefaultAttributes(CBlock * pblock)\n+{\n+    pblock->nVersion = 2;\n+    pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+    CMutableTransaction txCoinbase(pblock->vtx[0]);\n+    txCoinbase.vin[0].scriptSig = (CScript() << chainActive.Height() << 0);\n+    txCoinbase.vout[0].scriptPubKey = CScript();\n+    pblock->vtx[0] = CTransaction(txCoinbase);\n+    pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+    pblock->nNonce = 0;\n+    pblock->nNonce2 = 0;\n+}\n+\n+void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n+{\n+    if ((chainActive.Height()+1) % Params().SubsidyHalvingInterval() == 0)\n+    {\n+        // The RegTest network has a low subsidy halving interval (150) so \n+        // we must recompute the coinbase subsidy if we reach the boundary.\n+        // The unittest network allows modifying this interval. We check it so this\n+        // test can work in any network.\n+\n+        // preserve parent hash\n+        uint256 prevParent = pblock->hashPrevBlock;\n+        delete pblocktemplate;\n+        pblocktemplate = CreateNewBlock(scriptPubKey);   \n+        pblock = &pblocktemplate->block; // pointer for convenience\n+        pblock->hashPrevBlock = prevParent;\n+    }\n+}\n+\n+void CheckBlockAddedToBestChainSuccessfully(CBlock *pblock)\n+{\n+    int PreviousHeight;\n+    CValidationState state;\n+    \n+    PreviousHeight = chainActive.Height();\n+    BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n+    BOOST_CHECK(state.IsValid());\n+    BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+    \n+    // Previous checks do not assure the current best chain has pblock as tip. It could be the case that a because\n+    // of a malfunction in the chain reorganization code, a reorganization causes an increase of the chain length, but with another tip.\n+    // So we also check that.\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash()==pblock->GetHash());\n+}\n+\n+\n+void nNonce2Test()\n+{\n+    ModifiableParams()->setSkipProofOfWorkCheck(true);\n+    \n+    CBlockTemplate *pblocktemplate;\n+\n+    LOCK(cs_main);\n+    \n+    // Simple block creation, nothing special yet:\n+    pblocktemplate = CreateNewBlock(scriptPubKey);   \n+   \n+    CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+\n+    // Create 10 v2 blocks with different nonces, just to check it still works\n+    for (int i=0;i<10;i++)\n+    {\n+        SetBlockDefaultAttributes(pblock);\n+        pblock->nNonce = i;\n+        CheckSubsidyHalving(pblocktemplate,pblock);\n+        CheckBlockAddedToBestChainSuccessfully(pblock);\n+        pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    }\n+    // Now we try to add a block v3, with a nNonce2 value of 0x1000\n+    SetBlockDefaultAttributes(pblock);\n+    pblock->nVersion = 3;\n+    pblock->nNonce2 = 0x1000;\n+    CheckSubsidyHalving(pblocktemplate,pblock);\n+    CheckBlockAddedToBestChainSuccessfully(pblock);\n+    pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    \n+    // Now we try to add a nNonce2 using the forbidden 15th bit, and it should be rejected\n+    SetBlockDefaultAttributes(pblock);\n+    pblock->nVersion = 3;\n+    pblock->nNonce2 = 0x8123;\n+    CValidationState state2;\n+    CheckSubsidyHalving(pblocktemplate,pblock);\n+    BOOST_CHECK(ProcessBlock(state2, NULL, pblock)==false);\n+    BOOST_CHECK(!state2.IsValid());\n+    BOOST_CHECK(state2.GetRejectReason()==\"bad-nNonce2\");\n+    \n+    // Last, the nVersion 15th bit should be usable, because nVersion has become unsigned (but uint16)\n+    SetBlockDefaultAttributes(pblock);\n+    pblock->nVersion = 0x8000;\n+    pblock->nNonce2 = 0;\n+    CValidationState state3;\n+    CheckSubsidyHalving(pblocktemplate,pblock);\n+    BOOST_CHECK(ProcessBlock(state3, NULL, pblock));\n+    BOOST_CHECK(state3.IsValid());\n+\n+    delete pblocktemplate;\n+    LogPrintf(\"nNonce2 testcase ends\\n\");   \n+}\n+\n+BOOST_AUTO_TEST_CASE(nNonce2)\n+{\n+    nNonce2Test();\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]