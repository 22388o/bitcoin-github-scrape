maaku,2014-10-18T21:44:50Z,"I'm not convinced of the necessity of this idea in general, but if it were to be implemented I would recommend serializing the nVersion field as a VarInt (Pieter Wuille's multi-byte serialization format) and using the remaining space of the 4 bytes as your extra nonce.\n\nThat would allow serialization of numbers up to 0x1020407f (slightly over 28 bits) before the 4-byte field is exhausted. For ve",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-59630732,59630732,
timohanke,2014-10-19T03:17:46Z,"@maaku If someone relies on the availability of the nonce2 space then he would not like to see the range change, for example from 3 bytes while the version is <0x80 to 2 bytes after that. For it to be usable it has to be the same size forever.\n\nI heard of ideas being thrown around of not regarding the version field as a counter anymore but using it as a bit vector (for flags of features) sometim",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-59637968,59637968,
sipa,2014-10-20T06:06:35Z,"If there were no downsides to this, it would be a clear improvement to need less frequent merkle tree updates to be sent to hashing hardware. But still, if you use ntime rolling in hardware, you just need 128 variations of the merkle tree roots known to the hardware per TiH/s to last indefinitely (until you want to update the block contents), so the benefit of this seems mostly convenience and not",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-59687231,59687231,
sipa,2014-10-20T18:58:09Z,"Sorry, I completely missed your link to the BIP and the explanation of why 15 bits in it.\n\nSo to comment: the nversion signedness is a problem, but in both directions: the reference client will start complaining if the version in headers exceeds with the software knows about - similarly, bip34 is triggered by nVersion >= 2 as you say, so you're really stuck in both directions and you need to pre",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-59820945,59820945,
timohanke,2014-10-20T20:35:19Z,"@sipa I'm not sure if I understand correctly what you want to say about the signedness of nVersion. So excuse if I am exactly repeating what you just said: We should have turned off the signedness of nVersion a long time ago, before bip34. It would not have been a fork at that time. Now, after bip34, turning the signedness off is a hardfork. If you wanted to do a hardfork then it doesn't matter if",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-59835192,59835192,
sipa,2014-10-20T23:11:20Z,"(written before you edited) @bcpki you're very right, and it's even worse than you say. Due to BIP34, getting rid of the sign in block headers' nVersion is a hard fork, as a minority of old nodes will reject blocks that set the high bit.\n\nThe suggestion of rolling version numbers is interesting, and it can be parallellized as well (allowing multiple softforking changes to be rolled out simultane",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-59855089,59855089,
jgarzik,2014-10-20T23:16:09Z,"It still sounds like ntime rolling can be employed, with no need for a hard fork.\n\nntime can go backwards, as well as forwards.\n",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-59855560,59855560,
timohanke,2014-10-20T23:55:33Z,@sipa 1GH/s on a CPU is quite a lot..\n\n@jgarzik ntime rolling can be employed and is the norm. The question is if that is desirable and how much is tolerable. If there is demand for 16 bits of rolling then that translates to 18h in ntime.\n,https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-59859091,59859091,
sipa,2014-10-21T00:00:26Z,"@bcpki Why do you use a CPU for updating work, if you're in the business of building hardware that exactly does sha256 hashing...?\n",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-59859482,59859482,
luke-jr,2014-10-21T01:09:54Z,"@sipa We don't really want the hardware doing the work updates. Existing attempts to do just that, besides severely limiting what we can do in a hardfork, also can be limiting on scalability if they cannot hash the generation transaction or merkle links... (although a FPGA could help, it won't get to 1 Gh/s...)\n",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-59865136,59865136,
timohanke,2014-10-21T01:27:15Z,"@sipa I tried to explain that in the bip. There is a difference between the sha256 of the blockheader which is highly specialized (1. it starts with a midstate, 2. it is based on 80 bytes, 3. you are not interested in all results, just the matching ones) and the sha256 in the merkle tree which is general purpose. Nobody is going to build special purpose hardware for the merkle tree hashing (which ",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-59866317,59866317,
sipa,2014-10-21T06:28:31Z,"Thanks for the clarification, I understand, and sorry that I didn't get that from the BIP proposal right away.\n\nIt still seems to me that at some point prehashing will hit scalability problems, and will require more customized setups/hardware - at which point this will not really affect things much anymore.\n",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-59884688,59884688,
rebroad,2014-10-21T09:27:52Z,"What are ""4096-transaction"" blocks?\nOn Oct 21, 2014 7:11 AM, ""Pieter Wuille"" notifications@github.com wrote:\n\n> (written before you edited) @bcpki https://github.com/bcpki you're very\n> right, and it's even worse than you say. Due to BIP34, getting rid of the\n> sign in block headers' nVersion is a hard fork, as a minority of old nodes\n> will reject blocks that set the high bit.\n> \n> The su",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-59901416,59901416,
timohanke,2014-10-21T18:54:31Z,"@rebroad a block with 4096 transactions in it, making the merkle tree 12 levels deep. An example of what would currently be considered a ""large"" block.\n",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-59978835,59978835,
timohanke,2014-10-27T02:23:13Z,Anybody knows what needs to change to make it pass the Travis CI build?\n,https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-60543850,60543850,
luke-jr,2014-10-27T05:09:51Z,"@bcpki Why are you trying to #include the test .cpp files like that? That's probably related to the compile failures, but I'm not sure how. I'd just add the nonce2_tests to the makefile, and skip the combining of the two with #includes\n",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-60550934,60550934,
sipa,2014-10-27T06:34:37Z,"test/blockchain_tests.cpp:13:32: fatal error: test/miner_tests.cpp: No such file or directory\n\nminer_tests.cpp is not listed in any Makefile anymore, so it's not included in any source package, I assume.\n",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-60554774,60554774,
timohanke,2014-10-27T15:29:23Z,@luke-jr The reason for the two #includes in one file is to define the order of execution. If I just add the two tests to the Makefile then their order of execution is not well-defined. But miner_tests has to execute first because it needs to start with version 1 blocks.\n,https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-60612101,60612101,
luke-jr,2014-10-27T23:26:04Z,".cpp files don't have an order of execution, they just define things... There is no guarantee AFAIK that the tests will run in the order defined in the files.\n",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-60687350,60687350,
timohanke,2014-10-28T01:12:57Z,"Re: ""There is no guarantee AFAIK that the tests will run in the order defined IN the files."" \nDo you mean the order in which test suites are defined inside one and the same .cpp file does not guarantee the order of execution? I would think it does.\n",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-60696399,60696399,
luke-jr,2014-10-28T01:26:58Z,"That is what I mean, correct. I would not think it does, since C++ does not usually have a defined order for initialisation (in practice, it's usually done pseudo-randomly).\n",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-60697361,60697361,
timohanke,2014-10-28T02:59:18Z,"https://groups.google.com/forum/#!topic/boost-list/MtcvrVP0uXg has the following quote:\n\n> In what order are executed automatically registered test suites and\n> test cases?\n> For the test units registered in different test files there is no order.\n> For the test units with the same test file the order will be ""natural""\n> from top to bottom.\n",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-60703506,60703506,
laanwj,2015-01-26T12:12:39Z,"In general, the unit tests shouldn't depend on their order of execution (they should not have side effects). If that's the case, that's a bug.\n",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-71451994,71451994,
laanwj,2015-02-04T13:20:11Z,"Just for info: Block version 3 has now been used by BIP66, that needs a bump.\n\nI'm going to close this pull for now, as it is not clear to me how and whether to move forward on it,  there appears to be no consensus to do this. \n",https://github.com/bitcoin/bitcoin/pull/5102#issuecomment-72852663,72852663,
Diapolo,2014-10-18T19:54:42Z,Nit: Alphabetical ordering.\n,https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19055957,19055957,src/Makefile.test.include
Diapolo,2014-10-18T19:55:25Z,"Nit: Indentation, also should this be `0x8000U`?\n",https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19055965,19055965,src/main.cpp
Diapolo,2014-10-18T19:57:02Z,Nit: Indentation.\n,https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19055978,19055978,src/miner.cpp
Diapolo,2014-10-18T19:57:35Z,Nit: Just MIT license.\n,https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19055981,19055981,src/test/nonce2_tests.cpp
Diapolo,2014-10-18T19:57:57Z,Nit: Can you add our license header here?\n,https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19055985,19055985,src/test/blockchain_tests.cpp
Diapolo,2014-10-18T19:58:35Z,Nit: Indentation of the whole function ^^.\n,https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19055992,19055992,src/test/nonce2_tests.cpp
Diapolo,2014-10-18T19:59:20Z,Nit: { after the if-clause.\n,https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19055996,19055996,src/test/nonce2_tests.cpp
timohanke,2014-10-18T20:46:29Z,"Ok, fixed.\n",https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19056231,19056231,src/Makefile.test.include
timohanke,2014-10-18T20:46:44Z,"Yes to both, fixed.\n",https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19056232,19056232,src/main.cpp
timohanke,2014-10-18T20:46:52Z,"Yes, fixed.\n",https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19056233,19056233,src/miner.cpp
timohanke,2014-10-18T20:47:09Z,Done.\n,https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19056234,19056234,src/test/blockchain_tests.cpp
timohanke,2014-10-18T20:47:20Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19056236,19056236,src/test/nonce2_tests.cpp
timohanke,2014-10-18T20:47:28Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19056238,19056238,src/test/nonce2_tests.cpp
timohanke,2014-10-18T20:53:37Z,"Sorry, why?\n",https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19056271,19056271,src/test/nonce2_tests.cpp
TheBlueMatt,2014-10-18T20:56:06Z,"Its all actually MIT, old headers need updated, but instead of doing it all at once, its being done per-header until we do a bigger breaking change.\n",https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19056283,19056283,src/test/nonce2_tests.cpp
Diapolo,2014-10-21T10:23:53Z,"Nit: Even if Tinyformat catches such things, you could update this to be `ver=%u` also :), as version is now unsigned.\n",https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19139779,19139779,src/core.cpp
Diapolo,2014-10-21T10:27:04Z,"Nit: Can you use **func** here too (see log message above), so that no function name needs to be hard coded in log messages.\n",https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19139903,19139903,src/main.cpp
Diapolo,2014-10-21T10:27:51Z,Should this also be `0x8000u`?\n,https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19139931,19139931,src/miner.cpp
timohanke,2014-10-21T18:49:17Z,Ok\n,https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19169995,19169995,src/core.cpp
timohanke,2014-10-21T18:49:32Z,Yes\n,https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19170015,19170015,src/miner.cpp
timohanke,2014-10-21T18:52:16Z,Ok\n,https://github.com/bitcoin/bitcoin/pull/5102#discussion_r19170229,19170229,src/main.cpp
