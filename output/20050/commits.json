[
  {
    "sha": "b419519dd2535ad1e4a62f7ea151cc22672057be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDE5NTE5ZGQyNTM1YWQxZTRhNjJmN2VhMTUxY2MyMjY3MjA1N2Jl",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-13T20:55:20Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T15:27:58Z"
      },
      "message": "test: Add new ChainTestingSetup and use it\n\nPreviously, the validation_chainstatemanager_tests test suite\ninstantiated its own duplicate ChainstateManager on which tests were\nperformed.\n\nThis wasn't a problem for the specific actions performed in\nthat suite. However, the existence of this duplicate ChainstateManager\nand the fact that many of our validation static functions reach for\ng_chainman, ::Chain(state|)Active means we may end up acting on two\ndifferent CChainStates should we write more extensive tests in the\nfuture.\n\nAdding a new ChainTestingSetup which performs all initialization\npreviously done by TestingSetup except:\n\n1. Mempool sanity check frequency setting\n2. ChainState initialization\n3. Genesis Activation\n4. {Ban,Conn,Peer}Man initialization\n\nMeans that we will no longer need to initialize a duplicate\nChainstateManger in order to test the initialization codepaths of\nCChainState and ChainstateManager. TestingSetup can also cleanly\ninherits from this new ChainTestingSetup.\n\nLastly, this change has the additional benefit of allowing for\nreview-only assertions meant to show correctness to work in future work\nde-globalizing g_chainman.",
      "tree": {
        "sha": "50111e224ad5faf77b54e5c81086c693b327da81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50111e224ad5faf77b54e5c81086c693b327da81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b419519dd2535ad1e4a62f7ea151cc22672057be",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl+IcgIACgkQDMUhUxl5\nkaXlfQ//fwuaqbVmAAdKf+IA3wwP1x8Kw1HufPrQc+79YoXL3JmViOIzsAEE3qsF\n9yfZmCwxl2rGk2J/Fd7Op3ONbzcni0mWDXgHmWAeVW5IA8brj+8Aw06d5+4VFWVZ\ngiWNiA5TWHZZQ1J/fS++Xzbna/vehaB+E4ROKx/5h004OpisxVwWXoWF1l3AmmG2\nLd61IqVdKVbNNb8EuohNpJhAzU6yIfDmUOQR6+D+j2zXjiOmbeR+Rr2W94P05zkq\n1sFtG3PJzNMyPwpStEX9r8bEGv6eIsWPoSODZS7tS6Bjb005gF8Su124dCBfzY/a\ni2zxxzWkBtVEwXluKDd7QSjcV9C60fsjH0FP++68oMJLN7VU6adF0xVksWzjjlEE\nVaOCblsS5YoGbLvjg8hlL8Ev5Ih1Cfi0mZ+okLAU0qa3ogc/UsgJyrmpXECpTUjm\njJVnbTYceklucsGpcsYKjgotKUNTMQx/pslp7uzUlNZ1FlP+ClbeVnRB4m3Piw4n\nOxiibs8bviRfEn5sIfO0I/5Jcpjbwz+Qhfkh3f2aOw9kWzM6646FxqmA7IJ1GmKj\n6TOgRSMxPnqepAD+BBKVmqthL9lz5advsfUMiOkZZ2xOotT9IQiURNQPIokLgiRm\nAzTFjNk86tumnyWl6aETlbWeMOpiXWJ+tABXy31szbQzjTxII5M=\n=xWA+\n-----END PGP SIGNATURE-----",
        "payload": "tree 50111e224ad5faf77b54e5c81086c693b327da81\nparent 711ddce94377aea38ce30fa93b3ee8ea1d96ba98\nauthor Carl Dong <contact@carldong.me> 1602622520 -0400\ncommitter Carl Dong <contact@carldong.me> 1602775678 -0400\n\ntest: Add new ChainTestingSetup and use it\n\nPreviously, the validation_chainstatemanager_tests test suite\ninstantiated its own duplicate ChainstateManager on which tests were\nperformed.\n\nThis wasn't a problem for the specific actions performed in\nthat suite. However, the existence of this duplicate ChainstateManager\nand the fact that many of our validation static functions reach for\ng_chainman, ::Chain(state|)Active means we may end up acting on two\ndifferent CChainStates should we write more extensive tests in the\nfuture.\n\nAdding a new ChainTestingSetup which performs all initialization\npreviously done by TestingSetup except:\n\n1. Mempool sanity check frequency setting\n2. ChainState initialization\n3. Genesis Activation\n4. {Ban,Conn,Peer}Man initialization\n\nMeans that we will no longer need to initialize a duplicate\nChainstateManger in order to test the initialization codepaths of\nCChainState and ChainstateManager. TestingSetup can also cleanly\ninherits from this new ChainTestingSetup.\n\nLastly, this change has the additional benefit of allowing for\nreview-only assertions meant to show correctness to work in future work\nde-globalizing g_chainman.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b419519dd2535ad1e4a62f7ea151cc22672057be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b419519dd2535ad1e4a62f7ea151cc22672057be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b419519dd2535ad1e4a62f7ea151cc22672057be/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "711ddce94377aea38ce30fa93b3ee8ea1d96ba98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/711ddce94377aea38ce30fa93b3ee8ea1d96ba98",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/711ddce94377aea38ce30fa93b3ee8ea1d96ba98"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 47,
      "deletions": 30
    },
    "files": [
      {
        "sha": "01bbc2ac2e316391e8b82f65dd06ebd4914f0c98",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 22,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b419519dd2535ad1e4a62f7ea151cc22672057be/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b419519dd2535ad1e4a62f7ea151cc22672057be/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=b419519dd2535ad1e4a62f7ea151cc22672057be",
        "patch": "@@ -124,10 +124,9 @@ BasicTestingSetup::~BasicTestingSetup()\n     ECC_Stop();\n }\n \n-TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const char*>& extra_args)\n+ChainTestingSetup::ChainTestingSetup(const std::string& chainName, const std::vector<const char*>& extra_args)\n     : BasicTestingSetup(chainName, extra_args)\n {\n-    const CChainParams& chainparams = Params();\n     // Ideally we'd move all the RPC tests to the functional testing framework\n     // instead of unit tests, but for now we need these here.\n     RegisterAllCoreRPCCommands(tableRPC);\n@@ -142,9 +141,39 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n \n     m_node.mempool = MakeUnique<CTxMemPool>(&::feeEstimator);\n-    m_node.mempool->setSanityCheck(1.0);\n \n     m_node.chainman = &::g_chainman;\n+\n+    // Start script-checking threads. Set g_parallel_script_checks to true so they are used.\n+    constexpr int script_check_threads = 2;\n+    for (int i = 0; i < script_check_threads; ++i) {\n+        threadGroup.create_thread([i]() { return ThreadScriptCheck(i); });\n+    }\n+    g_parallel_script_checks = true;\n+}\n+\n+ChainTestingSetup::~ChainTestingSetup() {\n+    if (m_node.scheduler) m_node.scheduler->stop();\n+    threadGroup.interrupt_all();\n+    threadGroup.join_all();\n+    GetMainSignals().FlushBackgroundCallbacks();\n+    GetMainSignals().UnregisterBackgroundSignalScheduler();\n+    m_node.args = nullptr;\n+    UnloadBlockIndex(m_node.mempool.get(), *m_node.chainman);\n+    m_node.mempool.reset();\n+    m_node.scheduler.reset();\n+    m_node.chainman->Reset();\n+    m_node.chainman = nullptr;\n+    pblocktree.reset();\n+}\n+\n+TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const char*>& extra_args)\n+    : ChainTestingSetup(chainName, extra_args)\n+{\n+    const CChainParams& chainparams = Params();\n+\n+    m_node.mempool->setSanityCheck(1.0);\n+\n     m_node.chainman->InitializeChainstate(*m_node.mempool);\n     ::ChainstateActive().InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n@@ -160,13 +189,6 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n         throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n     }\n \n-    // Start script-checking threads. Set g_parallel_script_checks to true so they are used.\n-    constexpr int script_check_threads = 2;\n-    for (int i = 0; i < script_check_threads; ++i) {\n-        threadGroup.create_thread([i]() { return ThreadScriptCheck(i); });\n-    }\n-    g_parallel_script_checks = true;\n-\n     m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n     m_node.peerman = MakeUnique<PeerManager>(chainparams, *m_node.connman, m_node.banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n@@ -179,20 +201,8 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n \n TestingSetup::~TestingSetup()\n {\n-    if (m_node.scheduler) m_node.scheduler->stop();\n-    threadGroup.interrupt_all();\n-    threadGroup.join_all();\n-    GetMainSignals().FlushBackgroundCallbacks();\n-    GetMainSignals().UnregisterBackgroundSignalScheduler();\n     m_node.connman.reset();\n     m_node.banman.reset();\n-    m_node.args = nullptr;\n-    UnloadBlockIndex(m_node.mempool.get(), *m_node.chainman);\n-    m_node.mempool.reset();\n-    m_node.scheduler.reset();\n-    m_node.chainman->Reset();\n-    m_node.chainman = nullptr;\n-    pblocktree.reset();\n }\n \n TestChain100Setup::TestChain100Setup()"
      },
      {
        "sha": "99adf2cb19b16f511f32dfd5ea402deafecbbd22",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b419519dd2535ad1e4a62f7ea151cc22672057be/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b419519dd2535ad1e4a62f7ea151cc22672057be/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=b419519dd2535ad1e4a62f7ea151cc22672057be",
        "patch": "@@ -82,12 +82,17 @@ struct BasicTestingSetup {\n     const fs::path m_path_root;\n };\n \n+struct ChainTestingSetup : public BasicTestingSetup {\n+    boost::thread_group threadGroup;\n+\n+    explicit ChainTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {});\n+    ~ChainTestingSetup();\n+};\n+\n /** Testing setup that configures a complete environment.\n  * Included are coins database, script check threads setup.\n  */\n-struct TestingSetup : public BasicTestingSetup {\n-    boost::thread_group threadGroup;\n-\n+struct TestingSetup : public ChainTestingSetup {\n     explicit TestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {});\n     ~TestingSetup();\n };"
      },
      {
        "sha": "3f2ee9b23211676ec59b331a1216db522cfd0929",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b419519dd2535ad1e4a62f7ea151cc22672057be/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b419519dd2535ad1e4a62f7ea151cc22672057be/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=b419519dd2535ad1e4a62f7ea151cc22672057be",
        "patch": "@@ -15,15 +15,16 @@\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, TestingSetup)\n+BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, ChainTestingSetup)\n \n //! Basic tests for ChainstateManager.\n //!\n //! First create a legacy (IBD) chainstate, then create a snapshot chainstate.\n BOOST_AUTO_TEST_CASE(chainstatemanager)\n {\n-    ChainstateManager manager;\n-    CTxMemPool mempool;\n+    ChainstateManager& manager = *m_node.chainman;\n+    CTxMemPool& mempool = *m_node.mempool;\n+\n     std::vector<CChainState*> chainstates;\n     const CChainParams& chainparams = Params();\n \n@@ -104,8 +105,9 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\n //! Test rebalancing the caches associated with each chainstate.\n BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n {\n-    ChainstateManager manager;\n-    CTxMemPool mempool;\n+    ChainstateManager& manager = *m_node.chainman;\n+    CTxMemPool& mempool = *m_node.mempool;\n+\n     size_t max_cache = 10000;\n     manager.m_total_coinsdb_cache = max_cache;\n     manager.m_total_coinstip_cache = max_cache;"
      }
    ]
  },
  {
    "sha": "ef1b08c0738da2248fbddc0190320f5ed34b7f44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjFiMDhjMDczOGRhMjI0OGZiZGRjMDE5MDMyMGY1ZWQzNGI3ZjQ0",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-06T21:02:30Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T16:00:12Z"
      },
      "message": "bench: [FIX] Use existing NodeContext in WalletBalance benchmarks",
      "tree": {
        "sha": "031e85519e8a46a45a5ddb6520ce7ee475c15ce0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/031e85519e8a46a45a5ddb6520ce7ee475c15ce0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef1b08c0738da2248fbddc0190320f5ed34b7f44",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl+IcgwACgkQDMUhUxl5\nkaWqlRAAoZEJmGm78UjimCzPPyM0RA9KW33g8IZmaxJ/C8Hg2e2G/S/fP56Yer8D\nAAID21nIlzizWJ4/jcol0dw5VvUkEztc2lGVcZbHIg9Z/OYIIPLPoUJoy+8AHkwd\na0yGfSm7Ur4q8ohQOQVDBtxMaNJxKo5mGonBIAU72WbrlyK5aFMQmRtKPszjt5Ku\ny6fMMU3/HuxAWuqNy0PGwSsiGCWsCMhzMG3ASE2CIduSBJxFf5f2Sfm22FORjmHD\n2IOX/FU880OaNqaWaG/yLPZLkBKYAC22xCnXlXF9GDWK7Yu3PvKyAsWRryD0hPjn\nTY35sGHHMd8Sy/boszm74qGyT97SHvt2YxcSCMceLEUQQjkVghY6WHEh697ZpbCa\nQhVowQQy4AX6TlVpQ9GrV/PH9LG5ZnIKzXCkvufIgl0dzzpbsKkUdyKCCMf7oeDT\nIVeXzeuXZwLchI8Zv6aScoPP7rGWFeLGvSY7BzCaUgCbvUsp3oiXPycKnBEv31do\nWd+wZCMAjV1ctXrYMUiCwWVQGQ0dR3B3ZRj5j0X7ny+h0Y6dxJynp0NeZ6z6wNKW\npwjm/siw5CUoXs1m6GApHndkOJz54zZDM2BgING7xM7dTOM44dWMnYxuAQXJjAIj\nJ+IcXfhAZkgS6+RWe6Ew/BgmJONsePmiVlggHPt9IYldfVB2TU4=\n=RZbZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 031e85519e8a46a45a5ddb6520ce7ee475c15ce0\nparent b419519dd2535ad1e4a62f7ea151cc22672057be\nauthor Carl Dong <contact@carldong.me> 1602018150 -0400\ncommitter Carl Dong <contact@carldong.me> 1602777612 -0400\n\nbench: [FIX] Use existing NodeContext in WalletBalance benchmarks\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef1b08c0738da2248fbddc0190320f5ed34b7f44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef1b08c0738da2248fbddc0190320f5ed34b7f44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef1b08c0738da2248fbddc0190320f5ed34b7f44/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b419519dd2535ad1e4a62f7ea151cc22672057be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b419519dd2535ad1e4a62f7ea151cc22672057be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b419519dd2535ad1e4a62f7ea151cc22672057be"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d56f1bc011cf3a84439e4630941a2c01f22a5529",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef1b08c0738da2248fbddc0190320f5ed34b7f44/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef1b08c0738da2248fbddc0190320f5ed34b7f44/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=ef1b08c0738da2248fbddc0190320f5ed34b7f44",
        "patch": "@@ -24,8 +24,7 @@ static void WalletBalance(benchmark::Bench& bench, const bool set_dirty, const b\n \n     const auto& ADDRESS_WATCHONLY = ADDRESS_BCRT1_UNSPENDABLE;\n \n-    NodeContext node;\n-    std::unique_ptr<interfaces::Chain> chain = interfaces::MakeChain(node);\n+    std::unique_ptr<interfaces::Chain> chain = interfaces::MakeChain(test_setup.m_node);\n     CWallet wallet{chain.get(), \"\", CreateMockWalletDatabase()};\n     {\n         wallet.SetupLegacyScriptPubKeyMan();"
      }
    ]
  },
  {
    "sha": "a9539e725bb109fb8d98970223fa8eff6a582b4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTUzOWU3MjViYjEwOWZiOGQ5ODk3MDIyM2ZhOGVmZjZhNTgyYjRh",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-28T22:37:50Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T16:00:13Z"
      },
      "message": "wallet/test: [FIX] Use existing NodeContext in wallet_tests",
      "tree": {
        "sha": "a7c8a30e384a2fb198774669bc4ca1a81b7554df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7c8a30e384a2fb198774669bc4ca1a81b7554df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9539e725bb109fb8d98970223fa8eff6a582b4a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl+Icg0ACgkQDMUhUxl5\nkaWxJQ//YdqXSr/iIe41fTtzQ0o1mdyAGKRF/dAhB5ga5L95MeXBdJA+c3LlNru7\nxof6udETj58Nk7vJN8cjjTvi9oUQgVIXlYR4VKkQgqPRsmHvaXbf8WmHxUnm3VAm\nHLhAWb3FQApeL/noS3R4lhPIKgZKAZs/XoCiPNncyFj3odl0kJRk4jveKWaNVarH\nHG63VGYDhVv5UTxLCIicBHpq+evsYvn7+JNowUsKhTrOzigbvY8evyExH7MugeEM\nq5Dl8eUd/msTmrdKyF0ozZJkt3CobRHYJN5MUl6rBuR+9UxtEkqVQ0isnbSF/gyf\ng7hz4Oq5c95FfqYIwKlsaBqEyr0JULHlg/aFlLOCxeCYpQgBtIUcN3gge1YXVF23\nGbZD/h/CJZ02puzkQRLYbB/qmae4UuWgcy7x3Wz/Isd7IzTYd2DWxd/kiTKXZEqW\nEFXSOr780yKe67QiS9cBxmTq/1A60/PRjkoT3DInw6ANI3OMI0I5NHs8eHDG1dVZ\n+/Ncm50L8tp2QOmzeAdB+G1w2gtPNbGUSxy1eaVvN7vdADwBghk3vyRf/OQAc0A4\nYkt57y8qB+UMRntBB5k5rU0nzo+5nSlnBWQ+isc3XgSkx1wmkE7+ZsAC9vol1l7d\nQM1iQE9VZmjmpM3BXb6xSFf6jWwrr27QVLtc94nbWBqzYo9p2nE=\n=Qejs\n-----END PGP SIGNATURE-----",
        "payload": "tree a7c8a30e384a2fb198774669bc4ca1a81b7554df\nparent ef1b08c0738da2248fbddc0190320f5ed34b7f44\nauthor Carl Dong <contact@carldong.me> 1598654270 -0400\ncommitter Carl Dong <contact@carldong.me> 1602777613 -0400\n\nwallet/test: [FIX] Use existing NodeContext in wallet_tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9539e725bb109fb8d98970223fa8eff6a582b4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9539e725bb109fb8d98970223fa8eff6a582b4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9539e725bb109fb8d98970223fa8eff6a582b4a/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef1b08c0738da2248fbddc0190320f5ed34b7f44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef1b08c0738da2248fbddc0190320f5ed34b7f44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef1b08c0738da2248fbddc0190320f5ed34b7f44"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 5,
      "deletions": 10
    },
    "files": [
      {
        "sha": "85e137a2004c86fb7d02d509636a461a3d66ace3",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 10,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9539e725bb109fb8d98970223fa8eff6a582b4a/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9539e725bb109fb8d98970223fa8eff6a582b4a/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=a9539e725bb109fb8d98970223fa8eff6a582b4a",
        "patch": "@@ -83,8 +83,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n     CBlockIndex* newTip = ::ChainActive().Tip();\n \n-    NodeContext node;\n-    auto chain = interfaces::MakeChain(node);\n+    auto chain = interfaces::MakeChain(m_node);\n \n     // Verify ScanForWalletTransactions fails to read an unknown start block.\n     {\n@@ -183,8 +182,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n     CBlockIndex* newTip = ::ChainActive().Tip();\n \n-    NodeContext node;\n-    auto chain = interfaces::MakeChain(node);\n+    auto chain = interfaces::MakeChain(m_node);\n \n     // Prune the older block file.\n     {\n@@ -255,8 +253,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     SetMockTime(KEY_TIME);\n     m_coinbase_txns.emplace_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n \n-    NodeContext node;\n-    auto chain = interfaces::MakeChain(node);\n+    auto chain = interfaces::MakeChain(m_node);\n \n     std::string backup_file = (GetDataDir() / \"wallet.backup\").string();\n \n@@ -317,8 +314,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n // debit functions.\n BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n {\n-    NodeContext node;\n-    auto chain = interfaces::MakeChain(node);\n+    auto chain = interfaces::MakeChain(m_node);\n \n     CWallet wallet(chain.get(), \"\", CreateDummyWalletDatabase());\n     auto spk_man = wallet.GetOrCreateLegacyScriptPubKeyMan();\n@@ -612,8 +608,7 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n \n BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n {\n-    NodeContext node;\n-    auto chain = interfaces::MakeChain(node);\n+    auto chain = interfaces::MakeChain(m_node);\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), \"\", CreateDummyWalletDatabase());\n     wallet->SetupLegacyScriptPubKeyMan();\n     wallet->SetMinVersion(FEATURE_LATEST);"
      }
    ]
  },
  {
    "sha": "b927d6891eb21d364e92a6e4363836e3e9849a24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTI3ZDY4OTFlYjIxZDM2NGU5MmE2ZTQzNjM4MzZlM2U5ODQ5YTI0",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-28T20:27:32Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T16:00:14Z"
      },
      "message": "qt/test: [FIX] Add forgotten Context setting in RPCNestedTests",
      "tree": {
        "sha": "d516dfdbe4a6bfaa7c63ea5a6b20f962d88128b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d516dfdbe4a6bfaa7c63ea5a6b20f962d88128b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b927d6891eb21d364e92a6e4363836e3e9849a24",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl+Icg4ACgkQDMUhUxl5\nkaUWlA/9F/5OefQu7wWdY3HPZpmu+WS69YW33P9qXkb+nJgKHPieRyExTFK7DOce\nA0Ufb9QVeYeTmoi6iBRuq9vTS62glC+4Rs1fxZ1qUxnbVp9/ZF2GgMnoKAWod/xv\nFMfPl29oDUroRL1W7M9BkWnVLl0y/BopT2RNbmSBZHNn7MKcugzmJR5YpcXkEj90\nZQKhZVRbg4NfPKwBWzalTfiBoDZxzQ8flnOT7Nd1Uff4mqNZLzmXJS8MawxbSq56\nRzCX0712SOMvwig/PuCcQ9lG+ljKJb6w/2PWVccInpT7WcFRU6qlAVQRq5qD9NYR\nBO++CqfrG6QQk+YTRFajYnaWZOaj4X3CDSr64wnue/AxHz5/XAOsmtSEAxWOoLW0\nyfeHhIsPO75NRkRacO/xJN+a4PZX2xKTo5s5OdqjlSciuWREdPLgyNHUMAVFP/fF\nGuSJiD2pdxUqvKYIEQ7q7OhgAMQ2CF+vp/CwmsMo/r8TEgUEHcknIFPqWFQTJDGj\nScT0wQA+M/EMLlPnvAeQIOJhHVAwRKsY4sXxxLnt6+FUhF5AOqI9Idn+SpFQdROu\n/ybcnIT7l6NJtDi6RaFboTMge0YizAZ5Q2aTwl3vEzbmMuEXzPWXgybVgHdcIP09\nj/Fs8oJKwX2ZV/C/6KYipq+29KKntmexMyjEJwpy7rUr1Ajpias=\n=tr2y\n-----END PGP SIGNATURE-----",
        "payload": "tree d516dfdbe4a6bfaa7c63ea5a6b20f962d88128b9\nparent a9539e725bb109fb8d98970223fa8eff6a582b4a\nauthor Carl Dong <contact@carldong.me> 1598646452 -0400\ncommitter Carl Dong <contact@carldong.me> 1602777614 -0400\n\nqt/test: [FIX] Add forgotten Context setting in RPCNestedTests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b927d6891eb21d364e92a6e4363836e3e9849a24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b927d6891eb21d364e92a6e4363836e3e9849a24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b927d6891eb21d364e92a6e4363836e3e9849a24/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9539e725bb109fb8d98970223fa8eff6a582b4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9539e725bb109fb8d98970223fa8eff6a582b4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9539e725bb109fb8d98970223fa8eff6a582b4a"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 32,
      "deletions": 32
    },
    "files": [
      {
        "sha": "e22c1baff3ac218d9d5d929c8034a7db1c86f0a9",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b927d6891eb21d364e92a6e4363836e3e9849a24/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b927d6891eb21d364e92a6e4363836e3e9849a24/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=b927d6891eb21d364e92a6e4363836e3e9849a24",
        "patch": "@@ -34,41 +34,41 @@ void RPCNestedTests::rpcNestedTests()\n     tableRPC.appendCommand(\"rpcNestedTest\", &vRPCCommands[0]);\n \n     TestingSetup test;\n+    m_node.setContext(&test.m_node);\n \n     if (RPCIsInWarmup(nullptr)) SetRPCWarmupFinished();\n \n     std::string result;\n     std::string result2;\n     std::string filtered;\n-    interfaces::Node* node = &m_node;\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo()[chain]\", &filtered); //simple result filtering with path\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo()[chain]\", &filtered); //simple result filtering with path\n     QVERIFY(result==\"main\");\n     QVERIFY(filtered == \"getblockchaininfo()[chain]\");\n \n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblock(getbestblockhash())\"); //simple 2 level nesting\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblock(getblock(getbestblockhash())[hash], true)\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblock(getbestblockhash())\"); //simple 2 level nesting\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblock(getblock(getbestblockhash())[hash], true)\");\n \n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblock( getblock( getblock(getbestblockhash())[hash] )[hash], true)\"); //4 level nesting with whitespace, filtering path and boolean parameter\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblock( getblock( getblock(getbestblockhash())[hash] )[hash], true)\"); //4 level nesting with whitespace, filtering path and boolean parameter\n \n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo\");\n     QVERIFY(result.substr(0,1) == \"{\");\n \n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo()\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo()\");\n     QVERIFY(result.substr(0,1) == \"{\");\n \n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo \"); //whitespace at the end will be tolerated\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo \"); //whitespace at the end will be tolerated\n     QVERIFY(result.substr(0,1) == \"{\");\n \n-    (RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo()[\\\"chain\\\"]\")); //Quote path identifier are allowed, but look after a child containing the quotes in the key\n+    (RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo()[\\\"chain\\\"]\")); //Quote path identifier are allowed, but look after a child containing the quotes in the key\n     QVERIFY(result == \"null\");\n \n-    (RPCConsole::RPCExecuteCommandLine(*node, result, \"createrawtransaction [] {} 0\")); //parameter not in brackets are allowed\n-    (RPCConsole::RPCExecuteCommandLine(*node, result2, \"createrawtransaction([],{},0)\")); //parameter in brackets are allowed\n+    (RPCConsole::RPCExecuteCommandLine(m_node, result, \"createrawtransaction [] {} 0\")); //parameter not in brackets are allowed\n+    (RPCConsole::RPCExecuteCommandLine(m_node, result2, \"createrawtransaction([],{},0)\")); //parameter in brackets are allowed\n     QVERIFY(result == result2);\n-    (RPCConsole::RPCExecuteCommandLine(*node, result2, \"createrawtransaction( [],  {} , 0   )\")); //whitespace between parameters is allowed\n+    (RPCConsole::RPCExecuteCommandLine(m_node, result2, \"createrawtransaction( [],  {} , 0   )\")); //whitespace between parameters is allowed\n     QVERIFY(result == result2);\n \n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"getblock(getbestblockhash())[tx][0]\", &filtered);\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblock(getbestblockhash())[tx][0]\", &filtered);\n     QVERIFY(result == \"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\");\n     QVERIFY(filtered == \"getblock(getbestblockhash())[tx][0]\");\n \n@@ -93,35 +93,35 @@ void RPCNestedTests::rpcNestedTests()\n     RPCConsole::RPCParseCommandLine(nullptr, result, \"help(importprivkey(abc), walletpassphrase(def))\", false, &filtered);\n     QVERIFY(filtered == \"help(importprivkey(\u2026), walletpassphrase(\u2026))\");\n \n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest\");\n     QVERIFY(result == \"[]\");\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest ''\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest ''\");\n     QVERIFY(result == \"[\\\"\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest \\\"\\\"\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest \\\"\\\"\");\n     QVERIFY(result == \"[\\\"\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest '' abc\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest '' abc\");\n     QVERIFY(result == \"[\\\"\\\",\\\"abc\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest abc '' abc\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest abc '' abc\");\n     QVERIFY(result == \"[\\\"abc\\\",\\\"\\\",\\\"abc\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest abc  abc\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest abc  abc\");\n     QVERIFY(result == \"[\\\"abc\\\",\\\"abc\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest abc\\t\\tabc\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest abc\\t\\tabc\");\n     QVERIFY(result == \"[\\\"abc\\\",\\\"abc\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest(abc )\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest(abc )\");\n     QVERIFY(result == \"[\\\"abc\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest( abc )\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest( abc )\");\n     QVERIFY(result == \"[\\\"abc\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest(   abc   ,   cba )\");\n+    RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest(   abc   ,   cba )\");\n     QVERIFY(result == \"[\\\"abc\\\",\\\"cba\\\"]\");\n \n     // do the QVERIFY_EXCEPTION_THROWN checks only with Qt5.3 and higher (QVERIFY_EXCEPTION_THROWN was introduced in Qt5.3)\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo() .\\n\"), std::runtime_error); //invalid syntax\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo() getblockchaininfo()\"), std::runtime_error); //invalid syntax\n-    (RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo(\")); //tolerate non closing brackets if we have no arguments\n-    (RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo()()()\")); //tolerate non command brackts\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo(True)\"), UniValue); //invalid argument\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"a(getblockchaininfo(True))\"), UniValue); //method not found\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest abc,,abc\"), std::runtime_error); //don't tollerate empty arguments when using ,\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest(abc,,abc)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(*node, result, \"rpcNestedTest(abc,,)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo() .\\n\"), std::runtime_error); //invalid syntax\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo() getblockchaininfo()\"), std::runtime_error); //invalid syntax\n+    (RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo(\")); //tolerate non closing brackets if we have no arguments\n+    (RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo()()()\")); //tolerate non command brackts\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo(True)\"), UniValue); //invalid argument\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"a(getblockchaininfo(True))\"), UniValue); //method not found\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest abc,,abc\"), std::runtime_error); //don't tollerate empty arguments when using ,\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest(abc,,abc)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(m_node, result, \"rpcNestedTest(abc,,)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n }"
      }
    ]
  },
  {
    "sha": "8615dbd1250c2dddec2f54bf80e2a1b7013bc871",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjE1ZGJkMTI1MGMyZGRkZWMyZjU0YmY4MGUyYTFiNzAxM2JjODcx",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-25T21:27:05Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T16:10:00Z"
      },
      "message": "validation: Move LookupBlockIndex to BlockManager\n\n[META] This commit should be followed up by a scripted-diff commit which\n       fixes calls to LookupBlockIndex tree-wide.\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.\n\nLookupBlockIndex only acts on BlockManager.",
      "tree": {
        "sha": "87ded4c196496bb25dd03affcc7c24781a113f96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87ded4c196496bb25dd03affcc7c24781a113f96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8615dbd1250c2dddec2f54bf80e2a1b7013bc871",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl+IdFkACgkQDMUhUxl5\nkaVOHg/9FQ4Bx1pLmXKEtleBbFoT+DjUA02BvclDUGfvBVsJNi0F6xQX9FvjUms0\nQsTRWRIjpUez/yGsE2WmlWNqFJNYSbJwbzPRlSq9A5AyJYqaP+hhm4s1BFZpYCWq\nSfqS59ZY204rKPSPpPgyJGbuamD5Bw3qmIdzA17hvvSmRkKqT/TSfnmwyLALuEmm\nMoM/ntHRbMvZNFfIPy6jeXFU5SuD7c3PMI0+5pHqw7ny37fXD6tchmr+mw7ZcS+U\nubRfExzjbfivOSP/m24aQG4LiHdTiDiZ1slIeGK5ukZGiPX7LriyKbpWPUrAXqN2\nvB5KVHX2FT3CcaYckyWW7avpjlNpeYhEnVsOVZCb1JEBVi0id6a5McJlm6rli9X+\nLmTe103cOjahH7YYuLWvOMW84GwwlasM1jzopi2ggE2z/6knSMiUP5m4gLQdhsLk\nx7BbHZ1hFkml+CxQXdZDlOoCjM+HaLv25x/dXHwY+zTRBJxYsaCT6b8Zl61gIHeP\nPk0TBWfqW9Nrnn35+Z+AYkxviUPIEd2pYM+3xjcLAPNXkf1pzSfXP8zP8/+c6rvX\nbBthSBz8nRzEiOhQpd8mjz7bkuZZGHmMl1UGfwXaaRnptdJ6ANR2vAUCwAB4jZZS\nHBT1X5wjWI+F/E9ZpCI5nDEg15CHSCo494XJjmBAnhw+5O7YrbQ=\n=QuX6\n-----END PGP SIGNATURE-----",
        "payload": "tree 87ded4c196496bb25dd03affcc7c24781a113f96\nparent b927d6891eb21d364e92a6e4363836e3e9849a24\nauthor Carl Dong <contact@carldong.me> 1598390825 -0400\ncommitter Carl Dong <contact@carldong.me> 1602778200 -0400\n\nvalidation: Move LookupBlockIndex to BlockManager\n\n[META] This commit should be followed up by a scripted-diff commit which\n       fixes calls to LookupBlockIndex tree-wide.\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.\n\nLookupBlockIndex only acts on BlockManager.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8615dbd1250c2dddec2f54bf80e2a1b7013bc871",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8615dbd1250c2dddec2f54bf80e2a1b7013bc871",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8615dbd1250c2dddec2f54bf80e2a1b7013bc871/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b927d6891eb21d364e92a6e4363836e3e9849a24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b927d6891eb21d364e92a6e4363836e3e9849a24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b927d6891eb21d364e92a6e4363836e3e9849a24"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 12,
      "deletions": 11
    },
    "files": [
      {
        "sha": "e57960c016e530b385d36b51a1b8dc05f4f347e1",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8615dbd1250c2dddec2f54bf80e2a1b7013bc871/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8615dbd1250c2dddec2f54bf80e2a1b7013bc871/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8615dbd1250c2dddec2f54bf80e2a1b7013bc871",
        "patch": "@@ -170,11 +170,12 @@ namespace {\n     std::set<int> setDirtyFileInfo;\n } // anon namespace\n \n-CBlockIndex* LookupBlockIndex(const uint256& hash)\n+CBlockIndex* BlockManager::LookupBlockIndex(const uint256& hash)\n {\n     AssertLockHeld(cs_main);\n-    BlockMap::const_iterator it = g_chainman.BlockIndex().find(hash);\n-    return it == g_chainman.BlockIndex().end() ? nullptr : it->second;\n+    assert(std::addressof(g_chainman.BlockIndex()) == std::addressof(m_block_index));\n+    BlockMap::const_iterator it = m_block_index.find(hash);\n+    return it == m_block_index.end() ? nullptr : it->second;\n }\n \n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n@@ -184,7 +185,7 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n     // Find the latest block common to locator and chain - we expect that\n     // locator.vHave is sorted descending by height.\n     for (const uint256& hash : locator.vHave) {\n-        CBlockIndex* pindex = LookupBlockIndex(hash);\n+        CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         if (pindex) {\n             if (chain.Contains(pindex))\n                 return pindex;\n@@ -1468,7 +1469,7 @@ bool CScriptCheck::operator()() {\n int GetSpendHeight(const CCoinsViewCache& inputs)\n {\n     LOCK(cs_main);\n-    CBlockIndex* pindexPrev = LookupBlockIndex(inputs.GetBestBlock());\n+    CBlockIndex* pindexPrev = g_chainman.m_blockman.LookupBlockIndex(inputs.GetBestBlock());\n     return pindexPrev->nHeight + 1;\n }\n \n@@ -3474,7 +3475,7 @@ static CBlockIndex* GetLastCheckpoint(const CCheckpointData& data) EXCLUSIVE_LOC\n     for (const MapCheckpoints::value_type& i : reverse_iterate(checkpoints))\n     {\n         const uint256& hash = i.second;\n-        CBlockIndex* pindex = LookupBlockIndex(hash);\n+        CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         if (pindex) {\n             return pindex;\n         }\n@@ -4237,7 +4238,7 @@ bool CChainState::LoadChainTip(const CChainParams& chainparams)\n     }\n \n     // Load pointer to end of best chain\n-    CBlockIndex* pindex = LookupBlockIndex(coins_cache.GetBestBlock());\n+    CBlockIndex* pindex = m_blockman.LookupBlockIndex(coins_cache.GetBestBlock());\n     if (!pindex) {\n         return false;\n     }\n@@ -4716,7 +4717,7 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                 {\n                     LOCK(cs_main);\n                     // detect out of order blocks, and store them for later\n-                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !LookupBlockIndex(block.hashPrevBlock)) {\n+                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock)) {\n                         LogPrint(BCLog::REINDEX, \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n                                 block.hashPrevBlock.ToString());\n                         if (dbp)\n@@ -4725,7 +4726,7 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                     }\n \n                     // process in case the block isn't known yet\n-                    CBlockIndex* pindex = LookupBlockIndex(hash);\n+                    CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n                     if (!pindex || (pindex->nStatus & BLOCK_HAVE_DATA) == 0) {\n                       BlockValidationState state;\n                       if (::ChainstateActive().AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr)) {"
      },
      {
        "sha": "7cf623f0797c7dc9fcb9a239c85b02e18d3a395b",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8615dbd1250c2dddec2f54bf80e2a1b7013bc871/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8615dbd1250c2dddec2f54bf80e2a1b7013bc871/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=8615dbd1250c2dddec2f54bf80e2a1b7013bc871",
        "patch": "@@ -318,8 +318,6 @@ class CVerifyDB {\n     bool VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n };\n \n-CBlockIndex* LookupBlockIndex(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-\n /** Find the last common block between the parameter chain and a locator. */\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n@@ -440,6 +438,8 @@ class BlockManager\n         const CChainParams& chainparams,\n         CBlockIndex** ppindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    CBlockIndex* LookupBlockIndex(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n     ~BlockManager() {\n         Unload();\n     }"
      }
    ]
  },
  {
    "sha": "7ef17f7a52fcce19fa9380ca876310b14ae3c803",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWYxN2Y3YTUyZmNjZTE5ZmE5MzgwY2E4NzYzMTBiMTRhZTNjODAz",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-25T21:39:57Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T16:10:01Z"
      },
      "message": "scripted-diff: Use BlockManager::LookupBlockIndex\n\n[META] In a previous commit, we moved ::LookupBlockIndex to become a\n       member function of BlockManager. This commit is split out from\n       that one since it can be expressed nicely as a scripted-diff.\n\n-BEGIN VERIFY SCRIPT-\nfind_regex='LookupBlockIndex' \\\n    && git grep -l -E \"$find_regex\" -- src \\\n        | grep -v '^src/validation\\.\\(cpp\\|h\\)$' \\\n        | xargs sed -i -E \"s@${find_regex}@g_chainman.m_blockman.LookupBlockIndex@g\"\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "be74d3cbd5f7edb1503a4e681f6bacacfb340325",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be74d3cbd5f7edb1503a4e681f6bacacfb340325"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ef17f7a52fcce19fa9380ca876310b14ae3c803",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl+IdFoACgkQDMUhUxl5\nkaXA5hAAs+hBID2UOdzVZVmv26VH3CnHb2wqaK43W1N721chSwzkgsKI1OcSjOr8\nbpTDc6YEPXVNyKUwuvtinig0923Uf2RPvMKl2FB3t5sfdjexNGXGbQbAvStpxXYG\nVZnfoYFIVx8gZvQ5DDxFp+Ipce2VKIgkLhiY1zeRiPdS/VsWdaAvXUSzRgLENzDy\nYoUz+nNHal5F8vr8STjaprSGaEyo1HBBlF+zlJHamOW3JLRPFMAiorrd7eowTfi/\nv+uUpUe0xuCtWLd11kdSgBS5Ry6dm+8r3tApbmqst2K671J7ajJ5B6lOoYDHyqMp\nnGS1jvQICPc1gVO43h1/kckJgDi650QclpLX0oNICqnrTRUtkkIsGxMeqLYaf8kR\nrbuHk7ik4tE5cexhETdgTb20qIp9wQ9idfhG0xZ35zgnalmGCHZzB/op4CZ/SQHW\nyMg9cS2JTtKT2/MHNzosomWsWIBldPlKNgPve7lv88yB7enFm7qxUtVQ3R8nFrej\nnP9psQzODGWuKWpvmyJtbKy8YpbItD7HC4BzvKyoQLqFrvwC2ueUctnM68XKkKxW\n7lnUoYFLv200llfxzeyR/QDkdne0OHrrMCNt8H8vpsXv+RGYo+LBUmOgOzu5mFvj\nSYKsIaIZvBy8N82MGDMAUx11hvWryj5pqsUUzkeFj5lADfStMxk=\n=HRLU\n-----END PGP SIGNATURE-----",
        "payload": "tree be74d3cbd5f7edb1503a4e681f6bacacfb340325\nparent 8615dbd1250c2dddec2f54bf80e2a1b7013bc871\nauthor Carl Dong <contact@carldong.me> 1598391597 -0400\ncommitter Carl Dong <contact@carldong.me> 1602778201 -0400\n\nscripted-diff: Use BlockManager::LookupBlockIndex\n\n[META] In a previous commit, we moved ::LookupBlockIndex to become a\n       member function of BlockManager. This commit is split out from\n       that one since it can be expressed nicely as a scripted-diff.\n\n-BEGIN VERIFY SCRIPT-\nfind_regex='LookupBlockIndex' \\\n    && git grep -l -E \"$find_regex\" -- src \\\n        | grep -v '^src/validation\\.\\(cpp\\|h\\)$' \\\n        | xargs sed -i -E \"s@${find_regex}@g_chainman.m_blockman.LookupBlockIndex@g\"\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ef17f7a52fcce19fa9380ca876310b14ae3c803",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ef17f7a52fcce19fa9380ca876310b14ae3c803",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ef17f7a52fcce19fa9380ca876310b14ae3c803/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8615dbd1250c2dddec2f54bf80e2a1b7013bc871",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8615dbd1250c2dddec2f54bf80e2a1b7013bc871",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8615dbd1250c2dddec2f54bf80e2a1b7013bc871"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 56,
      "deletions": 56
    },
    "files": [
      {
        "sha": "505c9c45b7182777fd3bbf012c80f540ab02f58d",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=7ef17f7a52fcce19fa9380ca876310b14ae3c803",
        "patch": "@@ -239,7 +239,7 @@ void BaseIndex::ChainStateFlushed(const CBlockLocator& locator)\n     const CBlockIndex* locator_tip_index;\n     {\n         LOCK(cs_main);\n-        locator_tip_index = LookupBlockIndex(locator_tip_hash);\n+        locator_tip_index = g_chainman.m_blockman.LookupBlockIndex(locator_tip_hash);\n     }\n \n     if (!locator_tip_index) {"
      },
      {
        "sha": "907a1a8436c36fce541436a099b119df6e4502a0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7ef17f7a52fcce19fa9380ca876310b14ae3c803",
        "patch": "@@ -1616,7 +1616,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n                 if (!chainman.BlockIndex().empty() &&\n-                        !LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n+                        !g_chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n                 }\n "
      },
      {
        "sha": "3de5f253634c9c6119aa0ad35de91e6e0a3022c2",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=7ef17f7a52fcce19fa9380ca876310b14ae3c803",
        "patch": "@@ -157,7 +157,7 @@ class ChainImpl : public Chain\n     Optional<int> getBlockHeight(const uint256& hash) override\n     {\n         LOCK(::cs_main);\n-        CBlockIndex* block = LookupBlockIndex(hash);\n+        CBlockIndex* block = g_chainman.m_blockman.LookupBlockIndex(hash);\n         if (block && ::ChainActive().Contains(block)) {\n             return block->nHeight;\n         }\n@@ -207,7 +207,7 @@ class ChainImpl : public Chain\n     bool findBlock(const uint256& hash, const FoundBlock& block) override\n     {\n         WAIT_LOCK(cs_main, lock);\n-        return FillBlock(LookupBlockIndex(hash), block, lock);\n+        return FillBlock(g_chainman.m_blockman.LookupBlockIndex(hash), block, lock);\n     }\n     bool findFirstBlockWithTimeAndHeight(int64_t min_time, int min_height, const FoundBlock& block) override\n     {\n@@ -224,7 +224,7 @@ class ChainImpl : public Chain\n     bool findAncestorByHeight(const uint256& block_hash, int ancestor_height, const FoundBlock& ancestor_out) override\n     {\n         WAIT_LOCK(cs_main, lock);\n-        if (const CBlockIndex* block = LookupBlockIndex(block_hash)) {\n+        if (const CBlockIndex* block = g_chainman.m_blockman.LookupBlockIndex(block_hash)) {\n             if (const CBlockIndex* ancestor = block->GetAncestor(ancestor_height)) {\n                 return FillBlock(ancestor, ancestor_out, lock);\n             }\n@@ -234,16 +234,16 @@ class ChainImpl : public Chain\n     bool findAncestorByHash(const uint256& block_hash, const uint256& ancestor_hash, const FoundBlock& ancestor_out) override\n     {\n         WAIT_LOCK(cs_main, lock);\n-        const CBlockIndex* block = LookupBlockIndex(block_hash);\n-        const CBlockIndex* ancestor = LookupBlockIndex(ancestor_hash);\n+        const CBlockIndex* block = g_chainman.m_blockman.LookupBlockIndex(block_hash);\n+        const CBlockIndex* ancestor = g_chainman.m_blockman.LookupBlockIndex(ancestor_hash);\n         if (block && ancestor && block->GetAncestor(ancestor->nHeight) != ancestor) ancestor = nullptr;\n         return FillBlock(ancestor, ancestor_out, lock);\n     }\n     bool findCommonAncestor(const uint256& block_hash1, const uint256& block_hash2, const FoundBlock& ancestor_out, const FoundBlock& block1_out, const FoundBlock& block2_out) override\n     {\n         WAIT_LOCK(cs_main, lock);\n-        const CBlockIndex* block1 = LookupBlockIndex(block_hash1);\n-        const CBlockIndex* block2 = LookupBlockIndex(block_hash2);\n+        const CBlockIndex* block1 = g_chainman.m_blockman.LookupBlockIndex(block_hash1);\n+        const CBlockIndex* block2 = g_chainman.m_blockman.LookupBlockIndex(block_hash2);\n         const CBlockIndex* ancestor = block1 && block2 ? LastCommonAncestor(block1, block2) : nullptr;\n         // Using & instead of && below to avoid short circuiting and leaving\n         // output uninitialized.\n@@ -253,7 +253,7 @@ class ChainImpl : public Chain\n     double guessVerificationProgress(const uint256& block_hash) override\n     {\n         LOCK(cs_main);\n-        return GuessVerificationProgress(Params().TxData(), LookupBlockIndex(block_hash));\n+        return GuessVerificationProgress(Params().TxData(), g_chainman.m_blockman.LookupBlockIndex(block_hash));\n     }\n     bool hasBlocks(const uint256& block_hash, int min_height, Optional<int> max_height) override\n     {\n@@ -265,7 +265,7 @@ class ChainImpl : public Chain\n         // used to limit the range, and passing min_height that's too low or\n         // max_height that's too high will not crash or change the result.\n         LOCK(::cs_main);\n-        if (CBlockIndex* block = LookupBlockIndex(block_hash)) {\n+        if (CBlockIndex* block = g_chainman.m_blockman.LookupBlockIndex(block_hash)) {\n             if (max_height && block->nHeight >= *max_height) block = block->GetAncestor(*max_height);\n             for (; block->nStatus & BLOCK_HAVE_DATA; block = block->pprev) {\n                 // Check pprev to not segfault if min_height is too low"
      },
      {
        "sha": "b5c6635432cc37d3bb6fd8e344052ad0e42cdcd4",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=7ef17f7a52fcce19fa9380ca876310b14ae3c803",
        "patch": "@@ -45,7 +45,7 @@ void RegenerateCommitments(CBlock& block)\n     tx.vout.erase(tx.vout.begin() + GetWitnessCommitmentIndex(block));\n     block.vtx.at(0) = MakeTransactionRef(tx);\n \n-    GenerateCoinbaseCommitment(block, WITH_LOCK(cs_main, return LookupBlockIndex(block.hashPrevBlock)), Params().GetConsensus());\n+    GenerateCoinbaseCommitment(block, WITH_LOCK(cs_main, return g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock)), Params().GetConsensus());\n \n     block.hashMerkleRoot = BlockMerkleRoot(block);\n }"
      },
      {
        "sha": "b02e83765a5362cbdd82a5f4db8fddf139f7a37b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7ef17f7a52fcce19fa9380ca876310b14ae3c803",
        "patch": "@@ -569,7 +569,7 @@ static void ProcessBlockAvailability(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(cs_\n     assert(state != nullptr);\n \n     if (!state->hashLastUnknownBlock.IsNull()) {\n-        const CBlockIndex* pindex = LookupBlockIndex(state->hashLastUnknownBlock);\n+        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(state->hashLastUnknownBlock);\n         if (pindex && pindex->nChainWork > 0) {\n             if (state->pindexBestKnownBlock == nullptr || pindex->nChainWork >= state->pindexBestKnownBlock->nChainWork) {\n                 state->pindexBestKnownBlock = pindex;\n@@ -586,7 +586,7 @@ static void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) EXCLUSIV\n \n     ProcessBlockAvailability(nodeid);\n \n-    const CBlockIndex* pindex = LookupBlockIndex(hash);\n+    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n     if (pindex && pindex->nChainWork > 0) {\n         // An actually better block was announced.\n         if (state->pindexBestKnownBlock == nullptr || pindex->nChainWork >= state->pindexBestKnownBlock->nChainWork) {\n@@ -1415,7 +1415,7 @@ bool static AlreadyHaveTx(const GenTxid& gtxid, const CTxMemPool& mempool) EXCLU\n \n bool static AlreadyHaveBlock(const uint256& block_hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    return LookupBlockIndex(block_hash) != nullptr;\n+    return g_chainman.m_blockman.LookupBlockIndex(block_hash) != nullptr;\n }\n \n void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman)\n@@ -1489,7 +1489,7 @@ void static ProcessGetBlockData(CNode& pfrom, const CChainParams& chainparams, c\n     bool need_activate_chain = false;\n     {\n         LOCK(cs_main);\n-        const CBlockIndex* pindex = LookupBlockIndex(inv.hash);\n+        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(inv.hash);\n         if (pindex) {\n             if (pindex->HaveTxsDownloaded() && !pindex->IsValid(BLOCK_VALID_SCRIPTS) &&\n                     pindex->IsValid(BLOCK_VALID_TREE)) {\n@@ -1510,7 +1510,7 @@ void static ProcessGetBlockData(CNode& pfrom, const CChainParams& chainparams, c\n     }\n \n     LOCK(cs_main);\n-    const CBlockIndex* pindex = LookupBlockIndex(inv.hash);\n+    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(inv.hash);\n     if (pindex) {\n         send = BlockRequestAllowed(pindex, consensusParams);\n         if (!send) {\n@@ -1795,7 +1795,7 @@ void PeerManager::ProcessHeadersMessage(CNode& pfrom, const std::vector<CBlockHe\n         //   don't connect before giving DoS points\n         // - Once a headers message is received that is valid and does connect,\n         //   nUnconnectingHeaders gets reset back to 0.\n-        if (!LookupBlockIndex(headers[0].hashPrevBlock) && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n+        if (!g_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n             nodestate->nUnconnectingHeaders++;\n             m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexBestHeader), uint256()));\n             LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n@@ -1825,7 +1825,7 @@ void PeerManager::ProcessHeadersMessage(CNode& pfrom, const std::vector<CBlockHe\n \n         // If we don't have the last header, then they'll have given us\n         // something new (if these headers are valid).\n-        if (!LookupBlockIndex(hashLastBlock)) {\n+        if (!g_chainman.m_blockman.LookupBlockIndex(hashLastBlock)) {\n             received_new_header = true;\n         }\n     }\n@@ -2076,7 +2076,7 @@ static bool PrepareBlockFilterRequest(CNode& peer, const CChainParams& chain_par\n \n     {\n         LOCK(cs_main);\n-        stop_index = LookupBlockIndex(stop_hash);\n+        stop_index = g_chainman.m_blockman.LookupBlockIndex(stop_hash);\n \n         // Check that the stop block exists and the peer would be allowed to fetch it.\n         if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n@@ -2799,7 +2799,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n \n         LOCK(cs_main);\n \n-        const CBlockIndex* pindex = LookupBlockIndex(req.blockhash);\n+        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(req.blockhash);\n         if (!pindex || !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n             LogPrint(BCLog::NET, \"Peer %d sent us a getblocktxn for a block we don't have\\n\", pfrom.GetId());\n             return;\n@@ -2852,7 +2852,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         if (locator.IsNull())\n         {\n             // If locator is null, return the hashStop block\n-            pindex = LookupBlockIndex(hashStop);\n+            pindex = g_chainman.m_blockman.LookupBlockIndex(hashStop);\n             if (!pindex) {\n                 return;\n             }\n@@ -3129,14 +3129,14 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         {\n         LOCK(cs_main);\n \n-        if (!LookupBlockIndex(cmpctblock.header.hashPrevBlock)) {\n+        if (!g_chainman.m_blockman.LookupBlockIndex(cmpctblock.header.hashPrevBlock)) {\n             // Doesn't connect (or is genesis), instead of DoSing in AcceptBlockHeader, request deeper headers\n             if (!::ChainstateActive().IsInitialBlockDownload())\n                 m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexBestHeader), uint256()));\n             return;\n         }\n \n-        if (!LookupBlockIndex(cmpctblock.header.GetHash())) {\n+        if (!g_chainman.m_blockman.LookupBlockIndex(cmpctblock.header.GetHash())) {\n             received_new_header = true;\n         }\n         }\n@@ -4129,7 +4129,7 @@ bool PeerManager::SendMessages(CNode* pto)\n                 // then send all headers past that one.  If we come across any\n                 // headers that aren't on ::ChainActive(), give up.\n                 for (const uint256 &hash : pto->vBlockHashesToAnnounce) {\n-                    const CBlockIndex* pindex = LookupBlockIndex(hash);\n+                    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n                     assert(pindex);\n                     if (::ChainActive()[pindex->nHeight] != pindex) {\n                         // Bail out if we reorged away from this block\n@@ -4221,7 +4221,7 @@ bool PeerManager::SendMessages(CNode* pto)\n                 // in the past.\n                 if (!pto->vBlockHashesToAnnounce.empty()) {\n                     const uint256 &hashToAnnounce = pto->vBlockHashesToAnnounce.back();\n-                    const CBlockIndex* pindex = LookupBlockIndex(hashToAnnounce);\n+                    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hashToAnnounce);\n                     assert(pindex);\n \n                     // Warn if we're announcing a block that is not on the main chain."
      },
      {
        "sha": "779ec2432f1fafb22236f31002f49a67a79f5595",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=7ef17f7a52fcce19fa9380ca876310b14ae3c803",
        "patch": "@@ -63,7 +63,7 @@ static bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, T hash_obj, const\n     stats.hashBlock = pcursor->GetBestBlock();\n     {\n         LOCK(cs_main);\n-        stats.nHeight = LookupBlockIndex(stats.hashBlock)->nHeight;\n+        stats.nHeight = g_chainman.m_blockman.LookupBlockIndex(stats.hashBlock)->nHeight;\n     }\n \n     PrepareHash(hash_obj, stats);"
      },
      {
        "sha": "666f16e86ae41c99da81b0805e4dca1b2db54d10",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=7ef17f7a52fcce19fa9380ca876310b14ae3c803",
        "patch": "@@ -179,7 +179,7 @@ static bool rest_headers(const util::Ref& context,\n     {\n         LOCK(cs_main);\n         tip = ::ChainActive().Tip();\n-        const CBlockIndex* pindex = LookupBlockIndex(hash);\n+        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n             headers.push_back(pindex);\n             if (headers.size() == (unsigned long)count)\n@@ -247,7 +247,7 @@ static bool rest_block(HTTPRequest* req,\n     {\n         LOCK(cs_main);\n         tip = ::ChainActive().Tip();\n-        pblockindex = LookupBlockIndex(hash);\n+        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pblockindex) {\n             return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n         }"
      },
      {
        "sha": "8f0f4c15d03e2987f648f00528fd482ca8f2d732",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=7ef17f7a52fcce19fa9380ca876310b14ae3c803",
        "patch": "@@ -828,7 +828,7 @@ static RPCHelpMan getblockheader()\n     const CBlockIndex* tip;\n     {\n         LOCK(cs_main);\n-        pblockindex = LookupBlockIndex(hash);\n+        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         tip = ::ChainActive().Tip();\n     }\n \n@@ -951,7 +951,7 @@ static RPCHelpMan getblock()\n     const CBlockIndex* tip;\n     {\n         LOCK(cs_main);\n-        pblockindex = LookupBlockIndex(hash);\n+        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         tip = ::ChainActive().Tip();\n \n         if (!pblockindex) {\n@@ -1148,7 +1148,7 @@ static RPCHelpMan gettxout()\n         }\n     }\n \n-    const CBlockIndex* pindex = LookupBlockIndex(coins_view->GetBestBlock());\n+    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(coins_view->GetBestBlock());\n     ret.pushKV(\"bestblock\", pindex->GetBlockHash().GetHex());\n     if (coin.nHeight == MEMPOOL_HEIGHT) {\n         ret.pushKV(\"confirmations\", 0);\n@@ -1541,7 +1541,7 @@ static RPCHelpMan preciousblock()\n \n     {\n         LOCK(cs_main);\n-        pblockindex = LookupBlockIndex(hash);\n+        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n@@ -1579,7 +1579,7 @@ static RPCHelpMan invalidateblock()\n     CBlockIndex* pblockindex;\n     {\n         LOCK(cs_main);\n-        pblockindex = LookupBlockIndex(hash);\n+        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n@@ -1618,7 +1618,7 @@ static RPCHelpMan reconsiderblock()\n \n     {\n         LOCK(cs_main);\n-        CBlockIndex* pblockindex = LookupBlockIndex(hash);\n+        CBlockIndex* pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n@@ -1673,7 +1673,7 @@ static RPCHelpMan getchaintxstats()\n     } else {\n         uint256 hash(ParseHashV(request.params[1], \"blockhash\"));\n         LOCK(cs_main);\n-        pindex = LookupBlockIndex(hash);\n+        pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n@@ -1851,7 +1851,7 @@ static RPCHelpMan getblockstats()\n         pindex = ::ChainActive()[height];\n     } else {\n         const uint256 hash(ParseHashV(request.params[0], \"hash_or_height\"));\n-        pindex = LookupBlockIndex(hash);\n+        pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n@@ -2314,7 +2314,7 @@ static RPCHelpMan getblockfilter()\n     bool block_was_connected;\n     {\n         LOCK(cs_main);\n-        block_index = LookupBlockIndex(block_hash);\n+        block_index = g_chainman.m_blockman.LookupBlockIndex(block_hash);\n         if (!block_index) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n@@ -2424,7 +2424,7 @@ static RPCHelpMan dumptxoutset()\n         }\n \n         pcursor = std::unique_ptr<CCoinsViewCursor>(::ChainstateActive().CoinsDB().Cursor());\n-        tip = LookupBlockIndex(stats.hashBlock);\n+        tip = g_chainman.m_blockman.LookupBlockIndex(stats.hashBlock);\n         CHECK_NONFATAL(tip);\n     }\n "
      },
      {
        "sha": "f134340fab35f58cac364ac207b2576d7d7dc4fb",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=7ef17f7a52fcce19fa9380ca876310b14ae3c803",
        "patch": "@@ -380,7 +380,7 @@ static RPCHelpMan generateblock()\n         LOCK(cs_main);\n \n         BlockValidationState state;\n-        if (!TestBlockValidity(state, chainparams, block, LookupBlockIndex(block.hashPrevBlock), false, false)) {\n+        if (!TestBlockValidity(state, chainparams, block, g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock), false, false)) {\n             throw JSONRPCError(RPC_VERIFY_ERROR, strprintf(\"TestBlockValidity failed: %s\", state.ToString()));\n         }\n     }\n@@ -623,7 +623,7 @@ static RPCHelpMan getblocktemplate()\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n \n             uint256 hash = block.GetHash();\n-            const CBlockIndex* pindex = LookupBlockIndex(hash);\n+            const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n             if (pindex) {\n                 if (pindex->IsValid(BLOCK_VALID_SCRIPTS))\n                     return \"duplicate\";\n@@ -951,7 +951,7 @@ static RPCHelpMan submitblock()\n     uint256 hash = block.GetHash();\n     {\n         LOCK(cs_main);\n-        const CBlockIndex* pindex = LookupBlockIndex(hash);\n+        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         if (pindex) {\n             if (pindex->IsValid(BLOCK_VALID_SCRIPTS)) {\n                 return \"duplicate\";\n@@ -964,7 +964,7 @@ static RPCHelpMan submitblock()\n \n     {\n         LOCK(cs_main);\n-        const CBlockIndex* pindex = LookupBlockIndex(block.hashPrevBlock);\n+        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock);\n         if (pindex) {\n             UpdateUncommittedBlockStructures(block, pindex, Params().GetConsensus());\n         }\n@@ -1008,7 +1008,7 @@ static RPCHelpMan submitheader()\n     }\n     {\n         LOCK(cs_main);\n-        if (!LookupBlockIndex(h.hashPrevBlock)) {\n+        if (!g_chainman.m_blockman.LookupBlockIndex(h.hashPrevBlock)) {\n             throw JSONRPCError(RPC_VERIFY_ERROR, \"Must submit previous header (\" + h.hashPrevBlock.GetHex() + \") first\");\n         }\n     }"
      },
      {
        "sha": "207458ae9558029858bc95fd18b300ead625dd43",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=7ef17f7a52fcce19fa9380ca876310b14ae3c803",
        "patch": "@@ -54,7 +54,7 @@ static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue&\n         LOCK(cs_main);\n \n         entry.pushKV(\"blockhash\", hashBlock.GetHex());\n-        CBlockIndex* pindex = LookupBlockIndex(hashBlock);\n+        CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hashBlock);\n         if (pindex) {\n             if (::ChainActive().Contains(pindex)) {\n                 entry.pushKV(\"confirmations\", 1 + ::ChainActive().Height() - pindex->nHeight);\n@@ -178,7 +178,7 @@ static RPCHelpMan getrawtransaction()\n         LOCK(cs_main);\n \n         uint256 blockhash = ParseHashV(request.params[2], \"parameter 3\");\n-        blockindex = LookupBlockIndex(blockhash);\n+        blockindex = g_chainman.m_blockman.LookupBlockIndex(blockhash);\n         if (!blockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block hash not found\");\n         }\n@@ -261,7 +261,7 @@ static RPCHelpMan gettxoutproof()\n     if (!request.params[1].isNull()) {\n         LOCK(cs_main);\n         hashBlock = ParseHashV(request.params[1], \"blockhash\");\n-        pblockindex = LookupBlockIndex(hashBlock);\n+        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hashBlock);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n@@ -291,7 +291,7 @@ static RPCHelpMan gettxoutproof()\n         if (!tx || hashBlock.IsNull()) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not yet in block\");\n         }\n-        pblockindex = LookupBlockIndex(hashBlock);\n+        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hashBlock);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Transaction index corrupt\");\n         }\n@@ -351,7 +351,7 @@ static RPCHelpMan verifytxoutproof()\n \n     LOCK(cs_main);\n \n-    const CBlockIndex* pindex = LookupBlockIndex(merkleBlock.header.GetHash());\n+    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(merkleBlock.header.GetHash());\n     if (!pindex || !::ChainActive().Contains(pindex) || pindex->nTx == 0) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n     }"
      },
      {
        "sha": "633a95ce96e0ffc97164ffaa8a37652ec9db65f4",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=7ef17f7a52fcce19fa9380ca876310b14ae3c803",
        "patch": "@@ -178,7 +178,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         const CBlockIndex* block_index;\n         {\n             LOCK(cs_main);\n-            block_index = LookupBlockIndex(block->GetHash());\n+            block_index = g_chainman.m_blockman.LookupBlockIndex(block->GetHash());\n         }\n \n         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n@@ -196,7 +196,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         const CBlockIndex* block_index;\n         {\n             LOCK(cs_main);\n-            block_index = LookupBlockIndex(block->GetHash());\n+            block_index = g_chainman.m_blockman.LookupBlockIndex(block->GetHash());\n         }\n \n         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n@@ -210,7 +210,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         const CBlockIndex* block_index;\n         {\n             LOCK(cs_main);\n-            block_index = LookupBlockIndex(block->GetHash());\n+            block_index = g_chainman.m_blockman.LookupBlockIndex(block->GetHash());\n         }\n \n         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n@@ -231,14 +231,14 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n \n          {\n              LOCK(cs_main);\n-             block_index = LookupBlockIndex(chainA[i]->GetHash());\n+             block_index = g_chainman.m_blockman.LookupBlockIndex(chainA[i]->GetHash());\n          }\n          BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n          CheckFilterLookups(filter_index, block_index, chainA_last_header);\n \n          {\n              LOCK(cs_main);\n-             block_index = LookupBlockIndex(chainB[i]->GetHash());\n+             block_index = g_chainman.m_blockman.LookupBlockIndex(chainB[i]->GetHash());\n          }\n          BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n          CheckFilterLookups(filter_index, block_index, chainB_last_header);"
      },
      {
        "sha": "ec45d9a4346304f5d06f2e72c68d519052256b2c",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ef17f7a52fcce19fa9380ca876310b14ae3c803/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=7ef17f7a52fcce19fa9380ca876310b14ae3c803",
        "patch": "@@ -95,8 +95,8 @@ std::shared_ptr<CBlock> MinerTestingSetup::Block(const uint256& prev_hash)\n \n std::shared_ptr<CBlock> MinerTestingSetup::FinalizeBlock(std::shared_ptr<CBlock> pblock)\n {\n-    LOCK(cs_main); // For LookupBlockIndex\n-    GenerateCoinbaseCommitment(*pblock, LookupBlockIndex(pblock->hashPrevBlock), Params().GetConsensus());\n+    LOCK(cs_main); // For g_chainman.m_blockman.LookupBlockIndex\n+    GenerateCoinbaseCommitment(*pblock, g_chainman.m_blockman.LookupBlockIndex(pblock->hashPrevBlock), Params().GetConsensus());\n \n     pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n "
      }
    ]
  },
  {
    "sha": "8dbedcb3bf123411ebcd9ccb7521b44cacc8e385",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGJlZGNiM2JmMTIzNDExZWJjZDljY2I3NTIxYjQ0Y2FjYzhlMzg1",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-25T20:40:21Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T16:10:02Z"
      },
      "message": "validation: Move FindForkInGlobalIndex to BlockManager\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.\n\nFindForkInGlobalIndex only acts on BlockManager.\n\nNote to reviewers: Since FindForkInGlobalIndex is always called with\n::ChainActive() as its first parameter, it is possible to move\nFindForkInGlobalIndex to CChainState and remove this const CChain&\nparameter to instead use m_chain. However, it seems like the original\nintention was for FindForkInGlobalIndex to work with _any_ chain, not\njust the current active chain. Let me know if this should be changed.",
      "tree": {
        "sha": "6538dbaf1fdebe8a9aa773537f0c7c5e4e4f6e09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6538dbaf1fdebe8a9aa773537f0c7c5e4e4f6e09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8dbedcb3bf123411ebcd9ccb7521b44cacc8e385",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl+IdFoACgkQDMUhUxl5\nkaUgPBAAsYPe40gejayw/rPDdNsLS5da9NeK1Q1C0GQlFSGVPBtDIcvID6oMRQ0E\nd6g2BFSlymfrmmbJpEwo1BGzccy88F99n1taP1TgKD1ZUP3wJWsE9Vjp/7Z7sbib\nsbDmFK1MjHYP6C4WlG9270rQUfa3u0G2ZcNXwtJRIMxbsVoRYhvcPKQBh5SAXA/W\nj8jTlsZvxAPoXg2v7SSyix0DQxrlsRIqMYDYvaajkyW2+fX81IASxAPYMIEjrY+w\nxmZZ5GTT9Va0JyzZmWbKEuQ+Adc8KC6ZVbToC6ZXn6rtBaT9hPncC+kVLdj8FoW8\neLGa3rwBEokRoF2QgHMBL4IGUc9LPJDbwp69LKemlsezbzVgeKUfU82KLbt1DLD5\nRIW6Q4RYlkc5q8/+jCs3f3FdMHvCTnrphCHaAb3/NrJvHcCbevPfb4f/GzrZ5CZs\nVYipv7WhdLHKpFZWhz+aRmO4Fqnlkzyv/7V7XKO7/GBmm2f4rRrFGGwx7WcQAavi\n4cfo6EHJbqjAKubhZzQ6g8INLtwFBOwFPtcPYm+LBkBvkxkHqD+katVgndIFFohS\n6acSHysFZ9wFurNr504OFjVt/LAmZEh+0xCVTVPtJVHPJg9Ms100TdUVk3D3sNAU\nCi+4s3Us/kmwd4VgoWr18080J1Mv4aUX8D1Z4PIgP/mGmcoNMcg=\n=UQEv\n-----END PGP SIGNATURE-----",
        "payload": "tree 6538dbaf1fdebe8a9aa773537f0c7c5e4e4f6e09\nparent 7ef17f7a52fcce19fa9380ca876310b14ae3c803\nauthor Carl Dong <contact@carldong.me> 1598388021 -0400\ncommitter Carl Dong <contact@carldong.me> 1602778202 -0400\n\nvalidation: Move FindForkInGlobalIndex to BlockManager\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.\n\nFindForkInGlobalIndex only acts on BlockManager.\n\nNote to reviewers: Since FindForkInGlobalIndex is always called with\n::ChainActive() as its first parameter, it is possible to move\nFindForkInGlobalIndex to CChainState and remove this const CChain&\nparameter to instead use m_chain. However, it seems like the original\nintention was for FindForkInGlobalIndex to work with _any_ chain, not\njust the current active chain. Let me know if this should be changed.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dbedcb3bf123411ebcd9ccb7521b44cacc8e385",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8dbedcb3bf123411ebcd9ccb7521b44cacc8e385",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dbedcb3bf123411ebcd9ccb7521b44cacc8e385/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ef17f7a52fcce19fa9380ca876310b14ae3c803",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ef17f7a52fcce19fa9380ca876310b14ae3c803",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ef17f7a52fcce19fa9380ca876310b14ae3c803"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "3d3dda95b10dac7f7144e26a7ee08227d3337ba3",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbedcb3bf123411ebcd9ccb7521b44cacc8e385/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbedcb3bf123411ebcd9ccb7521b44cacc8e385/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=8dbedcb3bf123411ebcd9ccb7521b44cacc8e385",
        "patch": "@@ -62,7 +62,7 @@ bool BaseIndex::Init()\n     if (locator.IsNull()) {\n         m_best_block_index = nullptr;\n     } else {\n-        m_best_block_index = FindForkInGlobalIndex(::ChainActive(), locator);\n+        m_best_block_index = g_chainman.m_blockman.FindForkInGlobalIndex(::ChainActive(), locator);\n     }\n     m_synced = m_best_block_index.load() == ::ChainActive().Tip();\n     return true;"
      },
      {
        "sha": "d1305045f554cd088d3ead98cfc6def0bd4a065b",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbedcb3bf123411ebcd9ccb7521b44cacc8e385/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbedcb3bf123411ebcd9ccb7521b44cacc8e385/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=8dbedcb3bf123411ebcd9ccb7521b44cacc8e385",
        "patch": "@@ -199,7 +199,7 @@ class ChainImpl : public Chain\n     Optional<int> findLocatorFork(const CBlockLocator& locator) override\n     {\n         LOCK(cs_main);\n-        if (CBlockIndex* fork = FindForkInGlobalIndex(::ChainActive(), locator)) {\n+        if (CBlockIndex* fork = g_chainman.m_blockman.FindForkInGlobalIndex(::ChainActive(), locator)) {\n             return fork->nHeight;\n         }\n         return nullopt;"
      },
      {
        "sha": "fad4227de5b9dd2af12057c5af1c93ecd2db3918",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbedcb3bf123411ebcd9ccb7521b44cacc8e385/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbedcb3bf123411ebcd9ccb7521b44cacc8e385/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=8dbedcb3bf123411ebcd9ccb7521b44cacc8e385",
        "patch": "@@ -2746,7 +2746,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         LOCK(cs_main);\n \n         // Find the last block the caller has in the main chain\n-        const CBlockIndex* pindex = FindForkInGlobalIndex(::ChainActive(), locator);\n+        const CBlockIndex* pindex = g_chainman.m_blockman.FindForkInGlobalIndex(::ChainActive(), locator);\n \n         // Send the rest of the chain\n         if (pindex)\n@@ -2865,7 +2865,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         else\n         {\n             // Find the last block the caller has in the main chain\n-            pindex = FindForkInGlobalIndex(::ChainActive(), locator);\n+            pindex = g_chainman.m_blockman.FindForkInGlobalIndex(::ChainActive(), locator);\n             if (pindex)\n                 pindex = ::ChainActive().Next(pindex);\n         }"
      },
      {
        "sha": "17813372f2bc1502ed50335658897193d1e4474d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbedcb3bf123411ebcd9ccb7521b44cacc8e385/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbedcb3bf123411ebcd9ccb7521b44cacc8e385/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8dbedcb3bf123411ebcd9ccb7521b44cacc8e385",
        "patch": "@@ -178,14 +178,15 @@ CBlockIndex* BlockManager::LookupBlockIndex(const uint256& hash)\n     return it == m_block_index.end() ? nullptr : it->second;\n }\n \n-CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n+CBlockIndex* BlockManager::FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n {\n     AssertLockHeld(cs_main);\n \n+    assert(std::addressof(g_chainman.m_blockman) == std::addressof(*this));\n     // Find the latest block common to locator and chain - we expect that\n     // locator.vHave is sorted descending by height.\n     for (const uint256& hash : locator.vHave) {\n-        CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+        CBlockIndex* pindex = LookupBlockIndex(hash);\n         if (pindex) {\n             if (chain.Contains(pindex))\n                 return pindex;"
      },
      {
        "sha": "d2ff9a82083d8821eb1ab2e5af5947d7b6817b0e",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dbedcb3bf123411ebcd9ccb7521b44cacc8e385/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dbedcb3bf123411ebcd9ccb7521b44cacc8e385/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=8dbedcb3bf123411ebcd9ccb7521b44cacc8e385",
        "patch": "@@ -318,9 +318,6 @@ class CVerifyDB {\n     bool VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n };\n \n-/** Find the last common block between the parameter chain and a locator. */\n-CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-\n enum DisconnectResult\n {\n     DISCONNECT_OK,      // All good.\n@@ -440,6 +437,9 @@ class BlockManager\n \n     CBlockIndex* LookupBlockIndex(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    /** Find the last common block between the parameter chain and a locator. */\n+    CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n     ~BlockManager() {\n         Unload();\n     }"
      }
    ]
  },
  {
    "sha": "05a9e983b421f7728c6cf4c18525abba8a68c82a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNWE5ZTk4M2I0MjFmNzcyOGM2Y2Y0YzE4NTI1YWJiYThhNjhjODJh",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-25T21:11:32Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T16:10:03Z"
      },
      "message": "validation: Move GetSpendHeight to BlockManager\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.\n\nGetSpendHeight only acts on BlockManager.",
      "tree": {
        "sha": "34591473d532bae442db80e7ec6c9fe804b34c0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34591473d532bae442db80e7ec6c9fe804b34c0e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05a9e983b421f7728c6cf4c18525abba8a68c82a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl+IdFsACgkQDMUhUxl5\nkaVbJw//Vd7zOE4zyPYBc6fM/1QOcLky+sLQ04cBZW6aiINGaFGRrO39RltoykO3\ntbvgSwC4/lDf1aUBftmlwk2uvtIQo4XXCZ4xDfh+lPbQYU9j/TaLM4+lkWhWQB3s\n7W3k2XMZVqJumXqkw7HU7mwa7V012i+ZISEst+oXR9HeaqZIyuc/S5lDSUF+Vy4i\ndOFAjvlyeTQwNSLlV2DA8+47e16UQCIvYOfu6YHnIO+AZE4bRynVl0FT+fwDNGuS\nc4abHyCShLmdgvzea/QKfGeo7FjS1pPKECnsqtw3IdbhlqfJG/N8vQZUQQ9pZMol\nDt1TLlEt7d18vzgUwo7J6vUiJaTFiXc7MgCXf4eeTSuKZx5tdiEpmzMrkNPGJtAS\nCNGcUKOIKdCtHqBuoyOB5BOMq5Q4Ah5kGyStVcNS2qNQCPjGEEGR7b9eg6F8I/SN\nXHP/BIFfWAGmXUu1TVC5ldKyrwYTS8b4G9k3gKIYmiysdPwpYGgu39esj1QHRwt/\n2c8712Av40fUM8tiYCHU8503wh04dUjrNSWs0QJ7pf0L0xy7eQVFNJw1vdAv2wrk\nA6R+SpAHZO9vD+KhupfmTUagQbMC2nRRG3j1+ntwcNRLz4JK+sxA3fRYg3VavfAF\nbavHYnnmJ+4j/HwIoTUmyBwdp2e51H+sQ4PMUtNJovBckTqfhJY=\n=nOCe\n-----END PGP SIGNATURE-----",
        "payload": "tree 34591473d532bae442db80e7ec6c9fe804b34c0e\nparent 8dbedcb3bf123411ebcd9ccb7521b44cacc8e385\nauthor Carl Dong <contact@carldong.me> 1598389892 -0400\ncommitter Carl Dong <contact@carldong.me> 1602778203 -0400\n\nvalidation: Move GetSpendHeight to BlockManager\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.\n\nGetSpendHeight only acts on BlockManager.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05a9e983b421f7728c6cf4c18525abba8a68c82a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05a9e983b421f7728c6cf4c18525abba8a68c82a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05a9e983b421f7728c6cf4c18525abba8a68c82a/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8dbedcb3bf123411ebcd9ccb7521b44cacc8e385",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dbedcb3bf123411ebcd9ccb7521b44cacc8e385",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8dbedcb3bf123411ebcd9ccb7521b44cacc8e385"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 13,
      "deletions": 12
    },
    "files": [
      {
        "sha": "5b55ccd765048fec7986b84a1245dd1b1479df4a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05a9e983b421f7728c6cf4c18525abba8a68c82a/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05a9e983b421f7728c6cf4c18525abba8a68c82a/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=05a9e983b421f7728c6cf4c18525abba8a68c82a",
        "patch": "@@ -632,7 +632,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     uint64_t innerUsage = 0;\n \n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n-    const int64_t spendheight = GetSpendHeight(mempoolDuplicate);\n+    const int64_t spendheight = WITH_LOCK(::cs_main, return g_chainman.m_blockman.GetSpendHeight(mempoolDuplicate));\n \n     std::list<const CTxMemPoolEntry*> waitingOnDependants;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {"
      },
      {
        "sha": "54d861bb5d8401170d71c5518c5d01fdfa99ffdc",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05a9e983b421f7728c6cf4c18525abba8a68c82a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05a9e983b421f7728c6cf4c18525abba8a68c82a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=05a9e983b421f7728c6cf4c18525abba8a68c82a",
        "patch": "@@ -682,7 +682,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-BIP68-final\");\n \n     CAmount nFees = 0;\n-    if (!Consensus::CheckTxInputs(tx, state, m_view, GetSpendHeight(m_view), nFees)) {\n+    if (!Consensus::CheckTxInputs(tx, state, m_view, g_chainman.m_blockman.GetSpendHeight(m_view), nFees)) {\n         return false; // state filled in by CheckTxInputs\n     }\n \n@@ -1467,10 +1467,11 @@ bool CScriptCheck::operator()() {\n     return VerifyScript(scriptSig, m_tx_out.scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, m_tx_out.nValue, cacheStore, *txdata), &error);\n }\n \n-int GetSpendHeight(const CCoinsViewCache& inputs)\n+int BlockManager::GetSpendHeight(const CCoinsViewCache& inputs)\n {\n-    LOCK(cs_main);\n-    CBlockIndex* pindexPrev = g_chainman.m_blockman.LookupBlockIndex(inputs.GetBestBlock());\n+    AssertLockHeld(cs_main);\n+    assert(std::addressof(g_chainman.m_blockman) == std::addressof(*this));\n+    CBlockIndex* pindexPrev = LookupBlockIndex(inputs.GetBestBlock());\n     return pindexPrev->nHeight + 1;\n }\n "
      },
      {
        "sha": "da96bdffc8f248b5924696498d9b7df16ba701de",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05a9e983b421f7728c6cf4c18525abba8a68c82a/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05a9e983b421f7728c6cf4c18525abba8a68c82a/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=05a9e983b421f7728c6cf4c18525abba8a68c82a",
        "patch": "@@ -440,6 +440,13 @@ class BlockManager\n     /** Find the last common block between the parameter chain and a locator. */\n     CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    /**\n+     * Return the spend height, which is one more than the inputs.GetBestBlock().\n+     * While checking, GetBestBlock() refers to the parent block. (protected by cs_main)\n+     * This is also true for mempool checks.\n+     */\n+    int GetSpendHeight(const CCoinsViewCache& inputs) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n     ~BlockManager() {\n         Unload();\n     }\n@@ -952,13 +959,6 @@ CChain& ChainActive();\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern std::unique_ptr<CBlockTreeDB> pblocktree;\n \n-/**\n- * Return the spend height, which is one more than the inputs.GetBestBlock().\n- * While checking, GetBestBlock() refers to the parent block. (protected by cs_main)\n- * This is also true for mempool checks.\n- */\n-int GetSpendHeight(const CCoinsViewCache& inputs);\n-\n extern VersionBitsCache versionbitscache;\n \n /**"
      }
    ]
  },
  {
    "sha": "6d66fca3cfa891554ed1840df9231de91e60a5f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDY2ZmNhM2NmYTg5MTU1NGVkMTg0MGRmOTIzMWRlOTFlNjBhNWYx",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-25T20:53:30Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T16:10:04Z"
      },
      "message": "validation: Move GetLastCheckpoint to BlockManager\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.\n\nGetLastCheckPoint mainly acts on BlockManager.",
      "tree": {
        "sha": "79ad675abc27c8e4abd89a55417dfb1a97e7be1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79ad675abc27c8e4abd89a55417dfb1a97e7be1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d66fca3cfa891554ed1840df9231de91e60a5f1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl+IdFwACgkQDMUhUxl5\nkaUVLg//dNWDpnvye0ih2NRZoKIaNrptfKKERl6nQj8wz+mnphxI10QpPdl79fpI\nnJyztywVgfT0h251nHDpCqJWeIlE475cJi9jk/RA+1uj3lDw2iZF4Fr8337o6CN9\nheqHlFgy9yT0y2fcFCx6JtWuaGSCkguxKrxCZ8Edz1aLkVntE95b7PiF7FaHSO0Y\n1LdhRO2y5SPo5f/M97WcuLlSPRlQXs845v8A9UR5/hsZ9WSNeY1Ng27H0OTuORt9\n/0+mjmWCsVv69Hpqme0FIkwaUVh+9UrNk1LYM1/Tx+njFv9f14A7RiRLaCigwPko\nYPJXq3UJC4xZUHDFYSNqtMJRrXa/IthrJHr8L571ffq4FakQ+fVzYVAmck/MStw2\nULTzvi36n7zyDYbQxz4DaGKvHXEeA3DPOKbNf1Povltf04ok/5medAuAOmnBbwrU\npregp6ISfkMYSu3lmcSkB4C6wrlklNMh6mpoJ9XbjFWP/qZlty6GfrR4Xtfp4Cyp\n3a8TR09T9YVyQhimKWnir5GvKC1IH3wNI8w3+N4BMZNwGwyZ2pVlIcrLsJFXfivV\nW72qmAljWCmNhy8L6lZgJWNCGWdeITBokZN+UpNoqu+iL+ClEqASeTua3lwSYfQf\nzgRFdD6c0GudIwGtrU7BoQEW0coF2XNAqjLrUtSuGg7DSmnR5qc=\n=G2OZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 79ad675abc27c8e4abd89a55417dfb1a97e7be1d\nparent 05a9e983b421f7728c6cf4c18525abba8a68c82a\nauthor Carl Dong <contact@carldong.me> 1598388810 -0400\ncommitter Carl Dong <contact@carldong.me> 1602778204 -0400\n\nvalidation: Move GetLastCheckpoint to BlockManager\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.\n\nGetLastCheckPoint mainly acts on BlockManager.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d66fca3cfa891554ed1840df9231de91e60a5f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d66fca3cfa891554ed1840df9231de91e60a5f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d66fca3cfa891554ed1840df9231de91e60a5f1/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05a9e983b421f7728c6cf4c18525abba8a68c82a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05a9e983b421f7728c6cf4c18525abba8a68c82a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05a9e983b421f7728c6cf4c18525abba8a68c82a"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e5049bdb4a52bb69b59c4ff0e5288e66d28a7b08",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d66fca3cfa891554ed1840df9231de91e60a5f1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d66fca3cfa891554ed1840df9231de91e60a5f1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=6d66fca3cfa891554ed1840df9231de91e60a5f1",
        "patch": "@@ -7,7 +7,6 @@\n \n #include <arith_uint256.h>\n #include <chain.h>\n-#include <chainparams.h>\n #include <checkqueue.h>\n #include <consensus/consensus.h>\n #include <consensus/merkle.h>\n@@ -3470,14 +3469,15 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n }\n \n //! Returns last CBlockIndex* that is a checkpoint\n-static CBlockIndex* GetLastCheckpoint(const CCheckpointData& data) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+CBlockIndex* BlockManager::GetLastCheckpoint(const CCheckpointData& data)\n {\n     const MapCheckpoints& checkpoints = data.mapCheckpoints;\n \n     for (const MapCheckpoints::value_type& i : reverse_iterate(checkpoints))\n     {\n         const uint256& hash = i.second;\n-        CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+        assert(std::addressof(g_chainman.m_blockman) == std::addressof(*this));\n+        CBlockIndex* pindex = LookupBlockIndex(hash);\n         if (pindex) {\n             return pindex;\n         }\n@@ -3509,7 +3509,7 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, BlockValidatio\n         // Don't accept any forks from the main chain prior to last checkpoint.\n         // GetLastCheckpoint finds the last checkpoint in MapCheckpoints that's in our\n         // BlockIndex().\n-        CBlockIndex* pcheckpoint = GetLastCheckpoint(params.Checkpoints());\n+        CBlockIndex* pcheckpoint = g_chainman.m_blockman.GetLastCheckpoint(params.Checkpoints());\n         if (pcheckpoint && nHeight < pcheckpoint->nHeight) {\n             LogPrintf(\"ERROR: %s: forked chain older than last checkpoint (height %d)\\n\", __func__, nHeight);\n             return state.Invalid(BlockValidationResult::BLOCK_CHECKPOINT, \"bad-fork-prior-to-checkpoint\");"
      },
      {
        "sha": "a384be5f899103508534f97bdb876ea577103e5c",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d66fca3cfa891554ed1840df9231de91e60a5f1/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d66fca3cfa891554ed1840df9231de91e60a5f1/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=6d66fca3cfa891554ed1840df9231de91e60a5f1",
        "patch": "@@ -12,6 +12,7 @@\n \n #include <amount.h>\n #include <coins.h>\n+#include <chainparams.h>\n #include <crypto/common.h> // for ReadLE64\n #include <fs.h>\n #include <optional.h>\n@@ -51,6 +52,7 @@ struct ChainTxData;\n struct DisconnectedBlockTransactions;\n struct PrecomputedTransactionData;\n struct LockPoints;\n+struct CCheckpointData;\n \n /** Default for -minrelaytxfee, minimum relay fee for transactions */\n static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;\n@@ -440,6 +442,8 @@ class BlockManager\n     /** Find the last common block between the parameter chain and a locator. */\n     CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    CBlockIndex* GetLastCheckpoint(const CCheckpointData& data) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n     /**\n      * Return the spend height, which is one more than the inputs.GetBestBlock().\n      * While checking, GetBestBlock() refers to the parent block. (protected by cs_main)"
      }
    ]
  },
  {
    "sha": "8f2aadb89fdfe36274743352048382bafb6c389d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjJhYWRiODlmZGZlMzYyNzQ3NDMzNTIwNDgzODJiYWZiNmMzODlk",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-30T20:59:25Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T16:10:05Z"
      },
      "message": "validation: Pass in blockman to ContextualCheckBlockHeader\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.",
      "tree": {
        "sha": "9e6ba07544d37d1fc3c919c18cd20dd3e24bce1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e6ba07544d37d1fc3c919c18cd20dd3e24bce1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f2aadb89fdfe36274743352048382bafb6c389d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl+IdF0ACgkQDMUhUxl5\nkaWcHxAAt2/jLWfSPf3n8Gz4LSh5wT4TlHPCdNBRKNvl+RtjUkBrvDS1am9X1I6L\nxqf5NF25InK+GWbxR4oP9FzTM3kMPjcdOcyFGFFAcp2MubMKamnNcHV0+BiB5kEK\nCgfxKwl7XOHQ83vaUhjnjBNw/e1GYdkydMhKBApbTr/5hvGh2BZKffTJ13+xjggo\n9ynQcKxd133wMPWXJeVsElVZi4OhYymFVi9NikVSXKBgTR5uo9mVK20+4ds1K89B\nXXCgC6owDdAS6qm0oRLtgdeq/TTwB9REQM3FBirQhdNKTykuYASwFarwoBQebvuc\njcaF6zAiDvNeIMunDlYF7El8l+E04hjgdYmSwYf1XiZS8NXQwYGjxkIX0N+SxCIN\nEEsMcLsT0FKeglqVzm7PvbbabhgfzJstOnO0jJKwmJRVfSoj10R+SY6u9UfD5uOY\nmtPCQrtBWJsJnkAb5VN4dBbNQf6D/CSz/ynxW7imSQ6tDY7sK6OrQ/60AIStVQQy\nm1CRG4iXwFeTbtM3K/Y4rAB5ktF4K7+vJIfQh0uVZdwjKmRCUsKiK45rclW+VZfb\nOJGH96ylWY5IV55qeJBVf2cs6YehJIhMecBse+9L7jcdyppo9zKM/IU99QETJ8yY\nTDF0Sjb/LfdOWYgwYzF6aiV/8g2lqV7RcOc5dwJrb2H8LHvOa0A=\n=wT9G\n-----END PGP SIGNATURE-----",
        "payload": "tree 9e6ba07544d37d1fc3c919c18cd20dd3e24bce1d\nparent 6d66fca3cfa891554ed1840df9231de91e60a5f1\nauthor Carl Dong <contact@carldong.me> 1601499565 -0400\ncommitter Carl Dong <contact@carldong.me> 1602778205 -0400\n\nvalidation: Pass in blockman to ContextualCheckBlockHeader\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f2aadb89fdfe36274743352048382bafb6c389d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f2aadb89fdfe36274743352048382bafb6c389d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f2aadb89fdfe36274743352048382bafb6c389d/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d66fca3cfa891554ed1840df9231de91e60a5f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d66fca3cfa891554ed1840df9231de91e60a5f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d66fca3cfa891554ed1840df9231de91e60a5f1"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a8b27295ac3e0fc08d0fafd5fbf635ce76e8b464",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f2aadb89fdfe36274743352048382bafb6c389d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f2aadb89fdfe36274743352048382bafb6c389d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8f2aadb89fdfe36274743352048382bafb6c389d",
        "patch": "@@ -3494,7 +3494,7 @@ CBlockIndex* BlockManager::GetLastCheckpoint(const CCheckpointData& data)\n  *  in ConnectBlock().\n  *  Note that -reindex-chainstate skips the validation that happens here!\n  */\n-static bool ContextualCheckBlockHeader(const CBlockHeader& block, BlockValidationState& state, const CChainParams& params, const CBlockIndex* pindexPrev, int64_t nAdjustedTime) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static bool ContextualCheckBlockHeader(const CBlockHeader& block, BlockValidationState& state, BlockManager& blockman, const CChainParams& params, const CBlockIndex* pindexPrev, int64_t nAdjustedTime) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     assert(pindexPrev != nullptr);\n     const int nHeight = pindexPrev->nHeight + 1;\n@@ -3509,7 +3509,8 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, BlockValidatio\n         // Don't accept any forks from the main chain prior to last checkpoint.\n         // GetLastCheckpoint finds the last checkpoint in MapCheckpoints that's in our\n         // BlockIndex().\n-        CBlockIndex* pcheckpoint = g_chainman.m_blockman.GetLastCheckpoint(params.Checkpoints());\n+        assert(std::addressof(g_chainman.m_blockman) == std::addressof(blockman));\n+        CBlockIndex* pcheckpoint = blockman.GetLastCheckpoint(params.Checkpoints());\n         if (pcheckpoint && nHeight < pcheckpoint->nHeight) {\n             LogPrintf(\"ERROR: %s: forked chain older than last checkpoint (height %d)\\n\", __func__, nHeight);\n             return state.Invalid(BlockValidationResult::BLOCK_CHECKPOINT, \"bad-fork-prior-to-checkpoint\");\n@@ -3660,7 +3661,7 @@ bool BlockManager::AcceptBlockHeader(const CBlockHeader& block, BlockValidationS\n             LogPrintf(\"ERROR: %s: prev block invalid\\n\", __func__);\n             return state.Invalid(BlockValidationResult::BLOCK_INVALID_PREV, \"bad-prevblk\");\n         }\n-        if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n+        if (!ContextualCheckBlockHeader(block, state, *this, chainparams, pindexPrev, GetAdjustedTime()))\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), state.ToString());\n \n         /* Determine if this block descends from any block which has been found\n@@ -3888,7 +3889,7 @@ bool TestBlockValidity(BlockValidationState& state, const CChainParams& chainpar\n     indexDummy.phashBlock = &block_hash;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n-    if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n+    if (!ContextualCheckBlockHeader(block, state, g_chainman.m_blockman, chainparams, pindexPrev, GetAdjustedTime()))\n         return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, state.ToString());\n     if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, state.ToString());"
      }
    ]
  },
  {
    "sha": "867330aedfd4dc12379bc0dcd27c50c26a5ebd9f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjczMzBhZWRmZDRkYzEyMzc5YmMwZGNkMjdjNTBjMjZhNWViZDlm",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-02T20:05:54Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T17:35:02Z"
      },
      "message": "validation: Make CChainState.m_blockman public\n\nAlso guard it with ::cs_main like ChainstateManager does.",
      "tree": {
        "sha": "8bc1cee6e082d14174b245ebe5606401ba1a78e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8bc1cee6e082d14174b245ebe5606401ba1a78e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/867330aedfd4dc12379bc0dcd27c50c26a5ebd9f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl+IiHMACgkQDMUhUxl5\nkaUVIg/+KFh6eFYMa7AkqJfsKLdRjz7LiuzjuzejlEWcHol1+HDQ/ZH6bDq3VwJM\nYnRy/xBE1W+c26aC+RkgViEAP4XsH1aFnIAWMJroYYm2C1kfzSZVdABnKSN7T+gB\n/Eb2sj/OrqKw2S2z/9uVVQuuFcI/GmMzZwvOGw8GWRGHW1GV/wd8sfS2cLtDGy1A\n6ndkA7T4qTuK3rcs8Kfl0Emsl4d2X097LWmjY2ERM1wa0IGhcBpDrgaRvSvtUdpv\nYBnj5Ft+f11W/m5KQe74lh0JQ7jvzXje5ypmHtmMhG5qJv3qcQ3cC69k2Qs6z2ub\nG7ZhK7vO89JRLdCAIR6O7PTK5D3ml8CTz+7aD+G3oosI2+xmOd0fauqdpvS2Knoe\nbDe8sNDbpPMFgkwgT61VFjOo5zhRA5w/dXaeetiJM9aCy+8E5H7FkiEuTnTRi0nQ\nJUkxLjsqH/+9EghtbfN9HO/VgGkyceTvVZJ/GfM8PEYHPLmKkgrz/Js4YPlAXIR4\nSYcRHunNDlksQ50kwZdSKkMNm6nJR8qtglby0xYLcSeQkLtwOCL7DZIoS3oPyrVH\nGccBfTknfRLRKe6tjsNoDKe2sWKdvOxdCxw0hnYarP097YDK9mSe94EFtYXDauYz\nJbdZJsEBHKKy2Q0sm3cyjcErcLkolUSG7Phoxxv0Fhy5tDl2mjQ=\n=SGL7\n-----END PGP SIGNATURE-----",
        "payload": "tree 8bc1cee6e082d14174b245ebe5606401ba1a78e0\nparent 8f2aadb89fdfe36274743352048382bafb6c389d\nauthor Carl Dong <contact@carldong.me> 1599077154 -0400\ncommitter Carl Dong <contact@carldong.me> 1602783302 -0400\n\nvalidation: Make CChainState.m_blockman public\n\nAlso guard it with ::cs_main like ChainstateManager does.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/867330aedfd4dc12379bc0dcd27c50c26a5ebd9f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/867330aedfd4dc12379bc0dcd27c50c26a5ebd9f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/867330aedfd4dc12379bc0dcd27c50c26a5ebd9f/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f2aadb89fdfe36274743352048382bafb6c389d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f2aadb89fdfe36274743352048382bafb6c389d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f2aadb89fdfe36274743352048382bafb6c389d"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "8d24b46bcbe8fd149f1ee56f4d7291619f05a756",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/867330aedfd4dc12379bc0dcd27c50c26a5ebd9f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/867330aedfd4dc12379bc0dcd27c50c26a5ebd9f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=867330aedfd4dc12379bc0dcd27c50c26a5ebd9f",
        "patch": "@@ -1259,8 +1259,8 @@ void CoinsViews::InitCache()\n }\n \n CChainState::CChainState(CTxMemPool& mempool, BlockManager& blockman, uint256 from_snapshot_blockhash)\n-    : m_blockman(blockman),\n-      m_mempool(mempool),\n+    : m_mempool(mempool),\n+      m_blockman(blockman),\n       m_from_snapshot_blockhash(from_snapshot_blockhash) {}\n \n void CChainState::InitCoinsDB("
      },
      {
        "sha": "b3dd9b696623a443c49bf3f3f1ac25c313b01ef7",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/867330aedfd4dc12379bc0dcd27c50c26a5ebd9f/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/867330aedfd4dc12379bc0dcd27c50c26a5ebd9f/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=867330aedfd4dc12379bc0dcd27c50c26a5ebd9f",
        "patch": "@@ -543,18 +543,18 @@ class CChainState {\n      */\n     mutable std::atomic<bool> m_cached_finished_ibd{false};\n \n-    //! Reference to a BlockManager instance which itself is shared across all\n-    //! CChainState instances. Keeping a local reference allows us to test more\n-    //! easily as opposed to referencing a global.\n-    BlockManager& m_blockman;\n-\n     //! mempool that is kept in sync with the chain\n     CTxMemPool& m_mempool;\n \n     //! Manages the UTXO set, which is a reflection of the contents of `m_chain`.\n     std::unique_ptr<CoinsViews> m_coins_views;\n \n public:\n+    //! Reference to a BlockManager instance which itself is shared across all\n+    //! CChainState instances. Keeping a local reference allows us to test more\n+    //! easily as opposed to referencing a global.\n+    BlockManager& m_blockman GUARDED_BY(::cs_main);\n+\n     explicit CChainState(CTxMemPool& mempool, BlockManager& blockman, uint256 from_snapshot_blockhash = uint256());\n \n     /**"
      }
    ]
  },
  {
    "sha": "dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZmRiOWVhYTljMWZmNjI2OTZjMDdjZjM4ZjViN2I3ZWZjY2U4YjJh",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-30T21:02:51Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T17:35:48Z"
      },
      "message": "validation: Pass in chainstate to TestBlockValidity\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.",
      "tree": {
        "sha": "a9a9f90264c66597724895b6b23b17817aaf998e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9a9f90264c66597724895b6b23b17817aaf998e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl+IiHQACgkQDMUhUxl5\nkaXFDBAAt00gYpf8fZy1ZaEaa3ZZaxA3QrtdT5M6+eWMngO/CDW4iN6ktTs3KK7F\nYfdN33KI2pbdYIjcUR8vgYoTwLqQt8e+M4yABaE7TJHS9PiSpk3+iNSKriz7x6ZY\nRnQIe4pyW1BgIHAWlEnDXp1zGqfAxJJXtsBwH8tjz0o/j0sbwd3yooprzrxq1J5p\nylF5BfWfROFABJWBuepEGL0GnfHK4I/AT8+9U/iy3A7w+EE6FpGOT1BrMOzZzrfv\n4WltjUj7I/U4Dv0cnfyBeeA9xg8dp/zrZd6xLVjhfwymBspTF+1xZ+gJYl5ucgpz\nyW8wWq+CmPA/qKcFpvLITBoYGj3JyajoZRHaMs3lsRi2zp4EDSxQwYG44iueechC\n68+xEIuX56LN2XwGb/ggtniyoLA1oBUJBxnmQWZlcpQWflH5wLn1ZdvcZ4WQMHk+\n5HvGhiUYmj+axC8CneLyxuz9qrFOoTXbLh3TEhs2pT36XqMsCj/K/pGE35py++pP\nR0VsJGnSwE4hUloJ17YdJqFW47yP6bGGyEgLWOW94lilu1iYjIg357DPnFu0B+J9\nECc2esNG9NsIjSKgPYlnQbG57tsfoebzQ5h/krwbSnjugAAYQgS2TEvfH8uiACpF\nVpF/+B8Q0JK0B+8ySGEDv2mzbQMzwHodGiY+gZryeIKi/vgd2Wk=\n=/pW3\n-----END PGP SIGNATURE-----",
        "payload": "tree a9a9f90264c66597724895b6b23b17817aaf998e\nparent 867330aedfd4dc12379bc0dcd27c50c26a5ebd9f\nauthor Carl Dong <contact@carldong.me> 1601499771 -0400\ncommitter Carl Dong <contact@carldong.me> 1602783348 -0400\n\nvalidation: Pass in chainstate to TestBlockValidity\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "867330aedfd4dc12379bc0dcd27c50c26a5ebd9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/867330aedfd4dc12379bc0dcd27c50c26a5ebd9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/867330aedfd4dc12379bc0dcd27c50c26a5ebd9f"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 11,
      "deletions": 9
    },
    "files": [
      {
        "sha": "78d2f406e2ebaf5b944a487f561f7b55c7312424",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a",
        "patch": "@@ -176,7 +176,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);\n \n     BlockValidationState state;\n-    if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {\n+    if (!TestBlockValidity(state, chainparams, ::ChainstateActive(), *pblock, pindexPrev, false, false)) {\n         throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, state.ToString()));\n     }\n     int64_t nTime2 = GetTimeMicros();"
      },
      {
        "sha": "718d103c22cd2388827185103377fbbecedfd18b",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a",
        "patch": "@@ -380,7 +380,7 @@ static RPCHelpMan generateblock()\n         LOCK(cs_main);\n \n         BlockValidationState state;\n-        if (!TestBlockValidity(state, chainparams, block, g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock), false, false)) {\n+        if (!TestBlockValidity(state, chainparams, ::ChainstateActive(), block, g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock), false, false)) {\n             throw JSONRPCError(RPC_VERIFY_ERROR, strprintf(\"TestBlockValidity failed: %s\", state.ToString()));\n         }\n     }\n@@ -637,7 +637,7 @@ static RPCHelpMan getblocktemplate()\n             if (block.hashPrevBlock != pindexPrev->GetBlockHash())\n                 return \"inconclusive-not-best-prevblk\";\n             BlockValidationState state;\n-            TestBlockValidity(state, Params(), block, pindexPrev, false, true);\n+            TestBlockValidity(state, Params(), ::ChainstateActive(), block, pindexPrev, false, true);\n             return BIP22ValidationResult(state);\n         }\n "
      },
      {
        "sha": "f5a88e7d575cec3b8a214620992db008970d6a8a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a",
        "patch": "@@ -3877,25 +3877,27 @@ bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const s\n     return true;\n }\n \n-bool TestBlockValidity(BlockValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool TestBlockValidity(BlockValidationState& state, const CChainParams& chainparams, CChainState& chainstate, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     AssertLockHeld(cs_main);\n-    assert(pindexPrev && pindexPrev == ::ChainActive().Tip());\n-    CCoinsViewCache viewNew(&::ChainstateActive().CoinsTip());\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n+    assert(pindexPrev && pindexPrev == chainstate.m_chain.Tip());\n+    CCoinsViewCache viewNew(&chainstate.CoinsTip());\n     uint256 block_hash(block.GetHash());\n     CBlockIndex indexDummy(block);\n     indexDummy.pprev = pindexPrev;\n     indexDummy.nHeight = pindexPrev->nHeight + 1;\n     indexDummy.phashBlock = &block_hash;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n-    if (!ContextualCheckBlockHeader(block, state, g_chainman.m_blockman, chainparams, pindexPrev, GetAdjustedTime()))\n+    assert(std::addressof(g_chainman.m_blockman) == std::addressof(chainstate.m_blockman));\n+    if (!ContextualCheckBlockHeader(block, state, chainstate.m_blockman, chainparams, pindexPrev, GetAdjustedTime()))\n         return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, state.ToString());\n     if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, state.ToString());\n     if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))\n         return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, state.ToString());\n-    if (!::ChainstateActive().ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n+    if (!chainstate.ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n         return false;\n     assert(state.IsValid());\n "
      },
      {
        "sha": "76b9cda349296651b5bde622291bdbf7f55c1672",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a",
        "patch": "@@ -300,7 +300,7 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex* pindex);\n bool CheckBlock(const CBlock& block, BlockValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block) */\n-bool TestBlockValidity(BlockValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+bool TestBlockValidity(BlockValidationState& state, const CChainParams& chainparams, CChainState& chainstate, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Check whether witness commitments are required for a block, and whether to enforce NULLDUMMY (BIP 147) rules.\n  *  Note that transaction witness validation rules are always enforced when P2SH is enforced. */"
      }
    ]
  },
  {
    "sha": "af1e05864588309a50e36c927d343b06a8bfe5ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjFlMDU4NjQ1ODgzMDlhNTBlMzZjOTI3ZDM0M2IwNmE4YmZlNWNl",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-15T20:06:45Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T17:35:49Z"
      },
      "message": "validation: Pass in chainstate to ::NotifyHeaderTip\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.",
      "tree": {
        "sha": "178187fda475a2e1973522cc742f6591ba1c6c51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/178187fda475a2e1973522cc742f6591ba1c6c51"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af1e05864588309a50e36c927d343b06a8bfe5ce",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl+IiHUACgkQDMUhUxl5\nkaUUcw/+K/ZTSs8fBkcpjr2FejthgCVh/w4FQukE3APNCbvO9AXbQ3m7T4NzdRtC\nyX5L5EZdM+k4yp8677+xaVeBa5LpPkoxkHPUCwkGWpMFlSVuNMO1idsbsHcB981U\nIyEd9Foy8LIRviz+tVT+ZzlQ43eyhclEt0RUmDd76KntH3+N90k7J5kJcvjNxLjH\n4aWLacu36AbrVjzeKukUSipUWYTwJWvMElwJB4PpGk4xiXzwR2CuznfNil7lkESx\nYbcnA00HfCopRl8MJ13LzdNndCc4hl1VTmXfI3SI8c7Qip3XEF6aOoeWA4dQhwS1\nvhQRFDGPl+FfNOzjiR2c3FovXMFsrAxeNBdKsxGAvcYIW+WDlrixhbh7FyN5j4Tv\ndNam74sX24QkAanIJgykeI7M2VffGCM+c4lxDGYVJTxTEKZIy6aFPWJo5zovIQJj\npUf7UzCcIDUPWCgu3MHc9/14BQEqh55QM7TVUh2g9fy2HS1jcmGTSPmfKpHVQqRo\noQCxPzUAO6x9hrmEptJhWB2eEDq/qes7lC+QBSaE0q4kljmkGjHfcKDDHu2QyRjN\nMmb5lNnoLOLrb8bzVdAWfKRZfaTerbC5PPlTdhfKivsvvmuOsRbhJJZ2ZpZuIBgg\npFYyX8AnM3TWOBaHxHxTFNvh3H6zsM7Pb8hERI2SGPd6nQQWhmE=\n=aDmT\n-----END PGP SIGNATURE-----",
        "payload": "tree 178187fda475a2e1973522cc742f6591ba1c6c51\nparent dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a\nauthor Carl Dong <contact@carldong.me> 1600200405 -0400\ncommitter Carl Dong <contact@carldong.me> 1602783349 -0400\n\nvalidation: Pass in chainstate to ::NotifyHeaderTip\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af1e05864588309a50e36c927d343b06a8bfe5ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af1e05864588309a50e36c927d343b06a8bfe5ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af1e05864588309a50e36c927d343b06a8bfe5ce/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dfdb9eaa9c1ff62696c07cf38f5b7b7efcce8b2a"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "abd50f5bd319684d919e36a8253e2d2863406f61",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af1e05864588309a50e36c927d343b06a8bfe5ce/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af1e05864588309a50e36c927d343b06a8bfe5ce/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=af1e05864588309a50e36c927d343b06a8bfe5ce",
        "patch": "@@ -2837,7 +2837,7 @@ static SynchronizationState GetSynchronizationState(bool init)\n     return SynchronizationState::INIT_DOWNLOAD;\n }\n \n-static bool NotifyHeaderTip() LOCKS_EXCLUDED(cs_main) {\n+static bool NotifyHeaderTip(CChainState& chainstate) LOCKS_EXCLUDED(cs_main) {\n     bool fNotify = false;\n     bool fInitialBlockDownload = false;\n     static CBlockIndex* pindexHeaderOld = nullptr;\n@@ -2848,7 +2848,8 @@ static bool NotifyHeaderTip() LOCKS_EXCLUDED(cs_main) {\n \n         if (pindexHeader != pindexHeaderOld) {\n             fNotify = true;\n-            fInitialBlockDownload = ::ChainstateActive().IsInitialBlockDownload();\n+            assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n+            fInitialBlockDownload = chainstate.IsInitialBlockDownload();\n             pindexHeaderOld = pindexHeader;\n         }\n     }\n@@ -3732,7 +3733,7 @@ bool ChainstateManager::ProcessNewBlockHeaders(const std::vector<CBlockHeader>&\n             }\n         }\n     }\n-    if (NotifyHeaderTip()) {\n+    if (NotifyHeaderTip(::ChainstateActive())) {\n         if (::ChainstateActive().IsInitialBlockDownload() && ppindex && *ppindex) {\n             LogPrintf(\"Synchronizing blockheaders, height: %d (~%.2f%%)\\n\", (*ppindex)->nHeight, 100.0/((*ppindex)->nHeight+(GetAdjustedTime() - (*ppindex)->GetBlockTime()) / Params().GetConsensus().nPowTargetSpacing) * (*ppindex)->nHeight);\n         }\n@@ -3868,7 +3869,7 @@ bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const s\n         }\n     }\n \n-    NotifyHeaderTip();\n+    NotifyHeaderTip(::ChainstateActive());\n \n     BlockValidationState state; // Only used to report errors, not invalidity - ignore it\n     if (!::ChainstateActive().ActivateBestChain(state, chainparams, pblock))\n@@ -4753,7 +4754,7 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                     }\n                 }\n \n-                NotifyHeaderTip();\n+                NotifyHeaderTip(::ChainstateActive());\n \n                 // Recursively process earlier encountered successors of this block\n                 std::deque<uint256> queue;\n@@ -4779,7 +4780,7 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                         }\n                         range.first++;\n                         mapBlocksUnknownParent.erase(it);\n-                        NotifyHeaderTip();\n+                        NotifyHeaderTip(::ChainstateActive());\n                     }\n                 }\n             } catch (const std::exception& e) {"
      }
    ]
  },
  {
    "sha": "7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTE1YTJjODhlNDllYzY3MTk5OTdlMmNkZDg0ODFkZGQ0ZTdmNmJl",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-15T19:26:36Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T17:35:50Z"
      },
      "message": "validation: Remove global ::ActivateBestChain\n\nInstead use CChainState::ActivateBestChain, which is what the global one\ncalls anyway.",
      "tree": {
        "sha": "b638e6b696418a323d79fb84e20f9847939d3a1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b638e6b696418a323d79fb84e20f9847939d3a1f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl+IiHYACgkQDMUhUxl5\nkaUx2w/9HysBkSMharK/2lqr7iDdmTPYBlLhQGfdpPuCqKZMVSblT1AluthQRgJg\nh1uuQpDt7G155cmBDeBnUH8+WWIJAimPJ7ZTgP8dTCEMrZ6sXqjSbriOzLLC48q6\n5wRBTq4oRWFGSYDIU2QmZhmmxYFZcUsNggY6YjGmBzoEKeY2e6kSEMNPHpGM63Ul\nkgbH0bQr+sYJxy05uPTrk2aJexOifEzjFn63IAVFdXv5u1bjlqEVmYf8mEUIuPVO\n2kldyIKsiTOVtwxUXiUszbJs6WlCNONA3Z8cmxA+sV2keXsZmhQteRqQnZYULb9U\nAZwym0X38lJJ/Kv4OP3e7pqIC/elzpTcOm5smPJw8jWeJw3D7iDZRAE6p4W3bQhR\nKD+kQDjs4AyOu692PBmT9kQCoRXLF8mCosU8xgWPZ3GVhRawwxnulDDRA1QlUBtx\nRHGaQgN2Q6yLCa4VarqUiCYgMNpxuLubH/UdaNBMPN9fW0KvoQaLk4K8efAOZRqg\niPBG+hgIQOP60GHBXZez2HmSC7bH2zWcN0jMfCfMxgM2FxC0hEeLZny9xQCnUFTj\nMRRKsYAT5FMqknb3GNWE6Ew8S48RPIBaLNYeX5sLEsZIeIKKKS8A74ES8GuY/Tq2\nPhYOEe8KeDKbYAuCFH7Io++nJPw6id9IWmvBzD0jjgUzWl/LMOI=\n=jT+M\n-----END PGP SIGNATURE-----",
        "payload": "tree b638e6b696418a323d79fb84e20f9847939d3a1f\nparent af1e05864588309a50e36c927d343b06a8bfe5ce\nauthor Carl Dong <contact@carldong.me> 1600197996 -0400\ncommitter Carl Dong <contact@carldong.me> 1602783350 -0400\n\nvalidation: Remove global ::ActivateBestChain\n\nInstead use CChainState::ActivateBestChain, which is what the global one\ncalls anyway.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af1e05864588309a50e36c927d343b06a8bfe5ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af1e05864588309a50e36c927d343b06a8bfe5ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af1e05864588309a50e36c927d343b06a8bfe5ce"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 9,
      "deletions": 18
    },
    "files": [
      {
        "sha": "b32c256d147f02c89899585e7e771591dda4dfbb",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be",
        "patch": "@@ -1504,7 +1504,7 @@ void static ProcessGetBlockData(CNode& pfrom, const CChainParams& chainparams, c\n     } // release cs_main before calling ActivateBestChain\n     if (need_activate_chain) {\n         BlockValidationState state;\n-        if (!ActivateBestChain(state, chainparams, a_recent_block)) {\n+        if (!::ChainstateActive().ActivateBestChain(state, chainparams, a_recent_block)) {\n             LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", state.ToString());\n         }\n     }\n@@ -2738,7 +2738,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n                 a_recent_block = most_recent_block;\n             }\n             BlockValidationState state;\n-            if (!ActivateBestChain(state, m_chainparams, a_recent_block)) {\n+            if (!::ChainstateActive().ActivateBestChain(state, m_chainparams, a_recent_block)) {\n                 LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", state.ToString());\n             }\n         }"
      },
      {
        "sha": "1d3d771808a2fd608b62a3dbcc0c870b54957f02",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be",
        "patch": "@@ -1587,7 +1587,7 @@ static RPCHelpMan invalidateblock()\n     InvalidateBlock(state, Params(), pblockindex);\n \n     if (state.IsValid()) {\n-        ActivateBestChain(state, Params());\n+        ::ChainstateActive().ActivateBestChain(state, Params());\n     }\n \n     if (!state.IsValid()) {\n@@ -1627,7 +1627,7 @@ static RPCHelpMan reconsiderblock()\n     }\n \n     BlockValidationState state;\n-    ActivateBestChain(state, Params());\n+    ::ChainstateActive().ActivateBestChain(state, Params());\n \n     if (!state.IsValid()) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, state.ToString());"
      },
      {
        "sha": "60016bb0725880d0727baf83e1f71854ab286c2b",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be",
        "patch": "@@ -185,7 +185,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     }\n \n     BlockValidationState state;\n-    if (!ActivateBestChain(state, chainparams)) {\n+    if (!::ChainstateActive().ActivateBestChain(state, chainparams)) {\n         throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n     }\n "
      },
      {
        "sha": "02cc13f735a030a17b7871df4a73e5aeec0fc934",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be",
        "patch": "@@ -2966,10 +2966,6 @@ bool CChainState::ActivateBestChain(BlockValidationState &state, const CChainPar\n     return true;\n }\n \n-bool ActivateBestChain(BlockValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {\n-    return ::ChainstateActive().ActivateBestChain(state, chainparams, std::move(pblock));\n-}\n-\n bool CChainState::PreciousBlock(BlockValidationState& state, const CChainParams& params, CBlockIndex *pindex)\n {\n     {\n@@ -4749,7 +4745,7 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                 // Activate the genesis block so normal node progress can continue\n                 if (hash == chainparams.GetConsensus().hashGenesisBlock) {\n                     BlockValidationState state;\n-                    if (!ActivateBestChain(state, chainparams, nullptr)) {\n+                    if (!::ChainstateActive().ActivateBestChain(state, chainparams, nullptr)) {\n                         break;\n                     }\n                 }"
      },
      {
        "sha": "93d40072b5e149bca8ce0694640b28772d6422f7",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be",
        "patch": "@@ -175,13 +175,6 @@ void ThreadScriptCheck(int worker_num);\n  * @returns                    The tx if found, otherwise nullptr\n  */\n CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMemPool* const mempool, const uint256& hash, const Consensus::Params& consensusParams, uint256& hashBlock);\n-/**\n- * Find the best known block, and make it the tip of the block chain\n- *\n- * May not be called with cs_main held. May not be called in a\n- * validationinterface callback.\n- */\n-bool ActivateBestChain(BlockValidationState& state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock = std::shared_ptr<const CBlock>());\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /** Guess verification progress (as a fraction between 0.0=genesis and 1.0=current tip). */\n@@ -656,6 +649,8 @@ class CChainState {\n     void PruneAndFlush();\n \n     /**\n+     * Find the best known block, and make it the tip of the block chain\n+     *\n      * Make the best chain active, in multiple steps. The result is either failure\n      * or an activated best chain. pblock is either nullptr or a pointer to a block\n      * that is already loaded (to avoid loading it again from disk).\n@@ -672,7 +667,7 @@ class CChainState {\n     bool ActivateBestChain(\n         BlockValidationState& state,\n         const CChainParams& chainparams,\n-        std::shared_ptr<const CBlock> pblock) LOCKS_EXCLUDED(cs_main);\n+        std::shared_ptr<const CBlock> pblock = std::shared_ptr<const CBlock>()) LOCKS_EXCLUDED(cs_main);\n \n     bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, BlockValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n "
      }
    ]
  },
  {
    "sha": "2f2e8a23959ad8f5dcd9d568af0019274a2757df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjJlOGEyMzk1OWFkOGY1ZGNkOWQ1NjhhZjAwMTkyNzRhMjc1N2Rm",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-25T21:17:22Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T17:35:51Z"
      },
      "message": "validation: Move LoadExternalBlockFile to CChainState\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.\n\nLoadExternalBlockFile mainly acts on CChainState.",
      "tree": {
        "sha": "dc5634b381a635606130663d3b203353f845d493",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc5634b381a635606130663d3b203353f845d493"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f2e8a23959ad8f5dcd9d568af0019274a2757df",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl+IiHcACgkQDMUhUxl5\nkaXG+w/9Hw4TgwClFZjpsocC0z0i5+naFOYfpVxjYYQzAlfJXr81WRE0XD3SNLaS\n7cQJnbc9AzZ/0LS2ntiD9JWd45lWIaa0NO7ZLODuGEMWX9aCiLGn8kVGD+AA7QR8\n6wY3BTJFvzJvsCMCPQFyiUWyuOzw9w3jR2goWtwdRZoh6o3tTZxjL3Sll++pQQww\nH+xC2OLVVGHH985/efQSw0XoUsmXWBDL/Y7kxzKcQEisk2ToAYDilGPp4XfevoiG\nG/R8ISBO/u034tcC9zAcej7nt12VdIWKWflyYF9ZlcPlKRfcOHVwfACpLkDPN3gk\n7AsHZYrDFDTlM5OXdQekI0mMmKo0DCaFkq5R/iYP8Gyum1teOXJsTNhvhp7kB3LW\ng1lONq3ZBXDdJAsgrVW4sC5OqNmZOjJ+ETXss6PseW20swycwkVMCGA30dJEcGqK\nhgyHT0kyO89J8ruZga0pt78pHXVD/wmwyr/f61dvQ/UHsISlEmcVJ685RpdfDqpt\n0wObaFaAhpLaGJlx0RWysKW64j0qapG0NI7P145ATniiJWe7QPH0EbKeDvdsCBwr\nVM21q+9b3jW4G/VrKf2R6vSML9grTA8//ssW0CokPNnYRWoFRbmotWlmqcDUWtl8\nEYxSWw/CQu5KSzStRHqG5rpvS1klEyCcBsvVdTlXCAnbXIR9Zww=\n=qJD3\n-----END PGP SIGNATURE-----",
        "payload": "tree dc5634b381a635606130663d3b203353f845d493\nparent 7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be\nauthor Carl Dong <contact@carldong.me> 1598390242 -0400\ncommitter Carl Dong <contact@carldong.me> 1602783351 -0400\n\nvalidation: Move LoadExternalBlockFile to CChainState\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.\n\nLoadExternalBlockFile mainly acts on CChainState.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f2e8a23959ad8f5dcd9d568af0019274a2757df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f2e8a23959ad8f5dcd9d568af0019274a2757df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f2e8a23959ad8f5dcd9d568af0019274a2757df/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 20,
      "deletions": 12
    },
    "files": [
      {
        "sha": "b631281bd6bb9e6916ee202e0508df3d517050e6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f2e8a23959ad8f5dcd9d568af0019274a2757df/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f2e8a23959ad8f5dcd9d568af0019274a2757df/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2f2e8a23959ad8f5dcd9d568af0019274a2757df",
        "patch": "@@ -710,7 +710,7 @@ static void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImp\n             if (!file)\n                 break; // This error is logged in OpenBlockFile\n             LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n-            LoadExternalBlockFile(chainparams, file, &pos);\n+            ::ChainstateActive().LoadExternalBlockFile(chainparams, file, &pos);\n             if (ShutdownRequested()) {\n                 LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n                 return;\n@@ -729,7 +729,7 @@ static void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImp\n         FILE *file = fsbridge::fopen(path, \"rb\");\n         if (file) {\n             LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n-            LoadExternalBlockFile(chainparams, file);\n+            ::ChainstateActive().LoadExternalBlockFile(chainparams, file);\n             if (ShutdownRequested()) {\n                 LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n                 return;"
      },
      {
        "sha": "e6d94f7e0b1e818b745656fdd6f88d9ca543ab6b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f2e8a23959ad8f5dcd9d568af0019274a2757df/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f2e8a23959ad8f5dcd9d568af0019274a2757df/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2f2e8a23959ad8f5dcd9d568af0019274a2757df",
        "patch": "@@ -4670,7 +4670,7 @@ bool LoadGenesisBlock(const CChainParams& chainparams)\n     return ::ChainstateActive().LoadGenesisBlock(chainparams);\n }\n \n-void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos* dbp)\n+void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos* dbp)\n {\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n     static std::multimap<uint256, FlatFilePos> mapBlocksUnknownParent;\n@@ -4719,7 +4719,8 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                 {\n                     LOCK(cs_main);\n                     // detect out of order blocks, and store them for later\n-                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock)) {\n+                    assert(std::addressof(g_chainman.m_blockman) == std::addressof(m_blockman));\n+                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !m_blockman.LookupBlockIndex(block.hashPrevBlock)) {\n                         LogPrint(BCLog::REINDEX, \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n                                 block.hashPrevBlock.ToString());\n                         if (dbp)\n@@ -4728,10 +4729,12 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                     }\n \n                     // process in case the block isn't known yet\n-                    CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+                    assert(std::addressof(g_chainman.m_blockman) == std::addressof(m_blockman));\n+                    CBlockIndex* pindex = m_blockman.LookupBlockIndex(hash);\n                     if (!pindex || (pindex->nStatus & BLOCK_HAVE_DATA) == 0) {\n                       BlockValidationState state;\n-                      if (::ChainstateActive().AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr)) {\n+                      assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n+                      if (AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr)) {\n                           nLoaded++;\n                       }\n                       if (state.IsError()) {\n@@ -4745,12 +4748,14 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                 // Activate the genesis block so normal node progress can continue\n                 if (hash == chainparams.GetConsensus().hashGenesisBlock) {\n                     BlockValidationState state;\n-                    if (!::ChainstateActive().ActivateBestChain(state, chainparams, nullptr)) {\n+                    assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n+                    if (!ActivateBestChain(state, chainparams, nullptr)) {\n                         break;\n                     }\n                 }\n \n-                NotifyHeaderTip(::ChainstateActive());\n+                assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n+                NotifyHeaderTip(*this);\n \n                 // Recursively process earlier encountered successors of this block\n                 std::deque<uint256> queue;\n@@ -4768,15 +4773,17 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                                     head.ToString());\n                             LOCK(cs_main);\n                             BlockValidationState dummy;\n-                            if (::ChainstateActive().AcceptBlock(pblockrecursive, dummy, chainparams, nullptr, true, &it->second, nullptr))\n+                            assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n+                            if (AcceptBlock(pblockrecursive, dummy, chainparams, nullptr, true, &it->second, nullptr))\n                             {\n                                 nLoaded++;\n                                 queue.push_back(pblockrecursive->GetHash());\n                             }\n                         }\n                         range.first++;\n                         mapBlocksUnknownParent.erase(it);\n-                        NotifyHeaderTip(::ChainstateActive());\n+                        assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n+                        NotifyHeaderTip(*this);\n                     }\n                 }\n             } catch (const std::exception& e) {"
      },
      {
        "sha": "a6b285e4d546ba0526ad5333dbdbe85514af829d",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f2e8a23959ad8f5dcd9d568af0019274a2757df/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f2e8a23959ad8f5dcd9d568af0019274a2757df/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=2f2e8a23959ad8f5dcd9d568af0019274a2757df",
        "patch": "@@ -154,8 +154,6 @@ extern const std::vector<std::string> CHECKLEVEL_DOC;\n FILE* OpenBlockFile(const FlatFilePos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */\n fs::path GetBlockPosFilename(const FlatFilePos &pos);\n-/** Import blocks from an external file */\n-void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos* dbp = nullptr);\n /** Ensures we have a genesis block in the block tree, possibly writing one to disk. */\n bool LoadGenesisBlock(const CChainParams& chainparams);\n /** Unload database information */\n@@ -624,6 +622,9 @@ class CChainState {\n     bool ResizeCoinsCaches(size_t coinstip_size, size_t coinsdb_size)\n         EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n+    /** Import blocks from an external file */\n+    void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos* dbp = nullptr);\n+\n     /**\n      * Update the on-disk chain state.\n      * The caches and indexes are flushed depending on the mode we're called with"
      }
    ]
  },
  {
    "sha": "18fab989be1b994f27fd607a12180694c0836337",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOGZhYjk4OWJlMWI5OTRmMjdmZDYwN2ExMjE4MDY5NGMwODM2MzM3",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-26T18:42:01Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T17:35:52Z"
      },
      "message": "validation: Use existing chainstate in ChainstateManager::ProcessNewBlockHeaders\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.",
      "tree": {
        "sha": "1b1b30d6bf8b8e00f34be16d587aa12f61a966db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b1b30d6bf8b8e00f34be16d587aa12f61a966db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18fab989be1b994f27fd607a12180694c0836337",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl+IiHgACgkQDMUhUxl5\nkaVl6hAApbXsNFvAXutXi6Qq5TklNCz8pUt4NuM0bzwdcnx07Y2zkd800PxXDojO\n2pN/OiKYHS7Wu9zeZ4LkrXox5k6pzw49Rr0o4dvv/8TMLITb471pwV8ntYjVzRrR\nOIhnuatdrQYDRcztIx4PpVZBJH4kXbDp55/kvTM5zgJUB+5p6JZ0ZdyadV50EZay\nXcwVARNMdYSFzFlkiJWOPVgjdNc1MDmv3NgHkGczKQRNRt3RlsuIgrtcMd7i+BxY\nI+L9Xu3z/xAhcEvyHbnzgVbGLuTVkt3/LBnCkTAsv8Q1C/nBssg4YZ0WreVQWG62\nlFBvpkwT09+fo4D0Lq+FsN12ujVBmXzUeAnAlayU3+17ZzJ01RNCKW/3aVHNf+70\nq38rz/x3vTKXBVCJC/i6dSO6Ye1pMGbcOYaKtQzNJBXzCGNDV/cVe6BrQV8d9LLe\nUNS6Axju0+QMIUDvna3t5tLMIFVZR88UEOD2Jzs0ifjyEKvI8jb+YVAdHsnhTYPd\nG8XWajk4bym92dD6XadkLkwHqkx3LgHyil7qtyGwM+udd2RCO42qfQit6fjNRTSq\nMH7TmJUstesSrEJXL05iJcpi8Pt4eLqldpacElmcVNj/XpO4K3IKNW0Gjr1VZhlO\nRVTBbANk6Mj4cpVh5ThFynOPB1uIjbq3dfwMIz2tDy9WPeCEa/Y=\n=3QpZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 1b1b30d6bf8b8e00f34be16d587aa12f61a966db\nparent 2f2e8a23959ad8f5dcd9d568af0019274a2757df\nauthor Carl Dong <contact@carldong.me> 1598467321 -0400\ncommitter Carl Dong <contact@carldong.me> 1602783352 -0400\n\nvalidation: Use existing chainstate in ChainstateManager::ProcessNewBlockHeaders\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18fab989be1b994f27fd607a12180694c0836337",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18fab989be1b994f27fd607a12180694c0836337",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18fab989be1b994f27fd607a12180694c0836337/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f2e8a23959ad8f5dcd9d568af0019274a2757df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f2e8a23959ad8f5dcd9d568af0019274a2757df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f2e8a23959ad8f5dcd9d568af0019274a2757df"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "47994a11113fb36503de3f15fea66dd03d1e5ca4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18fab989be1b994f27fd607a12180694c0836337/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18fab989be1b994f27fd607a12180694c0836337/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=18fab989be1b994f27fd607a12180694c0836337",
        "patch": "@@ -3712,14 +3712,15 @@ bool BlockManager::AcceptBlockHeader(const CBlockHeader& block, BlockValidationS\n // Exposed wrapper for AcceptBlockHeader\n bool ChainstateManager::ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, BlockValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex)\n {\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(ActiveChainstate()));\n     AssertLockNotHeld(cs_main);\n     {\n         LOCK(cs_main);\n         for (const CBlockHeader& header : headers) {\n             CBlockIndex *pindex = nullptr; // Use a temp pindex instead of ppindex to avoid a const_cast\n             bool accepted = m_blockman.AcceptBlockHeader(\n                 header, state, chainparams, &pindex);\n-            ::ChainstateActive().CheckBlockIndex(chainparams.GetConsensus());\n+            ActiveChainstate().CheckBlockIndex(chainparams.GetConsensus());\n \n             if (!accepted) {\n                 return false;\n@@ -3729,8 +3730,8 @@ bool ChainstateManager::ProcessNewBlockHeaders(const std::vector<CBlockHeader>&\n             }\n         }\n     }\n-    if (NotifyHeaderTip(::ChainstateActive())) {\n-        if (::ChainstateActive().IsInitialBlockDownload() && ppindex && *ppindex) {\n+    if (NotifyHeaderTip(ActiveChainstate())) {\n+        if (ActiveChainstate().IsInitialBlockDownload() && ppindex && *ppindex) {\n             LogPrintf(\"Synchronizing blockheaders, height: %d (~%.2f%%)\\n\", (*ppindex)->nHeight, 100.0/((*ppindex)->nHeight+(GetAdjustedTime() - (*ppindex)->GetBlockTime()) / Params().GetConsensus().nPowTargetSpacing) * (*ppindex)->nHeight);\n         }\n     }"
      }
    ]
  },
  {
    "sha": "0fc234246f068dfe969ef8ea9461186a857a8b57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmMyMzQyNDZmMDY4ZGZlOTY5ZWY4ZWE5NDYxMTg2YTg1N2E4YjU3",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-26T18:44:47Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T17:35:53Z"
      },
      "message": "validation: Use existing chainman in ChainstateManager::ProcessNewBlock\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.",
      "tree": {
        "sha": "b2e452dfe2af60e75f63b2ab11291d4d96e8dd72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2e452dfe2af60e75f63b2ab11291d4d96e8dd72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fc234246f068dfe969ef8ea9461186a857a8b57",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl+IiHkACgkQDMUhUxl5\nkaV5NA/+KxEtJMdJJIVaGgQW5M28tQiga/RBwN3LVKP6wGDXER4Y/o9YyUUAmZ3/\nMCdwYCcXF6flxHsl50o64dFakc7H/kOIIv2NtXbgYbVDOQoGCTFDDKazr42/1/96\nv6uu6O5ssxeEbA6+UU2HIrLSmNPe2HaTHrYoo/a03C9RHilvTHNYpN9WUNbssZe/\niOho66HLlp7Gf/TdfY5xA4qBFce8VGum3MEF4YSJkhEptxtaqxPsMMR9/G4v/+bg\nzf/rscMGoqL0DRfexIpu34ey7eEpC0T9wygIahQGi7jSaEVpAHYCvQNPTMOmd5Ua\ntTGxjlJabDTSrD4xgAipOHxKxMfS/NGG5dlgxEc5msKbSwF27f+n9RhHbdcSD5Ud\nZe8eBZwy7UUfvqzusiFIRkuGiox+SZ9QwoKmGcGFiws6aArJ067HhynqWaeYRcdw\n7EgeKj9QaQkXA56xqJo/l345QQKbN7yf5TxOqYHptP3JyDoOR5DmB8Z1DzXc9ea2\nWJ/nK7pkXwnqenVfbWpSzMExjoupD9Ponla5MBOpJa4nDA4Axi/9grpRGAuEckf4\n+plxcxzttbjI9VBeonyDWFgYnhZyUonFUbx9k6eQDiuIlxd5iVidZMaEiCCB0aDI\nfvHHRlCR29nWRY3qBYB4CN59E/A6Ek13jjI5gyubZCGl3YfAMgI=\n=4i0U\n-----END PGP SIGNATURE-----",
        "payload": "tree b2e452dfe2af60e75f63b2ab11291d4d96e8dd72\nparent 18fab989be1b994f27fd607a12180694c0836337\nauthor Carl Dong <contact@carldong.me> 1598467487 -0400\ncommitter Carl Dong <contact@carldong.me> 1602783353 -0400\n\nvalidation: Use existing chainman in ChainstateManager::ProcessNewBlock\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fc234246f068dfe969ef8ea9461186a857a8b57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fc234246f068dfe969ef8ea9461186a857a8b57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fc234246f068dfe969ef8ea9461186a857a8b57/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18fab989be1b994f27fd607a12180694c0836337",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18fab989be1b994f27fd607a12180694c0836337",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18fab989be1b994f27fd607a12180694c0836337"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a8dad72efb422ac698b98cc3b6f1d249c71bd785",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fc234246f068dfe969ef8ea9461186a857a8b57/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fc234246f068dfe969ef8ea9461186a857a8b57/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0fc234246f068dfe969ef8ea9461186a857a8b57",
        "patch": "@@ -3843,6 +3843,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(ActiveChainstate()));\n \n     {\n         CBlockIndex *pindex = nullptr;\n@@ -3858,18 +3859,18 @@ bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const s\n         bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = ActiveChainstate().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);\n             return error(\"%s: AcceptBlock FAILED (%s)\", __func__, state.ToString());\n         }\n     }\n \n-    NotifyHeaderTip(::ChainstateActive());\n+    NotifyHeaderTip(ActiveChainstate());\n \n     BlockValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!::ChainstateActive().ActivateBestChain(state, chainparams, pblock))\n+    if (!ActiveChainstate().ActivateBestChain(state, chainparams, pblock))\n         return error(\"%s: ActivateBestChain failed (%s)\", __func__, state.ToString());\n \n     return true;"
      }
    ]
  },
  {
    "sha": "1ce3af385ff0e32dadbbba034ccc2f591d205087",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2UzYWYzODVmZjBlMzJkYWRiYmJhMDM0Y2NjMmY1OTFkMjA1MDg3",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-30T22:08:02Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T17:35:54Z"
      },
      "message": "scripted-diff: Remove review-only assertions\n\n-BEGIN VERIFY SCRIPT-\ngit grep -lwF 'assert(std::addressof' | xargs sed -i -e '/assert(std::addressof/d'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "f8d5c5017802a63a8df6702cf1ecfad1c519cd00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8d5c5017802a63a8df6702cf1ecfad1c519cd00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ce3af385ff0e32dadbbba034ccc2f591d205087",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl+IiHoACgkQDMUhUxl5\nkaW+DA//UDoPrMqMQww+MoQUElQEBl8vm0pH14paJ6J3nt0g0gZ6x0TeqjTEr+K2\ncME9al7FD2BhcxDBUibr24R52IabH2RqDyH9Kxeio94Q+ndi7wePYwNN3fmGee6+\nuTPZuSvEU1ysOrxFXGmTgqaq58lGkDNbzKbRvlctJNGH4vyO5luPE3IldNqyf2pY\nUqVEcihlpYq/xnIu6oqUlGjbyu/0sPsdVDhPNeLm6y7RHr8WAymdMMtTplK9w9tA\nzM8nTOKF6KxPm7c/DlkRD3nSazZVeNs8Y/KhC8zniVVwkezBIYAB83Yfj6BbZrZO\nJ6xWJZi9V9McJk2MHJvEKbkNBKPRSCd0t5NRyiYZyurfswNbnflshibwuubKaMy/\nVCJcOX8qS9V/bK6E74HFiagAiXMR3L1O10N51WI38QnHUGN32FhdQ9ETdgT0q/Sz\nRvAGX8FZT6jx7uAEHqfLSf5aPLXnm1TB3Ub4I6YWF7PP7W5KGkz7E5+qtdnspXFP\nrbl60NMrEv6eRuBq3sbGGOQLxLyEhXiKnIsqIPpw+JRt4Rc7AwerMGbCyaLbLDEl\niDJEU651s+UyiAyMK+l9lgtmF7ZaxunnNEatlgx5peet5/0hbzodfYFsCWINUjEr\nTTFVcCYFibbW6ofDdmFbVAofUbgZTAUFAXSKnnfDE6fkef+KaKs=\n=x2CB\n-----END PGP SIGNATURE-----",
        "payload": "tree f8d5c5017802a63a8df6702cf1ecfad1c519cd00\nparent 0fc234246f068dfe969ef8ea9461186a857a8b57\nauthor Carl Dong <contact@carldong.me> 1601503682 -0400\ncommitter Carl Dong <contact@carldong.me> 1602783354 -0400\n\nscripted-diff: Remove review-only assertions\n\n-BEGIN VERIFY SCRIPT-\ngit grep -lwF 'assert(std::addressof' | xargs sed -i -e '/assert(std::addressof/d'\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ce3af385ff0e32dadbbba034ccc2f591d205087",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ce3af385ff0e32dadbbba034ccc2f591d205087",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ce3af385ff0e32dadbbba034ccc2f591d205087/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fc234246f068dfe969ef8ea9461186a857a8b57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fc234246f068dfe969ef8ea9461186a857a8b57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fc234246f068dfe969ef8ea9461186a857a8b57"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 0,
      "deletions": 17
    },
    "files": [
      {
        "sha": "c643cb133045b49c88e98e221cf7bfa49b624fee",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ce3af385ff0e32dadbbba034ccc2f591d205087/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ce3af385ff0e32dadbbba034ccc2f591d205087/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1ce3af385ff0e32dadbbba034ccc2f591d205087",
        "patch": "@@ -172,7 +172,6 @@ namespace {\n CBlockIndex* BlockManager::LookupBlockIndex(const uint256& hash)\n {\n     AssertLockHeld(cs_main);\n-    assert(std::addressof(g_chainman.BlockIndex()) == std::addressof(m_block_index));\n     BlockMap::const_iterator it = m_block_index.find(hash);\n     return it == m_block_index.end() ? nullptr : it->second;\n }\n@@ -181,7 +180,6 @@ CBlockIndex* BlockManager::FindForkInGlobalIndex(const CChain& chain, const CBlo\n {\n     AssertLockHeld(cs_main);\n \n-    assert(std::addressof(g_chainman.m_blockman) == std::addressof(*this));\n     // Find the latest block common to locator and chain - we expect that\n     // locator.vHave is sorted descending by height.\n     for (const uint256& hash : locator.vHave) {\n@@ -1469,7 +1467,6 @@ bool CScriptCheck::operator()() {\n int BlockManager::GetSpendHeight(const CCoinsViewCache& inputs)\n {\n     AssertLockHeld(cs_main);\n-    assert(std::addressof(g_chainman.m_blockman) == std::addressof(*this));\n     CBlockIndex* pindexPrev = LookupBlockIndex(inputs.GetBestBlock());\n     return pindexPrev->nHeight + 1;\n }\n@@ -2848,7 +2845,6 @@ static bool NotifyHeaderTip(CChainState& chainstate) LOCKS_EXCLUDED(cs_main) {\n \n         if (pindexHeader != pindexHeaderOld) {\n             fNotify = true;\n-            assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n             fInitialBlockDownload = chainstate.IsInitialBlockDownload();\n             pindexHeaderOld = pindexHeader;\n         }\n@@ -3473,7 +3469,6 @@ CBlockIndex* BlockManager::GetLastCheckpoint(const CCheckpointData& data)\n     for (const MapCheckpoints::value_type& i : reverse_iterate(checkpoints))\n     {\n         const uint256& hash = i.second;\n-        assert(std::addressof(g_chainman.m_blockman) == std::addressof(*this));\n         CBlockIndex* pindex = LookupBlockIndex(hash);\n         if (pindex) {\n             return pindex;\n@@ -3506,7 +3501,6 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, BlockValidatio\n         // Don't accept any forks from the main chain prior to last checkpoint.\n         // GetLastCheckpoint finds the last checkpoint in MapCheckpoints that's in our\n         // BlockIndex().\n-        assert(std::addressof(g_chainman.m_blockman) == std::addressof(blockman));\n         CBlockIndex* pcheckpoint = blockman.GetLastCheckpoint(params.Checkpoints());\n         if (pcheckpoint && nHeight < pcheckpoint->nHeight) {\n             LogPrintf(\"ERROR: %s: forked chain older than last checkpoint (height %d)\\n\", __func__, nHeight);\n@@ -3712,7 +3706,6 @@ bool BlockManager::AcceptBlockHeader(const CBlockHeader& block, BlockValidationS\n // Exposed wrapper for AcceptBlockHeader\n bool ChainstateManager::ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, BlockValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex)\n {\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(ActiveChainstate()));\n     AssertLockNotHeld(cs_main);\n     {\n         LOCK(cs_main);\n@@ -3843,7 +3836,6 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(ActiveChainstate()));\n \n     {\n         CBlockIndex *pindex = nullptr;\n@@ -3879,7 +3871,6 @@ bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const s\n bool TestBlockValidity(BlockValidationState& state, const CChainParams& chainparams, CChainState& chainstate, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     AssertLockHeld(cs_main);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n     assert(pindexPrev && pindexPrev == chainstate.m_chain.Tip());\n     CCoinsViewCache viewNew(&chainstate.CoinsTip());\n     uint256 block_hash(block.GetHash());\n@@ -3889,7 +3880,6 @@ bool TestBlockValidity(BlockValidationState& state, const CChainParams& chainpar\n     indexDummy.phashBlock = &block_hash;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n-    assert(std::addressof(g_chainman.m_blockman) == std::addressof(chainstate.m_blockman));\n     if (!ContextualCheckBlockHeader(block, state, chainstate.m_blockman, chainparams, pindexPrev, GetAdjustedTime()))\n         return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, state.ToString());\n     if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n@@ -4721,7 +4711,6 @@ void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* f\n                 {\n                     LOCK(cs_main);\n                     // detect out of order blocks, and store them for later\n-                    assert(std::addressof(g_chainman.m_blockman) == std::addressof(m_blockman));\n                     if (hash != chainparams.GetConsensus().hashGenesisBlock && !m_blockman.LookupBlockIndex(block.hashPrevBlock)) {\n                         LogPrint(BCLog::REINDEX, \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n                                 block.hashPrevBlock.ToString());\n@@ -4731,11 +4720,9 @@ void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* f\n                     }\n \n                     // process in case the block isn't known yet\n-                    assert(std::addressof(g_chainman.m_blockman) == std::addressof(m_blockman));\n                     CBlockIndex* pindex = m_blockman.LookupBlockIndex(hash);\n                     if (!pindex || (pindex->nStatus & BLOCK_HAVE_DATA) == 0) {\n                       BlockValidationState state;\n-                      assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n                       if (AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr)) {\n                           nLoaded++;\n                       }\n@@ -4750,13 +4737,11 @@ void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* f\n                 // Activate the genesis block so normal node progress can continue\n                 if (hash == chainparams.GetConsensus().hashGenesisBlock) {\n                     BlockValidationState state;\n-                    assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n                     if (!ActivateBestChain(state, chainparams, nullptr)) {\n                         break;\n                     }\n                 }\n \n-                assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n                 NotifyHeaderTip(*this);\n \n                 // Recursively process earlier encountered successors of this block\n@@ -4775,7 +4760,6 @@ void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* f\n                                     head.ToString());\n                             LOCK(cs_main);\n                             BlockValidationState dummy;\n-                            assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n                             if (AcceptBlock(pblockrecursive, dummy, chainparams, nullptr, true, &it->second, nullptr))\n                             {\n                                 nLoaded++;\n@@ -4784,7 +4768,6 @@ void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* f\n                         }\n                         range.first++;\n                         mapBlocksUnknownParent.erase(it);\n-                        assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n                         NotifyHeaderTip(*this);\n                     }\n                 }"
      }
    ]
  }
]