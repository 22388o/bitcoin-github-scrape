ajtowns,2018-09-03T08:47:49Z,"The really high fee rates were due to not handling the buckets/bucketMap objects correctly, believe that's fixed now.",https://github.com/bitcoin/bitcoin/pull/13990#issuecomment-418045790,418045790,
ajtowns,2018-09-07T04:39:01Z,"Dropped the WIP tag, this should be good to review/nitpick now.\n\nI couldn't come up with a reasonable way to add functional tests for this change; if someone has a good idea, suggestions/patches welcome :) Though... I guess just generating an estimates file directly in python, pointing bitcoind at it, and seeing what estimates bitcoind comes up with after upgrading it without ever actually put",https://github.com/bitcoin/bitcoin/pull/13990#issuecomment-419320374,419320374,
ajtowns,2019-01-03T15:33:16Z,Reworked based on a suggestion from @Sjors; could still use some functional tests to check that loading a particular set of fee rates produces an expected set of fee estimates.,https://github.com/bitcoin/bitcoin/pull/13990#issuecomment-451178577,451178577,
DrahtBot,2019-01-05T17:38:53Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18766 (Disable fee estimation in blocksonly mode (by removing the fee estimates global) by darosior)\n\nIf you consider t",https://github.com/bitcoin/bitcoin/pull/13990#issuecomment-451674910,451674910,
DrahtBot,2020-03-09T20:35:19Z,"<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 431 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",https://github.com/bitcoin/bitcoin/pull/13990#issuecomment-596765883,596765883,
stevenroose,2020-03-17T16:19:35Z,Is this work abandoned?,https://github.com/bitcoin/bitcoin/pull/13990#issuecomment-600162258,600162258,
Empact,2020-03-18T17:27:59Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/13990#issuecomment-600763548,600763548,
ajtowns,2020-03-19T23:50:38Z,"Had stalled this on writing some tests. Having now written a test, it's found a bug, so now trying to fix that... :)",https://github.com/bitcoin/bitcoin/pull/13990#issuecomment-601467871,601467871,
ajtowns,2020-03-23T04:35:27Z,"Rebased, test case added as first commit, should be reviewable.\n\nNote that this only makes estimations work for fee rates below 1sat/byte if you ever actually accept fee rates that low into your mempool. To make your mempool accept/relay transactions that cheap requires setting `-minrelaytxfee` or changing `DEFAULT_MIN_RELAY_TX_FEE`; and to have your wallet use fees that low means setting`-min",https://github.com/bitcoin/bitcoin/pull/13990#issuecomment-602380326,602380326,
MarcoFalke,2020-03-23T12:31:52Z,"> Doing those things now for mainnet would probably just be a spam vector\n\nAlso open a huge surface for privacy leaks",https://github.com/bitcoin/bitcoin/pull/13990#issuecomment-602562227,602562227,
prayank23,2020-09-29T03:12:36Z,"> Doing those things now for mainnet would probably just be a spam vector, rather than particularly useful IMHO.\n\n@ajtowns what if those things only work if mempool has transactions less than 10 MB and switch to default if greater than 10 MB\n\n> Also open a huge surface for privacy leaks\n\n@MarcoFalke what kind of privacy leaks are possible with such changes? ",https://github.com/bitcoin/bitcoin/pull/13990#issuecomment-700399682,700399682,
DrahtBot,2020-12-07T13:06:13Z,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/13990#issuecomment-739906632,739906632,
prayank23,2020-12-25T01:35:04Z,"Got no response for the last comment. Still trying to understand what can go wrong if fee rate below 1 sat/vByte is allowed\n\nRelated SE questions: https://bitcoin.stackexchange.com/questions/99089/can-we-use-fee-rate-less-than-1-sat-vbyte\n\nhttps://bitcoin.stackexchange.com/questions/99975/what-bitcoin-core-options-can-be-changed-without-a-restart\n\nRelated tweet: https://twitter.com/ped",https://github.com/bitcoin/bitcoin/pull/13990#issuecomment-751142850,751142850,
rebroad,2021-04-15T11:59:01Z,"@ajtowns sorry for the noob-like question, but why is so much code needed to simply reduce the minfee...? I'd have thought it ought to be a one-line change for this. What am I missing?",https://github.com/bitcoin/bitcoin/pull/13990#issuecomment-820367296,820367296,
prayank23,2021-07-29T22:38:16Z,"I had asked a related [question](https://bitcoin.stackexchange.com/questions/100861/why-cant-default-minimum-fee-rate-be-changed-to-0-1-0-2-sat-vbyte) in December 2020. Pieter Wuille answered it with following things:\n\n1. > Why can't we change default minimum fee rate to something below 1 sat/vByte?\n\n> The primary reason for the minimum feerate (and related things like the discard feerate)",https://github.com/bitcoin/bitcoin/pull/13990#issuecomment-889505833,889505833,
Empact,2018-09-01T19:58:41Z,nit: these could go in the initializer list,https://github.com/bitcoin/bitcoin/pull/13990#discussion_r214521982,214521982,src/policy/fees.cpp
Empact,2018-09-01T19:59:22Z,nit: `++dst` here and elsewhere,https://github.com/bitcoin/bitcoin/pull/13990#discussion_r214521993,214521993,src/policy/fees.cpp
Empact,2018-09-01T20:00:40Z,"nit: can move these conditions into the `for`, so that it manages both `src` and `dst`.",https://github.com/bitcoin/bitcoin/pull/13990#discussion_r214522017,214522017,src/policy/fees.cpp
practicalswift,2019-01-07T14:35:33Z,Should be `explicit`?,https://github.com/bitcoin/bitcoin/pull/13990#discussion_r245672691,245672691,src/policy/fees.h
ajtowns,2020-03-23T04:25:11Z,Yep.,https://github.com/bitcoin/bitcoin/pull/13990#discussion_r396207234,396207234,src/policy/fees.h
stevenroose,2020-04-11T18:19:25Z,"It's not very clear to me what these methods are supposed to return. Just from reading the definition, not the implementation.",https://github.com/bitcoin/bitcoin/pull/13990#discussion_r407094503,407094503,src/policy/fees.cpp
stevenroose,2020-04-11T18:20:33Z,For this method it's also not clear what it returns. I suppose either a method's name or documentation should make that clear.,https://github.com/bitcoin/bitcoin/pull/13990#discussion_r407094611,407094611,src/policy/fees.h
stevenroose,2020-04-11T22:00:14Z,"The PR OP says ""8 satoshi"". I don't know if this conflicts with the concept ACKs on the PR.",https://github.com/bitcoin/bitcoin/pull/13990#discussion_r407115498,407115498,src/policy/fees.h
stevenroose,2020-04-11T22:00:51Z,Will `BASE_BUCKET_FEERATE` still be used?,https://github.com/bitcoin/bitcoin/pull/13990#discussion_r407115531,407115531,src/policy/fees.cpp
stevenroose,2020-04-11T22:08:32Z,I would appreciate the documentation on this method to be a little bit more descriptive. IIUC it adds buckets on the lower end from min up to base?,https://github.com/bitcoin/bitcoin/pull/13990#discussion_r407116145,407116145,src/policy/fees.h
stevenroose,2020-04-11T22:24:56Z,"Hmm, I think something weird happened in the separation of the commits. Here you seem to remove the `MIN_BUCKET_FEERATE` constant, while in https://github.com/bitcoin/bitcoin/pull/13990/commits/c68f796c41b9b145c9c1b2c24aea505362ad1b63 you're adding it again.",https://github.com/bitcoin/bitcoin/pull/13990#discussion_r407117574,407117574,src/policy/fees.h
GeneFerneau,2021-07-29T20:07:18Z,"Might be helpful to wrap these return values in an `struct/class enum` with variants that describe the consistency conditions. You could then downcast back to an `int` when doing arithmetic like in `CBlockPlicyEstimator::CheckConsistent`.\n\nThen, in the test cases, check the calls to `CheckConsistent` match the expected variant, instead of just being non-zero.\n\nIf you decide to use an enum,",https://github.com/bitcoin/bitcoin/pull/13990#discussion_r679452662,679452662,src/policy/fees.cpp
