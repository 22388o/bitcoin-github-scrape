jonatack,2020-09-06 10:40:00,"> I'm not sure if it's good idea to return enum's `int` value. If the enum is changed/refactored clients get broken. IMO string is fine and enough.\n\nIf a string was returned, changing the string name would be a breaking change, and string names are likely to be bike-shed or changed. OTOH there is no reason why the enum integer values would ever have to change. The `enum class` itself can separ",https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-687752722,687752722,
jonatack,2020-09-06 11:46:27,"> I think nobody cares about the `int` value\n\nExactly -- no one caring about the `int` value is an advantage. The enum class `int` values can remain stable for the API even if people want to change the enum element naming or order.\n\n> Sending `int` and have this documented is fine too (but the redundant `string` is then unnecessary) \n\nThanks for reviewing and making this better, @proma",https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-687767072,687767072,
jnewbery,2020-09-07 09:57:04,I prefer #19725. We shouldn't leak our internal enum indexes out to a public API (since that locks us into a specific implementation),https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-688214492,688214492,
jonatack,2020-09-07 10:10:26,"> since that locks us into a specific implementation\n\nIf the ConnectionType enum were to be abandoned for a hypothetical different implementation, it would just require adding a method to serialise the ids. For now that's not needed.",https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-688222315,688222315,
promag,2020-09-07 10:12:24,"@jnewbery I've made that point too, but you can also assume that ATM the mapping function used is the identity function.",https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-688223424,688223424,
amitiuttarwar,2020-09-08 04:22:26,"this PR isn't quite a replacement for #19725 because it doesn't include the deprecation of `getpeerinfo.addnode`, or the logging improvement in `net_processing`.\n\nI think the proposal of adding `conn_type` as an integer id is a reasonable proposal, but wanted to clarify the differences for reviewers. I'm personally -0 because I think a string suffices. ",https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-688609431,688609431,
laanwj,2020-09-08 07:36:32,"> I think the proposal of adding conn_type as an integer id is a reasonable proposal, but wanted to clarify the differences for reviewers. I'm personally -0 because I think a string suffices.\n\nI agree here that a string suffices. I don't think it's wise to expose the enumeration IDs on the JSON-RPC interface, as they are an internal implementation detail, and for better or worse (no real enum ",https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-688680739,688680739,
jonatack,2020-09-08 09:29:59,"By any objective technical criteria, ersatz long-format string ids in the place of integer ones seem a substantially worse choice\n\n- code\n- complexity\n- robustness\n- API stability\n- API flexibility for clients\n- memory\n- speed\n- network bandwidth\n- maintainability\n\nin every way maybe an order of magnitude worse.\n\nAn API client can bounds check an integer id, then call a",https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-688744746,688744746,
jonatack,2020-09-08 09:33:23,"The ids can be serialised via a separate method, but that doesn't seem needed here and would just be added complexity for no gain. The enum itself can separate the order and naming from the id values.",https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-688746631,688746631,
jonatack,2020-09-08 09:48:26,"> this PR isn't quite a replacement for #19725 because it doesn't include the deprecation of `getpeerinfo.addnode`, or the logging improvement in `net_processing`.\n\nYes, it's not intended to replace the logging refactoring or the deprecation. I'm -0.9 on both for the reasons I've stated in that PR.",https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-688755114,688755114,
ajtowns,2020-09-19 07:13:52,"> If a string was returned, changing the string name would be a breaking change, and string names are likely to be bike-shed or changed. OTOH there is no reason why the enum integer values would ever have to change\n\nThe addition to getpeerinfo and the logging change is for helping humans understand what's going on, not for interoperability (there's no standard and different behaviours within t",https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-695176599,695176599,
sipa,2020-09-19 07:33:50,"There is precedent for string values for enumerated types too already: the transaction types in `listtransactions` (""receive"", ""send"", ""generate"", ""immature"", ...), and the branch types in `getchaintips` come to mind.",https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-695178387,695178387,
DrahtBot,2020-09-19 13:54:04,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20002 (net, rpc, cli: expose GetNetClass()/ConnectedViaTor() in getpeerinfo, use in -netinfo by jonatack)\n* #19877 ([tes",https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-695216336,695216336,
jonatack,2020-09-20 10:06:04,"> > If a string was returned, changing the string name would be a breaking change, and string names are likely to be bike-shed or changed. OTOH there is no reason why the enum integer values would ever have to change\n> \n> The addition to getpeerinfo and the logging change\n\nUnless I'm mistaken, the logging change would have the same output.\n\n> is for helping humans understand what's goi",https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-695768783,695768783,
jonatack,2020-09-20 10:15:43,"> There is precedent for string values for enumerated types too already: the transaction types in `listtransactions` (""receive"", ""send"", ""generate"", ""immature"", ...), and the branch types in `getchaintips` come to mind.\n\nSure, but like the kebab-case and snake_case config args, precedents may have varying degrees of desirability and relevance.\n\nI wonder if we shouldn't have more separation",https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-695769639,695769639,
michaelfolkson,2020-09-20 11:29:53,"Approach ACK\n\nI can see why some people think this argument is a touch pedantic. But at the very least this isn't a worse approach than #19725 and it is definitely simpler. Plus there appears there could be benefits to this approach downstream.\n\n(PR #19725 could still do the logging refactoring and deprecation. I'm not convinced these are controversial.)",https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-695776376,695776376,
sipa,2020-09-26 01:49:15,"Concept NACK.\n\nI don't think we should be exposing internal enums, as its mapping between numbers and connection type semantics is arbitary. Exposing it via RPC is cementing it in stone, for no good reason. The set of available connection types will change over time, and that will very likely mean that some types that currently exist won't remain.\n\nAs I've pointed out https://github.com/bi",https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-699268816,699268816,
DrahtBot,2020-09-26 17:21:48,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/19883#issuecomment-699523553,699523553,
promag,2020-09-05 17:09:17,Why does this matter?,https://github.com/bitcoin/bitcoin/pull/19883#discussion_r483969092,483969092,src/rpc/net.cpp
jonatack,2020-09-05 17:19:44,"To be sure I'm understanding, the suggestion is to drop ""between 0 and 5""?",https://github.com/bitcoin/bitcoin/pull/19883#discussion_r483970038,483970038,src/rpc/net.cpp
promag,2020-09-05 17:34:43,"No, I'm asking why is this is needed.",https://github.com/bitcoin/bitcoin/pull/19883#discussion_r483971285,483971285,src/rpc/net.cpp
jonatack,2020-09-05 17:39:45,It's explained in the PR description.,https://github.com/bitcoin/bitcoin/pull/19883#discussion_r483971730,483971730,src/rpc/net.cpp
promag,2020-09-06 10:52:52,This is not safe. If you shuffle the enum then this returns bad values.,https://github.com/bitcoin/bitcoin/pull/19883#discussion_r484054237,484054237,src/rpc/net.cpp
promag,2020-09-06 10:53:10,"I think this is complicated and fragile. This assumes `0` to be `ConnectionType::INBOUND` and if the enum is changed then this brakes.\n",https://github.com/bitcoin/bitcoin/pull/19883#discussion_r484054253,484054253,src/rpc/net.cpp
jonatack,2020-09-06 11:33:16,Dropped this field.,https://github.com/bitcoin/bitcoin/pull/19883#discussion_r484058159,484058159,src/rpc/net.cpp
jonatack,2020-09-06 11:33:33,Removed this. Thanks for the feedback.,https://github.com/bitcoin/bitcoin/pull/19883#discussion_r484058188,484058188,src/rpc/net.cpp
