meshcollider,2018-10-12T14:23:45Z,"utACK https://github.com/bitcoin/bitcoin/commit/f8c217b3ac4c8ba7e7143ee8cc2212c43132c94a modulo failing test, just needs a check that the wallet is enabled before running it",https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-429343498,429343498,
jnewbery,2018-10-12T14:36:42Z,Thanks @MeshCollider. The `rpc_deprecated.py` test should be fixed now.,https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-429347823,429347823,
meshcollider,2018-10-12T14:42:59Z,"re-utACK, just note that the whole rpc_deprecated test will be skipped now if the wallet isn't enabled, which is ok for now since this is the only test in it I guess",https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-429349856,429349856,
jnewbery,2018-10-12T15:34:32Z,"> re-utACK, just note that the whole rpc_deprecated test will be skipped now if the wallet isn't enabled, which is ok for now since this is the only test in it I guess\n\nYes. I did consider just silently skipping the individual test case, but I think ""mark the whole test as skipped if part of it is skipped"" makes most sense. The other option ""mark the test as passed even if part of it is skippe",https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-429367103,429367103,
sipa,2018-10-12T19:06:56Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-429429647,429429647,
gmaxwell,2018-10-12T19:50:26Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-429443181,429443181,
achow101,2018-10-12T20:30:42Z,utACK 10c1084d9fc6d4c13ca06bb2ca44088ce9b916ba,https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-429453478,429453478,
jnewbery,2018-10-15T14:51:34Z,Thanks for the review @jimmysong . I've responded to your nits. Hope my explanations make sense.,https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-429885082,429885082,
sipa,2018-10-15T21:25:15Z,utACK 10c1084d9fc6d4c13ca06bb2ca44088ce9b916ba,https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-430019172,430019172,
jnewbery,2018-10-16T15:30:14Z,Addressed @promag's comments,https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-430283731,430283731,
Sjors,2018-10-17T08:46:19Z,"Concept ACK\n\nCan you replace the RPC example `bitcoin-cli generatetoaddress 11 ""myaddress""` with the more useful `bitcoin-cli generatetoaddress 1 $(bitcoin-cli getnewaddress)`? ",https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-430543193,430543193,
jnewbery,2018-10-17T19:03:41Z,"> Can you replace the RPC example bitcoin-cli generatetoaddress 11 ""myaddress"" with the more useful bitcoin-cli generatetoaddress 1 $(bitcoin-cli getnewaddress)?\n\nThat example only works if bitcoind is compiled with a wallet and is running with a single wallet. I don't think it makes sense to make the example so specific.",https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-430750269,430750269,
promag,2018-10-18T00:52:43Z,"> Can you replace the RPC example `bitcoin-cli generatetoaddress 11 ""myaddress""` with the more useful `bitcoin-cli generatetoaddress 1 $(bitcoin-cli getnewaddress)`?\n\n@Sjors sorry, I can't find that, can you link it?",https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-430838170,430838170,
Sjors,2018-10-18T07:04:07Z,"@jnewbery there can be more than one example in the RPC help, but this is the default config and most likely thing someone is looking for if they try regtest for the first time.",https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-430898107,430898107,
promag,2018-10-18T08:59:25Z,"https://github.com/bitcoin/bitcoin/blob/9c5f0d542d1db507b3b9c87bd9de6d0d758d51c1/src/rpc/mining.cpp#L168-L169\n\nI also think this is fine. FWIW I would remove all examples.",https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-430931272,430931272,
jnewbery,2018-10-18T21:48:14Z,I've added a comment to address https://github.com/bitcoin/bitcoin/pull/14468#discussion_r226186019.,https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-431175594,431175594,
promag,2018-10-18T22:42:01Z,Unrelated failure https://travis-ci.org/bitcoin/bitcoin/jobs/443416363. Restarted job.,https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-431188242,431188242,
promag,2018-10-18T23:24:07Z,utACK c9f0295  ðŸ‘‹ generate,https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-431196313,431196313,
MarcoFalke,2018-10-21T03:20:36Z,"utACK c9f02955b2e9062808a9455c4ee7d52cf401eef5, but I'd prefer to not use `skip_test_if_missing_module` for test suites that are not module-specific (e.g. wallet_*.py or interface_zmq_*.py suites).",https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-431635591,431635591,
jnewbery,2018-10-22T14:39:23Z,"> I don't think the whole test should be skipped if there is not wallet compiled in, but rather only the wallet-specific assert_raises_rpc_error should be skipped. This way other tests in this file that are not wallet-specific would run when the wallet is not compiled.\n\nSee earlier comment:\n\n> Yes. I did consider just silently skipping the individual test case, but I think ""mark the whole ",https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-431854873,431854873,
sanket1729,2018-10-23T07:15:37Z,"I locally tested the changes. Everything works correctly. \n\nAlso note that popular tutorials (bitcoin.org and maybe others) start with this RPC as the first example. Giving an additional RPC help output which directly gives new users a copy-paste line might be useful. \n`bitcoin-cli generatetoaddress 1 $(bitcoin-cli getnewaddress)`. \n\nNot a big deal because websites will update eventually",https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-432123902,432123902,
jnewbery,2018-10-23T12:33:46Z,"@Sjors @sanket1729 I've added a hint to use `getnewaddress` to the `generatetoaddress` help text.\n\nI didn't include the `bitcoin-cli generatetoaddress 1 $(bitcoin-cli getnewaddress)` text because that's specific to posix shells.",https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-432227459,432227459,
sanket1729,2018-10-23T17:05:49Z,Tested. ACK ab9aca2bdfe68fcd512955ed2c4d706933088528 .,https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-432334388,432334388,
MarcoFalke,2018-10-23T18:16:49Z,"Fine with me to keep it as is in this pull request for now, but if you disagree with the concept of (silently) skipping subtests if the module required to run them is not available, we should revert #14324 and remove the `is_compiled` helpers, since that seems the only use case of them.",https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-432361063,432361063,
jnewbery,2018-10-23T19:23:50Z,"> ...if you disagree with the concept of (silently) skipping subtests...\n\nI can see the merit in both arguments, and don't feel strongly one way or the other.\n\nI'd prefer to not churn this PR any more, but as I said earlier, happy to change if you feel strongly.",https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-432384888,432384888,
DrahtBot,2018-10-23T22:22:59Z,"<!--e57a25ab6845829454e8d69fc972939a-->Reviewers, this pull request conflicts with the following ones:\n\n* #14502 (Rpc help helper class by karel-3d)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-432443464,432443464,
nopara73,2018-10-24T07:43:10Z,@NicolasDorier you might want to know about this.,https://github.com/bitcoin/bitcoin/pull/14468#issuecomment-432548260,432548260,
jimmysong,2018-10-13T21:34:49Z,Shouldn't the right argument be `+63`?,https://github.com/bitcoin/bitcoin/pull/14468#discussion_r224972744,224972744,test/functional/wallet_basic.py
jimmysong,2018-10-13T21:37:39Z,maybe put the `coinbase_address` as a variable? ,https://github.com/bitcoin/bitcoin/pull/14468#discussion_r224972796,224972796,test/functional/wallet_labels.py
jnewbery,2018-10-15T14:50:07Z,"The memory usage change between these two calls is actually 32.\n\nI'm not entirely sure why `getmemoryinfo` is part of the `wallet_basic` test. How bitcoin core allocates locked memory pages seems purely an implementation detail and shouldn't cause functional wallet tests to fail.\n\nTo minimize the delta in this PR, I changed the equality check to a looser inequality check, but I think this ",https://github.com/bitcoin/bitcoin/pull/14468#discussion_r225195112,225195112,test/functional/wallet_basic.py
jnewbery,2018-10-15T14:50:59Z,The intent here is to have two addresses with 50 bitcoin each (see comment immediately above).,https://github.com/bitcoin/bitcoin/pull/14468#discussion_r225195411,225195411,test/functional/wallet_labels.py
jimmysong,2018-10-15T15:12:38Z,makes sense.,https://github.com/bitcoin/bitcoin/pull/14468#discussion_r225204431,225204431,test/functional/wallet_labels.py
jimmysong,2018-10-15T15:13:13Z,"sounds like a good one for someone to do =).\n\nCurious how the test passed before if it was only 32 bytes?",https://github.com/bitcoin/bitcoin/pull/14468#discussion_r225204659,225204659,test/functional/wallet_basic.py
jnewbery,2018-10-15T15:15:36Z,The difference was 64 bytes before the change to the way the test generates blocks.,https://github.com/bitcoin/bitcoin/pull/14468#discussion_r225205599,225205599,test/functional/wallet_basic.py
jimmysong,2018-10-15T20:54:48Z,makes sense.,https://github.com/bitcoin/bitcoin/pull/14468#discussion_r225313402,225313402,test/functional/wallet_basic.py
laanwj,2018-10-16T10:52:19Z,"I'm not sure I understand this assertion, do we want here  to blanket-ignore exceptions matching these strings?\n\nseems to me that continuing with `generatetoaddress` if this failed is not a good idea",https://github.com/bitcoin/bitcoin/pull/14468#discussion_r225490356,225490356,test/functional/test_framework/test_node.py
promag,2018-10-16T13:25:24Z,Just noting that could use `w5.generatetoaddress` despite the fact this RPC doesn't require a wallet.,https://github.com/bitcoin/bitcoin/pull/14468#discussion_r225537463,225537463,test/functional/wallet_multiwallet.py
promag,2018-10-16T13:25:45Z,IMO drop these comments â€” because it is deprecated code.,https://github.com/bitcoin/bitcoin/pull/14468#discussion_r225537581,225537581,test/functional/wallet_multiwallet.py
promag,2018-10-16T13:28:55Z,"nit, could use same wording as https://github.com/bitcoin/bitcoin/blob/2468471e13987b1be377e1b33fe9c5cdb7a7a3e3/src/wallet/rpcwallet.cpp#L1071",https://github.com/bitcoin/bitcoin/pull/14468#discussion_r225538814,225538814,src/wallet/rpcwallet.cpp
promag,2018-10-16T13:39:21Z,"Only accept `importprivkey` failure if:\n - wallet is disabled\n - there are multiple wallets to import to\n - wallet is locked\n\nIn either case the outcome is the impossibility of spending the coinbase output. And if that's relevant to the test then it would fail for not having enough coins to spend.",https://github.com/bitcoin/bitcoin/pull/14468#discussion_r225543096,225543096,test/functional/test_framework/test_node.py
jnewbery,2018-10-16T15:27:38Z,you're right - these should have been removed,https://github.com/bitcoin/bitcoin/pull/14468#discussion_r225591189,225591189,test/functional/wallet_multiwallet.py
jnewbery,2018-10-16T15:28:49Z,"Yes, that's possible, but I think it's better to call the `generatetoaddress` method on the node endpoint rather than the wallet endoint (since it's a node method).\n\nHowever, I have updated these calls to use the `node` alias rather than `self.nodes[0]` to be mode compact.",https://github.com/bitcoin/bitcoin/pull/14468#discussion_r225591715,225591715,test/functional/wallet_multiwallet.py
jnewbery,2018-10-16T15:29:54Z,I wanted to be explicit that it was the **wallet** method that was being deprecated. Just saying `generate is deprecated` could be interpreted as the node not being able to generate blocks at all.,https://github.com/bitcoin/bitcoin/pull/14468#discussion_r225592329,225592329,src/wallet/rpcwallet.cpp
jnewbery,2018-10-16T15:35:11Z,"@promag is right. This call to `importprivkey` can fail for the three reasons listed.\n\nI think that this is a bit too much magic behind the scenes though. I've tidied up the deterministic priv key import behaviour in another branch here: https://github.com/jnewbery/bitcoin/tree/deprecate_generate2. Rather than complicate this PR and add review burden here, are you happy to leave this as is for",https://github.com/bitcoin/bitcoin/pull/14468#discussion_r225594586,225594586,test/functional/test_framework/test_node.py
laanwj,2018-10-18T06:53:29Z,"@jnewbery yes, I'm okay with that!\nthough for this PR, please add a comment w/ the contents of @promag's post or something like that, so that people reading the code and wondering the same understand",https://github.com/bitcoin/bitcoin/pull/14468#discussion_r226186019,226186019,test/functional/test_framework/test_node.py
jnewbery,2018-10-18T21:47:07Z,Comment added.,https://github.com/bitcoin/bitcoin/pull/14468#discussion_r226476578,226476578,test/functional/test_framework/test_node.py
MarcoFalke,2018-10-21T03:14:06Z,"I don't think the whole test should be skipped if there is not wallet compiled in, but rather only the wallet-specific `assert_raises_rpc_error` should be skipped. This way other tests in this file that are not wallet-specific would run when the wallet is not compiled.",https://github.com/bitcoin/bitcoin/pull/14468#discussion_r226846423,226846423,test/functional/rpc_deprecated.py
