[
  {
    "sha": "9e80356ad861eca2940b88e61417aba060b11dd0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTgwMzU2YWQ4NjFlY2EyOTQwYjg4ZTYxNDE3YWJhMDYwYjExZGQw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-09T20:16:04Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-15T12:02:50Z"
      },
      "message": "[Wallet] refactor and optimize init.cpp/CWallet interaction\n\nReduced wallet/core coupling.\n\n- hides CWalletDB behind CWallet\n- reduces ENABLE_WALLET ifdefs",
      "tree": {
        "sha": "257ecdcc3f7e00716293b22c26cc072637ce4ec3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/257ecdcc3f7e00716293b22c26cc072637ce4ec3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e80356ad861eca2940b88e61417aba060b11dd0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e80356ad861eca2940b88e61417aba060b11dd0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e80356ad861eca2940b88e61417aba060b11dd0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e80356ad861eca2940b88e61417aba060b11dd0/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1fb0e1075f626ea23d832b07b2070e0638f4215",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1fb0e1075f626ea23d832b07b2070e0638f4215",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1fb0e1075f626ea23d832b07b2070e0638f4215"
      }
    ],
    "stats": {
      "total": 569,
      "additions": 321,
      "deletions": 248
    },
    "files": [
      {
        "sha": "11a3a54e9db8da960a7cead5714041754c5b2985",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 231,
        "changes": 270,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e80356ad861eca2940b88e61417aba060b11dd0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e80356ad861eca2940b88e61417aba060b11dd0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9e80356ad861eca2940b88e61417aba060b11dd0",
        "patch": "@@ -28,7 +28,6 @@\n #include \"validationinterface.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet/wallet.h\"\n-#include \"wallet/walletdb.h\"\n #endif\n \n #include <stdint.h>\n@@ -331,26 +330,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n \n #ifdef ENABLE_WALLET\n-    strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n-    strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n-    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\",\n-            FormatMoney(CWallet::minTxFee.GetFeePerK())));\n-    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())));\n-    strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));\n-    strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\"));\n-    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n-    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n-    strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n-    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n-        FormatMoney(maxTxFee)));\n-    strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n-    strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n-    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), true));\n-    strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n-    strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n-        \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n+    CWallet::AppendHelpMessageString(strUsage);\n #endif\n \n     strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n@@ -362,18 +342,16 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", 0));\n         strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\");\n         strUsage += HelpMessageOpt(\"-fuzzmessagestest=<n>\", \"Randomly fuzz 1 of every <n> network messages\");\n-        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n         strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", 0));\n+#ifdef ENABLE_WALLET\n+        CWallet::AppendHelpMessageString(strUsage, true);\n+#endif\n     }\n     string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, net, proxy, prune\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n         _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + _(\"<category> can be:\") + \" \" + debugCategories + \".\");\n-#ifdef ENABLE_WALLET\n-    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n-    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n-#endif\n     strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n     strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1));\n@@ -796,10 +774,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         fPruneMode = true;\n     }\n \n-#ifdef ENABLE_WALLET\n-    bool fDisableWallet = GetBoolArg(\"-disablewallet\", false);\n-#endif\n-\n     nConnectTimeout = GetArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n     if (nConnectTimeout <= 0)\n         nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n@@ -820,47 +794,14 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n #ifdef ENABLE_WALLET\n-    if (mapArgs.count(\"-mintxfee\"))\n-    {\n-        CAmount n = 0;\n-        if (ParseMoney(mapArgs[\"-mintxfee\"], n) && n > 0)\n-            CWallet::minTxFee = CFeeRate(n);\n-        else\n-            return InitError(strprintf(_(\"Invalid amount for -mintxfee=<amount>: '%s'\"), mapArgs[\"-mintxfee\"]));\n-    }\n-    if (mapArgs.count(\"-paytxfee\"))\n-    {\n-        CAmount nFeePerK = 0;\n-        if (!ParseMoney(mapArgs[\"-paytxfee\"], nFeePerK))\n-            return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s'\"), mapArgs[\"-paytxfee\"]));\n-        if (nFeePerK > nHighTransactionFeeWarning)\n-            InitWarning(_(\"Warning: -paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n-        payTxFee = CFeeRate(nFeePerK, 1000);\n-        if (payTxFee < ::minRelayTxFee)\n-        {\n-            return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n-                                       mapArgs[\"-paytxfee\"], ::minRelayTxFee.ToString()));\n-        }\n-    }\n-    if (mapArgs.count(\"-maxtxfee\"))\n-    {\n-        CAmount nMaxFee = 0;\n-        if (!ParseMoney(mapArgs[\"-maxtxfee\"], nMaxFee))\n-            return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s'\"), mapArgs[\"-maptxfee\"]));\n-        if (nMaxFee > nHighTransactionMaxFeeWarning)\n-            InitWarning(_(\"Warning: -maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n-        maxTxFee = nMaxFee;\n-        if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n-        {\n-            return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n-                                       mapArgs[\"-maxtxfee\"], ::minRelayTxFee.ToString()));\n-        }\n-    }\n-    nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n-    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", true);\n-    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", false);\n-\n-    std::string strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n+    std::string warningString, errorString;\n+    \n+    CWallet::MapParameters(warningString, errorString);\n+    \n+    if (!warningString.empty())\n+        InitWarning(warningString);\n+    if (!errorString.empty())\n+        return InitError(errorString);\n #endif // ENABLE_WALLET\n \n     fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", true);\n@@ -879,9 +820,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     std::string strDataDir = GetDataDir().string();\n #ifdef ENABLE_WALLET\n-    // Wallet file must be a plain filename without a directory\n-    if (strWalletFile != boost::filesystem::basename(strWalletFile) + boost::filesystem::extension(strWalletFile))\n-        return InitError(strprintf(_(\"Wallet %s resides outside data directory %s\"), strWalletFile, strDataDir));\n+    errorString.clear();\n+    CWallet::SanityCheck(errorString);\n+    if (!errorString.empty())\n+        return InitError(errorString);\n #endif\n     // Make sure only a single Bitcoin process is using the data directory.\n     boost::filesystem::path pathLockFile = GetDataDir() / \".lock\";\n@@ -905,7 +847,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n     LogPrintf(\"Using OpenSSL version %s\\n\", SSLeay_version(SSLEAY_VERSION));\n #ifdef ENABLE_WALLET\n-    LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n+    CWallet::LogGeneralInfos();\n #endif\n     if (!fLogTimestamps)\n         LogPrintf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()));\n@@ -942,22 +884,20 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // ********************************************************* Step 5: verify wallet database integrity\n #ifdef ENABLE_WALLET\n-    if (!fDisableWallet) {\n-        LogPrintf(\"Using wallet %s\\n\", strWalletFile);\n+    if (!CWallet::IsDisabled()) {\n         uiInterface.InitMessage(_(\"Verifying wallet...\"));\n \n-        std::string warningString;\n-        std::string errorString;\n-\n-        if (!CWallet::Verify(strWalletFile, warningString, errorString))\n+        std::string warningString, errorString;\n+        \n+        if (!CWallet::Verify(warningString, errorString))\n             return false;\n \n         if (!warningString.empty())\n             InitWarning(warningString);\n         if (!errorString.empty())\n-            return InitError(warningString);\n-\n-    } // (!fDisableWallet)\n+            return InitError(errorString);\n+        \n+    }\n #endif // ENABLE_WALLET\n     // ********************************************************* Step 6: network initialization\n \n@@ -1229,154 +1169,23 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // ********************************************************* Step 8: load wallet\n #ifdef ENABLE_WALLET\n-    if (fDisableWallet) {\n+    if (CWallet::IsDisabled()) {\n         pwalletMain = NULL;\n         LogPrintf(\"Wallet disabled!\\n\");\n     } else {\n-\n-        // needed to restore wallet transaction meta data after -zapwallettxes\n-        std::vector<CWalletTx> vWtx;\n-\n-        if (GetBoolArg(\"-zapwallettxes\", false)) {\n-            uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n-\n-            pwalletMain = new CWallet(strWalletFile);\n-            DBErrors nZapWalletRet = pwalletMain->ZapWalletTx(vWtx);\n-            if (nZapWalletRet != DB_LOAD_OK) {\n-                uiInterface.InitMessage(_(\"Error loading wallet.dat: Wallet corrupted\"));\n-                return false;\n-            }\n-\n-            delete pwalletMain;\n-            pwalletMain = NULL;\n-        }\n-\n         uiInterface.InitMessage(_(\"Loading wallet...\"));\n-\n-        nStart = GetTimeMillis();\n-        bool fFirstRun = true;\n-        pwalletMain = new CWallet(strWalletFile);\n-        DBErrors nLoadWalletRet = pwalletMain->LoadWallet(fFirstRun);\n-        if (nLoadWalletRet != DB_LOAD_OK)\n-        {\n-            if (nLoadWalletRet == DB_CORRUPT)\n-                strErrors << _(\"Error loading wallet.dat: Wallet corrupted\") << \"\\n\";\n-            else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n-            {\n-                string msg(_(\"Warning: error reading wallet.dat! All keys read correctly, but transaction data\"\n-                             \" or address book entries might be missing or incorrect.\"));\n-                InitWarning(msg);\n-            }\n-            else if (nLoadWalletRet == DB_TOO_NEW)\n-                strErrors << _(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin Core\") << \"\\n\";\n-            else if (nLoadWalletRet == DB_NEED_REWRITE)\n-            {\n-                strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin Core to complete\") << \"\\n\";\n-                LogPrintf(\"%s\", strErrors.str());\n-                return InitError(strErrors.str());\n-            }\n-            else\n-                strErrors << _(\"Error loading wallet.dat\") << \"\\n\";\n-        }\n-\n-        if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n-        {\n-            int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n-            if (nMaxVersion == 0) // the -upgradewallet without argument case\n-            {\n-                LogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n-                nMaxVersion = CLIENT_VERSION;\n-                pwalletMain->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n-            }\n-            else\n-                LogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n-            if (nMaxVersion < pwalletMain->GetVersion())\n-                strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";\n-            pwalletMain->SetMaxVersion(nMaxVersion);\n-        }\n-\n-        if (fFirstRun)\n-        {\n-            // Create new keyUser and set as default key\n-            RandAddSeedPerfmon();\n-\n-            CPubKey newDefaultKey;\n-            if (pwalletMain->GetKeyFromPool(newDefaultKey)) {\n-                pwalletMain->SetDefaultKey(newDefaultKey);\n-                if (!pwalletMain->SetAddressBook(pwalletMain->vchDefaultKey.GetID(), \"\", \"receive\"))\n-                    strErrors << _(\"Cannot write default address\") << \"\\n\";\n-            }\n-\n-            pwalletMain->SetBestChain(chainActive.GetLocator());\n-        }\n-\n-        LogPrintf(\"%s\", strErrors.str());\n-        LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n-\n-        RegisterValidationInterface(pwalletMain);\n-\n-        CBlockIndex *pindexRescan = chainActive.Tip();\n-        if (GetBoolArg(\"-rescan\", false))\n-            pindexRescan = chainActive.Genesis();\n-        else\n-        {\n-            CWalletDB walletdb(strWalletFile);\n-            CBlockLocator locator;\n-            if (walletdb.ReadBestBlock(locator))\n-                pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n-            else\n-                pindexRescan = chainActive.Genesis();\n-        }\n-        if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n-        {\n-            //We can't rescan beyond non-pruned blocks, stop and throw an error\n-            //this might happen if a user uses a old wallet within a pruned node\n-            // or if he ran -disablewallet for a longer time, then decided to re-enable\n-            if (fPruneMode)\n-            {\n-                CBlockIndex *block = chainActive.Tip();\n-                while (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA) && block->pprev->nTx > 0 && pindexRescan != block)\n-                    block = block->pprev;\n-\n-                if (pindexRescan != block)\n-                    return InitError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\"));\n-            }\n-\n-            uiInterface.InitMessage(_(\"Rescanning...\"));\n-            LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n-            nStart = GetTimeMillis();\n-            pwalletMain->ScanForWalletTransactions(pindexRescan, true);\n-            LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n-            pwalletMain->SetBestChain(chainActive.GetLocator());\n-            nWalletDBUpdated++;\n-\n-            // Restore wallet transaction metadata after -zapwallettxes=1\n-            if (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n-            {\n-                CWalletDB walletdb(strWalletFile);\n-\n-                BOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n-                {\n-                    uint256 hash = wtxOld.GetHash();\n-                    std::map<uint256, CWalletTx>::iterator mi = pwalletMain->mapWallet.find(hash);\n-                    if (mi != pwalletMain->mapWallet.end())\n-                    {\n-                        const CWalletTx* copyFrom = &wtxOld;\n-                        CWalletTx* copyTo = &mi->second;\n-                        copyTo->mapValue = copyFrom->mapValue;\n-                        copyTo->vOrderForm = copyFrom->vOrderForm;\n-                        copyTo->nTimeReceived = copyFrom->nTimeReceived;\n-                        copyTo->nTimeSmart = copyFrom->nTimeSmart;\n-                        copyTo->fFromMe = copyFrom->fFromMe;\n-                        copyTo->strFromAccount = copyFrom->strFromAccount;\n-                        copyTo->nOrderPos = copyFrom->nOrderPos;\n-                        copyTo->WriteToDisk(&walletdb);\n-                    }\n-                }\n-            }\n-        }\n-        pwalletMain->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", true));\n-    } // (!fDisableWallet)\n+        pwalletMain = new CWallet();\n+        \n+        std::string warningString, errorString;\n+        \n+        if(!pwalletMain->LoadWallet(warningString, errorString))\n+            return false;\n+        \n+        if (!warningString.empty())\n+            InitWarning(warningString);\n+        if (!errorString.empty())\n+            return InitError(errorString);\n+    }\n #else // ENABLE_WALLET\n     LogPrintf(\"No wallet support compiled in!\\n\");\n #endif // !ENABLE_WALLET\n@@ -1418,9 +1227,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"mapBlockIndex.size() = %u\\n\",   mapBlockIndex.size());\n     LogPrintf(\"nBestHeight = %d\\n\",                   chainActive.Height());\n #ifdef ENABLE_WALLET\n-    LogPrintf(\"setKeyPool.size() = %u\\n\",      pwalletMain ? pwalletMain->setKeyPool.size() : 0);\n-    LogPrintf(\"mapWallet.size() = %u\\n\",       pwalletMain ? pwalletMain->mapWallet.size() : 0);\n-    LogPrintf(\"mapAddressBook.size() = %u\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n+    if (pwalletMain)\n+        pwalletMain->LogInfos();\n #endif\n \n     StartNode(threadGroup, scheduler);"
      },
      {
        "sha": "2ac19f06d4da729427e2f9d9e7f9e460feb92c32",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e80356ad861eca2940b88e61417aba060b11dd0/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e80356ad861eca2940b88e61417aba060b11dd0/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=9e80356ad861eca2940b88e61417aba060b11dd0",
        "patch": "@@ -54,10 +54,9 @@ TestingSetup::TestingSetup()\n         pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n         InitBlockIndex();\n #ifdef ENABLE_WALLET\n-        bool fFirstRun;\n-        pwalletMain = new CWallet(\"wallet.dat\");\n-        pwalletMain->LoadWallet(fFirstRun);\n-        RegisterValidationInterface(pwalletMain);\n+        std::string warningString, errorString;\n+        pwalletMain = new CWallet();\n+        pwalletMain->LoadWallet(warningString, errorString);\n #endif\n         nScriptCheckThreads = 3;\n         for (int i=0; i < nScriptCheckThreads-1; i++)"
      },
      {
        "sha": "af8cc8e0802aa2a8f917ed1202ca2edd0e117348",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 256,
        "deletions": 11,
        "changes": 267,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e80356ad861eca2940b88e61417aba060b11dd0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e80356ad861eca2940b88e61417aba060b11dd0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9e80356ad861eca2940b88e61417aba060b11dd0",
        "patch": "@@ -348,8 +348,11 @@ void CWallet::Flush(bool shutdown)\n     bitdb.Flush(shutdown);\n }\n \n-bool CWallet::Verify(const string& walletFile, string& warningString, string& errorString)\n+bool CWallet::Verify(string& warningString, string& errorString)\n {\n+    const std::string walletFile = CWallet::GetWalletFile();\n+    LogPrintf(\"Using wallet %s\\n\", walletFile);\n+    \n     if (!bitdb.Open(GetDataDir()))\n     {\n         // try moving the database env out of the way\n@@ -898,6 +901,108 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n     return nChange;\n }\n \n+bool CWallet::IsDisabled()\n+{\n+    return GetBoolArg(\"-disablewallet\", false);\n+}\n+\n+void CWallet::MapParameters(string& warningString, string& errorString)\n+{\n+    if (mapArgs.count(\"-mintxfee\"))\n+    {\n+        CAmount n = 0;\n+        if (ParseMoney(mapArgs[\"-mintxfee\"], n) && n > 0)\n+            CWallet::minTxFee = CFeeRate(n);\n+        else\n+            return InitError(strprintf(_(\"Invalid amount for -mintxfee=<amount>: '%s'\"), mapArgs[\"-mintxfee\"]));\n+    }\n+    if (mapArgs.count(\"-paytxfee\"))\n+    {\n+        CAmount nFeePerK = 0;\n+        if (!ParseMoney(mapArgs[\"-paytxfee\"], nFeePerK))\n+            return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s'\"), mapArgs[\"-paytxfee\"]));\n+        if (nFeePerK > nHighTransactionFeeWarning)\n+            InitWarning(_(\"Warning: -paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n+        payTxFee = CFeeRate(nFeePerK, 1000);\n+        if (payTxFee < ::minRelayTxFee)\n+        {\n+            return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n+                                       mapArgs[\"-paytxfee\"], ::minRelayTxFee.ToString()));\n+        }\n+    }\n+    if (mapArgs.count(\"-maxtxfee\"))\n+    {\n+        CAmount nMaxFee = 0;\n+        if (!ParseMoney(mapArgs[\"-maxtxfee\"], nMaxFee))\n+            return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s'\"), mapArgs[\"-maptxfee\"]));\n+        if (nMaxFee > nHighTransactionMaxFeeWarning)\n+            InitWarning(_(\"Warning: -maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n+        maxTxFee = nMaxFee;\n+        if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n+        {\n+            return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n+                                       mapArgs[\"-maxtxfee\"], ::minRelayTxFee.ToString()));\n+        }\n+    }\n+    nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n+    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", true);\n+    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", false);\n+}\n+\n+std::string CWallet::GetWalletFile()\n+{\n+    return GetArg(\"-wallet\", \"wallet.dat\");\n+}\n+\n+void CWallet::SanityCheck(string& errorString)\n+{\n+    std::string strWalletFile = GetWalletFile();\n+    // Wallet file must be a plain filename without a directory\n+    if (strWalletFile != boost::filesystem::basename(strWalletFile) + boost::filesystem::extension(strWalletFile))\n+        errorString += strprintf(_(\"Wallet %s resides outside data directory\"), strWalletFile);\n+}\n+\n+void CWallet::LogGeneralInfos()\n+{\n+    LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n+}\n+void CWallet::LogInfos() const\n+{\n+    LogPrintf(\"setKeyPool.size() = %u\\n\",      this->setKeyPool.size());\n+    LogPrintf(\"mapWallet.size() = %u\\n\",       this->mapWallet.size());\n+    LogPrintf(\"mapAddressBook.size() = %u\\n\",  this->mapAddressBook.size());\n+}\n+\n+void CWallet::AppendHelpMessageString(std::string& strUsage, bool debug)\n+{\n+    if (debug)\n+    {\n+        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n+        return;\n+    }\n+    strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n+    strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n+    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n+    if (showDebug)\n+        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\",\n+                                                                FormatMoney(CWallet::minTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n+    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n+                                                            FormatMoney(maxTxFee)));\n+    strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n+    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), true));\n+    strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n+    strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n+                               \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n+    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n+}\n int64_t CWalletTx::GetTxTime() const\n {\n     int64_t n = nTimeSmart;\n@@ -2024,13 +2129,35 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n \n \n \n-DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n+bool CWallet::LoadWallet(std::string& warningString, std::string& errorString)\n {\n+    std::string strWalletFile = CWallet::GetWalletFile();\n+    \n+    // needed to restore wallet transaction meta data after -zapwallettxes\n+    std::vector<CWalletTx> vWtx;\n+    \n+    if (GetBoolArg(\"-zapwallettxes\", false)) {\n+        uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n+        \n+        CWallet *tmpWallet = new CWallet(strWalletFile);\n+        DBErrors nZapWalletRet = tmpWallet->ZapWalletTx(vWtx);\n+        if (nZapWalletRet != DB_LOAD_OK) {\n+            uiInterface.InitMessage(_(\"Error loading wallet.dat: Wallet corrupted\"));\n+            return false;\n+        }\n+        \n+        delete tmpWallet;\n+        tmpWallet = NULL;\n+    }\n+    \n+    int64_t nStart = GetTimeMillis();\n+    DBErrors nLoadWallet;\n+    \n     if (!fFileBacked)\n-        return DB_LOAD_OK;\n-    fFirstRunRet = false;\n-    DBErrors nLoadWalletRet = CWalletDB(strWalletFile,\"cr+\").LoadWallet(this);\n-    if (nLoadWalletRet == DB_NEED_REWRITE)\n+        nLoadWallet = DB_LOAD_OK;\n+    bool fFirstRun = false;\n+    nLoadWallet = CWalletDB(strWalletFile,\"cr+\").LoadWallet(this);\n+    if (nLoadWallet == DB_NEED_REWRITE)\n     {\n         if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n         {\n@@ -2042,13 +2169,131 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n         }\n     }\n \n-    if (nLoadWalletRet != DB_LOAD_OK)\n-        return nLoadWalletRet;\n-    fFirstRunRet = !vchDefaultKey.IsValid();\n-\n+    if (nLoadWallet != DB_LOAD_OK)\n+    {\n+        if (nLoadWallet == DB_CORRUPT)\n+            errorString += _(\"Error loading wallet.dat: Wallet corrupted\") + \"\\n\";\n+        else if (nLoadWallet == DB_NONCRITICAL_ERROR)\n+        {\n+            warningString += _(\"Warning: error reading wallet.dat! All keys read correctly, but transaction data\"\n+                                   \" or address book entries might be missing or incorrect.\"); return true;\n+        }\n+        else if (nLoadWallet == DB_TOO_NEW)\n+            errorString += _(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin Core\") + \"\\n\";\n+        else if (nLoadWallet == DB_NEED_REWRITE)\n+        {\n+            errorString += _(\"Wallet needed to be rewritten: restart Bitcoin Core to complete\") + \"\\n\";\n+            LogPrintf(\"%s\", errorString);\n+            return true;\n+        }\n+        else\n+            errorString += _(\"Error loading wallet.dat\") + \"\\n\";\n+    }\n+    fFirstRun = !vchDefaultKey.IsValid();\n     uiInterface.LoadWallet(this);\n+    \n+    if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n+    {\n+        int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n+        if (nMaxVersion == 0) // the -upgradewallet without argument case\n+        {\n+            LogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n+            nMaxVersion = CLIENT_VERSION;\n+            this->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n+        }\n+        else\n+            LogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n+        if (nMaxVersion < this->GetVersion())\n+            errorString += _(\"Cannot downgrade wallet\") + \"\\n\";\n+        this->SetMaxVersion(nMaxVersion);\n+    }\n+    \n+    if (fFirstRun)\n+    {\n+        // Create new keyUser and set as default key\n+        RandAddSeedPerfmon();\n+        \n+        CPubKey newDefaultKey;\n+        if (this->GetKeyFromPool(newDefaultKey)) {\n+            this->SetDefaultKey(newDefaultKey);\n+            if (!this->SetAddressBook(this->vchDefaultKey.GetID(), \"\", \"receive\"))\n+                errorString += _(\"Cannot write default address\") + \"\\n\";\n+        }\n+        \n+        this->SetBestChain(chainActive.GetLocator());\n+    }\n+    \n+    LogPrintf(\"%s\", errorString);\n+    LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n+    \n+    RegisterValidationInterface(this);\n+    \n+    CBlockIndex *pindexRescan = chainActive.Tip();\n+    if (GetBoolArg(\"-rescan\", false))\n+        pindexRescan = chainActive.Genesis();\n+    else\n+    {\n+        CWalletDB walletdb(strWalletFile);\n+        CBlockLocator locator;\n+        if (walletdb.ReadBestBlock(locator))\n+            pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n+        else\n+            pindexRescan = chainActive.Genesis();\n+    }\n+    if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n+    {\n+        //We can't rescan beyond non-pruned blocks, stop and throw an error\n+        //this might happen if a user uses a old wallet within a pruned node\n+        // or if he ran -disablewallet for a longer time, then decided to re-enable\n+        if (fPruneMode)\n+        {\n+            CBlockIndex *block = chainActive.Tip();\n+            while (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA) && block->pprev->nTx > 0 && pindexRescan != block)\n+                block = block->pprev;\n \n-    return DB_LOAD_OK;\n+            if (pindexRescan != block)\n+            {\n+                errorString += _(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\");\n+                return;\n+            }\n+        }\n+\n+        uiInterface.InitMessage(_(\"Rescanning...\"));\n+        LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n+        nStart = GetTimeMillis();\n+        this->ScanForWalletTransactions(pindexRescan, true);\n+        LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n+        this->SetBestChain(chainActive.GetLocator());\n+        nWalletDBUpdated++;\n+        \n+        // Restore wallet transaction metadata after -zapwallettxes=1\n+        if (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n+        {\n+            CWalletDB walletdb(strWalletFile);\n+            \n+            BOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n+            {\n+                uint256 hash = wtxOld.GetHash();\n+                std::map<uint256, CWalletTx>::iterator mi = this->mapWallet.find(hash);\n+                if (mi != this->mapWallet.end())\n+                {\n+                    const CWalletTx* copyFrom = &wtxOld;\n+                    CWalletTx* copyTo = &mi->second;\n+                    copyTo->mapValue = copyFrom->mapValue;\n+                    copyTo->vOrderForm = copyFrom->vOrderForm;\n+                    copyTo->nTimeReceived = copyFrom->nTimeReceived;\n+                    copyTo->nTimeSmart = copyFrom->nTimeSmart;\n+                    copyTo->fFromMe = copyFrom->fFromMe;\n+                    copyTo->strFromAccount = copyFrom->strFromAccount;\n+                    copyTo->nOrderPos = copyFrom->nOrderPos;\n+                    copyTo->WriteToDisk(&walletdb);\n+                }\n+            }\n+        }\n+    }\n+    this->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", true));\n+    \n+    return true;\n }\n \n "
      },
      {
        "sha": "7294db451432d3e179d73253364acd00f0931785",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e80356ad861eca2940b88e61417aba060b11dd0/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e80356ad861eca2940b88e61417aba060b11dd0/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9e80356ad861eca2940b88e61417aba060b11dd0",
        "patch": "@@ -494,6 +494,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CWallet()\n     {\n         SetNull();\n+        \n+        strWalletFile = GetWalletFile();\n+        fFileBacked = true;\n     }\n \n     CWallet(const std::string& strWalletFileIn)\n@@ -660,7 +663,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetChange(const CTransaction& tx) const;\n     void SetBestChain(const CBlockLocator& loc);\n \n-    DBErrors LoadWallet(bool& fFirstRunRet);\n+    bool LoadWallet(std::string& warningString, std::string& errorString);\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n \n     bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);\n@@ -702,8 +705,26 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! Flush wallet (bitdb flush)\n     void Flush(bool shutdown=false);\n \n+    //! Dump wallet infos to log\n+    void LogInfos() const;\n+    static void LogGeneralInfos();\n+    \n     //! Verify the wallet database and perform salvage if required\n-    static bool Verify(const std::string& walletFile, std::string& warningString, std::string& errorString);\n+    static bool Verify(std::string& warningString, std::string& errorString);\n+\n+    static bool IsDisabled();\n+    \n+    //! Map parameters to internal vars\n+    static void MapParameters(std::string& warningString, std::string& errorString);\n+    \n+    //! Get user defined wallet file\n+    static std::string GetWalletFile();\n+    \n+    //! Performs sanity check and appends possible errors to given string\n+    static void SanityCheck(std::string& errorString);\n+    \n+    //! append help text to existing string\n+    static void AppendHelpMessageString(std::string& strUsage, bool debug = false);\n     \n     /** \n      * Address book entry changed."
      }
    ]
  },
  {
    "sha": "294cf336fab984f5a415df594894fda72c4d464b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTRjZjMzNmZhYjk4NGY1YTQxNWRmNTk0ODk0ZmRhNzJjNGQ0NjRi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-30T12:33:02Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-15T12:03:43Z"
      },
      "message": "[squashme] remove whitespace",
      "tree": {
        "sha": "969f5cabe44ebb8affe526c49e1e9e1215889017",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/969f5cabe44ebb8affe526c49e1e9e1215889017"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/294cf336fab984f5a415df594894fda72c4d464b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/294cf336fab984f5a415df594894fda72c4d464b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/294cf336fab984f5a415df594894fda72c4d464b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/294cf336fab984f5a415df594894fda72c4d464b/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e80356ad861eca2940b88e61417aba060b11dd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e80356ad861eca2940b88e61417aba060b11dd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e80356ad861eca2940b88e61417aba060b11dd0"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 32,
      "deletions": 30
    },
    "files": [
      {
        "sha": "3677d7b3b18e0f1b20f6f7bb2e16d468309353be",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/294cf336fab984f5a415df594894fda72c4d464b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/294cf336fab984f5a415df594894fda72c4d464b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=294cf336fab984f5a415df594894fda72c4d464b",
        "patch": "@@ -795,9 +795,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n #ifdef ENABLE_WALLET\n     std::string warningString, errorString;\n-    \n+\n     CWallet::MapParameters(warningString, errorString);\n-    \n+\n     if (!warningString.empty())\n         InitWarning(warningString);\n     if (!errorString.empty())\n@@ -1175,12 +1175,12 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     } else {\n         uiInterface.InitMessage(_(\"Loading wallet...\"));\n         pwalletMain = new CWallet();\n-        \n+\n         std::string warningString, errorString;\n-        \n+\n         if(!pwalletMain->LoadWallet(warningString, errorString))\n             return false;\n-        \n+\n         if (!warningString.empty())\n             InitWarning(warningString);\n         if (!errorString.empty())"
      },
      {
        "sha": "e80b9a675e1c8c6e433604ef340e0cb7696bb58f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 18,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/294cf336fab984f5a415df594894fda72c4d464b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/294cf336fab984f5a415df594894fda72c4d464b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=294cf336fab984f5a415df594894fda72c4d464b",
        "patch": "@@ -352,7 +352,7 @@ bool CWallet::Verify(string& warningString, string& errorString)\n {\n     const std::string walletFile = CWallet::GetWalletFile();\n     LogPrintf(\"Using wallet %s\\n\", walletFile);\n-    \n+\n     if (!bitdb.Open(GetDataDir()))\n     {\n         // try moving the database env out of the way\n@@ -380,7 +380,7 @@ bool CWallet::Verify(string& warningString, string& errorString)\n         if (!CWalletDB::Recover(bitdb, walletFile, true))\n             return false;\n     }\n-    \n+\n     if (boost::filesystem::exists(GetDataDir() / walletFile))\n     {\n         CDBEnv::VerifyResult r = bitdb.Verify(walletFile, CWalletDB::Recover);\n@@ -914,7 +914,10 @@ void CWallet::MapParameters(string& warningString, string& errorString)\n         if (ParseMoney(mapArgs[\"-mintxfee\"], n) && n > 0)\n             CWallet::minTxFee = CFeeRate(n);\n         else\n-            return InitError(strprintf(_(\"Invalid amount for -mintxfee=<amount>: '%s'\"), mapArgs[\"-mintxfee\"]));\n+        {\n+            errorString += strprintf(_(\"Invalid amount for -mintxfee=<amount>: '%s'\"), mapArgs[\"-mintxfee\"]);\n+            return;\n+        }\n     }\n     if (mapArgs.count(\"-paytxfee\"))\n     {\n@@ -2135,24 +2138,24 @@ bool CWallet::LoadWallet(std::string& warningString, std::string& errorString)\n     \n     // needed to restore wallet transaction meta data after -zapwallettxes\n     std::vector<CWalletTx> vWtx;\n-    \n+\n     if (GetBoolArg(\"-zapwallettxes\", false)) {\n         uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n-        \n+\n         CWallet *tmpWallet = new CWallet(strWalletFile);\n         DBErrors nZapWalletRet = tmpWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DB_LOAD_OK) {\n             uiInterface.InitMessage(_(\"Error loading wallet.dat: Wallet corrupted\"));\n             return false;\n         }\n-        \n+\n         delete tmpWallet;\n         tmpWallet = NULL;\n     }\n-    \n+\n     int64_t nStart = GetTimeMillis();\n     DBErrors nLoadWallet;\n-    \n+\n     if (!fFileBacked)\n         nLoadWallet = DB_LOAD_OK;\n     bool fFirstRun = false;\n@@ -2191,7 +2194,7 @@ bool CWallet::LoadWallet(std::string& warningString, std::string& errorString)\n     }\n     fFirstRun = !vchDefaultKey.IsValid();\n     uiInterface.LoadWallet(this);\n-    \n+\n     if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n     {\n         int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n@@ -2207,27 +2210,27 @@ bool CWallet::LoadWallet(std::string& warningString, std::string& errorString)\n             errorString += _(\"Cannot downgrade wallet\") + \"\\n\";\n         this->SetMaxVersion(nMaxVersion);\n     }\n-    \n+\n     if (fFirstRun)\n     {\n         // Create new keyUser and set as default key\n         RandAddSeedPerfmon();\n-        \n+\n         CPubKey newDefaultKey;\n         if (this->GetKeyFromPool(newDefaultKey)) {\n             this->SetDefaultKey(newDefaultKey);\n             if (!this->SetAddressBook(this->vchDefaultKey.GetID(), \"\", \"receive\"))\n                 errorString += _(\"Cannot write default address\") + \"\\n\";\n         }\n-        \n+\n         this->SetBestChain(chainActive.GetLocator());\n     }\n-    \n+\n     LogPrintf(\"%s\", errorString);\n     LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n-    \n+\n     RegisterValidationInterface(this);\n-    \n+\n     CBlockIndex *pindexRescan = chainActive.Tip();\n     if (GetBoolArg(\"-rescan\", false))\n         pindexRescan = chainActive.Genesis();\n@@ -2265,12 +2268,12 @@ bool CWallet::LoadWallet(std::string& warningString, std::string& errorString)\n         LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n         this->SetBestChain(chainActive.GetLocator());\n         nWalletDBUpdated++;\n-        \n+\n         // Restore wallet transaction metadata after -zapwallettxes=1\n         if (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n         {\n             CWalletDB walletdb(strWalletFile);\n-            \n+\n             BOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n             {\n                 uint256 hash = wtxOld.GetHash();\n@@ -2292,7 +2295,7 @@ bool CWallet::LoadWallet(std::string& warningString, std::string& errorString)\n         }\n     }\n     this->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", true));\n-    \n+\n     return true;\n }\n "
      },
      {
        "sha": "cb1961c02daf5960f955e4a171c66fc58a46db35",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/294cf336fab984f5a415df594894fda72c4d464b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/294cf336fab984f5a415df594894fda72c4d464b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=294cf336fab984f5a415df594894fda72c4d464b",
        "patch": "@@ -494,7 +494,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CWallet()\n     {\n         SetNull();\n-        \n+\n         strWalletFile = GetWalletFile();\n         fFileBacked = true;\n     }\n@@ -708,24 +708,23 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! Dump wallet infos to log\n     void LogInfos() const;\n     static void LogGeneralInfos();\n-    \n+\n     //! Verify the wallet database and perform salvage if required\n     static bool Verify(std::string& warningString, std::string& errorString);\n \n     static bool IsDisabled();\n-    \n+\n     //! Map parameters to internal vars\n     static void MapParameters(std::string& warningString, std::string& errorString);\n-    \n+\n     //! Get user defined wallet file\n     static std::string GetWalletFile();\n-    \n+\n     //! Performs sanity check and appends possible errors to given string\n     static void SanityCheck(std::string& errorString);\n-    \n+\n     //! append help text to existing string\n     static void AppendHelpMessageString(std::string& strUsage, bool debug = false);\n-    \n     /** \n      * Address book entry changed.\n      * @note called with lock cs_wallet held."
      }
    ]
  },
  {
    "sha": "95d89aa09efbdf6e2a868c136b39d25db8243000",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWQ4OWFhMDllZmJkZjZlMmE4NjhjMTM2YjM5ZDI1ZGI4MjQzMDAw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-10T20:31:25Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-15T12:03:43Z"
      },
      "message": "[squashme] remove overwriting/bypassing of member variable",
      "tree": {
        "sha": "daccd903f1c236806b19d97234e1753414abe8ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/daccd903f1c236806b19d97234e1753414abe8ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95d89aa09efbdf6e2a868c136b39d25db8243000",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95d89aa09efbdf6e2a868c136b39d25db8243000",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95d89aa09efbdf6e2a868c136b39d25db8243000",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95d89aa09efbdf6e2a868c136b39d25db8243000/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "294cf336fab984f5a415df594894fda72c4d464b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/294cf336fab984f5a415df594894fda72c4d464b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/294cf336fab984f5a415df594894fda72c4d464b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "095b84fabe890d7d7a33c3d8da7bd63009371989",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95d89aa09efbdf6e2a868c136b39d25db8243000/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95d89aa09efbdf6e2a868c136b39d25db8243000/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=95d89aa09efbdf6e2a868c136b39d25db8243000",
        "patch": "@@ -2134,8 +2134,6 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n \n bool CWallet::LoadWallet(std::string& warningString, std::string& errorString)\n {\n-    std::string strWalletFile = CWallet::GetWalletFile();\n-    \n     // needed to restore wallet transaction meta data after -zapwallettxes\n     std::vector<CWalletTx> vWtx;\n "
      }
    ]
  },
  {
    "sha": "fb5b746fce742218ae5d6f285c2936a50897c5db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjViNzQ2ZmNlNzQyMjE4YWU1ZDZmMjg1YzI5MzZhNTA4OTdjNWRi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-08T09:39:52Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-15T12:28:08Z"
      },
      "message": "decouple wallet from core, allow multiple wallets through signaling",
      "tree": {
        "sha": "019734e3f3368c661ced3e959f991d03b9db2e89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/019734e3f3368c661ced3e959f991d03b9db2e89"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb5b746fce742218ae5d6f285c2936a50897c5db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb5b746fce742218ae5d6f285c2936a50897c5db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb5b746fce742218ae5d6f285c2936a50897c5db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb5b746fce742218ae5d6f285c2936a50897c5db/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95d89aa09efbdf6e2a868c136b39d25db8243000",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95d89aa09efbdf6e2a868c136b39d25db8243000",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95d89aa09efbdf6e2a868c136b39d25db8243000"
      }
    ],
    "stats": {
      "total": 608,
      "additions": 374,
      "deletions": 234
    },
    "files": [
      {
        "sha": "ac050f253d1495c4227c7e963d2de8bd3effb476",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb5b746fce742218ae5d6f285c2936a50897c5db/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb5b746fce742218ae5d6f285c2936a50897c5db/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fb5b746fce742218ae5d6f285c2936a50897c5db",
        "patch": "@@ -150,6 +150,8 @@ BITCOIN_CORE_H = \\\n   version.h \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n+  wallet/legacywallet.h \\\n+  wallet/walletdb.h \\\n   wallet/wallet.h \\\n   wallet/wallet_ismine.h \\\n   wallet/walletdb.h\n@@ -197,6 +199,7 @@ libbitcoin_wallet_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_wallet_a_SOURCES = \\\n   wallet/crypter.cpp \\\n   wallet/db.cpp \\\n+  wallet/legacywallet.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/wallet.cpp \\"
      },
      {
        "sha": "5954385d9fe03b286c3766847922b5435e4cd579",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb5b746fce742218ae5d6f285c2936a50897c5db/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb5b746fce742218ae5d6f285c2936a50897c5db/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=fb5b746fce742218ae5d6f285c2936a50897c5db",
        "patch": "@@ -11,6 +11,10 @@\n #include \"scheduler.h\"\n #include \"util.h\"\n \n+#ifdef ENABLE_WALLET\n+#include \"wallet/legacywallet.h\"\n+#endif\n+\n #include <boost/algorithm/string/predicate.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n@@ -66,6 +70,11 @@ bool AppInit(int argc, char* argv[])\n     // If Qt is used, parameters/bitcoin.conf are parsed in qt/bitcoin.cpp's main()\n     ParseParameters(argc, argv);\n \n+    // Register Devices\n+#ifdef ENABLE_WALLET\n+    CLegacyWalletModule::RegisterSignals();\n+#endif\n+    \n     // Process help and version before taking care about datadir\n     if (mapArgs.count(\"-?\") || mapArgs.count(\"-help\") || mapArgs.count(\"-version\"))\n     {\n@@ -163,6 +172,11 @@ bool AppInit(int argc, char* argv[])\n     }\n     Shutdown();\n \n+    // Unregister Devices\n+#ifdef ENABLE_WALLET\n+    CLegacyWalletModule::UnregisterSignals();\n+#endif\n+    \n     return fRet;\n }\n "
      },
      {
        "sha": "b7bc0e52b7f71aaa25899e43db68f2833474cff5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 95,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb5b746fce742218ae5d6f285c2936a50897c5db/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb5b746fce742218ae5d6f285c2936a50897c5db/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fb5b746fce742218ae5d6f285c2936a50897c5db",
        "patch": "@@ -27,7 +27,7 @@\n #include \"utilmoneystr.h\"\n #include \"validationinterface.h\"\n #ifdef ENABLE_WALLET\n-#include \"wallet/wallet.h\"\n+#include \"wallet/legacywallet.h\"\n #endif\n \n #include <stdint.h>\n@@ -48,9 +48,6 @@\n \n using namespace std;\n \n-#ifdef ENABLE_WALLET\n-CWallet* pwalletMain = NULL;\n-#endif\n bool fFeeEstimatesInitialized = false;\n \n #ifdef WIN32\n@@ -152,9 +149,8 @@ void Shutdown()\n     RenameThread(\"bitcoin-shutoff\");\n     mempool.AddTransactionsUpdated(1);\n     StopRPCThreads();\n+    GetMainSignals().ShutdownRPCStopped();\n #ifdef ENABLE_WALLET\n-    if (pwalletMain)\n-        pwalletMain->Flush(false);\n     GenerateBitcoins(false, NULL, 0);\n #endif\n     StopNode();\n@@ -185,10 +181,7 @@ void Shutdown()\n         delete pblocktree;\n         pblocktree = NULL;\n     }\n-#ifdef ENABLE_WALLET\n-    if (pwalletMain)\n-        pwalletMain->Flush(true);\n-#endif\n+    GetMainSignals().ShutdownNodeStopped();\n #ifndef WIN32\n     try {\n         boost::filesystem::remove(GetPidFile());\n@@ -197,10 +190,7 @@ void Shutdown()\n     }\n #endif\n     UnregisterAllValidationInterfaces();\n-#ifdef ENABLE_WALLET\n-    delete pwalletMain;\n-    pwalletMain = NULL;\n-#endif\n+    GetMainSignals().ShutdownFinished();\n     ECC_Stop();\n     LogPrintf(\"%s: done\\n\", __func__);\n }\n@@ -329,9 +319,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitelist=<netmask>\", _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") +\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n \n-#ifdef ENABLE_WALLET\n-    CWallet::AppendHelpMessageString(strUsage);\n-#endif\n+    // Allow validation interfaces to add a string to the help/usage text\n+    GetMainSignals().CreateHelpString(strUsage, false);\n \n     strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n     if (showDebug)\n@@ -343,9 +332,9 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\");\n         strUsage += HelpMessageOpt(\"-fuzzmessagestest=<n>\", \"Randomly fuzz 1 of every <n> network messages\");\n         strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", 0));\n-#ifdef ENABLE_WALLET\n-        CWallet::AppendHelpMessageString(strUsage, true);\n-#endif\n+\n+        // Allow validation interfaces to add a string to the debug help\n+        GetMainSignals().CreateHelpString(strUsage, true);\n     }\n     string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, net, proxy, prune\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n@@ -690,18 +679,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             LogPrintf(\"%s: parameter interaction: -externalip set -> setting -discover=0\\n\", __func__);\n     }\n \n-    if (GetBoolArg(\"-salvagewallet\", false)) {\n-        // Rewrite just private keys: rescan to find transactions\n-        if (SoftSetBoolArg(\"-rescan\", true))\n-            LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n-    }\n-\n-    // -zapwallettx implies a rescan\n-    if (GetBoolArg(\"-zapwallettxes\", false)) {\n-        if (SoftSetBoolArg(\"-rescan\", true))\n-            LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n-    }\n-\n     // Make sure enough file descriptors are available\n     int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n     nMaxConnections = GetArg(\"-maxconnections\", 125);\n@@ -793,16 +770,12 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             return InitError(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), mapArgs[\"-minrelaytxfee\"]));\n     }\n \n-#ifdef ENABLE_WALLET\n     std::string warningString, errorString;\n-\n-    CWallet::MapParameters(warningString, errorString);\n-\n+    GetMainSignals().ParameterInteraction(warningString, errorString);\n     if (!warningString.empty())\n         InitWarning(warningString);\n     if (!errorString.empty())\n         return InitError(errorString);\n-#endif // ENABLE_WALLET\n \n     fIsBareMultisigStd = GetBoolArg(\"-permitbaremultisig\", true);\n     nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n@@ -819,12 +792,13 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         return InitError(_(\"Initialization sanity check failed. Bitcoin Core is shutting down.\"));\n \n     std::string strDataDir = GetDataDir().string();\n-#ifdef ENABLE_WALLET\n+    \n+    // Give registered devices the possibility of init\n     errorString.clear();\n-    CWallet::SanityCheck(errorString);\n+    GetMainSignals().AppInitialization(errorString);\n     if (!errorString.empty())\n         return InitError(errorString);\n-#endif\n+\n     // Make sure only a single Bitcoin process is using the data directory.\n     boost::filesystem::path pathLockFile = GetDataDir() / \".lock\";\n     FILE* file = fopen(pathLockFile.string().c_str(), \"a\"); // empty lock file; created if it doesn't exist.\n@@ -846,9 +820,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n     LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n     LogPrintf(\"Using OpenSSL version %s\\n\", SSLeay_version(SSLEAY_VERSION));\n-#ifdef ENABLE_WALLET\n-    CWallet::LogGeneralInfos();\n-#endif\n+\n+    GetMainSignals().AppInitializationLogHead();\n+\n     if (!fLogTimestamps)\n         LogPrintf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n@@ -882,23 +856,18 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     int64_t nStart;\n \n-    // ********************************************************* Step 5: verify wallet database integrity\n-#ifdef ENABLE_WALLET\n-    if (!CWallet::IsDisabled()) {\n-        uiInterface.InitMessage(_(\"Verifying wallet...\"));\n-\n-        std::string warningString, errorString;\n-        \n-        if (!CWallet::Verify(warningString, errorString))\n-            return false;\n-\n-        if (!warningString.empty())\n-            InitWarning(warningString);\n-        if (!errorString.empty())\n-            return InitError(errorString);\n-        \n-    }\n-#endif // ENABLE_WALLET\n+    // ********************************************************* Step 5: verify integrity of connected devices\n+    warningString.clear();\n+    errorString.clear();\n+    bool stopInit = false;\n+    GetMainSignals().VerifyIntegrity(warningString, errorString, stopInit);\n+    if (stopInit)\n+        return false;\n+    \n+    if (!warningString.empty())\n+    InitWarning(warningString);\n+    if (!errorString.empty())\n+    return InitError(errorString);\n     // ********************************************************* Step 6: network initialization\n \n     RegisterNodeSignals(GetNodeSignals());\n@@ -1167,28 +1136,18 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    // ********************************************************* Step 8: load wallet\n-#ifdef ENABLE_WALLET\n-    if (CWallet::IsDisabled()) {\n-        pwalletMain = NULL;\n-        LogPrintf(\"Wallet disabled!\\n\");\n-    } else {\n-        uiInterface.InitMessage(_(\"Loading wallet...\"));\n-        pwalletMain = new CWallet();\n-\n-        std::string warningString, errorString;\n-\n-        if(!pwalletMain->LoadWallet(warningString, errorString))\n-            return false;\n-\n-        if (!warningString.empty())\n-            InitWarning(warningString);\n-        if (!errorString.empty())\n-            return InitError(errorString);\n-    }\n-#else // ENABLE_WALLET\n-    LogPrintf(\"No wallet support compiled in!\\n\");\n-#endif // !ENABLE_WALLET\n+    // ********************************************************* Step 8: load wallets/modules\n+    warningString.clear();\n+    errorString.clear();\n+    stopInit = false;\n+    GetMainSignals().LoadModules(warningString, errorString, stopInit);\n+    if (stopInit)\n+        return false;\n+    \n+    if (!warningString.empty())\n+    InitWarning(warningString);\n+    if (!errorString.empty())\n+    return InitError(errorString);\n     // ********************************************************* Step 9: import blocks\n \n     if (mapArgs.count(\"-blocknotify\"))\n@@ -1226,12 +1185,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     //// debug print\n     LogPrintf(\"mapBlockIndex.size() = %u\\n\",   mapBlockIndex.size());\n     LogPrintf(\"nBestHeight = %d\\n\",                   chainActive.Height());\n-#ifdef ENABLE_WALLET\n-    if (pwalletMain)\n-        pwalletMain->LogInfos();\n-#endif\n \n     StartNode(threadGroup, scheduler);\n+    GetMainSignals().NodeStarted();\n \n     // Monitor the chain, and alert if we get blocks much quicker or slower than expected\n     int64_t nPowTargetSpacing = Params().GetConsensus().nPowTargetSpacing;\n@@ -1250,15 +1206,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     SetRPCWarmupFinished();\n     uiInterface.InitMessage(_(\"Done loading\"));\n \n-#ifdef ENABLE_WALLET\n-    if (pwalletMain) {\n-        // Add wallet transactions that aren't already in a block to mapTransactions\n-        pwalletMain->ReacceptWalletTransactions();\n-\n-        // Run a thread to flush wallet periodically\n-        threadGroup.create_thread(boost::bind(&ThreadFlushWalletDB, boost::ref(pwalletMain->strWalletFile)));\n-    }\n-#endif\n+    GetMainSignals().FinishInitializing(threadGroup);\n \n     return !fRequestShutdown;\n }"
      },
      {
        "sha": "31ec1fa11d1eab0e4d3449b4a9f4f3e356b8c0f7",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb5b746fce742218ae5d6f285c2936a50897c5db/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb5b746fce742218ae5d6f285c2936a50897c5db/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=fb5b746fce742218ae5d6f285c2936a50897c5db",
        "patch": "@@ -16,8 +16,6 @@ namespace boost\n class thread_group;\n } // namespace boost\n \n-extern CWallet* pwalletMain;\n-\n void StartShutdown();\n bool ShutdownRequested();\n void Shutdown();"
      },
      {
        "sha": "4b435ea4c5d29220fc72f119abc715a7aaf35250",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb5b746fce742218ae5d6f285c2936a50897c5db/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb5b746fce742218ae5d6f285c2936a50897c5db/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=fb5b746fce742218ae5d6f285c2936a50897c5db",
        "patch": "@@ -31,6 +31,7 @@\n #include \"util.h\"\n \n #ifdef ENABLE_WALLET\n+#include \"wallet/legacywallet.h\"\n #include \"wallet/wallet.h\"\n #endif\n "
      },
      {
        "sha": "2e8bd8741e648556375bd329d8c8eb24e95c001d",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb5b746fce742218ae5d6f285c2936a50897c5db/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb5b746fce742218ae5d6f285c2936a50897c5db/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=fb5b746fce742218ae5d6f285c2936a50897c5db",
        "patch": "@@ -13,6 +13,7 @@\n #include \"base58.h\"\n #include \"init.h\"\n #include \"main.h\" // For strMessageMagic\n+#include \"wallet/legacywallet.h\"\n #include \"wallet/wallet.h\"\n \n #include <string>"
      },
      {
        "sha": "524dca1a860e1c356c1767581a592034744be14b",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb5b746fce742218ae5d6f285c2936a50897c5db/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb5b746fce742218ae5d6f285c2936a50897c5db/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=fb5b746fce742218ae5d6f285c2936a50897c5db",
        "patch": "@@ -13,6 +13,7 @@\n #include \"version.h\"\n \n #ifdef ENABLE_WALLET\n+#include \"wallet/legacywallet.h\"\n #include \"wallet/wallet.h\"\n #endif\n "
      },
      {
        "sha": "2b6108ca896fef7292df4497f5aa5ae11ba71903",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb5b746fce742218ae5d6f285c2936a50897c5db/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb5b746fce742218ae5d6f285c2936a50897c5db/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=fb5b746fce742218ae5d6f285c2936a50897c5db",
        "patch": "@@ -17,6 +17,8 @@\n #include \"util.h\"\n #include \"validationinterface.h\"\n #ifdef ENABLE_WALLET\n+#include \"wallet/db.h\"\n+#include \"wallet/legacywallet.h\"\n #include \"wallet/wallet.h\"\n #endif\n "
      },
      {
        "sha": "d78bbb67c4a9cf67a0d8878c9e0b5c398de20f36",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb5b746fce742218ae5d6f285c2936a50897c5db/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb5b746fce742218ae5d6f285c2936a50897c5db/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=fb5b746fce742218ae5d6f285c2936a50897c5db",
        "patch": "@@ -13,6 +13,7 @@\n #include \"timedata.h\"\n #include \"util.h\"\n #ifdef ENABLE_WALLET\n+#include \"wallet/legacywallet.h\"\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\"\n #endif"
      },
      {
        "sha": "de8b09b82c05d4d3a0cc6092f49eab5ac0afd380",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb5b746fce742218ae5d6f285c2936a50897c5db/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb5b746fce742218ae5d6f285c2936a50897c5db/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=fb5b746fce742218ae5d6f285c2936a50897c5db",
        "patch": "@@ -19,6 +19,7 @@\n #include \"script/standard.h\"\n #include \"uint256.h\"\n #ifdef ENABLE_WALLET\n+#include \"wallet/legacywallet.h\"\n #include \"wallet/wallet.h\"\n #endif\n "
      },
      {
        "sha": "83c9a7762545ea3da2a5dfea77a350d3880b9e07",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb5b746fce742218ae5d6f285c2936a50897c5db/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb5b746fce742218ae5d6f285c2936a50897c5db/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=fb5b746fce742218ae5d6f285c2936a50897c5db",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"wallet/legacywallet.h\"\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\"\n "
      },
      {
        "sha": "660e7710b4920c4e0180f78d41dab11a523aa4e5",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb5b746fce742218ae5d6f285c2936a50897c5db/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb5b746fce742218ae5d6f285c2936a50897c5db/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=fb5b746fce742218ae5d6f285c2936a50897c5db",
        "patch": "@@ -14,6 +14,7 @@\n #include \"util.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet/db.h\"\n+#include \"wallet/legacywallet.h\"\n #include \"wallet/wallet.h\"\n #endif\n \n@@ -22,7 +23,7 @@\n #include <boost/thread.hpp>\n \n CClientUIInterface uiInterface; // Declared but not defined in ui_interface.h\n-CWallet* pwalletMain;\n+extern CWallet* pwalletMain;\n \n extern bool fPrintToConsole;\n extern void noui_connect();\n@@ -55,7 +56,7 @@ TestingSetup::TestingSetup()\n         InitBlockIndex();\n #ifdef ENABLE_WALLET\n         std::string warningString, errorString;\n-        pwalletMain = new CWallet();\n+        pwalletMain = new CWallet(CLegacyWalletModule::GetWalletFile());\n         pwalletMain->LoadWallet(warningString, errorString);\n #endif\n         nScriptCheckThreads = 3;"
      },
      {
        "sha": "0f7cc44a3bea18c1effbc44d3744353e1172b2d7",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb5b746fce742218ae5d6f285c2936a50897c5db/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb5b746fce742218ae5d6f285c2936a50897c5db/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=fb5b746fce742218ae5d6f285c2936a50897c5db",
        "patch": "@@ -8,6 +8,11 @@\n \n #include <boost/signals2/signal.hpp>\n \n+namespace boost\n+{\n+    class thread_group;\n+} // namespace boost\n+\n class CBlock;\n struct CBlockLocator;\n class CTransaction;\n@@ -52,6 +57,39 @@ struct CMainSignals {\n     boost::signals2::signal<void (int64_t nBestBlockTime)> Broadcast;\n     /** Notifies listeners of a block validation result */\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    \n+    /** Notifies listeners that the help string gets created where listeners can append characters to the given string */\n+    boost::signals2::signal<void (std::string& strUsage, bool debugHelp)> CreateHelpString;\n+    \n+    /** Notifies listeners that we are in stage of mapping arguments */\n+    boost::signals2::signal<void (std::string& warningString, std::string& errorString)> ParameterInteraction;\n+\n+    /** Notifies listeners that we are in stage of initializing the app (datadir, pid file, etc.) */\n+    boost::signals2::signal<void (std::string& errorString)> AppInitialization;\n+\n+    /** Notifies listeners that now is the time to log startup/env infos */\n+    boost::signals2::signal<void ()> AppInitializationLogHead;\n+    \n+    /** Notifies listeners that now is the time to log startup/env infos */\n+    boost::signals2::signal<void (std::string& warningString, std::string& errorString, bool& stopInit)> VerifyIntegrity;\n+    \n+    /** Notifies listeners that modules should load now */\n+    boost::signals2::signal<void (std::string& warningString, std::string& errorString, bool& stopInit)> LoadModules;\n+    \n+    /** Notifies listeners that the node has just started */\n+    boost::signals2::signal<void ()> NodeStarted;\n+    \n+    /** Notifies listeners that we have successfully initialized */\n+    boost::signals2::signal<void (boost::thread_group&)> FinishInitializing;\n+    \n+    /** Notifies listeners that we are in shutdown state (RPC stopped) */\n+    boost::signals2::signal<void ()> ShutdownRPCStopped;\n+    \n+    /** Notifies listeners that we are in shutdown state (Node stopped) */\n+    boost::signals2::signal<void ()> ShutdownNodeStopped;\n+    \n+    /** Notifies listeners that we are in shutdown state (Node stopped) */\n+    boost::signals2::signal<void ()> ShutdownFinished;\n };\n \n CMainSignals& GetMainSignals();"
      },
      {
        "sha": "6507dcf9c349cb74f23bced9ace124b23d0dae8f",
        "filename": "src/wallet/legacywallet.cpp",
        "status": "added",
        "additions": 233,
        "deletions": 0,
        "changes": 233,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb5b746fce742218ae5d6f285c2936a50897c5db/src/wallet/legacywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb5b746fce742218ae5d6f285c2936a50897c5db/src/wallet/legacywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/legacywallet.cpp?ref=fb5b746fce742218ae5d6f285c2936a50897c5db",
        "patch": "@@ -0,0 +1,233 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/legacywallet.h\"\n+\n+#include \"main.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+#include \"validationinterface.h\"\n+\n+#include <boost/filesystem.hpp>\n+#include <boost/thread.hpp>\n+\n+CWallet* pwalletMain = NULL;\n+\n+const static std::string DEFAULT_WALLET_FILE = \"wallet.dat\";\n+\n+namespace CLegacyWalletModule {\n+\n+std::string GetWalletFile()\n+{\n+    return GetArg(\"-wallet\", DEFAULT_WALLET_FILE);\n+}\n+\n+void AppendHelpMessageString(std::string& strUsage, bool debugHelp)\n+{\n+    if (debugHelp)\n+    {\n+        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n+        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\", FormatMoney(CWallet::minTxFee.GetFeePerK())));\n+        return;\n+    }\n+\n+    strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n+    strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n+    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n+    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n+    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n+                                                            FormatMoney(maxTxFee)));\n+    strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n+    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), true));\n+    strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n+    strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n+                               \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n+    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n+}\n+    \n+void Flush(bool shutdown)\n+{\n+    if (pwalletMain)\n+        pwalletMain->Flush(shutdown);\n+}\n+\n+void Dealloc()\n+{\n+    delete pwalletMain;\n+    pwalletMain = NULL;\n+}\n+\n+//! Dump wallet infos to log\n+void LogGeneralInfos()\n+{\n+    LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n+}\n+\n+//! Dump wallet infos to log\n+void LogInfos()\n+{\n+    LogPrintf(\"setKeyPool.size() = %u\\n\",      pwalletMain ? pwalletMain->setKeyPool.size() : 0);\n+    LogPrintf(\"mapWallet.size() = %u\\n\",       pwalletMain ? pwalletMain->mapWallet.size() : 0);\n+    LogPrintf(\"mapAddressBook.size() = %u\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n+}\n+\n+//! Performs sanity check and appends possible errors to given string\n+void SanityCheck(std::string& errorString)\n+{\n+    std::string strWalletFile = GetWalletFile();\n+    // Wallet file must be a plain filename without a directory\n+    if (strWalletFile != boost::filesystem::basename(strWalletFile) + boost::filesystem::extension(strWalletFile))\n+    errorString += strprintf(_(\"Wallet %s resides outside data directory\"), strWalletFile);\n+}\n+\n+bool IsDisabled()\n+{\n+    return GetBoolArg(\"-disablewallet\", false);\n+}\n+\n+void LoadAsModule(std::string& warningString, std::string& errorString, bool& stopInit)\n+{\n+    if (IsDisabled()) {\n+        pwalletMain = NULL;\n+        LogPrintf(\"Wallet disabled!\\n\");\n+    } else {\n+        uiInterface.InitMessage(_(\"Loading wallet...\"));\n+        pwalletMain = new CWallet(GetWalletFile());\n+        \n+        if (!pwalletMain->LoadWallet(warningString, errorString))\n+            stopInit = true;\n+    }\n+}\n+\n+void Verify(std::string& warningString, std::string& errorString, bool &stopInit)\n+{\n+    if (IsDisabled())\n+        return;\n+    \n+    uiInterface.InitMessage(_(\"Verifying wallet...\"));\n+    \n+    const std::string walletFile = GetWalletFile();\n+    LogPrintf(\"Using wallet %s\\n\", walletFile);\n+    \n+    if (!pwalletMain->Verify(walletFile, warningString, errorString))\n+        stopInit = true;\n+}\n+\n+void MapParameters(std::string& warningString, std::string& errorString)\n+{\n+    if (GetBoolArg(\"-salvagewallet\", false)) {\n+        // Rewrite just private keys: rescan to find transactions\n+        if (SoftSetBoolArg(\"-rescan\", true))\n+            LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n+    }\n+\n+    // -zapwallettx implies a rescan\n+    if (GetBoolArg(\"-zapwallettxes\", false)) {\n+        if (SoftSetBoolArg(\"-rescan\", true))\n+            LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n+    }\n+\n+    if (mapArgs.count(\"-mintxfee\"))\n+    {\n+        CAmount n = 0;\n+        if (ParseMoney(mapArgs[\"-mintxfee\"], n) && n > 0)\n+            CWallet::minTxFee = CFeeRate(n);\n+        else\n+        {\n+            errorString += strprintf(_(\"Invalid amount for -mintxfee=<amount>: '%s'\"), mapArgs[\"-mintxfee\"]);\n+            return;\n+        }\n+    }\n+    if (mapArgs.count(\"-paytxfee\"))\n+    {\n+        CAmount nFeePerK = 0;\n+        if (!ParseMoney(mapArgs[\"-paytxfee\"], nFeePerK))\n+        {\n+            errorString + strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s'\"), mapArgs[\"-paytxfee\"]);\n+            return;\n+        }\n+        if (nFeePerK > nHighTransactionFeeWarning)\n+        {\n+            errorString += _(\"Warning: -paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\");\n+            return;\n+        }\n+        payTxFee = CFeeRate(nFeePerK, 1000);\n+        if (payTxFee < ::minRelayTxFee)\n+        {\n+            errorString += strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n+                                       mapArgs[\"-paytxfee\"], ::minRelayTxFee.ToString());\n+            return;\n+        }\n+    }\n+    if (mapArgs.count(\"-maxtxfee\"))\n+    {\n+        CAmount nMaxFee = 0;\n+        if (!ParseMoney(mapArgs[\"-maxtxfee\"], nMaxFee))\n+        {\n+            errorString += strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s'\"), mapArgs[\"-maptxfee\"]);\n+            return;\n+        }\n+        if (nMaxFee > nHighTransactionMaxFeeWarning)\n+            warningString += _(\"Warning: -maxtxfee is set very high! Fees this large could be paid on a single transaction.\");\n+        maxTxFee = nMaxFee;\n+        if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n+        {\n+            errorString +=  strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"), mapArgs[\"-maxtxfee\"], ::minRelayTxFee.ToString());\n+            return;\n+        }\n+    }\n+    nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n+    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", true);\n+    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", false);\n+}\n+\n+void StartWalletTasks(boost::thread_group& threadGroup)\n+{\n+    if (pwalletMain) {\n+        // Add wallet transactions that aren't already in a block to mapTransactions\n+        pwalletMain->ReacceptWalletTransactions();\n+        \n+        // Run a thread to flush wallet periodically\n+        threadGroup.create_thread(boost::bind(&ThreadFlushWalletDB, boost::ref(pwalletMain->strWalletFile)));\n+    }\n+}\n+    \n+void RegisterSignals()\n+{\n+    GetMainSignals().ShutdownRPCStopped.connect(boost::bind(&Flush, false));\n+    GetMainSignals().ShutdownNodeStopped.connect(boost::bind(&Flush, true));\n+    GetMainSignals().ShutdownFinished.connect(boost::bind(&Dealloc));\n+    GetMainSignals().CreateHelpString.connect(boost::bind(&AppendHelpMessageString, _1, _2));\n+    GetMainSignals().ParameterInteraction.connect(boost::bind(&MapParameters, _1, _2));\n+    GetMainSignals().AppInitialization.connect(boost::bind(&SanityCheck, _1));\n+    GetMainSignals().AppInitializationLogHead.connect(boost::bind(&LogGeneralInfos));\n+    GetMainSignals().VerifyIntegrity.connect(boost::bind(&Verify, _1, _2, _3));\n+    GetMainSignals().LoadModules.connect(boost::bind(&LoadAsModule, _1, _2, _3));\n+    GetMainSignals().NodeStarted.connect(boost::bind(&LogInfos));\n+    GetMainSignals().FinishInitializing.connect(boost::bind(&StartWalletTasks, _1));\n+}\n+\n+void UnregisterSignals()\n+{\n+    GetMainSignals().ShutdownRPCStopped.disconnect(boost::bind(&Flush, false));\n+    GetMainSignals().ShutdownNodeStopped.disconnect(boost::bind(&Flush, true));\n+    GetMainSignals().ShutdownFinished.disconnect(boost::bind(&Dealloc));\n+    GetMainSignals().CreateHelpString.disconnect(boost::bind(&AppendHelpMessageString, _1, _2));\n+    GetMainSignals().ParameterInteraction.disconnect(boost::bind(&MapParameters, _1, _2));\n+    GetMainSignals().AppInitialization.disconnect(boost::bind(&SanityCheck, _1));\n+    GetMainSignals().AppInitializationLogHead.disconnect(boost::bind(&LogGeneralInfos));\n+    GetMainSignals().VerifyIntegrity.disconnect(boost::bind(&Verify, _1, _2, _3));\n+    GetMainSignals().LoadModules.disconnect(boost::bind(&LoadAsModule, _1, _2, _3));\n+    GetMainSignals().NodeStarted.disconnect(boost::bind(&LogInfos));\n+    GetMainSignals().FinishInitializing.disconnect(boost::bind(&StartWalletTasks, _1));\n+}\n+};\n\\ No newline at end of file"
      },
      {
        "sha": "c6dcf1341d5d8c862593957013e6e7fac2b23def",
        "filename": "src/wallet/legacywallet.h",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb5b746fce742218ae5d6f285c2936a50897c5db/src/wallet/legacywallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb5b746fce742218ae5d6f285c2936a50897c5db/src/wallet/legacywallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/legacywallet.h?ref=fb5b746fce742218ae5d6f285c2936a50897c5db",
        "patch": "@@ -0,0 +1,20 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_LEGACYWALLET_H\n+#define BITCOIN_LEGACYWALLET_H\n+\n+#include \"wallet/wallet.h\"\n+\n+extern CWallet* pwalletMain;\n+\n+namespace CLegacyWalletModule {\n+    void RegisterSignals();\n+    void UnregisterSignals();\n+    \n+    std::string GetWalletFile();\n+};\n+\n+#endif // BITCOIN_LEGACYWALLET_H"
      },
      {
        "sha": "99de101943112c647d65d09807a9a9b65aba177a",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb5b746fce742218ae5d6f285c2936a50897c5db/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb5b746fce742218ae5d6f285c2936a50897c5db/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fb5b746fce742218ae5d6f285c2936a50897c5db",
        "patch": "@@ -11,7 +11,7 @@\n #include \"sync.h\"\n #include \"util.h\"\n #include \"utiltime.h\"\n-#include \"wallet.h\"\n+#include \"wallet/legacywallet.h\"\n \n #include <fstream>\n #include <stdint.h>"
      },
      {
        "sha": "1854bc90bcda7b4788376ee7c98469779db37e92",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb5b746fce742218ae5d6f285c2936a50897c5db/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb5b746fce742218ae5d6f285c2936a50897c5db/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fb5b746fce742218ae5d6f285c2936a50897c5db",
        "patch": "@@ -14,6 +14,7 @@\n #include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n+#include \"legacywallet.h\"\n #include \"wallet.h\"\n #include \"walletdb.h\"\n "
      },
      {
        "sha": "6d7f32d8af0beb75b27246b3a68afe50b162e409",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 115,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb5b746fce742218ae5d6f285c2936a50897c5db/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb5b746fce742218ae5d6f285c2936a50897c5db/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fb5b746fce742218ae5d6f285c2936a50897c5db",
        "patch": "@@ -348,11 +348,8 @@ void CWallet::Flush(bool shutdown)\n     bitdb.Flush(shutdown);\n }\n \n-bool CWallet::Verify(string& warningString, string& errorString)\n+bool CWallet::Verify(const std::string& walletFile, std::string& warningString, std::string& errorString)\n {\n-    const std::string walletFile = CWallet::GetWalletFile();\n-    LogPrintf(\"Using wallet %s\\n\", walletFile);\n-\n     if (!bitdb.Open(GetDataDir()))\n     {\n         // try moving the database env out of the way\n@@ -370,15 +367,15 @@ bool CWallet::Verify(string& warningString, string& errorString)\n             // if it still fails, it probably means we can't even create the database env\n             string msg = strprintf(_(\"Error initializing wallet database environment %s!\"), GetDataDir());\n             errorString += msg;\n-            return true;\n+            return false;\n         }\n     }\n     \n     if (GetBoolArg(\"-salvagewallet\", false))\n     {\n         // Recover readable keypairs:\n         if (!CWalletDB::Recover(bitdb, walletFile, true))\n-            return false;\n+            return true;\n     }\n \n     if (boost::filesystem::exists(GetDataDir() / walletFile))\n@@ -901,111 +898,6 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n     return nChange;\n }\n \n-bool CWallet::IsDisabled()\n-{\n-    return GetBoolArg(\"-disablewallet\", false);\n-}\n-\n-void CWallet::MapParameters(string& warningString, string& errorString)\n-{\n-    if (mapArgs.count(\"-mintxfee\"))\n-    {\n-        CAmount n = 0;\n-        if (ParseMoney(mapArgs[\"-mintxfee\"], n) && n > 0)\n-            CWallet::minTxFee = CFeeRate(n);\n-        else\n-        {\n-            errorString += strprintf(_(\"Invalid amount for -mintxfee=<amount>: '%s'\"), mapArgs[\"-mintxfee\"]);\n-            return;\n-        }\n-    }\n-    if (mapArgs.count(\"-paytxfee\"))\n-    {\n-        CAmount nFeePerK = 0;\n-        if (!ParseMoney(mapArgs[\"-paytxfee\"], nFeePerK))\n-            return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s'\"), mapArgs[\"-paytxfee\"]));\n-        if (nFeePerK > nHighTransactionFeeWarning)\n-            InitWarning(_(\"Warning: -paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n-        payTxFee = CFeeRate(nFeePerK, 1000);\n-        if (payTxFee < ::minRelayTxFee)\n-        {\n-            return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n-                                       mapArgs[\"-paytxfee\"], ::minRelayTxFee.ToString()));\n-        }\n-    }\n-    if (mapArgs.count(\"-maxtxfee\"))\n-    {\n-        CAmount nMaxFee = 0;\n-        if (!ParseMoney(mapArgs[\"-maxtxfee\"], nMaxFee))\n-            return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s'\"), mapArgs[\"-maptxfee\"]));\n-        if (nMaxFee > nHighTransactionMaxFeeWarning)\n-            InitWarning(_(\"Warning: -maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n-        maxTxFee = nMaxFee;\n-        if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n-        {\n-            return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n-                                       mapArgs[\"-maxtxfee\"], ::minRelayTxFee.ToString()));\n-        }\n-    }\n-    nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n-    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", true);\n-    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", false);\n-}\n-\n-std::string CWallet::GetWalletFile()\n-{\n-    return GetArg(\"-wallet\", \"wallet.dat\");\n-}\n-\n-void CWallet::SanityCheck(string& errorString)\n-{\n-    std::string strWalletFile = GetWalletFile();\n-    // Wallet file must be a plain filename without a directory\n-    if (strWalletFile != boost::filesystem::basename(strWalletFile) + boost::filesystem::extension(strWalletFile))\n-        errorString += strprintf(_(\"Wallet %s resides outside data directory\"), strWalletFile);\n-}\n-\n-void CWallet::LogGeneralInfos()\n-{\n-    LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n-}\n-void CWallet::LogInfos() const\n-{\n-    LogPrintf(\"setKeyPool.size() = %u\\n\",      this->setKeyPool.size());\n-    LogPrintf(\"mapWallet.size() = %u\\n\",       this->mapWallet.size());\n-    LogPrintf(\"mapAddressBook.size() = %u\\n\",  this->mapAddressBook.size());\n-}\n-\n-void CWallet::AppendHelpMessageString(std::string& strUsage, bool debug)\n-{\n-    if (debug)\n-    {\n-        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n-        return;\n-    }\n-    strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n-    strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n-    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\",\n-                                                                FormatMoney(CWallet::minTxFee.GetFeePerK())));\n-    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())));\n-    strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));\n-    strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\"));\n-    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n-    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n-    strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n-    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n-                                                            FormatMoney(maxTxFee)));\n-    strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n-    strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n-    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), true));\n-    strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n-    strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n-                               \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n-    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n-    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n-}\n int64_t CWalletTx::GetTxTime() const\n {\n     int64_t n = nTimeSmart;\n@@ -2129,9 +2021,6 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n     return nFeeNeeded;\n }\n \n-\n-\n-\n bool CWallet::LoadWallet(std::string& warningString, std::string& errorString)\n {\n     // needed to restore wallet transaction meta data after -zapwallettxes\n@@ -2255,7 +2144,7 @@ bool CWallet::LoadWallet(std::string& warningString, std::string& errorString)\n             if (pindexRescan != block)\n             {\n                 errorString += _(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\");\n-                return;\n+                return true;\n             }\n         }\n "
      },
      {
        "sha": "eda6e5f2649df61fb82d018d99f265d1ac22651e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 19,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb5b746fce742218ae5d6f285c2936a50897c5db/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb5b746fce742218ae5d6f285c2936a50897c5db/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fb5b746fce742218ae5d6f285c2936a50897c5db",
        "patch": "@@ -494,9 +494,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CWallet()\n     {\n         SetNull();\n-\n-        strWalletFile = GetWalletFile();\n-        fFileBacked = true;\n     }\n \n     CWallet(const std::string& strWalletFileIn)\n@@ -706,25 +703,15 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void Flush(bool shutdown=false);\n \n     //! Dump wallet infos to log\n-    void LogInfos() const;\n+    static void LogInfos();\n     static void LogGeneralInfos();\n \n     //! Verify the wallet database and perform salvage if required\n-    static bool Verify(std::string& warningString, std::string& errorString);\n-\n-    static bool IsDisabled();\n-\n-    //! Map parameters to internal vars\n-    static void MapParameters(std::string& warningString, std::string& errorString);\n-\n-    //! Get user defined wallet file\n-    static std::string GetWalletFile();\n-\n-    //! Performs sanity check and appends possible errors to given string\n-    static void SanityCheck(std::string& errorString);\n-\n-    //! append help text to existing string\n-    static void AppendHelpMessageString(std::string& strUsage, bool debug = false);\n+    static bool Verify(const std::string& walletFile, std::string& warningString, std::string& errorString);\n+    \n+    static void StartWalletTasks(boost::thread_group& threadGroup);\n+    \n+    \n     /** \n      * Address book entry changed.\n      * @note called with lock cs_wallet held."
      }
    ]
  }
]