[
  {
    "sha": "8284756705dc05ef2e5a6bdfeab146d3cebe35ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Mjg0NzU2NzA1ZGMwNWVmMmU1YTZiZGZlYWIxNDZkM2NlYmUzNWNh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-11-08T22:20:26Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-11-22T05:21:29Z"
      },
      "message": "A few minor formatting fixes and clarifications to descriptors.md",
      "tree": {
        "sha": "e6cf7945e4c08a17a7e2ed238e91f22bba4e1454",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6cf7945e4c08a17a7e2ed238e91f22bba4e1454"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8284756705dc05ef2e5a6bdfeab146d3cebe35ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8284756705dc05ef2e5a6bdfeab146d3cebe35ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8284756705dc05ef2e5a6bdfeab146d3cebe35ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8284756705dc05ef2e5a6bdfeab146d3cebe35ca/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b8d0a2164b30eab76e7bccb1ffb056a10fba406",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b8d0a2164b30eab76e7bccb1ffb056a10fba406",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b8d0a2164b30eab76e7bccb1ffb056a10fba406"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 15,
      "deletions": 11
    },
    "files": [
      {
        "sha": "de4d4e574f84664a416989f338e7aa584978f364",
        "filename": "doc/descriptors.md",
        "status": "modified",
        "additions": 15,
        "deletions": 11,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8284756705dc05ef2e5a6bdfeab146d3cebe35ca/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8284756705dc05ef2e5a6bdfeab146d3cebe35ca/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=8284756705dc05ef2e5a6bdfeab146d3cebe35ca",
        "patch": "@@ -59,19 +59,20 @@ Descriptors consist of several types of expressions. The top level expression is\n   - Followed by zero or more `/NUM` or `/NUM'` path elements to indicate unhardened or hardened derivation steps between the fingerprint and the key or xpub/xprv root that follows\n   - A closing bracket `]`\n - Followed by the actual key, which is either:\n-  - Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+  - Hex encoded public keys (either 66 characters starting with `02` or `03` for a compressed pubkey, or 130 characters starting with `04` for an uncompressed pubkey).\n     - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n   - [WIF](https://en.bitcoin.it/wiki/Wallet_import_format) encoded private keys may be specified instead of the corresponding public key, with the same meaning.\n-  -`xpub` encoded extended public key or `xprv` encoded private key (as defined in [BIP 32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)).\n+  - `xpub` encoded extended public key or `xprv` encoded extended private key (as defined in [BIP 32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)).\n     - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n     - Optionally followed by a single `/*` or `/*'` final step to denote all (direct) unhardened or hardened children.\n     - The usage of hardened derivation steps requires providing the private key.\n-- Anywhere a `'` suffix is permitted to denote hardened derivation, the suffix `h` can be used instead.\n+\n+(Anywhere a `'` suffix is permitted to denote hardened derivation, the suffix `h` can be used instead.)\n \n `ADDR` expressions are any type of supported address:\n-- P2PKH addresses (base58, of the form `1...`). Note that P2PKH addresses in descriptors cannot be used for P2PK outputs (use the `pk` function instead).\n-- P2SH addresses (base58, of the form `3...`, defined in [BIP 13](https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki)).\n-- Segwit addresses (bech32, of the form `bc1...`, defined in [BIP 173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)).\n+- P2PKH addresses (base58, of the form `1...` for mainnet or `[nm]...` for testnet). Note that P2PKH addresses in descriptors cannot be used for P2PK outputs (use the `pk` function instead).\n+- P2SH addresses (base58, of the form `3...` for mainnet or `2...` for testnet, defined in [BIP 13](https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki)).\n+- Segwit addresses (bech32, of the form `bc1...` for mainnet or `tb1...` for testnet, defined in [BIP 173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)).\n \n ## Explanation\n \n@@ -83,10 +84,9 @@ imaginable, though they may not be optimal: P2SH-P2PK, P2SH-P2PKH,\n P2WSH-P2PK, P2WSH-P2PKH, P2SH-P2WSH-P2PK, P2SH-P2WSH-P2PKH.\n \n To describe these, we model these as functions. The functions `pk`\n-(P2PK), `pkh` (P2PKH) and `wpkh` (P2WPKH) take as input a public key in\n-hexadecimal notation (which will be extended later), and return the\n+(P2PK), `pkh` (P2PKH) and `wpkh` (P2WPKH) take as input a `KEY` expression, and return the\n corresponding *scriptPubKey*. The functions `sh` (P2SH) and `wsh` (P2WSH)\n-take as input a script, and return the script describing P2SH and P2WSH\n+take as input a `SCRIPT` expression, and return the script describing P2SH and P2WSH\n outputs with the input as embedded script. The names of the functions do\n not contain \"p2\" for brevity.\n \n@@ -95,7 +95,7 @@ not contain \"p2\" for brevity.\n Several pieces of software use multi-signature (multisig) scripts based\n on Bitcoin's OP_CHECKMULTISIG opcode. To support these, we introduce the\n `multi(k,key_1,key_2,...,key_n)` function. It represents a *k-of-n*\n-multisig policy, where any *k* out of the *n* provided public keys must\n+multisig policy, where any *k* out of the *n* provided `KEY` expressions must\n sign.\n \n Key order is significant. A `multi()` expression describes a multisig script\n@@ -138,7 +138,7 @@ Instead, it should be written as `xpub.../1/*`, where xpub corresponds to\n `m/44'/0'/0'`.\n \n When interacting with a hardware device, it may be necessary to include\n-the entire path from the master down. BIP174 standardizes this by\n+the entire path from the master down. [BIP174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki) standardizes this by\n providing the master key *fingerprint* (first 32 bit of the Hash160 of\n the master pubkey), plus all derivation steps. To support constructing\n these, we permit providing this key origin information inside the\n@@ -150,6 +150,10 @@ fingerprint plus optional derivation steps (hardened and unhardened)\n surrounded by brackets, identifying the master and derivation path the key or xpub\n that follows was derived with.\n \n+Note that the fingerprint of the parent only serves as a fast way to detect\n+parent and child nodes in software, and software must be willing to deal with\n+collisions.\n+\n ### Including private keys\n \n Often it is useful to communicate a description of scripts along with the"
      }
    ]
  }
]