[
  {
    "sha": "36fa4a78acac0ae6bb0e95c6ef78630120a28bdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmZhNGE3OGFjYWMwYWU2YmIwZTk1YzZlZjc4NjMwMTIwYTI4YmRk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-26T08:23:23Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-20T16:22:02Z"
      },
      "message": "Split up crypto/sha2",
      "tree": {
        "sha": "9a9588babc38c2e052441ee6db58c6e4ac1a72e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a9588babc38c2e052441ee6db58c6e4ac1a72e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c4dffd188bf82c1965871bdf013b18a61e3d7d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c4dffd188bf82c1965871bdf013b18a61e3d7d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c4dffd188bf82c1965871bdf013b18a61e3d7d0"
      }
    ],
    "stats": {
      "total": 609,
      "additions": 330,
      "deletions": 279
    },
    "files": [
      {
        "sha": "e1e691518528ae88dbc96f2d49ef2d79699b469d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=36fa4a78acac0ae6bb0e95c6ef78630120a28bdd",
        "patch": "@@ -203,10 +203,14 @@ libbitcoin_wallet_a_SOURCES = \\\n crypto_libbitcoin_crypto_a_CPPFLAGS = $(BITCOIN_CONFIG_INCLUDES)\n crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/sha1.cpp \\\n-  crypto/sha2.cpp \\\n+  crypto/sha256.cpp \\\n+  crypto/sha512.cpp \\\n+  crypto/hmac_sha512.cpp \\\n   crypto/ripemd160.cpp \\\n   crypto/common.h \\\n-  crypto/sha2.h \\\n+  crypto/sha256.h \\\n+  crypto/sha512.h \\\n+  crypto/hmac_sha512.h \\\n   crypto/sha1.h \\\n   crypto/ripemd160.h\n \n@@ -342,8 +346,10 @@ if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h\n libbitcoinconsensus_la_SOURCES = \\\n   core/transaction.cpp \\\n+  crypto/hmac_sha512.cpp \\\n   crypto/sha1.cpp \\\n-  crypto/sha2.cpp \\\n+  crypto/sha256.cpp \\\n+  crypto/sha512.cpp \\\n   crypto/ripemd160.cpp \\\n   eccryptoverify.cpp \\\n   ecwrapper.cpp \\"
      },
      {
        "sha": "940a93277c0339a0dca9578d5b3d7667f4f1c156",
        "filename": "src/crypto/hmac_sha512.cpp",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/crypto/hmac_sha512.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/crypto/hmac_sha512.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/hmac_sha512.cpp?ref=36fa4a78acac0ae6bb0e95c6ef78630120a28bdd",
        "patch": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"crypto/hmac_sha512.h\"\n+\n+#include <string.h>\n+\n+CHMAC_SHA512::CHMAC_SHA512(const unsigned char* key, size_t keylen)\n+{\n+    unsigned char rkey[128];\n+    if (keylen <= 128) {\n+        memcpy(rkey, key, keylen);\n+        memset(rkey + keylen, 0, 128 - keylen);\n+    } else {\n+        CSHA512().Write(key, keylen).Finalize(rkey);\n+        memset(rkey + 64, 0, 64);\n+    }\n+\n+    for (int n = 0; n < 128; n++)\n+        rkey[n] ^= 0x5c;\n+    outer.Write(rkey, 128);\n+\n+    for (int n = 0; n < 128; n++)\n+        rkey[n] ^= 0x5c ^ 0x36;\n+    inner.Write(rkey, 128);\n+}\n+\n+void CHMAC_SHA512::Finalize(unsigned char hash[OUTPUT_SIZE])\n+{\n+    unsigned char temp[64];\n+    inner.Finalize(temp);\n+    outer.Write(temp, 64).Finalize(hash);\n+}"
      },
      {
        "sha": "8c65785104a1dd5d446aa29bcc0151701c75c044",
        "filename": "src/crypto/hmac_sha512.h",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/crypto/hmac_sha512.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/crypto/hmac_sha512.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/hmac_sha512.h?ref=36fa4a78acac0ae6bb0e95c6ef78630120a28bdd",
        "patch": "@@ -0,0 +1,32 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_HMAC_SHA512_H\n+#define BITCOIN_HMAC_SHA512_H\n+\n+#include \"crypto/sha512.h\"\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+/** A hasher class for HMAC-SHA-512. */\n+class CHMAC_SHA512\n+{\n+private:\n+    CSHA512 outer;\n+    CSHA512 inner;\n+\n+public:\n+    static const size_t OUTPUT_SIZE = 64;\n+\n+    CHMAC_SHA512(const unsigned char* key, size_t keylen);\n+    CHMAC_SHA512& Write(const unsigned char* data, size_t len)\n+    {\n+        inner.Write(data, len);\n+        return *this;\n+    }\n+    void Finalize(unsigned char hash[OUTPUT_SIZE]);\n+};\n+\n+#endif // BITCOIN_HMAC_SHA512_H"
      },
      {
        "sha": "329c6675ab0618f920a739cd1011720504a6499d",
        "filename": "src/crypto/sha2.h",
        "status": "removed",
        "additions": 0,
        "deletions": 64,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c4dffd188bf82c1965871bdf013b18a61e3d7d0/src/crypto/sha2.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c4dffd188bf82c1965871bdf013b18a61e3d7d0/src/crypto/sha2.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha2.h?ref=5c4dffd188bf82c1965871bdf013b18a61e3d7d0",
        "patch": "@@ -1,64 +0,0 @@\n-// Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_CRYPTO_SHA2_H\n-#define BITCOIN_CRYPTO_SHA2_H\n-\n-#include <stdint.h>\n-#include <stdlib.h>\n-\n-/** A hasher class for SHA-256. */\n-class CSHA256\n-{\n-private:\n-    uint32_t s[8];\n-    unsigned char buf[64];\n-    size_t bytes;\n-\n-public:\n-    static const size_t OUTPUT_SIZE = 32;\n-\n-    CSHA256();\n-    CSHA256& Write(const unsigned char* data, size_t len);\n-    void Finalize(unsigned char hash[OUTPUT_SIZE]);\n-    CSHA256& Reset();\n-};\n-\n-/** A hasher class for SHA-512. */\n-class CSHA512\n-{\n-private:\n-    uint64_t s[8];\n-    unsigned char buf[128];\n-    size_t bytes;\n-\n-public:\n-    static const size_t OUTPUT_SIZE = 64;\n-\n-    CSHA512();\n-    CSHA512& Write(const unsigned char* data, size_t len);\n-    void Finalize(unsigned char hash[OUTPUT_SIZE]);\n-    CSHA512& Reset();\n-};\n-\n-/** A hasher class for HMAC-SHA-512. */\n-class CHMAC_SHA512\n-{\n-private:\n-    CSHA512 outer;\n-    CSHA512 inner;\n-\n-public:\n-    static const size_t OUTPUT_SIZE = 64;\n-\n-    CHMAC_SHA512(const unsigned char* key, size_t keylen);\n-    CHMAC_SHA512& Write(const unsigned char* data, size_t len)\n-    {\n-        inner.Write(data, len);\n-        return *this;\n-    }\n-    void Finalize(unsigned char hash[OUTPUT_SIZE]);\n-};\n-\n-#endif // BITCOIN_CRYPTO_SHA2_H"
      },
      {
        "sha": "8410e5930543089ad11aab5a9047560e60ad16d5",
        "filename": "src/crypto/sha256.cpp",
        "status": "added",
        "additions": 189,
        "deletions": 0,
        "changes": 189,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/crypto/sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/crypto/sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.cpp?ref=36fa4a78acac0ae6bb0e95c6ef78630120a28bdd",
        "patch": "@@ -0,0 +1,189 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"crypto/sha256.h\"\n+\n+#include \"crypto/common.h\"\n+\n+#include <string.h>\n+\n+// Internal implementation code.\n+namespace\n+{\n+/// Internal SHA-256 implementation.\n+namespace sha256\n+{\n+uint32_t inline Ch(uint32_t x, uint32_t y, uint32_t z) { return z ^ (x & (y ^ z)); }\n+uint32_t inline Maj(uint32_t x, uint32_t y, uint32_t z) { return (x & y) | (z & (x | y)); }\n+uint32_t inline Sigma0(uint32_t x) { return (x >> 2 | x << 30) ^ (x >> 13 | x << 19) ^ (x >> 22 | x << 10); }\n+uint32_t inline Sigma1(uint32_t x) { return (x >> 6 | x << 26) ^ (x >> 11 | x << 21) ^ (x >> 25 | x << 7); }\n+uint32_t inline sigma0(uint32_t x) { return (x >> 7 | x << 25) ^ (x >> 18 | x << 14) ^ (x >> 3); }\n+uint32_t inline sigma1(uint32_t x) { return (x >> 17 | x << 15) ^ (x >> 19 | x << 13) ^ (x >> 10); }\n+\n+/** One round of SHA-256. */\n+void inline Round(uint32_t a, uint32_t b, uint32_t c, uint32_t& d, uint32_t e, uint32_t f, uint32_t g, uint32_t& h, uint32_t k, uint32_t w)\n+{\n+    uint32_t t1 = h + Sigma1(e) + Ch(e, f, g) + k + w;\n+    uint32_t t2 = Sigma0(a) + Maj(a, b, c);\n+    d += t1;\n+    h = t1 + t2;\n+}\n+\n+/** Initialize SHA-256 state. */\n+void inline Initialize(uint32_t* s)\n+{\n+    s[0] = 0x6a09e667ul;\n+    s[1] = 0xbb67ae85ul;\n+    s[2] = 0x3c6ef372ul;\n+    s[3] = 0xa54ff53aul;\n+    s[4] = 0x510e527ful;\n+    s[5] = 0x9b05688cul;\n+    s[6] = 0x1f83d9abul;\n+    s[7] = 0x5be0cd19ul;\n+}\n+\n+/** Perform one SHA-256 transformation, processing a 64-byte chunk. */\n+void Transform(uint32_t* s, const unsigned char* chunk)\n+{\n+    uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n+    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n+\n+    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n+    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n+    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n+    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n+    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n+    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n+    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n+    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n+    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n+    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n+    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n+    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n+    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n+    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n+    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n+    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n+\n+    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n+\n+    s[0] += a;\n+    s[1] += b;\n+    s[2] += c;\n+    s[3] += d;\n+    s[4] += e;\n+    s[5] += f;\n+    s[6] += g;\n+    s[7] += h;\n+}\n+\n+} // namespace sha256\n+} // namespace\n+\n+\n+////// SHA-256\n+\n+CSHA256::CSHA256() : bytes(0)\n+{\n+    sha256::Initialize(s);\n+}\n+\n+CSHA256& CSHA256::Write(const unsigned char* data, size_t len)\n+{\n+    const unsigned char* end = data + len;\n+    size_t bufsize = bytes % 64;\n+    if (bufsize && bufsize + len >= 64) {\n+        // Fill the buffer, and process it.\n+        memcpy(buf + bufsize, data, 64 - bufsize);\n+        bytes += 64 - bufsize;\n+        data += 64 - bufsize;\n+        sha256::Transform(s, buf);\n+        bufsize = 0;\n+    }\n+    while (end >= data + 64) {\n+        // Process full chunks directly from the source.\n+        sha256::Transform(s, data);\n+        bytes += 64;\n+        data += 64;\n+    }\n+    if (end > data) {\n+        // Fill the buffer with what remains.\n+        memcpy(buf + bufsize, data, end - data);\n+        bytes += end - data;\n+    }\n+    return *this;\n+}\n+\n+void CSHA256::Finalize(unsigned char hash[OUTPUT_SIZE])\n+{\n+    static const unsigned char pad[64] = {0x80};\n+    unsigned char sizedesc[8];\n+    WriteBE64(sizedesc, bytes << 3);\n+    Write(pad, 1 + ((119 - (bytes % 64)) % 64));\n+    Write(sizedesc, 8);\n+    WriteBE32(hash, s[0]);\n+    WriteBE32(hash + 4, s[1]);\n+    WriteBE32(hash + 8, s[2]);\n+    WriteBE32(hash + 12, s[3]);\n+    WriteBE32(hash + 16, s[4]);\n+    WriteBE32(hash + 20, s[5]);\n+    WriteBE32(hash + 24, s[6]);\n+    WriteBE32(hash + 28, s[7]);\n+}\n+\n+CSHA256& CSHA256::Reset()\n+{\n+    bytes = 0;\n+    sha256::Initialize(s);\n+    return *this;\n+}"
      },
      {
        "sha": "a57dce02273c27c201d9880531ff7fe18563b2f3",
        "filename": "src/crypto/sha256.h",
        "status": "added",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/crypto/sha256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/crypto/sha256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.h?ref=36fa4a78acac0ae6bb0e95c6ef78630120a28bdd",
        "patch": "@@ -0,0 +1,28 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SHA256_H\n+#define BITCOIN_SHA256_H\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+/** A hasher class for SHA-256. */\n+class CSHA256\n+{\n+private:\n+    uint32_t s[8];\n+    unsigned char buf[64];\n+    size_t bytes;\n+\n+public:\n+    static const size_t OUTPUT_SIZE = 32;\n+\n+    CSHA256();\n+    CSHA256& Write(const unsigned char* data, size_t len);\n+    void Finalize(unsigned char hash[OUTPUT_SIZE]);\n+    CSHA256& Reset();\n+};\n+\n+#endif // BITCOIN_SHA256_H"
      },
      {
        "sha": "22c3103bed1052350ad312ce1a1a5d13703d8899",
        "filename": "src/crypto/sha512.cpp",
        "status": "renamed",
        "additions": 3,
        "deletions": 207,
        "changes": 210,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/crypto/sha512.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/crypto/sha512.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha512.cpp?ref=36fa4a78acac0ae6bb0e95c6ef78630120a28bdd",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"crypto/sha2.h\"\n+#include \"crypto/sha512.h\"\n \n #include \"crypto/common.h\"\n \n@@ -11,124 +11,6 @@\n // Internal implementation code.\n namespace\n {\n-/// Internal SHA-256 implementation.\n-namespace sha256\n-{\n-uint32_t inline Ch(uint32_t x, uint32_t y, uint32_t z) { return z ^ (x & (y ^ z)); }\n-uint32_t inline Maj(uint32_t x, uint32_t y, uint32_t z) { return (x & y) | (z & (x | y)); }\n-uint32_t inline Sigma0(uint32_t x) { return (x >> 2 | x << 30) ^ (x >> 13 | x << 19) ^ (x >> 22 | x << 10); }\n-uint32_t inline Sigma1(uint32_t x) { return (x >> 6 | x << 26) ^ (x >> 11 | x << 21) ^ (x >> 25 | x << 7); }\n-uint32_t inline sigma0(uint32_t x) { return (x >> 7 | x << 25) ^ (x >> 18 | x << 14) ^ (x >> 3); }\n-uint32_t inline sigma1(uint32_t x) { return (x >> 17 | x << 15) ^ (x >> 19 | x << 13) ^ (x >> 10); }\n-\n-/** One round of SHA-256. */\n-void inline Round(uint32_t a, uint32_t b, uint32_t c, uint32_t& d, uint32_t e, uint32_t f, uint32_t g, uint32_t& h, uint32_t k, uint32_t w)\n-{\n-    uint32_t t1 = h + Sigma1(e) + Ch(e, f, g) + k + w;\n-    uint32_t t2 = Sigma0(a) + Maj(a, b, c);\n-    d += t1;\n-    h = t1 + t2;\n-}\n-\n-/** Initialize SHA-256 state. */\n-void inline Initialize(uint32_t* s)\n-{\n-    s[0] = 0x6a09e667ul;\n-    s[1] = 0xbb67ae85ul;\n-    s[2] = 0x3c6ef372ul;\n-    s[3] = 0xa54ff53aul;\n-    s[4] = 0x510e527ful;\n-    s[5] = 0x9b05688cul;\n-    s[6] = 0x1f83d9abul;\n-    s[7] = 0x5be0cd19ul;\n-}\n-\n-/** Perform one SHA-256 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t* s, const unsigned char* chunk)\n-{\n-    uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n-    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n-\n-    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n-    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n-    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n-    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n-    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n-    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n-    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n-    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n-    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n-    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n-    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n-    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n-    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n-    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n-    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n-    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n-\n-    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n-    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n-    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n-    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n-    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n-    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n-    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n-    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n-\n-    s[0] += a;\n-    s[1] += b;\n-    s[2] += c;\n-    s[3] += d;\n-    s[4] += e;\n-    s[5] += f;\n-    s[6] += g;\n-    s[7] += h;\n-}\n-\n-} // namespace sha256\n-\n /// Internal SHA-512 implementation.\n namespace sha512\n {\n@@ -249,8 +131,8 @@ void Transform(uint64_t* s, const unsigned char* chunk)\n     Round(f, g, h, a, b, c, d, e, 0x431d67c49c100d4cull, w11 += sigma1(w9) + w4 + sigma0(w12));\n     Round(e, f, g, h, a, b, c, d, 0x4cc5d4becb3e42b6ull, w12 += sigma1(w10) + w5 + sigma0(w13));\n     Round(d, e, f, g, h, a, b, c, 0x597f299cfc657e2aull, w13 += sigma1(w11) + w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0x5fcb6fab3ad6faecull, w14 += sigma1(w12) + w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x6c44198c4a475817ull, w15 += sigma1(w13) + w8 + sigma0(w0));\n+    Round(c, d, e, f, g, h, a, b, 0x5fcb6fab3ad6faecull, w14 + sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x6c44198c4a475817ull, w15 + sigma1(w13) + w8 + sigma0(w0));\n \n     s[0] += a;\n     s[1] += b;\n@@ -267,63 +149,6 @@ void Transform(uint64_t* s, const unsigned char* chunk)\n } // namespace\n \n \n-////// SHA-256\n-\n-CSHA256::CSHA256() : bytes(0)\n-{\n-    sha256::Initialize(s);\n-}\n-\n-CSHA256& CSHA256::Write(const unsigned char* data, size_t len)\n-{\n-    const unsigned char* end = data + len;\n-    size_t bufsize = bytes % 64;\n-    if (bufsize && bufsize + len >= 64) {\n-        // Fill the buffer, and process it.\n-        memcpy(buf + bufsize, data, 64 - bufsize);\n-        bytes += 64 - bufsize;\n-        data += 64 - bufsize;\n-        sha256::Transform(s, buf);\n-        bufsize = 0;\n-    }\n-    while (end >= data + 64) {\n-        // Process full chunks directly from the source.\n-        sha256::Transform(s, data);\n-        bytes += 64;\n-        data += 64;\n-    }\n-    if (end > data) {\n-        // Fill the buffer with what remains.\n-        memcpy(buf + bufsize, data, end - data);\n-        bytes += end - data;\n-    }\n-    return *this;\n-}\n-\n-void CSHA256::Finalize(unsigned char hash[OUTPUT_SIZE])\n-{\n-    static const unsigned char pad[64] = {0x80};\n-    unsigned char sizedesc[8];\n-    WriteBE64(sizedesc, bytes << 3);\n-    Write(pad, 1 + ((119 - (bytes % 64)) % 64));\n-    Write(sizedesc, 8);\n-    WriteBE32(hash, s[0]);\n-    WriteBE32(hash + 4, s[1]);\n-    WriteBE32(hash + 8, s[2]);\n-    WriteBE32(hash + 12, s[3]);\n-    WriteBE32(hash + 16, s[4]);\n-    WriteBE32(hash + 20, s[5]);\n-    WriteBE32(hash + 24, s[6]);\n-    WriteBE32(hash + 28, s[7]);\n-}\n-\n-CSHA256& CSHA256::Reset()\n-{\n-    bytes = 0;\n-    sha256::Initialize(s);\n-    return *this;\n-}\n-\n ////// SHA-512\n \n CSHA512::CSHA512() : bytes(0)\n@@ -380,32 +205,3 @@ CSHA512& CSHA512::Reset()\n     sha512::Initialize(s);\n     return *this;\n }\n-\n-////// HMAC-SHA-512\n-\n-CHMAC_SHA512::CHMAC_SHA512(const unsigned char* key, size_t keylen)\n-{\n-    unsigned char rkey[128];\n-    if (keylen <= 128) {\n-        memcpy(rkey, key, keylen);\n-        memset(rkey + keylen, 0, 128 - keylen);\n-    } else {\n-        CSHA512().Write(key, keylen).Finalize(rkey);\n-        memset(rkey + 64, 0, 64);\n-    }\n-\n-    for (int n = 0; n < 128; n++)\n-        rkey[n] ^= 0x5c;\n-    outer.Write(rkey, 128);\n-\n-    for (int n = 0; n < 128; n++)\n-        rkey[n] ^= 0x5c ^ 0x36;\n-    inner.Write(rkey, 128);\n-}\n-\n-void CHMAC_SHA512::Finalize(unsigned char hash[OUTPUT_SIZE])\n-{\n-    unsigned char temp[64];\n-    inner.Finalize(temp);\n-    outer.Write(temp, 64).Finalize(hash);\n-}",
        "previous_filename": "src/crypto/sha2.cpp"
      },
      {
        "sha": "4d1345e50bbfe1d70a2e98e6f222fbeba2ab25a2",
        "filename": "src/crypto/sha512.h",
        "status": "added",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/crypto/sha512.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/crypto/sha512.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha512.h?ref=36fa4a78acac0ae6bb0e95c6ef78630120a28bdd",
        "patch": "@@ -0,0 +1,28 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SHA512_H\n+#define BITCOIN_SHA512_H\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+/** A hasher class for SHA-512. */\n+class CSHA512\n+{\n+private:\n+    uint64_t s[8];\n+    unsigned char buf[128];\n+    size_t bytes;\n+\n+public:\n+    static const size_t OUTPUT_SIZE = 64;\n+\n+    CSHA512();\n+    CSHA512& Write(const unsigned char* data, size_t len);\n+    void Finalize(unsigned char hash[OUTPUT_SIZE]);\n+    CSHA512& Reset();\n+};\n+\n+#endif // BITCOIN_SHA512_H"
      },
      {
        "sha": "aaca00ea2d387d72324f9009a6308d4ad877c665",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=36fa4a78acac0ae6bb0e95c6ef78630120a28bdd",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"hash.h\"\n+#include \"crypto/hmac_sha512.h\"\n \n inline uint32_t ROTL32(uint32_t x, int8_t r)\n {"
      },
      {
        "sha": "5a34cdc5c3c89be91134dcc7f6474d5a456698f8",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=36fa4a78acac0ae6bb0e95c6ef78630120a28bdd",
        "patch": "@@ -7,7 +7,7 @@\n #define BITCOIN_HASH_H\n \n #include \"crypto/ripemd160.h\"\n-#include \"crypto/sha2.h\"\n+#include \"crypto/sha256.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n #include \"version.h\""
      },
      {
        "sha": "9b3cf8f01911de9c972ffd4e175f608f8fea882c",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=36fa4a78acac0ae6bb0e95c6ef78630120a28bdd",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"key.h\"\n \n-#include \"crypto/sha2.h\"\n+#include \"crypto/hmac_sha512.h\"\n #include \"eccryptoverify.h\"\n #include \"pubkey.h\"\n #include \"random.h\""
      },
      {
        "sha": "91979ff4dc87071e7f509872130ae14bfcd562e9",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=36fa4a78acac0ae6bb0e95c6ef78630120a28bdd",
        "patch": "@@ -4,7 +4,6 @@\n \n #include \"pubkey.h\"\n \n-#include \"crypto/sha2.h\"\n #include \"eccryptoverify.h\"\n \n #ifdef USE_SECP256K1"
      },
      {
        "sha": "6038adda94f5217b1c34c792ca80805a3cd1373e",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=36fa4a78acac0ae6bb0e95c6ef78630120a28bdd",
        "patch": "@@ -8,7 +8,7 @@\n #include \"core/transaction.h\"\n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha1.h\"\n-#include \"crypto/sha2.h\"\n+#include \"crypto/sha256.h\"\n #include \"eccryptoverify.h\"\n #include \"pubkey.h\"\n #include \"script/script.h\""
      },
      {
        "sha": "b3783133d56aac66abf4df60af26804866013f6b",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=36fa4a78acac0ae6bb0e95c6ef78630120a28bdd",
        "patch": "@@ -4,7 +4,9 @@\n \n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha1.h\"\n-#include \"crypto/sha2.h\"\n+#include \"crypto/sha256.h\"\n+#include \"crypto/sha512.h\"\n+#include \"crypto/hmac_sha512.h\"\n #include \"random.h\"\n #include \"utilstrencodings.h\"\n "
      }
    ]
  },
  {
    "sha": "a8f5087e5318211b58b0c87ebd4e036e6c6721e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGY1MDg3ZTUzMTgyMTFiNThiMGM4N2ViZDRlMDM2ZTZjNjcyMWU1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-26T08:38:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-20T16:22:06Z"
      },
      "message": "Add HMAC-SHA256",
      "tree": {
        "sha": "5817f0270ff14c66089ee13bb0a2ea9c6148a96b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5817f0270ff14c66089ee13bb0a2ea9c6148a96b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8f5087e5318211b58b0c87ebd4e036e6c6721e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8f5087e5318211b58b0c87ebd4e036e6c6721e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8f5087e5318211b58b0c87ebd4e036e6c6721e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8f5087e5318211b58b0c87ebd4e036e6c6721e5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36fa4a78acac0ae6bb0e95c6ef78630120a28bdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36fa4a78acac0ae6bb0e95c6ef78630120a28bdd"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 111,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1a5c57a3fa99f8c49dcfd4192298700f55b8c2aa",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8f5087e5318211b58b0c87ebd4e036e6c6721e5/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8f5087e5318211b58b0c87ebd4e036e6c6721e5/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=a8f5087e5318211b58b0c87ebd4e036e6c6721e5",
        "patch": "@@ -205,11 +205,13 @@ crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/sha1.cpp \\\n   crypto/sha256.cpp \\\n   crypto/sha512.cpp \\\n+  crypto/hmac_sha256.cpp \\\n   crypto/hmac_sha512.cpp \\\n   crypto/ripemd160.cpp \\\n   crypto/common.h \\\n   crypto/sha256.h \\\n   crypto/sha512.h \\\n+  crypto/hmac_sha256.h \\\n   crypto/hmac_sha512.h \\\n   crypto/sha1.h \\\n   crypto/ripemd160.h"
      },
      {
        "sha": "435896538bf7ab344a88e244afe548571412b4d9",
        "filename": "src/crypto/hmac_sha256.cpp",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8f5087e5318211b58b0c87ebd4e036e6c6721e5/src/crypto/hmac_sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8f5087e5318211b58b0c87ebd4e036e6c6721e5/src/crypto/hmac_sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/hmac_sha256.cpp?ref=a8f5087e5318211b58b0c87ebd4e036e6c6721e5",
        "patch": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"crypto/hmac_sha256.h\"\n+\n+#include <string.h>\n+\n+CHMAC_SHA256::CHMAC_SHA256(const unsigned char* key, size_t keylen)\n+{\n+    unsigned char rkey[64];\n+    if (keylen <= 64) {\n+        memcpy(rkey, key, keylen);\n+        memset(rkey + keylen, 0, 64 - keylen);\n+    } else {\n+        CSHA256().Write(key, keylen).Finalize(rkey);\n+        memset(rkey + 32, 0, 32);\n+    }\n+\n+    for (int n = 0; n < 64; n++)\n+        rkey[n] ^= 0x5c;\n+    outer.Write(rkey, 64);\n+\n+    for (int n = 0; n < 64; n++)\n+        rkey[n] ^= 0x5c ^ 0x36;\n+    inner.Write(rkey, 64);\n+}\n+\n+void CHMAC_SHA256::Finalize(unsigned char hash[OUTPUT_SIZE])\n+{\n+    unsigned char temp[32];\n+    inner.Finalize(temp);\n+    outer.Write(temp, 32).Finalize(hash);\n+}"
      },
      {
        "sha": "4ceac709444a1d22e5b8156c4ca413c7d439fd5f",
        "filename": "src/crypto/hmac_sha256.h",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8f5087e5318211b58b0c87ebd4e036e6c6721e5/src/crypto/hmac_sha256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8f5087e5318211b58b0c87ebd4e036e6c6721e5/src/crypto/hmac_sha256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/hmac_sha256.h?ref=a8f5087e5318211b58b0c87ebd4e036e6c6721e5",
        "patch": "@@ -0,0 +1,32 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_HMAC_SHA256_H\n+#define BITCOIN_HMAC_SHA256_H\n+\n+#include \"crypto/sha256.h\"\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+/** A hasher class for HMAC-SHA-512. */\n+class CHMAC_SHA256\n+{\n+private:\n+    CSHA256 outer;\n+    CSHA256 inner;\n+\n+public:\n+    static const size_t OUTPUT_SIZE = 32;\n+\n+    CHMAC_SHA256(const unsigned char* key, size_t keylen);\n+    CHMAC_SHA256& Write(const unsigned char* data, size_t len)\n+    {\n+        inner.Write(data, len);\n+        return *this;\n+    }\n+    void Finalize(unsigned char hash[OUTPUT_SIZE]);\n+};\n+\n+#endif // BITCOIN_SHA256_H"
      },
      {
        "sha": "466b38fca96e12a1d335ee750b12b9f10c72fb8e",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8f5087e5318211b58b0c87ebd4e036e6c6721e5/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8f5087e5318211b58b0c87ebd4e036e6c6721e5/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=a8f5087e5318211b58b0c87ebd4e036e6c6721e5",
        "patch": "@@ -6,6 +6,7 @@\n #include \"crypto/sha1.h\"\n #include \"crypto/sha256.h\"\n #include \"crypto/sha512.h\"\n+#include \"crypto/hmac_sha256.h\"\n #include \"crypto/hmac_sha512.h\"\n #include \"random.h\"\n #include \"utilstrencodings.h\"\n@@ -50,6 +51,11 @@ void TestSHA256(const std::string &in, const std::string &hexout) { TestVector(C\n void TestSHA512(const std::string &in, const std::string &hexout) { TestVector(CSHA512(), in, ParseHex(hexout));}\n void TestRIPEMD160(const std::string &in, const std::string &hexout) { TestVector(CRIPEMD160(), in, ParseHex(hexout));}\n \n+void TestHMACSHA256(const std::string &hexkey, const std::string &hexin, const std::string &hexout) {\n+    std::vector<unsigned char> key = ParseHex(hexkey);\n+    TestVector(CHMAC_SHA256(&key[0], key.size()), ParseHex(hexin), ParseHex(hexout));\n+}\n+\n void TestHMACSHA512(const std::string &hexkey, const std::string &hexin, const std::string &hexout) {\n     std::vector<unsigned char> key = ParseHex(hexkey);\n     TestVector(CHMAC_SHA512(&key[0], key.size()), ParseHex(hexin), ParseHex(hexout));\n@@ -160,6 +166,43 @@ BOOST_AUTO_TEST_CASE(sha512_testvectors) {\n                \"37de8c3ef5459d76a52cedc02dc499a3c9ed9dedbfb3281afd9653b8a112fafc\");\n }\n \n+BOOST_AUTO_TEST_CASE(hmac_sha256_testvectors) {\n+    // test cases 1, 2, 3, 4, 6 and 7 of RFC 4231\n+    TestHMACSHA256(\"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\",\n+                   \"4869205468657265\",\n+                   \"b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7\");\n+    TestHMACSHA256(\"4a656665\",\n+                   \"7768617420646f2079612077616e7420666f72206e6f7468696e673f\",\n+                   \"5bdcc146bf60754e6a042426089575c75a003f089d2739839dec58b964ec3843\");\n+    TestHMACSHA256(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n+                   \"dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\"\n+                   \"dddddddddddddddddddddddddddddddddddd\",\n+                   \"773ea91e36800e46854db8ebd09181a72959098b3ef8c122d9635514ced565fe\");\n+    TestHMACSHA256(\"0102030405060708090a0b0c0d0e0f10111213141516171819\",\n+                   \"cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\"\n+                   \"cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\",\n+                   \"82558a389a443c0ea4cc819899f2083a85f0faa3e578f8077a2e3ff46729665b\");\n+    TestHMACSHA256(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+                   \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+                   \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+                   \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+                   \"aaaaaa\",\n+                   \"54657374205573696e67204c6172676572205468616e20426c6f636b2d53697a\"\n+                   \"65204b6579202d2048617368204b6579204669727374\",\n+                   \"60e431591ee0b67f0d8a26aacbf5b77f8e0bc6213728c5140546040f0ee37f54\");\n+    TestHMACSHA256(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+                   \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+                   \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+                   \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+                   \"aaaaaa\",\n+                   \"5468697320697320612074657374207573696e672061206c6172676572207468\"\n+                   \"616e20626c6f636b2d73697a65206b657920616e642061206c61726765722074\"\n+                   \"68616e20626c6f636b2d73697a6520646174612e20546865206b6579206e6565\"\n+                   \"647320746f20626520686173686564206265666f7265206265696e6720757365\"\n+                   \"642062792074686520484d414320616c676f726974686d2e\",\n+                   \"9b09ffa71b942fcb27635fbcd5b0e944bfdc63644f0713938a7f51535c3a35e2\");\n+}\n+\n BOOST_AUTO_TEST_CASE(hmac_sha512_testvectors) {\n     // test cases 1, 2, 3, 4, 6 and 7 of RFC 4231\n     TestHMACSHA512(\"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\","
      }
    ]
  },
  {
    "sha": "3060e360980f3e80db1d903085d759338ab27f4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDYwZTM2MDk4MGYzZTgwZGIxZDkwMzA4NWQ3NTkzMzhhYjI3ZjRh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-26T09:28:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-20T16:22:06Z"
      },
      "message": "Add the RFC6979 PRNG",
      "tree": {
        "sha": "51edcb62faa2ffba00905cb03d3724c333450162",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51edcb62faa2ffba00905cb03d3724c333450162"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3060e360980f3e80db1d903085d759338ab27f4a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3060e360980f3e80db1d903085d759338ab27f4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3060e360980f3e80db1d903085d759338ab27f4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3060e360980f3e80db1d903085d759338ab27f4a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8f5087e5318211b58b0c87ebd4e036e6c6721e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8f5087e5318211b58b0c87ebd4e036e6c6721e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8f5087e5318211b58b0c87ebd4e036e6c6721e5"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 121,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2863a7961e24f73c71cfceecc9ec3776b68151b6",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3060e360980f3e80db1d903085d759338ab27f4a/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3060e360980f3e80db1d903085d759338ab27f4a/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3060e360980f3e80db1d903085d759338ab27f4a",
        "patch": "@@ -206,12 +206,14 @@ crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/sha256.cpp \\\n   crypto/sha512.cpp \\\n   crypto/hmac_sha256.cpp \\\n+  crypto/rfc6979_hmac_sha256.cpp \\\n   crypto/hmac_sha512.cpp \\\n   crypto/ripemd160.cpp \\\n   crypto/common.h \\\n   crypto/sha256.h \\\n   crypto/sha512.h \\\n   crypto/hmac_sha256.h \\\n+  crypto/rfc6979_hmac_sha256.h \\\n   crypto/hmac_sha512.h \\\n   crypto/sha1.h \\\n   crypto/ripemd160.h"
      },
      {
        "sha": "3f935abfea3fecec9f39870765d4e13c6340436e",
        "filename": "src/crypto/rfc6979_hmac_sha256.cpp",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3060e360980f3e80db1d903085d759338ab27f4a/src/crypto/rfc6979_hmac_sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3060e360980f3e80db1d903085d759338ab27f4a/src/crypto/rfc6979_hmac_sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/rfc6979_hmac_sha256.cpp?ref=3060e360980f3e80db1d903085d759338ab27f4a",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"crypto/rfc6979_hmac_sha256.h\"\n+\n+#include <string.h>\n+\n+#include <algorithm>\n+\n+static const unsigned char zero[1] = {0x00};\n+static const unsigned char one[1] = {0x01};\n+\n+RFC6979_HMAC_SHA256::RFC6979_HMAC_SHA256(const unsigned char* key, size_t keylen, const unsigned char* msg, size_t msglen) : retry(false)\n+{\n+    memset(V, 0x01, sizeof(V));\n+    memset(K, 0x00, sizeof(K));\n+\n+    CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Write(zero, sizeof(zero)).Write(key, keylen).Write(msg, msglen).Finalize(K);\n+    CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Finalize(V);\n+    CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Write(one, sizeof(one)).Write(key, keylen).Write(msg, msglen).Finalize(K);\n+    CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Finalize(V);\n+}\n+\n+RFC6979_HMAC_SHA256::~RFC6979_HMAC_SHA256()\n+{\n+    memset(V, 0x01, sizeof(V));\n+    memset(K, 0x00, sizeof(K));\n+}\n+\n+void RFC6979_HMAC_SHA256::Generate(unsigned char* output, size_t outputlen)\n+{\n+    if (retry) {\n+        CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Write(zero, sizeof(zero)).Finalize(K);\n+        CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Finalize(V);\n+    }\n+\n+    while (outputlen > 0) {\n+        CHMAC_SHA256(K, sizeof(K)).Write(V, sizeof(V)).Finalize(V);\n+        size_t len = std::min(outputlen, sizeof(V));\n+        memcpy(output, V, len);\n+        output += len;\n+        outputlen -= len;\n+    }\n+\n+    retry = true;\n+}"
      },
      {
        "sha": "e67ddcf8fe570a0fa9cb3b2626dd05164291bc28",
        "filename": "src/crypto/rfc6979_hmac_sha256.h",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3060e360980f3e80db1d903085d759338ab27f4a/src/crypto/rfc6979_hmac_sha256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3060e360980f3e80db1d903085d759338ab27f4a/src/crypto/rfc6979_hmac_sha256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/rfc6979_hmac_sha256.h?ref=3060e360980f3e80db1d903085d759338ab27f4a",
        "patch": "@@ -0,0 +1,36 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RFC6979_HMAC_SHA256_H\n+#define BITCOIN_RFC6979_HMAC_SHA256_H\n+\n+#include \"crypto/hmac_sha256.h\"\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+/** The RFC 6979 PRNG using HMAC-SHA256. */\n+class RFC6979_HMAC_SHA256\n+{\n+private:\n+    unsigned char V[CHMAC_SHA256::OUTPUT_SIZE];\n+    unsigned char K[CHMAC_SHA256::OUTPUT_SIZE];\n+    bool retry;\n+\n+public:\n+    /**\n+     * Construct a new RFC6979 PRNG, using the given key and message.\n+     * The message is assumed to be already hashed.\n+     */\n+    RFC6979_HMAC_SHA256(const unsigned char* key, size_t keylen, const unsigned char* msg, size_t msglen);\n+\n+    /**\n+     * Generate a byte array.\n+     */\n+    void Generate(unsigned char* output, size_t outputlen);\n+\n+    ~RFC6979_HMAC_SHA256();\n+};\n+\n+#endif // BITCOIN_RFC6979_HMAC_SHA256_H"
      },
      {
        "sha": "26708f5071a37b8dacb1568e137ab725ab6f1312",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3060e360980f3e80db1d903085d759338ab27f4a/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3060e360980f3e80db1d903085d759338ab27f4a/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=3060e360980f3e80db1d903085d759338ab27f4a",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"crypto/rfc6979_hmac_sha256.h\"\n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha1.h\"\n #include \"crypto/sha256.h\"\n@@ -13,6 +14,7 @@\n \n #include <vector>\n \n+#include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n \n BOOST_AUTO_TEST_SUITE(crypto_tests)\n@@ -246,4 +248,38 @@ BOOST_AUTO_TEST_CASE(hmac_sha512_testvectors) {\n                    \"b6022cac3c4982b10d5eeb55c3e4de15134676fb6de0446065c97440fa8c6a58\");\n }\n \n+void TestRFC6979(const std::string& hexkey, const std::string& hexmsg, const std::vector<std::string>& hexout)\n+{\n+    std::vector<unsigned char> key = ParseHex(hexkey);\n+    std::vector<unsigned char> msg = ParseHex(hexmsg);\n+    RFC6979_HMAC_SHA256 rng(&key[0], key.size(), &msg[0], msg.size());\n+\n+    for (unsigned int i = 0; i < hexout.size(); i++) {\n+        std::vector<unsigned char> out = ParseHex(hexout[i]);\n+        std::vector<unsigned char> gen;\n+        gen.resize(out.size());\n+        rng.Generate(&gen[0], gen.size());\n+        BOOST_CHECK(out == gen);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(rfc6979_hmac_sha256)\n+{\n+    TestRFC6979(\n+        \"0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f00\",\n+        \"4bf5122f344554c53bde2ebb8cd2b7e3d1600ad631c385a5d7cce23c7785459a\",\n+        boost::assign::list_of\n+            (\"4fe29525b2086809159acdf0506efb86b0ec932c7ba44256ab321e421e67e9fb\")\n+            (\"2bf0fff1d3c378a22dc5de1d856522325c65b504491a0cbd01cb8f3aa67ffd4a\")\n+            (\"f528b410cb541f77000d7afb6c5b53c5c471eab43e466d9ac5190c39c82fd82e\"));\n+\n+    TestRFC6979(\n+        \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n+        \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n+        boost::assign::list_of\n+            (\"9c236c165b82ae0cd590659e100b6bab3036e7ba8b06749baf6981e16f1a2b95\")\n+            (\"df471061625bc0ea14b682feee2c9c02f235da04204c1d62a1536c6e17aed7a9\")\n+            (\"7597887cbd76321f32e30440679a22cf7f8d9d2eac390e581fea091ce202ba94\"));\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "a53fd4148596f5814409e15647714bdd2a71468b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTNmZDQxNDg1OTZmNTgxNDQwOWUxNTY0NzcxNGJkZDJhNzE0Njhi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-06T14:54:50Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-20T16:22:06Z"
      },
      "message": "Deterministic signing",
      "tree": {
        "sha": "56ceafe58e482181a7858ed59018a164e76d7cff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56ceafe58e482181a7858ed59018a164e76d7cff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a53fd4148596f5814409e15647714bdd2a71468b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a53fd4148596f5814409e15647714bdd2a71468b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a53fd4148596f5814409e15647714bdd2a71468b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a53fd4148596f5814409e15647714bdd2a71468b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3060e360980f3e80db1d903085d759338ab27f4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3060e360980f3e80db1d903085d759338ab27f4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3060e360980f3e80db1d903085d759338ab27f4a"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 49,
      "deletions": 14
    },
    "files": [
      {
        "sha": "0fb7a5c7c5d243dd85fed09026137d1055cdb769",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 11,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a53fd4148596f5814409e15647714bdd2a71468b/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a53fd4148596f5814409e15647714bdd2a71468b/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=a53fd4148596f5814409e15647714bdd2a71468b",
        "patch": "@@ -5,6 +5,7 @@\n #include \"key.h\"\n \n #include \"crypto/hmac_sha512.h\"\n+#include \"crypto/rfc6979_hmac_sha256.h\"\n #include \"eccryptoverify.h\"\n #include \"pubkey.h\"\n #include \"random.h\"\n@@ -71,30 +72,36 @@ CPubKey CKey::GetPubKey() const {\n     return result;\n }\n \n-bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig) const {\n+bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {\n     if (!fValid)\n         return false;\n     vchSig.resize(72);\n-    int nSigLen = 72;\n-    CKey nonce;\n+    RFC6979_HMAC_SHA256 prng(begin(), 32, (unsigned char*)&hash, 32);\n     do {\n-        nonce.MakeNewKey(true);\n-        if (secp256k1_ecdsa_sign((const unsigned char*)&hash, 32, (unsigned char*)&vchSig[0], &nSigLen, begin(), nonce.begin()))\n-            break;\n+        uint256 nonce;\n+        prng.Generate((unsigned char*)&nonce, 32);\n+        nonce += test_case;\n+        int nSigLen = 72;\n+        int ret = secp256k1_ecdsa_sign((const unsigned char*)&hash, 32, (unsigned char*)&vchSig[0], &nSigLen, begin(), (unsigned char*)&nonce);\n+        vchSig.resize(nSigLen);\n+        nonce = 0;\n+        if (ret)\n+            return true;\n     } while(true);\n-    vchSig.resize(nSigLen);\n-    return true;\n }\n \n bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig) const {\n     if (!fValid)\n         return false;\n     vchSig.resize(65);\n     int rec = -1;\n-    CKey nonce;\n+    RFC6979_HMAC_SHA256 prng(begin(), 32, (unsigned char*)&hash, 32);\n     do {\n-        nonce.MakeNewKey(true);\n-        if (secp256k1_ecdsa_sign_compact((const unsigned char*)&hash, 32, &vchSig[1], begin(), nonce.begin(), &rec))\n+        uint256 nonce;\n+        prng.Generate((unsigned char*)&nonce, 32);\n+        int ret = secp256k1_ecdsa_sign_compact((const unsigned char*)&hash, 32, &vchSig[1], begin(), (unsigned char*)&nonce, &rec);\n+        nonce = 0;\n+        if (ret)\n             break;\n     } while(true);\n     assert(rec != -1);"
      },
      {
        "sha": "463b373153e9975d28d444bb7409f7c0ba197005",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a53fd4148596f5814409e15647714bdd2a71468b/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a53fd4148596f5814409e15647714bdd2a71468b/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=a53fd4148596f5814409e15647714bdd2a71468b",
        "patch": "@@ -121,8 +121,12 @@ class CKey\n      */\n     CPubKey GetPubKey() const;\n \n-    //! Create a DER-serialized signature.\n-    bool Sign(const uint256& hash, std::vector<unsigned char>& vchSig) const;\n+    /**\n+     * Create a DER-serialized signature.\n+     * The test_case parameter tweaks the deterministic nonce, and is only for\n+     * testing. It should be zero for normal use.\n+     */\n+    bool Sign(const uint256& hash, std::vector<unsigned char>& vchSig, uint32_t test_case = 0) const;\n \n     /**\n      * Create a compact signature (65 bytes), which allows reconstructing the used public key."
      },
      {
        "sha": "47089368379d2945f30d9d29127f93ad955a7b6d",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a53fd4148596f5814409e15647714bdd2a71468b/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a53fd4148596f5814409e15647714bdd2a71468b/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=a53fd4148596f5814409e15647714bdd2a71468b",
        "patch": "@@ -8,6 +8,7 @@\n #include \"script/script.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <string>\n #include <vector>\n@@ -142,6 +143,28 @@ BOOST_AUTO_TEST_CASE(key_test1)\n         BOOST_CHECK(rkey1C == pubkey1C);\n         BOOST_CHECK(rkey2C == pubkey2C);\n     }\n+\n+    // test deterministic signing\n+\n+    std::vector<unsigned char> detsig, detsigc;\n+    string strMsg = \"Very deterministic message\";\n+    uint256 hashMsg = Hash(strMsg.begin(), strMsg.end());\n+    BOOST_CHECK(key1.Sign(hashMsg, detsig));\n+    BOOST_CHECK(key1C.Sign(hashMsg, detsigc));\n+    BOOST_CHECK(detsig == detsigc);\n+    BOOST_CHECK(detsig == ParseHex(\"304402205dbbddda71772d95ce91cd2d14b592cfbc1dd0aabd6a394b6c2d377bbe59d31d022014ddda21494a4e221f0824f0b8b924c43fa43c0ad57dccdaa11f81a6bd4582f6\"));\n+    BOOST_CHECK(key2.Sign(hashMsg, detsig));\n+    BOOST_CHECK(key2C.Sign(hashMsg, detsigc));\n+    BOOST_CHECK(detsig == detsigc);\n+    BOOST_CHECK(detsig == ParseHex(\"3044022052d8a32079c11e79db95af63bb9600c5b04f21a9ca33dc129c2bfa8ac9dc1cd5022061d8ae5e0f6c1a16bde3719c64c2fd70e404b6428ab9a69566962e8771b5944d\"));\n+    BOOST_CHECK(key1.SignCompact(hashMsg, detsig));\n+    BOOST_CHECK(key1C.SignCompact(hashMsg, detsigc));\n+    BOOST_CHECK(detsig == ParseHex(\"1c5dbbddda71772d95ce91cd2d14b592cfbc1dd0aabd6a394b6c2d377bbe59d31d14ddda21494a4e221f0824f0b8b924c43fa43c0ad57dccdaa11f81a6bd4582f6\"));\n+    BOOST_CHECK(detsigc == ParseHex(\"205dbbddda71772d95ce91cd2d14b592cfbc1dd0aabd6a394b6c2d377bbe59d31d14ddda21494a4e221f0824f0b8b924c43fa43c0ad57dccdaa11f81a6bd4582f6\"));\n+    BOOST_CHECK(key2.SignCompact(hashMsg, detsig));\n+    BOOST_CHECK(key2C.SignCompact(hashMsg, detsigc));\n+    BOOST_CHECK(detsig == ParseHex(\"1c52d8a32079c11e79db95af63bb9600c5b04f21a9ca33dc129c2bfa8ac9dc1cd561d8ae5e0f6c1a16bde3719c64c2fd70e404b6428ab9a69566962e8771b5944d\"));\n+    BOOST_CHECK(detsigc == ParseHex(\"2052d8a32079c11e79db95af63bb9600c5b04f21a9ca33dc129c2bfa8ac9dc1cd561d8ae5e0f6c1a16bde3719c64c2fd70e404b6428ab9a69566962e8771b5944d\"));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "d3a48234c656d775bc87300f4f6986cf4c187f7f",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a53fd4148596f5814409e15647714bdd2a71468b/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a53fd4148596f5814409e15647714bdd2a71468b/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=a53fd4148596f5814409e15647714bdd2a71468b",
        "patch": "@@ -248,8 +248,9 @@ class TestBuilder\n     {\n         uint256 hash = SignatureHash(scriptPubKey, spendTx, 0, nHashType);\n         std::vector<unsigned char> vchSig, r, s;\n+        uint32_t iter = 0;\n         do {\n-            key.Sign(hash, vchSig);\n+            key.Sign(hash, vchSig, iter++);\n             if ((lenS == 33) != (vchSig[5 + vchSig[3]] == 33)) {\n                 NegateSignatureS(vchSig);\n             }"
      }
    ]
  },
  {
    "sha": "9d8604f36a6f94b3c065a8143952cadd7d97aef5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDg2MDRmMzZhNmY5NGIzYzA2NWE4MTQzOTUyY2FkZDdkOTdhZWY1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-19T21:17:58Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-20T16:22:06Z"
      },
      "message": "Header define style cleanups",
      "tree": {
        "sha": "08ef560f83cab03e807fc2f9520c6cb303d610a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08ef560f83cab03e807fc2f9520c6cb303d610a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d8604f36a6f94b3c065a8143952cadd7d97aef5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d8604f36a6f94b3c065a8143952cadd7d97aef5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d8604f36a6f94b3c065a8143952cadd7d97aef5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d8604f36a6f94b3c065a8143952cadd7d97aef5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a53fd4148596f5814409e15647714bdd2a71468b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a53fd4148596f5814409e15647714bdd2a71468b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a53fd4148596f5814409e15647714bdd2a71468b"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "1fdee5a7cddf79ec612d2151ea566fe0cbfd4417",
        "filename": "src/crypto/hmac_sha256.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d8604f36a6f94b3c065a8143952cadd7d97aef5/src/crypto/hmac_sha256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d8604f36a6f94b3c065a8143952cadd7d97aef5/src/crypto/hmac_sha256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/hmac_sha256.h?ref=9d8604f36a6f94b3c065a8143952cadd7d97aef5",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_HMAC_SHA256_H\n-#define BITCOIN_HMAC_SHA256_H\n+#ifndef BITCOIN_CRYPTO_HMAC_SHA256_H\n+#define BITCOIN_CRYPTO_HMAC_SHA256_H\n \n #include \"crypto/sha256.h\"\n \n@@ -29,4 +29,4 @@ class CHMAC_SHA256\n     void Finalize(unsigned char hash[OUTPUT_SIZE]);\n };\n \n-#endif // BITCOIN_SHA256_H\n+#endif // BITCOIN_CRYPTO_HMAC_SHA256_H"
      },
      {
        "sha": "17d75021aa2c7553c4a37d06a1ae31df2bf9f756",
        "filename": "src/crypto/hmac_sha512.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d8604f36a6f94b3c065a8143952cadd7d97aef5/src/crypto/hmac_sha512.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d8604f36a6f94b3c065a8143952cadd7d97aef5/src/crypto/hmac_sha512.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/hmac_sha512.h?ref=9d8604f36a6f94b3c065a8143952cadd7d97aef5",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_HMAC_SHA512_H\n-#define BITCOIN_HMAC_SHA512_H\n+#ifndef BITCOIN_CRYPTO_HMAC_SHA512_H\n+#define BITCOIN_CRYPTO_HMAC_SHA512_H\n \n #include \"crypto/sha512.h\"\n \n@@ -29,4 +29,4 @@ class CHMAC_SHA512\n     void Finalize(unsigned char hash[OUTPUT_SIZE]);\n };\n \n-#endif // BITCOIN_HMAC_SHA512_H\n+#endif // BITCOIN_CRYPTO_HMAC_SHA512_H"
      },
      {
        "sha": "bde1a59bedb23c646ebd09893b9fe00515a40f56",
        "filename": "src/crypto/sha256.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d8604f36a6f94b3c065a8143952cadd7d97aef5/src/crypto/sha256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d8604f36a6f94b3c065a8143952cadd7d97aef5/src/crypto/sha256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.h?ref=9d8604f36a6f94b3c065a8143952cadd7d97aef5",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_SHA256_H\n-#define BITCOIN_SHA256_H\n+#ifndef BITCOIN_CRYPTO_SHA256_H\n+#define BITCOIN_CRYPTO_SHA256_H\n \n #include <stdint.h>\n #include <stdlib.h>\n@@ -25,4 +25,4 @@ class CSHA256\n     CSHA256& Reset();\n };\n \n-#endif // BITCOIN_SHA256_H\n+#endif // BITCOIN_CRYPTO_SHA256_H"
      },
      {
        "sha": "5566d5db3ef09f71e63c31c35776d1e73f7c6dfe",
        "filename": "src/crypto/sha512.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d8604f36a6f94b3c065a8143952cadd7d97aef5/src/crypto/sha512.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d8604f36a6f94b3c065a8143952cadd7d97aef5/src/crypto/sha512.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha512.h?ref=9d8604f36a6f94b3c065a8143952cadd7d97aef5",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_SHA512_H\n-#define BITCOIN_SHA512_H\n+#ifndef BITCOIN_CRYPTO_SHA512_H\n+#define BITCOIN_CRYPTO_SHA512_H\n \n #include <stdint.h>\n #include <stdlib.h>\n@@ -25,4 +25,4 @@ class CSHA512\n     CSHA512& Reset();\n };\n \n-#endif // BITCOIN_SHA512_H\n+#endif // BITCOIN_CRYPTO_SHA512_H"
      }
    ]
  },
  {
    "sha": "4cdaa95a209808276992dc1eb0ed0773f7927073",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2RhYTk1YTIwOTgwODI3Njk5MmRjMWViMGVkMDc3M2Y3OTI3MDcz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-28T20:16:51Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-28T20:16:51Z"
      },
      "message": "Resize after succesful result",
      "tree": {
        "sha": "ee1b48af389ef3660d21cf41e684d53636983d01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee1b48af389ef3660d21cf41e684d53636983d01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cdaa95a209808276992dc1eb0ed0773f7927073",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cdaa95a209808276992dc1eb0ed0773f7927073",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4cdaa95a209808276992dc1eb0ed0773f7927073",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cdaa95a209808276992dc1eb0ed0773f7927073/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d8604f36a6f94b3c065a8143952cadd7d97aef5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d8604f36a6f94b3c065a8143952cadd7d97aef5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d8604f36a6f94b3c065a8143952cadd7d97aef5"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "07fffcb0e0140e785fe6ac9a3241bb2ec007597e",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cdaa95a209808276992dc1eb0ed0773f7927073/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cdaa95a209808276992dc1eb0ed0773f7927073/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=4cdaa95a209808276992dc1eb0ed0773f7927073",
        "patch": "@@ -83,10 +83,11 @@ bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_\n         nonce += test_case;\n         int nSigLen = 72;\n         int ret = secp256k1_ecdsa_sign((const unsigned char*)&hash, 32, (unsigned char*)&vchSig[0], &nSigLen, begin(), (unsigned char*)&nonce);\n-        vchSig.resize(nSigLen);\n         nonce = 0;\n-        if (ret)\n+        if (ret) {\n+            vchSig.resize(nSigLen);\n             return true;\n+        }\n     } while(true);\n }\n "
      }
    ]
  }
]