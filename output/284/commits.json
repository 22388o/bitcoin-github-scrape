[
  {
    "sha": "909ab0acc2f1331cc774feabec33fa73b05c1874",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDlhYjBhY2MyZjEzMzFjYzc3NGZlYWJlYzMzZmE3M2IwNWMxODc0",
    "commit": {
      "author": {
        "name": "Jaromil",
        "email": "jaromil@dyne.org",
        "date": "2011-05-29T12:05:33Z"
      },
      "committer": {
        "name": "Jaromil",
        "email": "jaromil@dyne.org",
        "date": "2011-05-29T14:08:17Z"
      },
      "message": "RPC password prompt using pinentry via ASSUAN\n\nA new class Pin is used to create secure password dialogs using\nprocess separation.\n\nIPC is done via libassuan and the assuan daemon user is standard\npinentry (portable qt, gtk2 and ncurses implementations are available)\n\nPinentry takes care of memlocking and is the standard for GNUPG.",
      "tree": {
        "sha": "7b4a8993aa34b63198e99cdd1f87deefa71e7e12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b4a8993aa34b63198e99cdd1f87deefa71e7e12"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/909ab0acc2f1331cc774feabec33fa73b05c1874",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/909ab0acc2f1331cc774feabec33fa73b05c1874",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/909ab0acc2f1331cc774feabec33fa73b05c1874",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/909ab0acc2f1331cc774feabec33fa73b05c1874/comments",
    "author": {
      "login": "jaromil",
      "id": 148059,
      "node_id": "MDQ6VXNlcjE0ODA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/148059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaromil",
      "html_url": "https://github.com/jaromil",
      "followers_url": "https://api.github.com/users/jaromil/followers",
      "following_url": "https://api.github.com/users/jaromil/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaromil/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaromil/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaromil/subscriptions",
      "organizations_url": "https://api.github.com/users/jaromil/orgs",
      "repos_url": "https://api.github.com/users/jaromil/repos",
      "events_url": "https://api.github.com/users/jaromil/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaromil/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jaromil",
      "id": 148059,
      "node_id": "MDQ6VXNlcjE0ODA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/148059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaromil",
      "html_url": "https://github.com/jaromil",
      "followers_url": "https://api.github.com/users/jaromil/followers",
      "following_url": "https://api.github.com/users/jaromil/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaromil/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaromil/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaromil/subscriptions",
      "organizations_url": "https://api.github.com/users/jaromil/orgs",
      "repos_url": "https://api.github.com/users/jaromil/repos",
      "events_url": "https://api.github.com/users/jaromil/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaromil/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5fecb27c1ec6b583fa07028cd26c21dd191c125f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fecb27c1ec6b583fa07028cd26c21dd191c125f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5fecb27c1ec6b583fa07028cd26c21dd191c125f"
      }
    ],
    "stats": {
      "total": 219,
      "additions": 210,
      "deletions": 9
    },
    "files": [
      {
        "sha": "d8f02abcfea5ed5e66e36bd3821a233a5a1f9997",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/909ab0acc2f1331cc774feabec33fa73b05c1874/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/909ab0acc2f1331cc774feabec33fa73b05c1874/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=909ab0acc2f1331cc774feabec33fa73b05c1874",
        "patch": "@@ -8,7 +8,8 @@ WXINCLUDEPATHS=$(shell wx-config --cxxflags)\n \n WXLIBS=$(shell wx-config --libs)\n \n-USE_UPNP:=0\n+# USE_UPNP:=0\n+# USE_ASSUAN:=1\n \n DEFS=-DNOPCH -DFOURWAYSSE2 -DUSE_SSL\n \n@@ -28,18 +29,24 @@ ifdef USE_UPNP\n \tDEFS += -DUSE_UPNP=$(USE_UPNP)\n endif\n \n+\n LIBS+= \\\n  -Wl,-Bdynamic \\\n    -l gthread-2.0 \\\n    -l z \\\n    -l dl \\\n    -l pthread\n \n+ifdef USE_ASSUAN\n+      LIBS += -l assuan\n+      DEFS += -DUSE_ASSUAN\n+endif\n+\n \n DEBUGFLAGS=-g -D__WXDEBUG__\n CXXFLAGS=-O2 -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS)\n HEADERS=headers.h strlcpy.h serialize.h uint256.h util.h key.h bignum.h base58.h \\\n-    script.h db.h net.h irc.h main.h rpc.h uibase.h ui.h noui.h init.h\n+    script.h db.h net.h irc.h main.h rpc.h uibase.h ui.h noui.h init.h pinentry.h\n \n OBJS= \\\n     obj/util.o \\\n@@ -50,6 +57,7 @@ OBJS= \\\n     obj/main.o \\\n     obj/rpc.o \\\n     obj/init.o \\\n+    obj/pinentry.o \\\n     cryptopp/obj/sha.o \\\n     cryptopp/obj/cpu.o\n "
      },
      {
        "sha": "87050c2438bb86afd7da0e8a0fcaa6cb7f3b9f81",
        "filename": "src/pinentry.cpp",
        "status": "added",
        "additions": 112,
        "deletions": 0,
        "changes": 112,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/909ab0acc2f1331cc774feabec33fa73b05c1874/src/pinentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/909ab0acc2f1331cc774feabec33fa73b05c1874/src/pinentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pinentry.cpp?ref=909ab0acc2f1331cc774feabec33fa73b05c1874",
        "patch": "@@ -0,0 +1,112 @@\n+// Copyright (c) 2011 Denis Roio <jaromil@dyne.org>\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"headers.h\"\n+\n+#ifdef USE_ASSUAN\n+\n+#include \"pinentry.h\"\n+\n+#define SECURE_EXEC_PATH \"/usr/bin\"\n+\n+\n+// callbacks\n+static void *assuan_data_cb_arg;\n+static void *assuan_inquire_cb_arg;\n+static void *assuan_status_cb_arg;\n+gpg_error_t assuan_data_cb(void * ctx, const void * msg, size_t len)\n+{\n+  // msg contains input password\n+  // len contains its length\n+  //  fprintf(stderr,\"data cb: %s (%u) - %s\\n\", msg, len, (char*)_data_cb_arg);\n+  Pin *pin = (Pin*)assuan_data_cb_arg;\n+\n+  if(!pin)\n+    return GPG_ERR_NO_DATA;\n+  else\n+    pin->answer = (char*)msg;\n+  \n+  return 0;\n+}\n+gpg_error_t assuan_inquire_cb(void* ctx, const char *msg)\n+{ // nop\n+  return 0;\n+}\n+gpg_error_t assuan_status_cb(void* ctx, const char *msg)\n+{ // nop\n+  return 0;\n+}\n+\n+\n+Pin::Pin() {\n+  gpg_error_t res;\n+  pid_t pid;\n+  int flags;\n+  const char *argv[2];\n+\n+  gpg_err_init();\n+  res = assuan_new (&ctx);\n+  if(res)\n+    throw runtime_error(strprintf(\"pinentry initialisation: %s\", gpg_strerror(res)));\n+\n+  assuan_set_assuan_log_prefix(\"Pin: \");\n+\n+  // needed esp. for ncurses\n+  lang = strprintf(\"OPTION lc-ctype=%s\",getenv(\"LANG\"));\n+  tty = strprintf(\"OPTION ttyname=%s\",getenv(\"TTY\"));\n+\n+  flags = 0x0;\n+  argv[0] = \"bitcoind\"; // fake argv\n+  argv[1] = NULL;\n+  res = assuan_pipe_connect (ctx, SECURE_EXEC_PATH\"/pinentry\",\n+\t\t\t     argv, NULL, NULL, NULL, flags);\n+  if(res)\n+    throw runtime_error(strprintf(\"pinentry pipe forking: %s\", gpg_strerror(res)));\n+\n+  pid = assuan_get_pid(ctx);\n+  if(pid == ASSUAN_INVALID_PID)\n+    throw runtime_error(strprintf(\"pinentry not running: %s\", gpg_strerror(res)));\n+\n+  cmd(tty.c_str());\n+  cmd(lang.c_str());\n+}\n+\n+Pin::~Pin()\n+{\n+  assuan_release(ctx);\n+}\n+\n+void Pin::title(string t)\n+{ \n+  string tt = strprintf(\"SETTITLE %s\",t.c_str());\n+  cmd(tt.c_str());\n+}\n+void Pin::description(string d)\n+{\n+  string dd = strprintf(\"SETDESC %s\",d.c_str());\n+  cmd(dd.c_str());\n+}\n+void Pin::prompt(string p) \n+{\n+  string pp = strprintf(\"SETPROMPT %s\",p.c_str());\n+  cmd(pp.c_str());\n+}\n+\n+void Pin::ask()\n+{\n+  assuan_data_cb_arg = this;\n+  cmd(\"GETPIN\");\n+}\n+\n+void Pin::cmd(const char *command) {\n+  gpg_error_t res;\n+  res = assuan_transact(ctx, command,\n+\t\t\t&assuan_data_cb, assuan_data_cb_arg,\n+\t\t\t&assuan_inquire_cb, assuan_inquire_cb_arg,\n+\t\t\t&assuan_status_cb, assuan_status_cb_arg);\n+  if(res)\n+    throw runtime_error(strprintf(\"assuan_transaction: %s\", gpg_strerror(res)));\n+}\n+\n+#endif"
      },
      {
        "sha": "a557d348a07e307d90b3103b3980972d56c8322c",
        "filename": "src/pinentry.h",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/909ab0acc2f1331cc774feabec33fa73b05c1874/src/pinentry.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/909ab0acc2f1331cc774feabec33fa73b05c1874/src/pinentry.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pinentry.h?ref=909ab0acc2f1331cc774feabec33fa73b05c1874",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2011 Denis Roio <jaromil@dyne.org>\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"headers.h\"\n+\n+#ifdef USE_ASSUAN\n+\n+\n+#ifndef __PINENTRY_H__\n+#define __PINENTRY_H__\n+\n+\n+using namespace std;\n+\n+// Do not include the definitions for the socket wrapper feature.\n+#define _ASSUAN_NO_SOCKET_WRAPPER\n+\n+#include <assuan.h>\n+\n+\n+// actual public class\n+class Pin {\n+\n+ public:\n+  Pin();\n+  ~Pin();\n+\n+  void title(string t); ///< set the dialog title\n+  void description(string d); ///< set the dialog description\n+  void prompt(string d); ///< set the dialog description\n+  void ask();\n+  string answer;\n+  //  string get_tty();\n+  //  string set_tty();\n+\n+ private:\n+  void cmd(const char *command);\n+\n+  assuan_context_t ctx;\n+\n+  string tty;\n+  string lang;\n+};\n+\n+#endif\n+#endif"
      },
      {
        "sha": "4d84154349ea2a3b7e120d53c1905495444c3b2b",
        "filename": "src/rpc.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 7,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/909ab0acc2f1331cc774feabec33fa73b05c1874/src/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/909ab0acc2f1331cc774feabec33fa73b05c1874/src/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.cpp?ref=909ab0acc2f1331cc774feabec33fa73b05c1874",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"headers.h\"\n #include \"cryptopp/sha.h\"\n+#include \"pinentry.h\"\n #undef printf\n #include <boost/asio.hpp>\n #include <boost/iostreams/concepts.hpp>\n@@ -1969,11 +1970,6 @@ void ThreadRPCServer2(void* parg)\n \n Object CallRPC(const string& strMethod, const Array& params)\n {\n-    if (mapArgs[\"-rpcuser\"] == \"\" && mapArgs[\"-rpcpassword\"] == \"\")\n-        throw runtime_error(strprintf(\n-            _(\"You must set rpcpassword=<password> in the configuration file:\\n%s\\n\"\n-              \"If the file does not exist, create it with owner-readable-only file permissions.\"),\n-                GetConfigFile().c_str()));\n \n     // Connect to localhost\n     bool fUseSSL = GetBoolArg(\"-rpcssl\");\n@@ -1995,9 +1991,47 @@ Object CallRPC(const string& strMethod, const Array& params)\n         throw runtime_error(\"couldn't connect to server\");\n #endif\n \n-\n+    string strUserPass64;\n+    string strUser, strPass;\n+    strUser = mapArgs[\"-rpcuser\"];\n+    if (strUser == \"\") {\n+#ifndef USE_ASSUAN\n+      throw runtime_error\n+\t(strprintf\n+\t (_(\"You must set rpcpuser=<user> in the configuration file:\\n%s\\n\"\n+\t    \"If the file does not exist, create it with owner-readable-only file permissions.\"),\n+\t  GetConfigFile().c_str()));\n+#else\n+      Pin *askuser = new Pin();\n+      askuser->title(_(\"Bitcoin user login\"));\n+      askuser->description(_(\"Please choose the username to connect bitcoin via RPC\"));\n+      askuser->prompt(_(\"login:\"));\n+      askuser->ask();\n+      strUser = askuser->answer;\n+      delete askuser;\n+#endif\n+    }\n+    strPass = mapArgs[\"-rpcpassword\"];\n+    if (strPass == \"\") {\n+#ifndef USE_ASSUAN\n+      throw runtime_error\n+\t(strprintf\n+\t (_(\"You must set rpcpassword=<password> in the configuration file:\\n%s\\n\"\n+\t    \"If the file does not exist, create it with owner-readable-only file permissions.\"),\n+\t  GetConfigFile().c_str()));\n+#else\n+      Pin *askpass = new Pin();\n+      askpass->title(_(\"Bitcoin password\"));\n+      askpass->description(_(\"Please type the password to connect bitcoin via RPC\"));\n+      askpass->prompt(strprintf(\"%s password:\", strUser.c_str()));\n+      askpass->ask();\n+      strPass = askpass->answer;\n+      delete askpass;\n+#endif\n+    }\n     // HTTP basic authentication\n-    string strUserPass64 = EncodeBase64(mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"]);\n+    strUserPass64 = EncodeBase64(strUser + \":\" + strPass);\n+\n     map<string, string> mapRequestHeaders;\n     mapRequestHeaders[\"Authorization\"] = string(\"Basic \") + strUserPass64;\n "
      }
    ]
  }
]