[
  {
    "sha": "e1e1146944e5b5a6509c338ccc759c22c355cdff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWUxMTQ2OTQ0ZTViNWE2NTA5YzMzOGNjYzc1OWMyMmMzNTVjZGZm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-05-24T13:58:28Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-05-26T09:25:07Z"
      },
      "message": "scripted-diff: Complete the move from CCriticalSection to identical RecursiveMutex (both are AnnotatedMixin<std::recursive_mutex>)\n\n-BEGIN VERIFY SCRIPT-\ngit grep -l \"CCriticalSection\" \":(exclude)src/sync.h\" | xargs sed -i \"s/CCriticalSection/RecursiveMutex/g\"\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "538879eb9b53f741cb1975becaa4816414327262",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/538879eb9b53f741cb1975becaa4816414327262"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1e1146944e5b5a6509c338ccc759c22c355cdff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1e1146944e5b5a6509c338ccc759c22c355cdff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1e1146944e5b5a6509c338ccc759c22c355cdff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1e1146944e5b5a6509c338ccc759c22c355cdff/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ab4f282c06d67074b872dbda0be37636fdd5186",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ab4f282c06d67074b872dbda0be37636fdd5186",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ab4f282c06d67074b872dbda0be37636fdd5186"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 46,
      "deletions": 46
    },
    "files": [
      {
        "sha": "30f593370d8961735e1323a9ae1b3ff7d876e522",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -176,7 +176,7 @@ class CAddrMan\n {\n protected:\n     //! critical section to protect the inner data structures\n-    mutable CCriticalSection cs;\n+    mutable RecursiveMutex cs;\n \n private:\n     //! last used nId"
      },
      {
        "sha": "ebf5d53ff83ca8e43845163e6f4764680d2e2f7e",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -58,7 +58,7 @@ class BanMan\n     //!clean unused entries (if bantime has expired)\n     void SweepBanned();\n \n-    CCriticalSection m_cs_banned;\n+    RecursiveMutex m_cs_banned;\n     banmap_t m_banned GUARDED_BY(m_cs_banned);\n     bool m_is_dirty GUARDED_BY(m_cs_banned);\n     CClientUIInterface* m_client_interface = nullptr;"
      },
      {
        "sha": "362108f1090bb10131b8bbeb2911dacbaf5f4945",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -198,7 +198,7 @@ void Interrupt()\n void Shutdown(InitInterfaces& interfaces)\n {\n     LogPrintf(\"%s: In progress...\\n\", __func__);\n-    static CCriticalSection cs_Shutdown;\n+    static RecursiveMutex cs_Shutdown;\n     TRY_LOCK(cs_Shutdown, lockShutdown);\n     if (!lockShutdown)\n         return;"
      },
      {
        "sha": "978c5d727d9923b2de356a681af3272e6eb956ab",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -37,7 +37,7 @@\n namespace interfaces {\n namespace {\n \n-class LockImpl : public Chain::Lock, public UniqueLock<CCriticalSection>\n+class LockImpl : public Chain::Lock, public UniqueLock<RecursiveMutex>\n {\n     Optional<int> getHeight() override\n     {"
      },
      {
        "sha": "7b236c7639c882de4cfae7447c6535e9cb481b56",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -42,7 +42,7 @@ class CKeyStore : public SigningProvider\n class CBasicKeyStore : public CKeyStore\n {\n protected:\n-    mutable CCriticalSection cs_KeyStore;\n+    mutable RecursiveMutex cs_KeyStore;\n \n     using KeyMap = std::map<CKeyID, CKey>;\n     using WatchKeyMap = std::map<CKeyID, CPubKey>;"
      },
      {
        "sha": "defd0309679a1f655f2cfa9e0c238fd0db88938a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -80,7 +80,7 @@ static const uint64_t RANDOMIZER_ID_LOCALHOSTNONCE = 0xd93e69e2bbfa5735ULL; // S\n bool fDiscover = true;\n bool fListen = true;\n bool g_relay_txes = !DEFAULT_BLOCKSONLY;\n-CCriticalSection cs_mapLocalHost;\n+RecursiveMutex cs_mapLocalHost;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n static bool vfLimited[NET_MAX] GUARDED_BY(cs_mapLocalHost) = {};\n std::string strSubVersion;"
      },
      {
        "sha": "a3753c5d0bb2f8fdb52e589a0a8528212c274c62",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -364,8 +364,8 @@ class CConnman\n     static bool NodeFullyConnected(const CNode* pnode);\n \n     // Network usage totals\n-    CCriticalSection cs_totalBytesRecv;\n-    CCriticalSection cs_totalBytesSent;\n+    RecursiveMutex cs_totalBytesRecv;\n+    RecursiveMutex cs_totalBytesSent;\n     uint64_t nTotalBytesRecv GUARDED_BY(cs_totalBytesRecv);\n     uint64_t nTotalBytesSent GUARDED_BY(cs_totalBytesSent);\n \n@@ -390,12 +390,12 @@ class CConnman\n     bool fAddressesInitialized{false};\n     CAddrMan addrman;\n     std::deque<std::string> vOneShots GUARDED_BY(cs_vOneShots);\n-    CCriticalSection cs_vOneShots;\n+    RecursiveMutex cs_vOneShots;\n     std::vector<std::string> vAddedNodes GUARDED_BY(cs_vAddedNodes);\n-    CCriticalSection cs_vAddedNodes;\n+    RecursiveMutex cs_vAddedNodes;\n     std::vector<CNode*> vNodes GUARDED_BY(cs_vNodes);\n     std::list<CNode*> vNodesDisconnected;\n-    mutable CCriticalSection cs_vNodes;\n+    mutable RecursiveMutex cs_vNodes;\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n@@ -529,7 +529,7 @@ struct LocalServiceInfo {\n     int nPort;\n };\n \n-extern CCriticalSection cs_mapLocalHost;\n+extern RecursiveMutex cs_mapLocalHost;\n extern std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n \n extern const std::string NET_MESSAGE_COMMAND_OTHER;\n@@ -627,15 +627,15 @@ class CNode\n     size_t nSendOffset{0}; // offset inside the first vSendMsg already sent\n     uint64_t nSendBytes GUARDED_BY(cs_vSend){0};\n     std::deque<std::vector<unsigned char>> vSendMsg GUARDED_BY(cs_vSend);\n-    CCriticalSection cs_vSend;\n-    CCriticalSection cs_hSocket;\n-    CCriticalSection cs_vRecv;\n+    RecursiveMutex cs_vSend;\n+    RecursiveMutex cs_hSocket;\n+    RecursiveMutex cs_vRecv;\n \n-    CCriticalSection cs_vProcessMsg;\n+    RecursiveMutex cs_vProcessMsg;\n     std::list<CNetMessage> vProcessMsg GUARDED_BY(cs_vProcessMsg);\n     size_t nProcessQueueSize{0};\n \n-    CCriticalSection cs_sendProcessing;\n+    RecursiveMutex cs_sendProcessing;\n \n     std::deque<CInv> vRecvGetData;\n     uint64_t nRecvBytes GUARDED_BY(cs_vRecv){0};\n@@ -675,7 +675,7 @@ class CNode\n     bool fRelayTxes GUARDED_BY(cs_filter){false};\n     bool fSentAddr{false};\n     CSemaphoreGrant grantOutbound;\n-    mutable CCriticalSection cs_filter;\n+    mutable RecursiveMutex cs_filter;\n     std::unique_ptr<CBloomFilter> pfilter PT_GUARDED_BY(cs_filter);\n     std::atomic<int> nRefCount{0};\n \n@@ -708,7 +708,7 @@ class CNode\n     // There is no final sorting before sending, as they are always sent immediately\n     // and in the order requested.\n     std::vector<uint256> vInventoryBlockToSend GUARDED_BY(cs_inventory);\n-    CCriticalSection cs_inventory;\n+    RecursiveMutex cs_inventory;\n     int64_t nNextInvSend{0};\n     // Used for headers announcements - unfiltered blocks to relay\n     std::vector<uint256> vBlockHashesToAnnounce GUARDED_BY(cs_inventory);\n@@ -735,7 +735,7 @@ class CNode\n     std::atomic<bool> fPingQueued{false};\n     // Minimum fee rate with which to filter inv's to this node\n     CAmount minFeeFilter GUARDED_BY(cs_feeFilter){0};\n-    CCriticalSection cs_feeFilter;\n+    RecursiveMutex cs_feeFilter;\n     CAmount lastSentFeeFilter{0};\n     int64_t nextSendTimeFeeFilter{0};\n \n@@ -755,12 +755,12 @@ class CNode\n     int nSendVersion{0};\n     std::list<CNetMessage> vRecvMsg;  // Used only by SocketHandler thread\n \n-    mutable CCriticalSection cs_addrName;\n+    mutable RecursiveMutex cs_addrName;\n     std::string addrName GUARDED_BY(cs_addrName);\n \n     // Our address, as reported by the peer\n     CService addrLocal GUARDED_BY(cs_addrLocal);\n-    mutable CCriticalSection cs_addrLocal;\n+    mutable RecursiveMutex cs_addrLocal;\n public:\n \n     NodeId GetId() const {"
      },
      {
        "sha": "8a0faaa33ebff0c59217103cd958a735c096c260",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -88,7 +88,7 @@ struct COrphanTx {\n     int64_t nTimeExpire;\n     size_t list_pos;\n };\n-CCriticalSection g_cs_orphans;\n+RecursiveMutex g_cs_orphans;\n std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n \n void EraseOrphansFor(NodeId peer);\n@@ -1128,7 +1128,7 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n }\n \n // All of the following cache a recent block, and are protected by cs_most_recent_block\n-static CCriticalSection cs_most_recent_block;\n+static RecursiveMutex cs_most_recent_block;\n static std::shared_ptr<const CBlock> most_recent_block GUARDED_BY(cs_most_recent_block);\n static std::shared_ptr<const CBlockHeaderAndShortTxIDs> most_recent_compact_block GUARDED_BY(cs_most_recent_block);\n static uint256 most_recent_block_hash GUARDED_BY(cs_most_recent_block);"
      },
      {
        "sha": "ecdaafc0d5b7ad63736b184062301b775a286119",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -11,7 +11,7 @@\n #include <consensus/params.h>\n #include <sync.h>\n \n-extern CCriticalSection cs_main;\n+extern RecursiveMutex cs_main;\n \n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;"
      },
      {
        "sha": "3ff6a9cdb82aaa5ec88f2c4eb420d83390860efd",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -30,7 +30,7 @@\n #endif\n \n // Settings\n-static CCriticalSection cs_proxyInfos;\n+static RecursiveMutex cs_proxyInfos;\n static proxyType proxyInfo[NET_MAX] GUARDED_BY(cs_proxyInfos);\n static proxyType nameProxy GUARDED_BY(cs_proxyInfos);\n int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;"
      },
      {
        "sha": "eaf1412227415724dca3aa185fd09f4baea86db8",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -224,7 +224,7 @@ class CBlockPolicyEstimator\n     unsigned int HighestTargetTracked(FeeEstimateHorizon horizon) const;\n \n private:\n-    mutable CCriticalSection m_cs_fee_estimator;\n+    mutable RecursiveMutex m_cs_fee_estimator;\n \n     unsigned int nBestSeenHeight GUARDED_BY(m_cs_fee_estimator);\n     unsigned int firstRecordedHeight GUARDED_BY(m_cs_fee_estimator);"
      },
      {
        "sha": "8312ac51ee600651583c913f22c359aa26eeb889",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -22,7 +22,7 @@\n #include <memory> // for unique_ptr\n #include <unordered_map>\n \n-static CCriticalSection cs_rpcWarmup;\n+static RecursiveMutex cs_rpcWarmup;\n static std::atomic<bool> g_rpc_running{false};\n static bool fRPCInWarmup GUARDED_BY(cs_rpcWarmup) = true;\n static std::string rpcWarmupStatus GUARDED_BY(cs_rpcWarmup) = \"RPC server started\";"
      },
      {
        "sha": "9b419257b08f65d23a815a6e39ab312144ab8de2",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -98,7 +98,7 @@ class SingleThreadedSchedulerClient {\n private:\n     CScheduler *m_pscheduler;\n \n-    CCriticalSection m_cs_callbacks_pending;\n+    RecursiveMutex m_cs_callbacks_pending;\n     std::list<std::function<void ()>> m_callbacks_pending GUARDED_BY(m_cs_callbacks_pending);\n     bool m_are_callbacks_running GUARDED_BY(m_cs_callbacks_pending) = false;\n "
      },
      {
        "sha": "94a4f6d22a3d2eec14deb3b6d3d4840263ca467e",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -77,7 +77,7 @@ typedef std::set<std::pair<void*, void*> > InvLockOrders;\n struct LockData {\n     // Very ugly hack: as the global constructs and destructors run single\n     // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global CCriticalSection destructors\n+    // as DeleteLock can get called by global RecursiveMutex destructors\n     // after LockData disappears.\n     bool available;\n     LockData() : available(true) {}"
      },
      {
        "sha": "28be691a4b970849f46c0fe0d605c777d55645a5",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -49,7 +49,7 @@ struct COrphanTx {\n     NodeId fromPeer;\n     int64_t nTimeExpire;\n };\n-extern CCriticalSection g_cs_orphans;\n+extern RecursiveMutex g_cs_orphans;\n extern std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n \n static CService ip(uint32_t i)"
      },
      {
        "sha": "1a688ddb0887a87e6eb69617bcdc5b3a594b5e15",
        "filename": "src/test/sync_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/test/sync_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/test/sync_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sync_tests.cpp?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -38,7 +38,7 @@ BOOST_AUTO_TEST_CASE(potential_deadlock_detected)\n     g_debug_lockorder_abort = false;\n     #endif\n \n-    CCriticalSection rmutex1, rmutex2;\n+    RecursiveMutex rmutex1, rmutex2;\n     TestPotentialDeadLockDetected(rmutex1, rmutex2);\n \n     Mutex mutex1, mutex2;"
      },
      {
        "sha": "1c60837f0a3f4893c0a5bf1a3c4d9ebaccfca06a",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -26,7 +26,7 @@ BOOST_FIXTURE_TEST_SUITE(util_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(util_criticalsection)\n {\n-    CCriticalSection cs;\n+    RecursiveMutex cs;\n \n     do {\n         LOCK(cs);"
      },
      {
        "sha": "46545ee0b5a23ec6b4c7ee16d9e016e534918b6a",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -16,7 +16,7 @@\n #include <warnings.h>\n \n \n-static CCriticalSection cs_nTimeOffset;\n+static RecursiveMutex cs_nTimeOffset;\n static int64_t nTimeOffset GUARDED_BY(cs_nTimeOffset) = 0;\n \n /**"
      },
      {
        "sha": "5927db511b4f6d9423f0c41c7047519a3ff2b8f1",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -29,7 +29,7 @@\n #include <boost/signals2/signal.hpp>\n \n class CBlockIndex;\n-extern CCriticalSection cs_main;\n+extern RecursiveMutex cs_main;\n \n /** Fake height value used in Coin to signify they are only in the memory pool (since 0.8) */\n static const uint32_t MEMPOOL_HEIGHT = 0x7FFFFFFF;"
      },
      {
        "sha": "348794a7038661d785299a47fcf21e8c09257b7a",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -707,7 +707,7 @@ fs::path GetDefaultDataDir()\n static fs::path g_blocks_path_cache_net_specific;\n static fs::path pathCached;\n static fs::path pathCachedNetSpecific;\n-static CCriticalSection csPathCached;\n+static RecursiveMutex csPathCached;\n \n const fs::path &GetBlocksDir()\n {"
      },
      {
        "sha": "2bc1e119d0368d5add803e4660e740da79023d9a",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -150,7 +150,7 @@ class ArgsManager\n         Arg(const std::string& help_param, const std::string& help_text, bool debug_only) : m_help_param(help_param), m_help_text(help_text), m_debug_only(debug_only) {};\n     };\n \n-    mutable CCriticalSection cs_args;\n+    mutable RecursiveMutex cs_args;\n     std::map<std::string, std::vector<std::string>> m_override_args GUARDED_BY(cs_args);\n     std::map<std::string, std::vector<std::string>> m_config_args GUARDED_BY(cs_args);\n     std::string m_network GUARDED_BY(cs_args);"
      },
      {
        "sha": "ca42e7a0c8acb6a4c8f1131f65ecfba275095d0b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -122,7 +122,7 @@ class CChainState {\n      * Every received block is assigned a unique and increasing identifier, so we\n      * know which one to give priority in case of a fork.\n      */\n-    CCriticalSection cs_nBlockSequenceId;\n+    RecursiveMutex cs_nBlockSequenceId;\n     /** Blocks loaded from disk are assigned id 0, so start the counter at 1. */\n     int32_t nBlockSequenceId = 1;\n     /** Decreasing counter (used by subsequent preciousblock calls). */\n@@ -154,7 +154,7 @@ class CChainState {\n      * the ChainState CriticalSection\n      * A lock that must be held when modifying this ChainState - held in ActivateBestChain()\n      */\n-    CCriticalSection m_cs_chainstate;\n+    RecursiveMutex m_cs_chainstate;\n \n public:\n     //! The current chain of blockheaders we consult and build on.\n@@ -272,7 +272,7 @@ namespace {\n      */\n     std::multimap<CBlockIndex*, CBlockIndex*>& mapBlocksUnlinked = g_chainstate.mapBlocksUnlinked;\n \n-    CCriticalSection cs_LastBlockFile;\n+    RecursiveMutex cs_LastBlockFile;\n     std::vector<CBlockFileInfo> vinfoBlockFile;\n     int nLastBlockFile = 0;\n     /** Global flag to indicate we should check to see if there are"
      },
      {
        "sha": "e9b1290fd4149bec0922ae8e2827984b4e41e4fb",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -139,7 +139,7 @@ struct BlockHasher\n };\n \n extern CScript COINBASE_FLAGS;\n-extern CCriticalSection cs_main;\n+extern RecursiveMutex cs_main;\n extern CBlockPolicyEstimator feeEstimator;\n extern CTxMemPool mempool;\n typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;"
      },
      {
        "sha": "400560aa2f437cc54556a12d87aa84597f30aaa2",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -12,7 +12,7 @@\n #include <functional>\n #include <memory>\n \n-extern CCriticalSection cs_main;\n+extern RecursiveMutex cs_main;\n class CBlock;\n class CBlockIndex;\n struct CBlockLocator;"
      },
      {
        "sha": "59105368e915fd06711ccee6d7ca6b49dfdda915",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -47,7 +47,7 @@ void CheckUniqueFileid(const BerkeleyEnvironment& env, const std::string& filena\n     }\n }\n \n-CCriticalSection cs_db;\n+RecursiveMutex cs_db;\n std::map<std::string, std::weak_ptr<BerkeleyEnvironment>> g_dbenvs GUARDED_BY(cs_db); //!< Map from directory name to db environment.\n } // namespace\n \n@@ -653,7 +653,7 @@ void BerkeleyEnvironment::ReloadDbEnv()\n {\n     // Make sure that no Db's are in use\n     AssertLockNotHeld(cs_db);\n-    std::unique_lock<CCriticalSection> lock(cs_db);\n+    std::unique_lock<RecursiveMutex> lock(cs_db);\n     m_db_in_use.wait(lock, [this](){\n         for (auto& count : mapFileUseCount) {\n             if (count.second > 0) return false;"
      },
      {
        "sha": "b8ff915d6a5d80c7adcae7932f861a727b3d295d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -43,7 +43,7 @@\n \n static const size_t OUTPUT_GROUP_MAX_ENTRIES = 10;\n \n-static CCriticalSection cs_wallets;\n+static RecursiveMutex cs_wallets;\n static std::vector<std::shared_ptr<CWallet>> vpwallets GUARDED_BY(cs_wallets);\n \n bool AddWallet(const std::shared_ptr<CWallet>& wallet)"
      },
      {
        "sha": "6feb248c6bbc7a04a5fb386489b9a83bafb873af",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1e1146944e5b5a6509c338ccc759c22c355cdff/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "patch": "@@ -800,7 +800,7 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n      * Main wallet lock.\n      * This lock protects all the fields added by CWallet.\n      */\n-    mutable CCriticalSection cs_wallet;\n+    mutable RecursiveMutex cs_wallet;\n \n     /** Get database handle used by this wallet. Ideally this function would\n      * not be necessary."
      }
    ]
  },
  {
    "sha": "bec38f55b702f9c4b5e411bf1d0b020cac741914",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWMzOGY1NWI3MDJmOWM0YjVlNDExYmYxZDBiMDIwY2FjNzQxOTE0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-05-24T14:01:21Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-05-26T09:25:07Z"
      },
      "message": "Remove CCriticalSection",
      "tree": {
        "sha": "6bd3775ea4d7451f448bbc797120f37673a6bfb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6bd3775ea4d7451f448bbc797120f37673a6bfb8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bec38f55b702f9c4b5e411bf1d0b020cac741914",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bec38f55b702f9c4b5e411bf1d0b020cac741914",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bec38f55b702f9c4b5e411bf1d0b020cac741914",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bec38f55b702f9c4b5e411bf1d0b020cac741914/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1e1146944e5b5a6509c338ccc759c22c355cdff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1e1146944e5b5a6509c338ccc759c22c355cdff"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "19abcacc9f459318657c1f365823582896fe5e77",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bec38f55b702f9c4b5e411bf1d0b020cac741914/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bec38f55b702f9c4b5e411bf1d0b020cac741914/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=bec38f55b702f9c4b5e411bf1d0b020cac741914",
        "patch": "@@ -105,10 +105,9 @@ class LOCKABLE AnnotatedMixin : public PARENT\n  * TODO: We should move away from using the recursive lock by default.\n  */\n using RecursiveMutex = AnnotatedMixin<std::recursive_mutex>;\n-typedef AnnotatedMixin<std::recursive_mutex> CCriticalSection;\n \n /** Wrapped mutex: supports waiting but not recursive locking */\n-typedef AnnotatedMixin<std::mutex> Mutex;\n+using Mutex = AnnotatedMixin<std::mutex>;\n \n #ifdef DEBUG_LOCKCONTENTION\n void PrintLockContention(const char* pszName, const char* pszFile, int nLine);"
      }
    ]
  }
]