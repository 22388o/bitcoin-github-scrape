jameshilliard,2019-01-04T15:48:11Z,"@DesWurstes Could you build and test this on OSX 10.10 to verify it works as expected, I only have a 10.14 system.",https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-451481510,451481510,
DesWurstes,2019-01-04T16:00:09Z,"On my slow computer, I only have Clang 3. I'll install brew, CLT, dependencies and build and test Bitcoin Core. Thus I need 24 hours to test it.",https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-451485063,451485063,
jameshilliard,2019-01-04T16:06:16Z,@DesWurstes is it just your 10.10 system that's slow or your 10.14 as well? This should only need to be built on 10.14(but tested on 10.10 of course) since the build system disables getentropy for older SDK's.,https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-451486783,451486783,
DesWurstes,2019-01-04T16:08:14Z,"10.10 only. I've verified that this works on 10.10 when compiled with 10.14:\n```\n#include <stdio.h>\n#include <sys/random.h>\nextern int getentropy(void* buffer, size_t size) __attribute__((weak_import));\n\n<<The same main function>>\n```\nIs compiling on 10.14 and running on 10.10 enough?\n\nEDIT: Just the snippet.\n\nEDIT: Will test tomorrow.",https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-451487388,451487388,
jameshilliard,2019-01-04T16:10:52Z,"> Is compiling on 10.14 and running on 10.10 enough?\n\nShould be since `HAVE_GETENTROPY_RAND` shouldn't get defined on 10.10. Did you verify bitcoin core itself works or just the test snippet?",https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-451488215,451488215,
DesWurstes,2019-01-05T14:18:56Z,"I can't test it. It needs too much work.\nMeanwhile:\n\n1. Please rename `NULL` to `nullptr`. It doesn't change anything, hence we should comply with style guide.\n\n2. It should check if attribute `weak_import` is supported by the compiler, and use it if so.\n\n3. I looked at the header file and noticed that it has extern ""C"". Please change the prototype to `extern ""C"" int getentropy(void ",https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-451659477,451659477,
jameshilliard,2019-01-05T20:13:09Z,"> It should check if attribute weak_import is supported by the compiler, and use it if so.\n\nDoes that need to be a configure check?",https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-451686958,451686958,
practicalswift,2019-01-05T20:55:15Z,"~~@jameshilliard~~\n\n```\n#ifdef __has_cpp_attribute\n#  if __has_cpp_attribute(weak_import)\nâ€¦\n#  endif\n#endif\n```\n\n~~See https://github.com/bitcoin/bitcoin/blob/master/src/attributes.h as an example.~~\n\n~~Could that be of any help? :-)~~",https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-451689600,451689600,
jameshilliard,2019-01-05T21:16:25Z,"> Could that be of any help? :-)\n\nDoesn't seem to detect it correctly.",https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-451690971,451690971,
jameshilliard,2019-01-05T21:23:42Z,Do we actually need to add a check there? Unknown attributes only generate warnings right?,https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-451691413,451691413,
DesWurstes,2019-01-06T15:16:50Z,"If it is not supported, getentropy should be avoided and it should default to urandom.\n\n__has cpp attributes is only for [[something]] attributes, with brackets.",https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-451749296,451749296,
practicalswift,2019-01-06T15:21:15Z,"@DesWurstes Oh, of course. Sorry for the brain fart. Thanks!",https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-451749642,451749642,
jameshilliard,2019-01-09T21:41:07Z,"I added a configure check for `weak_import`, would be good if someone could test against an OSX compiler without support for `__attribute__((weak_import))`, I'm not sure where to find one myself.",https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-452878540,452878540,
laanwj,2019-01-14T16:50:52Z,utACK 31d0853c452e51707592f5736ddc6c76ef40f7fe,https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-454076305,454076305,
DesWurstes,2019-01-20T06:11:09Z,"utACK https://github.com/bitcoin/bitcoin/commit/a7c7fee2e429178931160830a5c1233fbca3e024\n\n~~Core members, please ACK or merge this before 0.18, or Core won't run on older Macs than 10.12.~~",https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-455840879,455840879,
jameshilliard,2019-01-20T06:50:11Z,"> Core won't run on older Macs than 10.12.\n\nIs xcode for gitian being bumped to at least version 8 for 0.18? The current xcode version being used AFAIK doesn't have getentropy support so gitian builds would not have the getentropy feature compiled in at all.",https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-455842380,455842380,
laanwj,2019-01-24T15:51:35Z,">  Is xcode for gitian being bumped to at least version 8 for 0.18? The current xcode version being used AFAIK doesn't have getentropy support so gitian builds would not have the getentropy feature compiled in at all.\n\nI don't think this needs to block this PR? I mean, `getentropy` should be handled correctly for user builds, or when the SDK version for gitian is bumped in the future.",https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-457246888,457246888,
jameshilliard,2019-01-24T21:20:16Z,"> I don't think this needs to block this PR?\n\nYes, it's not something that would block this PR.",https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-457360897,457360897,
jameshilliard,2019-02-28T09:15:42Z,Anything holding this up?,https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-468196859,468196859,
practicalswift,2019-03-15T16:38:57Z,FWIW: I've verified that a disassembly of the `bitcoind` binary built on a Ubuntu 18.04 machine with this patch applied is identical to a disassembly of the `bitcoind` binary built against `master` (as expected).,https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-473357567,473357567,
fanquake,2019-07-29T01:40:56Z,@theuni Can you take a look here?,https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-515815816,515815816,
theuni,2019-08-20T21:24:43Z,"This doesn't make any sense to me.\n\nI don't see any need to try to override the symbol's export type, it's already marked weak as necessary in the SDK:\n```\n $ grep getentropy SDKs/MacOSX10.14.sdk/usr/lib/system/libsystem_c.tbd \n                       '$ld$weak$os10.11$_dirname_r', '$ld$weak$os10.11$_getentropy',\n```\n\nI don't understand the history here. What was the actual reason f",https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-523200921,523200921,
jameshilliard,2019-08-21T00:13:20Z,"> I don't see any need to try to override the symbol's export type, it's already marked weak as necessary in the SDK\n\nIs that the case for the older SDK's as well?",https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-523243410,523243410,
DesWurstes,2019-08-21T07:21:32Z,"@theuni It's marked as weak in the ABI, not the API, so we also need to set it `weak_import` in the header. (If it weren't marked in the ABI, `weak_import` in the header wouldn't work, I believe). Since it's not in the API, the compiler doesn't add the checks and optimizes the `if(!...)` part. You can compile with `-i` to see the preprocessed code, which doesn't have `weak_import`.\n\nOn latest ",https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-523331446,523331446,
fanquake,2019-12-31T18:09:50Z,"I'm going to close this. It's not clear if this is the correct change, and, master now requires macOS >=10.12 (and will be compiled against the 10.14 SDK), which means that getentropy will always be available. If this is something that someone would still like to fix, please open a new PR against the 0.19 branch.",https://github.com/bitcoin/bitcoin/pull/15103#issuecomment-569968265,569968265,
practicalswift,2019-01-05T16:24:13Z,Please revert to `nullptr` :-),https://github.com/bitcoin/bitcoin/pull/15103#discussion_r245481750,245481750,src/random.cpp
