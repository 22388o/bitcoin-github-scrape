[
  {
    "sha": "0f90613cbe69dfa422e8802c63844f816c3ca588",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjkwNjEzY2JlNjlkZmE0MjJlODgwMmM2Mzg0NGY4MTZjM2NhNTg4",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-10-28T22:00:13Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-11-11T00:17:06Z"
      },
      "message": "Improve logging of failed connections",
      "tree": {
        "sha": "9b49e2042960c70c035c0988d1f2871194629bbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b49e2042960c70c035c0988d1f2871194629bbd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f90613cbe69dfa422e8802c63844f816c3ca588",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f90613cbe69dfa422e8802c63844f816c3ca588",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f90613cbe69dfa422e8802c63844f816c3ca588",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f90613cbe69dfa422e8802c63844f816c3ca588/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a6faabecf719633481253a0d2f874494ad126a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a6faabecf719633481253a0d2f874494ad126a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a6faabecf719633481253a0d2f874494ad126a5"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "1392fa82333ac09cbe30efb72db2423b5b95c92e",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f90613cbe69dfa422e8802c63844f816c3ca588/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f90613cbe69dfa422e8802c63844f816c3ca588/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=0f90613cbe69dfa422e8802c63844f816c3ca588",
        "patch": "@@ -367,13 +367,13 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n             int nRet = select(hSocket + 1, NULL, &fdset, NULL, &timeout);\n             if (nRet == 0)\n             {\n-                LogPrint(\"net\", \"connection timeout\\n\");\n+                LogPrint(\"net\", \"connection to %s timeout\\n\", addrConnect.ToString().c_str());\n                 closesocket(hSocket);\n                 return false;\n             }\n             if (nRet == SOCKET_ERROR)\n             {\n-                LogPrintf(\"select() for connection failed: %i\\n\",WSAGetLastError());\n+                LogPrintf(\"select() for %s failed: %i\\n\", addrConnect.ToString().c_str(), WSAGetLastError());\n                 closesocket(hSocket);\n                 return false;\n             }\n@@ -384,13 +384,13 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n             if (getsockopt(hSocket, SOL_SOCKET, SO_ERROR, &nRet, &nRetSize) == SOCKET_ERROR)\n #endif\n             {\n-                LogPrintf(\"getsockopt() for connection failed: %i\\n\",WSAGetLastError());\n+                LogPrintf(\"getsockopt() for %s failed: %i\\n\", addrConnect.ToString().c_str(), WSAGetLastError());\n                 closesocket(hSocket);\n                 return false;\n             }\n             if (nRet != 0)\n             {\n-                LogPrintf(\"connect() failed after select(): %s\\n\",strerror(nRet));\n+                LogPrintf(\"connect() to %s failed after select(): %s\\n\", addrConnect.ToString().c_str(), strerror(nRet));\n                 closesocket(hSocket);\n                 return false;\n             }\n@@ -401,7 +401,7 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n         else\n #endif\n         {\n-            LogPrintf(\"connect() failed: %i\\n\",WSAGetLastError());\n+            LogPrintf(\"connect() to %s failed: %i\\n\", addrConnect.ToString().c_str(), WSAGetLastError());\n             closesocket(hSocket);\n             return false;\n         }"
      }
    ]
  },
  {
    "sha": "17faf562629cd27f00fc138e218ebcc1ce071765",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxN2ZhZjU2MjYyOWNkMjdmMDBmYzEzOGUyMThlYmNjMWNlMDcxNzY1",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-11-01T19:27:42Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-11-11T00:22:45Z"
      },
      "message": "Refactor: pull alert string sanitization into util",
      "tree": {
        "sha": "16f48e9238955358df4d5e67bcdc7ad746f9db98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16f48e9238955358df4d5e67bcdc7ad746f9db98"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17faf562629cd27f00fc138e218ebcc1ce071765",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17faf562629cd27f00fc138e218ebcc1ce071765",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17faf562629cd27f00fc138e218ebcc1ce071765",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17faf562629cd27f00fc138e218ebcc1ce071765/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f90613cbe69dfa422e8802c63844f816c3ca588",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f90613cbe69dfa422e8802c63844f816c3ca588",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f90613cbe69dfa422e8802c63844f816c3ca588"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 15,
      "deletions": 9
    },
    "files": [
      {
        "sha": "7f7e59ee10fd930b81e3585d8c02c8707f24c090",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17faf562629cd27f00fc138e218ebcc1ce071765/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17faf562629cd27f00fc138e218ebcc1ce071765/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=17faf562629cd27f00fc138e218ebcc1ce071765",
        "patch": "@@ -241,15 +241,7 @@ bool CAlert::ProcessAlert(bool fThread)\n                 // be safe we first strip anything not in safeChars, then add single quotes around\n                 // the whole string before passing it to the shell:\n                 std::string singleQuote(\"'\");\n-                // safeChars chosen to allow simple messages/URLs/email addresses, but avoid anything\n-                // even possibly remotely dangerous like & or >\n-                std::string safeChars(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890 .,;_/:?@\");\n-                std::string safeStatus;\n-                for (std::string::size_type i = 0; i < strStatusBar.size(); i++)\n-                {\n-                    if (safeChars.find(strStatusBar[i]) != std::string::npos)\n-                        safeStatus.push_back(strStatusBar[i]);\n-                }\n+                std::string safeStatus = SanitizeString(strStatusBar);\n                 safeStatus = singleQuote+safeStatus+singleQuote;\n                 boost::replace_all(strCmd, \"%s\", safeStatus);\n "
      },
      {
        "sha": "5411bb2fe322de50adaba309d48a1e59e17b8bcd",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17faf562629cd27f00fc138e218ebcc1ce071765/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17faf562629cd27f00fc138e218ebcc1ce071765/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=17faf562629cd27f00fc138e218ebcc1ce071765",
        "patch": "@@ -475,6 +475,19 @@ bool ParseMoney(const char* pszIn, int64_t& nRet)\n     return true;\n }\n \n+// safeChars chosen to allow simple messages/URLs/email addresses, but avoid anything\n+// even possibly remotely dangerous like & or >\n+static string safeChars(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890 .,;_/:?@\");\n+string SanitizeString(const string& str)\n+{\n+    string strResult;\n+    for (std::string::size_type i = 0; i < str.size(); i++)\n+    {\n+        if (safeChars.find(str[i]) != std::string::npos)\n+            strResult.push_back(str[i]);\n+    }\n+    return strResult;\n+}\n \n const signed char p_util_hexdigit[256] =\n { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,"
      },
      {
        "sha": "7fae5cc7ec0e31cba7e3ebc390eff75136425231",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17faf562629cd27f00fc138e218ebcc1ce071765/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17faf562629cd27f00fc138e218ebcc1ce071765/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=17faf562629cd27f00fc138e218ebcc1ce071765",
        "patch": "@@ -175,6 +175,7 @@ void ParseString(const std::string& str, char c, std::vector<std::string>& v);\n std::string FormatMoney(int64_t n, bool fPlus=false);\n bool ParseMoney(const std::string& str, int64_t& nRet);\n bool ParseMoney(const char* pszIn, int64_t& nRet);\n+std::string SanitizeString(const std::string& str);\n std::vector<unsigned char> ParseHex(const char* psz);\n std::vector<unsigned char> ParseHex(const std::string& str);\n bool IsHex(const std::string& str);"
      }
    ]
  },
  {
    "sha": "358ce2664d27da5bd8ae4c80655368219dcf18b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNThjZTI2NjRkMjdkYTViZDhhZTRjODA2NTUzNjgyMTlkY2YxOGIz",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-10-28T06:36:11Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-11-11T00:31:08Z"
      },
      "message": "New reject p2p message",
      "tree": {
        "sha": "b9104f4c3eaa3780fc2b95c02a514e426e318751",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9104f4c3eaa3780fc2b95c02a514e426e318751"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/358ce2664d27da5bd8ae4c80655368219dcf18b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/358ce2664d27da5bd8ae4c80655368219dcf18b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/358ce2664d27da5bd8ae4c80655368219dcf18b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/358ce2664d27da5bd8ae4c80655368219dcf18b3/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17faf562629cd27f00fc138e218ebcc1ce071765",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17faf562629cd27f00fc138e218ebcc1ce071765",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17faf562629cd27f00fc138e218ebcc1ce071765"
      }
    ],
    "stats": {
      "total": 196,
      "additions": 146,
      "deletions": 50
    },
    "files": [
      {
        "sha": "11f262d9cb624176b65acf483c4a47ee01541d70",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 123,
        "deletions": 46,
        "changes": 169,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/358ce2664d27da5bd8ae4c80655368219dcf18b3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/358ce2664d27da5bd8ae4c80655368219dcf18b3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=358ce2664d27da5bd8ae4c80655368219dcf18b3",
        "patch": "@@ -18,6 +18,7 @@\n #include \"util.h\"\n \n #include <inttypes.h>\n+#include <sstream>\n #include <stdint.h>\n \n #include <boost/algorithm/string/replace.hpp>\n@@ -667,45 +668,54 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n {\n     // Basic checks that don't depend on any context\n     if (tx.vin.empty())\n-        return state.DoS(10, error(\"CheckTransaction() : vin empty\"));\n+        return state.DoS(10, error(\"CheckTransaction() : vin empty\"),\n+                         REJECT_INVALID, \"vin empty\");\n     if (tx.vout.empty())\n-        return state.DoS(10, error(\"CheckTransaction() : vout empty\"));\n+        return state.DoS(10, error(\"CheckTransaction() : vout empty\"),\n+                         REJECT_INVALID, \"vout empty\");\n     // Size limits\n     if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CTransaction::CheckTransaction() : size limits failed\"));\n+        return state.DoS(100, error(\"CTransaction::CheckTransaction() : size limits failed\"),\n+                         REJECT_INVALID, \"oversize\");\n \n     // Check for negative or overflow output values\n     int64_t nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         if (txout.nValue < 0)\n-            return state.DoS(100, error(\"CheckTransaction() : txout.nValue negative\"));\n+            return state.DoS(100, error(\"CheckTransaction() : txout.nValue negative\"),\n+                             REJECT_INVALID, \"vout negative\");\n         if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, error(\"CheckTransaction() : txout.nValue too high\"));\n+            return state.DoS(100, error(\"CheckTransaction() : txout.nValue too high\"),\n+                             REJECT_INVALID, \"vout too large\");\n         nValueOut += txout.nValue;\n         if (!MoneyRange(nValueOut))\n-            return state.DoS(100, error(\"CTransaction::CheckTransaction() : txout total out of range\"));\n+            return state.DoS(100, error(\"CTransaction::CheckTransaction() : txout total out of range\"),\n+                             REJECT_INVALID, \"txout total too large\");\n     }\n \n     // Check for duplicate inputs\n     set<COutPoint> vInOutPoints;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n         if (vInOutPoints.count(txin.prevout))\n-            return state.DoS(100, error(\"CTransaction::CheckTransaction() : duplicate inputs\"));\n+            return state.DoS(100, error(\"CTransaction::CheckTransaction() : duplicate inputs\"),\n+                             REJECT_INVALID, \"duplicate inputs\");\n         vInOutPoints.insert(txin.prevout);\n     }\n \n     if (tx.IsCoinBase())\n     {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, error(\"CheckTransaction() : coinbase script size\"));\n+            return state.DoS(100, error(\"CheckTransaction() : coinbase script size\"),\n+                             REJECT_INVALID, \"coinbase script too large\");\n     }\n     else\n     {\n         BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             if (txin.prevout.IsNull())\n-                return state.DoS(10, error(\"CheckTransaction() : prevout is null\"));\n+                return state.DoS(10, error(\"CheckTransaction() : prevout is null\"),\n+                                 REJECT_INVALID, \"prevout null\");\n     }\n \n     return true;\n@@ -758,13 +768,15 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n     // Coinbase is only valid in a block, not as a loose transaction\n     if (tx.IsCoinBase())\n-        return state.DoS(100, error(\"AcceptToMemoryPool: : coinbase as individual tx\"));\n+        return state.DoS(100, error(\"AcceptToMemoryPool: : coinbase as individual tx\"),\n+                         REJECT_INVALID, \"coinbase\");\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n     if (Params().NetworkID() == CChainParams::MAIN && !IsStandardTx(tx, reason))\n-        return error(\"AcceptToMemoryPool: : nonstandard transaction: %s\",\n-                     reason.c_str());\n+        return state.DoS(0,\n+                         error(\"AcceptToMemoryPool : nonstandard transaction: %s\", reason.c_str()),\n+                         REJECT_NONSTANDARD, reason);\n \n     // is it already in the memory pool?\n     uint256 hash = tx.GetHash();\n@@ -828,7 +840,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // are the actual inputs available?\n         if (!view.HaveInputs(tx))\n-            return state.Invalid(error(\"AcceptToMemoryPool: : inputs already spent\"));\n+            return state.Invalid(error(\"AcceptToMemoryPool : inputs already spent\"),\n+                                 REJECT_DUPLICATE, \"inputs spent\");\n \n         // Bring the best block into scope\n         view.GetBestBlock();\n@@ -851,9 +864,9 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Don't accept it if it can't get into a block\n         int64_t txMinFee = GetMinFee(tx, true, GMF_RELAY);\n         if (fLimitFree && nFees < txMinFee)\n-            return error(\"AcceptToMemoryPool: : not enough fees %s, %\"PRId64\" < %\"PRId64,\n-                         hash.ToString().c_str(),\n-                         nFees, txMinFee);\n+            return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %\"PRId64\" < %\"PRId64,\n+                                      hash.ToString().c_str(), nFees, txMinFee),\n+                             REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n \n         // Continuously rate-limit free transactions\n         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n@@ -873,7 +886,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             // -limitfreerelay unit is thousand-bytes-per-minute\n             // At default rate it would take over a month to fill 1GB\n             if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return error(\"AcceptToMemoryPool: : free transaction rejected by rate limiter\");\n+                return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n+                                 REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n             dFreeCount += nSize;\n         }\n@@ -1509,26 +1523,32 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n             // If prev is coinbase, check that it's matured\n             if (coins.IsCoinBase()) {\n                 if (nSpendHeight - coins.nHeight < COINBASE_MATURITY)\n-                    return state.Invalid(error(\"CheckInputs() : tried to spend coinbase at depth %d\", nSpendHeight - coins.nHeight));\n+                    return state.Invalid(\n+                        error(\"CheckInputs() : tried to spend coinbase at depth %d\", nSpendHeight - coins.nHeight),\n+                        REJECT_INVALID, \"premature spend of coinbase\");\n             }\n \n             // Check for negative or overflow input values\n             nValueIn += coins.vout[prevout.n].nValue;\n             if (!MoneyRange(coins.vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n-                return state.DoS(100, error(\"CheckInputs() : txin values out of range\"));\n+                return state.DoS(100, error(\"CheckInputs() : txin values out of range\"),\n+                                 REJECT_INVALID, \"input values out of range\");\n \n         }\n \n         if (nValueIn < GetValueOut(tx))\n-            return state.DoS(100, error(\"CheckInputs() : %s value in < value out\", tx.GetHash().ToString().c_str()));\n+            return state.DoS(100, error(\"CheckInputs() : %s value in < value out\", tx.GetHash().ToString().c_str()),\n+                             REJECT_INVALID, \"in < out\");\n \n         // Tally transaction fees\n         int64_t nTxFee = nValueIn - GetValueOut(tx);\n         if (nTxFee < 0)\n-            return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", tx.GetHash().ToString().c_str()));\n+            return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", tx.GetHash().ToString().c_str()),\n+                             REJECT_INVALID, \"fee < 0\");\n         nFees += nTxFee;\n         if (!MoneyRange(nFees))\n-            return state.DoS(100, error(\"CheckInputs() : nFees out of range\"));\n+            return state.DoS(100, error(\"CheckInputs() : nFees out of range\"),\n+                             REJECT_INVALID, \"fee out of range\");\n \n         // The first loop above does all the inexpensive checks.\n         // Only if ALL inputs pass do we perform expensive ECDSA signature checks.\n@@ -1553,9 +1573,9 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n                         // encodings or not; if so, don't trigger DoS protection.\n                         CScriptCheck check(coins, tx, i, flags & (~SCRIPT_VERIFY_STRICTENC), 0);\n                         if (check())\n-                            return state.Invalid();\n+                            return state.Invalid(false, REJECT_NONSTANDARD, \"non-canonical\");\n                     }\n-                    return state.DoS(100,false);\n+                    return state.DoS(100,false, REJECT_NONSTANDARD, \"non-canonical\");\n                 }\n             }\n         }\n@@ -1723,7 +1743,8 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n         for (unsigned int i = 0; i < block.vtx.size(); i++) {\n             uint256 hash = block.GetTxHash(i);\n             if (view.HaveCoins(hash) && !view.GetCoins(hash).IsPruned())\n-                return state.DoS(100, error(\"ConnectBlock() : tried to overwrite transaction\"));\n+                return state.DoS(100, error(\"ConnectBlock() : tried to overwrite transaction\"),\n+                                 REJECT_INVALID, \"BIP30\");\n         }\n     }\n \n@@ -1752,12 +1773,14 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n         nInputs += tx.vin.size();\n         nSigOps += GetLegacySigOpCount(tx);\n         if (nSigOps > MAX_BLOCK_SIGOPS)\n-            return state.DoS(100, error(\"ConnectBlock() : too many sigops\"));\n+            return state.DoS(100, error(\"ConnectBlock() : too many sigops\"),\n+                             REJECT_INVALID, \"too many sigops\");\n \n         if (!tx.IsCoinBase())\n         {\n             if (!view.HaveInputs(tx))\n-                return state.DoS(100, error(\"ConnectBlock() : inputs missing/spent\"));\n+                return state.DoS(100, error(\"ConnectBlock() : inputs missing/spent\"),\n+                                 REJECT_INVALID, \"inputs missing/spent\");\n \n             if (fStrictPayToScriptHash)\n             {\n@@ -1766,7 +1789,8 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n                 // an incredibly-expensive-to-validate block.\n                 nSigOps += GetP2SHSigOpCount(tx, view);\n                 if (nSigOps > MAX_BLOCK_SIGOPS)\n-                     return state.DoS(100, error(\"ConnectBlock() : too many sigops\"));\n+                    return state.DoS(100, error(\"ConnectBlock() : too many sigops\"),\n+                                     REJECT_INVALID, \"too many sigops\");\n             }\n \n             nFees += view.GetValueIn(tx)-GetValueOut(tx);\n@@ -1790,7 +1814,10 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n         LogPrintf(\"- Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin)\\n\", (unsigned)block.vtx.size(), 0.001 * nTime, 0.001 * nTime / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * nTime / (nInputs-1));\n \n     if (GetValueOut(block.vtx[0]) > GetBlockValue(pindex->nHeight, nFees))\n-        return state.DoS(100, error(\"ConnectBlock() : coinbase pays too much (actual=%\"PRId64\" vs limit=%\"PRId64\")\", GetValueOut(block.vtx[0]), GetBlockValue(pindex->nHeight, nFees)));\n+        return state.DoS(100,\n+                         error(\"ConnectBlock() : coinbase pays too much (actual=%\"PRId64\" vs limit=%\"PRId64\")\",\n+                               GetValueOut(block.vtx[0]), GetBlockValue(pindex->nHeight, nFees)),\n+                         REJECT_INVALID, \"coinbase too large\");\n \n     if (!control.Wait())\n         return state.DoS(100, false);\n@@ -2161,22 +2188,27 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n \n     // Size limits\n     if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckBlock() : size limits failed\"));\n+        return state.DoS(100, error(\"CheckBlock() : size limits failed\"),\n+                         REJECT_INVALID, \"block size too large\");\n \n     // Check proof of work matches claimed amount\n     if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits))\n-        return state.DoS(50, error(\"CheckBlock() : proof of work failed\"));\n+        return state.DoS(50, error(\"CheckBlock() : proof of work failed\"),\n+                         REJECT_INVALID, \"invalid pow\");\n \n     // Check timestamp\n     if (block.GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n-        return state.Invalid(error(\"CheckBlock() : block timestamp too far in the future\"));\n+        return state.Invalid(error(\"CheckBlock() : block timestamp too far in the future\"),\n+                             REJECT_INVALID, \"time in future\");\n \n     // First transaction must be coinbase, the rest must not be\n     if (block.vtx.empty() || !block.vtx[0].IsCoinBase())\n-        return state.DoS(100, error(\"CheckBlock() : first tx is not coinbase\"));\n+        return state.DoS(100, error(\"CheckBlock() : first tx is not coinbase\"),\n+                         REJECT_INVALID, \"no coinbase\");\n     for (unsigned int i = 1; i < block.vtx.size(); i++)\n         if (block.vtx[i].IsCoinBase())\n-            return state.DoS(100, error(\"CheckBlock() : more than one coinbase\"));\n+            return state.DoS(100, error(\"CheckBlock() : more than one coinbase\"),\n+                             REJECT_INVALID, \"duplicate coinbase\");\n \n     // Check transactions\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n@@ -2195,19 +2227,22 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n         uniqueTx.insert(block.GetTxHash(i));\n     }\n     if (uniqueTx.size() != block.vtx.size())\n-        return state.DoS(100, error(\"CheckBlock() : duplicate transaction\"), true);\n+        return state.DoS(100, error(\"CheckBlock() : duplicate transaction\"),\n+                         REJECT_INVALID, \"duplicate transaction\", true);\n \n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n     {\n         nSigOps += GetLegacySigOpCount(tx);\n     }\n     if (nSigOps > MAX_BLOCK_SIGOPS)\n-        return state.DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"));\n+        return state.DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"),\n+                         REJECT_INVALID, \"sig op count\", true);\n \n     // Check merkle root\n     if (fCheckMerkleRoot && block.hashMerkleRoot != block.vMerkleTree.back())\n-        return state.DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"));\n+        return state.DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"),\n+                         REJECT_INVALID, \"bad merkle root\", true);\n \n     return true;\n }\n@@ -2231,28 +2266,33 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CDiskBlockPos* dbp)\n \n         // Check proof of work\n         if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n-            return state.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n+            return state.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"),\n+                             REJECT_INVALID, \"bad pow\");\n \n         // Check timestamp against prev\n         if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n-            return state.Invalid(error(\"AcceptBlock() : block's timestamp is too early\"));\n+            return state.Invalid(error(\"AcceptBlock() : block's timestamp is too early\"),\n+                                 REJECT_INVALID, \"timestamp too early\");\n \n         // Check that all transactions are finalized\n         BOOST_FOREACH(const CTransaction& tx, block.vtx)\n             if (!IsFinalTx(tx, nHeight, block.GetBlockTime()))\n-                return state.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"));\n+                return state.DoS(10, error(\"AcceptBlock() : contains a non-final transaction\"),\n+                                 REJECT_INVALID, \"non-final tx\");\n \n         // Check that the block chain matches the known block chain up to a checkpoint\n         if (!Checkpoints::CheckBlock(nHeight, hash))\n-            return state.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lock-in at %d\", nHeight));\n+            return state.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lock-in at %d\", nHeight),\n+                             REJECT_CHECKPOINT, \"checkpoint mismatch\");\n \n         // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n         if (block.nVersion < 2)\n         {\n             if ((!TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 950, 1000)) ||\n                 (TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 75, 100)))\n             {\n-                return state.Invalid(error(\"AcceptBlock() : rejected nVersion=1 block\"));\n+                return state.Invalid(error(\"AcceptBlock() : rejected nVersion=1 block\"),\n+                                     REJECT_OBSOLETE, \"version 1 blocks obsolete\");\n             }\n         }\n         // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n@@ -2265,7 +2305,8 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CDiskBlockPos* dbp)\n                 CScript expect = CScript() << nHeight;\n                 if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n                     !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin()))\n-                    return state.DoS(100, error(\"AcceptBlock() : block height mismatch in coinbase\"));\n+                    return state.DoS(100, error(\"AcceptBlock() : block height mismatch in coinbase\"),\n+                                     REJECT_INVALID, \"height incorrect in coinbase\");\n             }\n         }\n     }\n@@ -2355,15 +2396,17 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n         int64_t deltaTime = pblock->GetBlockTime() - pcheckpoint->nTime;\n         if (deltaTime < 0)\n         {\n-            return state.DoS(100, error(\"ProcessBlock() : block with timestamp before last checkpoint\"));\n+            return state.DoS(100, error(\"ProcessBlock() : block with timestamp before last checkpoint\"),\n+                             REJECT_CHECKPOINT, \"timestamp before checkpoint\");\n         }\n         CBigNum bnNewBlock;\n         bnNewBlock.SetCompact(pblock->nBits);\n         CBigNum bnRequired;\n         bnRequired.SetCompact(ComputeMinWork(pcheckpoint->nBits, deltaTime));\n         if (bnNewBlock > bnRequired)\n         {\n-            return state.DoS(100, error(\"ProcessBlock() : block with too little proof-of-work\"));\n+            return state.DoS(100, error(\"ProcessBlock() : block with too little proof-of-work\"),\n+                             REJECT_INVALID, \"invalid pow\");\n         }\n     }\n \n@@ -3061,7 +3104,6 @@ bool static AlreadyHave(const CInv& inv)\n \n \n \n-\n void static ProcessGetData(CNode* pfrom)\n {\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n@@ -3193,6 +3235,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n         {\n+            pfrom->PushMessage(\"reject\", strCommand, REJECT_DUPLICATE, string(\"Duplicate version message\"));\n             pfrom->Misbehaving(1);\n             return false;\n         }\n@@ -3206,6 +3249,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         {\n             // disconnect from peers older than this proto version\n             LogPrintf(\"partner %s using obsolete version %i; disconnecting\\n\", pfrom->addr.ToString().c_str(), pfrom->nVersion);\n+            pfrom->PushMessage(\"reject\", strCommand, REJECT_OBSOLETE,\n+                               strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION));\n             pfrom->fDisconnect = true;\n             return false;\n         }\n@@ -3589,8 +3634,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         }\n         int nDoS = 0;\n         if (state.IsInvalid(nDoS))\n+        {\n+            pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n+                               state.GetRejectReason(), inv.hash);\n             if (nDoS > 0)\n                 pfrom->Misbehaving(nDoS);\n+        }\n     }\n \n \n@@ -3612,8 +3661,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             mapAlreadyAskedFor.erase(inv);\n         int nDoS = 0;\n         if (state.IsInvalid(nDoS))\n+        {\n+            pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n+                               state.GetRejectReason(), inv.hash);\n             if (nDoS > 0)\n                 pfrom->Misbehaving(nDoS);\n+        }\n     }\n \n \n@@ -3809,6 +3862,29 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n     }\n \n \n+    else if (strCommand == \"reject\")\n+    {\n+        if (fDebug)\n+        {\n+            string strMsg; unsigned char ccode; string strReason;\n+            vRecv >> strMsg >> ccode >> strReason;\n+\n+            ostringstream ss;\n+            ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n+\n+            if (strMsg == \"block\" || strMsg == \"tx\")\n+            {\n+                uint256 hash;\n+                vRecv >> hash;\n+                ss << \": hash \" << hash.ToString();\n+            }\n+            // Truncate to reasonable length and sanitize before printing:\n+            string s = ss.str();\n+            if (s.size() > 111) s.erase(111, string::npos);\n+            LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(s).c_str());\n+        }\n+    }\n+\n     else\n     {\n         // Ignore unknown commands for extensibility\n@@ -3907,6 +3983,7 @@ bool ProcessMessages(CNode* pfrom)\n         }\n         catch (std::ios_base::failure& e)\n         {\n+            pfrom->PushMessage(\"reject\", strCommand, REJECT_MALFORMED, string(\"error parsing message\"));\n             if (strstr(e.what(), \"end of data\"))\n             {\n                 // Allow exceptions from under-length message on vRecv"
      },
      {
        "sha": "460929d6247de75105d65bccdc02a11a32ff441b",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 23,
        "deletions": 4,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/358ce2664d27da5bd8ae4c80655368219dcf18b3/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/358ce2664d27da5bd8ae4c80655368219dcf18b3/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=358ce2664d27da5bd8ae4c80655368219dcf18b3",
        "patch": "@@ -67,6 +67,16 @@ static const int fHaveUPnP = true;\n static const int fHaveUPnP = false;\n #endif\n \n+/** \"reject\" message codes **/\n+static const unsigned char REJECT_MALFORMED = 0x01;\n+static const unsigned char REJECT_INVALID = 0x10;\n+static const unsigned char REJECT_OBSOLETE = 0x11;\n+static const unsigned char REJECT_DUPLICATE = 0x12;\n+static const unsigned char REJECT_NONSTANDARD = 0x40;\n+static const unsigned char REJECT_DUST = 0x41;\n+static const unsigned char REJECT_INSUFFICIENTFEE = 0x42;\n+static const unsigned char REJECT_CHECKPOINT = 0x43;\n+\n \n extern CScript COINBASE_FLAGS;\n \n@@ -926,19 +936,26 @@ class CValidationState {\n         MODE_ERROR,   // run-time error\n     } mode;\n     int nDoS;\n+    std::string strRejectReason;\n+    unsigned char chRejectCode;\n     bool corruptionPossible;\n public:\n     CValidationState() : mode(MODE_VALID), nDoS(0) {}\n-    bool DoS(int level, bool ret = false, bool corruptionIn = false) {\n+    bool DoS(int level, bool ret = false,\n+             unsigned char chRejectCodeIn=0, std::string strRejectReasonIn=\"\",\n+             bool corruptionIn=false) {\n+        chRejectCode = chRejectCodeIn;\n+        strRejectReason = strRejectReasonIn;\n+        corruptionPossible = corruptionIn;\n         if (mode == MODE_ERROR)\n             return ret;\n         nDoS += level;\n         mode = MODE_INVALID;\n-        corruptionPossible = corruptionIn;\n         return ret;\n     }\n-    bool Invalid(bool ret = false) {\n-        return DoS(0, ret);\n+    bool Invalid(bool ret = false,\n+                 unsigned char _chRejectCode=0, std::string _strRejectReason=\"\") {\n+        return DoS(0, ret, _chRejectCode, _strRejectReason);\n     }\n     bool Error() {\n         mode = MODE_ERROR;\n@@ -967,6 +984,8 @@ class CValidationState {\n     bool CorruptionPossible() {\n         return corruptionPossible;\n     }\n+    unsigned char GetRejectCode() const { return chRejectCode; }\n+    std::string GetRejectReason() const { return strRejectReason; }\n };\n \n /** An in-memory indexed chain of blocks. */"
      }
    ]
  },
  {
    "sha": "feaec80cb033bd3db754c783ad483fc67751ec92",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWFlYzgwY2IwMzNiZDNkYjc1NGM3ODNhZDQ4M2ZjNjc3NTFlYzky",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-11-03T04:46:34Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-11-11T00:31:08Z"
      },
      "message": "Test alerts high at high PROTOCOL_VERSIONs\n\nI regenerated the alert test data; now alerts are tested\nagainst a protocol version way above the current protocol\nversion.\n\nSo we won't have to regenerate them every time we bump\nPROTOCOL_VERSION in the future.",
      "tree": {
        "sha": "72c1ccbf5a76672c5d8569fad4a407bbf6f9fe10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72c1ccbf5a76672c5d8569fad4a407bbf6f9fe10"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/feaec80cb033bd3db754c783ad483fc67751ec92",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/feaec80cb033bd3db754c783ad483fc67751ec92",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/feaec80cb033bd3db754c783ad483fc67751ec92",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/feaec80cb033bd3db754c783ad483fc67751ec92/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "358ce2664d27da5bd8ae4c80655368219dcf18b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/358ce2664d27da5bd8ae4c80655368219dcf18b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/358ce2664d27da5bd8ae4c80655368219dcf18b3"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "a7e668222dcc4fa33ac0fe3f99d4a47c9b622a86",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/feaec80cb033bd3db754c783ad483fc67751ec92/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/feaec80cb033bd3db754c783ad483fc67751ec92/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=feaec80cb033bd3db754c783ad483fc67751ec92",
        "patch": "@@ -27,7 +27,7 @@\n     alert.nID           = 1;\n     alert.nCancel       = 0;   // cancels previous messages up to this ID number\n     alert.nMinVer       = 0;  // These versions are protocol versions\n-    alert.nMaxVer       = 70001;\n+    alert.nMaxVer       = 999001;\n     alert.nPriority     = 1;\n     alert.strComment    = \"Alert comment\";\n     alert.strStatusBar  = \"Alert 1\";\n@@ -121,25 +121,25 @@ BOOST_AUTO_TEST_CASE(AlertApplies)\n \n     // Matches:\n     BOOST_CHECK(alerts[0].AppliesTo(1, \"\"));\n-    BOOST_CHECK(alerts[0].AppliesTo(70001, \"\"));\n+    BOOST_CHECK(alerts[0].AppliesTo(999001, \"\"));\n     BOOST_CHECK(alerts[0].AppliesTo(1, \"/Satoshi:11.11.11/\"));\n \n     BOOST_CHECK(alerts[1].AppliesTo(1, \"/Satoshi:0.1.0/\"));\n-    BOOST_CHECK(alerts[1].AppliesTo(70001, \"/Satoshi:0.1.0/\"));\n+    BOOST_CHECK(alerts[1].AppliesTo(999001, \"/Satoshi:0.1.0/\"));\n \n     BOOST_CHECK(alerts[2].AppliesTo(1, \"/Satoshi:0.1.0/\"));\n     BOOST_CHECK(alerts[2].AppliesTo(1, \"/Satoshi:0.2.0/\"));\n \n     // Don't match:\n     BOOST_CHECK(!alerts[0].AppliesTo(-1, \"\"));\n-    BOOST_CHECK(!alerts[0].AppliesTo(70002, \"\"));\n+    BOOST_CHECK(!alerts[0].AppliesTo(999002, \"\"));\n \n     BOOST_CHECK(!alerts[1].AppliesTo(1, \"\"));\n     BOOST_CHECK(!alerts[1].AppliesTo(1, \"Satoshi:0.1.0\"));\n     BOOST_CHECK(!alerts[1].AppliesTo(1, \"/Satoshi:0.1.0\"));\n     BOOST_CHECK(!alerts[1].AppliesTo(1, \"Satoshi:0.1.0/\"));\n     BOOST_CHECK(!alerts[1].AppliesTo(-1, \"/Satoshi:0.1.0/\"));\n-    BOOST_CHECK(!alerts[1].AppliesTo(70002, \"/Satoshi:0.1.0/\"));\n+    BOOST_CHECK(!alerts[1].AppliesTo(999002, \"/Satoshi:0.1.0/\"));\n     BOOST_CHECK(!alerts[1].AppliesTo(1, \"/Satoshi:0.2.0/\"));\n \n     BOOST_CHECK(!alerts[2].AppliesTo(1, \"/Satoshi:0.3.0/\"));"
      },
      {
        "sha": "01f50680b95aa307a1a013b643ded4ae0bc47162",
        "filename": "src/test/data/alertTests.raw",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/feaec80cb033bd3db754c783ad483fc67751ec92/src/test/data/alertTests.raw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/feaec80cb033bd3db754c783ad483fc67751ec92/src/test/data/alertTests.raw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/alertTests.raw?ref=feaec80cb033bd3db754c783ad483fc67751ec92"
      }
    ]
  },
  {
    "sha": "69aada346f74c978b5d8be59a5d7c79be966ef8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWFhZGEzNDZmNzRjOTc4YjVkOGJlNTlhNWQ3Yzc5YmU5NjZlZjhj",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-11-03T01:42:38Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-11-11T00:31:09Z"
      },
      "message": "Bump protocol version to 70002",
      "tree": {
        "sha": "e2abbe951c7b5533452ed8459c6bf7539c5caab7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2abbe951c7b5533452ed8459c6bf7539c5caab7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69aada346f74c978b5d8be59a5d7c79be966ef8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69aada346f74c978b5d8be59a5d7c79be966ef8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69aada346f74c978b5d8be59a5d7c79be966ef8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69aada346f74c978b5d8be59a5d7c79be966ef8c/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "feaec80cb033bd3db754c783ad483fc67751ec92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/feaec80cb033bd3db754c783ad483fc67751ec92",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/feaec80cb033bd3db754c783ad483fc67751ec92"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3d1abacb94ca6d7441b57a032de7b1679dce975f",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69aada346f74c978b5d8be59a5d7c79be966ef8c/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69aada346f74c978b5d8be59a5d7c79be966ef8c/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=69aada346f74c978b5d8be59a5d7c79be966ef8c",
        "patch": "@@ -26,7 +26,7 @@ extern const std::string CLIENT_DATE;\n // network protocol versioning\n //\n \n-static const int PROTOCOL_VERSION = 70001;\n+static const int PROTOCOL_VERSION = 70002;\n \n // intial proto version, to be increased after version/verack negotiation\n static const int INIT_PROTO_VERSION = 209;"
      }
    ]
  }
]