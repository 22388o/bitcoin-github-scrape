theStack,2021-09-11 18:33:57,"Force-pushed with changes as suggested by MarcoFalke (https://github.com/bitcoin/bitcoin/pull/22953#discussion_r706614179).\n\nPinging @practicalswift as someone who has always shown interest in potential boost replacements and string processing helpers, with lots of contributions in that area. Maybe you feel like taking a look :)",https://github.com/bitcoin/bitcoin/pull/22953#issuecomment-917453444,917453444,
kiminuo,2021-09-13 10:27:19,"I would still add a unit test even though there are tests for the internal helper. Maybe it's a little bit over the top so feel free to ignore my suggestion.\n\n(Something like this possibly: https://github.com/kiminuo/bitcoin/commit/ac6dd5a921407c3957a7c15a6a5a82af826decb6)",https://github.com/bitcoin/bitcoin/pull/22953#issuecomment-918057224,918057224,
MarcoFalke,2021-09-13 10:34:24,"Any reason the tests aren't fixed up as well? \n\n```\nsrc/test/fuzz/script_assets_test_minimizer.cpp:    boost::algorithm::split(words, str, boost::algorithm::is_any_of("",""));\n```\n\nAlso, if you add a unit test, might as extend the `string` fuzz target.",https://github.com/bitcoin/bitcoin/pull/22953#issuecomment-918061893,918061893,
kiminuo,2021-09-13 10:42:39,"There non-tests occurrences too:\n\n```\nsrc\rpc\server.cpp:\n  410          std::vector<std::string> vargNames;\n  411:         boost::algorithm::split(vargNames, argNamePattern, boost::algorithm::is_any_of(""|""));\n  412          auto fr = argsIn.end();\n\nsrc\test\transaction_tests.cpp:\n  72      std::vector<std::string> words;\n  73:     boost::algorithm::split(words, strFlags, boost",https://github.com/bitcoin/bitcoin/pull/22953#issuecomment-918067057,918067057,
theStack,2021-09-13 11:19:18,"> I would still add a unit test even though there are tests for the internal helper. Maybe it's a little bit over the top so feel free to ignore my suggestion.\n\nI agree that it's a good idea to add a unit test.\n\n> \n> (Something like this possibly: [kiminuo@ac6dd5a](https://github.com/kiminuo/bitcoin/commit/ac6dd5a921407c3957a7c15a6a5a82af826decb6))\n\nThanks! As quick feedback, can you",https://github.com/bitcoin/bitcoin/pull/22953#issuecomment-918093600,918093600,
kiminuo,2021-09-13 11:28:13,"> > (Something like this possibly: [kiminuo@ac6dd5a](https://github.com/kiminuo/bitcoin/commit/ac6dd5a921407c3957a7c15a6a5a82af826decb6))\n> \n> Thanks! As quick feedback, can you change the commit subject to be more verbose (e.g. ""test: add unit tests for SplitString helper"") and put the test into `src/test/util_tests.cpp`, instead of creating a new file? I'm happy to either add your commit to ",https://github.com/bitcoin/bitcoin/pull/22953#issuecomment-918099773,918099773,
MarcoFalke,2021-09-13 11:47:42,"The fuzz test I mentioned: (might not compile)\n\n```diff\ndiff --git a/src/test/fuzz/string.cpp b/src/test/fuzz/string.cpp\nindex 0c1b45b86c..e5a09c0013 100644\n--- a/src/test/fuzz/string.cpp\n+++ b/src/test/fuzz/string.cpp\n@@ -127,6 +127,7 @@ FUZZ_TARGET(string)\n         int64_t amount_out;\n         (void)ParseFixedPoint(random_string_1, fuzzed_data_provider.ConsumeIntegralInRange<in",https://github.com/bitcoin/bitcoin/pull/22953#issuecomment-918112252,918112252,
theStack,2021-09-13 11:54:49,"> The fuzz test I mentioned: (might not compile)\n\nOh, I didn't see that in your previous comment. It compiles, I added another commit ðŸ‘Œ \n",https://github.com/bitcoin/bitcoin/pull/22953#issuecomment-918116807,918116807,
fanquake,2021-09-16 02:39:22,Concept ACK - this is low-overhead for dropping more Boost dependence. Surprised we can't also nuke anything from `test/lint/lint-includes.sh`,https://github.com/bitcoin/bitcoin/pull/22953#issuecomment-920529829,920529829,
laanwj,2021-09-16 19:41:40,"Concept ACK. I don't think this boost use is very bad (it's a header-only library) but if we can replace it with functionality we already have internally, who not.\n\n> Concept ACK - this is low-overhead for dropping more Boost dependence. Surprised we can't also nuke anything from test/lint/lint-includes.sh\n\nWell, `split` is still used in some places (`httprpc.cpp` for example), this only r",https://github.com/bitcoin/bitcoin/pull/22953#issuecomment-921193226,921193226,
theStack,2021-09-20 14:42:30,"Force-pushed the alternative variant as suggested by @martinus, changing `spanparsing::Split` to a templated function and defining an alias `SplitString` as suggested by @MarcoFalke (see https://github.com/bitcoin/bitcoin/pull/22953#discussion_r708485720 and https://github.com/bitcoin/bitcoin/pull/22953#discussion_r712016183).",https://github.com/bitcoin/bitcoin/pull/22953#issuecomment-922992618,922992618,
martinus,2021-09-23 05:51:44,"Windows build error seems unrelated, in `wallet_address_types.py`:\n```\nOSError: [WinError 10048] Only one usage of each socket address (protocol/network address/port) is normally permitted\n```",https://github.com/bitcoin/bitcoin/pull/22953#issuecomment-925523479,925523479,
hebasto,2021-09-23 06:27:12,"See #18548\n\nOn Thu, 23 Sep 2021 at 08:54, Martin Leitner-Ankerl <\n***@***.***> wrote:\n\n> Windows build error seems unrelated, in wallet_address_types.py:\n>\n> OSError: [WinError 10048] Only one usage of each socket address (protocol/network address/port) is normally permitted\n>\n> â€”\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it",https://github.com/bitcoin/bitcoin/pull/22953#issuecomment-925537240,925537240,
theStack,2021-09-27 10:38:21,Rebased on master to (hopefully) get rid of the Windows CI failure.,https://github.com/bitcoin/bitcoin/pull/22953#issuecomment-927740760,927740760,
practicalswift,2021-09-29 14:01:56,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22953#issuecomment-930206707,930206707,
DrahtBot,2021-11-18 08:54:17,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/22953#issuecomment-972659290,972659290,
theStack,2021-11-25 13:08:42,Rebased on master.,https://github.com/bitcoin/bitcoin/pull/22953#issuecomment-979200195,979200195,
MarcoFalke,2021-09-11 13:37:22,"nit: missing `{`. Also, could move the impl to the cpp file?\n\n```suggestion\n    for (const auto& span_str : span_strs) {\n```",https://github.com/bitcoin/bitcoin/pull/22953#discussion_r706614179,706614179,src/util/string.h
theStack,2021-09-11 18:22:57,"Thanks for the review, done (was surprised to see that the string.cpp is actually empty on master).",https://github.com/bitcoin/bitcoin/pull/22953#discussion_r706646416,706646416,src/util/string.h
MarcoFalke,2021-09-12 09:32:45,Is the annotation needed in the cpp file as well? At least lock annotations are only supposed to go to the declaration.,https://github.com/bitcoin/bitcoin/pull/22953#discussion_r706808663,706808663,src/util/string.cpp
theStack,2021-09-12 09:53:55,Good point. Quickly `grep`ing the `[[nodiscard]]` annotation in our codebase shows that there are barely any occurences in .cpp files (only for static functions). Removed it.,https://github.com/bitcoin/bitcoin/pull/22953#discussion_r706811227,706811227,src/util/string.cpp
martinus,2021-09-13 19:14:49,"You could use `emplace_back(span_str.begin(), span_str.end())`. That way no temporary string is created and moved. It's also shorter :)",https://github.com/bitcoin/bitcoin/pull/22953#discussion_r707611251,707611251,src/util/string.cpp
martinus,2021-09-13 19:26:52,"Not sure if that's nicer, but another way to implement this would be to make `spanparsing::Split`a templated function, where the template argument is the vector's output type. If I'm not mistaken this should work for Span, string, string_view.Then it would be possible to directly call e.g. `spanparsing::Split<std::string>(x)` without the need for a wrapper function.",https://github.com/bitcoin/bitcoin/pull/22953#discussion_r707618784,707618784,src/util/string.cpp
theStack,2021-09-14 14:28:19,"Good idea, thanks! Done.",https://github.com/bitcoin/bitcoin/pull/22953#discussion_r708329439,708329439,src/util/string.cpp
theStack,2021-09-14 14:32:57,"Seems like a nice way to solve this! Unfortunately, I fear my C++ template skills are currently too lousy to come up with this. Will give it a try on the weekend. That said, I'm also happy to close this PR for another one with a better solution :)",https://github.com/bitcoin/bitcoin/pull/22953#discussion_r708334037,708334037,src/util/string.cpp
martinus,2021-09-14 17:28:23,"I think moving the code into the header and changing it into something like that should work:\n\n```cpp\ntemplate <typename T = Span<const char>>\nstd::vector<T> Split(const Span<const char>& sp, char sep)\n{\n    std::vector<T> ret;\n    auto it = sp.begin();\n    auto start = it;\n    while (it != sp.end()) {\n        if (*it == sep) {\n            ret.emplace_back(start, it);\n            start",https://github.com/bitcoin/bitcoin/pull/22953#discussion_r708485720,708485720,src/util/string.cpp
MarcoFalke,2021-09-20 09:41:43,"If you decide to do that, it would be possible to define an alias like so:\n\n```cpp\nconstexpr auto SplitString = &spanparsing::Split<std::string>;\n",https://github.com/bitcoin/bitcoin/pull/22953#discussion_r712016183,712016183,src/util/string.cpp
theStack,2021-09-20 12:46:59,"@martinus: Thanks, I will try that out in a bit!\n@MarcoFalke: That's a good idea with the alias, then I only need to change the implementation and keep the rest as it is now.",https://github.com/bitcoin/bitcoin/pull/22953#discussion_r712132638,712132638,src/util/string.cpp
MarcoFalke,2021-09-20 15:02:20,"weird issue on macos:\n\n```\ntest/util_tests.cpp:2087: error: in ""util_tests/test_SplitString"": check result[0] == """" has failed [ != ]\ntest/util_tests.cpp:2095: error: in ""util_tests/test_SplitString"": check result[1] == """" has failed [ != ]\ntest/util_tests.cpp:2104: error: in ""util_tests/test_SplitString"": check result[2] == """" has failed [ != ]\ntest/util_tests.cpp:2111: error: in ""uti",https://github.com/bitcoin/bitcoin/pull/22953#discussion_r712254145,712254145,src/test/util_tests.cpp
martinus,2021-09-20 17:02:45,"I think the issue here is that the conversion of the string literals to `Span<const char>` works so that the `\0` is part of the span. So for `""""` the size of the span is actually 1 with content ""\0"", while for `std::string` the size would be 0. The tests should work fine for `std::string("""")` as the argument",https://github.com/bitcoin/bitcoin/pull/22953#discussion_r712354371,712354371,src/test/util_tests.cpp
theStack,2021-09-20 17:34:59,"Ah, good point, that also explains why only the last element of each result vector failed the test. Thanks, fixed.",https://github.com/bitcoin/bitcoin/pull/22953#discussion_r712376731,712376731,src/test/util_tests.cpp
martinus,2021-09-21 05:16:45,"I think it would be safer to use a more restrictive interface for `SplitString`, because it's not really intuitive how SplitString behaves with string literals. Something like\n\n```cpp\ninline std::vector<std::string> SplitString(std::string_view str, char sep) {\n    return spanparsing::Split<std::string>(str, sep);\n}\n```\nOther than that, almost-ACK 8949509, code-reviewed and tested",https://github.com/bitcoin/bitcoin/pull/22953#discussion_r712700924,712700924,src/util/string.h
MarcoFalke,2021-09-21 08:56:12,"It seems dangerous to offer a function that silently does the wrong thing when passed the ""wrong"" type",https://github.com/bitcoin/bitcoin/pull/22953#discussion_r712838972,712838972,src/test/util_tests.cpp
theStack,2021-09-21 10:45:10,"Thanks, used your suggested interface/implementation and also add the `[[nodiscard]]` attribute.",https://github.com/bitcoin/bitcoin/pull/22953#discussion_r712918562,712918562,src/util/string.h
theStack,2021-09-21 10:46:00,"Agree. This is fixed now by using an explicit interface instead of an alias, as suggested by martinus in https://github.com/bitcoin/bitcoin/pull/22953#discussion_r712700924.",https://github.com/bitcoin/bitcoin/pull/22953#discussion_r712919130,712919130,src/test/util_tests.cpp
