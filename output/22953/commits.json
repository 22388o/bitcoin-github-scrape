[
  {
    "sha": "ab3b29778161998f24d2ef4716009c003bb47465",
    "node_id": "C_kwDOABII59oAKGFiM2IyOTc3ODE2MTk5OGYyNGQyZWY0NzE2MDA5YzAwM2JiNDc0NjU",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-09-11T10:54:50Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-11-25T12:41:43Z"
      },
      "message": "refactor: remove unused boost header include in bitcoin-util.cpp\n\nThis header was included since the introduction of bitcoin-util in\ncommit 13762bcc9618138dd28b53c2031defdc9d762d26, but boost was\nactually never used (see `git log -S boost ./src/bitcoin-util.cpp`).",
      "tree": {
        "sha": "6bfc36e22531f31ae7b3a0de810584c1585fa6ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6bfc36e22531f31ae7b3a0de810584c1585fa6ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab3b29778161998f24d2ef4716009c003bb47465",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab3b29778161998f24d2ef4716009c003bb47465",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab3b29778161998f24d2ef4716009c003bb47465",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab3b29778161998f24d2ef4716009c003bb47465/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "681b25e3cd7d084f642693152322ed9a40f33ba0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/681b25e3cd7d084f642693152322ed9a40f33ba0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/681b25e3cd7d084f642693152322ed9a40f33ba0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "34b82a8d29a9cb76d3204446b85620d58438e259",
        "filename": "src/bitcoin-util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab3b29778161998f24d2ef4716009c003bb47465/src/bitcoin-util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab3b29778161998f24d2ef4716009c003bb47465/src/bitcoin-util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-util.cpp?ref=ab3b29778161998f24d2ef4716009c003bb47465",
        "patch": "@@ -22,8 +22,6 @@\n #include <memory>\n #include <thread>\n \n-#include <boost/algorithm/string.hpp>\n-\n static const int CONTINUE_EXECUTION=-1;\n \n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;"
      }
    ]
  },
  {
    "sha": "6edf43d85dfd63d4dcf3c90edc4db6b6a1924891",
    "node_id": "C_kwDOABII59oAKDZlZGY0M2Q4NWRmZDYzZDRkY2YzYzkwZWRjNGRiNmI2YTE5MjQ4OTE",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-09-11T11:02:47Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-11-25T12:41:44Z"
      },
      "message": "refactor: introduce single-separator split helper `SplitString`\n\nThis helper uses spanparsing::Split internally and enables to replace\nall calls to boost::split where only a single separator is passed.\n\nCo-authored-by: Martin Ankerl <Martin.Ankerl@gmail.com>\nCo-authored-by: MarcoFalke <falke.marco@gmail.com>",
      "tree": {
        "sha": "d1cf4587de1dadd5aa08bec8a40115efa5910cc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1cf4587de1dadd5aa08bec8a40115efa5910cc0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab3b29778161998f24d2ef4716009c003bb47465",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab3b29778161998f24d2ef4716009c003bb47465",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab3b29778161998f24d2ef4716009c003bb47465"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 43,
      "deletions": 65
    },
    "files": [
      {
        "sha": "4b6cae4f103595874d273d582995321694e5db6e",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 12,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=6edf43d85dfd63d4dcf3c90edc4db6b6a1924891",
        "patch": "@@ -30,8 +30,6 @@\n #include <memory>\n #include <stdio.h>\n \n-#include <boost/algorithm/string.hpp>\n-\n static bool fCreateBlank;\n static std::map<std::string,UniValue> registers;\n static const int CONTINUE_EXECUTION=-1;\n@@ -247,8 +245,7 @@ static T TrimAndParse(const std::string& int_str, const std::string& err)\n \n static void MutateTxAddInput(CMutableTransaction& tx, const std::string& strInput)\n {\n-    std::vector<std::string> vStrInputParts;\n-    boost::split(vStrInputParts, strInput, boost::is_any_of(\":\"));\n+    std::vector<std::string> vStrInputParts = SplitString(strInput, ':');\n \n     // separate TXID:VOUT in string\n     if (vStrInputParts.size()<2)\n@@ -283,8 +280,7 @@ static void MutateTxAddInput(CMutableTransaction& tx, const std::string& strInpu\n static void MutateTxAddOutAddr(CMutableTransaction& tx, const std::string& strInput)\n {\n     // Separate into VALUE:ADDRESS\n-    std::vector<std::string> vStrInputParts;\n-    boost::split(vStrInputParts, strInput, boost::is_any_of(\":\"));\n+    std::vector<std::string> vStrInputParts = SplitString(strInput, ':');\n \n     if (vStrInputParts.size() != 2)\n         throw std::runtime_error(\"TX output missing or too many separators\");\n@@ -308,8 +304,7 @@ static void MutateTxAddOutAddr(CMutableTransaction& tx, const std::string& strIn\n static void MutateTxAddOutPubKey(CMutableTransaction& tx, const std::string& strInput)\n {\n     // Separate into VALUE:PUBKEY[:FLAGS]\n-    std::vector<std::string> vStrInputParts;\n-    boost::split(vStrInputParts, strInput, boost::is_any_of(\":\"));\n+    std::vector<std::string> vStrInputParts = SplitString(strInput, ':');\n \n     if (vStrInputParts.size() < 2 || vStrInputParts.size() > 3)\n         throw std::runtime_error(\"TX output missing or too many separators\");\n@@ -352,8 +347,7 @@ static void MutateTxAddOutPubKey(CMutableTransaction& tx, const std::string& str\n static void MutateTxAddOutMultiSig(CMutableTransaction& tx, const std::string& strInput)\n {\n     // Separate into VALUE:REQUIRED:NUMKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]\n-    std::vector<std::string> vStrInputParts;\n-    boost::split(vStrInputParts, strInput, boost::is_any_of(\":\"));\n+    std::vector<std::string> vStrInputParts = SplitString(strInput, ':');\n \n     // Check that there are enough parameters\n     if (vStrInputParts.size()<3)\n@@ -453,8 +447,7 @@ static void MutateTxAddOutData(CMutableTransaction& tx, const std::string& strIn\n static void MutateTxAddOutScript(CMutableTransaction& tx, const std::string& strInput)\n {\n     // separate VALUE:SCRIPT[:FLAGS]\n-    std::vector<std::string> vStrInputParts;\n-    boost::split(vStrInputParts, strInput, boost::is_any_of(\":\"));\n+    std::vector<std::string> vStrInputParts = SplitString(strInput, ':');\n     if (vStrInputParts.size() < 2)\n         throw std::runtime_error(\"TX output missing separator\");\n "
      },
      {
        "sha": "d1f6e3cafe6580becc4d511fbfab6ae34ac18005",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=6edf43d85dfd63d4dcf3c90edc4db6b6a1924891",
        "patch": "@@ -9,13 +9,11 @@\n #include <consensus/merkle.h>\n #include <deploymentinfo.h>\n #include <hash.h> // for signet block challenge hash\n+#include <util/string.h>\n #include <util/system.h>\n \n #include <assert.h>\n \n-#include <boost/algorithm/string/classification.hpp>\n-#include <boost/algorithm/string/split.hpp>\n-\n static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     CMutableTransaction txNew;\n@@ -525,8 +523,7 @@ void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n     if (!args.IsArgSet(\"-vbparams\")) return;\n \n     for (const std::string& strDeployment : args.GetArgs(\"-vbparams\")) {\n-        std::vector<std::string> vDeploymentParams;\n-        boost::split(vDeploymentParams, strDeployment, boost::is_any_of(\":\"));\n+        std::vector<std::string> vDeploymentParams = SplitString(strDeployment, ':');\n         if (vDeploymentParams.size() < 3 || 4 < vDeploymentParams.size()) {\n             throw std::runtime_error(\"Version bits parameters malformed, expecting deployment:start:end[:min_activation_height]\");\n         }"
      },
      {
        "sha": "16e5e440730ebc2059f21a29f1be1a639487d4f0",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=6edf43d85dfd63d4dcf3c90edc4db6b6a1924891",
        "patch": "@@ -25,8 +25,6 @@\n \n #include <any>\n \n-#include <boost/algorithm/string.hpp>\n-\n #include <univalue.h>\n \n static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n@@ -183,8 +181,7 @@ static bool rest_headers(const std::any& context,\n         return false;\n     std::string param;\n     const RetFormat rf = ParseDataFormat(param, strURIPart);\n-    std::vector<std::string> path;\n-    boost::split(path, param, boost::is_any_of(\"/\"));\n+    std::vector<std::string> path = SplitString(param, '/');\n \n     if (path.size() != 2)\n         return RESTERR(req, HTTP_BAD_REQUEST, \"No header count specified. Use /rest/headers/<count>/<hash>.<ext>.\");\n@@ -481,7 +478,7 @@ static bool rest_getutxos(const std::any& context, HTTPRequest* req, const std::\n     if (param.length() > 1)\n     {\n         std::string strUriParams = param.substr(1);\n-        boost::split(uriParts, strUriParams, boost::is_any_of(\"/\"));\n+        uriParts = SplitString(strUriParams, '/');\n     }\n \n     // throw exception in case of an empty request"
      },
      {
        "sha": "91862e081ab85ca023b506cd2f9d271bb6fa7679",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=6edf43d85dfd63d4dcf3c90edc4db6b6a1924891",
        "patch": "@@ -9,10 +9,9 @@\n #include <shutdown.h>\n #include <sync.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n #include <util/system.h>\n \n-#include <boost/algorithm/string/classification.hpp>\n-#include <boost/algorithm/string/split.hpp>\n #include <boost/signals2/signal.hpp>\n \n #include <cassert>\n@@ -407,8 +406,7 @@ static inline JSONRPCRequest transformNamedArguments(const JSONRPCRequest& in, c\n     // Process expected parameters.\n     int hole = 0;\n     for (const std::string &argNamePattern: argNames) {\n-        std::vector<std::string> vargNames;\n-        boost::algorithm::split(vargNames, argNamePattern, boost::algorithm::is_any_of(\"|\"));\n+        std::vector<std::string> vargNames = SplitString(argNamePattern, '|');\n         auto fr = argsIn.end();\n         for (const std::string & argName : vargNames) {\n             fr = argsIn.find(argName);"
      },
      {
        "sha": "986c26b0cf1e8925f66b2b16553cd46b61fedeb1",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=6edf43d85dfd63d4dcf3c90edc4db6b6a1924891",
        "patch": "@@ -15,9 +15,6 @@\n \n #include <tuple>\n \n-#include <boost/algorithm/string/classification.hpp>\n-#include <boost/algorithm/string/split.hpp>\n-\n const std::string UNIX_EPOCH_TIME = \"UNIX epoch time\";\n const std::string EXAMPLE_ADDRESS[2] = {\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\", \"bc1q02ad21edsxd23d32dfgqqsz4vv4nmtfzuklhy3\"};\n \n@@ -503,8 +500,7 @@ RPCHelpMan::RPCHelpMan(std::string name, std::string description, std::vector<RP\n {\n     std::set<std::string> named_args;\n     for (const auto& arg : m_args) {\n-        std::vector<std::string> names;\n-        boost::split(names, arg.m_names, boost::is_any_of(\"|\"));\n+        std::vector<std::string> names = SplitString(arg.m_names, '|');\n         // Should have unique named arguments\n         for (const std::string& name : names) {\n             CHECK_NONFATAL(named_args.insert(name).second);\n@@ -656,8 +652,7 @@ UniValue RPCHelpMan::GetArgMap() const\n     UniValue arr{UniValue::VARR};\n     for (int i{0}; i < int(m_args.size()); ++i) {\n         const auto& arg = m_args.at(i);\n-        std::vector<std::string> arg_names;\n-        boost::split(arg_names, arg.m_names, boost::is_any_of(\"|\"));\n+        std::vector<std::string> arg_names = SplitString(arg.m_names, '|');\n         for (const auto& arg_name : arg_names) {\n             UniValue map{UniValue::VARR};\n             map.push_back(m_name);"
      },
      {
        "sha": "2eacb17eb78d6738afba3bbbcf1ee7bb03cbbc0f",
        "filename": "src/test/fuzz/script_assets_test_minimizer.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/test/fuzz/script_assets_test_minimizer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/test/fuzz/script_assets_test_minimizer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_assets_test_minimizer.cpp?ref=6edf43d85dfd63d4dcf3c90edc4db6b6a1924891",
        "patch": "@@ -11,8 +11,8 @@\n #include <streams.h>\n #include <univalue.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n \n-#include <boost/algorithm/string.hpp>\n #include <cstdint>\n #include <string>\n #include <vector>\n@@ -130,8 +130,7 @@ unsigned int ParseScriptFlags(const std::string& str)\n     if (str.empty()) return 0;\n \n     unsigned int flags = 0;\n-    std::vector<std::string> words;\n-    boost::algorithm::split(words, str, boost::algorithm::is_any_of(\",\"));\n+    std::vector<std::string> words = SplitString(str, ',');\n \n     for (const std::string& word : words) {\n         auto it = FLAG_NAMES.find(word);"
      },
      {
        "sha": "1a33bcbc71dfcbd9af870cbbf2b433c3ecbb8ced",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=6edf43d85dfd63d4dcf3c90edc4db6b6a1924891",
        "patch": "@@ -31,8 +31,6 @@\n #include <map>\n #include <string>\n \n-#include <boost/algorithm/string/classification.hpp>\n-#include <boost/algorithm/string/split.hpp>\n #include <boost/test/unit_test.hpp>\n \n #include <univalue.h>\n@@ -70,8 +68,7 @@ unsigned int ParseScriptFlags(std::string strFlags)\n {\n     if (strFlags.empty() || strFlags == \"NONE\") return 0;\n     unsigned int flags = 0;\n-    std::vector<std::string> words;\n-    boost::algorithm::split(words, strFlags, boost::algorithm::is_any_of(\",\"));\n+    std::vector<std::string> words = SplitString(strFlags, ',');\n \n     for (const std::string& word : words)\n     {"
      },
      {
        "sha": "cdb2e7aa0278d11439f90c745c40f5b9a357dfb1",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=6edf43d85dfd63d4dcf3c90edc4db6b6a1924891",
        "patch": "@@ -24,9 +24,7 @@\n #include <set>\n #include <vector>\n \n-#include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/replace.hpp>\n-#include <boost/algorithm/string/split.hpp>\n \n #include <event2/buffer.h>\n #include <event2/bufferevent.h>\n@@ -477,8 +475,10 @@ void TorController::protocolinfo_cb(TorControlConnection& _conn, const TorContro\n             if (l.first == \"AUTH\") {\n                 std::map<std::string,std::string> m = ParseTorReplyMapping(l.second);\n                 std::map<std::string,std::string>::iterator i;\n-                if ((i = m.find(\"METHODS\")) != m.end())\n-                    boost::split(methods, i->second, boost::is_any_of(\",\"));\n+                if ((i = m.find(\"METHODS\")) != m.end()) {\n+                    std::vector<std::string> m_vec = SplitString(i->second, ',');\n+                    methods = std::set<std::string>(m_vec.begin(), m_vec.end());\n+                }\n                 if ((i = m.find(\"COOKIEFILE\")) != m.end())\n                     cookiefile = i->second;\n             } else if (l.first == \"VERSION\") {"
      },
      {
        "sha": "2abbc75dc7627e8477d33b9dad0515c658ca9f74",
        "filename": "src/util/spanparsing.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/util/spanparsing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/util/spanparsing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/spanparsing.cpp?ref=6edf43d85dfd63d4dcf3c90edc4db6b6a1924891",
        "patch": "@@ -48,20 +48,4 @@ Span<const char> Expr(Span<const char>& sp)\n     return ret;\n }\n \n-std::vector<Span<const char>> Split(const Span<const char>& sp, char sep)\n-{\n-    std::vector<Span<const char>> ret;\n-    auto it = sp.begin();\n-    auto start = it;\n-    while (it != sp.end()) {\n-        if (*it == sep) {\n-            ret.emplace_back(start, it);\n-            start = it + 1;\n-        }\n-        ++it;\n-    }\n-    ret.emplace_back(start, it);\n-    return ret;\n-}\n-\n } // namespace spanparsing"
      },
      {
        "sha": "ebec8714a7bff3a83984eae5a37bac8ada049abb",
        "filename": "src/util/spanparsing.h",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/util/spanparsing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/util/spanparsing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/spanparsing.h?ref=6edf43d85dfd63d4dcf3c90edc4db6b6a1924891",
        "patch": "@@ -43,7 +43,22 @@ Span<const char> Expr(Span<const char>& sp);\n  * Note that this function does not care about braces, so splitting\n  * \"foo(bar(1),2),3) on ',' will return {\"foo(bar(1)\", \"2)\", \"3)\"}.\n  */\n-std::vector<Span<const char>> Split(const Span<const char>& sp, char sep);\n+template <typename T = Span<const char>>\n+std::vector<T> Split(const Span<const char>& sp, char sep)\n+{\n+    std::vector<T> ret;\n+    auto it = sp.begin();\n+    auto start = it;\n+    while (it != sp.end()) {\n+        if (*it == sep) {\n+            ret.emplace_back(start, it);\n+            start = it + 1;\n+        }\n+        ++it;\n+    }\n+    ret.emplace_back(start, it);\n+    return ret;\n+}\n \n } // namespace spanparsing\n "
      },
      {
        "sha": "b730222a91fe6be910fe1382d4a9eec1d74d7d34",
        "filename": "src/util/string.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/util/string.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/util/string.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/string.h?ref=6edf43d85dfd63d4dcf3c90edc4db6b6a1924891",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_UTIL_STRING_H\n \n #include <attributes.h>\n+#include <util/spanparsing.h>\n \n #include <algorithm>\n #include <array>\n@@ -15,6 +16,11 @@\n #include <string>\n #include <vector>\n \n+[[nodiscard]] inline std::vector<std::string> SplitString(std::string_view str, char sep)\n+{\n+    return spanparsing::Split<std::string>(str, sep);\n+}\n+\n [[nodiscard]] inline std::string TrimString(const std::string& str, const std::string& pattern = \" \\f\\n\\r\\t\\v\")\n {\n     std::string::size_type front = str.find_first_not_of(pattern);"
      },
      {
        "sha": "28e99744fb57731296b1735df73b326767d9d5fc",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=6edf43d85dfd63d4dcf3c90edc4db6b6a1924891",
        "patch": "@@ -23,8 +23,6 @@\n #include <stdint.h>\n #include <tuple>\n \n-#include <boost/algorithm/string.hpp>\n-\n #include <univalue.h>\n \n \n@@ -571,8 +569,7 @@ RPCHelpMan importwallet()\n             if (line.empty() || line[0] == '#')\n                 continue;\n \n-            std::vector<std::string> vstr;\n-            boost::split(vstr, line, boost::is_any_of(\" \"));\n+            std::vector<std::string> vstr = SplitString(line, ' ');\n             if (vstr.size() < 2)\n                 continue;\n             CKey key = DecodeSecret(vstr[0]);"
      }
    ]
  },
  {
    "sha": "acf42814a7a36f4b80dbfbf3be207de283815f86",
    "node_id": "C_kwDOABII59oAKGFjZjQyODE0YTdhMzZmNGI4MGRiZmJmM2JlMjA3ZGUyODM4MTVmODY",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-09-13T10:17:35Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-11-25T12:41:44Z"
      },
      "message": "test: add unit tests for `SplitString` helper",
      "tree": {
        "sha": "ff45b8869027024c007d70a20d5d59d5b7341d7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff45b8869027024c007d70a20d5d59d5b7341d7e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/acf42814a7a36f4b80dbfbf3be207de283815f86",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acf42814a7a36f4b80dbfbf3be207de283815f86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/acf42814a7a36f4b80dbfbf3be207de283815f86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acf42814a7a36f4b80dbfbf3be207de283815f86/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6edf43d85dfd63d4dcf3c90edc4db6b6a1924891",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6edf43d85dfd63d4dcf3c90edc4db6b6a1924891"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bf4cf685c5730209578e907b0c158c5fd575556f",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf42814a7a36f4b80dbfbf3be207de283815f86/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf42814a7a36f4b80dbfbf3be207de283815f86/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=acf42814a7a36f4b80dbfbf3be207de283815f86",
        "patch": "@@ -2239,6 +2239,55 @@ BOOST_AUTO_TEST_CASE(test_spanparsing)\n     BOOST_CHECK_EQUAL(SpanToStr(results[3]), \"\");\n }\n \n+BOOST_AUTO_TEST_CASE(test_SplitString)\n+{\n+    // Empty string.\n+    {\n+        std::vector<std::string> result = SplitString(\"\", '-');\n+        BOOST_CHECK_EQUAL(result.size(), 1);\n+        BOOST_CHECK_EQUAL(result[0], \"\");\n+    }\n+\n+    // Empty items.\n+    {\n+        std::vector<std::string> result = SplitString(\"-\", '-');\n+        BOOST_CHECK_EQUAL(result.size(), 2);\n+        BOOST_CHECK_EQUAL(result[0], \"\");\n+        BOOST_CHECK_EQUAL(result[1], \"\");\n+    }\n+\n+    // More empty items.\n+    {\n+        std::vector<std::string> result = SplitString(\"--\", '-');\n+        BOOST_CHECK_EQUAL(result.size(), 3);\n+        BOOST_CHECK_EQUAL(result[0], \"\");\n+        BOOST_CHECK_EQUAL(result[1], \"\");\n+        BOOST_CHECK_EQUAL(result[2], \"\");\n+    }\n+\n+    // Separator is not present.\n+    {\n+        std::vector<std::string> result = SplitString(\"abc\", '-');\n+        BOOST_CHECK_EQUAL(result.size(), 1);\n+        BOOST_CHECK_EQUAL(result[0], \"abc\");\n+    }\n+\n+    // Basic behavior.\n+    {\n+        std::vector<std::string> result = SplitString(\"a-b\", '-');\n+        BOOST_CHECK_EQUAL(result.size(), 2);\n+        BOOST_CHECK_EQUAL(result[0], \"a\");\n+        BOOST_CHECK_EQUAL(result[1], \"b\");\n+    }\n+\n+    // Case-sensitivity of the separator.\n+    {\n+        std::vector<std::string> result = SplitString(\"AAA\", 'a');\n+        BOOST_CHECK_EQUAL(result.size(), 1);\n+        BOOST_CHECK_EQUAL(result[0], \"AAA\");\n+    }\n+}\n+\n BOOST_AUTO_TEST_CASE(test_LogEscapeMessage)\n {\n     // ASCII and UTF-8 must pass through unaltered."
      }
    ]
  },
  {
    "sha": "229f084e17bda5234b61378f987a4fb231720c32",
    "node_id": "C_kwDOABII59oAKDIyOWYwODRlMTdiZGE1MjM0YjYxMzc4Zjk4N2E0ZmIyMzE3MjBjMzI",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-13T11:52:07Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-11-25T12:41:44Z"
      },
      "message": "fuzz: add `SplitString` fuzz target",
      "tree": {
        "sha": "fdfa4ce14d0afe0018aab116444d3e091e7c0bf8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdfa4ce14d0afe0018aab116444d3e091e7c0bf8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/229f084e17bda5234b61378f987a4fb231720c32",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/229f084e17bda5234b61378f987a4fb231720c32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/229f084e17bda5234b61378f987a4fb231720c32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/229f084e17bda5234b61378f987a4fb231720c32/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "acf42814a7a36f4b80dbfbf3be207de283815f86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acf42814a7a36f4b80dbfbf3be207de283815f86",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acf42814a7a36f4b80dbfbf3be207de283815f86"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "58bb059a36a19fdb73b75f7f13fc9a8398259555",
        "filename": "src/test/fuzz/string.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/229f084e17bda5234b61378f987a4fb231720c32/src/test/fuzz/string.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/229f084e17bda5234b61378f987a4fb231720c32/src/test/fuzz/string.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/string.cpp?ref=229f084e17bda5234b61378f987a4fb231720c32",
        "patch": "@@ -223,6 +223,7 @@ FUZZ_TARGET(string)\n         int64_t amount_out;\n         (void)ParseFixedPoint(random_string_1, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 1024), &amount_out);\n     }\n+    (void)SplitString(random_string_1, fuzzed_data_provider.ConsumeIntegral<char>());\n     {\n         (void)Untranslated(random_string_1);\n         const bilingual_str bs1{random_string_1, random_string_2};"
      }
    ]
  }
]