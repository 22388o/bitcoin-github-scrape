scravy,2019-03-04T13:28:56Z,utACK c7ea8d3236e7c1b0c198345cc78a6754338d3724,https://github.com/bitcoin/bitcoin/pull/15522#issuecomment-469252871,469252871,
laanwj,2019-03-04T15:37:56Z,"~~utACK c7ea8d3236e7c1b0c198345cc78a6754338d3724~~\n(I don't think these are necessary assumptions, you're supposed to use `uintptr_t` if you want an integer type the same size as a pointer, but ok we do make it in practice)",https://github.com/bitcoin/bitcoin/pull/15522#issuecomment-469297830,469297830,
practicalswift,2019-03-04T19:25:44Z,@scravy @laanwj Added compiler assumptions for completeness. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/15522#issuecomment-469387365,469387365,
scravy,2019-03-04T19:40:58Z,"I am not sure that the C++11 assumption is needed. The assumptions in here are about the _platform_, i.e. hardware, system configuration, etc.\n\nWhether bitcoin is built using C++11 or not is pretty much up to the build system, not so much to the underlying platform (whereas I might just be able to configure/make on some alien system violating assumptions about certain types).\n\nI'm not fund",https://github.com/bitcoin/bitcoin/pull/15522#issuecomment-469392695,469392695,
practicalswift,2019-03-04T20:31:06Z,"@scravy When adding `assumptions.h` the goal was to document all tacit assumptions we make that don't follow directly from the standard used. Not specifying the standard was just an oversight from my part -- it should have been there from the beginning :-)\n\nA thought experiment that can be made when considering if an assumption should be specified explicitly:\n* Could it help sound static ana",https://github.com/bitcoin/bitcoin/pull/15522#issuecomment-469410076,469410076,
laanwj,2019-03-05T09:56:56Z,"> I am not sure that the C++11 assumption is needed. The assumptions in here are about the platform, i.e. hardware, system configuration, etc.\n\nI tend to agree. I like documenting specific, concrete assumptions here about platforms and environments. \nAsserting the C++11 macros seems too sweeping and general. Is there any specific reason bitcoind cannot be built with C++14 or 19 mode if so de",https://github.com/bitcoin/bitcoin/pull/15522#issuecomment-469616378,469616378,
practicalswift,2019-03-05T10:16:42Z,"@laanwj I've now changed to `__cplusplus >= 201103L` to make sure the compiler supports ""at least"" the final version of C++11. This will allow for building also in say C++14 or 17 mode. Please re-review :-)",https://github.com/bitcoin/bitcoin/pull/15522#issuecomment-469623628,469623628,
practicalswift,2019-03-05T23:05:59Z,"@laanwj An alternative would be to simply issue a warning if a non-C++11 (ISO/IEC 14882:2011) compiler is used:\n\n```\n#if __cplusplus != 201104L\n#warning ...\n#endif\n```\n\nWDYT? :-)",https://github.com/bitcoin/bitcoin/pull/15522#issuecomment-469895591,469895591,
practicalswift,2019-03-14T08:37:12Z,@laanwj Ping - what is your preference? :-),https://github.com/bitcoin/bitcoin/pull/15522#issuecomment-472753428,472753428,
practicalswift,2019-03-15T16:55:43Z,FWIW: I've verified that a disassembly of the `bitcoind` binary built with this patch applied is identical to a disassembly of the `bitcoind` binary built against `master` (as expected).,https://github.com/bitcoin/bitcoin/pull/15522#issuecomment-473363638,473363638,
laanwj,2019-03-16T16:13:28Z,"This is fine, let's not have an endless discussion over a pretty insignificant change like this.\n\n> FWIW: I've verified that a disassembly of the bitcoind binary built with this patch applied is identical to a disassembly of the bitcoind binary built against master (as expected).\n\nTHanks for testing, utACK",https://github.com/bitcoin/bitcoin/pull/15522#issuecomment-473558307,473558307,
