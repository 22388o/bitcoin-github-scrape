[
  {
    "sha": "716de29dd8672d28bfe0a08424e9958fe61054d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTZkZTI5ZGQ4NjcyZDI4YmZlMGEwODQyNGU5OTU4ZmU2MTA1NGQy",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-05-20T20:28:06Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-05-22T13:43:42Z"
      },
      "message": "Make `m_cached_blocks_path` mutable. Make `ArgsManager::GetBlocksDirPath()` const.",
      "tree": {
        "sha": "06f10bdf11dd27755d686cd1503fbf01c22c889c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06f10bdf11dd27755d686cd1503fbf01c22c889c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/716de29dd8672d28bfe0a08424e9958fe61054d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/716de29dd8672d28bfe0a08424e9958fe61054d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/716de29dd8672d28bfe0a08424e9958fe61054d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/716de29dd8672d28bfe0a08424e9958fe61054d2/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be4171679b8eab8205e04ff86140329bd67878a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be4171679b8eab8205e04ff86140329bd67878a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be4171679b8eab8205e04ff86140329bd67878a0"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "06684c78ad6b475ca5fc81df98c562e34e994744",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/716de29dd8672d28bfe0a08424e9958fe61054d2/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/716de29dd8672d28bfe0a08424e9958fe61054d2/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=716de29dd8672d28bfe0a08424e9958fe61054d2",
        "patch": "@@ -388,7 +388,7 @@ std::optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) co\n     return std::nullopt;\n }\n \n-const fs::path& ArgsManager::GetBlocksDirPath()\n+const fs::path& ArgsManager::GetBlocksDirPath() const\n {\n     LOCK(cs_args);\n     fs::path& path = m_cached_blocks_path;"
      },
      {
        "sha": "88a217f71d02336d507bc99b720723b98fd4938e",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/716de29dd8672d28bfe0a08424e9958fe61054d2/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/716de29dd8672d28bfe0a08424e9958fe61054d2/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=716de29dd8672d28bfe0a08424e9958fe61054d2",
        "patch": "@@ -195,7 +195,7 @@ class ArgsManager\n     std::map<OptionsCategory, std::map<std::string, Arg>> m_available_args GUARDED_BY(cs_args);\n     bool m_accept_any_command GUARDED_BY(cs_args){true};\n     std::list<SectionInfo> m_config_sections GUARDED_BY(cs_args);\n-    fs::path m_cached_blocks_path GUARDED_BY(cs_args);\n+    mutable fs::path m_cached_blocks_path GUARDED_BY(cs_args);\n     mutable fs::path m_cached_datadir_path GUARDED_BY(cs_args);\n     mutable fs::path m_cached_network_datadir_path GUARDED_BY(cs_args);\n \n@@ -266,7 +266,7 @@ class ArgsManager\n      *\n      * @return Blocks path which is network specific\n      */\n-    const fs::path& GetBlocksDirPath();\n+    const fs::path& GetBlocksDirPath() const;\n \n     /**\n      * Get data directory path"
      }
    ]
  },
  {
    "sha": "0f53df47d5b8319fc71f3b87c15a115ff797fb50",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjUzZGY0N2Q1YjgzMTlmYzcxZjNiODdjMTVhMTE1ZmY3OTdmYjUw",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-05-22T12:55:38Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-05-24T08:29:55Z"
      },
      "message": "Add `ArgsManager.GetDataDirBase()` and `ArgsManager.GetDataDirNet()` as an intended replacement for `ArgsManager.GetDataDirPath(net_identifier)`",
      "tree": {
        "sha": "efa12325b165fe5f85bb926c69001e98cb0d45b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/efa12325b165fe5f85bb926c69001e98cb0d45b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f53df47d5b8319fc71f3b87c15a115ff797fb50",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f53df47d5b8319fc71f3b87c15a115ff797fb50",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f53df47d5b8319fc71f3b87c15a115ff797fb50",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f53df47d5b8319fc71f3b87c15a115ff797fb50/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "716de29dd8672d28bfe0a08424e9958fe61054d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/716de29dd8672d28bfe0a08424e9958fe61054d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/716de29dd8672d28bfe0a08424e9958fe61054d2"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 21,
      "deletions": 5
    },
    "files": [
      {
        "sha": "3613d780ca98fe11c652288119ba5cf8d8121ad7",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f53df47d5b8319fc71f3b87c15a115ff797fb50/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f53df47d5b8319fc71f3b87c15a115ff797fb50/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=0f53df47d5b8319fc71f3b87c15a115ff797fb50",
        "patch": "@@ -404,7 +404,7 @@ const fs::path& ArgsManager::GetBlocksDirPath() const\n             return path;\n         }\n     } else {\n-        path = GetDataDirPath(false);\n+        path = GetDataDirBase();\n     }\n \n     path /= BaseParams().DataDir();\n@@ -513,7 +513,7 @@ bool ArgsManager::GetSettingsPath(fs::path* filepath, bool temp) const\n     }\n     if (filepath) {\n         std::string settings = GetArg(\"-settings\", BITCOIN_SETTINGS_FILENAME);\n-        *filepath = fsbridge::AbsPathJoin(GetDataDirPath(/* net_specific= */ true), temp ? settings + \".tmp\" : settings);\n+        *filepath = fsbridge::AbsPathJoin(GetDataDirNet(), temp ? settings + \".tmp\" : settings);\n     }\n     return true;\n }\n@@ -804,7 +804,7 @@ fs::path GetDefaultDataDir()\n \n const fs::path &GetDataDir(bool fNetSpecific)\n {\n-    return gArgs.GetDataDirPath(fNetSpecific);\n+    return fNetSpecific ? gArgs.GetDataDirNet() : gArgs.GetDataDirBase();\n }\n \n bool CheckDataDirOption()\n@@ -1361,7 +1361,7 @@ fs::path AbsPathForConfigVal(const fs::path& path, bool net_specific)\n     if (path.is_absolute()) {\n         return path;\n     }\n-    return fsbridge::AbsPathJoin(GetDataDir(net_specific), path);\n+    return fsbridge::AbsPathJoin(net_specific ? gArgs.GetDataDirNet() : gArgs.GetDataDirBase(), path);\n }\n \n void ScheduleBatchPriority()"
      },
      {
        "sha": "fcbbd24e833ee0fcaf57747fb82eaf45b9fbd3ae",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f53df47d5b8319fc71f3b87c15a115ff797fb50/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f53df47d5b8319fc71f3b87c15a115ff797fb50/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=0f53df47d5b8319fc71f3b87c15a115ff797fb50",
        "patch": "@@ -119,7 +119,7 @@ UniValue RunCommandParseJSON(const std::string& str_command, const std::string&\n  * the datadir if they are not absolute.\n  *\n  * @param path The path to be conditionally prefixed with datadir.\n- * @param net_specific Forwarded to GetDataDir().\n+ * @param net_specific Use network specific datadir variant\n  * @return The normalized path.\n  */\n fs::path AbsPathForConfigVal(const fs::path& path, bool net_specific = true);\n@@ -268,6 +268,22 @@ class ArgsManager\n      */\n     const fs::path& GetBlocksDirPath() const;\n \n+    /**\n+     * Get data directory path\n+     *\n+     * @return Absolute path on success, otherwise an empty path when a non-directory path would be returned\n+     * @post Returned directory path is created unless it is empty\n+     */\n+    const fs::path& GetDataDirBase() const { return GetDataDirPath(false); }\n+\n+    /**\n+     * Get data directory path with appended network identifier\n+     *\n+     * @return Absolute path on success, otherwise an empty path when a non-directory path would be returned\n+     * @post Returned directory path is created unless it is empty\n+     */\n+    const fs::path& GetDataDirNet() const { return GetDataDirPath(true); }\n+\n     /**\n      * Get data directory path\n      *"
      }
    ]
  },
  {
    "sha": "4d8189f62076d47be182e709857774bc3921b334",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDgxODlmNjIwNzZkNDdiZTE4MmU3MDk4NTc3NzRiYzM5MjFiMzM0",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-05-22T12:57:03Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-05-24T08:29:57Z"
      },
      "message": "scripted-diff: Change `ArgsManager.GetDataDirPath()` to `ArgsManager.GetDataDirBase()` in tests\n\n-BEGIN VERIFY SCRIPT-\ngit ls-files src/test/*_tests.cpp src/test/util/setup_common.cpp | xargs sed -i 's/.GetDataDirPath()/.GetDataDirBase()/g';\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "7dfeba8033ffd85910ba86eeffbc4d0cefa8d7ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7dfeba8033ffd85910ba86eeffbc4d0cefa8d7ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d8189f62076d47be182e709857774bc3921b334",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d8189f62076d47be182e709857774bc3921b334",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d8189f62076d47be182e709857774bc3921b334",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d8189f62076d47be182e709857774bc3921b334/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f53df47d5b8319fc71f3b87c15a115ff797fb50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f53df47d5b8319fc71f3b87c15a115ff797fb50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f53df47d5b8319fc71f3b87c15a115ff797fb50"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 28,
      "deletions": 28
    },
    "files": [
      {
        "sha": "e2e7644dfa844c37f4231a3a1c767a1ae8473523",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d8189f62076d47be182e709857774bc3921b334/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d8189f62076d47be182e709857774bc3921b334/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=4d8189f62076d47be182e709857774bc3921b334",
        "patch": "@@ -26,7 +26,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (const bool obfuscate : {false, true}) {\n-        fs::path ph = m_args.GetDataDirPath() / (obfuscate ? \"dbwrapper_obfuscate_true\" : \"dbwrapper_obfuscate_false\");\n+        fs::path ph = m_args.GetDataDirBase() / (obfuscate ? \"dbwrapper_obfuscate_true\" : \"dbwrapper_obfuscate_false\");\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n         char key = 'k';\n         uint256 in = InsecureRand256();\n@@ -45,7 +45,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (bool obfuscate : {false, true}) {\n-        fs::path ph = m_args.GetDataDirPath() / (obfuscate ? \"dbwrapper_1_obfuscate_true\" : \"dbwrapper_1_obfuscate_false\");\n+        fs::path ph = m_args.GetDataDirBase() / (obfuscate ? \"dbwrapper_1_obfuscate_true\" : \"dbwrapper_1_obfuscate_false\");\n         CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n \n         uint256 res;\n@@ -126,7 +126,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (const bool obfuscate : {false, true}) {\n-        fs::path ph = m_args.GetDataDirPath() / (obfuscate ? \"dbwrapper_batch_obfuscate_true\" : \"dbwrapper_batch_obfuscate_false\");\n+        fs::path ph = m_args.GetDataDirBase() / (obfuscate ? \"dbwrapper_batch_obfuscate_true\" : \"dbwrapper_batch_obfuscate_false\");\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         char key = 'i';\n@@ -162,7 +162,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (const bool obfuscate : {false, true}) {\n-        fs::path ph = m_args.GetDataDirPath() / (obfuscate ? \"dbwrapper_iterator_obfuscate_true\" : \"dbwrapper_iterator_obfuscate_false\");\n+        fs::path ph = m_args.GetDataDirBase() / (obfuscate ? \"dbwrapper_iterator_obfuscate_true\" : \"dbwrapper_iterator_obfuscate_false\");\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         // The two keys are intentionally chosen for ordering\n@@ -202,7 +202,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n {\n     // We're going to share this fs::path between two wrappers\n-    fs::path ph = m_args.GetDataDirPath() / \"existing_data_no_obfuscate\";\n+    fs::path ph = m_args.GetDataDirBase() / \"existing_data_no_obfuscate\";\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n@@ -243,7 +243,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n BOOST_AUTO_TEST_CASE(existing_data_reindex)\n {\n     // We're going to share this fs::path between two wrappers\n-    fs::path ph = m_args.GetDataDirPath() / \"existing_data_reindex\";\n+    fs::path ph = m_args.GetDataDirBase() / \"existing_data_reindex\";\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n@@ -278,7 +278,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n \n BOOST_AUTO_TEST_CASE(iterator_ordering)\n {\n-    fs::path ph = m_args.GetDataDirPath() / \"iterator_ordering\";\n+    fs::path ph = m_args.GetDataDirBase() / \"iterator_ordering\";\n     CDBWrapper dbw(ph, (1 << 20), true, false, false);\n     for (int x=0x00; x<256; ++x) {\n         uint8_t key = x;\n@@ -358,7 +358,7 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n {\n     char buf[10];\n \n-    fs::path ph = m_args.GetDataDirPath() / \"iterator_string_ordering\";\n+    fs::path ph = m_args.GetDataDirBase() / \"iterator_string_ordering\";\n     CDBWrapper dbw(ph, (1 << 20), true, false, false);\n     for (int x=0x00; x<10; ++x) {\n         for (int y = 0; y < 10; y++) {\n@@ -404,7 +404,7 @@ BOOST_AUTO_TEST_CASE(unicodepath)\n     // On Windows this test will fail if the directory is created using\n     // the ANSI CreateDirectoryA call and the code page isn't UTF8.\n     // It will succeed if created with CreateDirectoryW.\n-    fs::path ph = m_args.GetDataDirPath() / \"test_runner_\u20bf_\ud83c\udfc3_20191128_104644\";\n+    fs::path ph = m_args.GetDataDirBase() / \"test_runner_\u20bf_\ud83c\udfc3_20191128_104644\";\n     CDBWrapper dbw(ph, (1 << 20));\n \n     fs::path lockPath = ph / \"LOCK\";"
      },
      {
        "sha": "a56ce51acb91197c7a499acd1b26f29d382813d5",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d8189f62076d47be182e709857774bc3921b334/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d8189f62076d47be182e709857774bc3921b334/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=4d8189f62076d47be182e709857774bc3921b334",
        "patch": "@@ -208,7 +208,7 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n BOOST_AUTO_TEST_CASE(peer_discouragement)\n {\n     const CChainParams& chainparams = Params();\n-    auto banman = std::make_unique<BanMan>(m_args.GetDataDirPath() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    auto banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = std::make_unique<CConnmanTest>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n@@ -302,7 +302,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n BOOST_AUTO_TEST_CASE(DoS_bantime)\n {\n     const CChainParams& chainparams = Params();\n-    auto banman = std::make_unique<BanMan>(m_args.GetDataDirPath() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    auto banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);"
      },
      {
        "sha": "f4bc320f3c6374657da0004eabc3271d95e80df3",
        "filename": "src/test/flatfile_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d8189f62076d47be182e709857774bc3921b334/src/test/flatfile_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d8189f62076d47be182e709857774bc3921b334/src/test/flatfile_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/flatfile_tests.cpp?ref=4d8189f62076d47be182e709857774bc3921b334",
        "patch": "@@ -14,7 +14,7 @@ BOOST_FIXTURE_TEST_SUITE(flatfile_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(flatfile_filename)\n {\n-    const auto data_dir = m_args.GetDataDirPath();\n+    const auto data_dir = m_args.GetDataDirBase();\n \n     FlatFilePos pos(456, 789);\n \n@@ -27,7 +27,7 @@ BOOST_AUTO_TEST_CASE(flatfile_filename)\n \n BOOST_AUTO_TEST_CASE(flatfile_open)\n {\n-    const auto data_dir = m_args.GetDataDirPath();\n+    const auto data_dir = m_args.GetDataDirBase();\n     FlatFileSeq seq(data_dir, \"a\", 16 * 1024);\n \n     std::string line1(\"A purely peer-to-peer version of electronic cash would allow online \"\n@@ -88,7 +88,7 @@ BOOST_AUTO_TEST_CASE(flatfile_open)\n \n BOOST_AUTO_TEST_CASE(flatfile_allocate)\n {\n-    const auto data_dir = m_args.GetDataDirPath();\n+    const auto data_dir = m_args.GetDataDirBase();\n     FlatFileSeq seq(data_dir, \"a\", 100);\n \n     bool out_of_space;\n@@ -108,7 +108,7 @@ BOOST_AUTO_TEST_CASE(flatfile_allocate)\n \n BOOST_AUTO_TEST_CASE(flatfile_flush)\n {\n-    const auto data_dir = m_args.GetDataDirPath();\n+    const auto data_dir = m_args.GetDataDirBase();\n     FlatFileSeq seq(data_dir, \"a\", 100);\n \n     bool out_of_space;"
      },
      {
        "sha": "526a3c27bef8903d72c90a39634a849746ba8925",
        "filename": "src/test/fs_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d8189f62076d47be182e709857774bc3921b334/src/test/fs_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d8189f62076d47be182e709857774bc3921b334/src/test/fs_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fs_tests.cpp?ref=4d8189f62076d47be182e709857774bc3921b334",
        "patch": "@@ -13,7 +13,7 @@ BOOST_FIXTURE_TEST_SUITE(fs_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(fsbridge_fstream)\n {\n-    fs::path tmpfolder = m_args.GetDataDirPath();\n+    fs::path tmpfolder = m_args.GetDataDirBase();\n     // tmpfile1 should be the same as tmpfile2\n     fs::path tmpfile1 = tmpfolder / \"fs_tests_\u20bf_\ud83c\udfc3\";\n     fs::path tmpfile2 = tmpfolder / \"fs_tests_\u20bf_\ud83c\udfc3\";"
      },
      {
        "sha": "340ce33d91bfcb74931b4a3170c38892f3e1ec66",
        "filename": "src/test/settings_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d8189f62076d47be182e709857774bc3921b334/src/test/settings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d8189f62076d47be182e709857774bc3921b334/src/test/settings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/settings_tests.cpp?ref=4d8189f62076d47be182e709857774bc3921b334",
        "patch": "@@ -45,7 +45,7 @@ BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(ReadWrite)\n {\n-    fs::path path = m_args.GetDataDirPath() / \"settings.json\";\n+    fs::path path = m_args.GetDataDirBase() / \"settings.json\";\n \n     WriteText(path, R\"({\n         \"string\": \"string\","
      },
      {
        "sha": "7bf7f9e0ba647662c51c7c7b5ee51fa490ed29fa",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d8189f62076d47be182e709857774bc3921b334/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d8189f62076d47be182e709857774bc3921b334/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=4d8189f62076d47be182e709857774bc3921b334",
        "patch": "@@ -195,7 +195,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     }\n \n     m_node.addrman = std::make_unique<CAddrMan>();\n-    m_node.banman = std::make_unique<BanMan>(m_args.GetDataDirPath() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    m_node.banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman); // Deterministic randomness for tests.\n     m_node.peerman = PeerManager::make(chainparams, *m_node.connman, *m_node.addrman,\n                                        m_node.banman.get(), *m_node.scheduler, *m_node.chainman,"
      },
      {
        "sha": "aa95bc37e5456d9f5aa5b102f40aa6df4bfe27c8",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d8189f62076d47be182e709857774bc3921b334/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d8189f62076d47be182e709857774bc3921b334/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=4d8189f62076d47be182e709857774bc3921b334",
        "patch": "@@ -53,23 +53,23 @@ BOOST_AUTO_TEST_CASE(util_datadir)\n     ArgsManager args;\n     args.ForceSetArg(\"-datadir\", m_path_root.string());\n \n-    const fs::path dd_norm = args.GetDataDirPath();\n+    const fs::path dd_norm = args.GetDataDirBase();\n \n     args.ForceSetArg(\"-datadir\", dd_norm.string() + \"/\");\n     args.ClearPathCache();\n-    BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirPath());\n+    BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirBase());\n \n     args.ForceSetArg(\"-datadir\", dd_norm.string() + \"/.\");\n     args.ClearPathCache();\n-    BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirPath());\n+    BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirBase());\n \n     args.ForceSetArg(\"-datadir\", dd_norm.string() + \"/./\");\n     args.ClearPathCache();\n-    BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirPath());\n+    BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirBase());\n \n     args.ForceSetArg(\"-datadir\", dd_norm.string() + \"/.//\");\n     args.ClearPathCache();\n-    BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirPath());\n+    BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirBase());\n }\n \n BOOST_AUTO_TEST_CASE(util_check)\n@@ -1159,10 +1159,10 @@ BOOST_AUTO_TEST_CASE(util_ReadWriteSettings)\n     // Test error logging, and remove previously written setting.\n     {\n         ASSERT_DEBUG_LOG(\"Failed renaming settings file\");\n-        fs::remove(args1.GetDataDirPath() / \"settings.json\");\n-        fs::create_directory(args1.GetDataDirPath() / \"settings.json\");\n+        fs::remove(args1.GetDataDirBase() / \"settings.json\");\n+        fs::create_directory(args1.GetDataDirBase() / \"settings.json\");\n         args2.WriteSettingsFile();\n-        fs::remove(args1.GetDataDirPath() / \"settings.json\");\n+        fs::remove(args1.GetDataDirBase() / \"settings.json\");\n     }\n }\n \n@@ -1810,7 +1810,7 @@ static constexpr char ExitCommand = 'X';\n \n BOOST_AUTO_TEST_CASE(test_LockDirectory)\n {\n-    fs::path dirname = m_args.GetDataDirPath() / \"lock_dir\";\n+    fs::path dirname = m_args.GetDataDirBase() / \"lock_dir\";\n     const std::string lockname = \".lock\";\n #ifndef WIN32\n     // Revert SIGCHLD to default, otherwise boost.test will catch and fail on\n@@ -1899,7 +1899,7 @@ BOOST_AUTO_TEST_CASE(test_LockDirectory)\n BOOST_AUTO_TEST_CASE(test_DirIsWritable)\n {\n     // Should be able to write to the data dir.\n-    fs::path tmpdirname = m_args.GetDataDirPath();\n+    fs::path tmpdirname = m_args.GetDataDirBase();\n     BOOST_CHECK_EQUAL(DirIsWritable(tmpdirname), true);\n \n     // Should not be able to write to a non-existent dir."
      }
    ]
  },
  {
    "sha": "13bd8bb0536f008118b1de921654925ed9ce1da7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2JkOGJiMDUzNmYwMDgxMThiMWRlOTIxNjU0OTI1ZWQ5Y2UxZGE3",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-05-22T13:01:04Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-05-24T08:29:58Z"
      },
      "message": "Make `ArgsManager.GetDataDirPath` private and drop needless suffix",
      "tree": {
        "sha": "c37fe517ec7ff62e87d189a8a632bdad86988302",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c37fe517ec7ff62e87d189a8a632bdad86988302"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13bd8bb0536f008118b1de921654925ed9ce1da7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13bd8bb0536f008118b1de921654925ed9ce1da7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13bd8bb0536f008118b1de921654925ed9ce1da7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13bd8bb0536f008118b1de921654925ed9ce1da7/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d8189f62076d47be182e709857774bc3921b334",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d8189f62076d47be182e709857774bc3921b334",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d8189f62076d47be182e709857774bc3921b334"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "3dcf3e9b6ecc2a31b0580ac5bee461e3c537a3c7",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13bd8bb0536f008118b1de921654925ed9ce1da7/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13bd8bb0536f008118b1de921654925ed9ce1da7/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=13bd8bb0536f008118b1de921654925ed9ce1da7",
        "patch": "@@ -414,7 +414,7 @@ const fs::path& ArgsManager::GetBlocksDirPath() const\n     return path;\n }\n \n-const fs::path& ArgsManager::GetDataDirPath(bool net_specific) const\n+const fs::path& ArgsManager::GetDataDir(bool net_specific) const\n {\n     LOCK(cs_args);\n     fs::path& path = net_specific ? m_cached_network_datadir_path : m_cached_datadir_path;"
      },
      {
        "sha": "6a4bd9f99e2a2648bfbe99362e1b7f8df82846fb",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13bd8bb0536f008118b1de921654925ed9ce1da7/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13bd8bb0536f008118b1de921654925ed9ce1da7/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=13bd8bb0536f008118b1de921654925ed9ce1da7",
        "patch": "@@ -274,24 +274,15 @@ class ArgsManager\n      * @return Absolute path on success, otherwise an empty path when a non-directory path would be returned\n      * @post Returned directory path is created unless it is empty\n      */\n-    const fs::path& GetDataDirBase() const { return GetDataDirPath(false); }\n+    const fs::path& GetDataDirBase() const { return GetDataDir(false); }\n \n     /**\n      * Get data directory path with appended network identifier\n      *\n      * @return Absolute path on success, otherwise an empty path when a non-directory path would be returned\n      * @post Returned directory path is created unless it is empty\n      */\n-    const fs::path& GetDataDirNet() const { return GetDataDirPath(true); }\n-\n-    /**\n-     * Get data directory path\n-     *\n-     * @param net_specific Append network identifier to the returned path\n-     * @return Absolute path on success, otherwise an empty path when a non-directory path would be returned\n-     * @post Returned directory path is created unless it is empty\n-     */\n-    const fs::path& GetDataDirPath(bool net_specific = true) const;\n+    const fs::path& GetDataDirNet() const { return GetDataDir(true); }\n \n     /**\n      * Clear cached directory paths\n@@ -453,6 +444,15 @@ class ArgsManager\n     void LogArgs() const;\n \n private:\n+    /**\n+     * Get data directory path\n+     *\n+     * @param net_specific Append network identifier to the returned path\n+     * @return Absolute path on success, otherwise an empty path when a non-directory path would be returned\n+     * @post Returned directory path is created unless it is empty\n+     */\n+    const fs::path& GetDataDir(bool net_specific) const;\n+\n     // Helper function for LogArgs().\n     void logArgsPrefix(\n         const std::string& prefix,"
      }
    ]
  },
  {
    "sha": "4c3a5dcbfc3010965332ad568c3a70618c930ef3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzNhNWRjYmZjMzAxMDk2NTMzMmFkNTY4YzNhNzA2MThjOTMwZWYz",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-05-04T11:00:25Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-05-24T08:29:58Z"
      },
      "message": "scripted-diff: Replace `GetDataDir()` calls with `gArgs.GetDataDirNet()` calls\n\n-BEGIN VERIFY SCRIPT-\ngit ls-files -- 'src' ':(exclude)src/util/system.h' ':(exclude)src/util/system.cpp' | xargs sed -i 's/GetDataDir()/gArgs.GetDataDirNet()/g';\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "654ca8d0dba267bfae1c2edebce930629dda4e45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/654ca8d0dba267bfae1c2edebce930629dda4e45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c3a5dcbfc3010965332ad568c3a70618c930ef3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c3a5dcbfc3010965332ad568c3a70618c930ef3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c3a5dcbfc3010965332ad568c3a70618c930ef3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c3a5dcbfc3010965332ad568c3a70618c930ef3/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13bd8bb0536f008118b1de921654925ed9ce1da7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13bd8bb0536f008118b1de921654925ed9ce1da7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13bd8bb0536f008118b1de921654925ed9ce1da7"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 43,
      "deletions": 43
    },
    "files": [
      {
        "sha": "c376aced1093863762e85a302d60733150585880",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -43,7 +43,7 @@ bool SerializeFileDB(const std::string& prefix, const fs::path& path, const Data\n     std::string tmpfn = strprintf(\"%s.%04x\", prefix, randv);\n \n     // open temp output file, and associate with CAutoFile\n-    fs::path pathTmp = GetDataDir() / tmpfn;\n+    fs::path pathTmp = gArgs.GetDataDirNet() / tmpfn;\n     FILE *file = fsbridge::fopen(pathTmp, \"wb\");\n     CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull()) {\n@@ -135,7 +135,7 @@ bool CBanDB::Read(banmap_t& banSet)\n \n CAddrDB::CAddrDB()\n {\n-    pathAddr = GetDataDir() / \"peers.dat\";\n+    pathAddr = gArgs.GetDataDirNet() / \"peers.dat\";\n }\n \n bool CAddrDB::Write(const CAddrMan& addr)"
      },
      {
        "sha": "b4857767322c436319dacfae6fd391e0e390eae2",
        "filename": "src/index/blockfilterindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/index/blockfilterindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/index/blockfilterindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -98,7 +98,7 @@ BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n     const std::string& filter_name = BlockFilterTypeName(filter_type);\n     if (filter_name.empty()) throw std::invalid_argument(\"unknown filter_type\");\n \n-    fs::path path = GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name;\n+    fs::path path = gArgs.GetDataDirNet() / \"indexes\" / \"blockfilter\" / filter_name;\n     fs::create_directories(path);\n \n     m_name = filter_name + \" block filter index\";"
      },
      {
        "sha": "e046527283a8d2df747c76cac7e3105e823191a7",
        "filename": "src/index/coinstatsindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/index/coinstatsindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/index/coinstatsindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/coinstatsindex.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -97,7 +97,7 @@ std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n \n CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n {\n-    fs::path path{GetDataDir() / \"indexes\" / \"coinstats\"};\n+    fs::path path{gArgs.GetDataDirNet() / \"indexes\" / \"coinstats\"};\n     fs::create_directories(path);\n \n     m_db = std::make_unique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);"
      },
      {
        "sha": "d9e437ad108f7f8ef4d2ba91655c22512b7982e2",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -37,7 +37,7 @@ class TxIndex::DB : public BaseIndex::DB\n };\n \n TxIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n-    BaseIndex::DB(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n {}\n \n bool TxIndex::DB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const"
      },
      {
        "sha": "593128747e972cc0814be5ba773e8db7d5516a54",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -1015,7 +1015,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n static bool LockDataDirectory(bool probeOnly)\n {\n     // Make sure only a single Bitcoin process is using the data directory.\n-    fs::path datadir = GetDataDir();\n+    fs::path datadir = gArgs.GetDataDirNet();\n     if (!DirIsWritable(datadir)) {\n         return InitError(strprintf(_(\"Cannot write to data directory '%s'; check permissions.\"), datadir.string()));\n     }\n@@ -1166,7 +1166,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     assert(!node.addrman);\n     node.addrman = std::make_unique<CAddrMan>();\n     assert(!node.banman);\n-    node.banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n+    node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist.dat\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!node.connman);\n     node.connman = std::make_unique<CConnman>(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max()), *node.addrman, args.GetBoolArg(\"-networkactive\", true));\n \n@@ -1276,7 +1276,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n             asmap_path = DEFAULT_ASMAP_FILENAME;\n         }\n         if (!asmap_path.is_absolute()) {\n-            asmap_path = GetDataDir() / asmap_path;\n+            asmap_path = gArgs.GetDataDirNet() / asmap_path;\n         }\n         if (!fs::exists(asmap_path)) {\n             InitError(strprintf(_(\"Could not find asmap file %s\"), asmap_path));\n@@ -1600,8 +1600,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n     // ********************************************************* Step 11: import blocks\n \n-    if (!CheckDiskSpace(GetDataDir())) {\n-        InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetDataDir()));\n+    if (!CheckDiskSpace(gArgs.GetDataDirNet())) {\n+        InitError(strprintf(_(\"Error: Disk space is low for %s\"), gArgs.GetDataDirNet()));\n         return false;\n     }\n     if (!CheckDiskSpace(gArgs.GetBlocksDirPath())) {"
      },
      {
        "sha": "5c1f469081e14245a3bc7924c3bd28231daacc22",
        "filename": "src/init/common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/init/common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/init/common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/common.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -134,7 +134,7 @@ bool StartLogging(const ArgsManager& args)\n     if (!LogInstance().m_log_timestamps)\n         LogPrintf(\"Startup time: %s\\n\", FormatISO8601DateTime(GetTime()));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n-    LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());\n+    LogPrintf(\"Using data directory %s\\n\", gArgs.GetDataDirNet().string());\n \n     // Only log conf file usage message if conf file actually exists.\n     fs::path config_file_path = GetConfigFile(args.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));"
      },
      {
        "sha": "31f3c027bbf6c6751d1f7e4140e2fb2c910865af",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -2461,7 +2461,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n \n     proxyType i2p_sam;\n     if (GetProxy(NET_I2P, i2p_sam)) {\n-        m_i2p_sam_session = std::make_unique<i2p::sam::Session>(GetDataDir() / \"i2p_private_key\",\n+        m_i2p_sam_session = std::make_unique<i2p::sam::Session>(gArgs.GetDataDirNet() / \"i2p_private_key\",\n                                                                 i2p_sam.proxy, &interruptNet);\n     }\n \n@@ -2487,7 +2487,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n \n     if (m_use_addrman_outgoing) {\n         // Load addresses from anchors.dat\n-        m_anchors = ReadAnchors(GetDataDir() / ANCHORS_DATABASE_FILENAME);\n+        m_anchors = ReadAnchors(gArgs.GetDataDirNet() / ANCHORS_DATABASE_FILENAME);\n         if (m_anchors.size() > MAX_BLOCK_RELAY_ONLY_ANCHORS) {\n             m_anchors.resize(MAX_BLOCK_RELAY_ONLY_ANCHORS);\n         }\n@@ -2627,7 +2627,7 @@ void CConnman::StopNodes()\n             if (anchors_to_dump.size() > MAX_BLOCK_RELAY_ONLY_ANCHORS) {\n                 anchors_to_dump.resize(MAX_BLOCK_RELAY_ONLY_ANCHORS);\n             }\n-            DumpAnchors(GetDataDir() / ANCHORS_DATABASE_FILENAME, anchors_to_dump);\n+            DumpAnchors(gArgs.GetDataDirNet() / ANCHORS_DATABASE_FILENAME, anchors_to_dump);\n         }\n     }\n \n@@ -3043,7 +3043,7 @@ void CaptureMessage(const CAddress& addr, const std::string& msg_type, const Spa\n     std::string clean_addr = addr.ToString();\n     std::replace(clean_addr.begin(), clean_addr.end(), ':', '_');\n \n-    fs::path base_path = GetDataDir() / \"message_capture\" / clean_addr;\n+    fs::path base_path = gArgs.GetDataDirNet() / \"message_capture\" / clean_addr;\n     fs::create_directories(base_path);\n \n     fs::path path = base_path / (is_incoming ? \"msgs_recv.dat\" : \"msgs_sent.dat\");"
      },
      {
        "sha": "52c33621669073fd7d1df1cb24d55cf782a62673",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -504,7 +504,7 @@ CBlockPolicyEstimator::CBlockPolicyEstimator()\n     longStats = std::unique_ptr<TxConfirmStats>(new TxConfirmStats(buckets, bucketMap, LONG_BLOCK_PERIODS, LONG_DECAY, LONG_SCALE));\n \n     // If the fee estimation file is present, read recorded estimations\n-    fs::path est_filepath = GetDataDir() / FEE_ESTIMATES_FILENAME;\n+    fs::path est_filepath = gArgs.GetDataDirNet() / FEE_ESTIMATES_FILENAME;\n     CAutoFile est_file(fsbridge::fopen(est_filepath, \"rb\"), SER_DISK, CLIENT_VERSION);\n     if (est_file.IsNull() || !Read(est_file)) {\n         LogPrintf(\"Failed to read fee estimates from %s. Continue anyway.\\n\", est_filepath.string());\n@@ -864,7 +864,7 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation\n void CBlockPolicyEstimator::Flush() {\n     FlushUnconfirmed();\n \n-    fs::path est_filepath = GetDataDir() / FEE_ESTIMATES_FILENAME;\n+    fs::path est_filepath = gArgs.GetDataDirNet() / FEE_ESTIMATES_FILENAME;\n     CAutoFile est_file(fsbridge::fopen(est_filepath, \"wb\"), SER_DISK, CLIENT_VERSION);\n     if (est_file.IsNull() || !Write(est_file)) {\n         LogPrintf(\"Failed to write fee estimates to %s. Continue anyway.\\n\", est_filepath.string());"
      },
      {
        "sha": "bb2073b9feab423c445d9bba560fc3b435aa83de",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -221,7 +221,7 @@ QString ClientModel::formatClientStartupTime() const\n \n QString ClientModel::dataDir() const\n {\n-    return GUIUtil::boostPathToQString(GetDataDir());\n+    return GUIUtil::boostPathToQString(gArgs.GetDataDirNet());\n }\n \n QString ClientModel::blocksDir() const"
      },
      {
        "sha": "0d73ea0ed00f8e2abdd7effaedb890ff2b546031",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -405,7 +405,7 @@ void handleCloseWindowShortcut(QWidget* w)\n \n void openDebugLogfile()\n {\n-    fs::path pathDebug = GetDataDir() / \"debug.log\";\n+    fs::path pathDebug = gArgs.GetDataDirNet() / \"debug.log\";\n \n     /* Open debug.log with the associated application */\n     if (fs::exists(pathDebug))"
      },
      {
        "sha": "91d57690b7f542d57f18208889d2f7083dcb596c",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -45,7 +45,7 @@ class Intro : public QDialog\n      * @returns true if a data directory was selected, false if the user cancelled the selection\n      * dialog.\n      *\n-     * @note do NOT call global GetDataDir() before calling this function, this\n+     * @note do NOT call global gArgs.GetDataDirNet() before calling this function, this\n      * will cause the wrong path to be cached.\n      */\n     static bool showIfNeeded(bool& did_show_intro, int64_t& prune_MiB);"
      },
      {
        "sha": "c1d5f84be56516ba836da2653c7a711ba513dd8a",
        "filename": "src/qt/test/apptests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/qt/test/apptests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/qt/test/apptests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -65,7 +65,7 @@ void AppTests::appTests()\n \n     fs::create_directories([] {\n         BasicTestingSetup test{CBaseChainParams::REGTEST}; // Create a temp data directory to backup the gui settings to\n-        return GetDataDir() / \"blocks\";\n+        return gArgs.GetDataDirNet() / \"blocks\";\n     }());\n \n     qRegisterMetaType<interfaces::BlockAndHeaderTipInfo>(\"interfaces::BlockAndHeaderTipInfo\");"
      },
      {
        "sha": "03f28239ba4aca9585395111489a85663806991b",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -2540,10 +2540,10 @@ static RPCHelpMan dumptxoutset()\n         },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    const fs::path path = fsbridge::AbsPathJoin(GetDataDir(), request.params[0].get_str());\n+    const fs::path path = fsbridge::AbsPathJoin(gArgs.GetDataDirNet(), request.params[0].get_str());\n     // Write to a temporary path and then move into `path` on completion\n     // to avoid confusion due to an interruption.\n-    const fs::path temppath = fsbridge::AbsPathJoin(GetDataDir(), request.params[0].get_str() + \".incomplete\");\n+    const fs::path temppath = fsbridge::AbsPathJoin(gArgs.GetDataDirNet(), request.params[0].get_str() + \".incomplete\");\n \n     if (fs::exists(path)) {\n         throw JSONRPCError("
      },
      {
        "sha": "4a04eed46310ac4a32d17529d18e94a00a99d4e5",
        "filename": "src/test/fuzz/banman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/test/fuzz/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/test/fuzz/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/banman.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -34,7 +34,7 @@ FUZZ_TARGET_INIT(banman, initialize_banman)\n {\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n-    const fs::path banlist_file = GetDataDir() / \"fuzzed_banlist.dat\";\n+    const fs::path banlist_file = gArgs.GetDataDirNet() / \"fuzzed_banlist.dat\";\n     fs::remove(banlist_file);\n     {\n         BanMan ban_man{banlist_file, nullptr, ConsumeBanTimeOffset(fuzzed_data_provider)};"
      },
      {
        "sha": "fb6d23aca5a341141327a81ee9125f703496cf28",
        "filename": "src/test/fuzz/i2p.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/test/fuzz/i2p.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/test/fuzz/i2p.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/i2p.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -30,7 +30,7 @@ FUZZ_TARGET_INIT(i2p, initialize_i2p)\n     const CService sam_proxy;\n     CThreadInterrupt interrupt;\n \n-    i2p::sam::Session sess{GetDataDir() / \"fuzzed_i2p_private_key\", sam_proxy, &interrupt};\n+    i2p::sam::Session sess{gArgs.GetDataDirNet() / \"fuzzed_i2p_private_key\", sam_proxy, &interrupt};\n \n     i2p::Connection conn;\n "
      },
      {
        "sha": "6f2bc081c624ac4d6a029adcbbfb1e82b3485a63",
        "filename": "src/test/fuzz/utxo_snapshot.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/test/fuzz/utxo_snapshot.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/test/fuzz/utxo_snapshot.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/utxo_snapshot.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -30,7 +30,7 @@ FUZZ_TARGET_INIT(utxo_snapshot, initialize_chain)\n     const auto& node = setup->m_node;\n     auto& chainman{*node.chainman};\n \n-    const auto snapshot_path = GetDataDir() / \"fuzzed_snapshot.dat\";\n+    const auto snapshot_path = gArgs.GetDataDirNet() / \"fuzzed_snapshot.dat\";\n \n     Assert(!chainman.SnapshotBlockhash());\n "
      },
      {
        "sha": "bd9ba4b8f74b10e3d18c94897fb7363f04852025",
        "filename": "src/test/i2p_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/test/i2p_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/test/i2p_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/i2p_tests.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -27,7 +27,7 @@ BOOST_AUTO_TEST_CASE(unlimited_recv)\n     };\n \n     CThreadInterrupt interrupt;\n-    i2p::sam::Session session(GetDataDir() / \"test_i2p_private_key\", CService{}, &interrupt);\n+    i2p::sam::Session session(gArgs.GetDataDirNet() / \"test_i2p_private_key\", CService{}, &interrupt);\n \n     {\n         ASSERT_DEBUG_LOG(\"Creating SAM session\");"
      },
      {
        "sha": "a0499fa51fe7e6412876c89993a937eb723d85ea",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -563,7 +563,7 @@ void TorController::Reconnect()\n \n fs::path TorController::GetPrivateKeyFile()\n {\n-    return GetDataDir() / \"onion_v3_private_key\";\n+    return gArgs.GetDataDirNet() / \"onion_v3_private_key\";\n }\n \n void TorController::reconnect_cb(evutil_socket_t fd, short what, void *arg)"
      },
      {
        "sha": "c11d46cf88a9c9d6eb5f3a709733c62812856b6b",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -146,7 +146,7 @@ size_t CCoinsViewDB::EstimateSize() const\n     return m_db->EstimateSize(DB_COIN, (char)(DB_COIN+1));\n }\n \n-CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(GetDataDir() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n+CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(gArgs.GetDataDirNet() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n }\n \n bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {"
      },
      {
        "sha": "f591e64fd41dc92819fc0d73eadd43a359c92a69",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -1150,7 +1150,7 @@ CoinsViews::CoinsViews(\n     size_t cache_size_bytes,\n     bool in_memory,\n     bool should_wipe) : m_dbview(\n-                            GetDataDir() / ldb_name, cache_size_bytes, in_memory, should_wipe),\n+                            gArgs.GetDataDirNet() / ldb_name, cache_size_bytes, in_memory, should_wipe),\n                         m_catcherview(&m_dbview) {}\n \n void CoinsViews::InitCache()\n@@ -2128,7 +2128,7 @@ bool CChainState::FlushStateToDisk(\n             // twice (once in the log, and once in the tables). This is already\n             // an overestimation, as most will delete an existing entry or\n             // overwrite one. Still, use a conservative safety factor of 2.\n-            if (!CheckDiskSpace(GetDataDir(), 48 * 2 * 2 * CoinsTip().GetCacheSize())) {\n+            if (!CheckDiskSpace(gArgs.GetDataDirNet(), 48 * 2 * 2 * CoinsTip().GetCacheSize())) {\n                 return AbortNode(state, \"Disk space is too low!\", _(\"Disk space is too low!\"));\n             }\n             // Flush the chainstate (which may refer to block index entries).\n@@ -4501,7 +4501,7 @@ bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate, FopenFn mocka\n {\n     const CChainParams& chainparams = Params();\n     int64_t nExpiryTimeout = gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n-    FILE* filestr{mockable_fopen_function(GetDataDir() / \"mempool.dat\", \"rb\")};\n+    FILE* filestr{mockable_fopen_function(gArgs.GetDataDirNet() / \"mempool.dat\", \"rb\")};\n     CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n     if (file.IsNull()) {\n         LogPrintf(\"Failed to open mempool file from disk. Continuing anyway.\\n\");\n@@ -4605,7 +4605,7 @@ bool DumpMempool(const CTxMemPool& pool, FopenFn mockable_fopen_function, bool s\n     int64_t mid = GetTimeMicros();\n \n     try {\n-        FILE* filestr{mockable_fopen_function(GetDataDir() / \"mempool.dat.new\", \"wb\")};\n+        FILE* filestr{mockable_fopen_function(gArgs.GetDataDirNet() / \"mempool.dat.new\", \"wb\")};\n         if (!filestr) {\n             return false;\n         }\n@@ -4631,7 +4631,7 @@ bool DumpMempool(const CTxMemPool& pool, FopenFn mockable_fopen_function, bool s\n         if (!skip_file_commit && !FileCommit(file.Get()))\n             throw std::runtime_error(\"FileCommit failed\");\n         file.fclose();\n-        if (!RenameOver(GetDataDir() / \"mempool.dat.new\", GetDataDir() / \"mempool.dat\")) {\n+        if (!RenameOver(gArgs.GetDataDirNet() / \"mempool.dat.new\", gArgs.GetDataDirNet() / \"mempool.dat\")) {\n             throw std::runtime_error(\"Rename failed\");\n         }\n         int64_t last = GetTimeMicros();"
      },
      {
        "sha": "17f5264b459c854346ed08360c87dbd9454a6e8b",
        "filename": "src/wallet/test/db_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/wallet/test/db_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/wallet/test/db_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/db_tests.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -23,7 +23,7 @@ static std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& path, s\n BOOST_AUTO_TEST_CASE(getwalletenv_file)\n {\n     std::string test_name = \"test_name.dat\";\n-    const fs::path datadir = GetDataDir();\n+    const fs::path datadir = gArgs.GetDataDirNet();\n     fs::path file_path = datadir / test_name;\n     std::ofstream f(file_path.BOOST_FILESYSTEM_C_STR);\n     f.close();\n@@ -37,7 +37,7 @@ BOOST_AUTO_TEST_CASE(getwalletenv_file)\n BOOST_AUTO_TEST_CASE(getwalletenv_directory)\n {\n     std::string expected_name = \"wallet.dat\";\n-    const fs::path datadir = GetDataDir();\n+    const fs::path datadir = gArgs.GetDataDirNet();\n \n     std::string filename;\n     std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(datadir, filename);\n@@ -47,8 +47,8 @@ BOOST_AUTO_TEST_CASE(getwalletenv_directory)\n \n BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_multiple)\n {\n-    fs::path datadir = GetDataDir() / \"1\";\n-    fs::path datadir_2 = GetDataDir() / \"2\";\n+    fs::path datadir = gArgs.GetDataDirNet() / \"1\";\n+    fs::path datadir_2 = gArgs.GetDataDirNet() / \"2\";\n     std::string filename;\n \n     std::shared_ptr<BerkeleyEnvironment> env_1 = GetWalletEnv(datadir, filename);\n@@ -61,8 +61,8 @@ BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_multiple)\n \n BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n {\n-    fs::path datadir = GetDataDir() / \"1\";\n-    fs::path datadir_2 = GetDataDir() / \"2\";\n+    fs::path datadir = gArgs.GetDataDirNet() / \"1\";\n+    fs::path datadir_2 = gArgs.GetDataDirNet() / \"2\";\n     std::string filename;\n \n     std::shared_ptr <BerkeleyEnvironment> env_1_a = GetWalletEnv(datadir, filename);"
      },
      {
        "sha": "dd9354848d7c6fa728082b7a5ae00f22608ebb9c",
        "filename": "src/wallet/test/init_test_fixture.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/wallet/test/init_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/wallet/test/init_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_test_fixture.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -16,7 +16,7 @@ InitWalletDirTestingSetup::InitWalletDirTestingSetup(const std::string& chainNam\n     std::string sep;\n     sep += fs::path::preferred_separator;\n \n-    m_datadir = GetDataDir();\n+    m_datadir = gArgs.GetDataDirNet();\n     m_cwd = fs::current_path();\n \n     m_walletdir_path_cases[\"default\"] = m_datadir / \"wallets\";"
      },
      {
        "sha": "34bb29f79f2fe53c6b5611fbef5652638327dcaa",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -253,7 +253,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     SetMockTime(KEY_TIME);\n     m_coinbase_txns.emplace_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n \n-    std::string backup_file = (GetDataDir() / \"wallet.backup\").string();\n+    std::string backup_file = (gArgs.GetDataDirNet() / \"wallet.backup\").string();\n \n     // Import key into wallet and call dumpwallet to create backup file.\n     {"
      },
      {
        "sha": "1c518daba6a1d737b2ae36cf4cebdb2021058680",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c3a5dcbfc3010965332ad568c3a70618c930ef3/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "patch": "@@ -19,7 +19,7 @@ fs::path GetWalletDir()\n             path = \"\";\n         }\n     } else {\n-        path = GetDataDir();\n+        path = gArgs.GetDataDirNet();\n         // If a wallets directory exists, use that, otherwise default to GetDataDir\n         if (fs::is_directory(path / \"wallets\")) {\n             path /= \"wallets\";"
      }
    ]
  },
  {
    "sha": "b3e67f20a02bcf43f20873029ce30617c95eb9da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2U2N2YyMGEwMmJjZjQzZjIwODczMDI5Y2UzMDYxN2M5NWViOWRh",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-05-04T11:31:18Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-05-24T08:29:58Z"
      },
      "message": "scripted-diff: Replace `GetDataDir(true)` calls with `gArgs.GetDataDirNet()` calls\n\n-BEGIN VERIFY SCRIPT-\ngit ls-files -- 'src' ':(exclude)src/util/system.h' ':(exclude)src/util/system.cpp' | xargs sed -i 's/GetDataDir(true)/gArgs.GetDataDirNet()/g';\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "947dcdbba47b2f5cd4f203fb1ab269b05c0d10ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/947dcdbba47b2f5cd4f203fb1ab269b05c0d10ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3e67f20a02bcf43f20873029ce30617c95eb9da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3e67f20a02bcf43f20873029ce30617c95eb9da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3e67f20a02bcf43f20873029ce30617c95eb9da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3e67f20a02bcf43f20873029ce30617c95eb9da/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c3a5dcbfc3010965332ad568c3a70618c930ef3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c3a5dcbfc3010965332ad568c3a70618c930ef3"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "dffdd5158bfa213b5d52718011c4f9fb3c161859",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3e67f20a02bcf43f20873029ce30617c95eb9da/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3e67f20a02bcf43f20873029ce30617c95eb9da/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=b3e67f20a02bcf43f20873029ce30617c95eb9da",
        "patch": "@@ -536,7 +536,7 @@ int GuiMain(int argc, char* argv[])\n     if (!Intro::showIfNeeded(did_show_intro, prune_MiB)) return EXIT_SUCCESS;\n \n     /// 6. Determine availability of data directory and parse bitcoin.conf\n-    /// - Do not call GetDataDir(true) before this step finishes\n+    /// - Do not call gArgs.GetDataDirNet() before this step finishes\n     if (!CheckDataDirOption()) {\n         InitError(strprintf(Untranslated(\"Specified data directory \\\"%s\\\" does not exist.\\n\"), gArgs.GetArg(\"-datadir\", \"\")));\n         QMessageBox::critical(nullptr, PACKAGE_NAME,"
      },
      {
        "sha": "70762ab6bcdcb53f1094f568a4674c1567c09733",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3e67f20a02bcf43f20873029ce30617c95eb9da/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3e67f20a02bcf43f20873029ce30617c95eb9da/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=b3e67f20a02bcf43f20873029ce30617c95eb9da",
        "patch": "@@ -195,7 +195,7 @@ void OptionsModel::Reset()\n     QSettings settings;\n \n     // Backup old settings to chain-specific datadir for troubleshooting\n-    BackupSettings(GetDataDir(true) / \"guisettings.ini.bak\", settings);\n+    BackupSettings(gArgs.GetDataDirNet() / \"guisettings.ini.bak\", settings);\n \n     // Save the strDataDir setting\n     QString dataDir = GUIUtil::getDefaultDataDirectory();"
      },
      {
        "sha": "098fe5ac61c21ae484f1cb18642e2d703fcaffb6",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3e67f20a02bcf43f20873029ce30617c95eb9da/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3e67f20a02bcf43f20873029ce30617c95eb9da/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=b3e67f20a02bcf43f20873029ce30617c95eb9da",
        "patch": "@@ -49,9 +49,9 @@ static QString ipcServerName()\n     QString name(\"BitcoinQt\");\n \n     // Append a simple hash of the datadir\n-    // Note that GetDataDir(true) returns a different path\n+    // Note that gArgs.GetDataDirNet() returns a different path\n     // for -testnet versus main net\n-    QString ddir(GUIUtil::boostPathToQString(GetDataDir(true)));\n+    QString ddir(GUIUtil::boostPathToQString(gArgs.GetDataDirNet()));\n     name.append(QString::number(qHash(ddir)));\n \n     return name;"
      }
    ]
  },
  {
    "sha": "aca0e5dcdb174ef7e88b76910d6fffd633688235",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2EwZTVkY2RiMTc0ZWY3ZTg4Yjc2OTEwZDZmZmZkNjMzNjg4MjM1",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-05-04T10:58:44Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-05-24T08:29:58Z"
      },
      "message": "Remove `GetDataDir(bool fNetSpecific = true)` function",
      "tree": {
        "sha": "7da679d385e41d96798ab2e778637218587fbb12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7da679d385e41d96798ab2e778637218587fbb12"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aca0e5dcdb174ef7e88b76910d6fffd633688235",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aca0e5dcdb174ef7e88b76910d6fffd633688235",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aca0e5dcdb174ef7e88b76910d6fffd633688235",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aca0e5dcdb174ef7e88b76910d6fffd633688235/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3e67f20a02bcf43f20873029ce30617c95eb9da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3e67f20a02bcf43f20873029ce30617c95eb9da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3e67f20a02bcf43f20873029ce30617c95eb9da"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 0,
      "deletions": 6
    },
    "files": [
      {
        "sha": "3f14a19a4ab6109df59d15ab9ad7baf7246c0acb",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aca0e5dcdb174ef7e88b76910d6fffd633688235/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aca0e5dcdb174ef7e88b76910d6fffd633688235/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=aca0e5dcdb174ef7e88b76910d6fffd633688235",
        "patch": "@@ -802,11 +802,6 @@ fs::path GetDefaultDataDir()\n #endif\n }\n \n-const fs::path &GetDataDir(bool fNetSpecific)\n-{\n-    return fNetSpecific ? gArgs.GetDataDirNet() : gArgs.GetDataDirBase();\n-}\n-\n bool CheckDataDirOption()\n {\n     std::string datadir = gArgs.GetArg(\"-datadir\", \"\");"
      },
      {
        "sha": "c4317c62d0241fb8b571ded4afa58c536e6a6624",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aca0e5dcdb174ef7e88b76910d6fffd633688235/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aca0e5dcdb174ef7e88b76910d6fffd633688235/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=aca0e5dcdb174ef7e88b76910d6fffd633688235",
        "patch": "@@ -90,7 +90,6 @@ void ReleaseDirectoryLocks();\n \n bool TryCreateDirectories(const fs::path& p);\n fs::path GetDefaultDataDir();\n-const fs::path &GetDataDir(bool fNetSpecific = true);\n // Return true if -datadir option points to a valid directory or is not specified.\n bool CheckDataDirOption();\n fs::path GetConfigFile(const std::string& confPath);"
      }
    ]
  }
]