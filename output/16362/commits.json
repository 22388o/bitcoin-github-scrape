[
  {
    "sha": "0b86e517ad733c8740c519332aa4c0e9035dbaab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjg2ZTUxN2FkNzMzYzg3NDBjNTE5MzMyYWE0YzBlOTAzNWRiYWFi",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-06-17T07:56:52Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-24T13:32:53Z"
      },
      "message": "Refactor out translation.h\n\nThis is a prerequisite for introducing bilingual error messages.\nNote: #includes are arranged by clang-format-diff.py script.",
      "tree": {
        "sha": "b2e0e4ed7b07400231d9323419b0e8eeb3576490",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2e0e4ed7b07400231d9323419b0e8eeb3576490"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b86e517ad733c8740c519332aa4c0e9035dbaab",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl04XgkACgkQQQEIES5+\nqB+9TQ/+Pc4Y0AwFMflSGwyHxc108zGYbRadzinIHpl47Tpsgu4kGsfcC2IK53tb\nlL+RqNcgmDq/fv44RL1SQx3nnSnwDZ/7YZpzGfaMkoJgIWTWS8eXpqdtLJUllNOl\nJuBFUIbTXSvLnXTgSpobgyydUqMBAx0HYyxllJwGwIE6G+113WP36LJ8YzIVxY3S\ntrSEbVKBy1B8PovTozPuFQF6eT7IMblr+9lUMZcS/YLqK8AHoCtMnazVRNlqyWQx\nYL9/IzjMm2RxQrscOzO/4pVxkj35v9rtm87TvIfdGNTyxURgghciMSBteEtX0kmZ\nyS7mMUnTCqym+kPdP4OCdZ10s2DdWtI7W13qtcMSY9EuKUDhwU4vNJimQ7yYIU52\nTTcgrn0G5Q3TtXx0aQWeZnELtMUqBHQhN85wXp7wOuH5sNYQ5LHu2vfubqd3ru3M\n5/OhY8Pv4H7qDaosAhiofuN9blcpn2VlhqLgLi+sLpPAGmEKkeGTM8C7fPRd0vV5\nZYyXcRyNgtC3h0cWqVS9pZuMIGxK6GrQFjrb91r/jpVnvqOfSf+81GTvuf9/CUsi\nNUYQBFlXQ9r0BPDl2kGbgw9TGVQ5CcBT0qkLrJtmuCfxE0NteqwDSarei8tUtXMW\nfRmDc+aP5OOAEWwxkLIg+gG4m2ReMvgAMQasr9SsdVD2orzB9RU=\n=IRr4\n-----END PGP SIGNATURE-----",
        "payload": "tree b2e0e4ed7b07400231d9323419b0e8eeb3576490\nparent 0626b8cbdf0aa971500eb5613c7ab4096c496966\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1560758212 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1563975173 +0300\n\nRefactor out translation.h\n\nThis is a prerequisite for introducing bilingual error messages.\nNote: #includes are arranged by clang-format-diff.py script.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b86e517ad733c8740c519332aa4c0e9035dbaab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b86e517ad733c8740c519332aa4c0e9035dbaab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b86e517ad733c8740c519332aa4c0e9035dbaab/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0626b8cbdf0aa971500eb5613c7ab4096c496966",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0626b8cbdf0aa971500eb5613c7ab4096c496966",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0626b8cbdf0aa971500eb5613c7ab4096c496966"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 81,
      "deletions": 39
    },
    "files": [
      {
        "sha": "0f0543922768fb29e827da81c1029b940c5dbbab",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -212,6 +212,7 @@ BITCOIN_CORE_H = \\\n   util/rbf.h \\\n   util/threadnames.h \\\n   util/time.h \\\n+  util/translation.h \\\n   util/url.h \\\n   util/validation.h \\\n   validation.h \\"
      },
      {
        "sha": "c1f7c6f00c3987b0a10d2ee024aa2e4c6bad6028",
        "filename": "src/banman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -9,6 +9,7 @@\n #include <ui_interface.h>\n #include <util/system.h>\n #include <util/time.h>\n+#include <util/translation.h>\n \n \n BanMan::BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time)"
      },
      {
        "sha": "8ca985458d503aec95e07003698e1088d993287f",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -13,9 +13,11 @@\n #include <rpc/client.h>\n #include <rpc/protocol.h>\n #include <rpc/request.h>\n-#include <util/system.h>\n #include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n \n+#include <functional>\n #include <memory>\n #include <stdio.h>\n #include <tuple>"
      },
      {
        "sha": "89e2ab305b00ae9851a429b61f4ec758558a1e32",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -18,11 +18,13 @@\n #include <script/sign.h>\n #include <script/signingprovider.h>\n #include <univalue.h>\n-#include <util/rbf.h>\n-#include <util/system.h>\n #include <util/moneystr.h>\n+#include <util/rbf.h>\n #include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n \n+#include <functional>\n #include <memory>\n #include <stdio.h>\n "
      },
      {
        "sha": "a690e2facb1f560e6199a8214d636702486d53fe",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -9,10 +9,12 @@\n #include <chainparams.h>\n #include <chainparamsbase.h>\n #include <logging.h>\n-#include <util/system.h>\n #include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n #include <wallet/wallettool.h>\n \n+#include <functional>\n #include <stdio.h>\n \n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;"
      },
      {
        "sha": "ba021a51630ee4a2678840fc15ea6e38889088f6",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -19,6 +19,9 @@\n #include <util/strencodings.h>\n #include <util/system.h>\n #include <util/threadnames.h>\n+#include <util/translation.h>\n+\n+#include <functional>\n \n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n "
      },
      {
        "sha": "be39a5ed2e04dd558337c2b8e868cad81ab7e785",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -5,19 +5,20 @@\n #include <httprpc.h>\n \n #include <chainparams.h>\n+#include <crypto/hmac_sha256.h>\n #include <httpserver.h>\n #include <key_io.h>\n #include <rpc/protocol.h>\n #include <rpc/server.h>\n #include <sync.h>\n-#include <util/system.h>\n-#include <util/strencodings.h>\n #include <ui_interface.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n #include <walletinitinterface.h>\n-#include <crypto/hmac_sha256.h>\n-#include <stdio.h>\n \n #include <memory>\n+#include <stdio.h>\n \n #include <boost/algorithm/string.hpp> // boost::trim\n "
      },
      {
        "sha": "fd5259009777af8f0b65cce0420325eebd14f361",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -6,6 +6,7 @@\n #include <shutdown.h>\n #include <ui_interface.h>\n #include <util/system.h>\n+#include <util/translation.h>\n #include <validation.h>\n \n #include <boost/thread.hpp>"
      },
      {
        "sha": "d5b50b5fc0fb94792f2f07fba3dfd58a09d231e6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 11,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -19,40 +19,42 @@\n #include <compat/sanity.h>\n #include <consensus/validation.h>\n #include <fs.h>\n-#include <httpserver.h>\n #include <httprpc.h>\n+#include <httpserver.h>\n #include <index/blockfilterindex.h>\n-#include <interfaces/chain.h>\n #include <index/txindex.h>\n+#include <interfaces/chain.h>\n #include <key.h>\n-#include <validation.h>\n #include <miner.h>\n-#include <netbase.h>\n #include <net.h>\n #include <net_processing.h>\n+#include <netbase.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <policy/settings.h>\n-#include <rpc/server.h>\n-#include <rpc/register.h>\n #include <rpc/blockchain.h>\n+#include <rpc/register.h>\n+#include <rpc/server.h>\n #include <rpc/util.h>\n-#include <script/standard.h>\n-#include <script/sigcache.h>\n #include <scheduler.h>\n+#include <script/sigcache.h>\n+#include <script/standard.h>\n #include <shutdown.h>\n-#include <util/threadnames.h>\n #include <timedata.h>\n+#include <torcontrol.h>\n #include <txdb.h>\n #include <txmempool.h>\n-#include <torcontrol.h>\n #include <ui_interface.h>\n-#include <util/system.h>\n #include <util/moneystr.h>\n+#include <util/system.h>\n+#include <util/threadnames.h>\n+#include <util/translation.h>\n #include <util/validation.h>\n+#include <validation.h>\n #include <validationinterface.h>\n #include <walletinitinterface.h>\n+\n #include <stdint.h>\n #include <stdio.h>\n "
      },
      {
        "sha": "7a0bcafbf860fec807d102889fa3f8e902fd8a6c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -15,11 +15,12 @@\n #include <consensus/consensus.h>\n #include <crypto/common.h>\n #include <crypto/sha256.h>\n-#include <primitives/transaction.h>\n #include <netbase.h>\n+#include <primitives/transaction.h>\n #include <scheduler.h>\n #include <ui_interface.h>\n #include <util/strencodings.h>\n+#include <util/translation.h>\n \n #ifdef WIN32\n #include <string.h>"
      },
      {
        "sha": "999c434d2395b808add529ee13dae639faddd4d6",
        "filename": "src/qt/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/qt/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/qt/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/main.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -4,6 +4,8 @@\n \n #include <qt/bitcoin.h>\n \n+#include <util/translation.h>\n+\n #include <QCoreApplication>\n \n #include <functional>"
      },
      {
        "sha": "b3ea3382dd6c6196feac22999fc074d4e7f5ae8b",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -16,6 +16,7 @@\n #include <interfaces/wallet.h>\n #include <ui_interface.h>\n #include <util/system.h>\n+#include <util/translation.h>\n #include <version.h>\n \n #include <QApplication>"
      },
      {
        "sha": "de877fd1679b478be6c0288520686cb69e5458b7",
        "filename": "src/test/setup_common.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/test/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/test/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/setup_common.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -23,10 +23,13 @@\n #include <util/memory.h>\n #include <util/strencodings.h>\n #include <util/time.h>\n+#include <util/translation.h>\n #include <util/validation.h>\n #include <validation.h>\n #include <validationinterface.h>\n \n+#include <functional>\n+\n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n \n FastRandomContext g_insecure_rand_ctx;"
      },
      {
        "sha": "4974ad0a0a391925dc9e46678f52d7dfbfaa45f9",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -12,6 +12,7 @@\n #include <sync.h>\n #include <ui_interface.h>\n #include <util/system.h>\n+#include <util/translation.h>\n #include <warnings.h>\n \n "
      },
      {
        "sha": "54b632f1ecb5fdd96b8bfc045b9c125e7b7a9fd9",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -5,12 +5,13 @@\n \n #include <txdb.h>\n \n-#include <random.h>\n #include <pow.h>\n+#include <random.h>\n #include <shutdown.h>\n+#include <ui_interface.h>\n #include <uint256.h>\n #include <util/system.h>\n-#include <ui_interface.h>\n+#include <util/translation.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "1b662d3700caf8eb5d5ed8e982447561667624e0",
        "filename": "src/util/error.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/util/error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/util/error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/error.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -4,7 +4,9 @@\n \n #include <util/error.h>\n \n+#include <tinyformat.h>\n #include <util/system.h>\n+#include <util/translation.h>\n \n std::string TransactionErrorString(const TransactionError err)\n {"
      },
      {
        "sha": "2a069c554f655632e501882b72379efc84a1f815",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <chainparamsbase.h>\n #include <util/strencodings.h>\n+#include <util/translation.h>\n \n #include <stdarg.h>\n "
      },
      {
        "sha": "66a9eb4612ea2770f40276baac671aa5e0324961",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -40,18 +40,6 @@ int64_t GetStartupTime();\n \n extern const char * const BITCOIN_CONF_FILENAME;\n \n-/** Translate a message to the native language of the user. */\n-const extern std::function<std::string(const char*)> G_TRANSLATION_FUN;\n-\n-/**\n- * Translation function.\n- * If no translation function is set, simply return the input.\n- */\n-inline std::string _(const char* psz)\n-{\n-    return G_TRANSLATION_FUN ? (G_TRANSLATION_FUN)(psz) : psz;\n-}\n-\n void SetupEnvironment();\n bool SetupNetworking();\n "
      },
      {
        "sha": "d709b26890e246d98b69e717fe5b8dff665493d8",
        "filename": "src/util/translation.h",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/util/translation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/util/translation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/translation.h?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -0,0 +1,20 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_TRANSLATION_H\n+#define BITCOIN_UTIL_TRANSLATION_H\n+\n+/** Translate a message to the native language of the user. */\n+const extern std::function<std::string(const char*)> G_TRANSLATION_FUN;\n+\n+/**\n+ * Translation function.\n+ * If no translation function is set, simply return the input.\n+ */\n+inline std::string _(const char* psz)\n+{\n+    return G_TRANSLATION_FUN ? (G_TRANSLATION_FUN)(psz) : psz;\n+}\n+\n+#endif // BITCOIN_UTIL_TRANSLATION_H"
      },
      {
        "sha": "259127ec3f4a09ddecaf2af15b4bdec933ee0e86",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -41,6 +41,7 @@\n #include <util/rbf.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n+#include <util/translation.h>\n #include <util/validation.h>\n #include <validationinterface.h>\n #include <warnings.h>"
      },
      {
        "sha": "e07ea9887c0da9f7609234e4622ba3b922b19f79",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -6,6 +6,7 @@\n #include <wallet/db.h>\n \n #include <util/strencodings.h>\n+#include <util/translation.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "a86da98d71c2028d98e28b87565ccb8a11bd39f9",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -7,11 +7,12 @@\n #include <interfaces/chain.h>\n #include <net.h>\n #include <outputtype.h>\n-#include <util/system.h>\n #include <util/moneystr.h>\n-#include <walletinitinterface.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n #include <wallet/wallet.h>\n #include <wallet/walletutil.h>\n+#include <walletinitinterface.h>\n \n class WalletInit : public WalletInitInterface {\n public:"
      },
      {
        "sha": "1e9b1662854141222e475468792f7ee43a5c57a9",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -8,6 +8,7 @@\n #include <interfaces/chain.h>\n #include <scheduler.h>\n #include <util/system.h>\n+#include <util/translation.h>\n #include <wallet/wallet.h>\n \n bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files)"
      },
      {
        "sha": "b820efc4d94090acc69ae2e22c261ade7d0ca21b",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -16,9 +16,9 @@\n #include <util/bip32.h>\n #include <util/system.h>\n #include <util/time.h>\n-#include <wallet/wallet.h>\n-\n+#include <util/translation.h>\n #include <wallet/rpcwallet.h>\n+#include <wallet/wallet.h>\n \n #include <stdint.h>\n #include <tuple>"
      },
      {
        "sha": "4681dc2d440cf40374ccc5d202876e2738e570bb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -25,6 +25,7 @@\n #include <util/fees.h>\n #include <util/moneystr.h>\n #include <util/rbf.h>\n+#include <util/translation.h>\n #include <util/validation.h>\n #include <validation.h>\n #include <wallet/coincontrol.h>"
      },
      {
        "sha": "2a8188258375bb99f2ca87c28d655fa6e0b7b890",
        "filename": "src/warnings.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/warnings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b86e517ad733c8740c519332aa4c0e9035dbaab/src/warnings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/warnings.cpp?ref=0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "patch": "@@ -3,9 +3,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <warnings.h>\n+\n #include <sync.h>\n #include <util/system.h>\n-#include <warnings.h>\n+#include <util/translation.h>\n \n static RecursiveMutex cs_warnings;\n static std::string strMiscWarning GUARDED_BY(cs_warnings);"
      }
    ]
  },
  {
    "sha": "7c45e14f2f682eddcc853c0f6051c7c8c6387289",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzQ1ZTE0ZjJmNjgyZWRkY2M4NTNjMGY2MDUxYzdjOGM2Mzg3Mjg5",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-06-28T08:49:40Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-24T13:33:20Z"
      },
      "message": "Add bilingual message type",
      "tree": {
        "sha": "c58d7f247fe7727eb124e35a04d0f83779311833",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c58d7f247fe7727eb124e35a04d0f83779311833"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c45e14f2f682eddcc853c0f6051c7c8c6387289",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl04XiAACgkQQQEIES5+\nqB9Zgw/+OytnEr9rvICb4Q3jkerGr7nJZOoYY2qqQhkQOjTQL99gXf0zw/88aJrP\nYcJMxwwFzaPXvH1XPI4z7SQgNbjpzNUQJaqhH5LouSfp16IKLaFITNiK1zN5yrwr\nMRBJ2DQ/iPSTlTXSx3P23KOXpcHeVjSAavzl+BLIPWcpnURtZ997qGHT2dN0T/Bb\nPYYFVGN17Na3BvUjDURsybDlm2bvNrDkeeyu1bbCND3uav+QBcEhtHTGA8AynP+H\niJmCMuoD/KensOox6Ctl0oIAxmL6Nd5W1I/WOqvoFmUCiizhyMWc2Rgp2dmrqeZc\nAm2l3zNZlB+3wyB8JxSJUztodyBJm+6OTvf0dqh6yNGX49MgFj08Y4IbhuAGGRan\nFuBjgUbwXwDAm+Yom0Dbk6CeAolUHNh901nhT3I8esGFEYJBvQhvd47IJmMjlI+I\naXRoSw0zfx4Mqypm4n5+vGs2u3zh0dh4MtdyWUZdIHcM4OZcv7ykFuLONsVSoXNL\nu5ZNmBgg2OGI2CBM8aLTEVnT0cTi9n49nCu/T7MnB+L0/3cnz3aeDFOcX2DModlx\nzBW2XTh91QigOLh9yE/j8X3xz00sJmO4bU8ryBTgT0mQsUM0qHSNT9cSm8JeWUQ9\nZsSiK6mglzTHP2N35ca9ejJMetFb564O63frq0JMJpmSRCsSZLk=\n=HjQY\n-----END PGP SIGNATURE-----",
        "payload": "tree c58d7f247fe7727eb124e35a04d0f83779311833\nparent 0b86e517ad733c8740c519332aa4c0e9035dbaab\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1561711780 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1563975200 +0300\n\nAdd bilingual message type\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c45e14f2f682eddcc853c0f6051c7c8c6387289",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c45e14f2f682eddcc853c0f6051c7c8c6387289",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c45e14f2f682eddcc853c0f6051c7c8c6387289/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b86e517ad733c8740c519332aa4c0e9035dbaab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b86e517ad733c8740c519332aa4c0e9035dbaab"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c70508c01e89b8150210ab49b785e2291c39d1da",
        "filename": "src/util/translation.h",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c45e14f2f682eddcc853c0f6051c7c8c6387289/src/util/translation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c45e14f2f682eddcc853c0f6051c7c8c6387289/src/util/translation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/translation.h?ref=7c45e14f2f682eddcc853c0f6051c7c8c6387289",
        "patch": "@@ -5,6 +5,28 @@\n #ifndef BITCOIN_UTIL_TRANSLATION_H\n #define BITCOIN_UTIL_TRANSLATION_H\n \n+#include <tinyformat.h>\n+\n+#include <utility>\n+\n+/**\n+ * Bilingual messages:\n+ *   - in GUI: user's native language + untranslated (i.e. English)\n+ *   - in log and stderr: untranslated only\n+ */\n+struct bilingual_str {\n+    std::string original;\n+    std::string translated;\n+};\n+\n+namespace tinyformat {\n+template <typename... Args>\n+bilingual_str format(const bilingual_str& fmt, const Args&... args)\n+{\n+    return bilingual_str{format(fmt.original, args...), format(fmt.translated, args...)};\n+}\n+} // namespace tinyformat\n+\n /** Translate a message to the native language of the user. */\n const extern std::function<std::string(const char*)> G_TRANSLATION_FUN;\n "
      }
    ]
  },
  {
    "sha": "753f7cccce83084f4b18cf4bdf3225183179508c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTNmN2NjY2NlODMwODRmNGIxOGNmNGJkZjMyMjUxODMxNzk1MDhj",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-06-28T18:09:58Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-07-24T13:33:20Z"
      },
      "message": "scripted-diff: Make translation bilingual\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/inline std::string _(const char\\* psz)/inline bilingual_str _(const char\\* psz)/' src/util/translation.h\nsed -i 's/return G_TRANSLATION_FUN ? (G_TRANSLATION_FUN)(psz) : psz;/return bilingual_str{psz, G_TRANSLATION_FUN ? (G_TRANSLATION_FUN)(psz) : psz};/' src/util/translation.h\nsed -i 's/\\b_(\"\\([^\"]\\|\\\\\"\\)*\")/&.translated/g' $(git grep --files-with-matches '\\b_(\"' src)\necho Hard cases - multiline strings.\nsed -i 's/\"Visit %s for further information about the software.\")/&.translated/g' src/init.cpp\nsed -i \"s/\\\"Only rebuild the block database if you are sure that your computer's date and time are correct\\\")/&.translated/g\" src/init.cpp\nsed -i 's/\" restore from a backup.\")/&.translated/g' src/wallet/db.cpp\nsed -i 's/\" or address book entries might be missing or incorrect.\")/&.translated/g' src/wallet/wallet.cpp\necho Special case.\nsed -i 's/_(COPYRIGHT_HOLDERS)/&.translated/' src/util/system.cpp test/lint/lint-format-strings.py\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "9efb597566399ccb2bd3d44ad6add039e66a353a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9efb597566399ccb2bd3d44ad6add039e66a353a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/753f7cccce83084f4b18cf4bdf3225183179508c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl04XiAACgkQQQEIES5+\nqB9cLRAAop+N1pdQsYDulLLDYwJFQkPCVw7xYiU7s9EjqSY8oy242AUxl1voYFnF\nxA6Sdv174cGfsal/oAJXHE9K1otROwkQs+0zu5R3F4hzm/yGpPCkFg7qayAK5T2W\nQd8DaZAf+21pPhWypTsum5Gb/0MMQJ3/8VawAYPTLQEf8jFwnJVHXhWtlGObodz9\nd5iGMSwt2tj5lsC7GgNv+49zfSreSt5xDseKoMbCPctdLL3q6OVQjC0L5jq+GkTd\nm/7NfN9FHOt+ThQVAdUcFb6ICo5kH20aTavCFH4HJQL1D1FCvfP2IoxwJ/XDTjsX\n9Wn/VGyfqqk2LEFxAeC4xUR5ITNz0OGykqyzDW37HJgP8eA1BwZZwv7yfX0+dj6E\n0n2x8XXUK/fbJJ7q87UnQ+0xyBlF31G7IZChvvF4yPAbKRcda7Ya9jRzO2iP1WKo\nLeVX1/xjcrzhUrNPd9o41uOSuRMYnybgyT+0bTSAVASJsCfoZ2VGdqkh4orxkR4F\nn0GuDW2vvla9MQlYhLklLxv2aTX1uGHP6U/aecySZeuhiSe71iDJyuCzICliG3mv\ngPYecazmnEV07ydeKVQpUWVTZqdShpHyCE1HhLVBRy45fFiOZGRRhmgX0gfQxVe8\ncakf2151sLoc+8zzh9iS+xIf1V5J58iPgGqM0CCFMICpfOK3+ow=\n=l9XX\n-----END PGP SIGNATURE-----",
        "payload": "tree 9efb597566399ccb2bd3d44ad6add039e66a353a\nparent 7c45e14f2f682eddcc853c0f6051c7c8c6387289\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1561745398 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1563975200 +0300\n\nscripted-diff: Make translation bilingual\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/inline std::string _(const char\\* psz)/inline bilingual_str _(const char\\* psz)/' src/util/translation.h\nsed -i 's/return G_TRANSLATION_FUN ? (G_TRANSLATION_FUN)(psz) : psz;/return bilingual_str{psz, G_TRANSLATION_FUN ? (G_TRANSLATION_FUN)(psz) : psz};/' src/util/translation.h\nsed -i 's/\\b_(\"\\([^\"]\\|\\\\\"\\)*\")/&.translated/g' $(git grep --files-with-matches '\\b_(\"' src)\necho Hard cases - multiline strings.\nsed -i 's/\"Visit %s for further information about the software.\")/&.translated/g' src/init.cpp\nsed -i \"s/\\\"Only rebuild the block database if you are sure that your computer's date and time are correct\\\")/&.translated/g\" src/init.cpp\nsed -i 's/\" restore from a backup.\")/&.translated/g' src/wallet/db.cpp\nsed -i 's/\" or address book entries might be missing or incorrect.\")/&.translated/g' src/wallet/wallet.cpp\necho Special case.\nsed -i 's/_(COPYRIGHT_HOLDERS)/&.translated/' src/util/system.cpp test/lint/lint-format-strings.py\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/753f7cccce83084f4b18cf4bdf3225183179508c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/753f7cccce83084f4b18cf4bdf3225183179508c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/753f7cccce83084f4b18cf4bdf3225183179508c/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c45e14f2f682eddcc853c0f6051c7c8c6387289",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c45e14f2f682eddcc853c0f6051c7c8c6387289",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c45e14f2f682eddcc853c0f6051c7c8c6387289"
      }
    ],
    "stats": {
      "total": 294,
      "additions": 147,
      "deletions": 147
    },
    "files": [
      {
        "sha": "37fca7dd82aaec1e5012d0520672bd78c79d495a",
        "filename": "src/banman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753f7cccce83084f4b18cf4bdf3225183179508c/src/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753f7cccce83084f4b18cf4bdf3225183179508c/src/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.cpp?ref=753f7cccce83084f4b18cf4bdf3225183179508c",
        "patch": "@@ -15,7 +15,7 @@\n BanMan::BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time)\n     : m_client_interface(client_interface), m_ban_db(std::move(ban_file)), m_default_ban_time(default_ban_time)\n {\n-    if (m_client_interface) m_client_interface->InitMessage(_(\"Loading banlist...\"));\n+    if (m_client_interface) m_client_interface->InitMessage(_(\"Loading banlist...\").translated);\n \n     int64_t n_start = GetTimeMillis();\n     m_is_dirty = false;"
      },
      {
        "sha": "306d718574fb234f695aca1ca38e3c07262315b8",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753f7cccce83084f4b18cf4bdf3225183179508c/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753f7cccce83084f4b18cf4bdf3225183179508c/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=753f7cccce83084f4b18cf4bdf3225183179508c",
        "patch": "@@ -219,7 +219,7 @@ static bool InitRPCAuthentication()\n         LogPrintf(\"No rpcpassword set - using random cookie authentication.\\n\");\n         if (!GenerateAuthCookie(&strRPCUserColonPass)) {\n             uiInterface.ThreadSafeMessageBox(\n-                _(\"Error: A fatal internal error occurred, see debug.log for details\"), // Same message as AbortNode\n+                _(\"Error: A fatal internal error occurred, see debug.log for details\").translated, // Same message as AbortNode\n                 \"\", CClientUIInterface::MSG_ERROR);\n             return false;\n         }"
      },
      {
        "sha": "62db38f8943df5bba88f38b3ae8e5dfcf80c710d",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753f7cccce83084f4b18cf4bdf3225183179508c/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753f7cccce83084f4b18cf4bdf3225183179508c/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=753f7cccce83084f4b18cf4bdf3225183179508c",
        "patch": "@@ -138,7 +138,7 @@ bool TxIndex::DB::MigrateData(CBlockTreeDB& block_tree_db, const CBlockLocator&\n \n     int64_t count = 0;\n     LogPrintf(\"Upgrading txindex database... [0%%]\\n\");\n-    uiInterface.ShowProgress(_(\"Upgrading txindex database\"), 0, true);\n+    uiInterface.ShowProgress(_(\"Upgrading txindex database\").translated, 0, true);\n     int report_done = 0;\n     const size_t batch_size = 1 << 24; // 16 MiB\n \n@@ -175,7 +175,7 @@ bool TxIndex::DB::MigrateData(CBlockTreeDB& block_tree_db, const CBlockLocator&\n                 (static_cast<uint32_t>(*(txid.begin() + 1)) << 0);\n             int percentage_done = (int)(high_nibble * 100.0 / 65536.0 + 0.5);\n \n-            uiInterface.ShowProgress(_(\"Upgrading txindex database\"), percentage_done, true);\n+            uiInterface.ShowProgress(_(\"Upgrading txindex database\").translated, percentage_done, true);\n             if (report_done < percentage_done/10) {\n                 LogPrintf(\"Upgrading txindex database... [%d%%]\\n\", percentage_done);\n                 report_done = percentage_done/10;"
      },
      {
        "sha": "b84c7dc93d1384ad6fd73a1bf2563cc59dc9fc16",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 56,
        "changes": 112,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753f7cccce83084f4b18cf4bdf3225183179508c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753f7cccce83084f4b18cf4bdf3225183179508c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=753f7cccce83084f4b18cf4bdf3225183179508c",
        "patch": "@@ -120,7 +120,7 @@ NODISCARD static bool CreatePidFile()\n #endif\n         return true;\n     } else {\n-        return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\"), GetPidFile().string(), std::strerror(errno)));\n+        return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\").translated, GetPidFile().string(), std::strerror(errno)));\n     }\n }\n \n@@ -544,20 +544,20 @@ std::string LicenseInfo()\n     const std::string URL_SOURCE_CODE = \"<https://github.com/bitcoin/bitcoin>\";\n     const std::string URL_WEBSITE = \"<https://bitcoincore.org>\";\n \n-    return CopyrightHolders(strprintf(_(\"Copyright (C) %i-%i\"), 2009, COPYRIGHT_YEAR) + \" \") + \"\\n\" +\n+    return CopyrightHolders(strprintf(_(\"Copyright (C) %i-%i\").translated, 2009, COPYRIGHT_YEAR) + \" \") + \"\\n\" +\n            \"\\n\" +\n            strprintf(_(\"Please contribute if you find %s useful. \"\n-                       \"Visit %s for further information about the software.\"),\n+                       \"Visit %s for further information about the software.\").translated,\n                PACKAGE_NAME, URL_WEBSITE) +\n            \"\\n\" +\n-           strprintf(_(\"The source code is available from %s.\"),\n+           strprintf(_(\"The source code is available from %s.\").translated,\n                URL_SOURCE_CODE) +\n            \"\\n\" +\n            \"\\n\" +\n-           _(\"This is experimental software.\") + \"\\n\" +\n-           strprintf(_(\"Distributed under the MIT software license, see the accompanying file %s or %s\"), \"COPYING\", \"<https://opensource.org/licenses/MIT>\") + \"\\n\" +\n+           _(\"This is experimental software.\").translated + \"\\n\" +\n+           strprintf(_(\"Distributed under the MIT software license, see the accompanying file %s or %s\").translated, \"COPYING\", \"<https://opensource.org/licenses/MIT>\") + \"\\n\" +\n            \"\\n\" +\n-           strprintf(_(\"This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit %s and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.\"), \"<https://www.openssl.org>\") +\n+           strprintf(_(\"This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit %s and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.\").translated, \"<https://www.openssl.org>\") +\n            \"\\n\";\n }\n \n@@ -823,7 +823,7 @@ void InitParameterInteraction()\n \n static std::string ResolveErrMsg(const char * const optname, const std::string& strBind)\n {\n-    return strprintf(_(\"Cannot resolve -%s address: '%s'\"), optname, strBind);\n+    return strprintf(_(\"Cannot resolve -%s address: '%s'\").translated, optname, strBind);\n }\n \n /**\n@@ -929,16 +929,16 @@ bool AppInitParameterInteraction()\n     // on the command line or in this network's section of the config file.\n     std::string network = gArgs.GetChainName();\n     for (const auto& arg : gArgs.GetUnsuitableSectionOnlyArgs()) {\n-        return InitError(strprintf(_(\"Config setting for %s only applied on %s network when in [%s] section.\"), arg, network, network));\n+        return InitError(strprintf(_(\"Config setting for %s only applied on %s network when in [%s] section.\").translated, arg, network, network));\n     }\n \n     // Warn if unrecognized section name are present in the config file.\n     for (const auto& section : gArgs.GetUnrecognizedSections()) {\n-        InitWarning(strprintf(\"%s:%i \" + _(\"Section [%s] is not recognized.\"), section.m_file, section.m_line, section.m_name));\n+        InitWarning(strprintf(\"%s:%i \" + _(\"Section [%s] is not recognized.\").translated, section.m_file, section.m_line, section.m_name));\n     }\n \n     if (!fs::is_directory(GetBlocksDir())) {\n-        return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\"), gArgs.GetArg(\"-blocksdir\", \"\").c_str()));\n+        return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\").translated, gArgs.GetArg(\"-blocksdir\", \"\").c_str()));\n     }\n \n     // parse and validate enabled filter types\n@@ -951,7 +951,7 @@ bool AppInitParameterInteraction()\n         for (const auto& name : names) {\n             BlockFilterType filter_type;\n             if (!BlockFilterTypeByName(name, filter_type)) {\n-                return InitError(strprintf(_(\"Unknown -blockfilterindex value %s.\"), name));\n+                return InitError(strprintf(_(\"Unknown -blockfilterindex value %s.\").translated, name));\n             }\n             g_enabled_filter_types.push_back(filter_type);\n         }\n@@ -960,9 +960,9 @@ bool AppInitParameterInteraction()\n     // if using block pruning, then disallow txindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n-            return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+            return InitError(_(\"Prune mode is incompatible with -txindex.\").translated);\n         if (!g_enabled_filter_types.empty()) {\n-            return InitError(_(\"Prune mode is incompatible with -blockfilterindex.\"));\n+            return InitError(_(\"Prune mode is incompatible with -blockfilterindex.\").translated);\n         }\n     }\n \n@@ -987,11 +987,11 @@ bool AppInitParameterInteraction()\n #endif\n     nMaxConnections = std::max(std::min<int>(nMaxConnections, fd_max - nBind - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS), 0);\n     if (nFD < MIN_CORE_FILEDESCRIPTORS)\n-        return InitError(_(\"Not enough file descriptors available.\"));\n+        return InitError(_(\"Not enough file descriptors available.\").translated);\n     nMaxConnections = std::min(nFD - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS, nMaxConnections);\n \n     if (nMaxConnections < nUserMaxConnections)\n-        InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));\n+        InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\").translated, nUserMaxConnections, nMaxConnections));\n \n     // ********************************************************* Step 3: parameter-to-internal-flags\n     if (gArgs.IsArgSet(\"-debug\")) {\n@@ -1002,7 +1002,7 @@ bool AppInitParameterInteraction()\n             [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n             for (const auto& cat : categories) {\n                 if (!LogInstance().EnableCategory(cat)) {\n-                    InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n+                    InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\").translated, \"-debug\", cat));\n                 }\n             }\n         }\n@@ -1011,7 +1011,7 @@ bool AppInitParameterInteraction()\n     // Now remove the logging categories which were explicitly excluded\n     for (const std::string& cat : gArgs.GetArgs(\"-debugexclude\")) {\n         if (!LogInstance().DisableCategory(cat)) {\n-            InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n+            InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\").translated, \"-debugexclude\", cat));\n         }\n     }\n \n@@ -1047,7 +1047,7 @@ bool AppInitParameterInteraction()\n     int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     int64_t nMempoolSizeMin = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n-        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n+        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\").translated, std::ceil(nMempoolSizeMin / 1000000.0)));\n     // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n     // and the amount the mempool min fee increases above the feerate of txs evicted due to mempool limiting.\n     if (gArgs.IsArgSet(\"-incrementalrelayfee\"))\n@@ -1070,7 +1070,7 @@ bool AppInitParameterInteraction()\n     // block pruning; get the amount of disk space (in MiB) to allot for block & undo files\n     int64_t nPruneArg = gArgs.GetArg(\"-prune\", 0);\n     if (nPruneArg < 0) {\n-        return InitError(_(\"Prune cannot be configured with a negative value.\"));\n+        return InitError(_(\"Prune cannot be configured with a negative value.\").translated);\n     }\n     nPruneTarget = (uint64_t) nPruneArg * 1024 * 1024;\n     if (nPruneArg == 1) {  // manual pruning: -prune=1\n@@ -1079,7 +1079,7 @@ bool AppInitParameterInteraction()\n         fPruneMode = true;\n     } else if (nPruneTarget) {\n         if (nPruneTarget < MIN_DISK_SPACE_FOR_BLOCK_FILES) {\n-            return InitError(strprintf(_(\"Prune configured below the minimum of %d MiB.  Please use a higher number.\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n+            return InitError(strprintf(_(\"Prune configured below the minimum of %d MiB.  Please use a higher number.\").translated, MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n         }\n         LogPrintf(\"Prune configured to target %u MiB on disk for block and undo files.\\n\", nPruneTarget / 1024 / 1024);\n         fPruneMode = true;\n@@ -1161,10 +1161,10 @@ static bool LockDataDirectory(bool probeOnly)\n     // Make sure only a single Bitcoin process is using the data directory.\n     fs::path datadir = GetDataDir();\n     if (!DirIsWritable(datadir)) {\n-        return InitError(strprintf(_(\"Cannot write to data directory '%s'; check permissions.\"), datadir.string()));\n+        return InitError(strprintf(_(\"Cannot write to data directory '%s'; check permissions.\").translated, datadir.string()));\n     }\n     if (!LockDirectory(datadir, \".lock\", probeOnly)) {\n-        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\"), datadir.string(), PACKAGE_NAME));\n+        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\").translated, datadir.string(), PACKAGE_NAME));\n     }\n     return true;\n }\n@@ -1182,7 +1182,7 @@ bool AppInitSanityChecks()\n \n     // Sanity check\n     if (!InitSanityCheck())\n-        return InitError(strprintf(_(\"Initialization sanity check failed. %s is shutting down.\"), PACKAGE_NAME));\n+        return InitError(strprintf(_(\"Initialization sanity check failed. %s is shutting down.\").translated, PACKAGE_NAME));\n \n     // Probe the data directory lock to give an early error message, if possible\n     // We cannot hold the data directory lock here, as the forking for daemon() hasn't yet happened,\n@@ -1233,7 +1233,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n         LogPrintf(\"Config file: %s\\n\", config_file_path.string());\n     } else if (gArgs.IsArgSet(\"-conf\")) {\n         // Warn if no conf file exists at path provided by user\n-        InitWarning(strprintf(_(\"The specified config file %s does not exist\\n\"), config_file_path.string()));\n+        InitWarning(strprintf(_(\"The specified config file %s does not exist\\n\").translated, config_file_path.string()));\n     } else {\n         // Not categorizing as \"Warning\" because it's the default behavior\n         LogPrintf(\"Config file: %s (not found, skipping)\\n\", config_file_path.string());\n@@ -1293,7 +1293,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     {\n         uiInterface.InitMessage_connect(SetRPCWarmupStatus);\n         if (!AppInitServers())\n-            return InitError(_(\"Unable to start HTTP server. See debug log for details.\"));\n+            return InitError(_(\"Unable to start HTTP server. See debug log for details.\").translated);\n     }\n \n     // ********************************************************* Step 5: verify wallet database integrity\n@@ -1321,12 +1321,12 @@ bool AppInitMain(InitInterfaces& interfaces)\n     std::vector<std::string> uacomments;\n     for (const std::string& cmt : gArgs.GetArgs(\"-uacomment\")) {\n         if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n-            return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n+            return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\").translated, cmt));\n         uacomments.push_back(cmt);\n     }\n     strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, uacomments);\n     if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n-        return InitError(strprintf(_(\"Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.\"),\n+        return InitError(strprintf(_(\"Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.\").translated,\n             strSubVersion.size(), MAX_SUBVERSION_LENGTH));\n     }\n \n@@ -1335,7 +1335,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n         for (const std::string& snet : gArgs.GetArgs(\"-onlynet\")) {\n             enum Network net = ParseNetwork(snet);\n             if (net == NET_UNROUTABLE)\n-                return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet));\n+                return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\").translated, snet));\n             nets.insert(net);\n         }\n         for (int n = 0; n < NET_MAX; n++) {\n@@ -1356,12 +1356,12 @@ bool AppInitMain(InitInterfaces& interfaces)\n     if (proxyArg != \"\" && proxyArg != \"0\") {\n         CService proxyAddr;\n         if (!Lookup(proxyArg.c_str(), proxyAddr, 9050, fNameLookup)) {\n-            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\"), proxyArg));\n+            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\").translated, proxyArg));\n         }\n \n         proxyType addrProxy = proxyType(proxyAddr, proxyRandomize);\n         if (!addrProxy.IsValid())\n-            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\"), proxyArg));\n+            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\").translated, proxyArg));\n \n         SetProxy(NET_IPV4, addrProxy);\n         SetProxy(NET_IPV6, addrProxy);\n@@ -1380,11 +1380,11 @@ bool AppInitMain(InitInterfaces& interfaces)\n         } else {\n             CService onionProxy;\n             if (!Lookup(onionArg.c_str(), onionProxy, 9050, fNameLookup)) {\n-                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\"), onionArg));\n+                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\").translated, onionArg));\n             }\n             proxyType addrOnion = proxyType(onionProxy, proxyRandomize);\n             if (!addrOnion.IsValid())\n-                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\"), onionArg));\n+                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\").translated, onionArg));\n             SetProxy(NET_ONION, addrOnion);\n             SetReachable(NET_ONION, true);\n         }\n@@ -1459,7 +1459,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n         bool fReset = fReindex;\n         std::string strLoadError;\n \n-        uiInterface.InitMessage(_(\"Loading block index...\"));\n+        uiInterface.InitMessage(_(\"Loading block index...\").translated);\n \n         do {\n             const int64_t load_block_index_start_time = GetTimeMillis();\n@@ -1490,21 +1490,21 @@ bool AppInitMain(InitInterfaces& interfaces)\n                 // From here on out fReindex and fReset mean something different!\n                 if (!LoadBlockIndex(chainparams)) {\n                     if (ShutdownRequested()) break;\n-                    strLoadError = _(\"Error loading block database\");\n+                    strLoadError = _(\"Error loading block database\").translated;\n                     break;\n                 }\n \n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n                 if (!::BlockIndex().empty() &&\n                         !LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n-                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n+                    return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\").translated);\n                 }\n \n                 // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n                 // in the past, but is now trying to run unpruned.\n                 if (fHavePruned && !fPruneMode) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n+                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\").translated;\n                     break;\n                 }\n \n@@ -1513,7 +1513,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n                 // (otherwise we use the one already on disk).\n                 // This is called again in ThreadImport after the reindex completes.\n                 if (!fReindex && !LoadGenesisBlock(chainparams)) {\n-                    strLoadError = _(\"Error initializing block database\");\n+                    strLoadError = _(\"Error initializing block database\").translated;\n                     break;\n                 }\n \n@@ -1524,20 +1524,20 @@ bool AppInitMain(InitInterfaces& interfaces)\n                 pcoinscatcher.reset(new CCoinsViewErrorCatcher(pcoinsdbview.get()));\n                 pcoinscatcher->AddReadErrCallback([]() {\n                     uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\"),\n+                        _(\"Error reading from database, shutting down.\").translated,\n                         \"\", CClientUIInterface::MSG_ERROR);\n                 });\n \n                 // If necessary, upgrade from older database format.\n                 // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n                 if (!pcoinsdbview->Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\");\n+                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n                     break;\n                 }\n \n                 // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n                 if (!ReplayBlocks(chainparams, pcoinsdbview.get())) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n+                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n                     break;\n                 }\n \n@@ -1548,32 +1548,32 @@ bool AppInitMain(InitInterfaces& interfaces)\n                 if (!is_coinsview_empty) {\n                     // LoadChainTip sets ::ChainActive() based on pcoinsTip's best block\n                     if (!LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\");\n+                        strLoadError = _(\"Error initializing block database\").translated;\n                         break;\n                     }\n                     assert(::ChainActive().Tip() != nullptr);\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\");\n+                strLoadError = _(\"Error opening block database\").translated;\n                 break;\n             }\n \n             if (!fReset) {\n                 // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n                 // It both disconnects blocks based on ::ChainActive(), and drops block data in\n                 // BlockIndex() based on lack of available witness data.\n-                uiInterface.InitMessage(_(\"Rewinding blocks...\"));\n+                uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n                 if (!RewindBlockIndex(chainparams)) {\n-                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\");\n+                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\").translated;\n                     break;\n                 }\n             }\n \n             try {\n                 LOCK(cs_main);\n                 if (!is_coinsview_empty) {\n-                    uiInterface.InitMessage(_(\"Verifying blocks...\"));\n+                    uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n                     if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n                         LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n                             MIN_BLOCKS_TO_KEEP);\n@@ -1584,19 +1584,19 @@ bool AppInitMain(InitInterfaces& interfaces)\n                     if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n                         strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n                                 \"This may be due to your computer's date and time being set incorrectly. \"\n-                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n+                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n                         break;\n                     }\n \n                     if (!CVerifyDB().VerifyDB(chainparams, pcoinsdbview.get(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n                                   gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                        strLoadError = _(\"Corrupted block database detected\");\n+                        strLoadError = _(\"Corrupted block database detected\").translated;\n                         break;\n                     }\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n-                strLoadError = _(\"Error opening block database\");\n+                strLoadError = _(\"Error opening block database\").translated;\n                 break;\n             }\n \n@@ -1608,7 +1608,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n             // first suggest a reindex\n             if (!fReset) {\n                 bool fRet = uiInterface.ThreadSafeQuestion(\n-                    strLoadError + \".\\n\\n\" + _(\"Do you want to rebuild the block database now?\"),\n+                    strLoadError + \".\\n\\n\" + _(\"Do you want to rebuild the block database now?\").translated,\n                     strLoadError + \".\\nPlease restart with -reindex or -reindex-chainstate to recover.\",\n                     \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::BTN_ABORT);\n                 if (fRet) {\n@@ -1665,7 +1665,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n         LogPrintf(\"Unsetting NODE_NETWORK on prune mode\\n\");\n         nLocalServices = ServiceFlags(nLocalServices & ~NODE_NETWORK);\n         if (!fReindex) {\n-            uiInterface.InitMessage(_(\"Pruning blockstore...\"));\n+            uiInterface.InitMessage(_(\"Pruning blockstore...\").translated);\n             ::ChainstateActive().PruneAndFlush();\n         }\n     }\n@@ -1682,11 +1682,11 @@ bool AppInitMain(InitInterfaces& interfaces)\n     // ********************************************************* Step 11: import blocks\n \n     if (!CheckDiskSpace(GetDataDir())) {\n-        InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetDataDir()));\n+        InitError(strprintf(_(\"Error: Disk space is low for %s\").translated, GetDataDir()));\n         return false;\n     }\n     if (!CheckDiskSpace(GetBlocksDir())) {\n-        InitError(strprintf(_(\"Error: Disk space is low for %s\"), GetBlocksDir()));\n+        InitError(strprintf(_(\"Error: Disk space is low for %s\").translated, GetBlocksDir()));\n         return false;\n     }\n \n@@ -1780,7 +1780,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n             return InitError(ResolveErrMsg(\"whitebind\", strBind));\n         }\n         if (addrBind.GetPort() == 0) {\n-            return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n+            return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\").translated, strBind));\n         }\n         connOptions.vWhiteBinds.push_back(addrBind);\n     }\n@@ -1789,7 +1789,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n         CSubNet subnet;\n         LookupSubNet(net.c_str(), subnet);\n         if (!subnet.IsValid())\n-            return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net));\n+            return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\").translated, net));\n         connOptions.vWhitelistedRange.push_back(subnet);\n     }\n \n@@ -1810,7 +1810,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     // ********************************************************* Step 13: finished\n \n     SetRPCWarmupFinished();\n-    uiInterface.InitMessage(_(\"Done loading\"));\n+    uiInterface.InitMessage(_(\"Done loading\").translated);\n \n     for (const auto& client : interfaces.chain_clients) {\n         client->start(scheduler);"
      },
      {
        "sha": "8e263b79536814176d479a57d9b0a1d17c04e45c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753f7cccce83084f4b18cf4bdf3225183179508c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753f7cccce83084f4b18cf4bdf3225183179508c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=753f7cccce83084f4b18cf4bdf3225183179508c",
        "patch": "@@ -2040,9 +2040,9 @@ bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, b\n     {\n         int nErr = WSAGetLastError();\n         if (nErr == WSAEADDRINUSE)\n-            strError = strprintf(_(\"Unable to bind to %s on this computer. %s is probably already running.\"), addrBind.ToString(), PACKAGE_NAME);\n+            strError = strprintf(_(\"Unable to bind to %s on this computer. %s is probably already running.\").translated, addrBind.ToString(), PACKAGE_NAME);\n         else\n-            strError = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %s)\"), addrBind.ToString(), NetworkErrorString(nErr));\n+            strError = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %s)\").translated, addrBind.ToString(), NetworkErrorString(nErr));\n         LogPrintf(\"%s\\n\", strError);\n         CloseSocket(hListenSocket);\n         return false;\n@@ -2052,7 +2052,7 @@ bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, b\n     // Listen for incoming connections\n     if (listen(hListenSocket, SOMAXCONN) == SOCKET_ERROR)\n     {\n-        strError = strprintf(_(\"Error: Listening for incoming connections failed (listen returned error %s)\"), NetworkErrorString(WSAGetLastError()));\n+        strError = strprintf(_(\"Error: Listening for incoming connections failed (listen returned error %s)\").translated, NetworkErrorString(WSAGetLastError()));\n         LogPrintf(\"%s\\n\", strError);\n         CloseSocket(hListenSocket);\n         return false;\n@@ -2193,7 +2193,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     if (fListen && !InitBinds(connOptions.vBinds, connOptions.vWhiteBinds)) {\n         if (clientInterface) {\n             clientInterface->ThreadSafeMessageBox(\n-                _(\"Failed to listen on any port. Use -listen=0 if you want this.\"),\n+                _(\"Failed to listen on any port. Use -listen=0 if you want this.\").translated,\n                 \"\", CClientUIInterface::MSG_ERROR);\n         }\n         return false;\n@@ -2204,7 +2204,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     }\n \n     if (clientInterface) {\n-        clientInterface->InitMessage(_(\"Loading P2P addresses...\"));\n+        clientInterface->InitMessage(_(\"Loading P2P addresses...\").translated);\n     }\n     // Load addresses from peers.dat\n     int64_t nStart = GetTimeMillis();\n@@ -2219,7 +2219,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n         }\n     }\n \n-    uiInterface.InitMessage(_(\"Starting network threads...\"));\n+    uiInterface.InitMessage(_(\"Starting network threads...\").translated);\n \n     fAddressesInitialized = true;\n \n@@ -2259,7 +2259,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     if (connOptions.m_use_addrman_outgoing && !connOptions.m_specified_outgoing.empty()) {\n         if (clientInterface) {\n             clientInterface->ThreadSafeMessageBox(\n-                _(\"Cannot provide specific connections and have addrman find outgoing connections at the same.\"),\n+                _(\"Cannot provide specific connections and have addrman find outgoing connections at the same.\").translated,\n                 \"\", CClientUIInterface::MSG_ERROR);\n         }\n         return false;"
      },
      {
        "sha": "5bceb1f94532b043f84acb79349aeab335ba8e7a",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753f7cccce83084f4b18cf4bdf3225183179508c/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753f7cccce83084f4b18cf4bdf3225183179508c/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=753f7cccce83084f4b18cf4bdf3225183179508c",
        "patch": "@@ -168,8 +168,8 @@ static void InitMessage(SplashScreen *splash, const std::string &message)\n static void ShowProgress(SplashScreen *splash, const std::string &title, int nProgress, bool resume_possible)\n {\n     InitMessage(splash, title + std::string(\"\\n\") +\n-            (resume_possible ? _(\"(press q to shutdown and continue later)\")\n-                                : _(\"press q to shutdown\")) +\n+            (resume_possible ? _(\"(press q to shutdown and continue later)\").translated\n+                                : _(\"press q to shutdown\").translated) +\n             strprintf(\"\\n%d\", nProgress) + \"%\");\n }\n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "9458b9ae0cd0dcab9f1b720e9d5d116b2e0acf89",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753f7cccce83084f4b18cf4bdf3225183179508c/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753f7cccce83084f4b18cf4bdf3225183179508c/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=753f7cccce83084f4b18cf4bdf3225183179508c",
        "patch": "@@ -101,7 +101,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n                 if (!fMatch)\n                 {\n                     fDone = true;\n-                    std::string strMessage = strprintf(_(\"Please check that your computer's date and time are correct! If your clock is wrong, %s will not work properly.\"), PACKAGE_NAME);\n+                    std::string strMessage = strprintf(_(\"Please check that your computer's date and time are correct! If your clock is wrong, %s will not work properly.\").translated, PACKAGE_NAME);\n                     SetMiscWarning(strMessage);\n                     uiInterface.ThreadSafeMessageBox(strMessage, \"\", CClientUIInterface::MSG_WARNING);\n                 }"
      },
      {
        "sha": "df9851396e0815301a4b6bcfe554e9b97cd17e3c",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753f7cccce83084f4b18cf4bdf3225183179508c/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753f7cccce83084f4b18cf4bdf3225183179508c/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=753f7cccce83084f4b18cf4bdf3225183179508c",
        "patch": "@@ -358,7 +358,7 @@ bool CCoinsViewDB::Upgrade() {\n     int64_t count = 0;\n     LogPrintf(\"Upgrading utxo-set database...\\n\");\n     LogPrintf(\"[0%%]...\"); /* Continued */\n-    uiInterface.ShowProgress(_(\"Upgrading UTXO database\"), 0, true);\n+    uiInterface.ShowProgress(_(\"Upgrading UTXO database\").translated, 0, true);\n     size_t batch_size = 1 << 24;\n     CDBBatch batch(db);\n     int reportDone = 0;\n@@ -373,7 +373,7 @@ bool CCoinsViewDB::Upgrade() {\n             if (count++ % 256 == 0) {\n                 uint32_t high = 0x100 * *key.second.begin() + *(key.second.begin() + 1);\n                 int percentageDone = (int)(high * 100.0 / 65536.0 + 0.5);\n-                uiInterface.ShowProgress(_(\"Upgrading UTXO database\"), percentageDone, true);\n+                uiInterface.ShowProgress(_(\"Upgrading UTXO database\").translated, percentageDone, true);\n                 if (reportDone < percentageDone/10) {\n                     // report max. every 10% step\n                     LogPrintf(\"[%d%%]...\", percentageDone); /* Continued */"
      },
      {
        "sha": "9edb7dc533990af6ba8546a1da77672eb588e48e",
        "filename": "src/util/error.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753f7cccce83084f4b18cf4bdf3225183179508c/src/util/error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753f7cccce83084f4b18cf4bdf3225183179508c/src/util/error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/error.cpp?ref=753f7cccce83084f4b18cf4bdf3225183179508c",
        "patch": "@@ -38,10 +38,10 @@ std::string TransactionErrorString(const TransactionError err)\n \n std::string AmountHighWarn(const std::string& optname)\n {\n-    return strprintf(_(\"%s is set very high!\"), optname);\n+    return strprintf(_(\"%s is set very high!\").translated, optname);\n }\n \n std::string AmountErrMsg(const char* const optname, const std::string& strValue)\n {\n-    return strprintf(_(\"Invalid amount for -%s=<amount>: '%s'\"), optname, strValue);\n+    return strprintf(_(\"Invalid amount for -%s=<amount>: '%s'\").translated, optname, strValue);\n }"
      },
      {
        "sha": "c27b0cc105b0b751110c626d8fd23ee22e12d6c8",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753f7cccce83084f4b18cf4bdf3225183179508c/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753f7cccce83084f4b18cf4bdf3225183179508c/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=753f7cccce83084f4b18cf4bdf3225183179508c",
        "patch": "@@ -1185,7 +1185,7 @@ int GetNumCores()\n \n std::string CopyrightHolders(const std::string& strPrefix)\n {\n-    const auto copyright_devs = strprintf(_(COPYRIGHT_HOLDERS), COPYRIGHT_HOLDERS_SUBSTITUTION);\n+    const auto copyright_devs = strprintf(_(COPYRIGHT_HOLDERS).translated, COPYRIGHT_HOLDERS_SUBSTITUTION);\n     std::string strCopyrightHolders = strPrefix + copyright_devs;\n \n     // Make sure Bitcoin Core copyright is not removed by accident"
      },
      {
        "sha": "f100dab20d1ee9da782c69d676e68ae313d3df84",
        "filename": "src/util/translation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753f7cccce83084f4b18cf4bdf3225183179508c/src/util/translation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753f7cccce83084f4b18cf4bdf3225183179508c/src/util/translation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/translation.h?ref=753f7cccce83084f4b18cf4bdf3225183179508c",
        "patch": "@@ -34,9 +34,9 @@ const extern std::function<std::string(const char*)> G_TRANSLATION_FUN;\n  * Translation function.\n  * If no translation function is set, simply return the input.\n  */\n-inline std::string _(const char* psz)\n+inline bilingual_str _(const char* psz)\n {\n-    return G_TRANSLATION_FUN ? (G_TRANSLATION_FUN)(psz) : psz;\n+    return bilingual_str{psz, G_TRANSLATION_FUN ? (G_TRANSLATION_FUN)(psz) : psz};\n }\n \n #endif // BITCOIN_UTIL_TRANSLATION_H"
      },
      {
        "sha": "3246d3151376fda1f1a2cb9eb9efad54408d1cbd",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753f7cccce83084f4b18cf4bdf3225183179508c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753f7cccce83084f4b18cf4bdf3225183179508c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=753f7cccce83084f4b18cf4bdf3225183179508c",
        "patch": "@@ -1409,7 +1409,7 @@ static bool AbortNode(const std::string& strMessage, const std::string& userMess\n     if (!userMessage.empty()) {\n         uiInterface.ThreadSafeMessageBox(userMessage, \"\", CClientUIInterface::MSG_ERROR | prefix);\n     } else {\n-        uiInterface.ThreadSafeMessageBox(_(\"Error: A fatal internal error occurred, see debug.log for details\"), \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::MSG_NOPREFIX);\n+        uiInterface.ThreadSafeMessageBox(_(\"Error: A fatal internal error occurred, see debug.log for details\").translated, \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::MSG_NOPREFIX);\n     }\n     StartShutdown();\n     return false;\n@@ -2028,7 +2028,7 @@ bool CChainState::FlushStateToDisk(\n         if (fDoFullFlush || fPeriodicWrite) {\n             // Depend on nMinDiskSpace to ensure we can write block index\n             if (!CheckDiskSpace(GetBlocksDir())) {\n-                return AbortNode(state, \"Disk space is too low!\", _(\"Error: Disk space is too low!\"), CClientUIInterface::MSG_NOPREFIX);\n+                return AbortNode(state, \"Disk space is too low!\", _(\"Error: Disk space is too low!\").translated, CClientUIInterface::MSG_NOPREFIX);\n             }\n             // First make sure all block and undo data is flushed to disk.\n             FlushBlockFile();\n@@ -2063,7 +2063,7 @@ bool CChainState::FlushStateToDisk(\n             // an overestimation, as most will delete an existing entry or\n             // overwrite one. Still, use a conservative safety factor of 2.\n             if (!CheckDiskSpace(GetDataDir(), 48 * 2 * 2 * pcoinsTip->GetCacheSize())) {\n-                return AbortNode(state, \"Disk space is too low!\", _(\"Error: Disk space is too low!\"), CClientUIInterface::MSG_NOPREFIX);\n+                return AbortNode(state, \"Disk space is too low!\", _(\"Error: Disk space is too low!\").translated, CClientUIInterface::MSG_NOPREFIX);\n             }\n             // Flush the chainstate (which may refer to block index entries).\n             if (!pcoinsTip->Flush())\n@@ -2137,7 +2137,7 @@ void static UpdateTip(const CBlockIndex *pindexNew, const CChainParams& chainPar\n             WarningBitsConditionChecker checker(bit);\n             ThresholdState state = checker.GetStateFor(pindex, chainParams.GetConsensus(), warningcache[bit]);\n             if (state == ThresholdState::ACTIVE || state == ThresholdState::LOCKED_IN) {\n-                const std::string strWarning = strprintf(_(\"Warning: unknown new rules activated (versionbit %i)\"), bit);\n+                const std::string strWarning = strprintf(_(\"Warning: unknown new rules activated (versionbit %i)\").translated, bit);\n                 if (state == ThresholdState::ACTIVE) {\n                     DoWarning(strWarning);\n                 } else {\n@@ -2154,7 +2154,7 @@ void static UpdateTip(const CBlockIndex *pindexNew, const CChainParams& chainPar\n             pindex = pindex->pprev;\n         }\n         if (nUpgraded > 0)\n-            AppendWarning(warningMessages, strprintf(_(\"%d of last 100 blocks have unexpected version\"), nUpgraded));\n+            AppendWarning(warningMessages, strprintf(_(\"%d of last 100 blocks have unexpected version\").translated, nUpgraded));\n     }\n     LogPrintf(\"%s: new best=%s height=%d version=0x%08x log2_work=%.8g tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)\", __func__, /* Continued */\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight, pindexNew->nVersion,\n@@ -2931,7 +2931,7 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\n         bool out_of_space;\n         size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n         if (out_of_space) {\n-            return AbortNode(\"Disk space is too low!\", _(\"Error: Disk space is too low!\"), CClientUIInterface::MSG_NOPREFIX);\n+            return AbortNode(\"Disk space is too low!\", _(\"Error: Disk space is too low!\").translated, CClientUIInterface::MSG_NOPREFIX);\n         }\n         if (bytes_allocated != 0 && fPruneMode) {\n             fCheckForPruning = true;\n@@ -2955,7 +2955,7 @@ static bool FindUndoPos(CValidationState &state, int nFile, FlatFilePos &pos, un\n     bool out_of_space;\n     size_t bytes_allocated = UndoFileSeq().Allocate(pos, nAddSize, out_of_space);\n     if (out_of_space) {\n-        return AbortNode(state, \"Disk space is too low!\", _(\"Error: Disk space is too low!\"), CClientUIInterface::MSG_NOPREFIX);\n+        return AbortNode(state, \"Disk space is too low!\", _(\"Error: Disk space is too low!\").translated, CClientUIInterface::MSG_NOPREFIX);\n     }\n     if (bytes_allocated != 0 && fPruneMode) {\n         fCheckForPruning = true;\n@@ -3876,7 +3876,7 @@ bool LoadChainTip(const CChainParams& chainparams)\n \n CVerifyDB::CVerifyDB()\n {\n-    uiInterface.ShowProgress(_(\"Verifying blocks...\"), 0, false);\n+    uiInterface.ShowProgress(_(\"Verifying blocks...\").translated, 0, false);\n }\n \n CVerifyDB::~CVerifyDB()\n@@ -3910,7 +3910,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             LogPrintf(\"[%d%%]...\", percentageDone); /* Continued */\n             reportDone = percentageDone/10;\n         }\n-        uiInterface.ShowProgress(_(\"Verifying blocks...\"), percentageDone, false);\n+        uiInterface.ShowProgress(_(\"Verifying blocks...\").translated, percentageDone, false);\n         if (pindex->nHeight <= ::ChainActive().Height()-nCheckDepth)\n             break;\n         if (fPruneMode && !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n@@ -3968,7 +3968,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n                 LogPrintf(\"[%d%%]...\", percentageDone); /* Continued */\n                 reportDone = percentageDone/10;\n             }\n-            uiInterface.ShowProgress(_(\"Verifying blocks...\"), percentageDone, false);\n+            uiInterface.ShowProgress(_(\"Verifying blocks...\").translated, percentageDone, false);\n             pindex = ::ChainActive().Next(pindex);\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n@@ -4015,7 +4015,7 @@ bool CChainState::ReplayBlocks(const CChainParams& params, CCoinsView* view)\n     if (hashHeads.empty()) return true; // We're already in a consistent state.\n     if (hashHeads.size() != 2) return error(\"ReplayBlocks(): unknown inconsistent state\");\n \n-    uiInterface.ShowProgress(_(\"Replaying blocks...\"), 0, false);\n+    uiInterface.ShowProgress(_(\"Replaying blocks...\").translated, 0, false);\n     LogPrintf(\"Replaying blocks\\n\");\n \n     const CBlockIndex* pindexOld = nullptr;  // Old tip during the interrupted flush.\n@@ -4061,7 +4061,7 @@ bool CChainState::ReplayBlocks(const CChainParams& params, CCoinsView* view)\n     for (int nHeight = nForkHeight + 1; nHeight <= pindexNew->nHeight; ++nHeight) {\n         const CBlockIndex* pindex = pindexNew->GetAncestor(nHeight);\n         LogPrintf(\"Rolling forward %s (%i)\\n\", pindex->GetBlockHash().ToString(), nHeight);\n-        uiInterface.ShowProgress(_(\"Replaying blocks...\"), (int) ((nHeight - nForkHeight) * 100.0 / (pindexNew->nHeight - nForkHeight)) , false);\n+        uiInterface.ShowProgress(_(\"Replaying blocks...\").translated, (int) ((nHeight - nForkHeight) * 100.0 / (pindexNew->nHeight - nForkHeight)) , false);\n         if (!RollforwardBlock(pindex, cache, params)) return false;\n     }\n "
      },
      {
        "sha": "852b1943862e43a790e7859be0b26ff4ecad9e06",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753f7cccce83084f4b18cf4bdf3225183179508c/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753f7cccce83084f4b18cf4bdf3225183179508c/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=753f7cccce83084f4b18cf4bdf3225183179508c",
        "patch": "@@ -405,7 +405,7 @@ bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, std::string& er\n     LogPrintf(\"Using wallet %s\\n\", file_path.string());\n \n     if (!env->Open(true /* retry */)) {\n-        errorStr = strprintf(_(\"Error initializing wallet database environment %s!\"), walletDir);\n+        errorStr = strprintf(_(\"Error initializing wallet database environment %s!\").translated, walletDir);\n         return false;\n     }\n \n@@ -427,12 +427,12 @@ bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, std::string& w\n             warningStr = strprintf(_(\"Warning: Wallet file corrupt, data salvaged!\"\n                                      \" Original %s saved as %s in %s; if\"\n                                      \" your balance or transactions are incorrect you should\"\n-                                     \" restore from a backup.\"),\n+                                     \" restore from a backup.\").translated,\n                                    walletFile, backup_filename, walletDir);\n         }\n         if (r == BerkeleyEnvironment::VerifyResult::RECOVER_FAIL)\n         {\n-            errorStr = strprintf(_(\"%s corrupt, salvage failed\"), walletFile);\n+            errorStr = strprintf(_(\"%s corrupt, salvage failed\").translated, walletFile);\n             return false;\n         }\n     }"
      },
      {
        "sha": "cb94799d9e51e5aecf525acdb46fb9f7732ad3dd",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753f7cccce83084f4b18cf4bdf3225183179508c/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753f7cccce83084f4b18cf4bdf3225183179508c/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=753f7cccce83084f4b18cf4bdf3225183179508c",
        "patch": "@@ -122,7 +122,7 @@ bool WalletInit::ParameterInteraction() const\n     if (gArgs.GetBoolArg(\"-sysperms\", false))\n         return InitError(\"-sysperms is not allowed in combination with enabled wallet functionality\");\n     if (gArgs.GetArg(\"-prune\", 0) && gArgs.GetBoolArg(\"-rescan\", false))\n-        return InitError(_(\"Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.\"));\n+        return InitError(_(\"Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.\").translated);\n \n     return true;\n }"
      },
      {
        "sha": "b5d3b8c3055fcf76932fd7bccecf16f75157cbdd",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753f7cccce83084f4b18cf4bdf3225183179508c/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753f7cccce83084f4b18cf4bdf3225183179508c/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=753f7cccce83084f4b18cf4bdf3225183179508c",
        "patch": "@@ -19,22 +19,22 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n         // The canonical path cleans the path, preventing >1 Berkeley environment instances for the same directory\n         fs::path canonical_wallet_dir = fs::canonical(wallet_dir, error);\n         if (error || !fs::exists(wallet_dir)) {\n-            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\").translated, wallet_dir.string()));\n             return false;\n         } else if (!fs::is_directory(wallet_dir)) {\n-            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\"), wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\").translated, wallet_dir.string()));\n             return false;\n         // The canonical path transforms relative paths into absolute ones, so we check the non-canonical version\n         } else if (!wallet_dir.is_absolute()) {\n-            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\"), wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\").translated, wallet_dir.string()));\n             return false;\n         }\n         gArgs.ForceSetArg(\"-walletdir\", canonical_wallet_dir.string());\n     }\n \n     LogPrintf(\"Using wallet directory %s\\n\", GetWalletDir().string());\n \n-    chain.initMessage(_(\"Verifying wallet(s)...\"));\n+    chain.initMessage(_(\"Verifying wallet(s)...\").translated);\n \n     // Parameter interaction code should have thrown an error if -salvagewallet\n     // was enabled with more than wallet file, so the wallet_files size check\n@@ -48,7 +48,7 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n         WalletLocation location(wallet_file);\n \n         if (!wallet_paths.insert(location.GetPath()).second) {\n-            chain.initError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), wallet_file));\n+            chain.initError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\").translated, wallet_file));\n             return false;\n         }\n "
      },
      {
        "sha": "04e9bb40c5c149b381fdbc695d9a4966e743a277",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753f7cccce83084f4b18cf4bdf3225183179508c/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753f7cccce83084f4b18cf4bdf3225183179508c/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=753f7cccce83084f4b18cf4bdf3225183179508c",
        "patch": "@@ -607,7 +607,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n \n         // Use uiInterface.ShowProgress instead of pwallet.ShowProgress because pwallet.ShowProgress has a cancel button tied to AbortRescan which\n         // we don't want for this progress bar showing the import progress. uiInterface.ShowProgress does not have a cancel button.\n-        pwallet->chain().showProgress(strprintf(\"%s \" + _(\"Importing...\"), pwallet->GetDisplayName()), 0, false); // show progress dialog in GUI\n+        pwallet->chain().showProgress(strprintf(\"%s \" + _(\"Importing...\").translated, pwallet->GetDisplayName()), 0, false); // show progress dialog in GUI\n         std::vector<std::tuple<CKey, int64_t, bool, std::string>> keys;\n         std::vector<std::pair<CScript, int64_t>> scripts;\n         while (file.good()) {"
      },
      {
        "sha": "4d2faa8d6c8d965645bcb2ed57e9cd013ed700bb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 44,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753f7cccce83084f4b18cf4bdf3225183179508c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753f7cccce83084f4b18cf4bdf3225183179508c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=753f7cccce83084f4b18cf4bdf3225183179508c",
        "patch": "@@ -2014,7 +2014,7 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n     WalletLogPrintf(\"Rescan started from block %s...\\n\", start_block.ToString());\n \n     fAbortRescan = false;\n-    ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n+    ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\").translated, GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n     uint256 tip_hash;\n     // The way the 'block_height' is initialized is just a workaround for the gcc bug #47679 since version 4.6.0.\n     Optional<int> block_height = MakeOptional(false, int());\n@@ -2033,7 +2033,7 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n     while (block_height && !fAbortRescan && !chain().shutdownRequested()) {\n         m_scanning_progress = (progress_current - progress_begin) / (progress_end - progress_begin);\n         if (*block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n-            ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), std::max(1, std::min(99, (int)(m_scanning_progress * 100))));\n+            ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\").translated, GetDisplayName()), std::max(1, std::min(99, (int)(m_scanning_progress * 100))));\n         }\n         if (GetTime() >= nNow + 60) {\n             nNow = GetTime();\n@@ -2089,7 +2089,7 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n             }\n         }\n     }\n-    ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 100); // hide progress dialog in GUI\n+    ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\").translated, GetDisplayName()), 100); // hide progress dialog in GUI\n     if (block_height && fAbortRescan) {\n         WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", *block_height, progress_current);\n         result.status = ScanResult::USER_ABORT;\n@@ -2908,7 +2908,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n     {\n         if (nValue < 0 || recipient.nAmount < 0)\n         {\n-            strFailReason = _(\"Transaction amounts must not be negative\");\n+            strFailReason = _(\"Transaction amounts must not be negative\").translated;\n             return false;\n         }\n         nValue += recipient.nAmount;\n@@ -2918,7 +2918,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n     }\n     if (vecSend.empty())\n     {\n-        strFailReason = _(\"Transaction must have at least one recipient\");\n+        strFailReason = _(\"Transaction must have at least one recipient\").translated;\n         return false;\n     }\n \n@@ -2956,7 +2956,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n \n                 // Reserve a new key pair from key pool\n                 if (!CanGetAddresses(true)) {\n-                    strFailReason = _(\"Can't generate a change-address key. No keys in the internal keypool and can't generate any keys.\");\n+                    strFailReason = _(\"Can't generate a change-address key. No keys in the internal keypool and can't generate any keys.\").translated;\n                     return false;\n                 }\n                 CTxDestination dest;\n@@ -3022,12 +3022,12 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                         if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                         {\n                             if (txout.nValue < 0)\n-                                strFailReason = _(\"The transaction amount is too small to pay the fee\");\n+                                strFailReason = _(\"The transaction amount is too small to pay the fee\").translated;\n                             else\n-                                strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\");\n+                                strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\").translated;\n                         }\n                         else\n-                            strFailReason = _(\"Transaction amount too small\");\n+                            strFailReason = _(\"Transaction amount too small\").translated;\n                         return false;\n                     }\n                     txNew.vout.push_back(txout);\n@@ -3055,7 +3055,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                             continue;\n                         }\n                         else {\n-                            strFailReason = _(\"Insufficient funds\");\n+                            strFailReason = _(\"Insufficient funds\").translated;\n                             return false;\n                         }\n                     }\n@@ -3086,7 +3086,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                         }\n                         else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n                         {\n-                            strFailReason = _(\"Change index out of range\");\n+                            strFailReason = _(\"Change index out of range\").translated;\n                             return false;\n                         }\n \n@@ -3105,14 +3105,14 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n \n                 nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n                 if (nBytes < 0) {\n-                    strFailReason = _(\"Signing transaction failed\");\n+                    strFailReason = _(\"Signing transaction failed\").translated;\n                     return false;\n                 }\n \n                 nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n                 if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n                     // eventually allow a fallback fee\n-                    strFailReason = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+                    strFailReason = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\").translated;\n                     return false;\n                 }\n \n@@ -3152,7 +3152,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                     // fee to pay for the new output and still meet nFeeNeeded\n                     // Or we should have just subtracted fee from recipients and\n                     // nFeeNeeded should not have changed\n-                    strFailReason = _(\"Transaction fee and change calculation failed\");\n+                    strFailReason = _(\"Transaction fee and change calculation failed\").translated;\n                     return false;\n                 }\n \n@@ -3209,7 +3209,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n \n                 if (!ProduceSignature(*this, MutableTransactionSignatureCreator(&txNew, nIn, coin.txout.nValue, SIGHASH_ALL), scriptPubKey, sigdata))\n                 {\n-                    strFailReason = _(\"Signing transaction failed\");\n+                    strFailReason = _(\"Signing transaction failed\").translated;\n                     return false;\n                 } else {\n                     UpdateInput(txNew.vin.at(nIn), sigdata);\n@@ -3225,7 +3225,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n         // Limit size\n         if (GetTransactionWeight(*tx) > MAX_STANDARD_TX_WEIGHT)\n         {\n-            strFailReason = _(\"Transaction too large\");\n+            strFailReason = _(\"Transaction too large\").translated;\n             return false;\n         }\n     }\n@@ -3238,7 +3238,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n     if (gArgs.GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS)) {\n         // Lastly, ensure this tx will pass the mempool's chain limits\n         if (!chain().checkChainLimits(tx)) {\n-            strFailReason = _(\"Transaction has too long of a mempool chain\");\n+            strFailReason = _(\"Transaction has too long of a mempool chain\").translated;\n             return false;\n         }\n     }\n@@ -4226,17 +4226,17 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     std::vector<CWalletTx> vWtx;\n \n     if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n-        chain.initMessage(_(\"Zapping all transactions from wallet...\"));\n+        chain.initMessage(_(\"Zapping all transactions from wallet...\").translated);\n \n         std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(&chain, location, WalletDatabase::Create(location.GetPath()));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DBErrors::LOAD_OK) {\n-            chain.initError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n+            chain.initError(strprintf(_(\"Error loading %s: Wallet corrupted\").translated, walletFile));\n             return nullptr;\n         }\n     }\n \n-    chain.initMessage(_(\"Loading wallet...\"));\n+    chain.initMessage(_(\"Loading wallet...\").translated);\n \n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n@@ -4247,26 +4247,26 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (nLoadWalletRet != DBErrors::LOAD_OK)\n     {\n         if (nLoadWalletRet == DBErrors::CORRUPT) {\n-            chain.initError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n+            chain.initError(strprintf(_(\"Error loading %s: Wallet corrupted\").translated, walletFile));\n             return nullptr;\n         }\n         else if (nLoadWalletRet == DBErrors::NONCRITICAL_ERROR)\n         {\n             chain.initWarning(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n-                                          \" or address book entries might be missing or incorrect.\"),\n+                                          \" or address book entries might be missing or incorrect.\").translated,\n                 walletFile));\n         }\n         else if (nLoadWalletRet == DBErrors::TOO_NEW) {\n-            chain.initError(strprintf(_(\"Error loading %s: Wallet requires newer version of %s\"), walletFile, PACKAGE_NAME));\n+            chain.initError(strprintf(_(\"Error loading %s: Wallet requires newer version of %s\").translated, walletFile, PACKAGE_NAME));\n             return nullptr;\n         }\n         else if (nLoadWalletRet == DBErrors::NEED_REWRITE)\n         {\n-            chain.initError(strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), PACKAGE_NAME));\n+            chain.initError(strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\").translated, PACKAGE_NAME));\n             return nullptr;\n         }\n         else {\n-            chain.initError(strprintf(_(\"Error loading %s\"), walletFile));\n+            chain.initError(strprintf(_(\"Error loading %s\").translated, walletFile));\n             return nullptr;\n         }\n     }\n@@ -4285,7 +4285,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             walletInstance->WalletLogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n         if (nMaxVersion < walletInstance->GetVersion())\n         {\n-            chain.initError(_(\"Cannot downgrade wallet\"));\n+            chain.initError(_(\"Cannot downgrade wallet\").translated);\n             return nullptr;\n         }\n         walletInstance->SetMaxVersion(nMaxVersion);\n@@ -4298,7 +4298,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         // Do not upgrade versions to any version between HD_SPLIT and FEATURE_PRE_SPLIT_KEYPOOL unless already supporting HD_SPLIT\n         int max_version = walletInstance->GetVersion();\n         if (!walletInstance->CanSupportFeature(FEATURE_HD_SPLIT) && max_version >= FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n-            chain.initError(_(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\"));\n+            chain.initError(_(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\").translated);\n             return nullptr;\n         }\n \n@@ -4326,7 +4326,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         // Regenerate the keypool if upgraded to HD\n         if (hd_upgrade) {\n             if (!walletInstance->TopUpKeyPool()) {\n-                chain.initError(_(\"Unable to generate keys\"));\n+                chain.initError(_(\"Unable to generate keys\").translated);\n                 return nullptr;\n             }\n         }\n@@ -4346,20 +4346,20 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         // Top up the keypool\n         if (walletInstance->CanGenerateKeys() && !walletInstance->TopUpKeyPool()) {\n-            chain.initError(_(\"Unable to generate initial keys\"));\n+            chain.initError(_(\"Unable to generate initial keys\").translated);\n             return nullptr;\n         }\n \n         auto locked_chain = chain.lock();\n         walletInstance->ChainStateFlushed(locked_chain->getTipLocator());\n     } else if (wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS) {\n         // Make it impossible to disable private keys after creation\n-        chain.initError(strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\"), walletFile));\n+        chain.initError(strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\").translated, walletFile));\n         return NULL;\n     } else if (walletInstance->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         LOCK(walletInstance->cs_KeyStore);\n         if (!walletInstance->mapKeys.empty() || !walletInstance->mapCryptedKeys.empty()) {\n-            chain.initWarning(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\"), walletFile));\n+            chain.initWarning(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\").translated, walletFile));\n         }\n     }\n \n@@ -4381,7 +4381,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         }\n         if (n > HIGH_TX_FEE_PER_KB) {\n             chain.initWarning(AmountHighWarn(\"-mintxfee\") + \" \" +\n-                              _(\"This is the minimum transaction fee you pay on every transaction.\"));\n+                              _(\"This is the minimum transaction fee you pay on every transaction.\").translated);\n         }\n         walletInstance->m_min_fee = CFeeRate(n);\n     }\n@@ -4390,25 +4390,25 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (gArgs.IsArgSet(\"-fallbackfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"), nFeePerK)) {\n-            chain.initError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), gArgs.GetArg(\"-fallbackfee\", \"\")));\n+            chain.initError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\").translated, gArgs.GetArg(\"-fallbackfee\", \"\")));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n             chain.initWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +\n-                              _(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n+                              _(\"This is the transaction fee you may pay when fee estimates are not available.\").translated);\n         }\n         walletInstance->m_fallback_fee = CFeeRate(nFeePerK);\n         walletInstance->m_allow_fallback_fee = nFeePerK != 0; //disable fallback fee in case value was set to 0, enable if non-null value\n     }\n     if (gArgs.IsArgSet(\"-discardfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"), nFeePerK)) {\n-            chain.initError(strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), gArgs.GetArg(\"-discardfee\", \"\")));\n+            chain.initError(strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\").translated, gArgs.GetArg(\"-discardfee\", \"\")));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n             chain.initWarning(AmountHighWarn(\"-discardfee\") + \" \" +\n-                              _(\"This is the transaction fee you may discard if change is smaller than dust at this level\"));\n+                              _(\"This is the transaction fee you may discard if change is smaller than dust at this level\").translated);\n         }\n         walletInstance->m_discard_rate = CFeeRate(nFeePerK);\n     }\n@@ -4420,11 +4420,11 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n             chain.initWarning(AmountHighWarn(\"-paytxfee\") + \" \" +\n-                              _(\"This is the transaction fee you will pay if you send a transaction.\"));\n+                              _(\"This is the transaction fee you will pay if you send a transaction.\").translated);\n         }\n         walletInstance->m_pay_tx_fee = CFeeRate(nFeePerK, 1000);\n         if (walletInstance->m_pay_tx_fee < chain.relayMinFee()) {\n-            chain.initError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n+            chain.initError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\").translated,\n                 gArgs.GetArg(\"-paytxfee\", \"\"), chain.relayMinFee().ToString()));\n             return nullptr;\n         }\n@@ -4438,10 +4438,10 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             return nullptr;\n         }\n         if (nMaxFee > HIGH_MAX_TX_FEE) {\n-            chain.initWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n+            chain.initWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\").translated);\n         }\n         if (CFeeRate(nMaxFee, 1000) < chain.relayMinFee()) {\n-            chain.initError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n+            chain.initError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\").translated,\n                                        gArgs.GetArg(\"-maxtxfee\", \"\"), chain.relayMinFee().ToString()));\n             return nullptr;\n         }\n@@ -4450,7 +4450,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n     if (chain.relayMinFee().GetFeePerK() > HIGH_TX_FEE_PER_KB)\n         chain.initWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +\n-                    _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n+                    _(\"The wallet will avoid paying less than the minimum relay fee.\").translated);\n \n     walletInstance->m_confirm_target = gArgs.GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n     walletInstance->m_spend_zero_conf_change = gArgs.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n@@ -4498,12 +4498,12 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             }\n \n             if (rescan_height != block_height) {\n-                chain.initError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\"));\n+                chain.initError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\").translated);\n                 return nullptr;\n             }\n         }\n \n-        chain.initMessage(_(\"Rescanning...\"));\n+        chain.initMessage(_(\"Rescanning...\").translated);\n         walletInstance->WalletLogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", *tip_height - rescan_height, rescan_height);\n \n         // No need to read and scan block if block was created before\n@@ -4517,7 +4517,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         {\n             WalletRescanReserver reserver(walletInstance.get());\n             if (!reserver.reserve() || (ScanResult::SUCCESS != walletInstance->ScanForWalletTransactions(locked_chain->getBlockHash(rescan_height), {} /* stop block */, reserver, true /* update */).status)) {\n-                chain.initError(_(\"Failed to rescan the wallet during initialization\"));\n+                chain.initError(_(\"Failed to rescan the wallet during initialization\").translated);\n                 return nullptr;\n             }\n         }"
      },
      {
        "sha": "35d2033ba8c6c37ea40ec85b41a409dbaded79c1",
        "filename": "src/warnings.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753f7cccce83084f4b18cf4bdf3225183179508c/src/warnings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753f7cccce83084f4b18cf4bdf3225183179508c/src/warnings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/warnings.cpp?ref=753f7cccce83084f4b18cf4bdf3225183179508c",
        "patch": "@@ -48,7 +48,7 @@ std::string GetWarnings(const std::string& strFor)\n \n     if (!CLIENT_VERSION_IS_RELEASE) {\n         strStatusBar = \"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\";\n-        strGUI = _(\"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\");\n+        strGUI = _(\"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\").translated;\n     }\n \n     // Misc warnings like out of disk space and clock is wrong\n@@ -61,12 +61,12 @@ std::string GetWarnings(const std::string& strFor)\n     if (fLargeWorkForkFound)\n     {\n         strStatusBar = \"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\";\n-        strGUI += (strGUI.empty() ? \"\" : uiAlertSeperator) + _(\"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\");\n+        strGUI += (strGUI.empty() ? \"\" : uiAlertSeperator) + _(\"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\").translated;\n     }\n     else if (fLargeWorkInvalidChainFound)\n     {\n         strStatusBar = \"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\";\n-        strGUI += (strGUI.empty() ? \"\" : uiAlertSeperator) + _(\"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\");\n+        strGUI += (strGUI.empty() ? \"\" : uiAlertSeperator) + _(\"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\").translated;\n     }\n \n     if (strFor == \"gui\")"
      },
      {
        "sha": "47ad89658920cffebceb2b694873af03f37a207e",
        "filename": "test/lint/lint-format-strings.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/753f7cccce83084f4b18cf4bdf3225183179508c/test/lint/lint-format-strings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/753f7cccce83084f4b18cf4bdf3225183179508c/test/lint/lint-format-strings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-format-strings.py?ref=753f7cccce83084f4b18cf4bdf3225183179508c",
        "patch": "@@ -16,7 +16,7 @@\n     (\"src/dbwrapper.cpp\", \"vsnprintf(p, limit - p, format, backup_ap)\"),\n     (\"src/index/base.cpp\", \"FatalError(const char* fmt, const Args&... args)\"),\n     (\"src/netbase.cpp\", \"LogConnectFailure(bool manual_connection, const char* fmt, const Args&... args)\"),\n-    (\"src/util/system.cpp\", \"strprintf(_(COPYRIGHT_HOLDERS), COPYRIGHT_HOLDERS_SUBSTITUTION)\"),\n+    (\"src/util/system.cpp\", \"strprintf(_(COPYRIGHT_HOLDERS).translated, COPYRIGHT_HOLDERS_SUBSTITUTION)\"),\n     (\"src/wallet/wallet.h\",  \"WalletLogPrintf(std::string fmt, Params... parameters)\"),\n     (\"src/wallet/wallet.h\", \"LogPrintf((\\\"%s \\\" + fmt).c_str(), GetDisplayName(), parameters...)\"),\n     (\"src/logging.h\", \"LogPrintf(const char* fmt, const Args&... args)\"),"
      }
    ]
  }
]