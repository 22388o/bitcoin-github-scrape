[
  {
    "sha": "613fc0fd389a1af8a5779bf5e442d09f624e00f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTNmYzBmZDM4OWExYWY4YTU3NzliZjVlNDQyZDA5ZjYyNGUwMGY1",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2017-05-29T03:42:17Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-11T19:08:59Z"
      },
      "message": "[consensus] Hard limit on transaction size / decouple from block size limit\n\nEstablish a fixed upper limit on serialized transactions, compatible\nwith existing software.\n\nDecouple transaction size limit from block size limit, by avoiding\nderivation of tx limit from block limit.",
      "tree": {
        "sha": "b10f8830efd0777b4d777d7f8b705e1f3b7b9a3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b10f8830efd0777b4d777d7f8b705e1f3b7b9a3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/613fc0fd389a1af8a5779bf5e442d09f624e00f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/613fc0fd389a1af8a5779bf5e442d09f624e00f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/613fc0fd389a1af8a5779bf5e442d09f624e00f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/613fc0fd389a1af8a5779bf5e442d09f624e00f5/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e526ca6284b9e13be1b912b80dd73a34e739b539",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e526ca6284b9e13be1b912b80dd73a34e739b539",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e526ca6284b9e13be1b912b80dd73a34e739b539"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 43,
      "deletions": 0
    },
    "files": [
      {
        "sha": "aba6da0ee9c5893cff2acca9a5c37486cf4d8ef8",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613fc0fd389a1af8a5779bf5e442d09f624e00f5/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613fc0fd389a1af8a5779bf5e442d09f624e00f5/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=613fc0fd389a1af8a5779bf5e442d09f624e00f5",
        "patch": "@@ -15,6 +15,10 @@ static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n static const unsigned int MAX_BLOCK_WEIGHT = 4000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n static const int64_t MAX_BLOCK_SIGOPS_COST = 80000;\n+\n+/** The maximum allowed size for a transaction, excluding witness data, in bytes */\n+static const unsigned int MAX_TX_BASE_SIZE = 1000000;\n+\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n "
      },
      {
        "sha": "d03e6123071b6997142c81250fbe7199404fb630",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/613fc0fd389a1af8a5779bf5e442d09f624e00f5/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/613fc0fd389a1af8a5779bf5e442d09f624e00f5/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=613fc0fd389a1af8a5779bf5e442d09f624e00f5",
        "patch": "@@ -669,6 +669,45 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n }\n \n+BOOST_AUTO_TEST_CASE(test_tx_sizelimits)\n+{\n+    CBasicKeyStore keystore;\n+    CCoinsView coinsDummy;\n+    CCoinsViewCache coins(&coinsDummy);\n+    std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n+\n+    CMutableTransaction tx;\n+    tx.nVersion = 1;\n+    tx.vin.resize(1);\n+    tx.vin[0].prevout.hash = dummyTransactions[0].GetHash();\n+    tx.vin[0].prevout.n = 0;\n+    tx.vout.resize(1);\n+    tx.vout[0].nValue = 1;\n+    tx.vout[0].scriptPubKey = CScript();\n+\n+    size_t sersizeTx = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n+\n+    BOOST_CHECK(sersizeTx <= MAX_TX_BASE_SIZE);\n+\n+    CValidationState state;\n+    BOOST_CHECK_MESSAGE(CheckTransaction(tx, state) && state.IsValid(), \"Simple transaction should be valid.\");\n+\n+    const size_t nTestOutputs = 125000;\n+    tx.vout.resize(nTestOutputs);\n+\n+    for (size_t i = 0; i < nTestOutputs; i++) {\n+        tx.vout[i].nValue = 1;\n+        tx.vout[i].scriptPubKey = CScript();\n+    }\n+\n+    sersizeTx = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n+\n+    BOOST_CHECK(sersizeTx > MAX_TX_BASE_SIZE);\n+\n+    BOOST_CHECK_MESSAGE(!CheckTransaction(tx, state) || !state.IsValid(), \"Large transaction should be invalid.\");\n+\n+}\n+\n BOOST_AUTO_TEST_CASE(test_IsStandard)\n {\n     LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "d76839352f9d32717e7c044616ca38242aa273ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzY4MzkzNTJmOWQzMjcxN2U3YzA0NDYxNmNhMzgyNDJhYTI3M2Fk",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2017-06-04T03:32:57Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-11T19:08:59Z"
      },
      "message": "bitcoin-tx: Decouple max-tx-size from max-block-size\n\nCalculate limits based on tx size limits, not block size limits.",
      "tree": {
        "sha": "1e6e2d9b2648bf8ec6628911a30f3969e1de1e9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e6e2d9b2648bf8ec6628911a30f3969e1de1e9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d76839352f9d32717e7c044616ca38242aa273ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d76839352f9d32717e7c044616ca38242aa273ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d76839352f9d32717e7c044616ca38242aa273ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d76839352f9d32717e7c044616ca38242aa273ad/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "613fc0fd389a1af8a5779bf5e442d09f624e00f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/613fc0fd389a1af8a5779bf5e442d09f624e00f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/613fc0fd389a1af8a5779bf5e442d09f624e00f5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ce4c232680e9d6c4810d9bcd0073b76694cb3828",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d76839352f9d32717e7c044616ca38242aa273ad/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d76839352f9d32717e7c044616ca38242aa273ad/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=d76839352f9d32717e7c044616ca38242aa273ad",
        "patch": "@@ -239,7 +239,7 @@ static void MutateTxAddInput(CMutableTransaction& tx, const std::string& strInpu\n     uint256 txid(uint256S(strTxid));\n \n     static const unsigned int minTxOutSz = 9;\n-    static const unsigned int maxVout = MAX_BLOCK_WEIGHT / (WITNESS_SCALE_FACTOR * minTxOutSz);\n+    static const unsigned int maxVout = MAX_TX_BASE_SIZE / minTxOutSz;\n \n     // extract and validate vout\n     std::string strVout = vStrInputParts[1];"
      }
    ]
  },
  {
    "sha": "b7dac7d16bdf2b310923e7f0c645328b0e5eb867",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2RhYzdkMTZiZGYyYjMxMDkyM2U3ZjBjNjQ1MzI4YjBlNWViODY3",
    "commit": {
      "author": {
        "name": "Chris Kleeschulte",
        "email": "chrisk@bitpay.com",
        "date": "2017-06-13T14:39:50Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-11T19:08:59Z"
      },
      "message": "Addition of testnet5.",
      "tree": {
        "sha": "faf9f99159098eb7600c9a52d42350fcbd92b368",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/faf9f99159098eb7600c9a52d42350fcbd92b368"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7dac7d16bdf2b310923e7f0c645328b0e5eb867",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7dac7d16bdf2b310923e7f0c645328b0e5eb867",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7dac7d16bdf2b310923e7f0c645328b0e5eb867",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7dac7d16bdf2b310923e7f0c645328b0e5eb867/comments",
    "author": null,
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d76839352f9d32717e7c044616ca38242aa273ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d76839352f9d32717e7c044616ca38242aa273ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d76839352f9d32717e7c044616ca38242aa273ad"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 43,
      "deletions": 37
    },
    "files": [
      {
        "sha": "e45bb1c17d69ac34bea0e19e4207bda7e90178a6",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7dac7d16bdf2b310923e7f0c645328b0e5eb867/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7dac7d16bdf2b310923e7f0c645328b0e5eb867/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=b7dac7d16bdf2b310923e7f0c645328b0e5eb867",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-linux-0.15\"\n+name: \"bitcoin-linux-0.15-segwit2x\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "95ac1ceae12dc0790219b7db1c7be5d11f099b89",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7dac7d16bdf2b310923e7f0c645328b0e5eb867/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7dac7d16bdf2b310923e7f0c645328b0e5eb867/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=b7dac7d16bdf2b310923e7f0c645328b0e5eb867",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-osx-0.15\"\n+name: \"bitcoin-osx-0.15-segwit2x\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "9f9d254ee2ab09775fa4bf45f7fd097964120044",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7dac7d16bdf2b310923e7f0c645328b0e5eb867/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7dac7d16bdf2b310923e7f0c645328b0e5eb867/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=b7dac7d16bdf2b310923e7f0c645328b0e5eb867",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-win-0.15\"\n+name: \"bitcoin-win-0.15-segwit2x\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "e96122f10ffd5abca253dcead4d0e7901b9a6c26",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 31,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7dac7d16bdf2b310923e7f0c645328b0e5eb867/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7dac7d16bdf2b310923e7f0c645328b0e5eb867/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=b7dac7d16bdf2b310923e7f0c645328b0e5eb867",
        "patch": "@@ -172,17 +172,17 @@ class CMainParams : public CChainParams {\n };\n \n /**\n- * Testnet (v3)\n+ * Testnet (v5)\n  */\n class CTestNetParams : public CChainParams {\n public:\n     CTestNetParams() {\n         strNetworkID = \"test\";\n         consensus.nSubsidyHalvingInterval = 210000;\n-        consensus.BIP34Height = 21111;\n-        consensus.BIP34Hash = uint256S(\"0x0000000023b3a96d3484e5abb3755c413e7d41500f8e2a5c3f0dd01299cd8ef8\");\n-        consensus.BIP65Height = 581885; // 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6\n-        consensus.BIP66Height = 330776; // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182\n+        consensus.BIP34Height = 10001;\n+        consensus.BIP34Hash = uint256S(\"0x00000000fb7c0a2aeb5f1244e81921b84b7ac770004543144e10c2284f89bfd8\");\n+        consensus.BIP65Height = 10001; // 00000000fb7c0a2aeb5f1244e81921b84b7ac770004543144e10c2284f89bfd8\n+        consensus.BIP66Height = 10001; // 00000000fb7c0a2aeb5f1244e81921b84b7ac770004543144e10c2284f89bfd8\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -191,30 +191,35 @@ class CTestNetParams : public CChainParams {\n         consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1496275200; // June 1, 2017\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1510704000; // November 15, 2017\n \n         // Deployment of BIP68, BIP112, and BIP113.\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1456790400; // March 1st, 2016\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1496275200; // June 1, 2017\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1510704000; // November 15, 2017\n \n         // Deployment of SegWit (BIP141, BIP143, and BIP147)\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1462060800; // May 1st 2016\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1493596800; // May 1st 2017\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1496275200; // June 1, 2017\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017\n+\n+        // Deployment of SegWit2x\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT2X].bit = 4;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT2X].nStartTime = 1496275200; // June 1, 2017.\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT2X].nTimeout = 1510704000; // November 15th, 2017\n \n         // The best chain should have at least this much work.\n-        consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000000000002830dab7f76dbb7d63\");\n+        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000000000000000000000100\");\n \n         // By default assume that the signatures in ancestors of this block are valid.\n-        consensus.defaultAssumeValid = uint256S(\"0x0000000002e9e7b00e1f6dc5123a04aad68dd0f0968d8c7aa45f6640795c37b1\"); //1135275\n+        consensus.defaultAssumeValid = uint256S(\"0x00000000fb7c0a2aeb5f1244e81921b84b7ac770004543144e10c2284f89bfd8\"); // 10001\n \n-        pchMessageStart[0] = 0x0b;\n-        pchMessageStart[1] = 0x11;\n-        pchMessageStart[2] = 0x09;\n-        pchMessageStart[3] = 0x07;\n-        nDefaultPort = 18333;\n+        pchMessageStart[0] = 0x6e;\n+        pchMessageStart[1] = 0x65;\n+        pchMessageStart[2] = 0x74;\n+        pchMessageStart[3] = 0x00;\n+        nDefaultPort = 18555;\n         nPruneAfterHeight = 1000;\n \n         genesis = CreateGenesisBlock(1296688602, 414098458, 0x1d00ffff, 1, 50 * COIN);\n@@ -225,10 +230,7 @@ class CTestNetParams : public CChainParams {\n         vFixedSeeds.clear();\n         vSeeds.clear();\n         // nodes with support for servicebits filtering should be at the top\n-        vSeeds.emplace_back(\"testnet-seed.bitcoin.jonasschnelli.ch\", true);\n-        vSeeds.emplace_back(\"seed.tbtc.petertodd.org\", true);\n-        vSeeds.emplace_back(\"testnet-seed.bluematt.me\", false);\n-        vSeeds.emplace_back(\"testnet-seed.bitcoin.schildbach.de\", false);\n+        vSeeds.push_back(CDNSSeedData(\"testnet5.b-pay.net\", \"seed.testnet5.b-pay.net\"));\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);\n@@ -238,22 +240,21 @@ class CTestNetParams : public CChainParams {\n \n         vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_test, pnSeed6_test + ARRAYLEN(pnSeed6_test));\n \n+        fMiningRequiresPeers = false;\n         fDefaultConsistencyChecks = false;\n         fRequireStandard = false;\n-        fMineBlocksOnDemand = false;\n+        fMineBlocksOnDemand = true;\n \n \n         checkpointData = (CCheckpointData) {\n-            {\n-                {546, uint256S(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\")},\n-            }\n+            boost::assign::map_list_of\n+            ( 10001, uint256S(\"00000000fb7c0a2aeb5f1244e81921b84b7ac770004543144e10c2284f89bfd8\")),\n         };\n \n         chainTxData = ChainTxData{\n-            // Data as of block 00000000000001c200b9790dc637d3bb141fe77d155b966ed775b17e109f7c6c (height 1156179)\n-            1501802953,\n-            14706531,\n-            0.15\n+            1497295460,\n+            31626,\n+            0\n         };\n \n     }\n@@ -284,10 +285,15 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 999999999999ULL;\n+\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 999999999999ULL;\n \n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT2X].bit = 4;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT2X].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT2X].nTimeout = 999999999999ULL;\n+\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x00\");\n \n@@ -360,4 +366,4 @@ void SelectParams(const std::string& network)\n void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n {\n     globalChainParams->UpdateVersionBitsParameters(d, nStartTime, nTimeout);\n-}\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "c4275ff8f88bf42eb807b8b36139317f170b3fb6",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7dac7d16bdf2b310923e7f0c645328b0e5eb867/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7dac7d16bdf2b310923e7f0c645328b0e5eb867/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=b7dac7d16bdf2b310923e7f0c645328b0e5eb867",
        "patch": "@@ -44,8 +44,8 @@ class CBaseTestNetParams : public CBaseChainParams\n public:\n     CBaseTestNetParams()\n     {\n-        nRPCPort = 18332;\n-        strDataDir = \"testnet3\";\n+        nRPCPort = 18554;\n+        strDataDir = \"testnet5\";\n     }\n };\n "
      },
      {
        "sha": "2ff6376be99f401b69401bc5e0ed37d0f2c485fe",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7dac7d16bdf2b310923e7f0c645328b0e5eb867/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7dac7d16bdf2b310923e7f0c645328b0e5eb867/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=b7dac7d16bdf2b310923e7f0c645328b0e5eb867",
        "patch": "@@ -1669,7 +1669,7 @@ class NodeConn(asyncore.dispatcher):\n     }\n     MAGIC_BYTES = {\n         \"mainnet\": b\"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n-        \"testnet3\": b\"\\x0b\\x11\\x09\\x07\",  # testnet3\n+        \"testnet5\": b\"\\x6e\\x65\\x74\\x00\",  # testnet5\n         \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n     }\n "
      }
    ]
  },
  {
    "sha": "503430e0dcd8d00941efea880c08c07aaaa0213d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDM0MzBlMGRjZDhkMDA5NDFlZmVhODgwYzA4YzA3YWFhYTAyMTNk",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2017-06-14T00:57:47Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-11T19:08:59Z"
      },
      "message": "[qa] p2p-compactblocks, p2p-segwit: update for segwit2x",
      "tree": {
        "sha": "d164ef3ffbdbaa0cc8312c03e581d65f642127c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d164ef3ffbdbaa0cc8312c03e581d65f642127c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/503430e0dcd8d00941efea880c08c07aaaa0213d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/503430e0dcd8d00941efea880c08c07aaaa0213d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/503430e0dcd8d00941efea880c08c07aaaa0213d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/503430e0dcd8d00941efea880c08c07aaaa0213d/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7dac7d16bdf2b310923e7f0c645328b0e5eb867",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7dac7d16bdf2b310923e7f0c645328b0e5eb867",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7dac7d16bdf2b310923e7f0c645328b0e5eb867"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "082b0a2c3c794a8ead7ab474aed738ea81a4ca7a",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/503430e0dcd8d00941efea880c08c07aaaa0213d/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/503430e0dcd8d00941efea880c08c07aaaa0213d/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=503430e0dcd8d00941efea880c08c07aaaa0213d",
        "patch": "@@ -101,6 +101,15 @@ def __init__(self):\n         self.extra_args = [[\"-vbparams=segwit:0:0\"], [\"-txindex\"]]\n         self.utxos = []\n \n+    def setup_network(self):\n+        self.nodes = []\n+\n+        # Start up node0 to be a version 1, pre-segwit node.\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, \n+                [[\"-debug\", \"-logtimemicros=1\", \"-bip9params=segwit:0:0\", \"-bip9params=segwit2x:0:0\"], \n+                 [\"-debug\", \"-logtimemicros\", \"-txindex\"]])\n+        connect_nodes(self.nodes[0], 1)\n+\n     def build_block_on_tip(self, node, segwit=False):\n         height = node.getblockcount()\n         tip = node.getbestblockhash()"
      },
      {
        "sha": "f63f66eb1ad535a06bf947d8e0f00571aa365aa4",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/503430e0dcd8d00941efea880c08c07aaaa0213d/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/503430e0dcd8d00941efea880c08c07aaaa0213d/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=503430e0dcd8d00941efea880c08c07aaaa0213d",
        "patch": "@@ -119,6 +119,9 @@ def __init__(self):\n     def setup_network(self):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 1)\n+\n+        # Disable segwit's bip9 parameter to simulate upgrading after activation.\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\", \"-bip9params=segwit:0:0\", \"-bip9params=segwit2x:0:0\"]))\n         connect_nodes(self.nodes[0], 2)\n         self.sync_all()\n "
      }
    ]
  },
  {
    "sha": "394e65cbdeab341db53523556ec8eebb4f2e1f78",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTRlNjVjYmRlYWIzNDFkYjUzNTIzNTU2ZWM4ZWViYjRmMmUxZjc4",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2017-05-29T04:28:46Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-11T19:12:01Z"
      },
      "message": "chainparams: segwit2x deployment on testnet, regtest",
      "tree": {
        "sha": "1497ee5a4bf7a5540e565739f7325392707bc691",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1497ee5a4bf7a5540e565739f7325392707bc691"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/394e65cbdeab341db53523556ec8eebb4f2e1f78",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/394e65cbdeab341db53523556ec8eebb4f2e1f78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/394e65cbdeab341db53523556ec8eebb4f2e1f78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/394e65cbdeab341db53523556ec8eebb4f2e1f78/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "503430e0dcd8d00941efea880c08c07aaaa0213d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/503430e0dcd8d00941efea880c08c07aaaa0213d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/503430e0dcd8d00941efea880c08c07aaaa0213d"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a96d6ac2b6bff0ac929aabccd87cda9f97325c2a",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/394e65cbdeab341db53523556ec8eebb4f2e1f78/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/394e65cbdeab341db53523556ec8eebb4f2e1f78/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=394e65cbdeab341db53523556ec8eebb4f2e1f78",
        "patch": "@@ -209,6 +209,11 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT2X].nStartTime = 1496275200; // June 1, 2017.\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT2X].nTimeout = 1510704000; // November 15th, 2017\n \n+        // Deployment of SegWit2x\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT2X].bit = 4;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT2X].nStartTime = 1496275200; // June 1st, 2017.\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT2X].nTimeout = 1510704000; // November 15th, 2017.\n+\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000000000000000000000100\");\n \n@@ -366,4 +371,4 @@ void SelectParams(const std::string& network)\n void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n {\n     globalChainParams->UpdateVersionBitsParameters(d, nStartTime, nTimeout);\n-}\n\\ No newline at end of file\n+}"
      }
    ]
  },
  {
    "sha": "788d43525980a9109764f714a8005ddb22df656f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODhkNDM1MjU5ODBhOTEwOTc2NGY3MTRhODAwNWRkYjIyZGY2NTZm",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2017-06-05T04:12:33Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-11T19:12:03Z"
      },
      "message": "[consensus] Decouple max-tx-per-block from max-block-size",
      "tree": {
        "sha": "3541531fabc6ada328cbd415b2c4dcd6d0d6efd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3541531fabc6ada328cbd415b2c4dcd6d0d6efd6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/788d43525980a9109764f714a8005ddb22df656f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/788d43525980a9109764f714a8005ddb22df656f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/788d43525980a9109764f714a8005ddb22df656f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/788d43525980a9109764f714a8005ddb22df656f/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "394e65cbdeab341db53523556ec8eebb4f2e1f78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/394e65cbdeab341db53523556ec8eebb4f2e1f78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/394e65cbdeab341db53523556ec8eebb4f2e1f78"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "77942f10b432f3dde8b62d4ed203f2a50cae142a",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/788d43525980a9109764f714a8005ddb22df656f/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/788d43525980a9109764f714a8005ddb22df656f/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=788d43525980a9109764f714a8005ddb22df656f",
        "patch": "@@ -48,7 +48,7 @@ uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {\n ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn) {\n     if (cmpctblock.header.IsNull() || (cmpctblock.shorttxids.empty() && cmpctblock.prefilledtxn.empty()))\n         return READ_STATUS_INVALID;\n-    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_BLOCK_WEIGHT / MIN_SERIALIZABLE_TRANSACTION_WEIGHT)\n+    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_BLOCK_VTX)\n         return READ_STATUS_INVALID;\n \n     assert(header.IsNull() && txn_available.empty());"
      },
      {
        "sha": "4dcc016ef6baa00cdf20e5136aabe9f05afc819b",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/788d43525980a9109764f714a8005ddb22df656f/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/788d43525980a9109764f714a8005ddb22df656f/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=788d43525980a9109764f714a8005ddb22df656f",
        "patch": "@@ -16,8 +16,12 @@ static const unsigned int MAX_BLOCK_WEIGHT = 4000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n static const int64_t MAX_BLOCK_SIGOPS_COST = 80000;\n \n+/** The minimum allowed size for a transaction */\n+static const unsigned int MIN_TRANSACTION_BASE_SIZE = 10;\n /** The maximum allowed size for a transaction, excluding witness data, in bytes */\n static const unsigned int MAX_TX_BASE_SIZE = 1000000;\n+/** The maximum allowed number of transactions per block */\n+static const unsigned int MAX_BLOCK_VTX = (MAX_BLOCK_BASE_SIZE / MIN_TRANSACTION_BASE_SIZE);\n \n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;"
      },
      {
        "sha": "290752a71124d8d2648f52dabfb33d2c18e47a60",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/788d43525980a9109764f714a8005ddb22df656f/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/788d43525980a9109764f714a8005ddb22df656f/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=788d43525980a9109764f714a8005ddb22df656f",
        "patch": "@@ -156,7 +156,7 @@ uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch, std::ve\n     if (nTransactions == 0)\n         return uint256();\n     // check for excessively high numbers of transactions\n-    if (nTransactions > MAX_BLOCK_WEIGHT / MIN_TRANSACTION_WEIGHT)\n+    if (nTransactions > MAX_BLOCK_VTX)\n         return uint256();\n     // there can never be more hashes provided than one for every txid\n     if (vHash.size() > nTransactions)"
      },
      {
        "sha": "984a74c99a22651efc173327341fc94276ee990a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/788d43525980a9109764f714a8005ddb22df656f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/788d43525980a9109764f714a8005ddb22df656f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=788d43525980a9109764f714a8005ddb22df656f",
        "patch": "@@ -2800,7 +2800,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n     // checks that use witness data may be performed here.\n \n     // Size limits\n-    if (block.vtx.empty() || block.vtx.size() * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n+    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_VTX || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MAX_BLOCK_BASE_SIZE)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n \n     // First transaction must be coinbase, the rest must not be"
      }
    ]
  },
  {
    "sha": "6414c3adef8783032af11d78faed12e832ba620d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDE0YzNhZGVmODc4MzAzMmFmMTFkNzhmYWVkMTJlODMyYmE2MjBk",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2017-06-14T01:50:43Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-11T19:12:03Z"
      },
      "message": "[consensus] Forward port BIP102 - 2M block size increase",
      "tree": {
        "sha": "4727af85b2f2184b39b78084e4b1c152b3642e59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4727af85b2f2184b39b78084e4b1c152b3642e59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6414c3adef8783032af11d78faed12e832ba620d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6414c3adef8783032af11d78faed12e832ba620d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6414c3adef8783032af11d78faed12e832ba620d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6414c3adef8783032af11d78faed12e832ba620d/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "788d43525980a9109764f714a8005ddb22df656f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/788d43525980a9109764f714a8005ddb22df656f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/788d43525980a9109764f714a8005ddb22df656f"
      }
    ],
    "stats": {
      "total": 133,
      "additions": 124,
      "deletions": 9
    },
    "files": [
      {
        "sha": "1f9ea199b6e1c216f80dbc65c5e1a51ca9e26ed1",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 41,
        "deletions": 2,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6414c3adef8783032af11d78faed12e832ba620d/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6414c3adef8783032af11d78faed12e832ba620d/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=6414c3adef8783032af11d78faed12e832ba620d",
        "patch": "@@ -9,19 +9,58 @@\n #include <stdlib.h>\n #include <stdint.h>\n \n+/** BIP102 block size increase height */\n+static const unsigned int BIP102_FORK_MIN_HEIGHT = 485218;\n+\n /** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n /** The maximum allowed weight for a block, see BIP 141 (network rule) */\n static const unsigned int MAX_BLOCK_WEIGHT = 4000000;\n+/** The maximum allowed size for a block excluding witness data, in bytes (network rule) */\n+static const unsigned int MAX_LEGACY_BLOCK_SIZE = (1 * 1000 * 1000);\n+inline unsigned int MaxBlockBaseSize(int nHeight, bool fSegWitActive)\n+{\n+    if (!fSegWitActive)\n+        return MAX_LEGACY_BLOCK_SIZE;\n+\n+    if (nHeight < (int)BIP102_FORK_MIN_HEIGHT)\n+        return MAX_LEGACY_BLOCK_SIZE;\n+\n+    return (2 * 1000 * 1000);\n+}\n+\n+inline unsigned int MaxBlockBaseSize()\n+{\n+    return MaxBlockBaseSize(99999999, true);\n+}\n+\n /** The maximum allowed number of signature check operations in a block (network rule) */\n-static const int64_t MAX_BLOCK_SIGOPS_COST = 80000;\n+static const uint64_t MAX_BLOCK_BASE_SIGOPS = 20000;\n+inline int64_t MaxBlockSigOpsCost(int nHeight, bool fSegWitActive)\n+{\n+    if (!fSegWitActive)\n+        return (MAX_BLOCK_BASE_SIGOPS * 4 /* WITNESS_SCALE_FACTOR */);\n+\n+    if (nHeight < (int)BIP102_FORK_MIN_HEIGHT)\n+        return (MAX_BLOCK_BASE_SIGOPS * 4 /* WITNESS_SCALE_FACTOR */);\n+\n+    return ((2 * MAX_BLOCK_BASE_SIGOPS) * 4 /* WITNESS_SCALE_FACTOR */);\n+}\n+\n+inline int64_t MaxBlockSigOpsCost()\n+{\n+    return MaxBlockSigOpsCost(99999999, true);\n+}\n+\n+/** The maximum allowed number of transactions per block */\n+static const unsigned int MAX_BLOCK_VTX_SIZE = 1000000;\n \n /** The minimum allowed size for a transaction */\n static const unsigned int MIN_TRANSACTION_BASE_SIZE = 10;\n /** The maximum allowed size for a transaction, excluding witness data, in bytes */\n static const unsigned int MAX_TX_BASE_SIZE = 1000000;\n /** The maximum allowed number of transactions per block */\n-static const unsigned int MAX_BLOCK_VTX = (MAX_BLOCK_BASE_SIZE / MIN_TRANSACTION_BASE_SIZE);\n+static const unsigned int MAX_BLOCK_VTX = (MaxBlockBaseSize() / MIN_TRANSACTION_BASE_SIZE);\n \n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;"
      },
      {
        "sha": "92211474599959d6a3a0e7ac6f1951aa1b57ae2a",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 1,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6414c3adef8783032af11d78faed12e832ba620d/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6414c3adef8783032af11d78faed12e832ba620d/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=6414c3adef8783032af11d78faed12e832ba620d",
        "patch": "@@ -229,7 +229,7 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n     // TODO: switch to weight-based accounting for packages instead of vsize-based accounting.\n     if (nBlockWeight + WITNESS_SCALE_FACTOR * packageSize >= nBlockMaxWeight)\n         return false;\n-    if (nBlockSigOpsCost + packageSigOpsCost >= MAX_BLOCK_SIGOPS_COST)\n+    if (nBlockSigOpsCost + packageSigOpsCost >= MaxBlockSigOpsCost(nHeight, fIncludeWitness))\n         return false;\n     return true;\n }\n@@ -258,6 +258,59 @@ bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& packa\n     return true;\n }\n \n+bool BlockAssembler::TestForBlock(CTxMemPool::txiter iter)\n+{\n+    if (nBlockWeight + iter->GetTxWeight() >= nBlockMaxWeight) {\n+        // If the block is so close to full that no more txs will fit\n+        // or if we've tried more than 50 times to fill remaining space\n+        // then flag that the block is finished\n+        if (nBlockWeight >  nBlockMaxWeight - 400 || lastFewTxs > 50) {\n+             blockFinished = true;\n+             return false;\n+        }\n+        // Once we're within 4000 weight of a full block, only look at 50 more txs\n+        // to try to fill the remaining space.\n+        if (nBlockWeight > nBlockMaxWeight - 4000) {\n+            lastFewTxs++;\n+        }\n+        return false;\n+    }\n+\n+    if (fNeedSizeAccounting) {\n+        if (nBlockSize + ::GetSerializeSize(iter->GetTx(), SER_NETWORK, PROTOCOL_VERSION) >= nBlockMaxSize) {\n+            if (nBlockSize >  nBlockMaxSize - 100 || lastFewTxs > 50) {\n+                 blockFinished = true;\n+                 return false;\n+            }\n+            if (nBlockSize > nBlockMaxSize - 1000) {\n+                lastFewTxs++;\n+            }\n+            return false;\n+        }\n+    }\n+\n+    uint64_t sigOpMax = MaxBlockSigOpsCost(nHeight, fIncludeWitness);\n+    if (nBlockSigOpsCost + iter->GetSigOpCost() >= sigOpMax) {\n+        // If the block has room for no more sig ops then\n+        // flag that the block is finished\n+        if (nBlockSigOpsCost > sigOpMax - 8) {\n+            blockFinished = true;\n+            return false;\n+        }\n+        // Otherwise attempt to find another tx with fewer sigops\n+        // to put in the block.\n+        return false;\n+    }\n+\n+    // Must check that lock times are still valid\n+    // This can be removed once MTP is always enforced\n+    // as long as reorgs keep the mempool consistent.\n+    if (!IsFinalTx(iter->GetTx(), nHeight, nLockTimeCutoff))\n+        return false;\n+\n+    return true;\n+}\n+\n void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n {\n     pblock->vtx.emplace_back(iter->GetSharedTx());"
      },
      {
        "sha": "e69acc1ad20a8b72f4ab28fc9c4da128926e3faf",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6414c3adef8783032af11d78faed12e832ba620d/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6414c3adef8783032af11d78faed12e832ba620d/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=6414c3adef8783032af11d78faed12e832ba620d",
        "patch": "@@ -27,7 +27,7 @@ static const unsigned int MAX_STANDARD_TX_WEIGHT = 400000;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n-static const unsigned int MAX_STANDARD_TX_SIGOPS_COST = MAX_BLOCK_SIGOPS_COST/5;\n+static const unsigned int MAX_STANDARD_TX_SIGOPS_COST = 16000;\n /** Default for -maxmempool, maximum megabytes of mempool memory usage */\n static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /** Default for -incrementalrelayfee, which sets the minimum feerate increase for mempool limiting or BIP 125 replacement **/"
      },
      {
        "sha": "cb481da3213a3f7f3caabe705324cb7be44a8018",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6414c3adef8783032af11d78faed12e832ba620d/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6414c3adef8783032af11d78faed12e832ba620d/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=6414c3adef8783032af11d78faed12e832ba620d",
        "patch": "@@ -655,17 +655,28 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n     result.push_back(Pair(\"mutable\", aMutable));\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n+<<<<<<< HEAD\n     int64_t nSigOpLimit = MAX_BLOCK_SIGOPS_COST;\n     int64_t nSizeLimit = MAX_BLOCK_SERIALIZED_SIZE;\n+=======\n+    int64_t nSigOpLimit = MaxBlockSigOpsCost(pindexPrev->nHeight+1, fPreSegWit?false:true);\n+>>>>>>> 3fe3029b9... [consensus] Forward port BIP102 - 2M block size increase\n     if (fPreSegWit) {\n         assert(nSigOpLimit % WITNESS_SCALE_FACTOR == 0);\n         nSigOpLimit /= WITNESS_SCALE_FACTOR;\n         assert(nSizeLimit % WITNESS_SCALE_FACTOR == 0);\n         nSizeLimit /= WITNESS_SCALE_FACTOR;\n     }\n     result.push_back(Pair(\"sigoplimit\", nSigOpLimit));\n+<<<<<<< HEAD\n     result.push_back(Pair(\"sizelimit\", nSizeLimit));\n     if (!fPreSegWit) {\n+=======\n+    if (fPreSegWit) {\n+        result.push_back(Pair(\"sizelimit\", (int64_t)MAX_LEGACY_BLOCK_SIZE));\n+    } else {\n+        result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SERIALIZED_SIZE));\n+>>>>>>> 3fe3029b9... [consensus] Forward port BIP102 - 2M block size increase\n         result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n     }\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));"
      },
      {
        "sha": "15a6718c3299bc7e01f700c03bdf51f4f471d572",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6414c3adef8783032af11d78faed12e832ba620d/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6414c3adef8783032af11d78faed12e832ba620d/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=6414c3adef8783032af11d78faed12e832ba620d",
        "patch": "@@ -279,7 +279,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOpsCost(80).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n+    // BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey)); TODO\n     mempool.clear();\n \n     // block size > limit"
      },
      {
        "sha": "ead2631fdbc452d60a58588b5f7d1da304c751ef",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6414c3adef8783032af11d78faed12e832ba620d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6414c3adef8783032af11d78faed12e832ba620d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=6414c3adef8783032af11d78faed12e832ba620d",
        "patch": "@@ -1776,7 +1776,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n         // * p2sh (when P2SH enabled in flags and excludes coinbase)\n         // * witness (when witness enabled in flags and excludes coinbase)\n         nSigOpsCost += GetTransactionSigOpCost(tx, view, flags);\n-        if (nSigOpsCost > MAX_BLOCK_SIGOPS_COST)\n+        if (nSigOpsCost > MaxBlockSigOpsCost(pindex->nHeight, (flags & SCRIPT_VERIFY_WITNESS) ? true : false))\n             return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                              REJECT_INVALID, \"bad-blk-sigops\");\n \n@@ -2800,7 +2800,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n     // checks that use witness data may be performed here.\n \n     // Size limits\n-    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_VTX || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MAX_BLOCK_BASE_SIZE)\n+    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_VTX || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MAX_BLOCK_SERIALIZED_SIZE)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n \n     // First transaction must be coinbase, the rest must not be\n@@ -2821,7 +2821,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n     {\n         nSigOps += GetLegacySigOpCount(*tx);\n     }\n-    if (nSigOps * WITNESS_SCALE_FACTOR > MAX_BLOCK_SIGOPS_COST)\n+    if (nSigOps * WITNESS_SCALE_FACTOR > MaxBlockSigOpsCost())\n         return state.DoS(100, false, REJECT_INVALID, \"bad-blk-sigops\", false, \"out-of-bounds SigOpCount\");\n \n     if (fCheckPOW && fCheckMerkleRoot)\n@@ -2978,7 +2978,8 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256^2(witness root, witness nonce). In case there are\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n-    if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_ACTIVE) {\n+    bool fSegWitActive = (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_ACTIVE);\n+    if (fSegWitActive) {\n         int commitpos = GetWitnessCommitmentIndex(block);\n         if (commitpos != -1) {\n             bool malleated = false;\n@@ -2997,6 +2998,9 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n         }\n     }\n \n+    if (::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MaxBlockBaseSize(nHeight, fSegWitActive))\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n+\n     // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room for spam\n     if (!fHaveWitness) {\n       for (const auto& tx : block.vtx) {\n@@ -3006,6 +3010,14 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n         }\n     }\n \n+    unsigned int nSigOps = 0;\n+    for (const auto& tx : block.vtx)\n+    {\n+        nSigOps += GetLegacySigOpCount(*tx);\n+    }\n+    if (nSigOps * WITNESS_SCALE_FACTOR > MaxBlockSigOpsCost(nHeight, fSegWitActive))\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-blk-sigops\", false, \"out-of-bounds SigOpCount\");\n+\n     // After the coinbase witness nonce and commitment are verified,\n     // we can check if the block weight passes (before we've checked the\n     // coinbase witness, it would be possible for the weight to be too"
      }
    ]
  },
  {
    "sha": "b5154842cc5f8c73f8ba53f47a50ee40afb4cf3e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTE1NDg0MmNjNWY4YzczZjhiYTUzZjQ3YTUwZWU0MGFmYjRjZjNl",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2017-06-15T18:29:15Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-11T19:12:03Z"
      },
      "message": "consensus/consensus.h: unify fork trigger code",
      "tree": {
        "sha": "bad84a6e0ae72faa501ee21435e050de64c20009",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bad84a6e0ae72faa501ee21435e050de64c20009"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5154842cc5f8c73f8ba53f47a50ee40afb4cf3e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5154842cc5f8c73f8ba53f47a50ee40afb4cf3e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5154842cc5f8c73f8ba53f47a50ee40afb4cf3e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5154842cc5f8c73f8ba53f47a50ee40afb4cf3e/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6414c3adef8783032af11d78faed12e832ba620d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6414c3adef8783032af11d78faed12e832ba620d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6414c3adef8783032af11d78faed12e832ba620d"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 12,
      "deletions": 7
    },
    "files": [
      {
        "sha": "95d10a5bb444bf085119d0c2aa16555dea087de1",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5154842cc5f8c73f8ba53f47a50ee40afb4cf3e/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5154842cc5f8c73f8ba53f47a50ee40afb4cf3e/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=b5154842cc5f8c73f8ba53f47a50ee40afb4cf3e",
        "patch": "@@ -17,13 +17,21 @@ static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n /** The maximum allowed weight for a block, see BIP 141 (network rule) */\n static const unsigned int MAX_BLOCK_WEIGHT = 4000000;\n /** The maximum allowed size for a block excluding witness data, in bytes (network rule) */\n-static const unsigned int MAX_LEGACY_BLOCK_SIZE = (1 * 1000 * 1000);\n-inline unsigned int MaxBlockBaseSize(int nHeight, bool fSegWitActive)\n+static inline bool BIP102active(int nHeight, bool fSegWitActive)\n {\n     if (!fSegWitActive)\n-        return MAX_LEGACY_BLOCK_SIZE;\n+        return false;\n \n     if (nHeight < (int)BIP102_FORK_MIN_HEIGHT)\n+        return false;\n+\n+    return true;\n+}\n+\n+static const unsigned int MAX_LEGACY_BLOCK_SIZE = (1 * 1000 * 1000);\n+inline unsigned int MaxBlockBaseSize(int nHeight, bool fSegWitActive)\n+{\n+    if (!BIP102active(nHeight, fSegWitActive))\n         return MAX_LEGACY_BLOCK_SIZE;\n \n     return (2 * 1000 * 1000);\n@@ -38,10 +46,7 @@ inline unsigned int MaxBlockBaseSize()\n static const uint64_t MAX_BLOCK_BASE_SIGOPS = 20000;\n inline int64_t MaxBlockSigOpsCost(int nHeight, bool fSegWitActive)\n {\n-    if (!fSegWitActive)\n-        return (MAX_BLOCK_BASE_SIGOPS * 4 /* WITNESS_SCALE_FACTOR */);\n-\n-    if (nHeight < (int)BIP102_FORK_MIN_HEIGHT)\n+    if (!BIP102active(nHeight, fSegWitActive))\n         return (MAX_BLOCK_BASE_SIGOPS * 4 /* WITNESS_SCALE_FACTOR */);\n \n     return ((2 * MAX_BLOCK_BASE_SIGOPS) * 4 /* WITNESS_SCALE_FACTOR */);"
      }
    ]
  },
  {
    "sha": "7a78b05e5121d8a22ec62d712232a50dac2611f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTc4YjA1ZTUxMjFkOGEyMmVjNjJkNzEyMjMyYTUwZGFjMjYxMWYz",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2017-06-15T19:05:14Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-11T19:12:03Z"
      },
      "message": "[consensus] Add 3-month minimum seasoning requirement for SegWit\nbefore changing base block size.",
      "tree": {
        "sha": "5bd0eedd5f2e941d63ad957fa51ebd28b290358c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5bd0eedd5f2e941d63ad957fa51ebd28b290358c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a78b05e5121d8a22ec62d712232a50dac2611f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a78b05e5121d8a22ec62d712232a50dac2611f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a78b05e5121d8a22ec62d712232a50dac2611f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a78b05e5121d8a22ec62d712232a50dac2611f3/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5154842cc5f8c73f8ba53f47a50ee40afb4cf3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5154842cc5f8c73f8ba53f47a50ee40afb4cf3e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5154842cc5f8c73f8ba53f47a50ee40afb4cf3e"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 12,
      "deletions": 7
    },
    "files": [
      {
        "sha": "b2d366e6bbd72016728c47502273d56e0826b999",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a78b05e5121d8a22ec62d712232a50dac2611f3/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a78b05e5121d8a22ec62d712232a50dac2611f3/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=7a78b05e5121d8a22ec62d712232a50dac2611f3",
        "patch": "@@ -11,15 +11,16 @@\n \n /** BIP102 block size increase height */\n static const unsigned int BIP102_FORK_MIN_HEIGHT = 485218;\n+static const unsigned int BIP102_FORK_BUFFER = (144 * 90);\n \n /** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n /** The maximum allowed weight for a block, see BIP 141 (network rule) */\n static const unsigned int MAX_BLOCK_WEIGHT = 4000000;\n /** The maximum allowed size for a block excluding witness data, in bytes (network rule) */\n-static inline bool BIP102active(int nHeight, bool fSegWitActive)\n+static inline bool BIP102active(int nHeight, bool fSegwitSeasoned)\n {\n-    if (!fSegWitActive)\n+    if (!fSegwitSeasoned)\n         return false;\n \n     if (nHeight < (int)BIP102_FORK_MIN_HEIGHT)\n@@ -29,9 +30,9 @@ static inline bool BIP102active(int nHeight, bool fSegWitActive)\n }\n \n static const unsigned int MAX_LEGACY_BLOCK_SIZE = (1 * 1000 * 1000);\n-inline unsigned int MaxBlockBaseSize(int nHeight, bool fSegWitActive)\n+inline unsigned int MaxBlockBaseSize(int nHeight, bool fSegwitSeasoned)\n {\n-    if (!BIP102active(nHeight, fSegWitActive))\n+    if (!BIP102active(nHeight, fSegwitSeasoned))\n         return MAX_LEGACY_BLOCK_SIZE;\n \n     return (2 * 1000 * 1000);\n@@ -44,9 +45,9 @@ inline unsigned int MaxBlockBaseSize()\n \n /** The maximum allowed number of signature check operations in a block (network rule) */\n static const uint64_t MAX_BLOCK_BASE_SIGOPS = 20000;\n-inline int64_t MaxBlockSigOpsCost(int nHeight, bool fSegWitActive)\n+inline int64_t MaxBlockSigOpsCost(int nHeight, bool fSegwitSeasoned)\n {\n-    if (!BIP102active(nHeight, fSegWitActive))\n+    if (!BIP102active(nHeight, fSegwitSeasoned))\n         return (MAX_BLOCK_BASE_SIGOPS * 4 /* WITNESS_SCALE_FACTOR */);\n \n     return ((2 * MAX_BLOCK_BASE_SIGOPS) * 4 /* WITNESS_SCALE_FACTOR */);"
      },
      {
        "sha": "0f53a519d3e1aa296a3bcc7678c162cb1f463548",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a78b05e5121d8a22ec62d712232a50dac2611f3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a78b05e5121d8a22ec62d712232a50dac2611f3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7a78b05e5121d8a22ec62d712232a50dac2611f3",
        "patch": "@@ -2978,6 +2978,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256^2(witness root, witness nonce). In case there are\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n+    bool fSegwitSeasoned = false;\n     bool fSegWitActive = (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_ACTIVE);\n     if (fSegWitActive) {\n         int commitpos = GetWitnessCommitmentIndex(block);\n@@ -2996,9 +2997,12 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n             }\n             fHaveWitness = true;\n         }\n+\n+        const CBlockIndex* pindexForkBuffer = pindexPrev->GetAncestor(nHeight - BIP102_FORK_BUFFER);\n+        fSegwitSeasoned = (VersionBitsState(pindexForkBuffer, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_ACTIVE);\n     }\n \n-    if (::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MaxBlockBaseSize(nHeight, fSegWitActive))\n+    if (::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MaxBlockBaseSize(nHeight, fSegwitSeasoned))\n         return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n \n     // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room for spam"
      }
    ]
  },
  {
    "sha": "63231d0e8afc4d21bd030983eff4e53f6eee55bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzIzMWQwZThhZmM0ZDIxYmQwMzA5ODNlZmY0ZTUzZjZlZWU1NWJm",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2017-06-16T05:10:04Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-17T17:08:31Z"
      },
      "message": "[consensus] Scale block weight based on base block size",
      "tree": {
        "sha": "904b9c56990635ce92663015dc6e1df480ebae3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/904b9c56990635ce92663015dc6e1df480ebae3d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63231d0e8afc4d21bd030983eff4e53f6eee55bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63231d0e8afc4d21bd030983eff4e53f6eee55bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63231d0e8afc4d21bd030983eff4e53f6eee55bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63231d0e8afc4d21bd030983eff4e53f6eee55bf/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a78b05e5121d8a22ec62d712232a50dac2611f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a78b05e5121d8a22ec62d712232a50dac2611f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a78b05e5121d8a22ec62d712232a50dac2611f3"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 24,
      "deletions": 17
    },
    "files": [
      {
        "sha": "840469eeb6cbd0aeb6f1aa3857d30f41b4f8c9a9",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63231d0e8afc4d21bd030983eff4e53f6eee55bf/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63231d0e8afc4d21bd030983eff4e53f6eee55bf/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=63231d0e8afc4d21bd030983eff4e53f6eee55bf",
        "patch": "@@ -12,7 +12,7 @@\n /** BIP102 block size increase height */\n static const unsigned int BIP102_FORK_MIN_HEIGHT = 485218;\n static const unsigned int BIP102_FORK_BUFFER = (144 * 90);\n-\n+  \n /** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n /** The maximum allowed weight for a block, see BIP 141 (network rule) */\n@@ -58,6 +58,17 @@ inline int64_t MaxBlockSigOpsCost()\n     return MaxBlockSigOpsCost(99999999, true);\n }\n \n+/** The maximum allowed weight for a block, see BIP 141 (network rule) */\n+inline unsigned int MaxBlockWeight(int nHeight, bool fSegwitSeasoned)\n+{\n+    return (MaxBlockBaseSize(nHeight, fSegwitSeasoned) * 4 /* WITNESS_SCALE_FACTOR */);\n+}\n+\n+inline unsigned int MaxBlockWeight()\n+{\n+    return MaxBlockWeight(99999999, true);\n+}\n+\n /** The maximum allowed number of transactions per block */\n static const unsigned int MAX_BLOCK_VTX_SIZE = 1000000;\n "
      },
      {
        "sha": "8b01ea4a4ec5561b9852ecf0f846879dc8cbccc4",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63231d0e8afc4d21bd030983eff4e53f6eee55bf/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63231d0e8afc4d21bd030983eff4e53f6eee55bf/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=63231d0e8afc4d21bd030983eff4e53f6eee55bf",
        "patch": "@@ -107,6 +107,13 @@ static BlockAssembler::Options DefaultOptions(const CChainParams& params)\n         options.blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n     }\n     return options;\n+\n+    // Limit weight to between 4K and MAX_BLOCK_WEIGHT-4K for sanity:\n+    nBlockMaxWeight = std::max((unsigned int)4000, std::min((unsigned int)(MaxBlockWeight(0, false)-4000), nBlockMaxWeight));\n+    // Limit size to between 1K and MAX_BLOCK_SERIALIZED_SIZE-1K for sanity:\n+    nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SERIALIZED_SIZE-1000), nBlockMaxSize));\n+    // Whether we need to account for byte usage (in addition to weight usage)\n+    fNeedSizeAccounting = (nBlockMaxSize < MAX_BLOCK_SERIALIZED_SIZE-1000);\n }\n \n BlockAssembler::BlockAssembler(const CChainParams& params) : BlockAssembler(params, DefaultOptions(params)) {}\n@@ -229,7 +236,7 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n     // TODO: switch to weight-based accounting for packages instead of vsize-based accounting.\n     if (nBlockWeight + WITNESS_SCALE_FACTOR * packageSize >= nBlockMaxWeight)\n         return false;\n-    if (nBlockSigOpsCost + packageSigOpsCost >= MaxBlockSigOpsCost(nHeight, fIncludeWitness))\n+    if (nBlockSigOpsCost + packageSigOpsCost >= (uint64_t)MaxBlockSigOpsCost(nHeight, fIncludeWitness)) // note - excludes bip102 buffer\n         return false;\n     return true;\n }"
      },
      {
        "sha": "7bdeee126d994362e78e7bc5d31b29d3e7c14422",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63231d0e8afc4d21bd030983eff4e53f6eee55bf/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63231d0e8afc4d21bd030983eff4e53f6eee55bf/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=63231d0e8afc4d21bd030983eff4e53f6eee55bf",
        "patch": "@@ -655,29 +655,18 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n     result.push_back(Pair(\"mutable\", aMutable));\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n-<<<<<<< HEAD\n     int64_t nSigOpLimit = MAX_BLOCK_SIGOPS_COST;\n     int64_t nSizeLimit = MAX_BLOCK_SERIALIZED_SIZE;\n-=======\n-    int64_t nSigOpLimit = MaxBlockSigOpsCost(pindexPrev->nHeight+1, fPreSegWit?false:true);\n->>>>>>> 3fe3029b9... [consensus] Forward port BIP102 - 2M block size increase\n     if (fPreSegWit) {\n         assert(nSigOpLimit % WITNESS_SCALE_FACTOR == 0);\n         nSigOpLimit /= WITNESS_SCALE_FACTOR;\n         assert(nSizeLimit % WITNESS_SCALE_FACTOR == 0);\n         nSizeLimit /= WITNESS_SCALE_FACTOR;\n     }\n     result.push_back(Pair(\"sigoplimit\", nSigOpLimit));\n-<<<<<<< HEAD\n     result.push_back(Pair(\"sizelimit\", nSizeLimit));\n     if (!fPreSegWit) {\n-=======\n-    if (fPreSegWit) {\n-        result.push_back(Pair(\"sizelimit\", (int64_t)MAX_LEGACY_BLOCK_SIZE));\n-    } else {\n-        result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SERIALIZED_SIZE));\n->>>>>>> 3fe3029b9... [consensus] Forward port BIP102 - 2M block size increase\n-        result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n+        result.push_back(Pair(\"weightlimit\", (int64_t)MaxBlockWeight(0, false)));\n     }\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));"
      },
      {
        "sha": "7066d60405911153837238dd564d1c20c3569565",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63231d0e8afc4d21bd030983eff4e53f6eee55bf/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63231d0e8afc4d21bd030983eff4e53f6eee55bf/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=63231d0e8afc4d21bd030983eff4e53f6eee55bf",
        "patch": "@@ -3019,7 +3019,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     {\n         nSigOps += GetLegacySigOpCount(*tx);\n     }\n-    if (nSigOps * WITNESS_SCALE_FACTOR > MaxBlockSigOpsCost(nHeight, fSegWitActive))\n+    if (nSigOps * WITNESS_SCALE_FACTOR > MaxBlockSigOpsCost(nHeight, fSegwitSeasoned))\n         return state.DoS(100, false, REJECT_INVALID, \"bad-blk-sigops\", false, \"out-of-bounds SigOpCount\");\n \n     // After the coinbase witness nonce and commitment are verified,\n@@ -3028,7 +3028,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     // large by filling up the coinbase witness, which doesn't change\n     // the block hash, so we couldn't mark the block as permanently\n     // failed).\n-    if (GetBlockWeight(block) > MAX_BLOCK_WEIGHT) {\n+    if (GetBlockWeight(block) > MaxBlockWeight(nHeight, fSegwitSeasoned)) {\n         return state.DoS(100, false, REJECT_INVALID, \"bad-blk-weight\", false, strprintf(\"%s : weight limit failed\", __func__));\n     }\n "
      },
      {
        "sha": "af920b6c86590a83d54f23a90d044054f448a1e1",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63231d0e8afc4d21bd030983eff4e53f6eee55bf/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63231d0e8afc4d21bd030983eff4e53f6eee55bf/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=63231d0e8afc4d21bd030983eff4e53f6eee55bf",
        "patch": "@@ -231,7 +231,7 @@ def run_test(self):\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n         tmpl = self.nodes[0].getblocktemplate({'rules':['segwit']})\n         assert(tmpl['sizelimit'] >= 3999577)  # actual maximum size is lower due to minimum mandatory non-witness data\n-        assert(tmpl['weightlimit'] == 4000000)\n+        assert(tmpl['weightlimit'] == 4000000)  # limit at first step\n         assert(tmpl['sigoplimit'] == 80000)\n         assert(tmpl['transactions'][0]['txid'] == txid)\n         assert(tmpl['transactions'][0]['sigops'] == 8)"
      }
    ]
  },
  {
    "sha": "25fbb4ad41572403d6beef977008763b9bf7b3c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWZiYjRhZDQxNTcyNDAzZDZiZWVmOTc3MDA4NzYzYjliZjdiM2Mx",
    "commit": {
      "author": {
        "name": "Justin Langston",
        "email": "justin@bitpay.com",
        "date": "2017-06-17T16:27:46Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-17T17:08:33Z"
      },
      "message": "Cleaning up duplicate testnet segwit2x deployment block",
      "tree": {
        "sha": "b70e6ba2190ac7cf58bcc00948f546e61c6538d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b70e6ba2190ac7cf58bcc00948f546e61c6538d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25fbb4ad41572403d6beef977008763b9bf7b3c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25fbb4ad41572403d6beef977008763b9bf7b3c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25fbb4ad41572403d6beef977008763b9bf7b3c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25fbb4ad41572403d6beef977008763b9bf7b3c1/comments",
    "author": {
      "login": "nitsujlangston",
      "id": 1213436,
      "node_id": "MDQ6VXNlcjEyMTM0MzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1213436?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nitsujlangston",
      "html_url": "https://github.com/nitsujlangston",
      "followers_url": "https://api.github.com/users/nitsujlangston/followers",
      "following_url": "https://api.github.com/users/nitsujlangston/following{/other_user}",
      "gists_url": "https://api.github.com/users/nitsujlangston/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nitsujlangston/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nitsujlangston/subscriptions",
      "organizations_url": "https://api.github.com/users/nitsujlangston/orgs",
      "repos_url": "https://api.github.com/users/nitsujlangston/repos",
      "events_url": "https://api.github.com/users/nitsujlangston/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nitsujlangston/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "63231d0e8afc4d21bd030983eff4e53f6eee55bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63231d0e8afc4d21bd030983eff4e53f6eee55bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63231d0e8afc4d21bd030983eff4e53f6eee55bf"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 0,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c88bf68f636859bc2b1ee40db1888c4ed137fbf6",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25fbb4ad41572403d6beef977008763b9bf7b3c1/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25fbb4ad41572403d6beef977008763b9bf7b3c1/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=25fbb4ad41572403d6beef977008763b9bf7b3c1",
        "patch": "@@ -209,11 +209,6 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT2X].nStartTime = 1496275200; // June 1, 2017.\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT2X].nTimeout = 1510704000; // November 15th, 2017\n \n-        // Deployment of SegWit2x\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT2X].bit = 4;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT2X].nStartTime = 1496275200; // June 1st, 2017.\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT2X].nTimeout = 1510704000; // November 15th, 2017.\n-\n         // The best chain should have at least this much work.\n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000000000000000000000100\");\n "
      }
    ]
  },
  {
    "sha": "0f76866e2251cd904f06691c70278f7f22f73b09",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjc2ODY2ZTIyNTFjZDkwNGYwNjY5MWM3MDI3OGY3ZjIyZjczYjA5",
    "commit": {
      "author": {
        "name": "Christopher Jeffrey",
        "email": "chjjeffrey@gmail.com",
        "date": "2017-06-19T20:14:24Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-17T17:08:33Z"
      },
      "message": "net: increase max net msg size to 8mb.",
      "tree": {
        "sha": "bf47339de458df7d9d82dc90fec9b3f157db1085",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf47339de458df7d9d82dc90fec9b3f157db1085"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f76866e2251cd904f06691c70278f7f22f73b09",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f76866e2251cd904f06691c70278f7f22f73b09",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f76866e2251cd904f06691c70278f7f22f73b09",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f76866e2251cd904f06691c70278f7f22f73b09/comments",
    "author": {
      "login": "chjj",
      "id": 470564,
      "node_id": "MDQ6VXNlcjQ3MDU2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/470564?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chjj",
      "html_url": "https://github.com/chjj",
      "followers_url": "https://api.github.com/users/chjj/followers",
      "following_url": "https://api.github.com/users/chjj/following{/other_user}",
      "gists_url": "https://api.github.com/users/chjj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chjj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chjj/subscriptions",
      "organizations_url": "https://api.github.com/users/chjj/orgs",
      "repos_url": "https://api.github.com/users/chjj/repos",
      "events_url": "https://api.github.com/users/chjj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chjj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25fbb4ad41572403d6beef977008763b9bf7b3c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25fbb4ad41572403d6beef977008763b9bf7b3c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25fbb4ad41572403d6beef977008763b9bf7b3c1"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a51ed3ead3181323352bf42e7719394c4df8d21e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f76866e2251cd904f06691c70278f7f22f73b09/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f76866e2251cd904f06691c70278f7f22f73b09/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0f76866e2251cd904f06691c70278f7f22f73b09",
        "patch": "@@ -52,8 +52,8 @@ static const int FEELER_INTERVAL = 120;\n static const unsigned int MAX_INV_SZ = 50000;\n /** The maximum number of new addresses to accumulate before announcing. */\n static const unsigned int MAX_ADDR_TO_SEND = 1000;\n-/** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */\n-static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;\n+/** Maximum length of incoming protocol messages (no message over 8 MB is currently acceptable). */\n+static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 8 * 1000 * 1000;\n /** Maximum length of strSubVer in `version` message */\n static const unsigned int MAX_SUBVERSION_LENGTH = 256;\n /** Maximum number of automatic outgoing nodes */"
      }
    ]
  },
  {
    "sha": "16cafe51acee670f35505ff2bb519cc3830fb4e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmNhZmU1MWFjZWU2NzBmMzU1MDVmZjJiYjUxOWNjMzgzMGZiNGUy",
    "commit": {
      "author": {
        "name": "Christopher Jeffrey",
        "email": "chjjeffrey@gmail.com",
        "date": "2017-06-19T20:47:11Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-17T17:08:33Z"
      },
      "message": "validation: correctly pass `fSegwitSeasoned` to calls in ConnectBlock().\n\nThe way `fSegwitSeasoned` is currently passed to `MaxBlockSigopsCost` in\n`ConnectBlock` is inconsistent from any other calls, and creates an odd\nsituation where sigop limits may increase before blocksize limits.\n\nThis commit correctly passes in the segwit activation status within\nthe window of the fork buffer.",
      "tree": {
        "sha": "0673e7cfb9a3c7a93d5b3bdc6dd7c4b9615333ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0673e7cfb9a3c7a93d5b3bdc6dd7c4b9615333ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16cafe51acee670f35505ff2bb519cc3830fb4e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16cafe51acee670f35505ff2bb519cc3830fb4e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16cafe51acee670f35505ff2bb519cc3830fb4e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16cafe51acee670f35505ff2bb519cc3830fb4e2/comments",
    "author": {
      "login": "chjj",
      "id": 470564,
      "node_id": "MDQ6VXNlcjQ3MDU2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/470564?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chjj",
      "html_url": "https://github.com/chjj",
      "followers_url": "https://api.github.com/users/chjj/followers",
      "following_url": "https://api.github.com/users/chjj/following{/other_user}",
      "gists_url": "https://api.github.com/users/chjj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chjj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chjj/subscriptions",
      "organizations_url": "https://api.github.com/users/chjj/orgs",
      "repos_url": "https://api.github.com/users/chjj/repos",
      "events_url": "https://api.github.com/users/chjj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chjj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f76866e2251cd904f06691c70278f7f22f73b09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f76866e2251cd904f06691c70278f7f22f73b09",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f76866e2251cd904f06691c70278f7f22f73b09"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 42,
      "deletions": 9
    },
    "files": [
      {
        "sha": "cf3d08b674f42832025f548485cc437a9cd66853",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 5,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16cafe51acee670f35505ff2bb519cc3830fb4e2/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16cafe51acee670f35505ff2bb519cc3830fb4e2/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=16cafe51acee670f35505ff2bb519cc3830fb4e2",
        "patch": "@@ -1589,6 +1589,7 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n     bool fStrictPayToScriptHash = (pindex->GetBlockTime() >= nBIP16SwitchTime);\n \n     unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n+    bool fSegwitSeasoned = false;\n \n     // Start enforcing the DERSIG (BIP66) rule\n     if (pindex->nHeight >= consensusparams.BIP66Height) {\n@@ -1725,8 +1726,24 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n         nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n     }\n \n-    // Get the script flags for this block\n-    unsigned int flags = GetBlockScriptFlags(pindex, chainparams.GetConsensus());\n+    // Start enforcing WITNESS rules using versionbits logic.\n+    if (IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) {\n+        flags |= SCRIPT_VERIFY_WITNESS;\n+        flags |= SCRIPT_VERIFY_NULLDUMMY;\n+        fSegwitSeasoned = IsWitnessSeasoned(pindex->pprev, chainparams.GetConsensus());\n+    }\n+\n+    // SEGWIT2X signalling.\n+    if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT2X, versionbitscache) == THRESHOLD_ACTIVE &&\n+         !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&  // Segwit is not locked in\n+         !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) // and is not active.\n+    {\n+        bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS;\n+        bool fSegbit = (pindex->nVersion & VersionBitsMask(chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) != 0;\n+        if (!(fVersionBits && fSegbit)) {\n+            return state.DoS(0, error(\"ConnectBlock(): relayed block must signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n+        }\n+    }\n \n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n     LogPrint(BCLog::BENCH, \"    - Fork checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime2 - nTime1), nTimeForks * 0.000001);\n@@ -1776,7 +1793,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n         // * p2sh (when P2SH enabled in flags and excludes coinbase)\n         // * witness (when witness enabled in flags and excludes coinbase)\n         nSigOpsCost += GetTransactionSigOpCost(tx, view, flags);\n-        if (nSigOpsCost > MaxBlockSigOpsCost(pindex->nHeight, (flags & SCRIPT_VERIFY_WITNESS) ? true : false))\n+        if (nSigOpsCost > MaxBlockSigOpsCost(pindex->nHeight, fSegwitSeasoned))\n             return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                              REJECT_INVALID, \"bad-blk-sigops\");\n \n@@ -2852,6 +2869,21 @@ bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& pa\n     return (VersionBitsState(pindexPrev, params, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_ACTIVE);\n }\n \n+bool IsWitnessSeasoned(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(pindexPrev);\n+\n+    const int nHeight = pindexPrev->nHeight + 1;\n+\n+    if (nHeight < (int)BIP102_FORK_BUFFER)\n+      return false;\n+\n+    const CBlockIndex* pindexForkBuffer = pindexPrev->GetAncestor(nHeight - BIP102_FORK_BUFFER);\n+\n+    return (VersionBitsState(pindexForkBuffer, params, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_ACTIVE);\n+}\n+\n // Compute at which vout of the block's coinbase transaction the witness\n // commitment occurs, or -1 if not found.\n static int GetWitnessCommitmentIndex(const CBlock& block)\n@@ -2998,8 +3030,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n             fHaveWitness = true;\n         }\n \n-        const CBlockIndex* pindexForkBuffer = pindexPrev->GetAncestor(nHeight - BIP102_FORK_BUFFER);\n-        fSegwitSeasoned = (VersionBitsState(pindexForkBuffer, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_ACTIVE);\n+        fSegwitSeasoned = IsWitnessSeasoned(pindexPrev, consensusParams);\n     }\n \n     if (::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MaxBlockBaseSize(nHeight, fSegwitSeasoned))"
      },
      {
        "sha": "477bc78015a07c6740987f97c8e1014deea23fd9",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16cafe51acee670f35505ff2bb519cc3830fb4e2/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16cafe51acee670f35505ff2bb519cc3830fb4e2/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=16cafe51acee670f35505ff2bb519cc3830fb4e2",
        "patch": "@@ -215,7 +215,7 @@ static const unsigned int DEFAULT_CHECKLEVEL = 3;\n // Setting the target to > than 550MB will make it likely we can respect the target.\n static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n \n-/** \n+/**\n  * Process an incoming block. This only returns after the best known valid\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n@@ -226,7 +226,7 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  *\n  * Note that we guarantee that either the proof-of-work is valid on pblock, or\n  * (and possibly also) BlockChecked will have been called.\n- * \n+ *\n  * Call without cs_main held.\n  *\n  * @param[in]   pblock  The block we want to process.\n@@ -315,7 +315,6 @@ BIP9Stats VersionBitsTipStatistics(const Consensus::Params& params, Consensus::D\n /** Get the block height at which the BIP9 deployment switched into the state for the block building on the current tip. */\n int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n-\n /** Apply the effects of this transaction on the UTXO set represented by view */\n void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight);\n \n@@ -350,7 +349,7 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp = NULL\n \n /**\n  * Closure representing one script verification\n- * Note that this stores references to the spending transaction \n+ * Note that this stores references to the spending transaction\n  */\n class CScriptCheck\n {\n@@ -405,6 +404,9 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n /** Check whether witness commitments are required for block. */\n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n \n+/** Check whether witness has been activated for 90 days worth of blocks. */\n+bool IsWitnessSeasoned(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n+\n /** When there are blocks in the active chain with missing data, rewind the chainstate and remove them from the block index */\n bool RewindBlockIndex(const CChainParams& params);\n "
      }
    ]
  },
  {
    "sha": "78f101969e8719aa27ff3cd0c91dca1bd9f2c907",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGYxMDE5NjllODcxOWFhMjdmZjNjZDBjOTFkY2ExYmQ5ZjJjOTA3",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2017-06-28T20:34:37Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-17T17:08:33Z"
      },
      "message": "[consensus] Remove flag day activation\n\nSegWit+3m remains as the HF trigger.",
      "tree": {
        "sha": "3c300b7da943ca8c4f20610d7f9d5d1f1a071bf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c300b7da943ca8c4f20610d7f9d5d1f1a071bf6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78f101969e8719aa27ff3cd0c91dca1bd9f2c907",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78f101969e8719aa27ff3cd0c91dca1bd9f2c907",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78f101969e8719aa27ff3cd0c91dca1bd9f2c907",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78f101969e8719aa27ff3cd0c91dca1bd9f2c907/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16cafe51acee670f35505ff2bb519cc3830fb4e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16cafe51acee670f35505ff2bb519cc3830fb4e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16cafe51acee670f35505ff2bb519cc3830fb4e2"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 23,
      "deletions": 26
    },
    "files": [
      {
        "sha": "dbc1bafe6e81bcdfcc9b43d571c471c5b2123d83",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 11,
        "deletions": 15,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78f101969e8719aa27ff3cd0c91dca1bd9f2c907/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78f101969e8719aa27ff3cd0c91dca1bd9f2c907/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=78f101969e8719aa27ff3cd0c91dca1bd9f2c907",
        "patch": "@@ -9,64 +9,60 @@\n #include <stdlib.h>\n #include <stdint.h>\n \n-/** BIP102 block size increase height */\n-static const unsigned int BIP102_FORK_MIN_HEIGHT = 485218;\n+/** BIP102 block size increase - time until HF activated */\n static const unsigned int BIP102_FORK_BUFFER = (144 * 90);\n   \n /** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n /** The maximum allowed weight for a block, see BIP 141 (network rule) */\n static const unsigned int MAX_BLOCK_WEIGHT = 4000000;\n /** The maximum allowed size for a block excluding witness data, in bytes (network rule) */\n-static inline bool BIP102active(int nHeight, bool fSegwitSeasoned)\n+static inline bool BIP102active(bool fSegwitSeasoned)\n {\n     if (!fSegwitSeasoned)\n         return false;\n \n-    if (nHeight < (int)BIP102_FORK_MIN_HEIGHT)\n-        return false;\n-\n     return true;\n }\n \n static const unsigned int MAX_LEGACY_BLOCK_SIZE = (1 * 1000 * 1000);\n-inline unsigned int MaxBlockBaseSize(int nHeight, bool fSegwitSeasoned)\n+inline unsigned int MaxBlockBaseSize(bool fSegwitSeasoned)\n {\n-    if (!BIP102active(nHeight, fSegwitSeasoned))\n+    if (!BIP102active(fSegwitSeasoned))\n         return MAX_LEGACY_BLOCK_SIZE;\n \n     return (2 * 1000 * 1000);\n }\n \n inline unsigned int MaxBlockBaseSize()\n {\n-    return MaxBlockBaseSize(99999999, true);\n+    return MaxBlockBaseSize(true);\n }\n \n /** The maximum allowed number of signature check operations in a block (network rule) */\n static const uint64_t MAX_BLOCK_BASE_SIGOPS = 20000;\n-inline int64_t MaxBlockSigOpsCost(int nHeight, bool fSegwitSeasoned)\n+inline int64_t MaxBlockSigOpsCost(bool fSegwitSeasoned)\n {\n-    if (!BIP102active(nHeight, fSegwitSeasoned))\n+    if (!BIP102active(fSegwitSeasoned))\n         return (MAX_BLOCK_BASE_SIGOPS * 4 /* WITNESS_SCALE_FACTOR */);\n \n     return ((2 * MAX_BLOCK_BASE_SIGOPS) * 4 /* WITNESS_SCALE_FACTOR */);\n }\n \n inline int64_t MaxBlockSigOpsCost()\n {\n-    return MaxBlockSigOpsCost(99999999, true);\n+    return MaxBlockSigOpsCost(true);\n }\n \n /** The maximum allowed weight for a block, see BIP 141 (network rule) */\n-inline unsigned int MaxBlockWeight(int nHeight, bool fSegwitSeasoned)\n+inline unsigned int MaxBlockWeight(bool fSegwitSeasoned)\n {\n-    return (MaxBlockBaseSize(nHeight, fSegwitSeasoned) * 4 /* WITNESS_SCALE_FACTOR */);\n+    return (MaxBlockBaseSize(fSegwitSeasoned) * 4 /* WITNESS_SCALE_FACTOR */);\n }\n \n inline unsigned int MaxBlockWeight()\n {\n-    return MaxBlockWeight(99999999, true);\n+    return MaxBlockWeight(true);\n }\n \n /** The maximum allowed number of transactions per block */"
      },
      {
        "sha": "0a67676b92427950f09ce48396433dc46c0fae15",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78f101969e8719aa27ff3cd0c91dca1bd9f2c907/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78f101969e8719aa27ff3cd0c91dca1bd9f2c907/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=78f101969e8719aa27ff3cd0c91dca1bd9f2c907",
        "patch": "@@ -109,7 +109,7 @@ static BlockAssembler::Options DefaultOptions(const CChainParams& params)\n     return options;\n \n     // Limit weight to between 4K and MAX_BLOCK_WEIGHT-4K for sanity:\n-    nBlockMaxWeight = std::max((unsigned int)4000, std::min((unsigned int)(MaxBlockWeight(0, false)-4000), nBlockMaxWeight));\n+    nBlockMaxWeight = std::max((unsigned int)4000, std::min((unsigned int)(MaxBlockWeight(false)-4000), nBlockMaxWeight));\n     // Limit size to between 1K and MAX_BLOCK_SERIALIZED_SIZE-1K for sanity:\n     nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SERIALIZED_SIZE-1000), nBlockMaxSize));\n     // Whether we need to account for byte usage (in addition to weight usage)\n@@ -236,7 +236,7 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n     // TODO: switch to weight-based accounting for packages instead of vsize-based accounting.\n     if (nBlockWeight + WITNESS_SCALE_FACTOR * packageSize >= nBlockMaxWeight)\n         return false;\n-    if (nBlockSigOpsCost + packageSigOpsCost >= (uint64_t)MaxBlockSigOpsCost(nHeight, fIncludeWitness)) // note - excludes bip102 buffer\n+    if (nBlockSigOpsCost + packageSigOpsCost >= (uint64_t)MaxBlockSigOpsCost(fIncludeWitness)) // note - excludes bip102 buffer\n         return false;\n     return true;\n }\n@@ -296,7 +296,7 @@ bool BlockAssembler::TestForBlock(CTxMemPool::txiter iter)\n         }\n     }\n \n-    uint64_t sigOpMax = MaxBlockSigOpsCost(nHeight, fIncludeWitness);\n+    uint64_t sigOpMax = MaxBlockSigOpsCost(fIncludeWitness); // excludes bip102 buffer\n     if (nBlockSigOpsCost + iter->GetSigOpCost() >= sigOpMax) {\n         // If the block has room for no more sig ops then\n         // flag that the block is finished"
      },
      {
        "sha": "2e55932f33131cdf196f3420694f1197be713c27",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78f101969e8719aa27ff3cd0c91dca1bd9f2c907/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78f101969e8719aa27ff3cd0c91dca1bd9f2c907/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=78f101969e8719aa27ff3cd0c91dca1bd9f2c907",
        "patch": "@@ -657,6 +657,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n     int64_t nSigOpLimit = MAX_BLOCK_SIGOPS_COST;\n     int64_t nSizeLimit = MAX_BLOCK_SERIALIZED_SIZE;\n+    int64_t nSigOpLimit = MaxBlockSigOpsCost(fPreSegWit?false:true); // excl bip102 buffer\n     if (fPreSegWit) {\n         assert(nSigOpLimit % WITNESS_SCALE_FACTOR == 0);\n         nSigOpLimit /= WITNESS_SCALE_FACTOR;"
      },
      {
        "sha": "76d2b244e0b5b08f5cf1a94d306bd32d0419f2a4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78f101969e8719aa27ff3cd0c91dca1bd9f2c907/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78f101969e8719aa27ff3cd0c91dca1bd9f2c907/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=78f101969e8719aa27ff3cd0c91dca1bd9f2c907",
        "patch": "@@ -1793,7 +1793,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n         // * p2sh (when P2SH enabled in flags and excludes coinbase)\n         // * witness (when witness enabled in flags and excludes coinbase)\n         nSigOpsCost += GetTransactionSigOpCost(tx, view, flags);\n-        if (nSigOpsCost > MaxBlockSigOpsCost(pindex->nHeight, fSegwitSeasoned))\n+        if (nSigOpsCost > MaxBlockSigOpsCost(fSegwitSeasoned))\n             return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                              REJECT_INVALID, \"bad-blk-sigops\");\n \n@@ -3033,7 +3033,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n         fSegwitSeasoned = IsWitnessSeasoned(pindexPrev, consensusParams);\n     }\n \n-    if (::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MaxBlockBaseSize(nHeight, fSegwitSeasoned))\n+    if (::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MaxBlockBaseSize(fSegwitSeasoned))\n         return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n \n     // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room for spam\n@@ -3050,7 +3050,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     {\n         nSigOps += GetLegacySigOpCount(*tx);\n     }\n-    if (nSigOps * WITNESS_SCALE_FACTOR > MaxBlockSigOpsCost(nHeight, fSegwitSeasoned))\n+    if (nSigOps * WITNESS_SCALE_FACTOR > MaxBlockSigOpsCost(fSegwitSeasoned))\n         return state.DoS(100, false, REJECT_INVALID, \"bad-blk-sigops\", false, \"out-of-bounds SigOpCount\");\n \n     // After the coinbase witness nonce and commitment are verified,\n@@ -3059,7 +3059,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     // large by filling up the coinbase witness, which doesn't change\n     // the block hash, so we couldn't mark the block as permanently\n     // failed).\n-    if (GetBlockWeight(block) > MaxBlockWeight(nHeight, fSegwitSeasoned)) {\n+    if (GetBlockWeight(block) > MaxBlockWeight(fSegwitSeasoned)) {\n         return state.DoS(100, false, REJECT_INVALID, \"bad-blk-weight\", false, strprintf(\"%s : weight limit failed\", __func__));\n     }\n "
      },
      {
        "sha": "088aea7deeabe7edcfa36ee8de5b97bcfbe04d0a",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78f101969e8719aa27ff3cd0c91dca1bd9f2c907/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78f101969e8719aa27ff3cd0c91dca1bd9f2c907/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=78f101969e8719aa27ff3cd0c91dca1bd9f2c907",
        "patch": "@@ -120,7 +120,7 @@ def run_test(self):\n         assert(tmpl['sigoplimit'] == 20000)\n         assert(tmpl['transactions'][0]['hash'] == txid)\n         assert(tmpl['transactions'][0]['sigops'] == 2)\n-        tmpl = self.nodes[0].getblocktemplate({'rules':['segwit']})\n+        tmpl = self.nodes[0].getblocktemplate({'rules':['segwit','segwit2x']})\n         assert(tmpl['sizelimit'] == 1000000)\n         assert('weightlimit' not in tmpl)\n         assert(tmpl['sigoplimit'] == 20000)\n@@ -229,10 +229,10 @@ def run_test(self):\n \n         self.log.info(\"Verify sigops are counted in GBT with BIP141 rules after the fork\")\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n-        tmpl = self.nodes[0].getblocktemplate({'rules':['segwit']})\n+        tmpl = self.nodes[0].getblocktemplate({'rules':['segwit','segwit2x']})\n         assert(tmpl['sizelimit'] >= 3999577)  # actual maximum size is lower due to minimum mandatory non-witness data\n         assert(tmpl['weightlimit'] == 4000000)  # limit at first step\n-        assert(tmpl['sigoplimit'] == 80000)\n+        assert(tmpl['sigoplimit'] == 160000)    # limit at first step\n         assert(tmpl['transactions'][0]['txid'] == txid)\n         assert(tmpl['transactions'][0]['sigops'] == 8)\n \n@@ -276,7 +276,7 @@ def run_test(self):\n         assert(txid1 in template_txids)\n \n         # Check that running with segwit support results in all 3 being included.\n-        template = self.nodes[0].getblocktemplate({\"rules\": [\"segwit\"]})\n+        template = self.nodes[0].getblocktemplate({\"rules\": [\"segwit\",\"segwit2x\"]})\n         template_txids = [ t['txid'] for t in template['transactions'] ]\n         assert(txid1 in template_txids)\n         assert(txid2 in template_txids)"
      }
    ]
  },
  {
    "sha": "2c32a2880464de72819b7cfeaf89fd9f4c70ff44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzMyYTI4ODA0NjRkZTcyODE5YjdjZmVhZjg5ZmQ5ZjRjNzBmZjQ0",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2017-06-30T16:21:23Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-17T17:08:33Z"
      },
      "message": "[mining] Several segwit2x seasoning differential related fixes.\n\nFixes #28",
      "tree": {
        "sha": "be4cff137d2d7f1572f3ff68fd479e4e065e57d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be4cff137d2d7f1572f3ff68fd479e4e065e57d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c32a2880464de72819b7cfeaf89fd9f4c70ff44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c32a2880464de72819b7cfeaf89fd9f4c70ff44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c32a2880464de72819b7cfeaf89fd9f4c70ff44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c32a2880464de72819b7cfeaf89fd9f4c70ff44/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "78f101969e8719aa27ff3cd0c91dca1bd9f2c907",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78f101969e8719aa27ff3cd0c91dca1bd9f2c907",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78f101969e8719aa27ff3cd0c91dca1bd9f2c907"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 31,
      "deletions": 11
    },
    "files": [
      {
        "sha": "a1547fbed24927002ca639c0abd21b4e158a2744",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c32a2880464de72819b7cfeaf89fd9f4c70ff44/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c32a2880464de72819b7cfeaf89fd9f4c70ff44/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=2c32a2880464de72819b7cfeaf89fd9f4c70ff44",
        "patch": "@@ -65,6 +65,11 @@ inline unsigned int MaxBlockWeight()\n     return MaxBlockWeight(true);\n }\n \n+inline unsigned int MaxBlockSerSize(bool fSegwitSeasoned)\n+{\n+    return (MaxBlockBaseSize(fSegwitSeasoned) * 4);\n+}\n+\n /** The maximum allowed number of transactions per block */\n static const unsigned int MAX_BLOCK_VTX_SIZE = 1000000;\n "
      },
      {
        "sha": "ba4eb33d605f34d61079096afa1409aac2ed0606",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c32a2880464de72819b7cfeaf89fd9f4c70ff44/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c32a2880464de72819b7cfeaf89fd9f4c70ff44/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=2c32a2880464de72819b7cfeaf89fd9f4c70ff44",
        "patch": "@@ -90,7 +90,7 @@ static BlockAssembler::Options DefaultOptions(const CChainParams& params)\n     bool fWeightSet = false;\n     if (IsArgSet(\"-blockmaxweight\")) {\n         options.nBlockMaxWeight = GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n-        options.nBlockMaxSize = MAX_BLOCK_SERIALIZED_SIZE;\n+        options.nBlockMaxSize = MaxBlockSerSize(fWitnessSeasoned);\n         fWeightSet = true;\n     }\n     if (IsArgSet(\"-blockmaxsize\")) {\n@@ -109,11 +109,11 @@ static BlockAssembler::Options DefaultOptions(const CChainParams& params)\n     return options;\n \n     // Limit weight to between 4K and MAX_BLOCK_WEIGHT-4K for sanity:\n-    nBlockMaxWeight = std::max((unsigned int)4000, std::min((unsigned int)(MaxBlockWeight(false)-4000), nBlockMaxWeight));\n+    nBlockMaxWeight = std::max((unsigned int)4000, std::min((unsigned int)(MaxBlockWeight(fWitnessSeasoned)-4000), nBlockMaxWeight));\n     // Limit size to between 1K and MAX_BLOCK_SERIALIZED_SIZE-1K for sanity:\n-    nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SERIALIZED_SIZE-1000), nBlockMaxSize));\n+    nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MaxBlockSerSize(fWitnessSeasoned)-1000), nBlockMaxSize));\n     // Whether we need to account for byte usage (in addition to weight usage)\n-    fNeedSizeAccounting = (nBlockMaxSize < MAX_BLOCK_SERIALIZED_SIZE-1000);\n+    fNeedSizeAccounting = (nBlockMaxSize < MaxBlockSerSize(fWitnessSeasoned)-1000);\n }\n \n BlockAssembler::BlockAssembler(const CChainParams& params) : BlockAssembler(params, DefaultOptions(params)) {}\n@@ -127,6 +127,7 @@ void BlockAssembler::resetBlock()\n     nBlockWeight = 4000;\n     nBlockSigOpsCost = 400;\n     fIncludeWitness = false;\n+    fWitnessSeasoned = false;\n \n     // These counters do not include coinbase tx\n     nBlockTx = 0;\n@@ -174,6 +175,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // TODO: replace this with a call to main to assess validity of a mempool\n     // transaction (which in most cases can be a no-op).\n     fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus()) && fMineWitnessTx;\n+    fWitnessSeasoned = IsWitnessSeasoned(pindexPrev, chainparams.GetConsensus());\n \n     int nPackagesSelected = 0;\n     int nDescendantsUpdated = 0;\n@@ -236,7 +238,7 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n     // TODO: switch to weight-based accounting for packages instead of vsize-based accounting.\n     if (nBlockWeight + WITNESS_SCALE_FACTOR * packageSize >= nBlockMaxWeight)\n         return false;\n-    if (nBlockSigOpsCost + packageSigOpsCost >= (uint64_t)MaxBlockSigOpsCost(fIncludeWitness)) // note - excludes bip102 buffer\n+    if (nBlockSigOpsCost + packageSigOpsCost >= (uint64_t)MaxBlockSigOpsCost(fWitnessSeasoned))\n         return false;\n     return true;\n }\n@@ -296,7 +298,7 @@ bool BlockAssembler::TestForBlock(CTxMemPool::txiter iter)\n         }\n     }\n \n-    uint64_t sigOpMax = MaxBlockSigOpsCost(fIncludeWitness); // excludes bip102 buffer\n+    uint64_t sigOpMax = MaxBlockSigOpsCost(fWitnessSeasoned);\n     if (nBlockSigOpsCost + iter->GetSigOpCost() >= sigOpMax) {\n         // If the block has room for no more sig ops then\n         // flag that the block is finished"
      },
      {
        "sha": "1461806906f441d03eef77cbab12b0c9b01da393",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c32a2880464de72819b7cfeaf89fd9f4c70ff44/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c32a2880464de72819b7cfeaf89fd9f4c70ff44/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=2c32a2880464de72819b7cfeaf89fd9f4c70ff44",
        "patch": "@@ -139,6 +139,7 @@ class BlockAssembler\n \n     // Configuration parameters for the block size\n     bool fIncludeWitness;\n+    bool fWitnessSeasoned;\n     unsigned int nBlockMaxWeight, nBlockMaxSize;\n     bool fNeedSizeAccounting;\n     CFeeRate blockMinFeeRate;"
      },
      {
        "sha": "e4d119cd484756487d6828ac929e5d1cdf8b583a",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c32a2880464de72819b7cfeaf89fd9f4c70ff44/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c32a2880464de72819b7cfeaf89fd9f4c70ff44/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=2c32a2880464de72819b7cfeaf89fd9f4c70ff44",
        "patch": "@@ -498,6 +498,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     // to select witness transactions, after segwit activates (otherwise\n     // don't).\n     bool fSupportsSegwit = setClientRules.find(segwit_info.name) != setClientRules.end();\n+    bool fSupportsSegwit2x = setClientRules.find(segwit2x_info.name) != setClientRules.end();\n \n     // Update block\n     static CBlockIndex* pindexPrev;\n@@ -657,7 +658,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n     int64_t nSigOpLimit = MAX_BLOCK_SIGOPS_COST;\n     int64_t nSizeLimit = MAX_BLOCK_SERIALIZED_SIZE;\n-    int64_t nSigOpLimit = MaxBlockSigOpsCost(fPreSegWit?false:true); // excl bip102 buffer\n+    int64_t nSigOpLimit = MaxBlockSigOpsCost(fSupportsSegwit2x); // excl bip102 buffer\n     if (fPreSegWit) {\n         assert(nSigOpLimit % WITNESS_SCALE_FACTOR == 0);\n         nSigOpLimit /= WITNESS_SCALE_FACTOR;\n@@ -667,7 +668,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     result.push_back(Pair(\"sigoplimit\", nSigOpLimit));\n     result.push_back(Pair(\"sizelimit\", nSizeLimit));\n     if (!fPreSegWit) {\n-        result.push_back(Pair(\"weightlimit\", (int64_t)MaxBlockWeight(0, false)));\n+        result.push_back(Pair(\"weightlimit\", (int64_t)MaxBlockWeight(fSupportsSegwit2x)));\n     }\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));"
      },
      {
        "sha": "9abe9e13bd8ee1a4c131f4fb15bed2b83ce7e0f9",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c32a2880464de72819b7cfeaf89fd9f4c70ff44/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c32a2880464de72819b7cfeaf89fd9f4c70ff44/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=2c32a2880464de72819b7cfeaf89fd9f4c70ff44",
        "patch": "@@ -120,7 +120,7 @@ def run_test(self):\n         assert(tmpl['sigoplimit'] == 20000)\n         assert(tmpl['transactions'][0]['hash'] == txid)\n         assert(tmpl['transactions'][0]['sigops'] == 2)\n-        tmpl = self.nodes[0].getblocktemplate({'rules':['segwit','segwit2x']})\n+        tmpl = self.nodes[0].getblocktemplate({'rules':['segwit']})\n         assert(tmpl['sizelimit'] == 1000000)\n         assert('weightlimit' not in tmpl)\n         assert(tmpl['sigoplimit'] == 20000)\n@@ -229,10 +229,21 @@ def run_test(self):\n \n         self.log.info(\"Verify sigops are counted in GBT with BIP141 rules after the fork\")\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n+        tmpl = self.nodes[0].getblocktemplate({'rules':['segwit']})\n+        assert(tmpl['sizelimit'] >= 3999577)  # actual maximum size is lower due to minimum mandatory non-witness data\n+        assert(tmpl['weightlimit'] == 4000000)\n+        assert(tmpl['sigoplimit'] == 80000)\n+        assert(tmpl['transactions'][0]['txid'] == txid)\n+        assert(tmpl['transactions'][0]['sigops'] == 8)\n+\n+        self.nodes[0].generate(1) # Mine a block to clear the gbt cache\n+\n+        print(\"Verify sigops are counted in GBT with BIP141 rules after the 2x fork\")\n+        txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n         tmpl = self.nodes[0].getblocktemplate({'rules':['segwit','segwit2x']})\n         assert(tmpl['sizelimit'] >= 3999577)  # actual maximum size is lower due to minimum mandatory non-witness data\n-        assert(tmpl['weightlimit'] == 4000000)  # limit at first step\n-        assert(tmpl['sigoplimit'] == 160000)    # limit at first step\n+        assert(tmpl['weightlimit'] == (4000000*2))\n+        assert(tmpl['sigoplimit'] == (80000*2))\n         assert(tmpl['transactions'][0]['txid'] == txid)\n         assert(tmpl['transactions'][0]['sigops'] == 8)\n "
      }
    ]
  },
  {
    "sha": "2e7097a0080ce1be57d321df484a674b293aed97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTcwOTdhMDA4MGNlMWJlNTdkMzIxZGY0ODRhNjc0YjI5M2FlZDk3",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2017-07-14T14:29:37Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-17T17:08:33Z"
      },
      "message": "consensus.h: MAX_BLOCK_VTX warning cleanup",
      "tree": {
        "sha": "98ac7d1b1cc17bf3008257a4a9de96ba157d89bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98ac7d1b1cc17bf3008257a4a9de96ba157d89bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e7097a0080ce1be57d321df484a674b293aed97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e7097a0080ce1be57d321df484a674b293aed97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e7097a0080ce1be57d321df484a674b293aed97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e7097a0080ce1be57d321df484a674b293aed97/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c32a2880464de72819b7cfeaf89fd9f4c70ff44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c32a2880464de72819b7cfeaf89fd9f4c70ff44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c32a2880464de72819b7cfeaf89fd9f4c70ff44"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "717d057de651f401bf1123a8394961c759b34047",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e7097a0080ce1be57d321df484a674b293aed97/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e7097a0080ce1be57d321df484a674b293aed97/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=2e7097a0080ce1be57d321df484a674b293aed97",
        "patch": "@@ -26,12 +26,13 @@ static inline bool BIP102active(bool fSegwitSeasoned)\n }\n \n static const unsigned int MAX_LEGACY_BLOCK_SIZE = (1 * 1000 * 1000);\n+static const unsigned int MAX_BASE_BLOCK_SIZE = (2 * 1000 * 1000);\n inline unsigned int MaxBlockBaseSize(bool fSegwitSeasoned)\n {\n     if (!BIP102active(fSegwitSeasoned))\n         return MAX_LEGACY_BLOCK_SIZE;\n \n-    return (2 * 1000 * 1000);\n+    return MAX_BASE_BLOCK_SIZE;\n }\n \n inline unsigned int MaxBlockBaseSize()\n@@ -78,7 +79,7 @@ static const unsigned int MIN_TRANSACTION_BASE_SIZE = 10;\n /** The maximum allowed size for a transaction, excluding witness data, in bytes */\n static const unsigned int MAX_TX_BASE_SIZE = 1000000;\n /** The maximum allowed number of transactions per block */\n-static const unsigned int MAX_BLOCK_VTX = (MaxBlockBaseSize() / MIN_TRANSACTION_BASE_SIZE);\n+static const unsigned int MAX_BLOCK_VTX = MAX_BASE_BLOCK_SIZE / MIN_TRANSACTION_BASE_SIZE;\n \n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;"
      }
    ]
  },
  {
    "sha": "7518274877ed0fa185afe6bd4016e181f43612d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTE4Mjc0ODc3ZWQwZmExODVhZmU2YmQ0MDE2ZTE4MWY0MzYxMmQ0",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2017-07-14T14:14:23Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-17T17:08:33Z"
      },
      "message": "chainparams:  Add segwit2x DNS seeds",
      "tree": {
        "sha": "f78420a050159e159fdd7c59549f026949580710",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f78420a050159e159fdd7c59549f026949580710"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7518274877ed0fa185afe6bd4016e181f43612d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7518274877ed0fa185afe6bd4016e181f43612d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7518274877ed0fa185afe6bd4016e181f43612d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7518274877ed0fa185afe6bd4016e181f43612d4/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e7097a0080ce1be57d321df484a674b293aed97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e7097a0080ce1be57d321df484a674b293aed97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e7097a0080ce1be57d321df484a674b293aed97"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "10167fa1eae9853e5fe8865533ccb165b157d71d",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7518274877ed0fa185afe6bd4016e181f43612d4/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7518274877ed0fa185afe6bd4016e181f43612d4/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=7518274877ed0fa185afe6bd4016e181f43612d4",
        "patch": "@@ -124,12 +124,15 @@ class CMainParams : public CChainParams {\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n \n         // Note that of those with the service bits flag, most only support a subset of possible options\n-        vSeeds.emplace_back(\"seed.bitcoin.sipa.be\", true); // Pieter Wuille, only supports x1, x5, x9, and xd\n-        vSeeds.emplace_back(\"dnsseed.bluematt.me\", true); // Matt Corallo, only supports x9\n-        vSeeds.emplace_back(\"dnsseed.bitcoin.dashjr.org\", false); // Luke Dashjr\n-        vSeeds.emplace_back(\"seed.bitcoinstats.com\", true); // Christian Decker, supports x1 - xf\n-        vSeeds.emplace_back(\"seed.bitcoin.jonasschnelli.ch\", true); // Jonas Schnelli, only supports x1, x5, x9, and xd\n-        vSeeds.emplace_back(\"seed.btc.petertodd.org\", true); // Peter Todd, only supports x1, x5, x9, and xd\n+        vSeeds.push_back(CDNSSeedData(\"seed.b-pay.net\", \"seed.mainnet.b-pay.net\", false)); // BitPay seed\n+        vSeeds.push_back(CDNSSeedData(\"seed.ob1.io\", \"seed.ob1.io\", false)); // OB1 seed\n+        vSeeds.push_back(CDNSSeedData(\"seed.blockchain.info\", \"seed.blockchain.info\", false)); // blockchain.info seed\n+        vSeeds.push_back(CDNSSeedData(\"bloqseeds.net\", \"bitcoin.bloqseeds.net\", false)); // bloq.com seed\n+        vSeeds.push_back(CDNSSeedData(\"bitcoin.sipa.be\", \"seed.bitcoin.sipa.be\", true)); // Pieter Wuille, only supports x1, x5, x9, and xd\n+        vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"dnsseed.bluematt.me\", true)); // Matt Corallo, only supports x9\n+        vSeeds.push_back(CDNSSeedData(\"dashjr.org\", \"dnsseed.bitcoin.dashjr.org\")); // Luke Dashjr\n+        vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\", true)); // Christian Decker, supports x1 - xf\n+        vSeeds.push_back(CDNSSeedData(\"bitcoin.jonasschnelli.ch\", \"seed.bitcoin.jonasschnelli.ch\", true)); // Jonas Schnelli, only supports x1, x5, x9, and xd\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);\n@@ -231,6 +234,7 @@ class CTestNetParams : public CChainParams {\n         vSeeds.clear();\n         // nodes with support for servicebits filtering should be at the top\n         vSeeds.push_back(CDNSSeedData(\"testnet5.b-pay.net\", \"seed.testnet5.b-pay.net\"));\n+        vSeeds.push_back(CDNSSeedData(\"bloqseeds.net\", \"bitcoin-testnet.bloqseeds.net\", false)); // bloq.com seed\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);"
      }
    ]
  },
  {
    "sha": "beaa1057409226e18c8e5d221e64c44e7532a7eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWFhMTA1NzQwOTIyNmUxOGM4ZTVkMjIxZTY0YzQ0ZTc1MzJhN2Vi",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2017-07-15T17:22:20Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-17T17:08:33Z"
      },
      "message": "init.cpp: add \"2x\" to uacomment string, for segwit2x",
      "tree": {
        "sha": "5585f608f06d09d82c417a43363fd784f8132a53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5585f608f06d09d82c417a43363fd784f8132a53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/beaa1057409226e18c8e5d221e64c44e7532a7eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beaa1057409226e18c8e5d221e64c44e7532a7eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/beaa1057409226e18c8e5d221e64c44e7532a7eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beaa1057409226e18c8e5d221e64c44e7532a7eb/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7518274877ed0fa185afe6bd4016e181f43612d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7518274877ed0fa185afe6bd4016e181f43612d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7518274877ed0fa185afe6bd4016e181f43612d4"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "52b453370a2df14fcc84d9b37b6d11e7e0a26248",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beaa1057409226e18c8e5d221e64c44e7532a7eb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beaa1057409226e18c8e5d221e64c44e7532a7eb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=beaa1057409226e18c8e5d221e64c44e7532a7eb",
        "patch": "@@ -1264,6 +1264,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;\n+    uacomments.push_back(\"2x\");\n     for (const std::string& cmt : gArgs.GetArgs(\"-uacomment\")) {\n         if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n             return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));"
      }
    ]
  },
  {
    "sha": "17a6d4a9ddbe62ad54cc60495211fa3f614d50eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxN2E2ZDRhOWRkYmU2MmFkNTRjYzYwNDk1MjExZmEzZjYxNGQ1MGVi",
    "commit": {
      "author": {
        "name": "Ismael Bejarano",
        "email": "ismael.bejarano@coinfabrik.com",
        "date": "2017-07-17T18:18:14Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-17T17:08:33Z"
      },
      "message": "Split hard fork test after segwit activation",
      "tree": {
        "sha": "d8ff5aed1f9dcceeb7b8f63ef50a62bc2cb740b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8ff5aed1f9dcceeb7b8f63ef50a62bc2cb740b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17a6d4a9ddbe62ad54cc60495211fa3f614d50eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17a6d4a9ddbe62ad54cc60495211fa3f614d50eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17a6d4a9ddbe62ad54cc60495211fa3f614d50eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17a6d4a9ddbe62ad54cc60495211fa3f614d50eb/comments",
    "author": null,
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "beaa1057409226e18c8e5d221e64c44e7532a7eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beaa1057409226e18c8e5d221e64c44e7532a7eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/beaa1057409226e18c8e5d221e64c44e7532a7eb"
      }
    ],
    "stats": {
      "total": 811,
      "additions": 811,
      "deletions": 0
    },
    "files": [
      {
        "sha": "30164f6c8d18a65cf82dda4ac42457216d9d6631",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "added",
        "additions": 374,
        "deletions": 0,
        "changes": 374,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17a6d4a9ddbe62ad54cc60495211fa3f614d50eb/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17a6d4a9ddbe62ad54cc60495211fa3f614d50eb/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=17a6d4a9ddbe62ad54cc60495211fa3f614d50eb",
        "patch": "@@ -0,0 +1,374 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Run Regression Test Suite\n+\n+This module calls down into individual test cases via subprocess. It will\n+forward all unrecognized arguments onto the individual test scripts, other\n+than:\n+\n+    - `-extended`: run the \"extended\" test suite in addition to the basic one.\n+    - `-win`: signal that this is running in a Windows environment, and we\n+      should run the tests.\n+    - `--coverage`: this generates a basic coverage report for the RPC\n+      interface.\n+\n+For a description of arguments recognized by test scripts, see\n+`qa/pull-tester/test_framework/test_framework.py:BitcoinTestFramework.main`.\n+\n+\"\"\"\n+\n+import os\n+import time\n+import shutil\n+import sys\n+import subprocess\n+import tempfile\n+import re\n+\n+sys.path.append(\"qa/pull-tester/\")\n+from tests_config import *\n+\n+BOLD = (\"\",\"\")\n+if os.name == 'posix':\n+    # primitive formatting on supported\n+    # terminal via ANSI escape sequences:\n+    BOLD = ('\\033[0m', '\\033[1m')\n+\n+RPC_TESTS_DIR = SRCDIR + '/qa/rpc-tests/'\n+\n+#If imported values are not defined then set to zero (or disabled)\n+if 'ENABLE_WALLET' not in vars():\n+    ENABLE_WALLET=0\n+if 'ENABLE_BITCOIND' not in vars():\n+    ENABLE_BITCOIND=0\n+if 'ENABLE_UTILS' not in vars():\n+    ENABLE_UTILS=0\n+if 'ENABLE_ZMQ' not in vars():\n+    ENABLE_ZMQ=0\n+\n+ENABLE_COVERAGE=0\n+\n+#Create a set to store arguments and create the passon string\n+opts = set()\n+passon_args = []\n+PASSON_REGEX = re.compile(\"^--\")\n+PARALLEL_REGEX = re.compile('^-parallel=')\n+\n+print_help = False\n+run_parallel = 4\n+\n+for arg in sys.argv[1:]:\n+    if arg == \"--help\" or arg == \"-h\" or arg == \"-?\":\n+        print_help = True\n+        break\n+    if arg == '--coverage':\n+        ENABLE_COVERAGE = 1\n+    elif PASSON_REGEX.match(arg):\n+        passon_args.append(arg)\n+    elif PARALLEL_REGEX.match(arg):\n+        run_parallel = int(arg.split(sep='=', maxsplit=1)[1])\n+    else:\n+        opts.add(arg)\n+\n+#Set env vars\n+if \"BITCOIND\" not in os.environ:\n+    os.environ[\"BITCOIND\"] = BUILDDIR + '/src/bitcoind' + EXEEXT\n+\n+if EXEEXT == \".exe\" and \"-win\" not in opts:\n+    # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n+    # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n+    print(\"Win tests currently disabled by default.  Use -win option to enable\")\n+    sys.exit(0)\n+\n+if not (ENABLE_WALLET == 1 and ENABLE_UTILS == 1 and ENABLE_BITCOIND == 1):\n+    print(\"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\")\n+    sys.exit(0)\n+\n+# python3-zmq may not be installed. Handle this gracefully and with some helpful info\n+if ENABLE_ZMQ:\n+    try:\n+        import zmq\n+    except ImportError:\n+        print(\"ERROR: \\\"import zmq\\\" failed. Set ENABLE_ZMQ=0 or \"\n+              \"to run zmq tests, see dependency info in /qa/README.md.\")\n+        # ENABLE_ZMQ=0\n+        raise\n+\n+testScripts = [\n+    # longest test should go first, to favor running tests in parallel\n+    'wallet-hd.py',\n+    'walletbackup.py',\n+    # vv Tests less than 5m vv\n+    'p2p-fullblocktest.py',\n+    'fundrawtransaction.py',\n+    'p2p-compactblocks.py',\n+    'segwit.py',\n+    # vv Tests less than 2m vv\n+    'wallet.py',\n+    'wallet-accounts.py',\n+    'p2p-segwit.py',\n+    'wallet-dump.py',\n+    'listtransactions.py',\n+    # vv Tests less than 60s vv\n+    'sendheaders.py',\n+    'zapwallettxes.py',\n+    'importmulti.py',\n+    'mempool_limit.py',\n+    'merkle_blocks.py',\n+    'receivedby.py',\n+    'abandonconflict.py',\n+    'bip68-112-113-p2p.py',\n+    'rawtransactions.py',\n+    'reindex.py',\n+    # vv Tests less than 30s vv\n+    'mempool_resurrect_test.py',\n+    'txn_doublespend.py --mineblock',\n+    'txn_clone.py',\n+    'getchaintips.py',\n+    'rest.py',\n+    'mempool_spendcoinbase.py',\n+    'mempool_reorg.py',\n+    'httpbasics.py',\n+    'multi_rpc.py',\n+    'proxy_test.py',\n+    'signrawtransactions.py',\n+    'nodehandling.py',\n+    'decodescript.py',\n+    'blockchain.py',\n+    'disablewallet.py',\n+    'keypool.py',\n+    'p2p-mempool.py',\n+    'prioritise_transaction.py',\n+    'invalidblockrequest.py',\n+    'invalidtxrequest.py',\n+    'p2p-versionbits-warning.py',\n+    'preciousblock.py',\n+    'importprunedfunds.py',\n+    'signmessages.py',\n+    'nulldummy.py',\n+    'import-rescan.py',\n+    'bumpfee.py',\n+    'rpcnamedargs.py',\n+    'listsinceblock.py',\n+    'p2p-leaktests.py',\n+    'bip91.py',\n+    'fork-large-block.py',\n+]\n+if ENABLE_ZMQ:\n+    testScripts.append('zmq_test.py')\n+\n+testScriptsExt = [\n+    'pruning.py',\n+    # vv Tests less than 20m vv\n+    'smartfees.py',\n+    # vv Tests less than 5m vv\n+    'maxuploadtarget.py',\n+    'mempool_packages.py',\n+    # vv Tests less than 2m vv\n+    'bip68-sequence.py',\n+    'getblocktemplate_longpoll.py',\n+    'p2p-timeouts.py',\n+    # vv Tests less than 60s vv\n+    'bip9-softforks.py',\n+    'p2p-feefilter.py',\n+    'rpcbind_test.py',\n+    # vv Tests less than 30s vv\n+    'bip65-cltv.py',\n+    'bip65-cltv-p2p.py',\n+    'bipdersig-p2p.py',\n+    'bipdersig.py',\n+    'getblocktemplate_proposals.py',\n+    'txn_doublespend.py',\n+    'txn_clone.py --mineblock',\n+    'forknotify.py',\n+    'invalidateblock.py',\n+    'maxblocksinflight.py',\n+    'p2p-acceptblock.py',\n+    'replace-by-fee.py',\n+]\n+\n+\n+def runtests():\n+    test_list = []\n+    if '-extended' in opts:\n+        test_list = testScripts + testScriptsExt\n+    elif len(opts) == 0 or (len(opts) == 1 and \"-win\" in opts):\n+        test_list = testScripts\n+    else:\n+        for t in testScripts + testScriptsExt:\n+            if t in opts or re.sub(\".py$\", \"\", t) in opts:\n+                test_list.append(t)\n+\n+    if print_help:\n+        # Only print help of the first script and exit\n+        subprocess.check_call((RPC_TESTS_DIR + test_list[0]).split() + ['-h'])\n+        sys.exit(0)\n+\n+    coverage = None\n+\n+    if ENABLE_COVERAGE:\n+        coverage = RPCCoverage()\n+        print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n+    flags = [\"--srcdir=%s/src\" % BUILDDIR] + passon_args\n+    flags.append(\"--cachedir=%s/qa/cache\" % BUILDDIR)\n+    if coverage:\n+        flags.append(coverage.flag)\n+\n+    if len(test_list) > 1 and run_parallel > 1:\n+        # Populate cache\n+        subprocess.check_output([RPC_TESTS_DIR + 'create_cache.py'] + flags)\n+\n+    #Run Tests\n+    max_len_name = len(max(test_list, key=len))\n+    time_sum = 0\n+    time0 = time.time()\n+    job_queue = RPCTestHandler(run_parallel, test_list, flags)\n+    results = BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"PASSED\", \"DURATION\") + BOLD[0]\n+    all_passed = True\n+    for _ in range(len(test_list)):\n+        (name, stdout, stderr, passed, duration) = job_queue.get_next()\n+        all_passed = all_passed and passed\n+        time_sum += duration\n+\n+        print('\\n' + BOLD[1] + name + BOLD[0] + \":\")\n+        print('' if passed else stdout + '\\n', end='')\n+        print('' if stderr == '' else 'stderr:\\n' + stderr + '\\n', end='')\n+        results += \"%s | %s | %s s\\n\" % (name.ljust(max_len_name), str(passed).ljust(6), duration)\n+        print(\"Pass: %s%s%s, Duration: %s s\\n\" % (BOLD[1], passed, BOLD[0], duration))\n+    results += BOLD[1] + \"\\n%s | %s | %s s (accumulated)\" % (\"ALL\".ljust(max_len_name), str(all_passed).ljust(6), time_sum) + BOLD[0]\n+    print(results)\n+    print(\"\\nRuntime: %s s\" % (int(time.time() - time0)))\n+\n+    if coverage:\n+        coverage.report_rpc_coverage()\n+\n+        print(\"Cleaning up coverage data\")\n+        coverage.cleanup()\n+\n+    sys.exit(not all_passed)\n+\n+\n+class RPCTestHandler:\n+    \"\"\"\n+    Trigger the testscrips passed in via the list.\n+    \"\"\"\n+\n+    def __init__(self, num_tests_parallel, test_list=None, flags=None):\n+        assert(num_tests_parallel >= 1)\n+        self.num_jobs = num_tests_parallel\n+        self.test_list = test_list\n+        self.flags = flags\n+        self.num_running = 0\n+        # In case there is a graveyard of zombie bitcoinds, we can apply a\n+        # pseudorandom offset to hopefully jump over them.\n+        # (625 is PORT_RANGE/MAX_NODES)\n+        self.portseed_offset = int(time.time() * 1000) % 625\n+        self.jobs = []\n+\n+    def get_next(self):\n+        while self.num_running < self.num_jobs and self.test_list:\n+            # Add tests\n+            self.num_running += 1\n+            t = self.test_list.pop(0)\n+            port_seed = [\"--portseed={}\".format(len(self.test_list) + self.portseed_offset)]\n+            log_stdout = tempfile.SpooledTemporaryFile(max_size=2**16)\n+            log_stderr = tempfile.SpooledTemporaryFile(max_size=2**16)\n+            self.jobs.append((t,\n+                              time.time(),\n+                              subprocess.Popen((RPC_TESTS_DIR + t).split() + self.flags + port_seed,\n+                                               universal_newlines=True,\n+                                               stdout=log_stdout,\n+                                               stderr=log_stderr),\n+                              log_stdout,\n+                              log_stderr))\n+        if not self.jobs:\n+            raise IndexError('pop from empty list')\n+        while True:\n+            # Return first proc that finishes\n+            time.sleep(.5)\n+            for j in self.jobs:\n+                (name, time0, proc, log_out, log_err) = j\n+                if proc.poll() is not None:\n+                    log_out.seek(0), log_err.seek(0)\n+                    [stdout, stderr] = [l.read().decode('utf-8') for l in (log_out, log_err)]\n+                    log_out.close(), log_err.close()\n+                    passed = stderr == \"\" and proc.returncode == 0\n+                    self.num_running -= 1\n+                    self.jobs.remove(j)\n+                    return name, stdout, stderr, passed, int(time.time() - time0)\n+            print('.', end='', flush=True)\n+\n+\n+class RPCCoverage(object):\n+    \"\"\"\n+    Coverage reporting utilities for pull-tester.\n+\n+    Coverage calculation works by having each test script subprocess write\n+    coverage files into a particular directory. These files contain the RPC\n+    commands invoked during testing, as well as a complete listing of RPC\n+    commands per `bitcoin-cli help` (`rpc_interface.txt`).\n+\n+    After all tests complete, the commands run are combined and diff'd against\n+    the complete list to calculate uncovered RPC commands.\n+\n+    See also: qa/rpc-tests/test_framework/coverage.py\n+\n+    \"\"\"\n+    def __init__(self):\n+        self.dir = tempfile.mkdtemp(prefix=\"coverage\")\n+        self.flag = '--coveragedir=%s' % self.dir\n+\n+    def report_rpc_coverage(self):\n+        \"\"\"\n+        Print out RPC commands that were unexercised by tests.\n+\n+        \"\"\"\n+        uncovered = self._get_uncovered_rpc_commands()\n+\n+        if uncovered:\n+            print(\"Uncovered RPC commands:\")\n+            print(\"\".join((\"  - %s\\n\" % i) for i in sorted(uncovered)))\n+        else:\n+            print(\"All RPC commands covered.\")\n+\n+    def cleanup(self):\n+        return shutil.rmtree(self.dir)\n+\n+    def _get_uncovered_rpc_commands(self):\n+        \"\"\"\n+        Return a set of currently untested RPC commands.\n+\n+        \"\"\"\n+        # This is shared from `qa/rpc-tests/test-framework/coverage.py`\n+        REFERENCE_FILENAME = 'rpc_interface.txt'\n+        COVERAGE_FILE_PREFIX = 'coverage.'\n+\n+        coverage_ref_filename = os.path.join(self.dir, REFERENCE_FILENAME)\n+        coverage_filenames = set()\n+        all_cmds = set()\n+        covered_cmds = set()\n+\n+        if not os.path.isfile(coverage_ref_filename):\n+            raise RuntimeError(\"No coverage reference found\")\n+\n+        with open(coverage_ref_filename, 'r') as f:\n+            all_cmds.update([i.strip() for i in f.readlines()])\n+\n+        for root, dirs, files in os.walk(self.dir):\n+            for filename in files:\n+                if filename.startswith(COVERAGE_FILE_PREFIX):\n+                    coverage_filenames.add(os.path.join(root, filename))\n+\n+        for filename in coverage_filenames:\n+            with open(filename, 'r') as f:\n+                covered_cmds.update([i.strip() for i in f.readlines()])\n+\n+        return all_cmds - covered_cmds\n+\n+\n+if __name__ == '__main__':\n+    runtests()"
      },
      {
        "sha": "484c749369af707d38b52c817917fa98d80613aa",
        "filename": "qa/rpc-tests/bip91.py",
        "status": "added",
        "additions": 195,
        "deletions": 0,
        "changes": 195,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17a6d4a9ddbe62ad54cc60495211fa3f614d50eb/qa/rpc-tests/bip91.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17a6d4a9ddbe62ad54cc60495211fa3f614d50eb/qa/rpc-tests/bip91.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip91.py?ref=17a6d4a9ddbe62ad54cc60495211fa3f614d50eb",
        "patch": "@@ -0,0 +1,195 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+import time\n+\n+'''\n+This test is meant to exercise BIP91\n+regtest lock-in with 108/144 for BIP141 and 29/48 for BIP91\n+mine 143 blocks to transition from DEFINED to STARTED\n+mine 28 blocks signalling readiness and 20 not in order to fail to change state this period for BIP91\n+mine 29 blocks signalling readiness and 19 blocks not signalling readiness for BIP91 (STARTED->LOCKED_IN)\n+bit 1 is optional for the following 48 blocks when BIP91 is LOCKED_IN (LOCKED_IN->ACTIVE)\n+bit 1 is mandatory for the following 144 blocks until BIP141 is locked_in\n+bit 1 is optional after BIP141 is locked_in\n+'''\n+\n+class BIP91Test(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\"])) # connect to a dummy node to allow getblocktemplate\n+        connect_nodes(self.nodes[0], 1)\n+\n+    def run_test(self):\n+        NetworkThread().start() # Start up network handling in another thread\n+        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        self.height = 1  # height of the next block to build\n+        self.last_block_time = int(time.time())\n+\n+        assert_equal(self.get_bip9_status('segwit2x')['status'], 'defined')\n+        assert_equal(self.get_bip9_status('segwit2x')['since'], 0)\n+        assert_equal(self.get_bip9_status('segwit')['status'], 'defined')\n+        assert_equal(self.get_bip9_status('segwit')['since'], 0)\n+\n+\n+        # Test 1\n+        # Advance from DEFINED to STARTED\n+        self.generate_blocks(1,4)\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert_equal(tmpl['version'], 0x20000000)\n+\n+        self.generate_blocks(142, 4)\n+        assert_equal(self.get_bip9_status('segwit2x')['status'], 'started')\n+        assert_equal(self.get_bip9_status('segwit2x')['since'], 48)\n+        assert_equal(self.get_bip9_status('segwit')['status'], 'started')\n+        assert_equal(self.get_bip9_status('segwit')['since'], 144)\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert_equal(tmpl['version'], 0x10000001|0x20000012) # 0x10000001 are TESTDUMMY and CSV\n+\n+        # Test 2\n+        # Fail to achieve LOCKED_IN 28 out of 48 signal bit 4\n+        self.generate_blocks(20, 0x20000010) # signalling bit 4\n+        self.generate_blocks(8, 0x20000012) # signalling bit 1 and 4\n+        self.generate_blocks(10, 0x20000002) # signalling bit 1\n+        self.generate_blocks(10, 4) # not signalling\n+        assert_equal(self.get_bip9_status('segwit2x')['status'], 'started')\n+        assert_equal(self.get_bip9_status('segwit2x')['since'], 48)\n+        assert_equal(self.get_bip9_status('segwit')['status'], 'started')\n+        assert_equal(self.get_bip9_status('segwit')['since'], 144)\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert_equal(tmpl['version'], 0x10000001|0x20000012)\n+\n+\n+        # Test 3\n+        # 28 out of 48 signal bit 4 to achieve LOCKED_IN\n+        self.generate_blocks(20, 0x20000010) # signalling bit 4\n+        self.generate_blocks(9, 0x20000012) # signalling bit 1 and 4\n+        self.generate_blocks(10, 0x20000002) # signalling bit 1\n+        self.generate_blocks(9, 4) # not signalling\n+        assert_equal(self.get_bip9_status('segwit2x')['status'], 'locked_in')\n+        assert_equal(self.get_bip9_status('segwit2x')['since'], 240)\n+        assert_equal(self.get_bip9_status('segwit')['status'], 'started')\n+        assert_equal(self.get_bip9_status('segwit')['since'], 144)\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert_equal(tmpl['version'], 0x10000001|0x20000012)\n+\n+        # Test 4\n+        # No restriction when bit 4 is LOCKED_IN\n+        self.generate_blocks(5, 4)\n+        self.generate_blocks(5, 0x20000000)\n+        self.generate_blocks(5, 0x20000010)\n+        self.generate_blocks(5, 0x40000002)\n+        self.generate_blocks(5, 0x60000002)\n+        self.generate_blocks(5, 0x12)\n+        self.generate_blocks(5, 0x20000002)\n+        self.generate_blocks(5, 0x20000012)\n+        self.generate_blocks(8, 0x20000102)\n+        assert_equal(self.get_bip9_status('segwit2x')['status'], 'active')\n+        assert_equal(self.get_bip9_status('segwit2x')['since'], 288)\n+        assert_equal(self.get_bip9_status('segwit')['status'], 'started')\n+        assert_equal(self.get_bip9_status('segwit')['since'], 144)\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert_equal(tmpl['version'], 0x10000001|0x20000002)\n+\n+        # Test 5\n+        # bit 1 signalling becomes mandatory after bit 4 is ACTIVE\n+        self.generate_blocks(1, 4, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x20000000, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x20000010, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x40000002, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x60000002, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x12, 'bad-no-segwit')\n+        self.generate_blocks(35, 0x20000002)\n+        self.generate_blocks(35, 0x20000012)\n+        self.generate_blocks(73, 0x20000102)\n+\n+        assert_equal(self.get_bip9_status('segwit2x')['status'], 'active')\n+        assert_equal(self.get_bip9_status('segwit2x')['since'], 288)\n+        assert_equal(self.get_bip9_status('segwit')['status'], 'started')\n+        assert_equal(self.get_bip9_status('segwit')['since'], 144)\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert_equal(tmpl['version'], 0x10000001|0x20000002)\n+\n+        self.generate_blocks(1, 4, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x20000000, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x20000010, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x40000002, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x60000002, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x12, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x20000002)\n+\n+        # Test 6\n+        # bit 1 signalling becomes optional after bit 1 locked_in\n+\n+        assert_equal(self.get_bip9_status('segwit2x')['status'], 'active')\n+        assert_equal(self.get_bip9_status('segwit2x')['since'], 288)\n+        assert_equal(self.get_bip9_status('segwit')['status'], 'locked_in')\n+        assert_equal(self.get_bip9_status('segwit')['since'], 432)\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert_equal(tmpl['version'], 0x10000001|0x20000002)\n+\n+        self.generate_blocks(20, 0x20000002)\n+        self.generate_blocks(20, 0x20000012)\n+        self.generate_blocks(20, 0x20000102)\n+        self.generate_blocks(20, 0x20000000)\n+        self.generate_blocks(20, 0x20000010)\n+        self.generate_blocks(20, 0x40000002)\n+        self.generate_blocks(23, 0x60000002)\n+\n+\n+        assert_equal(self.get_bip9_status('segwit2x')['status'], 'active')\n+        assert_equal(self.get_bip9_status('segwit2x')['since'], 288)\n+        assert_equal(self.get_bip9_status('segwit')['status'], 'locked_in')\n+        assert_equal(self.get_bip9_status('segwit')['since'], 432)\n+\n+        self.generate_blocks(1, 4)\n+\n+\n+        assert_equal(self.get_bip9_status('segwit2x')['status'], 'active')\n+        assert_equal(self.get_bip9_status('segwit2x')['since'], 288)\n+        assert_equal(self.get_bip9_status('segwit')['status'], 'active')\n+        assert_equal(self.get_bip9_status('segwit')['since'], 576)\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert_equal(tmpl['version'], 0x10000001|0x20000000)\n+\n+        self.generate_blocks(1, 0x20000002)\n+        self.generate_blocks(1, 0x20000012)\n+        self.generate_blocks(1, 0x20000102)\n+        self.generate_blocks(1, 0x20000000)\n+        self.generate_blocks(1, 0x20000010)\n+        self.generate_blocks(1, 0x40000002)\n+        self.generate_blocks(1, 0x60000002)\n+        self.generate_blocks(1, 4)\n+\n+    def generate_blocks(self, number, version, error = None):\n+        for i in range(number):\n+            block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n+            block.nVersion = version\n+            block.rehash()\n+            block.solve()\n+            assert_equal(self.nodes[0].submitblock(bytes_to_hex_str(block.serialize())), error)\n+            if (error == None):\n+                self.last_block_time += 1\n+                self.tip = block.sha256\n+                self.height += 1\n+\n+    def get_bip9_status(self, key):\n+        info = self.nodes[0].getblockchaininfo()\n+        return info['bip9_softforks'][key]\n+\n+\n+if __name__ == '__main__':\n+    BIP91Test().main()"
      },
      {
        "sha": "5d8e08f72dd235786f200842fd265418ec1b320a",
        "filename": "qa/rpc-tests/fork-large-block.py",
        "status": "added",
        "additions": 242,
        "deletions": 0,
        "changes": 242,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17a6d4a9ddbe62ad54cc60495211fa3f614d50eb/qa/rpc-tests/fork-large-block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17a6d4a9ddbe62ad54cc60495211fa3f614d50eb/qa/rpc-tests/fork-large-block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fork-large-block.py?ref=17a6d4a9ddbe62ad54cc60495211fa3f614d50eb",
        "patch": "@@ -0,0 +1,242 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import NetworkThread, CTransaction, FromHex\n+from test_framework.blocktools import create_coinbase, create_block, create_transaction\n+from test_framework.script import *\n+import time\n+\n+'''\n+This test is meant to exercise forced large block after BIP141 is activated\n+regtest lock-in with 108/144 for BIP141 and 29/48 for BIP91\n+mine 143 blocks to transition from DEFINED to STARTED\n+mine 28 blocks signalling readiness and 20 not in order to fail to change state this period for BIP91\n+mine 29 blocks signalling readiness and 19 blocks not signalling readiness for BIP91 (STARTED->LOCKED_IN)\n+bit 1 is optional for the following 48 blocks when BIP91 is LOCKED_IN (LOCKED_IN->ACTIVE)\n+bit 1 is mandatory for the following 144 blocks until BIP141 is locked_in\n+bit 1 is optional after BIP141 is locked_in\n+mine 1007 blocks accept all blocks size next block required to be greater than 1 Mb\n+'''\n+\n+class ForkLargeBlockTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\", \"-whitelist=127.0.0.1\"])) # connect to a dummy node to allow getblocktemplate\n+        connect_nodes(self.nodes[0], 1)\n+\n+    def run_test(self):\n+        NetworkThread().start() # Start up network handling in another thread\n+        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        self.height = 1  # height of the next block to build\n+        self.last_block_time = int(time.time())\n+\n+        assert_equal(self.get_bip9_status('segwit2x')['status'], 'defined')\n+        assert_equal(self.get_bip9_status('segwit2x')['since'], 0)\n+        assert_equal(self.get_bip9_status('segwit')['status'], 'defined')\n+        assert_equal(self.get_bip9_status('segwit')['since'], 0)\n+\n+\n+        # Test 1\n+        # Advance from DEFINED to STARTED\n+        self.generate_blocks(1,4)\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert_equal(tmpl['version'], 0x20000000)\n+\n+        self.generate_blocks(142, 4)\n+        assert_equal(self.get_bip9_status('segwit2x')['status'], 'started')\n+        assert_equal(self.get_bip9_status('segwit2x')['since'], 48)\n+        assert_equal(self.get_bip9_status('segwit')['status'], 'started')\n+        assert_equal(self.get_bip9_status('segwit')['since'], 144)\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert_equal(tmpl['version'], 0x10000001|0x20000012) # 0x10000001 are TESTDUMMY and CSV\n+\n+        # Test 2\n+        # Fail to achieve LOCKED_IN 28 out of 48 signal bit 4\n+        self.generate_blocks(20, 0x20000010) # signalling bit 4\n+        self.generate_blocks(8, 0x20000012) # signalling bit 1 and 4\n+        self.generate_blocks(10, 0x20000002) # signalling bit 1\n+        self.generate_blocks(10, 4) # not signalling\n+        assert_equal(self.get_bip9_status('segwit2x')['status'], 'started')\n+        assert_equal(self.get_bip9_status('segwit2x')['since'], 48)\n+        assert_equal(self.get_bip9_status('segwit')['status'], 'started')\n+        assert_equal(self.get_bip9_status('segwit')['since'], 144)\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert_equal(tmpl['version'], 0x10000001|0x20000012)\n+\n+\n+        # Test 3\n+        # 28 out of 48 signal bit 4 to achieve LOCKED_IN\n+        self.generate_blocks(20, 0x20000010) # signalling bit 4\n+        self.generate_blocks(9, 0x20000012) # signalling bit 1 and 4\n+        self.generate_blocks(10, 0x20000002) # signalling bit 1\n+        self.generate_blocks(9, 4) # not signalling\n+        assert_equal(self.get_bip9_status('segwit2x')['status'], 'locked_in')\n+        assert_equal(self.get_bip9_status('segwit2x')['since'], 240)\n+        assert_equal(self.get_bip9_status('segwit')['status'], 'started')\n+        assert_equal(self.get_bip9_status('segwit')['since'], 144)\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert_equal(tmpl['version'], 0x10000001|0x20000012)\n+\n+        # Test 4\n+        # No restriction when bit 4 is LOCKED_IN\n+        self.generate_blocks(5, 4)\n+        self.generate_blocks(5, 0x20000000)\n+        self.generate_blocks(5, 0x20000010)\n+        self.generate_blocks(5, 0x40000002)\n+        self.generate_blocks(5, 0x60000002)\n+        self.generate_blocks(5, 0x12)\n+        self.generate_blocks(5, 0x20000002)\n+        self.generate_blocks(5, 0x20000012)\n+        self.generate_blocks(8, 0x20000102)\n+        assert_equal(self.get_bip9_status('segwit2x')['status'], 'active')\n+        assert_equal(self.get_bip9_status('segwit2x')['since'], 288)\n+        assert_equal(self.get_bip9_status('segwit')['status'], 'started')\n+        assert_equal(self.get_bip9_status('segwit')['since'], 144)\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert_equal(tmpl['version'], 0x10000001|0x20000002)\n+\n+        # Test 5\n+        # bit 1 signalling becomes mandatory after bit 4 is ACTIVE\n+        self.generate_blocks(1, 4, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x20000000, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x20000010, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x40000002, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x60000002, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x12, 'bad-no-segwit')\n+        self.generate_blocks(35, 0x20000002)\n+        self.generate_blocks(35, 0x20000012)\n+        self.generate_blocks(73, 0x20000102)\n+\n+        assert_equal(self.get_bip9_status('segwit2x')['status'], 'active')\n+        assert_equal(self.get_bip9_status('segwit2x')['since'], 288)\n+        assert_equal(self.get_bip9_status('segwit')['status'], 'started')\n+        assert_equal(self.get_bip9_status('segwit')['since'], 144)\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert_equal(tmpl['version'], 0x10000001|0x20000002)\n+\n+        self.generate_blocks(1, 4, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x20000000, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x20000010, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x40000002, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x60000002, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x12, 'bad-no-segwit')\n+        self.generate_blocks(1, 0x20000002)\n+\n+        # Test 6\n+        # bit 1 signalling becomes optional after bit 1 locked_in\n+\n+        assert_equal(self.get_bip9_status('segwit2x')['status'], 'active')\n+        assert_equal(self.get_bip9_status('segwit2x')['since'], 288)\n+        assert_equal(self.get_bip9_status('segwit')['status'], 'locked_in')\n+        assert_equal(self.get_bip9_status('segwit')['since'], 432)\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert_equal(tmpl['version'], 0x10000001|0x20000002)\n+\n+        self.generate_blocks(20, 0x20000002)\n+        self.generate_blocks(20, 0x20000012)\n+        self.generate_blocks(20, 0x20000102)\n+        self.generate_blocks(20, 0x20000000)\n+        self.generate_blocks(20, 0x20000010)\n+        self.generate_blocks(20, 0x40000002)\n+        self.generate_blocks(23, 0x60000002)\n+\n+\n+        assert_equal(self.get_bip9_status('segwit2x')['status'], 'active')\n+        assert_equal(self.get_bip9_status('segwit2x')['since'], 288)\n+        assert_equal(self.get_bip9_status('segwit')['status'], 'locked_in')\n+        assert_equal(self.get_bip9_status('segwit')['since'], 432)\n+\n+        self.generate_blocks(1, 4)\n+\n+\n+        assert_equal(self.get_bip9_status('segwit2x')['status'], 'active')\n+        assert_equal(self.get_bip9_status('segwit2x')['since'], 288)\n+        assert_equal(self.get_bip9_status('segwit')['status'], 'active')\n+        assert_equal(self.get_bip9_status('segwit')['since'], 576)\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert_equal(tmpl['version'], 0x10000001|0x20000000)\n+\n+        self.generate_blocks(1, 0x20000002)\n+        self.generate_blocks(1, 0x20000012)\n+        self.generate_blocks(1, 0x20000102)\n+        self.generate_blocks(1, 0x20000000)\n+        self.generate_blocks(1, 0x20000010)\n+        self.generate_blocks(1, 0x40000002)\n+        self.generate_blocks(1, 0x60000002)\n+        self.generate_blocks(1, 4)\n+\n+        # Test 7\n+        # Test hard fork at block 1583\n+        assert_equal(self.height, 584)\n+\n+        b = [self.nodes[0].getblockhash(n) for n in range(1, 10)]\n+        txids = [self.nodes[0].getblock(h)['tx'][0] for h in b]\n+        spend_tx = [FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid)) for txid in txids]\n+        for tx in spend_tx:\n+            tx.rehash()\n+        large_tx = [self.create_tx(t, 0, 1, length=500000) for t in spend_tx]\n+\n+        self.generate_blocks(998, 4)\n+\n+        self.generate_blocks(1, 4, \"bad-blk-length\", txs=[large_tx[0], large_tx[1]]) # block too large\n+        self.generate_blocks(1, 4, txs=[large_tx[0]]) # large txs is ok\n+\n+        assert_equal(self.height, 1583)\n+\n+        self.generate_blocks(1, 4, \"bad-blk-length-toosmall\") # block too small\n+\n+        self.generate_blocks(1, 4, txs=[large_tx[1], large_tx[2], large_tx[3]]) # mandatory large block\n+\n+        assert_equal(self.height, 1584)\n+\n+        # large blocks are not required\n+        for x in range(0, 5):\n+            self.generate_blocks(1000, 4) # small blocks are ok now\n+\n+        assert_equal(self.height, 6584)\n+\n+        self.generate_blocks(1, 4, txs=[large_tx[4], large_tx[5], large_tx[6]]) # large block ok\n+\n+\n+    def generate_blocks(self, number, version, error = None, txs = []):\n+        for i in range(number):\n+            block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n+            block.nVersion = version\n+            if len(txs) > 0:\n+                block.vtx.extend(txs)\n+                block.hashMerkleRoot = block.calc_merkle_root()\n+            block.rehash()\n+            block.solve()\n+            assert_equal(self.nodes[0].submitblock(bytes_to_hex_str(block.serialize())), error)\n+            if (error == None):\n+                self.last_block_time += 1\n+                self.tip = block.sha256\n+                self.height += 1\n+\n+    def get_bip9_status(self, key):\n+        info = self.nodes[0].getblockchaininfo()\n+        return info['bip9_softforks'][key]\n+\n+    def create_tx(self, spend_tx, n, value, script=CScript([OP_TRUE]), length=0):\n+        tx = create_transaction(spend_tx, n, b\"\", value, script)\n+        if length > 0:\n+            script_length = length\n+            script_output = CScript([b'\\x00' * script_length])\n+            tx.vout.append(CTxOut(0, script_output))\n+            tx.rehash()\n+        return tx\n+\n+\n+if __name__ == '__main__':\n+    ForkLargeBlockTest().main()"
      }
    ]
  },
  {
    "sha": "3a3351081f868a60ffde1e42ee9e3ff958315493",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTMzNTEwODFmODY4YTYwZmZkZTFlNDJlZTllM2ZmOTU4MzE1NDkz",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2017-07-18T20:28:05Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-17T17:08:33Z"
      },
      "message": "Advertise NODE_SEGWIT2X service flag by default.",
      "tree": {
        "sha": "5da1e725f55b2b71a7b48591ace5ef8ebd052d82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5da1e725f55b2b71a7b48591ace5ef8ebd052d82"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a3351081f868a60ffde1e42ee9e3ff958315493",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a3351081f868a60ffde1e42ee9e3ff958315493",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a3351081f868a60ffde1e42ee9e3ff958315493",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a3351081f868a60ffde1e42ee9e3ff958315493/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17a6d4a9ddbe62ad54cc60495211fa3f614d50eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17a6d4a9ddbe62ad54cc60495211fa3f614d50eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17a6d4a9ddbe62ad54cc60495211fa3f614d50eb"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 14,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b2e176bbfc52cb7eacd9a96eab504440d9c8f2a8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a3351081f868a60ffde1e42ee9e3ff958315493/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a3351081f868a60ffde1e42ee9e3ff958315493/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3a3351081f868a60ffde1e42ee9e3ff958315493",
        "patch": "@@ -1076,6 +1076,9 @@ bool AppInitParameterInteraction()\n     fAcceptDatacarrier = GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n     nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n+    nLocalServices = ServiceFlags(nLocalServices | NODE_SEGWIT2X);\n+    nRelevantServices = ServiceFlags(nRelevantServices | NODE_SEGWIT2X);\n+\n     // Option to startup with mocktime set (used for regression testing):\n     SetMockTime(GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n "
      },
      {
        "sha": "8dcc91c0d144914759159b529165cedc47370a13",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a3351081f868a60ffde1e42ee9e3ff958315493/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a3351081f868a60ffde1e42ee9e3ff958315493/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=3a3351081f868a60ffde1e42ee9e3ff958315493",
        "patch": "@@ -268,6 +268,9 @@ enum ServiceFlags : uint64_t {\n     // If this is turned off then the node will not service nor make xthin requests\n     NODE_XTHIN = (1 << 4),\n \n+    // NODE_SEGWIT2X supports segwit2x\n+    NODE_SEGWIT2X = (1 << 7),\n+\n     // Bits 24-31 are reserved for temporary experiments. Just pick a bit that\n     // isn't getting used, or one not being used much, and notify the\n     // bitcoin-development mailing list. Remember that service bits are just"
      },
      {
        "sha": "e91214e27b5d9c24820bfd6391ca6d4767795281",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a3351081f868a60ffde1e42ee9e3ff958315493/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a3351081f868a60ffde1e42ee9e3ff958315493/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=3a3351081f868a60ffde1e42ee9e3ff958315493",
        "patch": "@@ -927,6 +927,9 @@ QString formatServicesStr(quint64 mask)\n             case NODE_WITNESS:\n                 strList.append(\"WITNESS\");\n                 break;\n+            case NODE_SEGWIT2X:\n+                strList.append(\"SEGWIT2X\");\n+                break;\n             case NODE_XTHIN:\n                 strList.append(\"XTHIN\");\n                 break;"
      },
      {
        "sha": "5016f0631a4f1bd2df56cc354b49ced77c472a7b",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a3351081f868a60ffde1e42ee9e3ff958315493/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a3351081f868a60ffde1e42ee9e3ff958315493/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=3a3351081f868a60ffde1e42ee9e3ff958315493",
        "patch": "@@ -817,7 +817,7 @@ def run_test(self):\n         connections = []\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.test_node))\n         connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1],\n-                    self.segwit_node, services=NODE_NETWORK|NODE_WITNESS))\n+                    self.segwit_node, services=NODE_NETWORK|NODE_WITNESS|NODE_SEGWIT2X))\n         connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1],\n                     self.old_node, services=NODE_NETWORK))\n         self.test_node.add_connection(connections[0])"
      },
      {
        "sha": "677005e22364ea4c336f5afe8a82fe53efac8276",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a3351081f868a60ffde1e42ee9e3ff958315493/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a3351081f868a60ffde1e42ee9e3ff958315493/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=3a3351081f868a60ffde1e42ee9e3ff958315493",
        "patch": "@@ -1873,16 +1873,16 @@ def test_non_standard_witness(self):\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n-        self.test_node = TestNode() # sets NODE_WITNESS|NODE_NETWORK\n+        self.test_node = TestNode() # sets NODE_WITNESS|NODE_NETWORK|NODE_SEGWIT2X\n         self.old_node = TestNode()  # only NODE_NETWORK\n         self.std_node = TestNode() # for testing node1 (fRequireStandard=true)\n \n         self.p2p_connections = [self.test_node, self.old_node]\n \n         self.connections = []\n-        self.connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.test_node, services=NODE_NETWORK|NODE_WITNESS))\n+        self.connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.test_node, services=NODE_NETWORK|NODE_WITNESS|NODE_SEGWIT2X))\n         self.connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.old_node, services=NODE_NETWORK))\n-        self.connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], self.std_node, services=NODE_NETWORK|NODE_WITNESS))\n+        self.connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], self.std_node, services=NODE_NETWORK|NODE_WITNESS|NODE_SEGWIT2X))\n         self.test_node.add_connection(self.connections[0])\n         self.old_node.add_connection(self.connections[1])\n         self.std_node.add_connection(self.connections[2])"
      },
      {
        "sha": "cf019e35f81d183c513ce150a6005aa2442cbdbd",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a3351081f868a60ffde1e42ee9e3ff958315493/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a3351081f868a60ffde1e42ee9e3ff958315493/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=3a3351081f868a60ffde1e42ee9e3ff958315493",
        "patch": "@@ -53,6 +53,7 @@\n NODE_WITNESS = (1 << 3)\n NODE_UNSUPPORTED_SERVICE_BIT_5 = (1 << 5)\n NODE_UNSUPPORTED_SERVICE_BIT_7 = (1 << 7)\n+NODE_SEGWIT2X = (1 << 7)\n \n logger = logging.getLogger(\"TestFramework.mininode\")\n "
      }
    ]
  },
  {
    "sha": "7ecb554e3774a3b24c853f695fccef26051b3ba6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWNiNTU0ZTM3NzRhM2IyNGM4NTNmNjk1ZmNjZWYyNjA1MWIzYmE2",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2017-07-21T03:10:44Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-17T17:08:33Z"
      },
      "message": "segwit2x node preferential peering policy\n\n1) Advertise node_segwit2x\n2) Prefer to peer with segwit2x and, for now, segwit nodes\n3) Option to disable pref peering",
      "tree": {
        "sha": "ada3ab8022e2ee10814d3df9eca0393586ad7535",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ada3ab8022e2ee10814d3df9eca0393586ad7535"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ecb554e3774a3b24c853f695fccef26051b3ba6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ecb554e3774a3b24c853f695fccef26051b3ba6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ecb554e3774a3b24c853f695fccef26051b3ba6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ecb554e3774a3b24c853f695fccef26051b3ba6/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a3351081f868a60ffde1e42ee9e3ff958315493",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a3351081f868a60ffde1e42ee9e3ff958315493",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a3351081f868a60ffde1e42ee9e3ff958315493"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9aeebde0d1b9cf9f34c03072ca3dedecaf1cb570",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ecb554e3774a3b24c853f695fccef26051b3ba6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ecb554e3774a3b24c853f695fccef26051b3ba6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7ecb554e3774a3b24c853f695fccef26051b3ba6",
        "patch": "@@ -71,6 +71,7 @@ static const bool DEFAULT_PROXYRANDOMIZE = true;\n static const bool DEFAULT_REST_ENABLE = false;\n static const bool DEFAULT_DISABLE_SAFEMODE = false;\n static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n+static const bool DEFAULT_PREFPEERING = true;\n \n std::unique_ptr<CConnman> g_connman;\n std::unique_ptr<PeerLogicValidation> peerLogic;\n@@ -486,6 +487,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-bytespersigop\", strprintf(_(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\"), DEFAULT_BYTES_PER_SIGOP));\n     strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n+    strUsage += HelpMessageOpt(\"-prefpeering\", strprintf(_(\"Preferential peering with segwit2x (and segwit) nodes (default: %u)\"), DEFAULT_PREFPEERING));\n     strUsage += HelpMessageOpt(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT));\n     strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)));\n@@ -1076,8 +1078,14 @@ bool AppInitParameterInteraction()\n     fAcceptDatacarrier = GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n     nMaxDatacarrierBytes = GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n+    // Advertise as segwit2x node\n     nLocalServices = ServiceFlags(nLocalServices | NODE_SEGWIT2X);\n-    nRelevantServices = ServiceFlags(nRelevantServices | NODE_SEGWIT2X);\n+\n+    // Prefer peers with compatible rulesets\n+    if (GetBoolArg(\"-prefpeering\", DEFAULT_PREFPEERING)) {\n+        nRelevantServices = ServiceFlags(nRelevantServices | NODE_SEGWIT2X);\n+        nRelevantServices = ServiceFlags(nRelevantServices | NODE_WITNESS); // TBR\n+    }\n \n     // Option to startup with mocktime set (used for regression testing):\n     SetMockTime(GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op"
      }
    ]
  },
  {
    "sha": "41398fe7430466f6af11a663609e612875d6d1b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTM5OGZlNzQzMDQ2NmY2YWYxMWE2NjM2MDllNjEyODc1ZDZkMWIy",
    "commit": {
      "author": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-13T19:35:03Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-17T17:08:33Z"
      },
      "message": "Revert disconnection of service bit (1 \u00ab 7)",
      "tree": {
        "sha": "b24fa49f2857ee39812aa8b5dcb0a2ec0b438ea6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b24fa49f2857ee39812aa8b5dcb0a2ec0b438ea6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41398fe7430466f6af11a663609e612875d6d1b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41398fe7430466f6af11a663609e612875d6d1b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41398fe7430466f6af11a663609e612875d6d1b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41398fe7430466f6af11a663609e612875d6d1b2/comments",
    "author": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ecb554e3774a3b24c853f695fccef26051b3ba6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ecb554e3774a3b24c853f695fccef26051b3ba6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ecb554e3774a3b24c853f695fccef26051b3ba6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b5eb3b4f268c697dcc878420f0f21abd261b0521",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41398fe7430466f6af11a663609e612875d6d1b2/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41398fe7430466f6af11a663609e612875d6d1b2/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=41398fe7430466f6af11a663609e612875d6d1b2",
        "patch": "@@ -1260,7 +1260,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             return false;\n         }\n \n-        if (nServices & ((1 << 7) | (1 << 5))) {\n+        if (nServices & (1 << 5)) {\n             if (GetTime() < 1533096000) {\n                 // Immediately disconnect peers that use service bits 6 or 8 until August 1st, 2018\n                 // These bits have been used as a flag to indicate that a node is running incompatible"
      }
    ]
  },
  {
    "sha": "a1f6c0f42b2640c8f3e94801b3fbe0d6262fbec7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWY2YzBmNDJiMjY0MGM4ZjNlOTQ4MDFiM2ZiZTBkNjI2MmZiZWM3",
    "commit": {
      "author": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-17T17:42:23Z"
      },
      "committer": {
        "name": "hovah",
        "email": "hovah@protonmail.com",
        "date": "2017-08-17T17:42:23Z"
      },
      "message": "fix gitian name. No rebrand",
      "tree": {
        "sha": "0352c7c5b5578ef5ffa0f99e9ce758c492ee3472",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0352c7c5b5578ef5ffa0f99e9ce758c492ee3472"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1f6c0f42b2640c8f3e94801b3fbe0d6262fbec7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1f6c0f42b2640c8f3e94801b3fbe0d6262fbec7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1f6c0f42b2640c8f3e94801b3fbe0d6262fbec7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1f6c0f42b2640c8f3e94801b3fbe0d6262fbec7/comments",
    "author": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hovah",
      "id": 30928912,
      "node_id": "MDQ6VXNlcjMwOTI4OTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30928912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hovah",
      "html_url": "https://github.com/hovah",
      "followers_url": "https://api.github.com/users/hovah/followers",
      "following_url": "https://api.github.com/users/hovah/following{/other_user}",
      "gists_url": "https://api.github.com/users/hovah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hovah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hovah/subscriptions",
      "organizations_url": "https://api.github.com/users/hovah/orgs",
      "repos_url": "https://api.github.com/users/hovah/repos",
      "events_url": "https://api.github.com/users/hovah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hovah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41398fe7430466f6af11a663609e612875d6d1b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41398fe7430466f6af11a663609e612875d6d1b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41398fe7430466f6af11a663609e612875d6d1b2"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3da8510cfbd70132954e678ee80f07f9c9e16234",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1f6c0f42b2640c8f3e94801b3fbe0d6262fbec7/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1f6c0f42b2640c8f3e94801b3fbe0d6262fbec7/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=a1f6c0f42b2640c8f3e94801b3fbe0d6262fbec7",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-linux-0.15-segwit2x\"\n+name: \"bitcoin-linux-0.15\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "206db7c19e751d414d51d4aaeb2e7bf6bff6288b",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1f6c0f42b2640c8f3e94801b3fbe0d6262fbec7/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1f6c0f42b2640c8f3e94801b3fbe0d6262fbec7/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=a1f6c0f42b2640c8f3e94801b3fbe0d6262fbec7",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-osx-0.15-segwit2x\"\n+name: \"bitcoin-osx-0.15\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "1d4d70494b0cc403649235133c72cbbbc8b2fba0",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1f6c0f42b2640c8f3e94801b3fbe0d6262fbec7/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1f6c0f42b2640c8f3e94801b3fbe0d6262fbec7/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=a1f6c0f42b2640c8f3e94801b3fbe0d6262fbec7",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-win-0.15-segwit2x\"\n+name: \"bitcoin-win-0.15\"\n enable_cache: true\n suites:\n - \"trusty\""
      }
    ]
  }
]