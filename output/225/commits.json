[
  {
    "sha": "223b6f1ba4819e9a146e7aa451d546726d0bc714",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjNiNmYxYmE0ODE5ZTlhMTQ2ZTdhYTQ1MWQ1NDY3MjZkMGJjNzE0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2011-05-15T07:11:04Z"
      },
      "committer": {
        "name": "Witchspace",
        "email": "witchspace81@gmail.com",
        "date": "2011-05-15T10:04:20Z"
      },
      "message": "make bitcoin include files more modular",
      "tree": {
        "sha": "8d52eaba84ba2817d2227cf9fda0c71af75246cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d52eaba84ba2817d2227cf9fda0c71af75246cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/223b6f1ba4819e9a146e7aa451d546726d0bc714",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/223b6f1ba4819e9a146e7aa451d546726d0bc714",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/223b6f1ba4819e9a146e7aa451d546726d0bc714",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/223b6f1ba4819e9a146e7aa451d546726d0bc714/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": null,
    "parents": [
      {
        "sha": "c22feee634ade7f887d7e29635a8e5dc44675273",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c22feee634ade7f887d7e29635a8e5dc44675273",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c22feee634ade7f887d7e29635a8e5dc44675273"
      }
    ],
    "stats": {
      "total": 1150,
      "additions": 640,
      "deletions": 510
    },
    "files": [
      {
        "sha": "580bd3fc63b38300ade9a0c17f186a06f4efb921",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 26,
        "deletions": 19,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -11,28 +11,33 @@\n // - E-mail usually won't line-break if there's no punctuation to break at.\n // - Doubleclicking selects the whole number as one word if it's all alphanumeric.\n //\n+#ifndef BITCOIN_BASE58_H\n+#define BITCOIN_BASE58_H\n \n+#include <string>\n+#include <vector>\n+#include \"bignum.h\"\n \n static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n \n \n-inline string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n+inline std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n {\n     CAutoBN_CTX pctx;\n     CBigNum bn58 = 58;\n     CBigNum bn0 = 0;\n \n     // Convert big endian data to little endian\n     // Extra zero at the end make sure bignum will interpret as a positive number\n-    vector<unsigned char> vchTmp(pend-pbegin+1, 0);\n+    std::vector<unsigned char> vchTmp(pend-pbegin+1, 0);\n     reverse_copy(pbegin, pend, vchTmp.begin());\n \n     // Convert little endian data to bignum\n     CBigNum bn;\n     bn.setvch(vchTmp);\n \n-    // Convert bignum to string\n-    string str;\n+    // Convert bignum to std::string\n+    std::string str;\n     str.reserve((pend - pbegin) * 138 / 100 + 1);\n     CBigNum dv;\n     CBigNum rem;\n@@ -49,17 +54,17 @@ inline string EncodeBase58(const unsigned char* pbegin, const unsigned char* pen\n     for (const unsigned char* p = pbegin; p < pend && *p == 0; p++)\n         str += pszBase58[0];\n \n-    // Convert little endian string to big endian\n+    // Convert little endian std::string to big endian\n     reverse(str.begin(), str.end());\n     return str;\n }\n \n-inline string EncodeBase58(const vector<unsigned char>& vch)\n+inline std::string EncodeBase58(const std::vector<unsigned char>& vch)\n {\n     return EncodeBase58(&vch[0], &vch[0] + vch.size());\n }\n \n-inline bool DecodeBase58(const char* psz, vector<unsigned char>& vchRet)\n+inline bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet)\n {\n     CAutoBN_CTX pctx;\n     vchRet.clear();\n@@ -88,7 +93,7 @@ inline bool DecodeBase58(const char* psz, vector<unsigned char>& vchRet)\n     }\n \n     // Get bignum as little endian data\n-    vector<unsigned char> vchTmp = bn.getvch();\n+    std::vector<unsigned char> vchTmp = bn.getvch();\n \n     // Trim off sign byte if present\n     if (vchTmp.size() >= 2 && vchTmp.end()[-1] == 0 && vchTmp.end()[-2] >= 0x80)\n@@ -105,7 +110,7 @@ inline bool DecodeBase58(const char* psz, vector<unsigned char>& vchRet)\n     return true;\n }\n \n-inline bool DecodeBase58(const string& str, vector<unsigned char>& vchRet)\n+inline bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet)\n {\n     return DecodeBase58(str.c_str(), vchRet);\n }\n@@ -114,16 +119,16 @@ inline bool DecodeBase58(const string& str, vector<unsigned char>& vchRet)\n \n \n \n-inline string EncodeBase58Check(const vector<unsigned char>& vchIn)\n+inline std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)\n {\n     // add 4-byte hash check to the end\n-    vector<unsigned char> vch(vchIn);\n+    std::vector<unsigned char> vch(vchIn);\n     uint256 hash = Hash(vch.begin(), vch.end());\n     vch.insert(vch.end(), (unsigned char*)&hash, (unsigned char*)&hash + 4);\n     return EncodeBase58(vch);\n }\n \n-inline bool DecodeBase58Check(const char* psz, vector<unsigned char>& vchRet)\n+inline bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)\n {\n     if (!DecodeBase58(psz, vchRet))\n         return false;\n@@ -142,7 +147,7 @@ inline bool DecodeBase58Check(const char* psz, vector<unsigned char>& vchRet)\n     return true;\n }\n \n-inline bool DecodeBase58Check(const string& str, vector<unsigned char>& vchRet)\n+inline bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet)\n {\n     return DecodeBase58Check(str.c_str(), vchRet);\n }\n@@ -154,17 +159,17 @@ inline bool DecodeBase58Check(const string& str, vector<unsigned char>& vchRet)\n \n #define ADDRESSVERSION   ((unsigned char)(fTestNet ? 111 : 0))\n \n-inline string Hash160ToAddress(uint160 hash160)\n+inline std::string Hash160ToAddress(uint160 hash160)\n {\n     // add 1-byte version number to the front\n-    vector<unsigned char> vch(1, ADDRESSVERSION);\n+    std::vector<unsigned char> vch(1, ADDRESSVERSION);\n     vch.insert(vch.end(), UBEGIN(hash160), UEND(hash160));\n     return EncodeBase58Check(vch);\n }\n \n inline bool AddressToHash160(const char* psz, uint160& hash160Ret)\n {\n-    vector<unsigned char> vch;\n+    std::vector<unsigned char> vch;\n     if (!DecodeBase58Check(psz, vch))\n         return false;\n     if (vch.empty())\n@@ -176,7 +181,7 @@ inline bool AddressToHash160(const char* psz, uint160& hash160Ret)\n     return (nVersion <= ADDRESSVERSION);\n }\n \n-inline bool AddressToHash160(const string& str, uint160& hash160Ret)\n+inline bool AddressToHash160(const std::string& str, uint160& hash160Ret)\n {\n     return AddressToHash160(str.c_str(), hash160Ret);\n }\n@@ -187,15 +192,17 @@ inline bool IsValidBitcoinAddress(const char* psz)\n     return AddressToHash160(psz, hash160);\n }\n \n-inline bool IsValidBitcoinAddress(const string& str)\n+inline bool IsValidBitcoinAddress(const std::string& str)\n {\n     return IsValidBitcoinAddress(str.c_str());\n }\n \n \n \n \n-inline string PubKeyToAddress(const vector<unsigned char>& vchPubKey)\n+inline std::string PubKeyToAddress(const std::vector<unsigned char>& vchPubKey)\n {\n     return Hash160ToAddress(Hash160(vchPubKey));\n }\n+\n+#endif"
      },
      {
        "sha": "5b4c78e7faf6490f14550e89146c7427a043ebe0",
        "filename": "src/bignum.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bignum.h?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -1,14 +1,14 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_BIGNUM_H\n+#define BITCOIN_BIGNUM_H\n \n #include <stdexcept>\n #include <vector>\n #include <openssl/bn.h>\n \n-\n-\n-\n+#include \"util.h\"\n \n class bignum_error : public std::runtime_error\n {\n@@ -308,7 +308,7 @@ class CBigNum : public BIGNUM\n         CAutoBN_CTX pctx;\n         CBigNum bnBase = nBase;\n         CBigNum bn0 = 0;\n-        string str;\n+        std::string str;\n         CBigNum bn = *this;\n         BN_set_negative(&bn, false);\n         CBigNum dv;\n@@ -348,7 +348,7 @@ class CBigNum : public BIGNUM\n     template<typename Stream>\n     void Unserialize(Stream& s, int nType=0, int nVersion=VERSION)\n     {\n-        vector<unsigned char> vch;\n+        std::vector<unsigned char> vch;\n         ::Unserialize(s, vch, nType, nVersion);\n         setvch(vch);\n     }\n@@ -530,3 +530,5 @@ inline bool operator<=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a,\n inline bool operator>=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) >= 0); }\n inline bool operator<(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) < 0); }\n inline bool operator>(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) > 0); }\n+\n+#endif"
      },
      {
        "sha": "52c0f5b4c3a5891ff935aab78f0410912dc9b8ee",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -4,6 +4,9 @@\n \n #include \"headers.h\"\n \n+using namespace std;\n+using namespace boost;\n+\n void ThreadFlushWalletDB(void* parg);\n \n \n@@ -434,13 +437,13 @@ bool CTxDB::LoadBlockIndex()\n     // Calculate bnChainWork\n     vector<pair<int, CBlockIndex*> > vSortedByHeight;\n     vSortedByHeight.reserve(mapBlockIndex.size());\n-    foreach(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n+    BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n         vSortedByHeight.push_back(make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n-    foreach(const PAIRTYPE(int, CBlockIndex*)& item, vSortedByHeight)\n+    BOOST_FOREACH(const PAIRTYPE(int, CBlockIndex*)& item, vSortedByHeight)\n     {\n         CBlockIndex* pindex = item.second;\n         pindex->bnChainWork = (pindex->pprev ? pindex->pprev->bnChainWork : 0) + pindex->GetBlockWork();\n@@ -603,7 +606,7 @@ int64 CWalletDB::GetAccountCreditDebit(const string& strAccount)\n     ListAccountCreditDebit(strAccount, entries);\n \n     int64 nCreditDebit = 0;\n-    foreach (const CAccountingEntry& entry, entries)\n+    BOOST_FOREACH (const CAccountingEntry& entry, entries)\n         nCreditDebit += entry.nCreditDebit;\n \n     return nCreditDebit;\n@@ -796,7 +799,7 @@ bool CWalletDB::LoadWallet()\n         pcursor->close();\n     }\n \n-    foreach(uint256 hash, vWalletUpgrade)\n+    BOOST_FOREACH(uint256 hash, vWalletUpgrade)\n         WriteTx(hash, mapWallet[hash]);\n \n     printf(\"nFileVersion = %d\\n\", nFileVersion);"
      },
      {
        "sha": "9826194ed0d1f0805ecc5e1c059def6924cb9cf2",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 54,
        "deletions": 42,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -1,6 +1,16 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_DB_H\n+#define BITCOIN_DB_H\n+\n+#include \"key.h\"\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+#include <db_cxx.h>\n \n class CTransaction;\n class CTxIndex;\n@@ -15,9 +25,9 @@ class CAccount;\n class CAccountingEntry;\n class CBlockLocator;\n \n-extern map<string, string> mapAddressBook;\n+extern std::map<std::string, std::string> mapAddressBook;\n extern CCriticalSection cs_mapAddressBook;\n-extern vector<unsigned char> vchDefaultKey;\n+extern std::vector<unsigned char> vchDefaultKey;\n extern bool fClient;\n extern int nBestHeight;\n \n@@ -27,7 +37,7 @@ extern DbEnv dbenv;\n \n \n extern void DBFlush(bool fShutdown);\n-extern vector<unsigned char> GetKeyFromKeyPool();\n+extern std::vector<unsigned char> GetKeyFromKeyPool();\n extern int64 GetOldestKeyPoolTime();\n \n \n@@ -37,8 +47,8 @@ class CDB\n {\n protected:\n     Db* pdb;\n-    string strFile;\n-    vector<DbTxn*> vTxn;\n+    std::string strFile;\n+    std::vector<DbTxn*> vTxn;\n     bool fReadOnly;\n \n     explicit CDB(const char* pszFile, const char* pszMode=\"r+\");\n@@ -247,12 +257,12 @@ class CDB\n     bool ReadVersion(int& nVersion)\n     {\n         nVersion = 0;\n-        return Read(string(\"version\"), nVersion);\n+        return Read(std::string(\"version\"), nVersion);\n     }\n \n     bool WriteVersion(int nVersion)\n     {\n-        return Write(string(\"version\"), nVersion);\n+        return Write(std::string(\"version\"), nVersion);\n     }\n };\n \n@@ -276,7 +286,7 @@ class CTxDB : public CDB\n     bool AddTxIndex(const CTransaction& tx, const CDiskTxPos& pos, int nHeight);\n     bool EraseTxIndex(const CTransaction& tx);\n     bool ContainsTx(uint256 hash);\n-    bool ReadOwnerTxes(uint160 hash160, int nHeight, vector<CTransaction>& vtx);\n+    bool ReadOwnerTxes(uint160 hash160, int nHeight, std::vector<CTransaction>& vtx);\n     bool ReadDiskTx(uint256 hash, CTransaction& tx, CTxIndex& txindex);\n     bool ReadDiskTx(uint256 hash, CTransaction& tx);\n     bool ReadDiskTx(COutPoint outpoint, CTransaction& tx, CTxIndex& txindex);\n@@ -318,14 +328,14 @@ class CKeyPool\n {\n public:\n     int64 nTime;\n-    vector<unsigned char> vchPubKey;\n+    std::vector<unsigned char> vchPubKey;\n \n     CKeyPool()\n     {\n         nTime = GetTime();\n     }\n \n-    CKeyPool(const vector<unsigned char>& vchPubKeyIn)\n+    CKeyPool(const std::vector<unsigned char>& vchPubKeyIn)\n     {\n         nTime = GetTime();\n         vchPubKey = vchPubKeyIn;\n@@ -353,116 +363,116 @@ class CWalletDB : public CDB\n     CWalletDB(const CWalletDB&);\n     void operator=(const CWalletDB&);\n public:\n-    bool ReadName(const string& strAddress, string& strName)\n+    bool ReadName(const std::string& strAddress, std::string& strName)\n     {\n         strName = \"\";\n-        return Read(make_pair(string(\"name\"), strAddress), strName);\n+        return Read(std::make_pair(std::string(\"name\"), strAddress), strName);\n     }\n \n-    bool WriteName(const string& strAddress, const string& strName)\n+    bool WriteName(const std::string& strAddress, const std::string& strName)\n     {\n         CRITICAL_BLOCK(cs_mapAddressBook)\n             mapAddressBook[strAddress] = strName;\n         nWalletDBUpdated++;\n-        return Write(make_pair(string(\"name\"), strAddress), strName);\n+        return Write(std::make_pair(std::string(\"name\"), strAddress), strName);\n     }\n \n-    bool EraseName(const string& strAddress)\n+    bool EraseName(const std::string& strAddress)\n     {\n         // This should only be used for sending addresses, never for receiving addresses,\n         // receiving addresses must always have an address book entry if they're not change return.\n         CRITICAL_BLOCK(cs_mapAddressBook)\n             mapAddressBook.erase(strAddress);\n         nWalletDBUpdated++;\n-        return Erase(make_pair(string(\"name\"), strAddress));\n+        return Erase(std::make_pair(std::string(\"name\"), strAddress));\n     }\n \n     bool ReadTx(uint256 hash, CWalletTx& wtx)\n     {\n-        return Read(make_pair(string(\"tx\"), hash), wtx);\n+        return Read(std::make_pair(std::string(\"tx\"), hash), wtx);\n     }\n \n     bool WriteTx(uint256 hash, const CWalletTx& wtx)\n     {\n         nWalletDBUpdated++;\n-        return Write(make_pair(string(\"tx\"), hash), wtx);\n+        return Write(std::make_pair(std::string(\"tx\"), hash), wtx);\n     }\n \n     bool EraseTx(uint256 hash)\n     {\n         nWalletDBUpdated++;\n-        return Erase(make_pair(string(\"tx\"), hash));\n+        return Erase(std::make_pair(std::string(\"tx\"), hash));\n     }\n \n-    bool ReadKey(const vector<unsigned char>& vchPubKey, CPrivKey& vchPrivKey)\n+    bool ReadKey(const std::vector<unsigned char>& vchPubKey, CPrivKey& vchPrivKey)\n     {\n         vchPrivKey.clear();\n-        return Read(make_pair(string(\"key\"), vchPubKey), vchPrivKey);\n+        return Read(std::make_pair(std::string(\"key\"), vchPubKey), vchPrivKey);\n     }\n \n-    bool WriteKey(const vector<unsigned char>& vchPubKey, const CPrivKey& vchPrivKey)\n+    bool WriteKey(const std::vector<unsigned char>& vchPubKey, const CPrivKey& vchPrivKey)\n     {\n         nWalletDBUpdated++;\n-        return Write(make_pair(string(\"key\"), vchPubKey), vchPrivKey, false);\n+        return Write(std::make_pair(std::string(\"key\"), vchPubKey), vchPrivKey, false);\n     }\n \n     bool WriteBestBlock(const CBlockLocator& locator)\n     {\n         nWalletDBUpdated++;\n-        return Write(string(\"bestblock\"), locator);\n+        return Write(std::string(\"bestblock\"), locator);\n     }\n \n     bool ReadBestBlock(CBlockLocator& locator)\n     {\n-        return Read(string(\"bestblock\"), locator);\n+        return Read(std::string(\"bestblock\"), locator);\n     }\n \n-    bool ReadDefaultKey(vector<unsigned char>& vchPubKey)\n+    bool ReadDefaultKey(std::vector<unsigned char>& vchPubKey)\n     {\n         vchPubKey.clear();\n-        return Read(string(\"defaultkey\"), vchPubKey);\n+        return Read(std::string(\"defaultkey\"), vchPubKey);\n     }\n \n-    bool WriteDefaultKey(const vector<unsigned char>& vchPubKey)\n+    bool WriteDefaultKey(const std::vector<unsigned char>& vchPubKey)\n     {\n         vchDefaultKey = vchPubKey;\n         nWalletDBUpdated++;\n-        return Write(string(\"defaultkey\"), vchPubKey);\n+        return Write(std::string(\"defaultkey\"), vchPubKey);\n     }\n \n     template<typename T>\n-    bool ReadSetting(const string& strKey, T& value)\n+    bool ReadSetting(const std::string& strKey, T& value)\n     {\n-        return Read(make_pair(string(\"setting\"), strKey), value);\n+        return Read(std::make_pair(std::string(\"setting\"), strKey), value);\n     }\n \n     template<typename T>\n-    bool WriteSetting(const string& strKey, const T& value)\n+    bool WriteSetting(const std::string& strKey, const T& value)\n     {\n         nWalletDBUpdated++;\n-        return Write(make_pair(string(\"setting\"), strKey), value);\n+        return Write(std::make_pair(std::string(\"setting\"), strKey), value);\n     }\n \n-    bool ReadAccount(const string& strAccount, CAccount& account);\n-    bool WriteAccount(const string& strAccount, const CAccount& account);\n+    bool ReadAccount(const std::string& strAccount, CAccount& account);\n+    bool WriteAccount(const std::string& strAccount, const CAccount& account);\n     bool WriteAccountingEntry(const CAccountingEntry& acentry);\n-    int64 GetAccountCreditDebit(const string& strAccount);\n-    void ListAccountCreditDebit(const string& strAccount, list<CAccountingEntry>& acentries);\n+    int64 GetAccountCreditDebit(const std::string& strAccount);\n+    void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n \n     bool LoadWallet();\n protected:\n     void ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool);\n     void KeepKey(int64 nIndex);\n     static void ReturnKey(int64 nIndex);\n     friend class CReserveKey;\n-    friend vector<unsigned char> GetKeyFromKeyPool();\n+    friend std::vector<unsigned char> GetKeyFromKeyPool();\n     friend int64 GetOldestKeyPoolTime();\n };\n \n bool LoadWallet(bool& fFirstRunRet);\n-void BackupWallet(const string& strDest);\n+void BackupWallet(const std::string& strDest);\n \n-inline bool SetAddressBookName(const string& strAddress, const string& strName)\n+inline bool SetAddressBookName(const std::string& strAddress, const std::string& strName)\n {\n     return CWalletDB().WriteName(strAddress, strName);\n }\n@@ -471,7 +481,7 @@ class CReserveKey\n {\n protected:\n     int64 nIndex;\n-    vector<unsigned char> vchPubKey;\n+    std::vector<unsigned char> vchPubKey;\n public:\n     CReserveKey()\n     {\n@@ -484,7 +494,7 @@ class CReserveKey\n             ReturnKey();\n     }\n \n-    vector<unsigned char> GetReservedKey()\n+    std::vector<unsigned char> GetReservedKey()\n     {\n         if (nIndex == -1)\n         {\n@@ -512,3 +522,5 @@ class CReserveKey\n         vchPubKey.clear();\n     }\n };\n+\n+#endif"
      },
      {
        "sha": "d40c5ed0a95b4d28e61c047bb57259ab27c57b04",
        "filename": "src/headers.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/headers.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/headers.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/headers.h?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -109,8 +109,6 @@\n \n \n #pragma hdrstop\n-using namespace std;\n-using namespace boost;\n \n #include \"strlcpy.h\"\n #include \"serialize.h\"\n@@ -133,6 +131,7 @@ using namespace boost;\n #endif\n #include \"init.h\"\n \n+#ifdef GUI\n #include \"xpm/addressbook16.xpm\"\n #include \"xpm/addressbook20.xpm\"\n #include \"xpm/bitcoin16.xpm\"\n@@ -145,3 +144,4 @@ using namespace boost;\n #include \"xpm/send16noshadow.xpm\"\n #include \"xpm/send20.xpm\"\n #include \"xpm/about.xpm\"\n+#endif"
      },
      {
        "sha": "431c533a831f2d35e828aaabb3cdb5bb656e0522",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -1,14 +1,10 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n-\n #include \"headers.h\"\n \n-\n-\n-\n-\n-\n+using namespace std;\n+using namespace boost;\n \n //////////////////////////////////////////////////////////////////////////////\n //\n@@ -71,7 +67,6 @@ void HandleSIGTERM(int)\n //\n // Start\n //\n-\n #ifndef GUI\n int main(int argc, char* argv[])\n {\n@@ -458,7 +453,7 @@ bool AppInit2(int argc, char* argv[])\n \n     if (mapArgs.count(\"-addnode\"))\n     {\n-        foreach(string strAddr, mapMultiArgs[\"-addnode\"])\n+        BOOST_FOREACH(string strAddr, mapMultiArgs[\"-addnode\"])\n         {\n             CAddress addr(strAddr, fAllowDNS);\n             addr.nTime = 0; // so it won't relay unless successfully connected"
      },
      {
        "sha": "61b2728576a44cd9c9bae6ea9711127f561018e4",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -1,7 +1,11 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_INIT_H\n+#define BITCOIN_INIT_H\n \n void Shutdown(void* parg);\n bool AppInit(int argc, char* argv[]);\n bool AppInit2(int argc, char* argv[]);\n+\n+#endif"
      },
      {
        "sha": "099d9e07354b31a9bcdcb87038bae6a157540c04",
        "filename": "src/irc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/irc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/irc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/irc.cpp?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -4,6 +4,9 @@\n \n #include \"headers.h\"\n \n+using namespace std;\n+using namespace boost;\n+\n int nGotIRCAddresses = 0;\n bool fGotExternalIP = false;\n "
      },
      {
        "sha": "18e53597f602bfc17d84fe5bc3fd53ab983a4c1b",
        "filename": "src/irc.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/irc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/irc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/irc.h?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -1,9 +1,13 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_IRC_H\n+#define BITCOIN_IRC_H\n \n-bool RecvLine(SOCKET hSocket, string& strLine);\n+bool RecvLine(SOCKET hSocket, std::string& strLine);\n void ThreadIRCSeed(void* parg);\n \n extern int nGotIRCAddresses;\n extern bool fGotExternalIP;\n+\n+#endif"
      },
      {
        "sha": "c973d6eb82f9fd769da91329775bf83e736cb951",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -1,7 +1,12 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_KEY_H\n+#define BITCOIN_KEY_H\n \n+#include <openssl/ec.h>\n+#include <openssl/ecdsa.h>\n+#include <openssl/obj_mac.h>\n \n // secp160k1\n // const unsigned int PRIVATE_KEY_SIZE = 192;\n@@ -36,7 +41,7 @@ class key_error : public std::runtime_error\n \n \n // secure_allocator is defined in serialize.h\n-typedef vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;\n+typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;\n \n \n \n@@ -109,7 +114,7 @@ class CKey\n         return vchPrivKey;\n     }\n \n-    bool SetPubKey(const vector<unsigned char>& vchPubKey)\n+    bool SetPubKey(const std::vector<unsigned char>& vchPubKey)\n     {\n         const unsigned char* pbegin = &vchPubKey[0];\n         if (!o2i_ECPublicKey(&pkey, &pbegin, vchPubKey.size()))\n@@ -118,19 +123,19 @@ class CKey\n         return true;\n     }\n \n-    vector<unsigned char> GetPubKey() const\n+    std::vector<unsigned char> GetPubKey() const\n     {\n         unsigned int nSize = i2o_ECPublicKey(pkey, NULL);\n         if (!nSize)\n             throw key_error(\"CKey::GetPubKey() : i2o_ECPublicKey failed\");\n-        vector<unsigned char> vchPubKey(nSize, 0);\n+        std::vector<unsigned char> vchPubKey(nSize, 0);\n         unsigned char* pbegin = &vchPubKey[0];\n         if (i2o_ECPublicKey(pkey, &pbegin) != nSize)\n             throw key_error(\"CKey::GetPubKey() : i2o_ECPublicKey returned unexpected size\");\n         return vchPubKey;\n     }\n \n-    bool Sign(uint256 hash, vector<unsigned char>& vchSig)\n+    bool Sign(uint256 hash, std::vector<unsigned char>& vchSig)\n     {\n         vchSig.clear();\n         unsigned char pchSig[10000];\n@@ -142,27 +147,29 @@ class CKey\n         return true;\n     }\n \n-    bool Verify(uint256 hash, const vector<unsigned char>& vchSig)\n+    bool Verify(uint256 hash, const std::vector<unsigned char>& vchSig)\n     {\n         // -1 = error, 0 = bad sig, 1 = good\n         if (ECDSA_verify(0, (unsigned char*)&hash, sizeof(hash), &vchSig[0], vchSig.size(), pkey) != 1)\n             return false;\n         return true;\n     }\n \n-    static bool Sign(const CPrivKey& vchPrivKey, uint256 hash, vector<unsigned char>& vchSig)\n+    static bool Sign(const CPrivKey& vchPrivKey, uint256 hash, std::vector<unsigned char>& vchSig)\n     {\n         CKey key;\n         if (!key.SetPrivKey(vchPrivKey))\n             return false;\n         return key.Sign(hash, vchSig);\n     }\n \n-    static bool Verify(const vector<unsigned char>& vchPubKey, uint256 hash, const vector<unsigned char>& vchSig)\n+    static bool Verify(const std::vector<unsigned char>& vchPubKey, uint256 hash, const std::vector<unsigned char>& vchSig)\n     {\n         CKey key;\n         if (!key.SetPubKey(vchPubKey))\n             return false;\n         return key.Verify(hash, vchSig);\n     }\n };\n+\n+#endif"
      },
      {
        "sha": "68b6b4ee1bbb52eca3b0bebcdea36322356245e3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 60,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -1,13 +1,11 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n-\n #include \"headers.h\"\n #include \"cryptopp/sha.h\"\n \n-\n-\n-\n+using namespace std;\n+using namespace boost;\n \n //\n // Global state\n@@ -156,7 +154,7 @@ bool AddToWallet(const CWalletTx& wtxIn)\n         // If default receiving address gets used, replace it with a new one\n         CScript scriptDefaultKey;\n         scriptDefaultKey.SetBitcoinAddress(vchDefaultKey);\n-        foreach(const CTxOut& txout, wtx.vout)\n+        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n             if (txout.scriptPubKey == scriptDefaultKey)\n             {\n@@ -244,7 +242,7 @@ void AddOrphanTx(const CDataStream& vMsg)\n     if (mapOrphanTransactions.count(hash))\n         return;\n     CDataStream* pvMsg = mapOrphanTransactions[hash] = new CDataStream(vMsg);\n-    foreach(const CTxIn& txin, tx.vin)\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         mapOrphanTransactionsByPrev.insert(make_pair(txin.prevout.hash, pvMsg));\n }\n \n@@ -255,7 +253,7 @@ void EraseOrphanTx(uint256 hash)\n     const CDataStream* pvMsg = mapOrphanTransactions[hash];\n     CTransaction tx;\n     CDataStream(*pvMsg) >> tx;\n-    foreach(const CTxIn& txin, tx.vin)\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n         for (multimap<uint256, CDataStream*>::iterator mi = mapOrphanTransactionsByPrev.lower_bound(txin.prevout.hash);\n              mi != mapOrphanTransactionsByPrev.upper_bound(txin.prevout.hash);)\n@@ -426,7 +424,7 @@ void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, l\n \n     // Sent/received.  Standard client will never generate a send-to-multiple-recipients,\n     // but non-standard clients might (so return a list of address/amount pairs)\n-    foreach(const CTxOut& txout, vout)\n+    BOOST_FOREACH(const CTxOut& txout, vout)\n     {\n         string address;\n         uint160 hash160;\n@@ -471,13 +469,13 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nGenerated, i\n         nGenerated = allGeneratedMature;\n     if (strAccount == strSentAccount)\n     {\n-        foreach(const PAIRTYPE(string,int64)& s, listSent)\n+        BOOST_FOREACH(const PAIRTYPE(string,int64)& s, listSent)\n             nSent += s.second;\n         nFee = allFee;\n     }\n     CRITICAL_BLOCK(cs_mapAddressBook)\n     {\n-        foreach(const PAIRTYPE(string,int64)& r, listReceived)\n+        BOOST_FOREACH(const PAIRTYPE(string,int64)& r, listReceived)\n         {\n             if (mapAddressBook.count(r.first))\n             {\n@@ -557,7 +555,7 @@ void CWalletTx::AddSupportingTransactions(CTxDB& txdb)\n     if (SetMerkleBranch() < COPY_DEPTH)\n     {\n         vector<uint256> vWorkQueue;\n-        foreach(const CTxIn& txin, vin)\n+        BOOST_FOREACH(const CTxIn& txin, vin)\n             vWorkQueue.push_back(txin.prevout.hash);\n \n         // This critsect is OK because txdb is already open\n@@ -576,7 +574,7 @@ void CWalletTx::AddSupportingTransactions(CTxDB& txdb)\n                 if (mapWallet.count(hash))\n                 {\n                     tx = mapWallet[hash];\n-                    foreach(const CMerkleTx& txWalletPrev, mapWallet[hash].vtxPrev)\n+                    BOOST_FOREACH(const CMerkleTx& txWalletPrev, mapWallet[hash].vtxPrev)\n                         mapWalletPrev[txWalletPrev.GetHash()] = &txWalletPrev;\n                 }\n                 else if (mapWalletPrev.count(hash))\n@@ -597,7 +595,7 @@ void CWalletTx::AddSupportingTransactions(CTxDB& txdb)\n                 vtxPrev.push_back(tx);\n \n                 if (nDepth < COPY_DEPTH)\n-                    foreach(const CTxIn& txin, tx.vin)\n+                    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n                         vWorkQueue.push_back(txin.prevout.hash);\n             }\n         }\n@@ -628,7 +626,7 @@ bool CTransaction::CheckTransaction() const\n \n     // Check for negative or overflow output values\n     int64 nValueOut = 0;\n-    foreach(const CTxOut& txout, vout)\n+    BOOST_FOREACH(const CTxOut& txout, vout)\n     {\n         if (txout.nValue < 0)\n             return error(\"CTransaction::CheckTransaction() : txout.nValue negative\");\n@@ -646,7 +644,7 @@ bool CTransaction::CheckTransaction() const\n     }\n     else\n     {\n-        foreach(const CTxIn& txin, vin)\n+        BOOST_FOREACH(const CTxIn& txin, vin)\n             if (txin.prevout.IsNull())\n                 return error(\"CTransaction::CheckTransaction() : prevout is null\");\n     }\n@@ -804,7 +802,7 @@ bool CTransaction::RemoveFromMemoryPool()\n     // Remove transaction from memory pool\n     CRITICAL_BLOCK(cs_mapTransactions)\n     {\n-        foreach(const CTxIn& txin, vin)\n+        BOOST_FOREACH(const CTxIn& txin, vin)\n             mapNextTx.erase(txin.prevout);\n         mapTransactions.erase(GetHash());\n         nTransactionsUpdated++;\n@@ -872,7 +870,7 @@ bool CWalletTx::AcceptWalletTransaction(CTxDB& txdb, bool fCheckInputs)\n     CRITICAL_BLOCK(cs_mapTransactions)\n     {\n         // Add previous supporting transactions first\n-        foreach(CMerkleTx& tx, vtxPrev)\n+        BOOST_FOREACH(CMerkleTx& tx, vtxPrev)\n         {\n             if (!tx.IsCoinBase())\n             {\n@@ -897,7 +895,7 @@ int ScanForWalletTransactions(CBlockIndex* pindexStart)\n         {\n             CBlock block;\n             block.ReadFromDisk(pindex, true);\n-            foreach(CTransaction& tx, block.vtx)\n+            BOOST_FOREACH(CTransaction& tx, block.vtx)\n             {\n                 if (AddToWalletIfInvolvingMe(tx, &block))\n                     ret++;\n@@ -916,7 +914,7 @@ void ReacceptWalletTransactions()\n     {\n         fRepeat = false;\n         vector<CDiskTxPos> vMissingTx;\n-        foreach(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+        BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n         {\n             CWalletTx& wtx = item.second;\n             if (wtx.IsCoinBase() && wtx.IsSpent(0))\n@@ -969,7 +967,7 @@ void ReacceptWalletTransactions()\n \n void CWalletTx::RelayWalletTransaction(CTxDB& txdb)\n {\n-    foreach(const CMerkleTx& tx, vtxPrev)\n+    BOOST_FOREACH(const CMerkleTx& tx, vtxPrev)\n     {\n         if (!tx.IsCoinBase())\n         {\n@@ -1014,15 +1012,15 @@ void ResendWalletTransactions()\n     {\n         // Sort them in chronological order\n         multimap<unsigned int, CWalletTx*> mapSorted;\n-        foreach(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+        BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n         {\n             CWalletTx& wtx = item.second;\n             // Don't rebroadcast until it's had plenty of time that\n             // it should have gotten in already by now.\n             if (nTimeBestReceived - (int64)wtx.nTimeReceived > 5 * 60)\n                 mapSorted.insert(make_pair(wtx.nTimeReceived, &wtx));\n         }\n-        foreach(PAIRTYPE(const unsigned int, CWalletTx*)& item, mapSorted)\n+        BOOST_FOREACH(PAIRTYPE(const unsigned int, CWalletTx*)& item, mapSorted)\n         {\n             CWalletTx& wtx = *item.second;\n             wtx.RelayWalletTransaction(txdb);\n@@ -1198,7 +1196,7 @@ bool CTransaction::DisconnectInputs(CTxDB& txdb)\n     // Relinquish previous transactions' spent pointers\n     if (!IsCoinBase())\n     {\n-        foreach(const CTxIn& txin, vin)\n+        BOOST_FOREACH(const CTxIn& txin, vin)\n         {\n             COutPoint prevout = txin.prevout;\n \n@@ -1421,7 +1419,7 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n \n     map<uint256, CTxIndex> mapUnused;\n     int64 nFees = 0;\n-    foreach(CTransaction& tx, vtx)\n+    BOOST_FOREACH(CTransaction& tx, vtx)\n     {\n         CDiskTxPos posThisTx(pindex->nFile, pindex->nBlockPos, nTxPos);\n         nTxPos += ::GetSerializeSize(tx, SER_DISK);\n@@ -1444,7 +1442,7 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n     }\n \n     // Watch for transactions paying to me\n-    foreach(CTransaction& tx, vtx)\n+    BOOST_FOREACH(CTransaction& tx, vtx)\n         AddToWalletIfInvolvingMe(tx, this, true);\n \n     return true;\n@@ -1481,7 +1479,7 @@ bool Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n \n     // Disconnect shorter branch\n     vector<CTransaction> vResurrect;\n-    foreach(CBlockIndex* pindex, vDisconnect)\n+    BOOST_FOREACH(CBlockIndex* pindex, vDisconnect)\n     {\n         CBlock block;\n         if (!block.ReadFromDisk(pindex))\n@@ -1490,7 +1488,7 @@ bool Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n             return error(\"Reorganize() : DisconnectBlock failed\");\n \n         // Queue memory transactions to resurrect\n-        foreach(const CTransaction& tx, block.vtx)\n+        BOOST_FOREACH(const CTransaction& tx, block.vtx)\n             if (!tx.IsCoinBase())\n                 vResurrect.push_back(tx);\n     }\n@@ -1511,7 +1509,7 @@ bool Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n         }\n \n         // Queue memory transactions to delete\n-        foreach(const CTransaction& tx, block.vtx)\n+        BOOST_FOREACH(const CTransaction& tx, block.vtx)\n             vDelete.push_back(tx);\n     }\n     if (!txdb.WriteHashBestChain(pindexNew->GetBlockHash()))\n@@ -1522,21 +1520,21 @@ bool Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n         return error(\"Reorganize() : TxnCommit failed\");\n \n     // Disconnect shorter branch\n-    foreach(CBlockIndex* pindex, vDisconnect)\n+    BOOST_FOREACH(CBlockIndex* pindex, vDisconnect)\n         if (pindex->pprev)\n             pindex->pprev->pnext = NULL;\n \n     // Connect longer branch\n-    foreach(CBlockIndex* pindex, vConnect)\n+    BOOST_FOREACH(CBlockIndex* pindex, vConnect)\n         if (pindex->pprev)\n             pindex->pprev->pnext = pindex;\n \n     // Resurrect memory transactions that were in the disconnected branch\n-    foreach(CTransaction& tx, vResurrect)\n+    BOOST_FOREACH(CTransaction& tx, vResurrect)\n         tx.AcceptToMemoryPool(txdb, false);\n \n     // Delete redundant memory transactions that are in the connected branch\n-    foreach(CTransaction& tx, vDelete)\n+    BOOST_FOREACH(CTransaction& tx, vDelete)\n         tx.RemoveFromMemoryPool();\n \n     return true;\n@@ -1571,7 +1569,7 @@ bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)\n         pindexNew->pprev->pnext = pindexNew;\n \n         // Delete redundant memory transactions\n-        foreach(CTransaction& tx, vtx)\n+        BOOST_FOREACH(CTransaction& tx, vtx)\n             tx.RemoveFromMemoryPool();\n     }\n     else\n@@ -1682,7 +1680,7 @@ bool CBlock::CheckBlock() const\n             return error(\"CheckBlock() : more than one coinbase\");\n \n     // Check transactions\n-    foreach(const CTransaction& tx, vtx)\n+    BOOST_FOREACH(const CTransaction& tx, vtx)\n         if (!tx.CheckTransaction())\n             return error(\"CheckBlock() : CheckTransaction failed\");\n \n@@ -1720,7 +1718,7 @@ bool CBlock::AcceptBlock()\n         return error(\"AcceptBlock() : block's timestamp is too early\");\n \n     // Check that all transactions are finalized\n-    foreach(const CTransaction& tx, vtx)\n+    BOOST_FOREACH(const CTransaction& tx, vtx)\n         if (!tx.IsFinal(nHeight, GetBlockTime()))\n             return error(\"AcceptBlock() : contains a non-final transaction\");\n \n@@ -1748,7 +1746,7 @@ bool CBlock::AcceptBlock()\n     // Relay inventory, but don't relay old inventory during initial block download\n     if (hashBestChain == hash)\n         CRITICAL_BLOCK(cs_vNodes)\n-            foreach(CNode* pnode, vNodes)\n+            BOOST_FOREACH(CNode* pnode, vNodes)\n                 if (nBestHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : 118000))\n                     pnode->PushInventory(CInv(MSG_BLOCK, hash));\n \n@@ -2120,7 +2118,7 @@ string GetWarnings(string strFor)\n     // Alerts\n     CRITICAL_BLOCK(cs_mapAlerts)\n     {\n-        foreach(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n+        BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n         {\n             const CAlert& alert = item.second;\n             if (alert.AppliesToMe() && alert.nPriority > nPriority)\n@@ -2167,7 +2165,7 @@ bool CAlert::ProcessAlert()\n         }\n \n         // Check if this alert has been cancelled\n-        foreach(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n+        BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n         {\n             const CAlert& alert = item.second;\n             if (alert.Cancels(*this))\n@@ -2431,7 +2429,7 @@ bool ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n         // Relay alerts\n         CRITICAL_BLOCK(cs_mapAlerts)\n-            foreach(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n+            BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n                 item.second.RelayTo(pfrom);\n \n         pfrom->fSuccessfullyConnected = true;\n@@ -2469,7 +2467,7 @@ bool ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         // Store the new addresses\n         int64 nNow = GetAdjustedTime();\n         int64 nSince = nNow - 10 * 60;\n-        foreach(CAddress& addr, vAddr)\n+        BOOST_FOREACH(CAddress& addr, vAddr)\n         {\n             if (fShutdown)\n                 return true;\n@@ -2493,7 +2491,7 @@ bool ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     uint256 hashRand = hashSalt ^ (((int64)addr.ip)<<32) ^ ((GetTime()+addr.ip)/(24*60*60));\n                     hashRand = Hash(BEGIN(hashRand), END(hashRand));\n                     multimap<uint256, CNode*> mapMix;\n-                    foreach(CNode* pnode, vNodes)\n+                    BOOST_FOREACH(CNode* pnode, vNodes)\n                     {\n                         if (pnode->nVersion < 31402)\n                             continue;\n@@ -2522,7 +2520,7 @@ bool ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             return error(\"message inv size() = %d\", vInv.size());\n \n         CTxDB txdb(\"r\");\n-        foreach(const CInv& inv, vInv)\n+        BOOST_FOREACH(const CInv& inv, vInv)\n         {\n             if (fShutdown)\n                 return true;\n@@ -2554,7 +2552,7 @@ bool ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         if (vInv.size() > 50000)\n             return error(\"message getdata size() = %d\", vInv.size());\n \n-        foreach(const CInv& inv, vInv)\n+        BOOST_FOREACH(const CInv& inv, vInv)\n         {\n             if (fShutdown)\n                 return true;\n@@ -2717,7 +2715,7 @@ bool ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                 }\n             }\n \n-            foreach(uint256 hash, vWorkQueue)\n+            BOOST_FOREACH(uint256 hash, vWorkQueue)\n                 EraseOrphanTx(hash);\n         }\n         else if (fMissingInputs)\n@@ -2752,13 +2750,13 @@ bool ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         CRITICAL_BLOCK(cs_mapAddresses)\n         {\n             unsigned int nCount = 0;\n-            foreach(const PAIRTYPE(vector<unsigned char>, CAddress)& item, mapAddresses)\n+            BOOST_FOREACH(const PAIRTYPE(vector<unsigned char>, CAddress)& item, mapAddresses)\n             {\n                 const CAddress& addr = item.second;\n                 if (addr.nTime > nSince)\n                     nCount++;\n             }\n-            foreach(const PAIRTYPE(vector<unsigned char>, CAddress)& item, mapAddresses)\n+            BOOST_FOREACH(const PAIRTYPE(vector<unsigned char>, CAddress)& item, mapAddresses)\n             {\n                 const CAddress& addr = item.second;\n                 if (addr.nTime > nSince && GetRand(nCount) < 2500)\n@@ -2861,7 +2859,7 @@ bool ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             // Relay\n             pfrom->setKnown.insert(alert.GetHash());\n             CRITICAL_BLOCK(cs_vNodes)\n-                foreach(CNode* pnode, vNodes)\n+                BOOST_FOREACH(CNode* pnode, vNodes)\n                     alert.RelayTo(pnode);\n         }\n     }\n@@ -2912,7 +2910,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             nLastRebroadcast = GetTime();\n             CRITICAL_BLOCK(cs_vNodes)\n             {\n-                foreach(CNode* pnode, vNodes)\n+                BOOST_FOREACH(CNode* pnode, vNodes)\n                 {\n                     // Periodically clear setAddrKnown to allow refresh broadcasts\n                     pnode->setAddrKnown.clear();\n@@ -2964,7 +2962,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         {\n             vector<CAddress> vAddr;\n             vAddr.reserve(pto->vAddrToSend.size());\n-            foreach(const CAddress& addr, pto->vAddrToSend)\n+            BOOST_FOREACH(const CAddress& addr, pto->vAddrToSend)\n             {\n                 // returns true if wasn't already contained in the set\n                 if (pto->setAddrKnown.insert(addr).second)\n@@ -2993,7 +2991,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         {\n             vInv.reserve(pto->vInventoryToSend.size());\n             vInvWait.reserve(pto->vInventoryToSend.size());\n-            foreach(const CInv& inv, pto->vInventoryToSend)\n+            BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n             {\n                 if (pto->setInventoryKnown.count(inv))\n                     continue;\n@@ -3220,7 +3218,7 @@ class COrphan\n     void print() const\n     {\n         printf(\"COrphan(hash=%s, dPriority=%.1f)\\n\", ptx->GetHash().ToString().substr(0,10).c_str(), dPriority);\n-        foreach(uint256 hash, setDependsOn)\n+        BOOST_FOREACH(uint256 hash, setDependsOn)\n             printf(\"   setDependsOn %s\\n\", hash.ToString().substr(0,10).c_str());\n     }\n };\n@@ -3264,7 +3262,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n \n             COrphan* porphan = NULL;\n             double dPriority = 0;\n-            foreach(const CTxIn& txin, tx.vin)\n+            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             {\n                 // Read prev transaction\n                 CTransaction txPrev;\n@@ -3349,7 +3347,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n             uint256 hash = tx.GetHash();\n             if (mapDependers.count(hash))\n             {\n-                foreach(COrphan* porphan, mapDependers[hash])\n+                BOOST_FOREACH(COrphan* porphan, mapDependers[hash])\n                 {\n                     if (!porphan->setDependsOn.empty())\n                     {\n@@ -3679,7 +3677,7 @@ bool SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfTheirs, set<\n            vCoins.push_back(&(*it).second);\n        random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n \n-       foreach(CWalletTx* pcoin, vCoins)\n+       BOOST_FOREACH(CWalletTx* pcoin, vCoins)\n        {\n             if (!pcoin->IsFinal() || !pcoin->IsConfirmed())\n                 continue;\n@@ -3817,7 +3815,7 @@ bool SelectCoins(int64 nTargetValue, set<pair<CWalletTx*,unsigned int> >& setCoi\n bool CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet)\n {\n     int64 nValue = 0;\n-    foreach (const PAIRTYPE(CScript, int64)& s, vecSend)\n+    BOOST_FOREACH (const PAIRTYPE(CScript, int64)& s, vecSend)\n     {\n         if (nValue < 0)\n             return false;\n@@ -3842,15 +3840,15 @@ bool CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CWalletTx&\n                 int64 nTotalValue = nValue + nFeeRet;\n                 double dPriority = 0;\n                 // vouts to the payees\n-                foreach (const PAIRTYPE(CScript, int64)& s, vecSend)\n+                BOOST_FOREACH (const PAIRTYPE(CScript, int64)& s, vecSend)\n                     wtxNew.vout.push_back(CTxOut(s.second, s.first));\n \n                 // Choose coins to use\n                 set<pair<CWalletTx*,unsigned int> > setCoins;\n                 int64 nValueIn = 0;\n                 if (!SelectCoins(nTotalValue, setCoins, nValueIn))\n                     return false;\n-                foreach(PAIRTYPE(CWalletTx*, unsigned int) pcoin, setCoins)\n+                BOOST_FOREACH(PAIRTYPE(CWalletTx*, unsigned int) pcoin, setCoins)\n                 {\n                     int64 nCredit = pcoin.first->vout[pcoin.second].nValue;\n                     dPriority += (double)nCredit * pcoin.first->GetDepthInMainChain();\n@@ -3886,12 +3884,12 @@ bool CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CWalletTx&\n                     reservekey.ReturnKey();\n \n                 // Fill vin\n-                foreach(const PAIRTYPE(CWalletTx*,unsigned int)& coin, setCoins)\n+                BOOST_FOREACH(const PAIRTYPE(CWalletTx*,unsigned int)& coin, setCoins)\n                     wtxNew.vin.push_back(CTxIn(coin.first->GetHash(),coin.second));\n \n                 // Sign\n                 int nIn = 0;\n-                foreach(const PAIRTYPE(CWalletTx*,unsigned int)& coin, setCoins)\n+                BOOST_FOREACH(const PAIRTYPE(CWalletTx*,unsigned int)& coin, setCoins)\n                     if (!SignSignature(*coin.first, wtxNew, nIn++))\n                         return false;\n \n@@ -3951,7 +3949,7 @@ bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n \n             // Mark old coins as spent\n             set<CWalletTx*> setCoins;\n-            foreach(const CTxIn& txin, wtxNew.vin)\n+            BOOST_FOREACH(const CTxIn& txin, wtxNew.vin)\n             {\n                 CWalletTx &pcoin = mapWallet[txin.prevout.hash];\n                 pcoin.MarkSpent(txin.prevout.n);"
      },
      {
        "sha": "92b73fe5adc4371f68f1810b2717fb02f7ca7a72",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 116,
        "deletions": 104,
        "changes": 220,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -1,6 +1,16 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_MAIN_H\n+#define BITCOIN_MAIN_H\n+\n+#include \"bignum.h\"\n+#include \"net.h\"\n+#include \"key.h\"\n+#include \"db.h\"\n+#include \"script.h\"\n+\n+#include <list>\n \n class COutPoint;\n class CInPoint;\n@@ -35,7 +45,7 @@ static const int fHaveUPnP = false;\n \n \n extern CCriticalSection cs_main;\n-extern map<uint256, CBlockIndex*> mapBlockIndex;\n+extern std::map<uint256, CBlockIndex*> mapBlockIndex;\n extern uint256 hashGenesisBlock;\n extern CBigNum bnProofOfWorkLimit;\n extern CBlockIndex* pindexGenesisBlock;\n@@ -45,11 +55,11 @@ extern CBigNum bnBestInvalidWork;\n extern uint256 hashBestChain;\n extern CBlockIndex* pindexBest;\n extern unsigned int nTransactionsUpdated;\n-extern map<uint256, int> mapRequestCount;\n+extern std::map<uint256, int> mapRequestCount;\n extern CCriticalSection cs_mapRequestCount;\n-extern map<string, string> mapAddressBook;\n+extern std::map<std::string, std::string> mapAddressBook;\n extern CCriticalSection cs_mapAddressBook;\n-extern vector<unsigned char> vchDefaultKey;\n+extern std::vector<unsigned char> vchDefaultKey;\n extern double dHashesPerSec;\n extern int64 nHPSTimerStart;\n \n@@ -73,23 +83,23 @@ bool CheckDiskSpace(uint64 nAdditionalBytes=0);\n FILE* OpenBlockFile(unsigned int nFile, unsigned int nBlockPos, const char* pszMode=\"rb\");\n FILE* AppendBlockFile(unsigned int& nFileRet);\n bool AddKey(const CKey& key);\n-vector<unsigned char> GenerateNewKey();\n+std::vector<unsigned char> GenerateNewKey();\n bool AddToWallet(const CWalletTx& wtxIn);\n void WalletUpdateSpent(const COutPoint& prevout);\n int ScanForWalletTransactions(CBlockIndex* pindexStart);\n void ReacceptWalletTransactions();\n bool LoadBlockIndex(bool fAllowNew=true);\n void PrintBlockTree();\n bool ProcessMessages(CNode* pfrom);\n-bool ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv);\n+bool ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vRecv);\n bool SendMessages(CNode* pto, bool fSendTrickle);\n int64 GetBalance();\n-bool CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet);\n+bool CreateTransaction(const std::vector<std::pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet);\n bool CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet);\n bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n bool BroadcastTransaction(CWalletTx& wtxNew);\n-string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n-string SendMoneyToBitcoinAddress(string strAddress, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n+std::string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n+std::string SendMoneyToBitcoinAddress(std::string strAddress, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n void GenerateBitcoins(bool fGenerate);\n void ThreadBitcoinMiner(void* parg);\n CBlock* CreateNewBlock(CReserveKey& reservekey);\n@@ -99,7 +109,7 @@ bool CheckWork(CBlock* pblock, CReserveKey& reservekey);\n void BitcoinMiner();\n bool CheckProofOfWork(uint256 hash, unsigned int nBits);\n bool IsInitialBlockDownload();\n-string GetWarnings(string strFor);\n+std::string GetWarnings(std::string strFor);\n \n \n \n@@ -147,7 +157,7 @@ class CDiskTxPos\n         return !(a == b);\n     }\n \n-    string ToString() const\n+    std::string ToString() const\n     {\n         if (IsNull())\n             return strprintf(\"null\");\n@@ -206,7 +216,7 @@ class COutPoint\n         return !(a == b);\n     }\n \n-    string ToString() const\n+    std::string ToString() const\n     {\n         return strprintf(\"COutPoint(%s, %d)\", hash.ToString().substr(0,10).c_str(), n);\n     }\n@@ -275,9 +285,9 @@ class CTxIn\n         return !(a == b);\n     }\n \n-    string ToString() const\n+    std::string ToString() const\n     {\n-        string str;\n+        std::string str;\n         str += strprintf(\"CTxIn(\");\n         str += prevout.ToString();\n         if (prevout.IsNull())\n@@ -353,14 +363,14 @@ class CTxOut\n     int64 GetCredit() const\n     {\n         if (!MoneyRange(nValue))\n-            throw runtime_error(\"CTxOut::GetCredit() : value out of range\");\n+            throw std::runtime_error(\"CTxOut::GetCredit() : value out of range\");\n         return (IsMine() ? nValue : 0);\n     }\n \n     bool IsChange() const\n     {\n         // On a debit transaction, a txout that's mine but isn't in the address book is change\n-        vector<unsigned char> vchPubKey;\n+        std::vector<unsigned char> vchPubKey;\n         if (ExtractPubKey(scriptPubKey, true, vchPubKey))\n             CRITICAL_BLOCK(cs_mapAddressBook)\n                 if (!mapAddressBook.count(PubKeyToAddress(vchPubKey)))\n@@ -371,7 +381,7 @@ class CTxOut\n     int64 GetChange() const\n     {\n         if (!MoneyRange(nValue))\n-            throw runtime_error(\"CTxOut::GetChange() : value out of range\");\n+            throw std::runtime_error(\"CTxOut::GetChange() : value out of range\");\n         return (IsChange() ? nValue : 0);\n     }\n \n@@ -386,7 +396,7 @@ class CTxOut\n         return !(a == b);\n     }\n \n-    string ToString() const\n+    std::string ToString() const\n     {\n         if (scriptPubKey.size() < 6)\n             return \"CTxOut(error)\";\n@@ -410,8 +420,8 @@ class CTransaction\n {\n public:\n     int nVersion;\n-    vector<CTxIn> vin;\n-    vector<CTxOut> vout;\n+    std::vector<CTxIn> vin;\n+    std::vector<CTxOut> vout;\n     unsigned int nLockTime;\n \n \n@@ -458,7 +468,7 @@ class CTransaction\n             nBlockTime = GetAdjustedTime();\n         if ((int64)nLockTime < (nLockTime < 500000000 ? (int64)nBlockHeight : nBlockTime))\n             return true;\n-        foreach(const CTxIn& txin, vin)\n+        BOOST_FOREACH(const CTxIn& txin, vin)\n             if (!txin.IsFinal())\n                 return false;\n         return true;\n@@ -501,27 +511,27 @@ class CTransaction\n     int GetSigOpCount() const\n     {\n         int n = 0;\n-        foreach(const CTxIn& txin, vin)\n+        BOOST_FOREACH(const CTxIn& txin, vin)\n             n += txin.scriptSig.GetSigOpCount();\n-        foreach(const CTxOut& txout, vout)\n+        BOOST_FOREACH(const CTxOut& txout, vout)\n             n += txout.scriptPubKey.GetSigOpCount();\n         return n;\n     }\n \n     bool IsStandard() const\n     {\n-        foreach(const CTxIn& txin, vin)\n+        BOOST_FOREACH(const CTxIn& txin, vin)\n             if (!txin.scriptSig.IsPushOnly())\n                 return error(\"nonstandard txin: %s\", txin.scriptSig.ToString().c_str());\n-        foreach(const CTxOut& txout, vout)\n+        BOOST_FOREACH(const CTxOut& txout, vout)\n             if (!::IsStandard(txout.scriptPubKey))\n                 return error(\"nonstandard txout: %s\", txout.scriptPubKey.ToString().c_str());\n         return true;\n     }\n \n     bool IsMine() const\n     {\n-        foreach(const CTxOut& txout, vout)\n+        BOOST_FOREACH(const CTxOut& txout, vout)\n             if (txout.IsMine())\n                 return true;\n         return false;\n@@ -535,23 +545,23 @@ class CTransaction\n     int64 GetDebit() const\n     {\n         int64 nDebit = 0;\n-        foreach(const CTxIn& txin, vin)\n+        BOOST_FOREACH(const CTxIn& txin, vin)\n         {\n             nDebit += txin.GetDebit();\n             if (!MoneyRange(nDebit))\n-                throw runtime_error(\"CTransaction::GetDebit() : value out of range\");\n+                throw std::runtime_error(\"CTransaction::GetDebit() : value out of range\");\n         }\n         return nDebit;\n     }\n \n     int64 GetCredit() const\n     {\n         int64 nCredit = 0;\n-        foreach(const CTxOut& txout, vout)\n+        BOOST_FOREACH(const CTxOut& txout, vout)\n         {\n             nCredit += txout.GetCredit();\n             if (!MoneyRange(nCredit))\n-                throw runtime_error(\"CTransaction::GetCredit() : value out of range\");\n+                throw std::runtime_error(\"CTransaction::GetCredit() : value out of range\");\n         }\n         return nCredit;\n     }\n@@ -561,23 +571,23 @@ class CTransaction\n         if (IsCoinBase())\n             return 0;\n         int64 nChange = 0;\n-        foreach(const CTxOut& txout, vout)\n+        BOOST_FOREACH(const CTxOut& txout, vout)\n         {\n             nChange += txout.GetChange();\n             if (!MoneyRange(nChange))\n-                throw runtime_error(\"CTransaction::GetChange() : value out of range\");\n+                throw std::runtime_error(\"CTransaction::GetChange() : value out of range\");\n         }\n         return nChange;\n     }\n \n     int64 GetValueOut() const\n     {\n         int64 nValueOut = 0;\n-        foreach(const CTxOut& txout, vout)\n+        BOOST_FOREACH(const CTxOut& txout, vout)\n         {\n             nValueOut += txout.nValue;\n             if (!MoneyRange(txout.nValue) || !MoneyRange(nValueOut))\n-                throw runtime_error(\"CTransaction::GetValueOut() : value out of range\");\n+                throw std::runtime_error(\"CTransaction::GetValueOut() : value out of range\");\n         }\n         return nValueOut;\n     }\n@@ -615,7 +625,7 @@ class CTransaction\n \n         // To limit dust spam, require MIN_TX_FEE if any output is less than 0.01\n         if (nMinFee < MIN_TX_FEE)\n-            foreach(const CTxOut& txout, vout)\n+            BOOST_FOREACH(const CTxOut& txout, vout)\n                 if (txout.nValue < CENT)\n                     nMinFee = MIN_TX_FEE;\n \n@@ -668,9 +678,9 @@ class CTransaction\n     }\n \n \n-    string ToString() const\n+    std::string ToString() const\n     {\n-        string str;\n+        std::string str;\n         str += strprintf(\"CTransaction(hash=%s, ver=%d, vin.size=%d, vout.size=%d, nLockTime=%d)\\n\",\n             GetHash().ToString().substr(0,10).c_str(),\n             nVersion,\n@@ -694,7 +704,7 @@ class CTransaction\n     bool ReadFromDisk(CTxDB& txdb, COutPoint prevout);\n     bool ReadFromDisk(COutPoint prevout);\n     bool DisconnectInputs(CTxDB& txdb);\n-    bool ConnectInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPool, CDiskTxPos posThisTx,\n+    bool ConnectInputs(CTxDB& txdb, std::map<uint256, CTxIndex>& mapTestPool, CDiskTxPos posThisTx,\n                        CBlockIndex* pindexBlock, int64& nFees, bool fBlock, bool fMiner, int64 nMinFee=0);\n     bool ClientConnectInputs();\n     bool CheckTransaction() const;\n@@ -721,7 +731,7 @@ class CMerkleTx : public CTransaction\n {\n public:\n     uint256 hashBlock;\n-    vector<uint256> vMerkleBranch;\n+    std::vector<uint256> vMerkleBranch;\n     int nIndex;\n \n     // memory only\n@@ -776,14 +786,14 @@ class CMerkleTx : public CTransaction\n class CWalletTx : public CMerkleTx\n {\n public:\n-    vector<CMerkleTx> vtxPrev;\n-    map<string, string> mapValue;\n-    vector<pair<string, string> > vOrderForm;\n+    std::vector<CMerkleTx> vtxPrev;\n+    std::map<std::string, std::string> mapValue;\n+    std::vector<std::pair<std::string, std::string> > vOrderForm;\n     unsigned int fTimeReceivedIsTxTime;\n     unsigned int nTimeReceived;  // time received by this node\n     char fFromMe;\n-    string strFromAccount;\n-    vector<char> vfSpent;\n+    std::string strFromAccount;\n+    std::vector<char> vfSpent;\n \n     // memory only\n     mutable char fDebitCached;\n@@ -850,8 +860,8 @@ class CWalletTx : public CMerkleTx\n         {\n             pthis->mapValue[\"fromaccount\"] = pthis->strFromAccount;\n \n-            string str;\n-            foreach(char f, vfSpent)\n+            std::string str;\n+            BOOST_FOREACH(char f, vfSpent)\n             {\n                 str += (f ? '1' : '0');\n                 if (f)\n@@ -874,7 +884,7 @@ class CWalletTx : public CMerkleTx\n             pthis->strFromAccount = pthis->mapValue[\"fromaccount\"];\n \n             if (mapValue.count(\"spent\"))\n-                foreach(char c, pthis->mapValue[\"spent\"])\n+                BOOST_FOREACH(char c, pthis->mapValue[\"spent\"])\n                     pthis->vfSpent.push_back(c != '0');\n             else\n                 pthis->vfSpent.assign(vout.size(), fSpent);\n@@ -887,7 +897,7 @@ class CWalletTx : public CMerkleTx\n \n     // marks certain txout's as spent\n     // returns true if any update took place\n-    bool UpdateSpent(const vector<char>& vfNewSpent)\n+    bool UpdateSpent(const std::vector<char>& vfNewSpent)\n     {\n         bool fReturn = false;\n         for (int i=0; i < vfNewSpent.size(); i++)\n@@ -916,7 +926,7 @@ class CWalletTx : public CMerkleTx\n     void MarkSpent(unsigned int nOut)\n     {\n         if (nOut >= vout.size())\n-            throw runtime_error(\"CWalletTx::MarkSpent() : nOut out of range\");\n+            throw std::runtime_error(\"CWalletTx::MarkSpent() : nOut out of range\");\n         vfSpent.resize(vout.size());\n         if (!vfSpent[nOut])\n         {\n@@ -928,7 +938,7 @@ class CWalletTx : public CMerkleTx\n     bool IsSpent(unsigned int nOut) const\n     {\n         if (nOut >= vout.size())\n-            throw runtime_error(\"CWalletTx::IsSpent() : nOut out of range\");\n+            throw std::runtime_error(\"CWalletTx::IsSpent() : nOut out of range\");\n         if (nOut >= vfSpent.size())\n             return false;\n         return (!!vfSpent[nOut]);\n@@ -976,7 +986,7 @@ class CWalletTx : public CMerkleTx\n                 const CTxOut &txout = vout[i];\n                 nCredit += txout.GetCredit();\n                 if (!MoneyRange(nCredit))\n-                    throw runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n             }\n         }\n \n@@ -995,10 +1005,10 @@ class CWalletTx : public CMerkleTx\n         return nChangeCached;\n     }\n \n-    void GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, list<pair<string /* address */, int64> >& listReceived,\n-                    list<pair<string /* address */, int64> >& listSent, int64& nFee, string& strSentAccount) const;\n+    void GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, std::list<std::pair<std::string /* address */, int64> >& listReceived,\n+                    std::list<std::pair<std::string /* address */, int64> >& listSent, int64& nFee, std::string& strSentAccount) const;\n \n-    void GetAccountAmounts(const string& strAccount, int64& nGenerated, int64& nReceived, \n+    void GetAccountAmounts(const std::string& strAccount, int64& nGenerated, int64& nReceived,\n                            int64& nSent, int64& nFee) const;\n \n     bool IsFromMe() const\n@@ -1018,8 +1028,8 @@ class CWalletTx : public CMerkleTx\n \n         // If no confirmations but it's from us, we can still\n         // consider it confirmed if all dependencies are confirmed\n-        map<uint256, const CMerkleTx*> mapPrev;\n-        vector<const CMerkleTx*> vWorkQueue;\n+        std::map<uint256, const CMerkleTx*> mapPrev;\n+        std::vector<const CMerkleTx*> vWorkQueue;\n         vWorkQueue.reserve(vtxPrev.size()+1);\n         vWorkQueue.push_back(this);\n         for (int i = 0; i < vWorkQueue.size(); i++)\n@@ -1034,10 +1044,10 @@ class CWalletTx : public CMerkleTx\n                 return false;\n \n             if (mapPrev.empty())\n-                foreach(const CMerkleTx& tx, vtxPrev)\n+                BOOST_FOREACH(const CMerkleTx& tx, vtxPrev)\n                     mapPrev[tx.GetHash()] = &tx;\n \n-            foreach(const CTxIn& txin, ptx->vin)\n+            BOOST_FOREACH(const CTxIn& txin, ptx->vin)\n             {\n                 if (!mapPrev.count(txin.prevout.hash))\n                     return false;\n@@ -1077,7 +1087,7 @@ class CTxIndex\n {\n public:\n     CDiskTxPos pos;\n-    vector<CDiskTxPos> vSpent;\n+    std::vector<CDiskTxPos> vSpent;\n \n     CTxIndex()\n     {\n@@ -1149,10 +1159,10 @@ class CBlock\n     unsigned int nNonce;\n \n     // network and disk\n-    vector<CTransaction> vtx;\n+    std::vector<CTransaction> vtx;\n \n     // memory only\n-    mutable vector<uint256> vMerkleTree;\n+    mutable std::vector<uint256> vMerkleTree;\n \n \n     CBlock()\n@@ -1207,7 +1217,7 @@ class CBlock\n     int GetSigOpCount() const\n     {\n         int n = 0;\n-        foreach(const CTransaction& tx, vtx)\n+        BOOST_FOREACH(const CTransaction& tx, vtx)\n             n += tx.GetSigOpCount();\n         return n;\n     }\n@@ -1216,14 +1226,14 @@ class CBlock\n     uint256 BuildMerkleTree() const\n     {\n         vMerkleTree.clear();\n-        foreach(const CTransaction& tx, vtx)\n+        BOOST_FOREACH(const CTransaction& tx, vtx)\n             vMerkleTree.push_back(tx.GetHash());\n         int j = 0;\n         for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n         {\n             for (int i = 0; i < nSize; i += 2)\n             {\n-                int i2 = min(i+1, nSize-1);\n+                int i2 = std::min(i+1, nSize-1);\n                 vMerkleTree.push_back(Hash(BEGIN(vMerkleTree[j+i]),  END(vMerkleTree[j+i]),\n                                            BEGIN(vMerkleTree[j+i2]), END(vMerkleTree[j+i2])));\n             }\n@@ -1232,27 +1242,27 @@ class CBlock\n         return (vMerkleTree.empty() ? 0 : vMerkleTree.back());\n     }\n \n-    vector<uint256> GetMerkleBranch(int nIndex) const\n+    std::vector<uint256> GetMerkleBranch(int nIndex) const\n     {\n         if (vMerkleTree.empty())\n             BuildMerkleTree();\n-        vector<uint256> vMerkleBranch;\n+        std::vector<uint256> vMerkleBranch;\n         int j = 0;\n         for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n         {\n-            int i = min(nIndex^1, nSize-1);\n+            int i = std::min(nIndex^1, nSize-1);\n             vMerkleBranch.push_back(vMerkleTree[j+i]);\n             nIndex >>= 1;\n             j += nSize;\n         }\n         return vMerkleBranch;\n     }\n \n-    static uint256 CheckMerkleBranch(uint256 hash, const vector<uint256>& vMerkleBranch, int nIndex)\n+    static uint256 CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex)\n     {\n         if (nIndex == -1)\n             return 0;\n-        foreach(const uint256& otherside, vMerkleBranch)\n+        BOOST_FOREACH(const uint256& otherside, vMerkleBranch)\n         {\n             if (nIndex & 1)\n                 hash = Hash(BEGIN(otherside), END(otherside), BEGIN(hash), END(hash));\n@@ -1483,7 +1493,7 @@ class CBlockIndex\n         for (int i = 0; i < nMedianTimeSpan && pindex; i++, pindex = pindex->pprev)\n             *(--pbegin) = pindex->GetBlockTime();\n \n-        sort(pbegin, pend);\n+        std::sort(pbegin, pend);\n         return pbegin[(pend - pbegin)/2];\n     }\n \n@@ -1501,7 +1511,7 @@ class CBlockIndex\n \n \n \n-    string ToString() const\n+    std::string ToString() const\n     {\n         return strprintf(\"CBlockIndex(nprev=%08x, pnext=%08x, nFile=%d, nBlockPos=%-6d nHeight=%d, merkle=%s, hashBlock=%s)\",\n             pprev, pnext, nFile, nBlockPos, nHeight,\n@@ -1570,9 +1580,9 @@ class CDiskBlockIndex : public CBlockIndex\n     }\n \n \n-    string ToString() const\n+    std::string ToString() const\n     {\n-        string str = \"CDiskBlockIndex(\";\n+        std::string str = \"CDiskBlockIndex(\";\n         str += CBlockIndex::ToString();\n         str += strprintf(\"\\n                hashBlock=%s, hashPrev=%s, hashNext=%s)\",\n             GetBlockHash().ToString().c_str(),\n@@ -1602,7 +1612,7 @@ class CDiskBlockIndex : public CBlockIndex\n class CBlockLocator\n {\n protected:\n-    vector<uint256> vHave;\n+    std::vector<uint256> vHave;\n public:\n \n     CBlockLocator()\n@@ -1616,7 +1626,7 @@ class CBlockLocator\n \n     explicit CBlockLocator(uint256 hashBlock)\n     {\n-        map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);\n+        std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);\n         if (mi != mapBlockIndex.end())\n             Set((*mi).second);\n     }\n@@ -1660,9 +1670,9 @@ class CBlockLocator\n         // Retrace how far back it was in the sender's branch\n         int nDistance = 0;\n         int nStep = 1;\n-        foreach(const uint256& hash, vHave)\n+        BOOST_FOREACH(const uint256& hash, vHave)\n         {\n-            map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n+            std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n             if (mi != mapBlockIndex.end())\n             {\n                 CBlockIndex* pindex = (*mi).second;\n@@ -1679,9 +1689,9 @@ class CBlockLocator\n     CBlockIndex* GetBlockIndex()\n     {\n         // Find the first block the caller has in the main chain\n-        foreach(const uint256& hash, vHave)\n+        BOOST_FOREACH(const uint256& hash, vHave)\n         {\n-            map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n+            std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n             if (mi != mapBlockIndex.end())\n             {\n                 CBlockIndex* pindex = (*mi).second;\n@@ -1695,9 +1705,9 @@ class CBlockLocator\n     uint256 GetBlockHash()\n     {\n         // Find the first block the caller has in the main chain\n-        foreach(const uint256& hash, vHave)\n+        BOOST_FOREACH(const uint256& hash, vHave)\n         {\n-            map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n+            std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n             if (mi != mapBlockIndex.end())\n             {\n                 CBlockIndex* pindex = (*mi).second;\n@@ -1731,7 +1741,7 @@ class CWalletKey\n     CPrivKey vchPrivKey;\n     int64 nTimeCreated;\n     int64 nTimeExpires;\n-    string strComment;\n+    std::string strComment;\n     //// todo: add something to note what created it (user, getnewaddress, change)\n     ////   maybe should have a map<string, string> property map\n \n@@ -1764,7 +1774,7 @@ class CWalletKey\n class CAccount\n {\n public:\n-    vector<unsigned char> vchPubKey;\n+    std::vector<unsigned char> vchPubKey;\n \n     CAccount()\n     {\n@@ -1793,11 +1803,11 @@ class CAccount\n class CAccountingEntry\n {\n public:\n-    string strAccount;\n+    std::string strAccount;\n     int64 nCreditDebit;\n     int64 nTime;\n-    string strOtherAccount;\n-    string strComment;\n+    std::string strOtherAccount;\n+    std::string strComment;\n \n     CAccountingEntry()\n     {\n@@ -1848,16 +1858,16 @@ class CUnsignedAlert\n     int64 nExpiration;\n     int nID;\n     int nCancel;\n-    set<int> setCancel;\n+    std::set<int> setCancel;\n     int nMinVer;            // lowest version inclusive\n     int nMaxVer;            // highest version inclusive\n-    set<string> setSubVer;  // empty matches all\n+    std::set<std::string> setSubVer;  // empty matches all\n     int nPriority;\n \n     // Actions\n-    string strComment;\n-    string strStatusBar;\n-    string strReserved;\n+    std::string strComment;\n+    std::string strStatusBar;\n+    std::string strReserved;\n \n     IMPLEMENT_SERIALIZE\n     (\n@@ -1896,13 +1906,13 @@ class CUnsignedAlert\n         strReserved.clear();\n     }\n \n-    string ToString() const\n+    std::string ToString() const\n     {\n-        string strSetCancel;\n-        foreach(int n, setCancel)\n+        std::string strSetCancel;\n+        BOOST_FOREACH(int n, setCancel)\n             strSetCancel += strprintf(\"%d \", n);\n-        string strSetSubVer;\n-        foreach(string str, setSubVer)\n+        std::string strSetSubVer;\n+        BOOST_FOREACH(std::string str, setSubVer)\n             strSetSubVer += \"\\\"\" + str + \"\\\" \";\n         return strprintf(\n                 \"CAlert(\\n\"\n@@ -1942,8 +1952,8 @@ class CUnsignedAlert\n class CAlert : public CUnsignedAlert\n {\n public:\n-    vector<unsigned char> vchMsg;\n-    vector<unsigned char> vchSig;\n+    std::vector<unsigned char> vchMsg;\n+    std::vector<unsigned char> vchSig;\n \n     CAlert()\n     {\n@@ -1985,7 +1995,7 @@ class CAlert : public CUnsignedAlert\n         return (alert.nID <= nCancel || setCancel.count(alert.nID));\n     }\n \n-    bool AppliesTo(int nVersion, string strSubVerIn) const\n+    bool AppliesTo(int nVersion, std::string strSubVerIn) const\n     {\n         return (IsInEffect() &&\n                 nMinVer <= nVersion && nVersion <= nMaxVer &&\n@@ -2041,11 +2051,13 @@ class CAlert : public CUnsignedAlert\n \n \n \n-extern map<uint256, CTransaction> mapTransactions;\n-extern map<uint256, CWalletTx> mapWallet;\n-extern vector<uint256> vWalletUpdated;\n+extern std::map<uint256, CTransaction> mapTransactions;\n+extern std::map<uint256, CWalletTx> mapWallet;\n+extern std::vector<uint256> vWalletUpdated;\n extern CCriticalSection cs_mapWallet;\n-extern map<vector<unsigned char>, CPrivKey> mapKeys;\n-extern map<uint160, vector<unsigned char> > mapPubKeys;\n+extern std::map<std::vector<unsigned char>, CPrivKey> mapKeys;\n+extern std::map<uint160, std::vector<unsigned char> > mapPubKeys;\n extern CCriticalSection cs_mapKeys;\n extern CKey keyUser;\n+\n+#endif"
      },
      {
        "sha": "1320781cb27b8ecdc123e936b572c25c84206462",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 27,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -11,6 +11,9 @@\n #include <miniupnpc/upnperrors.h>\n #endif\n \n+using namespace std;\n+using namespace boost;\n+\n static const int MAX_OUTBOUND_CONNECTIONS = 8;\n \n void ThreadMessageHandler2(void* parg);\n@@ -330,7 +333,7 @@ void ThreadGetMyExternalIP(void* parg)\n             CAddress addr(addrLocalHost);\n             addr.nTime = GetAdjustedTime();\n             CRITICAL_BLOCK(cs_vNodes)\n-                foreach(CNode* pnode, vNodes)\n+                BOOST_FOREACH(CNode* pnode, vNodes)\n                     pnode->PushAddress(addr);\n         }\n     }\n@@ -414,7 +417,7 @@ void AbandonRequests(void (*fn)(void*, CDataStream&), void* param1)\n     // call this in the destructor so it doesn't get called after it's deleted.\n     CRITICAL_BLOCK(cs_vNodes)\n     {\n-        foreach(CNode* pnode, vNodes)\n+        BOOST_FOREACH(CNode* pnode, vNodes)\n         {\n             CRITICAL_BLOCK(pnode->cs_mapRequests)\n             {\n@@ -451,7 +454,7 @@ bool AnySubscribed(unsigned int nChannel)\n     if (pnodeLocalHost->IsSubscribed(nChannel))\n         return true;\n     CRITICAL_BLOCK(cs_vNodes)\n-        foreach(CNode* pnode, vNodes)\n+        BOOST_FOREACH(CNode* pnode, vNodes)\n             if (pnode->IsSubscribed(nChannel))\n                 return true;\n     return false;\n@@ -473,7 +476,7 @@ void CNode::Subscribe(unsigned int nChannel, unsigned int nHops)\n     {\n         // Relay subscribe\n         CRITICAL_BLOCK(cs_vNodes)\n-            foreach(CNode* pnode, vNodes)\n+            BOOST_FOREACH(CNode* pnode, vNodes)\n                 if (pnode != this)\n                     pnode->PushMessage(\"subscribe\", nChannel, nHops);\n     }\n@@ -495,7 +498,7 @@ void CNode::CancelSubscribe(unsigned int nChannel)\n     {\n         // Relay subscription cancel\n         CRITICAL_BLOCK(cs_vNodes)\n-            foreach(CNode* pnode, vNodes)\n+            BOOST_FOREACH(CNode* pnode, vNodes)\n                 if (pnode != this)\n                     pnode->PushMessage(\"sub-cancel\", nChannel);\n     }\n@@ -513,7 +516,7 @@ CNode* FindNode(unsigned int ip)\n {\n     CRITICAL_BLOCK(cs_vNodes)\n     {\n-        foreach(CNode* pnode, vNodes)\n+        BOOST_FOREACH(CNode* pnode, vNodes)\n             if (pnode->addr.ip == ip)\n                 return (pnode);\n     }\n@@ -524,7 +527,7 @@ CNode* FindNode(CAddress addr)\n {\n     CRITICAL_BLOCK(cs_vNodes)\n     {\n-        foreach(CNode* pnode, vNodes)\n+        BOOST_FOREACH(CNode* pnode, vNodes)\n             if (pnode->addr == addr)\n                 return (pnode);\n     }\n@@ -661,7 +664,7 @@ void ThreadSocketHandler2(void* parg)\n         {\n             // Disconnect unused nodes\n             vector<CNode*> vNodesCopy = vNodes;\n-            foreach(CNode* pnode, vNodesCopy)\n+            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n             {\n                 if (pnode->fDisconnect ||\n                     (pnode->GetRefCount() <= 0 && pnode->vRecv.empty() && pnode->vSend.empty()))\n@@ -683,7 +686,7 @@ void ThreadSocketHandler2(void* parg)\n \n             // Delete disconnected nodes\n             list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n-            foreach(CNode* pnode, vNodesDisconnectedCopy)\n+            BOOST_FOREACH(CNode* pnode, vNodesDisconnectedCopy)\n             {\n                 // wait until threads are done using it\n                 if (pnode->GetRefCount() <= 0)\n@@ -729,7 +732,7 @@ void ThreadSocketHandler2(void* parg)\n         hSocketMax = max(hSocketMax, hListenSocket);\n         CRITICAL_BLOCK(cs_vNodes)\n         {\n-            foreach(CNode* pnode, vNodes)\n+            BOOST_FOREACH(CNode* pnode, vNodes)\n             {\n                 if (pnode->hSocket == INVALID_SOCKET || pnode->hSocket < 0)\n                     continue;\n@@ -771,7 +774,7 @@ void ThreadSocketHandler2(void* parg)\n             int nInbound = 0;\n \n             CRITICAL_BLOCK(cs_vNodes)\n-                foreach(CNode* pnode, vNodes)\n+                BOOST_FOREACH(CNode* pnode, vNodes)\n                 if (pnode->fInbound)\n                     nInbound++;\n             if (hSocket == INVALID_SOCKET)\n@@ -801,10 +804,10 @@ void ThreadSocketHandler2(void* parg)\n         CRITICAL_BLOCK(cs_vNodes)\n         {\n             vNodesCopy = vNodes;\n-            foreach(CNode* pnode, vNodesCopy)\n+            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n                 pnode->AddRef();\n         }\n-        foreach(CNode* pnode, vNodesCopy)\n+        BOOST_FOREACH(CNode* pnode, vNodesCopy)\n         {\n             if (fShutdown)\n                 return;\n@@ -921,7 +924,7 @@ void ThreadSocketHandler2(void* parg)\n         }\n         CRITICAL_BLOCK(cs_vNodes)\n         {\n-            foreach(CNode* pnode, vNodesCopy)\n+            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n                 pnode->Release();\n         }\n \n@@ -1057,7 +1060,7 @@ void DNSAddressSeed()\n         vector<CAddress> vaddr;\n         if (Lookup(strDNSSeed[seed_idx], vaddr, NODE_NETWORK, true))\n         {\n-            foreach (CAddress& addr, vaddr)\n+            BOOST_FOREACH (CAddress& addr, vaddr)\n             {\n                 if (addr.GetByte(3) != 127)\n                 {\n@@ -1148,7 +1151,7 @@ void ThreadOpenConnections2(void* parg)\n     {\n         for (int64 nLoop = 0;; nLoop++)\n         {\n-            foreach(string strAddr, mapMultiArgs[\"-connect\"])\n+            BOOST_FOREACH(string strAddr, mapMultiArgs[\"-connect\"])\n             {\n                 CAddress addr(strAddr, fAllowDNS);\n                 if (addr.IsValid())\n@@ -1166,7 +1169,7 @@ void ThreadOpenConnections2(void* parg)\n     // Connect to manually added nodes first\n     if (mapArgs.count(\"-addnode\"))\n     {\n-        foreach(string strAddr, mapMultiArgs[\"-addnode\"])\n+        BOOST_FOREACH(string strAddr, mapMultiArgs[\"-addnode\"])\n         {\n             CAddress addr(strAddr, fAllowDNS);\n             if (addr.IsValid())\n@@ -1190,7 +1193,7 @@ void ThreadOpenConnections2(void* parg)\n         {\n             int nOutbound = 0;\n             CRITICAL_BLOCK(cs_vNodes)\n-                foreach(CNode* pnode, vNodes)\n+                BOOST_FOREACH(CNode* pnode, vNodes)\n                     if (!pnode->fInbound)\n                         nOutbound++;\n             int nMaxOutboundConnections = MAX_OUTBOUND_CONNECTIONS;\n@@ -1233,15 +1236,15 @@ void ThreadOpenConnections2(void* parg)\n                 {\n                     nSeedDisconnected = GetTime();\n                     CRITICAL_BLOCK(cs_vNodes)\n-                        foreach(CNode* pnode, vNodes)\n+                        BOOST_FOREACH(CNode* pnode, vNodes)\n                             if (setSeed.count(pnode->addr.ip))\n                                 pnode->fDisconnect = true;\n                 }\n \n                 // Keep setting timestamps to 0 so they won't reconnect\n                 if (GetTime() - nSeedDisconnected < 60 * 60)\n                 {\n-                    foreach(PAIRTYPE(const vector<unsigned char>, CAddress)& item, mapAddresses)\n+                    BOOST_FOREACH(PAIRTYPE(const vector<unsigned char>, CAddress)& item, mapAddresses)\n                     {\n                         if (setSeed.count(item.second.ip) && item.second.nTime != 0)\n                         {\n@@ -1264,12 +1267,12 @@ void ThreadOpenConnections2(void* parg)\n         // Do this here so we don't have to critsect vNodes inside mapAddresses critsect.\n         set<unsigned int> setConnected;\n         CRITICAL_BLOCK(cs_vNodes)\n-            foreach(CNode* pnode, vNodes)\n+            BOOST_FOREACH(CNode* pnode, vNodes)\n                 setConnected.insert(pnode->addr.ip & 0x0000ffff);\n \n         CRITICAL_BLOCK(cs_mapAddresses)\n         {\n-            foreach(const PAIRTYPE(vector<unsigned char>, CAddress)& item, mapAddresses)\n+            BOOST_FOREACH(const PAIRTYPE(vector<unsigned char>, CAddress)& item, mapAddresses)\n             {\n                 const CAddress& addr = item.second;\n                 if (!addr.IsIPv4() || !addr.IsValid() || setConnected.count(addr.ip & 0x0000ffff))\n@@ -1385,15 +1388,15 @@ void ThreadMessageHandler2(void* parg)\n         CRITICAL_BLOCK(cs_vNodes)\n         {\n             vNodesCopy = vNodes;\n-            foreach(CNode* pnode, vNodesCopy)\n+            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n                 pnode->AddRef();\n         }\n \n         // Poll the connected nodes for messages\n         CNode* pnodeTrickle = NULL;\n         if (!vNodesCopy.empty())\n             pnodeTrickle = vNodesCopy[GetRand(vNodesCopy.size())];\n-        foreach(CNode* pnode, vNodesCopy)\n+        BOOST_FOREACH(CNode* pnode, vNodesCopy)\n         {\n             // Receive messages\n             TRY_CRITICAL_BLOCK(pnode->cs_vRecv)\n@@ -1410,7 +1413,7 @@ void ThreadMessageHandler2(void* parg)\n \n         CRITICAL_BLOCK(cs_vNodes)\n         {\n-            foreach(CNode* pnode, vNodesCopy)\n+            BOOST_FOREACH(CNode* pnode, vNodesCopy)\n                 pnode->Release();\n         }\n \n@@ -1527,7 +1530,7 @@ void StartNode(void* parg)\n     {\n         vector<CAddress> vaddr;\n         if (Lookup(pszHostName, vaddr, nLocalServices, -1, true))\n-            foreach (const CAddress &addr, vaddr)\n+            BOOST_FOREACH (const CAddress &addr, vaddr)\n                 if (addr.GetByte(3) != 127)\n                 {\n                     addrLocalHost = addr;\n@@ -1648,7 +1651,7 @@ class CNetCleanup\n     ~CNetCleanup()\n     {\n         // Close sockets\n-        foreach(CNode* pnode, vNodes)\n+        BOOST_FOREACH(CNode* pnode, vNodes)\n             if (pnode->hSocket != INVALID_SOCKET)\n                 closesocket(pnode->hSocket);\n         if (hListenSocket != INVALID_SOCKET)"
      },
      {
        "sha": "6bbcd64e4201995c3318311e118921437f5a71d4",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 53,
        "deletions": 41,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -1,6 +1,16 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_NET_H\n+#define BITCOIN_NET_H\n+\n+#include <deque>\n+#include <boost/array.hpp>\n+#include <openssl/rand.h>\n+\n+#ifndef __WXMSW__\n+#include <arpa/inet.h>\n+#endif\n \n class CMessageHeader;\n class CAddress;\n@@ -23,7 +33,7 @@ enum\n \n \n bool ConnectSocket(const CAddress& addrConnect, SOCKET& hSocketRet);\n-bool Lookup(const char *pszName, vector<CAddress>& vaddr, int nServices, int nMaxSolutions, bool fAllowLookup = false, int portDefault = 0, bool fAllowPort = false);\n+bool Lookup(const char *pszName, std::vector<CAddress>& vaddr, int nServices, int nMaxSolutions, bool fAllowLookup = false, int portDefault = 0, bool fAllowPort = false);\n bool Lookup(const char *pszName, CAddress& addr, int nServices, bool fAllowLookup = false, int portDefault = 0, bool fAllowPort = false);\n bool GetMyExternalIP(unsigned int& ipRet);\n bool AddAddress(CAddress addr, int64 nTimePenalty=0);\n@@ -34,7 +44,7 @@ void AbandonRequests(void (*fn)(void*, CDataStream&), void* param1);\n bool AnySubscribed(unsigned int nChannel);\n void MapPort(bool fMapPort);\n void DNSAddressSeed();\n-bool BindListenPort(string& strError=REF(string()));\n+bool BindListenPort(std::string& strError=REF(std::string()));\n void StartNode(void* parg);\n bool StopNode();\n \n@@ -89,12 +99,12 @@ class CMessageHeader\n             READWRITE(nChecksum);\n     )\n \n-    string GetCommand()\n+    std::string GetCommand()\n     {\n         if (pchCommand[COMMAND_SIZE-1] == 0)\n-            return string(pchCommand, pchCommand + strlen(pchCommand));\n+            return std::string(pchCommand, pchCommand + strlen(pchCommand));\n         else\n-            return string(pchCommand, pchCommand + COMMAND_SIZE);\n+            return std::string(pchCommand, pchCommand + COMMAND_SIZE);\n     }\n \n     bool IsValid()\n@@ -182,13 +192,13 @@ class CAddress\n         Lookup(pszIn, *this, nServicesIn, fNameLookup, 0, true);\n     }\n \n-    explicit CAddress(string strIn, int portIn, bool fNameLookup = false, uint64 nServicesIn=NODE_NETWORK)\n+    explicit CAddress(std::string strIn, int portIn, bool fNameLookup = false, uint64 nServicesIn=NODE_NETWORK)\n     {\n         Init();\n         Lookup(strIn.c_str(), *this, nServicesIn, fNameLookup, portIn);\n     }\n \n-    explicit CAddress(string strIn, bool fNameLookup = false, uint64 nServicesIn=NODE_NETWORK)\n+    explicit CAddress(std::string strIn, bool fNameLookup = false, uint64 nServicesIn=NODE_NETWORK)\n     {\n         Init();\n         Lookup(strIn.c_str(), *this, nServicesIn, fNameLookup, 0, true);\n@@ -245,16 +255,16 @@ class CAddress\n         return false;\n     }\n \n-    vector<unsigned char> GetKey() const\n+    std::vector<unsigned char> GetKey() const\n     {\n         CDataStream ss;\n         ss.reserve(18);\n         ss << FLATDATA(pchReserved) << ip << port;\n \n         #if defined(_MSC_VER) && _MSC_VER < 1300\n-        return vector<unsigned char>((unsigned char*)&ss.begin()[0], (unsigned char*)&ss.end()[0]);\n+        return std::vector<unsigned char>((unsigned char*)&ss.begin()[0], (unsigned char*)&ss.end()[0]);\n         #else\n-        return vector<unsigned char>(ss.begin(), ss.end());\n+        return std::vector<unsigned char>(ss.begin(), ss.end());\n         #endif\n     }\n \n@@ -301,22 +311,22 @@ class CAddress\n         return ((unsigned char*)&ip)[3-n];\n     }\n \n-    string ToStringIPPort() const\n+    std::string ToStringIPPort() const\n     {\n         return strprintf(\"%u.%u.%u.%u:%u\", GetByte(3), GetByte(2), GetByte(1), GetByte(0), ntohs(port));\n     }\n \n-    string ToStringIP() const\n+    std::string ToStringIP() const\n     {\n         return strprintf(\"%u.%u.%u.%u\", GetByte(3), GetByte(2), GetByte(1), GetByte(0));\n     }\n \n-    string ToStringPort() const\n+    std::string ToStringPort() const\n     {\n         return strprintf(\"%u\", ntohs(port));\n     }\n \n-    string ToString() const\n+    std::string ToString() const\n     {\n         return strprintf(\"%u.%u.%u.%u:%u\", GetByte(3), GetByte(2), GetByte(1), GetByte(0), ntohs(port));\n     }\n@@ -364,7 +374,7 @@ class CInv\n         hash = hashIn;\n     }\n \n-    CInv(const string& strType, const uint256& hashIn)\n+    CInv(const std::string& strType, const uint256& hashIn)\n     {\n         int i;\n         for (i = 1; i < ARRAYLEN(ppszTypeName); i++)\n@@ -403,7 +413,7 @@ class CInv\n         return ppszTypeName[type];\n     }\n \n-    string ToString() const\n+    std::string ToString() const\n     {\n         return strprintf(\"%s %s\", GetCommand(), hash.ToString().substr(0,20).c_str());\n     }\n@@ -446,17 +456,17 @@ extern uint64 nLocalServices;\n extern CAddress addrLocalHost;\n extern CNode* pnodeLocalHost;\n extern uint64 nLocalHostNonce;\n-extern array<int, 10> vnThreadsRunning;\n+extern boost::array<int, 10> vnThreadsRunning;\n extern SOCKET hListenSocket;\n \n-extern vector<CNode*> vNodes;\n+extern std::vector<CNode*> vNodes;\n extern CCriticalSection cs_vNodes;\n-extern map<vector<unsigned char>, CAddress> mapAddresses;\n+extern std::map<std::vector<unsigned char>, CAddress> mapAddresses;\n extern CCriticalSection cs_mapAddresses;\n-extern map<CInv, CDataStream> mapRelay;\n-extern deque<pair<int64, CInv> > vRelayExpiration;\n+extern std::map<CInv, CDataStream> mapRelay;\n+extern std::deque<std::pair<int64, CInv> > vRelayExpiration;\n extern CCriticalSection cs_mapRelay;\n-extern map<CInv, int64> mapAlreadyAskedFor;\n+extern std::map<CInv, int64> mapAlreadyAskedFor;\n \n // Settings\n extern int fUseProxy;\n@@ -485,7 +495,7 @@ class CNode\n     unsigned int nMessageStart;\n     CAddress addr;\n     int nVersion;\n-    string strSubVer;\n+    std::string strSubVer;\n     bool fClient;\n     bool fInbound;\n     bool fNetworkNode;\n@@ -495,27 +505,27 @@ class CNode\n     int nRefCount;\n public:\n     int64 nReleaseTime;\n-    map<uint256, CRequestTracker> mapRequests;\n+    std::map<uint256, CRequestTracker> mapRequests;\n     CCriticalSection cs_mapRequests;\n     uint256 hashContinue;\n     CBlockIndex* pindexLastGetBlocksBegin;\n     uint256 hashLastGetBlocksEnd;\n     int nStartingHeight;\n \n     // flood relay\n-    vector<CAddress> vAddrToSend;\n-    set<CAddress> setAddrKnown;\n+    std::vector<CAddress> vAddrToSend;\n+    std::set<CAddress> setAddrKnown;\n     bool fGetAddr;\n-    set<uint256> setKnown;\n+    std::set<uint256> setKnown;\n \n     // inventory based relay\n-    set<CInv> setInventoryKnown;\n-    vector<CInv> vInventoryToSend;\n+    std::set<CInv> setInventoryKnown;\n+    std::vector<CInv> vInventoryToSend;\n     CCriticalSection cs_inventory;\n-    multimap<int64, CInv> mapAskFor;\n+    std::multimap<int64, CInv> mapAskFor;\n \n     // publish and subscription\n-    vector<char> vfSubscribe;\n+    std::vector<char> vfSubscribe;\n \n \n     CNode(SOCKET hSocketIn, CAddress addrIn, bool fInboundIn=false)\n@@ -577,13 +587,13 @@ class CNode\n \n     int GetRefCount()\n     {\n-        return max(nRefCount, 0) + (GetTime() < nReleaseTime ? 1 : 0);\n+        return std::max(nRefCount, 0) + (GetTime() < nReleaseTime ? 1 : 0);\n     }\n \n     CNode* AddRef(int64 nTimeout=0)\n     {\n         if (nTimeout != 0)\n-            nReleaseTime = max(nReleaseTime, GetTime() + nTimeout);\n+            nReleaseTime = std::max(nReleaseTime, GetTime() + nTimeout);\n         else\n             nRefCount++;\n         return this;\n@@ -634,11 +644,11 @@ class CNode\n         // Make sure not to reuse time indexes to keep things in the same order\n         int64 nNow = (GetTime() - 1) * 1000000;\n         static int64 nLastTime;\n-        nLastTime = nNow = max(nNow, ++nLastTime);\n+        nLastTime = nNow = std::max(nNow, ++nLastTime);\n \n         // Each retry is 2 minutes after the last\n-        nRequestTime = max(nRequestTime + 2 * 60 * 1000000, nNow);\n-        mapAskFor.insert(make_pair(nRequestTime, inv));\n+        nRequestTime = std::max(nRequestTime + 2 * 60 * 1000000, nNow);\n+        mapAskFor.insert(std::make_pair(nRequestTime, inv));\n     }\n \n \n@@ -722,7 +732,7 @@ class CNode\n         CAddress addrMe = (fUseProxy ? CAddress(\"0.0.0.0\") : addrLocalHost);\n         RAND_bytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n         PushMessage(\"version\", VERSION, nLocalServices, nTime, addrYou, addrMe,\n-                nLocalHostNonce, string(pszSubVer), nBestHeight);\n+                    nLocalHostNonce, std::string(pszSubVer), nBestHeight);\n     }\n \n \n@@ -948,7 +958,7 @@ inline void RelayInventory(const CInv& inv)\n {\n     // Put on lists to offer to the other nodes\n     CRITICAL_BLOCK(cs_vNodes)\n-        foreach(CNode* pnode, vNodes)\n+        BOOST_FOREACH(CNode* pnode, vNodes)\n             pnode->PushInventory(inv);\n }\n \n@@ -975,7 +985,7 @@ inline void RelayMessage<>(const CInv& inv, const CDataStream& ss)\n \n         // Save original serialized message so newer versions are preserved\n         mapRelay[inv] = ss;\n-        vRelayExpiration.push_back(make_pair(GetTime() + 15 * 60, inv));\n+        vRelayExpiration.push_back(std::make_pair(GetTime() + 15 * 60, inv));\n     }\n \n     RelayInventory(inv);\n@@ -1007,7 +1017,7 @@ void AdvertStartPublish(CNode* pfrom, unsigned int nChannel, unsigned int nHops,\n \n     // Relay\n     CRITICAL_BLOCK(cs_vNodes)\n-        foreach(CNode* pnode, vNodes)\n+        BOOST_FOREACH(CNode* pnode, vNodes)\n             if (pnode != pfrom && (nHops < PUBLISH_HOPS || pnode->IsSubscribed(nChannel)))\n                 pnode->PushMessage(\"publish\", nChannel, nHops, obj);\n }\n@@ -1018,7 +1028,7 @@ void AdvertStopPublish(CNode* pfrom, unsigned int nChannel, unsigned int nHops,\n     uint256 hash = obj.GetHash();\n \n     CRITICAL_BLOCK(cs_vNodes)\n-        foreach(CNode* pnode, vNodes)\n+        BOOST_FOREACH(CNode* pnode, vNodes)\n             if (pnode != pfrom && (nHops < PUBLISH_HOPS || pnode->IsSubscribed(nChannel)))\n                 pnode->PushMessage(\"pub-cancel\", nChannel, nHops, hash);\n \n@@ -1035,3 +1045,5 @@ void AdvertRemoveSource(CNode* pfrom, unsigned int nChannel, unsigned int nHops,\n     if (obj.setSources.empty())\n         AdvertStopPublish(pfrom, nChannel, nHops, obj);\n }\n+\n+#endif"
      },
      {
        "sha": "afb19526c11615b3a277e2911bd7c6b686887fa8",
        "filename": "src/noui.h",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/noui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/noui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.h?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -1,7 +1,10 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_NOUI_H\n+#define BITCOIN_NOUI_H\n \n+#include <string>\n \n typedef void wxWindow;\n #define wxYES                   0x00000002\n@@ -31,25 +34,25 @@ typedef void wxWindow;\n #define wxMORE                  0x00010000\n #define wxSETUP                 0x00020000\n \n-inline int MyMessageBox(const string& message, const string& caption=\"Message\", int style=wxOK, wxWindow* parent=NULL, int x=-1, int y=-1)\n+inline int MyMessageBox(const std::string& message, const std::string& caption=\"Message\", int style=wxOK, wxWindow* parent=NULL, int x=-1, int y=-1)\n {\n     printf(\"%s: %s\\n\", caption.c_str(), message.c_str());\n     fprintf(stderr, \"%s: %s\\n\", caption.c_str(), message.c_str());\n     return 4;\n }\n #define wxMessageBox  MyMessageBox\n \n-inline int ThreadSafeMessageBox(const string& message, const string& caption, int style=wxOK, wxWindow* parent=NULL, int x=-1, int y=-1)\n+inline int ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style=wxOK, wxWindow* parent=NULL, int x=-1, int y=-1)\n {\n     return MyMessageBox(message, caption, style, parent, x, y);\n }\n \n-inline bool ThreadSafeAskFee(int64 nFeeRequired, const string& strCaption, wxWindow* parent)\n+inline bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption, wxWindow* parent)\n {\n     return true;\n }\n \n-inline void CalledSetStatusBar(const string& strText, int nField)\n+inline void CalledSetStatusBar(const std::string& strText, int nField)\n {\n }\n \n@@ -60,3 +63,5 @@ inline void UIThreadCall(boost::function0<void> fn)\n inline void MainFrameRepaint()\n {\n }\n+\n+#endif"
      },
      {
        "sha": "9efcbbb15a50125dbb20520c1bb32e6062cc00c8",
        "filename": "src/rpc.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 22,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc.cpp?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -21,6 +21,8 @@ typedef boost::asio::ssl::stream<boost::asio::ip::tcp::socket> SSLStream;\n // a certain size around 145MB.  If we need access to json_spirit outside this\n // file, we could use the compiled json_spirit option.\n \n+using namespace std;\n+using namespace boost;\n using namespace boost::asio;\n using namespace json_spirit;\n \n@@ -81,7 +83,7 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n     entry.push_back(Pair(\"confirmations\", wtx.GetDepthInMainChain()));\n     entry.push_back(Pair(\"txid\", wtx.GetHash().GetHex()));\n     entry.push_back(Pair(\"time\", (boost::int64_t)wtx.GetTxTime()));\n-    foreach(const PAIRTYPE(string,string)& item, wtx.mapValue)\n+    BOOST_FOREACH(const PAIRTYPE(string,string)& item, wtx.mapValue)\n         entry.push_back(Pair(item.first, item.second));\n }\n \n@@ -336,7 +338,7 @@ string GetAccountAddress(string strAccount, bool bForceNew=false)\n              ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n-            foreach(const CTxOut& txout, wtx.vout)\n+            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                 if (txout.scriptPubKey == scriptPubKey)\n                     account.vchPubKey.clear();\n         }\n@@ -449,7 +451,7 @@ Value getaddressesbyaccount(const Array& params, bool fHelp)\n     Array ret;\n     CRITICAL_BLOCK(cs_mapAddressBook)\n     {\n-        foreach(const PAIRTYPE(string, string)& item, mapAddressBook)\n+        BOOST_FOREACH(const PAIRTYPE(string, string)& item, mapAddressBook)\n         {\n             const string& strAddress = item.first;\n             const string& strName = item.second;\n@@ -541,7 +543,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n             if (wtx.IsCoinBase() || !wtx.IsFinal())\n                 continue;\n \n-            foreach(const CTxOut& txout, wtx.vout)\n+            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                 if (txout.scriptPubKey == scriptPubKey)\n                     if (wtx.GetDepthInMainChain() >= nMinDepth)\n                         nAmount += txout.nValue;\n@@ -556,7 +558,7 @@ void GetAccountPubKeys(string strAccount, set<CScript>& setPubKey)\n {\n     CRITICAL_BLOCK(cs_mapAddressBook)\n     {\n-        foreach(const PAIRTYPE(string, string)& item, mapAddressBook)\n+        BOOST_FOREACH(const PAIRTYPE(string, string)& item, mapAddressBook)\n         {\n             const string& strAddress = item.first;\n             const string& strName = item.second;\n@@ -600,7 +602,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n             if (wtx.IsCoinBase() || !wtx.IsFinal())\n                 continue;\n \n-            foreach(const CTxOut& txout, wtx.vout)\n+            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                 if (setPubKey.count(txout.scriptPubKey))\n                     if (wtx.GetDepthInMainChain() >= nMinDepth)\n                         nAmount += txout.nValue;\n@@ -678,9 +680,9 @@ Value getbalance(const Array& params, bool fHelp)\n             list<pair<string, int64> > listSent;\n             wtx.GetAmounts(allGeneratedImmature, allGeneratedMature, listReceived, listSent, allFee, strSentAccount);\n             if (wtx.GetDepthInMainChain() >= nMinDepth)\n-                foreach(const PAIRTYPE(string,int64)& r, listReceived)\n+                BOOST_FOREACH(const PAIRTYPE(string,int64)& r, listReceived)\n                     nBalance += r.second;\n-            foreach(const PAIRTYPE(string,int64)& r, listSent)\n+            BOOST_FOREACH(const PAIRTYPE(string,int64)& r, listSent)\n                 nBalance -= r.second;\n             nBalance -= allFee;\n             nBalance += allGeneratedMature;\n@@ -804,7 +806,7 @@ Value sendmany(const Array& params, bool fHelp)\n     vector<pair<CScript, int64> > vecSend;\n \n     int64 totalAmount = 0;\n-    foreach(const Pair& s, sendTo)\n+    BOOST_FOREACH(const Pair& s, sendTo)\n     {\n         uint160 hash160;\n         string strAddress = s.name_;\n@@ -885,7 +887,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n             if (nDepth < nMinDepth)\n                 continue;\n \n-            foreach(const CTxOut& txout, wtx.vout)\n+            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n             {\n                 // Only counting our own bitcoin addresses and not ip addresses\n                 uint160 hash160 = txout.scriptPubKey.GetBitcoinAddressHash160();\n@@ -904,7 +906,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     map<string, tallyitem> mapAccountTally;\n     CRITICAL_BLOCK(cs_mapAddressBook)\n     {\n-        foreach(const PAIRTYPE(string, string)& item, mapAddressBook)\n+        BOOST_FOREACH(const PAIRTYPE(string, string)& item, mapAddressBook)\n         {\n             const string& strAddress = item.first;\n             const string& strAccount = item.second;\n@@ -1024,7 +1026,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     // Sent\n     if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n     {\n-        foreach(const PAIRTYPE(string, int64)& s, listSent)\n+        BOOST_FOREACH(const PAIRTYPE(string, int64)& s, listSent)\n         {\n             Object entry;\n             entry.push_back(Pair(\"account\", strSentAccount));\n@@ -1042,7 +1044,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     if (listReceived.size() > 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n         CRITICAL_BLOCK(cs_mapAddressBook)\n         {\n-            foreach(const PAIRTYPE(string, int64)& r, listReceived)\n+            BOOST_FOREACH(const PAIRTYPE(string, int64)& r, listReceived)\n             {\n                 string account;\n                 if (mapAddressBook.count(r.first))\n@@ -1114,7 +1116,7 @@ Value listtransactions(const Array& params, bool fHelp)\n         }\n         list<CAccountingEntry> acentries;\n         walletdb.ListAccountCreditDebit(strAccount, acentries);\n-        foreach(CAccountingEntry& entry, acentries)\n+        BOOST_FOREACH(CAccountingEntry& entry, acentries)\n         {\n             txByTime.insert(make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n         }\n@@ -1162,7 +1164,7 @@ Value listaccounts(const Array& params, bool fHelp)\n     CRITICAL_BLOCK(cs_mapWallet)\n     CRITICAL_BLOCK(cs_mapAddressBook)\n     {\n-        foreach(const PAIRTYPE(string, string)& entry, mapAddressBook) {\n+        BOOST_FOREACH(const PAIRTYPE(string, string)& entry, mapAddressBook) {\n             uint160 hash160;\n             if(AddressToHash160(entry.first, hash160) && mapPubKeys.count(hash160)) // This address belongs to me\n                 mapAccountBalances[entry.second] = 0;\n@@ -1177,12 +1179,12 @@ Value listaccounts(const Array& params, bool fHelp)\n             list<pair<string, int64> > listSent;\n             wtx.GetAmounts(nGeneratedImmature, nGeneratedMature, listReceived, listSent, nFee, strSentAccount);\n             mapAccountBalances[strSentAccount] -= nFee;\n-            foreach(const PAIRTYPE(string, int64)& s, listSent)\n+            BOOST_FOREACH(const PAIRTYPE(string, int64)& s, listSent)\n                 mapAccountBalances[strSentAccount] -= s.second;\n             if (wtx.GetDepthInMainChain() >= nMinDepth)\n             {\n                 mapAccountBalances[\"\"] += nGeneratedMature;\n-                foreach(const PAIRTYPE(string, int64)& r, listReceived)\n+                BOOST_FOREACH(const PAIRTYPE(string, int64)& r, listReceived)\n                     if (mapAddressBook.count(r.first))\n                         mapAccountBalances[mapAddressBook[r.first]] += r.second;\n                     else\n@@ -1193,11 +1195,11 @@ Value listaccounts(const Array& params, bool fHelp)\n \n     list<CAccountingEntry> acentries;\n     CWalletDB().ListAccountCreditDebit(\"*\", acentries);\n-    foreach(const CAccountingEntry& entry, acentries)\n+    BOOST_FOREACH(const CAccountingEntry& entry, acentries)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n \n     Object ret;\n-    foreach(const PAIRTYPE(string, int64)& accountBalance, mapAccountBalances) {\n+    BOOST_FOREACH(const PAIRTYPE(string, int64)& accountBalance, mapAccountBalances) {\n         ret.push_back(Pair(accountBalance.first, ValueFromAmount(accountBalance.second)));\n     }\n     return ret;\n@@ -1320,7 +1322,7 @@ Value getwork(const Array& params, bool fHelp)\n             {\n                 // Deallocate old blocks since they're obsolete now\n                 mapNewBlock.clear();\n-                foreach(CBlock* pblock, vNewBlock)\n+                BOOST_FOREACH(CBlock* pblock, vNewBlock)\n                     delete pblock;\n                 vNewBlock.clear();\n             }\n@@ -1490,7 +1492,7 @@ string HTTPPost(const string& strMsg, const map<string,string>& mapRequestHeader\n       << \"Content-Type: application/json\\r\\n\"\n       << \"Content-Length: \" << strMsg.size() << \"\\r\\n\"\n       << \"Accept: application/json\\r\\n\";\n-    foreach(const PAIRTYPE(string, string)& item, mapRequestHeaders)\n+    BOOST_FOREACH(const PAIRTYPE(string, string)& item, mapRequestHeaders)\n         s << item.first << \": \" << item.second << \"\\r\\n\";\n     s << \"\\r\\n\" << strMsg;\n \n@@ -1710,7 +1712,7 @@ bool ClientAllowed(const string& strAddress)\n     if (strAddress == asio::ip::address_v4::loopback().to_string())\n         return true;\n     const vector<string>& vAllow = mapMultiArgs[\"-rpcallowip\"];\n-    foreach(string strAllow, vAllow)\n+    BOOST_FOREACH(string strAllow, vAllow)\n         if (WildcardMatch(strAddress, strAllow))\n             return true;\n     return false;"
      },
      {
        "sha": "97334ca0a0d4ed3de8fd69a0877cfde6c7b6fdac",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -1,9 +1,11 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n-\n #include \"headers.h\"\n \n+using namespace std;\n+using namespace boost;\n+\n bool CheckSig(vector<unsigned char> vchSig, vector<unsigned char> vchPubKey, CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n \n \n@@ -974,7 +976,7 @@ bool Solver(const CScript& scriptPubKey, vector<pair<opcodetype, valtype> >& vSo\n \n     // Scan templates\n     const CScript& script1 = scriptPubKey;\n-    foreach(const CScript& script2, vTemplates)\n+    BOOST_FOREACH(const CScript& script2, vTemplates)\n     {\n         vSolutionRet.clear();\n         opcodetype opcode1, opcode2;\n@@ -1030,7 +1032,7 @@ bool Solver(const CScript& scriptPubKey, uint256 hash, int nHashType, CScript& s\n     // Compile solution\n     CRITICAL_BLOCK(cs_mapKeys)\n     {\n-        foreach(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n+        BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n         {\n             if (item.first == OP_PUBKEY)\n             {\n@@ -1100,7 +1102,7 @@ bool ExtractPubKey(const CScript& scriptPubKey, bool fMineOnly, vector<unsigned\n \n     CRITICAL_BLOCK(cs_mapKeys)\n     {\n-        foreach(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n+        BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n         {\n             valtype vchPubKey;\n             if (item.first == OP_PUBKEY)\n@@ -1133,7 +1135,7 @@ bool ExtractHash160(const CScript& scriptPubKey, uint160& hash160Ret)\n     if (!Solver(scriptPubKey, vSolution))\n         return false;\n \n-    foreach(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n+    BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n     {\n         if (item.first == OP_PUBKEYHASH)\n         {"
      },
      {
        "sha": "22a6020dcee1c63c90b975ef168876b91a976b25",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 31,
        "deletions": 22,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -1,6 +1,13 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef H_BITCOIN_SCRIPT\n+#define H_BITCOIN_SCRIPT\n+\n+#include \"base58.h\"\n+\n+#include <string>\n+#include <vector>\n \n class CTransaction;\n \n@@ -310,18 +317,18 @@ inline const char* GetOpName(opcodetype opcode)\n \n \n \n-inline string ValueString(const vector<unsigned char>& vch)\n+inline std::string ValueString(const std::vector<unsigned char>& vch)\n {\n     if (vch.size() <= 4)\n         return strprintf(\"%d\", CBigNum(vch).getint());\n     else\n         return HexStr(vch);\n }\n \n-inline string StackString(const vector<vector<unsigned char> >& vStack)\n+inline std::string StackString(const std::vector<std::vector<unsigned char> >& vStack)\n {\n-    string str;\n-    foreach(const vector<unsigned char>& vch, vStack)\n+    std::string str;\n+    BOOST_FOREACH(const std::vector<unsigned char>& vch, vStack)\n     {\n         if (!str.empty())\n             str += \" \";\n@@ -338,7 +345,7 @@ inline string StackString(const vector<vector<unsigned char> >& vStack)\n \n \n \n-class CScript : public vector<unsigned char>\n+class CScript : public std::vector<unsigned char>\n {\n protected:\n     CScript& push_int64(int64 n)\n@@ -371,10 +378,10 @@ class CScript : public vector<unsigned char>\n \n public:\n     CScript() { }\n-    CScript(const CScript& b) : vector<unsigned char>(b.begin(), b.end()) { }\n-    CScript(const_iterator pbegin, const_iterator pend) : vector<unsigned char>(pbegin, pend) { }\n+    CScript(const CScript& b) : std::vector<unsigned char>(b.begin(), b.end()) { }\n+    CScript(const_iterator pbegin, const_iterator pend) : std::vector<unsigned char>(pbegin, pend) { }\n #ifndef _MSC_VER\n-    CScript(const unsigned char* pbegin, const unsigned char* pend) : vector<unsigned char>(pbegin, pend) { }\n+    CScript(const unsigned char* pbegin, const unsigned char* pend) : std::vector<unsigned char>(pbegin, pend) { }\n #endif\n \n     CScript& operator+=(const CScript& b)\n@@ -405,7 +412,7 @@ class CScript : public vector<unsigned char>\n     explicit CScript(opcodetype b)     { operator<<(b); }\n     explicit CScript(const uint256& b) { operator<<(b); }\n     explicit CScript(const CBigNum& b) { operator<<(b); }\n-    explicit CScript(const vector<unsigned char>& b) { operator<<(b); }\n+    explicit CScript(const std::vector<unsigned char>& b) { operator<<(b); }\n \n \n     CScript& operator<<(char b)           { return push_int64(b); }\n@@ -422,7 +429,7 @@ class CScript : public vector<unsigned char>\n     CScript& operator<<(opcodetype opcode)\n     {\n         if (opcode < 0 || opcode > 0xff)\n-            throw runtime_error(\"CScript::operator<<() : invalid opcode\");\n+            throw std::runtime_error(\"CScript::operator<<() : invalid opcode\");\n         insert(end(), (unsigned char)opcode);\n         return *this;\n     }\n@@ -447,7 +454,7 @@ class CScript : public vector<unsigned char>\n         return *this;\n     }\n \n-    CScript& operator<<(const vector<unsigned char>& b)\n+    CScript& operator<<(const std::vector<unsigned char>& b)\n     {\n         if (b.size() < OP_PUSHDATA1)\n         {\n@@ -483,7 +490,7 @@ class CScript : public vector<unsigned char>\n     }\n \n \n-    bool GetOp(iterator& pc, opcodetype& opcodeRet, vector<unsigned char>& vchRet)\n+    bool GetOp(iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet)\n     {\n          // Wrapper so it can be called with either iterator or const_iterator\n          const_iterator pc2 = pc;\n@@ -500,7 +507,7 @@ class CScript : public vector<unsigned char>\n          return fRet;\n     }\n \n-    bool GetOp(const_iterator& pc, opcodetype& opcodeRet, vector<unsigned char>& vchRet) const\n+    bool GetOp(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet) const\n     {\n         return GetOp2(pc, opcodeRet, &vchRet);\n     }\n@@ -510,7 +517,7 @@ class CScript : public vector<unsigned char>\n         return GetOp2(pc, opcodeRet, NULL);\n     }\n \n-    bool GetOp2(const_iterator& pc, opcodetype& opcodeRet, vector<unsigned char>* pvchRet) const\n+    bool GetOp2(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>* pvchRet) const\n     {\n         opcodeRet = OP_INVALIDOPCODE;\n         if (pvchRet)\n@@ -617,7 +624,7 @@ class CScript : public vector<unsigned char>\n     uint160 GetBitcoinAddressHash160() const\n     {\n         opcodetype opcode;\n-        vector<unsigned char> vch;\n+        std::vector<unsigned char> vch;\n         CScript::const_iterator pc = begin();\n         if (!GetOp(pc, opcode, vch) || opcode != OP_DUP) return 0;\n         if (!GetOp(pc, opcode, vch) || opcode != OP_HASH160) return 0;\n@@ -629,7 +636,7 @@ class CScript : public vector<unsigned char>\n         return hash160;\n     }\n \n-    string GetBitcoinAddress() const\n+    std::string GetBitcoinAddress() const\n     {\n         uint160 hash160 = GetBitcoinAddressHash160();\n         if (hash160 == 0)\n@@ -643,12 +650,12 @@ class CScript : public vector<unsigned char>\n         *this << OP_DUP << OP_HASH160 << hash160 << OP_EQUALVERIFY << OP_CHECKSIG;\n     }\n \n-    void SetBitcoinAddress(const vector<unsigned char>& vchPubKey)\n+    void SetBitcoinAddress(const std::vector<unsigned char>& vchPubKey)\n     {\n         SetBitcoinAddress(Hash160(vchPubKey));\n     }\n \n-    bool SetBitcoinAddress(const string& strAddress)\n+    bool SetBitcoinAddress(const std::string& strAddress)\n     {\n         this->clear();\n         uint160 hash160;\n@@ -664,11 +671,11 @@ class CScript : public vector<unsigned char>\n         printf(\"CScript(%s)\\n\", HexStr(begin(), end(), true).c_str());\n     }\n \n-    string ToString() const\n+    std::string ToString() const\n     {\n-        string str;\n+        std::string str;\n         opcodetype opcode;\n-        vector<unsigned char> vch;\n+        std::vector<unsigned char> vch;\n         const_iterator pc = begin();\n         while (pc < end())\n         {\n@@ -703,7 +710,9 @@ class CScript : public vector<unsigned char>\n uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n bool IsStandard(const CScript& scriptPubKey);\n bool IsMine(const CScript& scriptPubKey);\n-bool ExtractPubKey(const CScript& scriptPubKey, bool fMineOnly, vector<unsigned char>& vchPubKeyRet);\n+bool ExtractPubKey(const CScript& scriptPubKey, bool fMineOnly, std::vector<unsigned char>& vchPubKeyRet);\n bool ExtractHash160(const CScript& scriptPubKey, uint160& hash160Ret);\n bool SignSignature(const CTransaction& txFrom, CTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL, CScript scriptPrereq=CScript());\n bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int nHashType=0);\n+\n+#endif"
      },
      {
        "sha": "8e7677a2eb122e3236f70239e3b42649e8394c85",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 61,
        "deletions": 51,
        "changes": 112,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -1,15 +1,23 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_SERIALIZE_H\n+#define BITCOIN_SERIALIZE_H\n \n #include <string>\n #include <vector>\n #include <map>\n #include <set>\n+#include <cassert>\n+#include <climits>\n+#include <cstring>\n+#include <cstdio>\n+\n #include <boost/type_traits/is_fundamental.hpp>\n #include <boost/tuple/tuple.hpp>\n #include <boost/tuple/tuple_comparison.hpp>\n #include <boost/tuple/tuple_io.hpp>\n+\n #if defined(_MSC_VER) || defined(__BORLANDC__)\n typedef __int64  int64;\n typedef unsigned __int64  uint64;\n@@ -277,11 +285,11 @@ template<std::size_t LEN>\n class CFixedFieldString\n {\n protected:\n-    const string* pcstr;\n-    string* pstr;\n+    const std::string* pcstr;\n+    std::string* pstr;\n public:\n-    explicit CFixedFieldString(const string& str) : pcstr(&str), pstr(NULL) { }\n-    explicit CFixedFieldString(string& str) : pcstr(&str), pstr(&str) { }\n+    explicit CFixedFieldString(const std::string& str) : pcstr(&str), pstr(NULL) { }\n+    explicit CFixedFieldString(std::string& str) : pcstr(&str), pstr(&str) { }\n \n     unsigned int GetSerializeSize(int, int=0) const\n     {\n@@ -317,9 +325,9 @@ class CFixedFieldString\n //\n \n // string\n-template<typename C> unsigned int GetSerializeSize(const basic_string<C>& str, int, int=0);\n-template<typename Stream, typename C> void Serialize(Stream& os, const basic_string<C>& str, int, int=0);\n-template<typename Stream, typename C> void Unserialize(Stream& is, basic_string<C>& str, int, int=0);\n+template<typename C> unsigned int GetSerializeSize(const std::basic_string<C>& str, int, int=0);\n+template<typename Stream, typename C> void Serialize(Stream& os, const std::basic_string<C>& str, int, int=0);\n+template<typename Stream, typename C> void Unserialize(Stream& is, std::basic_string<C>& str, int, int=0);\n \n // vector\n template<typename T, typename A> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&);\n@@ -398,21 +406,21 @@ inline void Unserialize(Stream& is, T& a, long nType, int nVersion=VERSION)\n // string\n //\n template<typename C>\n-unsigned int GetSerializeSize(const basic_string<C>& str, int, int)\n+unsigned int GetSerializeSize(const std::basic_string<C>& str, int, int)\n {\n     return GetSizeOfCompactSize(str.size()) + str.size() * sizeof(str[0]);\n }\n \n template<typename Stream, typename C>\n-void Serialize(Stream& os, const basic_string<C>& str, int, int)\n+void Serialize(Stream& os, const std::basic_string<C>& str, int, int)\n {\n     WriteCompactSize(os, str.size());\n     if (!str.empty())\n         os.write((char*)&str[0], str.size() * sizeof(str[0]));\n }\n \n template<typename Stream, typename C>\n-void Unserialize(Stream& is, basic_string<C>& str, int, int)\n+void Unserialize(Stream& is, std::basic_string<C>& str, int, int)\n {\n     unsigned int nSize = ReadCompactSize(is);\n     str.resize(nSize);\n@@ -483,7 +491,7 @@ void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion,\n     unsigned int i = 0;\n     while (i < nSize)\n     {\n-        unsigned int blk = min(nSize - i, (unsigned int)(1 + 4999999 / sizeof(T)));\n+        unsigned int blk = std::min(nSize - i, (unsigned int)(1 + 4999999 / sizeof(T)));\n         v.resize(i + blk);\n         is.read((char*)&v[i], blk * sizeof(T));\n         i += blk;\n@@ -526,19 +534,19 @@ inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersio\n //\n inline unsigned int GetSerializeSize(const CScript& v, int nType, int nVersion)\n {\n-    return GetSerializeSize((const vector<unsigned char>&)v, nType, nVersion);\n+    return GetSerializeSize((const std::vector<unsigned char>&)v, nType, nVersion);\n }\n \n template<typename Stream>\n void Serialize(Stream& os, const CScript& v, int nType, int nVersion)\n {\n-    Serialize(os, (const vector<unsigned char>&)v, nType, nVersion);\n+    Serialize(os, (const std::vector<unsigned char>&)v, nType, nVersion);\n }\n \n template<typename Stream>\n void Unserialize(Stream& is, CScript& v, int nType, int nVersion)\n {\n-    Unserialize(is, (vector<unsigned char>&)v, nType, nVersion);\n+    Unserialize(is, (std::vector<unsigned char>&)v, nType, nVersion);\n }\n \n \n@@ -575,26 +583,26 @@ template<typename T0, typename T1, typename T2>\n unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2>& item, int nType, int nVersion)\n {\n     unsigned int nSize = 0;\n-    nSize += GetSerializeSize(get<0>(item), nType, nVersion);\n-    nSize += GetSerializeSize(get<1>(item), nType, nVersion);\n-    nSize += GetSerializeSize(get<2>(item), nType, nVersion);\n+    nSize += GetSerializeSize(boost::get<0>(item), nType, nVersion);\n+    nSize += GetSerializeSize(boost::get<1>(item), nType, nVersion);\n+    nSize += GetSerializeSize(boost::get<2>(item), nType, nVersion);\n     return nSize;\n }\n \n template<typename Stream, typename T0, typename T1, typename T2>\n void Serialize(Stream& os, const boost::tuple<T0, T1, T2>& item, int nType, int nVersion)\n {\n-    Serialize(os, get<0>(item), nType, nVersion);\n-    Serialize(os, get<1>(item), nType, nVersion);\n-    Serialize(os, get<2>(item), nType, nVersion);\n+    Serialize(os, boost::get<0>(item), nType, nVersion);\n+    Serialize(os, boost::get<1>(item), nType, nVersion);\n+    Serialize(os, boost::get<2>(item), nType, nVersion);\n }\n \n template<typename Stream, typename T0, typename T1, typename T2>\n void Unserialize(Stream& is, boost::tuple<T0, T1, T2>& item, int nType, int nVersion)\n {\n-    Unserialize(is, get<0>(item), nType, nVersion);\n-    Unserialize(is, get<1>(item), nType, nVersion);\n-    Unserialize(is, get<2>(item), nType, nVersion);\n+    Unserialize(is, boost::get<0>(item), nType, nVersion);\n+    Unserialize(is, boost::get<1>(item), nType, nVersion);\n+    Unserialize(is, boost::get<2>(item), nType, nVersion);\n }\n \n \n@@ -606,29 +614,29 @@ template<typename T0, typename T1, typename T2, typename T3>\n unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)\n {\n     unsigned int nSize = 0;\n-    nSize += GetSerializeSize(get<0>(item), nType, nVersion);\n-    nSize += GetSerializeSize(get<1>(item), nType, nVersion);\n-    nSize += GetSerializeSize(get<2>(item), nType, nVersion);\n-    nSize += GetSerializeSize(get<3>(item), nType, nVersion);\n+    nSize += GetSerializeSize(boost::get<0>(item), nType, nVersion);\n+    nSize += GetSerializeSize(boost::get<1>(item), nType, nVersion);\n+    nSize += GetSerializeSize(boost::get<2>(item), nType, nVersion);\n+    nSize += GetSerializeSize(boost::get<3>(item), nType, nVersion);\n     return nSize;\n }\n \n template<typename Stream, typename T0, typename T1, typename T2, typename T3>\n void Serialize(Stream& os, const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)\n {\n-    Serialize(os, get<0>(item), nType, nVersion);\n-    Serialize(os, get<1>(item), nType, nVersion);\n-    Serialize(os, get<2>(item), nType, nVersion);\n-    Serialize(os, get<3>(item), nType, nVersion);\n+    Serialize(os, boost::get<0>(item), nType, nVersion);\n+    Serialize(os, boost::get<1>(item), nType, nVersion);\n+    Serialize(os, boost::get<2>(item), nType, nVersion);\n+    Serialize(os, boost::get<3>(item), nType, nVersion);\n }\n \n template<typename Stream, typename T0, typename T1, typename T2, typename T3>\n void Unserialize(Stream& is, boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)\n {\n-    Unserialize(is, get<0>(item), nType, nVersion);\n-    Unserialize(is, get<1>(item), nType, nVersion);\n-    Unserialize(is, get<2>(item), nType, nVersion);\n-    Unserialize(is, get<3>(item), nType, nVersion);\n+    Unserialize(is, boost::get<0>(item), nType, nVersion);\n+    Unserialize(is, boost::get<1>(item), nType, nVersion);\n+    Unserialize(is, boost::get<2>(item), nType, nVersion);\n+    Unserialize(is, boost::get<3>(item), nType, nVersion);\n }\n \n \n@@ -661,7 +669,7 @@ void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion\n     typename std::map<K, T, Pred, A>::iterator mi = m.begin();\n     for (unsigned int i = 0; i < nSize; i++)\n     {\n-        pair<K, T> item;\n+        std::pair<K, T> item;\n         Unserialize(is, item, nType, nVersion);\n         mi = m.insert(mi, item);\n     }\n@@ -773,7 +781,7 @@ struct secure_allocator : public std::allocator<T>\n     {\n         if (p != NULL)\n             memset(p, 0, sizeof(T) * n);\n-        allocator<T>::deallocate(p, n);\n+        std::allocator<T>::deallocate(p, n);\n     }\n };\n \n@@ -787,7 +795,7 @@ struct secure_allocator : public std::allocator<T>\n class CDataStream\n {\n protected:\n-    typedef vector<char, secure_allocator<char> > vector_type;\n+    typedef std::vector<char, secure_allocator<char> > vector_type;\n     vector_type vch;\n     unsigned int nReadPos;\n     short state;\n@@ -828,12 +836,12 @@ class CDataStream\n         Init(nTypeIn, nVersionIn);\n     }\n \n-    CDataStream(const vector<char>& vchIn, int nTypeIn=SER_NETWORK, int nVersionIn=VERSION) : vch(vchIn.begin(), vchIn.end())\n+    CDataStream(const std::vector<char>& vchIn, int nTypeIn=SER_NETWORK, int nVersionIn=VERSION) : vch(vchIn.begin(), vchIn.end())\n     {\n         Init(nTypeIn, nVersionIn);\n     }\n \n-    CDataStream(const vector<unsigned char>& vchIn, int nTypeIn=SER_NETWORK, int nVersionIn=VERSION) : vch((char*)&vchIn.begin()[0], (char*)&vchIn.end()[0])\n+    CDataStream(const std::vector<unsigned char>& vchIn, int nTypeIn=SER_NETWORK, int nVersionIn=VERSION) : vch((char*)&vchIn.begin()[0], (char*)&vchIn.end()[0])\n     {\n         Init(nTypeIn, nVersionIn);\n     }\n@@ -844,7 +852,7 @@ class CDataStream\n         nType = nTypeIn;\n         nVersion = nVersionIn;\n         state = 0;\n-        exceptmask = ios::badbit | ios::failbit;\n+        exceptmask = std::ios::badbit | std::ios::failbit;\n     }\n \n     CDataStream& operator+=(const CDataStream& b)\n@@ -860,9 +868,9 @@ class CDataStream\n         return (ret);\n     }\n \n-    string str() const\n+    std::string str() const\n     {\n-        return (string(begin(), end()));\n+        return (std::string(begin(), end()));\n     }\n \n \n@@ -895,7 +903,7 @@ class CDataStream\n             vch.insert(it, first, last);\n     }\n \n-    void insert(iterator it, vector<char>::const_iterator first, vector<char>::const_iterator last)\n+    void insert(iterator it, std::vector<char>::const_iterator first, std::vector<char>::const_iterator last)\n     {\n         if (it == vch.begin() + nReadPos && last - first <= nReadPos)\n         {\n@@ -985,7 +993,7 @@ class CDataStream\n     }\n \n     bool eof() const             { return size() == 0; }\n-    bool fail() const            { return state & (ios::badbit | ios::failbit); }\n+    bool fail() const            { return state & (std::ios::badbit | std::ios::failbit); }\n     bool good() const            { return !eof() && (state == 0); }\n     void clear(short n)          { state = n; }  // name conflict with vector clear()\n     short exceptions()           { return exceptmask; }\n@@ -1009,7 +1017,7 @@ class CDataStream\n         {\n             if (nReadPosNext > vch.size())\n             {\n-                setstate(ios::failbit, \"CDataStream::read() : end of data\");\n+                setstate(std::ios::failbit, \"CDataStream::read() : end of data\");\n                 memset(pch, 0, nSize);\n                 nSize = vch.size() - nReadPos;\n             }\n@@ -1032,7 +1040,7 @@ class CDataStream\n         {\n             if (nReadPosNext > vch.size())\n             {\n-                setstate(ios::failbit, \"CDataStream::ignore() : end of data\");\n+                setstate(std::ios::failbit, \"CDataStream::ignore() : end of data\");\n                 nSize = vch.size() - nReadPos;\n             }\n             nReadPos = 0;\n@@ -1167,7 +1175,7 @@ class CAutoFile\n         nType = nTypeIn;\n         nVersion = nVersionIn;\n         state = 0;\n-        exceptmask = ios::badbit | ios::failbit;\n+        exceptmask = std::ios::badbit | std::ios::failbit;\n     }\n \n     ~CAutoFile()\n@@ -1201,7 +1209,7 @@ class CAutoFile\n             throw std::ios_base::failure(psz);\n     }\n \n-    bool fail() const            { return state & (ios::badbit | ios::failbit); }\n+    bool fail() const            { return state & (std::ios::badbit | std::ios::failbit); }\n     bool good() const            { return state == 0; }\n     void clear(short n = 0)      { state = n; }\n     short exceptions()           { return exceptmask; }\n@@ -1219,7 +1227,7 @@ class CAutoFile\n         if (!file)\n             throw std::ios_base::failure(\"CAutoFile::read : file handle is NULL\");\n         if (fread(pch, 1, nSize, file) != nSize)\n-            setstate(ios::failbit, feof(file) ? \"CAutoFile::read : end of file\" : \"CAutoFile::read : fread failed\");\n+            setstate(std::ios::failbit, feof(file) ? \"CAutoFile::read : end of file\" : \"CAutoFile::read : fread failed\");\n         return (*this);\n     }\n \n@@ -1228,7 +1236,7 @@ class CAutoFile\n         if (!file)\n             throw std::ios_base::failure(\"CAutoFile::write : file handle is NULL\");\n         if (fwrite(pch, 1, nSize, file) != nSize)\n-            setstate(ios::failbit, \"CAutoFile::write : write failed\");\n+            setstate(std::ios::failbit, \"CAutoFile::write : write failed\");\n         return (*this);\n     }\n \n@@ -1259,3 +1267,5 @@ class CAutoFile\n         return (*this);\n     }\n };\n+\n+#endif"
      },
      {
        "sha": "d4d1908e7ae10f41581541d485ab219195e9e715",
        "filename": "src/strlcpy.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/strlcpy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/strlcpy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/strlcpy.h?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -13,7 +13,8 @@\n  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n  */\n-\n+#ifndef BITCOIN_STRLCPY_H\n+#define BITCOIN_STRLCPY_H\n /*\n  * Copy src to string dst of size siz.  At most siz-1 characters\n  * will be copied.  Always NUL terminates (unless siz == 0).\n@@ -82,3 +83,4 @@ inline size_t strlcat(char *dst, const char *src, size_t siz)\n \n     return(dlen + (s - src)); /* count does not include NUL */\n }\n+#endif"
      },
      {
        "sha": "6e28435a35c07da47462d5732f7d3c06465ea2f2",
        "filename": "src/ui.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 20,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/ui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/ui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui.cpp?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -7,6 +7,8 @@\n #include <crtdbg.h>\n #endif\n \n+using namespace std;\n+using namespace boost;\n \n \n DEFINE_EVENT_TYPE(wxEVT_UITHREADCALL)\n@@ -294,7 +296,7 @@ CMainFrame::CMainFrame(wxWindow* parent) : CMainFrameBase(parent)\n     dResize -= 0.01;\n #endif\n     wxListCtrl* pplistCtrl[] = {m_listCtrlAll, m_listCtrlSentReceived, m_listCtrlSent, m_listCtrlReceived};\n-    foreach(wxListCtrl* p, pplistCtrl)\n+    BOOST_FOREACH(wxListCtrl* p, pplistCtrl)\n     {\n         p->InsertColumn(0, \"\",               wxLIST_FORMAT_LEFT,  dResize * 0);\n         p->InsertColumn(1, \"\",               wxLIST_FORMAT_LEFT,  dResize * 0);\n@@ -528,7 +530,7 @@ string SingleLine(const string& strIn)\n {\n     string strOut;\n     bool fOneSpace = false;\n-    foreach(unsigned char c, strIn)\n+    BOOST_FOREACH(unsigned char c, strIn)\n     {\n         if (isspace(c))\n         {\n@@ -609,7 +611,7 @@ bool CMainFrame::InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex)\n             if (nCredit == 0)\n             {\n                 int64 nUnmatured = 0;\n-                foreach(const CTxOut& txout, wtx.vout)\n+                BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                     nUnmatured += txout.GetCredit();\n                 if (wtx.IsInMainChain())\n                 {\n@@ -644,7 +646,7 @@ bool CMainFrame::InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex)\n             // Received by Bitcoin Address\n             if (!fShowReceived)\n                 return false;\n-            foreach(const CTxOut& txout, wtx.vout)\n+            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n             {\n                 if (txout.IsMine())\n                 {\n@@ -687,11 +689,11 @@ bool CMainFrame::InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex)\n     else\n     {\n         bool fAllFromMe = true;\n-        foreach(const CTxIn& txin, wtx.vin)\n+        BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n             fAllFromMe = fAllFromMe && txin.IsMine();\n \n         bool fAllToMe = true;\n-        foreach(const CTxOut& txout, wtx.vout)\n+        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n             fAllToMe = fAllToMe && txout.IsMine();\n \n         if (fAllFromMe && fAllToMe)\n@@ -776,9 +778,9 @@ bool CMainFrame::InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex)\n             // Mixed debit transaction, can't break down payees\n             //\n             bool fAllMine = true;\n-            foreach(const CTxOut& txout, wtx.vout)\n+            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                 fAllMine = fAllMine && txout.IsMine();\n-            foreach(const CTxIn& txin, wtx.vin)\n+            BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n                 fAllMine = fAllMine && txin.IsMine();\n \n             InsertLine(fNew, nIndex, hash, strSort, colour,\n@@ -1006,7 +1008,7 @@ void CMainFrame::OnPaintListCtrl(wxPaintEvent& event)\n                 string strTop;\n                 if (m_listCtrl->GetItemCount())\n                     strTop = (string)m_listCtrl->GetItemText(0);\n-                foreach(uint256 hash, vWalletUpdated)\n+                BOOST_FOREACH(uint256 hash, vWalletUpdated)\n                 {\n                     map<uint256, CWalletTx>::iterator mi = mapWallet.find(hash);\n                     if (mi != mapWallet.end())\n@@ -1265,7 +1267,7 @@ CTxDetailsDialog::CTxDetailsDialog(wxWindow* parent, CWalletTx wtx) : CTxDetails\n             if (nNet > 0)\n             {\n                 // Credit\n-                foreach(const CTxOut& txout, wtx.vout)\n+                BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                 {\n                     if (txout.IsMine())\n                     {\n@@ -1316,7 +1318,7 @@ CTxDetailsDialog::CTxDetailsDialog(wxWindow* parent, CWalletTx wtx) : CTxDetails\n             // Coinbase\n             //\n             int64 nUnmatured = 0;\n-            foreach(const CTxOut& txout, wtx.vout)\n+            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                 nUnmatured += txout.GetCredit();\n             strHTML += _(\"<b>Credit:</b> \");\n             if (wtx.IsInMainChain())\n@@ -1335,19 +1337,19 @@ CTxDetailsDialog::CTxDetailsDialog(wxWindow* parent, CWalletTx wtx) : CTxDetails\n         else\n         {\n             bool fAllFromMe = true;\n-            foreach(const CTxIn& txin, wtx.vin)\n+            BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n                 fAllFromMe = fAllFromMe && txin.IsMine();\n \n             bool fAllToMe = true;\n-            foreach(const CTxOut& txout, wtx.vout)\n+            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                 fAllToMe = fAllToMe && txout.IsMine();\n \n             if (fAllFromMe)\n             {\n                 //\n                 // Debit\n                 //\n-                foreach(const CTxOut& txout, wtx.vout)\n+                BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                 {\n                     if (txout.IsMine())\n                         continue;\n@@ -1388,10 +1390,10 @@ CTxDetailsDialog::CTxDetailsDialog(wxWindow* parent, CWalletTx wtx) : CTxDetails\n                 //\n                 // Mixed debit transaction\n                 //\n-                foreach(const CTxIn& txin, wtx.vin)\n+                BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n                     if (txin.IsMine())\n                         strHTML += _(\"<b>Debit:</b> \") + FormatMoney(-txin.GetDebit()) + \"<br>\";\n-                foreach(const CTxOut& txout, wtx.vout)\n+                BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                     if (txout.IsMine())\n                         strHTML += _(\"<b>Credit:</b> \") + FormatMoney(txout.GetCredit()) + \"<br>\";\n             }\n@@ -1418,10 +1420,10 @@ CTxDetailsDialog::CTxDetailsDialog(wxWindow* parent, CWalletTx wtx) : CTxDetails\n         if (fDebug)\n         {\n             strHTML += \"<hr><br>debug print<br><br>\";\n-            foreach(const CTxIn& txin, wtx.vin)\n+            BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n                 if (txin.IsMine())\n                     strHTML += \"<b>Debit:</b> \" + FormatMoney(-txin.GetDebit()) + \"<br>\";\n-            foreach(const CTxOut& txout, wtx.vout)\n+            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                 if (txout.IsMine())\n                     strHTML += \"<b>Credit:</b> \" + FormatMoney(txout.GetCredit()) + \"<br>\";\n \n@@ -1431,7 +1433,7 @@ CTxDetailsDialog::CTxDetailsDialog(wxWindow* parent, CWalletTx wtx) : CTxDetails\n             strHTML += \"<br><b>Inputs:</b><br>\";\n             CRITICAL_BLOCK(cs_mapWallet)\n             {\n-                foreach(const CTxIn& txin, wtx.vin)\n+                BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n                 {\n                     COutPoint prevout = txin.prevout;\n                     map<uint256, CWalletTx>::iterator mi = mapWallet.find(prevout.hash);\n@@ -2341,7 +2343,7 @@ CAddressBookDialog::CAddressBookDialog(wxWindow* parent, const wxString& strInit\n     CRITICAL_BLOCK(cs_mapAddressBook)\n     {\n         string strDefaultReceiving = (string)pframeMain->m_textCtrlAddress->GetValue();\n-        foreach(const PAIRTYPE(string, string)& item, mapAddressBook)\n+        BOOST_FOREACH(const PAIRTYPE(string, string)& item, mapAddressBook)\n         {\n             string strAddress = item.first;\n             string strName = item.second;"
      },
      {
        "sha": "16643db421cdb15d00acc28557c2132dc33c14ec",
        "filename": "src/ui.h",
        "status": "modified",
        "additions": 24,
        "deletions": 20,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/ui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/ui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui.h?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -1,6 +1,8 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_UI_H\n+#define BITCOIN_UI_H\n \n DECLARE_EVENT_TYPE(wxEVT_UITHREADCALL, -1)\n \n@@ -12,9 +14,9 @@ extern wxLocale g_locale;\n \n void HandleCtrlA(wxKeyEvent& event);\n void UIThreadCall(boost::function0<void>);\n-int ThreadSafeMessageBox(const string& message, const string& caption=\"Message\", int style=wxOK, wxWindow* parent=NULL, int x=-1, int y=-1);\n-bool ThreadSafeAskFee(int64 nFeeRequired, const string& strCaption, wxWindow* parent);\n-void CalledSetStatusBar(const string& strText, int nField);\n+int ThreadSafeMessageBox(const std::string& message, const std::string& caption=\"Message\", int style=wxOK, wxWindow* parent=NULL, int x=-1, int y=-1);\n+bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption, wxWindow* parent);\n+void CalledSetStatusBar(const std::string& strText, int nField);\n void MainFrameRepaint();\n void CreateMainWindow();\n void SetStartOnSystemStartup(bool fAutoStart);\n@@ -28,8 +30,8 @@ inline int MyMessageBox(const wxString& message, const wxString& caption=\"Messag\n     if (!fDaemon)\n         return wxMessageBox(message, caption, style, parent, x, y);\n #endif\n-    printf(\"wxMessageBox %s: %s\\n\", string(caption).c_str(), string(message).c_str());\n-    fprintf(stderr, \"%s: %s\\n\", string(caption).c_str(), string(message).c_str());\n+    printf(\"wxMessageBox %s: %s\\n\", std::string(caption).c_str(), std::string(message).c_str());\n+    fprintf(stderr, \"%s: %s\\n\", std::string(caption).c_str(), std::string(message).c_str());\n     return wxOK;\n }\n #define wxMessageBox  MyMessageBox\n@@ -93,8 +95,8 @@ class CMainFrame : public CMainFrameBase\n     bool fRefresh;\n \n     void OnUIThreadCall(wxCommandEvent& event);\n-    int GetSortIndex(const string& strSort);\n-    void InsertLine(bool fNew, int nIndex, uint256 hashKey, string strSort, const wxColour& colour, const wxString& str1, const wxString& str2, const wxString& str3, const wxString& str4, const wxString& str5);\n+    int GetSortIndex(const std::string& strSort);\n+    void InsertLine(bool fNew, int nIndex, uint256 hashKey, std::string strSort, const wxColour& colour, const wxString& str1, const wxString& str2, const wxString& str3, const wxString& str4, const wxString& str5);\n     bool DeleteLine(uint256 hashKey);\n     bool InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex=-1);\n     void RefreshListCtrl();\n@@ -176,8 +178,8 @@ class CSendDialog : public CSendDialogBase\n \n     // Custom\n     bool fEnabledPrev;\n-    string strFromSave;\n-    string strMessageSave;\n+    std::string strFromSave;\n+    std::string strMessageSave;\n };\n \n \n@@ -211,8 +213,8 @@ class CSendingDialog : public CSendingDialogBase\n     void Close();\n     void Repaint();\n     bool Status();\n-    bool Status(const string& str);\n-    bool Error(const string& str);\n+    bool Status(const std::string& str);\n+    bool Error(const std::string& str);\n     void StartTransfer();\n     void OnReply2(CDataStream& vRecv);\n     void OnReply3(CDataStream& vRecv);\n@@ -257,7 +259,7 @@ class CAddressBookDialog : public CAddressBookDialogBase\n     wxString GetSelectedAddress();\n     wxString GetSelectedSendingAddress();\n     wxString GetSelectedReceivingAddress();\n-    bool CheckIfMine(const string& strAddress, const string& strTitle);\n+    bool CheckIfMine(const std::string& strAddress, const std::string& strTitle);\n };\n \n \n@@ -281,11 +283,11 @@ class CGetTextFromUserDialog : public CGetTextFromUserDialogBase\n public:\n     /** Constructor */\n     CGetTextFromUserDialog(wxWindow* parent,\n-                           const string& strCaption,\n-                           const string& strMessage1,\n-                           const string& strValue1=\"\",\n-                           const string& strMessage2=\"\",\n-                           const string& strValue2=\"\") : CGetTextFromUserDialogBase(parent, wxID_ANY, strCaption)\n+                           const std::string& strCaption,\n+                           const std::string& strMessage1,\n+                           const std::string& strValue1=\"\",\n+                           const std::string& strMessage2=\"\",\n+                           const std::string& strValue2=\"\") : CGetTextFromUserDialogBase(parent, wxID_ANY, strCaption)\n     {\n         int x = GetSize().GetWidth();\n         int y = GetSize().GetHeight();\n@@ -308,9 +310,9 @@ class CGetTextFromUserDialog : public CGetTextFromUserDialogBase\n     }\n \n     // Custom\n-    string GetValue()  { return (string)m_textCtrl1->GetValue(); }\n-    string GetValue1() { return (string)m_textCtrl1->GetValue(); }\n-    string GetValue2() { return (string)m_textCtrl2->GetValue(); }\n+    std::string GetValue()  { return (std::string)m_textCtrl1->GetValue(); }\n+    std::string GetValue1() { return (std::string)m_textCtrl1->GetValue(); }\n+    std::string GetValue2() { return (std::string)m_textCtrl2->GetValue(); }\n };\n \n \n@@ -341,3 +343,5 @@ class CMyTaskBarIcon : public wxTaskBarIcon\n \n DECLARE_EVENT_TABLE()\n };\n+\n+#endif"
      },
      {
        "sha": "14feb1683dba31f1d105061503f594292d0dd106",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -1,9 +1,15 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_UINT256_H\n+#define BITCOIN_UINT256_H\n+\n+#include \"serialize.h\"\n \n #include <limits.h>\n #include <string>\n+#include <vector>\n+\n #if defined(_MSC_VER) || defined(__BORLANDC__)\n typedef __int64  int64;\n typedef unsigned __int64  uint64;\n@@ -16,7 +22,7 @@ typedef unsigned long long  uint64;\n #endif\n \n \n-inline int Testuint256AdHoc(vector<string> vArg);\n+inline int Testuint256AdHoc(std::vector<std::string> vArg);\n \n \n \n@@ -296,7 +302,7 @@ class base_uint\n         char psz[sizeof(pn)*2 + 1];\n         for (int i = 0; i < sizeof(pn); i++)\n             sprintf(psz + i*2, \"%02x\", ((unsigned char*)pn)[sizeof(pn) - i - 1]);\n-        return string(psz, psz + sizeof(pn)*2);\n+        return std::string(psz, psz + sizeof(pn)*2);\n     }\n \n     void SetHex(const char* psz)\n@@ -377,7 +383,7 @@ class base_uint\n \n     friend class uint160;\n     friend class uint256;\n-    friend inline int Testuint256AdHoc(vector<string> vArg);\n+    friend inline int Testuint256AdHoc(std::vector<std::string> vArg);\n };\n \n typedef base_uint<160> base_uint160;\n@@ -626,7 +632,7 @@ inline const uint256 operator-(const uint256& a, const uint256& b)      { return\n \n \n \n-inline int Testuint256AdHoc(vector<string> vArg)\n+inline int Testuint256AdHoc(std::vector<std::string> vArg)\n {\n     uint256 g(0);\n \n@@ -755,3 +761,5 @@ inline int Testuint256AdHoc(vector<string> vArg)\n \n     return (0);\n }\n+\n+#endif"
      },
      {
        "sha": "4e93f625de2610aeb7f5011fbaed6fe73c617b09",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -1,9 +1,10 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n-\n #include \"headers.h\"\n \n+using namespace std;\n+using namespace boost;\n \n map<string, string> mapArgs;\n map<string, vector<string> > mapMultiArgs;\n@@ -704,7 +705,7 @@ void GetDataDir(char* pszDir)\n     if (!pfMkdir[nVariation])\n     {\n         pfMkdir[nVariation] = true;\n-        filesystem::create_directory(pszDir);\n+        boost::filesystem::create_directory(pszDir);\n     }\n }\n \n@@ -855,7 +856,7 @@ void AddTimeData(unsigned int ip, int64 nTime)\n             {\n                 // If nobody has a time different than ours but within 5 minutes of ours, give a warning\n                 bool fMatch = false;\n-                foreach(int64 nOffset, vTimeOffsets)\n+                BOOST_FOREACH(int64 nOffset, vTimeOffsets)\n                     if (nOffset != 0 && abs64(nOffset) < 5 * 60)\n                         fMatch = true;\n \n@@ -869,7 +870,7 @@ void AddTimeData(unsigned int ip, int64 nTime)\n                 }\n             }\n         }\n-        foreach(int64 n, vTimeOffsets)\n+        BOOST_FOREACH(int64 n, vTimeOffsets)\n             printf(\"%+\"PRI64d\"  \", n);\n         printf(\"|  nTimeOffset = %+\"PRI64d\"  (%+\"PRI64d\" minutes)\\n\", nTimeOffset, nTimeOffset/60);\n     }"
      },
      {
        "sha": "b1eabd52d5933eab6185536f804b524b7c1ba007",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 59,
        "deletions": 36,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223b6f1ba4819e9a146e7aa451d546726d0bc714/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=223b6f1ba4819e9a146e7aa451d546726d0bc714",
        "patch": "@@ -1,6 +1,28 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_UTIL_H\n+#define BITCOIN_UTIL_H\n+\n+#include \"uint256.h\"\n+\n+#ifndef __WXMSW__\n+#include <sys/types.h>\n+#include <sys/time.h>\n+#include <sys/resource.h>\n+#endif\n+#include <map>\n+#include <vector>\n+#include <string>\n+\n+#include <boost/foreach.hpp>\n+#include <boost/thread.hpp>\n+#include <boost/interprocess/sync/interprocess_recursive_mutex.hpp>\n+#include <boost/date_time/gregorian/gregorian_types.hpp>\n+#include <boost/date_time/posix_time/posix_time_types.hpp>\n+\n+#include <openssl/sha.h>\n+#include <openssl/ripemd.h>\n \n \n #if defined(_MSC_VER) || defined(__BORLANDC__)\n@@ -17,7 +39,6 @@ typedef unsigned long long  uint64;\n #define __forceinline  inline\n #endif\n \n-#define foreach             BOOST_FOREACH\n #define loop                for (;;)\n #define BEGIN(a)            ((char*)&(a))\n #define END(a)              ((char*)&((&(a))[1]))\n@@ -134,8 +155,8 @@ inline const char* _(const char* psz)\n \n \n \n-extern map<string, string> mapArgs;\n-extern map<string, vector<string> > mapMultiArgs;\n+extern std::map<std::string, std::string> mapArgs;\n+extern std::map<std::string, std::vector<std::string> > mapMultiArgs;\n extern bool fDebug;\n extern bool fPrintToConsole;\n extern bool fPrintToDebugger;\n@@ -145,7 +166,7 @@ extern bool fShutdown;\n extern bool fDaemon;\n extern bool fServer;\n extern bool fCommandLine;\n-extern string strMiscWarning;\n+extern std::string strMiscWarning;\n extern bool fTestNet;\n extern bool fNoListen;\n extern bool fLogTimestamps;\n@@ -154,39 +175,39 @@ void RandAddSeed();\n void RandAddSeedPerfmon();\n int OutputDebugStringF(const char* pszFormat, ...);\n int my_snprintf(char* buffer, size_t limit, const char* format, ...);\n-string strprintf(const char* format, ...);\n+std::string strprintf(const char* format, ...);\n bool error(const char* format, ...);\n void LogException(std::exception* pex, const char* pszThread);\n void PrintException(std::exception* pex, const char* pszThread);\n void PrintExceptionContinue(std::exception* pex, const char* pszThread);\n-void ParseString(const string& str, char c, vector<string>& v);\n-string FormatMoney(int64 n, bool fPlus=false);\n-bool ParseMoney(const string& str, int64& nRet);\n+void ParseString(const std::string& str, char c, std::vector<std::string>& v);\n+std::string FormatMoney(int64 n, bool fPlus=false);\n+bool ParseMoney(const std::string& str, int64& nRet);\n bool ParseMoney(const char* pszIn, int64& nRet);\n-vector<unsigned char> ParseHex(const char* psz);\n-vector<unsigned char> ParseHex(const string& str);\n+std::vector<unsigned char> ParseHex(const char* psz);\n+std::vector<unsigned char> ParseHex(const std::string& str);\n void ParseParameters(int argc, char* argv[]);\n const char* wxGetTranslation(const char* psz);\n bool WildcardMatch(const char* psz, const char* mask);\n-bool WildcardMatch(const string& str, const string& mask);\n+bool WildcardMatch(const std::string& str, const std::string& mask);\n int GetFilesize(FILE* file);\n void GetDataDir(char* pszDirRet);\n-string GetConfigFile();\n-string GetPidFile();\n-void CreatePidFile(string pidFile, pid_t pid);\n-void ReadConfigFile(map<string, string>& mapSettingsRet, map<string, vector<string> >& mapMultiSettingsRet);\n+std::string GetConfigFile();\n+std::string GetPidFile();\n+void CreatePidFile(std::string pidFile, pid_t pid);\n+void ReadConfigFile(std::map<std::string, std::string>& mapSettingsRet, std::map<std::string, std::vector<std::string> >& mapMultiSettingsRet);\n #ifdef __WXMSW__\n string MyGetSpecialFolderPath(int nFolder, bool fCreate);\n #endif\n-string GetDefaultDataDir();\n-string GetDataDir();\n+std::string GetDefaultDataDir();\n+std::string GetDataDir();\n void ShrinkDebugFile();\n int GetRandInt(int nMax);\n uint64 GetRand(uint64 nMax);\n int64 GetTime();\n int64 GetAdjustedTime();\n void AddTimeData(unsigned int ip, int64 nTime);\n-string FormatFullVersion();\n+std::string FormatFullVersion();\n \n \n \n@@ -268,12 +289,12 @@ class CTryCriticalBlock\n \n \n \n-inline string i64tostr(int64 n)\n+inline std::string i64tostr(int64 n)\n {\n     return strprintf(\"%\"PRI64d, n);\n }\n \n-inline string itostr(int n)\n+inline std::string itostr(int n)\n {\n     return strprintf(\"%d\", n);\n }\n@@ -287,7 +308,7 @@ inline int64 atoi64(const char* psz)\n #endif\n }\n \n-inline int64 atoi64(const string& str)\n+inline int64 atoi64(const std::string& str)\n {\n #ifdef _MSC_VER\n     return _atoi64(str.c_str());\n@@ -296,7 +317,7 @@ inline int64 atoi64(const string& str)\n #endif\n }\n \n-inline int atoi(const string& str)\n+inline int atoi(const std::string& str)\n {\n     return atoi(str.c_str());\n }\n@@ -317,39 +338,39 @@ inline int64 abs64(int64 n)\n }\n \n template<typename T>\n-string HexStr(const T itbegin, const T itend, bool fSpaces=false)\n+std::string HexStr(const T itbegin, const T itend, bool fSpaces=false)\n {\n     if (itbegin == itend)\n         return \"\";\n     const unsigned char* pbegin = (const unsigned char*)&itbegin[0];\n     const unsigned char* pend = pbegin + (itend - itbegin) * sizeof(itbegin[0]);\n-    string str;\n+    std::string str;\n     str.reserve((pend-pbegin) * (fSpaces ? 3 : 2));\n     for (const unsigned char* p = pbegin; p != pend; p++)\n         str += strprintf((fSpaces && p != pend-1 ? \"%02x \" : \"%02x\"), *p);\n     return str;\n }\n \n-inline string HexStr(const vector<unsigned char>& vch, bool fSpaces=false)\n+inline std::string HexStr(const std::vector<unsigned char>& vch, bool fSpaces=false)\n {\n     return HexStr(vch.begin(), vch.end(), fSpaces);\n }\n \n template<typename T>\n-string HexNumStr(const T itbegin, const T itend, bool f0x=true)\n+std::string HexNumStr(const T itbegin, const T itend, bool f0x=true)\n {\n     if (itbegin == itend)\n         return \"\";\n     const unsigned char* pbegin = (const unsigned char*)&itbegin[0];\n     const unsigned char* pend = pbegin + (itend - itbegin) * sizeof(itbegin[0]);\n-    string str = (f0x ? \"0x\" : \"\");\n+    std::string str = (f0x ? \"0x\" : \"\");\n     str.reserve(str.size() + (pend-pbegin) * 2);\n     for (const unsigned char* p = pend-1; p >= pbegin; p--)\n         str += strprintf(\"%02x\", *p);\n     return str;\n }\n \n-inline string HexNumStr(const vector<unsigned char>& vch, bool f0x=true)\n+inline std::string HexNumStr(const std::vector<unsigned char>& vch, bool f0x=true)\n {\n     return HexNumStr(vch.begin(), vch.end(), f0x);\n }\n@@ -360,7 +381,7 @@ void PrintHex(const T pbegin, const T pend, const char* pszFormat=\"%s\", bool fSp\n     printf(pszFormat, HexStr(pbegin, pend, fSpaces).c_str());\n }\n \n-inline void PrintHex(const vector<unsigned char>& vch, const char* pszFormat=\"%s\", bool fSpaces=true)\n+inline void PrintHex(const std::vector<unsigned char>& vch, const char* pszFormat=\"%s\", bool fSpaces=true)\n {\n     printf(pszFormat, HexStr(vch, fSpaces).c_str());\n }\n@@ -380,11 +401,11 @@ inline int64 GetPerformanceCounter()\n \n inline int64 GetTimeMillis()\n {\n-    return (posix_time::ptime(posix_time::microsec_clock::universal_time()) -\n-            posix_time::ptime(gregorian::date(1970,1,1))).total_milliseconds();\n+    return (boost::posix_time::ptime(boost::posix_time::microsec_clock::universal_time()) -\n+            boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_milliseconds();\n }\n \n-inline string DateTimeStrFormat(const char* pszFormat, int64 nTime)\n+inline std::string DateTimeStrFormat(const char* pszFormat, int64 nTime)\n {\n     time_t n = nTime;\n     struct tm* ptmTime = gmtime(&n);\n@@ -409,21 +430,21 @@ inline bool IsSwitchChar(char c)\n #endif\n }\n \n-inline string GetArg(const string& strArg, const string& strDefault)\n+inline std::string GetArg(const std::string& strArg, const std::string& strDefault)\n {\n     if (mapArgs.count(strArg))\n         return mapArgs[strArg];\n     return strDefault;\n }\n \n-inline int64 GetArg(const string& strArg, int64 nDefault)\n+inline int64 GetArg(const std::string& strArg, int64 nDefault)\n {\n     if (mapArgs.count(strArg))\n         return atoi64(mapArgs[strArg]);\n     return nDefault;\n }\n \n-inline bool GetBoolArg(const string& strArg)\n+inline bool GetBoolArg(const std::string& strArg)\n {\n     if (mapArgs.count(strArg))\n     {\n@@ -538,7 +559,7 @@ uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=VERSION)\n     return Hash(ss.begin(), ss.end());\n }\n \n-inline uint160 Hash160(const vector<unsigned char>& vch)\n+inline uint160 Hash160(const std::vector<unsigned char>& vch)\n {\n     uint256 hash1;\n     SHA256(&vch[0], vch.size(), (unsigned char*)&hash1);\n@@ -655,3 +676,5 @@ inline bool AffinityBugWorkaround(void(*pfn)(void*))\n #endif\n     return false;\n }\n+\n+#endif"
      }
    ]
  }
]