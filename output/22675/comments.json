[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896093753",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-896093753",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22675",
    "id": 896093753,
    "node_id": "IC_kwDOABII5841aU45",
    "user": {
      "login": "0xB10C",
      "id": 19157360,
      "node_id": "MDQ6VXNlcjE5MTU3MzYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/19157360?u=a20996a145f1be613c7b0a57e75d36508572e29d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/0xB10C",
      "html_url": "https://github.com/0xB10C",
      "followers_url": "https://api.github.com/users/0xB10C/followers",
      "following_url": "https://api.github.com/users/0xB10C/following{/other_user}",
      "gists_url": "https://api.github.com/users/0xB10C/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
      "organizations_url": "https://api.github.com/users/0xB10C/orgs",
      "repos_url": "https://api.github.com/users/0xB10C/repos",
      "events_url": "https://api.github.com/users/0xB10C/events{/privacy}",
      "received_events_url": "https://api.github.com/users/0xB10C/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-10T14:48:10Z",
    "updated_at": "2021-08-10T14:48:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK\r\n\r\nTIL Witness Replacement",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896093753/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896133317",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-896133317",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22675",
    "id": 896133317,
    "node_id": "IC_kwDOABII5841aejF",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-10T16:33:51Z",
    "updated_at": "2021-08-10T16:33:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "A new circular dependency `policy/rbf -> txmempool -> validation -> policy/rbf` is introduced here, so I've added it to `EXPECTED_CIRCULAR_DEPENDENCIES` to suppress the issue. I understand this is not ideal. The main problem, I think, is the txmempool -> validation part (which already exists), so I've taken a crack at it in #22677.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896133317/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896233882",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-896233882",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22675",
    "id": 896233882,
    "node_id": "IC_kwDOABII5841a3Ga",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-10T18:53:29Z",
    "updated_at": "2021-09-09T17:37:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22539](https://github.com/bitcoin/bitcoin/pull/22539) (Re-include RBF replacement txs in fee estimation by darosior)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896233882/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896457050",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-896457050",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22675",
    "id": 896457050,
    "node_id": "IC_kwDOABII5841btla",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?u=a0e0040aacd7d4f0787481e8ac30b494fa429e11&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-11T02:45:47Z",
    "updated_at": "2021-08-11T02:45:47Z",
    "author_association": "MEMBER",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896457050/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/897274755",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-897274755",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22675",
    "id": 897274755,
    "node_id": "IC_kwDOABII5841e1OD",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?u=6e534b25446a57600514192504756c77c2637aae&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-12T01:24:32Z",
    "updated_at": "2021-08-12T01:24:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "crACK 6a0a8ef791400d78fb4192a81a392131be78270b",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/897274755/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/897587220",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-897587220",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22675",
    "id": 897587220,
    "node_id": "IC_kwDOABII5841gBgU",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-12T12:11:06Z",
    "updated_at": "2021-08-12T12:11:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/897587220/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/898510534",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-898510534",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22675",
    "id": 898510534,
    "node_id": "IC_kwDOABII5841ji7G",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?u=6e534b25446a57600514192504756c77c2637aae&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-13T14:49:24Z",
    "updated_at": "2021-08-13T14:49:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Tested ACK 6a0a8ef791400d78fb4192a81a392131be78270b",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/898510534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/899381767",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-899381767",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22675",
    "id": 899381767,
    "node_id": "IC_kwDOABII5841m3oH",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-16T09:58:00Z",
    "updated_at": "2021-08-16T09:58:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "\r\n> To be extra-cautious, I also compiled and ran unit tests + the functional test feature_rbf.py on every commit.\r\n> Left some more suggestions considering const-correctness and passing by reference rather than by value. On the second-to-last commit [a30b027](https://github.com/bitcoin/bitcoin/commit/a30b0270d0129f16573827d45250aa42912803d3) the test feature_rbf.py currently fails, see comment below. In the last commit this is fixed, as the deleted strprintf() argument line is re-introduced in the helper function.\r\n\r\nThanks @theStack and good catch! Fixed. Good idea for reviewers to run `git rebase --exec \"make check; test/functional/feature_rbf.py\" -i HEAD~11` in general\r\n\r\nAlso added a small scripted diff style cleanup, should be simple to review",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/899381767/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/902593124",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-902593124",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22675",
    "id": 902593124,
    "node_id": "IC_kwDOABII5841zHpk",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-20T10:20:23Z",
    "updated_at": "2021-08-20T10:20:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "> That said, why not proceed the other way around to avoid introducing the circular dependency at all?\r\n\r\nTrue, I just did it this way because this PR is a bit further along (other one is still looking for approach feedback), and I have some branches depending on this refactor.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/902593124/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/904732562",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-904732562",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22675",
    "id": 904732562,
    "node_id": "IC_kwDOABII58417R-S",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-24T15:14:54Z",
    "updated_at": "2021-08-24T15:14:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "Addressed @jnewbery comments",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/904732562/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/905425602",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-905425602",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22675",
    "id": 905425602,
    "node_id": "IC_kwDOABII584197LC",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-25T11:44:29Z",
    "updated_at": "2021-08-25T11:44:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "I tend to agree with @ariard that splitting this PR into different ones would make a lot of sense here:\r\n\r\n> I think the changes proposed by this PR are sizeable enough to be splitted off in different PRs. Especially about the replace-by-fee check rules, beyond the better-feerate-than-directly-replaced transaction present in the code but not in the spec, iirc they're still minor discrepancies worthy to be documented.\r\n> \r\n> One PRs-split-offs could be :\r\n> \r\n> * `IsRBFOptOut()` : the replacement signaling, introducing `src/policy/rbf.h`\r\n> * `SpendsAndConflictsDisjoint` : the replacement candidate sanitization\r\n> * `PaysMoreThanConflicts`/... : the replacement check rules\r\n\r\nMaybe it's my lousy git skills, but I just tried to re-review the changes since my last ACK via `git range-diff` and the results are rather long (> 800 LOC) and confusing (e.g. some commits have been completely removed), to a point that a complete new review is probably quicker. \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/905425602/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/905450118",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-905450118",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22675",
    "id": 905450118,
    "node_id": "IC_kwDOABII5841-BKG",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-25T12:19:21Z",
    "updated_at": "2021-08-25T12:19:21Z",
    "author_association": "MEMBER",
    "body": "Code review ACK a33fdd0b981965982754b39586eedb7ae456ba57\r\n\r\nI'm very happy to review any new PRs if you split this up.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/905450118/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/905504286",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-905504286",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22675",
    "id": 905504286,
    "node_id": "IC_kwDOABII5841-OYe",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-25T13:31:28Z",
    "updated_at": "2021-08-25T13:31:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've split off the first few commits into #22796.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/905504286/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/910090999",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-910090999",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22675",
    "id": 910090999,
    "node_id": "IC_kwDOABII5842PuL3",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-01T09:08:51Z",
    "updated_at": "2021-09-01T09:08:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased and split off the documentation changes. Ready for review.\r\nPlease note that this is move-only, and I'm happy to add any doc suggestions to #22855.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/910090999/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/911820767",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-911820767",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22675",
    "id": 911820767,
    "node_id": "IC_kwDOABII5842WUff",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-02T15:42:43Z",
    "updated_at": "2021-09-02T15:42:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "Changed the functions to return `std::optional<std::string>` instead of `bool` in response to https://github.com/bitcoin/bitcoin/pull/22796#discussion_r700944084",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/911820767/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/912188277",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-912188277",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22675",
    "id": 912188277,
    "node_id": "IC_kwDOABII5842XuN1",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?u=6e534b25446a57600514192504756c77c2637aae&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-03T01:46:38Z",
    "updated_at": "2021-09-03T01:46:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK 32748da0f47f7aa9fba78dfb29aa426b14f15624\r\n\r\nI tested this again by running some additional test coverage around BIP125 (this PR #22867) on this branch. All good \u2705",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/912188277/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686672590",
    "pull_request_review_id": 727275844,
    "id": 686672590,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjY3MjU5MA==",
    "diff_hunk": "@@ -7,6 +7,10 @@\n \n #include <txmempool.h>\n \n+/** Maximum number of transactions that can be replaced by BIP125 RBF (Rule #5). This includes all\n+ * mempool conflicts and their descendants. */\n+static constexpr uint32_t MAX_BIP125_REPLACEMENT_CANDIDATES{100};",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 6,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "94655e96a43def6125fb602251313f1ab7693229",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Any reason this shouldn't go in `policy/policy.h`? It would get rid of the circular dependency as well\r\n\r\nAs precedent, we do have at least one BIP 125 specific constant there:\r\n```c++\r\n/** Default for -incrementalrelayfee, which sets the minimum feerate increase for mempool limiting or BIP 125 replacement **/\r\nstatic const unsigned int DEFAULT_INCREMENTAL_RELAY_FEE = 1000;\r\n```",
    "created_at": "2021-08-11T09:45:21Z",
    "updated_at": "2021-08-11T11:05:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686672590",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686672590"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686672590"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686672590/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 12,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686678031",
    "pull_request_review_id": 727275844,
    "id": 686678031,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjY3ODAzMQ==",
    "diff_hunk": "@@ -835,33 +835,36 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                             newFeeRate.ToString(),\n                             oldFeeRate.ToString()));\n             }\n+        }\n+\n+        for (const auto& mi : setIterConflicting) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 6,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "76354e503c039ae9c7e0d0f93191b211d699478c",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re 76354e503c039ae9c7e0d0f93191b211d699478c, nice \ud83d\udc4d I had the same thought when reading this code that it'd be more efficient to do something like this",
    "created_at": "2021-08-11T09:52:42Z",
    "updated_at": "2021-08-11T11:05:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686678031",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686678031"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686678031"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686678031/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 840,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686711392",
    "pull_request_review_id": 727275844,
    "id": 686711392,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjcxMTM5Mg==",
    "diff_hunk": "@@ -42,3 +46,38 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     // If we don't have a local mempool we can only check the transaction itself.\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n+\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& m_pool,\n+                      const CTxMemPool::setEntries setIterConflicting,\n+                      TxValidationState& state, CTxMemPool::setEntries& allConflicting)\n+{\n+    AssertLockHeld(m_pool.cs);\n+    const uint256 hash = tx.GetHash();\n+    std::set<uint256> setConflictsParents;\n+    uint64_t nConflictingCount = 0;\n+    for (const auto& mi : setIterConflicting) {\n+        for (const CTxIn &txin : mi->GetTx().vin)\n+        {\n+            setConflictsParents.insert(txin.prevout.hash);\n+        }\n+\n+        nConflictingCount += mi->GetCountWithDescendants();\n+        // This potentially overestimates the number of actual descendants",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "b003c8da7539183fc22bcfdbb154b2cb17c2648e",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I guess the reason it may overestimate here is due to the same descendant being counted multiple times when multiple conflicting parents share that same descendant?",
    "created_at": "2021-08-11T10:41:33Z",
    "updated_at": "2021-08-11T11:05:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686711392",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686711392"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686711392"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686711392/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 61,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686712403",
    "pull_request_review_id": 727275844,
    "id": 686712403,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjcxMjQwMw==",
    "diff_hunk": "@@ -47,6 +47,29 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n \n+bool IsRBFOptOut(const CTransaction& txConflicting)",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "aa30c6f7d6eb62c1466d5272b39ee3d7e437cbda",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is this necessary? Can't we just use `!SignalsOptInRBF` from `util/rbf.h`?\r\n\r\nNote: I realize this is a move only PR, but I'm just wondering, maybe it's a minor refactor later",
    "created_at": "2021-08-11T10:43:07Z",
    "updated_at": "2021-08-11T11:05:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686712403",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686712403"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686712403"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686712403/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 50,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686717457",
    "pull_request_review_id": 727275844,
    "id": 686717457,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjcxNzQ1Nw==",
    "diff_hunk": "@@ -47,6 +47,29 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n \n+bool IsRBFOptOut(const CTransaction& txConflicting)",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "aa30c6f7d6eb62c1466d5272b39ee3d7e437cbda",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: I'm sure if `util/rbf.h` existence is justified in the first place, but if we go with the current convention, `IsRBFOptOut` would seem to belong there",
    "created_at": "2021-08-11T10:51:05Z",
    "updated_at": "2021-08-11T11:05:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686717457",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686717457"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686717457"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686717457/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 50,
    "side": "RIGHT",
    "in_reply_to_id": 686712403
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686721462",
    "pull_request_review_id": 727275844,
    "id": 686721462,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjcyMTQ2Mg==",
    "diff_hunk": "@@ -42,3 +48,174 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     // If we don't have a local mempool we can only check the transaction itself.\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n+\n+bool IsRBFOptOut(const CTransaction& txConflicting)\n+{\n+    // Allow opt-out of transaction replacement by setting\n+    // nSequence > MAX_BIP125_RBF_SEQUENCE (SEQUENCE_FINAL-2) on all inputs.\n+    //\n+    // SEQUENCE_FINAL-1 is picked to still allow use of nLockTime by\n+    // non-replaceable transactions. All inputs rather than just one\n+    // is for the sake of multi-party protocols, where we don't\n+    // want a single party to be able to disable replacement.\n+    //\n+    // Transactions that don't explicitly signal replaceability are\n+    // *not* replaceable with the current logic, even if one of their\n+    // unconfirmed ancestors signals replaceability. This diverges\n+    // from BIP125's inherited signaling description (see CVE-2021-31876).\n+    // Applications relying on first-seen mempool behavior should\n+    // check all unconfirmed ancestors; otherwise an opt-in ancestor\n+    // might be replaced, causing removal of this descendant.\n+    for (const CTxIn &_txin : txConflicting.vin) {\n+        if (_txin.nSequence <= MAX_BIP125_RBF_SEQUENCE) return false;\n+    }\n+    return true;\n+}\n+\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& m_pool,\n+                      const CTxMemPool::setEntries setIterConflicting,\n+                      TxValidationState& state, CTxMemPool::setEntries& allConflicting)\n+{\n+    AssertLockHeld(m_pool.cs);\n+    const uint256 hash = tx.GetHash();\n+    std::set<uint256> setConflictsParents;",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 50,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "520d3efda0128c3e87f5f56f1c282d0e8b295d49",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "We are populating `setConflictsParents` in this method, but we never use it",
    "created_at": "2021-08-11T10:57:29Z",
    "updated_at": "2021-08-11T11:05:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686721462",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686721462"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686721462"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686721462/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 81,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686722096",
    "pull_request_review_id": 727275844,
    "id": 686722096,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjcyMjA5Ng==",
    "diff_hunk": "@@ -42,3 +48,174 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     // If we don't have a local mempool we can only check the transaction itself.\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n+\n+bool IsRBFOptOut(const CTransaction& txConflicting)\n+{\n+    // Allow opt-out of transaction replacement by setting\n+    // nSequence > MAX_BIP125_RBF_SEQUENCE (SEQUENCE_FINAL-2) on all inputs.\n+    //\n+    // SEQUENCE_FINAL-1 is picked to still allow use of nLockTime by\n+    // non-replaceable transactions. All inputs rather than just one\n+    // is for the sake of multi-party protocols, where we don't\n+    // want a single party to be able to disable replacement.\n+    //\n+    // Transactions that don't explicitly signal replaceability are\n+    // *not* replaceable with the current logic, even if one of their\n+    // unconfirmed ancestors signals replaceability. This diverges\n+    // from BIP125's inherited signaling description (see CVE-2021-31876).\n+    // Applications relying on first-seen mempool behavior should\n+    // check all unconfirmed ancestors; otherwise an opt-in ancestor\n+    // might be replaced, causing removal of this descendant.\n+    for (const CTxIn &_txin : txConflicting.vin) {\n+        if (_txin.nSequence <= MAX_BIP125_RBF_SEQUENCE) return false;\n+    }\n+    return true;\n+}\n+\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& m_pool,\n+                      const CTxMemPool::setEntries setIterConflicting,\n+                      TxValidationState& state, CTxMemPool::setEntries& allConflicting)\n+{\n+    AssertLockHeld(m_pool.cs);\n+    const uint256 hash = tx.GetHash();\n+    std::set<uint256> setConflictsParents;\n+    uint64_t nConflictingCount = 0;\n+    for (const auto& mi : setIterConflicting) {\n+        for (const CTxIn &txin : mi->GetTx().vin)\n+        {\n+            setConflictsParents.insert(txin.prevout.hash);\n+        }\n+\n+        nConflictingCount += mi->GetCountWithDescendants();\n+        // This potentially overestimates the number of actual descendants\n+        // but we just want to be conservative to avoid doing too much\n+        // work.\n+        if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\",\n+                    strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n+                        hash.ToString(),\n+                        nConflictingCount,\n+                        MAX_BIP125_REPLACEMENT_CANDIDATES));\n+        }\n+    }\n+    // If not too many to replace, then calculate the set of\n+    // transactions that would have to be evicted\n+    for (CTxMemPool::txiter it : setIterConflicting) {\n+        m_pool.CalculateDescendants(it, allConflicting);\n+    }\n+    return true;\n+}\n+\n+bool HasNoNewUnconfirmed(const CTransaction& tx, CTxMemPool& m_pool,\n+                         const CTxMemPool::setEntries setIterConflicting, TxValidationState& state)\n+{\n+    AssertLockHeld(m_pool.cs);\n+    std::set<uint256> setConflictsParents;\n+    for (const auto& mi : setIterConflicting) {\n+        for (const CTxIn &txin : mi->GetTx().vin)\n+        {\n+            setConflictsParents.insert(txin.prevout.hash);\n+        }\n+    }",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 88,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "520d3efda0128c3e87f5f56f1c282d0e8b295d49",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Now we are populating `setConflictsParents` again, the same way we did in `GetEntriesForRBF`, but we use it here",
    "created_at": "2021-08-11T10:58:27Z",
    "updated_at": "2021-08-11T11:05:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686722096",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686722096"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686722096"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686722096/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 113,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 87,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686725070",
    "pull_request_review_id": 727275844,
    "id": 686725070,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjcyNTA3MA==",
    "diff_hunk": "@@ -42,3 +48,174 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     // If we don't have a local mempool we can only check the transaction itself.\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n+\n+bool IsRBFOptOut(const CTransaction& txConflicting)\n+{\n+    // Allow opt-out of transaction replacement by setting\n+    // nSequence > MAX_BIP125_RBF_SEQUENCE (SEQUENCE_FINAL-2) on all inputs.\n+    //\n+    // SEQUENCE_FINAL-1 is picked to still allow use of nLockTime by\n+    // non-replaceable transactions. All inputs rather than just one\n+    // is for the sake of multi-party protocols, where we don't\n+    // want a single party to be able to disable replacement.\n+    //\n+    // Transactions that don't explicitly signal replaceability are\n+    // *not* replaceable with the current logic, even if one of their\n+    // unconfirmed ancestors signals replaceability. This diverges\n+    // from BIP125's inherited signaling description (see CVE-2021-31876).\n+    // Applications relying on first-seen mempool behavior should\n+    // check all unconfirmed ancestors; otherwise an opt-in ancestor\n+    // might be replaced, causing removal of this descendant.\n+    for (const CTxIn &_txin : txConflicting.vin) {\n+        if (_txin.nSequence <= MAX_BIP125_RBF_SEQUENCE) return false;\n+    }\n+    return true;\n+}\n+\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& m_pool,\n+                      const CTxMemPool::setEntries setIterConflicting,\n+                      TxValidationState& state, CTxMemPool::setEntries& allConflicting)\n+{\n+    AssertLockHeld(m_pool.cs);\n+    const uint256 hash = tx.GetHash();\n+    std::set<uint256> setConflictsParents;\n+    uint64_t nConflictingCount = 0;\n+    for (const auto& mi : setIterConflicting) {\n+        for (const CTxIn &txin : mi->GetTx().vin)\n+        {\n+            setConflictsParents.insert(txin.prevout.hash);\n+        }\n+\n+        nConflictingCount += mi->GetCountWithDescendants();\n+        // This potentially overestimates the number of actual descendants\n+        // but we just want to be conservative to avoid doing too much\n+        // work.\n+        if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\",\n+                    strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n+                        hash.ToString(),\n+                        nConflictingCount,\n+                        MAX_BIP125_REPLACEMENT_CANDIDATES));\n+        }\n+    }\n+    // If not too many to replace, then calculate the set of\n+    // transactions that would have to be evicted\n+    for (CTxMemPool::txiter it : setIterConflicting) {\n+        m_pool.CalculateDescendants(it, allConflicting);\n+    }\n+    return true;\n+}\n+\n+bool HasNoNewUnconfirmed(const CTransaction& tx, CTxMemPool& m_pool,\n+                         const CTxMemPool::setEntries setIterConflicting, TxValidationState& state)\n+{\n+    AssertLockHeld(m_pool.cs);\n+    std::set<uint256> setConflictsParents;\n+    for (const auto& mi : setIterConflicting) {\n+        for (const CTxIn &txin : mi->GetTx().vin)\n+        {\n+            setConflictsParents.insert(txin.prevout.hash);\n+        }\n+    }\n+\n+    for (unsigned int j = 0; j < tx.vin.size(); j++)\n+    {\n+        // We don't want to accept replacements that require low\n+        // feerate junk to be mined first. Ideally we'd keep track of\n+        // the ancestor feerates and make the decision based on that,\n+        // but for now requiring all new inputs to be confirmed works.\n+        //\n+        // Note that if you relax this to make RBF a little more useful,\n+        // this may break the CalculateMempoolAncestors RBF relaxation,\n+        // above. See the comment above the first CalculateMempoolAncestors\n+        // call for more info.\n+        if (!setConflictsParents.count(tx.vin[j].prevout.hash))\n+        {\n+            // Rather than check the UTXO set - potentially expensive -\n+            // it's cheaper to just check if the new input refers to a\n+            // tx that's in the mempool.\n+            if (m_pool.exists(tx.vin[j].prevout.hash)) {\n+                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"replacement-adds-unconfirmed\",\n+                        strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n+                            tx.GetHash().ToString(), j));\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n+bool SpendsAndConflictsDisjoint(CTxMemPool::setEntries& setAncestors, std::set<uint256> setConflicts,\n+                                TxValidationState& state, const uint256& hash)\n+{\n+    for (CTxMemPool::txiter ancestorIt : setAncestors)\n+    {\n+        const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n+        if (setConflicts.count(hashAncestor))\n+        {\n+            return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\",\n+                    strprintf(\"%s spends conflicting transaction %s\",\n+                        hash.ToString(),\n+                        hashAncestor.ToString()));\n+        }\n+    }\n+    return true;\n+}\n+\n+bool PaysMoreThanConflicts(const CTxMemPool::setEntries& setIterConflicting, CFeeRate newFeeRate,\n+                           TxValidationState& state, const uint256& hash)\n+{\n+    for (const auto& mi : setIterConflicting) {\n+        // Don't allow the replacement to reduce the feerate of the\n+        // mempool.\n+        //\n+        // We usually don't want to accept replacements with lower\n+        // feerates than what they replaced as that would lower the\n+        // feerate of the next block. Requiring that the feerate always\n+        // be increased is also an easy-to-reason about way to prevent\n+        // DoS attacks via replacements.\n+        //\n+        // We only consider the feerates of transactions being directly\n+        // replaced, not their indirect descendants. While that does\n+        // mean high feerate children are ignored when deciding whether\n+        // or not to replace, we do require the replacement to pay more\n+        // overall fees too, mitigating most cases.\n+        CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());\n+        if (newFeeRate <= oldFeeRate)\n+        {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n+                    strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n+                        hash.ToString(),\n+                        newFeeRate.ToString(),\n+                        oldFeeRate.ToString()));\n+        }\n+    }\n+    return true;\n+}\n+\n+bool PaysForRBF(CAmount nConflictingFees, size_t nConflictingSize,",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 164,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "520d3efda0128c3e87f5f56f1c282d0e8b295d49",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Note: `nConflictingSize` is an unused variable",
    "created_at": "2021-08-11T11:03:17Z",
    "updated_at": "2021-08-11T11:05:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686725070",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686725070"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686725070"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686725070/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 195,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686859852",
    "pull_request_review_id": 727523177,
    "id": 686859852,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Njg1OTg1Mg==",
    "diff_hunk": "@@ -47,6 +47,29 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n \n+bool IsRBFOptOut(const CTransaction& txConflicting)",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "aa30c6f7d6eb62c1466d5272b39ee3d7e437cbda",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hm, I think everything in util/rbf should be moved to policy/rbf actually :thinking: There's no reason to have two places for RBF (I think) and organization-wise, all RBF logic and code is policy.",
    "created_at": "2021-08-11T13:59:36Z",
    "updated_at": "2021-08-11T13:59:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686859852",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686859852"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686859852"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686859852/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 50,
    "side": "RIGHT",
    "in_reply_to_id": 686712403
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686862622",
    "pull_request_review_id": 727526907,
    "id": 686862622,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Njg2MjYyMg==",
    "diff_hunk": "@@ -7,6 +7,10 @@\n \n #include <txmempool.h>\n \n+/** Maximum number of transactions that can be replaced by BIP125 RBF (Rule #5). This includes all\n+ * mempool conflicts and their descendants. */\n+static constexpr uint32_t MAX_BIP125_REPLACEMENT_CANDIDATES{100};",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 6,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "94655e96a43def6125fb602251313f1ab7693229",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It wouldn't get rid of the circular dependency unfortunately, because it's caused by validation.cpp including policy/rbf.h",
    "created_at": "2021-08-11T14:02:25Z",
    "updated_at": "2021-08-11T14:02:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686862622",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686862622"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686862622"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686862622/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 12,
    "side": "RIGHT",
    "in_reply_to_id": 686672590
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686863065",
    "pull_request_review_id": 727527469,
    "id": 686863065,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Njg2MzA2NQ==",
    "diff_hunk": "@@ -42,3 +46,38 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     // If we don't have a local mempool we can only check the transaction itself.\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n+\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& m_pool,\n+                      const CTxMemPool::setEntries setIterConflicting,\n+                      TxValidationState& state, CTxMemPool::setEntries& allConflicting)\n+{\n+    AssertLockHeld(m_pool.cs);\n+    const uint256 hash = tx.GetHash();\n+    std::set<uint256> setConflictsParents;\n+    uint64_t nConflictingCount = 0;\n+    for (const auto& mi : setIterConflicting) {\n+        for (const CTxIn &txin : mi->GetTx().vin)\n+        {\n+            setConflictsParents.insert(txin.prevout.hash);\n+        }\n+\n+        nConflictingCount += mi->GetCountWithDescendants();\n+        // This potentially overestimates the number of actual descendants",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "b003c8da7539183fc22bcfdbb154b2cb17c2648e",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, that's exactly right.",
    "created_at": "2021-08-11T14:02:51Z",
    "updated_at": "2021-08-11T14:02:51Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686863065",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686863065"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686863065"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686863065/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 61,
    "side": "RIGHT",
    "in_reply_to_id": 686711392
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686883898",
    "pull_request_review_id": 727556139,
    "id": 686883898,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4Njg4Mzg5OA==",
    "diff_hunk": "@@ -47,6 +47,29 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n \n+bool IsRBFOptOut(const CTransaction& txConflicting)",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "aa30c6f7d6eb62c1466d5272b39ee3d7e437cbda",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Not sure, it would make all users of policy/rbf depend on txmempool. Eg not sure the standalone binaries `wallet-util` and friends depend on it although they use util/rbf.",
    "created_at": "2021-08-11T14:25:20Z",
    "updated_at": "2021-08-11T14:25:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686883898",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686883898"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686883898"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686883898/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 50,
    "side": "RIGHT",
    "in_reply_to_id": 686712403
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686916506",
    "pull_request_review_id": 727600345,
    "id": 686916506,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjkxNjUwNg==",
    "diff_hunk": "@@ -47,6 +47,29 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n \n+bool IsRBFOptOut(const CTransaction& txConflicting)",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "aa30c6f7d6eb62c1466d5272b39ee3d7e437cbda",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ahh good point @darosior. I was wrong. I think it makes sense for policy/* to depend on mempool, but I see how util/rbf is needed now.",
    "created_at": "2021-08-11T15:00:07Z",
    "updated_at": "2021-08-11T15:05:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686916506",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686916506"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686916506"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686916506/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 50,
    "side": "RIGHT",
    "in_reply_to_id": 686712403
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686924148",
    "pull_request_review_id": 727610919,
    "id": 686924148,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjkyNDE0OA==",
    "diff_hunk": "@@ -42,3 +48,174 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     // If we don't have a local mempool we can only check the transaction itself.\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n+\n+bool IsRBFOptOut(const CTransaction& txConflicting)\n+{\n+    // Allow opt-out of transaction replacement by setting\n+    // nSequence > MAX_BIP125_RBF_SEQUENCE (SEQUENCE_FINAL-2) on all inputs.\n+    //\n+    // SEQUENCE_FINAL-1 is picked to still allow use of nLockTime by\n+    // non-replaceable transactions. All inputs rather than just one\n+    // is for the sake of multi-party protocols, where we don't\n+    // want a single party to be able to disable replacement.\n+    //\n+    // Transactions that don't explicitly signal replaceability are\n+    // *not* replaceable with the current logic, even if one of their\n+    // unconfirmed ancestors signals replaceability. This diverges\n+    // from BIP125's inherited signaling description (see CVE-2021-31876).\n+    // Applications relying on first-seen mempool behavior should\n+    // check all unconfirmed ancestors; otherwise an opt-in ancestor\n+    // might be replaced, causing removal of this descendant.\n+    for (const CTxIn &_txin : txConflicting.vin) {\n+        if (_txin.nSequence <= MAX_BIP125_RBF_SEQUENCE) return false;\n+    }\n+    return true;\n+}\n+\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& m_pool,\n+                      const CTxMemPool::setEntries setIterConflicting,\n+                      TxValidationState& state, CTxMemPool::setEntries& allConflicting)\n+{\n+    AssertLockHeld(m_pool.cs);\n+    const uint256 hash = tx.GetHash();\n+    std::set<uint256> setConflictsParents;",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 50,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "520d3efda0128c3e87f5f56f1c282d0e8b295d49",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oopsie good catch! did a few different attempts at moving BIP125, this is leftover from a previous one :sweat_smile: ",
    "created_at": "2021-08-11T15:08:44Z",
    "updated_at": "2021-08-11T15:08:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686924148",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686924148"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686924148"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686924148/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 81,
    "side": "RIGHT",
    "in_reply_to_id": 686721462
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686924532",
    "pull_request_review_id": 727611376,
    "id": 686924532,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjkyNDUzMg==",
    "diff_hunk": "@@ -42,3 +48,174 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     // If we don't have a local mempool we can only check the transaction itself.\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n+\n+bool IsRBFOptOut(const CTransaction& txConflicting)\n+{\n+    // Allow opt-out of transaction replacement by setting\n+    // nSequence > MAX_BIP125_RBF_SEQUENCE (SEQUENCE_FINAL-2) on all inputs.\n+    //\n+    // SEQUENCE_FINAL-1 is picked to still allow use of nLockTime by\n+    // non-replaceable transactions. All inputs rather than just one\n+    // is for the sake of multi-party protocols, where we don't\n+    // want a single party to be able to disable replacement.\n+    //\n+    // Transactions that don't explicitly signal replaceability are\n+    // *not* replaceable with the current logic, even if one of their\n+    // unconfirmed ancestors signals replaceability. This diverges\n+    // from BIP125's inherited signaling description (see CVE-2021-31876).\n+    // Applications relying on first-seen mempool behavior should\n+    // check all unconfirmed ancestors; otherwise an opt-in ancestor\n+    // might be replaced, causing removal of this descendant.\n+    for (const CTxIn &_txin : txConflicting.vin) {\n+        if (_txin.nSequence <= MAX_BIP125_RBF_SEQUENCE) return false;\n+    }\n+    return true;\n+}\n+\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& m_pool,\n+                      const CTxMemPool::setEntries setIterConflicting,\n+                      TxValidationState& state, CTxMemPool::setEntries& allConflicting)\n+{\n+    AssertLockHeld(m_pool.cs);\n+    const uint256 hash = tx.GetHash();\n+    std::set<uint256> setConflictsParents;\n+    uint64_t nConflictingCount = 0;\n+    for (const auto& mi : setIterConflicting) {\n+        for (const CTxIn &txin : mi->GetTx().vin)\n+        {\n+            setConflictsParents.insert(txin.prevout.hash);\n+        }\n+\n+        nConflictingCount += mi->GetCountWithDescendants();\n+        // This potentially overestimates the number of actual descendants\n+        // but we just want to be conservative to avoid doing too much\n+        // work.\n+        if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\",\n+                    strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n+                        hash.ToString(),\n+                        nConflictingCount,\n+                        MAX_BIP125_REPLACEMENT_CANDIDATES));\n+        }\n+    }\n+    // If not too many to replace, then calculate the set of\n+    // transactions that would have to be evicted\n+    for (CTxMemPool::txiter it : setIterConflicting) {\n+        m_pool.CalculateDescendants(it, allConflicting);\n+    }\n+    return true;\n+}\n+\n+bool HasNoNewUnconfirmed(const CTransaction& tx, CTxMemPool& m_pool,\n+                         const CTxMemPool::setEntries setIterConflicting, TxValidationState& state)\n+{\n+    AssertLockHeld(m_pool.cs);\n+    std::set<uint256> setConflictsParents;\n+    for (const auto& mi : setIterConflicting) {\n+        for (const CTxIn &txin : mi->GetTx().vin)\n+        {\n+            setConflictsParents.insert(txin.prevout.hash);\n+        }\n+    }\n+\n+    for (unsigned int j = 0; j < tx.vin.size(); j++)\n+    {\n+        // We don't want to accept replacements that require low\n+        // feerate junk to be mined first. Ideally we'd keep track of\n+        // the ancestor feerates and make the decision based on that,\n+        // but for now requiring all new inputs to be confirmed works.\n+        //\n+        // Note that if you relax this to make RBF a little more useful,\n+        // this may break the CalculateMempoolAncestors RBF relaxation,\n+        // above. See the comment above the first CalculateMempoolAncestors\n+        // call for more info.\n+        if (!setConflictsParents.count(tx.vin[j].prevout.hash))\n+        {\n+            // Rather than check the UTXO set - potentially expensive -\n+            // it's cheaper to just check if the new input refers to a\n+            // tx that's in the mempool.\n+            if (m_pool.exists(tx.vin[j].prevout.hash)) {\n+                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"replacement-adds-unconfirmed\",\n+                        strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n+                            tx.GetHash().ToString(), j));\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n+bool SpendsAndConflictsDisjoint(CTxMemPool::setEntries& setAncestors, std::set<uint256> setConflicts,\n+                                TxValidationState& state, const uint256& hash)\n+{\n+    for (CTxMemPool::txiter ancestorIt : setAncestors)\n+    {\n+        const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n+        if (setConflicts.count(hashAncestor))\n+        {\n+            return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\",\n+                    strprintf(\"%s spends conflicting transaction %s\",\n+                        hash.ToString(),\n+                        hashAncestor.ToString()));\n+        }\n+    }\n+    return true;\n+}\n+\n+bool PaysMoreThanConflicts(const CTxMemPool::setEntries& setIterConflicting, CFeeRate newFeeRate,\n+                           TxValidationState& state, const uint256& hash)\n+{\n+    for (const auto& mi : setIterConflicting) {\n+        // Don't allow the replacement to reduce the feerate of the\n+        // mempool.\n+        //\n+        // We usually don't want to accept replacements with lower\n+        // feerates than what they replaced as that would lower the\n+        // feerate of the next block. Requiring that the feerate always\n+        // be increased is also an easy-to-reason about way to prevent\n+        // DoS attacks via replacements.\n+        //\n+        // We only consider the feerates of transactions being directly\n+        // replaced, not their indirect descendants. While that does\n+        // mean high feerate children are ignored when deciding whether\n+        // or not to replace, we do require the replacement to pay more\n+        // overall fees too, mitigating most cases.\n+        CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());\n+        if (newFeeRate <= oldFeeRate)\n+        {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n+                    strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n+                        hash.ToString(),\n+                        newFeeRate.ToString(),\n+                        oldFeeRate.ToString()));\n+        }\n+    }\n+    return true;\n+}\n+\n+bool PaysForRBF(CAmount nConflictingFees, size_t nConflictingSize,",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 164,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "520d3efda0128c3e87f5f56f1c282d0e8b295d49",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Removed - thanks!",
    "created_at": "2021-08-11T15:09:05Z",
    "updated_at": "2021-08-11T15:09:05Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686924532",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686924532"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686924532"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686924532/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 195,
    "side": "RIGHT",
    "in_reply_to_id": 686725070
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688663550",
    "pull_request_review_id": 729819432,
    "id": 688663550,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODY2MzU1MA==",
    "diff_hunk": "@@ -43,3 +47,31 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n \n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& m_pool,\n+                      const CTxMemPool::setEntries setIterConflicting,",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 19,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "474258f4296878a3740c8e19c9358ba4134cd48d",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I guess for performance reasons, we should pass `setIterConflicting` by reference, rather than by value?\r\n```suggestion\r\n                      const CTxMemPool::setEntries& setIterConflicting,\r\n```",
    "created_at": "2021-08-13T17:12:07Z",
    "updated_at": "2021-08-13T17:30:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r688663550",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688663550"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r688663550"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688663550/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 51,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688667057",
    "pull_request_review_id": 729819432,
    "id": 688667057,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODY2NzA1Nw==",
    "diff_hunk": "@@ -2,9 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <consensus/validation.h>\n+#include <logging.h>\n #include <policy/rbf.h>\n #include <util/rbf.h>\n \n+#include <string>",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 9,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "474258f4296878a3740c8e19c9358ba4134cd48d",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This header doesn't seem to be directly needed in this compilation unit (strings _are_ used as return values/parameters for `uint256.ToString()` and `strprintf`, but it's the job of the headers offering those functions to already also include `<string>`).\r\n```suggestion\r\n```",
    "created_at": "2021-08-13T17:18:42Z",
    "updated_at": "2021-08-13T17:30:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r688667057",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688667057"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r688667057"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688667057/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 10,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688975344",
    "pull_request_review_id": 730123757,
    "id": 688975344,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODk3NTM0NA==",
    "diff_hunk": "@@ -75,3 +75,40 @@ bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& m_pool,\n     return true;\n }\n \n+bool HasNoNewUnconfirmed(const CTransaction& tx, CTxMemPool& m_pool,\n+                         const CTxMemPool::setEntries setIterConflicting, TxValidationState& state)",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "7558a4f0c1f00b35639adcd9772b6cdc9bd4431c",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\nbool HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& m_pool,\r\n                         const CTxMemPool::setEntries& setIterConflicting, TxValidationState& state)\r\n```",
    "created_at": "2021-08-14T18:04:08Z",
    "updated_at": "2021-08-14T18:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r688975344",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688975344"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r688975344"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688975344/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 78,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 79,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688976433",
    "pull_request_review_id": 730123757,
    "id": 688976433,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODk3NjQzMw==",
    "diff_hunk": "@@ -112,3 +112,20 @@ bool HasNoNewUnconfirmed(const CTransaction& tx, CTxMemPool& m_pool,\n     }\n     return true;\n }\n+\n+bool SpendsAndConflictsDisjoint(CTxMemPool::setEntries& setAncestors, std::set<uint256> setConflicts,",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "85feb62fbf8c3486992926b685d4df0705c5ca24",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\nbool SpendsAndConflictsDisjoint(const CTxMemPool::setEntries& setAncestors, const std::set<uint256>& setConflicts,\r\n```",
    "created_at": "2021-08-14T18:15:21Z",
    "updated_at": "2021-08-14T18:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r688976433",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688976433"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r688976433"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688976433/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 116,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688976657",
    "pull_request_review_id": 730123757,
    "id": 688976657,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODk3NjY1Nw==",
    "diff_hunk": "@@ -51,4 +51,12 @@ bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& m_pool,\n bool HasNoNewUnconfirmed(const CTransaction& tx, CTxMemPool& m_pool,\n                          const CTxMemPool::setEntries setIterConflicting,\n                          TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(m_pool.cs);\n+\n+/** Check the intersection between original mempool transactions (candidates for being replaced) and\n+ * the ancestors of replacement transactions.\n+ * @param[in]   hash    Transaction ID, included in the error message if violation occurs.\n+ * returns false if the intersection is empty, true if otherwise.",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 8,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "85feb62fbf8c3486992926b685d4df0705c5ca24",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n * returns true if the intersection is empty, false if otherwise.\r\n```",
    "created_at": "2021-08-14T18:17:45Z",
    "updated_at": "2021-08-14T18:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r688976657",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688976657"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r688976657"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688976657/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688977532",
    "pull_request_review_id": 730123757,
    "id": 688977532,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODk3NzUzMg==",
    "diff_hunk": "@@ -828,7 +804,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n                     strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n                         hash.ToString(),\n-                        FormatMoney(nDeltaFees),",
    "path": "src/validation.cpp",
    "position": 124,
    "original_position": 37,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "a30b0270d0129f16573827d45250aa42912803d3",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This line removal must be unintentional (three placeholders, but only two arguments)? Quite a pity that the compiler doesn't warn us in this case. At least the tinyformat library seems to be nice enough to notice us at runtime :)\r\n```\r\n$ ./test/functional/feature_rbf.py\r\n.....\r\n.....\r\n2021-08-14T18:32:49.823000Z TestFramework (INFO): Running test replacement relay fee...\r\n2021-08-14T18:32:49.834000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):                                                                                                                                                             File \"/home/honey/bitcoin_prrev/test/functional/test_framework/util.py\", line 132, in try_rpc\r\n    fun(*args, **kwds)\r\n  File \"/home/honey/bitcoin_prrev/test/functional/test_framework/coverage.py\", line 49, in __call__\r\n    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)\r\n  File \"/home/honey/bitcoin_prrev/test/functional/test_framework/authproxy.py\", line 146, in __call__\r\n    raise JSONRPCException(response['error'], status)\r\ntest_framework.authproxy.JSONRPCException: tinyformat: Too many conversion specifiers in format string (-1)\r\n```",
    "created_at": "2021-08-14T18:28:17Z",
    "updated_at": "2021-08-14T18:43:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r688977532",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688977532"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r688977532"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/688977532/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 882,
    "original_line": 882,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689346785",
    "pull_request_review_id": 730465340,
    "id": 689346785,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTM0Njc4NQ==",
    "diff_hunk": "@@ -828,7 +804,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n                     strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n                         hash.ToString(),\n-                        FormatMoney(nDeltaFees),",
    "path": "src/validation.cpp",
    "position": 124,
    "original_position": 37,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "a30b0270d0129f16573827d45250aa42912803d3",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "woah good catch O.o",
    "created_at": "2021-08-16T08:42:45Z",
    "updated_at": "2021-08-16T08:42:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689346785",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689346785"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689346785"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689346785/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 882,
    "original_line": 882,
    "side": "LEFT",
    "in_reply_to_id": 688977532
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689392421",
    "pull_request_review_id": 730524212,
    "id": 689392421,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTM5MjQyMQ==",
    "diff_hunk": "@@ -43,3 +47,31 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n \n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& m_pool,\n+                      const CTxMemPool::setEntries setIterConflicting,",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 19,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "474258f4296878a3740c8e19c9358ba4134cd48d",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point, done!",
    "created_at": "2021-08-16T09:48:01Z",
    "updated_at": "2021-08-16T09:48:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689392421",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689392421"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689392421"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689392421/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 51,
    "side": "RIGHT",
    "in_reply_to_id": 688663550
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689392517",
    "pull_request_review_id": 730524333,
    "id": 689392517,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTM5MjUxNw==",
    "diff_hunk": "@@ -2,9 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <consensus/validation.h>\n+#include <logging.h>\n #include <policy/rbf.h>\n #include <util/rbf.h>\n \n+#include <string>",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 9,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "474258f4296878a3740c8e19c9358ba4134cd48d",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-08-16T09:48:10Z",
    "updated_at": "2021-08-16T09:48:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689392517",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689392517"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689392517"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689392517/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 10,
    "side": "RIGHT",
    "in_reply_to_id": 688667057
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689392704",
    "pull_request_review_id": 730524556,
    "id": 689392704,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTM5MjcwNA==",
    "diff_hunk": "@@ -75,3 +75,40 @@ bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& m_pool,\n     return true;\n }\n \n+bool HasNoNewUnconfirmed(const CTransaction& tx, CTxMemPool& m_pool,\n+                         const CTxMemPool::setEntries setIterConflicting, TxValidationState& state)",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "7558a4f0c1f00b35639adcd9772b6cdc9bd4431c",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-08-16T09:48:27Z",
    "updated_at": "2021-08-16T09:48:27Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689392704",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689392704"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689392704"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689392704/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 78,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 79,
    "side": "RIGHT",
    "in_reply_to_id": 688975344
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689393199",
    "pull_request_review_id": 730525111,
    "id": 689393199,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTM5MzE5OQ==",
    "diff_hunk": "@@ -112,3 +112,20 @@ bool HasNoNewUnconfirmed(const CTransaction& tx, CTxMemPool& m_pool,\n     }\n     return true;\n }\n+\n+bool SpendsAndConflictsDisjoint(CTxMemPool::setEntries& setAncestors, std::set<uint256> setConflicts,",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "85feb62fbf8c3486992926b685d4df0705c5ca24",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point, done",
    "created_at": "2021-08-16T09:49:09Z",
    "updated_at": "2021-08-16T09:49:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689393199",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689393199"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689393199"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689393199/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 116,
    "side": "RIGHT",
    "in_reply_to_id": 688976433
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689393296",
    "pull_request_review_id": 730525239,
    "id": 689393296,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTM5MzI5Ng==",
    "diff_hunk": "@@ -51,4 +51,12 @@ bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& m_pool,\n bool HasNoNewUnconfirmed(const CTransaction& tx, CTxMemPool& m_pool,\n                          const CTxMemPool::setEntries setIterConflicting,\n                          TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(m_pool.cs);\n+\n+/** Check the intersection between original mempool transactions (candidates for being replaced) and\n+ * the ancestors of replacement transactions.\n+ * @param[in]   hash    Transaction ID, included in the error message if violation occurs.\n+ * returns false if the intersection is empty, true if otherwise.",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 8,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "85feb62fbf8c3486992926b685d4df0705c5ca24",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed",
    "created_at": "2021-08-16T09:49:17Z",
    "updated_at": "2021-08-16T09:49:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689393296",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689393296"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689393296"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689393296/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT",
    "in_reply_to_id": 688976657
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689398361",
    "pull_request_review_id": 730531942,
    "id": 689398361,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTM5ODM2MQ==",
    "diff_hunk": "@@ -828,7 +804,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n                     strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n                         hash.ToString(),\n-                        FormatMoney(nDeltaFees),",
    "path": "src/validation.cpp",
    "position": 124,
    "original_position": 37,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "a30b0270d0129f16573827d45250aa42912803d3",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed",
    "created_at": "2021-08-16T09:56:52Z",
    "updated_at": "2021-08-16T09:56:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689398361",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689398361"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689398361"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689398361/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 882,
    "original_line": 882,
    "side": "LEFT",
    "in_reply_to_id": 688977532
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689596026",
    "pull_request_review_id": 730794542,
    "id": 689596026,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4OTU5NjAyNg==",
    "diff_hunk": "@@ -15,6 +15,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"index/base -> validation -> index/blockfilterindex -> index/base\"\n     \"index/coinstatsindex -> node/coinstats -> index/coinstatsindex\"\n     \"policy/fees -> txmempool -> policy/fees\"\n+    \"policy/rbf -> txmempool -> validation -> policy/rbf\"",
    "path": "test/lint/lint-circular-dependencies.sh",
    "position": null,
    "original_position": 4,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Concept ACK, but I think we should avoid adding a circular dependency here.\r\nEdit: oh, I see you already have a PR, #22677, for this. I guess it's fine under the condition that it's temporarily (to keep this one move-only).",
    "created_at": "2021-08-16T14:38:21Z",
    "updated_at": "2021-08-16T14:47:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689596026",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689596026"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689596026"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/689596026/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 18,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/691672020",
    "pull_request_review_id": 733433190,
    "id": 691672020,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MTY3MjAyMA==",
    "diff_hunk": "@@ -15,4 +15,7 @@ static const uint32_t MAX_BIP125_RBF_SEQUENCE = 0xfffffffd;\n // opt-in to replace-by-fee, according to BIP 125\n bool SignalsOptInRBF(const CTransaction &tx);\n \n+/** Determine whether a mempool transaction is opting out of RBF. Mempool entries do not inherit\n+ * signaling from their parents in this implementation. */\n+bool IsRBFOptOut(const CTransaction& txConflicting);",
    "path": "src/util/rbf.h",
    "position": null,
    "original_position": 6,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think `src/util/rbf.h`, did already incorporate bip125 policy value such as `MAX_BIP125_RBF_SEQUENCE` and if we have a newer `src/policy/rbf.h` encapsulating the RBF-logic better to gather in the same place to avoid bugs where our components (wallet/mempool/etc) misinterpret policy/consensus rules. E.g the wallet applying the pre-bip113 semantic for finality see #17443.",
    "created_at": "2021-08-18T23:32:41Z",
    "updated_at": "2021-08-19T01:02:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r691672020",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/691672020"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r691672020"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/691672020/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 20,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/691690916",
    "pull_request_review_id": 733433190,
    "id": 691690916,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MTY5MDkxNg==",
    "diff_hunk": "@@ -31,4 +36,51 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule 5 and quit as early as\n+ * possible. There cannot be more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  state               Used to return errors, if any.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n+ *                                  the start; any existing mempool entries will remain in the set.\n+ * @returns false if Rule 5 is broken.\n+ */\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting, TxValidationState& state,\n+                      CTxMemPool::setEntries& all_conflicts) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Enforce BIP125 Rule 2: a replacement transaction must not add any new unconfirmed inputs. */",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 29,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If you're pointing to the exact standard rule, I think that's better to either textually quote it to minimize risks of inconsistency OR propose an amendment to the spec with your better wording.\r\n\r\nNote, exact standard quoting is a development practice heavily done by CL. E.g : https://github.com/ElementsProject/lightning/blob/4514d2a18098c9136d1b26b5028298f79028012e/lightningd/onchain_control.c#L31\r\n\r\nPersonally, I think that make easier to audit a codebase from the outside, as you can just grep the refs without knowing in-details the code architecture.",
    "created_at": "2021-08-19T00:26:24Z",
    "updated_at": "2021-08-19T01:02:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r691690916",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/691690916"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r691690916"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/691690916/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 52,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/691695502",
    "pull_request_review_id": 733433190,
    "id": 691695502,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MTY5NTUwMg==",
    "diff_hunk": "@@ -31,4 +36,51 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule 5 and quit as early as\n+ * possible. There cannot be more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  state               Used to return errors, if any.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n+ *                                  the start; any existing mempool entries will remain in the set.\n+ * @returns false if Rule 5 is broken.\n+ */\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting, TxValidationState& state,\n+                      CTxMemPool::setEntries& all_conflicts) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Enforce BIP125 Rule 2: a replacement transaction must not add any new unconfirmed inputs. */\n+bool HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                         const CTxMemPool::setEntries& iters_conflicting,\n+                         TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Check the intersection between two sets of mempool entries to make sure they are disjoint.\n+ * @param[in]   ancestors           Set of mempool entries corresponding to ancestors of the\n+ *                                  replacement transactions.\n+ * @param[in]   direct_conflicts    Set of mempool entries corresponding to the mempool conflicts\n+ *                                  (candidates to be replaced).\n+ * @param[in]   hash                Transaction ID, included in the error message if violation occurs.\n+ * returns true if the two sets are disjoint (i.e. intersection is empty), false if otherwise.\n+ */\n+bool SpendsAndConflictsDisjoint(const CTxMemPool::setEntries& ancestors,",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 42,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think a more accurate name would be \"VerifyAncestorCandidateConflictsDisjunction\".\r\n\r\nAlso `hash` could be `txid` to dissociate clearly from `wtxid`.\r\nAnd `(candidates to be replaced)` is a bit unclear imho as a the direct conflicts aren't mempool candidate anymore, they're are already in until the replacement succeeds, if it does.\r\n\r\nAlso maybe, this function could be made a helper in `txmempool`, and if the disjunction boolean is false, the policy error is qualified.",
    "created_at": "2021-08-19T00:40:54Z",
    "updated_at": "2021-08-19T01:02:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r691695502",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/691695502"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r691695502"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/691695502/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 68,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692140815",
    "pull_request_review_id": 734029253,
    "id": 692140815,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjE0MDgxNQ==",
    "diff_hunk": "@@ -15,6 +15,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"index/base -> validation -> index/blockfilterindex -> index/base\"\n     \"index/coinstatsindex -> node/coinstats -> index/coinstatsindex\"\n     \"policy/fees -> txmempool -> policy/fees\"\n+    \"policy/rbf -> txmempool -> validation -> policy/rbf\"",
    "path": "test/lint/lint-circular-dependencies.sh",
    "position": null,
    "original_position": 4,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yep! I've rebased #22677 on top of this PR so it's more clear that it would fix this problem.",
    "created_at": "2021-08-19T14:02:10Z",
    "updated_at": "2021-08-19T14:02:11Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692140815",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692140815"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692140815"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692140815/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 18,
    "side": "RIGHT",
    "in_reply_to_id": 689596026
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692845155",
    "pull_request_review_id": 734897366,
    "id": 692845155,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Mjg0NTE1NQ==",
    "diff_hunk": "@@ -15,4 +15,7 @@ static const uint32_t MAX_BIP125_RBF_SEQUENCE = 0xfffffffd;\n // opt-in to replace-by-fee, according to BIP 125\n bool SignalsOptInRBF(const CTransaction &tx);\n \n+/** Determine whether a mempool transaction is opting out of RBF. Mempool entries do not inherit",
    "path": "src/util/rbf.h",
    "position": null,
    "original_position": 4,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think this needs to mention mempool:\r\n\r\n```suggestion\r\n/** Determine whether a transaction is opting out of RBF. Mempool entries do not inherit\r\n```",
    "created_at": "2021-08-20T10:34:02Z",
    "updated_at": "2021-08-20T13:17:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692845155",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692845155"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692845155"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692845155/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 18,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692845356",
    "pull_request_review_id": 734897366,
    "id": 692845356,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Mjg0NTM1Ng==",
    "diff_hunk": "@@ -15,4 +15,7 @@ static const uint32_t MAX_BIP125_RBF_SEQUENCE = 0xfffffffd;\n // opt-in to replace-by-fee, according to BIP 125\n bool SignalsOptInRBF(const CTransaction &tx);\n \n+/** Determine whether a mempool transaction is opting out of RBF. Mempool entries do not inherit\n+ * signaling from their parents in this implementation. */",
    "path": "src/util/rbf.h",
    "position": null,
    "original_position": 5,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n * signaling from their ancestors in this implementation. */\r\n```",
    "created_at": "2021-08-20T10:34:28Z",
    "updated_at": "2021-08-20T13:17:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692845356",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692845356"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692845356"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692845356/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 19,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692846284",
    "pull_request_review_id": 734897366,
    "id": 692846284,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Mjg0NjI4NA==",
    "diff_hunk": "@@ -15,3 +15,26 @@ bool SignalsOptInRBF(const CTransaction &tx)\n     }\n     return false;\n }\n+\n+bool IsRBFOptOut(const CTransaction& txConflicting)\n+{\n+    // Allow opt-out of transaction replacement by setting\n+    // nSequence > MAX_BIP125_RBF_SEQUENCE (SEQUENCE_FINAL-2) on all inputs.\n+    //\n+    // SEQUENCE_FINAL-1 is picked to still allow use of nLockTime by\n+    // non-replaceable transactions. All inputs rather than just one\n+    // is for the sake of multi-party protocols, where we don't\n+    // want a single party to be able to disable replacement.\n+    //\n+    // Transactions that don't explicitly signal replaceability are\n+    // *not* replaceable with the current logic, even if one of their\n+    // unconfirmed ancestors signals replaceability. This diverges\n+    // from BIP125's inherited signaling description (see CVE-2021-31876).\n+    // Applications relying on first-seen mempool behavior should\n+    // check all unconfirmed ancestors; otherwise an opt-in ancestor\n+    // might be replaced, causing removal of this descendant.\n+    for (const CTxIn &_txin : txConflicting.vin) {\n+        if (_txin.nSequence <= MAX_BIP125_RBF_SEQUENCE) return false;",
    "path": "src/util/rbf.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In the final fixup commit, you could fix this to use current style:\r\n\r\n```suggestion\r\n    for (const CTxIn& txin : txConflicting.vin) {\r\n        if (txin.nSequence <= MAX_BIP125_RBF_SEQUENCE) return false;\r\n```",
    "created_at": "2021-08-20T10:36:04Z",
    "updated_at": "2021-08-20T13:17:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692846284",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692846284"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692846284"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692846284/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 36,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 37,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692847264",
    "pull_request_review_id": 734897366,
    "id": 692847264,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Mjg0NzI2NA==",
    "diff_hunk": "@@ -42,3 +42,4 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     // If we don't have a local mempool we can only check the transaction itself.\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n+",
    "path": "src/policy/rbf.cpp",
    "position": 24,
    "original_position": 4,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "eb3bd36a8b8f7849757f6e6f01a704e63cdfef2e",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In eb3bd36a8b _MOVEONLY: signal checking into policy/rbf_\r\n\r\nDon't add this new blank line.",
    "created_at": "2021-08-20T10:37:49Z",
    "updated_at": "2021-08-20T13:17:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692847264",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692847264"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692847264"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692847264/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 49,
    "original_line": 49,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692847949",
    "pull_request_review_id": 734897366,
    "id": 692847949,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Mjg0Nzk0OQ==",
    "diff_hunk": "@@ -15,6 +15,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"index/base -> validation -> index/blockfilterindex -> index/base\"\n     \"index/coinstatsindex -> node/coinstats -> index/coinstatsindex\"\n     \"policy/fees -> txmempool -> policy/fees\"\n+    \"policy/rbf -> txmempool -> validation -> policy/rbf\"",
    "path": "test/lint/lint-circular-dependencies.sh",
    "position": null,
    "original_position": 4,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Perhaps add a note to the commit log that this circular dependency is due to the txmempool->validation dependency, and that #22677 resolves it.",
    "created_at": "2021-08-20T10:39:04Z",
    "updated_at": "2021-08-20T13:17:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692847949",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692847949"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692847949"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692847949/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 18,
    "side": "RIGHT",
    "in_reply_to_id": 689596026
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692891251",
    "pull_request_review_id": 734897366,
    "id": 692891251,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Mjg5MTI1MQ==",
    "diff_hunk": "@@ -784,23 +761,8 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // that we have the set of all ancestors we can detect this\n     // pathological case by making sure setConflicts and setAncestors don't\n     // intersect.\n-    for (CTxMemPool::txiter ancestorIt : setAncestors)\n-    {\n-        const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n-        if (setConflicts.count(hashAncestor))\n-        {\n-            return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\",\n-                    strprintf(\"%s spends conflicting transaction %s\",\n-                        hash.ToString(),\n-                        hashAncestor.ToString()));\n-        }\n-    }\n+    if (!SpendsAndConflictsDisjoint(setAncestors, setConflicts, state, hash)) return false;\n \n-    // Check if it's economically rational to mine this transaction rather\n-    // than the ones it replaces.\n-    nConflictingFees = 0;\n-    nConflictingSize = 0;",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 61,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is potentially a behavior change. Previously, these would get set to zero unconditionally. Now, they only get set if `fReplacementTransaction` is true.\r\n\r\nI think it'd be safer to default initialize `m_conflicting_fees` and `m_conflicting_size` to 0 in the struct member declarations, and remove these assignments.\r\n\r\nI might even go further and remove the `nConflictingFees` and `nConflictingSize` references. I think they harm readability more than help.\r\n",
    "created_at": "2021-08-20T12:02:20Z",
    "updated_at": "2021-08-20T13:17:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692891251",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692891251"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692891251"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692891251/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 801,
    "start_side": "LEFT",
    "line": null,
    "original_line": 802,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692892064",
    "pull_request_review_id": 734897366,
    "id": 692892064,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Mjg5MjA2NA==",
    "diff_hunk": "@@ -6,6 +6,11 @@\n #define BITCOIN_POLICY_RBF_H\n \n #include <txmempool.h>\n+#include <consensus/validation.h>",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 4,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "sort includes :)",
    "created_at": "2021-08-20T12:03:59Z",
    "updated_at": "2021-08-20T13:17:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692892064",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692892064"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692892064"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692892064/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 9,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692893230",
    "pull_request_review_id": 734897366,
    "id": 692893230,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Mjg5MzIzMA==",
    "diff_hunk": "@@ -2,14 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <consensus/validation.h>",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "First include this file's header, then other headers in the project:\r\n\r\n```c++\r\n#include <policy/rbf.h>\r\n\r\n#include <consensus/validation.h>\r\n#include <logging.h>\r\n#include <policy/settings.h>\r\n#include <util/moneystr.h>\r\n#include <util/rbf.h>\r\n```",
    "created_at": "2021-08-20T12:06:12Z",
    "updated_at": "2021-08-20T13:17:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692893230",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692893230"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692893230"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692893230/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 5,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692897400",
    "pull_request_review_id": 734897366,
    "id": 692897400,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Mjg5NzQwMA==",
    "diff_hunk": "@@ -42,3 +46,133 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     // If we don't have a local mempool we can only check the transaction itself.\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n+\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting,\n+                      TxValidationState& state, CTxMemPool::setEntries& all_conflicts)\n+{\n+    AssertLockHeld(pool.cs);\n+    const uint256 hash = tx.GetHash();\n+    uint64_t nConflictingCount = 0;",
    "path": "src/policy/rbf.cpp",
    "position": 39,
    "original_position": 43,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Consider updating this to current style in the fixup commit:\r\n\r\n```suggestion\r\n    uint64_t number_conflicting_tx{0};\r\n```\r\n\r\nor similar",
    "created_at": "2021-08-20T12:12:57Z",
    "updated_at": "2021-08-20T13:17:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692897400",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692897400"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692897400"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692897400/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 57,
    "original_line": 57,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692901343",
    "pull_request_review_id": 734897366,
    "id": 692901343,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjkwMTM0Mw==",
    "diff_hunk": "@@ -809,106 +771,21 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     if (fReplacementTransaction)\n     {\n         CFeeRate newFeeRate(nModifiedFees, nSize);\n-        std::set<uint256> setConflictsParents;\n-        const int maxDescendantsToVisit = 100;\n-        for (const auto& mi : setIterConflicting) {\n-            // Don't allow the replacement to reduce the feerate of the\n-            // mempool.\n-            //\n-            // We usually don't want to accept replacements with lower\n-            // feerates than what they replaced as that would lower the\n-            // feerate of the next block. Requiring that the feerate always\n-            // be increased is also an easy-to-reason about way to prevent\n-            // DoS attacks via replacements.\n-            //\n-            // We only consider the feerates of transactions being directly\n-            // replaced, not their indirect descendants. While that does\n-            // mean high feerate children are ignored when deciding whether\n-            // or not to replace, we do require the replacement to pay more\n-            // overall fees too, mitigating most cases.\n-            CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());\n-            if (newFeeRate <= oldFeeRate)\n-            {\n-                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n-                        strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n-                            hash.ToString(),\n-                            newFeeRate.ToString(),\n-                            oldFeeRate.ToString()));\n-            }\n-\n-            for (const CTxIn &txin : mi->GetTx().vin)\n-            {\n-                setConflictsParents.insert(txin.prevout.hash);\n-            }\n-\n-            nConflictingCount += mi->GetCountWithDescendants();\n-        }\n-        // This potentially overestimates the number of actual descendants\n-        // but we just want to be conservative to avoid doing too much\n-        // work.\n-        if (nConflictingCount <= maxDescendantsToVisit) {\n-            // If not too many to replace, then calculate the set of\n-            // transactions that would have to be evicted\n-            for (CTxMemPool::txiter it : setIterConflicting) {\n-                m_pool.CalculateDescendants(it, allConflicting);\n-            }\n-            for (CTxMemPool::txiter it : allConflicting) {\n-                nConflictingFees += it->GetModifiedFee();\n-                nConflictingSize += it->GetTxSize();\n-            }\n-        } else {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\",\n-                    strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                        hash.ToString(),\n-                        nConflictingCount,\n-                        maxDescendantsToVisit));\n-        }\n-\n-        for (unsigned int j = 0; j < tx.vin.size(); j++)\n-        {\n-            // We don't want to accept replacements that require low\n-            // feerate junk to be mined first. Ideally we'd keep track of\n-            // the ancestor feerates and make the decision based on that,\n-            // but for now requiring all new inputs to be confirmed works.\n-            //\n-            // Note that if you relax this to make RBF a little more useful,\n-            // this may break the CalculateMempoolAncestors RBF relaxation,\n-            // above. See the comment above the first CalculateMempoolAncestors\n-            // call for more info.\n-            if (!setConflictsParents.count(tx.vin[j].prevout.hash))\n-            {\n-                // Rather than check the UTXO set - potentially expensive -\n-                // it's cheaper to just check if the new input refers to a\n-                // tx that's in the mempool.\n-                if (m_pool.exists(tx.vin[j].prevout.hash)) {\n-                    return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"replacement-adds-unconfirmed\",\n-                            strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n-                                hash.ToString(), j));\n-                }\n-            }\n-        }\n+        if (!PaysMoreThanConflicts(setIterConflicting, newFeeRate, state, hash)) return false;\n \n-        // The replacement must pay greater fees than the transactions it\n-        // replaces - if we did the bandwidth used by those conflicting\n-        // transactions would not be paid for.\n-        if (nModifiedFees < nConflictingFees)\n-        {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n-                    strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n-                        hash.ToString(), FormatMoney(nModifiedFees), FormatMoney(nConflictingFees)));\n-        }\n+        // Calculate all conflicting entries and enforce Rules 2 and 5.\n+        if (!GetEntriesForRBF(tx, m_pool, setIterConflicting, state, allConflicting)) return false;\n+        if (!HasNoNewUnconfirmed(tx, m_pool, setIterConflicting, state)) return false;",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 161,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Split this comment up:\r\n\r\n```suggestion\r\n        // Calculate all conflicting entries and enforce BIP125 rule 5.\r\n        if (!GetEntriesForRBF(tx, m_pool, setIterConflicting, state, allConflicting)) return false;\r\n        // Enforce BIP125 rule 2.\r\n        if (!HasNoNewUnconfirmed(tx, m_pool, setIterConflicting, state)) return false;\r\n```\r\n\r\n(The comment is added in 28e7da0363 _MOVEONLY: getting mempool conflicts to policy/rbf_, which is a bit confusing since it implies that `GetEntriesForRBF()` enforces rule 2)",
    "created_at": "2021-08-20T12:19:56Z",
    "updated_at": "2021-08-20T13:17:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692901343",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692901343"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692901343"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692901343/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 776,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 778,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692903895",
    "pull_request_review_id": 734897366,
    "id": 692903895,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjkwMzg5NQ==",
    "diff_hunk": "@@ -2,14 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <consensus/validation.h>\n+#include <logging.h>",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You don't actually need `logging.h`. You could just include `tinyformat.h`.",
    "created_at": "2021-08-20T12:24:26Z",
    "updated_at": "2021-08-20T13:17:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692903895",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692903895"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692903895"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692903895/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 6,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692905894",
    "pull_request_review_id": 734897366,
    "id": 692905894,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjkwNTg5NA==",
    "diff_hunk": "@@ -31,4 +36,51 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule 5 and quit as early as\n+ * possible. There cannot be more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  state               Used to return errors, if any.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n+ *                                  the start; any existing mempool entries will remain in the set.",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 22,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This seems like an odd detail to specify in the interface, when this function is only ever called with an empty `all_conflicts` set.",
    "created_at": "2021-08-20T12:27:52Z",
    "updated_at": "2021-08-20T13:17:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692905894",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692905894"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692905894"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692905894/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 44,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 45,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692908052",
    "pull_request_review_id": 734897366,
    "id": 692908052,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjkwODA1Mg==",
    "diff_hunk": "@@ -31,4 +36,51 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule 5 and quit as early as\n+ * possible. There cannot be more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  state               Used to return errors, if any.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n+ *                                  the start; any existing mempool entries will remain in the set.\n+ * @returns false if Rule 5 is broken.\n+ */\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 25,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Perhaps this should be named `GetEntriesForRBFConflicts()` or similar?",
    "created_at": "2021-08-20T12:31:25Z",
    "updated_at": "2021-08-20T13:17:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692908052",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692908052"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692908052"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692908052/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 48,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692909522",
    "pull_request_review_id": 734897366,
    "id": 692909522,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjkwOTUyMg==",
    "diff_hunk": "@@ -42,3 +46,133 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     // If we don't have a local mempool we can only check the transaction itself.\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n+\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting,\n+                      TxValidationState& state, CTxMemPool::setEntries& all_conflicts)\n+{\n+    AssertLockHeld(pool.cs);\n+    const uint256 hash = tx.GetHash();\n+    uint64_t nConflictingCount = 0;\n+    for (const auto& mi : iters_conflicting) {\n+        nConflictingCount += mi->GetCountWithDescendants();\n+        // This potentially overestimates the number of actual descendants but we just want to be\n+        // conservative to avoid doing too much work.\n+        if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\",\n+                strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n+                          hash.ToString(),\n+                          nConflictingCount,\n+                          MAX_BIP125_REPLACEMENT_CANDIDATES));\n+        }\n+    }\n+    // If not too many to replace, then calculate the set of\n+    // transactions that would have to be evicted\n+    for (CTxMemPool::txiter it : iters_conflicting) {\n+        pool.CalculateDescendants(it, all_conflicts);\n+    }\n+    return true;\n+}\n+\n+bool HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                         const CTxMemPool::setEntries& iters_conflicting,\n+                         TxValidationState& state)\n+{\n+    AssertLockHeld(pool.cs);\n+    std::set<uint256> parents_of_conflicts;\n+    for (const auto& mi : iters_conflicting) {\n+        for (const CTxIn &txin : mi->GetTx().vin) {\n+            parents_of_conflicts.insert(txin.prevout.hash);\n+        }\n+    }\n+\n+    for (unsigned int j = 0; j < tx.vin.size(); j++)\n+    {",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 77,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In fixup commit:\r\n\r\n```suggestion\r\n    for (unsigned int j = 0; j < tx.vin.size(); j++) {\r\n```",
    "created_at": "2021-08-20T12:33:50Z",
    "updated_at": "2021-08-20T13:17:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692909522",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692909522"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692909522"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692909522/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 89,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 94,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692912024",
    "pull_request_review_id": 734897366,
    "id": 692912024,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjkxMjAyNA==",
    "diff_hunk": "@@ -31,4 +36,51 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule 5 and quit as early as\n+ * possible. There cannot be more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  state               Used to return errors, if any.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n+ *                                  the start; any existing mempool entries will remain in the set.\n+ * @returns false if Rule 5 is broken.\n+ */\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting, TxValidationState& state,\n+                      CTxMemPool::setEntries& all_conflicts) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Enforce BIP125 Rule 2: a replacement transaction must not add any new unconfirmed inputs. */\n+bool HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                         const CTxMemPool::setEntries& iters_conflicting,\n+                         TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Check the intersection between two sets of mempool entries to make sure they are disjoint.\n+ * @param[in]   ancestors           Set of mempool entries corresponding to ancestors of the\n+ *                                  replacement transactions.\n+ * @param[in]   direct_conflicts    Set of mempool entries corresponding to the mempool conflicts\n+ *                                  (candidates to be replaced).",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 38,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "These are txids, not mempool entries:\r\n\r\n```suggestion\r\n * @param[in]   direct_conflicts    Set of txids for entries corresponding to the mempool conflicts\r\n *                                  (candidates to be replaced).\r\n```\r\n\r\nThis comment uses the wrong argument name in commit 4f656bb23c _MOVEONLY: check for disjoint conflicts and ancestors to policy/rbf_ (fixed in later commit)",
    "created_at": "2021-08-20T12:37:58Z",
    "updated_at": "2021-08-20T13:17:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692912024",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692912024"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692912024"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692912024/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 60,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 65,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692912546",
    "pull_request_review_id": 734897366,
    "id": 692912546,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjkxMjU0Ng==",
    "diff_hunk": "@@ -31,4 +36,51 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule 5 and quit as early as\n+ * possible. There cannot be more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  state               Used to return errors, if any.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n+ *                                  the start; any existing mempool entries will remain in the set.\n+ * @returns false if Rule 5 is broken.\n+ */\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting, TxValidationState& state,\n+                      CTxMemPool::setEntries& all_conflicts) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Enforce BIP125 Rule 2: a replacement transaction must not add any new unconfirmed inputs. */\n+bool HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                         const CTxMemPool::setEntries& iters_conflicting,\n+                         TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Check the intersection between two sets of mempool entries to make sure they are disjoint.\n+ * @param[in]   ancestors           Set of mempool entries corresponding to ancestors of the\n+ *                                  replacement transactions.\n+ * @param[in]   direct_conflicts    Set of mempool entries corresponding to the mempool conflicts\n+ *                                  (candidates to be replaced).\n+ * @param[in]   hash                Transaction ID, included in the error message if violation occurs.\n+ * returns true if the two sets are disjoint (i.e. intersection is empty), false if otherwise.\n+ */\n+bool SpendsAndConflictsDisjoint(const CTxMemPool::setEntries& ancestors,",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 42,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I agree that `txid` would be better than `hash` here (and for `PaysMoreThanConflicts()` below).",
    "created_at": "2021-08-20T12:38:50Z",
    "updated_at": "2021-08-20T13:17:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692912546",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692912546"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692912546"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692912546/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 68,
    "side": "RIGHT",
    "in_reply_to_id": 691695502
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692912827",
    "pull_request_review_id": 734897366,
    "id": 692912827,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjkxMjgyNw==",
    "diff_hunk": "@@ -31,4 +36,51 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule 5 and quit as early as\n+ * possible. There cannot be more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  state               Used to return errors, if any.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n+ *                                  the start; any existing mempool entries will remain in the set.\n+ * @returns false if Rule 5 is broken.\n+ */\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting, TxValidationState& state,\n+                      CTxMemPool::setEntries& all_conflicts) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Enforce BIP125 Rule 2: a replacement transaction must not add any new unconfirmed inputs. */\n+bool HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                         const CTxMemPool::setEntries& iters_conflicting,\n+                         TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Check the intersection between two sets of mempool entries to make sure they are disjoint.",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 34,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "As below, the second argument isn't mempool entries.",
    "created_at": "2021-08-20T12:39:21Z",
    "updated_at": "2021-08-20T13:17:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692912827",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692912827"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692912827"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692912827/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 60,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692915252",
    "pull_request_review_id": 734897366,
    "id": 692915252,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjkxNTI1Mg==",
    "diff_hunk": "@@ -42,3 +46,133 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     // If we don't have a local mempool we can only check the transaction itself.\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n+\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting,\n+                      TxValidationState& state, CTxMemPool::setEntries& all_conflicts)\n+{\n+    AssertLockHeld(pool.cs);\n+    const uint256 hash = tx.GetHash();\n+    uint64_t nConflictingCount = 0;\n+    for (const auto& mi : iters_conflicting) {\n+        nConflictingCount += mi->GetCountWithDescendants();\n+        // This potentially overestimates the number of actual descendants but we just want to be\n+        // conservative to avoid doing too much work.\n+        if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\",\n+                strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n+                          hash.ToString(),\n+                          nConflictingCount,\n+                          MAX_BIP125_REPLACEMENT_CANDIDATES));\n+        }\n+    }\n+    // If not too many to replace, then calculate the set of\n+    // transactions that would have to be evicted\n+    for (CTxMemPool::txiter it : iters_conflicting) {\n+        pool.CalculateDescendants(it, all_conflicts);\n+    }\n+    return true;\n+}\n+\n+bool HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                         const CTxMemPool::setEntries& iters_conflicting,\n+                         TxValidationState& state)\n+{\n+    AssertLockHeld(pool.cs);\n+    std::set<uint256> parents_of_conflicts;\n+    for (const auto& mi : iters_conflicting) {\n+        for (const CTxIn &txin : mi->GetTx().vin) {\n+            parents_of_conflicts.insert(txin.prevout.hash);\n+        }\n+    }\n+\n+    for (unsigned int j = 0; j < tx.vin.size(); j++)\n+    {\n+        // We don't want to accept replacements that require low feerate junk to be mined first.\n+        // Ideally we'd keep track of the ancestor feerates and make the decision based on that, but\n+        // for now requiring all new inputs to be confirmed works.\n+        //\n+        // Note that if you relax this to make RBF a little more useful, this may break the\n+        // CalculateMempoolAncestors RBF relaxation, above. See the comment above the first\n+        // CalculateMempoolAncestors call for more info.\n+        if (!parents_of_conflicts.count(tx.vin[j].prevout.hash)) {\n+            // Rather than check the UTXO set - potentially expensive - it's cheaper to just check\n+            // if the new input refers to a tx that's in the mempool.\n+            if (pool.exists(tx.vin[j].prevout.hash)) {\n+                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"replacement-adds-unconfirmed\",\n+                    strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n+                              tx.GetHash().ToString(),\n+                              j));\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n+bool SpendsAndConflictsDisjoint(const CTxMemPool::setEntries& ancestors,\n+                                const std::set<uint256>& direct_conflicts,\n+                                TxValidationState& state, const uint256& hash)\n+{\n+    for (CTxMemPool::txiter ancestorIt : ancestors) {\n+        const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n+        if (direct_conflicts.count(hashAncestor)) {\n+            return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\",",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 106,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe worth adding a comment here that this is a consensus rule violation since the transaction is self-inconsistent, and can never be valid.",
    "created_at": "2021-08-20T12:43:05Z",
    "updated_at": "2021-08-20T13:17:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692915252",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692915252"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692915252"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692915252/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 119,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692925516",
    "pull_request_review_id": 734897366,
    "id": 692925516,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjkyNTUxNg==",
    "diff_hunk": "@@ -42,3 +46,133 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     // If we don't have a local mempool we can only check the transaction itself.\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n+\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting,\n+                      TxValidationState& state, CTxMemPool::setEntries& all_conflicts)\n+{\n+    AssertLockHeld(pool.cs);\n+    const uint256 hash = tx.GetHash();\n+    uint64_t nConflictingCount = 0;\n+    for (const auto& mi : iters_conflicting) {\n+        nConflictingCount += mi->GetCountWithDescendants();\n+        // This potentially overestimates the number of actual descendants but we just want to be\n+        // conservative to avoid doing too much work.\n+        if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\",\n+                strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n+                          hash.ToString(),\n+                          nConflictingCount,\n+                          MAX_BIP125_REPLACEMENT_CANDIDATES));\n+        }\n+    }\n+    // If not too many to replace, then calculate the set of\n+    // transactions that would have to be evicted\n+    for (CTxMemPool::txiter it : iters_conflicting) {\n+        pool.CalculateDescendants(it, all_conflicts);\n+    }\n+    return true;\n+}\n+\n+bool HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                         const CTxMemPool::setEntries& iters_conflicting,\n+                         TxValidationState& state)\n+{\n+    AssertLockHeld(pool.cs);\n+    std::set<uint256> parents_of_conflicts;\n+    for (const auto& mi : iters_conflicting) {\n+        for (const CTxIn &txin : mi->GetTx().vin) {\n+            parents_of_conflicts.insert(txin.prevout.hash);\n+        }\n+    }\n+\n+    for (unsigned int j = 0; j < tx.vin.size(); j++)\n+    {\n+        // We don't want to accept replacements that require low feerate junk to be mined first.\n+        // Ideally we'd keep track of the ancestor feerates and make the decision based on that, but\n+        // for now requiring all new inputs to be confirmed works.\n+        //\n+        // Note that if you relax this to make RBF a little more useful, this may break the\n+        // CalculateMempoolAncestors RBF relaxation, above. See the comment above the first\n+        // CalculateMempoolAncestors call for more info.\n+        if (!parents_of_conflicts.count(tx.vin[j].prevout.hash)) {\n+            // Rather than check the UTXO set - potentially expensive - it's cheaper to just check\n+            // if the new input refers to a tx that's in the mempool.\n+            if (pool.exists(tx.vin[j].prevout.hash)) {\n+                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"replacement-adds-unconfirmed\",\n+                    strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n+                              tx.GetHash().ToString(),\n+                              j));\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n+bool SpendsAndConflictsDisjoint(const CTxMemPool::setEntries& ancestors,\n+                                const std::set<uint256>& direct_conflicts,\n+                                TxValidationState& state, const uint256& hash)\n+{\n+    for (CTxMemPool::txiter ancestorIt : ancestors) {\n+        const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n+        if (direct_conflicts.count(hashAncestor)) {\n+            return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\",\n+                strprintf(\"%s spends conflicting transaction %s\",\n+                          hash.ToString(),\n+                          hashAncestor.ToString()));\n+        }\n+    }\n+    return true;\n+}\n+\n+bool PaysMoreThanConflicts(const CTxMemPool::setEntries& iters_conflicting, CFeeRate replacement_feerate,\n+                           TxValidationState& state, const uint256& hash)\n+{\n+    for (const auto& mi : iters_conflicting) {\n+        // Don't allow the replacement to reduce the feerate of the mempool.\n+        //\n+        // We usually don't want to accept replacements with lower feerates than what they replaced\n+        // as that would lower the feerate of the next block. Requiring that the feerate always be\n+        // increased is also an easy-to-reason about way to prevent DoS attacks via replacements.\n+        //\n+        // We only consider the feerates of transactions being directly replaced, not their indirect\n+        // descendants. While that does mean high feerate children are ignored when deciding whether\n+        // or not to replace, we do require the replacement to pay more overall fees too, mitigating\n+        // most cases.\n+        CFeeRate original_feerate(mi->GetModifiedFee(), mi->GetTxSize());\n+        if (replacement_feerate <= original_feerate) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n+                strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n+                          hash.ToString(),\n+                          replacement_feerate.ToString(),\n+                          original_feerate.ToString()));\n+        }\n+    }\n+    return true;\n+}\n+\n+bool PaysForRBF(CAmount original_fees, CAmount replacement_fees, size_t replacement_vsize,\n+                TxValidationState& state, const uint256& hash)\n+{\n+    // The replacement must pay greater fees than the transactions it replaces - if we did the",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 144,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe explicitly mention BIP125 rule 3 in this comment.",
    "created_at": "2021-08-20T12:58:43Z",
    "updated_at": "2021-08-20T13:17:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692925516",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692925516"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692925516"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692925516/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 157,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692926040",
    "pull_request_review_id": 734897366,
    "id": 692926040,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjkyNjA0MA==",
    "diff_hunk": "@@ -42,3 +46,133 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     // If we don't have a local mempool we can only check the transaction itself.\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n+\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting,\n+                      TxValidationState& state, CTxMemPool::setEntries& all_conflicts)\n+{\n+    AssertLockHeld(pool.cs);\n+    const uint256 hash = tx.GetHash();\n+    uint64_t nConflictingCount = 0;\n+    for (const auto& mi : iters_conflicting) {\n+        nConflictingCount += mi->GetCountWithDescendants();\n+        // This potentially overestimates the number of actual descendants but we just want to be\n+        // conservative to avoid doing too much work.\n+        if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\",\n+                strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n+                          hash.ToString(),\n+                          nConflictingCount,\n+                          MAX_BIP125_REPLACEMENT_CANDIDATES));\n+        }\n+    }\n+    // If not too many to replace, then calculate the set of\n+    // transactions that would have to be evicted\n+    for (CTxMemPool::txiter it : iters_conflicting) {\n+        pool.CalculateDescendants(it, all_conflicts);\n+    }\n+    return true;\n+}\n+\n+bool HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                         const CTxMemPool::setEntries& iters_conflicting,\n+                         TxValidationState& state)\n+{\n+    AssertLockHeld(pool.cs);\n+    std::set<uint256> parents_of_conflicts;\n+    for (const auto& mi : iters_conflicting) {\n+        for (const CTxIn &txin : mi->GetTx().vin) {\n+            parents_of_conflicts.insert(txin.prevout.hash);\n+        }\n+    }\n+\n+    for (unsigned int j = 0; j < tx.vin.size(); j++)\n+    {\n+        // We don't want to accept replacements that require low feerate junk to be mined first.\n+        // Ideally we'd keep track of the ancestor feerates and make the decision based on that, but\n+        // for now requiring all new inputs to be confirmed works.\n+        //\n+        // Note that if you relax this to make RBF a little more useful, this may break the\n+        // CalculateMempoolAncestors RBF relaxation, above. See the comment above the first\n+        // CalculateMempoolAncestors call for more info.\n+        if (!parents_of_conflicts.count(tx.vin[j].prevout.hash)) {\n+            // Rather than check the UTXO set - potentially expensive - it's cheaper to just check\n+            // if the new input refers to a tx that's in the mempool.\n+            if (pool.exists(tx.vin[j].prevout.hash)) {\n+                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"replacement-adds-unconfirmed\",\n+                    strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n+                              tx.GetHash().ToString(),\n+                              j));\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n+bool SpendsAndConflictsDisjoint(const CTxMemPool::setEntries& ancestors,\n+                                const std::set<uint256>& direct_conflicts,\n+                                TxValidationState& state, const uint256& hash)\n+{\n+    for (CTxMemPool::txiter ancestorIt : ancestors) {\n+        const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n+        if (direct_conflicts.count(hashAncestor)) {\n+            return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\",\n+                strprintf(\"%s spends conflicting transaction %s\",\n+                          hash.ToString(),\n+                          hashAncestor.ToString()));\n+        }\n+    }\n+    return true;\n+}\n+\n+bool PaysMoreThanConflicts(const CTxMemPool::setEntries& iters_conflicting, CFeeRate replacement_feerate,\n+                           TxValidationState& state, const uint256& hash)\n+{\n+    for (const auto& mi : iters_conflicting) {\n+        // Don't allow the replacement to reduce the feerate of the mempool.\n+        //\n+        // We usually don't want to accept replacements with lower feerates than what they replaced\n+        // as that would lower the feerate of the next block. Requiring that the feerate always be\n+        // increased is also an easy-to-reason about way to prevent DoS attacks via replacements.\n+        //\n+        // We only consider the feerates of transactions being directly replaced, not their indirect\n+        // descendants. While that does mean high feerate children are ignored when deciding whether\n+        // or not to replace, we do require the replacement to pay more overall fees too, mitigating\n+        // most cases.\n+        CFeeRate original_feerate(mi->GetModifiedFee(), mi->GetTxSize());\n+        if (replacement_feerate <= original_feerate) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n+                strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n+                          hash.ToString(),\n+                          replacement_feerate.ToString(),\n+                          original_feerate.ToString()));\n+        }\n+    }\n+    return true;\n+}\n+\n+bool PaysForRBF(CAmount original_fees, CAmount replacement_fees, size_t replacement_vsize,\n+                TxValidationState& state, const uint256& hash)\n+{\n+    // The replacement must pay greater fees than the transactions it replaces - if we did the\n+    // bandwidth used by those conflicting transactions would not be paid for.\n+    if (replacement_fees < original_fees) {\n+        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n+            strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n+                      hash.ToString(),\n+                      FormatMoney(replacement_fees),\n+                      FormatMoney(original_fees)));\n+    }\n+\n+    // Finally in addition to paying more fees than the conflicts the new transaction must pay for",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 154,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe explicitly mention BIP125 rule 4 in this comment. Also remove \"Finally\" - I guess that was there before because this was the final check in `PreChecks()`.",
    "created_at": "2021-08-20T12:59:31Z",
    "updated_at": "2021-08-20T13:17:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692926040",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692926040"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692926040"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692926040/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 167,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692928092",
    "pull_request_review_id": 734897366,
    "id": 692928092,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjkyODA5Mg==",
    "diff_hunk": "@@ -42,3 +46,133 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     // If we don't have a local mempool we can only check the transaction itself.\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n+\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting,\n+                      TxValidationState& state, CTxMemPool::setEntries& all_conflicts)\n+{\n+    AssertLockHeld(pool.cs);\n+    const uint256 hash = tx.GetHash();\n+    uint64_t nConflictingCount = 0;\n+    for (const auto& mi : iters_conflicting) {\n+        nConflictingCount += mi->GetCountWithDescendants();\n+        // This potentially overestimates the number of actual descendants but we just want to be\n+        // conservative to avoid doing too much work.\n+        if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\",\n+                strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n+                          hash.ToString(),\n+                          nConflictingCount,\n+                          MAX_BIP125_REPLACEMENT_CANDIDATES));\n+        }\n+    }\n+    // If not too many to replace, then calculate the set of\n+    // transactions that would have to be evicted\n+    for (CTxMemPool::txiter it : iters_conflicting) {\n+        pool.CalculateDescendants(it, all_conflicts);\n+    }\n+    return true;\n+}\n+\n+bool HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                         const CTxMemPool::setEntries& iters_conflicting,\n+                         TxValidationState& state)\n+{\n+    AssertLockHeld(pool.cs);\n+    std::set<uint256> parents_of_conflicts;\n+    for (const auto& mi : iters_conflicting) {\n+        for (const CTxIn &txin : mi->GetTx().vin) {\n+            parents_of_conflicts.insert(txin.prevout.hash);\n+        }\n+    }\n+\n+    for (unsigned int j = 0; j < tx.vin.size(); j++)\n+    {\n+        // We don't want to accept replacements that require low feerate junk to be mined first.\n+        // Ideally we'd keep track of the ancestor feerates and make the decision based on that, but\n+        // for now requiring all new inputs to be confirmed works.",
    "path": "src/policy/rbf.cpp",
    "position": 86,
    "original_position": 80,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe explicitly mention that this is BIP125 rule 2.",
    "created_at": "2021-08-20T13:02:30Z",
    "updated_at": "2021-08-20T13:17:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692928092",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692928092"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692928092"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692928092/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 91,
    "original_start_line": 92,
    "start_side": "RIGHT",
    "line": 92,
    "original_line": 92,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692928855",
    "pull_request_review_id": 734897366,
    "id": 692928855,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjkyODg1NQ==",
    "diff_hunk": "@@ -15,3 +15,26 @@ bool SignalsOptInRBF(const CTransaction &tx)\n     }\n     return false;\n }\n+\n+bool IsRBFOptOut(const CTransaction& txConflicting)\n+{\n+    // Allow opt-out of transaction replacement by setting\n+    // nSequence > MAX_BIP125_RBF_SEQUENCE (SEQUENCE_FINAL-2) on all inputs.",
    "path": "src/util/rbf.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe explicitly comment that this is BIP125 rule 1.",
    "created_at": "2021-08-20T13:03:39Z",
    "updated_at": "2021-08-20T13:17:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692928855",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692928855"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692928855"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692928855/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 21,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 22,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692929833",
    "pull_request_review_id": 734897366,
    "id": 692929833,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjkyOTgzMw==",
    "diff_hunk": "@@ -42,3 +46,133 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     // If we don't have a local mempool we can only check the transaction itself.\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n+\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting,\n+                      TxValidationState& state, CTxMemPool::setEntries& all_conflicts)\n+{\n+    AssertLockHeld(pool.cs);\n+    const uint256 hash = tx.GetHash();\n+    uint64_t nConflictingCount = 0;\n+    for (const auto& mi : iters_conflicting) {\n+        nConflictingCount += mi->GetCountWithDescendants();\n+        // This potentially overestimates the number of actual descendants but we just want to be\n+        // conservative to avoid doing too much work.\n+        if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\",",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 49,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe explicitly comment that this is BIP125 rule 5.",
    "created_at": "2021-08-20T13:05:04Z",
    "updated_at": "2021-08-20T13:17:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692929833",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692929833"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692929833"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692929833/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 62,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692937815",
    "pull_request_review_id": 734897366,
    "id": 692937815,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MjkzNzgxNQ==",
    "diff_hunk": "@@ -15,4 +15,7 @@ static const uint32_t MAX_BIP125_RBF_SEQUENCE = 0xfffffffd;\n // opt-in to replace-by-fee, according to BIP 125\n bool SignalsOptInRBF(const CTransaction &tx);\n \n+/** Determine whether a mempool transaction is opting out of RBF. Mempool entries do not inherit\n+ * signaling from their parents in this implementation. */\n+bool IsRBFOptOut(const CTransaction& txConflicting);",
    "path": "src/util/rbf.h",
    "position": null,
    "original_position": 6,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Since you're changing the parameter name already, consider:\r\n\r\n```suggestion\r\nbool IsRBFOptOut(const CTransaction& tx);\r\n```",
    "created_at": "2021-08-20T13:16:32Z",
    "updated_at": "2021-08-20T13:17:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692937815",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692937815"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692937815"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692937815/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 20,
    "side": "RIGHT",
    "in_reply_to_id": 691672020
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692991925",
    "pull_request_review_id": 735089756,
    "id": 692991925,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Mjk5MTkyNQ==",
    "diff_hunk": "@@ -31,4 +36,51 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule 5 and quit as early as\n+ * possible. There cannot be more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  state               Used to return errors, if any.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n+ *                                  the start; any existing mempool entries will remain in the set.",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 22,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "![image](https://user-images.githubusercontent.com/25183001/130248786-e8c84e2f-4932-4605-b372-fb5c9edb4976.png)\r\n",
    "created_at": "2021-08-20T14:28:49Z",
    "updated_at": "2021-08-20T14:28:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692991925",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692991925"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692991925"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692991925/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "start_line": null,
    "original_start_line": 44,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 45,
    "side": "RIGHT",
    "in_reply_to_id": 692905894
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692993619",
    "pull_request_review_id": 735091992,
    "id": 692993619,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Mjk5MzYxOQ==",
    "diff_hunk": "@@ -31,4 +36,51 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule 5 and quit as early as\n+ * possible. There cannot be more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  state               Used to return errors, if any.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n+ *                                  the start; any existing mempool entries will remain in the set.",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 22,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "https://github.com/bitcoin/bitcoin/pull/22290/commits/6c04bf5a60e2af86c326c4e65aba777d8bf768bb#diff-97c3a52bc5fad452d82670a7fd291800bae20c7bc35bb82686c2c0a4ea7b5b98R970-R972",
    "created_at": "2021-08-20T14:31:03Z",
    "updated_at": "2021-08-20T14:31:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692993619",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692993619"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692993619"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/692993619/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 44,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 45,
    "side": "RIGHT",
    "in_reply_to_id": 692905894
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693095550",
    "pull_request_review_id": 735226667,
    "id": 693095550,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzA5NTU1MA==",
    "diff_hunk": "@@ -15,6 +15,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"index/base -> validation -> index/blockfilterindex -> index/base\"\n     \"index/coinstatsindex -> node/coinstats -> index/coinstatsindex\"\n     \"policy/fees -> txmempool -> policy/fees\"\n+    \"policy/rbf -> txmempool -> validation -> policy/rbf\"",
    "path": "test/lint/lint-circular-dependencies.sh",
    "position": null,
    "original_position": 4,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Okie done",
    "created_at": "2021-08-20T17:05:43Z",
    "updated_at": "2021-08-20T17:05:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693095550",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693095550"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693095550"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693095550/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 18,
    "side": "RIGHT",
    "in_reply_to_id": 689596026
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693095821",
    "pull_request_review_id": 735227046,
    "id": 693095821,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzA5NTgyMQ==",
    "diff_hunk": "@@ -15,4 +15,7 @@ static const uint32_t MAX_BIP125_RBF_SEQUENCE = 0xfffffffd;\n // opt-in to replace-by-fee, according to BIP 125\n bool SignalsOptInRBF(const CTransaction &tx);\n \n+/** Determine whether a mempool transaction is opting out of RBF. Mempool entries do not inherit\n+ * signaling from their parents in this implementation. */\n+bool IsRBFOptOut(const CTransaction& txConflicting);",
    "path": "src/util/rbf.h",
    "position": null,
    "original_position": 6,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Deleted this, ended up just calling `SignalsOptInRBF` instead",
    "created_at": "2021-08-20T17:06:11Z",
    "updated_at": "2021-08-20T17:06:11Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693095821",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693095821"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693095821"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693095821/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 20,
    "side": "RIGHT",
    "in_reply_to_id": 691672020
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693096304",
    "pull_request_review_id": 735227642,
    "id": 693096304,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzA5NjMwNA==",
    "diff_hunk": "@@ -15,3 +15,26 @@ bool SignalsOptInRBF(const CTransaction &tx)\n     }\n     return false;\n }\n+\n+bool IsRBFOptOut(const CTransaction& txConflicting)\n+{\n+    // Allow opt-out of transaction replacement by setting\n+    // nSequence > MAX_BIP125_RBF_SEQUENCE (SEQUENCE_FINAL-2) on all inputs.\n+    //\n+    // SEQUENCE_FINAL-1 is picked to still allow use of nLockTime by\n+    // non-replaceable transactions. All inputs rather than just one\n+    // is for the sake of multi-party protocols, where we don't\n+    // want a single party to be able to disable replacement.\n+    //\n+    // Transactions that don't explicitly signal replaceability are\n+    // *not* replaceable with the current logic, even if one of their\n+    // unconfirmed ancestors signals replaceability. This diverges\n+    // from BIP125's inherited signaling description (see CVE-2021-31876).\n+    // Applications relying on first-seen mempool behavior should\n+    // check all unconfirmed ancestors; otherwise an opt-in ancestor\n+    // might be replaced, causing removal of this descendant.\n+    for (const CTxIn &_txin : txConflicting.vin) {\n+        if (_txin.nSequence <= MAX_BIP125_RBF_SEQUENCE) return false;",
    "path": "src/util/rbf.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "(Doesn't apply anymore because I deleted the function)",
    "created_at": "2021-08-20T17:07:00Z",
    "updated_at": "2021-08-20T17:07:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693096304",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693096304"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693096304"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693096304/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 36,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 37,
    "side": "RIGHT",
    "in_reply_to_id": 692846284
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693096529",
    "pull_request_review_id": 735227921,
    "id": 693096529,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzA5NjUyOQ==",
    "diff_hunk": "@@ -784,23 +761,8 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // that we have the set of all ancestors we can detect this\n     // pathological case by making sure setConflicts and setAncestors don't\n     // intersect.\n-    for (CTxMemPool::txiter ancestorIt : setAncestors)\n-    {\n-        const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n-        if (setConflicts.count(hashAncestor))\n-        {\n-            return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\",\n-                    strprintf(\"%s spends conflicting transaction %s\",\n-                        hash.ToString(),\n-                        hashAncestor.ToString()));\n-        }\n-    }\n+    if (!SpendsAndConflictsDisjoint(setAncestors, setConflicts, state, hash)) return false;\n \n-    // Check if it's economically rational to mine this transaction rather\n-    // than the ones it replaces.\n-    nConflictingFees = 0;\n-    nConflictingSize = 0;",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 61,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-08-20T17:07:24Z",
    "updated_at": "2021-08-20T17:07:24Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693096529",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693096529"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693096529"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693096529/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 801,
    "start_side": "LEFT",
    "line": null,
    "original_line": 802,
    "side": "LEFT",
    "in_reply_to_id": 692891251
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693097179",
    "pull_request_review_id": 735228741,
    "id": 693097179,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzA5NzE3OQ==",
    "diff_hunk": "@@ -6,6 +6,11 @@\n #define BITCOIN_POLICY_RBF_H\n \n #include <txmempool.h>\n+#include <consensus/validation.h>",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 4,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Actually decided to remove this dependency because I realized it's not the right place to be deciding what `TxValidationResult` to return (should be in validation.cpp)\r\nBut yes, sorted includes :salute:",
    "created_at": "2021-08-20T17:08:32Z",
    "updated_at": "2021-08-20T17:08:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693097179",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693097179"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693097179"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693097179/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 9,
    "side": "RIGHT",
    "in_reply_to_id": 692892064
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693097385",
    "pull_request_review_id": 735229033,
    "id": 693097385,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzA5NzM4NQ==",
    "diff_hunk": "@@ -809,106 +771,21 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     if (fReplacementTransaction)\n     {\n         CFeeRate newFeeRate(nModifiedFees, nSize);\n-        std::set<uint256> setConflictsParents;\n-        const int maxDescendantsToVisit = 100;\n-        for (const auto& mi : setIterConflicting) {\n-            // Don't allow the replacement to reduce the feerate of the\n-            // mempool.\n-            //\n-            // We usually don't want to accept replacements with lower\n-            // feerates than what they replaced as that would lower the\n-            // feerate of the next block. Requiring that the feerate always\n-            // be increased is also an easy-to-reason about way to prevent\n-            // DoS attacks via replacements.\n-            //\n-            // We only consider the feerates of transactions being directly\n-            // replaced, not their indirect descendants. While that does\n-            // mean high feerate children are ignored when deciding whether\n-            // or not to replace, we do require the replacement to pay more\n-            // overall fees too, mitigating most cases.\n-            CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());\n-            if (newFeeRate <= oldFeeRate)\n-            {\n-                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n-                        strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n-                            hash.ToString(),\n-                            newFeeRate.ToString(),\n-                            oldFeeRate.ToString()));\n-            }\n-\n-            for (const CTxIn &txin : mi->GetTx().vin)\n-            {\n-                setConflictsParents.insert(txin.prevout.hash);\n-            }\n-\n-            nConflictingCount += mi->GetCountWithDescendants();\n-        }\n-        // This potentially overestimates the number of actual descendants\n-        // but we just want to be conservative to avoid doing too much\n-        // work.\n-        if (nConflictingCount <= maxDescendantsToVisit) {\n-            // If not too many to replace, then calculate the set of\n-            // transactions that would have to be evicted\n-            for (CTxMemPool::txiter it : setIterConflicting) {\n-                m_pool.CalculateDescendants(it, allConflicting);\n-            }\n-            for (CTxMemPool::txiter it : allConflicting) {\n-                nConflictingFees += it->GetModifiedFee();\n-                nConflictingSize += it->GetTxSize();\n-            }\n-        } else {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\",\n-                    strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                        hash.ToString(),\n-                        nConflictingCount,\n-                        maxDescendantsToVisit));\n-        }\n-\n-        for (unsigned int j = 0; j < tx.vin.size(); j++)\n-        {\n-            // We don't want to accept replacements that require low\n-            // feerate junk to be mined first. Ideally we'd keep track of\n-            // the ancestor feerates and make the decision based on that,\n-            // but for now requiring all new inputs to be confirmed works.\n-            //\n-            // Note that if you relax this to make RBF a little more useful,\n-            // this may break the CalculateMempoolAncestors RBF relaxation,\n-            // above. See the comment above the first CalculateMempoolAncestors\n-            // call for more info.\n-            if (!setConflictsParents.count(tx.vin[j].prevout.hash))\n-            {\n-                // Rather than check the UTXO set - potentially expensive -\n-                // it's cheaper to just check if the new input refers to a\n-                // tx that's in the mempool.\n-                if (m_pool.exists(tx.vin[j].prevout.hash)) {\n-                    return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"replacement-adds-unconfirmed\",\n-                            strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n-                                hash.ToString(), j));\n-                }\n-            }\n-        }\n+        if (!PaysMoreThanConflicts(setIterConflicting, newFeeRate, state, hash)) return false;\n \n-        // The replacement must pay greater fees than the transactions it\n-        // replaces - if we did the bandwidth used by those conflicting\n-        // transactions would not be paid for.\n-        if (nModifiedFees < nConflictingFees)\n-        {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n-                    strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n-                        hash.ToString(), FormatMoney(nModifiedFees), FormatMoney(nConflictingFees)));\n-        }\n+        // Calculate all conflicting entries and enforce Rules 2 and 5.\n+        if (!GetEntriesForRBF(tx, m_pool, setIterConflicting, state, allConflicting)) return false;\n+        if (!HasNoNewUnconfirmed(tx, m_pool, setIterConflicting, state)) return false;",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 161,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done, good point",
    "created_at": "2021-08-20T17:08:56Z",
    "updated_at": "2021-08-20T17:08:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693097385",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693097385"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693097385"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693097385/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 776,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 778,
    "side": "RIGHT",
    "in_reply_to_id": 692901343
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693097509",
    "pull_request_review_id": 735229169,
    "id": 693097509,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzA5NzUwOQ==",
    "diff_hunk": "@@ -2,14 +2,18 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <consensus/validation.h>\n+#include <logging.h>",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Switched to tinyformat",
    "created_at": "2021-08-20T17:09:08Z",
    "updated_at": "2021-08-20T17:09:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693097509",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693097509"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693097509"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693097509/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 6,
    "side": "RIGHT",
    "in_reply_to_id": 692903895
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693100416",
    "pull_request_review_id": 735232922,
    "id": 693100416,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzEwMDQxNg==",
    "diff_hunk": "@@ -42,3 +46,133 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     // If we don't have a local mempool we can only check the transaction itself.\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n+\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting,\n+                      TxValidationState& state, CTxMemPool::setEntries& all_conflicts)\n+{\n+    AssertLockHeld(pool.cs);\n+    const uint256 hash = tx.GetHash();\n+    uint64_t nConflictingCount = 0;\n+    for (const auto& mi : iters_conflicting) {\n+        nConflictingCount += mi->GetCountWithDescendants();\n+        // This potentially overestimates the number of actual descendants but we just want to be\n+        // conservative to avoid doing too much work.\n+        if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\",\n+                strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n+                          hash.ToString(),\n+                          nConflictingCount,\n+                          MAX_BIP125_REPLACEMENT_CANDIDATES));\n+        }\n+    }\n+    // If not too many to replace, then calculate the set of\n+    // transactions that would have to be evicted\n+    for (CTxMemPool::txiter it : iters_conflicting) {\n+        pool.CalculateDescendants(it, all_conflicts);\n+    }\n+    return true;\n+}\n+\n+bool HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                         const CTxMemPool::setEntries& iters_conflicting,\n+                         TxValidationState& state)\n+{\n+    AssertLockHeld(pool.cs);\n+    std::set<uint256> parents_of_conflicts;\n+    for (const auto& mi : iters_conflicting) {\n+        for (const CTxIn &txin : mi->GetTx().vin) {\n+            parents_of_conflicts.insert(txin.prevout.hash);\n+        }\n+    }\n+\n+    for (unsigned int j = 0; j < tx.vin.size(); j++)\n+    {\n+        // We don't want to accept replacements that require low feerate junk to be mined first.\n+        // Ideally we'd keep track of the ancestor feerates and make the decision based on that, but\n+        // for now requiring all new inputs to be confirmed works.\n+        //\n+        // Note that if you relax this to make RBF a little more useful, this may break the\n+        // CalculateMempoolAncestors RBF relaxation, above. See the comment above the first\n+        // CalculateMempoolAncestors call for more info.\n+        if (!parents_of_conflicts.count(tx.vin[j].prevout.hash)) {\n+            // Rather than check the UTXO set - potentially expensive - it's cheaper to just check\n+            // if the new input refers to a tx that's in the mempool.\n+            if (pool.exists(tx.vin[j].prevout.hash)) {\n+                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"replacement-adds-unconfirmed\",\n+                    strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n+                              tx.GetHash().ToString(),\n+                              j));\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n+bool SpendsAndConflictsDisjoint(const CTxMemPool::setEntries& ancestors,\n+                                const std::set<uint256>& direct_conflicts,\n+                                TxValidationState& state, const uint256& hash)\n+{\n+    for (CTxMemPool::txiter ancestorIt : ancestors) {\n+        const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n+        if (direct_conflicts.count(hashAncestor)) {\n+            return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\",\n+                strprintf(\"%s spends conflicting transaction %s\",\n+                          hash.ToString(),\n+                          hashAncestor.ToString()));\n+        }\n+    }\n+    return true;\n+}\n+\n+bool PaysMoreThanConflicts(const CTxMemPool::setEntries& iters_conflicting, CFeeRate replacement_feerate,\n+                           TxValidationState& state, const uint256& hash)\n+{\n+    for (const auto& mi : iters_conflicting) {\n+        // Don't allow the replacement to reduce the feerate of the mempool.\n+        //\n+        // We usually don't want to accept replacements with lower feerates than what they replaced\n+        // as that would lower the feerate of the next block. Requiring that the feerate always be\n+        // increased is also an easy-to-reason about way to prevent DoS attacks via replacements.\n+        //\n+        // We only consider the feerates of transactions being directly replaced, not their indirect\n+        // descendants. While that does mean high feerate children are ignored when deciding whether\n+        // or not to replace, we do require the replacement to pay more overall fees too, mitigating\n+        // most cases.\n+        CFeeRate original_feerate(mi->GetModifiedFee(), mi->GetTxSize());\n+        if (replacement_feerate <= original_feerate) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n+                strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n+                          hash.ToString(),\n+                          replacement_feerate.ToString(),\n+                          original_feerate.ToString()));\n+        }\n+    }\n+    return true;\n+}\n+\n+bool PaysForRBF(CAmount original_fees, CAmount replacement_fees, size_t replacement_vsize,\n+                TxValidationState& state, const uint256& hash)\n+{\n+    // The replacement must pay greater fees than the transactions it replaces - if we did the",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 144,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Marked all of them with their corresponding BIP125 rule numbers :+1: ",
    "created_at": "2021-08-20T17:14:19Z",
    "updated_at": "2021-08-20T17:14:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693100416",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693100416"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693100416"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693100416/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 157,
    "side": "RIGHT",
    "in_reply_to_id": 692925516
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693100683",
    "pull_request_review_id": 735233249,
    "id": 693100683,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzEwMDY4Mw==",
    "diff_hunk": "@@ -42,3 +46,133 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     // If we don't have a local mempool we can only check the transaction itself.\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n+\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting,\n+                      TxValidationState& state, CTxMemPool::setEntries& all_conflicts)\n+{\n+    AssertLockHeld(pool.cs);\n+    const uint256 hash = tx.GetHash();\n+    uint64_t nConflictingCount = 0;\n+    for (const auto& mi : iters_conflicting) {\n+        nConflictingCount += mi->GetCountWithDescendants();\n+        // This potentially overestimates the number of actual descendants but we just want to be\n+        // conservative to avoid doing too much work.\n+        if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\",\n+                strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n+                          hash.ToString(),\n+                          nConflictingCount,\n+                          MAX_BIP125_REPLACEMENT_CANDIDATES));\n+        }\n+    }\n+    // If not too many to replace, then calculate the set of\n+    // transactions that would have to be evicted\n+    for (CTxMemPool::txiter it : iters_conflicting) {\n+        pool.CalculateDescendants(it, all_conflicts);\n+    }\n+    return true;\n+}\n+\n+bool HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                         const CTxMemPool::setEntries& iters_conflicting,\n+                         TxValidationState& state)\n+{\n+    AssertLockHeld(pool.cs);\n+    std::set<uint256> parents_of_conflicts;\n+    for (const auto& mi : iters_conflicting) {\n+        for (const CTxIn &txin : mi->GetTx().vin) {\n+            parents_of_conflicts.insert(txin.prevout.hash);\n+        }\n+    }\n+\n+    for (unsigned int j = 0; j < tx.vin.size(); j++)\n+    {\n+        // We don't want to accept replacements that require low feerate junk to be mined first.\n+        // Ideally we'd keep track of the ancestor feerates and make the decision based on that, but\n+        // for now requiring all new inputs to be confirmed works.\n+        //\n+        // Note that if you relax this to make RBF a little more useful, this may break the\n+        // CalculateMempoolAncestors RBF relaxation, above. See the comment above the first\n+        // CalculateMempoolAncestors call for more info.\n+        if (!parents_of_conflicts.count(tx.vin[j].prevout.hash)) {\n+            // Rather than check the UTXO set - potentially expensive - it's cheaper to just check\n+            // if the new input refers to a tx that's in the mempool.\n+            if (pool.exists(tx.vin[j].prevout.hash)) {\n+                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"replacement-adds-unconfirmed\",\n+                    strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n+                              tx.GetHash().ToString(),\n+                              j));\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n+bool SpendsAndConflictsDisjoint(const CTxMemPool::setEntries& ancestors,\n+                                const std::set<uint256>& direct_conflicts,\n+                                TxValidationState& state, const uint256& hash)\n+{\n+    for (CTxMemPool::txiter ancestorIt : ancestors) {\n+        const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n+        if (direct_conflicts.count(hashAncestor)) {\n+            return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\",",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 106,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "good eyes. added a comment",
    "created_at": "2021-08-20T17:14:44Z",
    "updated_at": "2021-08-20T17:14:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693100683",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693100683"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693100683"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693100683/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 119,
    "side": "RIGHT",
    "in_reply_to_id": 692915252
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693100874",
    "pull_request_review_id": 735233479,
    "id": 693100874,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzEwMDg3NA==",
    "diff_hunk": "@@ -31,4 +36,51 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule 5 and quit as early as\n+ * possible. There cannot be more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  state               Used to return errors, if any.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n+ *                                  the start; any existing mempool entries will remain in the set.\n+ * @returns false if Rule 5 is broken.\n+ */\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting, TxValidationState& state,\n+                      CTxMemPool::setEntries& all_conflicts) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Enforce BIP125 Rule 2: a replacement transaction must not add any new unconfirmed inputs. */\n+bool HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                         const CTxMemPool::setEntries& iters_conflicting,\n+                         TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Check the intersection between two sets of mempool entries to make sure they are disjoint.\n+ * @param[in]   ancestors           Set of mempool entries corresponding to ancestors of the\n+ *                                  replacement transactions.\n+ * @param[in]   direct_conflicts    Set of mempool entries corresponding to the mempool conflicts\n+ *                                  (candidates to be replaced).",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 38,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done and fixed the commit jumping",
    "created_at": "2021-08-20T17:15:01Z",
    "updated_at": "2021-08-20T17:15:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693100874",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693100874"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693100874"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693100874/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 60,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 65,
    "side": "RIGHT",
    "in_reply_to_id": 692912024
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693101024",
    "pull_request_review_id": 735233694,
    "id": 693101024,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzEwMTAyNA==",
    "diff_hunk": "@@ -31,4 +36,51 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule 5 and quit as early as\n+ * possible. There cannot be more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  state               Used to return errors, if any.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n+ *                                  the start; any existing mempool entries will remain in the set.\n+ * @returns false if Rule 5 is broken.\n+ */\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 25,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I named it `GetEntriesForConflicts()`",
    "created_at": "2021-08-20T17:15:18Z",
    "updated_at": "2021-08-20T17:15:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693101024",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693101024"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693101024"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693101024/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 48,
    "side": "RIGHT",
    "in_reply_to_id": 692908052
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693925667",
    "pull_request_review_id": 736058763,
    "id": 693925667,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzkyNTY2Nw==",
    "diff_hunk": "@@ -31,4 +36,51 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule 5 and quit as early as\n+ * possible. There cannot be more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  state               Used to return errors, if any.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n+ *                                  the start; any existing mempool entries will remain in the set.\n+ * @returns false if Rule 5 is broken.\n+ */\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting, TxValidationState& state,\n+                      CTxMemPool::setEntries& all_conflicts) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Enforce BIP125 Rule 2: a replacement transaction must not add any new unconfirmed inputs. */\n+bool HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                         const CTxMemPool::setEntries& iters_conflicting,\n+                         TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Check the intersection between two sets of mempool entries to make sure they are disjoint.\n+ * @param[in]   ancestors           Set of mempool entries corresponding to ancestors of the\n+ *                                  replacement transactions.\n+ * @param[in]   direct_conflicts    Set of mempool entries corresponding to the mempool conflicts\n+ *                                  (candidates to be replaced).\n+ * @param[in]   hash                Transaction ID, included in the error message if violation occurs.\n+ * returns true if the two sets are disjoint (i.e. intersection is empty), false if otherwise.\n+ */\n+bool SpendsAndConflictsDisjoint(const CTxMemPool::setEntries& ancestors,",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 42,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I didn't end up renaming `hash` to `txid` because I want to be able to pass in either package id or txid in the future :thinking: let me know if it's too weird though, and I can change it",
    "created_at": "2021-08-23T12:27:43Z",
    "updated_at": "2021-08-23T12:27:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693925667",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693925667"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693925667"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693925667/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 68,
    "side": "RIGHT",
    "in_reply_to_id": 691695502
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693926118",
    "pull_request_review_id": 736059365,
    "id": 693926118,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzkyNjExOA==",
    "diff_hunk": "@@ -31,4 +36,51 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule 5 and quit as early as\n+ * possible. There cannot be more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  state               Used to return errors, if any.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n+ *                                  the start; any existing mempool entries will remain in the set.\n+ * @returns false if Rule 5 is broken.\n+ */\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting, TxValidationState& state,\n+                      CTxMemPool::setEntries& all_conflicts) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Enforce BIP125 Rule 2: a replacement transaction must not add any new unconfirmed inputs. */",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 29,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Makes sense, quoted BIP125",
    "created_at": "2021-08-23T12:28:23Z",
    "updated_at": "2021-08-23T12:28:23Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693926118",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693926118"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693926118"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693926118/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 52,
    "side": "RIGHT",
    "in_reply_to_id": 691690916
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694020472",
    "pull_request_review_id": 736188540,
    "id": 694020472,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDAyMDQ3Mg==",
    "diff_hunk": "@@ -3,13 +3,17 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <policy/rbf.h>\n+\n+#include <policy/settings.h>\n+#include <util/moneystr.h>\n #include <util/rbf.h>\n+#include <tinyformat.h>",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "7d9fc8153cddec24e90f75662b37e4e46baa7469",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "sort plz",
    "created_at": "2021-08-23T14:24:38Z",
    "updated_at": "2021-08-23T15:07:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694020472",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694020472"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694020472"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694020472/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 10,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694045328",
    "pull_request_review_id": 736188540,
    "id": 694045328,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDA0NTMyOA==",
    "diff_hunk": "@@ -784,130 +770,45 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // that we have the set of all ancestors we can detect this\n     // pathological case by making sure setConflicts and setAncestors don't\n     // intersect.\n-    for (CTxMemPool::txiter ancestorIt : setAncestors)\n-    {\n-        const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n-        if (setConflicts.count(hashAncestor))\n-        {\n-            return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\",\n-                    strprintf(\"%s spends conflicting transaction %s\",\n-                        hash.ToString(),\n-                        hashAncestor.ToString()));\n-        }\n+    if (!SpendsAndConflictsDisjoint(setAncestors, setConflicts, hash, errString)) {\n+        // We classify this as a consensus error because a transaction depending on something it\n+        // conflicts with would be inconsistent.\n+        return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", errString);\n     }\n \n-    // Check if it's economically rational to mine this transaction rather\n-    // than the ones it replaces.\n-    nConflictingFees = 0;\n-    nConflictingSize = 0;\n-    uint64_t nConflictingCount = 0;\n \n-    // If we don't hold the lock allConflicting might be incomplete; the\n-    // subsequent RemoveStaged() and addUnchecked() calls don't guarantee\n-    // mempool consistency for us.\n     fReplacementTransaction = setConflicts.size();\n     if (fReplacementTransaction)\n     {\n+        std::string err_string;\n         CFeeRate newFeeRate(nModifiedFees, nSize);\n-        std::set<uint256> setConflictsParents;\n-        const int maxDescendantsToVisit = 100;\n-        for (const auto& mi : setIterConflicting) {\n-            // Don't allow the replacement to reduce the feerate of the\n-            // mempool.\n-            //\n-            // We usually don't want to accept replacements with lower\n-            // feerates than what they replaced as that would lower the\n-            // feerate of the next block. Requiring that the feerate always\n-            // be increased is also an easy-to-reason about way to prevent\n-            // DoS attacks via replacements.\n-            //\n-            // We only consider the feerates of transactions being directly\n-            // replaced, not their indirect descendants. While that does\n-            // mean high feerate children are ignored when deciding whether\n-            // or not to replace, we do require the replacement to pay more\n-            // overall fees too, mitigating most cases.\n-            CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());\n-            if (newFeeRate <= oldFeeRate)\n-            {\n-                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n-                        strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n-                            hash.ToString(),\n-                            newFeeRate.ToString(),\n-                            oldFeeRate.ToString()));\n-            }\n-\n-            for (const CTxIn &txin : mi->GetTx().vin)\n-            {\n-                setConflictsParents.insert(txin.prevout.hash);\n-            }\n-\n-            nConflictingCount += mi->GetCountWithDescendants();\n-        }\n-        // This potentially overestimates the number of actual descendants\n-        // but we just want to be conservative to avoid doing too much\n-        // work.\n-        if (nConflictingCount <= maxDescendantsToVisit) {\n-            // If not too many to replace, then calculate the set of\n-            // transactions that would have to be evicted\n-            for (CTxMemPool::txiter it : setIterConflicting) {\n-                m_pool.CalculateDescendants(it, allConflicting);\n-            }\n-            for (CTxMemPool::txiter it : allConflicting) {\n-                nConflictingFees += it->GetModifiedFee();\n-                nConflictingSize += it->GetTxSize();\n-            }\n-        } else {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\",\n-                    strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                        hash.ToString(),\n-                        nConflictingCount,\n-                        maxDescendantsToVisit));\n+        // It's possible that the replacement pays more fees than its direct conflicts but not more\n+        // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n+        // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n+        // more economically rational to mine. Before we go digging through the mempool for all\n+        // transactions that would need to be removed (direct conflicts and all descendants), check\n+        // that the replacement transaction pays more than its direct conflicts.\n+        if (!PaysMoreThanConflicts(setIterConflicting, newFeeRate, hash, err_string)) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", err_string);\n         }\n \n-        for (unsigned int j = 0; j < tx.vin.size(); j++)\n-        {\n-            // We don't want to accept replacements that require low\n-            // feerate junk to be mined first. Ideally we'd keep track of\n-            // the ancestor feerates and make the decision based on that,\n-            // but for now requiring all new inputs to be confirmed works.\n-            //\n-            // Note that if you relax this to make RBF a little more useful,\n-            // this may break the CalculateMempoolAncestors RBF relaxation,\n-            // above. See the comment above the first CalculateMempoolAncestors\n-            // call for more info.\n-            if (!setConflictsParents.count(tx.vin[j].prevout.hash))\n-            {\n-                // Rather than check the UTXO set - potentially expensive -\n-                // it's cheaper to just check if the new input refers to a\n-                // tx that's in the mempool.\n-                if (m_pool.exists(tx.vin[j].prevout.hash)) {\n-                    return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"replacement-adds-unconfirmed\",\n-                            strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n-                                hash.ToString(), j));\n-                }\n-            }\n+        // Calculate all conflicting entries and enforce Rule #5.\n+        if (!GetEntriesForConflicts(tx, m_pool, setIterConflicting, allConflicting, err_string)) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, err_string);",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 175,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "7d9fc8153cddec24e90f75662b37e4e46baa7469",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You lost the `m_reject_reason`:\r\n\r\n```suggestion\r\n            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many replacement transactions\", err_string);\r\n```\r\n\r\n(this is why default arguments are evil, especially when you have multiple default arguments of the same type or of types that can be implicitly cast to each other)",
    "created_at": "2021-08-23T14:51:16Z",
    "updated_at": "2021-08-23T15:07:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694045328",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694045328"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694045328"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694045328/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 797,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694057353",
    "pull_request_review_id": 736188540,
    "id": 694057353,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDA1NzM1Mw==",
    "diff_hunk": "@@ -31,4 +36,51 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule 5 and quit as early as\n+ * possible. There cannot be more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  state               Used to return errors, if any.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n+ *                                  the start; any existing mempool entries will remain in the set.\n+ * @returns false if Rule 5 is broken.\n+ */\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting, TxValidationState& state,\n+                      CTxMemPool::setEntries& all_conflicts) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Enforce BIP125 Rule 2: a replacement transaction must not add any new unconfirmed inputs. */\n+bool HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                         const CTxMemPool::setEntries& iters_conflicting,\n+                         TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Check the intersection between two sets of mempool entries to make sure they are disjoint.\n+ * @param[in]   ancestors           Set of mempool entries corresponding to ancestors of the\n+ *                                  replacement transactions.\n+ * @param[in]   direct_conflicts    Set of mempool entries corresponding to the mempool conflicts\n+ *                                  (candidates to be replaced).\n+ * @param[in]   hash                Transaction ID, included in the error message if violation occurs.\n+ * returns true if the two sets are disjoint (i.e. intersection is empty), false if otherwise.\n+ */\n+bool SpendsAndConflictsDisjoint(const CTxMemPool::setEntries& ancestors,",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 42,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'd personally prefer fewer surprise tools that help us later, since it's easy enough to update comments/rename parameters when you actually need that functionality. No big deal either way though!",
    "created_at": "2021-08-23T15:04:38Z",
    "updated_at": "2021-08-23T15:07:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694057353",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694057353"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694057353"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694057353/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 68,
    "side": "RIGHT",
    "in_reply_to_id": 691695502
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694062053",
    "pull_request_review_id": 736243422,
    "id": 694062053,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDA2MjA1Mw==",
    "diff_hunk": "@@ -42,3 +46,133 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     // If we don't have a local mempool we can only check the transaction itself.\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n+\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting,\n+                      TxValidationState& state, CTxMemPool::setEntries& all_conflicts)\n+{\n+    AssertLockHeld(pool.cs);\n+    const uint256 hash = tx.GetHash();\n+    uint64_t nConflictingCount = 0;",
    "path": "src/policy/rbf.cpp",
    "position": 39,
    "original_position": 43,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "(not addressed)",
    "created_at": "2021-08-23T15:10:04Z",
    "updated_at": "2021-08-23T15:10:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694062053",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694062053"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694062053"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694062053/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 57,
    "original_line": 57,
    "side": "RIGHT",
    "in_reply_to_id": 692897400
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694063942",
    "pull_request_review_id": 736246036,
    "id": 694063942,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDA2Mzk0Mg==",
    "diff_hunk": "@@ -31,4 +36,51 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule 5 and quit as early as\n+ * possible. There cannot be more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  state               Used to return errors, if any.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n+ *                                  the start; any existing mempool entries will remain in the set.\n+ * @returns false if Rule 5 is broken.\n+ */\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting, TxValidationState& state,\n+                      CTxMemPool::setEntries& all_conflicts) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Enforce BIP125 Rule 2: a replacement transaction must not add any new unconfirmed inputs. */\n+bool HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                         const CTxMemPool::setEntries& iters_conflicting,\n+                         TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Check the intersection between two sets of mempool entries to make sure they are disjoint.",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 34,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "(not addressed - this comment still refers to \"two sets of mempool entries\")",
    "created_at": "2021-08-23T15:12:22Z",
    "updated_at": "2021-08-23T15:12:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694063942",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694063942"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694063942"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694063942/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 60,
    "side": "RIGHT",
    "in_reply_to_id": 692912827
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694947697",
    "pull_request_review_id": 737357548,
    "id": 694947697,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDk0NzY5Nw==",
    "diff_hunk": "@@ -31,4 +36,51 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule 5 and quit as early as\n+ * possible. There cannot be more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  state               Used to return errors, if any.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n+ *                                  the start; any existing mempool entries will remain in the set.\n+ * @returns false if Rule 5 is broken.\n+ */\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting, TxValidationState& state,\n+                      CTxMemPool::setEntries& all_conflicts) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Enforce BIP125 Rule 2: a replacement transaction must not add any new unconfirmed inputs. */\n+bool HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                         const CTxMemPool::setEntries& iters_conflicting,\n+                         TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Check the intersection between two sets of mempool entries to make sure they are disjoint.\n+ * @param[in]   ancestors           Set of mempool entries corresponding to ancestors of the\n+ *                                  replacement transactions.\n+ * @param[in]   direct_conflicts    Set of mempool entries corresponding to the mempool conflicts\n+ *                                  (candidates to be replaced).\n+ * @param[in]   hash                Transaction ID, included in the error message if violation occurs.\n+ * returns true if the two sets are disjoint (i.e. intersection is empty), false if otherwise.\n+ */\n+bool SpendsAndConflictsDisjoint(const CTxMemPool::setEntries& ancestors,",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 42,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "renamed to txid",
    "created_at": "2021-08-24T15:11:32Z",
    "updated_at": "2021-08-24T15:11:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694947697",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694947697"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694947697"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694947697/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 68,
    "side": "RIGHT",
    "in_reply_to_id": 691695502
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694948488",
    "pull_request_review_id": 737358547,
    "id": 694948488,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDk0ODQ4OA==",
    "diff_hunk": "@@ -3,13 +3,17 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <policy/rbf.h>\n+\n+#include <policy/settings.h>\n+#include <util/moneystr.h>\n #include <util/rbf.h>\n+#include <tinyformat.h>",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "7d9fc8153cddec24e90f75662b37e4e46baa7469",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixt",
    "created_at": "2021-08-24T15:12:22Z",
    "updated_at": "2021-08-24T15:12:23Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694948488",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694948488"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694948488"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694948488/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 10,
    "side": "RIGHT",
    "in_reply_to_id": 694020472
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694948699",
    "pull_request_review_id": 737358881,
    "id": 694948699,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDk0ODY5OQ==",
    "diff_hunk": "@@ -784,130 +770,45 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // that we have the set of all ancestors we can detect this\n     // pathological case by making sure setConflicts and setAncestors don't\n     // intersect.\n-    for (CTxMemPool::txiter ancestorIt : setAncestors)\n-    {\n-        const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n-        if (setConflicts.count(hashAncestor))\n-        {\n-            return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\",\n-                    strprintf(\"%s spends conflicting transaction %s\",\n-                        hash.ToString(),\n-                        hashAncestor.ToString()));\n-        }\n+    if (!SpendsAndConflictsDisjoint(setAncestors, setConflicts, hash, errString)) {\n+        // We classify this as a consensus error because a transaction depending on something it\n+        // conflicts with would be inconsistent.\n+        return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", errString);\n     }\n \n-    // Check if it's economically rational to mine this transaction rather\n-    // than the ones it replaces.\n-    nConflictingFees = 0;\n-    nConflictingSize = 0;\n-    uint64_t nConflictingCount = 0;\n \n-    // If we don't hold the lock allConflicting might be incomplete; the\n-    // subsequent RemoveStaged() and addUnchecked() calls don't guarantee\n-    // mempool consistency for us.\n     fReplacementTransaction = setConflicts.size();\n     if (fReplacementTransaction)\n     {\n+        std::string err_string;\n         CFeeRate newFeeRate(nModifiedFees, nSize);\n-        std::set<uint256> setConflictsParents;\n-        const int maxDescendantsToVisit = 100;\n-        for (const auto& mi : setIterConflicting) {\n-            // Don't allow the replacement to reduce the feerate of the\n-            // mempool.\n-            //\n-            // We usually don't want to accept replacements with lower\n-            // feerates than what they replaced as that would lower the\n-            // feerate of the next block. Requiring that the feerate always\n-            // be increased is also an easy-to-reason about way to prevent\n-            // DoS attacks via replacements.\n-            //\n-            // We only consider the feerates of transactions being directly\n-            // replaced, not their indirect descendants. While that does\n-            // mean high feerate children are ignored when deciding whether\n-            // or not to replace, we do require the replacement to pay more\n-            // overall fees too, mitigating most cases.\n-            CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());\n-            if (newFeeRate <= oldFeeRate)\n-            {\n-                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n-                        strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n-                            hash.ToString(),\n-                            newFeeRate.ToString(),\n-                            oldFeeRate.ToString()));\n-            }\n-\n-            for (const CTxIn &txin : mi->GetTx().vin)\n-            {\n-                setConflictsParents.insert(txin.prevout.hash);\n-            }\n-\n-            nConflictingCount += mi->GetCountWithDescendants();\n-        }\n-        // This potentially overestimates the number of actual descendants\n-        // but we just want to be conservative to avoid doing too much\n-        // work.\n-        if (nConflictingCount <= maxDescendantsToVisit) {\n-            // If not too many to replace, then calculate the set of\n-            // transactions that would have to be evicted\n-            for (CTxMemPool::txiter it : setIterConflicting) {\n-                m_pool.CalculateDescendants(it, allConflicting);\n-            }\n-            for (CTxMemPool::txiter it : allConflicting) {\n-                nConflictingFees += it->GetModifiedFee();\n-                nConflictingSize += it->GetTxSize();\n-            }\n-        } else {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\",\n-                    strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                        hash.ToString(),\n-                        nConflictingCount,\n-                        maxDescendantsToVisit));\n+        // It's possible that the replacement pays more fees than its direct conflicts but not more\n+        // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n+        // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n+        // more economically rational to mine. Before we go digging through the mempool for all\n+        // transactions that would need to be removed (direct conflicts and all descendants), check\n+        // that the replacement transaction pays more than its direct conflicts.\n+        if (!PaysMoreThanConflicts(setIterConflicting, newFeeRate, hash, err_string)) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", err_string);\n         }\n \n-        for (unsigned int j = 0; j < tx.vin.size(); j++)\n-        {\n-            // We don't want to accept replacements that require low\n-            // feerate junk to be mined first. Ideally we'd keep track of\n-            // the ancestor feerates and make the decision based on that,\n-            // but for now requiring all new inputs to be confirmed works.\n-            //\n-            // Note that if you relax this to make RBF a little more useful,\n-            // this may break the CalculateMempoolAncestors RBF relaxation,\n-            // above. See the comment above the first CalculateMempoolAncestors\n-            // call for more info.\n-            if (!setConflictsParents.count(tx.vin[j].prevout.hash))\n-            {\n-                // Rather than check the UTXO set - potentially expensive -\n-                // it's cheaper to just check if the new input refers to a\n-                // tx that's in the mempool.\n-                if (m_pool.exists(tx.vin[j].prevout.hash)) {\n-                    return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"replacement-adds-unconfirmed\",\n-                            strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n-                                hash.ToString(), j));\n-                }\n-            }\n+        // Calculate all conflicting entries and enforce Rule #5.\n+        if (!GetEntriesForConflicts(tx, m_pool, setIterConflicting, allConflicting, err_string)) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, err_string);",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 175,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "7d9fc8153cddec24e90f75662b37e4e46baa7469",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": ":pleading_face: Added it back",
    "created_at": "2021-08-24T15:12:38Z",
    "updated_at": "2021-08-24T15:12:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694948699",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694948699"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694948699"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694948699/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 797,
    "side": "RIGHT",
    "in_reply_to_id": 694045328
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694949052",
    "pull_request_review_id": 737359382,
    "id": 694949052,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDk0OTA1Mg==",
    "diff_hunk": "@@ -31,4 +36,51 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule 5 and quit as early as\n+ * possible. There cannot be more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  state               Used to return errors, if any.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n+ *                                  the start; any existing mempool entries will remain in the set.\n+ * @returns false if Rule 5 is broken.\n+ */\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting, TxValidationState& state,\n+                      CTxMemPool::setEntries& all_conflicts) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Enforce BIP125 Rule 2: a replacement transaction must not add any new unconfirmed inputs. */\n+bool HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                         const CTxMemPool::setEntries& iters_conflicting,\n+                         TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Check the intersection between two sets of mempool entries to make sure they are disjoint.",
    "path": "src/policy/rbf.h",
    "position": null,
    "original_position": 34,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "now calling it \"two sets of transactions (a set of mempool entries and a set of txids)\"",
    "created_at": "2021-08-24T15:13:04Z",
    "updated_at": "2021-08-24T15:13:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694949052",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694949052"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694949052"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694949052/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 60,
    "side": "RIGHT",
    "in_reply_to_id": 692912827
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694949459",
    "pull_request_review_id": 737359910,
    "id": 694949459,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NDk0OTQ1OQ==",
    "diff_hunk": "@@ -42,3 +46,133 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     // If we don't have a local mempool we can only check the transaction itself.\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n+\n+bool GetEntriesForRBF(const CTransaction& tx, CTxMemPool& pool,\n+                      const CTxMemPool::setEntries& iters_conflicting,\n+                      TxValidationState& state, CTxMemPool::setEntries& all_conflicts)\n+{\n+    AssertLockHeld(pool.cs);\n+    const uint256 hash = tx.GetHash();\n+    uint64_t nConflictingCount = 0;",
    "path": "src/policy/rbf.cpp",
    "position": 39,
    "original_position": 43,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "192193c7c420ebbbac6bb0a60778e6a352b3d67c",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "(will fix in a later PR when scripted-diffing the validation.cpp file)",
    "created_at": "2021-08-24T15:13:29Z",
    "updated_at": "2021-08-24T15:13:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694949459",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694949459"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694949459"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/694949459/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 57,
    "original_line": 57,
    "side": "RIGHT",
    "in_reply_to_id": 692897400
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702737511",
    "pull_request_review_id": 747002094,
    "id": 702737511,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjczNzUxMQ==",
    "diff_hunk": "@@ -161,3 +161,29 @@ std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& s\n     return std::nullopt;\n }\n \n+std::optional<std::string> PaysForRBF(CAmount nConflictingFees,\n+                                      CAmount nModifiedFees,\n+                                      size_t nSize,\n+                                      const uint256& hash)\n+{\n+    // The replacement must pay greater fees than the transactions it\n+    // replaces - if we did the bandwidth used by those conflicting\n+    // transactions would not be paid for.\n+    if (nModifiedFees < nConflictingFees)\n+    {\n+        return strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n+                         hash.ToString(), FormatMoney(nModifiedFees), FormatMoney(nConflictingFees));\n+    }\n+\n+    // Finally in addition to paying more fees than the conflicts the\n+    // new transaction must pay for its own bandwidth.\n+    CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n+    if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 21,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3: Would be nice to not use a global here. Testability is one of the motivations in OP, but using globals makes testing actually harder.",
    "created_at": "2021-09-06T09:09:37Z",
    "updated_at": "2021-09-06T09:15:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r702737511",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702737511"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r702737511"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702737511/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 181,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702820423",
    "pull_request_review_id": 747112548,
    "id": 702820423,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjgyMDQyMw==",
    "diff_hunk": "@@ -161,3 +161,29 @@ std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& s\n     return std::nullopt;\n }\n \n+std::optional<std::string> PaysForRBF(CAmount nConflictingFees,\n+                                      CAmount nModifiedFees,\n+                                      size_t nSize,\n+                                      const uint256& hash)\n+{\n+    // The replacement must pay greater fees than the transactions it\n+    // replaces - if we did the bandwidth used by those conflicting\n+    // transactions would not be paid for.\n+    if (nModifiedFees < nConflictingFees)\n+    {\n+        return strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n+                         hash.ToString(), FormatMoney(nModifiedFees), FormatMoney(nConflictingFees));\n+    }\n+\n+    // Finally in addition to paying more fees than the conflicts the\n+    // new transaction must pay for its own bandwidth.\n+    CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n+    if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 21,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes definitely agree - I can do this in the followup PR.",
    "created_at": "2021-09-06T11:15:52Z",
    "updated_at": "2021-09-06T11:15:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r702820423",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702820423"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r702820423"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702820423/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 181,
    "side": "RIGHT",
    "in_reply_to_id": 702737511
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/704195620",
    "pull_request_review_id": 748862561,
    "id": 704195620,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNDE5NTYyMA==",
    "diff_hunk": "@@ -161,3 +161,29 @@ std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& s\n     return std::nullopt;\n }\n \n+std::optional<std::string> PaysForRBF(CAmount nConflictingFees,\n+                                      CAmount nModifiedFees,\n+                                      size_t nSize,\n+                                      const uint256& hash)\n+{\n+    // The replacement must pay greater fees than the transactions it\n+    // replaces - if we did the bandwidth used by those conflicting\n+    // transactions would not be paid for.\n+    if (nModifiedFees < nConflictingFees)\n+    {\n+        return strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n+                         hash.ToString(), FormatMoney(nModifiedFees), FormatMoney(nConflictingFees));\n+    }\n+\n+    // Finally in addition to paying more fees than the conflicts the\n+    // new transaction must pay for its own bandwidth.\n+    CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n+    if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))",
    "path": "src/policy/rbf.cpp",
    "position": null,
    "original_position": 21,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done in https://github.com/bitcoin/bitcoin/pull/22855/commits/7ccaac6c5332b8a93c9b5c7103f846854ee595d5",
    "created_at": "2021-09-08T08:57:41Z",
    "updated_at": "2021-09-08T08:57:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r704195620",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/704195620"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r704195620"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/704195620/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 181,
    "side": "RIGHT",
    "in_reply_to_id": 702737511
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706498561",
    "pull_request_review_id": 751832799,
    "id": 706498561,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNjQ5ODU2MQ==",
    "diff_hunk": "@@ -35,19 +35,61 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n-/** Get all descendants of setIterConflicting. Also enforce BIP125 Rule #5, \"The number of original\n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule #5, \"The number of original\n  * transactions to be replaced and their descendant transactions which will be evicted from the\n  * mempool must not exceed a total of 100 transactions.\" Quit as early as possible. There cannot be\n  * more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n- * @param[in]   setIterConflicting  The set of iterators to mempool entries.\n- * @param[out]  err_string          Used to return errors, if any.\n- * @param[out]  allConflicting      Populated with all the mempool entries that would be replaced,\n- *                                  which includes descendants of setIterConflicting. Not cleared at\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n  *                                  the start; any existing mempool entries will remain in the set.\n- * @returns false if Rule 5 is broken.\n+ * @returns an error message if Rule #5 is broken, otherwise a std::nullopt.\n  */\n-bool GetEntriesForConflicts(const CTransaction& tx, CTxMemPool& m_pool,\n-                            const CTxMemPool::setEntries& setIterConflicting,\n-                            CTxMemPool::setEntries& allConflicting,\n-                            std::string& err_string) EXCLUSIVE_LOCKS_REQUIRED(m_pool.cs);\n+std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx, CTxMemPool& pool,\n+                                                  const CTxMemPool::setEntries& iters_conflicting,\n+                                                  CTxMemPool::setEntries& all_conflicts)\n+                                                  EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** BIP125 Rule #2: \"The replacement transaction may only include an unconfirmed input if that input\n+ * was included in one of the original transactions.\"\n+ * @returns error message if Rule #2 is broken, otherwise std::nullopt. */\n+std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                                               const CTxMemPool::setEntries& iters_conflicting)\n+                                               EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Check the intersection between two sets of transactions (a set of mempool entries and a set of\n+ * txids) to make sure they are disjoint.\n+ * @param[in]   ancestors           Set of mempool entries corresponding to ancestors of the\n+ *                                  replacement transactions.\n+ * @param[in]   direct_conflicts    Set of txids corresponding to the mempool conflicts\n+ *                                  (candidates to be replaced).\n+ * @param[in]   txid                Transaction ID, included in the error message if violation occurs.\n+ * @returns error message if the sets intersect, std::nullopt if they are disjoint.\n+ */\n+std::optional<std::string> EntriesAndTxidsDisjoint(const CTxMemPool::setEntries& ancestors,\n+                                                   const std::set<uint256>& direct_conflicts,\n+                                                   const uint256& txid);\n+\n+/** Check that the feerate of the replacement transaction(s) is higher than the feerate of each\n+ * of the transactions in iters_conflicting.\n+ * @param[in]   iters_conflicting  The set of mempool entries.\n+ * @returns error message if fees insufficient, otherwise std::nullopt.\n+ */\n+std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& iters_conflicting,\n+                                                 CFeeRate replacement_feerate, const uint256& txid);\n+\n+/** Enforce BIP125 Rule #3 \"The replacement transaction pays an absolute fee of at least the sum\n+ * paid by the original transactions.\" Enforce BIP125 Rule #4 \"The replacement transaction must also\n+ * pay for its own bandwidth at or above the rate set by the node's minimum relay fee setting.\"\n+ * @param[in]   original_fees       Total modified fees of original transaction(s).",
    "path": "src/policy/rbf.h",
    "position": 60,
    "original_position": 60,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Note, as previously mentioned, I think this is where we do have additional divergences w.r.t to bip125.\r\n\r\nRule 3 says \"The replacement transaction pays an absolute fee of at least the sum paid by the original transactions\".\r\n\r\nI think original transactions as to be interpreted as the set of directly conflicted transactions, i.e sharing inputs with the replacement transaction. At least Rule 5 explicitly dissociates \"original transactions to be replaced and their descendant transactions\".\r\n\r\nHowever our RBF implementation computes the `original_fees` from iterating on `allConflicting` which is built from `CalculateDescendants`. So to-be-replaced descendants fees are also added to the sum paid checked.\r\n\r\nThis means our implementation is more conservative than BIP125, as the replacement threshold is higher. I think this is preferable, at least without deeper thinking.\r\n\r\nAFAIK, this is mental model shared by most developers when they reason about our RBF logic (e.g in pinning discussions). Though it might create surprises if a user submits replacement transactions to Core and other full-node like bcoin, btcd (I don't know their behaviors), they might be refused by Core but accepted in other implems.\r\n\r\nIf I'm correct, good to make this point more known.",
    "created_at": "2021-09-10T22:19:22Z",
    "updated_at": "2021-09-10T22:21:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r706498561",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706498561"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r706498561"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706498561/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 84,
    "original_line": 84,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706498920",
    "pull_request_review_id": 751832799,
    "id": 706498920,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNjQ5ODkyMA==",
    "diff_hunk": "@@ -47,33 +47,127 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n \n-bool GetEntriesForConflicts(const CTransaction& tx,\n-                            CTxMemPool& m_pool,\n-                            const CTxMemPool::setEntries& setIterConflicting,\n-                            CTxMemPool::setEntries& allConflicting,\n-                            std::string& err_string)\n+std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx,\n+                            CTxMemPool& pool,\n+                            const CTxMemPool::setEntries& iters_conflicting,\n+                            CTxMemPool::setEntries& all_conflicts)\n {\n-    AssertLockHeld(m_pool.cs);\n-    const uint256 hash = tx.GetHash();\n+    AssertLockHeld(pool.cs);\n+    const uint256 txid = tx.GetHash();\n     uint64_t nConflictingCount = 0;\n-    for (const auto& mi : setIterConflicting) {\n+    for (const auto& mi : iters_conflicting) {\n         nConflictingCount += mi->GetCountWithDescendants();\n-        // This potentially overestimates the number of actual descendants\n-        // but we just want to be conservative to avoid doing too much\n-        // work.\n+        // This potentially overestimates the number of actual descendants but we just want to be\n+        // conservative to avoid doing too much work.\n         if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n-            err_string = strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                        hash.ToString(),\n-                        nConflictingCount,\n-                        MAX_BIP125_REPLACEMENT_CANDIDATES);\n-            return false;\n+            return strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n+                             txid.ToString(),\n+                             nConflictingCount,\n+                             MAX_BIP125_REPLACEMENT_CANDIDATES);\n         }\n     }\n     // If not too many to replace, then calculate the set of\n     // transactions that would have to be evicted\n-    for (CTxMemPool::txiter it : setIterConflicting) {\n-        m_pool.CalculateDescendants(it, allConflicting);\n+    for (CTxMemPool::txiter it : iters_conflicting) {\n+        pool.CalculateDescendants(it, all_conflicts);\n     }\n-    return true;\n+    return std::nullopt;\n }\n \n+std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n+                                               const CTxMemPool& pool,\n+                                               const CTxMemPool::setEntries& iters_conflicting)\n+{\n+    AssertLockHeld(pool.cs);\n+    std::set<uint256> parents_of_conflicts;\n+    for (const auto& mi : iters_conflicting) {\n+        for (const CTxIn &txin : mi->GetTx().vin) {\n+            parents_of_conflicts.insert(txin.prevout.hash);\n+        }\n+    }\n+\n+    for (unsigned int j = 0; j < tx.vin.size(); j++) {\n+        // We don't want to accept replacements that require low feerate junk to be mined first.\n+        // Ideally we'd keep track of the ancestor feerates and make the decision based on that, but\n+        // for now requiring all new inputs to be confirmed works.\n+        //\n+        // Note that if you relax this to make RBF a little more useful, this may break the",
    "path": "src/policy/rbf.cpp",
    "position": 88,
    "original_position": 88,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In case of code relocation like this one, I think it could ease understanding if a reference to `PreChecks` is added, where the calls to `CalculateMempoolAncestors` happen. ",
    "created_at": "2021-09-10T22:20:41Z",
    "updated_at": "2021-09-10T22:21:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r706498920",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706498920"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r706498920"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706498920/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 94,
    "original_line": 94,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/708265563",
    "pull_request_review_id": 753940442,
    "id": 708265563,
    "node_id": "PRRC_kwDOABII584qN0Zb",
    "diff_hunk": "@@ -35,19 +35,61 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n-/** Get all descendants of setIterConflicting. Also enforce BIP125 Rule #5, \"The number of original\n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule #5, \"The number of original\n  * transactions to be replaced and their descendant transactions which will be evicted from the\n  * mempool must not exceed a total of 100 transactions.\" Quit as early as possible. There cannot be\n  * more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n- * @param[in]   setIterConflicting  The set of iterators to mempool entries.\n- * @param[out]  err_string          Used to return errors, if any.\n- * @param[out]  allConflicting      Populated with all the mempool entries that would be replaced,\n- *                                  which includes descendants of setIterConflicting. Not cleared at\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n  *                                  the start; any existing mempool entries will remain in the set.\n- * @returns false if Rule 5 is broken.\n+ * @returns an error message if Rule #5 is broken, otherwise a std::nullopt.\n  */\n-bool GetEntriesForConflicts(const CTransaction& tx, CTxMemPool& m_pool,\n-                            const CTxMemPool::setEntries& setIterConflicting,\n-                            CTxMemPool::setEntries& allConflicting,\n-                            std::string& err_string) EXCLUSIVE_LOCKS_REQUIRED(m_pool.cs);\n+std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx, CTxMemPool& pool,\n+                                                  const CTxMemPool::setEntries& iters_conflicting,\n+                                                  CTxMemPool::setEntries& all_conflicts)\n+                                                  EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** BIP125 Rule #2: \"The replacement transaction may only include an unconfirmed input if that input\n+ * was included in one of the original transactions.\"\n+ * @returns error message if Rule #2 is broken, otherwise std::nullopt. */\n+std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                                               const CTxMemPool::setEntries& iters_conflicting)\n+                                               EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Check the intersection between two sets of transactions (a set of mempool entries and a set of\n+ * txids) to make sure they are disjoint.\n+ * @param[in]   ancestors           Set of mempool entries corresponding to ancestors of the\n+ *                                  replacement transactions.\n+ * @param[in]   direct_conflicts    Set of txids corresponding to the mempool conflicts\n+ *                                  (candidates to be replaced).\n+ * @param[in]   txid                Transaction ID, included in the error message if violation occurs.\n+ * @returns error message if the sets intersect, std::nullopt if they are disjoint.\n+ */\n+std::optional<std::string> EntriesAndTxidsDisjoint(const CTxMemPool::setEntries& ancestors,\n+                                                   const std::set<uint256>& direct_conflicts,\n+                                                   const uint256& txid);\n+\n+/** Check that the feerate of the replacement transaction(s) is higher than the feerate of each\n+ * of the transactions in iters_conflicting.\n+ * @param[in]   iters_conflicting  The set of mempool entries.\n+ * @returns error message if fees insufficient, otherwise std::nullopt.\n+ */\n+std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& iters_conflicting,\n+                                                 CFeeRate replacement_feerate, const uint256& txid);\n+\n+/** Enforce BIP125 Rule #3 \"The replacement transaction pays an absolute fee of at least the sum\n+ * paid by the original transactions.\" Enforce BIP125 Rule #4 \"The replacement transaction must also\n+ * pay for its own bandwidth at or above the rate set by the node's minimum relay fee setting.\"\n+ * @param[in]   original_fees       Total modified fees of original transaction(s).",
    "path": "src/policy/rbf.h",
    "position": 60,
    "original_position": 60,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You are correct with regard to the implementation. However BIP125 says:\r\n> The replacement transaction pays an absolute fee of at least the sum paid by the original transactions\r\n\r\nWhich is plural, so i think the implementation is in line with this rule.\r\nOf course, i agree that it would be a nice place to look for bugs in re-implementations :)",
    "created_at": "2021-09-14T13:24:46Z",
    "updated_at": "2021-09-14T13:25:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r708265563",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/708265563"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r708265563"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/708265563/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 84,
    "original_line": 84,
    "side": "RIGHT",
    "in_reply_to_id": 706498561
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/709062666",
    "pull_request_review_id": 754953865,
    "id": 709062666,
    "node_id": "PRRC_kwDOABII584qQ3AK",
    "diff_hunk": "@@ -35,19 +35,61 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n-/** Get all descendants of setIterConflicting. Also enforce BIP125 Rule #5, \"The number of original\n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule #5, \"The number of original\n  * transactions to be replaced and their descendant transactions which will be evicted from the\n  * mempool must not exceed a total of 100 transactions.\" Quit as early as possible. There cannot be\n  * more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n- * @param[in]   setIterConflicting  The set of iterators to mempool entries.\n- * @param[out]  err_string          Used to return errors, if any.\n- * @param[out]  allConflicting      Populated with all the mempool entries that would be replaced,\n- *                                  which includes descendants of setIterConflicting. Not cleared at\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n  *                                  the start; any existing mempool entries will remain in the set.\n- * @returns false if Rule 5 is broken.\n+ * @returns an error message if Rule #5 is broken, otherwise a std::nullopt.\n  */\n-bool GetEntriesForConflicts(const CTransaction& tx, CTxMemPool& m_pool,\n-                            const CTxMemPool::setEntries& setIterConflicting,\n-                            CTxMemPool::setEntries& allConflicting,\n-                            std::string& err_string) EXCLUSIVE_LOCKS_REQUIRED(m_pool.cs);\n+std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx, CTxMemPool& pool,\n+                                                  const CTxMemPool::setEntries& iters_conflicting,\n+                                                  CTxMemPool::setEntries& all_conflicts)\n+                                                  EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** BIP125 Rule #2: \"The replacement transaction may only include an unconfirmed input if that input\n+ * was included in one of the original transactions.\"\n+ * @returns error message if Rule #2 is broken, otherwise std::nullopt. */\n+std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                                               const CTxMemPool::setEntries& iters_conflicting)\n+                                               EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Check the intersection between two sets of transactions (a set of mempool entries and a set of\n+ * txids) to make sure they are disjoint.\n+ * @param[in]   ancestors           Set of mempool entries corresponding to ancestors of the\n+ *                                  replacement transactions.\n+ * @param[in]   direct_conflicts    Set of txids corresponding to the mempool conflicts\n+ *                                  (candidates to be replaced).\n+ * @param[in]   txid                Transaction ID, included in the error message if violation occurs.\n+ * @returns error message if the sets intersect, std::nullopt if they are disjoint.\n+ */\n+std::optional<std::string> EntriesAndTxidsDisjoint(const CTxMemPool::setEntries& ancestors,\n+                                                   const std::set<uint256>& direct_conflicts,\n+                                                   const uint256& txid);\n+\n+/** Check that the feerate of the replacement transaction(s) is higher than the feerate of each\n+ * of the transactions in iters_conflicting.\n+ * @param[in]   iters_conflicting  The set of mempool entries.\n+ * @returns error message if fees insufficient, otherwise std::nullopt.\n+ */\n+std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& iters_conflicting,\n+                                                 CFeeRate replacement_feerate, const uint256& txid);\n+\n+/** Enforce BIP125 Rule #3 \"The replacement transaction pays an absolute fee of at least the sum\n+ * paid by the original transactions.\" Enforce BIP125 Rule #4 \"The replacement transaction must also\n+ * pay for its own bandwidth at or above the rate set by the node's minimum relay fee setting.\"\n+ * @param[in]   original_fees       Total modified fees of original transaction(s).",
    "path": "src/policy/rbf.h",
    "position": 60,
    "original_position": 60,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "At least wrt fees, it wouldn't make much sense to not consider the descendants of direct conflicts. You can very easily end up replacing higher-fee packages with lower-fee ones. As such, I don't expect that other implementations are interpreting the BIP wording as excluding descendants. Good shout, though, since that would be a pretty juicy bug! :bug:\r\n\r\nwrt wording used in these comments, I have been trying to use \"direct conflicts\" as the mempool transactions that a transaction conflicts with, and \"original transactions\" as all of the mempool transactions that would need to be evicted, i.e. direct conflicts and their descendants. I hope that's clear enough - welcome any feedback on that",
    "created_at": "2021-09-15T10:41:37Z",
    "updated_at": "2021-09-15T10:41:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r709062666",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/709062666"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r709062666"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/709062666/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 84,
    "original_line": 84,
    "side": "RIGHT",
    "in_reply_to_id": 706498561
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716263536",
    "pull_request_review_id": 763734513,
    "id": 716263536,
    "node_id": "PRRC_kwDOABII584qsVBw",
    "diff_hunk": "@@ -35,19 +35,61 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n-/** Get all descendants of setIterConflicting. Also enforce BIP125 Rule #5, \"The number of original\n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule #5, \"The number of original\n  * transactions to be replaced and their descendant transactions which will be evicted from the\n  * mempool must not exceed a total of 100 transactions.\" Quit as early as possible. There cannot be\n  * more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n- * @param[in]   setIterConflicting  The set of iterators to mempool entries.\n- * @param[out]  err_string          Used to return errors, if any.\n- * @param[out]  allConflicting      Populated with all the mempool entries that would be replaced,\n- *                                  which includes descendants of setIterConflicting. Not cleared at\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n  *                                  the start; any existing mempool entries will remain in the set.\n- * @returns false if Rule 5 is broken.\n+ * @returns an error message if Rule #5 is broken, otherwise a std::nullopt.\n  */\n-bool GetEntriesForConflicts(const CTransaction& tx, CTxMemPool& m_pool,\n-                            const CTxMemPool::setEntries& setIterConflicting,\n-                            CTxMemPool::setEntries& allConflicting,\n-                            std::string& err_string) EXCLUSIVE_LOCKS_REQUIRED(m_pool.cs);\n+std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx, CTxMemPool& pool,\n+                                                  const CTxMemPool::setEntries& iters_conflicting,\n+                                                  CTxMemPool::setEntries& all_conflicts)\n+                                                  EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** BIP125 Rule #2: \"The replacement transaction may only include an unconfirmed input if that input\n+ * was included in one of the original transactions.\"\n+ * @returns error message if Rule #2 is broken, otherwise std::nullopt. */\n+std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                                               const CTxMemPool::setEntries& iters_conflicting)\n+                                               EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+\n+/** Check the intersection between two sets of transactions (a set of mempool entries and a set of\n+ * txids) to make sure they are disjoint.\n+ * @param[in]   ancestors           Set of mempool entries corresponding to ancestors of the\n+ *                                  replacement transactions.\n+ * @param[in]   direct_conflicts    Set of txids corresponding to the mempool conflicts\n+ *                                  (candidates to be replaced).\n+ * @param[in]   txid                Transaction ID, included in the error message if violation occurs.\n+ * @returns error message if the sets intersect, std::nullopt if they are disjoint.\n+ */\n+std::optional<std::string> EntriesAndTxidsDisjoint(const CTxMemPool::setEntries& ancestors,\n+                                                   const std::set<uint256>& direct_conflicts,\n+                                                   const uint256& txid);\n+\n+/** Check that the feerate of the replacement transaction(s) is higher than the feerate of each\n+ * of the transactions in iters_conflicting.\n+ * @param[in]   iters_conflicting  The set of mempool entries.\n+ * @returns error message if fees insufficient, otherwise std::nullopt.\n+ */\n+std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& iters_conflicting,\n+                                                 CFeeRate replacement_feerate, const uint256& txid);\n+\n+/** Enforce BIP125 Rule #3 \"The replacement transaction pays an absolute fee of at least the sum\n+ * paid by the original transactions.\" Enforce BIP125 Rule #4 \"The replacement transaction must also\n+ * pay for its own bandwidth at or above the rate set by the node's minimum relay fee setting.\"\n+ * @param[in]   original_fees       Total modified fees of original transaction(s).",
    "path": "src/policy/rbf.h",
    "position": 60,
    "original_position": 60,
    "commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "original_commit_id": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Which is plural, so i think the implementation is in line with this rule.\r\n\r\nYes \"original transactions\" is plural though Rule 5 explicitly dissociates \"original transactions to be replaced and their descendant transactions\". Like the directly-replaced transactions _and_ their descendants as two different things :) ?\r\n\r\nI still think this is confusing and our implementation is _not_ in line with this rule. Though I think this is the best behavior for the reason underscored by Gloria.\r\n\r\nI'll let someone else checking other full-node implementations if they have bugs around that!",
    "created_at": "2021-09-26T21:20:48Z",
    "updated_at": "2021-09-26T21:20:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r716263536",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716263536"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22675#discussion_r716263536"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22675"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/716263536/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 84,
    "original_line": 84,
    "side": "RIGHT",
    "in_reply_to_id": 706498561
  }
]