0xB10C,2021-08-10 14:48:10,"Concept ACK\n\nTIL Witness Replacement",https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-896093753,896093753,
glozow,2021-08-10 16:33:51,"A new circular dependency `policy/rbf -> txmempool -> validation -> policy/rbf` is introduced here, so I've added it to `EXPECTED_CIRCULAR_DEPENDENCIES` to suppress the issue. I understand this is not ideal. The main problem, I think, is the txmempool -> validation part (which already exists), so I've taken a crack at it in #22677.",https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-896133317,896133317,
DrahtBot,2021-08-10 18:53:29,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22539](https://github.com/bitcoin/bitcoin/pull/22539) (Re-include RBF replacement txs in fee estimation by darosior)\n\n",https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-896233882,896233882,
fanquake,2021-08-11 02:45:47,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-896457050,896457050,
mjdietzx,2021-08-12 01:24:32,crACK 6a0a8ef791400d78fb4192a81a392131be78270b,https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-897274755,897274755,
theStack,2021-08-12 12:11:06,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-897587220,897587220,
mjdietzx,2021-08-13 14:49:24,Tested ACK 6a0a8ef791400d78fb4192a81a392131be78270b,https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-898510534,898510534,
glozow,2021-08-16 09:58:00,"\n> To be extra-cautious, I also compiled and ran unit tests + the functional test feature_rbf.py on every commit.\n> Left some more suggestions considering const-correctness and passing by reference rather than by value. On the second-to-last commit [a30b027](https://github.com/bitcoin/bitcoin/commit/a30b0270d0129f16573827d45250aa42912803d3) the test feature_rbf.py currently fails, see comment ",https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-899381767,899381767,
glozow,2021-08-20 10:20:23,"> That said, why not proceed the other way around to avoid introducing the circular dependency at all?\n\nTrue, I just did it this way because this PR is a bit further along (other one is still looking for approach feedback), and I have some branches depending on this refactor.",https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-902593124,902593124,
glozow,2021-08-24 15:14:54,Addressed @jnewbery comments,https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-904732562,904732562,
theStack,2021-08-25 11:44:29,"I tend to agree with @ariard that splitting this PR into different ones would make a lot of sense here:\n\n> I think the changes proposed by this PR are sizeable enough to be splitted off in different PRs. Especially about the replace-by-fee check rules, beyond the better-feerate-than-directly-replaced transaction present in the code but not in the spec, iirc they're still minor discrepancies wo",https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-905425602,905425602,
jnewbery,2021-08-25 12:19:21,"Code review ACK a33fdd0b981965982754b39586eedb7ae456ba57\n\nI'm very happy to review any new PRs if you split this up.",https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-905450118,905450118,
glozow,2021-08-25 13:31:28,I've split off the first few commits into #22796.,https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-905504286,905504286,
glozow,2021-09-01 09:08:51,"Rebased and split off the documentation changes. Ready for review.\nPlease note that this is move-only, and I'm happy to add any doc suggestions to #22855.",https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-910090999,910090999,
glozow,2021-09-02 15:42:43,Changed the functions to return `std::optional<std::string>` instead of `bool` in response to https://github.com/bitcoin/bitcoin/pull/22796#discussion_r700944084,https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-911820767,911820767,
mjdietzx,2021-09-03 01:46:38,"ACK 32748da0f47f7aa9fba78dfb29aa426b14f15624\n\nI tested this again by running some additional test coverage around BIP125 (this PR #22867) on this branch. All good ‚úÖ",https://github.com/bitcoin/bitcoin/pull/22675#issuecomment-912188277,912188277,
mjdietzx,2021-08-11 09:45:21,"Any reason this shouldn't go in `policy/policy.h`? It would get rid of the circular dependency as well\n\nAs precedent, we do have at least one BIP 125 specific constant there:\n```c++\n/** Default for -incrementalrelayfee, which sets the minimum feerate increase for mempool limiting or BIP 125 replacement **/\nstatic const unsigned int DEFAULT_INCREMENTAL_RELAY_FEE = 1000;\n```",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686672590,686672590,src/policy/rbf.h
mjdietzx,2021-08-11 09:52:42,"re 76354e503c039ae9c7e0d0f93191b211d699478c, nice üëç I had the same thought when reading this code that it'd be more efficient to do something like this",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686678031,686678031,src/validation.cpp
mjdietzx,2021-08-11 10:41:33,I guess the reason it may overestimate here is due to the same descendant being counted multiple times when multiple conflicting parents share that same descendant?,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686711392,686711392,src/policy/rbf.cpp
mjdietzx,2021-08-11 10:43:07,"Is this necessary? Can't we just use `!SignalsOptInRBF` from `util/rbf.h`?\n\nNote: I realize this is a move only PR, but I'm just wondering, maybe it's a minor refactor later",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686712403,686712403,src/policy/rbf.cpp
mjdietzx,2021-08-11 10:51:05,"nit: I'm sure if `util/rbf.h` existence is justified in the first place, but if we go with the current convention, `IsRBFOptOut` would seem to belong there",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686717457,686717457,src/policy/rbf.cpp
mjdietzx,2021-08-11 10:57:29,"We are populating `setConflictsParents` in this method, but we never use it",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686721462,686721462,src/policy/rbf.cpp
mjdietzx,2021-08-11 10:58:27,"Now we are populating `setConflictsParents` again, the same way we did in `GetEntriesForRBF`, but we use it here",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686722096,686722096,src/policy/rbf.cpp
mjdietzx,2021-08-11 11:03:17,Note: `nConflictingSize` is an unused variable,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686725070,686725070,src/policy/rbf.cpp
glozow,2021-08-11 13:59:36,"Hm, I think everything in util/rbf should be moved to policy/rbf actually :thinking: There's no reason to have two places for RBF (I think) and organization-wise, all RBF logic and code is policy.",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686859852,686859852,src/policy/rbf.cpp
glozow,2021-08-11 14:02:25,"It wouldn't get rid of the circular dependency unfortunately, because it's caused by validation.cpp including policy/rbf.h",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686862622,686862622,src/policy/rbf.h
glozow,2021-08-11 14:02:51,"Yes, that's exactly right.",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686863065,686863065,src/policy/rbf.cpp
darosior,2021-08-11 14:25:20,"Not sure, it would make all users of policy/rbf depend on txmempool. Eg not sure the standalone binaries `wallet-util` and friends depend on it although they use util/rbf.",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686883898,686883898,src/policy/rbf.cpp
glozow,2021-08-11 15:00:07,"Ahh good point @darosior. I was wrong. I think it makes sense for policy/* to depend on mempool, but I see how util/rbf is needed now.",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686916506,686916506,src/policy/rbf.cpp
glozow,2021-08-11 15:08:44,"Oopsie good catch! did a few different attempts at moving BIP125, this is leftover from a previous one :sweat_smile: ",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686924148,686924148,src/policy/rbf.cpp
glozow,2021-08-11 15:09:05,Removed - thanks!,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r686924532,686924532,src/policy/rbf.cpp
theStack,2021-08-13 17:12:07,"I guess for performance reasons, we should pass `setIterConflicting` by reference, rather than by value?\n```suggestion\n                      const CTxMemPool::setEntries& setIterConflicting,\n```",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r688663550,688663550,src/policy/rbf.cpp
theStack,2021-08-13 17:18:42,"This header doesn't seem to be directly needed in this compilation unit (strings _are_ used as return values/parameters for `uint256.ToString()` and `strprintf`, but it's the job of the headers offering those functions to already also include `<string>`).\n```suggestion\n```",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r688667057,688667057,src/policy/rbf.cpp
theStack,2021-08-14 18:04:08,"```suggestion\nbool HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& m_pool,\n                         const CTxMemPool::setEntries& setIterConflicting, TxValidationState& state)\n```",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r688975344,688975344,src/policy/rbf.cpp
theStack,2021-08-14 18:15:21,"```suggestion\nbool SpendsAndConflictsDisjoint(const CTxMemPool::setEntries& setAncestors, const std::set<uint256>& setConflicts,\n```",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r688976433,688976433,src/policy/rbf.cpp
theStack,2021-08-14 18:17:45,"```suggestion\n * returns true if the intersection is empty, false if otherwise.\n```",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r688976657,688976657,src/policy/rbf.h
theStack,2021-08-14 18:28:17,"This line removal must be unintentional (three placeholders, but only two arguments)? Quite a pity that the compiler doesn't warn us in this case. At least the tinyformat library seems to be nice enough to notice us at runtime :)\n```\n$ ./test/functional/feature_rbf.py\n.....\n.....\n2021-08-14T18:32:49.823000Z TestFramework (INFO): Running test replacement relay fee...\n2021-08-14T18:32:49",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r688977532,688977532,src/validation.cpp
glozow,2021-08-16 08:42:45,woah good catch O.o,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689346785,689346785,src/validation.cpp
glozow,2021-08-16 09:48:01,"Good point, done!",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689392421,689392421,src/policy/rbf.cpp
glozow,2021-08-16 09:48:10,Done,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689392517,689392517,src/policy/rbf.cpp
glozow,2021-08-16 09:48:27,Done,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689392704,689392704,src/policy/rbf.cpp
glozow,2021-08-16 09:49:09,"Good point, done",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689393199,689393199,src/policy/rbf.cpp
glozow,2021-08-16 09:49:17,Fixed,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689393296,689393296,src/policy/rbf.h
glozow,2021-08-16 09:56:52,Fixed,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689398361,689398361,src/validation.cpp
laanwj,2021-08-16 14:38:21,"Concept ACK, but I think we should avoid adding a circular dependency here.\nEdit: oh, I see you already have a PR, #22677, for this. I guess it's fine under the condition that it's temporarily (to keep this one move-only).",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r689596026,689596026,test/lint/lint-circular-dependencies.sh
ariard,2021-08-18 23:32:41,"I think `src/util/rbf.h`, did already incorporate bip125 policy value such as `MAX_BIP125_RBF_SEQUENCE` and if we have a newer `src/policy/rbf.h` encapsulating the RBF-logic better to gather in the same place to avoid bugs where our components (wallet/mempool/etc) misinterpret policy/consensus rules. E.g the wallet applying the pre-bip113 semantic for finality see #17443.",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r691672020,691672020,src/util/rbf.h
ariard,2021-08-19 00:26:24,"If you're pointing to the exact standard rule, I think that's better to either textually quote it to minimize risks of inconsistency OR propose an amendment to the spec with your better wording.\n\nNote, exact standard quoting is a development practice heavily done by CL. E.g : https://github.com/ElementsProject/lightning/blob/4514d2a18098c9136d1b26b5028298f79028012e/lightningd/onchain_control.c",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r691690916,691690916,src/policy/rbf.h
ariard,2021-08-19 00:40:54,"I think a more accurate name would be ""VerifyAncestorCandidateConflictsDisjunction"".\n\nAlso `hash` could be `txid` to dissociate clearly from `wtxid`.\nAnd `(candidates to be replaced)` is a bit unclear imho as a the direct conflicts aren't mempool candidate anymore, they're are already in until the replacement succeeds, if it does.\n\nAlso maybe, this function could be made a helper in `txm",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r691695502,691695502,src/policy/rbf.h
glozow,2021-08-19 14:02:10,Yep! I've rebased #22677 on top of this PR so it's more clear that it would fix this problem.,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692140815,692140815,test/lint/lint-circular-dependencies.sh
jnewbery,2021-08-20 10:34:02,"I don't think this needs to mention mempool:\n\n```suggestion\n/** Determine whether a transaction is opting out of RBF. Mempool entries do not inherit\n```",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692845155,692845155,src/util/rbf.h
jnewbery,2021-08-20 10:34:28,"```suggestion\n * signaling from their ancestors in this implementation. */\n```",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692845356,692845356,src/util/rbf.h
jnewbery,2021-08-20 10:36:04,"In the final fixup commit, you could fix this to use current style:\n\n```suggestion\n    for (const CTxIn& txin : txConflicting.vin) {\n        if (txin.nSequence <= MAX_BIP125_RBF_SEQUENCE) return false;\n```",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692846284,692846284,src/util/rbf.cpp
jnewbery,2021-08-20 10:37:49,"In eb3bd36a8b _MOVEONLY: signal checking into policy/rbf_\n\nDon't add this new blank line.",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692847264,692847264,src/policy/rbf.cpp
jnewbery,2021-08-20 10:39:04,"Perhaps add a note to the commit log that this circular dependency is due to the txmempool->validation dependency, and that #22677 resolves it.",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692847949,692847949,test/lint/lint-circular-dependencies.sh
jnewbery,2021-08-20 12:02:20,"This is potentially a behavior change. Previously, these would get set to zero unconditionally. Now, they only get set if `fReplacementTransaction` is true.\n\nI think it'd be safer to default initialize `m_conflicting_fees` and `m_conflicting_size` to 0 in the struct member declarations, and remove these assignments.\n\nI might even go further and remove the `nConflictingFees` and `nConflicti",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692891251,692891251,src/validation.cpp
jnewbery,2021-08-20 12:03:59,sort includes :),https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692892064,692892064,src/policy/rbf.h
jnewbery,2021-08-20 12:06:12,"First include this file's header, then other headers in the project:\n\n```c++\n#include <policy/rbf.h>\n\n#include <consensus/validation.h>\n#include <logging.h>\n#include <policy/settings.h>\n#include <util/moneystr.h>\n#include <util/rbf.h>\n```",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692893230,692893230,src/policy/rbf.cpp
jnewbery,2021-08-20 12:12:57,"Consider updating this to current style in the fixup commit:\n\n```suggestion\n    uint64_t number_conflicting_tx{0};\n```\n\nor similar",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692897400,692897400,src/policy/rbf.cpp
jnewbery,2021-08-20 12:19:56,"Split this comment up:\n\n```suggestion\n        // Calculate all conflicting entries and enforce BIP125 rule 5.\n        if (!GetEntriesForRBF(tx, m_pool, setIterConflicting, state, allConflicting)) return false;\n        // Enforce BIP125 rule 2.\n        if (!HasNoNewUnconfirmed(tx, m_pool, setIterConflicting, state)) return false;\n```\n\n(The comment is added in 28e7da0363 _MOVEONLY:",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692901343,692901343,src/validation.cpp
jnewbery,2021-08-20 12:24:26,You don't actually need `logging.h`. You could just include `tinyformat.h`.,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692903895,692903895,src/policy/rbf.cpp
jnewbery,2021-08-20 12:27:52,"This seems like an odd detail to specify in the interface, when this function is only ever called with an empty `all_conflicts` set.",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692905894,692905894,src/policy/rbf.h
jnewbery,2021-08-20 12:31:25,Perhaps this should be named `GetEntriesForRBFConflicts()` or similar?,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692908052,692908052,src/policy/rbf.h
jnewbery,2021-08-20 12:33:50,"In fixup commit:\n\n```suggestion\n    for (unsigned int j = 0; j < tx.vin.size(); j++) {\n```",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692909522,692909522,src/policy/rbf.cpp
jnewbery,2021-08-20 12:37:58,"These are txids, not mempool entries:\n\n```suggestion\n * @param[in]   direct_conflicts    Set of txids for entries corresponding to the mempool conflicts\n *                                  (candidates to be replaced).\n```\n\nThis comment uses the wrong argument name in commit 4f656bb23c _MOVEONLY: check for disjoint conflicts and ancestors to policy/rbf_ (fixed in later commit)",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692912024,692912024,src/policy/rbf.h
jnewbery,2021-08-20 12:38:50,I agree that `txid` would be better than `hash` here (and for `PaysMoreThanConflicts()` below).,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692912546,692912546,src/policy/rbf.h
jnewbery,2021-08-20 12:39:21,"As below, the second argument isn't mempool entries.",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692912827,692912827,src/policy/rbf.h
jnewbery,2021-08-20 12:43:05,"Maybe worth adding a comment here that this is a consensus rule violation since the transaction is self-inconsistent, and can never be valid.",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692915252,692915252,src/policy/rbf.cpp
jnewbery,2021-08-20 12:58:43,Maybe explicitly mention BIP125 rule 3 in this comment.,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692925516,692925516,src/policy/rbf.cpp
jnewbery,2021-08-20 12:59:31,"Maybe explicitly mention BIP125 rule 4 in this comment. Also remove ""Finally"" - I guess that was there before because this was the final check in `PreChecks()`.",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692926040,692926040,src/policy/rbf.cpp
jnewbery,2021-08-20 13:02:30,Maybe explicitly mention that this is BIP125 rule 2.,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692928092,692928092,src/policy/rbf.cpp
jnewbery,2021-08-20 13:03:39,Maybe explicitly comment that this is BIP125 rule 1.,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692928855,692928855,src/util/rbf.cpp
jnewbery,2021-08-20 13:05:04,Maybe explicitly comment that this is BIP125 rule 5.,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692929833,692929833,src/policy/rbf.cpp
jnewbery,2021-08-20 13:16:32,"Since you're changing the parameter name already, consider:\n\n```suggestion\nbool IsRBFOptOut(const CTransaction& tx);\n```",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692937815,692937815,src/util/rbf.h
glozow,2021-08-20 14:28:49,"![image](https://user-images.githubusercontent.com/25183001/130248786-e8c84e2f-4932-4605-b372-fb5c9edb4976.png)\n",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692991925,692991925,src/policy/rbf.h
glozow,2021-08-20 14:31:03,https://github.com/bitcoin/bitcoin/pull/22290/commits/6c04bf5a60e2af86c326c4e65aba777d8bf768bb#diff-97c3a52bc5fad452d82670a7fd291800bae20c7bc35bb82686c2c0a4ea7b5b98R970-R972,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r692993619,692993619,src/policy/rbf.h
glozow,2021-08-20 17:05:43,Okie done,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693095550,693095550,test/lint/lint-circular-dependencies.sh
glozow,2021-08-20 17:06:11,"Deleted this, ended up just calling `SignalsOptInRBF` instead",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693095821,693095821,src/util/rbf.h
glozow,2021-08-20 17:07:00,(Doesn't apply anymore because I deleted the function),https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693096304,693096304,src/util/rbf.cpp
glozow,2021-08-20 17:07:24,Done,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693096529,693096529,src/validation.cpp
glozow,2021-08-20 17:08:32,"Actually decided to remove this dependency because I realized it's not the right place to be deciding what `TxValidationResult` to return (should be in validation.cpp)\nBut yes, sorted includes :salute:",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693097179,693097179,src/policy/rbf.h
glozow,2021-08-20 17:08:56,"Done, good point",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693097385,693097385,src/validation.cpp
glozow,2021-08-20 17:09:08,Switched to tinyformat,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693097509,693097509,src/policy/rbf.cpp
glozow,2021-08-20 17:14:19,Marked all of them with their corresponding BIP125 rule numbers :+1: ,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693100416,693100416,src/policy/rbf.cpp
glozow,2021-08-20 17:14:44,good eyes. added a comment,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693100683,693100683,src/policy/rbf.cpp
glozow,2021-08-20 17:15:01,Done and fixed the commit jumping,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693100874,693100874,src/policy/rbf.h
glozow,2021-08-20 17:15:18,I named it `GetEntriesForConflicts()`,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693101024,693101024,src/policy/rbf.h
glozow,2021-08-23 12:27:43,"I didn't end up renaming `hash` to `txid` because I want to be able to pass in either package id or txid in the future :thinking: let me know if it's too weird though, and I can change it",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693925667,693925667,src/policy/rbf.h
glozow,2021-08-23 12:28:23,"Makes sense, quoted BIP125",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r693926118,693926118,src/policy/rbf.h
jnewbery,2021-08-23 14:24:38,sort plz,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694020472,694020472,src/policy/rbf.cpp
jnewbery,2021-08-23 14:51:16,"You lost the `m_reject_reason`:\n\n```suggestion\n            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, ""too many replacement transactions"", err_string);\n```\n\n(this is why default arguments are evil, especially when you have multiple default arguments of the same type or of types that can be implicitly cast to each other)",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694045328,694045328,src/validation.cpp
jnewbery,2021-08-23 15:04:38,"I'd personally prefer fewer surprise tools that help us later, since it's easy enough to update comments/rename parameters when you actually need that functionality. No big deal either way though!",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694057353,694057353,src/policy/rbf.h
jnewbery,2021-08-23 15:10:04,(not addressed),https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694062053,694062053,src/policy/rbf.cpp
jnewbery,2021-08-23 15:12:22,"(not addressed - this comment still refers to ""two sets of mempool entries"")",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694063942,694063942,src/policy/rbf.h
glozow,2021-08-24 15:11:32,renamed to txid,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694947697,694947697,src/policy/rbf.h
glozow,2021-08-24 15:12:22,Fixt,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694948488,694948488,src/policy/rbf.cpp
glozow,2021-08-24 15:12:38,:pleading_face: Added it back,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694948699,694948699,src/validation.cpp
glozow,2021-08-24 15:13:04,"now calling it ""two sets of transactions (a set of mempool entries and a set of txids)""",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694949052,694949052,src/policy/rbf.h
glozow,2021-08-24 15:13:29,(will fix in a later PR when scripted-diffing the validation.cpp file),https://github.com/bitcoin/bitcoin/pull/22675#discussion_r694949459,694949459,src/policy/rbf.cpp
MarcoFalke,2021-09-06 09:09:37,"ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3: Would be nice to not use a global here. Testability is one of the motivations in OP, but using globals makes testing actually harder.",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r702737511,702737511,src/policy/rbf.cpp
glozow,2021-09-06 11:15:52,Yes definitely agree - I can do this in the followup PR.,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r702820423,702820423,src/policy/rbf.cpp
glozow,2021-09-08 08:57:41,Done in https://github.com/bitcoin/bitcoin/pull/22855/commits/7ccaac6c5332b8a93c9b5c7103f846854ee595d5,https://github.com/bitcoin/bitcoin/pull/22675#discussion_r704195620,704195620,src/policy/rbf.cpp
ariard,2021-09-10 22:19:22,"Note, as previously mentioned, I think this is where we do have additional divergences w.r.t to bip125.\n\nRule 3 says ""The replacement transaction pays an absolute fee of at least the sum paid by the original transactions"".\n\nI think original transactions as to be interpreted as the set of directly conflicted transactions, i.e sharing inputs with the replacement transaction. At least Rule 5 ",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r706498561,706498561,src/policy/rbf.h
ariard,2021-09-10 22:20:41,"In case of code relocation like this one, I think it could ease understanding if a reference to `PreChecks` is added, where the calls to `CalculateMempoolAncestors` happen. ",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r706498920,706498920,src/policy/rbf.cpp
darosior,2021-09-14 13:24:46,"You are correct with regard to the implementation. However BIP125 says:\n> The replacement transaction pays an absolute fee of at least the sum paid by the original transactions\n\nWhich is plural, so i think the implementation is in line with this rule.\nOf course, i agree that it would be a nice place to look for bugs in re-implementations :)",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r708265563,708265563,src/policy/rbf.h
glozow,2021-09-15 10:41:37,"At least wrt fees, it wouldn't make much sense to not consider the descendants of direct conflicts. You can very easily end up replacing higher-fee packages with lower-fee ones. As such, I don't expect that other implementations are interpreting the BIP wording as excluding descendants. Good shout, though, since that would be a pretty juicy bug! :bug:\n\nwrt wording used in these comments, I hav",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r709062666,709062666,src/policy/rbf.h
ariard,2021-09-26 21:20:48,"> Which is plural, so i think the implementation is in line with this rule.\n\nYes ""original transactions"" is plural though Rule 5 explicitly dissociates ""original transactions to be replaced and their descendant transactions"". Like the directly-replaced transactions _and_ their descendants as two different things :) ?\n\nI still think this is confusing and our implementation is _not_ in line ",https://github.com/bitcoin/bitcoin/pull/22675#discussion_r716263536,716263536,src/policy/rbf.h
