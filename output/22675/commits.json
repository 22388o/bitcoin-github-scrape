[
  {
    "sha": "f8ad2a57c61d1e817e2445226688e03080fc8688",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGFkMmE1N2M2MWQxZTgxN2UyNDQ1MjI2Njg4ZTAzMDgwZmM4Njg4",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-02T14:27:37Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-02T15:23:25Z"
      },
      "message": "Make GetEntriesForConflicts return std::optional\n\nAvoids reusing err_string.",
      "tree": {
        "sha": "2c10a7d397abd8aa7173c51f9064d02959cdc149",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c10a7d397abd8aa7173c51f9064d02959cdc149"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8ad2a57c61d1e817e2445226688e03080fc8688",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8ad2a57c61d1e817e2445226688e03080fc8688",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8ad2a57c61d1e817e2445226688e03080fc8688",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8ad2a57c61d1e817e2445226688e03080fc8688/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3a2b8c29fda5d924726d3087535bd34af7012b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3a2b8c29fda5d924726d3087535bd34af7012b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3a2b8c29fda5d924726d3087535bd34af7012b6"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 12,
      "deletions": 15
    },
    "files": [
      {
        "sha": "3ff4c1f9c2b2ebbb127be8bcbf6182d951ce91f4",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ad2a57c61d1e817e2445226688e03080fc8688/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ad2a57c61d1e817e2445226688e03080fc8688/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=f8ad2a57c61d1e817e2445226688e03080fc8688",
        "patch": "@@ -47,11 +47,10 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n     return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n }\n \n-bool GetEntriesForConflicts(const CTransaction& tx,\n+std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx,\n                             CTxMemPool& m_pool,\n                             const CTxMemPool::setEntries& setIterConflicting,\n-                            CTxMemPool::setEntries& allConflicting,\n-                            std::string& err_string)\n+                            CTxMemPool::setEntries& allConflicting)\n {\n     AssertLockHeld(m_pool.cs);\n     const uint256 hash = tx.GetHash();\n@@ -62,18 +61,17 @@ bool GetEntriesForConflicts(const CTransaction& tx,\n         // but we just want to be conservative to avoid doing too much\n         // work.\n         if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n-            err_string = strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n+            return strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n                         hash.ToString(),\n                         nConflictingCount,\n                         MAX_BIP125_REPLACEMENT_CANDIDATES);\n-            return false;\n         }\n     }\n     // If not too many to replace, then calculate the set of\n     // transactions that would have to be evicted\n     for (CTxMemPool::txiter it : setIterConflicting) {\n         m_pool.CalculateDescendants(it, allConflicting);\n     }\n-    return true;\n+    return std::nullopt;\n }\n "
      },
      {
        "sha": "2a41ca889241f3dbd43003c281e371af0f29b1ba",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ad2a57c61d1e817e2445226688e03080fc8688/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ad2a57c61d1e817e2445226688e03080fc8688/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=f8ad2a57c61d1e817e2445226688e03080fc8688",
        "patch": "@@ -40,14 +40,13 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n  * mempool must not exceed a total of 100 transactions.\" Quit as early as possible. There cannot be\n  * more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n  * @param[in]   setIterConflicting  The set of iterators to mempool entries.\n- * @param[out]  err_string          Used to return errors, if any.\n  * @param[out]  allConflicting      Populated with all the mempool entries that would be replaced,\n  *                                  which includes descendants of setIterConflicting. Not cleared at\n  *                                  the start; any existing mempool entries will remain in the set.\n- * @returns false if Rule 5 is broken.\n+ * @returns an error message if Rule #5 is broken, otherwise a std::nullopt.\n  */\n-bool GetEntriesForConflicts(const CTransaction& tx, CTxMemPool& m_pool,\n-                            const CTxMemPool::setEntries& setIterConflicting,\n-                            CTxMemPool::setEntries& allConflicting,\n-                            std::string& err_string) EXCLUSIVE_LOCKS_REQUIRED(m_pool.cs);\n+std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx, CTxMemPool& m_pool,\n+                                                  const CTxMemPool::setEntries& setIterConflicting,\n+                                                  CTxMemPool::setEntries& allConflicting)\n+                                                  EXCLUSIVE_LOCKS_REQUIRED(m_pool.cs);\n #endif // BITCOIN_POLICY_RBF_H"
      },
      {
        "sha": "6f28c42db3512e4d057806372ecccda13a539883",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ad2a57c61d1e817e2445226688e03080fc8688/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ad2a57c61d1e817e2445226688e03080fc8688/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f8ad2a57c61d1e817e2445226688e03080fc8688",
        "patch": "@@ -789,7 +789,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     fReplacementTransaction = setConflicts.size();\n     if (fReplacementTransaction)\n     {\n-        std::string err_string;\n         CFeeRate newFeeRate(nModifiedFees, nSize);\n         for (const auto& mi : setIterConflicting) {\n             // Don't allow the replacement to reduce the feerate of the\n@@ -818,8 +817,9 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         }\n \n         // Calculate all conflicting entries and enforce Rule #5.\n-        if (!GetEntriesForConflicts(tx, m_pool, setIterConflicting, allConflicting, err_string)) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too many potential replacements\", err_string);\n+        if (const auto err_string{GetEntriesForConflicts(tx, m_pool, setIterConflicting, allConflicting)}) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n+                                 \"too many potential replacements\", *err_string);\n         }\n \n         // Check if it's economically rational to mine this transaction rather"
      }
    ]
  },
  {
    "sha": "7b60c02b7d5e2ab12288393d2258873ebb26d811",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjYwYzAyYjdkNWUyYWIxMjI4ODM5M2QyMjU4ODczZWJiMjZkODEx",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-03T12:13:43Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-02T15:23:26Z"
      },
      "message": "MOVEONLY: BIP125 Rule 2 to policy/rbf",
      "tree": {
        "sha": "3ede75858f8f52b94a2dfeef45806b100e23d93d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ede75858f8f52b94a2dfeef45806b100e23d93d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b60c02b7d5e2ab12288393d2258873ebb26d811",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b60c02b7d5e2ab12288393d2258873ebb26d811",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b60c02b7d5e2ab12288393d2258873ebb26d811",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b60c02b7d5e2ab12288393d2258873ebb26d811/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8ad2a57c61d1e817e2445226688e03080fc8688",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8ad2a57c61d1e817e2445226688e03080fc8688",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8ad2a57c61d1e817e2445226688e03080fc8688"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 49,
      "deletions": 32
    },
    "files": [
      {
        "sha": "f6b3bc783a72c639d12ffbafd0df2b7b1d275b2a",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b60c02b7d5e2ab12288393d2258873ebb26d811/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b60c02b7d5e2ab12288393d2258873ebb26d811/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=7b60c02b7d5e2ab12288393d2258873ebb26d811",
        "patch": "@@ -75,3 +75,40 @@ std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx,\n     return std::nullopt;\n }\n \n+std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n+                                               const CTxMemPool& m_pool,\n+                                               const CTxMemPool::setEntries& setIterConflicting)\n+{\n+    AssertLockHeld(m_pool.cs);\n+    std::set<uint256> setConflictsParents;\n+    for (const auto& mi : setIterConflicting) {\n+        for (const CTxIn &txin : mi->GetTx().vin)\n+        {\n+            setConflictsParents.insert(txin.prevout.hash);\n+        }\n+    }\n+\n+    for (unsigned int j = 0; j < tx.vin.size(); j++)\n+    {\n+        // We don't want to accept replacements that require low\n+        // feerate junk to be mined first. Ideally we'd keep track of\n+        // the ancestor feerates and make the decision based on that,\n+        // but for now requiring all new inputs to be confirmed works.\n+        //\n+        // Note that if you relax this to make RBF a little more useful,\n+        // this may break the CalculateMempoolAncestors RBF relaxation,\n+        // above. See the comment above the first CalculateMempoolAncestors\n+        // call for more info.\n+        if (!setConflictsParents.count(tx.vin[j].prevout.hash))\n+        {\n+            // Rather than check the UTXO set - potentially expensive -\n+            // it's cheaper to just check if the new input refers to a\n+            // tx that's in the mempool.\n+            if (m_pool.exists(tx.vin[j].prevout.hash)) {\n+                return strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n+                                 tx.GetHash().ToString(), j);\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}"
      },
      {
        "sha": "0f9a3d9856514d9095ecee16fe611ce9e923136a",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b60c02b7d5e2ab12288393d2258873ebb26d811/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b60c02b7d5e2ab12288393d2258873ebb26d811/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=7b60c02b7d5e2ab12288393d2258873ebb26d811",
        "patch": "@@ -49,4 +49,11 @@ std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx, CTxMem\n                                                   const CTxMemPool::setEntries& setIterConflicting,\n                                                   CTxMemPool::setEntries& allConflicting)\n                                                   EXCLUSIVE_LOCKS_REQUIRED(m_pool.cs);\n+\n+/** BIP125 Rule #2: \"The replacement transaction may only include an unconfirmed input if that input\n+ * was included in one of the original transactions.\"\n+ * @returns error message if Rule #2 is broken, otherwise std::nullopt. */\n+std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& m_pool,\n+                                               const CTxMemPool::setEntries& setIterConflicting)\n+                                               EXCLUSIVE_LOCKS_REQUIRED(m_pool.cs);\n #endif // BITCOIN_POLICY_RBF_H"
      },
      {
        "sha": "20970bceb8fcafcaeb2ddde0d8d099f38c4038c9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 32,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b60c02b7d5e2ab12288393d2258873ebb26d811/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b60c02b7d5e2ab12288393d2258873ebb26d811/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7b60c02b7d5e2ab12288393d2258873ebb26d811",
        "patch": "@@ -821,6 +821,11 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n                                  \"too many potential replacements\", *err_string);\n         }\n+        // Enforce Rule #2.\n+        if (const auto err_string{HasNoNewUnconfirmed(tx, m_pool, setIterConflicting)}) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n+                                 \"replacement-adds-unconfirmed\", *err_string);\n+        }\n \n         // Check if it's economically rational to mine this transaction rather\n         // than the ones it replaces.\n@@ -829,38 +834,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n             nConflictingSize += it->GetTxSize();\n         }\n \n-        std::set<uint256> setConflictsParents;\n-        for (const auto& mi : setIterConflicting) {\n-            for (const CTxIn &txin : mi->GetTx().vin)\n-            {\n-                setConflictsParents.insert(txin.prevout.hash);\n-            }\n-        }\n-\n-        for (unsigned int j = 0; j < tx.vin.size(); j++)\n-        {\n-            // We don't want to accept replacements that require low\n-            // feerate junk to be mined first. Ideally we'd keep track of\n-            // the ancestor feerates and make the decision based on that,\n-            // but for now requiring all new inputs to be confirmed works.\n-            //\n-            // Note that if you relax this to make RBF a little more useful,\n-            // this may break the CalculateMempoolAncestors RBF relaxation,\n-            // above. See the comment above the first CalculateMempoolAncestors\n-            // call for more info.\n-            if (!setConflictsParents.count(tx.vin[j].prevout.hash))\n-            {\n-                // Rather than check the UTXO set - potentially expensive -\n-                // it's cheaper to just check if the new input refers to a\n-                // tx that's in the mempool.\n-                if (m_pool.exists(tx.vin[j].prevout.hash)) {\n-                    return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"replacement-adds-unconfirmed\",\n-                            strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n-                                hash.ToString(), j));\n-                }\n-            }\n-        }\n-\n         // The replacement must pay greater fees than the transactions it\n         // replaces - if we did the bandwidth used by those conflicting\n         // transactions would not be paid for."
      }
    ]
  },
  {
    "sha": "3f033f01a6b0f7772ae1b21044903b8f4249ad08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjAzM2YwMWE2YjBmNzc3MmFlMWIyMTA0NDkwM2I4ZjQyNDlhZDA4",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-27T14:55:25Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-02T15:23:27Z"
      },
      "message": "MOVEONLY: check for disjoint conflicts and ancestors to policy/rbf\n\nThis checks that a transaction isn't trying to replace something it\nsupposedly depends on.",
      "tree": {
        "sha": "9827288b5d98a2d0aa8423ac14f5d835f0969b2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9827288b5d98a2d0aa8423ac14f5d835f0969b2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f033f01a6b0f7772ae1b21044903b8f4249ad08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f033f01a6b0f7772ae1b21044903b8f4249ad08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f033f01a6b0f7772ae1b21044903b8f4249ad08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f033f01a6b0f7772ae1b21044903b8f4249ad08/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b60c02b7d5e2ab12288393d2258873ebb26d811",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b60c02b7d5e2ab12288393d2258873ebb26d811",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b60c02b7d5e2ab12288393d2258873ebb26d811"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 32,
      "deletions": 10
    },
    "files": [
      {
        "sha": "95b74123c94e29ff95bab772f63120383f691314",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f033f01a6b0f7772ae1b21044903b8f4249ad08/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f033f01a6b0f7772ae1b21044903b8f4249ad08/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=3f033f01a6b0f7772ae1b21044903b8f4249ad08",
        "patch": "@@ -112,3 +112,20 @@ std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> EntriesAndTxidsDisjoint(const CTxMemPool::setEntries& setAncestors,\n+                                                   const std::set<uint256>& setConflicts,\n+                                                   const uint256& txid)\n+{\n+    for (CTxMemPool::txiter ancestorIt : setAncestors)\n+    {\n+        const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n+        if (setConflicts.count(hashAncestor))\n+        {\n+            return strprintf(\"%s spends conflicting transaction %s\",\n+                             txid.ToString(),\n+                             hashAncestor.ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}"
      },
      {
        "sha": "6c4e21895915a9734fc0c5069d975e7db659ab05",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f033f01a6b0f7772ae1b21044903b8f4249ad08/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f033f01a6b0f7772ae1b21044903b8f4249ad08/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=3f033f01a6b0f7772ae1b21044903b8f4249ad08",
        "patch": "@@ -56,4 +56,17 @@ std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx, CTxMem\n std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& m_pool,\n                                                const CTxMemPool::setEntries& setIterConflicting)\n                                                EXCLUSIVE_LOCKS_REQUIRED(m_pool.cs);\n+\n+/** Check the intersection between two sets of transactions (a set of mempool entries and a set of\n+ * txids) to make sure they are disjoint.\n+ * @param[in]   setAncestors    Set of mempool entries corresponding to ancestors of the\n+ *                              replacement transactions.\n+ * @param[in]   setConflicts    Set of txids corresponding to the mempool conflicts\n+ *                              (candidates to be replaced).\n+ * @param[in]   txid            Transaction ID, included in the error message if violation occurs.\n+ * @returns error message if the sets intersect, std::nullopt if they are disjoint.\n+ */\n+std::optional<std::string> EntriesAndTxidsDisjoint(const CTxMemPool::setEntries& setAncestors,\n+                                                   const std::set<uint256>& setConflicts,\n+                                                   const uint256& txid);\n #endif // BITCOIN_POLICY_RBF_H"
      },
      {
        "sha": "710fe2d8732be65ce0966507d3b60658f97ff671",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f033f01a6b0f7772ae1b21044903b8f4249ad08/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f033f01a6b0f7772ae1b21044903b8f4249ad08/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3f033f01a6b0f7772ae1b21044903b8f4249ad08",
        "patch": "@@ -770,16 +770,8 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // that we have the set of all ancestors we can detect this\n     // pathological case by making sure setConflicts and setAncestors don't\n     // intersect.\n-    for (CTxMemPool::txiter ancestorIt : setAncestors)\n-    {\n-        const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n-        if (setConflicts.count(hashAncestor))\n-        {\n-            return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\",\n-                    strprintf(\"%s spends conflicting transaction %s\",\n-                        hash.ToString(),\n-                        hashAncestor.ToString()));\n-        }\n+    if (const auto err_string{EntriesAndTxidsDisjoint(setAncestors, setConflicts, hash)}) {\n+        return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n "
      }
    ]
  },
  {
    "sha": "9c2f9f89846264b503d5573341bb78cf609cbc5e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzJmOWY4OTg0NjI2NGI1MDNkNTU3MzM0MWJiNzhjZjYwOWNiYzVl",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-11T14:51:27Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-02T15:23:27Z"
      },
      "message": "MOVEONLY: check that fees > direct conflicts to policy/rbf",
      "tree": {
        "sha": "80134146612422e568eb61bc4c53cbe67d187f43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80134146612422e568eb61bc4c53cbe67d187f43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c2f9f89846264b503d5573341bb78cf609cbc5e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c2f9f89846264b503d5573341bb78cf609cbc5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c2f9f89846264b503d5573341bb78cf609cbc5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c2f9f89846264b503d5573341bb78cf609cbc5e/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f033f01a6b0f7772ae1b21044903b8f4249ad08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f033f01a6b0f7772ae1b21044903b8f4249ad08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f033f01a6b0f7772ae1b21044903b8f4249ad08"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 43,
      "deletions": 24
    },
    "files": [
      {
        "sha": "5d1db6b58d5004cf7ecc6ad71c28b226afccdd30",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c2f9f89846264b503d5573341bb78cf609cbc5e/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c2f9f89846264b503d5573341bb78cf609cbc5e/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=9c2f9f89846264b503d5573341bb78cf609cbc5e",
        "patch": "@@ -129,3 +129,35 @@ std::optional<std::string> EntriesAndTxidsDisjoint(const CTxMemPool::setEntries&\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& setIterConflicting,\n+                                                 CFeeRate newFeeRate,\n+                                                 const uint256& hash)\n+{\n+    for (const auto& mi : setIterConflicting) {\n+        // Don't allow the replacement to reduce the feerate of the\n+        // mempool.\n+        //\n+        // We usually don't want to accept replacements with lower\n+        // feerates than what they replaced as that would lower the\n+        // feerate of the next block. Requiring that the feerate always\n+        // be increased is also an easy-to-reason about way to prevent\n+        // DoS attacks via replacements.\n+        //\n+        // We only consider the feerates of transactions being directly\n+        // replaced, not their indirect descendants. While that does\n+        // mean high feerate children are ignored when deciding whether\n+        // or not to replace, we do require the replacement to pay more\n+        // overall fees too, mitigating most cases.\n+        CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());\n+        if (newFeeRate <= oldFeeRate)\n+        {\n+            return strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n+                             hash.ToString(),\n+                             newFeeRate.ToString(),\n+                             oldFeeRate.ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+"
      },
      {
        "sha": "2c548152b59a0b8f615b8ad5090c9fa16a6df7d6",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c2f9f89846264b503d5573341bb78cf609cbc5e/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c2f9f89846264b503d5573341bb78cf609cbc5e/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=9c2f9f89846264b503d5573341bb78cf609cbc5e",
        "patch": "@@ -69,4 +69,13 @@ std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx, const CTx\n std::optional<std::string> EntriesAndTxidsDisjoint(const CTxMemPool::setEntries& setAncestors,\n                                                    const std::set<uint256>& setConflicts,\n                                                    const uint256& txid);\n+\n+/** Check that the feerate of the replacement transaction(s) is higher than the feerate of each\n+ * of the transactions in setIterConflicting.\n+ * @param[in]   setIterConflicting  The set of mempool entries.\n+ * @returns error message if fees insufficient, otherwise std::nullopt.\n+ */\n+std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& setIterConflicting,\n+                                                 CFeeRate newFeeRate, const uint256& hash);\n+\n #endif // BITCOIN_POLICY_RBF_H"
      },
      {
        "sha": "b0403bffd26f8e2de2cfdc75acfca7310722d841",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 24,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c2f9f89846264b503d5573341bb78cf609cbc5e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c2f9f89846264b503d5573341bb78cf609cbc5e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9c2f9f89846264b503d5573341bb78cf609cbc5e",
        "patch": "@@ -782,30 +782,8 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     if (fReplacementTransaction)\n     {\n         CFeeRate newFeeRate(nModifiedFees, nSize);\n-        for (const auto& mi : setIterConflicting) {\n-            // Don't allow the replacement to reduce the feerate of the\n-            // mempool.\n-            //\n-            // We usually don't want to accept replacements with lower\n-            // feerates than what they replaced as that would lower the\n-            // feerate of the next block. Requiring that the feerate always\n-            // be increased is also an easy-to-reason about way to prevent\n-            // DoS attacks via replacements.\n-            //\n-            // We only consider the feerates of transactions being directly\n-            // replaced, not their indirect descendants. While that does\n-            // mean high feerate children are ignored when deciding whether\n-            // or not to replace, we do require the replacement to pay more\n-            // overall fees too, mitigating most cases.\n-            CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());\n-            if (newFeeRate <= oldFeeRate)\n-            {\n-                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n-                        strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n-                            hash.ToString(),\n-                            newFeeRate.ToString(),\n-                            oldFeeRate.ToString()));\n-            }\n+        if (const auto err_string{PaysMoreThanConflicts(setIterConflicting, newFeeRate, hash)}) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n         }\n \n         // Calculate all conflicting entries and enforce Rule #5."
      }
    ]
  },
  {
    "sha": "ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzc2MWYwYTIzYzljNDY5ZmEwMDg4NWVkZjNkNWM5YWU3YzZhMmIz",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-11T14:51:41Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-02T15:23:27Z"
      },
      "message": "MOVEONLY: fee checks (Rules 3 and 4) to policy/rbf",
      "tree": {
        "sha": "02267b82f3a9754be5d06e6769b1f8d70c129af4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02267b82f3a9754be5d06e6769b1f8d70c129af4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c2f9f89846264b503d5573341bb78cf609cbc5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c2f9f89846264b503d5573341bb78cf609cbc5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c2f9f89846264b503d5573341bb78cf609cbc5e"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 43,
      "deletions": 22
    },
    "files": [
      {
        "sha": "1e03e2331aa18903370c6d353a0701a5cbf8119f",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3",
        "patch": "@@ -161,3 +161,29 @@ std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& s\n     return std::nullopt;\n }\n \n+std::optional<std::string> PaysForRBF(CAmount nConflictingFees,\n+                                      CAmount nModifiedFees,\n+                                      size_t nSize,\n+                                      const uint256& hash)\n+{\n+    // The replacement must pay greater fees than the transactions it\n+    // replaces - if we did the bandwidth used by those conflicting\n+    // transactions would not be paid for.\n+    if (nModifiedFees < nConflictingFees)\n+    {\n+        return strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n+                         hash.ToString(), FormatMoney(nModifiedFees), FormatMoney(nConflictingFees));\n+    }\n+\n+    // Finally in addition to paying more fees than the conflicts the\n+    // new transaction must pay for its own bandwidth.\n+    CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n+    if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))\n+    {\n+        return strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n+                         hash.ToString(),\n+                         FormatMoney(nDeltaFees),\n+                         FormatMoney(::incrementalRelayFee.GetFee(nSize)));\n+    }\n+    return std::nullopt;\n+}"
      },
      {
        "sha": "d32ba010fba084a2f2b8770242a398e61f84f528",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3",
        "patch": "@@ -78,4 +78,18 @@ std::optional<std::string> EntriesAndTxidsDisjoint(const CTxMemPool::setEntries&\n std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& setIterConflicting,\n                                                  CFeeRate newFeeRate, const uint256& hash);\n \n+/** Enforce BIP125 Rule #3 \"The replacement transaction pays an absolute fee of at least the sum\n+ * paid by the original transactions.\" Enforce BIP125 Rule #4 \"The replacement transaction must also\n+ * pay for its own bandwidth at or above the rate set by the node's minimum relay fee setting.\"\n+ * @param[in]   nConflictingFees    Total modified fees of original transaction(s).\n+ * @param[in]   nModifiedFees       Total modified fees of replacement transaction(s).\n+ * @param[in]   nSize               Total virtual size of replacement transaction(s).\n+ * @param[in]   hash                Transaction ID, included in the error message if violation occurs.\n+ * @returns error string if fees are insufficient, otherwise std::nullopt.\n+ */\n+std::optional<std::string> PaysForRBF(CAmount nConflictingFees,\n+                                      CAmount nModifiedFees,\n+                                      size_t nSize,\n+                                      const uint256& hash);\n+\n #endif // BITCOIN_POLICY_RBF_H"
      },
      {
        "sha": "e1d218e3589edd805c79fdd9c7d54edb8edc2ac9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 22,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3",
        "patch": "@@ -798,32 +798,13 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         }\n \n         // Check if it's economically rational to mine this transaction rather\n-        // than the ones it replaces.\n+        // than the ones it replaces. Enforce Rules #3 and #4.\n         for (CTxMemPool::txiter it : allConflicting) {\n             nConflictingFees += it->GetModifiedFee();\n             nConflictingSize += it->GetTxSize();\n         }\n-\n-        // The replacement must pay greater fees than the transactions it\n-        // replaces - if we did the bandwidth used by those conflicting\n-        // transactions would not be paid for.\n-        if (nModifiedFees < nConflictingFees)\n-        {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n-                    strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n-                        hash.ToString(), FormatMoney(nModifiedFees), FormatMoney(nConflictingFees)));\n-        }\n-\n-        // Finally in addition to paying more fees than the conflicts the\n-        // new transaction must pay for its own bandwidth.\n-        CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n-        if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))\n-        {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\",\n-                    strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n-                        hash.ToString(),\n-                        FormatMoney(nDeltaFees),\n-                        FormatMoney(::incrementalRelayFee.GetFee(nSize))));\n+        if (const auto err_string{PaysForRBF(nConflictingFees, nModifiedFees, nSize, hash)}) {\n+            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n         }\n     }\n     return true;"
      }
    ]
  },
  {
    "sha": "fa47622e8dc66bec9ea690aec3f0999108d76dc9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQ3NjIyZThkYzY2YmVjOWVhNjkwYWVjM2YwOTk5MTA4ZDc2ZGM5",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-16T09:19:15Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-02T15:23:27Z"
      },
      "message": "scripted-diff: rename variables in policy/rbf\n\n\"Fee Delta\" is already a term used for prioritizing transactions:\nmodified = base fees + delta\n\nHere, delta also means the difference between original and modified replacement fees:\nnDeltaFees = (original_base + original_delta) - (replacement_base + replacement_delta)\n\nThis is insanely confusing. Also, since mempool is no longer a member of a\nclass (MemPoolAccept.m_pool), the \"m\" prefix is unnecessary. The rest are\nclarity/style-focused changes to already-touched lines.\n\n-BEGIN VERIFY SCRIPT-\n\nren() { sed -i \"s/\\<$1\\>/$2/g\" src/policy/rbf* ; }\n\nren nDeltaFees additional_fees\nren m_pool pool\n\nren nSize replacement_vsize\nren nModifiedFees replacement_fees\nren nConflictingFees original_fees\nren oldFeeRate original_feerate\nren newFeeRate replacement_feerate\n\nren setAncestors ancestors\nren setIterConflicting iters_conflicting\nren setConflictsParents parents_of_conflicts\nren setConflicts direct_conflicts\nren allConflicting all_conflicts\n\nsed -i \"s/ hash\\b/ txid/g\" src/policy/rbf*\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "48a5b01e6b6463d3a5e19e836b5686a9015b233b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48a5b01e6b6463d3a5e19e836b5686a9015b233b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa47622e8dc66bec9ea690aec3f0999108d76dc9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa47622e8dc66bec9ea690aec3f0999108d76dc9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa47622e8dc66bec9ea690aec3f0999108d76dc9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa47622e8dc66bec9ea690aec3f0999108d76dc9/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac761f0a23c9c469fa00885edf3d5c9ae7c6a2b3"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 71,
      "deletions": 71
    },
    "files": [
      {
        "sha": "8fe897dcea9529dc01255723b5eea47e2f5a8644",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 44,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa47622e8dc66bec9ea690aec3f0999108d76dc9/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa47622e8dc66bec9ea690aec3f0999108d76dc9/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=fa47622e8dc66bec9ea690aec3f0999108d76dc9",
        "patch": "@@ -13,7 +13,7 @@ RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool)\n {\n     AssertLockHeld(pool.cs);\n \n-    CTxMemPool::setEntries setAncestors;\n+    CTxMemPool::setEntries ancestors;\n \n     // First check the transaction itself.\n     if (SignalsOptInRBF(tx)) {\n@@ -31,9 +31,9 @@ RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool)\n     uint64_t noLimit = std::numeric_limits<uint64_t>::max();\n     std::string dummy;\n     CTxMemPoolEntry entry = *pool.mapTx.find(tx.GetHash());\n-    pool.CalculateMemPoolAncestors(entry, setAncestors, noLimit, noLimit, noLimit, noLimit, dummy, false);\n+    pool.CalculateMemPoolAncestors(entry, ancestors, noLimit, noLimit, noLimit, noLimit, dummy, false);\n \n-    for (CTxMemPool::txiter it : setAncestors) {\n+    for (CTxMemPool::txiter it : ancestors) {\n         if (SignalsOptInRBF(it->GetTx())) {\n             return RBFTransactionState::REPLACEABLE_BIP125;\n         }\n@@ -48,43 +48,43 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx)\n }\n \n std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx,\n-                            CTxMemPool& m_pool,\n-                            const CTxMemPool::setEntries& setIterConflicting,\n-                            CTxMemPool::setEntries& allConflicting)\n+                            CTxMemPool& pool,\n+                            const CTxMemPool::setEntries& iters_conflicting,\n+                            CTxMemPool::setEntries& all_conflicts)\n {\n-    AssertLockHeld(m_pool.cs);\n-    const uint256 hash = tx.GetHash();\n+    AssertLockHeld(pool.cs);\n+    const uint256 txid = tx.GetHash();\n     uint64_t nConflictingCount = 0;\n-    for (const auto& mi : setIterConflicting) {\n+    for (const auto& mi : iters_conflicting) {\n         nConflictingCount += mi->GetCountWithDescendants();\n         // This potentially overestimates the number of actual descendants\n         // but we just want to be conservative to avoid doing too much\n         // work.\n         if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n             return strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                        hash.ToString(),\n+                        txid.ToString(),\n                         nConflictingCount,\n                         MAX_BIP125_REPLACEMENT_CANDIDATES);\n         }\n     }\n     // If not too many to replace, then calculate the set of\n     // transactions that would have to be evicted\n-    for (CTxMemPool::txiter it : setIterConflicting) {\n-        m_pool.CalculateDescendants(it, allConflicting);\n+    for (CTxMemPool::txiter it : iters_conflicting) {\n+        pool.CalculateDescendants(it, all_conflicts);\n     }\n     return std::nullopt;\n }\n \n std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n-                                               const CTxMemPool& m_pool,\n-                                               const CTxMemPool::setEntries& setIterConflicting)\n+                                               const CTxMemPool& pool,\n+                                               const CTxMemPool::setEntries& iters_conflicting)\n {\n-    AssertLockHeld(m_pool.cs);\n-    std::set<uint256> setConflictsParents;\n-    for (const auto& mi : setIterConflicting) {\n+    AssertLockHeld(pool.cs);\n+    std::set<uint256> parents_of_conflicts;\n+    for (const auto& mi : iters_conflicting) {\n         for (const CTxIn &txin : mi->GetTx().vin)\n         {\n-            setConflictsParents.insert(txin.prevout.hash);\n+            parents_of_conflicts.insert(txin.prevout.hash);\n         }\n     }\n \n@@ -99,12 +99,12 @@ std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n         // this may break the CalculateMempoolAncestors RBF relaxation,\n         // above. See the comment above the first CalculateMempoolAncestors\n         // call for more info.\n-        if (!setConflictsParents.count(tx.vin[j].prevout.hash))\n+        if (!parents_of_conflicts.count(tx.vin[j].prevout.hash))\n         {\n             // Rather than check the UTXO set - potentially expensive -\n             // it's cheaper to just check if the new input refers to a\n             // tx that's in the mempool.\n-            if (m_pool.exists(tx.vin[j].prevout.hash)) {\n+            if (pool.exists(tx.vin[j].prevout.hash)) {\n                 return strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n                                  tx.GetHash().ToString(), j);\n             }\n@@ -113,14 +113,14 @@ std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n     return std::nullopt;\n }\n \n-std::optional<std::string> EntriesAndTxidsDisjoint(const CTxMemPool::setEntries& setAncestors,\n-                                                   const std::set<uint256>& setConflicts,\n+std::optional<std::string> EntriesAndTxidsDisjoint(const CTxMemPool::setEntries& ancestors,\n+                                                   const std::set<uint256>& direct_conflicts,\n                                                    const uint256& txid)\n {\n-    for (CTxMemPool::txiter ancestorIt : setAncestors)\n+    for (CTxMemPool::txiter ancestorIt : ancestors)\n     {\n         const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n-        if (setConflicts.count(hashAncestor))\n+        if (direct_conflicts.count(hashAncestor))\n         {\n             return strprintf(\"%s spends conflicting transaction %s\",\n                              txid.ToString(),\n@@ -130,11 +130,11 @@ std::optional<std::string> EntriesAndTxidsDisjoint(const CTxMemPool::setEntries&\n     return std::nullopt;\n }\n \n-std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& setIterConflicting,\n-                                                 CFeeRate newFeeRate,\n-                                                 const uint256& hash)\n+std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& iters_conflicting,\n+                                                 CFeeRate replacement_feerate,\n+                                                 const uint256& txid)\n {\n-    for (const auto& mi : setIterConflicting) {\n+    for (const auto& mi : iters_conflicting) {\n         // Don't allow the replacement to reduce the feerate of the\n         // mempool.\n         //\n@@ -149,41 +149,41 @@ std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& s\n         // mean high feerate children are ignored when deciding whether\n         // or not to replace, we do require the replacement to pay more\n         // overall fees too, mitigating most cases.\n-        CFeeRate oldFeeRate(mi->GetModifiedFee(), mi->GetTxSize());\n-        if (newFeeRate <= oldFeeRate)\n+        CFeeRate original_feerate(mi->GetModifiedFee(), mi->GetTxSize());\n+        if (replacement_feerate <= original_feerate)\n         {\n             return strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n-                             hash.ToString(),\n-                             newFeeRate.ToString(),\n-                             oldFeeRate.ToString());\n+                             txid.ToString(),\n+                             replacement_feerate.ToString(),\n+                             original_feerate.ToString());\n         }\n     }\n     return std::nullopt;\n }\n \n-std::optional<std::string> PaysForRBF(CAmount nConflictingFees,\n-                                      CAmount nModifiedFees,\n-                                      size_t nSize,\n-                                      const uint256& hash)\n+std::optional<std::string> PaysForRBF(CAmount original_fees,\n+                                      CAmount replacement_fees,\n+                                      size_t replacement_vsize,\n+                                      const uint256& txid)\n {\n     // The replacement must pay greater fees than the transactions it\n     // replaces - if we did the bandwidth used by those conflicting\n     // transactions would not be paid for.\n-    if (nModifiedFees < nConflictingFees)\n+    if (replacement_fees < original_fees)\n     {\n         return strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n-                         hash.ToString(), FormatMoney(nModifiedFees), FormatMoney(nConflictingFees));\n+                         txid.ToString(), FormatMoney(replacement_fees), FormatMoney(original_fees));\n     }\n \n     // Finally in addition to paying more fees than the conflicts the\n     // new transaction must pay for its own bandwidth.\n-    CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n-    if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))\n+    CAmount additional_fees = replacement_fees - original_fees;\n+    if (additional_fees < ::incrementalRelayFee.GetFee(replacement_vsize))\n     {\n         return strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n-                         hash.ToString(),\n-                         FormatMoney(nDeltaFees),\n-                         FormatMoney(::incrementalRelayFee.GetFee(nSize)));\n+                         txid.ToString(),\n+                         FormatMoney(additional_fees),\n+                         FormatMoney(::incrementalRelayFee.GetFee(replacement_vsize)));\n     }\n     return std::nullopt;\n }"
      },
      {
        "sha": "55baae0fa2ce84798024a379ced964f441ee5d4b",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 27,
        "deletions": 27,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa47622e8dc66bec9ea690aec3f0999108d76dc9/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa47622e8dc66bec9ea690aec3f0999108d76dc9/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=fa47622e8dc66bec9ea690aec3f0999108d76dc9",
        "patch": "@@ -35,61 +35,61 @@ enum class RBFTransactionState {\n RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n \n-/** Get all descendants of setIterConflicting. Also enforce BIP125 Rule #5, \"The number of original\n+/** Get all descendants of iters_conflicting. Also enforce BIP125 Rule #5, \"The number of original\n  * transactions to be replaced and their descendant transactions which will be evicted from the\n  * mempool must not exceed a total of 100 transactions.\" Quit as early as possible. There cannot be\n  * more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n- * @param[in]   setIterConflicting  The set of iterators to mempool entries.\n- * @param[out]  allConflicting      Populated with all the mempool entries that would be replaced,\n- *                                  which includes descendants of setIterConflicting. Not cleared at\n+ * @param[in]   iters_conflicting  The set of iterators to mempool entries.\n+ * @param[out]  all_conflicts      Populated with all the mempool entries that would be replaced,\n+ *                                  which includes descendants of iters_conflicting. Not cleared at\n  *                                  the start; any existing mempool entries will remain in the set.\n  * @returns an error message if Rule #5 is broken, otherwise a std::nullopt.\n  */\n-std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx, CTxMemPool& m_pool,\n-                                                  const CTxMemPool::setEntries& setIterConflicting,\n-                                                  CTxMemPool::setEntries& allConflicting)\n-                                                  EXCLUSIVE_LOCKS_REQUIRED(m_pool.cs);\n+std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx, CTxMemPool& pool,\n+                                                  const CTxMemPool::setEntries& iters_conflicting,\n+                                                  CTxMemPool::setEntries& all_conflicts)\n+                                                  EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n \n /** BIP125 Rule #2: \"The replacement transaction may only include an unconfirmed input if that input\n  * was included in one of the original transactions.\"\n  * @returns error message if Rule #2 is broken, otherwise std::nullopt. */\n-std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& m_pool,\n-                                               const CTxMemPool::setEntries& setIterConflicting)\n-                                               EXCLUSIVE_LOCKS_REQUIRED(m_pool.cs);\n+std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx, const CTxMemPool& pool,\n+                                               const CTxMemPool::setEntries& iters_conflicting)\n+                                               EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n \n /** Check the intersection between two sets of transactions (a set of mempool entries and a set of\n  * txids) to make sure they are disjoint.\n- * @param[in]   setAncestors    Set of mempool entries corresponding to ancestors of the\n+ * @param[in]   ancestors    Set of mempool entries corresponding to ancestors of the\n  *                              replacement transactions.\n- * @param[in]   setConflicts    Set of txids corresponding to the mempool conflicts\n+ * @param[in]   direct_conflicts    Set of txids corresponding to the mempool conflicts\n  *                              (candidates to be replaced).\n  * @param[in]   txid            Transaction ID, included in the error message if violation occurs.\n  * @returns error message if the sets intersect, std::nullopt if they are disjoint.\n  */\n-std::optional<std::string> EntriesAndTxidsDisjoint(const CTxMemPool::setEntries& setAncestors,\n-                                                   const std::set<uint256>& setConflicts,\n+std::optional<std::string> EntriesAndTxidsDisjoint(const CTxMemPool::setEntries& ancestors,\n+                                                   const std::set<uint256>& direct_conflicts,\n                                                    const uint256& txid);\n \n /** Check that the feerate of the replacement transaction(s) is higher than the feerate of each\n- * of the transactions in setIterConflicting.\n- * @param[in]   setIterConflicting  The set of mempool entries.\n+ * of the transactions in iters_conflicting.\n+ * @param[in]   iters_conflicting  The set of mempool entries.\n  * @returns error message if fees insufficient, otherwise std::nullopt.\n  */\n-std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& setIterConflicting,\n-                                                 CFeeRate newFeeRate, const uint256& hash);\n+std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& iters_conflicting,\n+                                                 CFeeRate replacement_feerate, const uint256& txid);\n \n /** Enforce BIP125 Rule #3 \"The replacement transaction pays an absolute fee of at least the sum\n  * paid by the original transactions.\" Enforce BIP125 Rule #4 \"The replacement transaction must also\n  * pay for its own bandwidth at or above the rate set by the node's minimum relay fee setting.\"\n- * @param[in]   nConflictingFees    Total modified fees of original transaction(s).\n- * @param[in]   nModifiedFees       Total modified fees of replacement transaction(s).\n- * @param[in]   nSize               Total virtual size of replacement transaction(s).\n- * @param[in]   hash                Transaction ID, included in the error message if violation occurs.\n+ * @param[in]   original_fees    Total modified fees of original transaction(s).\n+ * @param[in]   replacement_fees       Total modified fees of replacement transaction(s).\n+ * @param[in]   replacement_vsize               Total virtual size of replacement transaction(s).\n+ * @param[in]   txid                Transaction ID, included in the error message if violation occurs.\n  * @returns error string if fees are insufficient, otherwise std::nullopt.\n  */\n-std::optional<std::string> PaysForRBF(CAmount nConflictingFees,\n-                                      CAmount nModifiedFees,\n-                                      size_t nSize,\n-                                      const uint256& hash);\n+std::optional<std::string> PaysForRBF(CAmount original_fees,\n+                                      CAmount replacement_fees,\n+                                      size_t replacement_vsize,\n+                                      const uint256& txid);\n \n #endif // BITCOIN_POLICY_RBF_H"
      }
    ]
  },
  {
    "sha": "32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjc0OGRhMGY0N2Y3YWE5ZmJhNzhkZmIyOWFhNDI2YjE0ZjE1NjI0",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-01T08:54:04Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-02T15:23:27Z"
      },
      "message": "whitespace fixups after move and scripted-diff",
      "tree": {
        "sha": "f85c91c89edce3d1176ffb0a6665377b610f2053",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f85c91c89edce3d1176ffb0a6665377b610f2053"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32748da0f47f7aa9fba78dfb29aa426b14f15624",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32748da0f47f7aa9fba78dfb29aa426b14f15624",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32748da0f47f7aa9fba78dfb29aa426b14f15624/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa47622e8dc66bec9ea690aec3f0999108d76dc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa47622e8dc66bec9ea690aec3f0999108d76dc9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa47622e8dc66bec9ea690aec3f0999108d76dc9"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 44,
      "deletions": 62
    },
    "files": [
      {
        "sha": "15527afb8ac57849cb58508f7f9f12dc89a35bc2",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 45,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32748da0f47f7aa9fba78dfb29aa426b14f15624/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32748da0f47f7aa9fba78dfb29aa426b14f15624/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=32748da0f47f7aa9fba78dfb29aa426b14f15624",
        "patch": "@@ -57,14 +57,13 @@ std::optional<std::string> GetEntriesForConflicts(const CTransaction& tx,\n     uint64_t nConflictingCount = 0;\n     for (const auto& mi : iters_conflicting) {\n         nConflictingCount += mi->GetCountWithDescendants();\n-        // This potentially overestimates the number of actual descendants\n-        // but we just want to be conservative to avoid doing too much\n-        // work.\n+        // This potentially overestimates the number of actual descendants but we just want to be\n+        // conservative to avoid doing too much work.\n         if (nConflictingCount > MAX_BIP125_REPLACEMENT_CANDIDATES) {\n             return strprintf(\"rejecting replacement %s; too many potential replacements (%d > %d)\\n\",\n-                        txid.ToString(),\n-                        nConflictingCount,\n-                        MAX_BIP125_REPLACEMENT_CANDIDATES);\n+                             txid.ToString(),\n+                             nConflictingCount,\n+                             MAX_BIP125_REPLACEMENT_CANDIDATES);\n         }\n     }\n     // If not too many to replace, then calculate the set of\n@@ -82,28 +81,22 @@ std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx,\n     AssertLockHeld(pool.cs);\n     std::set<uint256> parents_of_conflicts;\n     for (const auto& mi : iters_conflicting) {\n-        for (const CTxIn &txin : mi->GetTx().vin)\n-        {\n+        for (const CTxIn &txin : mi->GetTx().vin) {\n             parents_of_conflicts.insert(txin.prevout.hash);\n         }\n     }\n \n-    for (unsigned int j = 0; j < tx.vin.size(); j++)\n-    {\n-        // We don't want to accept replacements that require low\n-        // feerate junk to be mined first. Ideally we'd keep track of\n-        // the ancestor feerates and make the decision based on that,\n-        // but for now requiring all new inputs to be confirmed works.\n+    for (unsigned int j = 0; j < tx.vin.size(); j++) {\n+        // We don't want to accept replacements that require low feerate junk to be mined first.\n+        // Ideally we'd keep track of the ancestor feerates and make the decision based on that, but\n+        // for now requiring all new inputs to be confirmed works.\n         //\n-        // Note that if you relax this to make RBF a little more useful,\n-        // this may break the CalculateMempoolAncestors RBF relaxation,\n-        // above. See the comment above the first CalculateMempoolAncestors\n-        // call for more info.\n-        if (!parents_of_conflicts.count(tx.vin[j].prevout.hash))\n-        {\n-            // Rather than check the UTXO set - potentially expensive -\n-            // it's cheaper to just check if the new input refers to a\n-            // tx that's in the mempool.\n+        // Note that if you relax this to make RBF a little more useful, this may break the\n+        // CalculateMempoolAncestors RBF relaxation, above. See the comment above the first\n+        // CalculateMempoolAncestors call for more info.\n+        if (!parents_of_conflicts.count(tx.vin[j].prevout.hash)) {\n+            // Rather than check the UTXO set - potentially expensive - it's cheaper to just check\n+            // if the new input refers to a tx that's in the mempool.\n             if (pool.exists(tx.vin[j].prevout.hash)) {\n                 return strprintf(\"replacement %s adds unconfirmed input, idx %d\",\n                                  tx.GetHash().ToString(), j);\n@@ -117,11 +110,9 @@ std::optional<std::string> EntriesAndTxidsDisjoint(const CTxMemPool::setEntries&\n                                                    const std::set<uint256>& direct_conflicts,\n                                                    const uint256& txid)\n {\n-    for (CTxMemPool::txiter ancestorIt : ancestors)\n-    {\n+    for (CTxMemPool::txiter ancestorIt : ancestors) {\n         const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n-        if (direct_conflicts.count(hashAncestor))\n-        {\n+        if (direct_conflicts.count(hashAncestor)) {\n             return strprintf(\"%s spends conflicting transaction %s\",\n                              txid.ToString(),\n                              hashAncestor.ToString());\n@@ -135,23 +126,18 @@ std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& i\n                                                  const uint256& txid)\n {\n     for (const auto& mi : iters_conflicting) {\n-        // Don't allow the replacement to reduce the feerate of the\n-        // mempool.\n+        // Don't allow the replacement to reduce the feerate of the mempool.\n         //\n-        // We usually don't want to accept replacements with lower\n-        // feerates than what they replaced as that would lower the\n-        // feerate of the next block. Requiring that the feerate always\n-        // be increased is also an easy-to-reason about way to prevent\n-        // DoS attacks via replacements.\n+        // We usually don't want to accept replacements with lower feerates than what they replaced\n+        // as that would lower the feerate of the next block. Requiring that the feerate always be\n+        // increased is also an easy-to-reason about way to prevent DoS attacks via replacements.\n         //\n-        // We only consider the feerates of transactions being directly\n-        // replaced, not their indirect descendants. While that does\n-        // mean high feerate children are ignored when deciding whether\n-        // or not to replace, we do require the replacement to pay more\n-        // overall fees too, mitigating most cases.\n+        // We only consider the feerates of transactions being directly replaced, not their indirect\n+        // descendants. While that does mean high feerate children are ignored when deciding whether\n+        // or not to replace, we do require the replacement to pay more overall fees too, mitigating\n+        // most cases.\n         CFeeRate original_feerate(mi->GetModifiedFee(), mi->GetTxSize());\n-        if (replacement_feerate <= original_feerate)\n-        {\n+        if (replacement_feerate <= original_feerate) {\n             return strprintf(\"rejecting replacement %s; new feerate %s <= old feerate %s\",\n                              txid.ToString(),\n                              replacement_feerate.ToString(),\n@@ -169,17 +155,15 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     // The replacement must pay greater fees than the transactions it\n     // replaces - if we did the bandwidth used by those conflicting\n     // transactions would not be paid for.\n-    if (replacement_fees < original_fees)\n-    {\n+    if (replacement_fees < original_fees) {\n         return strprintf(\"rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n                          txid.ToString(), FormatMoney(replacement_fees), FormatMoney(original_fees));\n     }\n \n     // Finally in addition to paying more fees than the conflicts the\n     // new transaction must pay for its own bandwidth.\n     CAmount additional_fees = replacement_fees - original_fees;\n-    if (additional_fees < ::incrementalRelayFee.GetFee(replacement_vsize))\n-    {\n+    if (additional_fees < ::incrementalRelayFee.GetFee(replacement_vsize)) {\n         return strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n                          txid.ToString(),\n                          FormatMoney(additional_fees),"
      },
      {
        "sha": "56468a09b2149910f0399155522403895ae27186",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32748da0f47f7aa9fba78dfb29aa426b14f15624/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32748da0f47f7aa9fba78dfb29aa426b14f15624/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=32748da0f47f7aa9fba78dfb29aa426b14f15624",
        "patch": "@@ -39,8 +39,8 @@ RBFTransactionState IsRBFOptInEmptyMempool(const CTransaction& tx);\n  * transactions to be replaced and their descendant transactions which will be evicted from the\n  * mempool must not exceed a total of 100 transactions.\" Quit as early as possible. There cannot be\n  * more than MAX_BIP125_REPLACEMENT_CANDIDATES potential entries.\n- * @param[in]   iters_conflicting  The set of iterators to mempool entries.\n- * @param[out]  all_conflicts      Populated with all the mempool entries that would be replaced,\n+ * @param[in]   iters_conflicting   The set of iterators to mempool entries.\n+ * @param[out]  all_conflicts       Populated with all the mempool entries that would be replaced,\n  *                                  which includes descendants of iters_conflicting. Not cleared at\n  *                                  the start; any existing mempool entries will remain in the set.\n  * @returns an error message if Rule #5 is broken, otherwise a std::nullopt.\n@@ -59,11 +59,11 @@ std::optional<std::string> HasNoNewUnconfirmed(const CTransaction& tx, const CTx\n \n /** Check the intersection between two sets of transactions (a set of mempool entries and a set of\n  * txids) to make sure they are disjoint.\n- * @param[in]   ancestors    Set of mempool entries corresponding to ancestors of the\n- *                              replacement transactions.\n+ * @param[in]   ancestors           Set of mempool entries corresponding to ancestors of the\n+ *                                  replacement transactions.\n  * @param[in]   direct_conflicts    Set of txids corresponding to the mempool conflicts\n- *                              (candidates to be replaced).\n- * @param[in]   txid            Transaction ID, included in the error message if violation occurs.\n+ *                                  (candidates to be replaced).\n+ * @param[in]   txid                Transaction ID, included in the error message if violation occurs.\n  * @returns error message if the sets intersect, std::nullopt if they are disjoint.\n  */\n std::optional<std::string> EntriesAndTxidsDisjoint(const CTxMemPool::setEntries& ancestors,\n@@ -81,9 +81,9 @@ std::optional<std::string> PaysMoreThanConflicts(const CTxMemPool::setEntries& i\n /** Enforce BIP125 Rule #3 \"The replacement transaction pays an absolute fee of at least the sum\n  * paid by the original transactions.\" Enforce BIP125 Rule #4 \"The replacement transaction must also\n  * pay for its own bandwidth at or above the rate set by the node's minimum relay fee setting.\"\n- * @param[in]   original_fees    Total modified fees of original transaction(s).\n- * @param[in]   replacement_fees       Total modified fees of replacement transaction(s).\n- * @param[in]   replacement_vsize               Total virtual size of replacement transaction(s).\n+ * @param[in]   original_fees       Total modified fees of original transaction(s).\n+ * @param[in]   replacement_fees    Total modified fees of replacement transaction(s).\n+ * @param[in]   replacement_vsize   Total virtual size of replacement transaction(s).\n  * @param[in]   txid                Transaction ID, included in the error message if violation occurs.\n  * @returns error string if fees are insufficient, otherwise std::nullopt.\n  */"
      },
      {
        "sha": "6d44a2cb83c8e4e218c43ad071c4febb80b8268c",
        "filename": "src/util/rbf.h",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32748da0f47f7aa9fba78dfb29aa426b14f15624/src/util/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32748da0f47f7aa9fba78dfb29aa426b14f15624/src/util/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/rbf.h?ref=32748da0f47f7aa9fba78dfb29aa426b14f15624",
        "patch": "@@ -11,15 +11,13 @@ class CTransaction;\n \n static const uint32_t MAX_BIP125_RBF_SEQUENCE = 0xfffffffd;\n \n-/** Check whether the sequence numbers on this transaction are signaling\n-* opt-in to replace-by-fee, according to BIP 125.\n-* Allow opt-out of transaction replacement by setting\n-* nSequence > MAX_BIP125_RBF_SEQUENCE (SEQUENCE_FINAL-2) on all inputs.\n+/** Check whether the sequence numbers on this transaction are signaling opt-in to replace-by-fee,\n+ * according to BIP 125.  Allow opt-out of transaction replacement by setting nSequence >\n+ * MAX_BIP125_RBF_SEQUENCE (SEQUENCE_FINAL-2) on all inputs.\n *\n-* SEQUENCE_FINAL-1 is picked to still allow use of nLockTime by\n-* non-replaceable transactions. All inputs rather than just one\n-* is for the sake of multi-party protocols, where we don't\n-* want a single party to be able to disable replacement. */\n+* SEQUENCE_FINAL-1 is picked to still allow use of nLockTime by non-replaceable transactions. All\n+* inputs rather than just one is for the sake of multi-party protocols, where we don't want a single\n+* party to be able to disable replacement. */\n bool SignalsOptInRBF(const CTransaction &tx);\n \n #endif // BITCOIN_UTIL_RBF_H"
      }
    ]
  }
]