[
  {
    "sha": "887aee2ae2a8e9779e09240ec6670848fb7d6047",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODdhZWUyYWUyYThlOTc3OWUwOTI0MGVjNjY3MDg0OGZiN2Q2MDQ3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-03-09T20:42:03Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-03-09T20:51:36Z"
      },
      "message": "docs: Minor tweaks to genericide versionbits",
      "tree": {
        "sha": "e206109d130132586d63ea83975965cac9d99558",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e206109d130132586d63ea83975965cac9d99558"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/887aee2ae2a8e9779e09240ec6670848fb7d6047",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/887aee2ae2a8e9779e09240ec6670848fb7d6047",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/887aee2ae2a8e9779e09240ec6670848fb7d6047",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/887aee2ae2a8e9779e09240ec6670848fb7d6047/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e11b6496506246882df450586acf735dabedf731",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e11b6496506246882df450586acf735dabedf731",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e11b6496506246882df450586acf735dabedf731"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "bc253fef50c1c49ed8a4f5e8440958223fa4be43",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/887aee2ae2a8e9779e09240ec6670848fb7d6047/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/887aee2ae2a8e9779e09240ec6670848fb7d6047/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=887aee2ae2a8e9779e09240ec6670848fb7d6047",
        "patch": "@@ -35,7 +35,7 @@ struct BIP9Deployment {\n \n     /** Special value for nStartTime indicating that the deployment is always active.\n      *  This is useful for testing, as it means tests don't need to deal with the activation\n-     *  process (which takes at least 3 BIP9 intervals). Only tests that specifically test the\n+     *  process (which takes at least 3 intervals). Only tests that specifically test the\n      *  behaviour during activation cannot use this. */\n     static constexpr int64_t ALWAYS_ACTIVE = -1;\n };\n@@ -61,7 +61,7 @@ struct Params {\n      * Note that segwit v0 script rules are enforced on all blocks except the\n      * BIP 16 exception blocks. */\n     int SegwitHeight;\n-    /** Don't warn about unknown BIP 9 activations below this height.\n+    /** Don't warn about unknown versionbits activations below this height.\n      * This prevents us from warning about the CSV and segwit activations. */\n     int MinBIP9WarningHeight;\n     /**"
      },
      {
        "sha": "020bc8125b9f5ef820710b107cf0898dabc30ba5",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/887aee2ae2a8e9779e09240ec6670848fb7d6047/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/887aee2ae2a8e9779e09240ec6670848fb7d6047/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=887aee2ae2a8e9779e09240ec6670848fb7d6047",
        "patch": "@@ -538,7 +538,7 @@ static RPCHelpMan getblocktemplate()\n                             {\n                                 {RPCResult::Type::STR, \"\", \"name of a rule the client must understand to some extent; see BIP 9 for format\"},\n                             }},\n-                        {RPCResult::Type::OBJ_DYN, \"vbavailable\", \"set of pending, supported versionbit (BIP 9) softfork deployments\",\n+                        {RPCResult::Type::OBJ_DYN, \"vbavailable\", \"set of pending, supported versionbit softfork deployments\",\n                             {\n                                 {RPCResult::Type::NUM, \"rulename\", \"identifies the bit number as indicating acceptance and readiness for the named softfork rule\"},\n                             }},"
      },
      {
        "sha": "caa79a0a39ceb8c9193e53951900c58ab029d8d4",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/887aee2ae2a8e9779e09240ec6670848fb7d6047/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/887aee2ae2a8e9779e09240ec6670848fb7d6047/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=887aee2ae2a8e9779e09240ec6670848fb7d6047",
        "patch": "@@ -17,7 +17,7 @@ static const int32_t VERSIONBITS_TOP_MASK = 0xE0000000UL;\n /** Total bits available for versionbits */\n static const int32_t VERSIONBITS_NUM_BITS = 29;\n \n-/** BIP 9 defines a finite-state-machine to deploy a softfork in multiple stages.\n+/** Versionbits defines a finite-state-machine to deploy a softfork in multiple stages.\n  *  State transitions happen during retarget period if conditions are met\n  *  In case of reorg, transitions can go backward. Without transition, state is\n  *  inherited between periods. All blocks of a period share the same state.\n@@ -70,7 +70,7 @@ class AbstractThresholdConditionChecker {\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n };\n \n-/** BIP 9 allows multiple softforks to be deployed in parallel. We cache per-period state for every one of them\n+/** Versionbits allows multiple softforks to be deployed in parallel. We cache per-period state for every one of them\n  *  keyed by the bit position used to signal support. */\n struct VersionBitsCache\n {"
      }
    ]
  },
  {
    "sha": "16cb03c792f6eaa82b1cb367829ac2594d840039",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmNiMDNjNzkyZjZlYWE4MmIxY2IzNjc4MjlhYzI1OTRkODQwMDM5",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-03-09T20:35:40Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-03-09T20:52:38Z"
      },
      "message": "scripted-diff: Genericide BIP9 in variable/type names and comments\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/\\bBIP9\\b/versionbits/g; s/BIP9/VBits/g; s/bip9\\([.()]\\)/deployment_details\\1/g' $(git grep -il BIP9 src)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "94f7a749fbeebe7a12deffb10179fb90536df65b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94f7a749fbeebe7a12deffb10179fb90536df65b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16cb03c792f6eaa82b1cb367829ac2594d840039",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16cb03c792f6eaa82b1cb367829ac2594d840039",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16cb03c792f6eaa82b1cb367829ac2594d840039",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16cb03c792f6eaa82b1cb367829ac2594d840039/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "887aee2ae2a8e9779e09240ec6670848fb7d6047",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/887aee2ae2a8e9779e09240ec6670848fb7d6047",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/887aee2ae2a8e9779e09240ec6670848fb7d6047"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 51,
      "deletions": 51
    },
    "files": [
      {
        "sha": "1f8d7e8c923b4c9423207c03388b75ed7006a2da",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16cb03c792f6eaa82b1cb367829ac2594d840039/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16cb03c792f6eaa82b1cb367829ac2594d840039/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=16cb03c792f6eaa82b1cb367829ac2594d840039",
        "patch": "@@ -72,7 +72,7 @@ class CMainParams : public CChainParams {\n         consensus.BIP66Height = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n         consensus.CSVHeight = 419328; // 000000000000000004a1b34462cb8aeebd5799177f7a29cf28f2d1961716b5b5\n         consensus.SegwitHeight = 481824; // 0000000000000000001c8018d9cb3b742ef25114f27563e3fc4a1902167f9893\n-        consensus.MinBIP9WarningHeight = 483840; // segwit activation height + miner confirmation window\n+        consensus.MinVBitsWarningHeight = 483840; // segwit activation height + miner confirmation window\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -189,7 +189,7 @@ class CTestNetParams : public CChainParams {\n         consensus.BIP66Height = 330776; // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182\n         consensus.CSVHeight = 770112; // 00000000025e930139bac5c6c31a403776da130831ab85be56578f3fa75369bb\n         consensus.SegwitHeight = 834624; // 00000000002b980fcd729daaa248fd9316a5200e9b367f4ff2c42453e84201ca\n-        consensus.MinBIP9WarningHeight = 836640; // segwit activation height + miner confirmation window\n+        consensus.MinVBitsWarningHeight = 836640; // segwit activation height + miner confirmation window\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -330,16 +330,16 @@ class SigNetParams : public CChainParams {\n         consensus.fPowNoRetargeting = false;\n         consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n-        consensus.MinBIP9WarningHeight = 0;\n+        consensus.MinVBitsWarningHeight = 0;\n         consensus.powLimit = uint256S(\"00000377ae000000000000000000000000000000000000000000000000000000\");\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n         // Activation of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::VBitsDeployment::NO_TIMEOUT;\n \n         // message start is defined as the first 4 bytes of the sha256d of the block script\n         CHashWriter h(SER_DISK, 0);\n@@ -389,7 +389,7 @@ class CRegTestParams : public CChainParams {\n         consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in functional tests)\n         consensus.CSVHeight = 432; // CSV activated on regtest (Used in rpc activation tests)\n         consensus.SegwitHeight = 0; // SEGWIT is always activated on regtest unless overridden\n-        consensus.MinBIP9WarningHeight = 0;\n+        consensus.MinVBitsWarningHeight = 0;\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -399,10 +399,10 @@ class CRegTestParams : public CChainParams {\n         consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::VBitsDeployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::VBitsDeployment::ALWAYS_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::VBitsDeployment::NO_TIMEOUT;\n \n         consensus.nMinimumChainWork = uint256{};\n         consensus.defaultAssumeValid = uint256{};"
      },
      {
        "sha": "4fb9fff4c63e48ebdd19c753e1ad5bcd36c959c4",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16cb03c792f6eaa82b1cb367829ac2594d840039/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16cb03c792f6eaa82b1cb367829ac2594d840039/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=16cb03c792f6eaa82b1cb367829ac2594d840039",
        "patch": "@@ -20,9 +20,9 @@ enum DeploymentPos\n };\n \n /**\n- * Struct for each individual consensus rule change using BIP9.\n+ * Struct for each individual consensus rule change using versionbits.\n  */\n-struct BIP9Deployment {\n+struct VBitsDeployment {\n     /** Bit position to select the particular bit in nVersion. */\n     int bit;\n     /** Start MedianTime for version bits miner confirmation. Can be a date in the past */\n@@ -63,15 +63,15 @@ struct Params {\n     int SegwitHeight;\n     /** Don't warn about unknown versionbits activations below this height.\n      * This prevents us from warning about the CSV and segwit activations. */\n-    int MinBIP9WarningHeight;\n+    int MinVBitsWarningHeight;\n     /**\n      * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargeting period,\n-     * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments.\n+     * (nPowTargetTimespan / nPowTargetSpacing) which is also used for versionbits deployments.\n      * Examples: 1916 for 95%, 1512 for testchains.\n      */\n     uint32_t nRuleChangeActivationThreshold;\n     uint32_t nMinerConfirmationWindow;\n-    BIP9Deployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];\n+    VBitsDeployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];\n     /** Proof of work parameters */\n     uint256 powLimit;\n     bool fPowAllowMinDifficultyBlocks;"
      },
      {
        "sha": "c3ffec6bc5c2cc6b3b6f9d44bdb1137ade7b1ed8",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16cb03c792f6eaa82b1cb367829ac2594d840039/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16cb03c792f6eaa82b1cb367829ac2594d840039/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=16cb03c792f6eaa82b1cb367829ac2594d840039",
        "patch": "@@ -1223,46 +1223,46 @@ static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name,\n     softforks.pushKV(name, rv);\n }\n \n-static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void VBitsSoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    // For BIP9 deployments.\n+    // For versionbits deployments.\n     // Deployments (e.g. testdummy) with timeout value before Jan 1, 2009 are hidden.\n     // A timeout value of 0 guarantees a softfork will never be activated.\n     // This is used when merging logic to implement a proposed softfork without a specified deployment schedule.\n     if (consensusParams.vDeployments[id].nTimeout <= 1230768000) return;\n \n-    UniValue bip9(UniValue::VOBJ);\n+    UniValue deployment_details(UniValue::VOBJ);\n     const ThresholdState thresholdState = VersionBitsState(::ChainActive().Tip(), consensusParams, id, versionbitscache);\n     switch (thresholdState) {\n-    case ThresholdState::DEFINED: bip9.pushKV(\"status\", \"defined\"); break;\n-    case ThresholdState::STARTED: bip9.pushKV(\"status\", \"started\"); break;\n-    case ThresholdState::LOCKED_IN: bip9.pushKV(\"status\", \"locked_in\"); break;\n-    case ThresholdState::ACTIVE: bip9.pushKV(\"status\", \"active\"); break;\n-    case ThresholdState::FAILED: bip9.pushKV(\"status\", \"failed\"); break;\n+    case ThresholdState::DEFINED: deployment_details.pushKV(\"status\", \"defined\"); break;\n+    case ThresholdState::STARTED: deployment_details.pushKV(\"status\", \"started\"); break;\n+    case ThresholdState::LOCKED_IN: deployment_details.pushKV(\"status\", \"locked_in\"); break;\n+    case ThresholdState::ACTIVE: deployment_details.pushKV(\"status\", \"active\"); break;\n+    case ThresholdState::FAILED: deployment_details.pushKV(\"status\", \"failed\"); break;\n     }\n     if (ThresholdState::STARTED == thresholdState)\n     {\n-        bip9.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n+        deployment_details.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n     }\n-    bip9.pushKV(\"start_time\", consensusParams.vDeployments[id].nStartTime);\n-    bip9.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n+    deployment_details.pushKV(\"start_time\", consensusParams.vDeployments[id].nStartTime);\n+    deployment_details.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n     int64_t since_height = VersionBitsStateSinceHeight(::ChainActive().Tip(), consensusParams, id, versionbitscache);\n-    bip9.pushKV(\"since\", since_height);\n+    deployment_details.pushKV(\"since\", since_height);\n     if (ThresholdState::STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n-        BIP9Stats statsStruct = VersionBitsStatistics(::ChainActive().Tip(), consensusParams, id);\n+        VBitsStats statsStruct = VersionBitsStatistics(::ChainActive().Tip(), consensusParams, id);\n         statsUV.pushKV(\"period\", statsStruct.period);\n         statsUV.pushKV(\"threshold\", statsStruct.threshold);\n         statsUV.pushKV(\"elapsed\", statsStruct.elapsed);\n         statsUV.pushKV(\"count\", statsStruct.count);\n         statsUV.pushKV(\"possible\", statsStruct.possible);\n-        bip9.pushKV(\"statistics\", statsUV);\n+        deployment_details.pushKV(\"statistics\", statsUV);\n     }\n \n     UniValue rv(UniValue::VOBJ);\n     rv.pushKV(\"type\", \"bip9\");\n-    rv.pushKV(\"bip9\", bip9);\n+    rv.pushKV(\"bip9\", deployment_details);\n     if (ThresholdState::ACTIVE == thresholdState) {\n         rv.pushKV(\"height\", since_height);\n     }\n@@ -1305,9 +1305,9 @@ RPCHelpMan getblockchaininfo()\n                                     {RPCResult::Type::NUM_TIME, \"start_time\", \"the minimum median time past of a block at which the bit gains its meaning\"},\n                                     {RPCResult::Type::NUM_TIME, \"timeout\", \"the median time past of a block at which the deployment is considered failed if not yet locked in\"},\n                                     {RPCResult::Type::NUM, \"since\", \"height of the first block to which the status applies\"},\n-                                    {RPCResult::Type::OBJ, \"statistics\", \"numeric statistics about BIP9 signalling for a softfork (only for \\\"started\\\" status)\",\n+                                    {RPCResult::Type::OBJ, \"statistics\", \"numeric statistics about versionbits signalling for a softfork (only for \\\"started\\\" status)\",\n                                     {\n-                                        {RPCResult::Type::NUM, \"period\", \"the length in blocks of the BIP9 signalling period\"},\n+                                        {RPCResult::Type::NUM, \"period\", \"the length in blocks of the versionbits signalling period\"},\n                                         {RPCResult::Type::NUM, \"threshold\", \"the number of blocks with the version bit set required to activate the feature\"},\n                                         {RPCResult::Type::NUM, \"elapsed\", \"the number of blocks elapsed since the beginning of the current period\"},\n                                         {RPCResult::Type::NUM, \"count\", \"the number of blocks with the version bit set in the current period\"},\n@@ -1365,8 +1365,8 @@ RPCHelpMan getblockchaininfo()\n     BuriedForkDescPushBack(softforks, \"bip65\", consensusParams.BIP65Height);\n     BuriedForkDescPushBack(softforks, \"csv\", consensusParams.CSVHeight);\n     BuriedForkDescPushBack(softforks, \"segwit\", consensusParams.SegwitHeight);\n-    BIP9SoftForkDescPushBack(softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n-    BIP9SoftForkDescPushBack(softforks, \"taproot\", consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n+    VBitsSoftForkDescPushBack(softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n+    VBitsSoftForkDescPushBack(softforks, \"taproot\", consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n     obj.pushKV(\"softforks\",             softforks);\n \n     obj.pushKV(\"warnings\", GetWarnings(false).original);"
      },
      {
        "sha": "19a30bf76c28e822e16283f891a8e95bc7a31b9d",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16cb03c792f6eaa82b1cb367829ac2594d840039/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16cb03c792f6eaa82b1cb367829ac2594d840039/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=16cb03c792f6eaa82b1cb367829ac2594d840039",
        "patch": "@@ -875,7 +875,7 @@ static RPCHelpMan getblocktemplate()\n         // If VB is supported by the client, nMaxVersionPreVB is -1, so we won't get here\n         // Because BIP 34 changed how the generation transaction is serialized, we can only use version/force back to v2 blocks\n         // This is safe to do [otherwise-]unconditionally only because we are throwing an exception above if a non-force deployment gets activated\n-        // Note that this can probably also be removed entirely after the first BIP9 non-force deployment (ie, probably segwit) gets activated\n+        // Note that this can probably also be removed entirely after the first versionbits non-force deployment (ie, probably segwit) gets activated\n         aMutable.push_back(\"version/force\");\n     }\n "
      },
      {
        "sha": "e618474ed7678bdf62009698f1a9387666d30b7e",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16cb03c792f6eaa82b1cb367829ac2594d840039/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16cb03c792f6eaa82b1cb367829ac2594d840039/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=16cb03c792f6eaa82b1cb367829ac2594d840039",
        "patch": "@@ -35,7 +35,7 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n class TestAlwaysActiveConditionChecker : public TestConditionChecker\n {\n public:\n-    int64_t BeginTime(const Consensus::Params& params) const override { return Consensus::BIP9Deployment::ALWAYS_ACTIVE; }\n+    int64_t BeginTime(const Consensus::Params& params) const override { return Consensus::VBitsDeployment::ALWAYS_ACTIVE; }\n };\n \n #define CHECKERS 6"
      },
      {
        "sha": "d906c1ec3b61e2cbc380b123ba3fbf04b2e375b0",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16cb03c792f6eaa82b1cb367829ac2594d840039/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16cb03c792f6eaa82b1cb367829ac2594d840039/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=16cb03c792f6eaa82b1cb367829ac2594d840039",
        "patch": "@@ -1844,7 +1844,7 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n \n     bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override\n     {\n-        return pindex->nHeight >= params.MinBIP9WarningHeight &&\n+        return pindex->nHeight >= params.MinVBitsWarningHeight &&\n                ((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) &&\n                ((pindex->nVersion >> bit) & 1) != 0 &&\n                ((ComputeBlockVersion(pindex->pprev, params) >> bit) & 1) == 0;"
      },
      {
        "sha": "830f276860a1bd8bf7fe58b1a1995d89df01b185",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16cb03c792f6eaa82b1cb367829ac2594d840039/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16cb03c792f6eaa82b1cb367829ac2594d840039/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=16cb03c792f6eaa82b1cb367829ac2594d840039",
        "patch": "@@ -13,7 +13,7 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n     int64_t nTimeTimeout = EndTime(params);\n \n     // Check if this deployment is always active.\n-    if (nTimeStart == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n+    if (nTimeStart == Consensus::VBitsDeployment::ALWAYS_ACTIVE) {\n         return ThresholdState::ACTIVE;\n     }\n \n@@ -94,9 +94,9 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n     return state;\n }\n \n-BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params) const\n+VBitsStats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params) const\n {\n-    BIP9Stats stats = {};\n+    VBitsStats stats = {};\n \n     stats.period = Period(params);\n     stats.threshold = Threshold(params);\n@@ -126,7 +126,7 @@ BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockI\n int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const\n {\n     int64_t start_time = BeginTime(params);\n-    if (start_time == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n+    if (start_time == Consensus::VBitsDeployment::ALWAYS_ACTIVE) {\n         return 0;\n     }\n \n@@ -190,7 +190,7 @@ ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::\n     return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, cache.caches[pos]);\n }\n \n-BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n+VBitsStats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n     return VersionBitsConditionChecker(pos).GetStateStatisticsFor(pindexPrev, params);\n }"
      },
      {
        "sha": "356675413441df8d9e2dcb629bc2654b3eef4f31",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16cb03c792f6eaa82b1cb367829ac2594d840039/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16cb03c792f6eaa82b1cb367829ac2594d840039/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=16cb03c792f6eaa82b1cb367829ac2594d840039",
        "patch": "@@ -35,9 +35,9 @@ enum class ThresholdState {\n // will either be nullptr or a block with (height + 1) % Period() == 0.\n typedef std::map<const CBlockIndex*, ThresholdState> ThresholdConditionCache;\n \n-/** Display status of an in-progress BIP9 softfork */\n-struct BIP9Stats {\n-    /** Length of blocks of the BIP9 signalling period */\n+/** Display status of an in-progress versionbits softfork */\n+struct VBitsStats {\n+    /** Length of blocks of the versionbits signalling period */\n     int period;\n     /** Number of blocks with the version bit set required to activate the softfork */\n     int threshold;\n@@ -50,7 +50,7 @@ struct BIP9Stats {\n };\n \n /**\n- * Abstract class that implements BIP9-style threshold logic, and caches results.\n+ * Abstract class that implements versionbits-style threshold logic, and caches results.\n  */\n class AbstractThresholdConditionChecker {\n protected:\n@@ -61,8 +61,8 @@ class AbstractThresholdConditionChecker {\n     virtual int Threshold(const Consensus::Params& params) const =0;\n \n public:\n-    /** Returns the numerical statistics of an in-progress BIP9 softfork in the current period */\n-    BIP9Stats GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params) const;\n+    /** Returns the numerical statistics of an in-progress versionbits softfork in the current period */\n+    VBitsStats GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params) const;\n     /** Returns the state for pindex A based on parent pindexPrev B. Applies any state transition if conditions are present.\n      *  Caches state from first block of period. */\n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n@@ -79,11 +79,11 @@ struct VersionBitsCache\n     void Clear();\n };\n \n-/** Get the BIP9 state for a given deployment at the current tip. */\n+/** Get the versionbits state for a given deployment at the current tip. */\n ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n-/** Get the numerical statistics for the BIP9 state for a given deployment at the current tip. */\n-BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n-/** Get the block height at which the BIP9 deployment switched into the state for the block building on the current tip. */\n+/** Get the numerical statistics for the versionbits state for a given deployment at the current tip. */\n+VBitsStats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n+/** Get the block height at which the versionbits deployment switched into the state for the block building on the current tip. */\n int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n "
      }
    ]
  }
]