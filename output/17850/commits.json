[
  {
    "sha": "ca33451535dc29f64d37c49af8b22142d7716d0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTMzNDUxNTM1ZGMyOWY2NGQzN2M0OWFmOGIyMjE0MmQ3NzE2ZDBk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-07T22:48:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:05:27Z"
      },
      "message": "Introduce new serialization macros without casts\n\nThis new approach uses a static method which takes the object as\na argument. This has the advantage that its constness can be a\ntemplate parameter, allowing a single implementation that sees the\nobject as const for serialization and non-const for deserialization,\nwithout casts.\n\nMore boilerplate is included in the new macro as well.",
      "tree": {
        "sha": "a9a7595ae18527643bdd5a434cb8ce3d6ebc66cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9a7595ae18527643bdd5a434cb8ce3d6ebc66cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca33451535dc29f64d37c49af8b22142d7716d0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca33451535dc29f64d37c49af8b22142d7716d0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca33451535dc29f64d37c49af8b22142d7716d0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca33451535dc29f64d37c49af8b22142d7716d0d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f8dbcd655479ce2e564a8b17139aca19888ca79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f8dbcd655479ce2e564a8b17139aca19888ca79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f8dbcd655479ce2e564a8b17139aca19888ca79"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 24,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c9e994f84406ef907c5ec03ebfe603ff61ea5eac",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca33451535dc29f64d37c49af8b22142d7716d0d/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca33451535dc29f64d37c49af8b22142d7716d0d/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=ca33451535dc29f64d37c49af8b22142d7716d0d",
        "patch": "@@ -199,6 +199,30 @@ template<typename X> const X& ReadWriteAsHelper(const X& x) { return x; }\n         SerializationOp(s, CSerActionUnserialize());                  \\\n     }\n \n+/**\n+ * Implement the Serialize and Unserialize methods by delegating to a single templated\n+ * static method that takes the to-be-(de)serialized object as a parameter. This approach\n+ * has the advantage that the constness of the object becomes a template parameter, and\n+ * thus allows a single implementation that sees the object as const for serializing\n+ * and non-const for deserializing, without casts.\n+ */\n+#define SERIALIZE_METHODS(cls, obj)                                                 \\\n+    template<typename Stream>                                                       \\\n+    void Serialize(Stream& s) const                                                 \\\n+    {                                                                               \\\n+        static_assert(std::is_same<const cls&, decltype(*this)>::value, \"Serialize type mismatch\"); \\\n+        SerializationOps(*this, s, CSerActionSerialize());                          \\\n+    }                                                                               \\\n+    template<typename Stream>                                                       \\\n+    void Unserialize(Stream& s)                                                     \\\n+    {                                                                               \\\n+        static_assert(std::is_same<cls&, decltype(*this)>::value, \"Unserialize type mismatch\"); \\\n+        SerializationOps(*this, s, CSerActionUnserialize());                        \\\n+    }                                                                               \\\n+    template<typename Stream, typename Type, typename Operation>                    \\\n+    static inline void SerializationOps(Type& obj, Stream& s, Operation ser_action) \\\n+\n+\n #ifndef CHAR_EQUALS_INT8\n template<typename Stream> inline void Serialize(Stream& s, char a    ) { ser_writedata8(s, a); } // TODO Get rid of bare char\n #endif"
      }
    ]
  },
  {
    "sha": "9250a087d2f450f37342010aea0a5d583eea508b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjUwYTA4N2QyZjQ1MGYzNzM0MjAxMGFlYTBhNWQ1ODNlZWE1MDhi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-07-07T23:08:51Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-02T19:05:36Z"
      },
      "message": "Convert addrdb/addrman to new serialization",
      "tree": {
        "sha": "3caf5829ecc4574d356cd9d30504df491fb2fb87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3caf5829ecc4574d356cd9d30504df491fb2fb87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9250a087d2f450f37342010aea0a5d583eea508b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9250a087d2f450f37342010aea0a5d583eea508b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9250a087d2f450f37342010aea0a5d583eea508b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9250a087d2f450f37342010aea0a5d583eea508b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca33451535dc29f64d37c49af8b22142d7716d0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca33451535dc29f64d37c49af8b22142d7716d0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca33451535dc29f64d37c49af8b22142d7716d0d"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 6,
      "deletions": 18
    },
    "files": [
      {
        "sha": "c6d4307d694985482a211efb7fe6850b9071f66e",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9250a087d2f450f37342010aea0a5d583eea508b/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9250a087d2f450f37342010aea0a5d583eea508b/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=9250a087d2f450f37342010aea0a5d583eea508b",
        "patch": "@@ -49,15 +49,7 @@ class CBanEntry\n         banReason = ban_reason_in;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(this->nVersion);\n-        READWRITE(nCreateTime);\n-        READWRITE(nBanUntil);\n-        READWRITE(banReason);\n-    }\n+    SERIALIZE_METHODS(CBanEntry, obj) { READWRITE(obj.nVersion, obj.nCreateTime, obj.nBanUntil, obj.banReason); }\n \n     void SetNull()\n     {"
      },
      {
        "sha": "c001d59da56a135a2def2560c5c56f1a12d5484c",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9250a087d2f450f37342010aea0a5d583eea508b/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9250a087d2f450f37342010aea0a5d583eea508b/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=9250a087d2f450f37342010aea0a5d583eea508b",
        "patch": "@@ -53,14 +53,10 @@ class CAddrInfo : public CAddress\n \n public:\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITEAS(CAddress, *this);\n-        READWRITE(source);\n-        READWRITE(nLastSuccess);\n-        READWRITE(nAttempts);\n+    SERIALIZE_METHODS(CAddrInfo, obj)\n+    {\n+        READWRITEAS(CAddress, obj);\n+        READWRITE(obj.source, obj.nLastSuccess, obj.nAttempts);\n     }\n \n     CAddrInfo(const CAddress &addrIn, const CNetAddr &addrSource) : CAddress(addrIn), source(addrSource)\n@@ -294,7 +290,7 @@ class CAddrMan\n      * This format is more complex, but significantly smaller (at most 1.5 MiB), and supports\n      * changes to the ADDRMAN_ parameters without breaking the on-disk structure.\n      *\n-     * We don't use ADD_SERIALIZE_METHODS since the serialization and deserialization code has\n+     * We don't use SERIALIZE_METHODS since the serialization and deserialization code has\n      * very little in common.\n      */\n     template<typename Stream>"
      }
    ]
  }
]