[
  {
    "sha": "0e75f44a09ed07ff5eeeb142a4cefc4aba0ddf32",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTc1ZjQ0YTA5ZWQwN2ZmNWVlZWIxNDJhNGNlZmM0YWJhMGRkZjMy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-11-10T20:29:07Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-11-27T20:23:49Z"
      },
      "message": "Replace CAffectedKeysVisitor with descriptor based logic",
      "tree": {
        "sha": "129d99945a39e34f640123d53fd07a5ac434082e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/129d99945a39e34f640123d53fd07a5ac434082e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e75f44a09ed07ff5eeeb142a4cefc4aba0ddf32",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e75f44a09ed07ff5eeeb142a4cefc4aba0ddf32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e75f44a09ed07ff5eeeb142a4cefc4aba0ddf32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e75f44a09ed07ff5eeeb142a4cefc4aba0ddf32/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fdf146f3293c487afdc4d6d9f6b64099aa8bd28a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf146f3293c487afdc4d6d9f6b64099aa8bd28a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdf146f3293c487afdc4d6d9f6b64099aa8bd28a"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 13,
      "deletions": 67
    },
    "files": [
      {
        "sha": "893e4a53693d5ba58bba2feb9eea68e99af2ad8f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 67,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e75f44a09ed07ff5eeeb142a4cefc4aba0ddf32/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e75f44a09ed07ff5eeeb142a4cefc4aba0ddf32/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0e75f44a09ed07ff5eeeb142a4cefc4aba0ddf32",
        "patch": "@@ -22,6 +22,7 @@\n #include <policy/rbf.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n+#include <script/descriptor.h>\n #include <script/script.h>\n #include <shutdown.h>\n #include <timedata.h>\n@@ -104,67 +105,17 @@ std::string COutput::ToString() const\n     return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString(), i, nDepth, FormatMoney(tx->tx->vout[i].nValue));\n }\n \n-/** A class to identify which pubkeys a script and a keystore have in common. */\n-class CAffectedKeysVisitor : public boost::static_visitor<void> {\n-private:\n-    const CKeyStore &keystore;\n-    std::vector<CKeyID> &vKeys;\n-\n-public:\n-    /**\n-     * @param[in] keystoreIn The CKeyStore that is queried for the presence of a pubkey.\n-     * @param[out] vKeysIn A vector to which a script's pubkey identifiers are appended if they are in the keystore.\n-     */\n-    CAffectedKeysVisitor(const CKeyStore &keystoreIn, std::vector<CKeyID> &vKeysIn) : keystore(keystoreIn), vKeys(vKeysIn) {}\n-\n-    /**\n-     * Apply the visitor to each destination in a script, recursively to the redeemscript\n-     * in the case of p2sh destinations.\n-     * @param[in] script The CScript from which destinations are extracted.\n-     * @post Any CKeyIDs that script and keystore have in common are appended to the visitor's vKeys.\n-     */\n-    void Process(const CScript &script) {\n-        txnouttype type;\n-        std::vector<CTxDestination> vDest;\n-        int nRequired;\n-        if (ExtractDestinations(script, type, vDest, nRequired)) {\n-            for (const CTxDestination &dest : vDest)\n-                boost::apply_visitor(*this, dest);\n-        }\n-    }\n-\n-    void operator()(const CKeyID &keyId) {\n-        if (keystore.HaveKey(keyId))\n-            vKeys.push_back(keyId);\n-    }\n-\n-    void operator()(const CScriptID &scriptId) {\n-        CScript script;\n-        if (keystore.GetCScript(scriptId, script))\n-            Process(script);\n-    }\n-\n-    void operator()(const WitnessV0ScriptHash& scriptID)\n-    {\n-        CScriptID id;\n-        CRIPEMD160().Write(scriptID.begin(), 32).Finalize(id.begin());\n-        CScript script;\n-        if (keystore.GetCScript(id, script)) {\n-            Process(script);\n-        }\n-    }\n-\n-    void operator()(const WitnessV0KeyHash& keyid)\n-    {\n-        CKeyID id(keyid);\n-        if (keystore.HaveKey(id)) {\n-            vKeys.push_back(id);\n-        }\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider)\n+{\n+    std::vector<CScript> dummy;\n+    FlatSigningProvider out;\n+    InferDescriptor(spk, provider)->Expand(0, DUMMY_SIGNING_PROVIDER, dummy, out);\n+    std::vector<CKeyID> ret;\n+    for (const auto& entry : out.pubkeys) {\n+        ret.push_back(entry.first);\n     }\n-\n-    template<typename X>\n-    void operator()(const X &none) {}\n-};\n+    return ret;\n+}\n \n const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n {\n@@ -977,9 +928,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n             // loop though all outputs\n             for (const CTxOut& txout: tx.vout) {\n                 // extract addresses and check if they match with an unused keypool key\n-                std::vector<CKeyID> vAffected;\n-                CAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);\n-                for (const CKeyID &keyid : vAffected) {\n+                for (const auto& keyid : GetAffectedKeys(txout.scriptPubKey, *this)) {\n                     std::map<CKeyID, int64_t>::const_iterator mi = m_pool_key_to_index.find(keyid);\n                     if (mi != m_pool_key_to_index.end()) {\n                         WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\n@@ -3693,7 +3642,6 @@ void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<C\n         return;\n \n     // find first block that affects those keys, if there are any left\n-    std::vector<CKeyID> vAffected;\n     for (const auto& entry : mapWallet) {\n         // iterate over all wallet transactions...\n         const CWalletTx &wtx = entry.second;\n@@ -3703,14 +3651,12 @@ void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<C\n             int nHeight = pindex->nHeight;\n             for (const CTxOut &txout : wtx.tx->vout) {\n                 // iterate over all their outputs\n-                CAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);\n-                for (const CKeyID &keyid : vAffected) {\n+                for (const auto &keyid : GetAffectedKeys(txout.scriptPubKey, *this)) {\n                     // ... and all their affected keys\n                     std::map<CKeyID, CBlockIndex*>::iterator rit = mapKeyFirstBlock.find(keyid);\n                     if (rit != mapKeyFirstBlock.end() && nHeight < rit->second->nHeight)\n                         rit->second = pindex;\n                 }\n-                vAffected.clear();\n             }\n         }\n     }"
      }
    ]
  }
]