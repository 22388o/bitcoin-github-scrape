[
  {
    "sha": "602f4da9178dff11853431f9a7115194f6a016ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDJmNGRhOTE3OGRmZjExODUzNDMxZjlhNzExNTE5NGY2YTAxNmFj",
    "commit": {
      "author": {
        "name": "Aaron Dewes",
        "email": "aaron.dewes@web.de",
        "date": "2021-05-26T07:32:17Z"
      },
      "committer": {
        "name": "Aaron Dewes",
        "email": "aaron.dewes@web.de",
        "date": "2021-05-31T15:24:41Z"
      },
      "message": "Add reindex=auto flag to automatically reindex corrupt data\n\nThis PR allows the reindex flag to be set to auto, which automatically starts a reindex if the chain state or block index are corrupt.\nThis can be especially useful for  Raspberry Pi based full nodes, which often experience power outages or similar issues which can corrupt data.\nIt allows full node operators to make Bitcoin Core reindex automatically, without having to worry about removing the reindex flag again. (Which isn't much effort, but can be annoying to forget)",
      "tree": {
        "sha": "b1e2153404e8c278513f71dd09e452911804e7e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1e2153404e8c278513f71dd09e452911804e7e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/602f4da9178dff11853431f9a7115194f6a016ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/602f4da9178dff11853431f9a7115194f6a016ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/602f4da9178dff11853431f9a7115194f6a016ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/602f4da9178dff11853431f9a7115194f6a016ac/comments",
    "author": {
      "login": "AaronDewes",
      "id": 67546953,
      "node_id": "MDQ6VXNlcjY3NTQ2OTUz",
      "avatar_url": "https://avatars.githubusercontent.com/u/67546953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AaronDewes",
      "html_url": "https://github.com/AaronDewes",
      "followers_url": "https://api.github.com/users/AaronDewes/followers",
      "following_url": "https://api.github.com/users/AaronDewes/following{/other_user}",
      "gists_url": "https://api.github.com/users/AaronDewes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AaronDewes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AaronDewes/subscriptions",
      "organizations_url": "https://api.github.com/users/AaronDewes/orgs",
      "repos_url": "https://api.github.com/users/AaronDewes/repos",
      "events_url": "https://api.github.com/users/AaronDewes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AaronDewes/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "AaronDewes",
      "id": 67546953,
      "node_id": "MDQ6VXNlcjY3NTQ2OTUz",
      "avatar_url": "https://avatars.githubusercontent.com/u/67546953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AaronDewes",
      "html_url": "https://github.com/AaronDewes",
      "followers_url": "https://api.github.com/users/AaronDewes/followers",
      "following_url": "https://api.github.com/users/AaronDewes/following{/other_user}",
      "gists_url": "https://api.github.com/users/AaronDewes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AaronDewes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AaronDewes/subscriptions",
      "organizations_url": "https://api.github.com/users/AaronDewes/orgs",
      "repos_url": "https://api.github.com/users/AaronDewes/repos",
      "events_url": "https://api.github.com/users/AaronDewes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AaronDewes/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8462cd56010a8beadf95d4f3cb1357ca9d88493b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8462cd56010a8beadf95d4f3cb1357ca9d88493b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8462cd56010a8beadf95d4f3cb1357ca9d88493b"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 16,
      "deletions": 6
    },
    "files": [
      {
        "sha": "60a2e3a18aad5456602cbe69828bfb094dc9f24f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 6,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/602f4da9178dff11853431f9a7115194f6a016ac/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/602f4da9178dff11853431f9a7115194f6a016ac/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=602f4da9178dff11853431f9a7115194f6a016ac",
        "patch": "@@ -403,7 +403,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex, -coinstatsindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n             \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-reindex\", \"Rebuild chain state and block index from the blk*.dat files on disk\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-reindex\", \"Rebuild chain state and block index from the blk*.dat files on disk. Setting this to auto automatically reindexes the block database if it is corrupted.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-reindex-chainstate\", \"Rebuild chain state from the currently indexed blocks. When in pruning mode or if blocks on disk might be corrupted, use full -reindex instead.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-settings=<file>\", strprintf(\"Specify path to dynamic settings data file. Can be disabled with -nosettings. File is written at runtime and not meant to be edited by users (use %s instead for custom settings). Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME, BITCOIN_SETTINGS_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #if HAVE_SYSTEM\n@@ -1303,6 +1303,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n     // ********************************************************* Step 7: load block chain\n \n+    // If reindex=auto, then this returns false, which is intentional,\n+    // because we check for auto only if corruption is detected\n     fReindex = args.GetBoolArg(\"-reindex\", false);\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n@@ -1519,12 +1521,20 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         } while(false);\n \n         if (!fLoaded && !ShutdownRequested()) {\n-            // first suggest a reindex\n+            // If reindex=auto, directly start the reindex\n+            bool fAutoReindex = (args.GetArg(\"-reindex\", \"0\") == \"auto\");\n             if (!fReset) {\n-                bool fRet = uiInterface.ThreadSafeQuestion(\n-                    strLoadError + Untranslated(\".\\n\\n\") + _(\"Do you want to rebuild the block database now?\"),\n-                    strLoadError.original + \".\\nPlease restart with -reindex or -reindex-chainstate to recover.\",\n-                    \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::BTN_ABORT);\n+                bool fRet;\n+                if(!fAutoReindex) {\n+                    // suggest a reindex to GUI users\n+                    fRet = uiInterface.ThreadSafeQuestion(\n+                        strLoadError + Untranslated(\".\\n\\n\") + _(\"Do you want to rebuild the block database now?\"),\n+                        strLoadError.original + \".\\nPlease restart with -reindex or -reindex-chainstate to recover.\",\n+                        \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::BTN_ABORT);\n+                } else {\n+                    LogPrintf(\"Automatically running a reindex.\\n\");\n+                    fRet = true;\n+                }\n                 if (fRet) {\n                     fReindex = true;\n                     AbortShutdown();"
      }
    ]
  }
]