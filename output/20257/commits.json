[
  {
    "sha": "6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzAyNTlmYzJmOGJkMzRiYTgzYWQxMGE2YTExZDZkOTllOGQxZmM3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-10-28T06:08:48Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-10-28T06:08:48Z"
      },
      "message": "Squashed 'src/secp256k1/' changes from c6b6b8f1bb..3967d96bf1\n\n3967d96bf1 Merge #838: Make autotools check for all the used openssl functions\n3734b68200 Configure echo if openssl tests are enabled\n6f54e69f03 Merge #841: Avoids a potentially shortening size_t to int cast in strauss_wnaf_\n8893f42438 Avoids a potentially shortening size_t to int cast in strauss_wnaf_\ne6692778d3 Modify bitcoin_secp.m4's openssl check to call all the functions that we use in the tests/benchmarks. That way linking will fail if those symbols are missing\nac05f61fcf Merge #809: Stop treating ECDH as experimental\ne6e3d5da2f travis: add schnorrsig to valgrind and big endian platform test\n353dff156f Stop treating ECDH as experimental\n\ngit-subtree-dir: src/secp256k1\ngit-subtree-split: 3967d96bf184519eb98b766af665b4d4b072563e",
      "tree": {
        "sha": "c8a0eead40527108a3fcedbf61572dfc073aea4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8a0eead40527108a3fcedbf61572dfc073aea4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52380bf304b1c02dda23f1e2fad0159e29b2f7a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52380bf304b1c02dda23f1e2fad0159e29b2f7a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52380bf304b1c02dda23f1e2fad0159e29b2f7a2"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 38,
      "deletions": 16
    },
    "files": [
      {
        "sha": "ce8d6391b2f210318b156066d38a116b8970a502",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7",
        "patch": "@@ -33,7 +33,7 @@ env:\n     - CFLAGS=-O0 CTIMETEST=no\n     - ECMULTGENPRECISION=2\n     - ECMULTGENPRECISION=8\n-    - RUN_VALGRIND=yes BIGNUM=no ASM=x86_64 EXPERIMENTAL=yes ECDH=yes  RECOVERY=yes EXTRAFLAGS=\"--disable-openssl-tests\" BUILD=\n+    - RUN_VALGRIND=yes BIGNUM=no ASM=x86_64 ECDH=yes  RECOVERY=yes EXPERIMENTAL=yes SCHNORRSIG=yes EXTRAFLAGS=\"--disable-openssl-tests\" BUILD=\n matrix:\n   fast_finish: true\n   include:\n@@ -81,7 +81,7 @@ matrix:\n             - libc6-dbg:i386\n     # S390x build (big endian system)\n     - compiler: gcc\n-      env: HOST=s390x-unknown-linux-gnu ECDH=yes RECOVERY=yes EXPERIMENTAL=yes CTIMETEST=\n+      env: HOST=s390x-unknown-linux-gnu ECDH=yes RECOVERY=yes EXPERIMENTAL=yes SCHNORRSIG=yes CTIMETEST=\n       arch: s390x\n \n # We use this to install macOS dependencies instead of the built in `homebrew` plugin,"
      },
      {
        "sha": "e070937235c36a3f62f39c729d17e9abdc162a78",
        "filename": "README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7",
        "patch": "@@ -16,7 +16,7 @@ Features:\n * Very efficient implementation.\n * Suitable for embedded systems.\n * Optional module for public key recovery.\n-* Optional module for ECDH key exchange (experimental).\n+* Optional module for ECDH key exchange.\n \n Experimental features have not received enough scrutiny to satisfy the standard of quality of this library but are made available for testing and review by the community. The APIs of these features should not be considered stable.\n "
      },
      {
        "sha": "ece3d655edc300bf23c64ae2a23770de6d6c72ca",
        "filename": "build-aux/m4/bitcoin_secp.m4",
        "status": "modified",
        "additions": 25,
        "deletions": 2,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7/build-aux/m4/bitcoin_secp.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7/build-aux/m4/bitcoin_secp.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_secp.m4?ref=6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7",
        "patch": "@@ -36,16 +36,39 @@ if test x\"$has_libcrypto\" = x\"yes\" && test x\"$has_openssl_ec\" = x; then\n   CPPFLAGS_TEMP=\"$CPPFLAGS\"\n   CPPFLAGS=\"$CRYPTO_CPPFLAGS $CPPFLAGS\"\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+    #include <openssl/bn.h>\n     #include <openssl/ec.h>\n     #include <openssl/ecdsa.h>\n     #include <openssl/obj_mac.h>]],[[\n-    EC_KEY *eckey = EC_KEY_new_by_curve_name(NID_secp256k1);\n-    ECDSA_sign(0, NULL, 0, NULL, NULL, eckey);\n+    # if OPENSSL_VERSION_NUMBER < 0x10100000L\n+    void ECDSA_SIG_get0(const ECDSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps) {(void)sig->r; (void)sig->s;}\n+    # endif\n+\n+    unsigned int zero = 0;\n+    const unsigned char *zero_ptr = (unsigned char*)&zero;\n+    EC_KEY_free(EC_KEY_new_by_curve_name(NID_secp256k1));\n+    EC_KEY *eckey = EC_KEY_new();\n+    EC_GROUP *group = EC_GROUP_new_by_curve_name(NID_secp256k1);\n+    EC_KEY_set_group(eckey, group);\n+    ECDSA_sign(0, NULL, 0, NULL, &zero, eckey);\n     ECDSA_verify(0, NULL, 0, NULL, 0, eckey);\n+    o2i_ECPublicKey(&eckey, &zero_ptr, 0);\n+    d2i_ECPrivateKey(&eckey, &zero_ptr, 0);\n+    EC_KEY_check_key(eckey);\n     EC_KEY_free(eckey);\n+    EC_GROUP_free(group);\n     ECDSA_SIG *sig_openssl;\n     sig_openssl = ECDSA_SIG_new();\n+    d2i_ECDSA_SIG(&sig_openssl, &zero_ptr, 0);\n+    i2d_ECDSA_SIG(sig_openssl, NULL);\n+    ECDSA_SIG_get0(sig_openssl, NULL, NULL);\n     ECDSA_SIG_free(sig_openssl);\n+    const BIGNUM *bignum = BN_value_one();\n+    BN_is_negative(bignum);\n+    BN_num_bits(bignum);\n+    if (sizeof(zero) >= BN_num_bytes(bignum)) {\n+        BN_bn2bin(bignum, (unsigned char*)&zero);\n+    }\n   ]])],[has_openssl_ec=yes],[has_openssl_ec=no])\n   AC_MSG_RESULT([$has_openssl_ec])\n   CPPFLAGS=\"$CPPFLAGS_TEMP\""
      },
      {
        "sha": "eb3b449becaad0793bb71dc1b4816c0dbe66fbc0",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7",
        "patch": "@@ -122,7 +122,7 @@ AC_ARG_ENABLE(ecmult_static_precomputation,\n     [use_ecmult_static_precomputation=auto])\n \n AC_ARG_ENABLE(module_ecdh,\n-    AS_HELP_STRING([--enable-module-ecdh],[enable ECDH shared secret computation (experimental)]),\n+    AS_HELP_STRING([--enable-module-ecdh],[enable ECDH shared secret computation]),\n     [enable_module_ecdh=$enableval],\n     [enable_module_ecdh=no])\n \n@@ -395,8 +395,8 @@ esac\n \n if test x\"$use_tests\" = x\"yes\"; then\n   SECP_OPENSSL_CHECK\n-  if test x\"$has_openssl_ec\" = x\"yes\"; then\n-    if test x\"$enable_openssl_tests\" != x\"no\"; then\n+  if test x\"$enable_openssl_tests\" != x\"no\" && test x\"$has_openssl_ec\" = x\"yes\"; then\n+      enable_openssl_tests=yes\n       AC_DEFINE(ENABLE_OPENSSL_TESTS, 1, [Define this symbol if OpenSSL EC functions are available])\n       SECP_TEST_INCLUDES=\"$SSL_CFLAGS $CRYPTO_CFLAGS $CRYPTO_CPPFLAGS\"\n       SECP_TEST_LIBS=\"$CRYPTO_LIBS\"\n@@ -406,16 +406,17 @@ if test x\"$use_tests\" = x\"yes\"; then\n         SECP_TEST_LIBS=\"$SECP_TEST_LIBS -lgdi32\"\n         ;;\n       esac\n-    fi\n   else\n     if test x\"$enable_openssl_tests\" = x\"yes\"; then\n       AC_MSG_ERROR([OpenSSL tests requested but OpenSSL with EC support is not available])\n     fi\n+    enable_openssl_tests=no\n   fi\n else\n   if test x\"$enable_openssl_tests\" = x\"yes\"; then\n     AC_MSG_ERROR([OpenSSL tests requested but tests are not enabled])\n   fi\n+  enable_openssl_tests=no\n fi\n \n if test x\"$set_bignum\" = x\"gmp\"; then\n@@ -458,14 +459,10 @@ if test x\"$enable_experimental\" = x\"yes\"; then\n   AC_MSG_NOTICE([******])\n   AC_MSG_NOTICE([WARNING: experimental build])\n   AC_MSG_NOTICE([Experimental features do not have stable APIs or properties, and may not be safe for production use.])\n-  AC_MSG_NOTICE([Building ECDH module: $enable_module_ecdh])\n   AC_MSG_NOTICE([Building extrakeys module: $enable_module_extrakeys])\n   AC_MSG_NOTICE([Building schnorrsig module: $enable_module_schnorrsig])\n   AC_MSG_NOTICE([******])\n else\n-  if test x\"$enable_module_ecdh\" = x\"yes\"; then\n-    AC_MSG_ERROR([ECDH module is experimental. Use --enable-experimental to allow.])\n-  fi\n   if test x\"$enable_module_extrakeys\" = x\"yes\"; then\n     AC_MSG_ERROR([extrakeys module is experimental. Use --enable-experimental to allow.])\n   fi\n@@ -507,6 +504,8 @@ echo \"Build Options:\"\n echo \"  with ecmult precomp     = $set_precomp\"\n echo \"  with external callbacks = $use_external_default_callbacks\"\n echo \"  with benchmarks         = $use_benchmark\"\n+echo \"  with tests              = $use_tests\"\n+echo \"  with openssl tests      = $enable_openssl_tests\"\n echo \"  with coverage           = $enable_coverage\"\n echo \"  module ecdh             = $enable_module_ecdh\"\n echo \"  module recovery         = $enable_module_recovery\""
      },
      {
        "sha": "a9e8b3c76c4c67f2782bdcaf558ae775cc402314",
        "filename": "src/ecmult_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7/src/ecmult_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7/src/ecmult_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecmult_impl.h?ref=6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7",
        "patch": "@@ -443,7 +443,7 @@ struct secp256k1_strauss_state {\n     struct secp256k1_strauss_point_state* ps;\n };\n \n-static void secp256k1_ecmult_strauss_wnaf(const secp256k1_ecmult_context *ctx, const struct secp256k1_strauss_state *state, secp256k1_gej *r, int num, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng) {\n+static void secp256k1_ecmult_strauss_wnaf(const secp256k1_ecmult_context *ctx, const struct secp256k1_strauss_state *state, secp256k1_gej *r, size_t num, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng) {\n     secp256k1_ge tmpa;\n     secp256k1_fe Z;\n     /* Splitted G factors. */\n@@ -454,8 +454,8 @@ static void secp256k1_ecmult_strauss_wnaf(const secp256k1_ecmult_context *ctx, c\n     int bits_ng_128 = 0;\n     int i;\n     int bits = 0;\n-    int np;\n-    int no = 0;\n+    size_t np;\n+    size_t no = 0;\n \n     for (np = 0; np < num; ++np) {\n         if (secp256k1_scalar_is_zero(&na[np]) || secp256k1_gej_is_infinity(&a[np])) {"
      }
    ]
  },
  {
    "sha": "5803f5f5f6030e69b46a46f0511b8173bf89de0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODAzZjVmNWY2MDMwZTY5YjQ2YTQ2ZjA1MTFiODE3M2JmODlkZTBk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-10-28T06:08:48Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-10-28T06:08:48Z"
      },
      "message": "Update secp256k1 subtree to latest master",
      "tree": {
        "sha": "381329c0966970c2ed11ed62bd9e904b9b41722b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/381329c0966970c2ed11ed62bd9e904b9b41722b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5803f5f5f6030e69b46a46f0511b8173bf89de0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5803f5f5f6030e69b46a46f0511b8173bf89de0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5803f5f5f6030e69b46a46f0511b8173bf89de0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5803f5f5f6030e69b46a46f0511b8173bf89de0d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55b1ffcd259cc64139dad646a52fab5c597c95c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55b1ffcd259cc64139dad646a52fab5c597c95c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55b1ffcd259cc64139dad646a52fab5c597c95c2"
      },
      {
        "sha": "6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c0259fc2f8bd34ba83ad10a6a11d6d99e8d1fc7"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 38,
      "deletions": 16
    },
    "files": [
      {
        "sha": "ce8d6391b2f210318b156066d38a116b8970a502",
        "filename": "src/secp256k1/.travis.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5803f5f5f6030e69b46a46f0511b8173bf89de0d/src/secp256k1/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5803f5f5f6030e69b46a46f0511b8173bf89de0d/src/secp256k1/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/.travis.yml?ref=5803f5f5f6030e69b46a46f0511b8173bf89de0d",
        "patch": "@@ -33,7 +33,7 @@ env:\n     - CFLAGS=-O0 CTIMETEST=no\n     - ECMULTGENPRECISION=2\n     - ECMULTGENPRECISION=8\n-    - RUN_VALGRIND=yes BIGNUM=no ASM=x86_64 EXPERIMENTAL=yes ECDH=yes  RECOVERY=yes EXTRAFLAGS=\"--disable-openssl-tests\" BUILD=\n+    - RUN_VALGRIND=yes BIGNUM=no ASM=x86_64 ECDH=yes  RECOVERY=yes EXPERIMENTAL=yes SCHNORRSIG=yes EXTRAFLAGS=\"--disable-openssl-tests\" BUILD=\n matrix:\n   fast_finish: true\n   include:\n@@ -81,7 +81,7 @@ matrix:\n             - libc6-dbg:i386\n     # S390x build (big endian system)\n     - compiler: gcc\n-      env: HOST=s390x-unknown-linux-gnu ECDH=yes RECOVERY=yes EXPERIMENTAL=yes CTIMETEST=\n+      env: HOST=s390x-unknown-linux-gnu ECDH=yes RECOVERY=yes EXPERIMENTAL=yes SCHNORRSIG=yes CTIMETEST=\n       arch: s390x\n \n # We use this to install macOS dependencies instead of the built in `homebrew` plugin,"
      },
      {
        "sha": "e070937235c36a3f62f39c729d17e9abdc162a78",
        "filename": "src/secp256k1/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5803f5f5f6030e69b46a46f0511b8173bf89de0d/src/secp256k1/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5803f5f5f6030e69b46a46f0511b8173bf89de0d/src/secp256k1/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/README.md?ref=5803f5f5f6030e69b46a46f0511b8173bf89de0d",
        "patch": "@@ -16,7 +16,7 @@ Features:\n * Very efficient implementation.\n * Suitable for embedded systems.\n * Optional module for public key recovery.\n-* Optional module for ECDH key exchange (experimental).\n+* Optional module for ECDH key exchange.\n \n Experimental features have not received enough scrutiny to satisfy the standard of quality of this library but are made available for testing and review by the community. The APIs of these features should not be considered stable.\n "
      },
      {
        "sha": "ece3d655edc300bf23c64ae2a23770de6d6c72ca",
        "filename": "src/secp256k1/build-aux/m4/bitcoin_secp.m4",
        "status": "modified",
        "additions": 25,
        "deletions": 2,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5803f5f5f6030e69b46a46f0511b8173bf89de0d/src/secp256k1/build-aux/m4/bitcoin_secp.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5803f5f5f6030e69b46a46f0511b8173bf89de0d/src/secp256k1/build-aux/m4/bitcoin_secp.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/build-aux/m4/bitcoin_secp.m4?ref=5803f5f5f6030e69b46a46f0511b8173bf89de0d",
        "patch": "@@ -36,16 +36,39 @@ if test x\"$has_libcrypto\" = x\"yes\" && test x\"$has_openssl_ec\" = x; then\n   CPPFLAGS_TEMP=\"$CPPFLAGS\"\n   CPPFLAGS=\"$CRYPTO_CPPFLAGS $CPPFLAGS\"\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+    #include <openssl/bn.h>\n     #include <openssl/ec.h>\n     #include <openssl/ecdsa.h>\n     #include <openssl/obj_mac.h>]],[[\n-    EC_KEY *eckey = EC_KEY_new_by_curve_name(NID_secp256k1);\n-    ECDSA_sign(0, NULL, 0, NULL, NULL, eckey);\n+    # if OPENSSL_VERSION_NUMBER < 0x10100000L\n+    void ECDSA_SIG_get0(const ECDSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps) {(void)sig->r; (void)sig->s;}\n+    # endif\n+\n+    unsigned int zero = 0;\n+    const unsigned char *zero_ptr = (unsigned char*)&zero;\n+    EC_KEY_free(EC_KEY_new_by_curve_name(NID_secp256k1));\n+    EC_KEY *eckey = EC_KEY_new();\n+    EC_GROUP *group = EC_GROUP_new_by_curve_name(NID_secp256k1);\n+    EC_KEY_set_group(eckey, group);\n+    ECDSA_sign(0, NULL, 0, NULL, &zero, eckey);\n     ECDSA_verify(0, NULL, 0, NULL, 0, eckey);\n+    o2i_ECPublicKey(&eckey, &zero_ptr, 0);\n+    d2i_ECPrivateKey(&eckey, &zero_ptr, 0);\n+    EC_KEY_check_key(eckey);\n     EC_KEY_free(eckey);\n+    EC_GROUP_free(group);\n     ECDSA_SIG *sig_openssl;\n     sig_openssl = ECDSA_SIG_new();\n+    d2i_ECDSA_SIG(&sig_openssl, &zero_ptr, 0);\n+    i2d_ECDSA_SIG(sig_openssl, NULL);\n+    ECDSA_SIG_get0(sig_openssl, NULL, NULL);\n     ECDSA_SIG_free(sig_openssl);\n+    const BIGNUM *bignum = BN_value_one();\n+    BN_is_negative(bignum);\n+    BN_num_bits(bignum);\n+    if (sizeof(zero) >= BN_num_bytes(bignum)) {\n+        BN_bn2bin(bignum, (unsigned char*)&zero);\n+    }\n   ]])],[has_openssl_ec=yes],[has_openssl_ec=no])\n   AC_MSG_RESULT([$has_openssl_ec])\n   CPPFLAGS=\"$CPPFLAGS_TEMP\""
      },
      {
        "sha": "eb3b449becaad0793bb71dc1b4816c0dbe66fbc0",
        "filename": "src/secp256k1/configure.ac",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5803f5f5f6030e69b46a46f0511b8173bf89de0d/src/secp256k1/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5803f5f5f6030e69b46a46f0511b8173bf89de0d/src/secp256k1/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/configure.ac?ref=5803f5f5f6030e69b46a46f0511b8173bf89de0d",
        "patch": "@@ -122,7 +122,7 @@ AC_ARG_ENABLE(ecmult_static_precomputation,\n     [use_ecmult_static_precomputation=auto])\n \n AC_ARG_ENABLE(module_ecdh,\n-    AS_HELP_STRING([--enable-module-ecdh],[enable ECDH shared secret computation (experimental)]),\n+    AS_HELP_STRING([--enable-module-ecdh],[enable ECDH shared secret computation]),\n     [enable_module_ecdh=$enableval],\n     [enable_module_ecdh=no])\n \n@@ -395,8 +395,8 @@ esac\n \n if test x\"$use_tests\" = x\"yes\"; then\n   SECP_OPENSSL_CHECK\n-  if test x\"$has_openssl_ec\" = x\"yes\"; then\n-    if test x\"$enable_openssl_tests\" != x\"no\"; then\n+  if test x\"$enable_openssl_tests\" != x\"no\" && test x\"$has_openssl_ec\" = x\"yes\"; then\n+      enable_openssl_tests=yes\n       AC_DEFINE(ENABLE_OPENSSL_TESTS, 1, [Define this symbol if OpenSSL EC functions are available])\n       SECP_TEST_INCLUDES=\"$SSL_CFLAGS $CRYPTO_CFLAGS $CRYPTO_CPPFLAGS\"\n       SECP_TEST_LIBS=\"$CRYPTO_LIBS\"\n@@ -406,16 +406,17 @@ if test x\"$use_tests\" = x\"yes\"; then\n         SECP_TEST_LIBS=\"$SECP_TEST_LIBS -lgdi32\"\n         ;;\n       esac\n-    fi\n   else\n     if test x\"$enable_openssl_tests\" = x\"yes\"; then\n       AC_MSG_ERROR([OpenSSL tests requested but OpenSSL with EC support is not available])\n     fi\n+    enable_openssl_tests=no\n   fi\n else\n   if test x\"$enable_openssl_tests\" = x\"yes\"; then\n     AC_MSG_ERROR([OpenSSL tests requested but tests are not enabled])\n   fi\n+  enable_openssl_tests=no\n fi\n \n if test x\"$set_bignum\" = x\"gmp\"; then\n@@ -458,14 +459,10 @@ if test x\"$enable_experimental\" = x\"yes\"; then\n   AC_MSG_NOTICE([******])\n   AC_MSG_NOTICE([WARNING: experimental build])\n   AC_MSG_NOTICE([Experimental features do not have stable APIs or properties, and may not be safe for production use.])\n-  AC_MSG_NOTICE([Building ECDH module: $enable_module_ecdh])\n   AC_MSG_NOTICE([Building extrakeys module: $enable_module_extrakeys])\n   AC_MSG_NOTICE([Building schnorrsig module: $enable_module_schnorrsig])\n   AC_MSG_NOTICE([******])\n else\n-  if test x\"$enable_module_ecdh\" = x\"yes\"; then\n-    AC_MSG_ERROR([ECDH module is experimental. Use --enable-experimental to allow.])\n-  fi\n   if test x\"$enable_module_extrakeys\" = x\"yes\"; then\n     AC_MSG_ERROR([extrakeys module is experimental. Use --enable-experimental to allow.])\n   fi\n@@ -507,6 +504,8 @@ echo \"Build Options:\"\n echo \"  with ecmult precomp     = $set_precomp\"\n echo \"  with external callbacks = $use_external_default_callbacks\"\n echo \"  with benchmarks         = $use_benchmark\"\n+echo \"  with tests              = $use_tests\"\n+echo \"  with openssl tests      = $enable_openssl_tests\"\n echo \"  with coverage           = $enable_coverage\"\n echo \"  module ecdh             = $enable_module_ecdh\"\n echo \"  module recovery         = $enable_module_recovery\""
      },
      {
        "sha": "a9e8b3c76c4c67f2782bdcaf558ae775cc402314",
        "filename": "src/secp256k1/src/ecmult_impl.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5803f5f5f6030e69b46a46f0511b8173bf89de0d/src/secp256k1/src/ecmult_impl.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5803f5f5f6030e69b46a46f0511b8173bf89de0d/src/secp256k1/src/ecmult_impl.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/src/ecmult_impl.h?ref=5803f5f5f6030e69b46a46f0511b8173bf89de0d",
        "patch": "@@ -443,7 +443,7 @@ struct secp256k1_strauss_state {\n     struct secp256k1_strauss_point_state* ps;\n };\n \n-static void secp256k1_ecmult_strauss_wnaf(const secp256k1_ecmult_context *ctx, const struct secp256k1_strauss_state *state, secp256k1_gej *r, int num, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng) {\n+static void secp256k1_ecmult_strauss_wnaf(const secp256k1_ecmult_context *ctx, const struct secp256k1_strauss_state *state, secp256k1_gej *r, size_t num, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng) {\n     secp256k1_ge tmpa;\n     secp256k1_fe Z;\n     /* Splitted G factors. */\n@@ -454,8 +454,8 @@ static void secp256k1_ecmult_strauss_wnaf(const secp256k1_ecmult_context *ctx, c\n     int bits_ng_128 = 0;\n     int i;\n     int bits = 0;\n-    int np;\n-    int no = 0;\n+    size_t np;\n+    size_t no = 0;\n \n     for (np = 0; np < num; ++np) {\n         if (secp256k1_scalar_is_zero(&na[np]) || secp256k1_gej_is_infinity(&a[np])) {"
      }
    ]
  }
]