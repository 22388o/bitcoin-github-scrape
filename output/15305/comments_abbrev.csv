promag,2019-02-02T11:14:44Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/15305#issuecomment-459956895,459956895,
gmaxwell,2019-02-02T22:17:56Z,"Concept ACK. The test seems a little fragile (an unrelated change to rename undo files or merge them into block files would break it), but I don't see a better way to do it.",https://github.com/bitcoin/bitcoin/pull/15305#issuecomment-460003940,460003940,
sdaftuar,2019-02-05T18:07:05Z,"Thanks @MarcoFalke I took your change to the test, hopefully it passes travis now.  If it's too flaky though I'll just drop it from this PR.",https://github.com/bitcoin/bitcoin/pull/15305#issuecomment-460742036,460742036,
sdaftuar,2019-02-05T21:14:20Z,"Updated this PR to get rid of the g_abort_node global, and instead change DisconnectTip to no longer call AbortNode itself, and instead leave it to the caller to decide how to handle failures.\n\nThis slightly changes the behavior of invalidateblock and RewindBlockIndex -- I believe it's an improvement but reviewers should take note.",https://github.com/bitcoin/bitcoin/pull/15305#issuecomment-460806105,460806105,
sdaftuar,2019-02-07T00:05:46Z,"The appveyor test failure appears to be an unrelated, long-standing bug in the `wallet_txn_doublespend.py` test (fixed in #15360).",https://github.com/bitcoin/bitcoin/pull/15305#issuecomment-461238665,461238665,
DrahtBot,2019-02-14T05:03:03Z,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/15305#issuecomment-463490863,463490863,
sipa,2019-03-25T23:19:37Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15305#issuecomment-476414067,476414067,
sdaftuar,2019-06-05T09:20:30Z,Added a comment as @ryanofsky requested.,https://github.com/bitcoin/bitcoin/pull/15305#issuecomment-499006848,499006848,
practicalswift,2019-06-12T21:09:43Z,utACK a47df13471e3168e2e02023fb20cdf2414141b36,https://github.com/bitcoin/bitcoin/pull/15305#issuecomment-501456489,501456489,
sdaftuar,2019-07-08T17:12:09Z,"Thanks for the review @promag; I'll leave the test nits alone for now, someone can pick up in a future PR if there's interest.",https://github.com/bitcoin/bitcoin/pull/15305#issuecomment-509312883,509312883,
TheBlueMatt,2019-07-10T17:56:57Z,"utACK a47df13471e3168e2e02023fb20cdf2414141b36. Didn't bother to review the test in detail, it looked fine. Debated whether invalidateblock should ever crash the node, but *not* crashing in the case of hitting a pruned block (which is the only change here) is clearly better, even if there are other cases I'd argue we should crash in.",https://github.com/bitcoin/bitcoin/pull/15305#issuecomment-510165116,510165116,
sdaftuar,2019-07-24T19:41:04Z,Anything else needed here?,https://github.com/bitcoin/bitcoin/pull/15305#issuecomment-514771766,514771766,
MarcoFalke,2019-01-31T21:21:20Z,Wouldn't it make more sense to move this check into `AbortNode` otherwise it seems that this is a flag to indicate the node should be aborted as opposed to a flag that indicates the nodes has been aborted via `AbortNode`.,https://github.com/bitcoin/bitcoin/pull/15305#discussion_r252845092,252845092,src/validation.cpp
MarcoFalke,2019-01-31T21:24:27Z,Would be nice to limit the scope of this context to the minimum required (right after the wait_until). (Compare other uses of `with node.assert_debug_log(expected_msgs=reason):`),https://github.com/bitcoin/bitcoin/pull/15305#discussion_r252846134,252846134,test/functional/feature_abortnode.py
sdaftuar,2019-01-31T21:28:43Z,"So I was thinking that I didn't want to add a place to the code where we might call into AbortNode twice, but since I haven't analyzed exactly what happens in that case I wasn't sure I wanted to change any existing behavior if we're doing that somewhere already.\n\nIf everyone is comfortable with globally ensuring that AbortNode() enforces the 1 abort call limit, then I can move this in there, o",https://github.com/bitcoin/bitcoin/pull/15305#discussion_r252847627,252847627,src/validation.cpp
sdaftuar,2019-01-31T21:35:08Z,"Not sure I understand exactly how this is supposed to be used, but can you take a look at the fixup I just pushed and let me know if this is what you have in mind?",https://github.com/bitcoin/bitcoin/pull/15305#discussion_r252849665,252849665,test/functional/feature_abortnode.py
MarcoFalke,2019-01-31T21:44:16Z,"It is like a context manager that checks what lines get appended to the debug log during its use. And the shortest use seems to me \n\n```py\n        with self.nodes[0].assert_debug_log(""Failed to disconnect block""):\n            connect_nodes(self.nodes[0], 1)\n\n            # Check that node0 aborted\n            self.log.info(""Waiting for crash"")\n            wait_until(lambda: self.nod",https://github.com/bitcoin/bitcoin/pull/15305#discussion_r252852842,252852842,test/functional/feature_abortnode.py
MarcoFalke,2019-02-01T18:03:24Z,"This fails for me with:\n\n```\nAssertionError: [node 0] Expected message ""F"" does not partially match log:\n\n - 2019-02-01T18:00:39.595725Z Received a POST request for / from 127.0.0.1:41758\n - 2019-02-01T18:00:39.595784Z ThreadRPCServer method=addnode user=__cookie__\n - 2019-02-01T18:00:39.595808Z trying connection 127.0.0.1:11153 lastseen=0.0hrs\n - 2019-02-01T18:00:39.596518Z Added ",https://github.com/bitcoin/bitcoin/pull/15305#discussion_r253144465,253144465,test/functional/feature_abortnode.py
MarcoFalke,2019-02-01T18:04:11Z,"Could be fixed with \n\n```diff\ndiff --git a/test/functional/feature_abortnode.py b/test/functional/feature_abortnode.py\nindex ad1b0cd8ca..9b5b3a67d1 100755\n--- a/test/functional/feature_abortnode.py\n+++ b/test/functional/feature_abortnode.py\n@@ -36,12 +36,11 @@ class AbortNodeTest(BitcoinTestFramework):\n         # Connecting to a node with a more work chain will trigger a reorg\n  ",https://github.com/bitcoin/bitcoin/pull/15305#discussion_r253144652,253144652,test/functional/feature_abortnode.py
practicalswift,2019-02-04T21:29:23Z,`pass` redundant?,https://github.com/bitcoin/bitcoin/pull/15305#discussion_r253653314,253653314,test/functional/feature_abortnode.py
sdaftuar,2019-02-05T18:07:27Z,Removed in latest commit.,https://github.com/bitcoin/bitcoin/pull/15305#discussion_r253981651,253981651,test/functional/feature_abortnode.py
MarcoFalke,2019-02-05T20:02:06Z,"I don't think it is worth the burden of having this undocumented global in the source code to ease today's review of the diff at the cost of all future review of the overall code.\n\nI'd prefer to be consistent by allowing AbortNode to be called multiple times and then either overwriting the warning string or keeping the previous one, but special casing the reorg warning to not overwrite any pre",https://github.com/bitcoin/bitcoin/pull/15305#discussion_r254024905,254024905,src/validation.cpp
sdaftuar,2019-02-05T20:18:17Z,"Perhaps I should get rid of the call to `AbortNode` in DisconnectTip, and then do away with this new global and unconditionally call AbortNode in ABCStep?  That would result in a behavior change for invalidateblock and certain failures in RewindBlockIndex, but that might actually be desirable anyway.\n",https://github.com/bitcoin/bitcoin/pull/15305#discussion_r254030440,254030440,src/validation.cpp
promag,2019-02-07T14:55:53Z,Any reason to not generate 4 here instead?,https://github.com/bitcoin/bitcoin/pull/15305#discussion_r254715399,254715399,test/functional/feature_abortnode.py
promag,2019-02-07T14:56:26Z,"Should use `os.path.join`.\n\nnit, could inline this below\n```py\nos.unlink(os.path.join(datadir, 'regtest', 'blocks', 'rev00000.dat'))\n```",https://github.com/bitcoin/bitcoin/pull/15305#discussion_r254715652,254715652,test/functional/feature_abortnode.py
promag,2019-02-07T14:56:44Z,"nit, double new line.",https://github.com/bitcoin/bitcoin/pull/15305#discussion_r254715799,254715799,test/functional/feature_abortnode.py
promag,2019-02-07T14:56:49Z,"nit, double new line.",https://github.com/bitcoin/bitcoin/pull/15305#discussion_r254715844,254715844,test/functional/feature_abortnode.py
sdaftuar,2019-02-08T18:03:33Z,"Yes-- if you generate 4 here, then the call to connect_nodes() afterward can trigger a crash on node0 before the function returns, which causes problems for the test. ",https://github.com/bitcoin/bitcoin/pull/15305#discussion_r255177862,255177862,test/functional/feature_abortnode.py
sdaftuar,2019-02-08T18:45:46Z,Done in latest commit.,https://github.com/bitcoin/bitcoin/pull/15305#discussion_r255193515,255193515,test/functional/feature_abortnode.py
sdaftuar,2019-02-08T18:46:08Z,"I'm not seeing the extra new-line in our style guide, nor does it seem to be failing our style linter?  Leaving as-is.",https://github.com/bitcoin/bitcoin/pull/15305#discussion_r255193649,255193649,test/functional/feature_abortnode.py
practicalswift,2019-03-25T08:50:56Z,Nit: Is the lambda needed here?,https://github.com/bitcoin/bitcoin/pull/15305#discussion_r268534825,268534825,test/functional/feature_abortnode.py
ryanofsky,2019-04-10T19:12:32Z,"In commit ""[validation] Crash if disconnecting a block fails"" (dafa0b7e1615a4e0985ece5d5f044f14753edcf6)\n\nNote: I was initially confused by the change to this line which removes an existing abort call. But this is just cleanup. Aborting here would be redundant with the new abort call below, which is broader and covers more failure cases.",https://github.com/bitcoin/bitcoin/pull/15305#discussion_r274115865,274115865,src/validation.cpp
ryanofsky,2019-04-10T19:21:04Z,"In commit ""[validation] Crash if disconnecting a block fails"" (dafa0b7e1615a4e0985ece5d5f044f14753edcf6)\n\nProbably would be good to have a comment saying that it's better to abort than stay active using a chain that doesn't have the most work (so it's clear that handling the error this way is really intentional and this isn't just fragile code).",https://github.com/bitcoin/bitcoin/pull/15305#discussion_r274118731,274118731,src/validation.cpp
sdaftuar,2019-06-05T09:19:51Z,Done.,https://github.com/bitcoin/bitcoin/pull/15305#discussion_r290649965,290649965,src/validation.cpp
promag,2019-06-11T20:59:50Z,"@sdaftuar in test/functional/README.md you see\n\n> - Where possible, try to adhere to [PEP-8 guidelines](https://www.python.org/dev/peps/pep-0008/)\n\nThen in https://www.python.org/dev/peps/pep-0008/#blank-lines you can see guide.",https://github.com/bitcoin/bitcoin/pull/15305#discussion_r292657678,292657678,test/functional/feature_abortnode.py
MarcoFalke,2019-06-11T21:05:11Z,"No this should not be changed. Unlike other rules in pep8, some of which prevent nasty bugs in python, having two or one new line is completely equivalent.",https://github.com/bitcoin/bitcoin/pull/15305#discussion_r292659571,292659571,test/functional/feature_abortnode.py
promag,2019-06-12T21:59:52Z,"Use `wait_until_stopped` instead:\nhttps://github.com/bitcoin/bitcoin/blob/f792395d13aa99ce51887db14e4f77a746d910e3/test/functional/test_framework/test_node.py#L304-L305",https://github.com/bitcoin/bitcoin/pull/15305#discussion_r293135388,293135388,test/functional/feature_abortnode.py
promag,2019-06-12T22:05:04Z,"nit, use `'` throughout.",https://github.com/bitcoin/bitcoin/pull/15305#discussion_r293137007,293137007,test/functional/feature_abortnode.py
