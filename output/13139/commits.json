[
  {
    "sha": "4e63d5c601ab809f1ef5be33e48788410cf1ce29",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTYzZDVjNjAxYWI4MDlmMWVmNWJlMzNlNDg3ODg0MTBjZjFjZTI5",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T06:33:50Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T06:33:50Z"
      },
      "message": "compile",
      "tree": {
        "sha": "902e3d2c57e72bc5b7092099ed49c60d91abd60e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/902e3d2c57e72bc5b7092099ed49c60d91abd60e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e63d5c601ab809f1ef5be33e48788410cf1ce29",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e63d5c601ab809f1ef5be33e48788410cf1ce29",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e63d5c601ab809f1ef5be33e48788410cf1ce29",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e63d5c601ab809f1ef5be33e48788410cf1ce29/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "63b1d03ceb50050b1acc8112e58f1bced1d63421",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63b1d03ceb50050b1acc8112e58f1bced1d63421",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63b1d03ceb50050b1acc8112e58f1bced1d63421"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "2777c59f2877a8c7d3b602896321ace53fac9f86",
        "filename": "src/alias.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e63d5c601ab809f1ef5be33e48788410cf1ce29/src/alias.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e63d5c601ab809f1ef5be33e48788410cf1ce29/src/alias.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alias.h?ref=4e63d5c601ab809f1ef5be33e48788410cf1ce29",
        "patch": "@@ -18,7 +18,7 @@ class COutPoint;\n class CSyscoinAddress;\n struct CRecipient;\n \n-static const unsigned int MAX_GUID_LENGTH = 71;\n+static const unsigned int MAX_GUID_LENGTH = 20;\n static const unsigned int MAX_NAME_LENGTH = 256;\n static const unsigned int MAX_VALUE_LENGTH = 512;\n static const unsigned int MAX_SYMBOL_LENGTH = 8;"
      },
      {
        "sha": "2a2199a81cc3e9507eb83575ff49c5549e6c8b9b",
        "filename": "src/asset.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e63d5c601ab809f1ef5be33e48788410cf1ce29/src/asset.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e63d5c601ab809f1ef5be33e48788410cf1ce29/src/asset.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/asset.cpp?ref=4e63d5c601ab809f1ef5be33e48788410cf1ce29",
        "patch": "@@ -258,7 +258,7 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t}\n \t\tswitch (op) {\n \t\tcase OP_ASSET_ACTIVATE:\n-\t\t\tif (theAsset.vchAsset.size() > MAX_GUID_LENGTH)\n+\t\t\tif (theAsset.vchAsset.size() > MAX_ID  _LENGTH)\n \t\t\t{\n \t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2005 - \" + _(\"asset guid too long\");\n \t\t\t\treturn error(errorMessage.c_str());"
      },
      {
        "sha": "4e71556a71b1ccd019ade8c124935cc3157e57ab",
        "filename": "src/escrow.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e63d5c601ab809f1ef5be33e48788410cf1ce29/src/escrow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e63d5c601ab809f1ef5be33e48788410cf1ce29/src/escrow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/escrow.cpp?ref=4e63d5c601ab809f1ef5be33e48788410cf1ce29",
        "patch": "@@ -425,7 +425,7 @@ bool CheckEscrowInputs(const CTransaction &tx, int op, const vector<vector<unsig\n \t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4005 - \" + _(\"Quantity of order must be greator than 0\");\n \t\t\treturn error(errorMessage.c_str());\n \t\t}\n-\t\tif(theEscrow.vchOffer.size() > MAX_ID_LENGTH)\n+\t\tif(theEscrow.vchOffer.size() > MAX_GUID_LENGTH)\n \t\t{\n \t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4006 - \" + _(\"Escrow offer guid too long\");\n \t\t\treturn error(errorMessage.c_str());"
      }
    ]
  },
  {
    "sha": "cb8d9a93ea2bf3214da66ea5cb1ffe75527d2d28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjhkOWE5M2VhMmJmMzIxNGRhNjZlYTVjYjFmZmU3NTUyN2QyZDI4",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T17:12:29Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T17:12:29Z"
      },
      "message": "compile",
      "tree": {
        "sha": "064f5a4499b5be6a0ef3cbc2de2706b84ee86c9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/064f5a4499b5be6a0ef3cbc2de2706b84ee86c9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb8d9a93ea2bf3214da66ea5cb1ffe75527d2d28",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb8d9a93ea2bf3214da66ea5cb1ffe75527d2d28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb8d9a93ea2bf3214da66ea5cb1ffe75527d2d28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb8d9a93ea2bf3214da66ea5cb1ffe75527d2d28/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e63d5c601ab809f1ef5be33e48788410cf1ce29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e63d5c601ab809f1ef5be33e48788410cf1ce29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e63d5c601ab809f1ef5be33e48788410cf1ce29"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3a0f58a35a187e6a455d75c30e65c2190df880c6",
        "filename": "src/asset.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb8d9a93ea2bf3214da66ea5cb1ffe75527d2d28/src/asset.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb8d9a93ea2bf3214da66ea5cb1ffe75527d2d28/src/asset.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/asset.cpp?ref=cb8d9a93ea2bf3214da66ea5cb1ffe75527d2d28",
        "patch": "@@ -258,7 +258,7 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t}\n \t\tswitch (op) {\n \t\tcase OP_ASSET_ACTIVATE:\n-\t\t\tif (theAsset.vchAsset.size() > MAX_ID  _LENGTH)\n+\t\t\tif (theAsset.vchAsset.size() > MAX_GUID_LENGTH)\n \t\t\t{\n \t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2005 - \" + _(\"asset guid too long\");\n \t\t\t\treturn error(errorMessage.c_str());"
      }
    ]
  },
  {
    "sha": "3f4110398855a8812b210462020ddb7de9838d12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjQxMTAzOTg4NTVhODgxMmIyMTA0NjIwMjBkZGI3ZGU5ODM4ZDEy",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T17:33:06Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T17:33:06Z"
      },
      "message": "update tests",
      "tree": {
        "sha": "a3b97981b1b2bd172457838db08b4bf3f9e84f2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3b97981b1b2bd172457838db08b4bf3f9e84f2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f4110398855a8812b210462020ddb7de9838d12",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f4110398855a8812b210462020ddb7de9838d12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f4110398855a8812b210462020ddb7de9838d12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f4110398855a8812b210462020ddb7de9838d12/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb8d9a93ea2bf3214da66ea5cb1ffe75527d2d28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb8d9a93ea2bf3214da66ea5cb1ffe75527d2d28",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb8d9a93ea2bf3214da66ea5cb1ffe75527d2d28"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 23,
      "deletions": 22
    },
    "files": [
      {
        "sha": "5539b51a153c2e16367d9555c61bb2591d7c337d",
        "filename": "src/test/syscoin_asset_allocation_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f4110398855a8812b210462020ddb7de9838d12/src/test/syscoin_asset_allocation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f4110398855a8812b210462020ddb7de9838d12/src/test/syscoin_asset_allocation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_allocation_tests.cpp?ref=3f4110398855a8812b210462020ddb7de9838d12",
        "patch": "@@ -28,7 +28,7 @@ BOOST_AUTO_TEST_CASE(generate_asset_allocation_send)\n \tGenerateBlocks(5);\n \tAliasNew(\"node1\", \"jagassetallocationsend1\", \"data\");\n \tAliasNew(\"node2\", \"jagassetallocationsend2\", \"data\");\n-\tstring guid = AssetNew(\"node1\", \"newassetsend\", \"jagassetallocationsend1\", \"data\", \"8\", \"false\", \"1\", \"-1\");\n+\tstring guid = AssetNew(\"node1\", \"usd\", \"jagassetallocationsend1\", \"data\", \"8\", \"false\", \"1\", \"-1\");\n \n \tAssetSend(\"node1\", guid, \"\\\"[{\\\\\\\"aliasto\\\\\\\":\\\\\\\"jagassetallocationsend1\\\\\\\",\\\\\\\"amount\\\\\\\":1}]\\\"\", \"assetallocationsend\");\n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetallocationsend1 false\"));"
      },
      {
        "sha": "4c82ed28602f1172d11da3aaa397f1920790e37e",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 21,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f4110398855a8812b210462020ddb7de9838d12/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f4110398855a8812b210462020ddb7de9838d12/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=3f4110398855a8812b210462020ddb7de9838d12",
        "patch": "@@ -291,9 +291,10 @@ BOOST_AUTO_TEST_CASE(generate_big_assetdata)\n \t// 256 bytes long\n \tstring gooddata = \"SfsddfdfsdsfSfsdfdfsdsfDsdsdsdsfsfsdsfsdsfdsfsdsfdsfsdsfsdSfsdfdfsdsfSfsdfdfsdsfDsdsdsdsfsfsdsfsdsfdsfsdsfdsfsdsfsdSfsdfdfsdsfSfsdfdfsdsfDsdsdsdsfsfsdsfsdsfdsfsdsfdsfsdsfsdSfsdfdfsdsfSfsdfdfsdsfDsdsdsdsfsfsdsfsdsfdsfsdsfdsfsdsfsdSfsdfdfsdsfSfsdfdfsdsDfdfdd\";\n \t// 257 bytes long\n+\tUniValue r;\n \tstring baddata = gooddata + \"a\";\n-\tstring guid = AssetNew(\"node1\", \"newasset\", \"jagassetbig1\", gooddata);\n-\tstring guid1 = AssetNew(\"node1\", \"newasset\", \"jagassetbig1\", gooddata);\n+\tstring guid = AssetNew(\"node1\", \"chf\", \"jagassetbig1\", gooddata);\n+\tstring guid1 = AssetNew(\"node1\", \"usd\", \"jagassetbig1\", gooddata);\n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + guid + \" false\"));\n \tBOOST_CHECK(find_value(r.get_obj(), \"_id\").get_str() == guid);\n \tBOOST_CHECK(find_value(r.get_obj(), \"symbol\").get_str() == \"NEWASSET\");\n@@ -333,7 +334,7 @@ BOOST_AUTO_TEST_CASE(generate_assetuppercase)\n \tprintf(\"Running generate_assetuppercase...\\n\");\n \tUniValue r;\n \tAliasNew(\"node1\", \"jagassetuppercase\", \"data\");\n-\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetnew uppercase jagassetuppercase data assets 8 false 1 1 0 false ''\"));\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetnew upper jagassetuppercase data assets 8 false 1 1 0 false ''\"));\n \tUniValue arr = r.get_array();\n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"signrawtransaction \" + arr[0].get_str()));\n \tstring hex_str = find_value(r.get_obj(), \"hex\").get_str();\n@@ -342,7 +343,7 @@ BOOST_AUTO_TEST_CASE(generate_assetuppercase)\n \tGenerateBlocks(5);\n \t// assetinfo is case incensitive\n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + arr[0].get_str() + \" false\"));\n-\tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"symbol\").get_str(), \"UPPERCASE\");\n+\tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"symbol\").get_str(), \"UPPER\");\n }\n BOOST_AUTO_TEST_CASE(generate_asset_collect_interest)\n {\n@@ -352,7 +353,7 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest)\n \tAliasNew(\"node1\", \"jagassetcollection\", \"data\");\n \tAliasNew(\"node1\", \"jagassetcollectionreceiver\", \"data\");\n \t// setup asset with 5% interest hourly (unit test mode calculates interest hourly not annually)\n-\tstring guid = AssetNew(\"node1\", \"newassetcollection\", \"jagassetcollection\", \"data\", \"8\", \"false\", \"10000\", \"-1\", \"0.05\");\n+\tstring guid = AssetNew(\"node1\", \"cad\", \"jagassetcollection\", \"data\", \"8\", \"false\", \"10000\", \"-1\", \"0.05\");\n \tAssetSend(\"node1\", guid, \"\\\"[{\\\\\\\"aliasto\\\\\\\":\\\\\\\"jagassetcollectionreceiver\\\\\\\",\\\\\\\"amount\\\\\\\":5000}]\\\"\", \"memoassetinterest\");\n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectionreceiver false\"));\n \tUniValue balance = find_value(r.get_obj(), \"balance\");\n@@ -374,7 +375,7 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_average_balance)\n \tAliasNew(\"node1\", \"jagassetcollectionavg\", \"data\");\n \tAliasNew(\"node1\", \"jagassetcollectionrcveravg\", \"data\");\n \t// setup asset with 5% interest hourly (unit test mode calculates interest hourly not annually)\n-\tstring guid = AssetNew(\"node1\", \"avgbalanceasset\", \"jagassetcollectionavg\", \"data\", \"8\", \"false\", \"10000\", \"-1\", \"0.05\");\n+\tstring guid = AssetNew(\"node1\", \"token\", \"jagassetcollectionavg\", \"data\", \"8\", \"false\", \"10000\", \"-1\", \"0.05\");\n \tAssetSend(\"node1\", guid, \"\\\"[{\\\\\\\"aliasto\\\\\\\":\\\\\\\"jagassetcollectionrcveravg\\\\\\\",\\\\\\\"amount\\\\\\\":1000}]\\\"\", \"memoassetinterest\");\n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectionrcveravg false\"));\n \tUniValue balance = find_value(r.get_obj(), \"balance\");\n@@ -418,7 +419,7 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_update_with_average_balance\n \tAliasNew(\"node1\", \"jagassetcollectionavgu\", \"data\");\n \tAliasNew(\"node1\", \"jagassetcollectionrcveravgu\", \"data\");\n \t// setup asset with 5% interest hourly (unit test mode calculates interest hourly not annually), can adjust the rate\n-\tstring guid = AssetNew(\"node1\", \"avgbalanceassetu\", \"jagassetcollectionavgu\", \"data\", \"8\", \"false\", \"10000\", \"-1\", \"0.05\", \"true\");\n+\tstring guid = AssetNew(\"node1\", \"mytoken\", \"jagassetcollectionavgu\", \"data\", \"8\", \"false\", \"10000\", \"-1\", \"0.05\", \"true\");\n \tAssetSend(\"node1\", guid, \"\\\"[{\\\\\\\"aliasto\\\\\\\":\\\\\\\"jagassetcollectionrcveravgu\\\\\\\",\\\\\\\"amount\\\\\\\":1000}]\\\"\", \"memoassetinterest\");\n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectionrcveravgu false\"));\n \tUniValue balance = find_value(r.get_obj(), \"balance\");\n@@ -468,7 +469,7 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_every_block)\n \tAliasNew(\"node1\", \"jagassetcollection1\", \"data\");\n \tAliasNew(\"node1\", \"jagassetcollectionreceiver1\", \"data\");\n \t// setup asset with 10% interest hourly (unit test mode calculates interest hourly not annually)\n-\tstring guid = AssetNew(\"node1\", \"newassetcollection1\", \"jagassetcollection1\", \"data\", \"8\", \"false\", \"10000\", \"-1\", \"0.05\");\n+\tstring guid = AssetNew(\"node1\", \"a\", \"jagassetcollection1\", \"data\", \"8\", \"false\", \"10000\", \"-1\", \"0.05\");\n \tAssetSend(\"node1\", guid, \"\\\"[{\\\\\\\"aliasto\\\\\\\":\\\\\\\"jagassetcollectionreceiver1\\\\\\\",\\\\\\\"amount\\\\\\\":5000}]\\\"\", \"memoassetinterest1\");\n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectionreceiver1 false\"));\n \tUniValue balance = find_value(r.get_obj(), \"balance\");\n@@ -491,7 +492,7 @@ BOOST_AUTO_TEST_CASE(generate_assetupdate)\n \tprintf(\"Running generate_assetupdate...\\n\");\n \tAliasNew(\"node1\", \"jagassetupdate\", \"data\");\n \tAliasNew(\"node2\", \"jagassetupdate1\", \"data\");\n-\tstring guid = AssetNew(\"node1\", \"assetupdatename\", \"jagassetupdate\", \"data\");\n+\tstring guid = AssetNew(\"node1\", \"b\", \"jagassetupdate\", \"data\");\n \t// update an asset that isn't yours\n \tUniValue r;\n \t//\"assetupdate [asset] [public] [category=assets] [supply] [interest_rate] [witness]\\n\"\n@@ -509,7 +510,7 @@ BOOST_AUTO_TEST_CASE(generate_assetupdate)\n \tUniValue balance = find_value(r.get_obj(), \"balance\");\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(balance, 8, false), 6*COIN);\n \t// update interest rate\n-\tstring guid1 = AssetNew(\"node1\", \"assetupdateinterest\", \"jagassetupdate\", \"data\", \"8\", \"false\", \"1\", \"10\", \"0.1\", \"true\");\n+\tstring guid1 = AssetNew(\"node1\", \"c\", \"jagassetupdate\", \"data\", \"8\", \"false\", \"1\", \"10\", \"0.1\", \"true\");\n \tAssetUpdate(\"node1\", guid1, \"pub12\", \"''\", \"0.25\");\n \t// ensure can't update interest rate (use initial asset which has can_adjust_rate set to false)\n \tBOOST_CHECK_THROW(r = CallRPC(\"node1\", \"assetupdate \" + guid + \" jagassetupdate assets 1 0.11 ''\"), runtime_error);\n@@ -522,7 +523,7 @@ BOOST_AUTO_TEST_CASE(generate_assetupdate_precision)\n \tUniValue r;\n \tfor (int i = 0; i <= 8; i++) {\n \t\tstring istr = boost::lexical_cast<string>(i);\n-\t\tstring assetName = \"jagassetprecision\" + istr;\n+\t\tstring assetName = \"asset\" + istr;\n \t\tstring aliasName = \"jagaliasprecision\" + istr;\n \t\tAliasNew(\"node1\", aliasName, \"data\");\n \t\t// test max supply for every possible precision\n@@ -546,14 +547,14 @@ BOOST_AUTO_TEST_CASE(generate_assetupdate_precision)\n \t}\n \tAliasNew(\"node1\", \"badprecisionalias\", \"data\");\n \t// invalid precisions\n-\tBOOST_CHECK_THROW(CallRPC(\"node1\", \"assetnew highprecision badprecisionalias pub assets 9 false 1 2 0 false ''\"), runtime_error);\n-\tBOOST_CHECK_THROW(CallRPC(\"node1\", \"assetnew lowprecision badprecisionalias pub assets -1 false 1 2 0 false ''\"), runtime_error);\n+\tBOOST_CHECK_THROW(CallRPC(\"node1\", \"assetnew high badprecisionalias pub assets 9 false 1 2 0 false ''\"), runtime_error);\n+\tBOOST_CHECK_THROW(CallRPC(\"node1\", \"assetnew low badprecisionalias pub assets -1 false 1 2 0 false ''\"), runtime_error);\n \n \t// try an input range asset for 10m max with precision 0\n \t// for fun try to use precision 4 for input range it should default to 0\n \tstring istr = boost::lexical_cast<string>(4);\n \tint i = 0;\n-\tstring assetName = \"jagassetir\" + istr;\n+\tstring assetName = \"usd\" + istr;\n \tstring aliasName = \"jagaliasir\" + istr;\n \tAliasNew(\"node1\", aliasName, \"data\");\n \t// test max supply\n@@ -582,7 +583,7 @@ BOOST_AUTO_TEST_CASE(generate_assetsend)\n \tprintf(\"Running generate_assetsend...\\n\");\n \tAliasNew(\"node1\", \"jagassetsend\", \"data\");\n \tAliasNew(\"node2\", \"jagassetsend1\", \"data\");\n-\tstring guid = AssetNew(\"node1\", \"assetsendname\", \"jagassetsend\", \"data\", \"8\", \"false\", \"10\", \"20\");\n+\tstring guid = AssetNew(\"node1\", \"elf\", \"jagassetsend\", \"data\", \"8\", \"false\", \"10\", \"20\");\n \t// [{\\\"aliasto\\\":\\\"aliasname\\\",\\\"amount\\\":amount},...]\n \tAssetSend(\"node1\", guid, \"\\\"[{\\\\\\\"aliasto\\\\\\\":\\\\\\\"jagassetsend1\\\\\\\",\\\\\\\"amount\\\\\\\":7}]\\\"\", \"memoassetsend\");\n \t// ensure amounts are correct\n@@ -645,7 +646,7 @@ BOOST_AUTO_TEST_CASE(generate_assetsend_ranges)\n \tAliasNew(\"node1\", \"jagassetsendranges\", \"data\");\n \tAliasNew(\"node2\", \"jagassetsendranges1\", \"data\");\n \t// if use input ranges update supply and ensure adds to end of allocation, ensure balance gets updated properly\n-\tstring guid = AssetNew(\"node1\", \"assetsendnameranges\", \"jagassetsendranges\", \"data\", \"8\", \"true\", \"10\", \"20\");\n+\tstring guid = AssetNew(\"node1\", \"msft\", \"jagassetsendranges\", \"data\", \"8\", \"true\", \"10\", \"20\");\n \t// send range 1-2, 4-6, 8-9 and then add 1 balance and expect it to add to 10, add 9 more and expect it to add to 11, try to add one more and won't let you due to max 20 supply\n \t// [{\\\"aliasto\\\":\\\"aliasname\\\",\\\"ranges\\\":[{\\\"start\\\":index,\\\"end\\\":index},...]},...]\n \t// break ranges into 0, 3, 7\n@@ -848,8 +849,8 @@ BOOST_AUTO_TEST_CASE(generate_assettransfer)\n \tAliasNew(\"node2\", \"jagasset2\", \"changeddata2\");\n \tAliasNew(\"node3\", \"jagasset3\", \"changeddata3\");\n \n-\tstring guid1 = AssetNew(\"node1\", guid1, \"jagasset1\", \"pubdata\");\n-\tstring guid2 = AssetNew(\"node1\", guid2, \"jagasset1\", \"pubdata\");\n+\tstring guid1 = AssetNew(\"node1\", \"dow\", \"jagasset1\", \"pubdata\");\n+\tstring guid2 = AssetNew(\"node1\", \"cat\", \"jagasset1\", \"pubdata\");\n \tAssetUpdate(\"node1\", \"asset1\", \"pub3\");\n \tUniValue r;\n \tAssetTransfer(\"node1\", \"node2\", guid1, \"jagasset2\");\n@@ -864,7 +865,7 @@ BOOST_AUTO_TEST_CASE(generate_assettransfer)\n \tAssetUpdate(\"node2\", guid1, \"public\");\n \n \t// retransfer asset\n-\tAssetTransfer(\"node2\", \"node3\", guid1 \"jagasset3\");\n+\tAssetTransfer(\"node2\", \"node3\", guid1, \"jagasset3\");\n }\n BOOST_AUTO_TEST_CASE(generate_assetpruning)\n {\n@@ -875,7 +876,7 @@ BOOST_AUTO_TEST_CASE(generate_assetpruning)\n \tAliasNew(\"node1\", \"jagprunealias1\", \"changeddata1\");\n \t// stop node2 create a service,  mine some blocks to expire the service, when we restart the node the service data won't be synced with node2\n \tStopNode(\"node2\");\n-\tstring guid = AssetNew(\"node1\", \"jagprune1\", \"jagprunealias1\", \"pubdata\");\n+\tstring guid = AssetNew(\"node1\", \"bcf\", \"jagprunealias1\", \"pubdata\");\n \t// we can find it as normal first\n \tBOOST_CHECK_NO_THROW(CallRPC(\"node1\", \"aliasinfo jagprunealias1\"));\n \t// make sure our offer alias doesn't expire\n@@ -906,7 +907,7 @@ BOOST_AUTO_TEST_CASE(generate_assetpruning)\n \tBOOST_CHECK_NO_THROW(CallRPC(\"node1\", \"aliasinfo jagprunealias1\"));\n \n \t// try to create asset with same name\n-\tBOOST_CHECK_THROW(CallRPC(\"node1\", \"assetnew jagprune1 jagprunealias1 pubdata assets 8 false 1 1 0 false ''\"), runtime_error);\n+\tBOOST_CHECK_THROW(CallRPC(\"node1\", \"assetnew sys jagprunealias1 pubdata assets 8 false 1 1 0 false ''\"), runtime_error);\n \tStartNode(\"node3\");\n }\n BOOST_AUTO_TEST_SUITE_END ()"
      }
    ]
  },
  {
    "sha": "3744106a200792823755598cbe268f9298fe4bb7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzQ0MTA2YTIwMDc5MjgyMzc1NTU5OGNiZTI2OGY5Mjk4ZmU0YmI3",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T17:34:27Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T17:34:27Z"
      },
      "message": "compile",
      "tree": {
        "sha": "418efb3b8a56bb5b33cefb94f22225ba72081dd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/418efb3b8a56bb5b33cefb94f22225ba72081dd3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3744106a200792823755598cbe268f9298fe4bb7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3744106a200792823755598cbe268f9298fe4bb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3744106a200792823755598cbe268f9298fe4bb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3744106a200792823755598cbe268f9298fe4bb7/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f4110398855a8812b210462020ddb7de9838d12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f4110398855a8812b210462020ddb7de9838d12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f4110398855a8812b210462020ddb7de9838d12"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "398130c4f86196e6b7ae80de7488aec12d2e463d",
        "filename": "src/test/syscoin_asset_allocation_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3744106a200792823755598cbe268f9298fe4bb7/src/test/syscoin_asset_allocation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3744106a200792823755598cbe268f9298fe4bb7/src/test/syscoin_asset_allocation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_allocation_tests.cpp?ref=3744106a200792823755598cbe268f9298fe4bb7",
        "patch": "@@ -54,7 +54,7 @@ BOOST_AUTO_TEST_CASE(generate_asset_allocation_send)\n \tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"status\").get_int(), ZDAG_MINOR_CONFLICT_OK);\n \n \t// first tx should have to wait 1 sec for good status\n-\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationsenderstatus \" + guid +  jagassetallocationsend1 \" + txid1));\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationsenderstatus \" + guid +  \" jagassetallocationsend1 \" + txid1));\n \tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"status\").get_int(), ZDAG_MINOR_CONFLICT_OK);\n \n \t// check just sender"
      }
    ]
  },
  {
    "sha": "8a93d6c1f8040a8068630d9d54c3c8bf0ac15a20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTkzZDZjMWY4MDQwYTgwNjg2MzBkOWQ1NGMzYzhiZjBhYzE1YTIw",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T17:35:16Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T17:35:16Z"
      },
      "message": "compile",
      "tree": {
        "sha": "8a33ab4966497cfce56e54ef325b50f5b091a216",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a33ab4966497cfce56e54ef325b50f5b091a216"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a93d6c1f8040a8068630d9d54c3c8bf0ac15a20",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a93d6c1f8040a8068630d9d54c3c8bf0ac15a20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a93d6c1f8040a8068630d9d54c3c8bf0ac15a20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a93d6c1f8040a8068630d9d54c3c8bf0ac15a20/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3744106a200792823755598cbe268f9298fe4bb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3744106a200792823755598cbe268f9298fe4bb7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3744106a200792823755598cbe268f9298fe4bb7"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "196928ac0a1f5062d5e13e48b7e120cc770670f0",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a93d6c1f8040a8068630d9d54c3c8bf0ac15a20/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a93d6c1f8040a8068630d9d54c3c8bf0ac15a20/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=8a93d6c1f8040a8068630d9d54c3c8bf0ac15a20",
        "patch": "@@ -298,7 +298,7 @@ BOOST_AUTO_TEST_CASE(generate_big_assetdata)\n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + guid + \" false\"));\n \tBOOST_CHECK(find_value(r.get_obj(), \"_id\").get_str() == guid);\n \tBOOST_CHECK(find_value(r.get_obj(), \"symbol\").get_str() == \"NEWASSET\");\n-\tBOOST_CHECK_NO_THROW(r = CallRPC(otherNode1, \"assetinfo \" + guid1 + \" false\"));\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + guid1 + \" false\"));\n \tBOOST_CHECK(find_value(r.get_obj(), \"_id\").get_str() == guid1);\n \tBOOST_CHECK(find_value(r.get_obj(), \"symbol\").get_str() == \"NEWASSET\");\n }"
      }
    ]
  },
  {
    "sha": "6deb5d33e44c79097ee0f6d3fb3d4d1357bd83c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGViNWQzM2U0NGM3OTA5N2VlMGY2ZDNmYjNkNGQxMzU3YmQ4M2Mx",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T17:46:46Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T17:46:46Z"
      },
      "message": "pub key should use encrypted guid length check",
      "tree": {
        "sha": "b21ea15cdde51527b81f0c2c189d7c245ca78ec3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b21ea15cdde51527b81f0c2c189d7c245ca78ec3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6deb5d33e44c79097ee0f6d3fb3d4d1357bd83c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6deb5d33e44c79097ee0f6d3fb3d4d1357bd83c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6deb5d33e44c79097ee0f6d3fb3d4d1357bd83c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6deb5d33e44c79097ee0f6d3fb3d4d1357bd83c1/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a93d6c1f8040a8068630d9d54c3c8bf0ac15a20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a93d6c1f8040a8068630d9d54c3c8bf0ac15a20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a93d6c1f8040a8068630d9d54c3c8bf0ac15a20"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4f068bda5e727298749e1ef6012a1adc40854d36",
        "filename": "src/alias.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6deb5d33e44c79097ee0f6d3fb3d4d1357bd83c1/src/alias.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6deb5d33e44c79097ee0f6d3fb3d4d1357bd83c1/src/alias.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alias.cpp?ref=6deb5d33e44c79097ee0f6d3fb3d4d1357bd83c1",
        "patch": "@@ -372,7 +372,7 @@ bool CheckAliasInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t\terrorMessage = \"SYSCOIN_ALIAS_CONSENSUS_ERROR: ERRCODE: 5006 - \" + _(\"Encryption private key too long\");\n \t\t\treturn error(errorMessage.c_str());\n \t\t}\n-\t\tif(theAlias.vchEncryptionPublicKey.size() > MAX_GUID_LENGTH)\n+\t\tif(theAlias.vchEncryptionPublicKey.size() > MAX_ENCRYPTED_GUID_LENGTH)\n \t\t{\n \t\t\terrorMessage = \"SYSCOIN_ALIAS_CONSENSUS_ERROR: ERRCODE: 5007 - \" + _(\"Encryption public key too long\");\n \t\t\treturn error(errorMessage.c_str());"
      }
    ]
  },
  {
    "sha": "1eb436fb67ac376e63d801e51c586dff5015bb22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZWI0MzZmYjY3YWMzNzZlNjNkODAxZTUxYzU4NmRmZjUwMTViYjIy",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T18:09:40Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T18:09:40Z"
      },
      "message": "fix test",
      "tree": {
        "sha": "d2135e06dbe2841ac8a0e7ea19c7a7d94e2ff184",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2135e06dbe2841ac8a0e7ea19c7a7d94e2ff184"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1eb436fb67ac376e63d801e51c586dff5015bb22",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1eb436fb67ac376e63d801e51c586dff5015bb22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1eb436fb67ac376e63d801e51c586dff5015bb22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1eb436fb67ac376e63d801e51c586dff5015bb22/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6deb5d33e44c79097ee0f6d3fb3d4d1357bd83c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6deb5d33e44c79097ee0f6d3fb3d4d1357bd83c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6deb5d33e44c79097ee0f6d3fb3d4d1357bd83c1"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b579f46498a30f7bc20676ffd38cf7d37faf4beb",
        "filename": "src/alias.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1eb436fb67ac376e63d801e51c586dff5015bb22/src/alias.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1eb436fb67ac376e63d801e51c586dff5015bb22/src/alias.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alias.cpp?ref=1eb436fb67ac376e63d801e51c586dff5015bb22",
        "patch": "@@ -705,7 +705,7 @@ bool GetSyscoinData(const CTransaction &tx, vector<unsigned char> &vchData, vect\n }\n bool IsValidAliasName(const std::vector<unsigned char> &vchAlias)\n {\n-\treturn (vchAlias.size() <= MAX_GUID_LENGTH && vchAlias.size() >= 3);\n+\treturn (vchAlias.size() <= 71 && vchAlias.size() >= 3);\n }\n bool GetSyscoinData(const CScript &scriptPubKey, vector<unsigned char> &vchData, vector<unsigned char> &vchHash)\n {"
      }
    ]
  },
  {
    "sha": "72f3d4e0c39c49e42f3bd5e3f08aab8e186d2555",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmYzZDRlMGMzOWM0OWU0MmYzYmQ1ZTNmMDhhYWI4ZTE4NmQyNTU1",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T18:18:04Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T18:18:04Z"
      },
      "message": "fix assetnew",
      "tree": {
        "sha": "4178cd8fdda8a8315307141267e263e0b1b6d82c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4178cd8fdda8a8315307141267e263e0b1b6d82c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72f3d4e0c39c49e42f3bd5e3f08aab8e186d2555",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72f3d4e0c39c49e42f3bd5e3f08aab8e186d2555",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72f3d4e0c39c49e42f3bd5e3f08aab8e186d2555",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72f3d4e0c39c49e42f3bd5e3f08aab8e186d2555/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1eb436fb67ac376e63d801e51c586dff5015bb22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1eb436fb67ac376e63d801e51c586dff5015bb22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1eb436fb67ac376e63d801e51c586dff5015bb22"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "75074ddc8d0f957cf17805d573622d9414fd2a0b",
        "filename": "src/asset.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72f3d4e0c39c49e42f3bd5e3f08aab8e186d2555/src/asset.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72f3d4e0c39c49e42f3bd5e3f08aab8e186d2555/src/asset.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/asset.cpp?ref=72f3d4e0c39c49e42f3bd5e3f08aab8e186d2555",
        "patch": "@@ -742,6 +742,7 @@ UniValue assetnew(const UniValue& params, bool fHelp) {\n \tSendMoneySyscoin(vchAlias, vchWitness, aliasRecipient, vecSend, wtx, &coinControl);\n \tUniValue res(UniValue::VARR);\n \tres.push_back(EncodeHexTx(wtx));\n+\tres.push_back(stringFromVch(newAsset.vchAsset));\n \treturn res;\n }\n "
      }
    ]
  },
  {
    "sha": "8091092f882a0df47ddd4c3a5fb7c92f513479f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDkxMDkyZjg4MmEwZGY0N2RkZDRjM2E1ZmI3YzkyZjUxMzQ3OWY5",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T18:27:52Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T18:27:52Z"
      },
      "message": "wip asset tests",
      "tree": {
        "sha": "bfc080741056e5568f2f541ce814fe248ed192e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfc080741056e5568f2f541ce814fe248ed192e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8091092f882a0df47ddd4c3a5fb7c92f513479f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8091092f882a0df47ddd4c3a5fb7c92f513479f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8091092f882a0df47ddd4c3a5fb7c92f513479f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8091092f882a0df47ddd4c3a5fb7c92f513479f9/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72f3d4e0c39c49e42f3bd5e3f08aab8e186d2555",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72f3d4e0c39c49e42f3bd5e3f08aab8e186d2555",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72f3d4e0c39c49e42f3bd5e3f08aab8e186d2555"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "79817c2449e48bca7785552ebc7aeb7ffcbb6a7c",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8091092f882a0df47ddd4c3a5fb7c92f513479f9/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8091092f882a0df47ddd4c3a5fb7c92f513479f9/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=8091092f882a0df47ddd4c3a5fb7c92f513479f9",
        "patch": "@@ -297,10 +297,10 @@ BOOST_AUTO_TEST_CASE(generate_big_assetdata)\n \tstring guid1 = AssetNew(\"node1\", \"usd\", \"jagassetbig1\", gooddata);\n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + guid + \" false\"));\n \tBOOST_CHECK(find_value(r.get_obj(), \"_id\").get_str() == guid);\n-\tBOOST_CHECK(find_value(r.get_obj(), \"symbol\").get_str() == \"NEWASSET\");\n+\tBOOST_CHECK(find_value(r.get_obj(), \"symbol\").get_str() == \"CHF\");\n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + guid1 + \" false\"));\n \tBOOST_CHECK(find_value(r.get_obj(), \"_id\").get_str() == guid1);\n-\tBOOST_CHECK(find_value(r.get_obj(), \"symbol\").get_str() == \"NEWASSET\");\n+\tBOOST_CHECK(find_value(r.get_obj(), \"symbol\").get_str() == \"USD\");\n }\n BOOST_AUTO_TEST_CASE(generate_big_assetname)\n {\n@@ -342,7 +342,7 @@ BOOST_AUTO_TEST_CASE(generate_assetuppercase)\n \n \tGenerateBlocks(5);\n \t// assetinfo is case incensitive\n-\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + arr[0].get_str() + \" false\"));\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + arr[1].get_str() + \" false\"));\n \tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"symbol\").get_str(), \"UPPER\");\n }\n BOOST_AUTO_TEST_CASE(generate_asset_collect_interest)"
      },
      {
        "sha": "24a11376ae34d0dce315d8237bdf0ddd05c00236",
        "filename": "src/test/test_syscoin_services.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8091092f882a0df47ddd4c3a5fb7c92f513479f9/src/test/test_syscoin_services.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8091092f882a0df47ddd4c3a5fb7c92f513479f9/src/test/test_syscoin_services.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_syscoin_services.cpp?ref=8091092f882a0df47ddd4c3a5fb7c92f513479f9",
        "patch": "@@ -1101,7 +1101,7 @@ void AssetUpdate(const string& node, const string& name, const string& pubdata,\n \tBOOST_CHECK_NO_THROW(r = CallRPC(node, \"assetinfo \" + name + \" false\"));\n \n \tBOOST_CHECK(find_value(r.get_obj(), \"_id\").get_str() == name);\n-\tBOOST_CHECK(find_value(r.get_obj(), \"symbol\").get_str() == oldsymbol);\n+\tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"symbol\").get_str(), oldsymbol);\n \tBOOST_CHECK(find_value(r.get_obj(), \"alias\").get_str() == oldalias);\n \tBOOST_CHECK_EQUAL(((int)(find_value(r.get_obj(), \"interest_rate\").get_real() * 1000 + 0.5)), ((int)(boost::lexical_cast<float>(newinterest) * 1000)));\n \ttotalsupply = find_value(r.get_obj(), \"total_supply\");\n@@ -1111,7 +1111,7 @@ void AssetUpdate(const string& node, const string& name, const string& pubdata,\n \t{\n \t\tBOOST_CHECK_NO_THROW(r = CallRPC(otherNode1, \"assetinfo \" + name + \" false\"));\n \t\tBOOST_CHECK(find_value(r.get_obj(), \"_id\").get_str() == name);\n-\t\tBOOST_CHECK(find_value(r.get_obj(), \"symbol\").get_str() == oldsymbol);\n+\t\tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"symbol\").get_str() , oldsymbol);\n \t\tBOOST_CHECK(find_value(r.get_obj(), \"alias\").get_str() == oldalias);\n \t\tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"publicvalue\").get_str(), newpubdata);\n \t\tBOOST_CHECK_EQUAL(((int)(find_value(r.get_obj(), \"interest_rate\").get_real() * 1000 + 0.5)), ((int)(boost::lexical_cast<float>(newinterest) * 1000)));\n@@ -1123,7 +1123,7 @@ void AssetUpdate(const string& node, const string& name, const string& pubdata,\n \t{\n \t\tBOOST_CHECK_NO_THROW(r = CallRPC(otherNode2, \"assetinfo \" + name + \" false\"));\n \t\tBOOST_CHECK(find_value(r.get_obj(), \"_id\").get_str() == name);\n-\t\tBOOST_CHECK(find_value(r.get_obj(), \"symbol\").get_str() == oldsymbol);\n+\t\tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"symbol\").get_str(), oldsymbol);\n \t\tBOOST_CHECK(find_value(r.get_obj(), \"alias\").get_str() == oldalias);\n \t\tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"publicvalue\").get_str(), newpubdata);\n \t\tBOOST_CHECK_EQUAL(((int)(find_value(r.get_obj(), \"interest_rate\").get_real() * 1000 + 0.5)), ((int)(boost::lexical_cast<float>(newinterest) * 1000)));"
      }
    ]
  },
  {
    "sha": "98dab31d55510512ec84cbdff2bc5da0f5650c1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OGRhYjMxZDU1NTEwNTEyZWM4NGNiZGZmMmJjNWRhMGY1NjUwYzFk",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T19:59:04Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T19:59:04Z"
      },
      "message": "fix asset default assignments",
      "tree": {
        "sha": "aaaf816c10840a1db96bfa39b4af7d2a001c63a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aaaf816c10840a1db96bfa39b4af7d2a001c63a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98dab31d55510512ec84cbdff2bc5da0f5650c1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98dab31d55510512ec84cbdff2bc5da0f5650c1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98dab31d55510512ec84cbdff2bc5da0f5650c1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98dab31d55510512ec84cbdff2bc5da0f5650c1d/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8091092f882a0df47ddd4c3a5fb7c92f513479f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8091092f882a0df47ddd4c3a5fb7c92f513479f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8091092f882a0df47ddd4c3a5fb7c92f513479f9"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "167bd38c55edf0535547cc478e8b6f9819af2a85",
        "filename": "src/asset.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98dab31d55510512ec84cbdff2bc5da0f5650c1d/src/asset.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98dab31d55510512ec84cbdff2bc5da0f5650c1d/src/asset.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/asset.cpp?ref=98dab31d55510512ec84cbdff2bc5da0f5650c1d",
        "patch": "@@ -428,10 +428,6 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t\ttheAsset.nBalance = dbAsset.nBalance;\n \t\t\ttheAsset.nTotalSupply = dbAsset.nBalance;\n \t\t\ttheAsset.nMaxSupply = dbAsset.nMaxSupply;\n-\t\t\ttheAsset.bUseInputRanges = dbAsset.bUseInputRanges;\n-\t\t\ttheAsset.bCanAdjustInterestRate = dbAsset.bCanAdjustInterestRate;\n-\t\t\ttheAsset.nPrecision = dbAsset.nPrecision;\n-\t\t\ttheAsset.vchSymbol = dbAsset.vchSymbol;\n \t\t}\n \n \t\tif (op == OP_ASSET_SEND) {\n@@ -536,7 +532,7 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t\t\t\t\t\treceiverAllocation.vchAsset = receiverAllocationTuple.vchAsset;\n \t\t\t\t\t\t\treceiverAllocation.nLastInterestClaimHeight = nHeight;\n \t\t\t\t\t\t}\n-\t\t\t\t\t\t\n+\n \t\t\t\t\t\treceiverAllocation.txHash = tx.GetHash();\n \t\t\t\t\t\tif (theAsset.fInterestRate > 0) {\n \t\t\t\t\t\t\tif (receiverAllocation.nHeight > 0) {\n@@ -552,7 +548,7 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t\t\t\t\tmergeRanges(receiverAllocation.listAllocationInputs, outputMerge);\n \t\t\t\t\t\treceiverAllocation.listAllocationInputs = outputMerge;\n \t\t\t\t\t\treceiverAllocation.nBalance += rangeTotals[i];\n-\t\t\n+\n \n \t\t\t\t\t\t// figure out senders subtracted ranges and balance\n \t\t\t\t\t\tvector<CRange> outputSubtract;\n@@ -574,6 +570,11 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t}\n \t\telse if (op != OP_ASSET_ACTIVATE)\n \t\t{\n+\t\t\t// these fields cannot change after activation\n+\t\t\ttheAsset.bUseInputRanges = dbAsset.bUseInputRanges;\n+\t\t\ttheAsset.bCanAdjustInterestRate = dbAsset.bCanAdjustInterestRate;\n+\t\t\ttheAsset.nPrecision = dbAsset.nPrecision;\n+\t\t\ttheAsset.vchSymbol = dbAsset.vchSymbol;\n \t\t\tif (theAsset.vchAlias.empty())\n \t\t\t\ttheAsset.vchAlias = dbAsset.vchAlias;\n \t\t\tif (theAsset.vchPubData.empty())"
      }
    ]
  },
  {
    "sha": "bf494b71dfbbf71af450a8de1950afb0f116c24a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjQ5NGI3MWRmYmJmNzFhZjQ1MGE4ZGUxOTUwYWZiMGYxMTZjMjRh",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T20:22:12Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T20:22:12Z"
      },
      "message": "fix test",
      "tree": {
        "sha": "8f8222c246c7ed4ec1457d3f68ae125719f4a58f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f8222c246c7ed4ec1457d3f68ae125719f4a58f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf494b71dfbbf71af450a8de1950afb0f116c24a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf494b71dfbbf71af450a8de1950afb0f116c24a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf494b71dfbbf71af450a8de1950afb0f116c24a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf494b71dfbbf71af450a8de1950afb0f116c24a/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98dab31d55510512ec84cbdff2bc5da0f5650c1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98dab31d55510512ec84cbdff2bc5da0f5650c1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98dab31d55510512ec84cbdff2bc5da0f5650c1d"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "d42eb299c3d4c066a0f8cd73f7f69b89d5ad86ac",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf494b71dfbbf71af450a8de1950afb0f116c24a/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf494b71dfbbf71af450a8de1950afb0f116c24a/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=bf494b71dfbbf71af450a8de1950afb0f116c24a",
        "patch": "@@ -305,15 +305,15 @@ BOOST_AUTO_TEST_CASE(generate_big_assetdata)\n BOOST_AUTO_TEST_CASE(generate_big_assetname)\n {\n \tGenerateBlocks(5);\n-\tprintf(\"Running generate_small_assetname...\\n\");\n+\tprintf(\"Running generate_big_assetname...\\n\");\n \tGenerateBlocks(5);\n-\tAliasNew(\"node1\", \"jagassetnamesmall\", \"data\");\n+\tAliasNew(\"node1\", \"jagassetnamebig\", \"data\");\n \t// 256 bytes long\n \tstring gooddata = \"SfsddfdfsdsfSfsdfdfsdsfDsdsdsdsfsfsdsfsdsfdsfsdsfdsfsdsfsdSfsdfdfsdsfSfsdfdfsdsfDsdsdsdsfsfsdsfsdsfdsfsdsfdsfsdsfsdSfsdfdfsdsfSfsdfdfsdsfDsdsdsdsfsfsdsfsdsfdsfsdsfdsfsdsfsdSfsdfdfsdsfSfsdfdfsdsfDsdsdsdsfsfsdsfsdsfdsfsdsfdsfsdsfsdSfsdfdfsdsfSfsdfdfsdsDfdfdd\";\n \t// cannot create this asset because its more than 8 chars\n-\tBOOST_CHECK_THROW(CallRPC(\"node1\", \"assetnew 123456789 jagassetnamesmall \" + gooddata + \" assets 8 false 1 1 0 false ''\"), runtime_error);\n+\tBOOST_CHECK_THROW(CallRPC(\"node1\", \"assetnew 123456789 jagassetnamebig \" + gooddata + \" assets 8 false 1 1 0 false ''\"), runtime_error);\n \t// its 3 chars now so its ok\n-\tBOOST_CHECK_NO_THROW(CallRPC(\"node1\", \"assetnew abc jagassetnamesmall \" + gooddata + \" assets 8 false 1 1 0 false ''\"));\n+\tBOOST_CHECK_NO_THROW(CallRPC(\"node1\", \"assetnew abc jagassetnamebig \" + gooddata + \" assets 8 false 1 1 0 false ''\"));\n }\n BOOST_AUTO_TEST_CASE(generate_bad_assetmaxsupply)\n {\n@@ -851,7 +851,7 @@ BOOST_AUTO_TEST_CASE(generate_assettransfer)\n \n \tstring guid1 = AssetNew(\"node1\", \"dow\", \"jagasset1\", \"pubdata\");\n \tstring guid2 = AssetNew(\"node1\", \"cat\", \"jagasset1\", \"pubdata\");\n-\tAssetUpdate(\"node1\", \"asset1\", \"pub3\");\n+\tAssetUpdate(\"node1\", guid1, \"pub3\");\n \tUniValue r;\n \tAssetTransfer(\"node1\", \"node2\", guid1, \"jagasset2\");\n \tAssetTransfer(\"node1\", \"node3\", guid2, \"jagasset3\");"
      }
    ]
  },
  {
    "sha": "987a5ed6028a8de0974b954d7a83dcfe895fdad1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODdhNWVkNjAyOGE4ZGUwOTc0Yjk1NGQ3YTgzZGNmZTg5NWZkYWQx",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T20:49:42Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T20:49:42Z"
      },
      "message": "fix asset test",
      "tree": {
        "sha": "6b7f73187f08e5ee1dccb6cb7bc1fac2aa5010f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b7f73187f08e5ee1dccb6cb7bc1fac2aa5010f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/987a5ed6028a8de0974b954d7a83dcfe895fdad1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/987a5ed6028a8de0974b954d7a83dcfe895fdad1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/987a5ed6028a8de0974b954d7a83dcfe895fdad1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/987a5ed6028a8de0974b954d7a83dcfe895fdad1/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf494b71dfbbf71af450a8de1950afb0f116c24a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf494b71dfbbf71af450a8de1950afb0f116c24a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf494b71dfbbf71af450a8de1950afb0f116c24a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c27c9f444d4bf96597ae687ed15dde590cf2bf4b",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/987a5ed6028a8de0974b954d7a83dcfe895fdad1/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/987a5ed6028a8de0974b954d7a83dcfe895fdad1/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=987a5ed6028a8de0974b954d7a83dcfe895fdad1",
        "patch": "@@ -880,7 +880,7 @@ BOOST_AUTO_TEST_CASE(generate_assetpruning)\n \t// we can find it as normal first\n \tBOOST_CHECK_NO_THROW(CallRPC(\"node1\", \"aliasinfo jagprunealias1\"));\n \t// make sure our offer alias doesn't expire\n-\tAssetUpdate(\"node1\", \"jagprune1\");\n+\tAssetUpdate(\"node1\", guid);\n \tGenerateBlocks(5, \"node1\");\n \tExpireAlias(\"jagprunealias1\");\n \tStartNode(\"node2\");\n@@ -895,7 +895,7 @@ BOOST_AUTO_TEST_CASE(generate_assetpruning)\n \tStopNode(\"node3\");\n \t\n \tAliasNew(\"node1\", \"jagprunealias1\", \"changeddata1\");\n-\tAssetUpdate(\"node1\", \"jagprune1\");\n+\tAssetUpdate(\"node1\", guid);\n \n \t// stop and start node1\n \tStopNode(\"node1\");"
      }
    ]
  },
  {
    "sha": "2946c90820ae7739d659f6edbd26abfd809ef976",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTQ2YzkwODIwYWU3NzM5ZDY1OWY2ZWRiZDI2YWJmZDgwOWVmOTc2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T22:12:10Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T22:12:10Z"
      },
      "message": "fix asset test",
      "tree": {
        "sha": "0bc45987a7ba95ebb00d4cce3abb8eda9504c3ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bc45987a7ba95ebb00d4cce3abb8eda9504c3ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2946c90820ae7739d659f6edbd26abfd809ef976",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2946c90820ae7739d659f6edbd26abfd809ef976",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2946c90820ae7739d659f6edbd26abfd809ef976",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2946c90820ae7739d659f6edbd26abfd809ef976/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "987a5ed6028a8de0974b954d7a83dcfe895fdad1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/987a5ed6028a8de0974b954d7a83dcfe895fdad1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/987a5ed6028a8de0974b954d7a83dcfe895fdad1"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cb773b448eadc8237c08d589b15b255f72033c5d",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2946c90820ae7739d659f6edbd26abfd809ef976/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2946c90820ae7739d659f6edbd26abfd809ef976/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=2946c90820ae7739d659f6edbd26abfd809ef976",
        "patch": "@@ -907,7 +907,7 @@ BOOST_AUTO_TEST_CASE(generate_assetpruning)\n \tBOOST_CHECK_NO_THROW(CallRPC(\"node1\", \"aliasinfo jagprunealias1\"));\n \n \t// try to create asset with same name\n-\tBOOST_CHECK_THROW(CallRPC(\"node1\", \"assetnew sys jagprunealias1 pubdata assets 8 false 1 1 0 false ''\"), runtime_error);\n+\tAssetNew(\"node1\", \"bcf\", \"jagprunealias1\", \"pubdata\");\n \tStartNode(\"node3\");\n }\n BOOST_AUTO_TEST_SUITE_END ()"
      }
    ]
  },
  {
    "sha": "ee66d25857a6a072c10c781995bc324489f7a25f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTY2ZDI1ODU3YTZhMDcyYzEwYzc4MTk5NWJjMzI0NDg5ZjdhMjVm",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T22:19:59Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T22:19:59Z"
      },
      "message": "fix tests, and language",
      "tree": {
        "sha": "ece8bafb1098109da29a3b08cd5dfdbbef077221",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ece8bafb1098109da29a3b08cd5dfdbbef077221"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee66d25857a6a072c10c781995bc324489f7a25f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee66d25857a6a072c10c781995bc324489f7a25f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee66d25857a6a072c10c781995bc324489f7a25f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee66d25857a6a072c10c781995bc324489f7a25f/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2946c90820ae7739d659f6edbd26abfd809ef976",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2946c90820ae7739d659f6edbd26abfd809ef976",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2946c90820ae7739d659f6edbd26abfd809ef976"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "5c808d1b45fc64ce6044357aa7a7bdf286dd8a72",
        "filename": "src/escrow.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee66d25857a6a072c10c781995bc324489f7a25f/src/escrow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee66d25857a6a072c10c781995bc324489f7a25f/src/escrow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/escrow.cpp?ref=ee66d25857a6a072c10c781995bc324489f7a25f",
        "patch": "@@ -1474,7 +1474,7 @@ UniValue escrowacknowledge(const UniValue& params, bool fHelp) {\n \tCWalletTx wtx;\n \tCEscrow escrow;\n \tif (!GetEscrow(vchEscrow, escrow))\n-\t\tthrow runtime_error(\"SYSCOIN_ESCROW_RPC_ERROR: ERRCODE: 4518 - \" + _(\"Could not find a escrow with this key\"));\n+\t\tthrow runtime_error(\"SYSCOIN_ESCROW_RPC_ERROR: ERRCODE: 4518 - \" + _(\"Could not find an escrow with this key\"));\n \n \tCAliasIndex sellerAliasLatest, buyerAliasLatest, arbiterAliasLatest, resellerAliasLatest;\n \tCSyscoinAddress arbiterPaymentAddress, buyerPaymentAddress, sellerPaymentAddress, resellerPaymentAddress;\n@@ -1559,7 +1559,7 @@ UniValue escrowcreaterawtransaction(const UniValue& params, bool fHelp) {\n \n \tCEscrow escrow;\n \tif (!GetEscrow(vchEscrow, escrow))\n-\t\tthrow runtime_error(\"SYSCOIN_ESCROW_RPC_ERROR: ERRCODE: 4519 - \" + _(\"Could not find a escrow with this key\"));\n+\t\tthrow runtime_error(\"SYSCOIN_ESCROW_RPC_ERROR: ERRCODE: 4519 - \" + _(\"Could not find an escrow with this key\"));\n \tCOffer theOffer, linkedOffer;\n \tif (!GetOffer(escrow.vchOffer, theOffer))\n \t\tthrow runtime_error(\"SYSCOIN_ESCROW_RPC_ERROR: ERRCODE: 4520 - \" + _(\"Could not find offer related to this escrow\"));\n@@ -1715,7 +1715,7 @@ UniValue escrowrelease(const UniValue& params, bool fHelp) {\n \n \tCEscrow escrow;\n     if (!GetEscrow( vchEscrow,escrow))\n-        throw runtime_error(\"SYSCOIN_ESCROW_RPC_ERROR: ERRCODE: 4527 - \" + _(\"Could not find a escrow with this key\"));\n+        throw runtime_error(\"SYSCOIN_ESCROW_RPC_ERROR: ERRCODE: 4527 - \" + _(\"Could not find an escrow with this key\"));\n \tCOffer theOffer;\n \tif (!GetOffer(escrow.vchOffer, theOffer))\n \t\tthrow runtime_error(\"SYSCOIN_ESCROW_RPC_ERROR: ERRCODE: 4528 - \" + _(\"Could not find offer related to this escrow\"));\n@@ -1824,7 +1824,7 @@ UniValue escrowcompleterelease(const UniValue& params, bool fHelp) {\n \n \tCEscrow escrow;\n \tif (!GetEscrow(vchEscrow, escrow))\n-        throw runtime_error(\"SYSCOIN_ESCROW_RPC_ERROR: ERRCODE: 4530 - \" + _(\"Could not find a escrow with this key\"));\n+        throw runtime_error(\"SYSCOIN_ESCROW_RPC_ERROR: ERRCODE: 4530 - \" + _(\"Could not find an escrow with this key\"));\n \n \tbool extPayment = false;\n \tif (escrow.nPaymentOption != PAYMENTOPTION_SYS)\n@@ -1911,7 +1911,7 @@ UniValue escrowrefund(const UniValue& params, bool fHelp) {\n \n \tCEscrow escrow;\n \tif (!GetEscrow(vchEscrow, escrow))\n-\t\tthrow runtime_error(\"SYSCOIN_ESCROW_RPC_ERROR: ERRCODE: 4531 - \" + _(\"Could not find a escrow with this key\"));\n+\t\tthrow runtime_error(\"SYSCOIN_ESCROW_RPC_ERROR: ERRCODE: 4531 - \" + _(\"Could not find an escrow with this key\"));\n \tCOffer theOffer;\n \tif (!GetOffer(escrow.vchOffer, theOffer))\n \t\tthrow runtime_error(\"SYSCOIN_ESCROW_RPC_ERROR: ERRCODE: 4532 - \" + _(\"Could not find offer related to this escrow\"));\n@@ -2022,7 +2022,7 @@ UniValue escrowcompleterefund(const UniValue& params, bool fHelp) {\n \n \tCEscrow escrow;\n \tif (!GetEscrow(vchEscrow, escrow))\n-\t\tthrow runtime_error(\"SYSCOIN_ESCROW_RPC_ERROR: ERRCODE: 4534 - \" + _(\"Could not find a escrow with this key\"));\n+\t\tthrow runtime_error(\"SYSCOIN_ESCROW_RPC_ERROR: ERRCODE: 4534 - \" + _(\"Could not find an escrow with this key\"));\n \n \tbool extPayment = false;\n \tif (escrow.nPaymentOption != PAYMENTOPTION_SYS)\n@@ -2113,7 +2113,7 @@ UniValue escrowfeedback(const UniValue& params, bool fHelp) {\n     CWalletTx wtx;\n \tCEscrow escrow;\n \tif (!GetEscrow(vchEscrow, escrow))\n-        throw runtime_error(\"SYSCOIN_ESCROW_RPC_ERROR: ERRCODE: 4535 - \" + _(\"Could not find a escrow with this key\"));\n+        throw runtime_error(\"SYSCOIN_ESCROW_RPC_ERROR: ERRCODE: 4535 - \" + _(\"Could not find an escrow with this key\"));\n \n \tCAliasIndex sellerAliasLatest, buyerAliasLatest, arbiterAliasLatest, resellerAliasLatest;\n \tCSyscoinAddress arbiterPaymentAddress, buyerPaymentAddress, sellerPaymentAddress, resellerPaymentAddress;"
      },
      {
        "sha": "d79cb0f62d5bdfaebc44f531b7c008edce8f8c5a",
        "filename": "src/test/syscoin_asset_allocation_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee66d25857a6a072c10c781995bc324489f7a25f/src/test/syscoin_asset_allocation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee66d25857a6a072c10c781995bc324489f7a25f/src/test/syscoin_asset_allocation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_allocation_tests.cpp?ref=ee66d25857a6a072c10c781995bc324489f7a25f",
        "patch": "@@ -45,7 +45,7 @@ BOOST_AUTO_TEST_CASE(generate_asset_allocation_send)\n \n \t// send using zdag\n \tstring txid1 = AssetAllocationTransfer(true, \"node1\", guid, \"jagassetallocationsend1\", \"\\\"[{\\\\\\\"aliasto\\\\\\\":\\\\\\\"jagassetallocationsend2\\\\\\\",\\\\\\\"amount\\\\\\\":0.1}]\\\"\", \"allocationsendmemo\");\n-\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo newassetsend jagassetallocationsend2 false\"));\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetallocationsend2 false\"));\n \tbalance = find_value(r.get_obj(), \"balance\");\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(balance, 8, false), 0.2 * COIN);\n "
      }
    ]
  },
  {
    "sha": "2dcac07dc5bdfebc8255add80d85e273b7dd44f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZGNhYzA3ZGM1YmRmZWJjODI1NWFkZDgwZDg1ZTI3M2I3ZGQ0NGY4",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T23:06:03Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T23:06:03Z"
      },
      "message": "fix threadgroup",
      "tree": {
        "sha": "25e41f846aa90113ed6a129a6c22d47fba385ba2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25e41f846aa90113ed6a129a6c22d47fba385ba2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2dcac07dc5bdfebc8255add80d85e273b7dd44f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dcac07dc5bdfebc8255add80d85e273b7dd44f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2dcac07dc5bdfebc8255add80d85e273b7dd44f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dcac07dc5bdfebc8255add80d85e273b7dd44f8/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee66d25857a6a072c10c781995bc324489f7a25f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee66d25857a6a072c10c781995bc324489f7a25f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee66d25857a6a072c10c781995bc324489f7a25f"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 6,
      "deletions": 12
    },
    "files": [
      {
        "sha": "7a51a91559eea2780fe85ab8122b8e2b4cfae4c1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dcac07dc5bdfebc8255add80d85e273b7dd44f8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dcac07dc5bdfebc8255add80d85e273b7dd44f8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2dcac07dc5bdfebc8255add80d85e273b7dd44f8",
        "patch": "@@ -202,7 +202,6 @@ class CCoinsViewErrorCatcher : public CCoinsViewBacked\n static CCoinsViewDB *pcoinsdbview = NULL;\n static CCoinsViewErrorCatcher *pcoinscatcher = NULL;\n static boost::scoped_ptr<ECCVerifyHandle> globalVerifyHandle;\n-static boost::thread_group threadGroup;\n void Interrupt(boost::thread_group& threadGroup)\n {\n \tInterruptHTTPServer();\n@@ -374,11 +373,6 @@ void Shutdown()\n \t// Shutdown part 2: Stop TOR thread and delete wallet instance\n \tStopTorControl();\n \n-\t// After everything has been shut down, but before things get flushed, stop the\n-\t// CScheduler/checkqueue threadGroup\n-\tthreadGroup.interrupt_all();\n-\tthreadGroup.join_all();\n-\n \tif (g_is_mempool_loaded && GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n \t\tDumpMempool();\n \t}\n@@ -889,7 +883,7 @@ bool InitSanityCheck(void)\n \treturn true;\n }\n \n-bool AppInitServers()\n+bool AppInitServers(boost::thread_group& threadGroup)\n {\n \tRPCServer::OnStopped(&OnRPCStopped);\n \tRPCServer::OnPreCommand(&OnRPCPreCommand);\n@@ -1046,7 +1040,7 @@ void InitLogging()\n /** Initialize Syscoin Core.\n *  @pre Parameters should be parsed and config file should be read.\n */\n-bool AppInit2(CScheduler& scheduler)\n+bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n {\n \t// ********************************************************* Step 1: setup\n #ifdef _MSC_VER\n@@ -1394,7 +1388,7 @@ bool AppInit2(CScheduler& scheduler)\n \tif (fServer)\n \t{\n \t\tuiInterface.InitMessage.connect(SetRPCWarmupStatus);\n-\t\tif (!AppInitServers())\n+\t\tif (!AppInitServers(threadGroup))\n \t\t\treturn InitError(_(\"Unable to start HTTP server. See debug log for details.\"));\n \t}\n "
      },
      {
        "sha": "fdda80ea1d159acae721067f6e353fc2e341e973",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dcac07dc5bdfebc8255add80d85e273b7dd44f8/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dcac07dc5bdfebc8255add80d85e273b7dd44f8/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=2dcac07dc5bdfebc8255add80d85e273b7dd44f8",
        "patch": "@@ -28,7 +28,7 @@ void Shutdown();\n void InitLogging();\n //!Parameter interaction: change current parameters depending on various rules\n void InitParameterInteraction();\n-bool AppInit2(CScheduler& scheduler);\n+bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler);\n void PrepareShutdown();\n \n /** The help message mode determines what help message to show */"
      },
      {
        "sha": "e911d93efd52801d8fedd735f95cb896641b3f02",
        "filename": "src/qt/syscoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dcac07dc5bdfebc8255add80d85e273b7dd44f8/src/qt/syscoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dcac07dc5bdfebc8255add80d85e273b7dd44f8/src/qt/syscoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/syscoin.cpp?ref=2dcac07dc5bdfebc8255add80d85e273b7dd44f8",
        "patch": "@@ -280,7 +280,7 @@ void SyscoinCore::initialize()\n     try\n     {\n         qDebug() << __func__ << \": Running AppInit2 in thread\";\n-        int rv = AppInit2(scheduler);\n+        int rv = AppInit2(threadGroup, scheduler);\n         Q_EMIT initializeResult(rv);\n     } catch (const std::exception& e) {\n         handleRunawayException(&e);"
      },
      {
        "sha": "3025e51089b77ca51e0357f28f53184f61b3b952",
        "filename": "src/syscoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dcac07dc5bdfebc8255add80d85e273b7dd44f8/src/syscoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dcac07dc5bdfebc8255add80d85e273b7dd44f8/src/syscoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/syscoind.cpp?ref=2dcac07dc5bdfebc8255add80d85e273b7dd44f8",
        "patch": "@@ -169,7 +169,7 @@ bool AppInit(int argc, char* argv[])\n         // Set this early so that parameter interactions go to console\n         InitLogging();\n         InitParameterInteraction();\n-        fRet = AppInit2(scheduler);\n+        fRet = AppInit2(threadGroup, scheduler);\n     }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInit()\");"
      }
    ]
  },
  {
    "sha": "e0eb79dfefc4908b877df6f0ee6cde18df00d795",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGViNzlkZmVmYzQ5MDhiODc3ZGY2ZjBlZTZjZGUxOGRmMDBkNzk1",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T23:09:23Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T23:09:23Z"
      },
      "message": "try lock",
      "tree": {
        "sha": "5af1bd3d984b2464d6607f056f832ce2550fa6aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5af1bd3d984b2464d6607f056f832ce2550fa6aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0eb79dfefc4908b877df6f0ee6cde18df00d795",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0eb79dfefc4908b877df6f0ee6cde18df00d795",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0eb79dfefc4908b877df6f0ee6cde18df00d795",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0eb79dfefc4908b877df6f0ee6cde18df00d795/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2dcac07dc5bdfebc8255add80d85e273b7dd44f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dcac07dc5bdfebc8255add80d85e273b7dd44f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2dcac07dc5bdfebc8255add80d85e273b7dd44f8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0ead6e6a85efe17a6ae4903e7bf13267f24613ea",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0eb79dfefc4908b877df6f0ee6cde18df00d795/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0eb79dfefc4908b877df6f0ee6cde18df00d795/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e0eb79dfefc4908b877df6f0ee6cde18df00d795",
        "patch": "@@ -4812,7 +4812,7 @@ bool LoadMempool(void)\n \t\t\t}\n \t\t\tCValidationState state;\n \t\t\tif (nTime + nExpiryTimeout > nNow) {\n-\t\t\t\tLOCK(cs_main);\n+\t\t\t\tTRY_LOCK(cs_main);\n \t\t\t\tAcceptToMemoryPool(mempool, false, state, tx, false, NULL);\n \t\t\t\tif (state.IsValid()) {\n \t\t\t\t\t++count;"
      }
    ]
  },
  {
    "sha": "51c591680ee5a2423e4d97604f341e421aaa3a87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MWM1OTE2ODBlZTVhMjQyM2U0ZDk3NjA0ZjM0MWU0MjFhYWEzYTg3",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T23:10:17Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-15T23:10:17Z"
      },
      "message": "try lock",
      "tree": {
        "sha": "174a33d45dcf761b88d9ebd6dd1c673e12081ed6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/174a33d45dcf761b88d9ebd6dd1c673e12081ed6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51c591680ee5a2423e4d97604f341e421aaa3a87",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51c591680ee5a2423e4d97604f341e421aaa3a87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51c591680ee5a2423e4d97604f341e421aaa3a87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51c591680ee5a2423e4d97604f341e421aaa3a87/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0eb79dfefc4908b877df6f0ee6cde18df00d795",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0eb79dfefc4908b877df6f0ee6cde18df00d795",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0eb79dfefc4908b877df6f0ee6cde18df00d795"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4a44a2a54c19b1afd56c485f0be459f44d7e2395",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51c591680ee5a2423e4d97604f341e421aaa3a87/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51c591680ee5a2423e4d97604f341e421aaa3a87/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=51c591680ee5a2423e4d97604f341e421aaa3a87",
        "patch": "@@ -4859,7 +4859,7 @@ bool DumpMempool(void)\n \tstd::map<uint256, CAmount> mapDeltas;\n \n \t{\n-\t\tLOCK(mempool.cs);\n+\t\tTRY_LOCK(mempool.cs);\n \t\tfor (const auto &i : mempool.mapDeltas) {\n \t\t\tmapDeltas[i.first] = i.second.second;\n \t\t}"
      }
    ]
  },
  {
    "sha": "a446dd22da4d48e0ab54acf0514d9c2f7ed88609",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDQ2ZGQyMmRhNGQ0OGUwYWI1NGFjZjA1MTRkOWMyZjdlZDg4NjA5",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T00:35:41Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T00:35:41Z"
      },
      "message": "compile",
      "tree": {
        "sha": "5991f999fce69b34f680cf423247838ddbe20a9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5991f999fce69b34f680cf423247838ddbe20a9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a446dd22da4d48e0ab54acf0514d9c2f7ed88609",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a446dd22da4d48e0ab54acf0514d9c2f7ed88609",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a446dd22da4d48e0ab54acf0514d9c2f7ed88609",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a446dd22da4d48e0ab54acf0514d9c2f7ed88609/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51c591680ee5a2423e4d97604f341e421aaa3a87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51c591680ee5a2423e4d97604f341e421aaa3a87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51c591680ee5a2423e4d97604f341e421aaa3a87"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "309af277e53d47fc7c2700831733e3a1b83533da",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a446dd22da4d48e0ab54acf0514d9c2f7ed88609/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a446dd22da4d48e0ab54acf0514d9c2f7ed88609/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a446dd22da4d48e0ab54acf0514d9c2f7ed88609",
        "patch": "@@ -211,7 +211,7 @@ void Interrupt(boost::thread_group& threadGroup)\n \tInterruptTorControl();\n \tif (g_connman)\n \t\tg_connman->Interrupt();\n-\tthreadGroup.interrupt_all();\n+\n }\n \n /** Preparing steps before shutting down or restarting the wallet */\n@@ -372,7 +372,10 @@ void Shutdown()\n \t}\n \t// Shutdown part 2: Stop TOR thread and delete wallet instance\n \tStopTorControl();\n-\n+\t// After everything has been shut down, but before things get flushed, stop the\n+\t// CScheduler/checkqueue threadGroup\n+\tthreadGroup.interrupt_all();\n+\tthreadGroup.join_all();\n \tif (g_is_mempool_loaded && GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n \t\tDumpMempool();\n \t}"
      },
      {
        "sha": "227e8cf44a340e0eabe51ce668910be1c0b83e1e",
        "filename": "src/qt/syscoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a446dd22da4d48e0ab54acf0514d9c2f7ed88609/src/qt/syscoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a446dd22da4d48e0ab54acf0514d9c2f7ed88609/src/qt/syscoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/syscoin.cpp?ref=a446dd22da4d48e0ab54acf0514d9c2f7ed88609",
        "patch": "@@ -296,8 +296,6 @@ void SyscoinCore::restart(QStringList args)\n         try\n         {\n             qDebug() << __func__ << \": Running Restart in thread\";\n-            threadGroup.interrupt_all();\n-            threadGroup.join_all();\n             PrepareShutdown();\n             qDebug() << __func__ << \": Shutdown finished\";\n             Q_EMIT shutdownResult(1);\n@@ -319,7 +317,7 @@ void SyscoinCore::shutdown()\n     {\n         qDebug() << __func__ << \": Running Shutdown in thread\";\n         Interrupt(threadGroup);\n-        threadGroup.join_all();\n+        \n         Shutdown();\n         qDebug() << __func__ << \": Shutdown finished\";\n         Q_EMIT shutdownResult(1);"
      },
      {
        "sha": "5997bfb371296f16158f9437a22c40eb4bdc121a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a446dd22da4d48e0ab54acf0514d9c2f7ed88609/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a446dd22da4d48e0ab54acf0514d9c2f7ed88609/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a446dd22da4d48e0ab54acf0514d9c2f7ed88609",
        "patch": "@@ -4812,7 +4812,7 @@ bool LoadMempool(void)\n \t\t\t}\n \t\t\tCValidationState state;\n \t\t\tif (nTime + nExpiryTimeout > nNow) {\n-\t\t\t\tTRY_LOCK(cs_main);\n+\t\t\t\tTRY_LOCK(cs_main, lockMain);\n \t\t\t\tAcceptToMemoryPool(mempool, false, state, tx, false, NULL);\n \t\t\t\tif (state.IsValid()) {\n \t\t\t\t\t++count;\n@@ -4859,7 +4859,7 @@ bool DumpMempool(void)\n \tstd::map<uint256, CAmount> mapDeltas;\n \n \t{\n-\t\tTRY_LOCK(mempool.cs);\n+\t\tTRY_LOCK(mempool.cs, lockMempool);\n \t\tfor (const auto &i : mempool.mapDeltas) {\n \t\t\tmapDeltas[i.first] = i.second.second;\n \t\t}"
      }
    ]
  },
  {
    "sha": "886cf9074bc9c230673f799832131ccdba6901a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODZjZjkwNzRiYzljMjMwNjczZjc5OTgzMjEzMWNjZGJhNjkwMWE2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T00:45:48Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T00:45:48Z"
      },
      "message": "compile",
      "tree": {
        "sha": "f3342c7fcee2e4d6337bec1af12f93c58e49a9ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3342c7fcee2e4d6337bec1af12f93c58e49a9ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/886cf9074bc9c230673f799832131ccdba6901a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/886cf9074bc9c230673f799832131ccdba6901a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/886cf9074bc9c230673f799832131ccdba6901a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/886cf9074bc9c230673f799832131ccdba6901a6/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a446dd22da4d48e0ab54acf0514d9c2f7ed88609",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a446dd22da4d48e0ab54acf0514d9c2f7ed88609",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a446dd22da4d48e0ab54acf0514d9c2f7ed88609"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "8b33829e543d75babbbd525c339d5d88d48cc5ff",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/886cf9074bc9c230673f799832131ccdba6901a6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/886cf9074bc9c230673f799832131ccdba6901a6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=886cf9074bc9c230673f799832131ccdba6901a6",
        "patch": "@@ -211,7 +211,7 @@ void Interrupt(boost::thread_group& threadGroup)\n \tInterruptTorControl();\n \tif (g_connman)\n \t\tg_connman->Interrupt();\n-\n+\tthreadGroup.interrupt_all();\n }\n \n /** Preparing steps before shutting down or restarting the wallet */\n@@ -372,10 +372,8 @@ void Shutdown()\n \t}\n \t// Shutdown part 2: Stop TOR thread and delete wallet instance\n \tStopTorControl();\n-\t// After everything has been shut down, but before things get flushed, stop the\n-\t// CScheduler/checkqueue threadGroup\n-\tthreadGroup.interrupt_all();\n-\tthreadGroup.join_all();\n+\n+\n \tif (g_is_mempool_loaded && GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n \t\tDumpMempool();\n \t}\n@@ -886,7 +884,7 @@ bool InitSanityCheck(void)\n \treturn true;\n }\n \n-bool AppInitServers(boost::thread_group& threadGroup)\n+bool AppInitServers()\n {\n \tRPCServer::OnStopped(&OnRPCStopped);\n \tRPCServer::OnPreCommand(&OnRPCPreCommand);\n@@ -1043,7 +1041,7 @@ void InitLogging()\n /** Initialize Syscoin Core.\n *  @pre Parameters should be parsed and config file should be read.\n */\n-bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n+bool AppInit2(CScheduler& scheduler)\n {\n \t// ********************************************************* Step 1: setup\n #ifdef _MSC_VER\n@@ -1391,7 +1389,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \tif (fServer)\n \t{\n \t\tuiInterface.InitMessage.connect(SetRPCWarmupStatus);\n-\t\tif (!AppInitServers(threadGroup))\n+\t\tif (!AppInitServers())\n \t\t\treturn InitError(_(\"Unable to start HTTP server. See debug log for details.\"));\n \t}\n "
      },
      {
        "sha": "fc279b14ba7aa007ceab7b9e8f1dcd76d47bbf3b",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/886cf9074bc9c230673f799832131ccdba6901a6/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/886cf9074bc9c230673f799832131ccdba6901a6/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=886cf9074bc9c230673f799832131ccdba6901a6",
        "patch": "@@ -28,7 +28,7 @@ void Shutdown();\n void InitLogging();\n //!Parameter interaction: change current parameters depending on various rules\n void InitParameterInteraction();\n-bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler);\n+bool AppInit2(CScheduler& scheduler);\n void PrepareShutdown();\n \n /** The help message mode determines what help message to show */"
      },
      {
        "sha": "91b72e6215f0b3f974bf9dc35b14f559ef299d1c",
        "filename": "src/qt/syscoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/886cf9074bc9c230673f799832131ccdba6901a6/src/qt/syscoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/886cf9074bc9c230673f799832131ccdba6901a6/src/qt/syscoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/syscoin.cpp?ref=886cf9074bc9c230673f799832131ccdba6901a6",
        "patch": "@@ -280,7 +280,7 @@ void SyscoinCore::initialize()\n     try\n     {\n         qDebug() << __func__ << \": Running AppInit2 in thread\";\n-        int rv = AppInit2(threadGroup, scheduler);\n+        int rv = AppInit2(scheduler);\n         Q_EMIT initializeResult(rv);\n     } catch (const std::exception& e) {\n         handleRunawayException(&e);\n@@ -296,6 +296,8 @@ void SyscoinCore::restart(QStringList args)\n         try\n         {\n             qDebug() << __func__ << \": Running Restart in thread\";\n+            threadGroup.interrupt_all();\n+            threadGroup.join_all();\n             PrepareShutdown();\n             qDebug() << __func__ << \": Shutdown finished\";\n             Q_EMIT shutdownResult(1);\n@@ -317,7 +319,7 @@ void SyscoinCore::shutdown()\n     {\n         qDebug() << __func__ << \": Running Shutdown in thread\";\n         Interrupt(threadGroup);\n-        \n+        threadGroup.join_all();\n         Shutdown();\n         qDebug() << __func__ << \": Shutdown finished\";\n         Q_EMIT shutdownResult(1);"
      },
      {
        "sha": "058ba3e25d3eda0e21c74536e324f24e0e04e684",
        "filename": "src/syscoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/886cf9074bc9c230673f799832131ccdba6901a6/src/syscoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/886cf9074bc9c230673f799832131ccdba6901a6/src/syscoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/syscoind.cpp?ref=886cf9074bc9c230673f799832131ccdba6901a6",
        "patch": "@@ -186,7 +186,7 @@ bool AppInit(int argc, char* argv[])\n     } else {\n         WaitForShutdown(&threadGroup);\n     }\n-    Shutdown();\n+    Shutdown(threadGroup);\n \n     return fRet;\n }"
      }
    ]
  },
  {
    "sha": "69b9085bf1a03ab02af2ddd20e1581be953eeed6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWI5MDg1YmYxYTAzYWIwMmFmMmRkZDIwZTE1ODFiZTk1M2VlZWQ2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T00:49:25Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T00:49:25Z"
      },
      "message": "compile",
      "tree": {
        "sha": "942d573d74d1af2cde0d7282304fd661ac243fe5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/942d573d74d1af2cde0d7282304fd661ac243fe5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69b9085bf1a03ab02af2ddd20e1581be953eeed6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69b9085bf1a03ab02af2ddd20e1581be953eeed6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69b9085bf1a03ab02af2ddd20e1581be953eeed6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69b9085bf1a03ab02af2ddd20e1581be953eeed6/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "886cf9074bc9c230673f799832131ccdba6901a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/886cf9074bc9c230673f799832131ccdba6901a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/886cf9074bc9c230673f799832131ccdba6901a6"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "660e7882b71e49027532bf109e708a0b03a1f3d2",
        "filename": "src/syscoind.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69b9085bf1a03ab02af2ddd20e1581be953eeed6/src/syscoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69b9085bf1a03ab02af2ddd20e1581be953eeed6/src/syscoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/syscoind.cpp?ref=69b9085bf1a03ab02af2ddd20e1581be953eeed6",
        "patch": "@@ -169,7 +169,7 @@ bool AppInit(int argc, char* argv[])\n         // Set this early so that parameter interactions go to console\n         InitLogging();\n         InitParameterInteraction();\n-        fRet = AppInit2(threadGroup, scheduler);\n+        fRet = AppInit2(scheduler);\n     }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInit()\");\n@@ -186,7 +186,7 @@ bool AppInit(int argc, char* argv[])\n     } else {\n         WaitForShutdown(&threadGroup);\n     }\n-    Shutdown(threadGroup);\n+    Shutdown();\n \n     return fRet;\n }"
      }
    ]
  },
  {
    "sha": "3b59258a16396530b830fc26a8db83fb18b0db5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjU5MjU4YTE2Mzk2NTMwYjgzMGZjMjZhOGRiODNmYjE4YjBkYjVm",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T01:01:22Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T01:01:22Z"
      },
      "message": "compile",
      "tree": {
        "sha": "db2ec83c75ebcf422d1c6aaa16059c861478e13e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db2ec83c75ebcf422d1c6aaa16059c861478e13e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b59258a16396530b830fc26a8db83fb18b0db5f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b59258a16396530b830fc26a8db83fb18b0db5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b59258a16396530b830fc26a8db83fb18b0db5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b59258a16396530b830fc26a8db83fb18b0db5f/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69b9085bf1a03ab02af2ddd20e1581be953eeed6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69b9085bf1a03ab02af2ddd20e1581be953eeed6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69b9085bf1a03ab02af2ddd20e1581be953eeed6"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a7519b64e10e10866ae3bf17dae742d7638f2271",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b59258a16396530b830fc26a8db83fb18b0db5f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b59258a16396530b830fc26a8db83fb18b0db5f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3b59258a16396530b830fc26a8db83fb18b0db5f",
        "patch": "@@ -1041,7 +1041,7 @@ void InitLogging()\n /** Initialize Syscoin Core.\n *  @pre Parameters should be parsed and config file should be read.\n */\n-bool AppInit2(CScheduler& scheduler)\n+bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n {\n \t// ********************************************************* Step 1: setup\n #ifdef _MSC_VER"
      },
      {
        "sha": "fdda80ea1d159acae721067f6e353fc2e341e973",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b59258a16396530b830fc26a8db83fb18b0db5f/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b59258a16396530b830fc26a8db83fb18b0db5f/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=3b59258a16396530b830fc26a8db83fb18b0db5f",
        "patch": "@@ -28,7 +28,7 @@ void Shutdown();\n void InitLogging();\n //!Parameter interaction: change current parameters depending on various rules\n void InitParameterInteraction();\n-bool AppInit2(CScheduler& scheduler);\n+bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler);\n void PrepareShutdown();\n \n /** The help message mode determines what help message to show */"
      }
    ]
  },
  {
    "sha": "a3b8dd9fd2b2413d89e5a307b51fdb2ef58a6e17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2I4ZGQ5ZmQyYjI0MTNkODllNWEzMDdiNTFmZGIyZWY1OGE2ZTE3",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T01:05:06Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T01:05:06Z"
      },
      "message": "compile",
      "tree": {
        "sha": "5b6426c2fbb662b7428ba09817f12f01c6b3dd70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b6426c2fbb662b7428ba09817f12f01c6b3dd70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3b8dd9fd2b2413d89e5a307b51fdb2ef58a6e17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3b8dd9fd2b2413d89e5a307b51fdb2ef58a6e17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3b8dd9fd2b2413d89e5a307b51fdb2ef58a6e17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3b8dd9fd2b2413d89e5a307b51fdb2ef58a6e17/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b59258a16396530b830fc26a8db83fb18b0db5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b59258a16396530b830fc26a8db83fb18b0db5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b59258a16396530b830fc26a8db83fb18b0db5f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3025e51089b77ca51e0357f28f53184f61b3b952",
        "filename": "src/syscoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3b8dd9fd2b2413d89e5a307b51fdb2ef58a6e17/src/syscoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3b8dd9fd2b2413d89e5a307b51fdb2ef58a6e17/src/syscoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/syscoind.cpp?ref=a3b8dd9fd2b2413d89e5a307b51fdb2ef58a6e17",
        "patch": "@@ -169,7 +169,7 @@ bool AppInit(int argc, char* argv[])\n         // Set this early so that parameter interactions go to console\n         InitLogging();\n         InitParameterInteraction();\n-        fRet = AppInit2(scheduler);\n+        fRet = AppInit2(threadGroup, scheduler);\n     }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInit()\");"
      }
    ]
  },
  {
    "sha": "b3533d2b0844ca01ee4229ab15ab861fe62ea607",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzUzM2QyYjA4NDRjYTAxZWU0MjI5YWIxNWFiODYxZmU2MmVhNjA3",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T01:22:12Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T01:22:12Z"
      },
      "message": "compile",
      "tree": {
        "sha": "80b482ddacf7de5eb431abe2fad22242f6362576",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80b482ddacf7de5eb431abe2fad22242f6362576"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3533d2b0844ca01ee4229ab15ab861fe62ea607",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3533d2b0844ca01ee4229ab15ab861fe62ea607",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3533d2b0844ca01ee4229ab15ab861fe62ea607",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3533d2b0844ca01ee4229ab15ab861fe62ea607/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3b8dd9fd2b2413d89e5a307b51fdb2ef58a6e17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3b8dd9fd2b2413d89e5a307b51fdb2ef58a6e17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3b8dd9fd2b2413d89e5a307b51fdb2ef58a6e17"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e911d93efd52801d8fedd735f95cb896641b3f02",
        "filename": "src/qt/syscoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3533d2b0844ca01ee4229ab15ab861fe62ea607/src/qt/syscoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3533d2b0844ca01ee4229ab15ab861fe62ea607/src/qt/syscoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/syscoin.cpp?ref=b3533d2b0844ca01ee4229ab15ab861fe62ea607",
        "patch": "@@ -280,7 +280,7 @@ void SyscoinCore::initialize()\n     try\n     {\n         qDebug() << __func__ << \": Running AppInit2 in thread\";\n-        int rv = AppInit2(scheduler);\n+        int rv = AppInit2(threadGroup, scheduler);\n         Q_EMIT initializeResult(rv);\n     } catch (const std::exception& e) {\n         handleRunawayException(&e);"
      }
    ]
  },
  {
    "sha": "757846cd6b6194695b6b7605095a50e230dbf8b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTc4NDZjZDZiNjE5NDY5NWI2Yjc2MDUwOTVhNTBlMjMwZGJmOGI2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T03:22:27Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T03:22:27Z"
      },
      "message": "trylock in loop",
      "tree": {
        "sha": "909e719bb9f187c13cc9fdfcdd07313e3a43a62c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/909e719bb9f187c13cc9fdfcdd07313e3a43a62c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/757846cd6b6194695b6b7605095a50e230dbf8b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/757846cd6b6194695b6b7605095a50e230dbf8b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/757846cd6b6194695b6b7605095a50e230dbf8b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/757846cd6b6194695b6b7605095a50e230dbf8b6/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3533d2b0844ca01ee4229ab15ab861fe62ea607",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3533d2b0844ca01ee4229ab15ab861fe62ea607",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3533d2b0844ca01ee4229ab15ab861fe62ea607"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "865f36bdd21fb6003e618c21984b25ca1e5a6bbc",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/757846cd6b6194695b6b7605095a50e230dbf8b6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/757846cd6b6194695b6b7605095a50e230dbf8b6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=757846cd6b6194695b6b7605095a50e230dbf8b6",
        "patch": "@@ -4858,12 +4858,11 @@ bool DumpMempool(void)\n \n \tstd::map<uint256, CAmount> mapDeltas;\n \n-\t{\n+\tfor (const auto &i : mempool.mapDeltas) {\n \t\tTRY_LOCK(mempool.cs, lockMempool);\n-\t\tfor (const auto &i : mempool.mapDeltas) {\n-\t\t\tmapDeltas[i.first] = i.second.second;\n-\t\t}\n+\t\tmapDeltas[i.first] = i.second.second;\n \t}\n+\t\n \n \tint64_t mid = GetTimeMicros();\n "
      }
    ]
  },
  {
    "sha": "c2ddea59f6eddd596b1af29930796bb590e28099",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMmRkZWE1OWY2ZWRkZDU5NmIxYWYyOTkzMDc5NmJiNTkwZTI4MDk5",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T03:25:02Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T03:25:02Z"
      },
      "message": "create copy",
      "tree": {
        "sha": "2447616c68ec54c88e9437613bc2047635d7235f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2447616c68ec54c88e9437613bc2047635d7235f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2ddea59f6eddd596b1af29930796bb590e28099",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2ddea59f6eddd596b1af29930796bb590e28099",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2ddea59f6eddd596b1af29930796bb590e28099",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2ddea59f6eddd596b1af29930796bb590e28099/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "757846cd6b6194695b6b7605095a50e230dbf8b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/757846cd6b6194695b6b7605095a50e230dbf8b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/757846cd6b6194695b6b7605095a50e230dbf8b6"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2d761e316fce70ae571ebbbfdb646005be1f69a9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2ddea59f6eddd596b1af29930796bb590e28099/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2ddea59f6eddd596b1af29930796bb590e28099/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c2ddea59f6eddd596b1af29930796bb590e28099",
        "patch": "@@ -4857,9 +4857,13 @@ bool DumpMempool(void)\n \tint64_t start = GetTimeMicros();\n \n \tstd::map<uint256, CAmount> mapDeltas;\n-\n-\tfor (const auto &i : mempool.mapDeltas) {\n+\tstd::map<uint256, std::pair<double, CAmount> > mapDeltasCopy;\n+\t{\n \t\tTRY_LOCK(mempool.cs, lockMempool);\n+\t\tmapDeltasCopy = mempool.mapDeltas;\n+\t}\n+\n+\tfor (const auto &i : mapDeltasCopy) {\n \t\tmapDeltas[i.first] = i.second.second;\n \t}\n \t"
      }
    ]
  },
  {
    "sha": "b1105736a063e52f82b1966bd08a86b2e9799b6c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTEwNTczNmEwNjNlNTJmODJiMTk2NmJkMDhhODZiMmU5Nzk5YjZj",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T22:49:24Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T22:49:24Z"
      },
      "message": "add start height to payment vote",
      "tree": {
        "sha": "896e13f73c00f5d42ab99794db9f7297c73263d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/896e13f73c00f5d42ab99794db9f7297c73263d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1105736a063e52f82b1966bd08a86b2e9799b6c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1105736a063e52f82b1966bd08a86b2e9799b6c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1105736a063e52f82b1966bd08a86b2e9799b6c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1105736a063e52f82b1966bd08a86b2e9799b6c/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2ddea59f6eddd596b1af29930796bb590e28099",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2ddea59f6eddd596b1af29930796bb590e28099",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2ddea59f6eddd596b1af29930796bb590e28099"
      }
    ],
    "stats": {
      "total": 143,
      "additions": 69,
      "deletions": 74
    },
    "files": [
      {
        "sha": "2e729962ac8fd0515a0ed470ce08f92104e06dcd",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 22,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1105736a063e52f82b1966bd08a86b2e9799b6c/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1105736a063e52f82b1966bd08a86b2e9799b6c/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=b1105736a063e52f82b1966bd08a86b2e9799b6c",
        "patch": "@@ -103,7 +103,7 @@ bool IsBlockValueValid(const CBlock& block, int nBlockHeight, const CAmount &nFe\n     return isBlockRewardValueMet;\n }\n \n-bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward, const CAmount& nMasternodePayment)\n+bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward, const CAmount& nTotalRewardWithMasternodes)\n {\n     if(!masternodeSync.IsSynced()) {\n         //there is no budget data to use to check anything, let's just accept the longest chain\n@@ -134,7 +134,7 @@ bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight, const CAmoun\n     }\n \n     // IF THIS ISN'T A SUPERBLOCK OR SUPERBLOCK IS INVALID, IT SHOULD PAY A MASTERNODE DIRECTLY\n-    if(mnpayments.IsTransactionValid(txNew, nBlockHeight, nFee, nMasternodePayment)) {\n+    if(mnpayments.IsTransactionValid(txNew, nBlockHeight, nFee, nTotalRewardWithMasternodes)) {\n         LogPrint(\"mnpayments\", \"IsBlockPayeeValid -- Valid masternode payment at height %d: %s\", nBlockHeight, txNew.ToString());\n         return true;\n     }\n@@ -208,8 +208,9 @@ void CMasternodePayments::FillBlockPayee(CMutableTransaction& txNew, int nBlockH\n     txoutMasternodeRet = CTxOut();\n \n     CScript payee;\n-\tmasternode_info_t mnInfo;\n-\tif (!mnpayments.GetBlockPayee(nBlockHeight, payee)) {\n+\tint nStartHeight = 0;\n+\tif (!mnpayments.GetBlockPayee(nBlockHeight, payee, nStartHeight)) {\n+\t\tmasternode_info_t mnInfo;\n \t\t// no masternode detected...\n \t\tint nCount = 0;\n \t\tif (!mnodeman.GetNextMasternodeInQueueForPayment(nBlockHeight, true, nCount, mnInfo)) {\n@@ -220,15 +221,14 @@ void CMasternodePayments::FillBlockPayee(CMutableTransaction& txNew, int nBlockH\n \t\t}\n \t\t// fill payee with locally calculated winner and hope for the best\n \t\tpayee = GetScriptForDestination(mnInfo.pubKeyCollateralAddress.GetID());\n+\t\tnStartHeight = mnodeman.GetStartHeight(mnInfo);\n+\t\tif(nStartHeight <= 0) {\n+\t\t\t// ...and we can't calculate it on our own\n+\t\t\tif (fDebug)\n+\t\t\t\tLogPrintf(\"CMasternodePayments::FillBlockPayee -- Failed to detect start height for masternode to pay\\n\");\n+\t\t\treturn;\n+\t\t}\n \t}\n-\telse\n-\t\tmnodeman.GetMasternodeInfo(payee, mnInfo);\n-\n-\tconst unsigned int &nStartHeight = mnodeman.GetStartHeight(mnInfo);\n-\n-\tCScript scriptData;\n-\tscriptData << OP_RETURN << vchFromString(boost::lexical_cast<string>(nStartHeight));\n-\ttxNew.vout.push_back(CTxOut(0, scriptData));\n \n \t// miner takes 25% of the reward and half fees\n \ttxNew.vout[0].nValue = ((blockReward*0.25) + (nFee/2));\n@@ -353,8 +353,8 @@ void CMasternodePayments::ProcessMessage(CNode* pfrom, std::string& strCommand,\n         ExtractDestination(vote.payee, address1);\n         CSyscoinAddress address2(address1);\n \n-        LogPrint(\"mnpayments\", \"MASTERNODEPAYMENTVOTE -- vote: address=%s, nBlockHeight=%d, nHeight=%d, prevout=%s, hash=%s new\\n\",\n-                    address2.ToString(), vote.nBlockHeight, nCachedBlockHeight, vote.vinMasternode.prevout.ToStringShort(), nHash.ToString());\n+        LogPrint(\"mnpayments\", \"MASTERNODEPAYMENTVOTE -- vote: address=%s, nBlockHeight=%d, nStartHeight=%d, nHeight=%d, prevout=%s, hash=%s new\\n\",\n+                    address2.ToString(), vote.nBlockHeight, vote.nStartHeight, nCachedBlockHeight, vote.vinMasternode.prevout.ToStringShort(), nHash.ToString());\n \n         if(AddPaymentVote(vote)){\n             vote.Relay(connman);\n@@ -368,6 +368,7 @@ bool CMasternodePaymentVote::Sign()\n     std::string strError;\n     std::string strMessage = vinMasternode.prevout.ToStringShort() +\n                 boost::lexical_cast<std::string>(nBlockHeight) +\n+\t\t\t\tboost::lexical_cast<std::string>(nStartHeight) +\n                 ScriptToAsmStr(payee);\n \n     if(!CMessageSigner::SignMessage(strMessage, vchSig, activeMasternode.keyMasternode)) {\n@@ -391,7 +392,14 @@ bool CMasternodePayments::GetBlockPayee(int nBlockHeight, CScript& payee)\n \n     return false;\n }\n+bool CMasternodePayments::GetBlockPayee(int nBlockHeight, CScript& payee, int &nStartHeight)\n+{\n+\tif (mapMasternodeBlocks.count(nBlockHeight)) {\n+\t\treturn mapMasternodeBlocks[nBlockHeight].GetBestPayee(payee, nStartHeight);\n+\t}\n \n+\treturn false;\n+}\n // Is this masternode scheduled to get paid soon?\n // -- Only look ahead up to 8 blocks to allow for propagation of the latest 2 blocks of votes\n bool CMasternodePayments::IsScheduled(CMasternode& mn, int nNotBlockHeight)\n@@ -452,7 +460,7 @@ void CMasternodeBlockPayees::AddPayee(const CMasternodePaymentVote& vote)\n             return;\n         }\n     }\n-    CMasternodePayee payeeNew(vote.payee, vote.GetHash());\n+    CMasternodePayee payeeNew(vote.payee, vote.GetHash(), vote.nStartHeight);\n     vecPayees.push_back(payeeNew);\n }\n \n@@ -475,7 +483,26 @@ bool CMasternodeBlockPayees::GetBestPayee(CScript& payeeRet)\n \n     return (nVotes > -1);\n }\n+bool CMasternodeBlockPayees::GetBestPayee(CScript& payeeRet, int& nStartHeight)\n+{\n+\tLOCK(cs_vecPayees);\n+\n+\tif (!vecPayees.size()) {\n+\t\tLogPrint(\"mnpayments\", \"CMasternodeBlockPayees::GetBestPayee -- ERROR: couldn't find any payee\\n\");\n+\t\treturn false;\n+\t}\n \n+\tint nVotes = -1;\n+\tBOOST_FOREACH(CMasternodePayee& payee, vecPayees) {\n+\t\tif (payee.GetVoteCount() > nVotes) {\n+\t\t\tpayeeRet = payee.GetPayee();\n+\t\t\tnVotes = payee.GetVoteCount();\n+\t\t\tnStartHeight = payee.nStartHeight;\n+\t\t}\n+\t}\n+\n+\treturn (nVotes > -1);\n+}\n bool CMasternodeBlockPayees::HasPayeeWithVotes(const CScript& payeeIn, int nVotesReq)\n {\n     LOCK(cs_vecPayees);\n@@ -490,13 +517,13 @@ bool CMasternodeBlockPayees::HasPayeeWithVotes(const CScript& payeeIn, int nVote\n     return false;\n }\n \n-bool CMasternodeBlockPayees::IsTransactionValid(const CTransaction& txNew, const CAmount &nFee, const CAmount& nMasternodePayment)\n+bool CMasternodeBlockPayees::IsTransactionValid(const CTransaction& txNew, const CAmount &nFee, const int64_t &nHeight, const CAmount& nTotalRewardWithMasternodes)\n {\n     LOCK(cs_vecPayees);\n \n     int nMaxSignatures = 0;\n     std::string strPayeesPossible = \"\";\n-\t\n+\tconst CChainParams& chainparams = Params();\n \n     //require at least MNPAYMENTS_SIGNATURES_REQUIRED signatures\n \n@@ -512,6 +539,7 @@ bool CMasternodeBlockPayees::IsTransactionValid(const CTransaction& txNew, const\n     BOOST_FOREACH(CMasternodePayee& payee, vecPayees) {\n         if (payee.GetVoteCount() >= MNPAYMENTS_SIGNATURES_REQUIRED) {\n \t\t\tconst CScript& payeeScript = payee.GetPayee();\n+\t\t\tconst CAmount &nMasternodePayment = GetBlockSubsidy(nHeight, chainparams.GetConsensus(), nTotalRewardWithMasternodes, false, true, payee.nStartHeight);\n \t\t\tbool bFoundPayment = false;\n \t\t\tbool bFoundFee = false;\n             BOOST_FOREACH(CTxOut txout, txNew.vout) {\n@@ -556,9 +584,9 @@ std::string CMasternodeBlockPayees::GetRequiredPaymentsString()\n         CSyscoinAddress address2(address1);\n \n         if (strRequiredPayments != \"Unknown\") {\n-            strRequiredPayments += \", \" + address2.ToString() + \":\" + boost::lexical_cast<std::string>(payee.GetVoteCount());\n+            strRequiredPayments += \", \" + address2.ToString() + \":\" + boost::lexical_cast<std::string>(payee.GetVoteCount()) + \", \" + boost::lexical_cast<std::string>(payee.nStartHeight);\n         } else {\n-            strRequiredPayments = address2.ToString() + \":\" + boost::lexical_cast<std::string>(payee.GetVoteCount());\n+            strRequiredPayments = address2.ToString() + \":\" + boost::lexical_cast<std::string>(payee.GetVoteCount()) + \", \" + boost::lexical_cast<std::string>(payee.nStartHeight);\n         }\n     }\n \n@@ -576,12 +604,12 @@ std::string CMasternodePayments::GetRequiredPaymentsString(int nBlockHeight)\n     return \"Unknown\";\n }\n \n-bool CMasternodePayments::IsTransactionValid(const CTransaction& txNew, int nBlockHeight, const CAmount& nFee, const CAmount& nMasternodePayment)\n+bool CMasternodePayments::IsTransactionValid(const CTransaction& txNew, int nBlockHeight, const CAmount& nFee, const CAmount& nTotalRewardWithMasternodes)\n {\n     LOCK(cs_mapMasternodeBlocks);\n \n     if(mapMasternodeBlocks.count(nBlockHeight)){\n-        return mapMasternodeBlocks[nBlockHeight].IsTransactionValid(txNew, nFee, nMasternodePayment);\n+        return mapMasternodeBlocks[nBlockHeight].IsTransactionValid(txNew, nFee, nBlockHeight, nTotalRewardWithMasternodes);\n     }\n \n     return true;\n@@ -712,7 +740,7 @@ bool CMasternodePayments::ProcessBlock(int nBlockHeight, CConnman& connman)\n \n     CScript payee = GetScriptForDestination(mnInfo.pubKeyCollateralAddress.GetID());\n \n-    CMasternodePaymentVote voteNew(activeMasternode.outpoint, nBlockHeight, payee);\n+    CMasternodePaymentVote voteNew(activeMasternode.outpoint, nBlockHeight, payee, mnodeman.GetStartHeight(mnInfo));\n \n     CTxDestination address1;\n     ExtractDestination(payee, address1);\n@@ -816,6 +844,7 @@ bool CMasternodePaymentVote::CheckSignature(const CPubKey& pubKeyMasternode, int\n \n     std::string strMessage = vinMasternode.prevout.ToStringShort() +\n                 boost::lexical_cast<std::string>(nBlockHeight) +\n+\t\t\t\tboost::lexical_cast<std::string>(nStartHeight) +\n                 ScriptToAsmStr(payee);\n \n     std::string strError = \"\";"
      },
      {
        "sha": "ec428717483f320cf94be42b43205302a16d6aad",
        "filename": "src/masternode-payments.h",
        "status": "modified",
        "additions": 17,
        "deletions": 9,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1105736a063e52f82b1966bd08a86b2e9799b6c/src/masternode-payments.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1105736a063e52f82b1966bd08a86b2e9799b6c/src/masternode-payments.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.h?ref=b1105736a063e52f82b1966bd08a86b2e9799b6c",
        "patch": "@@ -35,7 +35,7 @@ extern CMasternodePayments mnpayments;\n \n /// TODO: all 4 functions do not belong here really, they should be refactored/moved somewhere (main.cpp ?)\n bool IsBlockValueValid(const CBlock& block, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward, std::string &strErrorRet);\n-bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward, const CAmount &masternodePayment);\n+bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward, const CAmount& nTotalRewardWithMasternodes);\n void FillBlockPayments(CMutableTransaction& txNew, int nBlockHeight, const CAmount &nFee, CAmount blockReward, CTxOut& txoutMasternodeRet, std::vector<CTxOut>& voutSuperblockRet);\n std::string GetRequiredPaymentsString(int nBlockHeight);\n \n@@ -44,15 +44,18 @@ class CMasternodePayee\n private:\n     CScript scriptPubKey;\n     std::vector<uint256> vecVoteHashes;\n+\t\n \n public:\n+\tint nStartHeight;\n     CMasternodePayee() :\n         scriptPubKey(),\n-        vecVoteHashes()\n+        vecVoteHashes(), nStartHeight(0),\n         {}\n \n-    CMasternodePayee(CScript payee, uint256 hashIn) :\n+    CMasternodePayee(CScript payee, uint256 hashIn, int nStart) :\n         scriptPubKey(payee),\n+\t\tnStartHeight(nStart)\n         vecVoteHashes()\n     {\n         vecVoteHashes.push_back(hashIn);\n@@ -64,6 +67,7 @@ class CMasternodePayee\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(*(CScriptBase*)(&scriptPubKey));\n         READWRITE(vecVoteHashes);\n+\t\tREADWRITE(nStartHeight);\n     }\n \n     CScript GetPayee() { return scriptPubKey; }\n@@ -99,9 +103,10 @@ class CMasternodeBlockPayees\n \n     void AddPayee(const CMasternodePaymentVote& vote);\n     bool GetBestPayee(CScript& payeeRet);\n+\tbool GetBestPayee(CScript& payeeRet, int &nStartHeight);\n     bool HasPayeeWithVotes(const CScript& payeeIn, int nVotesReq);\n \n-    bool IsTransactionValid(const CTransaction& txNew, const CAmount &nFee, const CAmount& nMasternodePayment);\n+    bool IsTransactionValid(const CTransaction& txNew, const CAmount &nFee, const int64_t &nHeight, const CAmount& nTotalRewardWithMasternodes);\n \n     std::string GetRequiredPaymentsString();\n };\n@@ -111,21 +116,21 @@ class CMasternodePaymentVote\n {\n public:\n     CTxIn vinMasternode;\n-\n+\tint nStartHeight;\n     int nBlockHeight;\n     CScript payee;\n     std::vector<unsigned char> vchSig;\n \n     CMasternodePaymentVote() :\n         vinMasternode(),\n-        nBlockHeight(0),\n+        nBlockHeight(0), nStartHeight(0),\n         payee(),\n         vchSig()\n         {}\n \n-    CMasternodePaymentVote(COutPoint outpointMasternode, int nBlockHeight, CScript payee) :\n+    CMasternodePaymentVote(COutPoint outpointMasternode, int nBlockHeight, CScript payee, int nStart ) :\n         vinMasternode(outpointMasternode),\n-        nBlockHeight(nBlockHeight),\n+        nBlockHeight(nBlockHeight), nStartHeight(nStart)\n         payee(payee),\n         vchSig()\n         {}\n@@ -136,6 +141,7 @@ class CMasternodePaymentVote\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n         READWRITE(vinMasternode);\n         READWRITE(nBlockHeight);\n+\t\tREADWRITE(nStartHeight);\n         READWRITE(*(CScriptBase*)(&payee));\n         READWRITE(vchSig);\n     }\n@@ -144,6 +150,7 @@ class CMasternodePaymentVote\n         CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n         ss << *(CScriptBase*)(&payee);\n         ss << nBlockHeight;\n+\t\tss << nStartHeight;\n         ss << vinMasternode.prevout;\n         return ss.GetHash();\n     }\n@@ -204,7 +211,8 @@ class CMasternodePayments\n     void CheckAndRemove();\n \n     bool GetBlockPayee(int nBlockHeight, CScript& payee);\n-    bool IsTransactionValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount& nMasternodePayment);\n+\tbool GetBlockPayee(int nBlockHeight, CScript& payee, int &nStartHeight);\n+    bool IsTransactionValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount& nTotalRewardWithMasternodes);\n     bool IsScheduled(CMasternode& mn, int nNotBlockHeight);\n \n     bool CanVote(COutPoint outMasternode, int nBlockHeight);"
      },
      {
        "sha": "2fa17966ac27dcc9f3cc8da6bc3001489358a307",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 43,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1105736a063e52f82b1966bd08a86b2e9799b6c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1105736a063e52f82b1966bd08a86b2e9799b6c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b1105736a063e52f82b1966bd08a86b2e9799b6c",
        "patch": "@@ -2569,49 +2569,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \t// SYSCOIN\n \tCAmount nTotalRewardWithMasternodes;\n \tCAmount blockReward = GetBlockSubsidy(pindex->nHeight, chainparams.GetConsensus(), nTotalRewardWithMasternodes);\n-\tCAmount masternodeReward = 0;\n-\tunsigned int nStartHeight = 0;\n-\tBOOST_FOREACH(CTxOut txout, block.vtx[0].vout) {\n-\t\tif (txout.scriptPubKey.IsUnspendable()) {\n-\t\t\tvector<unsigned char> vchData;\n-\t\t\tCScript::const_iterator pc = txout.scriptPubKey.begin();\n-\t\t\topcodetype opcode;\n-\t\t\tif (!txout.scriptPubKey.GetOp(pc, opcode))\n-\t\t\t\tcontinue;\n-\t\t\tif (opcode != OP_RETURN)\n-\t\t\t\tcontinue;\n-\t\t\tif (!txout.scriptPubKey.GetOp(pc, opcode, vchData) || vchData.size() <= 0)\n-\t\t\t\tcontinue;\n-\t\t\ttry {\n-\t\t\t\tnStartHeight = boost::lexical_cast<unsigned int>(stringFromVch(vchData));\n-\t\t\t}\n-\t\t\tcatch (boost::bad_lexical_cast &)\n-\t\t\t{\n-\t\t\t\tnStartHeight = 0;\n-\t\t\t}\n-\t\t\tif (nStartHeight != 0) {\n-\t\t\t\tmasternodeReward = GetBlockSubsidy(pindex->nHeight, chainparams.GetConsensus(), nTotalRewardWithMasternodes, false, true, nStartHeight);\n-\t\t\t\tblockReward = nTotalRewardWithMasternodes;\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t}\n-\t}\n-\t// if opreturn was put in with height, then validate it\n-\tif (masternodeSync.IsSynced() && nStartHeight != 0) {\n-\t\tBOOST_FOREACH(CTxOut txout, block.vtx[0].vout) {\n-\t\t\tif (!txout.scriptPubKey.IsUnspendable()) {\n-\t\t\t\tmasternode_info_t mnInfo;\n-\t\t\t\tmnodeman.GetMasternodeInfo(txout.scriptPubKey, mnInfo);\n-\t\t\t\tif (mnInfo.pubKeyCollateralAddress.IsValid()) {\n-\t\t\t\t\tif (mnodeman.GetStartHeight(mnInfo) != nStartHeight)\n-\t\t\t\t\t\treturn state.DoS(0, error(\"ConnectBlock(SYS): Masternode height and provided coinbase height mismatch\"),\n-\t\t\t\t\t\t\tREJECT_INVALID, \"bad-cb-payee\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tif (!IsBlockPayeeValid(block.vtx[0], pindex->nHeight, nFees, blockReward, masternodeReward)) {\n+\tif (!IsBlockPayeeValid(block.vtx[0], pindex->nHeight, nFees, nTotalRewardWithMasternodes)) {\n \t\tmapRejectedBlocks.insert(make_pair(block.GetHash(), GetTime()));\n \t\treturn state.DoS(0, error(\"ConnectBlock(SYS): couldn't find masternode or superblock payments\"),\n \t\t\tREJECT_INVALID, \"bad-cb-payee\");"
      }
    ]
  },
  {
    "sha": "1f589f092709824b509c1b89a42e3c9c9c6efa21",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjU4OWYwOTI3MDk4MjRiNTA5YzFiODlhNDJlM2M5YzljNmVmYTIx",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T22:51:26Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T22:51:26Z"
      },
      "message": "compile",
      "tree": {
        "sha": "516a08fcce56e39d66c15d276a5716538e9d640d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/516a08fcce56e39d66c15d276a5716538e9d640d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f589f092709824b509c1b89a42e3c9c9c6efa21",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f589f092709824b509c1b89a42e3c9c9c6efa21",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f589f092709824b509c1b89a42e3c9c9c6efa21",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f589f092709824b509c1b89a42e3c9c9c6efa21/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1105736a063e52f82b1966bd08a86b2e9799b6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1105736a063e52f82b1966bd08a86b2e9799b6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1105736a063e52f82b1966bd08a86b2e9799b6c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b3b3a8f00955d1dfd8ffe6b6132ae6ea4040cb0c",
        "filename": "src/masternode-payments.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f589f092709824b509c1b89a42e3c9c9c6efa21/src/masternode-payments.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f589f092709824b509c1b89a42e3c9c9c6efa21/src/masternode-payments.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.h?ref=1f589f092709824b509c1b89a42e3c9c9c6efa21",
        "patch": "@@ -55,7 +55,7 @@ class CMasternodePayee\n \n     CMasternodePayee(CScript payee, uint256 hashIn, int nStart) :\n         scriptPubKey(payee),\n-\t\tnStartHeight(nStart)\n+\t\tnStartHeight(nStart),\n         vecVoteHashes()\n     {\n         vecVoteHashes.push_back(hashIn);"
      }
    ]
  },
  {
    "sha": "c24798086a69dbac36429213458ae9c01191f88b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjQ3OTgwODZhNjlkYmFjMzY0MjkyMTM0NThhZTljMDExOTFmODhi",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T22:52:59Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T22:52:59Z"
      },
      "message": "compile",
      "tree": {
        "sha": "5d899b3d5442dada9cbff05362916cf44cae5a0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d899b3d5442dada9cbff05362916cf44cae5a0b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c24798086a69dbac36429213458ae9c01191f88b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c24798086a69dbac36429213458ae9c01191f88b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c24798086a69dbac36429213458ae9c01191f88b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c24798086a69dbac36429213458ae9c01191f88b/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f589f092709824b509c1b89a42e3c9c9c6efa21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f589f092709824b509c1b89a42e3c9c9c6efa21",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f589f092709824b509c1b89a42e3c9c9c6efa21"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "79723e5cb66f405d55e09b5afe9e8094916cf88c",
        "filename": "src/masternode-payments.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c24798086a69dbac36429213458ae9c01191f88b/src/masternode-payments.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c24798086a69dbac36429213458ae9c01191f88b/src/masternode-payments.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.h?ref=c24798086a69dbac36429213458ae9c01191f88b",
        "patch": "@@ -50,7 +50,8 @@ class CMasternodePayee\n \tint nStartHeight;\n     CMasternodePayee() :\n         scriptPubKey(),\n-        vecVoteHashes(), nStartHeight(0),\n+        vecVoteHashes(), \n+\t\tnStartHeight(0)\n         {}\n \n     CMasternodePayee(CScript payee, uint256 hashIn, int nStart) :\n@@ -130,7 +131,8 @@ class CMasternodePaymentVote\n \n     CMasternodePaymentVote(COutPoint outpointMasternode, int nBlockHeight, CScript payee, int nStart ) :\n         vinMasternode(outpointMasternode),\n-        nBlockHeight(nBlockHeight), nStartHeight(nStart)\n+        nBlockHeight(nBlockHeight),\n+\t\tnStartHeight(nStart),\n         payee(payee),\n         vchSig()\n         {}"
      }
    ]
  },
  {
    "sha": "3ed8aea60d6d9dd0144fc00b3c6fc6d1ccc7a04b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWQ4YWVhNjBkNmQ5ZGQwMTQ0ZmMwMGIzYzZmYzZkMWNjYzdhMDRi",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T22:55:52Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T22:55:52Z"
      },
      "message": "compile",
      "tree": {
        "sha": "b362e94c6a2898c99b2980bd6542907772a5e4e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b362e94c6a2898c99b2980bd6542907772a5e4e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ed8aea60d6d9dd0144fc00b3c6fc6d1ccc7a04b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ed8aea60d6d9dd0144fc00b3c6fc6d1ccc7a04b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ed8aea60d6d9dd0144fc00b3c6fc6d1ccc7a04b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ed8aea60d6d9dd0144fc00b3c6fc6d1ccc7a04b/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c24798086a69dbac36429213458ae9c01191f88b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c24798086a69dbac36429213458ae9c01191f88b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c24798086a69dbac36429213458ae9c01191f88b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "914b4c7a0bfcaa59dfb9a40482b2ab4551839a65",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ed8aea60d6d9dd0144fc00b3c6fc6d1ccc7a04b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ed8aea60d6d9dd0144fc00b3c6fc6d1ccc7a04b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3ed8aea60d6d9dd0144fc00b3c6fc6d1ccc7a04b",
        "patch": "@@ -2569,7 +2569,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \t// SYSCOIN\n \tCAmount nTotalRewardWithMasternodes;\n \tCAmount blockReward = GetBlockSubsidy(pindex->nHeight, chainparams.GetConsensus(), nTotalRewardWithMasternodes);\n-\tif (!IsBlockPayeeValid(block.vtx[0], pindex->nHeight, nFees, nTotalRewardWithMasternodes)) {\n+\tif (!IsBlockPayeeValid(block.vtx[0], pindex->nHeight, nFees, blockReward, nTotalRewardWithMasternodes)) {\n \t\tmapRejectedBlocks.insert(make_pair(block.GetHash(), GetTime()));\n \t\treturn state.DoS(0, error(\"ConnectBlock(SYS): couldn't find masternode or superblock payments\"),\n \t\t\tREJECT_INVALID, \"bad-cb-payee\");"
      }
    ]
  },
  {
    "sha": "7da80c8ca95b8cf91a9b28fbc8fb8163f58e78c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZGE4MGM4Y2E5NWI4Y2Y5MWE5YjI4ZmJjOGZiODE2M2Y1OGU3OGMx",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T23:13:07Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T23:13:07Z"
      },
      "message": "fix isblockvalid check by changing total reward  by reference in payee check",
      "tree": {
        "sha": "bd40d1195df651f1e4ae102e954fa2ae0e68d5eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd40d1195df651f1e4ae102e954fa2ae0e68d5eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7da80c8ca95b8cf91a9b28fbc8fb8163f58e78c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7da80c8ca95b8cf91a9b28fbc8fb8163f58e78c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7da80c8ca95b8cf91a9b28fbc8fb8163f58e78c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7da80c8ca95b8cf91a9b28fbc8fb8163f58e78c1/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ed8aea60d6d9dd0144fc00b3c6fc6d1ccc7a04b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ed8aea60d6d9dd0144fc00b3c6fc6d1ccc7a04b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ed8aea60d6d9dd0144fc00b3c6fc6d1ccc7a04b"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "9077e2a59a3c74fc8b9b4ab74009286895dd4b41",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7da80c8ca95b8cf91a9b28fbc8fb8163f58e78c1/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7da80c8ca95b8cf91a9b28fbc8fb8163f58e78c1/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=7da80c8ca95b8cf91a9b28fbc8fb8163f58e78c1",
        "patch": "@@ -103,7 +103,7 @@ bool IsBlockValueValid(const CBlock& block, int nBlockHeight, const CAmount &nFe\n     return isBlockRewardValueMet;\n }\n \n-bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward, const CAmount& nTotalRewardWithMasternodes)\n+bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward, CAmount& nTotalRewardWithMasternodes)\n {\n     if(!masternodeSync.IsSynced()) {\n         //there is no budget data to use to check anything, let's just accept the longest chain\n@@ -517,7 +517,7 @@ bool CMasternodeBlockPayees::HasPayeeWithVotes(const CScript& payeeIn, int nVote\n     return false;\n }\n \n-bool CMasternodeBlockPayees::IsTransactionValid(const CTransaction& txNew, const CAmount &nFee, const int64_t &nHeight, const CAmount& nTotalRewardWithMasternodes)\n+bool CMasternodeBlockPayees::IsTransactionValid(const CTransaction& txNew, const CAmount &nFee, const int64_t &nHeight, CAmount& nTotalRewardWithMasternodes)\n {\n     LOCK(cs_vecPayees);\n \n@@ -604,7 +604,7 @@ std::string CMasternodePayments::GetRequiredPaymentsString(int nBlockHeight)\n     return \"Unknown\";\n }\n \n-bool CMasternodePayments::IsTransactionValid(const CTransaction& txNew, int nBlockHeight, const CAmount& nFee, const CAmount& nTotalRewardWithMasternodes)\n+bool CMasternodePayments::IsTransactionValid(const CTransaction& txNew, int nBlockHeight, const CAmount& nFee, CAmount& nTotalRewardWithMasternodes)\n {\n     LOCK(cs_mapMasternodeBlocks);\n "
      },
      {
        "sha": "76bd58f78416686d0bc3f331e0ad9a7dbf0f3509",
        "filename": "src/masternode-payments.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7da80c8ca95b8cf91a9b28fbc8fb8163f58e78c1/src/masternode-payments.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7da80c8ca95b8cf91a9b28fbc8fb8163f58e78c1/src/masternode-payments.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.h?ref=7da80c8ca95b8cf91a9b28fbc8fb8163f58e78c1",
        "patch": "@@ -35,7 +35,7 @@ extern CMasternodePayments mnpayments;\n \n /// TODO: all 4 functions do not belong here really, they should be refactored/moved somewhere (main.cpp ?)\n bool IsBlockValueValid(const CBlock& block, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward, std::string &strErrorRet);\n-bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward, const CAmount& nTotalRewardWithMasternodes);\n+bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward, CAmount& nTotalRewardWithMasternodes);\n void FillBlockPayments(CMutableTransaction& txNew, int nBlockHeight, const CAmount &nFee, CAmount blockReward, CTxOut& txoutMasternodeRet, std::vector<CTxOut>& voutSuperblockRet);\n std::string GetRequiredPaymentsString(int nBlockHeight);\n \n@@ -107,7 +107,7 @@ class CMasternodeBlockPayees\n \tbool GetBestPayee(CScript& payeeRet, int &nStartHeight);\n     bool HasPayeeWithVotes(const CScript& payeeIn, int nVotesReq);\n \n-    bool IsTransactionValid(const CTransaction& txNew, const CAmount &nFee, const int64_t &nHeight, const CAmount& nTotalRewardWithMasternodes);\n+    bool IsTransactionValid(const CTransaction& txNew, const CAmount &nFee, const int64_t &nHeight, CAmount& nTotalRewardWithMasternodes);\n \n     std::string GetRequiredPaymentsString();\n };\n@@ -214,7 +214,7 @@ class CMasternodePayments\n \n     bool GetBlockPayee(int nBlockHeight, CScript& payee);\n \tbool GetBlockPayee(int nBlockHeight, CScript& payee, int &nStartHeight);\n-    bool IsTransactionValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount& nTotalRewardWithMasternodes);\n+    bool IsTransactionValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, CAmount& nTotalRewardWithMasternodes);\n     bool IsScheduled(CMasternode& mn, int nNotBlockHeight);\n \n     bool CanVote(COutPoint outMasternode, int nBlockHeight);"
      },
      {
        "sha": "f6988dc66370a53e965a27ffb0b2f1d8ea215a41",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7da80c8ca95b8cf91a9b28fbc8fb8163f58e78c1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7da80c8ca95b8cf91a9b28fbc8fb8163f58e78c1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7da80c8ca95b8cf91a9b28fbc8fb8163f58e78c1",
        "patch": "@@ -2575,7 +2575,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \t\t\tREJECT_INVALID, \"bad-cb-payee\");\n \t}\n \tstd::string strError = \"\";\n-\tif (!IsBlockValueValid(block, pindex->nHeight, nFees, blockReward, strError)) {\n+\tif (!IsBlockValueValid(block, pindex->nHeight, nFees, nTotalRewardWithMasternodes, strError)) {\n \t\treturn state.DoS(0, error(\"ConnectBlock(SYS): %s\", strError), REJECT_INVALID, \"bad-cb-amount\");\n \t}\n \t// END SYS"
      }
    ]
  },
  {
    "sha": "dbfe46fe7d3e9daae8db8dfa755492c933f37357",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmZlNDZmZTdkM2U5ZGFhZThkYjhkZmE3NTU0OTJjOTMzZjM3MzU3",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T23:26:06Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-16T23:26:06Z"
      },
      "message": "include syscoin outputs if requested in syscoinlistreceivedby",
      "tree": {
        "sha": "1fa051134a0a29b31fad1099378a17d1941a783f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1fa051134a0a29b31fad1099378a17d1941a783f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbfe46fe7d3e9daae8db8dfa755492c933f37357",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbfe46fe7d3e9daae8db8dfa755492c933f37357",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbfe46fe7d3e9daae8db8dfa755492c933f37357",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbfe46fe7d3e9daae8db8dfa755492c933f37357/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7da80c8ca95b8cf91a9b28fbc8fb8163f58e78c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7da80c8ca95b8cf91a9b28fbc8fb8163f58e78c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7da80c8ca95b8cf91a9b28fbc8fb8163f58e78c1"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 19,
      "deletions": 17
    },
    "files": [
      {
        "sha": "81e578dc7ee087f4b3795e0fbab9532000963d30",
        "filename": "src/alias.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbfe46fe7d3e9daae8db8dfa755492c933f37357/src/alias.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbfe46fe7d3e9daae8db8dfa755492c933f37357/src/alias.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alias.cpp?ref=dbfe46fe7d3e9daae8db8dfa755492c933f37357",
        "patch": "@@ -1169,7 +1169,7 @@ UniValue SyscoinListReceived(bool includeempty=true)\n \t}\n \n \tvector<COutput> vecOutputs;\n-\tpwalletMain->AvailableCoins(vecOutputs, false, NULL, includeempty);\n+\tpwalletMain->AvailableCoins(vecOutputs, false, NULL, includeempty, ALL_COINS, false, true);\n \tBOOST_FOREACH(const COutput& out, vecOutputs) {\n \t\tCTxDestination address;\n \t\tif (!ExtractDestination(out.tx->vout[out.i].scriptPubKey, address))"
      },
      {
        "sha": "ddb82667d9fc12cc37f85a10b3dd82fb7be8acb3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 15,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbfe46fe7d3e9daae8db8dfa755492c933f37357/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbfe46fe7d3e9daae8db8dfa755492c933f37357/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=dbfe46fe7d3e9daae8db8dfa755492c933f37357",
        "patch": "@@ -2370,7 +2370,7 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n \treturn nTotal;\n }\n \n-void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const CCoinControl *coinControl, bool fIncludeZeroValue, AvailableCoinsType nCoinType, bool fUseInstantSend) const\n+void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const CCoinControl *coinControl, bool fIncludeZeroValue, AvailableCoinsType nCoinType, bool fUseInstantSend, bool fIncludeSyscoin) const\n {\n \tvCoins.clear();\n \n@@ -2401,21 +2401,23 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n \n \t\t\tfor (unsigned int i = 0; i < pcoin->vout.size(); i++) {\n \t\t\t\t// SYSCOIN\n-\t\t\t\tif (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs && !coinControl->IsSelected(COutPoint((*it).first, i)))\n-\t\t\t\t\tcontinue;\n-\t\t\t\t// SYSCOIN txs are unspendable by wallet unless using coincontrol(and the tx is selected)\n-\t\t\t\tif (!coinControl || !coinControl->IsSelected(COutPoint((*it).first, i)))\n-\t\t\t\t{\n-\t\t\t\t\tCTxDestination sysdestination;\n-\t\t\t\t\tif (pcoin->vout.size() >= i && ExtractDestination(pcoin->vout[i].scriptPubKey, sysdestination))\n+\t\t\t\tif (!fIncludeSyscoin) {\n+\t\t\t\t\tif (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs && !coinControl->IsSelected(COutPoint((*it).first, i)))\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t// SYSCOIN txs are unspendable by wallet unless using coincontrol(and the tx is selected)\n+\t\t\t\t\tif (!coinControl || !coinControl->IsSelected(COutPoint((*it).first, i)))\n \t\t\t\t\t{\n-\t\t\t\t\t\tint op;\n-\t\t\t\t\t\tvector<vector<unsigned char> > vvchArgs;\n-\t\t\t\t\t\tif (IsSyscoinScript(pcoin->vout[i].scriptPubKey, op, vvchArgs))\n-\t\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t\tCSyscoinAddress address = CSyscoinAddress(sysdestination);\n-\t\t\t\t\t\tif (DoesAliasExist(address.ToString()))\n-\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\tCTxDestination sysdestination;\n+\t\t\t\t\t\tif (pcoin->vout.size() >= i && ExtractDestination(pcoin->vout[i].scriptPubKey, sysdestination))\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tint op;\n+\t\t\t\t\t\t\tvector<vector<unsigned char> > vvchArgs;\n+\t\t\t\t\t\t\tif (IsSyscoinScript(pcoin->vout[i].scriptPubKey, op, vvchArgs))\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\tCSyscoinAddress address = CSyscoinAddress(sysdestination);\n+\t\t\t\t\t\t\tif (DoesAliasExist(address.ToString()))\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\t"
      },
      {
        "sha": "6b15a36277063ab9bd9b637cb9bde81a22b1381a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbfe46fe7d3e9daae8db8dfa755492c933f37357/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbfe46fe7d3e9daae8db8dfa755492c933f37357/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=dbfe46fe7d3e9daae8db8dfa755492c933f37357",
        "patch": "@@ -700,7 +700,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \t/**\n \t* populate vCoins with vector of available COutputs.\n \t*/\n-\tvoid AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed = true, const CCoinControl *coinControl = NULL, bool fIncludeZeroValue = false, AvailableCoinsType nCoinType = ALL_COINS, bool fUseInstantSend = false) const;\n+\tvoid AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed = true, const CCoinControl *coinControl = NULL, bool fIncludeZeroValue = false, AvailableCoinsType nCoinType = ALL_COINS, bool fUseInstantSend = false, bool fIncludeSyscoin = false) const;\n \n \t/**\n \t* Shuffle and select coins until nTargetValue is reached while avoiding"
      }
    ]
  },
  {
    "sha": "4340f618a59998be6c77d798ba277466ce8e29e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzQwZjYxOGE1OTk5OGJlNmM3N2Q3OThiYTI3NzQ2NmNlOGUyOWUz",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T00:19:27Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T00:19:27Z"
      },
      "message": "move check down so we save subsidy",
      "tree": {
        "sha": "c31a23caadb04886c08b8f5d5e5b23e62e013336",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c31a23caadb04886c08b8f5d5e5b23e62e013336"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4340f618a59998be6c77d798ba277466ce8e29e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4340f618a59998be6c77d798ba277466ce8e29e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4340f618a59998be6c77d798ba277466ce8e29e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4340f618a59998be6c77d798ba277466ce8e29e3/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbfe46fe7d3e9daae8db8dfa755492c933f37357",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbfe46fe7d3e9daae8db8dfa755492c933f37357",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbfe46fe7d3e9daae8db8dfa755492c933f37357"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "1aa9e15ebe2fcff6ca93af81355c573de19a2596",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4340f618a59998be6c77d798ba277466ce8e29e3/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4340f618a59998be6c77d798ba277466ce8e29e3/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=4340f618a59998be6c77d798ba277466ce8e29e3",
        "patch": "@@ -533,8 +533,6 @@ bool CMasternodeBlockPayees::IsTransactionValid(const CTransaction& txNew, const\n         }\n     }\n \n-    // if we don't have at least MNPAYMENTS_SIGNATURES_REQUIRED signatures on a payee, approve whichever is the longest chain\n-    if(nMaxSignatures < MNPAYMENTS_SIGNATURES_REQUIRED) return true;\n \n     BOOST_FOREACH(CMasternodePayee& payee, vecPayees) {\n         if (payee.GetVoteCount() >= MNPAYMENTS_SIGNATURES_REQUIRED) {\n@@ -566,7 +564,8 @@ bool CMasternodeBlockPayees::IsTransactionValid(const CTransaction& txNew, const\n             }\n         }\n     }\n-\n+\t// if we don't have at least MNPAYMENTS_SIGNATURES_REQUIRED signatures on a payee, approve whichever is the longest chain\n+\tif (nMaxSignatures < MNPAYMENTS_SIGNATURES_REQUIRED) return true;\n     LogPrintf(\"CMasternodeBlockPayees::IsTransactionValid -- ERROR: Missing required payment, possible payees: '%s'\\n\", strPayeesPossible);\n     return false;\n }"
      }
    ]
  },
  {
    "sha": "ab57b355fac486ccade0f95164bfd928b5ce4de1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjU3YjM1NWZhYzQ4NmNjYWRlMGY5NTE2NGJmZDkyOGI1Y2U0ZGUx",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T00:27:16Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T00:27:16Z"
      },
      "message": "getblocksubsidy regardless of payment sig checks",
      "tree": {
        "sha": "584508e8a649c64d245b3b815cd2552b2af96a3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/584508e8a649c64d245b3b815cd2552b2af96a3a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab57b355fac486ccade0f95164bfd928b5ce4de1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab57b355fac486ccade0f95164bfd928b5ce4de1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab57b355fac486ccade0f95164bfd928b5ce4de1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab57b355fac486ccade0f95164bfd928b5ce4de1/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4340f618a59998be6c77d798ba277466ce8e29e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4340f618a59998be6c77d798ba277466ce8e29e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4340f618a59998be6c77d798ba277466ce8e29e3"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 16,
      "deletions": 17
    },
    "files": [
      {
        "sha": "f03f488ee6670ac73c827235cc3c6c2d0675c4ca",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 17,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab57b355fac486ccade0f95164bfd928b5ce4de1/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab57b355fac486ccade0f95164bfd928b5ce4de1/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=ab57b355fac486ccade0f95164bfd928b5ce4de1",
        "patch": "@@ -535,24 +535,23 @@ bool CMasternodeBlockPayees::IsTransactionValid(const CTransaction& txNew, const\n \n \n     BOOST_FOREACH(CMasternodePayee& payee, vecPayees) {\n+\t\tconst CScript& payeeScript = payee.GetPayee();\n+\t\tconst CAmount &nMasternodePayment = GetBlockSubsidy(nHeight, chainparams.GetConsensus(), nTotalRewardWithMasternodes, false, true, payee.nStartHeight);\n+\t\tbool bFoundPayment = false;\n+\t\tbool bFoundFee = false;\n+\t\tBOOST_FOREACH(CTxOut txout, txNew.vout) {\n+\t\t\tif (payeeScript == txout.scriptPubKey && nMasternodePayment == txout.nValue) {\n+\t\t\t\tLogPrint(\"mnpayments\", \"CMasternodeBlockPayees::IsTransactionValid -- Found required payment\\n\");\n+\t\t\t\tbFoundPayment = true;\n+\t\t\t}\n+\t\t\tif (nFee <= 0 || (payeeScript == txout.scriptPubKey && ((nFee / 2) == txout.nValue))) {\n+\t\t\t\tLogPrint(\"mnpayments\", \"CMasternodeBlockPayees::IsTransactionValid -- Found required fee\\n\");\n+\t\t\t\tbFoundFee = true;\n+\t\t\t}\n+\t\t}\n         if (payee.GetVoteCount() >= MNPAYMENTS_SIGNATURES_REQUIRED) {\n-\t\t\tconst CScript& payeeScript = payee.GetPayee();\n-\t\t\tconst CAmount &nMasternodePayment = GetBlockSubsidy(nHeight, chainparams.GetConsensus(), nTotalRewardWithMasternodes, false, true, payee.nStartHeight);\n-\t\t\tbool bFoundPayment = false;\n-\t\t\tbool bFoundFee = false;\n-            BOOST_FOREACH(CTxOut txout, txNew.vout) {\n-                if (payeeScript == txout.scriptPubKey && nMasternodePayment == txout.nValue) {\n-                    LogPrint(\"mnpayments\", \"CMasternodeBlockPayees::IsTransactionValid -- Found required payment\\n\");\n-\t\t\t\t\tbFoundPayment = true;\n-                }\n-\t\t\t\tif (nFee <= 0 || (payeeScript == txout.scriptPubKey && ((nFee / 2) == txout.nValue))) {\n-\t\t\t\t\tLogPrint(\"mnpayments\", \"CMasternodeBlockPayees::IsTransactionValid -- Found required fee\\n\");\n-\t\t\t\t\tbFoundFee = true;\n-\t\t\t\t}\n-\t\t\t\tif (bFoundFee && bFoundPayment)\n-\t\t\t\t\treturn true;\n-            }\n-\n+\t\t\tif (bFoundFee && bFoundPayment)\n+\t\t\t\treturn true;\n             CTxDestination address1;\n             ExtractDestination(payeeScript, address1);\n             CSyscoinAddress address2(address1);"
      }
    ]
  },
  {
    "sha": "54005b0f68144d8d9320ba3d1e0f6e391b377d83",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDAwNWIwZjY4MTQ0ZDhkOTMyMGJhM2QxZTBmNmUzOTFiMzc3ZDgz",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T03:00:12Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T03:00:12Z"
      },
      "message": "refactor updatelastpaid to rid of getaddress and use payee",
      "tree": {
        "sha": "2e2dcbd2f3d7b28677b6b5326b02abb7334dc8a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e2dcbd2f3d7b28677b6b5326b02abb7334dc8a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54005b0f68144d8d9320ba3d1e0f6e391b377d83",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54005b0f68144d8d9320ba3d1e0f6e391b377d83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54005b0f68144d8d9320ba3d1e0f6e391b377d83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54005b0f68144d8d9320ba3d1e0f6e391b377d83/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab57b355fac486ccade0f95164bfd928b5ce4de1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab57b355fac486ccade0f95164bfd928b5ce4de1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab57b355fac486ccade0f95164bfd928b5ce4de1"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 33,
      "deletions": 26
    },
    "files": [
      {
        "sha": "95720852773de46331932ee966ad195deb56cd95",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54005b0f68144d8d9320ba3d1e0f6e391b377d83/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54005b0f68144d8d9320ba3d1e0f6e391b377d83/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=54005b0f68144d8d9320ba3d1e0f6e391b377d83",
        "patch": "@@ -503,12 +503,13 @@ bool CMasternodeBlockPayees::GetBestPayee(CScript& payeeRet, int& nStartHeight)\n \n \treturn (nVotes > -1);\n }\n-bool CMasternodeBlockPayees::HasPayeeWithVotes(const CScript& payeeIn, int nVotesReq)\n+bool CMasternodeBlockPayees::HasPayeeWithVotes(const CScript& payeeIn, int nVotesReq, CMasternodePayee& payeeOut)\n {\n     LOCK(cs_vecPayees);\n \n     BOOST_FOREACH(CMasternodePayee& payee, vecPayees) {\n         if (payee.GetVoteCount() >= nVotesReq && payee.GetPayee() == payeeIn) {\n+\t\t\tpayeeOut = payee;\n             return true;\n         }\n     }"
      },
      {
        "sha": "f4d2b4fa9b4dc3ed17ad1f3336abc9174a8dd605",
        "filename": "src/masternode-payments.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54005b0f68144d8d9320ba3d1e0f6e391b377d83/src/masternode-payments.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54005b0f68144d8d9320ba3d1e0f6e391b377d83/src/masternode-payments.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.h?ref=54005b0f68144d8d9320ba3d1e0f6e391b377d83",
        "patch": "@@ -105,7 +105,7 @@ class CMasternodeBlockPayees\n     void AddPayee(const CMasternodePaymentVote& vote);\n     bool GetBestPayee(CScript& payeeRet);\n \tbool GetBestPayee(CScript& payeeRet, int &nStartHeight);\n-    bool HasPayeeWithVotes(const CScript& payeeIn, int nVotesReq);\n+    bool HasPayeeWithVotes(const CScript& payeeIn, int nVotesReq, CMasternodePayee& payee);\n \n     bool IsTransactionValid(const CTransaction& txNew, const CAmount &nFee, const int64_t &nHeight, CAmount& nTotalRewardWithMasternodes);\n "
      },
      {
        "sha": "79bdc408c47f89cc4f7c4cb5321603776afc133f",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 24,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54005b0f68144d8d9320ba3d1e0f6e391b377d83/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54005b0f68144d8d9320ba3d1e0f6e391b377d83/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=54005b0f68144d8d9320ba3d1e0f6e391b377d83",
        "patch": "@@ -289,33 +289,39 @@ std::string CMasternode::GetStatus() const\n     // TODO: return smth a bit more human readable here\n     return GetStateString();\n }\n-void CMasternode::UpdateLastPaid()\n+void CMasternode::UpdateLastPaid(const CBlockIndex *pindex, int nMaxBlocksToScanBack)\n {\n-\tCSyscoinAddress collateralAddress(pubKeyCollateralAddress.GetID());\n-\tuint160 hashBytes;\n-\tint type = 0;\n-\tif (!collateralAddress.GetIndexKey(hashBytes, type)) {\n-\t\treturn;\n-\t}\n-\tstd::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> > unspentOutputs;\n-\tif (!GetAddressUnspent(hashBytes, type, unspentOutputs))\n-\t\treturn;\n-\tif (unspentOutputs.size() > 0)\n-\t\tstd::sort(unspentOutputs.begin(), unspentOutputs.end(), heightSort);\n-\tCAmount nTotalRewardWithMasternodes;\n-\tconst CScript &mnpayee = GetScriptForDestination(pubKeyCollateralAddress.GetID());\n-\tfor (std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> >::const_iterator it = unspentOutputs.end(); it != unspentOutputs.begin(); it--) {\n-\t\tif (mnpayments.mapMasternodeBlocks.count(it->second.blockHeight) &&\n-\t\t\tmnpayments.mapMasternodeBlocks[it->second.blockHeight].HasPayeeWithVotes(mnpayee, 2))\n+\tif (!pindex) return;\n+\tconst CChainParams& chainparams = Params();\n+\tconst CBlockIndex *BlockReading = pindex;\n+\n+\tCScript mnpayee = GetScriptForDestination(pubKeyCollateralAddress.GetID());\n+\t// LogPrint(\"masternode\", \"CMasternode::UpdateLastPaidBlock -- searching for block with payment to %s\\n\", vin.prevout.ToStringShort());\n+\n+\tLOCK(cs_mapMasternodeBlocks);\n+\tCAmount nTotal;\n+\tCMasternodePayee payee;\n+\tfor (int i = 0; BlockReading && BlockReading->nHeight > nBlockLastPaid && i < nMaxBlocksToScanBack; i++) {\n+\t\tif (mnpayments.mapMasternodeBlocks.count(BlockReading->nHeight) &&\n+\t\t\tmnpayments.mapMasternodeBlocks[BlockReading->nHeight].HasPayeeWithVotes(mnpayee, 2, payee))\n \t\t{\n-\t\t\tconst CAmount& nMasternodePayment = GetBlockSubsidy(it->second.blockHeight, Params().GetConsensus(), nTotalRewardWithMasternodes, false, true, unspentOutputs[0].second.blockHeight);\n-\t\t\tif (it->second.satoshis == nMasternodePayment) {\n-\t\t\t\tnBlockLastPaid = it->second.blockHeight;\n-\t\t\t\tnTimeLastPaid = chainActive[nBlockLastPaid]->nTime;\n-\t\t\t\tLogPrint(\"masternode\", \"CMasternode::UpdateLastPaidBlock -- searching for block with payment to %s -- found new %d\\n\", vin.prevout.ToStringShort(), nBlockLastPaid);\n-\t\t\t\tbreak;\n-\t\t\t}\n+\t\t\tCBlock block;\n+\t\t\tif (!ReadBlockFromDisk(block, BlockReading, Params().GetConsensus())) // shouldn't really happen\n+\t\t\t\tcontinue;\n+\n+\t\t\tconst CAmount & nMasternodePayment = GetBlockSubsidy(BlockReading->nHeight, chainparams.GetConsensus(), nTotal, false, true, payee.nStartHeight);\n+\n+\t\t\tBOOST_FOREACH(CTxOut txout, block.vtx[0].vout)\n+\t\t\t\tif (mnpayee == txout.scriptPubKey && nMasternodePayment == txout.nValue) {\n+\t\t\t\t\tnBlockLastPaid = BlockReading->nHeight;\n+\t\t\t\t\tnTimeLastPaid = BlockReading->nTime;\n+\t\t\t\t\tLogPrint(\"masternode\", \"CMasternode::UpdateLastPaidBlock -- searching for block with payment to %s -- found new %d\\n\", vin.prevout.ToStringShort(), nBlockLastPaid);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n \t\t}\n+\n+\t\tif (BlockReading->pprev == NULL) { assert(BlockReading); break; }\n+\t\tBlockReading = BlockReading->pprev;\n \t}\n \n \t// Last payment for this masternode wasn't found in latest mnpayments blocks"
      }
    ]
  },
  {
    "sha": "8eab9173d764f057ab6b5a9ea28e49c655694da7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZWFiOTE3M2Q3NjRmMDU3YWI2YjVhOWVhMjhlNDljNjU1Njk0ZGE3",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T04:16:25Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T04:16:25Z"
      },
      "message": "addressindex 0 by default",
      "tree": {
        "sha": "295bccdb9177894f4a206699dc4a294e5c9ac826",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/295bccdb9177894f4a206699dc4a294e5c9ac826"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8eab9173d764f057ab6b5a9ea28e49c655694da7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8eab9173d764f057ab6b5a9ea28e49c655694da7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8eab9173d764f057ab6b5a9ea28e49c655694da7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8eab9173d764f057ab6b5a9ea28e49c655694da7/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54005b0f68144d8d9320ba3d1e0f6e391b377d83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54005b0f68144d8d9320ba3d1e0f6e391b377d83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54005b0f68144d8d9320ba3d1e0f6e391b377d83"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 27,
      "deletions": 23
    },
    "files": [
      {
        "sha": "37ad2d987dc2d723d765c7bf00b5455f20ea2015",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eab9173d764f057ab6b5a9ea28e49c655694da7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eab9173d764f057ab6b5a9ea28e49c655694da7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8eab9173d764f057ab6b5a9ea28e49c655694da7",
        "patch": "@@ -1998,9 +1998,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \tfMasterNode = GetBoolArg(\"-masternode\", false);\n \n \t// SYSCOIN\n-\tif ((fMasterNode || masternodeConfig.getCount() > 0) && (fAddressIndex == false || fTxIndex == false)) {\n-\t\treturn InitError(\"Enabling Masternode support requires turning on address indexing and transaction indexing.\"\n-\t\t\t\"Please add addressindex=1 and txindex=1 to your configuration and start with -reindex\");\n+\tif ((fMasterNode || masternodeConfig.getCount() > 0) && fTxIndex) {\n+\t\treturn InitError(\"Enabling Masternode support requires turning on transaction indexing.\"\n+\t\t\t\"Please txindex=1 to your configuration and start with -reindex\");\n \t}\n \n \tif (fMasterNode) {"
      },
      {
        "sha": "60268d43b6c7e0fae01ab65ee2f23347314ac556",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 18,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eab9173d764f057ab6b5a9ea28e49c655694da7/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eab9173d764f057ab6b5a9ea28e49c655694da7/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=8eab9173d764f057ab6b5a9ea28e49c655694da7",
        "patch": "@@ -292,19 +292,22 @@ void CMasternodePayments::ProcessMessage(CNode* pfrom, std::string& strCommand,\n         pfrom->setAskFor.erase(nHash);\n \n \t\tif (!masternodeSync.IsMasternodeListSynced()) return;\n-        {\n-            LOCK(cs_mapMasternodePaymentVotes);\n-            if(mapMasternodePaymentVotes.count(nHash)) {\n-                LogPrint(\"mnpayments\", \"MASTERNODEPAYMENTVOTE -- hash=%s, nHeight=%d seen\\n\", nHash.ToString(), nCachedBlockHeight);\n-                return;\n-            }\n+\t\t{\n+\t\t\tLOCK(cs_mapMasternodePaymentVotes);\n \n-            // Avoid processing same vote multiple times\n-            mapMasternodePaymentVotes[nHash] = vote;\n-            // but first mark vote as non-verified,\n-            // AddPaymentVote() below should take care of it if vote is actually ok\n-            mapMasternodePaymentVotes[nHash].MarkAsNotVerified();\n-        }\n+\t\t\tauto res = mapMasternodePaymentVotes.emplace(nHash, vote);\n+\n+\t\t\t// Avoid processing same vote multiple times\n+\t\t\tif (!res.second) {\n+\t\t\t\tLogPrint(\"mnpayments\", \"MASTERNODEPAYMENTVOTE -- hash=%s, nBlockHeight=%d/%d seen\\n\",\n+\t\t\t\t\tnHash.ToString(), vote.nBlockHeight, nCachedBlockHeight);\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\t// Mark vote as non-verified when it's seen for the first time,\n+\t\t\t// AddPaymentVote() below should take care of it if vote is actually ok\n+\t\t\tres.first->second.MarkAsNotVerified();\n+\t\t}\n \n         int nFirstBlock = nCachedBlockHeight - GetStorageLimit();\n         if(vote.nBlockHeight < nFirstBlock || vote.nBlockHeight > nCachedBlockHeight+20) {\n@@ -426,12 +429,13 @@ bool CMasternodePayments::AddPaymentVote(const CMasternodePaymentVote& vote)\n {\n     uint256 blockHash = uint256();\n     if(!GetBlockHash(blockHash, vote.nBlockHeight - 101)) return false;\n+\tuint256 nHash = vote.GetHash();\n \n-    if(HasVerifiedPaymentVote(vote.GetHash())) return false;\n+    if(HasVerifiedPaymentVote(nHash)) return false;\n \n     LOCK2(cs_mapMasternodeBlocks, cs_mapMasternodePaymentVotes);\n \n-    mapMasternodePaymentVotes[vote.GetHash()] = vote;\n+    mapMasternodePaymentVotes[nHash] = vote;\n \n     if(!mapMasternodeBlocks.count(vote.nBlockHeight)) {\n        CMasternodeBlockPayees blockPayees(vote.nBlockHeight);\n@@ -453,22 +457,22 @@ bool CMasternodePayments::HasVerifiedPaymentVote(uint256 hashIn)\n void CMasternodeBlockPayees::AddPayee(const CMasternodePaymentVote& vote)\n {\n     LOCK(cs_vecPayees);\n-\n+\tuint256 nVoteHash = vote.GetHash();\n     BOOST_FOREACH(CMasternodePayee& payee, vecPayees) {\n         if (payee.GetPayee() == vote.payee) {\n-            payee.AddVoteHash(vote.GetHash());\n+            payee.AddVoteHash(nVoteHash);\n             return;\n         }\n     }\n-    CMasternodePayee payeeNew(vote.payee, vote.GetHash(), vote.nStartHeight);\n+    CMasternodePayee payeeNew(vote.payee, nVoteHash, vote.nStartHeight);\n     vecPayees.push_back(payeeNew);\n }\n \n bool CMasternodeBlockPayees::GetBestPayee(CScript& payeeRet)\n {\n     LOCK(cs_vecPayees);\n \n-    if(!vecPayees.size()) {\n+    if(vecPayees.empty()) {\n         LogPrint(\"mnpayments\", \"CMasternodeBlockPayees::GetBestPayee -- ERROR: couldn't find any payee\\n\");\n         return false;\n     }"
      },
      {
        "sha": "aaf40057c263ab7101f0c67d31317511ecc23cbb",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eab9173d764f057ab6b5a9ea28e49c655694da7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eab9173d764f057ab6b5a9ea28e49c655694da7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8eab9173d764f057ab6b5a9ea28e49c655694da7",
        "patch": "@@ -89,7 +89,7 @@ tp::ThreadPool threadpool;\n bool fImporting = false;\n bool fReindex = false;\n bool fTxIndex = true;\n-bool fAddressIndex = true;\n+bool fAddressIndex = false;\n bool fTimestampIndex = false;\n bool fSpentIndex = false;\n bool fHavePruned = false;"
      },
      {
        "sha": "01b8c95c572923e5aaf7cb2d729299d4aaf2e685",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eab9173d764f057ab6b5a9ea28e49c655694da7/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eab9173d764f057ab6b5a9ea28e49c655694da7/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=8eab9173d764f057ab6b5a9ea28e49c655694da7",
        "patch": "@@ -126,7 +126,7 @@ static const bool DEFAULT_PERMIT_BAREMULTISIG = true;\n static const unsigned int DEFAULT_BYTES_PER_SIGOP = 20;\n static const bool DEFAULT_CHECKPOINTS_ENABLED = true;\n static const bool DEFAULT_TXINDEX = true;\n-static const bool DEFAULT_ADDRESSINDEX = true;\n+static const bool DEFAULT_ADDRESSINDEX = false;\n static const bool DEFAULT_TIMESTAMPINDEX = false;\n static const bool DEFAULT_SPENTINDEX = false;\n static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;"
      }
    ]
  },
  {
    "sha": "f49d1c1a55aad48325c191e51921fc0716ab8ecc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDlkMWMxYTU1YWFkNDgzMjVjMTkxZTUxOTIxZmMwNzE2YWI4ZWNj",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T04:31:04Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T04:31:04Z"
      },
      "message": "updatelastpaid fix",
      "tree": {
        "sha": "7ac640a31fd56796d2760e62773dde93b8359f9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ac640a31fd56796d2760e62773dde93b8359f9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f49d1c1a55aad48325c191e51921fc0716ab8ecc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f49d1c1a55aad48325c191e51921fc0716ab8ecc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f49d1c1a55aad48325c191e51921fc0716ab8ecc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f49d1c1a55aad48325c191e51921fc0716ab8ecc/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8eab9173d764f057ab6b5a9ea28e49c655694da7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8eab9173d764f057ab6b5a9ea28e49c655694da7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8eab9173d764f057ab6b5a9ea28e49c655694da7"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 19,
      "deletions": 14
    },
    "files": [
      {
        "sha": "8d50ac6f9d78968dfb3b0fc6daec8d1908980146",
        "filename": "src/masternode.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f49d1c1a55aad48325c191e51921fc0716ab8ecc/src/masternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f49d1c1a55aad48325c191e51921fc0716ab8ecc/src/masternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.h?ref=f49d1c1a55aad48325c191e51921fc0716ab8ecc",
        "patch": "@@ -268,7 +268,7 @@ class CMasternode : public masternode_info_t\n \n     int GetLastPaidTime() { return nTimeLastPaid; }\n     int GetLastPaidBlock() { return nBlockLastPaid; }\n-\tvoid UpdateLastPaid();\n+\tvoid UpdateLastPaid(const CBlockIndex *pindex, int nMaxBlocksToScanBack);\n \n     // KEEP TRACK OF EACH GOVERNANCE ITEM INCASE THIS NODE GOES OFFLINE, SO WE CAN RECALC THEIR STATUS\n     void AddGovernanceVote(uint256 nGovernanceObjectHash);"
      },
      {
        "sha": "2d92019a68a0d217493842f0beebea904d5ae7a1",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f49d1c1a55aad48325c191e51921fc0716ab8ecc/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f49d1c1a55aad48325c191e51921fc0716ab8ecc/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=f49d1c1a55aad48325c191e51921fc0716ab8ecc",
        "patch": "@@ -1466,25 +1466,25 @@ bool CMasternodeMan::CheckMnbAndUpdateMasternodeList(CNode* pfrom, CMasternodeBr\n     return true;\n }\n \n-void CMasternodeMan::UpdateLastPaid()\n+void CMasternodeMan::UpdateLastPaid(const CBlockIndex* pindex)\n {\n \tLOCK(cs);\n \n \tif (fLiteMode || !masternodeSync.IsWinnersListSynced() || mapMasternodes.empty()) return;\n \n-\tstatic bool IsFirstRun = true;\n-\t// Do full scan on first run or if we are not a masternode\n-\t// (MNs should update this info on every block, so limited scan should be enough for them)\n-\tint nMaxBlocksToScanBack = (IsFirstRun || !fMasterNode) ? mnpayments.GetStorageLimit() : LAST_PAID_SCAN_BLOCKS;\n+\tstatic int nLastRunBlockHeight = 0;\n+\t// Scan at least LAST_PAID_SCAN_BLOCKS but no more than mnpayments.GetStorageLimit()\n+\tint nMaxBlocksToScanBack = std::max(LAST_PAID_SCAN_BLOCKS, nCachedBlockHeight - nLastRunBlockHeight);\n+\tnMaxBlocksToScanBack = std::min(nMaxBlocksToScanBack, mnpayments.GetStorageLimit());\n \n-\t// LogPrint(\"mnpayments\", \"CMasternodeMan::UpdateLastPaid -- nHeight=%d, nMaxBlocksToScanBack=%d, IsFirstRun=%s\\n\",\n-\t//                         nCachedBlockHeight, nMaxBlocksToScanBack, IsFirstRun ? \"true\" : \"false\");\n+\tLogPrint(\"masternode\", \"CMasternodeMan::UpdateLastPaid -- nCachedBlockHeight=%d, nLastRunBlockHeight=%d, nMaxBlocksToScanBack=%d\\n\",\n+\t\tnCachedBlockHeight, nLastRunBlockHeight, nMaxBlocksToScanBack);\n \n \tfor (auto& mnpair : mapMasternodes) {\n-\t\tmnpair.second.UpdateLastPaid();\n+\t\tmnpair.second.UpdateLastPaid(pindex, nMaxBlocksToScanBack);\n \t}\n \n-\tIsFirstRun = false;\n+\tnLastRunBlockHeight = nCachedBlockHeight;\n }\n \n void CMasternodeMan::UpdateWatchdogVoteTime(const COutPoint& outpoint, uint64_t nVoteTime)\n@@ -1574,7 +1574,7 @@ void CMasternodeMan::UpdatedBlockTip(const CBlockIndex *pindex)\n \n     if(fMasterNode) {\n         // normal wallet does not need to update this every block, doing update on rpc call should be enough\n-        UpdateLastPaid();\n+        UpdateLastPaid(pindex);\n     }\n }\n "
      },
      {
        "sha": "da314efeec5740465add1e3f4dc75187a27f0163",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f49d1c1a55aad48325c191e51921fc0716ab8ecc/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f49d1c1a55aad48325c191e51921fc0716ab8ecc/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=f49d1c1a55aad48325c191e51921fc0716ab8ecc",
        "patch": "@@ -203,7 +203,7 @@ class CMasternodeMan\n     bool CheckMnbAndUpdateMasternodeList(CNode* pfrom, CMasternodeBroadcast mnb, int& nDos, CConnman& connman);\n     bool IsMnbRecoveryRequested(const uint256& hash) { return mMnbRecoveryRequests.count(hash); }\n \n-\tvoid UpdateLastPaid();\n+\tvoid UpdateLastPaid(const CBlockIndex* pindex);\n \n     void AddDirtyGovernanceObjectHash(const uint256& nHash)\n     {"
      },
      {
        "sha": "9e322b81040b20ec0082bca71d51557663d3f61f",
        "filename": "src/rpc/masternode.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f49d1c1a55aad48325c191e51921fc0716ab8ecc/src/rpc/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f49d1c1a55aad48325c191e51921fc0716ab8ecc/src/rpc/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/masternode.cpp?ref=f49d1c1a55aad48325c191e51921fc0716ab8ecc",
        "patch": "@@ -199,7 +199,7 @@ UniValue masternode(const UniValue& params, bool fHelp)\n             pindex = chainActive.Tip();\n         }\n         nHeight = pindex->nHeight + (strCommand == \"current\" ? 1 : 10);\n-        mnodeman.UpdateLastPaid();\n+        mnodeman.UpdateLastPaid(pindex);\n \n         if(!mnodeman.GetNextMasternodeInQueueForPayment(nHeight, true, nCount, mnInfo))\n             return \"unknown\";\n@@ -495,7 +495,12 @@ UniValue masternodelist(const UniValue& params, bool fHelp)\n     }\n \n     if (strMode == \"full\" || strMode == \"lastpaidtime\" || strMode == \"lastpaidblock\") {\n-\t\tmnodeman.UpdateLastPaid();\n+\t\tCBlockIndex* pindex = NULL;\n+\t\t{\n+\t\t\tLOCK(cs_main);\n+\t\t\tpindex = chainActive.Tip();\n+\t\t}\n+\t\tmnodeman.UpdateLastPaid(pindex);\n     }\n \n     UniValue obj(UniValue::VOBJ);"
      }
    ]
  },
  {
    "sha": "38427b7bca445a7ee8981426b01338de8aa0f900",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODQyN2I3YmNhNDQ1YTdlZTg5ODE0MjZiMDEzMzhkZThhYTBmOTAw",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T16:15:23Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T16:15:23Z"
      },
      "message": "fix init",
      "tree": {
        "sha": "8dc2d933e8704e961780dcad3b40eb908cae2fb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8dc2d933e8704e961780dcad3b40eb908cae2fb8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38427b7bca445a7ee8981426b01338de8aa0f900",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38427b7bca445a7ee8981426b01338de8aa0f900",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38427b7bca445a7ee8981426b01338de8aa0f900",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38427b7bca445a7ee8981426b01338de8aa0f900/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f49d1c1a55aad48325c191e51921fc0716ab8ecc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f49d1c1a55aad48325c191e51921fc0716ab8ecc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f49d1c1a55aad48325c191e51921fc0716ab8ecc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "af4f5227a7398a5050074225f4f5afb13404ad74",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38427b7bca445a7ee8981426b01338de8aa0f900/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38427b7bca445a7ee8981426b01338de8aa0f900/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=38427b7bca445a7ee8981426b01338de8aa0f900",
        "patch": "@@ -1998,7 +1998,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \tfMasterNode = GetBoolArg(\"-masternode\", false);\n \n \t// SYSCOIN\n-\tif ((fMasterNode || masternodeConfig.getCount() > 0) && fTxIndex) {\n+\tif ((fMasterNode || masternodeConfig.getCount() > 0) && !fTxIndex) {\n \t\treturn InitError(\"Enabling Masternode support requires turning on transaction indexing.\"\n \t\t\t\"Please txindex=1 to your configuration and start with -reindex\");\n \t}"
      }
    ]
  },
  {
    "sha": "899afe98f963a5be7db18f4f964beaa2b144b213",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTlhZmU5OGY5NjNhNWJlN2RiMThmNGY5NjRiZWFhMmIxNDRiMjEz",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T17:29:09Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T17:29:09Z"
      },
      "message": "fix fillblockpayee",
      "tree": {
        "sha": "87fbb681ad6b438834492fffa959fd15fd763331",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87fbb681ad6b438834492fffa959fd15fd763331"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/899afe98f963a5be7db18f4f964beaa2b144b213",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/899afe98f963a5be7db18f4f964beaa2b144b213",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/899afe98f963a5be7db18f4f964beaa2b144b213",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/899afe98f963a5be7db18f4f964beaa2b144b213/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38427b7bca445a7ee8981426b01338de8aa0f900",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38427b7bca445a7ee8981426b01338de8aa0f900",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38427b7bca445a7ee8981426b01338de8aa0f900"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 1,
      "deletions": 7
    },
    "files": [
      {
        "sha": "249f6bd66d920f77534bc3075c6cbba2a9fc5553",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/899afe98f963a5be7db18f4f964beaa2b144b213/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/899afe98f963a5be7db18f4f964beaa2b144b213/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=899afe98f963a5be7db18f4f964beaa2b144b213",
        "patch": "@@ -221,13 +221,7 @@ void CMasternodePayments::FillBlockPayee(CMutableTransaction& txNew, int nBlockH\n \t\t}\n \t\t// fill payee with locally calculated winner and hope for the best\n \t\tpayee = GetScriptForDestination(mnInfo.pubKeyCollateralAddress.GetID());\n-\t\tnStartHeight = mnodeman.GetStartHeight(mnInfo);\n-\t\tif(nStartHeight <= 0) {\n-\t\t\t// ...and we can't calculate it on our own\n-\t\t\tif (fDebug)\n-\t\t\t\tLogPrintf(\"CMasternodePayments::FillBlockPayee -- Failed to detect start height for masternode to pay\\n\");\n-\t\t\treturn;\n-\t\t}\n+\t\tnStartHeight = 0;\n \t}\n \n \t// miner takes 25% of the reward and half fees"
      }
    ]
  },
  {
    "sha": "b6adf9bceebe43b7d706045655402ac22d7d2ac1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNmFkZjliY2VlYmU0M2I3ZDcwNjA0NTY1NTQwMmFjMjJkN2QyYWMx",
    "commit": {
      "author": {
        "name": "Willy Ko",
        "email": "wko@blockchainfoundry.co",
        "date": "2018-04-17T19:12:35Z"
      },
      "committer": {
        "name": "Willy Ko",
        "email": "wko@blockchainfoundry.co",
        "date": "2018-04-17T19:12:35Z"
      },
      "message": "fix linking failure https://github.com/dashpay/dash/pull/1985",
      "tree": {
        "sha": "2e40b73a95df4fc15a383e915d72d76b7933e55d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e40b73a95df4fc15a383e915d72d76b7933e55d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6adf9bceebe43b7d706045655402ac22d7d2ac1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6adf9bceebe43b7d706045655402ac22d7d2ac1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6adf9bceebe43b7d706045655402ac22d7d2ac1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6adf9bceebe43b7d706045655402ac22d7d2ac1/comments",
    "author": {
      "login": "willyko",
      "id": 11524904,
      "node_id": "MDQ6VXNlcjExNTI0OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11524904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willyko",
      "html_url": "https://github.com/willyko",
      "followers_url": "https://api.github.com/users/willyko/followers",
      "following_url": "https://api.github.com/users/willyko/following{/other_user}",
      "gists_url": "https://api.github.com/users/willyko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willyko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willyko/subscriptions",
      "organizations_url": "https://api.github.com/users/willyko/orgs",
      "repos_url": "https://api.github.com/users/willyko/repos",
      "events_url": "https://api.github.com/users/willyko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willyko/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "willyko",
      "id": 11524904,
      "node_id": "MDQ6VXNlcjExNTI0OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11524904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willyko",
      "html_url": "https://github.com/willyko",
      "followers_url": "https://api.github.com/users/willyko/followers",
      "following_url": "https://api.github.com/users/willyko/following{/other_user}",
      "gists_url": "https://api.github.com/users/willyko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willyko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willyko/subscriptions",
      "organizations_url": "https://api.github.com/users/willyko/orgs",
      "repos_url": "https://api.github.com/users/willyko/repos",
      "events_url": "https://api.github.com/users/willyko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willyko/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "899afe98f963a5be7db18f4f964beaa2b144b213",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/899afe98f963a5be7db18f4f964beaa2b144b213",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/899afe98f963a5be7db18f4f964beaa2b144b213"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8cf8330d4cc189f6062031d4b182e1dfb4fe42a9",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6adf9bceebe43b7d706045655402ac22d7d2ac1/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6adf9bceebe43b7d706045655402ac22d7d2ac1/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=b6adf9bceebe43b7d706045655402ac22d7d2ac1",
        "patch": "@@ -18,6 +18,7 @@ extern bool heightSort(std::pair<CAddressUnspentKey, CAddressUnspentValue> a, st\n CMasternodeMan mnodeman;\n \n const std::string CMasternodeMan::SERIALIZATION_VERSION_STRING = \"CMasternodeMan-Version-7\";\n+const int CMasternodeMan::LAST_PAID_SCAN_BLOCKS = 100;\n \n struct CompareLastPaidBlock\n {"
      },
      {
        "sha": "d2f4a8657e49fe18b306da79bf000223092aa3d1",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6adf9bceebe43b7d706045655402ac22d7d2ac1/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6adf9bceebe43b7d706045655402ac22d7d2ac1/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=b6adf9bceebe43b7d706045655402ac22d7d2ac1",
        "patch": "@@ -29,7 +29,7 @@ class CMasternodeMan\n \n     static const int DSEG_UPDATE_SECONDS        = 3 * 60 * 60;\n \n-    static const int LAST_PAID_SCAN_BLOCKS      = 100;\n+    static const int LAST_PAID_SCAN_BLOCKS;\n \n     static const int MIN_POSE_PROTO_VERSION     = 70203;\n     static const int MAX_POSE_CONNECTIONS       = 10;"
      }
    ]
  },
  {
    "sha": "fb2be88e1b31ffa603a252c8a52991a2cc8d65fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjJiZTg4ZTFiMzFmZmE2MDNhMjUyYzhhNTI5OTFhMmNjOGQ2NWZk",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T20:34:38Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T20:34:38Z"
      },
      "message": "fix getblocksubsidy",
      "tree": {
        "sha": "8dd2d48a28298c6d5beb0028064771300e647956",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8dd2d48a28298c6d5beb0028064771300e647956"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb2be88e1b31ffa603a252c8a52991a2cc8d65fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb2be88e1b31ffa603a252c8a52991a2cc8d65fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb2be88e1b31ffa603a252c8a52991a2cc8d65fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb2be88e1b31ffa603a252c8a52991a2cc8d65fd/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6adf9bceebe43b7d706045655402ac22d7d2ac1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6adf9bceebe43b7d706045655402ac22d7d2ac1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6adf9bceebe43b7d706045655402ac22d7d2ac1"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "89b2caa994709e57bcf781e0951932548a07ec14",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb2be88e1b31ffa603a252c8a52991a2cc8d65fd/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb2be88e1b31ffa603a252c8a52991a2cc8d65fd/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=fb2be88e1b31ffa603a252c8a52991a2cc8d65fd",
        "patch": "@@ -535,8 +535,8 @@ CAmount CSuperblock::GetPaymentsLimit(int nBlockHeight)\n \t// SYSCOIN\n \t// some part of all blocks issued during the cycle goes to superblock, see GetBlockSubsidy\n \tCAmount nTotalRewardWithMasternodes;\n-\tCAmount nSuperblockPartOfSubsidy = GetBlockSubsidy(nBlockHeight, consensusParams, nTotalRewardWithMasternodes, true);\n-\tCAmount nPaymentsLimit = nSuperblockPartOfSubsidy * consensusParams.nSuperblockCycle;\n+\tconst CAmount &nSuperblockPartOfSubsidy = GetBlockSubsidy(nBlockHeight, consensusParams, nTotalRewardWithMasternodes, true);\n+\tconst CAmount &nPaymentsLimit = nSuperblockPartOfSubsidy * consensusParams.nSuperblockCycle;\n \tLogPrint(\"gobject\", \"CSuperblock::GetPaymentsLimit -- Valid superblock height %d, payments max %lld\\n\", nBlockHeight, nPaymentsLimit);\n \n "
      },
      {
        "sha": "7d340fb26d6eee79ebae2cd5c0d8c9651b8969c6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb2be88e1b31ffa603a252c8a52991a2cc8d65fd/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb2be88e1b31ffa603a252c8a52991a2cc8d65fd/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fb2be88e1b31ffa603a252c8a52991a2cc8d65fd",
        "patch": "@@ -1562,12 +1562,15 @@ CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams, C\n \t{\n \t\tstd::string chain = ChainNameFromCommandLine();\n \t\t// SYSCOIN 3 snapshot\n-\t\treturn 532150364 * COIN;\n+\t\tnTotalRewardWithMasternodes = 532150364 * COIN;\n+\t\treturn nTotalRewardWithMasternodes;\n \t}\n \tCAmount nSubsidy = 38.5 * COIN;\n \tint reductions = nHeight / consensusParams.nSubsidyHalvingInterval;\n-\tif (reductions >= 50)\n-\t\treturn 0;\n+\tif (reductions >= 50) {\n+\t\tnTotalRewardWithMasternodes = 0;\n+\t\treturn nTotalRewardWithMasternodes;\n+\t}\n \t// Subsidy is cut in half every 525600 blocks which will occur approximately every year.\n \t// yearly decline of production by 5% per year, projected ~888M coins max by year 2067+.\n \tfor (int i = 0; i < reductions; i++) {\n@@ -2568,7 +2571,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n \t// SYSCOIN\n \tCAmount nTotalRewardWithMasternodes;\n-\tCAmount blockReward = GetBlockSubsidy(pindex->nHeight, chainparams.GetConsensus(), nTotalRewardWithMasternodes);\n+\tconst CAmount &blockReward = GetBlockSubsidy(pindex->nHeight, chainparams.GetConsensus(), nTotalRewardWithMasternodes);\n \tif (!IsBlockPayeeValid(block.vtx[0], pindex->nHeight, nFees, blockReward, nTotalRewardWithMasternodes)) {\n \t\tmapRejectedBlocks.insert(make_pair(block.GetHash(), GetTime()));\n \t\treturn state.DoS(0, error(\"ConnectBlock(SYS): couldn't find masternode or superblock payments\"),"
      }
    ]
  },
  {
    "sha": "4e56d340873a93310e9f6b7eb1579a45f25961ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTU2ZDM0MDg3M2E5MzMxMGU5ZjZiN2ViMTU3OWE0NWYyNTk2MWFi",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T21:08:25Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T21:08:25Z"
      },
      "message": "fix pow",
      "tree": {
        "sha": "b3f15efbf5c4b073547623e9177675a9a6775fe3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3f15efbf5c4b073547623e9177675a9a6775fe3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e56d340873a93310e9f6b7eb1579a45f25961ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e56d340873a93310e9f6b7eb1579a45f25961ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e56d340873a93310e9f6b7eb1579a45f25961ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e56d340873a93310e9f6b7eb1579a45f25961ab/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb2be88e1b31ffa603a252c8a52991a2cc8d65fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb2be88e1b31ffa603a252c8a52991a2cc8d65fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb2be88e1b31ffa603a252c8a52991a2cc8d65fd"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 6,
      "deletions": 10
    },
    "files": [
      {
        "sha": "85439bb7c38fd5bf36f7ac142807c3cf190681ac",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e56d340873a93310e9f6b7eb1579a45f25961ab/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e56d340873a93310e9f6b7eb1579a45f25961ab/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=4e56d340873a93310e9f6b7eb1579a45f25961ab",
        "patch": "@@ -39,9 +39,9 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \tarith_uint256 PastDifficultyAverage;\n \tarith_uint256 PastDifficultyAveragePrev;\n \n-\t// SYSCOIN 300 needed for snapshot unit test\n-\tif (BlockLastSolved == NULL || BlockLastSolved->nHeight <= 600 ) {\n-\t\treturn UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n+\t// SYSCOIN 600 needed for snapshot unit test\n+\tif (BlockLastSolved == NULL || BlockLastSolved->nHeight <= 600) {\n+\t\treturn nProofOfWorkLimit.GetCompact();\n \t}\n \n \tfor (unsigned int i = 1; BlockReading && BlockReading->nHeight > 0; i++) {\n@@ -91,13 +91,9 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n     arith_uint256 bnTarget;\n \n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n-\t// SYSCOIN\n-\tarith_uint256 nProofOfWorkLimit = UintToArith256(params.powLimit);\n-\tif(chainActive.Height() <= 600)\n-\t\tnProofOfWorkLimit = UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit);\n-    // Check range\n-    if (fNegative || bnTarget == 0 || fOverflow || bnTarget > nProofOfWorkLimit)\n-        return error(\"CheckProofOfWork(): nBits below minimum work\");\n+\t// Check range\n+\tif (fNegative || bnTarget == 0 || fOverflow || bnTarget > UintToArith256(params.powLimit))\n+\t\treturn false;\n \n     // Check proof of work matches claimed amount\n     if (UintToArith256(hash) > bnTarget)"
      }
    ]
  },
  {
    "sha": "222d3ee1bd95f490cb708d009a75248171390479",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjJkM2VlMWJkOTVmNDkwY2I3MDhkMDA5YTc1MjQ4MTcxMzkwNDc5",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T21:15:42Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T21:15:42Z"
      },
      "message": "fix checkpow",
      "tree": {
        "sha": "fbacb2abdc638ff462315a87471e23095f27990d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbacb2abdc638ff462315a87471e23095f27990d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/222d3ee1bd95f490cb708d009a75248171390479",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/222d3ee1bd95f490cb708d009a75248171390479",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/222d3ee1bd95f490cb708d009a75248171390479",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/222d3ee1bd95f490cb708d009a75248171390479/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e56d340873a93310e9f6b7eb1579a45f25961ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e56d340873a93310e9f6b7eb1579a45f25961ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e56d340873a93310e9f6b7eb1579a45f25961ab"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 8,
      "deletions": 5
    },
    "files": [
      {
        "sha": "1a58f01a9fc49508aa9e63e5fa38c2c314455da3",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/222d3ee1bd95f490cb708d009a75248171390479/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/222d3ee1bd95f490cb708d009a75248171390479/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=222d3ee1bd95f490cb708d009a75248171390479",
        "patch": "@@ -40,8 +40,8 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \tarith_uint256 PastDifficultyAveragePrev;\n \n \t// SYSCOIN 600 needed for snapshot unit test\n-\tif (BlockLastSolved == NULL || BlockLastSolved->nHeight <= 600) {\n-\t\treturn nProofOfWorkLimit.GetCompact();\n+\tif (BlockLastSolved == NULL || BlockLastSolved->nHeight <= 600 ) {\n+\t\treturn UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n \t}\n \n \tfor (unsigned int i = 1; BlockReading && BlockReading->nHeight > 0; i++) {\n@@ -86,14 +86,17 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n {\n+\tif (chainActive.Height() <= 600)\n+\t\treturn true;\n     bool fNegative;\n     bool fOverflow;\n     arith_uint256 bnTarget;\n \n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n-\t// Check range\n-\tif (fNegative || bnTarget == 0 || fOverflow || bnTarget > UintToArith256(params.powLimit))\n-\t\treturn false;\n+\tarith_uint256 nProofOfWorkLimit = UintToArith256(params.powLimit);\n+    // Check range\n+    if (fNegative || bnTarget == 0 || fOverflow || bnTarget > nProofOfWorkLimit)\n+        return error(\"CheckProofOfWork(): nBits below minimum work\");\n \n     // Check proof of work matches claimed amount\n     if (UintToArith256(hash) > bnTarget)"
      }
    ]
  },
  {
    "sha": "5c1a012a47b12e5681a1d1d24a43f9d22eda7c77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzFhMDEyYTQ3YjEyZTU2ODFhMWQxZDI0YTQzZjlkMjJlZGE3Yzc3",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T21:31:47Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T21:31:47Z"
      },
      "message": "allow easy up to first diff change",
      "tree": {
        "sha": "453819ca22df8a65d8ed04d0fc048cc1fab228e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/453819ca22df8a65d8ed04d0fc048cc1fab228e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c1a012a47b12e5681a1d1d24a43f9d22eda7c77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c1a012a47b12e5681a1d1d24a43f9d22eda7c77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c1a012a47b12e5681a1d1d24a43f9d22eda7c77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c1a012a47b12e5681a1d1d24a43f9d22eda7c77/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "222d3ee1bd95f490cb708d009a75248171390479",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/222d3ee1bd95f490cb708d009a75248171390479",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/222d3ee1bd95f490cb708d009a75248171390479"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "251ab675a5b5f865c71ed3273a23f6ff9d54a41e",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c1a012a47b12e5681a1d1d24a43f9d22eda7c77/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c1a012a47b12e5681a1d1d24a43f9d22eda7c77/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=5c1a012a47b12e5681a1d1d24a43f9d22eda7c77",
        "patch": "@@ -40,7 +40,7 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \tarith_uint256 PastDifficultyAveragePrev;\n \n \t// SYSCOIN 600 needed for snapshot unit test\n-\tif (BlockLastSolved == NULL || BlockLastSolved->nHeight <= 600 ) {\n+\tif (BlockLastSolved == NULL || BlockLastSolved->nHeight <= params.DifficultyAdjustmentInterval()-1) {\n \t\treturn UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n \t}\n \n@@ -86,7 +86,7 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n {\n-\tif (chainActive.Height() <= 600)\n+\tif (chainActive.Height() <= params.DifficultyAdjustmentInterval()-1)\n \t\treturn true;\n     bool fNegative;\n     bool fOverflow;"
      }
    ]
  },
  {
    "sha": "246562398bb8de3cb22db418c450854cf651b3ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDY1NjIzOThiYjhkZTNjYjIyZGI0MThjNDUwODU0Y2Y2NTFiM2Fi",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T21:39:53Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T21:39:53Z"
      },
      "message": "fix pow",
      "tree": {
        "sha": "b2ab99358a188a932a076e1a5559896a8e838b06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2ab99358a188a932a076e1a5559896a8e838b06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/246562398bb8de3cb22db418c450854cf651b3ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/246562398bb8de3cb22db418c450854cf651b3ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/246562398bb8de3cb22db418c450854cf651b3ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/246562398bb8de3cb22db418c450854cf651b3ab/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c1a012a47b12e5681a1d1d24a43f9d22eda7c77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c1a012a47b12e5681a1d1d24a43f9d22eda7c77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c1a012a47b12e5681a1d1d24a43f9d22eda7c77"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "33b0b353e9502337ebd747f4435e349144660ed3",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/246562398bb8de3cb22db418c450854cf651b3ab/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/246562398bb8de3cb22db418c450854cf651b3ab/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=246562398bb8de3cb22db418c450854cf651b3ab",
        "patch": "@@ -40,7 +40,7 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \tarith_uint256 PastDifficultyAveragePrev;\n \n \t// SYSCOIN 600 needed for snapshot unit test\n-\tif (BlockLastSolved == NULL || BlockLastSolved->nHeight <= params.DifficultyAdjustmentInterval()-1) {\n+\tif (BlockLastSolved == NULL || BlockLastSolved->nHeight < params.DifficultyAdjustmentInterval()-1) {\n \t\treturn UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n \t}\n \n@@ -86,7 +86,7 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n {\n-\tif (chainActive.Height() <= params.DifficultyAdjustmentInterval()-1)\n+\tif (chainActive.Height() <= params.DifficultyAdjustmentInterval())\n \t\treturn true;\n     bool fNegative;\n     bool fOverflow;"
      }
    ]
  },
  {
    "sha": "7cd6388340f554aa14f84ec1ca4fccdc6ce094ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2Q2Mzg4MzQwZjU1NGFhMTRmODRlYzFjYTRmY2NkYzZjZTA5NGVm",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T23:03:22Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T23:03:22Z"
      },
      "message": "pw fix",
      "tree": {
        "sha": "4dda4d5b60869bde915919aef0a34361e3861623",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4dda4d5b60869bde915919aef0a34361e3861623"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cd6388340f554aa14f84ec1ca4fccdc6ce094ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cd6388340f554aa14f84ec1ca4fccdc6ce094ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cd6388340f554aa14f84ec1ca4fccdc6ce094ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cd6388340f554aa14f84ec1ca4fccdc6ce094ef/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "246562398bb8de3cb22db418c450854cf651b3ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/246562398bb8de3cb22db418c450854cf651b3ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/246562398bb8de3cb22db418c450854cf651b3ab"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 2,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c7afdaaae54dbc2344d70fae4bff2adc9b825955",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cd6388340f554aa14f84ec1ca4fccdc6ce094ef/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cd6388340f554aa14f84ec1ca4fccdc6ce094ef/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=7cd6388340f554aa14f84ec1ca4fccdc6ce094ef",
        "patch": "@@ -39,9 +39,8 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \tarith_uint256 PastDifficultyAverage;\n \tarith_uint256 PastDifficultyAveragePrev;\n \n-\t// SYSCOIN 600 needed for snapshot unit test\n-\tif (BlockLastSolved == NULL || BlockLastSolved->nHeight < params.DifficultyAdjustmentInterval()-1) {\n-\t\treturn UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n+\tif (BlockLastSolved == NULL) {\n+\t\treturn nProofOfWorkLimit.GetCompact();\n \t}\n \n \tfor (unsigned int i = 1; BlockReading && BlockReading->nHeight > 0; i++) {\n@@ -86,8 +85,6 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n {\n-\tif (chainActive.Height() <= params.DifficultyAdjustmentInterval())\n-\t\treturn true;\n     bool fNegative;\n     bool fOverflow;\n     arith_uint256 bnTarget;"
      }
    ]
  },
  {
    "sha": "8df13f47ade06970c7bc1cd7d44a80e9c3bc31fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGYxM2Y0N2FkZTA2OTcwYzdiYzFjZDdkNDRhODBlOWMzYmMzMWZk",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T23:22:39Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T23:22:39Z"
      },
      "message": "fix div by 0",
      "tree": {
        "sha": "fa01e70ee2040a0c5174dde9beaa1b8ccf53aeb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa01e70ee2040a0c5174dde9beaa1b8ccf53aeb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8df13f47ade06970c7bc1cd7d44a80e9c3bc31fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8df13f47ade06970c7bc1cd7d44a80e9c3bc31fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8df13f47ade06970c7bc1cd7d44a80e9c3bc31fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8df13f47ade06970c7bc1cd7d44a80e9c3bc31fd/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7cd6388340f554aa14f84ec1ca4fccdc6ce094ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cd6388340f554aa14f84ec1ca4fccdc6ce094ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cd6388340f554aa14f84ec1ca4fccdc6ce094ef"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "599ca51f5eb5f1d70cc47cd6a6f55b6032ed8ab3",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8df13f47ade06970c7bc1cd7d44a80e9c3bc31fd/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8df13f47ade06970c7bc1cd7d44a80e9c3bc31fd/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=8df13f47ade06970c7bc1cd7d44a80e9c3bc31fd",
        "patch": "@@ -39,8 +39,8 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \tarith_uint256 PastDifficultyAverage;\n \tarith_uint256 PastDifficultyAveragePrev;\n \n-\tif (BlockLastSolved == NULL) {\n-\t\treturn nProofOfWorkLimit.GetCompact();\n+\tif (BlockLastSolved == NULL || BlockLastSolved->nHeight == 0) {\n+\t\treturn UintToArith256(params.powLimit).GetCompact();\n \t}\n \n \tfor (unsigned int i = 1; BlockReading && BlockReading->nHeight > 0; i++) {"
      }
    ]
  },
  {
    "sha": "96bab20c8c9ee247c80933aa2559e8bce20ec14f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmJhYjIwYzhjOWVlMjQ3YzgwOTMzYWEyNTU5ZThiY2UyMGVjMTRm",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T23:35:13Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-17T23:35:13Z"
      },
      "message": "1k tx per block",
      "tree": {
        "sha": "360accd26bc10cef389be0cde7e41a92ce9ddd1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/360accd26bc10cef389be0cde7e41a92ce9ddd1e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96bab20c8c9ee247c80933aa2559e8bce20ec14f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96bab20c8c9ee247c80933aa2559e8bce20ec14f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96bab20c8c9ee247c80933aa2559e8bce20ec14f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96bab20c8c9ee247c80933aa2559e8bce20ec14f/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8df13f47ade06970c7bc1cd7d44a80e9c3bc31fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8df13f47ade06970c7bc1cd7d44a80e9c3bc31fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8df13f47ade06970c7bc1cd7d44a80e9c3bc31fd"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "8981de07512910144533dc4da34b25ab3c8f4a0a",
        "filename": "src/test/syscoin_snapshot_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96bab20c8c9ee247c80933aa2559e8bce20ec14f/src/test/syscoin_snapshot_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96bab20c8c9ee247c80933aa2559e8bce20ec14f/src/test/syscoin_snapshot_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_snapshot_tests.cpp?ref=96bab20c8c9ee247c80933aa2559e8bce20ec14f",
        "patch": "@@ -23,11 +23,11 @@ void SendSnapShotPayment(const std::string &strSend, const std::string &strSendA\n \tstd::string strSendMany = \"sendmany \\\"\\\" {\" + strSend + \"}\";\n \tBOOST_CHECK_THROW(CallRPC(\"mainnet1\", strSendMany, false), runtime_error);\n \n-\tstring sendString = \"sendtoaddress \" + strSendAddress + \" \" + \"10\";\n-\tBOOST_CHECK_THROW(CallRPC(\"mainnet1\", sendString, false), runtime_error);\n+\tfor (int i = 0; i < 200; i++) {\n+\t\tstring sendString = \"sendtoaddress \" + strSendAddress + \" \" + \"10\";\n+\t\tBOOST_CHECK_THROW(CallRPC(\"mainnet1\", sendString, false), runtime_error);\n+\t}\n \n-\tsendString = \"sendtoaddress \" + strSendAddress + \" \" + \"10\";\n-\tBOOST_CHECK_THROW(CallRPC(\"mainnet1\", sendString, false), runtime_error);\n }\n void GenerateSnapShot(const std::vector<PaymentAmount> &paymentAmounts)\n {\n@@ -39,7 +39,7 @@ void GenerateSnapShot(const std::vector<PaymentAmount> &paymentAmounts)\n \tstring newaddress = r.get_str();\n \tnewaddress.erase(std::remove(newaddress.begin(), newaddress.end(), '\\n'), newaddress.end());\n \n-\tint numberOfTxPerBlock = 250;\n+\tint numberOfTxPerBlock = 1000;\n \tint totalTx = 0;\n \tdouble nTotal  =0;\n \tstd::string sendManyString = \"\";"
      }
    ]
  },
  {
    "sha": "7f586a960b27a06d8ed43b2fbbac4a330c500df9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjU4NmE5NjBiMjdhMDZkOGVkNDNiMmZiYmFjNGEzMzBjNTAwZGY5",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T00:20:30Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T00:20:30Z"
      },
      "message": "try to fix diff algo",
      "tree": {
        "sha": "94adcd4a919f81365122be0410f5c87faa138753",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94adcd4a919f81365122be0410f5c87faa138753"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f586a960b27a06d8ed43b2fbbac4a330c500df9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f586a960b27a06d8ed43b2fbbac4a330c500df9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f586a960b27a06d8ed43b2fbbac4a330c500df9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f586a960b27a06d8ed43b2fbbac4a330c500df9/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96bab20c8c9ee247c80933aa2559e8bce20ec14f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96bab20c8c9ee247c80933aa2559e8bce20ec14f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96bab20c8c9ee247c80933aa2559e8bce20ec14f"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 8,
      "deletions": 5
    },
    "files": [
      {
        "sha": "9a498be8d823b495a89841079bfce76dc4580280",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f586a960b27a06d8ed43b2fbbac4a330c500df9/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f586a960b27a06d8ed43b2fbbac4a330c500df9/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=7f586a960b27a06d8ed43b2fbbac4a330c500df9",
        "patch": "@@ -18,6 +18,9 @@\n #include \"validation.h\"\n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n {\n+\tif (pindexLast->nHeight + 1 < 600) {\n+\t\treturn UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n+\t}\n \treturn CalculateNextWorkRequired(pindexLast, 0, params);\n }\n // SYSCOIN DGW diff algo"
      },
      {
        "sha": "316ce352733f69ef4b8ae599beeb161a70dad694",
        "filename": "src/test/syscoin_snapshot_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f586a960b27a06d8ed43b2fbbac4a330c500df9/src/test/syscoin_snapshot_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f586a960b27a06d8ed43b2fbbac4a330c500df9/src/test/syscoin_snapshot_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_snapshot_tests.cpp?ref=7f586a960b27a06d8ed43b2fbbac4a330c500df9",
        "patch": "@@ -23,11 +23,11 @@ void SendSnapShotPayment(const std::string &strSend, const std::string &strSendA\n \tstd::string strSendMany = \"sendmany \\\"\\\" {\" + strSend + \"}\";\n \tBOOST_CHECK_THROW(CallRPC(\"mainnet1\", strSendMany, false), runtime_error);\n \n-\tfor (int i = 0; i < 200; i++) {\n-\t\tstring sendString = \"sendtoaddress \" + strSendAddress + \" \" + \"10\";\n-\t\tBOOST_CHECK_THROW(CallRPC(\"mainnet1\", sendString, false), runtime_error);\n-\t}\n+\tstring sendString = \"sendtoaddress \" + strSendAddress + \" \" + \"10\";\n+\tBOOST_CHECK_THROW(CallRPC(\"mainnet1\", sendString, false), runtime_error);\n \n+\tsendString = \"sendtoaddress \" + strSendAddress + \" \" + \"10\";\n+\tBOOST_CHECK_THROW(CallRPC(\"mainnet1\", sendString, false), runtime_error);\n }\n void GenerateSnapShot(const std::vector<PaymentAmount> &paymentAmounts)\n {\n@@ -39,7 +39,7 @@ void GenerateSnapShot(const std::vector<PaymentAmount> &paymentAmounts)\n \tstring newaddress = r.get_str();\n \tnewaddress.erase(std::remove(newaddress.begin(), newaddress.end(), '\\n'), newaddress.end());\n \n-\tint numberOfTxPerBlock = 1000;\n+\tint numberOfTxPerBlock = 250;\n \tint totalTx = 0;\n \tdouble nTotal  =0;\n \tstd::string sendManyString = \"\";"
      }
    ]
  },
  {
    "sha": "bc673b70ab5fce9dec3e49c4e5b77739028ba1da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzY3M2I3MGFiNWZjZTlkZWMzZTQ5YzRlNWI3NzczOTAyOGJhMWRh",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T00:35:24Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T00:35:24Z"
      },
      "message": "fix min compact bits",
      "tree": {
        "sha": "d9912464749877a373777f861c92ba8b3faf910b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9912464749877a373777f861c92ba8b3faf910b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc673b70ab5fce9dec3e49c4e5b77739028ba1da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc673b70ab5fce9dec3e49c4e5b77739028ba1da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc673b70ab5fce9dec3e49c4e5b77739028ba1da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc673b70ab5fce9dec3e49c4e5b77739028ba1da/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f586a960b27a06d8ed43b2fbbac4a330c500df9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f586a960b27a06d8ed43b2fbbac4a330c500df9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f586a960b27a06d8ed43b2fbbac4a330c500df9"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c0a6eb2c5fe83483aa9c8ce5cde29b16390aa73f",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc673b70ab5fce9dec3e49c4e5b77739028ba1da/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc673b70ab5fce9dec3e49c4e5b77739028ba1da/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=bc673b70ab5fce9dec3e49c4e5b77739028ba1da",
        "patch": "@@ -18,9 +18,6 @@\n #include \"validation.h\"\n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n {\n-\tif (pindexLast->nHeight + 1 < 600) {\n-\t\treturn UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n-\t}\n \treturn CalculateNextWorkRequired(pindexLast, 0, params);\n }\n // SYSCOIN DGW diff algo\n@@ -42,8 +39,9 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \tarith_uint256 PastDifficultyAverage;\n \tarith_uint256 PastDifficultyAveragePrev;\n \n-\tif (BlockLastSolved == NULL || BlockLastSolved->nHeight == 0) {\n-\t\treturn UintToArith256(params.powLimit).GetCompact();\n+\t// SYSCOIN 600 needed for snapshot unit test\n+\tif (BlockLastSolved == NULL || (BlockLastSolved->nHeight + 1) < 600 ) {\n+\t\treturn UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n \t}\n \n \tfor (unsigned int i = 1; BlockReading && BlockReading->nHeight > 0; i++) {\n@@ -93,7 +91,10 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n     arith_uint256 bnTarget;\n \n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n+\t// SYSCOIN\n \tarith_uint256 nProofOfWorkLimit = UintToArith256(params.powLimit);\n+\t//if(chainActive.Height() <= 600)\n+\t//\tnProofOfWorkLimit = UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit);\n     // Check range\n     if (fNegative || bnTarget == 0 || fOverflow || bnTarget > nProofOfWorkLimit)\n         return error(\"CheckProofOfWork(): nBits below minimum work\");"
      }
    ]
  },
  {
    "sha": "5b3785dc12867650f82f02ece9ba76a9147a36f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjM3ODVkYzEyODY3NjUwZjgyZjAyZWNlOWJhNzZhOTE0N2EzNmY3",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T00:39:46Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T00:39:46Z"
      },
      "message": "fix limit",
      "tree": {
        "sha": "a9630e69721ff91a92097bc5fc05d71ebe57d13a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9630e69721ff91a92097bc5fc05d71ebe57d13a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b3785dc12867650f82f02ece9ba76a9147a36f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b3785dc12867650f82f02ece9ba76a9147a36f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b3785dc12867650f82f02ece9ba76a9147a36f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b3785dc12867650f82f02ece9ba76a9147a36f7/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc673b70ab5fce9dec3e49c4e5b77739028ba1da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc673b70ab5fce9dec3e49c4e5b77739028ba1da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc673b70ab5fce9dec3e49c4e5b77739028ba1da"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "eff7dea9e33f143f7f8f6de927f887539c1b9f4f",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b3785dc12867650f82f02ece9ba76a9147a36f7/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b3785dc12867650f82f02ece9ba76a9147a36f7/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=5b3785dc12867650f82f02ece9ba76a9147a36f7",
        "patch": "@@ -93,8 +93,8 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \t// SYSCOIN\n \tarith_uint256 nProofOfWorkLimit = UintToArith256(params.powLimit);\n-\t//if(chainActive.Height() <= 600)\n-\t//\tnProofOfWorkLimit = UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit);\n+\tif(chainActive.Height() < 600)\n+\t\tnProofOfWorkLimit = UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit);\n     // Check range\n     if (fNegative || bnTarget == 0 || fOverflow || bnTarget > nProofOfWorkLimit)\n         return error(\"CheckProofOfWork(): nBits below minimum work\");"
      }
    ]
  },
  {
    "sha": "e5bd2fe8aadb1211f27d0de69c25db1382ea14ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNWJkMmZlOGFhZGIxMjExZjI3ZDBkZTY5YzI1ZGIxMzgyZWExNGVl",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T00:50:31Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T00:50:31Z"
      },
      "message": "Revert \"fix limit\"\n\nThis reverts commit 5b3785dc12867650f82f02ece9ba76a9147a36f7.",
      "tree": {
        "sha": "d9912464749877a373777f861c92ba8b3faf910b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9912464749877a373777f861c92ba8b3faf910b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5bd2fe8aadb1211f27d0de69c25db1382ea14ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5bd2fe8aadb1211f27d0de69c25db1382ea14ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5bd2fe8aadb1211f27d0de69c25db1382ea14ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5bd2fe8aadb1211f27d0de69c25db1382ea14ee/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b3785dc12867650f82f02ece9ba76a9147a36f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b3785dc12867650f82f02ece9ba76a9147a36f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b3785dc12867650f82f02ece9ba76a9147a36f7"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c0a6eb2c5fe83483aa9c8ce5cde29b16390aa73f",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5bd2fe8aadb1211f27d0de69c25db1382ea14ee/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5bd2fe8aadb1211f27d0de69c25db1382ea14ee/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=e5bd2fe8aadb1211f27d0de69c25db1382ea14ee",
        "patch": "@@ -93,8 +93,8 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \t// SYSCOIN\n \tarith_uint256 nProofOfWorkLimit = UintToArith256(params.powLimit);\n-\tif(chainActive.Height() < 600)\n-\t\tnProofOfWorkLimit = UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit);\n+\t//if(chainActive.Height() <= 600)\n+\t//\tnProofOfWorkLimit = UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit);\n     // Check range\n     if (fNegative || bnTarget == 0 || fOverflow || bnTarget > nProofOfWorkLimit)\n         return error(\"CheckProofOfWork(): nBits below minimum work\");"
      }
    ]
  },
  {
    "sha": "4d52aa9e86b4797d06f79da6d6689c101a6de5e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDUyYWE5ZTg2YjQ3OTdkMDZmNzlkYTZkNjY4OWMxMDFhNmRlNWU0",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T00:50:34Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T00:50:34Z"
      },
      "message": "Revert \"fix min compact bits\"\n\nThis reverts commit bc673b70ab5fce9dec3e49c4e5b77739028ba1da.",
      "tree": {
        "sha": "94adcd4a919f81365122be0410f5c87faa138753",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94adcd4a919f81365122be0410f5c87faa138753"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d52aa9e86b4797d06f79da6d6689c101a6de5e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d52aa9e86b4797d06f79da6d6689c101a6de5e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d52aa9e86b4797d06f79da6d6689c101a6de5e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d52aa9e86b4797d06f79da6d6689c101a6de5e4/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5bd2fe8aadb1211f27d0de69c25db1382ea14ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5bd2fe8aadb1211f27d0de69c25db1382ea14ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5bd2fe8aadb1211f27d0de69c25db1382ea14ee"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "9a498be8d823b495a89841079bfce76dc4580280",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d52aa9e86b4797d06f79da6d6689c101a6de5e4/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d52aa9e86b4797d06f79da6d6689c101a6de5e4/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=4d52aa9e86b4797d06f79da6d6689c101a6de5e4",
        "patch": "@@ -18,6 +18,9 @@\n #include \"validation.h\"\n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n {\n+\tif (pindexLast->nHeight + 1 < 600) {\n+\t\treturn UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n+\t}\n \treturn CalculateNextWorkRequired(pindexLast, 0, params);\n }\n // SYSCOIN DGW diff algo\n@@ -39,9 +42,8 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \tarith_uint256 PastDifficultyAverage;\n \tarith_uint256 PastDifficultyAveragePrev;\n \n-\t// SYSCOIN 600 needed for snapshot unit test\n-\tif (BlockLastSolved == NULL || (BlockLastSolved->nHeight + 1) < 600 ) {\n-\t\treturn UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n+\tif (BlockLastSolved == NULL || BlockLastSolved->nHeight == 0) {\n+\t\treturn UintToArith256(params.powLimit).GetCompact();\n \t}\n \n \tfor (unsigned int i = 1; BlockReading && BlockReading->nHeight > 0; i++) {\n@@ -91,10 +93,7 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n     arith_uint256 bnTarget;\n \n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n-\t// SYSCOIN\n \tarith_uint256 nProofOfWorkLimit = UintToArith256(params.powLimit);\n-\t//if(chainActive.Height() <= 600)\n-\t//\tnProofOfWorkLimit = UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit);\n     // Check range\n     if (fNegative || bnTarget == 0 || fOverflow || bnTarget > nProofOfWorkLimit)\n         return error(\"CheckProofOfWork(): nBits below minimum work\");"
      }
    ]
  },
  {
    "sha": "917ef98ae1880a10a8339da1caff34f9fc7d685b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTdlZjk4YWUxODgwYTEwYTgzMzlkYTFjYWZmMzRmOWZjN2Q2ODVi",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T00:51:25Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T00:51:25Z"
      },
      "message": "remove min diff check",
      "tree": {
        "sha": "fa01e70ee2040a0c5174dde9beaa1b8ccf53aeb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa01e70ee2040a0c5174dde9beaa1b8ccf53aeb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/917ef98ae1880a10a8339da1caff34f9fc7d685b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/917ef98ae1880a10a8339da1caff34f9fc7d685b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/917ef98ae1880a10a8339da1caff34f9fc7d685b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/917ef98ae1880a10a8339da1caff34f9fc7d685b/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d52aa9e86b4797d06f79da6d6689c101a6de5e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d52aa9e86b4797d06f79da6d6689c101a6de5e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d52aa9e86b4797d06f79da6d6689c101a6de5e4"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "599ca51f5eb5f1d70cc47cd6a6f55b6032ed8ab3",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/917ef98ae1880a10a8339da1caff34f9fc7d685b/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/917ef98ae1880a10a8339da1caff34f9fc7d685b/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=917ef98ae1880a10a8339da1caff34f9fc7d685b",
        "patch": "@@ -18,9 +18,6 @@\n #include \"validation.h\"\n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n {\n-\tif (pindexLast->nHeight + 1 < 600) {\n-\t\treturn UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n-\t}\n \treturn CalculateNextWorkRequired(pindexLast, 0, params);\n }\n // SYSCOIN DGW diff algo"
      }
    ]
  },
  {
    "sha": "a7f0faedb80b261d40b96310ba7d597cda257d37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2YwZmFlZGI4MGIyNjFkNDBiOTYzMTBiYTdkNTk3Y2RhMjU3ZDM3",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T05:21:43Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T05:21:43Z"
      },
      "message": "fix checkpow",
      "tree": {
        "sha": "93a09c5ea8daf01a5cf5cb0939c9c262c3473c2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93a09c5ea8daf01a5cf5cb0939c9c262c3473c2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7f0faedb80b261d40b96310ba7d597cda257d37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7f0faedb80b261d40b96310ba7d597cda257d37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7f0faedb80b261d40b96310ba7d597cda257d37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7f0faedb80b261d40b96310ba7d597cda257d37/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "917ef98ae1880a10a8339da1caff34f9fc7d685b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/917ef98ae1880a10a8339da1caff34f9fc7d685b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/917ef98ae1880a10a8339da1caff34f9fc7d685b"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "919384884ea6d363cc64a639f4d7e99906683002",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7f0faedb80b261d40b96310ba7d597cda257d37/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7f0faedb80b261d40b96310ba7d597cda257d37/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=a7f0faedb80b261d40b96310ba7d597cda257d37",
        "patch": "@@ -39,9 +39,8 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \tarith_uint256 PastDifficultyAverage;\n \tarith_uint256 PastDifficultyAveragePrev;\n \n-\tif (BlockLastSolved == NULL || BlockLastSolved->nHeight == 0) {\n-\t\treturn UintToArith256(params.powLimit).GetCompact();\n-\t}\n+\tif (BlockLastSolved == NULL || BlockLastSolved->nHeight <= 600) {\n+\t\treturn UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n \n \tfor (unsigned int i = 1; BlockReading && BlockReading->nHeight > 0; i++) {\n \t\tif (PastBlocksMax > 0 && i > PastBlocksMax) { break; }\n@@ -88,7 +87,9 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n     bool fNegative;\n     bool fOverflow;\n     arith_uint256 bnTarget;\n-\n+\tstatic const unsigned int regTestBits = UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n+\tif (ChainNameFromCommandLine() != CBaseChainParams::REGTEST && nBits == regTestBits)\n+\t\treturn true;\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \tarith_uint256 nProofOfWorkLimit = UintToArith256(params.powLimit);\n     // Check range"
      }
    ]
  },
  {
    "sha": "73ee823995b2fb0d33b8945752316d20697130ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3M2VlODIzOTk1YjJmYjBkMzNiODk0NTc1MjMxNmQyMDY5NzEzMGVm",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T05:35:34Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T05:35:34Z"
      },
      "message": "compile",
      "tree": {
        "sha": "7ea5303e8ca53529abdcc9c0ac54e6ce94db7ebc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ea5303e8ca53529abdcc9c0ac54e6ce94db7ebc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73ee823995b2fb0d33b8945752316d20697130ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73ee823995b2fb0d33b8945752316d20697130ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73ee823995b2fb0d33b8945752316d20697130ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73ee823995b2fb0d33b8945752316d20697130ef/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7f0faedb80b261d40b96310ba7d597cda257d37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7f0faedb80b261d40b96310ba7d597cda257d37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7f0faedb80b261d40b96310ba7d597cda257d37"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5c77f7af155a0bc9461f83f1a6d397545b53c54b",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73ee823995b2fb0d33b8945752316d20697130ef/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73ee823995b2fb0d33b8945752316d20697130ef/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=73ee823995b2fb0d33b8945752316d20697130ef",
        "patch": "@@ -87,7 +87,7 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n     bool fNegative;\n     bool fOverflow;\n     arith_uint256 bnTarget;\n-\tstatic const unsigned int regTestBits = UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n+\tstatic unsigned int regTestBits = UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n \tif (ChainNameFromCommandLine() != CBaseChainParams::REGTEST && nBits == regTestBits)\n \t\treturn true;\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);"
      }
    ]
  },
  {
    "sha": "64fb9d755b2db1db8676870d89fb5308fade06cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGZiOWQ3NTViMmRiMWRiODY3Njg3MGQ4OWZiNTMwOGZhZGUwNmNm",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T05:39:04Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T05:39:04Z"
      },
      "message": "move static up",
      "tree": {
        "sha": "a2166beb5c107c19179c9130ef2690fa3951655a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2166beb5c107c19179c9130ef2690fa3951655a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64fb9d755b2db1db8676870d89fb5308fade06cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64fb9d755b2db1db8676870d89fb5308fade06cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64fb9d755b2db1db8676870d89fb5308fade06cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64fb9d755b2db1db8676870d89fb5308fade06cf/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73ee823995b2fb0d33b8945752316d20697130ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73ee823995b2fb0d33b8945752316d20697130ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73ee823995b2fb0d33b8945752316d20697130ef"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e42a36bb4c4e4dff5e5dbd0e4e1168cc708fb77c",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64fb9d755b2db1db8676870d89fb5308fade06cf/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64fb9d755b2db1db8676870d89fb5308fade06cf/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=64fb9d755b2db1db8676870d89fb5308fade06cf",
        "patch": "@@ -84,10 +84,10 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n {\n+\tstatic unsigned int regTestBits = UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n     bool fNegative;\n     bool fOverflow;\n     arith_uint256 bnTarget;\n-\tstatic unsigned int regTestBits = UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n \tif (ChainNameFromCommandLine() != CBaseChainParams::REGTEST && nBits == regTestBits)\n \t\treturn true;\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);"
      }
    ]
  },
  {
    "sha": "af7bb6602d6e71ba80d80deb8b3e48ffe8a92544",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjdiYjY2MDJkNmU3MWJhODBkODBkZWI4YjNlNDhmZmU4YTkyNTQ0",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T19:05:48Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T19:05:48Z"
      },
      "message": "compile",
      "tree": {
        "sha": "2c7c2753037ed2db8ef3998987d9f0241a86a3a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c7c2753037ed2db8ef3998987d9f0241a86a3a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af7bb6602d6e71ba80d80deb8b3e48ffe8a92544",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af7bb6602d6e71ba80d80deb8b3e48ffe8a92544",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af7bb6602d6e71ba80d80deb8b3e48ffe8a92544",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af7bb6602d6e71ba80d80deb8b3e48ffe8a92544/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64fb9d755b2db1db8676870d89fb5308fade06cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64fb9d755b2db1db8676870d89fb5308fade06cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64fb9d755b2db1db8676870d89fb5308fade06cf"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "db13660e1cbc3884c196bfcb27dd2340728a2773",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af7bb6602d6e71ba80d80deb8b3e48ffe8a92544/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af7bb6602d6e71ba80d80deb8b3e48ffe8a92544/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=af7bb6602d6e71ba80d80deb8b3e48ffe8a92544",
        "patch": "@@ -84,11 +84,11 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n {\n-\tstatic unsigned int regTestBits = UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n+\t//static unsigned int regTestBits = UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit.GetCompact();\n     bool fNegative;\n     bool fOverflow;\n     arith_uint256 bnTarget;\n-\tif (ChainNameFromCommandLine() != CBaseChainParams::REGTEST && nBits == regTestBits)\n+\tif (Params().NetworkIDString() != CBaseChainParams::REGTEST)\n \t\treturn true;\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \tarith_uint256 nProofOfWorkLimit = UintToArith256(params.powLimit);"
      }
    ]
  },
  {
    "sha": "9a4a573d8b4c195bbd96550bf47f919746a47663",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTRhNTczZDhiNGMxOTViYmQ5NjU1MGJmNDdmOTE5NzQ2YTQ3NjYz",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T19:08:14Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T19:08:14Z"
      },
      "message": "compile",
      "tree": {
        "sha": "4032b4bff0b35ed75e9ac2aeb1d3f3392e77878a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4032b4bff0b35ed75e9ac2aeb1d3f3392e77878a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a4a573d8b4c195bbd96550bf47f919746a47663",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a4a573d8b4c195bbd96550bf47f919746a47663",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a4a573d8b4c195bbd96550bf47f919746a47663",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a4a573d8b4c195bbd96550bf47f919746a47663/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af7bb6602d6e71ba80d80deb8b3e48ffe8a92544",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af7bb6602d6e71ba80d80deb8b3e48ffe8a92544",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af7bb6602d6e71ba80d80deb8b3e48ffe8a92544"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8bcabbfd65f8e92170a658d3b3a7032de2486003",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a4a573d8b4c195bbd96550bf47f919746a47663/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a4a573d8b4c195bbd96550bf47f919746a47663/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=9a4a573d8b4c195bbd96550bf47f919746a47663",
        "patch": "@@ -39,7 +39,7 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \tarith_uint256 PastDifficultyAverage;\n \tarith_uint256 PastDifficultyAveragePrev;\n \n-\tif (BlockLastSolved == NULL || BlockLastSolved->nHeight <= 600) {\n+\tif (BlockLastSolved == NULL || BlockLastSolved->nHeight <= 600) \n \t\treturn UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n \n \tfor (unsigned int i = 1; BlockReading && BlockReading->nHeight > 0; i++) {\n@@ -84,11 +84,11 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n {\n-\t//static unsigned int regTestBits = UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit.GetCompact();\n+\tstatic unsigned int regTestBits = UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit.GetCompact();\n     bool fNegative;\n     bool fOverflow;\n     arith_uint256 bnTarget;\n-\tif (Params().NetworkIDString() != CBaseChainParams::REGTEST)\n+\tif (Params().NetworkIDString() != CBaseChainParams::REGTEST && nBits == regTestBits)\n \t\treturn true;\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \tarith_uint256 nProofOfWorkLimit = UintToArith256(params.powLimit);"
      }
    ]
  },
  {
    "sha": "02220bda43614813edfc8ee53cd46eca24113568",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjIyMGJkYTQzNjE0ODEzZWRmYzhlZTUzY2Q0NmVjYTI0MTEzNTY4",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T19:09:46Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-19T19:09:46Z"
      },
      "message": "compile",
      "tree": {
        "sha": "b7d990c9b5d0f49721fa9a2d805893f19a2e812b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7d990c9b5d0f49721fa9a2d805893f19a2e812b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02220bda43614813edfc8ee53cd46eca24113568",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02220bda43614813edfc8ee53cd46eca24113568",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02220bda43614813edfc8ee53cd46eca24113568",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02220bda43614813edfc8ee53cd46eca24113568/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a4a573d8b4c195bbd96550bf47f919746a47663",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a4a573d8b4c195bbd96550bf47f919746a47663",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a4a573d8b4c195bbd96550bf47f919746a47663"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "89e202b81e13092657b2eb491e4accad4154953d",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02220bda43614813edfc8ee53cd46eca24113568/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02220bda43614813edfc8ee53cd46eca24113568/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=02220bda43614813edfc8ee53cd46eca24113568",
        "patch": "@@ -84,7 +84,7 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params& params)\n {\n-\tstatic unsigned int regTestBits = UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit.GetCompact();\n+\tstatic unsigned int regTestBits = UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n     bool fNegative;\n     bool fOverflow;\n     arith_uint256 bnTarget;"
      }
    ]
  },
  {
    "sha": "1244f75a4c3608c1b0b55cb62bc24911942f8616",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjQ0Zjc1YTRjMzYwOGMxYjBiNTVjYjYyYmMyNDkxMTk0MmY4NjE2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-20T19:13:18Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-20T19:13:18Z"
      },
      "message": "update depends folder",
      "tree": {
        "sha": "34378cc548e861418d9a8abb09569eef93b2ff8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34378cc548e861418d9a8abb09569eef93b2ff8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1244f75a4c3608c1b0b55cb62bc24911942f8616",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1244f75a4c3608c1b0b55cb62bc24911942f8616",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1244f75a4c3608c1b0b55cb62bc24911942f8616",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1244f75a4c3608c1b0b55cb62bc24911942f8616/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02220bda43614813edfc8ee53cd46eca24113568",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02220bda43614813edfc8ee53cd46eca24113568",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02220bda43614813edfc8ee53cd46eca24113568"
      }
    ],
    "stats": {
      "total": 1739,
      "additions": 846,
      "deletions": 893
    },
    "files": [
      {
        "sha": "3cb4b9ac15557906446b56ab75eb2d23ec0187e9",
        "filename": "depends/.gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/.gitignore?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -7,3 +7,4 @@ x86_64*\n i686*\n mips*\n arm*\n+aarch64*"
      },
      {
        "sha": "8b67bce9d8468a83b6d3d236d3ee1390b9fc8591",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 39,
        "deletions": 12,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -1,6 +1,7 @@\n .NOTPARALLEL :\n \n SOURCES_PATH ?= $(BASEDIR)/sources\n+WORK_PATH = $(BASEDIR)/work\n BASE_CACHE ?= $(BASEDIR)/built\n SDK_PATH ?= $(BASEDIR)/SDKs\n NO_QT ?=\n@@ -15,11 +16,12 @@ BASEDIR = $(CURDIR)\n HASH_LENGTH:=11\n DOWNLOAD_CONNECT_TIMEOUT:=10\n DOWNLOAD_RETRIES:=3\n+HOST_ID_SALT ?= salt\n+BUILD_ID_SALT ?= salt\n \n host:=$(BUILD)\n ifneq ($(HOST),)\n host:=$(HOST)\n-host_toolchain:=$(HOST)-\n endif\n \n ifneq ($(DEBUG),)\n@@ -28,9 +30,9 @@ else\n release_type=release\n endif\n \n-base_build_dir=$(BASEDIR)/work/build\n-base_staging_dir=$(BASEDIR)/work/staging\n-base_download_dir=$(BASEDIR)/work/download\n+base_build_dir=$(WORK_PATH)/build\n+base_staging_dir=$(WORK_PATH)/staging\n+base_download_dir=$(WORK_PATH)/download\n canonical_host:=$(shell ./config.sub $(HOST))\n build:=$(shell ./config.sub $(BUILD))\n \n@@ -73,13 +75,31 @@ include builders/$(build_os).mk\n include builders/default.mk\n include packages/packages.mk\n \n-qt_packages_$(NO_QT) = $(qt_packages) $(qt_$(host_os)_packages)\n-qt_native_packages_$(NO_QT) = $(qt_native_packages)\n+build_id_string:=$(BUILD_ID_SALT)\n+build_id_string+=$(shell $(build_CC) --version 2>/dev/null)\n+build_id_string+=$(shell $(build_AR) --version 2>/dev/null)\n+build_id_string+=$(shell $(build_CXX) --version 2>/dev/null)\n+build_id_string+=$(shell $(build_RANLIB) --version 2>/dev/null)\n+build_id_string+=$(shell $(build_STRIP) --version 2>/dev/null)\n+\n+$(host_arch)_$(host_os)_id_string:=$(HOST_ID_SALT)\n+$(host_arch)_$(host_os)_id_string+=$(shell $(host_CC) --version 2>/dev/null)\n+$(host_arch)_$(host_os)_id_string+=$(shell $(host_AR) --version 2>/dev/null)\n+$(host_arch)_$(host_os)_id_string+=$(shell $(host_CXX) --version 2>/dev/null)\n+$(host_arch)_$(host_os)_id_string+=$(shell $(host_RANLIB) --version 2>/dev/null)\n+$(host_arch)_$(host_os)_id_string+=$(shell $(host_STRIP) --version 2>/dev/null)\n+\n+qt_packages_$(NO_QT) = $(qt_packages) $(qt_$(host_os)_packages) $(qt_$(host_arch)_$(host_os)_packages)\n wallet_packages_$(NO_WALLET) = $(wallet_packages)\n upnp_packages_$(NO_UPNP) = $(upnp_packages)\n \n packages += $($(host_arch)_$(host_os)_packages) $($(host_os)_packages) $(qt_packages_) $(wallet_packages_) $(upnp_packages_)\n-native_packages += $($(host_arch)_$(host_os)_native_packages) $($(host_os)_native_packages) $(qt_native_packages_)\n+native_packages += $($(host_arch)_$(host_os)_native_packages) $($(host_os)_native_packages)\n+\n+ifneq ($(qt_packages_),)\n+native_packages += $(qt_native_packages)\n+endif\n+\n all_packages = $(packages) $(native_packages)\n \n meta_depends = Makefile funcs.mk builders/default.mk hosts/default.mk hosts/$(host_os).mk builders/$(build_os).mk\n@@ -90,7 +110,7 @@ include funcs.mk\n \n toolchain_path=$($($(host_arch)_$(host_os)_native_toolchain)_prefixbin)\n final_build_id_long+=$(shell $(build_SHA256SUM) config.site.in)\n-final_build_id+=$(shell echo -n $(final_build_id_long) | $(build_SHA256SUM) | cut -c-$(HASH_LENGTH))\n+final_build_id+=$(shell echo -n \"$(final_build_id_long)\" | $(build_SHA256SUM) | cut -c-$(HASH_LENGTH))\n $(host_prefix)/.stamp_$(final_build_id): $(native_packages) $(packages)\n \t$(AT)rm -rf $(@D)\n \t$(AT)mkdir -p $(@D)\n@@ -114,6 +134,7 @@ $(host_prefix)/share/config.site : config.site.in $(host_prefix)/.stamp_$(final_\n             -e 's|@CXXFLAGS@|$(strip $(host_CXXFLAGS) $(host_$(release_type)_CXXFLAGS))|' \\\n             -e 's|@CPPFLAGS@|$(strip $(host_CPPFLAGS) $(host_$(release_type)_CPPFLAGS))|' \\\n             -e 's|@LDFLAGS@|$(strip $(host_LDFLAGS) $(host_$(release_type)_LDFLAGS))|' \\\n+            -e 's|@allow_host_packages@|$(ALLOW_HOST_PACKAGES)|' \\\n             -e 's|@no_qt@|$(NO_QT)|' \\\n             -e 's|@no_wallet@|$(NO_WALLET)|' \\\n             -e 's|@no_upnp@|$(NO_UPNP)|' \\\n@@ -131,9 +152,9 @@ endef\n \n define check_or_remove_sources\n   mkdir -p $($(package)_source_dir); cd $($(package)_source_dir); \\\n-  $(build_SHA256SUM) -c $($(package)_fetched) >/dev/null 2>/dev/null || \\\n-    ( if test -f $($(package)_all_sources); then echo \"Checksum missing or mismatched for $(package) source. Forcing re-download.\"; fi; \\\n-      rm -f $($(package)_all_sources) $($(1)_fetched))\n+  test -f $($(package)_fetched) && ( $(build_SHA256SUM) -c $($(package)_fetched) >/dev/null 2>/dev/null || \\\n+    ( echo \"Checksum missing or mismatched for $(package) source. Forcing re-download.\"; \\\n+      rm -f $($(package)_all_sources) $($(1)_fetched))) || true\n endef\n \n check-packages:\n@@ -145,6 +166,12 @@ $(host_prefix)/share/config.site: check-packages\n \n check-packages: check-sources\n \n+clean-all: clean\n+\t@rm -rf $(SOURCES_PATH) x86_64* i686* mips* arm* aarch64*\n+\n+clean:\n+\t@rm -rf $(WORK_PATH) $(BASE_CACHE) $(BUILD)\n+\n install: check-packages $(host_prefix)/share/config.site\n \n \n@@ -158,4 +185,4 @@ download-win:\n \t@$(MAKE) -s HOST=x86_64-w64-mingw32 download-one\n download: download-osx download-linux download-win\n \n-.PHONY: install cached download-one download-osx download-linux download-win download check-packages check-sources\n+.PHONY: install cached clean clean-all download-one download-osx download-linux download-win download check-packages check-sources"
      },
      {
        "sha": "94122528471db5814730a74a88f94fa8d77b0995",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 21,
        "deletions": 2,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -23,10 +23,27 @@ Common `host-platform-triplets` for cross compilation are:\n - `i686-w64-mingw32` for Win32\n - `x86_64-w64-mingw32` for Win64\n - `x86_64-apple-darwin11` for MacOSX\n-- `arm-linux-gnueabihf` for Linux ARM\n+- `arm-linux-gnueabihf` for Linux ARM 32 bit\n+- `aarch64-linux-gnu` for Linux ARM 64 bit\n \n No other options are needed, the paths are automatically configured.\n \n+Install the required dependencies: Ubuntu & Debian\n+--------------------------------------------------\n+\n+For macOS cross compilation:\n+\n+    sudo apt-get install curl librsvg2-bin libtiff-tools bsdmainutils cmake imagemagick libcap-dev libz-dev libbz2-dev python-setuptools\n+\n+For Win32/Win64 cross compilation:\n+\n+- see [build-windows.md](../doc/build-windows.md#cross-compilation-for-ubuntu-and-windows-subsystem-for-linux)\n+\n+For linux (including i386, ARM) cross compilation:\n+\n+    sudo apt-get install curl g++-aarch64-linux-gnu g++-4.8-aarch64-linux-gnu gcc-4.8-aarch64-linux-gnu binutils-aarch64-linux-gnu g++-arm-linux-gnueabihf g++-4.8-arm-linux-gnueabihf gcc-4.8-arm-linux-gnueabihf binutils-arm-linux-gnueabihf g++-4.8-multilib gcc-4.8-multilib binutils-gold bsdmainutils\n+\n+\n Dependency Options:\n The following can be set when running make: make FOO=bar\n \n@@ -38,9 +55,11 @@ The following can be set when running make: make FOO=bar\n     NO_WALLET: Don't download/build/cache libs needed to enable the wallet\n     NO_UPNP: Don't download/build/cache packages needed for enabling upnp\n     DEBUG: disable some optimizations and enable more runtime checking\n+    HOST_ID_SALT: Optional salt to use when generating host package ids\n+    BUILD_ID_SALT: Optional salt to use when generating build package ids\n \n If some packages are not built, for example `make NO_WALLET=1`, the appropriate\n-options will be passed to Syscoin Core's configure. In this case, `--disable-wallet`.\n+options will be passed to syscoin's configure. In this case, `--disable-wallet`.\n \n Additional targets:\n "
      },
      {
        "sha": "27f550ab036aeea9ced0a003d40aceaff5e3dc9c",
        "filename": "depends/builders/darwin.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/builders/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/builders/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/builders/darwin.mk?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -7,11 +7,11 @@ build_darwin_OTOOL: = $(shell xcrun -f otool)\n build_darwin_NM: = $(shell xcrun -f nm)\n build_darwin_INSTALL_NAME_TOOL:=$(shell xcrun -f install_name_tool)\n build_darwin_SHA256SUM = shasum -a 256\n-build_darwin_DOWNLOAD = curl --location --fail --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -L -o\n+build_darwin_DOWNLOAD = curl --location --fail --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -o\n \n #darwin host on darwin builder. overrides darwin host preferences.\n darwin_CC=$(shell xcrun -f clang) -mmacosx-version-min=$(OSX_MIN_VERSION)\n-darwin_CXX:=$(shell xcrun -f clang++) -mmacosx-version-min=$(OSX_MIN_VERSION)\n+darwin_CXX:=$(shell xcrun -f clang++) -mmacosx-version-min=$(OSX_MIN_VERSION) -stdlib=libc++\n darwin_AR:=$(shell xcrun -f ar)\n darwin_RANLIB:=$(shell xcrun -f ranlib)\n darwin_STRIP:=$(shell xcrun -f strip)"
      },
      {
        "sha": "b03f42401047adf98bc997a7eece42c2c79a2c2c",
        "filename": "depends/builders/linux.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/builders/linux.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/builders/linux.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/builders/linux.mk?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -1,2 +1,2 @@\n build_linux_SHA256SUM = sha256sum\n-build_linux_DOWNLOAD = curl --location --fail --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -L -o\n+build_linux_DOWNLOAD = curl --location --fail --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -o"
      },
      {
        "sha": "9baaa270bfc7f08d6c6eb85b84f9742318a58d84",
        "filename": "depends/config.guess",
        "status": "modified",
        "additions": 350,
        "deletions": 321,
        "changes": 671,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/config.guess",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/config.guess",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.guess?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Attempt to guess a canonical system name.\n-#   Copyright 1992-2015 Free Software Foundation, Inc.\n+#   Copyright 1992-2018 Free Software Foundation, Inc.\n \n-timestamp='2015-11-19'\n+timestamp='2018-01-26'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -15,7 +15,7 @@ timestamp='2015-11-19'\n # General Public License for more details.\n #\n # You should have received a copy of the GNU General Public License\n-# along with this program; if not, see <http://www.gnu.org/licenses/>.\n+# along with this program; if not, see <https://www.gnu.org/licenses/>.\n #\n # As a special exception to the GNU General Public License, if you\n # distribute this file as part of a program that contains a\n@@ -27,7 +27,7 @@ timestamp='2015-11-19'\n # Originally written by Per Bothner; maintained since 2000 by Ben Elliston.\n #\n # You can get the latest version of this script from:\n-# http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD\n+# https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n #\n # Please send patches to <config-patches@gnu.org>.\n \n@@ -39,7 +39,7 @@ Usage: $0 [OPTION]\n \n Output the configuration name of the system \\`$me' is run on.\n \n-Operation modes:\n+Options:\n   -h, --help         print this help, then exit\n   -t, --time-stamp   print date of last modification, then exit\n   -v, --version      print version number, then exit\n@@ -50,7 +50,7 @@ version=\"\\\n GNU config.guess ($timestamp)\n \n Originally written by Per Bothner.\n-Copyright 1992-2015 Free Software Foundation, Inc.\n+Copyright 1992-2018 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -107,9 +107,9 @@ trap \"rm -f \\$tmpfiles 2>/dev/null; rmdir \\$tmp 2>/dev/null; exit 1\" 1 2 13 15 ;\n dummy=$tmp/dummy ;\n tmpfiles=\"$dummy.c $dummy.o $dummy.rel $dummy\" ;\n case $CC_FOR_BUILD,$HOST_CC,$CC in\n- ,,)    echo \"int x;\" > $dummy.c ;\n+ ,,)    echo \"int x;\" > \"$dummy.c\" ;\n \tfor c in cc gcc c89 c99 ; do\n-\t  if ($c -c -o $dummy.o $dummy.c) >/dev/null 2>&1 ; then\n+\t  if ($c -c -o \"$dummy.o\" \"$dummy.c\") >/dev/null 2>&1 ; then\n \t     CC_FOR_BUILD=\"$c\"; break ;\n \t  fi ;\n \tdone ;\n@@ -132,14 +132,14 @@ UNAME_RELEASE=`(uname -r) 2>/dev/null` || UNAME_RELEASE=unknown\n UNAME_SYSTEM=`(uname -s) 2>/dev/null`  || UNAME_SYSTEM=unknown\n UNAME_VERSION=`(uname -v) 2>/dev/null` || UNAME_VERSION=unknown\n \n-case \"${UNAME_SYSTEM}\" in\n+case \"$UNAME_SYSTEM\" in\n Linux|GNU|GNU/*)\n \t# If the system lacks a compiler, then just pick glibc.\n \t# We could probably try harder.\n \tLIBC=gnu\n \n-\teval $set_cc_for_build\n-\tcat <<-EOF > $dummy.c\n+\teval \"$set_cc_for_build\"\n+\tcat <<-EOF > \"$dummy.c\"\n \t#include <features.h>\n \t#if defined(__UCLIBC__)\n \tLIBC=uclibc\n@@ -149,13 +149,20 @@ Linux|GNU|GNU/*)\n \tLIBC=gnu\n \t#endif\n \tEOF\n-\teval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\n+\teval \"`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\"\n+\n+\t# If ldd exists, use it to detect musl libc.\n+\tif command -v ldd >/dev/null && \\\n+\t\tldd --version 2>&1 | grep -q ^musl\n+\tthen\n+\t    LIBC=musl\n+\tfi\n \t;;\n esac\n \n # Note: order is significant - the case branches are not exclusive.\n \n-case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n+case \"$UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION\" in\n     *:NetBSD:*:*)\n \t# NetBSD (nbsd) targets should (where applicable) match one or\n \t# more of the tuples: *-*-netbsdelf*, *-*-netbsdaout*,\n@@ -169,27 +176,30 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t# portion of the name.  We always set it to \"unknown\".\n \tsysctl=\"sysctl -n hw.machine_arch\"\n \tUNAME_MACHINE_ARCH=`(uname -p 2>/dev/null || \\\n-\t    /sbin/$sysctl 2>/dev/null || \\\n-\t    /usr/sbin/$sysctl 2>/dev/null || \\\n+\t    \"/sbin/$sysctl\" 2>/dev/null || \\\n+\t    \"/usr/sbin/$sysctl\" 2>/dev/null || \\\n \t    echo unknown)`\n-\tcase \"${UNAME_MACHINE_ARCH}\" in\n+\tcase \"$UNAME_MACHINE_ARCH\" in\n \t    armeb) machine=armeb-unknown ;;\n \t    arm*) machine=arm-unknown ;;\n \t    sh3el) machine=shl-unknown ;;\n \t    sh3eb) machine=sh-unknown ;;\n \t    sh5el) machine=sh5le-unknown ;;\n \t    earmv*)\n-\t\tarch=`echo ${UNAME_MACHINE_ARCH} | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,'`\n-\t\tendian=`echo ${UNAME_MACHINE_ARCH} | sed -ne 's,^.*\\(eb\\)$,\\1,p'`\n-\t\tmachine=${arch}${endian}-unknown\n+\t\tarch=`echo \"$UNAME_MACHINE_ARCH\" | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,'`\n+\t\tendian=`echo \"$UNAME_MACHINE_ARCH\" | sed -ne 's,^.*\\(eb\\)$,\\1,p'`\n+\t\tmachine=\"${arch}${endian}\"-unknown\n \t\t;;\n-\t    *) machine=${UNAME_MACHINE_ARCH}-unknown ;;\n+\t    *) machine=\"$UNAME_MACHINE_ARCH\"-unknown ;;\n \tesac\n \t# The Operating System including object format, if it has switched\n-\t# to ELF recently, or will in the future.\n-\tcase \"${UNAME_MACHINE_ARCH}\" in\n-\t    arm*|earm*|i386|m68k|ns32k|sh3*|sparc|vax)\n-\t\teval $set_cc_for_build\n+\t# to ELF recently (or will in the future) and ABI.\n+\tcase \"$UNAME_MACHINE_ARCH\" in\n+\t    earm*)\n+\t\tos=netbsdelf\n+\t\t;;\n+\t    arm*|i386|m68k|ns32k|sh3*|sparc|vax)\n+\t\teval \"$set_cc_for_build\"\n \t\tif echo __ELF__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n \t\t\t| grep -q __ELF__\n \t\tthen\n@@ -205,53 +215,66 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t\t;;\n \tesac\n \t# Determine ABI tags.\n-\tcase \"${UNAME_MACHINE_ARCH}\" in\n+\tcase \"$UNAME_MACHINE_ARCH\" in\n \t    earm*)\n \t\texpr='s/^earmv[0-9]/-eabi/;s/eb$//'\n-\t\tabi=`echo ${UNAME_MACHINE_ARCH} | sed -e \"$expr\"`\n+\t\tabi=`echo \"$UNAME_MACHINE_ARCH\" | sed -e \"$expr\"`\n \t\t;;\n \tesac\n \t# The OS release\n \t# Debian GNU/NetBSD machines have a different userland, and\n \t# thus, need a distinct triplet. However, they do not need\n \t# kernel version information, so it can be replaced with a\n \t# suitable tag, in the style of linux-gnu.\n-\tcase \"${UNAME_VERSION}\" in\n+\tcase \"$UNAME_VERSION\" in\n \t    Debian*)\n \t\trelease='-gnu'\n \t\t;;\n \t    *)\n-\t\trelease=`echo ${UNAME_RELEASE} | sed -e 's/[-_].*//' | cut -d. -f1,2`\n+\t\trelease=`echo \"$UNAME_RELEASE\" | sed -e 's/[-_].*//' | cut -d. -f1,2`\n \t\t;;\n \tesac\n \t# Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:\n \t# contains redundant information, the shorter form:\n \t# CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM is used.\n-\techo \"${machine}-${os}${release}${abi}\"\n+\techo \"$machine-${os}${release}${abi}\"\n \texit ;;\n     *:Bitrig:*:*)\n \tUNAME_MACHINE_ARCH=`arch | sed 's/Bitrig.//'`\n-\techo ${UNAME_MACHINE_ARCH}-unknown-bitrig${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE_ARCH\"-unknown-bitrig\"$UNAME_RELEASE\"\n \texit ;;\n     *:OpenBSD:*:*)\n \tUNAME_MACHINE_ARCH=`arch | sed 's/OpenBSD.//'`\n-\techo ${UNAME_MACHINE_ARCH}-unknown-openbsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE_ARCH\"-unknown-openbsd\"$UNAME_RELEASE\"\n+\texit ;;\n+    *:LibertyBSD:*:*)\n+\tUNAME_MACHINE_ARCH=`arch | sed 's/^.*BSD\\.//'`\n+\techo \"$UNAME_MACHINE_ARCH\"-unknown-libertybsd\"$UNAME_RELEASE\"\n+\texit ;;\n+    *:MidnightBSD:*:*)\n+\techo \"$UNAME_MACHINE\"-unknown-midnightbsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:ekkoBSD:*:*)\n-\techo ${UNAME_MACHINE}-unknown-ekkobsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-unknown-ekkobsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:SolidBSD:*:*)\n-\techo ${UNAME_MACHINE}-unknown-solidbsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-unknown-solidbsd\"$UNAME_RELEASE\"\n \texit ;;\n     macppc:MirBSD:*:*)\n-\techo powerpc-unknown-mirbsd${UNAME_RELEASE}\n+\techo powerpc-unknown-mirbsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:MirBSD:*:*)\n-\techo ${UNAME_MACHINE}-unknown-mirbsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-unknown-mirbsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:Sortix:*:*)\n-\techo ${UNAME_MACHINE}-unknown-sortix\n+\techo \"$UNAME_MACHINE\"-unknown-sortix\n+\texit ;;\n+    *:Redox:*:*)\n+\techo \"$UNAME_MACHINE\"-unknown-redox\n \texit ;;\n+    mips:OSF1:*.*)\n+        echo mips-dec-osf1\n+        exit ;;\n     alpha:OSF1:*:*)\n \tcase $UNAME_RELEASE in\n \t*4.0)\n@@ -268,63 +291,54 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \tALPHA_CPU_TYPE=`/usr/sbin/psrinfo -v | sed -n -e 's/^  The alpha \\(.*\\) processor.*$/\\1/p' | head -n 1`\n \tcase \"$ALPHA_CPU_TYPE\" in\n \t    \"EV4 (21064)\")\n-\t\tUNAME_MACHINE=\"alpha\" ;;\n+\t\tUNAME_MACHINE=alpha ;;\n \t    \"EV4.5 (21064)\")\n-\t\tUNAME_MACHINE=\"alpha\" ;;\n+\t\tUNAME_MACHINE=alpha ;;\n \t    \"LCA4 (21066/21068)\")\n-\t\tUNAME_MACHINE=\"alpha\" ;;\n+\t\tUNAME_MACHINE=alpha ;;\n \t    \"EV5 (21164)\")\n-\t\tUNAME_MACHINE=\"alphaev5\" ;;\n+\t\tUNAME_MACHINE=alphaev5 ;;\n \t    \"EV5.6 (21164A)\")\n-\t\tUNAME_MACHINE=\"alphaev56\" ;;\n+\t\tUNAME_MACHINE=alphaev56 ;;\n \t    \"EV5.6 (21164PC)\")\n-\t\tUNAME_MACHINE=\"alphapca56\" ;;\n+\t\tUNAME_MACHINE=alphapca56 ;;\n \t    \"EV5.7 (21164PC)\")\n-\t\tUNAME_MACHINE=\"alphapca57\" ;;\n+\t\tUNAME_MACHINE=alphapca57 ;;\n \t    \"EV6 (21264)\")\n-\t\tUNAME_MACHINE=\"alphaev6\" ;;\n+\t\tUNAME_MACHINE=alphaev6 ;;\n \t    \"EV6.7 (21264A)\")\n-\t\tUNAME_MACHINE=\"alphaev67\" ;;\n+\t\tUNAME_MACHINE=alphaev67 ;;\n \t    \"EV6.8CB (21264C)\")\n-\t\tUNAME_MACHINE=\"alphaev68\" ;;\n+\t\tUNAME_MACHINE=alphaev68 ;;\n \t    \"EV6.8AL (21264B)\")\n-\t\tUNAME_MACHINE=\"alphaev68\" ;;\n+\t\tUNAME_MACHINE=alphaev68 ;;\n \t    \"EV6.8CX (21264D)\")\n-\t\tUNAME_MACHINE=\"alphaev68\" ;;\n+\t\tUNAME_MACHINE=alphaev68 ;;\n \t    \"EV6.9A (21264/EV69A)\")\n-\t\tUNAME_MACHINE=\"alphaev69\" ;;\n+\t\tUNAME_MACHINE=alphaev69 ;;\n \t    \"EV7 (21364)\")\n-\t\tUNAME_MACHINE=\"alphaev7\" ;;\n+\t\tUNAME_MACHINE=alphaev7 ;;\n \t    \"EV7.9 (21364A)\")\n-\t\tUNAME_MACHINE=\"alphaev79\" ;;\n+\t\tUNAME_MACHINE=alphaev79 ;;\n \tesac\n \t# A Pn.n version is a patched version.\n \t# A Vn.n version is a released version.\n \t# A Tn.n version is a released field test version.\n \t# A Xn.n version is an unreleased experimental baselevel.\n \t# 1.2 uses \"1.2\" for uname -r.\n-\techo ${UNAME_MACHINE}-dec-osf`echo ${UNAME_RELEASE} | sed -e 's/^[PVTX]//' | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n+\techo \"$UNAME_MACHINE\"-dec-osf\"`echo \"$UNAME_RELEASE\" | sed -e 's/^[PVTX]//' | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\"\n \t# Reset EXIT trap before exiting to avoid spurious non-zero exit code.\n \texitcode=$?\n \ttrap '' 0\n \texit $exitcode ;;\n-    Alpha\\ *:Windows_NT*:*)\n-\t# How do we know it's Interix rather than the generic POSIX subsystem?\n-\t# Should we change UNAME_MACHINE based on the output of uname instead\n-\t# of the specific Alpha model?\n-\techo alpha-pc-interix\n-\texit ;;\n-    21064:Windows_NT:50:3)\n-\techo alpha-dec-winnt3.5\n-\texit ;;\n     Amiga*:UNIX_System_V:4.0:*)\n \techo m68k-unknown-sysv4\n \texit ;;\n     *:[Aa]miga[Oo][Ss]:*:*)\n-\techo ${UNAME_MACHINE}-unknown-amigaos\n+\techo \"$UNAME_MACHINE\"-unknown-amigaos\n \texit ;;\n     *:[Mm]orph[Oo][Ss]:*:*)\n-\techo ${UNAME_MACHINE}-unknown-morphos\n+\techo \"$UNAME_MACHINE\"-unknown-morphos\n \texit ;;\n     *:OS/390:*:*)\n \techo i370-ibm-openedition\n@@ -336,7 +350,7 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \techo powerpc-ibm-os400\n \texit ;;\n     arm:RISC*:1.[012]*:*|arm:riscix:1.[012]*:*)\n-\techo arm-acorn-riscix${UNAME_RELEASE}\n+\techo arm-acorn-riscix\"$UNAME_RELEASE\"\n \texit ;;\n     arm*:riscos:*:*|arm*:RISCOS:*:*)\n \techo arm-unknown-riscos\n@@ -363,38 +377,38 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t    sparc) echo sparc-icl-nx7; exit ;;\n \tesac ;;\n     s390x:SunOS:*:*)\n-\techo ${UNAME_MACHINE}-ibm-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo \"$UNAME_MACHINE\"-ibm-solaris2\"`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\"\n \texit ;;\n     sun4H:SunOS:5.*:*)\n-\techo sparc-hal-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo sparc-hal-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n \texit ;;\n     sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)\n-\techo sparc-sun-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo sparc-sun-solaris2\"`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\"\n \texit ;;\n     i86pc:AuroraUX:5.*:* | i86xen:AuroraUX:5.*:*)\n-\techo i386-pc-auroraux${UNAME_RELEASE}\n+\techo i386-pc-auroraux\"$UNAME_RELEASE\"\n \texit ;;\n     i86pc:SunOS:5.*:* | i86xen:SunOS:5.*:*)\n-\teval $set_cc_for_build\n-\tSUN_ARCH=\"i386\"\n+\teval \"$set_cc_for_build\"\n+\tSUN_ARCH=i386\n \t# If there is a compiler, see if it is configured for 64-bit objects.\n \t# Note that the Sun cc does not turn __LP64__ into 1 like gcc does.\n \t# This test works for both compilers.\n-\tif [ \"$CC_FOR_BUILD\" != 'no_compiler_found' ]; then\n+\tif [ \"$CC_FOR_BUILD\" != no_compiler_found ]; then\n \t    if (echo '#ifdef __amd64'; echo IS_64BIT_ARCH; echo '#endif') | \\\n-\t\t(CCOPTS= $CC_FOR_BUILD -E - 2>/dev/null) | \\\n+\t\t(CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n \t\tgrep IS_64BIT_ARCH >/dev/null\n \t    then\n-\t\tSUN_ARCH=\"x86_64\"\n+\t\tSUN_ARCH=x86_64\n \t    fi\n \tfi\n-\techo ${SUN_ARCH}-pc-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo \"$SUN_ARCH\"-pc-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n \texit ;;\n     sun4*:SunOS:6*:*)\n \t# According to config.sub, this is the proper way to canonicalize\n \t# SunOS6.  Hard to guess exactly what SunOS6 will be like, but\n \t# it's likely to be more like Solaris than SunOS4.\n-\techo sparc-sun-solaris3`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo sparc-sun-solaris3\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n \texit ;;\n     sun4*:SunOS:*:*)\n \tcase \"`/usr/bin/arch -k`\" in\n@@ -403,25 +417,25 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t\t;;\n \tesac\n \t# Japanese Language versions have a version number like `4.1.3-JL'.\n-\techo sparc-sun-sunos`echo ${UNAME_RELEASE}|sed -e 's/-/_/'`\n+\techo sparc-sun-sunos\"`echo \"$UNAME_RELEASE\"|sed -e 's/-/_/'`\"\n \texit ;;\n     sun3*:SunOS:*:*)\n-\techo m68k-sun-sunos${UNAME_RELEASE}\n+\techo m68k-sun-sunos\"$UNAME_RELEASE\"\n \texit ;;\n     sun*:*:4.2BSD:*)\n \tUNAME_RELEASE=`(sed 1q /etc/motd | awk '{print substr($5,1,3)}') 2>/dev/null`\n-\ttest \"x${UNAME_RELEASE}\" = \"x\" && UNAME_RELEASE=3\n+\ttest \"x$UNAME_RELEASE\" = x && UNAME_RELEASE=3\n \tcase \"`/bin/arch`\" in\n \t    sun3)\n-\t\techo m68k-sun-sunos${UNAME_RELEASE}\n+\t\techo m68k-sun-sunos\"$UNAME_RELEASE\"\n \t\t;;\n \t    sun4)\n-\t\techo sparc-sun-sunos${UNAME_RELEASE}\n+\t\techo sparc-sun-sunos\"$UNAME_RELEASE\"\n \t\t;;\n \tesac\n \texit ;;\n     aushp:SunOS:*:*)\n-\techo sparc-auspex-sunos${UNAME_RELEASE}\n+\techo sparc-auspex-sunos\"$UNAME_RELEASE\"\n \texit ;;\n     # The situation for MiNT is a little confusing.  The machine name\n     # can be virtually everything (everything which is not\n@@ -432,44 +446,44 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n     # MiNT.  But MiNT is downward compatible to TOS, so this should\n     # be no problem.\n     atarist[e]:*MiNT:*:* | atarist[e]:*mint:*:* | atarist[e]:*TOS:*:*)\n-\techo m68k-atari-mint${UNAME_RELEASE}\n+\techo m68k-atari-mint\"$UNAME_RELEASE\"\n \texit ;;\n     atari*:*MiNT:*:* | atari*:*mint:*:* | atarist[e]:*TOS:*:*)\n-\techo m68k-atari-mint${UNAME_RELEASE}\n+\techo m68k-atari-mint\"$UNAME_RELEASE\"\n \texit ;;\n     *falcon*:*MiNT:*:* | *falcon*:*mint:*:* | *falcon*:*TOS:*:*)\n-\techo m68k-atari-mint${UNAME_RELEASE}\n+\techo m68k-atari-mint\"$UNAME_RELEASE\"\n \texit ;;\n     milan*:*MiNT:*:* | milan*:*mint:*:* | *milan*:*TOS:*:*)\n-\techo m68k-milan-mint${UNAME_RELEASE}\n+\techo m68k-milan-mint\"$UNAME_RELEASE\"\n \texit ;;\n     hades*:*MiNT:*:* | hades*:*mint:*:* | *hades*:*TOS:*:*)\n-\techo m68k-hades-mint${UNAME_RELEASE}\n+\techo m68k-hades-mint\"$UNAME_RELEASE\"\n \texit ;;\n     *:*MiNT:*:* | *:*mint:*:* | *:*TOS:*:*)\n-\techo m68k-unknown-mint${UNAME_RELEASE}\n+\techo m68k-unknown-mint\"$UNAME_RELEASE\"\n \texit ;;\n     m68k:machten:*:*)\n-\techo m68k-apple-machten${UNAME_RELEASE}\n+\techo m68k-apple-machten\"$UNAME_RELEASE\"\n \texit ;;\n     powerpc:machten:*:*)\n-\techo powerpc-apple-machten${UNAME_RELEASE}\n+\techo powerpc-apple-machten\"$UNAME_RELEASE\"\n \texit ;;\n     RISC*:Mach:*:*)\n \techo mips-dec-mach_bsd4.3\n \texit ;;\n     RISC*:ULTRIX:*:*)\n-\techo mips-dec-ultrix${UNAME_RELEASE}\n+\techo mips-dec-ultrix\"$UNAME_RELEASE\"\n \texit ;;\n     VAX*:ULTRIX*:*:*)\n-\techo vax-dec-ultrix${UNAME_RELEASE}\n+\techo vax-dec-ultrix\"$UNAME_RELEASE\"\n \texit ;;\n     2020:CLIX:*:* | 2430:CLIX:*:*)\n-\techo clipper-intergraph-clix${UNAME_RELEASE}\n+\techo clipper-intergraph-clix\"$UNAME_RELEASE\"\n \texit ;;\n     mips:*:*:UMIPS | mips:*:*:RISCos)\n-\teval $set_cc_for_build\n-\tsed 's/^\t//' << EOF >$dummy.c\n+\teval \"$set_cc_for_build\"\n+\tsed 's/^\t//' << EOF > \"$dummy.c\"\n #ifdef __cplusplus\n #include <stdio.h>  /* for printf() prototype */\n \tint main (int argc, char *argv[]) {\n@@ -478,23 +492,23 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n #endif\n \t#if defined (host_mips) && defined (MIPSEB)\n \t#if defined (SYSTYPE_SYSV)\n-\t  printf (\"mips-mips-riscos%ssysv\\n\", argv[1]); exit (0);\n+\t  printf (\"mips-mips-riscos%ssysv\\\\n\", argv[1]); exit (0);\n \t#endif\n \t#if defined (SYSTYPE_SVR4)\n-\t  printf (\"mips-mips-riscos%ssvr4\\n\", argv[1]); exit (0);\n+\t  printf (\"mips-mips-riscos%ssvr4\\\\n\", argv[1]); exit (0);\n \t#endif\n \t#if defined (SYSTYPE_BSD43) || defined(SYSTYPE_BSD)\n-\t  printf (\"mips-mips-riscos%sbsd\\n\", argv[1]); exit (0);\n+\t  printf (\"mips-mips-riscos%sbsd\\\\n\", argv[1]); exit (0);\n \t#endif\n \t#endif\n \t  exit (-1);\n \t}\n EOF\n-\t$CC_FOR_BUILD -o $dummy $dummy.c &&\n-\t  dummyarg=`echo \"${UNAME_RELEASE}\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` &&\n-\t  SYSTEM_NAME=`$dummy $dummyarg` &&\n+\t$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" &&\n+\t  dummyarg=`echo \"$UNAME_RELEASE\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` &&\n+\t  SYSTEM_NAME=`\"$dummy\" \"$dummyarg\"` &&\n \t    { echo \"$SYSTEM_NAME\"; exit; }\n-\techo mips-mips-riscos${UNAME_RELEASE}\n+\techo mips-mips-riscos\"$UNAME_RELEASE\"\n \texit ;;\n     Motorola:PowerMAX_OS:*:*)\n \techo powerpc-motorola-powermax\n@@ -520,17 +534,17 @@ EOF\n     AViiON:dgux:*:*)\n \t# DG/UX returns AViiON for all architectures\n \tUNAME_PROCESSOR=`/usr/bin/uname -p`\n-\tif [ $UNAME_PROCESSOR = mc88100 ] || [ $UNAME_PROCESSOR = mc88110 ]\n+\tif [ \"$UNAME_PROCESSOR\" = mc88100 ] || [ \"$UNAME_PROCESSOR\" = mc88110 ]\n \tthen\n-\t    if [ ${TARGET_BINARY_INTERFACE}x = m88kdguxelfx ] || \\\n-\t       [ ${TARGET_BINARY_INTERFACE}x = x ]\n+\t    if [ \"$TARGET_BINARY_INTERFACE\"x = m88kdguxelfx ] || \\\n+\t       [ \"$TARGET_BINARY_INTERFACE\"x = x ]\n \t    then\n-\t\techo m88k-dg-dgux${UNAME_RELEASE}\n+\t\techo m88k-dg-dgux\"$UNAME_RELEASE\"\n \t    else\n-\t\techo m88k-dg-dguxbcs${UNAME_RELEASE}\n+\t\techo m88k-dg-dguxbcs\"$UNAME_RELEASE\"\n \t    fi\n \telse\n-\t    echo i586-dg-dgux${UNAME_RELEASE}\n+\t    echo i586-dg-dgux\"$UNAME_RELEASE\"\n \tfi\n \texit ;;\n     M88*:DolphinOS:*:*)\t# DolphinOS (SVR3)\n@@ -547,7 +561,7 @@ EOF\n \techo m68k-tektronix-bsd\n \texit ;;\n     *:IRIX*:*:*)\n-\techo mips-sgi-irix`echo ${UNAME_RELEASE}|sed -e 's/-/_/g'`\n+\techo mips-sgi-irix\"`echo \"$UNAME_RELEASE\"|sed -e 's/-/_/g'`\"\n \texit ;;\n     ????????:AIX?:[12].1:2)   # AIX 2.2.1 or AIX 2.1.1 is RT/PC AIX.\n \techo romp-ibm-aix     # uname -m gives an 8 hex-code CPU id\n@@ -559,14 +573,14 @@ EOF\n \tif [ -x /usr/bin/oslevel ] ; then\n \t\tIBM_REV=`/usr/bin/oslevel`\n \telse\n-\t\tIBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}\n+\t\tIBM_REV=\"$UNAME_VERSION.$UNAME_RELEASE\"\n \tfi\n-\techo ${UNAME_MACHINE}-ibm-aix${IBM_REV}\n+\techo \"$UNAME_MACHINE\"-ibm-aix\"$IBM_REV\"\n \texit ;;\n     *:AIX:2:3)\n \tif grep bos325 /usr/include/stdio.h >/dev/null 2>&1; then\n-\t\teval $set_cc_for_build\n-\t\tsed 's/^\t\t//' << EOF >$dummy.c\n+\t\teval \"$set_cc_for_build\"\n+\t\tsed 's/^\t\t//' << EOF > \"$dummy.c\"\n \t\t#include <sys/systemcfg.h>\n \n \t\tmain()\n@@ -577,7 +591,7 @@ EOF\n \t\t\texit(0);\n \t\t\t}\n EOF\n-\t\tif $CC_FOR_BUILD -o $dummy $dummy.c && SYSTEM_NAME=`$dummy`\n+\t\tif $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" && SYSTEM_NAME=`\"$dummy\"`\n \t\tthen\n \t\t\techo \"$SYSTEM_NAME\"\n \t\telse\n@@ -591,7 +605,7 @@ EOF\n \texit ;;\n     *:AIX:*:[4567])\n \tIBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`\n-\tif /usr/sbin/lsattr -El ${IBM_CPU_ID} | grep ' POWER' >/dev/null 2>&1; then\n+\tif /usr/sbin/lsattr -El \"$IBM_CPU_ID\" | grep ' POWER' >/dev/null 2>&1; then\n \t\tIBM_ARCH=rs6000\n \telse\n \t\tIBM_ARCH=powerpc\n@@ -600,18 +614,18 @@ EOF\n \t\tIBM_REV=`/usr/bin/lslpp -Lqc bos.rte.libc |\n \t\t\t   awk -F: '{ print $3 }' | sed s/[0-9]*$/0/`\n \telse\n-\t\tIBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}\n+\t\tIBM_REV=\"$UNAME_VERSION.$UNAME_RELEASE\"\n \tfi\n-\techo ${IBM_ARCH}-ibm-aix${IBM_REV}\n+\techo \"$IBM_ARCH\"-ibm-aix\"$IBM_REV\"\n \texit ;;\n     *:AIX:*:*)\n \techo rs6000-ibm-aix\n \texit ;;\n-    ibmrt:4.4BSD:*|romp-ibm:BSD:*)\n+    ibmrt:4.4BSD:*|romp-ibm:4.4BSD:*)\n \techo romp-ibm-bsd4.4\n \texit ;;\n     ibmrt:*BSD:*|romp-ibm:BSD:*)            # covers RT/PC BSD and\n-\techo romp-ibm-bsd${UNAME_RELEASE}   # 4.3 with uname added to\n+\techo romp-ibm-bsd\"$UNAME_RELEASE\"   # 4.3 with uname added to\n \texit ;;                             # report: romp-ibm BSD 4.3\n     *:BOSX:*:*)\n \techo rs6000-bull-bosx\n@@ -626,28 +640,28 @@ EOF\n \techo m68k-hp-bsd4.4\n \texit ;;\n     9000/[34678]??:HP-UX:*:*)\n-\tHPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`\n-\tcase \"${UNAME_MACHINE}\" in\n-\t    9000/31? )            HP_ARCH=m68000 ;;\n-\t    9000/[34]?? )         HP_ARCH=m68k ;;\n+\tHPUX_REV=`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*.[0B]*//'`\n+\tcase \"$UNAME_MACHINE\" in\n+\t    9000/31?)            HP_ARCH=m68000 ;;\n+\t    9000/[34]??)         HP_ARCH=m68k ;;\n \t    9000/[678][0-9][0-9])\n \t\tif [ -x /usr/bin/getconf ]; then\n \t\t    sc_cpu_version=`/usr/bin/getconf SC_CPU_VERSION 2>/dev/null`\n \t\t    sc_kernel_bits=`/usr/bin/getconf SC_KERNEL_BITS 2>/dev/null`\n-\t\t    case \"${sc_cpu_version}\" in\n-\t\t      523) HP_ARCH=\"hppa1.0\" ;; # CPU_PA_RISC1_0\n-\t\t      528) HP_ARCH=\"hppa1.1\" ;; # CPU_PA_RISC1_1\n+\t\t    case \"$sc_cpu_version\" in\n+\t\t      523) HP_ARCH=hppa1.0 ;; # CPU_PA_RISC1_0\n+\t\t      528) HP_ARCH=hppa1.1 ;; # CPU_PA_RISC1_1\n \t\t      532)                      # CPU_PA_RISC2_0\n-\t\t\tcase \"${sc_kernel_bits}\" in\n-\t\t\t  32) HP_ARCH=\"hppa2.0n\" ;;\n-\t\t\t  64) HP_ARCH=\"hppa2.0w\" ;;\n-\t\t\t  '') HP_ARCH=\"hppa2.0\" ;;   # HP-UX 10.20\n+\t\t\tcase \"$sc_kernel_bits\" in\n+\t\t\t  32) HP_ARCH=hppa2.0n ;;\n+\t\t\t  64) HP_ARCH=hppa2.0w ;;\n+\t\t\t  '') HP_ARCH=hppa2.0 ;;   # HP-UX 10.20\n \t\t\tesac ;;\n \t\t    esac\n \t\tfi\n-\t\tif [ \"${HP_ARCH}\" = \"\" ]; then\n-\t\t    eval $set_cc_for_build\n-\t\t    sed 's/^\t\t//' << EOF >$dummy.c\n+\t\tif [ \"$HP_ARCH\" = \"\" ]; then\n+\t\t    eval \"$set_cc_for_build\"\n+\t\t    sed 's/^\t\t//' << EOF > \"$dummy.c\"\n \n \t\t#define _HPUX_SOURCE\n \t\t#include <stdlib.h>\n@@ -680,13 +694,13 @@ EOF\n \t\t    exit (0);\n \t\t}\n EOF\n-\t\t    (CCOPTS= $CC_FOR_BUILD -o $dummy $dummy.c 2>/dev/null) && HP_ARCH=`$dummy`\n+\t\t    (CCOPTS=\"\" $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" 2>/dev/null) && HP_ARCH=`\"$dummy\"`\n \t\t    test -z \"$HP_ARCH\" && HP_ARCH=hppa\n \t\tfi ;;\n \tesac\n-\tif [ ${HP_ARCH} = \"hppa2.0w\" ]\n+\tif [ \"$HP_ARCH\" = hppa2.0w ]\n \tthen\n-\t    eval $set_cc_for_build\n+\t    eval \"$set_cc_for_build\"\n \n \t    # hppa2.0w-hp-hpux* has a 64-bit kernel and a compiler generating\n \t    # 32-bit code.  hppa64-hp-hpux* has the same kernel and a compiler\n@@ -697,23 +711,23 @@ EOF\n \t    # $ CC_FOR_BUILD=\"cc +DA2.0w\" ./config.guess\n \t    # => hppa64-hp-hpux11.23\n \n-\t    if echo __LP64__ | (CCOPTS= $CC_FOR_BUILD -E - 2>/dev/null) |\n+\t    if echo __LP64__ | (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) |\n \t\tgrep -q __LP64__\n \t    then\n-\t\tHP_ARCH=\"hppa2.0w\"\n+\t\tHP_ARCH=hppa2.0w\n \t    else\n-\t\tHP_ARCH=\"hppa64\"\n+\t\tHP_ARCH=hppa64\n \t    fi\n \tfi\n-\techo ${HP_ARCH}-hp-hpux${HPUX_REV}\n+\techo \"$HP_ARCH\"-hp-hpux\"$HPUX_REV\"\n \texit ;;\n     ia64:HP-UX:*:*)\n-\tHPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`\n-\techo ia64-hp-hpux${HPUX_REV}\n+\tHPUX_REV=`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*.[0B]*//'`\n+\techo ia64-hp-hpux\"$HPUX_REV\"\n \texit ;;\n     3050*:HI-UX:*:*)\n-\teval $set_cc_for_build\n-\tsed 's/^\t//' << EOF >$dummy.c\n+\teval \"$set_cc_for_build\"\n+\tsed 's/^\t//' << EOF > \"$dummy.c\"\n \t#include <unistd.h>\n \tint\n \tmain ()\n@@ -738,11 +752,11 @@ EOF\n \t  exit (0);\n \t}\n EOF\n-\t$CC_FOR_BUILD -o $dummy $dummy.c && SYSTEM_NAME=`$dummy` &&\n+\t$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" && SYSTEM_NAME=`\"$dummy\"` &&\n \t\t{ echo \"$SYSTEM_NAME\"; exit; }\n \techo unknown-hitachi-hiuxwe2\n \texit ;;\n-    9000/7??:4.3bsd:*:* | 9000/8?[79]:4.3bsd:*:* )\n+    9000/7??:4.3bsd:*:* | 9000/8?[79]:4.3bsd:*:*)\n \techo hppa1.1-hp-bsd\n \texit ;;\n     9000/8??:4.3bsd:*:*)\n@@ -751,17 +765,17 @@ EOF\n     *9??*:MPE/iX:*:* | *3000*:MPE/iX:*:*)\n \techo hppa1.0-hp-mpeix\n \texit ;;\n-    hp7??:OSF1:*:* | hp8?[79]:OSF1:*:* )\n+    hp7??:OSF1:*:* | hp8?[79]:OSF1:*:*)\n \techo hppa1.1-hp-osf\n \texit ;;\n     hp8??:OSF1:*:*)\n \techo hppa1.0-hp-osf\n \texit ;;\n     i*86:OSF1:*:*)\n \tif [ -x /usr/sbin/sysversion ] ; then\n-\t    echo ${UNAME_MACHINE}-unknown-osf1mk\n+\t    echo \"$UNAME_MACHINE\"-unknown-osf1mk\n \telse\n-\t    echo ${UNAME_MACHINE}-unknown-osf1\n+\t    echo \"$UNAME_MACHINE\"-unknown-osf1\n \tfi\n \texit ;;\n     parisc*:Lites*:*:*)\n@@ -786,127 +800,109 @@ EOF\n \techo c4-convex-bsd\n \texit ;;\n     CRAY*Y-MP:*:*:*)\n-\techo ymp-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo ymp-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     CRAY*[A-Z]90:*:*:*)\n-\techo ${UNAME_MACHINE}-cray-unicos${UNAME_RELEASE} \\\n+\techo \"$UNAME_MACHINE\"-cray-unicos\"$UNAME_RELEASE\" \\\n \t| sed -e 's/CRAY.*\\([A-Z]90\\)/\\1/' \\\n \t      -e y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/ \\\n \t      -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     CRAY*TS:*:*:*)\n-\techo t90-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo t90-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     CRAY*T3E:*:*:*)\n-\techo alphaev5-cray-unicosmk${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo alphaev5-cray-unicosmk\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     CRAY*SV1:*:*:*)\n-\techo sv1-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo sv1-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     *:UNICOS/mp:*:*)\n-\techo craynv-cray-unicosmp${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo craynv-cray-unicosmp\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)\n-\tFUJITSU_PROC=`uname -m | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-\tFUJITSU_SYS=`uname -p | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sed -e 's/\\///'`\n-\tFUJITSU_REL=`echo ${UNAME_RELEASE} | sed -e 's/ /_/'`\n+\tFUJITSU_PROC=`uname -m | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n+\tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n+\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/ /_/'`\n \techo \"${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"\n \texit ;;\n     5000:UNIX_System_V:4.*:*)\n-\tFUJITSU_SYS=`uname -p | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sed -e 's/\\///'`\n-\tFUJITSU_REL=`echo ${UNAME_RELEASE} | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sed -e 's/ /_/'`\n+\tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n+\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/'`\n \techo \"sparc-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"\n \texit ;;\n     i*86:BSD/386:*:* | i*86:BSD/OS:*:* | *:Ascend\\ Embedded/OS:*:*)\n-\techo ${UNAME_MACHINE}-pc-bsdi${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-pc-bsdi\"$UNAME_RELEASE\"\n \texit ;;\n     sparc*:BSD/OS:*:*)\n-\techo sparc-unknown-bsdi${UNAME_RELEASE}\n+\techo sparc-unknown-bsdi\"$UNAME_RELEASE\"\n \texit ;;\n     *:BSD/OS:*:*)\n-\techo ${UNAME_MACHINE}-unknown-bsdi${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-unknown-bsdi\"$UNAME_RELEASE\"\n \texit ;;\n     *:FreeBSD:*:*)\n \tUNAME_PROCESSOR=`/usr/bin/uname -p`\n-\tcase ${UNAME_PROCESSOR} in\n+\tcase \"$UNAME_PROCESSOR\" in\n \t    amd64)\n-\t\techo x86_64-unknown-freebsd`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'` ;;\n-\t    *)\n-\t\techo ${UNAME_PROCESSOR}-unknown-freebsd`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'` ;;\n+\t\tUNAME_PROCESSOR=x86_64 ;;\n+\t    i386)\n+\t\tUNAME_PROCESSOR=i586 ;;\n \tesac\n+\techo \"$UNAME_PROCESSOR\"-unknown-freebsd\"`echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`\"\n \texit ;;\n     i*:CYGWIN*:*)\n-\techo ${UNAME_MACHINE}-pc-cygwin\n+\techo \"$UNAME_MACHINE\"-pc-cygwin\n \texit ;;\n     *:MINGW64*:*)\n-\techo ${UNAME_MACHINE}-pc-mingw64\n+\techo \"$UNAME_MACHINE\"-pc-mingw64\n \texit ;;\n     *:MINGW*:*)\n-\techo ${UNAME_MACHINE}-pc-mingw32\n+\techo \"$UNAME_MACHINE\"-pc-mingw32\n \texit ;;\n     *:MSYS*:*)\n-\techo ${UNAME_MACHINE}-pc-msys\n-\texit ;;\n-    i*:windows32*:*)\n-\t# uname -m includes \"-pc\" on this system.\n-\techo ${UNAME_MACHINE}-mingw32\n+\techo \"$UNAME_MACHINE\"-pc-msys\n \texit ;;\n     i*:PW*:*)\n-\techo ${UNAME_MACHINE}-pc-pw32\n+\techo \"$UNAME_MACHINE\"-pc-pw32\n \texit ;;\n     *:Interix*:*)\n-\tcase ${UNAME_MACHINE} in\n+\tcase \"$UNAME_MACHINE\" in\n \t    x86)\n-\t\techo i586-pc-interix${UNAME_RELEASE}\n+\t\techo i586-pc-interix\"$UNAME_RELEASE\"\n \t\texit ;;\n \t    authenticamd | genuineintel | EM64T)\n-\t\techo x86_64-unknown-interix${UNAME_RELEASE}\n+\t\techo x86_64-unknown-interix\"$UNAME_RELEASE\"\n \t\texit ;;\n \t    IA64)\n-\t\techo ia64-unknown-interix${UNAME_RELEASE}\n+\t\techo ia64-unknown-interix\"$UNAME_RELEASE\"\n \t\texit ;;\n \tesac ;;\n-    [345]86:Windows_95:* | [345]86:Windows_98:* | [345]86:Windows_NT:*)\n-\techo i${UNAME_MACHINE}-pc-mks\n-\texit ;;\n-    8664:Windows_NT:*)\n-\techo x86_64-pc-mks\n-\texit ;;\n-    i*:Windows_NT*:* | Pentium*:Windows_NT*:*)\n-\t# How do we know it's Interix rather than the generic POSIX subsystem?\n-\t# It also conflicts with pre-2.0 versions of AT&T UWIN. Should we\n-\t# UNAME_MACHINE based on the output of uname instead of i386?\n-\techo i586-pc-interix\n-\texit ;;\n     i*:UWIN*:*)\n-\techo ${UNAME_MACHINE}-pc-uwin\n+\techo \"$UNAME_MACHINE\"-pc-uwin\n \texit ;;\n     amd64:CYGWIN*:*:* | x86_64:CYGWIN*:*:*)\n \techo x86_64-unknown-cygwin\n \texit ;;\n-    p*:CYGWIN*:*)\n-\techo powerpcle-unknown-cygwin\n-\texit ;;\n     prep*:SunOS:5.*:*)\n-\techo powerpcle-unknown-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo powerpcle-unknown-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n \texit ;;\n     *:GNU:*:*)\n \t# the GNU system\n-\techo `echo ${UNAME_MACHINE}|sed -e 's,[-/].*$,,'`-unknown-${LIBC}`echo ${UNAME_RELEASE}|sed -e 's,/.*$,,'`\n+\techo \"`echo \"$UNAME_MACHINE\"|sed -e 's,[-/].*$,,'`-unknown-$LIBC`echo \"$UNAME_RELEASE\"|sed -e 's,/.*$,,'`\"\n \texit ;;\n     *:GNU/*:*:*)\n \t# other systems with GNU libc and userland\n-\techo ${UNAME_MACHINE}-unknown-`echo ${UNAME_SYSTEM} | sed 's,^[^/]*/,,' | tr '[A-Z]' '[a-z]'``echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`-${LIBC}\n+\techo \"$UNAME_MACHINE-unknown-`echo \"$UNAME_SYSTEM\" | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"``echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`-$LIBC\"\n \texit ;;\n     i*86:Minix:*:*)\n-\techo ${UNAME_MACHINE}-pc-minix\n+\techo \"$UNAME_MACHINE\"-pc-minix\n \texit ;;\n     aarch64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     aarch64_be:Linux:*:*)\n \tUNAME_MACHINE=aarch64_be\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     alpha:Linux:*:*)\n \tcase `sed -n '/^cpu model/s/^.*: \\(.*\\)/\\1/p' < /proc/cpuinfo` in\n@@ -919,64 +915,64 @@ EOF\n \t  EV68*) UNAME_MACHINE=alphaev68 ;;\n \tesac\n \tobjdump --private-headers /bin/sh | grep -q ld.so.1\n-\tif test \"$?\" = 0 ; then LIBC=\"gnulibc1\" ; fi\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\tif test \"$?\" = 0 ; then LIBC=gnulibc1 ; fi\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     arc:Linux:*:* | arceb:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     arm*:Linux:*:*)\n-\teval $set_cc_for_build\n+\teval \"$set_cc_for_build\"\n \tif echo __ARM_EABI__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n \t    | grep -q __ARM_EABI__\n \tthen\n-\t    echo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\t    echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \telse\n \t    if echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\\n \t\t| grep -q __ARM_PCS_VFP\n \t    then\n-\t\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}eabi\n+\t\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"eabi\n \t    else\n-\t\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}eabihf\n+\t\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"eabihf\n \t    fi\n \tfi\n \texit ;;\n     avr32*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     cris:Linux:*:*)\n-\techo ${UNAME_MACHINE}-axis-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-axis-linux-\"$LIBC\"\n \texit ;;\n     crisv32:Linux:*:*)\n-\techo ${UNAME_MACHINE}-axis-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-axis-linux-\"$LIBC\"\n \texit ;;\n     e2k:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     frv:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     hexagon:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     i*86:Linux:*:*)\n-\techo ${UNAME_MACHINE}-pc-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-pc-linux-\"$LIBC\"\n \texit ;;\n     ia64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     k1om:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     m32r*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     m68*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     mips:Linux:*:* | mips64:Linux:*:*)\n-\teval $set_cc_for_build\n-\tsed 's/^\t//' << EOF >$dummy.c\n+\teval \"$set_cc_for_build\"\n+\tsed 's/^\t//' << EOF > \"$dummy.c\"\n \t#undef CPU\n \t#undef ${UNAME_MACHINE}\n \t#undef ${UNAME_MACHINE}el\n@@ -990,64 +986,70 @@ EOF\n \t#endif\n \t#endif\n EOF\n-\teval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep '^CPU'`\n-\ttest x\"${CPU}\" != x && { echo \"${CPU}-unknown-linux-${LIBC}\"; exit; }\n+\teval \"`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^CPU'`\"\n+\ttest \"x$CPU\" != x && { echo \"$CPU-unknown-linux-$LIBC\"; exit; }\n \t;;\n+    mips64el:Linux:*:*)\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n+\texit ;;\n     openrisc*:Linux:*:*)\n-\techo or1k-unknown-linux-${LIBC}\n+\techo or1k-unknown-linux-\"$LIBC\"\n \texit ;;\n     or32:Linux:*:* | or1k*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     padre:Linux:*:*)\n-\techo sparc-unknown-linux-${LIBC}\n+\techo sparc-unknown-linux-\"$LIBC\"\n \texit ;;\n     parisc64:Linux:*:* | hppa64:Linux:*:*)\n-\techo hppa64-unknown-linux-${LIBC}\n+\techo hppa64-unknown-linux-\"$LIBC\"\n \texit ;;\n     parisc:Linux:*:* | hppa:Linux:*:*)\n \t# Look for CPU level\n \tcase `grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2` in\n-\t  PA7*) echo hppa1.1-unknown-linux-${LIBC} ;;\n-\t  PA8*) echo hppa2.0-unknown-linux-${LIBC} ;;\n-\t  *)    echo hppa-unknown-linux-${LIBC} ;;\n+\t  PA7*) echo hppa1.1-unknown-linux-\"$LIBC\" ;;\n+\t  PA8*) echo hppa2.0-unknown-linux-\"$LIBC\" ;;\n+\t  *)    echo hppa-unknown-linux-\"$LIBC\" ;;\n \tesac\n \texit ;;\n     ppc64:Linux:*:*)\n-\techo powerpc64-unknown-linux-${LIBC}\n+\techo powerpc64-unknown-linux-\"$LIBC\"\n \texit ;;\n     ppc:Linux:*:*)\n-\techo powerpc-unknown-linux-${LIBC}\n+\techo powerpc-unknown-linux-\"$LIBC\"\n \texit ;;\n     ppc64le:Linux:*:*)\n-\techo powerpc64le-unknown-linux-${LIBC}\n+\techo powerpc64le-unknown-linux-\"$LIBC\"\n \texit ;;\n     ppcle:Linux:*:*)\n-\techo powerpcle-unknown-linux-${LIBC}\n+\techo powerpcle-unknown-linux-\"$LIBC\"\n+\texit ;;\n+    riscv32:Linux:*:* | riscv64:Linux:*:*)\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     s390:Linux:*:* | s390x:Linux:*:*)\n-\techo ${UNAME_MACHINE}-ibm-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-ibm-linux-\"$LIBC\"\n \texit ;;\n     sh64*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     sh*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     sparc:Linux:*:* | sparc64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     tile*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     vax:Linux:*:*)\n-\techo ${UNAME_MACHINE}-dec-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-dec-linux-\"$LIBC\"\n \texit ;;\n     x86_64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-pc-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-pc-linux-\"$LIBC\"\n \texit ;;\n     xtensa*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     i*86:DYNIX/ptx:4*:*)\n \t# ptx 4.0 does uname -s correctly, with DYNIX/ptx in there.\n@@ -1061,34 +1063,34 @@ EOF\n \t# I am not positive that other SVR4 systems won't match this,\n \t# I just have to hope.  -- rms.\n \t# Use sysv4.2uw... so that sysv4* matches it.\n-\techo ${UNAME_MACHINE}-pc-sysv4.2uw${UNAME_VERSION}\n+\techo \"$UNAME_MACHINE\"-pc-sysv4.2uw\"$UNAME_VERSION\"\n \texit ;;\n     i*86:OS/2:*:*)\n \t# If we were able to find `uname', then EMX Unix compatibility\n \t# is probably installed.\n-\techo ${UNAME_MACHINE}-pc-os2-emx\n+\techo \"$UNAME_MACHINE\"-pc-os2-emx\n \texit ;;\n     i*86:XTS-300:*:STOP)\n-\techo ${UNAME_MACHINE}-unknown-stop\n+\techo \"$UNAME_MACHINE\"-unknown-stop\n \texit ;;\n     i*86:atheos:*:*)\n-\techo ${UNAME_MACHINE}-unknown-atheos\n+\techo \"$UNAME_MACHINE\"-unknown-atheos\n \texit ;;\n     i*86:syllable:*:*)\n-\techo ${UNAME_MACHINE}-pc-syllable\n+\techo \"$UNAME_MACHINE\"-pc-syllable\n \texit ;;\n     i*86:LynxOS:2.*:* | i*86:LynxOS:3.[01]*:* | i*86:LynxOS:4.[02]*:*)\n-\techo i386-unknown-lynxos${UNAME_RELEASE}\n+\techo i386-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     i*86:*DOS:*:*)\n-\techo ${UNAME_MACHINE}-pc-msdosdjgpp\n+\techo \"$UNAME_MACHINE\"-pc-msdosdjgpp\n \texit ;;\n-    i*86:*:4.*:* | i*86:SYSTEM_V:4.*:*)\n-\tUNAME_REL=`echo ${UNAME_RELEASE} | sed 's/\\/MP$//'`\n+    i*86:*:4.*:*)\n+\tUNAME_REL=`echo \"$UNAME_RELEASE\" | sed 's/\\/MP$//'`\n \tif grep Novell /usr/include/link.h >/dev/null 2>/dev/null; then\n-\t\techo ${UNAME_MACHINE}-univel-sysv${UNAME_REL}\n+\t\techo \"$UNAME_MACHINE\"-univel-sysv\"$UNAME_REL\"\n \telse\n-\t\techo ${UNAME_MACHINE}-pc-sysv${UNAME_REL}\n+\t\techo \"$UNAME_MACHINE\"-pc-sysv\"$UNAME_REL\"\n \tfi\n \texit ;;\n     i*86:*:5:[678]*)\n@@ -1098,12 +1100,12 @@ EOF\n \t    *Pentium)\t     UNAME_MACHINE=i586 ;;\n \t    *Pent*|*Celeron) UNAME_MACHINE=i686 ;;\n \tesac\n-\techo ${UNAME_MACHINE}-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}${UNAME_VERSION}\n+\techo \"$UNAME_MACHINE-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}{$UNAME_VERSION}\"\n \texit ;;\n     i*86:*:3.2:*)\n \tif test -f /usr/options/cb.name; then\n \t\tUNAME_REL=`sed -n 's/.*Version //p' </usr/options/cb.name`\n-\t\techo ${UNAME_MACHINE}-pc-isc$UNAME_REL\n+\t\techo \"$UNAME_MACHINE\"-pc-isc\"$UNAME_REL\"\n \telif /bin/uname -X 2>/dev/null >/dev/null ; then\n \t\tUNAME_REL=`(/bin/uname -X|grep Release|sed -e 's/.*= //')`\n \t\t(/bin/uname -X|grep i80486 >/dev/null) && UNAME_MACHINE=i486\n@@ -1113,9 +1115,9 @@ EOF\n \t\t\t&& UNAME_MACHINE=i686\n \t\t(/bin/uname -X|grep '^Machine.*Pentium Pro' >/dev/null) \\\n \t\t\t&& UNAME_MACHINE=i686\n-\t\techo ${UNAME_MACHINE}-pc-sco$UNAME_REL\n+\t\techo \"$UNAME_MACHINE\"-pc-sco\"$UNAME_REL\"\n \telse\n-\t\techo ${UNAME_MACHINE}-pc-sysv32\n+\t\techo \"$UNAME_MACHINE\"-pc-sysv32\n \tfi\n \texit ;;\n     pc:*:*:*)\n@@ -1135,9 +1137,9 @@ EOF\n \texit ;;\n     i860:*:4.*:*) # i860-SVR4\n \tif grep Stardent /usr/include/sys/uadmin.h >/dev/null 2>&1 ; then\n-\t  echo i860-stardent-sysv${UNAME_RELEASE} # Stardent Vistra i860-SVR4\n+\t  echo i860-stardent-sysv\"$UNAME_RELEASE\" # Stardent Vistra i860-SVR4\n \telse # Add other i860-SVR4 vendors below as they are discovered.\n-\t  echo i860-unknown-sysv${UNAME_RELEASE}  # Unknown i860-SVR4\n+\t  echo i860-unknown-sysv\"$UNAME_RELEASE\"  # Unknown i860-SVR4\n \tfi\n \texit ;;\n     mini*:CTIX:SYS*5:*)\n@@ -1157,9 +1159,9 @@ EOF\n \ttest -r /etc/.relid \\\n \t&& OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n \t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n-\t  && { echo i486-ncr-sysv4.3${OS_REL}; exit; }\n+\t  && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }\n \t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n-\t  && { echo i586-ncr-sysv4.3${OS_REL}; exit; } ;;\n+\t  && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;\n     3[34]??:*:4.0:* | 3[34]??,*:*:4.0:*)\n \t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n \t  && { echo i486-ncr-sysv4; exit; } ;;\n@@ -1168,28 +1170,28 @@ EOF\n \ttest -r /etc/.relid \\\n \t    && OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n \t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n-\t    && { echo i486-ncr-sysv4.3${OS_REL}; exit; }\n+\t    && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }\n \t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n-\t    && { echo i586-ncr-sysv4.3${OS_REL}; exit; }\n+\t    && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; }\n \t/bin/uname -p 2>/dev/null | /bin/grep pteron >/dev/null \\\n-\t    && { echo i586-ncr-sysv4.3${OS_REL}; exit; } ;;\n+\t    && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;\n     m68*:LynxOS:2.*:* | m68*:LynxOS:3.0*:*)\n-\techo m68k-unknown-lynxos${UNAME_RELEASE}\n+\techo m68k-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     mc68030:UNIX_System_V:4.*:*)\n \techo m68k-atari-sysv4\n \texit ;;\n     TSUNAMI:LynxOS:2.*:*)\n-\techo sparc-unknown-lynxos${UNAME_RELEASE}\n+\techo sparc-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     rs6000:LynxOS:2.*:*)\n-\techo rs6000-unknown-lynxos${UNAME_RELEASE}\n+\techo rs6000-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     PowerPC:LynxOS:2.*:* | PowerPC:LynxOS:3.[01]*:* | PowerPC:LynxOS:4.[02]*:*)\n-\techo powerpc-unknown-lynxos${UNAME_RELEASE}\n+\techo powerpc-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     SM[BE]S:UNIX_SV:*:*)\n-\techo mips-dde-sysv${UNAME_RELEASE}\n+\techo mips-dde-sysv\"$UNAME_RELEASE\"\n \texit ;;\n     RM*:ReliantUNIX-*:*:*)\n \techo mips-sni-sysv4\n@@ -1200,7 +1202,7 @@ EOF\n     *:SINIX-*:*:*)\n \tif uname -p 2>/dev/null >/dev/null ; then\n \t\tUNAME_MACHINE=`(uname -p) 2>/dev/null`\n-\t\techo ${UNAME_MACHINE}-sni-sysv4\n+\t\techo \"$UNAME_MACHINE\"-sni-sysv4\n \telse\n \t\techo ns32k-sni-sysv\n \tfi\n@@ -1220,23 +1222,23 @@ EOF\n \texit ;;\n     i*86:VOS:*:*)\n \t# From Paul.Green@stratus.com.\n-\techo ${UNAME_MACHINE}-stratus-vos\n+\techo \"$UNAME_MACHINE\"-stratus-vos\n \texit ;;\n     *:VOS:*:*)\n \t# From Paul.Green@stratus.com.\n \techo hppa1.1-stratus-vos\n \texit ;;\n     mc68*:A/UX:*:*)\n-\techo m68k-apple-aux${UNAME_RELEASE}\n+\techo m68k-apple-aux\"$UNAME_RELEASE\"\n \texit ;;\n     news*:NEWS-OS:6*:*)\n \techo mips-sony-newsos6\n \texit ;;\n     R[34]000:*System_V*:*:* | R4000:UNIX_SYSV:*:* | R*000:UNIX_SV:*:*)\n \tif [ -d /usr/nec ]; then\n-\t\techo mips-nec-sysv${UNAME_RELEASE}\n+\t\techo mips-nec-sysv\"$UNAME_RELEASE\"\n \telse\n-\t\techo mips-unknown-sysv${UNAME_RELEASE}\n+\t\techo mips-unknown-sysv\"$UNAME_RELEASE\"\n \tfi\n \texit ;;\n     BeBox:BeOS:*:*)\t# BeOS running on hardware made by Be, PPC only.\n@@ -1255,46 +1257,56 @@ EOF\n \techo x86_64-unknown-haiku\n \texit ;;\n     SX-4:SUPER-UX:*:*)\n-\techo sx4-nec-superux${UNAME_RELEASE}\n+\techo sx4-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-5:SUPER-UX:*:*)\n-\techo sx5-nec-superux${UNAME_RELEASE}\n+\techo sx5-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-6:SUPER-UX:*:*)\n-\techo sx6-nec-superux${UNAME_RELEASE}\n+\techo sx6-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-7:SUPER-UX:*:*)\n-\techo sx7-nec-superux${UNAME_RELEASE}\n+\techo sx7-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-8:SUPER-UX:*:*)\n-\techo sx8-nec-superux${UNAME_RELEASE}\n+\techo sx8-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-8R:SUPER-UX:*:*)\n-\techo sx8r-nec-superux${UNAME_RELEASE}\n+\techo sx8r-nec-superux\"$UNAME_RELEASE\"\n+\texit ;;\n+    SX-ACE:SUPER-UX:*:*)\n+\techo sxace-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     Power*:Rhapsody:*:*)\n-\techo powerpc-apple-rhapsody${UNAME_RELEASE}\n+\techo powerpc-apple-rhapsody\"$UNAME_RELEASE\"\n \texit ;;\n     *:Rhapsody:*:*)\n-\techo ${UNAME_MACHINE}-apple-rhapsody${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-apple-rhapsody\"$UNAME_RELEASE\"\n \texit ;;\n     *:Darwin:*:*)\n \tUNAME_PROCESSOR=`uname -p` || UNAME_PROCESSOR=unknown\n-\teval $set_cc_for_build\n+\teval \"$set_cc_for_build\"\n \tif test \"$UNAME_PROCESSOR\" = unknown ; then\n \t    UNAME_PROCESSOR=powerpc\n \tfi\n-\tif test `echo \"$UNAME_RELEASE\" | sed -e 's/\\..*//'` -le 10 ; then\n-\t    if [ \"$CC_FOR_BUILD\" != 'no_compiler_found' ]; then\n+\tif test \"`echo \"$UNAME_RELEASE\" | sed -e 's/\\..*//'`\" -le 10 ; then\n+\t    if [ \"$CC_FOR_BUILD\" != no_compiler_found ]; then\n \t\tif (echo '#ifdef __LP64__'; echo IS_64BIT_ARCH; echo '#endif') | \\\n-\t\t    (CCOPTS= $CC_FOR_BUILD -E - 2>/dev/null) | \\\n-\t\t    grep IS_64BIT_ARCH >/dev/null\n+\t\t       (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n+\t\t       grep IS_64BIT_ARCH >/dev/null\n \t\tthen\n \t\t    case $UNAME_PROCESSOR in\n \t\t\ti386) UNAME_PROCESSOR=x86_64 ;;\n \t\t\tpowerpc) UNAME_PROCESSOR=powerpc64 ;;\n \t\t    esac\n \t\tfi\n+\t\t# On 10.4-10.6 one might compile for PowerPC via gcc -arch ppc\n+\t\tif (echo '#ifdef __POWERPC__'; echo IS_PPC; echo '#endif') | \\\n+\t\t       (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n+\t\t       grep IS_PPC >/dev/null\n+\t\tthen\n+\t\t    UNAME_PROCESSOR=powerpc\n+\t\tfi\n \t    fi\n \telif test \"$UNAME_PROCESSOR\" = i386 ; then\n \t    # Avoid executing cc on OS X 10.9, as it ships with a stub\n@@ -1305,27 +1317,33 @@ EOF\n \t    # that Apple uses in portable devices.\n \t    UNAME_PROCESSOR=x86_64\n \tfi\n-\techo ${UNAME_PROCESSOR}-apple-darwin${UNAME_RELEASE}\n+\techo \"$UNAME_PROCESSOR\"-apple-darwin\"$UNAME_RELEASE\"\n \texit ;;\n     *:procnto*:*:* | *:QNX:[0123456789]*:*)\n \tUNAME_PROCESSOR=`uname -p`\n-\tif test \"$UNAME_PROCESSOR\" = \"x86\"; then\n+\tif test \"$UNAME_PROCESSOR\" = x86; then\n \t\tUNAME_PROCESSOR=i386\n \t\tUNAME_MACHINE=pc\n \tfi\n-\techo ${UNAME_PROCESSOR}-${UNAME_MACHINE}-nto-qnx${UNAME_RELEASE}\n+\techo \"$UNAME_PROCESSOR\"-\"$UNAME_MACHINE\"-nto-qnx\"$UNAME_RELEASE\"\n \texit ;;\n     *:QNX:*:4*)\n \techo i386-pc-qnx\n \texit ;;\n-    NEO-?:NONSTOP_KERNEL:*:*)\n-\techo neo-tandem-nsk${UNAME_RELEASE}\n+    NEO-*:NONSTOP_KERNEL:*:*)\n+\techo neo-tandem-nsk\"$UNAME_RELEASE\"\n \texit ;;\n     NSE-*:NONSTOP_KERNEL:*:*)\n-\techo nse-tandem-nsk${UNAME_RELEASE}\n+\techo nse-tandem-nsk\"$UNAME_RELEASE\"\n+\texit ;;\n+    NSR-*:NONSTOP_KERNEL:*:*)\n+\techo nsr-tandem-nsk\"$UNAME_RELEASE\"\n \texit ;;\n-    NSR-?:NONSTOP_KERNEL:*:*)\n-\techo nsr-tandem-nsk${UNAME_RELEASE}\n+    NSV-*:NONSTOP_KERNEL:*:*)\n+\techo nsv-tandem-nsk\"$UNAME_RELEASE\"\n+\texit ;;\n+    NSX-*:NONSTOP_KERNEL:*:*)\n+\techo nsx-tandem-nsk\"$UNAME_RELEASE\"\n \texit ;;\n     *:NonStop-UX:*:*)\n \techo mips-compaq-nonstopux\n@@ -1334,18 +1352,18 @@ EOF\n \techo bs2000-siemens-sysv\n \texit ;;\n     DS/*:UNIX_System_V:*:*)\n-\techo ${UNAME_MACHINE}-${UNAME_SYSTEM}-${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-\"$UNAME_SYSTEM\"-\"$UNAME_RELEASE\"\n \texit ;;\n     *:Plan9:*:*)\n \t# \"uname -m\" is not consistent, so use $cputype instead. 386\n \t# is converted to i386 for consistency with other x86\n \t# operating systems.\n-\tif test \"$cputype\" = \"386\"; then\n+\tif test \"$cputype\" = 386; then\n \t    UNAME_MACHINE=i386\n \telse\n \t    UNAME_MACHINE=\"$cputype\"\n \tfi\n-\techo ${UNAME_MACHINE}-unknown-plan9\n+\techo \"$UNAME_MACHINE\"-unknown-plan9\n \texit ;;\n     *:TOPS-10:*:*)\n \techo pdp10-unknown-tops10\n@@ -1366,14 +1384,14 @@ EOF\n \techo pdp10-unknown-its\n \texit ;;\n     SEI:*:*:SEIUX)\n-\techo mips-sei-seiux${UNAME_RELEASE}\n+\techo mips-sei-seiux\"$UNAME_RELEASE\"\n \texit ;;\n     *:DragonFly:*:*)\n-\techo ${UNAME_MACHINE}-unknown-dragonfly`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`\n+\techo \"$UNAME_MACHINE\"-unknown-dragonfly\"`echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`\"\n \texit ;;\n     *:*VMS:*:*)\n \tUNAME_MACHINE=`(uname -p) 2>/dev/null`\n-\tcase \"${UNAME_MACHINE}\" in\n+\tcase \"$UNAME_MACHINE\" in\n \t    A*) echo alpha-dec-vms ; exit ;;\n \t    I*) echo ia64-dec-vms ; exit ;;\n \t    V*) echo vax-dec-vms ; exit ;;\n@@ -1382,37 +1400,48 @@ EOF\n \techo i386-pc-xenix\n \texit ;;\n     i*86:skyos:*:*)\n-\techo ${UNAME_MACHINE}-pc-skyos`echo ${UNAME_RELEASE}` | sed -e 's/ .*$//'\n+\techo \"$UNAME_MACHINE\"-pc-skyos\"`echo \"$UNAME_RELEASE\" | sed -e 's/ .*$//'`\"\n \texit ;;\n     i*86:rdos:*:*)\n-\techo ${UNAME_MACHINE}-pc-rdos\n+\techo \"$UNAME_MACHINE\"-pc-rdos\n \texit ;;\n     i*86:AROS:*:*)\n-\techo ${UNAME_MACHINE}-pc-aros\n+\techo \"$UNAME_MACHINE\"-pc-aros\n \texit ;;\n     x86_64:VMkernel:*:*)\n-\techo ${UNAME_MACHINE}-unknown-esx\n+\techo \"$UNAME_MACHINE\"-unknown-esx\n \texit ;;\n     amd64:Isilon\\ OneFS:*:*)\n-        echo x86_64-unknown-onefs\n+\techo x86_64-unknown-onefs\n \texit ;;\n esac\n \n+echo \"$0: unable to guess system type\" >&2\n+\n+case \"$UNAME_MACHINE:$UNAME_SYSTEM\" in\n+    mips:Linux | mips64:Linux)\n+\t# If we got here on MIPS GNU/Linux, output extra information.\n+\tcat >&2 <<EOF\n+\n+NOTE: MIPS GNU/Linux systems require a C compiler to fully recognize\n+the system type. Please install a C compiler and try again.\n+EOF\n+\t;;\n+esac\n+\n cat >&2 <<EOF\n-$0: unable to guess system type\n \n-This script, last modified $timestamp, has failed to recognize\n-the operating system you are using. It is advised that you\n-download the most up to date version of the config scripts from\n+This script (version $timestamp), has failed to recognize the\n+operating system you are using. If your script is old, overwrite *all*\n+copies of config.guess and config.sub with the latest versions from:\n \n-  http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD\n+  https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n and\n-  http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD\n+  https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n \n-If the version you run ($0) is already up to date, please\n-send the following data and any information you think might be\n-pertinent to <config-patches@gnu.org> in order to provide the needed\n-information to handle your system.\n+If $0 has already been updated, send the following data and any\n+information you think might be pertinent to config-patches@gnu.org to\n+provide the necessary information to handle your system.\n \n config.guess timestamp = $timestamp\n \n@@ -1431,16 +1460,16 @@ hostinfo               = `(hostinfo) 2>/dev/null`\n /usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null`\n /usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null`\n \n-UNAME_MACHINE = ${UNAME_MACHINE}\n-UNAME_RELEASE = ${UNAME_RELEASE}\n-UNAME_SYSTEM  = ${UNAME_SYSTEM}\n-UNAME_VERSION = ${UNAME_VERSION}\n+UNAME_MACHINE = \"$UNAME_MACHINE\"\n+UNAME_RELEASE = \"$UNAME_RELEASE\"\n+UNAME_SYSTEM  = \"$UNAME_SYSTEM\"\n+UNAME_VERSION = \"$UNAME_VERSION\"\n EOF\n \n exit 1\n \n # Local variables:\n-# eval: (add-hook 'write-file-hooks 'time-stamp)\n+# eval: (add-hook 'write-file-functions 'time-stamp)\n # time-stamp-start: \"timestamp='\"\n # time-stamp-format: \"%:y-%02m-%02d\"\n # time-stamp-end: \"'\""
      },
      {
        "sha": "8444dc26f27b26dd1cd489f276be2b31e4c1886e",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 6,
        "deletions": 11,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -13,15 +13,12 @@ fi\n if test -z $with_qt_translationdir; then\n   with_qt_translationdir=$depends_prefix/translations\n fi\n-if test -z $with_qt_bindir; then\n+if test -z $with_qt_bindir && test -z \"@no_qt@\"; then\n   with_qt_bindir=$depends_prefix/native/bin\n fi\n-if test -z $with_protoc_bindir; then\n+if test -z $with_protoc_bindir && test -z \"@no_qt@\"; then\n   with_protoc_bindir=$depends_prefix/native/bin\n fi\n-if test -z $with_comparison_tool; then\n-  with_comparison_tool=$depends_prefix/native/share/BitcoindComparisonTool_jar/BitcoindComparisonTool.jar\n-fi\n \n \n if test -z $enable_wallet && test -n \"@no_wallet@\"; then\n@@ -56,19 +53,17 @@ PKG_CONFIG=\"`which pkg-config` --static\"\n # These two need to remain exported because pkg-config does not see them\n # otherwise. That means they must be unexported at the end of configure.ac to\n # avoid ruining the cache. Sigh.\n-\n-export PKG_CONFIG_LIBDIR=$depends_prefix/lib/pkgconfig\n-export PKG_CONFIG_PATH=$depends_prefix/share/pkgconfig\n+export PKG_CONFIG_PATH=$depends_prefix/share/pkgconfig:$depends_prefix/lib/pkgconfig\n+if test -z \"@allow_host_packages@\"; then\n+  export PKGCONFIG_LIBDIR=\n+fi\n \n CPPFLAGS=\"-I$depends_prefix/include/ $CPPFLAGS\"\n LDFLAGS=\"-L$depends_prefix/lib $LDFLAGS\"\n \n CC=\"@CC@\"\n CXX=\"@CXX@\"\n OBJC=\"${CC}\"\n-OBJCXX=\"${CXX}\"\n-CCACHE=$prefix/native/bin/ccache\n-CCACHE=$depends_prefix/native/bin/ccache\n PYTHONPATH=$depends_prefix/native/lib/python/dist-packages:$PYTHONPATH\n \n if test -n \"@AR@\"; then"
      },
      {
        "sha": "818892c1c31fdbe97b7a9515662a01da0371e09f",
        "filename": "depends/config.sub",
        "status": "modified",
        "additions": 133,
        "deletions": 146,
        "changes": 279,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/config.sub",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/config.sub",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.sub?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Configuration validation subroutine script.\n-#   Copyright 1992-2015 Free Software Foundation, Inc.\n+#   Copyright 1992-2018 Free Software Foundation, Inc.\n \n-timestamp='2015-11-22'\n+timestamp='2018-01-15'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -15,7 +15,7 @@ timestamp='2015-11-22'\n # General Public License for more details.\n #\n # You should have received a copy of the GNU General Public License\n-# along with this program; if not, see <http://www.gnu.org/licenses/>.\n+# along with this program; if not, see <https://www.gnu.org/licenses/>.\n #\n # As a special exception to the GNU General Public License, if you\n # distribute this file as part of a program that contains a\n@@ -33,7 +33,7 @@ timestamp='2015-11-22'\n # Otherwise, we print the canonical config type on stdout and succeed.\n \n # You can get the latest version of this script from:\n-# http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD\n+# https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n \n # This file is supposed to be the same for all GNU packages\n # and recognize all the CPU types, system types and aliases\n@@ -57,7 +57,7 @@ Usage: $0 [OPTION] CPU-MFR-OPSYS or ALIAS\n \n Canonicalize a configuration name.\n \n-Operation modes:\n+Options:\n   -h, --help         print this help, then exit\n   -t, --time-stamp   print date of last modification, then exit\n   -v, --version      print version number, then exit\n@@ -67,7 +67,7 @@ Report bugs and patches to <config-patches@gnu.org>.\"\n version=\"\\\n GNU config.sub ($timestamp)\n \n-Copyright 1992-2015 Free Software Foundation, Inc.\n+Copyright 1992-2018 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -94,7 +94,7 @@ while test $# -gt 0 ; do\n \n     *local*)\n        # First pass through any local machine types.\n-       echo $1\n+       echo \"$1\"\n        exit ;;\n \n     * )\n@@ -112,24 +112,24 @@ esac\n \n # Separate what the user gave into CPU-COMPANY and OS or KERNEL-OS (if any).\n # Here we must recognize all the valid KERNEL-OS combinations.\n-maybe_os=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\2/'`\n+maybe_os=`echo \"$1\" | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\2/'`\n case $maybe_os in\n   nto-qnx* | linux-gnu* | linux-android* | linux-dietlibc | linux-newlib* | \\\n   linux-musl* | linux-uclibc* | uclinux-uclibc* | uclinux-gnu* | kfreebsd*-gnu* | \\\n   knetbsd*-gnu* | netbsd*-gnu* | netbsd*-eabi* | \\\n-  kopensolaris*-gnu* | \\\n+  kopensolaris*-gnu* | cloudabi*-eabi* | \\\n   storm-chaos* | os2-emx* | rtmk-nova*)\n     os=-$maybe_os\n-    basic_machine=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`\n+    basic_machine=`echo \"$1\" | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`\n     ;;\n   android-linux)\n     os=-linux-android\n-    basic_machine=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`-unknown\n+    basic_machine=`echo \"$1\" | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`-unknown\n     ;;\n   *)\n-    basic_machine=`echo $1 | sed 's/-[^-]*$//'`\n-    if [ $basic_machine != $1 ]\n-    then os=`echo $1 | sed 's/.*-/-/'`\n+    basic_machine=`echo \"$1\" | sed 's/-[^-]*$//'`\n+    if [ \"$basic_machine\" != \"$1\" ]\n+    then os=`echo \"$1\" | sed 's/.*-/-/'`\n     else os=; fi\n     ;;\n esac\n@@ -178,44 +178,44 @@ case $os in\n \t\t;;\n \t-sco6)\n \t\tos=-sco5v6\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco5)\n \t\tos=-sco3.2v5\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco4)\n \t\tos=-sco3.2v4\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco3.2.[4-9]*)\n \t\tos=`echo $os | sed -e 's/sco3.2./sco3.2v/'`\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco3.2v[4-9]*)\n \t\t# Don't forget version if it is 3.2v4 or newer.\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco5v6*)\n \t\t# Don't forget version if it is 3.2v4 or newer.\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco*)\n \t\tos=-sco3.2v2\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-udk*)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-isc)\n \t\tos=-isc2.2\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-clix*)\n \t\tbasic_machine=clipper-intergraph\n \t\t;;\n \t-isc*)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-lynx*178)\n \t\tos=-lynxos178\n@@ -227,10 +227,7 @@ case $os in\n \t\tos=-lynxos\n \t\t;;\n \t-ptx*)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-sequent/'`\n-\t\t;;\n-\t-windowsnt*)\n-\t\tos=`echo $os | sed -e 's/windowsnt/winnt/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-sequent/'`\n \t\t;;\n \t-psos*)\n \t\tos=-psos\n@@ -263,7 +260,7 @@ case $basic_machine in\n \t| fido | fr30 | frv | ft32 \\\n \t| h8300 | h8500 | hppa | hppa1.[01] | hppa2.0 | hppa2.0[nw] | hppa64 \\\n \t| hexagon \\\n-\t| i370 | i860 | i960 | ia64 \\\n+\t| i370 | i860 | i960 | ia16 | ia64 \\\n \t| ip2k | iq2000 \\\n \t| k1om \\\n \t| le32 | le64 \\\n@@ -299,8 +296,9 @@ case $basic_machine in\n \t| nios | nios2 | nios2eb | nios2el \\\n \t| ns16k | ns32k \\\n \t| open8 | or1k | or1knd | or32 \\\n-\t| pdp10 | pdp11 | pj | pjl \\\n+\t| pdp10 | pj | pjl \\\n \t| powerpc | powerpc64 | powerpc64le | powerpcle \\\n+\t| pru \\\n \t| pyramid \\\n \t| riscv32 | riscv64 \\\n \t| rl78 | rx \\\n@@ -314,7 +312,7 @@ case $basic_machine in\n \t| ubicom32 \\\n \t| v850 | v850e | v850e1 | v850e2 | v850es | v850e2v3 \\\n \t| visium \\\n-\t| we32k \\\n+\t| wasm32 \\\n \t| x86 | xc16x | xstormy16 | xtensa \\\n \t| z8k | z80)\n \t\tbasic_machine=$basic_machine-unknown\n@@ -335,7 +333,7 @@ case $basic_machine in\n \t\tbasic_machine=$basic_machine-unknown\n \t\tos=-none\n \t\t;;\n-\tm88110 | m680[12346]0 | m683?2 | m68360 | m5200 | v70 | w65 | z8k)\n+\tm88110 | m680[12346]0 | m683?2 | m68360 | m5200 | v70 | w65)\n \t\t;;\n \tms1)\n \t\tbasic_machine=mt-unknown\n@@ -364,7 +362,7 @@ case $basic_machine in\n \t  ;;\n \t# Object if more than one company name word.\n \t*-*-*)\n-\t\techo Invalid configuration \\`$1\\': machine \\`$basic_machine\\' not recognized 1>&2\n+\t\techo Invalid configuration \\`\"$1\"\\': machine \\`\"$basic_machine\"\\' not recognized 1>&2\n \t\texit 1\n \t\t;;\n \t# Recognize the basic CPU types with company name.\n@@ -387,7 +385,7 @@ case $basic_machine in\n \t| h8300-* | h8500-* \\\n \t| hppa-* | hppa1.[01]-* | hppa2.0-* | hppa2.0[nw]-* | hppa64-* \\\n \t| hexagon-* \\\n-\t| i*86-* | i860-* | i960-* | ia64-* \\\n+\t| i*86-* | i860-* | i960-* | ia16-* | ia64-* \\\n \t| ip2k-* | iq2000-* \\\n \t| k1om-* \\\n \t| le32-* | le64-* \\\n@@ -428,6 +426,7 @@ case $basic_machine in\n \t| orion-* \\\n \t| pdp10-* | pdp11-* | pj-* | pjl-* | pn-* | power-* \\\n \t| powerpc-* | powerpc64-* | powerpc64le-* | powerpcle-* \\\n+\t| pru-* \\\n \t| pyramid-* \\\n \t| riscv32-* | riscv64-* \\\n \t| rl78-* | romp-* | rs6000-* | rx-* \\\n@@ -444,6 +443,7 @@ case $basic_machine in\n \t| v850-* | v850e-* | v850e1-* | v850es-* | v850e2-* | v850e2v3-* \\\n \t| vax-* \\\n \t| visium-* \\\n+\t| wasm32-* \\\n \t| we32k-* \\\n \t| x86-* | x86_64-* | xc16x-* | xps100-* \\\n \t| xstormy16-* | xtensa*-* \\\n@@ -457,7 +457,7 @@ case $basic_machine in\n \t# Recognize the various machine names and aliases which stand\n \t# for a CPU type and a company and sometimes even an OS.\n \t386bsd)\n-\t\tbasic_machine=i386-unknown\n+\t\tbasic_machine=i386-pc\n \t\tos=-bsd\n \t\t;;\n \t3b1 | 7300 | 7300-att | att-7300 | pc7300 | safari | unixpc)\n@@ -491,7 +491,7 @@ case $basic_machine in\n \t\tbasic_machine=x86_64-pc\n \t\t;;\n \tamd64-*)\n-\t\tbasic_machine=x86_64-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=x86_64-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tamdahl)\n \t\tbasic_machine=580-amdahl\n@@ -520,7 +520,7 @@ case $basic_machine in\n \t\tbasic_machine=i386-pc\n \t\tos=-aros\n \t\t;;\n-        asmjs)\n+\tasmjs)\n \t\tbasic_machine=asmjs-unknown\n \t\t;;\n \taux)\n@@ -536,21 +536,21 @@ case $basic_machine in\n \t\tos=-linux\n \t\t;;\n \tblackfin-*)\n-\t\tbasic_machine=bfin-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=bfin-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\tos=-linux\n \t\t;;\n \tbluegene*)\n \t\tbasic_machine=powerpc-ibm\n \t\tos=-cnk\n \t\t;;\n \tc54x-*)\n-\t\tbasic_machine=tic54x-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=tic54x-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tc55x-*)\n-\t\tbasic_machine=tic55x-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=tic55x-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tc6x-*)\n-\t\tbasic_machine=tic6x-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=tic6x-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tc90)\n \t\tbasic_machine=c90-cray\n@@ -639,10 +639,18 @@ case $basic_machine in\n \t\tbasic_machine=rs6000-bull\n \t\tos=-bosx\n \t\t;;\n-\tdpx2* | dpx2*-bull)\n+\tdpx2*)\n \t\tbasic_machine=m68k-bull\n \t\tos=-sysv3\n \t\t;;\n+\te500v[12])\n+\t\tbasic_machine=powerpc-unknown\n+\t\tos=$os\"spe\"\n+\t\t;;\n+\te500v[12]-*)\n+\t\tbasic_machine=powerpc-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n+\t\tos=$os\"spe\"\n+\t\t;;\n \tebmon29k)\n \t\tbasic_machine=a29k-amd\n \t\tos=-ebmon\n@@ -732,9 +740,6 @@ case $basic_machine in\n \thp9k8[0-9][0-9] | hp8[0-9][0-9])\n \t\tbasic_machine=hppa1.0-hp\n \t\t;;\n-\thppa-next)\n-\t\tos=-nextstep3\n-\t\t;;\n \thppaosf)\n \t\tbasic_machine=hppa1.1-hp\n \t\tos=-osf\n@@ -747,26 +752,26 @@ case $basic_machine in\n \t\tbasic_machine=i370-ibm\n \t\t;;\n \ti*86v32)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86.*/86-pc/'`\n \t\tos=-sysv32\n \t\t;;\n \ti*86v4*)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86.*/86-pc/'`\n \t\tos=-sysv4\n \t\t;;\n \ti*86v)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86.*/86-pc/'`\n \t\tos=-sysv\n \t\t;;\n \ti*86sol2)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86.*/86-pc/'`\n \t\tos=-solaris2\n \t\t;;\n \ti386mach)\n \t\tbasic_machine=i386-mach\n \t\tos=-mach\n \t\t;;\n-\ti386-vsta | vsta)\n+\tvsta)\n \t\tbasic_machine=i386-unknown\n \t\tos=-vsta\n \t\t;;\n@@ -785,19 +790,16 @@ case $basic_machine in\n \t\tos=-sysv\n \t\t;;\n \tleon-*|leon[3-9]-*)\n-\t\tbasic_machine=sparc-`echo $basic_machine | sed 's/-.*//'`\n+\t\tbasic_machine=sparc-`echo \"$basic_machine\" | sed 's/-.*//'`\n \t\t;;\n \tm68knommu)\n \t\tbasic_machine=m68k-unknown\n \t\tos=-linux\n \t\t;;\n \tm68knommu-*)\n-\t\tbasic_machine=m68k-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=m68k-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\tos=-linux\n \t\t;;\n-\tm88k-omron*)\n-\t\tbasic_machine=m88k-omron\n-\t\t;;\n \tmagnum | m3230)\n \t\tbasic_machine=mips-mips\n \t\tos=-sysv\n@@ -829,10 +831,10 @@ case $basic_machine in\n \t\tos=-mint\n \t\t;;\n \tmips3*-*)\n-\t\tbasic_machine=`echo $basic_machine | sed -e 's/mips3/mips64/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed -e 's/mips3/mips64/'`\n \t\t;;\n \tmips3*)\n-\t\tbasic_machine=`echo $basic_machine | sed -e 's/mips3/mips64/'`-unknown\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed -e 's/mips3/mips64/'`-unknown\n \t\t;;\n \tmonitor)\n \t\tbasic_machine=m68k-rom68k\n@@ -851,7 +853,7 @@ case $basic_machine in\n \t\tos=-msdos\n \t\t;;\n \tms1-*)\n-\t\tbasic_machine=`echo $basic_machine | sed -e 's/ms1-/mt-/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed -e 's/ms1-/mt-/'`\n \t\t;;\n \tmsys)\n \t\tbasic_machine=i686-pc\n@@ -893,7 +895,7 @@ case $basic_machine in\n \t\tbasic_machine=v70-nec\n \t\tos=-sysv\n \t\t;;\n-\tnext | m*-next )\n+\tnext | m*-next)\n \t\tbasic_machine=m68k-next\n \t\tcase $os in\n \t\t    -nextstep* )\n@@ -938,6 +940,12 @@ case $basic_machine in\n \tnsr-tandem)\n \t\tbasic_machine=nsr-tandem\n \t\t;;\n+\tnsv-tandem)\n+\t\tbasic_machine=nsv-tandem\n+\t\t;;\n+\tnsx-tandem)\n+\t\tbasic_machine=nsx-tandem\n+\t\t;;\n \top50n-* | op60c-*)\n \t\tbasic_machine=hppa1.1-oki\n \t\tos=-proelf\n@@ -970,7 +978,7 @@ case $basic_machine in\n \t\tos=-linux\n \t\t;;\n \tparisc-*)\n-\t\tbasic_machine=hppa-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=hppa-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\tos=-linux\n \t\t;;\n \tpbd)\n@@ -986,7 +994,7 @@ case $basic_machine in\n \t\tbasic_machine=i386-pc\n \t\t;;\n \tpc98-*)\n-\t\tbasic_machine=i386-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i386-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpentium | p5 | k5 | k6 | nexgen | viac3)\n \t\tbasic_machine=i586-pc\n@@ -1001,16 +1009,16 @@ case $basic_machine in\n \t\tbasic_machine=i786-pc\n \t\t;;\n \tpentium-* | p5-* | k5-* | k6-* | nexgen-* | viac3-*)\n-\t\tbasic_machine=i586-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i586-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpentiumpro-* | p6-* | 6x86-* | athlon-*)\n-\t\tbasic_machine=i686-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i686-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpentiumii-* | pentium2-* | pentiumiii-* | pentium3-*)\n-\t\tbasic_machine=i686-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i686-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpentium4-*)\n-\t\tbasic_machine=i786-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i786-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpn)\n \t\tbasic_machine=pn-gould\n@@ -1020,23 +1028,23 @@ case $basic_machine in\n \tppc | ppcbe)\tbasic_machine=powerpc-unknown\n \t\t;;\n \tppc-* | ppcbe-*)\n-\t\tbasic_machine=powerpc-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=powerpc-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n-\tppcle | powerpclittle | ppc-le | powerpc-little)\n+\tppcle | powerpclittle)\n \t\tbasic_machine=powerpcle-unknown\n \t\t;;\n \tppcle-* | powerpclittle-*)\n-\t\tbasic_machine=powerpcle-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=powerpcle-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tppc64)\tbasic_machine=powerpc64-unknown\n \t\t;;\n-\tppc64-*) basic_machine=powerpc64-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\tppc64-*) basic_machine=powerpc64-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n-\tppc64le | powerpc64little | ppc64-le | powerpc64-little)\n+\tppc64le | powerpc64little)\n \t\tbasic_machine=powerpc64le-unknown\n \t\t;;\n \tppc64le-* | powerpc64little-*)\n-\t\tbasic_machine=powerpc64le-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=powerpc64le-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tps2)\n \t\tbasic_machine=i386-ibm\n@@ -1090,17 +1098,10 @@ case $basic_machine in\n \tsequent)\n \t\tbasic_machine=i386-sequent\n \t\t;;\n-\tsh)\n-\t\tbasic_machine=sh-hitachi\n-\t\tos=-hms\n-\t\t;;\n \tsh5el)\n \t\tbasic_machine=sh5le-unknown\n \t\t;;\n-\tsh64)\n-\t\tbasic_machine=sh64-unknown\n-\t\t;;\n-\tsparclite-wrs | simso-wrs)\n+\tsimso-wrs)\n \t\tbasic_machine=sparclite-wrs\n \t\tos=-vxworks\n \t\t;;\n@@ -1119,7 +1120,7 @@ case $basic_machine in\n \t\tos=-sysv4\n \t\t;;\n \tstrongarm-* | thumb-*)\n-\t\tbasic_machine=arm-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=arm-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tsun2)\n \t\tbasic_machine=m68000-sun\n@@ -1241,6 +1242,9 @@ case $basic_machine in\n \t\tbasic_machine=hppa1.1-winbond\n \t\tos=-proelf\n \t\t;;\n+\tx64)\n+\t\tbasic_machine=x86_64-pc\n+\t\t;;\n \txbox)\n \t\tbasic_machine=i686-pc\n \t\tos=-mingw32\n@@ -1249,20 +1253,12 @@ case $basic_machine in\n \t\tbasic_machine=xps100-honeywell\n \t\t;;\n \txscale-* | xscalee[bl]-*)\n-\t\tbasic_machine=`echo $basic_machine | sed 's/^xscale/arm/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed 's/^xscale/arm/'`\n \t\t;;\n \tymp)\n \t\tbasic_machine=ymp-cray\n \t\tos=-unicos\n \t\t;;\n-\tz8k-*-coff)\n-\t\tbasic_machine=z8k-unknown\n-\t\tos=-sim\n-\t\t;;\n-\tz80-*-coff)\n-\t\tbasic_machine=z80-unknown\n-\t\tos=-sim\n-\t\t;;\n \tnone)\n \t\tbasic_machine=none-none\n \t\tos=-none\n@@ -1291,10 +1287,6 @@ case $basic_machine in\n \tvax)\n \t\tbasic_machine=vax-dec\n \t\t;;\n-\tpdp10)\n-\t\t# there are many clones, so DEC is not a safe bet\n-\t\tbasic_machine=pdp10-unknown\n-\t\t;;\n \tpdp11)\n \t\tbasic_machine=pdp11-dec\n \t\t;;\n@@ -1304,9 +1296,6 @@ case $basic_machine in\n \tsh[1234] | sh[24]a | sh[24]aeb | sh[34]eb | sh[1234]le | sh[23]ele)\n \t\tbasic_machine=sh-unknown\n \t\t;;\n-\tsparc | sparcv8 | sparcv9 | sparcv9b | sparcv9v)\n-\t\tbasic_machine=sparc-sun\n-\t\t;;\n \tcydra)\n \t\tbasic_machine=cydra-cydrome\n \t\t;;\n@@ -1326,18 +1315,18 @@ case $basic_machine in\n \t\t# Make sure to match an already-canonicalized machine name.\n \t\t;;\n \t*)\n-\t\techo Invalid configuration \\`$1\\': machine \\`$basic_machine\\' not recognized 1>&2\n+\t\techo Invalid configuration \\`\"$1\"\\': machine \\`\"$basic_machine\"\\' not recognized 1>&2\n \t\texit 1\n \t\t;;\n esac\n \n # Here we canonicalize certain aliases for manufacturers.\n case $basic_machine in\n \t*-digital*)\n-\t\tbasic_machine=`echo $basic_machine | sed 's/digital.*/dec/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed 's/digital.*/dec/'`\n \t\t;;\n \t*-commodore*)\n-\t\tbasic_machine=`echo $basic_machine | sed 's/commodore.*/cbm/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed 's/commodore.*/cbm/'`\n \t\t;;\n \t*)\n \t\t;;\n@@ -1348,8 +1337,8 @@ esac\n if [ x\"$os\" != x\"\" ]\n then\n case $os in\n-\t# First match some system type aliases\n-\t# that might get confused with valid system types.\n+\t# First match some system type aliases that might get confused\n+\t# with valid system types.\n \t# -solaris* is a basic system type, with this one exception.\n \t-auroraux)\n \t\tos=-auroraux\n@@ -1360,18 +1349,19 @@ case $os in\n \t-solaris)\n \t\tos=-solaris2\n \t\t;;\n-\t-svr4*)\n-\t\tos=-sysv4\n-\t\t;;\n \t-unixware*)\n \t\tos=-sysv4.2uw\n \t\t;;\n \t-gnu/linux*)\n \t\tos=`echo $os | sed -e 's|gnu/linux|linux-gnu|'`\n \t\t;;\n-\t# First accept the basic system types.\n+\t# es1800 is here to avoid being matched by es* (a different OS)\n+\t-es1800*)\n+\t\tos=-ose\n+\t\t;;\n+\t# Now accept the basic system types.\n \t# The portable systems comes first.\n-\t# Each alternative MUST END IN A *, to match a version number.\n+\t# Each alternative MUST end in a * to match a version number.\n \t# -sysv* is not here because it comes later, after sysvr4.\n \t-gnu* | -bsd* | -mach* | -minix* | -genix* | -ultrix* | -irix* \\\n \t      | -*vms* | -sco* | -esix* | -isc* | -aix* | -cnk* | -sunos | -sunos[34]*\\\n@@ -1381,25 +1371,25 @@ case $os in\n \t      | -aos* | -aros* | -cloudabi* | -sortix* \\\n \t      | -nindy* | -vxsim* | -vxworks* | -ebmon* | -hms* | -mvs* \\\n \t      | -clix* | -riscos* | -uniplus* | -iris* | -rtu* | -xenix* \\\n-\t      | -hiux* | -386bsd* | -knetbsd* | -mirbsd* | -netbsd* \\\n-\t      | -bitrig* | -openbsd* | -solidbsd* \\\n+\t      | -hiux* | -knetbsd* | -mirbsd* | -netbsd* \\\n+\t      | -bitrig* | -openbsd* | -solidbsd* | -libertybsd* \\\n \t      | -ekkobsd* | -kfreebsd* | -freebsd* | -riscix* | -lynxos* \\\n \t      | -bosx* | -nextstep* | -cxux* | -aout* | -elf* | -oabi* \\\n \t      | -ptx* | -coff* | -ecoff* | -winnt* | -domain* | -vsta* \\\n \t      | -udi* | -eabi* | -lites* | -ieee* | -go32* | -aux* \\\n-\t      | -chorusos* | -chorusrdb* | -cegcc* \\\n+\t      | -chorusos* | -chorusrdb* | -cegcc* | -glidix* \\\n \t      | -cygwin* | -msys* | -pe* | -psos* | -moss* | -proelf* | -rtems* \\\n-\t      | -mingw32* | -mingw64* | -linux-gnu* | -linux-android* \\\n+\t      | -midipix* | -mingw32* | -mingw64* | -linux-gnu* | -linux-android* \\\n \t      | -linux-newlib* | -linux-musl* | -linux-uclibc* \\\n \t      | -uxpv* | -beos* | -mpeix* | -udk* | -moxiebox* \\\n-\t      | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* | -opened* \\\n+\t      | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* \\\n \t      | -openstep* | -oskit* | -conix* | -pw32* | -nonstopux* \\\n \t      | -storm-chaos* | -tops10* | -tenex* | -tops20* | -its* \\\n \t      | -os2* | -vos* | -palmos* | -uclinux* | -nucleus* \\\n-\t      | -morphos* | -superux* | -rtmk* | -rtmk-nova* | -windiss* \\\n+\t      | -morphos* | -superux* | -rtmk* | -windiss* \\\n \t      | -powermax* | -dnix* | -nx6 | -nx7 | -sei* | -dragonfly* \\\n \t      | -skyos* | -haiku* | -rdos* | -toppers* | -drops* | -es* \\\n-\t      | -onefs* | -tirtos*)\n+\t      | -onefs* | -tirtos* | -phoenix* | -fuchsia* | -redox* | -bme*)\n \t# Remember, each alternative MUST END IN *, to match a version number.\n \t\t;;\n \t-qnx*)\n@@ -1416,12 +1406,12 @@ case $os in\n \t-nto*)\n \t\tos=`echo $os | sed -e 's|nto|nto-qnx|'`\n \t\t;;\n-\t-sim | -es1800* | -hms* | -xray | -os68k* | -none* | -v88r* \\\n-\t      | -windows* | -osx | -abug | -netware* | -os9* | -beos* | -haiku* \\\n+\t-sim | -xray | -os68k* | -v88r* \\\n+\t      | -windows* | -osx | -abug | -netware* | -os9* \\\n \t      | -macos* | -mpw* | -magic* | -mmixware* | -mon960* | -lnews*)\n \t\t;;\n \t-mac*)\n-\t\tos=`echo $os | sed -e 's|mac|macos|'`\n+\t\tos=`echo \"$os\" | sed -e 's|mac|macos|'`\n \t\t;;\n \t-linux-dietlibc)\n \t\tos=-linux-dietlibc\n@@ -1430,10 +1420,10 @@ case $os in\n \t\tos=`echo $os | sed -e 's|linux|linux-gnu|'`\n \t\t;;\n \t-sunos5*)\n-\t\tos=`echo $os | sed -e 's|sunos5|solaris2|'`\n+\t\tos=`echo \"$os\" | sed -e 's|sunos5|solaris2|'`\n \t\t;;\n \t-sunos6*)\n-\t\tos=`echo $os | sed -e 's|sunos6|solaris3|'`\n+\t\tos=`echo \"$os\" | sed -e 's|sunos6|solaris3|'`\n \t\t;;\n \t-opened*)\n \t\tos=-openedition\n@@ -1444,12 +1434,6 @@ case $os in\n \t-wince*)\n \t\tos=-wince\n \t\t;;\n-\t-osfrose*)\n-\t\tos=-osfrose\n-\t\t;;\n-\t-osf*)\n-\t\tos=-osf\n-\t\t;;\n \t-utek*)\n \t\tos=-bsd\n \t\t;;\n@@ -1474,7 +1458,7 @@ case $os in\n \t-nova*)\n \t\tos=-rtmk-nova\n \t\t;;\n-\t-ns2 )\n+\t-ns2)\n \t\tos=-nextstep2\n \t\t;;\n \t-nsk*)\n@@ -1496,7 +1480,7 @@ case $os in\n \t-oss*)\n \t\tos=-sysv3\n \t\t;;\n-\t-svr4)\n+\t-svr4*)\n \t\tos=-sysv4\n \t\t;;\n \t-svr3)\n@@ -1511,32 +1495,38 @@ case $os in\n \t-ose*)\n \t\tos=-ose\n \t\t;;\n-\t-es1800*)\n-\t\tos=-ose\n-\t\t;;\n-\t-xenix)\n-\t\tos=-xenix\n-\t\t;;\n \t-*mint | -mint[0-9]* | -*MiNT | -MiNT[0-9]*)\n \t\tos=-mint\n \t\t;;\n-\t-aros*)\n-\t\tos=-aros\n-\t\t;;\n \t-zvmoe)\n \t\tos=-zvmoe\n \t\t;;\n \t-dicos*)\n \t\tos=-dicos\n \t\t;;\n+\t-pikeos*)\n+\t\t# Until real need of OS specific support for\n+\t\t# particular features comes up, bare metal\n+\t\t# configurations are quite functional.\n+\t\tcase $basic_machine in\n+\t\t    arm*)\n+\t\t\tos=-eabi\n+\t\t\t;;\n+\t\t    *)\n+\t\t\tos=-elf\n+\t\t\t;;\n+\t\tesac\n+\t\t;;\n \t-nacl*)\n \t\t;;\n+\t-ios)\n+\t\t;;\n \t-none)\n \t\t;;\n \t*)\n \t\t# Get rid of the `-' at the beginning of $os.\n \t\tos=`echo $os | sed 's/[^-]*-//'`\n-\t\techo Invalid configuration \\`$1\\': system \\`$os\\' not recognized 1>&2\n+\t\techo Invalid configuration \\`\"$1\"\\': system \\`\"$os\"\\' not recognized 1>&2\n \t\texit 1\n \t\t;;\n esac\n@@ -1626,12 +1616,12 @@ case $basic_machine in\n \tsparc-* | *-sun)\n \t\tos=-sunos4.1.1\n \t\t;;\n+\tpru-*)\n+\t\tos=-elf\n+\t\t;;\n \t*-be)\n \t\tos=-beos\n \t\t;;\n-\t*-haiku)\n-\t\tos=-haiku\n-\t\t;;\n \t*-ibm)\n \t\tos=-aix\n \t\t;;\n@@ -1671,7 +1661,7 @@ case $basic_machine in\n \tm88k-omron*)\n \t\tos=-luna\n \t\t;;\n-\t*-next )\n+\t*-next)\n \t\tos=-nextstep\n \t\t;;\n \t*-sequent)\n@@ -1686,9 +1676,6 @@ case $basic_machine in\n \ti370-*)\n \t\tos=-mvs\n \t\t;;\n-\t*-next)\n-\t\tos=-nextstep3\n-\t\t;;\n \t*-gould)\n \t\tos=-sysv\n \t\t;;\n@@ -1798,15 +1785,15 @@ case $basic_machine in\n \t\t\t\tvendor=stratus\n \t\t\t\t;;\n \t\tesac\n-\t\tbasic_machine=`echo $basic_machine | sed \"s/unknown/$vendor/\"`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed \"s/unknown/$vendor/\"`\n \t\t;;\n esac\n \n-echo $basic_machine$os\n+echo \"$basic_machine$os\"\n exit\n \n # Local variables:\n-# eval: (add-hook 'write-file-hooks 'time-stamp)\n+# eval: (add-hook 'write-file-functions 'time-stamp)\n # time-stamp-start: \"timestamp='\"\n # time-stamp-format: \"%:y-%02m-%02d\"\n # time-stamp-end: \"'\""
      },
      {
        "sha": "74f9ef3f205ec0e12f6ac9e75f03da81dd7d96e7",
        "filename": "depends/description.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/description.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/description.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/description.md?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -1,4 +1,4 @@\n-This is a system of building and caching dependencies necessary for building Syscoin. \n+This is a system of building and caching dependencies necessary for building Bitcoin. \n There are several features that make it different from most similar systems:\n \n ### It is designed to be builder and host agnostic"
      },
      {
        "sha": "15e404e42dcf372e8d75f9c3945cf4bad9a21837",
        "filename": "depends/funcs.mk",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/funcs.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/funcs.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/funcs.mk?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -19,15 +19,19 @@ define int_get_all_dependencies\n $(sort $(foreach dep,$(2),$(2) $(call int_get_all_dependencies,$(1),$($(dep)_dependencies))))\n endef\n \n-define fetch_file\n-(test -f $$($(1)_source_dir)/$(4) || \\\n-  ( mkdir -p $$($(1)_download_dir) && echo Fetching $(1)... && \\\n-  ( $(build_DOWNLOAD) \"$$($(1)_download_dir)/$(4).temp\" \"$(2)/$(3)\" || \\\n-    $(build_DOWNLOAD) \"$$($(1)_download_dir)/$(4).temp\" \"$(FALLBACK_DOWNLOAD_PATH)/$(3)\" ) && \\\n+define fetch_file_inner\n+    ( mkdir -p $$($(1)_download_dir) && echo Fetching $(3) from $(2) && \\\n+    $(build_DOWNLOAD) \"$$($(1)_download_dir)/$(4).temp\" \"$(2)/$(3)\" && \\\n     echo \"$(5)  $$($(1)_download_dir)/$(4).temp\" > $$($(1)_download_dir)/.$(4).hash && \\\n     $(build_SHA256SUM) -c $$($(1)_download_dir)/.$(4).hash && \\\n     mv $$($(1)_download_dir)/$(4).temp $$($(1)_source_dir)/$(4) && \\\n-    rm -rf $$($(1)_download_dir) ))\n+    rm -rf $$($(1)_download_dir) )\n+endef\n+\n+define fetch_file\n+    ( test -f $$($(1)_source_dir)/$(4) || \\\n+    ( $(call fetch_file_inner,$(1),$(2),$(3),$(4),$(5)) || \\\n+      $(call fetch_file_inner,$(1),$(FALLBACK_DOWNLOAD_PATH),$(3),$(4),$(5))))\n endef\n \n define int_get_build_recipe_hash\n@@ -39,7 +43,7 @@ define int_get_build_id\n $(eval $(1)_dependencies += $($(1)_$(host_arch)_$(host_os)_dependencies) $($(1)_$(host_os)_dependencies))\n $(eval $(1)_all_dependencies:=$(call int_get_all_dependencies,$(1),$($($(1)_type)_native_toolchain) $($(1)_dependencies)))\n $(foreach dep,$($(1)_all_dependencies),$(eval $(1)_build_id_deps+=$(dep)-$($(dep)_version)-$($(dep)_recipe_hash)))\n-$(eval $(1)_build_id_long:=$(1)-$($(1)_version)-$($(1)_recipe_hash)-$(release_type) $($(1)_build_id_deps))\n+$(eval $(1)_build_id_long:=$(1)-$($(1)_version)-$($(1)_recipe_hash)-$(release_type) $($(1)_build_id_deps) $($($(1)_type)_id_string))\n $(eval $(1)_build_id:=$(shell echo -n \"$($(1)_build_id_long)\" | $(build_SHA256SUM) | cut -c-$(HASH_LENGTH)))\n final_build_id_long+=$($(package)_build_id_long)\n "
      },
      {
        "sha": "6c9876c2c7c7c0d884f49dd00de58b5a12d42a31",
        "filename": "depends/packages/bdb.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/bdb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/bdb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/bdb.mk?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -14,7 +14,8 @@ endef\n \n define $(package)_preprocess_cmds\n   sed -i.old 's/__atomic_compare_exchange/__atomic_compare_exchange_db/' dbinc/atomic.h && \\\n-  sed -i.old 's/atomic_init/atomic_init_db/' dbinc/atomic.h mp/mp_region.c mp/mp_mvcc.c mp/mp_fget.c mutex/mut_method.c mutex/mut_tas.c\n+  sed -i.old 's/atomic_init/atomic_init_db/' dbinc/atomic.h mp/mp_region.c mp/mp_mvcc.c mp/mp_fget.c mutex/mut_method.c mutex/mut_tas.c && \\\n+  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub dist\n endef\n \n define $(package)_config_cmds"
      },
      {
        "sha": "bbe03754099f53b6fe404876af8cbc68722fc216",
        "filename": "depends/packages/dbus.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/dbus.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/dbus.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/dbus.mk?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -1,8 +1,8 @@\n package=dbus\n-$(package)_version=1.8.6\n-$(package)_download_path=http://dbus.freedesktop.org/releases/dbus\n+$(package)_version=1.10.18\n+$(package)_download_path=https://dbus.freedesktop.org/releases/dbus\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=eded83ca007b719f32761e60fd8b9ffd0f5796a4caf455b01b5a5ef740ebd23f\n+$(package)_sha256_hash=6049ddd5f3f3e2618f615f1faeda0a115104423a7996b7aa73e2f36e38cc514a\n $(package)_dependencies=expat\n \n define $(package)_set_vars"
      },
      {
        "sha": "acbc60eea3e8ace144fbfd2ea13cd16772eb8134",
        "filename": "depends/packages/expat.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/expat.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/expat.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/expat.mk?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -1,8 +1,8 @@\n package=expat\n-$(package)_version=2.1.0\n-$(package)_download_path=http://sourceforge.net/projects/expat/files/expat/$($(package)_version)\n-$(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=823705472f816df21c8f6aa026dd162b280806838bb55b3432b0fb1fcca7eb86\n+$(package)_version=2.2.5\n+$(package)_download_path=https://github.com/libexpat/libexpat/releases/download/R_2_2_5/\n+$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n+$(package)_sha256_hash=d9dc32efba7e74f788fcc4f212a43216fc37cf5f23f4c2339664d473353aedf6\n \n define $(package)_set_vars\n $(package)_config_opts=--disable-static"
      },
      {
        "sha": "12695db4b9f781c9ce8aa9a62dab0ae36a0a1ce4",
        "filename": "depends/packages/fontconfig.mk",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/fontconfig.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/fontconfig.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/fontconfig.mk?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -1,8 +1,8 @@\n package=fontconfig\n-$(package)_version=2.11.1\n+$(package)_version=2.12.1\n $(package)_download_path=http://www.freedesktop.org/software/fontconfig/release/\n $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=dc62447533bca844463a3c3fd4083b57c90f18a70506e7a9f4936b5a1e516a99\n+$(package)_sha256_hash=b449a3e10c47e1d1c7a6ec6e2016cca73d3bd68fbbd4f0ae5cc6b573f7d6c7f3\n $(package)_dependencies=freetype expat\n \n define $(package)_set_vars\n@@ -13,7 +13,13 @@ define $(package)_config_cmds\n   $($(package)_autoconf)\n endef\n \n+# 2.12.1 uses CHAR_WIDTH which is reserved and clashes with some glibc versions, but newer versions of fontconfig\n+# have broken makefiles which needlessly attempt to re-generate headers with gperf.\n+# Instead, change all uses of CHAR_WIDTH, and disable the rule that forces header re-generation.\n+# This can be removed once the upstream build is fixed.\n define $(package)_build_cmds\n+  sed -i 's/CHAR_WIDTH/CHARWIDTH/g' fontconfig/fontconfig.h src/fcobjshash.gperf src/fcobjs.h src/fcobjshash.h && \\\n+  sed -i 's/fcobjshash.h: fcobjshash.gperf/fcobjshash.h:/' src/Makefile && \\\n   $(MAKE)\n endef\n "
      },
      {
        "sha": "76b025c463189870a0865d7b22a3ede02d839b79",
        "filename": "depends/packages/freetype.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/freetype.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/freetype.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/freetype.mk?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -1,8 +1,8 @@\n package=freetype\n-$(package)_version=2.5.3\n-$(package)_download_path=http://downloads.sourceforge.net/$(package)\n+$(package)_version=2.7.1\n+$(package)_download_path=http://download.savannah.gnu.org/releases/$(package)\n $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=c0848b29d52ef3ca27ad92e08351f023c5e24ce8cea7d8fe69fc96358e65f75e\n+$(package)_sha256_hash=3a3bb2c4e15ffb433f2032f50a5b5a92558206822e22bfe8cbe339af4aa82f88\n \n define $(package)_set_vars\n   $(package)_config_opts=--without-zlib --without-png --disable-static"
      },
      {
        "sha": "5f622f8e6e80694386fef45917b84b97ee1d2223",
        "filename": "depends/packages/libevent.mk",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/libevent.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/libevent.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libevent.mk?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -1,15 +1,15 @@\n package=libevent\n-$(package)_version=2.1.8\n-$(package)_download_path=https://github.com/libevent/libevent/releases/download/release-$($(package)_version)-stable\n-$(package)_file_name=$(package)-$($(package)_version)-stable.tar.gz\n-$(package)_sha256_hash=965cc5a8bb46ce4199a47e9b2c9e1cae3b137e8356ffdad6d94d3b9069b71dc2\n+$(package)_version=2.1.8-stable\n+$(package)_download_path=https://github.com/libevent/libevent/archive/\n+$(package)_file_name=release-$($(package)_version).tar.gz\n+$(package)_sha256_hash=316ddb401745ac5d222d7c529ef1eada12f58f6376a66c1118eee803cb70f83d\n \n define $(package)_preprocess_cmds\n   ./autogen.sh\n endef\n \n define $(package)_set_vars\n-  $(package)_config_opts=--disable-shared --disable-openssl --disable-libevent-regress\n+  $(package)_config_opts=--disable-shared --disable-openssl --disable-libevent-regress --disable-samples\n   $(package)_config_opts_release=--disable-debug-mode\n   $(package)_config_opts_linux=--with-pic\n endef"
      },
      {
        "sha": "5ad2b580d2ea9706e8ebcc72d2bc59d6197056ed",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -1,12 +1,12 @@\n package=miniupnpc\n-$(package)_version=1.9.20151026\n+$(package)_version=2.0.20180203\n $(package)_download_path=http://miniupnp.free.fr/files\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=f3cf9a5a31588a917d4d9237e5bc50f84d00c5aa48e27ed50d9b88dfa6a25d47\n+$(package)_sha256_hash=90dda8c7563ca6cd4a83e23b3c66dbbea89603a1675bfdb852897c2c9cc220b7\n \n define $(package)_set_vars\n $(package)_build_opts=CC=\"$($(package)_cc)\"\n-$(package)_build_opts_darwin=OS=Darwin LIBTOOL=\"$($(package)_libtool)\"\n+$(package)_build_opts_darwin=LIBTOOL=\"$($(package)_libtool)\"\n $(package)_build_opts_mingw32=-f Makefile.mingw\n $(package)_build_env+=CFLAGS=\"$($(package)_cflags) $($(package)_cppflags)\" AR=\"$($(package)_ar)\"\n endef"
      },
      {
        "sha": "5f247e9bf34877ed5b37ee526e2737654b2b5ef7",
        "filename": "depends/packages/native_biplist.mk",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/native_biplist.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/native_biplist.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_biplist.mk?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -0,0 +1,15 @@\n+package=native_biplist\n+$(package)_version=1.0.3\n+$(package)_download_path=https://bitbucket.org/wooster/biplist/downloads\n+$(package)_file_name=biplist-$($(package)_version).tar.gz\n+$(package)_sha256_hash=4c0549764c5fe50b28042ec21aa2e14fe1a2224e239a1dae77d9e7f3932aa4c6\n+$(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n+\n+define $(package)_build_cmds\n+    python setup.py build\n+endef\n+\n+define $(package)_stage_cmds\n+    mkdir -p $($(package)_install_libdir) && \\\n+    python setup.py install --root=$($(package)_staging_dir) --prefix=$(build_prefix) --install-lib=$($(package)_install_libdir)\n+endef"
      },
      {
        "sha": "027174479adac628ea11c01b93bf8f41d20648ab",
        "filename": "depends/packages/native_ccache.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 25,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02220bda43614813edfc8ee53cd46eca24113568/depends/packages/native_ccache.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02220bda43614813edfc8ee53cd46eca24113568/depends/packages/native_ccache.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ccache.mk?ref=02220bda43614813edfc8ee53cd46eca24113568",
        "patch": "@@ -1,25 +0,0 @@\n-package=native_ccache\n-$(package)_version=3.2.4\n-$(package)_download_path=https://samba.org/ftp/ccache\n-$(package)_file_name=ccache-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=ffeb967edb549e67da0bd5f44f729a2022de9fdde65dfd80d2a7204d7f75332e\n-\n-define $(package)_set_vars\n-$(package)_config_opts=\n-endef\n-\n-define $(package)_config_cmds\n-  $($(package)_autoconf)\n-endef\n-\n-define $(package)_build_cmds\n-  $(MAKE)\n-endef\n-\n-define $(package)_stage_cmds\n-  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n-endef\n-\n-define $(package)_postprocess_cmds\n-  rm -rf lib include\n-endef"
      },
      {
        "sha": "44d238cc4c2a686231c167942c63ae4ec08154c1",
        "filename": "depends/packages/native_cctools.mk",
        "status": "modified",
        "additions": 17,
        "deletions": 10,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/native_cctools.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/native_cctools.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_cctools.mk?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -1,14 +1,14 @@\n package=native_cctools\n-$(package)_version=ee31ae567931c426136c94aad457c7b51d844beb\n+$(package)_version=807d6fd1be5d2224872e381870c0a75387fe05e6\n $(package)_download_path=https://github.com/theuni/cctools-port/archive\n $(package)_file_name=$($(package)_version).tar.gz\n-$(package)_sha256_hash=ef107e6ab1b3994cb22e14f4f5c59ea0c0b5a988e6b21d42ed9616b018bbcbf9\n+$(package)_sha256_hash=a09c9ba4684670a0375e42d9d67e7f12c1f62581a27f28f7c825d6d7032ccc6a\n $(package)_build_subdir=cctools\n-$(package)_clang_version=3.3\n+$(package)_clang_version=3.7.1\n $(package)_clang_download_path=http://llvm.org/releases/$($(package)_clang_version)\n-$(package)_clang_download_file=clang+llvm-$($(package)_clang_version)-amd64-Ubuntu-12.04.2.tar.gz\n-$(package)_clang_file_name=clang-llvm-$($(package)_clang_version)-amd64-Ubuntu-12.04.2.tar.gz\n-$(package)_clang_sha256_hash=60d8f69f032d62ef61bf527857ebb933741ec3352d4d328c5516aa520662dab7\n+$(package)_clang_download_file=clang+llvm-$($(package)_clang_version)-x86_64-linux-gnu-ubuntu-14.04.tar.xz\n+$(package)_clang_file_name=clang-llvm-$($(package)_clang_version)-x86_64-linux-gnu-ubuntu-14.04.tar.xz\n+$(package)_clang_sha256_hash=99b28a6b48e793705228a390471991386daa33a9717cd9ca007fcdde69608fd9\n $(package)_extra_sources=$($(package)_clang_file_name)\n \n define $(package)_fetch_cmds\n@@ -17,23 +17,29 @@ $(call fetch_file,$(package),$($(package)_clang_download_path),$($(package)_clan\n endef\n \n define $(package)_extract_cmds\n+  mkdir -p $($(package)_extract_dir) && \\\n+  echo \"$($(package)_sha256_hash)  $($(package)_source)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  echo \"$($(package)_clang_sha256_hash)  $($(package)_source_dir)/$($(package)_clang_file_name)\" >> $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  $(build_SHA256SUM) -c $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n   mkdir -p toolchain/bin toolchain/lib/clang/3.5/include && \\\n   tar --strip-components=1 -C toolchain -xf $($(package)_source_dir)/$($(package)_clang_file_name) && \\\n+  rm -f toolchain/lib/libc++abi.so* && \\\n   echo \"#!/bin/sh\" > toolchain/bin/$(host)-dsymutil && \\\n   echo \"exit 0\" >> toolchain/bin/$(host)-dsymutil && \\\n   chmod +x toolchain/bin/$(host)-dsymutil && \\\n   tar --strip-components=1 -xf $($(package)_source)\n endef\n \n define $(package)_set_vars\n-$(package)_config_opts=--target=$(host) --disable-libuuid\n+$(package)_config_opts=--target=$(host) --disable-lto-support\n $(package)_ldflags+=-Wl,-rpath=\\\\$$$$$$$$\\$$$$$$$$ORIGIN/../lib\n $(package)_cc=$($(package)_extract_dir)/toolchain/bin/clang\n $(package)_cxx=$($(package)_extract_dir)/toolchain/bin/clang++\n endef\n \n define $(package)_preprocess_cmds\n-  cd $($(package)_build_subdir); ./autogen.sh\n+  cd $($(package)_build_subdir); ./autogen.sh && \\\n+  sed -i.old \"/define HAVE_PTHREADS/d\" ld64/src/ld/InputFiles.h\n endef\n \n define $(package)_config_cmds\n@@ -49,10 +55,11 @@ define $(package)_stage_cmds\n   cd $($(package)_extract_dir)/toolchain && \\\n   mkdir -p $($(package)_staging_prefix_dir)/lib/clang/$($(package)_clang_version)/include && \\\n   mkdir -p $($(package)_staging_prefix_dir)/bin $($(package)_staging_prefix_dir)/include && \\\n-  cp -P bin/clang bin/clang++ $($(package)_staging_prefix_dir)/bin/ &&\\\n+  cp bin/clang $($(package)_staging_prefix_dir)/bin/ &&\\\n+  cp -P bin/clang++ $($(package)_staging_prefix_dir)/bin/ &&\\\n   cp lib/libLTO.so $($(package)_staging_prefix_dir)/lib/ && \\\n   cp -rf lib/clang/$($(package)_clang_version)/include/* $($(package)_staging_prefix_dir)/lib/clang/$($(package)_clang_version)/include/ && \\\n-  cp bin/$(host)-dsymutil $($(package)_staging_prefix_dir)/bin && \\\n+  cp bin/llvm-dsymutil $($(package)_staging_prefix_dir)/bin/$(host)-dsymutil && \\\n   if `test -d include/c++/`; then cp -rf include/c++/ $($(package)_staging_prefix_dir)/include/; fi && \\\n   if `test -d lib/c++/`; then cp -rf lib/c++/ $($(package)_staging_prefix_dir)/lib/; fi\n endef"
      },
      {
        "sha": "e0ae0cec700e921cdfc6c4bdc9760467655dcb4d",
        "filename": "depends/packages/native_comparisontool.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 21,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02220bda43614813edfc8ee53cd46eca24113568/depends/packages/native_comparisontool.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02220bda43614813edfc8ee53cd46eca24113568/depends/packages/native_comparisontool.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_comparisontool.mk?ref=02220bda43614813edfc8ee53cd46eca24113568",
        "patch": "@@ -1,21 +0,0 @@\n-package=native_comparisontool\n-$(package)_version=8c6666f\n-$(package)_download_path=https://github.com/theuni/bitcoind-comparisontool/raw/master\n-$(package)_file_name=pull-tests-$($(package)_version).jar\n-$(package)_sha256_hash=a865332b3827abcde684ab79f5f43c083b0b6a4c97ff5508c79f29fee24f11cd\n-$(package)_install_dirname=BitcoindComparisonTool_jar\n-$(package)_install_filename=BitcoindComparisonTool.jar\n-\n-define $(package)_extract_cmds\n-endef\n-\n-define $(package)_configure_cmds\n-endef\n-\n-define $(package)_build_cmds\n-endef\n-\n-define $(package)_stage_cmds\n-  mkdir -p $($(package)_staging_prefix_dir)/share/$($(package)_install_dirname) && \\\n-  cp $($(package)_source) $($(package)_staging_prefix_dir)/share/$($(package)_install_dirname)/$($(package)_install_filename)\n-endef"
      },
      {
        "sha": "116fa25d38197b8add2c601ab7cd7b91c384f268",
        "filename": "depends/packages/native_ds_store.mk",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/native_ds_store.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/native_ds_store.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ds_store.mk?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -0,0 +1,16 @@\n+package=native_ds_store\n+$(package)_version=1.1.2\n+$(package)_download_path=https://github.com/al45tair/ds_store/archive/\n+$(package)_file_name=v$($(package)_version).tar.gz\n+$(package)_sha256_hash=3b3ecb7bf0a5157f5b6010bc3af7c141fb0ad3527084e63336220d22744bc20c\n+$(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n+$(package)_dependencies=native_biplist\n+\n+define $(package)_build_cmds\n+    python setup.py build\n+endef\n+\n+define $(package)_stage_cmds\n+    mkdir -p $($(package)_install_libdir) && \\\n+    python setup.py install --root=$($(package)_staging_dir) --prefix=$(build_prefix) --install-lib=$($(package)_install_libdir)\n+endef"
      },
      {
        "sha": "306c8356567bcef2100ab5c265d3713d793913b4",
        "filename": "depends/packages/native_mac_alias.mk",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/native_mac_alias.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/native_mac_alias.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_mac_alias.mk?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -0,0 +1,15 @@\n+package=native_mac_alias\n+$(package)_version=2.0.7\n+$(package)_download_path=https://github.com/al45tair/mac_alias/archive/\n+$(package)_file_name=v$($(package)_version).tar.gz\n+$(package)_sha256_hash=6f606d3b6bccd2112aeabf1a063f5b5ece87005a5d7e97c8faca23b916e88838\n+$(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n+\n+define $(package)_build_cmds\n+    python setup.py build\n+endef\n+\n+define $(package)_stage_cmds\n+    mkdir -p $($(package)_install_libdir) && \\\n+    python setup.py install --root=$($(package)_staging_dir) --prefix=$(build_prefix) --install-lib=$($(package)_install_libdir)\n+endef"
      },
      {
        "sha": "37f0c28a529ca1930263c1cdf06a64cf5ccaf7d0",
        "filename": "depends/packages/openssl.mk",
        "status": "modified",
        "additions": 37,
        "deletions": 3,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/openssl.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/openssl.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/openssl.mk?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -6,14 +6,48 @@ $(package)_sha256_hash=8f9faeaebad088e772f4ef5e38252d472be4d878c6b3a2718c10a4fce\n \n define $(package)_set_vars\n $(package)_config_env=AR=\"$($(package)_ar)\" RANLIB=\"$($(package)_ranlib)\" CC=\"$($(package)_cc)\"\n-$(package)_config_opts=--prefix=$(host_prefix) --openssldir=$(host_prefix)/etc/openssl no-zlib no-shared no-dso\n-$(package)_config_opts+=no-krb5 no-capieng no-dtls1 no-gost no-gmp no-heartbeats no-jpake no-md2\n-$(package)_config_opts+=no-rc5 no-rdrand no-rfc3779 no-rsax no-sctp no-sha0 no-static_engine no-ssl2 no-ssl3\n+$(package)_config_opts=--prefix=$(host_prefix) --openssldir=$(host_prefix)/etc/openssl\n+$(package)_config_opts+=no-camellia\n+$(package)_config_opts+=no-capieng\n+$(package)_config_opts+=no-cast\n+$(package)_config_opts+=no-comp\n+$(package)_config_opts+=no-dso\n+$(package)_config_opts+=no-dtls1\n+$(package)_config_opts+=no-ec_nistp_64_gcc_128\n+$(package)_config_opts+=no-gost\n+$(package)_config_opts+=no-gmp\n+$(package)_config_opts+=no-heartbeats\n+$(package)_config_opts+=no-idea\n+$(package)_config_opts+=no-jpake\n+$(package)_config_opts+=no-krb5\n+$(package)_config_opts+=no-libunbound\n+$(package)_config_opts+=no-md2\n+$(package)_config_opts+=no-mdc2\n+$(package)_config_opts+=no-rc4\n+$(package)_config_opts+=no-rc5\n+$(package)_config_opts+=no-rdrand\n+$(package)_config_opts+=no-rfc3779\n+$(package)_config_opts+=no-rsax\n+$(package)_config_opts+=no-sctp\n+$(package)_config_opts+=no-seed\n+$(package)_config_opts+=no-sha0\n+$(package)_config_opts+=no-shared\n+$(package)_config_opts+=no-ssl-trace\n+$(package)_config_opts+=no-ssl2\n+$(package)_config_opts+=no-ssl3\n+$(package)_config_opts+=no-static_engine\n+$(package)_config_opts+=no-store\n+$(package)_config_opts+=no-unit-test\n+$(package)_config_opts+=no-weak-ssl-ciphers\n+$(package)_config_opts+=no-whirlpool\n+$(package)_config_opts+=no-zlib\n+$(package)_config_opts+=no-zlib-dynamic\n $(package)_config_opts+=$($(package)_cflags) $($(package)_cppflags)\n $(package)_config_opts_linux=-fPIC -Wa,--noexecstack\n $(package)_config_opts_x86_64_linux=linux-x86_64\n $(package)_config_opts_i686_linux=linux-generic32\n $(package)_config_opts_arm_linux=linux-generic32\n+$(package)_config_opts_armv7l_linux=linux-generic32\n $(package)_config_opts_aarch64_linux=linux-generic64\n $(package)_config_opts_mipsel_linux=linux-generic32\n $(package)_config_opts_mips_linux=linux-generic32"
      },
      {
        "sha": "551c9fa70b6668f526067925ee1eee7de0e382d5",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -1,19 +1,20 @@\n packages:=boost openssl libevent zeromq\n \n-native_packages := native_ccache native_comparisontool\n-\n qt_native_packages = native_protobuf\n-qt_packages = qrencode protobuf\n+qt_packages = qrencode protobuf zlib\n+\n+qt_x86_64_linux_packages:=qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n+qt_i686_linux_packages:=$(qt_x86_64_linux_packages)\n \n-qt_linux_packages= qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n \n-\n wallet_packages=bdb\n \n upnp_packages=miniupnpc\n \n+darwin_native_packages = native_biplist native_ds_store native_mac_alias\n+\n ifneq ($(build_os),darwin)\n-darwin_native_packages=native_cctools native_cdrkit native_libdmg-hfsplus\n+darwin_native_packages += native_cctools native_cdrkit native_libdmg-hfsplus\n endif"
      },
      {
        "sha": "44fdf1c2952b6188b25ddfe56d2b4f1c71d1c07f",
        "filename": "depends/packages/qrencode.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/qrencode.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/qrencode.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qrencode.mk?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -1,7 +1,7 @@\n package=qrencode\n $(package)_version=3.4.4\n $(package)_download_path=https://fukuchi.org/works/qrencode/\n-$(package)_file_name=qrencode-$(qrencode_version).tar.bz2\n+$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n $(package)_sha256_hash=efe5188b1ddbcbf98763b819b146be6a90481aac30cfc8d858ab78a19cde1fa5\n \n define $(package)_set_vars"
      },
      {
        "sha": "745c9e11570e46c9cc56ae7b1e5644f4a4f4f2e4",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 66,
        "deletions": 52,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -1,42 +1,56 @@\n PACKAGE=qt\n-$(package)_version=5.5.0\n-$(package)_download_path=http://download.qt.io/archive/qt/5.5/$($(package)_version)/submodules\n+$(package)_version=5.7.1\n+$(package)_download_path=http://download.qt.io/official_releases/qt/5.7/$($(package)_version)/submodules\n $(package)_suffix=opensource-src-$($(package)_version).tar.gz\n $(package)_file_name=qtbase-$($(package)_suffix)\n-$(package)_sha256_hash=7e82b1318f88e56a2a9376e069aa608d4fd96b48cb0e1b880ae658b0a1af0561\n-$(package)_dependencies=openssl\n-$(package)_linux_dependencies=freetype fontconfig dbus libxcb libX11 xproto libXext\n+$(package)_sha256_hash=95f83e532d23b3ddbde7973f380ecae1bac13230340557276f75f2e37984e410\n+$(package)_dependencies=openssl zlib\n+$(package)_linux_dependencies=freetype fontconfig libxcb libX11 xproto libXext\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=mac-qmake.conf fix-xcb-include-order.patch mingw-uuidof.patch pidlist_absolute.patch\n+$(package)_patches=mac-qmake.conf mingw-uuidof.patch pidlist_absolute.patch fix-xcb-include-order.patch\n+$(package)_patches+=fix_qt_pkgconfig.patch fix-cocoahelpers-macos.patch qfixed-coretext.patch\n \n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n-$(package)_qttranslations_sha256_hash=c4bd6db6e426965c6f8824c54e81f68bbd61e2bae1bcadc328c6e81c45902a0d\n+$(package)_qttranslations_sha256_hash=3a15aebd523c6d89fb97b2d3df866c94149653a26d27a00aac9b6d3020bc5a1d\n+\n \n $(package)_qttools_file_name=qttools-$($(package)_suffix)\n-$(package)_qttools_sha256_hash=d9e06bd19ecc86afba5e95d45a906d1bc1ad579aa70001e36143c1aaf695bdd6\n+$(package)_qttools_sha256_hash=22d67de915cb8cd93e16fdd38fa006224ad9170bd217c2be1e53045a8dd02f0f\n \n $(package)_extra_sources  = $($(package)_qttranslations_file_name)\n $(package)_extra_sources += $($(package)_qttools_file_name)\n \n define $(package)_set_vars\n $(package)_config_opts_release = -release\n-$(package)_config_opts_debug   = -debug\n-$(package)_config_opts += -opensource -confirm-license\n+$(package)_config_opts_debug = -debug\n+$(package)_config_opts += -bindir $(build_prefix)/bin\n+$(package)_config_opts += -c++std c++11\n+$(package)_config_opts += -confirm-license\n+$(package)_config_opts += -dbus-runtime\n+$(package)_config_opts += -hostprefix $(build_prefix)\n+$(package)_config_opts += -no-alsa\n $(package)_config_opts += -no-audio-backend\n+$(package)_config_opts += -no-cups\n+$(package)_config_opts += -no-egl\n+$(package)_config_opts += -no-eglfs\n+$(package)_config_opts += -no-feature-style-windowsmobile\n+$(package)_config_opts += -no-feature-style-windowsce\n+$(package)_config_opts += -no-freetype\n+$(package)_config_opts += -no-gif\n $(package)_config_opts += -no-glib\n+$(package)_config_opts += -no-gstreamer\n $(package)_config_opts += -no-icu\n-$(package)_config_opts += -no-cups\n $(package)_config_opts += -no-iconv\n-$(package)_config_opts += -no-gif\n-$(package)_config_opts += -no-freetype\n-$(package)_config_opts += -no-nis\n-$(package)_config_opts += -pch\n+$(package)_config_opts += -no-kms\n+$(package)_config_opts += -no-linuxfb\n+$(package)_config_opts += -no-libudev\n+$(package)_config_opts += -no-mitshm\n+$(package)_config_opts += -no-mtdev\n+$(package)_config_opts += -no-pulseaudio\n+$(package)_config_opts += -no-openvg\n+$(package)_config_opts += -no-reduce-relocations\n $(package)_config_opts += -no-qml-debug\n-$(package)_config_opts += -nomake examples\n-$(package)_config_opts += -nomake tests\n-$(package)_config_opts += -no-feature-style-windowsmobile\n-$(package)_config_opts += -no-feature-style-windowsce\n $(package)_config_opts += -no-sql-db2\n $(package)_config_opts += -no-sql-ibase\n $(package)_config_opts += -no-sql-oci\n@@ -46,36 +60,27 @@ $(package)_config_opts += -no-sql-odbc\n $(package)_config_opts += -no-sql-psql\n $(package)_config_opts += -no-sql-sqlite\n $(package)_config_opts += -no-sql-sqlite2\n-$(package)_config_opts += -prefix $(host_prefix)\n-$(package)_config_opts += -hostprefix $(build_prefix)\n-$(package)_config_opts += -bindir $(build_prefix)/bin\n-$(package)_config_opts += -c++11\n+$(package)_config_opts += -no-use-gold-linker\n+$(package)_config_opts += -no-xinput2\n+$(package)_config_opts += -no-xrender\n+$(package)_config_opts += -nomake examples\n+$(package)_config_opts += -nomake tests\n+$(package)_config_opts += -opensource\n $(package)_config_opts += -openssl-linked\n-$(package)_config_opts += -v\n-$(package)_config_opts += -static\n-$(package)_config_opts += -silent\n+$(package)_config_opts += -optimized-qmake\n+$(package)_config_opts += -pch\n $(package)_config_opts += -pkg-config\n+$(package)_config_opts += -prefix $(host_prefix)\n $(package)_config_opts += -qt-libpng\n $(package)_config_opts += -qt-libjpeg\n-$(package)_config_opts += -qt-zlib\n $(package)_config_opts += -qt-pcre\n-$(package)_config_opts += -no-pulseaudio\n-$(package)_config_opts += -no-openvg\n-$(package)_config_opts += -no-xrender\n-$(package)_config_opts += -no-alsa\n-$(package)_config_opts += -no-mtdev\n-$(package)_config_opts += -no-gstreamer\n-$(package)_config_opts += -no-mitshm\n-$(package)_config_opts += -no-kms\n-$(package)_config_opts += -no-reduce-relocations\n-$(package)_config_opts += -no-egl\n-$(package)_config_opts += -no-eglfs\n-$(package)_config_opts += -no-linuxfb\n-$(package)_config_opts += -no-xinput2\n-$(package)_config_opts += -no-libudev\n-$(package)_config_opts += -no-use-gold-linker\n+$(package)_config_opts += -system-zlib\n $(package)_config_opts += -reduce-exports\n-$(package)_config_opts += -optimized-qmake\n+$(package)_config_opts += -static\n+$(package)_config_opts += -silent\n+$(package)_config_opts += -v\n+$(package)_config_opts += -no-feature-printer\n+$(package)_config_opts += -no-feature-printdialog\n \n ifneq ($(build_os),darwin)\n $(package)_config_opts_darwin = -xplatform macx-clang-linux\n@@ -108,8 +113,8 @@ endef\n define $(package)_extract_cmds\n   mkdir -p $($(package)_extract_dir) && \\\n   echo \"$($(package)_sha256_hash)  $($(package)_source)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n-  echo \"$($(package)_qttranslations_sha256_hash)  $($(package)_source_dir)/$($(package)_qttranslations_file_name)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n-  echo \"$($(package)_qttools_sha256_hash)  $($(package)_source_dir)/$($(package)_qttools_file_name)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  echo \"$($(package)_qttranslations_sha256_hash)  $($(package)_source_dir)/$($(package)_qttranslations_file_name)\" >> $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  echo \"$($(package)_qttools_sha256_hash)  $($(package)_source_dir)/$($(package)_qttools_file_name)\" >> $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n   $(build_SHA256SUM) -c $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n   mkdir qtbase && \\\n   tar --strip-components=1 -xf $($(package)_source) -C qtbase && \\\n@@ -119,32 +124,41 @@ define $(package)_extract_cmds\n   tar --strip-components=1 -xf $($(package)_source_dir)/$($(package)_qttools_file_name) -C qttools\n endef\n \n+\n define $(package)_preprocess_cmds\n   sed -i.old \"s|updateqm.commands = \\$$$$\\$$$$LRELEASE|updateqm.commands = $($(package)_extract_dir)/qttools/bin/lrelease|\" qttranslations/translations/translations.pro && \\\n+  sed -i.old \"/updateqm.depends =/d\" qttranslations/translations/translations.pro && \\\n   sed -i.old \"s/src_plugins.depends = src_sql src_xml src_network/src_plugins.depends = src_xml src_network/\" qtbase/src/src.pro && \\\n   sed -i.old \"s|X11/extensions/XIproto.h|X11/X.h|\" qtbase/src/plugins/platforms/xcb/qxcbxsettings.cpp && \\\n   sed -i.old 's/if \\[ \"$$$$XPLATFORM_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/if \\[ \"$$$$BUILD_ON_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/' qtbase/configure && \\\n+  sed -i.old 's/CGEventCreateMouseEvent(0, kCGEventMouseMoved, pos, 0)/CGEventCreateMouseEvent(0, kCGEventMouseMoved, pos, kCGMouseButtonLeft)/' qtbase/src/plugins/platforms/cocoa/qcocoacursor.mm && \\\n   mkdir -p qtbase/mkspecs/macx-clang-linux &&\\\n   cp -f qtbase/mkspecs/macx-clang/Info.plist.lib qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f qtbase/mkspecs/macx-clang/Info.plist.app qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f qtbase/mkspecs/macx-clang/qplatformdefs.h qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f $($(package)_patch_dir)/mac-qmake.conf qtbase/mkspecs/macx-clang-linux/qmake.conf && \\\n-  patch -p1 < $($(package)_patch_dir)/fix-xcb-include-order.patch && \\\n   patch -p1 < $($(package)_patch_dir)/mingw-uuidof.patch && \\\n   patch -p1 < $($(package)_patch_dir)/pidlist_absolute.patch && \\\n-  echo \"QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n-  echo \"QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n-  echo \"QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n-  sed -i.old \"s|QMAKE_CFLAGS            = |QMAKE_CFLAGS            = $($(package)_cflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n-  sed -i.old \"s|QMAKE_LFLAGS            = |QMAKE_LFLAGS            = $($(package)_ldflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n-  sed -i.old \"s|QMAKE_CXXFLAGS          = |QMAKE_CXXFLAGS            = $($(package)_cxxflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf\n+  patch -p1 < $($(package)_patch_dir)/fix-xcb-include-order.patch && \\\n+  patch -p1 < $($(package)_patch_dir)/fix_qt_pkgconfig.patch && \\\n+  patch -p1 < $($(package)_patch_dir)/fix-cocoahelpers-macos.patch && \\\n+  patch -p1 < $($(package)_patch_dir)/qfixed-coretext.patch && \\\n+  echo \"!host_build: QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n+  echo \"!host_build: QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n+  echo \"!host_build: QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n+  sed -i.old \"s|QMAKE_CFLAGS            = |!host_build: QMAKE_CFLAGS            = $($(package)_cflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n+  sed -i.old \"s|QMAKE_LFLAGS            = |!host_build: QMAKE_LFLAGS            = $($(package)_ldflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n+  sed -i.old \"s|QMAKE_CXXFLAGS          = |!host_build: QMAKE_CXXFLAGS            = $($(package)_cxxflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf\n+\n endef\n \n define $(package)_config_cmds\n   export PKG_CONFIG_SYSROOT_DIR=/ && \\\n   export PKG_CONFIG_LIBDIR=$(host_prefix)/lib/pkgconfig && \\\n   export PKG_CONFIG_PATH=$(host_prefix)/share/pkgconfig  && \\\n   ./configure $($(package)_config_opts) && \\\n+  echo \"host_build: QT_CONFIG ~= s/system-zlib/zlib\" >> mkspecs/qconfig.pri && \\\n+  echo \"CONFIG += force_bootstrap\" >> mkspecs/qconfig.pri && \\\n   $(MAKE) sub-src-clean && \\\n   cd ../qttranslations && ../qtbase/bin/qmake qttranslations.pro -o Makefile && \\\n   cd translations && ../../qtbase/bin/qmake translations.pro -o Makefile && cd ../.. &&\\"
      },
      {
        "sha": "8fb30a5c4471cfe1b4204c4507a103d37ba5a067",
        "filename": "depends/packages/qt46.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 66,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02220bda43614813edfc8ee53cd46eca24113568/depends/packages/qt46.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02220bda43614813edfc8ee53cd46eca24113568/depends/packages/qt46.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt46.mk?ref=02220bda43614813edfc8ee53cd46eca24113568",
        "patch": "@@ -1,66 +0,0 @@\n-PACKAGE=qt46\n-$(package)_version=4.6.4\n-$(package)_download_path=http://download.qt-project.org/archive/qt/4.6/\n-$(package)_file_name=qt-everywhere-opensource-src-$($(package)_version).tar.gz\n-$(package)_sha256_hash=9ad4d46c721b53a429ed5a2eecfd3c239a9ab566562f183f99d3125f1a234250\n-$(package)_dependencies=openssl freetype dbus libX11 xproto libXext libICE libSM\n-$(package)_patches=stlfix.patch \n-\n-define $(package)_set_vars\n-$(package)_config_opts  = -prefix $(host_prefix) -headerdir $(host_prefix)/include/qt4 -bindir $(build_prefix)/bin\n-$(package)_config_opts += -release -no-separate-debug-info -opensource -confirm-license\n-$(package)_config_opts += -stl -qt-zlib\n-\n-$(package)_config_opts += -nomake examples -nomake tests -nomake tools -nomake translations -nomake demos -nomake docs\n-$(package)_config_opts += -no-audio-backend -no-glib -no-nis -no-cups -no-iconv -no-gif -no-pch\n-$(package)_config_opts += -no-xkb -no-xrender -no-xrandr -no-xfixes -no-xcursor -no-xinerama -no-xsync -no-xinput -no-mitshm -no-xshape\n-$(package)_config_opts += -no-libtiff -no-fontconfig -openssl-linked\n-$(package)_config_opts += -no-sql-db2 -no-sql-ibase -no-sql-oci -no-sql-tds -no-sql-mysql\n-$(package)_config_opts += -no-sql-odbc -no-sql-psql -no-sql-sqlite -no-sql-sqlite2\n-$(package)_config_opts += -no-xmlpatterns -no-multimedia -no-phonon -no-scripttools -no-declarative\n-$(package)_config_opts += -no-phonon-backend -no-webkit -no-javascript-jit -no-script\n-$(package)_config_opts += -no-svg -no-libjpeg -no-libtiff -no-libpng -no-libmng -no-qt3support -no-opengl\n-\n-$(package)_config_opts_x86_64_linux  += -platform linux-g++-64\n-$(package)_config_opts_i686_linux  = -platform linux-g++-32\n-$(package)_build_env  = QT_RCC_TEST=1\n-endef\n-\n-define $(package)_preprocess_cmds\n-   sed -i.old \"s|/include /usr/include||\" config.tests/unix/freetype/freetype.pri && \\\n-   sed -i.old \"s|src_plugins.depends = src_gui src_sql src_svg|src_plugins.depends = src_gui src_sql|\" src/src.pro && \\\n-   sed -i.old \"s|\\.lower(|\\.toLower(|g\" src/network/ssl/qsslsocket_openssl.cpp && \\\n-   sed -i.old \"s|Key_BackSpace|Key_Backspace|\" src/gui/itemviews/qabstractitemview.cpp && \\\n-   sed -i.old \"s|/usr/X11R6/lib64|$(host_prefix)/lib|\" mkspecs/*/*.conf && \\\n-   sed -i.old \"s|/usr/X11R6/lib|$(host_prefix)/lib|\" mkspecs/*/*.conf && \\\n-   sed -i.old \"s|/usr/X11R6/include|$(host_prefix)/include|\" mkspecs/*/*.conf && \\\n-   sed -i.old \"s|QMAKE_LFLAGS_SHLIB\\t+= -shared|QMAKE_LFLAGS_SHLIB\\t+= -shared -Wl,--exclude-libs,ALL|\" mkspecs/common/g++.conf && \\\n-   sed -i.old \"/SSLv2_client_method/d\" src/network/ssl/qsslsocket_openssl.cpp src/network/ssl/qsslsocket_openssl_symbols.cpp && \\\n-   sed -i.old \"/SSLv2_server_method/d\" src/network/ssl/qsslsocket_openssl.cpp src/network/ssl/qsslsocket_openssl_symbols.cpp && \\\n-   patch -p1 < $($(package)_patch_dir)/stlfix.patch \n-endef\n-\n-define $(package)_config_cmds\n-  export PKG_CONFIG_SYSROOT_DIR=/ && \\\n-  export PKG_CONFIG_LIBDIR=$(host_prefix)/lib/pkgconfig && \\\n-  export PKG_CONFIG_PATH=$(host_prefix)/share/pkgconfig  && \\\n-  export CPATH=$(host_prefix)/include && \\\n-  OPENSSL_LIBS='-L$(host_prefix)/lib -lssl -lcrypto' ./configure $($(package)_config_opts) && \\\n-  cd tools/linguist/lrelease; ../../../bin/qmake  -o Makefile lrelease.pro\n-endef\n-\n-define $(package)_build_cmds\n-  export CPATH=$(host_prefix)/include && \\\n-  $(MAKE) -C src && \\\n-  $(MAKE) -C tools/linguist/lrelease\n-endef\n-\n-define $(package)_stage_cmds\n-  $(MAKE) -C src INSTALL_ROOT=$($(package)_staging_dir) install && \\\n-  $(MAKE) -C tools/linguist/lrelease INSTALL_ROOT=$($(package)_staging_dir) install\n-endef\n-\n-define $(package)_postprocess_cmds\n-  rm -rf mkspecs/ lib/cmake/ lib/*.prl lib/*.la && \\\n-  find native/bin -type f -exec mv {} {}-qt4 \\;\n-endef"
      },
      {
        "sha": "cde523370f0e4ca32e91b327e8d6b12f5b96dfd5",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -1,9 +1,9 @@\n package=zeromq\n-$(package)_version=4.2.2\n+$(package)_version=4.2.3\n $(package)_download_path=https://github.com/zeromq/libzmq/releases/download/v$($(package)_version)/\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=5b23f4ca9ef545d5bd3af55d305765e3ee06b986263b31967435d285a3e6df6b\n-$(package)_patches=0001-fix-build-with-older-mingw64.patch\n+$(package)_sha256_hash=8f1e2b2aade4dbfde98d82366d61baef2f62e812530160d2e6d0a5bb24e40bc0\n+$(package)_patches=0001-fix-build-with-older-mingw64.patch 0002-disable-pthread_set_name_np.patch\n \n define $(package)_set_vars\n   $(package)_config_opts=--without-docs --disable-shared --without-libsodium --disable-curve --disable-curve-keygen --disable-perf\n@@ -12,8 +12,8 @@ define $(package)_set_vars\n endef\n \n define $(package)_preprocess_cmds\n-\tpatch -p1 < $($(package)_patch_dir)/0001-fix-build-with-older-mingw64.patch && \\\n-  ./autogen.sh\n+   patch -p1 < $($(package)_patch_dir)/0001-fix-build-with-older-mingw64.patch && \\\n+   patch -p1 < $($(package)_patch_dir)/0002-disable-pthread_set_name_np.patch\n endef\n \n define $(package)_config_cmds\n@@ -31,4 +31,4 @@ endef\n define $(package)_postprocess_cmds\n   sed -i.old \"s/ -lstdc++//\" lib/pkgconfig/libzmq.pc && \\\n   rm -rf bin share\n-endef\n\\ No newline at end of file\n+endef"
      },
      {
        "sha": "589490800f8bd894538aef4ce19366d0bf78d2ca",
        "filename": "depends/packages/zlib.mk",
        "status": "added",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/zlib.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/packages/zlib.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zlib.mk?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -0,0 +1,27 @@\n+package=zlib\n+$(package)_version=1.2.11\n+$(package)_download_path=http://www.zlib.net\n+$(package)_file_name=$(package)-$($(package)_version).tar.gz\n+$(package)_sha256_hash=c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1\n+\n+define $(package)_set_vars\n+$(package)_build_opts= CC=\"$($(package)_cc)\"\n+$(package)_build_opts+=CFLAGS=\"$($(package)_cflags) $($(package)_cppflags) -fPIC\"\n+$(package)_build_opts+=RANLIB=\"$($(package)_ranlib)\"\n+$(package)_build_opts+=AR=\"$($(package)_ar)\"\n+$(package)_build_opts_darwin+=AR=\"$($(package)_libtool)\"\n+$(package)_build_opts_darwin+=ARFLAGS=\"-o\"\n+endef\n+\n+define $(package)_config_cmds\n+  ./configure --static --prefix=$(host_prefix)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE) $($(package)_build_opts) libz.a\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install $($(package)_build_opts)\n+endef\n+"
      },
      {
        "sha": "97f59cb7e4eea0575cf684936c7087d784a39437",
        "filename": "depends/patches/boost/darwin_boost_atomic-1.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 35,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02220bda43614813edfc8ee53cd46eca24113568/depends/patches/boost/darwin_boost_atomic-1.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02220bda43614813edfc8ee53cd46eca24113568/depends/patches/boost/darwin_boost_atomic-1.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/boost/darwin_boost_atomic-1.patch?ref=02220bda43614813edfc8ee53cd46eca24113568",
        "patch": "@@ -1,35 +0,0 @@\n-diff --git a/include/boost/atomic/detail/cas128strong.hpp b/include/boost/atomic/detail/cas128strong.hpp\n-index 906c13e..dcb4d7d 100644\n---- a/include/boost/atomic/detail/cas128strong.hpp\n-+++ b/include/boost/atomic/detail/cas128strong.hpp\n-@@ -196,15 +196,17 @@ class base_atomic<T, void, 16, Sign>\n- \n- public:\n-     BOOST_DEFAULTED_FUNCTION(base_atomic(void), {})\n--    explicit base_atomic(value_type const& v) BOOST_NOEXCEPT : v_(0)\n-+    explicit base_atomic(value_type const& v) BOOST_NOEXCEPT\n-     {\n-+        memset(&v_, 0, sizeof(v_));\n-         memcpy(&v_, &v, sizeof(value_type));\n-     }\n- \n-     void\n-     store(value_type const& value, memory_order order = memory_order_seq_cst) volatile BOOST_NOEXCEPT\n-     {\n--        storage_type value_s = 0;\n-+        storage_type value_s;\n-+        memset(&value_s, 0, sizeof(value_s));\n-         memcpy(&value_s, &value, sizeof(value_type));\n-         platform_fence_before_store(order);\n-         platform_store128(value_s, &v_);\n-@@ -247,7 +249,9 @@ class base_atomic<T, void, 16, Sign>\n-         memory_order success_order,\n-         memory_order failure_order) volatile BOOST_NOEXCEPT\n-     {\n--        storage_type expected_s = 0, desired_s = 0;\n-+        storage_type expected_s, desired_s;\n-+        memset(&expected_s, 0, sizeof(expected_s));\n-+        memset(&desired_s, 0, sizeof(desired_s));\n-         memcpy(&expected_s, &expected, sizeof(value_type));\n-         memcpy(&desired_s, &desired, sizeof(value_type));\n- "
      },
      {
        "sha": "ca50765200ec86d6b5591446326afc91b6d389e7",
        "filename": "depends/patches/boost/darwin_boost_atomic-2.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 55,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02220bda43614813edfc8ee53cd46eca24113568/depends/patches/boost/darwin_boost_atomic-2.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02220bda43614813edfc8ee53cd46eca24113568/depends/patches/boost/darwin_boost_atomic-2.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/boost/darwin_boost_atomic-2.patch?ref=02220bda43614813edfc8ee53cd46eca24113568",
        "patch": "@@ -1,55 +0,0 @@\n-diff --git a/include/boost/atomic/detail/gcc-atomic.hpp b/include/boost/atomic/detail/gcc-atomic.hpp\n-index a130590..4af99a1 100644\n---- a/include/boost/atomic/detail/gcc-atomic.hpp\n-+++ b/include/boost/atomic/detail/gcc-atomic.hpp\n-@@ -958,14 +958,16 @@ class base_atomic<T, void, 16, Sign>\n- \n- public:\n-     BOOST_DEFAULTED_FUNCTION(base_atomic(void), {})\n--    explicit base_atomic(value_type const& v) BOOST_NOEXCEPT : v_(0)\n-+    explicit base_atomic(value_type const& v) BOOST_NOEXCEPT\n-     {\n-+        memset(&v_, 0, sizeof(v_));\n-         memcpy(&v_, &v, sizeof(value_type));\n-     }\n- \n-     void store(value_type const& v, memory_order order = memory_order_seq_cst) volatile BOOST_NOEXCEPT\n-     {\n--        storage_type tmp = 0;\n-+        storage_type tmp;\n-+        memset(&tmp, 0, sizeof(tmp));\n-         memcpy(&tmp, &v, sizeof(value_type));\n-         __atomic_store_n(&v_, tmp, atomics::detail::convert_memory_order_to_gcc(order));\n-     }\n-@@ -980,7 +982,8 @@ class base_atomic<T, void, 16, Sign>\n- \n-     value_type exchange(value_type const& v, memory_order order = memory_order_seq_cst) volatile BOOST_NOEXCEPT\n-     {\n--        storage_type tmp = 0;\n-+        storage_type tmp;\n-+        memset(&tmp, 0, sizeof(tmp));\n-         memcpy(&tmp, &v, sizeof(value_type));\n-         tmp = __atomic_exchange_n(&v_, tmp, atomics::detail::convert_memory_order_to_gcc(order));\n-         value_type res;\n-@@ -994,7 +997,9 @@ class base_atomic<T, void, 16, Sign>\n-         memory_order success_order,\n-         memory_order failure_order) volatile BOOST_NOEXCEPT\n-     {\n--        storage_type expected_s = 0, desired_s = 0;\n-+        storage_type expected_s, desired_s;\n-+        memset(&expected_s, 0, sizeof(expected_s));\n-+        memset(&desired_s, 0, sizeof(desired_s));\n-         memcpy(&expected_s, &expected, sizeof(value_type));\n-         memcpy(&desired_s, &desired, sizeof(value_type));\n-         const bool success = __atomic_compare_exchange_n(&v_, &expected_s, desired_s, false,\n-@@ -1010,7 +1015,9 @@ class base_atomic<T, void, 16, Sign>\n-         memory_order success_order,\n-         memory_order failure_order) volatile BOOST_NOEXCEPT\n-     {\n--        storage_type expected_s = 0, desired_s = 0;\n-+        storage_type expected_s, desired_s;\n-+        memset(&expected_s, 0, sizeof(expected_s));\n-+        memset(&desired_s, 0, sizeof(desired_s));\n-         memcpy(&expected_s, &expected, sizeof(value_type));\n-         memcpy(&desired_s, &desired, sizeof(value_type));\n-         const bool success = __atomic_compare_exchange_n(&v_, &expected_s, desired_s, true,"
      },
      {
        "sha": "04514c593a101078af216a67bd905b5c615ded53",
        "filename": "depends/patches/boost/gcc_5_no_cxx11.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 37,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02220bda43614813edfc8ee53cd46eca24113568/depends/patches/boost/gcc_5_no_cxx11.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02220bda43614813edfc8ee53cd46eca24113568/depends/patches/boost/gcc_5_no_cxx11.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/boost/gcc_5_no_cxx11.patch?ref=02220bda43614813edfc8ee53cd46eca24113568",
        "patch": "@@ -1,37 +0,0 @@\n-From eec808554936ae068b23df07ab54d4dc6302a695 Mon Sep 17 00:00:00 2001\n-From: jzmaddock <jzmaddock@gmail.com>\n-Date: Sat, 23 Aug 2014 09:38:02 +0100\n-Subject: [PATCH] Fix BOOST_NO_CXX11_VARIADIC_TEMPLATES definition - the\n- feature was introduced in GCC 4.4.\n-\n----\n- include/boost/config/compiler/gcc.hpp | 9 +--------\n- 1 file changed, 1 insertion(+), 8 deletions(-)\n-\n-diff --git a/include/boost/config/compiler/gcc.hpp b/include/boost/config/compiler/gcc.hpp\n-index f37159d..97d8a18 100644\n---- a/include/boost/config/compiler/gcc.hpp\n-+++ b/include/boost/config/compiler/gcc.hpp\n-@@ -154,14 +154,6 @@\n- #  define BOOST_NO_CXX11_FUNCTION_TEMPLATE_DEFAULT_ARGS\n- #  define BOOST_NO_CXX11_RVALUE_REFERENCES\n- #  define BOOST_NO_CXX11_STATIC_ASSERT\n--\n--// Variadic templates compiler:\n--//   http://www.generic-programming.org/~dgregor/cpp/variadic-templates.html\n--#  if defined(__VARIADIC_TEMPLATES) || (__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4) && defined(__GXX_EXPERIMENTAL_CXX0X__))\n--#    define BOOST_HAS_VARIADIC_TMPL\n--#  else\n--#    define BOOST_NO_CXX11_VARIADIC_TEMPLATES\n--#  endif\n- #endif\n- \n- // C++0x features in 4.4.n and later\n-@@ -176,6 +168,7 @@\n- #  define BOOST_NO_CXX11_DELETED_FUNCTIONS\n- #  define BOOST_NO_CXX11_TRAILING_RESULT_TYPES\n- #  define BOOST_NO_CXX11_INLINE_NAMESPACES\n-+#  define BOOST_NO_CXX11_VARIADIC_TEMPLATES\n- #endif\n- \n- #if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)"
      },
      {
        "sha": "ec2bc17d9bd9e032acfec9e34ea6afbbbb7e79f2",
        "filename": "depends/patches/qt/fix-xcb-include-order.patch",
        "status": "modified",
        "additions": 23,
        "deletions": 19,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/patches/qt/fix-xcb-include-order.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/patches/qt/fix-xcb-include-order.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix-xcb-include-order.patch?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -1,45 +1,49 @@\n---- old/qtbase/src/plugins/platforms/xcb/xcb_qpa_lib.pro 2015-03-17 02:06:42.705930685 +0000\n-+++ new/qtbase/src/plugins/platforms/xcb/xcb_qpa_lib.pro 2015-03-17 02:08:41.281926351 +0000\n-@@ -94,8 +94,6 @@\n-\n+--- old/qtbase/src/plugins/platforms/xcb/xcb_qpa_lib.pro 2015-03-17\n++++ new/qtbase/src/plugins/platforms/xcb/xcb_qpa_lib.pro 2015-03-17\n+@@ -76,8 +76,6 @@\n+ \n  DEFINES += $$QMAKE_DEFINES_XCB\n  LIBS += $$QMAKE_LIBS_XCB\n -QMAKE_CXXFLAGS += $$QMAKE_CFLAGS_XCB\n -QMAKE_CFLAGS += $$QMAKE_CFLAGS_XCB\n-\n+ \n  CONFIG += qpa/genericunixfontdatabase\n-\n-@@ -104,7 +102,8 @@\n+ \n+@@ -89,7 +87,8 @@\n  contains(QT_CONFIG, xcb-qt) {\n      DEFINES += XCB_USE_RENDER\n      XCB_DIR = ../../../3rdparty/xcb\n -    INCLUDEPATH += $$XCB_DIR/include $$XCB_DIR/sysinclude\n +    QMAKE_CFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n +    QMAKE_CXXFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n-     LIBS += -lxcb -L$$OUT_PWD/xcb-static -lxcb-static\n+     LIBS += -lxcb -L$$MODULE_BASE_OUTDIR/lib -lxcb-static$$qtPlatformTargetSuffix()\n  } else {\n-     LIBS += -lxcb -lxcb-image -lxcb-icccm -lxcb-sync -lxcb-xfixes -lxcb-shm -lxcb-randr -lxcb-shape -lxcb-keysyms\n---- old/qtbase/src/plugins/platforms/xcb/xcb-static/xcb-static.pro      2015-03-17 02:07:04.641929383 +0000\n-+++ new/qtbase/src/plugins/platforms/xcb/xcb-static/xcb-static.pro      2015-03-17 02:10:15.485922059 +0000\n-@@ -8,7 +8,8 @@\n-\n+     LIBS += -lxcb -lxcb-image -lxcb-icccm -lxcb-sync -lxcb-xfixes -lxcb-shm -lxcb-randr -lxcb-shape -lxcb-keysyms -lxcb-xinerama\n+--- old/qtbase/src/plugins/platforms/xcb/xcb-static/xcb-static.pro\n++++ new/qtbase/src/plugins/platforms/xcb/xcb-static/xcb-static.pro\n+@@ -9,7 +9,8 @@\n+ \n  XCB_DIR = ../../../../3rdparty/xcb\n-\n+ \n -INCLUDEPATH += $$XCB_DIR/include $$XCB_DIR/include/xcb $$XCB_DIR/sysinclude\n +QMAKE_CFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/include/xcb -I$$XCB_DIR/sysinclude\n +QMAKE_CXXFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/include/xcb -I$$XCB_DIR/sysinclude\n-\n+ \n  QMAKE_CXXFLAGS += $$QMAKE_CFLAGS_XCB\n  QMAKE_CFLAGS += $$QMAKE_CFLAGS_XCB\n---- old/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro\t2015-07-24 16:02:59.530038830 -0400\n-+++ new/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro\t2015-07-24 16:01:22.106037459 -0400\n-@@ -11,3 +11,9 @@\n+--- old/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro\n++++ new/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro\n+@@ -6,6 +6,13 @@\n      qxcbmain.cpp\n  OTHER_FILES += xcb.json README\n-\n+ \n +contains(QT_CONFIG, xcb-qt) {\n +    DEFINES += XCB_USE_RENDER\n +    XCB_DIR = ../../../3rdparty/xcb\n +    QMAKE_CFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n +    QMAKE_CXXFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n +}\n++\n+ PLUGIN_TYPE = platforms\n+ PLUGIN_CLASS_NAME = QXcbIntegrationPlugin\n+ !equals(TARGET, $$QT_DEFAULT_QPA_PLUGIN): PLUGIN_EXTENDS = -"
      },
      {
        "sha": "ca70d30b15e9c4115f1e7c2ac885858244fd123b",
        "filename": "depends/patches/qt/mac-qmake.conf",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/patches/qt/mac-qmake.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/patches/qt/mac-qmake.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/mac-qmake.conf?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -1,6 +1,5 @@\n MAKEFILE_GENERATOR = UNIX\n CONFIG += app_bundle incremental global_init_link_order lib_version_first plugin_no_soname absolute_library_soname\n-DEFINES += QT_NO_PRINTER QT_NO_PRINTDIALOG\n QMAKE_INCREMENTAL_STYLE = sublib\n include(../common/macx.conf)\n include(../common/gcc-base-mac.conf)\n@@ -11,14 +10,14 @@ QMAKE_XCODE_VERSION=4.3\n QMAKE_XCODE_DEVELOPER_PATH=/Developer\n QMAKE_MACOSX_DEPLOYMENT_TARGET = $${MAC_MIN_VERSION}\n QMAKE_MAC_SDK=macosx\n-QMAKE_MAC_SDK.macosx.path = $${MAC_SDK_PATH}\n+QMAKE_MAC_SDK.macosx.Path = $${MAC_SDK_PATH}\n QMAKE_MAC_SDK.macosx.platform_name = macosx\n-QMAKE_MAC_SDK.macosx.version = $${MAC_SDK_VERSION}\n-QMAKE_MAC_SDK.macosx.platform_path = /phony\n-QMAKE_CFLAGS += -target $${MAC_TARGET}\n-QMAKE_OBJECTIVE_CFLAGS += $$QMAKE_CFLAGS\n-QMAKE_CXXFLAGS += $$QMAKE_CFLAGS\n-QMAKE_LFLAGS += -target $${MAC_TARGET} -mlinker-version=$${MAC_LD64_VERSION}\n+QMAKE_MAC_SDK.macosx.SDKVersion = $${MAC_SDK_VERSION}\n+QMAKE_MAC_SDK.macosx.PlatformPath = /phony\n+!host_build: QMAKE_CFLAGS += -target $${MAC_TARGET}\n+!host_build: QMAKE_OBJECTIVE_CFLAGS += $$QMAKE_CFLAGS\n+!host_build: QMAKE_CXXFLAGS += $$QMAKE_CFLAGS\n+!host_build: QMAKE_LFLAGS += -target $${MAC_TARGET} -mlinker-version=$${MAC_LD64_VERSION}\n QMAKE_AR = $${CROSS_COMPILE}ar cq\n QMAKE_RANLIB=$${CROSS_COMPILE}ranlib\n QMAKE_LIBTOOL=$${CROSS_COMPILE}libtool"
      },
      {
        "sha": "fb21923c8c36b60c337c20a9e8002fc593f5716d",
        "filename": "depends/patches/qt/mingw-uuidof.patch",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/patches/qt/mingw-uuidof.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/patches/qt/mingw-uuidof.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/mingw-uuidof.patch?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -1,6 +1,6 @@\n---- old/qtbase/src/plugins/platforms/windows/qwindowscontext.cpp\t2015-06-20 17:40:20.956781548 -0400\n-+++ new/qtbase/src/plugins/platforms/windows/qwindowscontext.cpp\t2015-06-20 17:29:32.052772416 -0400\n-@@ -69,7 +69,7 @@\n+--- old/qtbase/src/plugins/platforms/windows/qwindowscontext.cpp\n++++ new/qtbase/src/plugins/platforms/windows/qwindowscontext.cpp\n+@@ -77,7 +77,7 @@\n  #include <stdlib.h>\n  #include <stdio.h>\n  #include <windowsx.h>\n@@ -9,25 +9,25 @@\n  #  include <comdef.h>\n  #endif\n  \n-@@ -762,7 +762,7 @@\n-                           HWND_MESSAGE, NULL, (HINSTANCE)GetModuleHandle(0), NULL);\n+@@ -814,7 +814,7 @@\n+                           HWND_MESSAGE, NULL, static_cast<HINSTANCE>(GetModuleHandle(0)), NULL);\n  }\n  \n -#ifndef Q_OS_WINCE\n +#if !defined(Q_OS_WINCE) && (!defined(USE___UUIDOF) || (defined(USE___UUIDOF) && USE___UUIDOF == 1))\n  // Re-engineered from the inline function _com_error::ErrorMessage().\n  // We cannot use it directly since it uses swprintf_s(), which is not\n  // present in the MSVCRT.DLL found on Windows XP (QTBUG-35617).\n-@@ -781,7 +781,7 @@\n-          return QStringLiteral(\"IDispatch error #\") + QString::number(wCode);\n-      return QStringLiteral(\"Unknown error 0x0\") + QString::number(comError.Error(), 16);\n+@@ -833,7 +833,7 @@\n+          return QString::asprintf(\"IDispatch error #%u\", uint(wCode));\n+      return QString::asprintf(\"Unknown error 0x0%x\", uint(comError.Error()));\n  }\n -#endif // !Q_OS_WINCE\n +#endif // !defined(Q_OS_WINCE) && (!defined(USE___UUIDOF) || (defined(USE___UUIDOF) && USE___UUIDOF == 1))\n  \n  /*!\n      \\brief Common COM error strings.\n-@@ -846,12 +846,12 @@\n+@@ -901,12 +901,12 @@\n      default:\n          break;\n      }"
      },
      {
        "sha": "c792824179056473fe97fa8f876f36ca950a6c80",
        "filename": "depends/patches/qt/pidlist_absolute.patch",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/patches/qt/pidlist_absolute.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/patches/qt/pidlist_absolute.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/pidlist_absolute.patch?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -1,7 +1,7 @@\n diff -dur old/qtbase/src/plugins/platforms/windows/qwindowscontext.h new/qtbase/src/plugins/platforms/windows/qwindowscontext.h\n---- old/qtbase/src/plugins/platforms/windows/qwindowscontext.h\t2015-06-29 22:04:40.000000000 +0200\n-+++ new/qtbase/src/plugins/platforms/windows/qwindowscontext.h\t2015-11-01 12:55:59.751234846 +0100\n-@@ -124,10 +124,18 @@\n+--- old/qtbase/src/plugins/platforms/windows/qwindowscontext.h\n++++ new/qtbase/src/plugins/platforms/windows/qwindowscontext.h\n+@@ -136,10 +136,18 @@\n      inline void init();\n  \n      typedef HRESULT (WINAPI *SHCreateItemFromParsingName)(PCWSTR, IBindCtx *, const GUID&, void **);\n@@ -21,9 +21,9 @@ diff -dur old/qtbase/src/plugins/platforms/windows/qwindowscontext.h new/qtbase/\n      SHCreateItemFromParsingName sHCreateItemFromParsingName;\n      SHGetKnownFolderIDList sHGetKnownFolderIDList;\n diff -dur old/qtbase/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp new/qtbase/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp\n---- old/qtbase/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp\t2015-06-29 22:04:40.000000000 +0200\n-+++ new/qtbase/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp\t2015-11-01 13:41:09.503149772 +0100\n-@@ -1008,7 +1008,11 @@\n+--- old/qtbase/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp\n++++ new/qtbase/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp\n+@@ -1016,7 +1016,11 @@\n              qWarning() << __FUNCTION__ << \": Invalid CLSID: \" << url.path();\n              return Q_NULLPTR;\n          }"
      },
      {
        "sha": "f8f6fb04b0b70db71dc5b2c75d2a5cfb6bc48893",
        "filename": "depends/patches/qt46/stlfix.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02220bda43614813edfc8ee53cd46eca24113568/depends/patches/qt46/stlfix.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02220bda43614813edfc8ee53cd46eca24113568/depends/patches/qt46/stlfix.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt46/stlfix.patch?ref=02220bda43614813edfc8ee53cd46eca24113568",
        "patch": "@@ -1,10 +0,0 @@\n---- old/config.tests/unix/stl/stltest.cpp\t2011-06-23 03:45:23.000000000 -0400\n-+++ new/config.tests/unix/stl/stltest.cpp\t2014-08-28 00:54:04.154837604 -0400\n-@@ -49,6 +49,7 @@\n- #include <vector>\n- #include <algorithm>\n- #include <iostream>\n-+#include <cstddef>\n- \n- // something mean to see if the compiler and C++ standard lib are good enough\n- template<class K, class T>"
      },
      {
        "sha": "a6c508fb8a1e6c14e61c28ac2299fdcf7823d181",
        "filename": "depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1244f75a4c3608c1b0b55cb62bc24911942f8616/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch?ref=1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "patch": "@@ -27,3 +27,4 @@ index 99e889d..e69038e 100644\n  #if !defined __MINGW32__\n --\n 2.7.4\n+"
      }
    ]
  },
  {
    "sha": "e925008d7a5cad929d356034407dc20eab316844",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTI1MDA4ZDdhNWNhZDkyOWQzNTYwMzQ0MDdkYzIwZWFiMzE2ODQ0",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-20T19:14:30Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-20T19:14:30Z"
      },
      "message": "add patches",
      "tree": {
        "sha": "03cef9799ae3aebe879aeb2c59cf661955719bab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03cef9799ae3aebe879aeb2c59cf661955719bab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e925008d7a5cad929d356034407dc20eab316844",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e925008d7a5cad929d356034407dc20eab316844",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e925008d7a5cad929d356034407dc20eab316844",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e925008d7a5cad929d356034407dc20eab316844/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1244f75a4c3608c1b0b55cb62bc24911942f8616",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1244f75a4c3608c1b0b55cb62bc24911942f8616"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 150,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1b43a9eff8fe924961b3962ee0d892ae5553c75c",
        "filename": "depends/patches/qt/fix-cocoahelpers-macos.patch",
        "status": "added",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e925008d7a5cad929d356034407dc20eab316844/depends/patches/qt/fix-cocoahelpers-macos.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e925008d7a5cad929d356034407dc20eab316844/depends/patches/qt/fix-cocoahelpers-macos.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix-cocoahelpers-macos.patch?ref=e925008d7a5cad929d356034407dc20eab316844",
        "patch": "@@ -0,0 +1,70 @@\n+From 0707260a4f8e64dfadf1df5f935e74cabb7c7d27 Mon Sep 17 00:00:00 2001\n+From: Jake Petroules <jake.petroules@qt.io>\n+Date: Sun, 1 Oct 2017 21:48:17 -0700\n+Subject: [PATCH] Fix build error with macOS 10.13 SDK\n+MIME-Version: 1.0\n+Content-Type: text/plain; charset=utf8\n+Content-Transfer-Encoding: 8bit\n+\n+Several of these variables/macros are no longer defined. We didn't\n+validate the preconditions on iOS, tvOS, or watchOS, so no\n+need to bother validating them on macOS either. Nor did we check the\n+OSStatus result on any platform anyways.\n+\n+Task-number: QTBUG-63401\n+Change-Id: Ife64dff767cf6d3f4b839fc53ec486181c176bf3\n+(cherry-picked from 861544583511d4e6f7745d2339b26ff1cd44132b)\n+Reviewed-by: Timur Pocheptsov <timur.pocheptsov@qt.io>\n+Reviewed-by: Tor Arne Vestb\u00c3\u00b8 <tor.arne.vestbo@qt.io>\n+---\n+ src/plugins/platforms/cocoa/qcocoahelpers.h  |  2 +-\n+ src/plugins/platforms/cocoa/qcocoahelpers.mm | 13 +------------\n+ 2 files changed, 2 insertions(+), 13 deletions(-)\n+\n+diff --git old/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.h new/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.h\n+index bbb3793..74371d5 100644\n+--- old/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.h\n++++ new/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.h\n+@@ -80,7 +80,7 @@ QColor qt_mac_toQColor(CGColorRef color);\n+ // Creates a mutable shape, it's the caller's responsibility to release.\n+ HIMutableShapeRef qt_mac_QRegionToHIMutableShape(const QRegion &region);\n+ \n+-OSStatus qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGImageRef inImage);\n++void qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGImageRef inImage);\n+ \n+ NSDragOperation qt_mac_mapDropAction(Qt::DropAction action);\n+ NSDragOperation qt_mac_mapDropActions(Qt::DropActions actions);\n+diff --git old/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.mm new/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.mm\n+index cd73148..3f8429e 100644\n+--- old/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.mm\n++++ new/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.mm\n+@@ -544,15 +544,8 @@ NSRect qt_mac_flipRect(const QRect &rect)\n+     return NSMakeRect(rect.x(), flippedY, rect.width(), rect.height());\n+ }\n+ \n+-OSStatus qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGImageRef inImage)\n++void qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGImageRef inImage)\n+ {\n+-    // Verbatim copy if HIViewDrawCGImage (as shown on Carbon-Dev)\n+-    OSStatus err = noErr;\n+-\n+-    require_action(inContext != NULL, InvalidContext, err = paramErr);\n+-    require_action(inBounds != NULL, InvalidBounds, err = paramErr);\n+-    require_action(inImage != NULL, InvalidImage, err = paramErr);\n+-\n+     CGContextSaveGState( inContext );\n+     CGContextTranslateCTM (inContext, 0, inBounds->origin.y + CGRectGetMaxY(*inBounds));\n+     CGContextScaleCTM(inContext, 1, -1);\n+@@ -560,10 +553,6 @@ OSStatus qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGIm\n+     CGContextDrawImage(inContext, *inBounds, inImage);\n+ \n+     CGContextRestoreGState(inContext);\n+-InvalidImage:\n+-InvalidBounds:\n+-InvalidContext:\n+-        return err;\n+ }\n+ \n+ Qt::MouseButton cocoaButton2QtButton(NSInteger buttonNum)\n+-- \n+2.7.4"
      },
      {
        "sha": "34302a9f2d2eb61117a274a53c8cfe1877c61246",
        "filename": "depends/patches/qt/fix_qt_pkgconfig.patch",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e925008d7a5cad929d356034407dc20eab316844/depends/patches/qt/fix_qt_pkgconfig.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e925008d7a5cad929d356034407dc20eab316844/depends/patches/qt/fix_qt_pkgconfig.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_qt_pkgconfig.patch?ref=e925008d7a5cad929d356034407dc20eab316844",
        "patch": "@@ -0,0 +1,11 @@\n+--- old/qtbase/mkspecs/features/qt_module.prf\n++++ new/qtbase/mkspecs/features/qt_module.prf\n+@@ -245,7 +245,7 @@\n+ load(qt_targets)\n+ \n+ # this builds on top of qt_common\n+-!internal_module:!lib_bundle:if(unix|mingw) {\n++unix|mingw {\n+     CONFIG += create_pc\n+     QMAKE_PKGCONFIG_DESTDIR = pkgconfig\n+     host_build: \\"
      },
      {
        "sha": "aa56f1e1de51acdcef0da8c12ec46d4b4c80a8c7",
        "filename": "depends/patches/qt/qfixed-coretext.patch",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e925008d7a5cad929d356034407dc20eab316844/depends/patches/qt/qfixed-coretext.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e925008d7a5cad929d356034407dc20eab316844/depends/patches/qt/qfixed-coretext.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/qfixed-coretext.patch?ref=e925008d7a5cad929d356034407dc20eab316844",
        "patch": "@@ -0,0 +1,34 @@\n+From dbdd5f0ffbce52c8b789ed09f1aa3f1da6c02e23 Mon Sep 17 00:00:00 2001\n+From: Gabriel de Dietrich <gabriel.dedietrich@qt.io>\n+Date: Fri, 30 Mar 2018 11:58:16 -0700\n+Subject: [PATCH] QCoreTextFontEngine: Fix build with Xcode 9.3\n+\n+Apple LLVM version 9.1.0 (clang-902.0.39.1)\n+\n+Error message:\n+\n+.../qfontengine_coretext.mm:827:20: error: qualified reference to\n+      'QFixed' is a constructor name rather than a type in this context\n+    return QFixed::QFixed(int(CTFontGetUnitsPerEm(ctfont)));\n+\n+Change-Id: Iebe26b3b087a16b10664208fc8851cbddb47f043\n+Reviewed-by: Konstantin Ritt <ritt.ks@gmail.com>\n+---\n+ src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm | 2 +-\n+ 1 file changed, 1 insertion(+), 1 deletion(-)\n+\n+diff --git old/qtbase/src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm new/qtbase/src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm\n+index 25ff69d877d..98b753eff96 100644\n+--- old/qtbase/src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm\n++++ new/qtbase/src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm\n+@@ -824,7 +824,7 @@ void QCoreTextFontEngine::getUnscaledGlyph(glyph_t glyph, QPainterPath *path, gl\n+ \n+ QFixed QCoreTextFontEngine::emSquareSize() const\n+ {\n+-    return QFixed::QFixed(int(CTFontGetUnitsPerEm(ctfont)));\n++    return QFixed(int(CTFontGetUnitsPerEm(ctfont)));\n+ }\n+ \n+ QFontEngine *QCoreTextFontEngine::cloneWithSize(qreal pixelSize) const\n+-- \n+2.16.3\n\\ No newline at end of file"
      },
      {
        "sha": "d220b54f3ecdbae3605be72dbcd0c6b2c5ee85f7",
        "filename": "depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e925008d7a5cad929d356034407dc20eab316844/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e925008d7a5cad929d356034407dc20eab316844/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch?ref=e925008d7a5cad929d356034407dc20eab316844",
        "patch": "@@ -0,0 +1,35 @@\n+From 6e6b47d5ab381c3df3b30bb0b0a6cf210dfb1eba Mon Sep 17 00:00:00 2001\n+From: Cory Fields <cory-nospam-@coryfields.com>\n+Date: Mon, 5 Mar 2018 14:22:05 -0500\n+Subject: [PATCH] disable pthread_set_name_np\n+\n+pthread_set_name_np adds a Glibc requirement on >= 2.12.\n+---\n+ src/thread.cpp | 4 +++-\n+ 1 file changed, 3 insertions(+), 1 deletion(-)\n+\n+diff --git a/src/thread.cpp b/src/thread.cpp\n+index 4fc59c3e..c3fdfd46 100644\n+--- a/src/thread.cpp\n++++ b/src/thread.cpp\n+@@ -220,7 +220,7 @@ void zmq::thread_t::setThreadName(const char *name_)\n+  */\n+     if (!name_)\n+         return;\n+-\n++#if 0\n+ #if defined(ZMQ_HAVE_PTHREAD_SETNAME_1)\n+     int rc = pthread_setname_np(name_);\n+     if(rc) return;\n+@@ -233,6 +233,8 @@ void zmq::thread_t::setThreadName(const char *name_)\n+ #elif defined(ZMQ_HAVE_PTHREAD_SET_NAME)\n+     pthread_set_name_np(descriptor, name_);\n+ #endif\n++#endif\n++    return;\n+ }\n+ \n+ #endif\n+-- \n+2.11.1\n+"
      }
    ]
  },
  {
    "sha": "c176e524f9058541edd9c3509bda784ad90c30d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTc2ZTUyNGY5MDU4NTQxZWRkOWMzNTA5YmRhNzg0YWQ5MGMzMGQ4",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-20T19:36:09Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-20T19:36:09Z"
      },
      "message": "uupdate boost to 1.64",
      "tree": {
        "sha": "03286dee952471cf8dd3fcf577d9d8d922c1b65d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03286dee952471cf8dd3fcf577d9d8d922c1b65d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c176e524f9058541edd9c3509bda784ad90c30d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c176e524f9058541edd9c3509bda784ad90c30d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c176e524f9058541edd9c3509bda784ad90c30d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c176e524f9058541edd9c3509bda784ad90c30d8/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e925008d7a5cad929d356034407dc20eab316844",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e925008d7a5cad929d356034407dc20eab316844",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e925008d7a5cad929d356034407dc20eab316844"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "70d392df96aeff7b11a21820aa75c4f73019e3b8",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c176e524f9058541edd9c3509bda784ad90c30d8/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c176e524f9058541edd9c3509bda784ad90c30d8/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=c176e524f9058541edd9c3509bda784ad90c30d8",
        "patch": "@@ -1,8 +1,8 @@\n package=boost\n-$(package)_version=1_63_0\n-$(package)_download_path=https://sourceforge.net/projects/boost/files/boost/1.63.0\n+$(package)_version=1_64_0\n+$(package)_download_path=https://dl.bintray.com/boostorg/release/1.64.0/source/\n $(package)_file_name=$(package)_$($(package)_version).tar.bz2\n-$(package)_sha256_hash=beae2529f759f6b3bf3f4969a19c2e9d6f0c503edcb2de4a61d1428519fcb3b0\n+$(package)_sha256_hash=7bcc5caace97baa948931d712ea5f37038dbb1c5d89b43ad4def4ed7cb683332\n \n define $(package)_set_vars\n $(package)_config_opts_release=variant=release\n@@ -38,4 +38,4 @@ endef\n \n define $(package)_stage_cmds\n   ./b2 -d0 -j4 --prefix=$($(package)_staging_prefix_dir) $($(package)_config_opts) install\n-endef\n+endef\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "da83919d58ab48d06ce5b600930897f7ecf21519",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTgzOTE5ZDU4YWI0OGQwNmNlNWI2MDA5MzA4OTdmN2VjZjIxNTE5",
    "commit": {
      "author": {
        "name": "willyk",
        "email": "k.o.willy@gmail.com",
        "date": "2018-04-20T21:14:30Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2018-04-20T21:14:30Z"
      },
      "message": "Update .travis.yml",
      "tree": {
        "sha": "1b65a80c85e98563ed1fb1893dffbb47e1e8101a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b65a80c85e98563ed1fb1893dffbb47e1e8101a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da83919d58ab48d06ce5b600930897f7ecf21519",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa2lg2CRBK7hj4Ov3rIwAAdHIIADQGuwrKzdT1yXgIyKjtXpnv\nD5CaJks9QE5I26sVrfmRMtU1HACJLs9/XTYZm3YIbV1dqrjTusozsaSYVrCobfUD\nJIexXKbaHrjMs7JrvhrjcPuAy9j7FATvYf+B1mMCZaanANvHRnGgZqMKp0flSij6\nfk/Jykv2+FK3bUr7YrZGtqGnIgG6Feltv7DrXeErSHuMZEU7n5tOJ+nY2XLLmQdz\nTLF5EWpxKRvSbzD91dLazFG+pykYGhdr9HLNxWEL6SVoXrTOms/Yi7aFnKIBb9v1\n1GaVe5Lps1M5K1Bb5NLzjvwWV0IC0+ZPEM1TztXZL7Vdjt+AxHvfrIv3zSI9GtQ=\n=ZnNB\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 1b65a80c85e98563ed1fb1893dffbb47e1e8101a\nparent c176e524f9058541edd9c3509bda784ad90c30d8\nauthor willyk <k.o.willy@gmail.com> 1524258870 -0700\ncommitter GitHub <noreply@github.com> 1524258870 -0700\n\nUpdate .travis.yml"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da83919d58ab48d06ce5b600930897f7ecf21519",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da83919d58ab48d06ce5b600930897f7ecf21519",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da83919d58ab48d06ce5b600930897f7ecf21519/comments",
    "author": {
      "login": "willyko",
      "id": 11524904,
      "node_id": "MDQ6VXNlcjExNTI0OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11524904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willyko",
      "html_url": "https://github.com/willyko",
      "followers_url": "https://api.github.com/users/willyko/followers",
      "following_url": "https://api.github.com/users/willyko/following{/other_user}",
      "gists_url": "https://api.github.com/users/willyko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willyko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willyko/subscriptions",
      "organizations_url": "https://api.github.com/users/willyko/orgs",
      "repos_url": "https://api.github.com/users/willyko/repos",
      "events_url": "https://api.github.com/users/willyko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willyko/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c176e524f9058541edd9c3509bda784ad90c30d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c176e524f9058541edd9c3509bda784ad90c30d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c176e524f9058541edd9c3509bda784ad90c30d8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "33bb79837df606e7558d621f26f797882267d32d",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da83919d58ab48d06ce5b600930897f7ecf21519/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da83919d58ab48d06ce5b600930897f7ecf21519/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=da83919d58ab48d06ce5b600930897f7ecf21519",
        "patch": "@@ -81,5 +81,3 @@ script:\n     - if [ \"$RUN_TESTS\" = \"true\" -a \"$WINE\" != \"true\" ]; then cd src/test && ./test_syscoin; fi\n     - if [ \"$RUN_TESTS\" = \"true\" -a \"$WINE\" = \"true\" ]; then wine  src/test/test_syscoin.exe; fi\n       #    - if [ \"$RUN_TESTS\" = \"true\" ]; then qa/pull-tester/rpc-tests.py --coverage; fi\n-after_script:\n-    - if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then (echo \"Upload goes here. Something like: scp -r $BASE_OUTDIR server\" || echo \"upload failed\"); fi"
      }
    ]
  },
  {
    "sha": "ba390a89be638f14767c89432a746ef095d63590",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTM5MGE4OWJlNjM4ZjE0NzY3Yzg5NDMyYTc0NmVmMDk1ZDYzNTkw",
    "commit": {
      "author": {
        "name": "Willy Ko",
        "email": "wko@blockchainfoundry.co",
        "date": "2018-04-20T21:31:51Z"
      },
      "committer": {
        "name": "Willy Ko",
        "email": "wko@blockchainfoundry.co",
        "date": "2018-04-20T21:31:51Z"
      },
      "message": "Removed ccache https://github.com/bitcoin/bitcoin/pull/12607",
      "tree": {
        "sha": "52aed03dc9c3d6a93517ad929ba8dbe7f3019b65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52aed03dc9c3d6a93517ad929ba8dbe7f3019b65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba390a89be638f14767c89432a746ef095d63590",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba390a89be638f14767c89432a746ef095d63590",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba390a89be638f14767c89432a746ef095d63590",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba390a89be638f14767c89432a746ef095d63590/comments",
    "author": {
      "login": "willyko",
      "id": 11524904,
      "node_id": "MDQ6VXNlcjExNTI0OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11524904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willyko",
      "html_url": "https://github.com/willyko",
      "followers_url": "https://api.github.com/users/willyko/followers",
      "following_url": "https://api.github.com/users/willyko/following{/other_user}",
      "gists_url": "https://api.github.com/users/willyko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willyko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willyko/subscriptions",
      "organizations_url": "https://api.github.com/users/willyko/orgs",
      "repos_url": "https://api.github.com/users/willyko/repos",
      "events_url": "https://api.github.com/users/willyko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willyko/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "willyko",
      "id": 11524904,
      "node_id": "MDQ6VXNlcjExNTI0OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11524904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willyko",
      "html_url": "https://github.com/willyko",
      "followers_url": "https://api.github.com/users/willyko/followers",
      "following_url": "https://api.github.com/users/willyko/following{/other_user}",
      "gists_url": "https://api.github.com/users/willyko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willyko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willyko/subscriptions",
      "organizations_url": "https://api.github.com/users/willyko/orgs",
      "repos_url": "https://api.github.com/users/willyko/repos",
      "events_url": "https://api.github.com/users/willyko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willyko/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da83919d58ab48d06ce5b600930897f7ecf21519",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da83919d58ab48d06ce5b600930897f7ecf21519",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da83919d58ab48d06ce5b600930897f7ecf21519"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "df73552f59822da9631e912c14addea2e91384ee",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba390a89be638f14767c89432a746ef095d63590/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba390a89be638f14767c89432a746ef095d63590/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=ba390a89be638f14767c89432a746ef095d63590",
        "patch": "@@ -70,7 +70,7 @@ script:\n     - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n     - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST\n     - SYSCOIN_CONFIG_ALL=\"--disable-dependency-tracking --prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib\"\n-    - depends/$HOST/native/bin/ccache --max-size=$CCACHE_SIZE\n+    - ccache --max-size=$CCACHE_SIZE\n     - test -n \"$USE_SHELL\" && eval '\"$USE_SHELL\" -c \"./autogen.sh\"' || ./autogen.sh\n     - ./configure --cache-file=config.cache $SYSCOIN_CONFIG_ALL $SYSCOIN_CONFIG || ( cat config.log && false)\n     - make distdir PACKAGE=syscoin VERSION=$HOST"
      }
    ]
  },
  {
    "sha": "b16033938cccdb162fc04a4848472e90280afdaf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTYwMzM5MzhjY2NkYjE2MmZjMDRhNDg0ODQ3MmU5MDI4MGFmZGFm",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-20T22:40:00Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-20T22:40:00Z"
      },
      "message": "update m4s",
      "tree": {
        "sha": "b88dd50162df672e13804a6d8a82ce46119390d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b88dd50162df672e13804a6d8a82ce46119390d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b16033938cccdb162fc04a4848472e90280afdaf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b16033938cccdb162fc04a4848472e90280afdaf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b16033938cccdb162fc04a4848472e90280afdaf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b16033938cccdb162fc04a4848472e90280afdaf/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c176e524f9058541edd9c3509bda784ad90c30d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c176e524f9058541edd9c3509bda784ad90c30d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c176e524f9058541edd9c3509bda784ad90c30d8"
      }
    ],
    "stats": {
      "total": 882,
      "additions": 588,
      "deletions": 294
    },
    "files": [
      {
        "sha": "650c94fa64752a362a34eb6d489c194255ecfc51",
        "filename": "build-aux/m4/ax_boost_base.m4",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/ax_boost_base.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/ax_boost_base.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_base.m4?ref=b16033938cccdb162fc04a4848472e90280afdaf",
        "patch": "@@ -33,7 +33,7 @@\n #   and this notice are preserved. This file is offered as-is, without any\n #   warranty.\n \n-#serial 23\n+#serial 27\n \n AC_DEFUN([AX_BOOST_BASE],\n [\n@@ -95,7 +95,7 @@ if test \"x$want_boost\" = \"xyes\"; then\n       x86_64)\n         libsubdirs=\"lib64 libx32 lib lib64\"\n         ;;\n-      ppc64|s390x|sparc64|aarch64)\n+      ppc64|s390x|sparc64|aarch64|ppc64le)\n         libsubdirs=\"lib64 lib lib64\"\n         ;;\n     esac\n@@ -170,7 +170,7 @@ if test \"x$want_boost\" = \"xyes\"; then\n         AC_MSG_RESULT(yes)\n     succeeded=yes\n     found_system=yes\n-        ],[:\n+        ],[\n         ])\n     AC_LANG_POP([C++])\n \n@@ -179,6 +179,10 @@ if test \"x$want_boost\" = \"xyes\"; then\n     dnl if we found no boost with system layout we search for boost libraries\n     dnl built and installed without the --layout=system option or for a staged(not installed) version\n     if test \"x$succeeded\" != \"xyes\"; then\n+        CPPFLAGS=\"$CPPFLAGS_SAVED\"\n+        LDFLAGS=\"$LDFLAGS_SAVED\"\n+        BOOST_CPPFLAGS=\n+        BOOST_LDFLAGS=\n         _version=0\n         if test \"$ac_boost_path\" != \"\"; then\n             if test -d \"$ac_boost_path\" && test -r \"$ac_boost_path\"; then\n@@ -191,6 +195,12 @@ if test \"x$want_boost\" = \"xyes\"; then\n                     VERSION_UNDERSCORE=`echo $_version | sed 's/\\./_/'`\n                     BOOST_CPPFLAGS=\"-I$ac_boost_path/include/boost-$VERSION_UNDERSCORE\"\n                 done\n+                dnl if nothing found search for layout used in Windows distributions\n+                if test -z \"$BOOST_CPPFLAGS\"; then\n+                    if test -d \"$ac_boost_path/boost\" && test -r \"$ac_boost_path/boost\"; then\n+                        BOOST_CPPFLAGS=\"-I$ac_boost_path\"\n+                    fi\n+                fi\n             fi\n         else\n             if test \"$cross_compiling\" != yes; then\n@@ -253,7 +263,7 @@ if test \"x$want_boost\" = \"xyes\"; then\n             AC_MSG_RESULT(yes)\n         succeeded=yes\n         found_system=yes\n-            ],[:\n+            ],[\n             ])\n         AC_LANG_POP([C++])\n     fi"
      },
      {
        "sha": "e9b0f2061cd038d09691892421c27eeaea375aa9",
        "filename": "build-aux/m4/ax_boost_chrono.m4",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/ax_boost_chrono.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/ax_boost_chrono.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_chrono.m4?ref=b16033938cccdb162fc04a4848472e90280afdaf",
        "patch": "@@ -1,5 +1,5 @@\n # ===========================================================================\n-#      http://www.gnu.org/software/autoconf-archive/ax_boost_chrono.html\n+#     https://www.gnu.org/software/autoconf-archive/ax_boost_chrono.html\n # ===========================================================================\n #\n # SYNOPSIS\n@@ -8,7 +8,7 @@\n #\n # DESCRIPTION\n #\n-#   Test for System library from the Boost C++ libraries. The macro requires\n+#   Test for Chrono library from the Boost C++ libraries. The macro requires\n #   a preceding call to AX_BOOST_BASE. Further documentation is available at\n #   <http://randspringer.de/boost/index.html>.\n #\n@@ -29,7 +29,7 @@\n #   and this notice are preserved. This file is offered as-is, without any\n #   warranty.\n \n-#serial 1\n+#serial 4\n \n AC_DEFUN([AX_BOOST_CHRONO],\n [\n@@ -68,7 +68,7 @@ AC_DEFUN([AX_BOOST_CHRONO],\n \t\t\t CXXFLAGS_SAVE=$CXXFLAGS\n \n \t\t\t AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/chrono.hpp>]],\n-                                   [[boost::chrono::system_clock::time_point time;]])],\n+                                   [[boost::chrono::system_clock::time_point* time = new boost::chrono::system_clock::time_point; delete time;]])],\n                    ax_cv_boost_chrono=yes, ax_cv_boost_chrono=no)\n \t\t\t CXXFLAGS=$CXXFLAGS_SAVE\n              AC_LANG_POP([C++])"
      },
      {
        "sha": "2bdb5937162e4207cf0f96586bc343653ae30da1",
        "filename": "build-aux/m4/ax_boost_program_options.m4",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/ax_boost_program_options.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/ax_boost_program_options.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_program_options.m4?ref=b16033938cccdb162fc04a4848472e90280afdaf",
        "patch": "@@ -29,7 +29,7 @@\n #   and this notice are preserved. This file is offered as-is, without any\n #   warranty.\n \n-#serial 22\n+#serial 24\n \n AC_DEFUN([AX_BOOST_PROGRAM_OPTIONS],\n [\n@@ -63,9 +63,9 @@ AC_DEFUN([AX_BOOST_PROGRAM_OPTIONS],\n \t\tAC_CACHE_CHECK([whether the Boost::Program_Options library is available],\n \t\t\t\t\t   ax_cv_boost_program_options,\n \t\t\t\t\t   [AC_LANG_PUSH(C++)\n-\t\t\t\tAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/program_options.hpp>\n+\t\t\t\tAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/program_options/errors.hpp>\n                                                           ]],\n-                                  [[boost::program_options::options_description generic(\"Generic options\");\n+                                  [[boost::program_options::error err(\"Error message\");\n                                    return 0;]])],\n                            ax_cv_boost_program_options=yes, ax_cv_boost_program_options=no)\n \t\t\t\t\tAC_LANG_POP([C++])\n@@ -74,7 +74,6 @@ AC_DEFUN([AX_BOOST_PROGRAM_OPTIONS],\n \t\t\t\tAC_DEFINE(HAVE_BOOST_PROGRAM_OPTIONS,,[define if the Boost::PROGRAM_OPTIONS library is available])\n                   BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n                 if test \"x$ax_boost_user_program_options_lib\" = \"x\"; then\n-                ax_lib=\n                 for libextension in `ls $BOOSTLIBDIR/libboost_program_options*.so* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\\(boost_program_options.*\\)\\.so.*$;\\1;'` `ls $BOOSTLIBDIR/libboost_program_options*.dylib* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\\(boost_program_options.*\\)\\.dylib.*$;\\1;'` `ls $BOOSTLIBDIR/libboost_program_options*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\\(boost_program_options.*\\)\\.a.*$;\\1;'` ; do\n                      ax_lib=${libextension}\n \t\t\t\t    AC_CHECK_LIB($ax_lib, exit,"
      },
      {
        "sha": "1c05450cbe1d5cc11a257f5c02284900890a973e",
        "filename": "build-aux/m4/ax_boost_system.m4",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/ax_boost_system.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/ax_boost_system.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_system.m4?ref=b16033938cccdb162fc04a4848472e90280afdaf",
        "patch": "@@ -31,7 +31,7 @@\n #   and this notice are preserved. This file is offered as-is, without any\n #   warranty.\n \n-#serial 17\n+#serial 18\n \n AC_DEFUN([AX_BOOST_SYSTEM],\n [\n@@ -68,9 +68,10 @@ AC_DEFUN([AX_BOOST_SYSTEM],\n \t\t\t\t\t   ax_cv_boost_system,\n         [AC_LANG_PUSH([C++])\n \t\t\t CXXFLAGS_SAVE=$CXXFLAGS\n+\t\t\t CXXFLAGS=\n \n \t\t\t AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/system/error_code.hpp>]],\n-                                   [[boost::system::system_category]])],\n+\t\t\t\t    [[boost::system::error_category *a = 0;]])],\n                    ax_cv_boost_system=yes, ax_cv_boost_system=no)\n \t\t\t CXXFLAGS=$CXXFLAGS_SAVE\n              AC_LANG_POP([C++])"
      },
      {
        "sha": "0cdbe752cfb78ab887b35968745347a367a8ace5",
        "filename": "build-aux/m4/ax_boost_unit_test_framework.m4",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/ax_boost_unit_test_framework.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/ax_boost_unit_test_framework.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_unit_test_framework.m4?ref=b16033938cccdb162fc04a4848472e90280afdaf",
        "patch": "@@ -1,6 +1,6 @@\n-# ================================================================================\n-#  http://www.gnu.org/software/autoconf-archive/ax_boost_unit_test_framework.html\n-# ================================================================================\n+# =================================================================================\n+#  https://www.gnu.org/software/autoconf-archive/ax_boost_unit_test_framework.html\n+# =================================================================================\n #\n # SYNOPSIS\n #\n@@ -29,7 +29,7 @@\n #   and this notice are preserved. This file is offered as-is, without any\n #   warranty.\n \n-#serial 19\n+#serial 21\n \n AC_DEFUN([AX_BOOST_UNIT_TEST_FRAMEWORK],\n [\n@@ -66,7 +66,7 @@ AC_DEFUN([AX_BOOST_UNIT_TEST_FRAMEWORK],\n         [AC_LANG_PUSH([C++])\n \t\t\t AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/test/unit_test.hpp>]],\n                                     [[using boost::unit_test::test_suite;\n-\t\t\t\t\t\t\t test_suite* test= BOOST_TEST_SUITE( \"Unit test example 1\" ); return 0;]])],\n+\t\t\t\t\t\t\t test_suite* test= BOOST_TEST_SUITE( \"Unit test example 1\" ); if (test == NULL) { return 1; } else { return 0; }]])],\n                    ax_cv_boost_unit_test_framework=yes, ax_cv_boost_unit_test_framework=no)\n          AC_LANG_POP([C++])\n \t\t])"
      },
      {
        "sha": "ca3639715e7243fa4343eb2e7f3de53927cc9d4a",
        "filename": "build-aux/m4/ax_check_compile_flag.m4",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/ax_check_compile_flag.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/ax_check_compile_flag.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_check_compile_flag.m4?ref=b16033938cccdb162fc04a4848472e90280afdaf",
        "patch": "@@ -4,7 +4,7 @@\n #\n # SYNOPSIS\n #\n-#   AX_CHECK_COMPILE_FLAG(FLAG, [ACTION-SUCCESS], [ACTION-FAILURE], [EXTRA-FLAGS])\n+#   AX_CHECK_COMPILE_FLAG(FLAG, [ACTION-SUCCESS], [ACTION-FAILURE], [EXTRA-FLAGS], [INPUT])\n #\n # DESCRIPTION\n #\n@@ -19,6 +19,8 @@\n #   the flags: \"CFLAGS EXTRA-FLAGS FLAG\".  This can for example be used to\n #   force the compiler to issue an error when a bad flag is given.\n #\n+#   INPUT gives an alternative input source to AC_COMPILE_IFELSE.\n+#\n #   NOTE: Implementation based on AX_CFLAGS_GCC_OPTION. Please keep this\n #   macro in sync with AX_CHECK_{PREPROC,LINK}_FLAG.\n #\n@@ -53,19 +55,19 @@\n #   modified version of the Autoconf Macro, you may extend this special\n #   exception to the GPL to apply to your modified version as well.\n \n-#serial 2\n+#serial 4\n \n AC_DEFUN([AX_CHECK_COMPILE_FLAG],\n-[AC_PREREQ(2.59)dnl for _AC_LANG_PREFIX\n+[AC_PREREQ(2.64)dnl for _AC_LANG_PREFIX and AS_VAR_IF\n AS_VAR_PUSHDEF([CACHEVAR],[ax_cv_check_[]_AC_LANG_ABBREV[]flags_$4_$1])dnl\n AC_CACHE_CHECK([whether _AC_LANG compiler accepts $1], CACHEVAR, [\n   ax_check_save_flags=$[]_AC_LANG_PREFIX[]FLAGS\n   _AC_LANG_PREFIX[]FLAGS=\"$[]_AC_LANG_PREFIX[]FLAGS $4 $1\"\n-  AC_COMPILE_IFELSE([AC_LANG_PROGRAM()],\n+  AC_COMPILE_IFELSE([m4_default([$5],[AC_LANG_PROGRAM()])],\n     [AS_VAR_SET(CACHEVAR,[yes])],\n     [AS_VAR_SET(CACHEVAR,[no])])\n   _AC_LANG_PREFIX[]FLAGS=$ax_check_save_flags])\n-AS_IF([test x\"AS_VAR_GET(CACHEVAR)\" = xyes],\n+AS_VAR_IF(CACHEVAR,yes,\n   [m4_default([$2], :)],\n   [m4_default([$3], :)])\n AS_VAR_POPDEF([CACHEVAR])dnl"
      },
      {
        "sha": "eb01a6ce135eca0fdde834b00c21b12202b09f3d",
        "filename": "build-aux/m4/ax_check_link_flag.m4",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/ax_check_link_flag.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/ax_check_link_flag.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_check_link_flag.m4?ref=b16033938cccdb162fc04a4848472e90280afdaf",
        "patch": "@@ -4,7 +4,7 @@\n #\n # SYNOPSIS\n #\n-#   AX_CHECK_LINK_FLAG(FLAG, [ACTION-SUCCESS], [ACTION-FAILURE], [EXTRA-FLAGS])\n+#   AX_CHECK_LINK_FLAG(FLAG, [ACTION-SUCCESS], [ACTION-FAILURE], [EXTRA-FLAGS], [INPUT])\n #\n # DESCRIPTION\n #\n@@ -19,6 +19,8 @@\n #   EXTRA-FLAGS FLAG\".  This can for example be used to force the linker to\n #   issue an error when a bad flag is given.\n #\n+#   INPUT gives an alternative input source to AC_LINK_IFELSE.\n+#\n #   NOTE: Implementation based on AX_CFLAGS_GCC_OPTION. Please keep this\n #   macro in sync with AX_CHECK_{PREPROC,COMPILE}_FLAG.\n #\n@@ -53,18 +55,19 @@\n #   modified version of the Autoconf Macro, you may extend this special\n #   exception to the GPL to apply to your modified version as well.\n \n-#serial 2\n+#serial 4\n \n AC_DEFUN([AX_CHECK_LINK_FLAG],\n-[AS_VAR_PUSHDEF([CACHEVAR],[ax_cv_check_ldflags_$4_$1])dnl\n+[AC_PREREQ(2.64)dnl for _AC_LANG_PREFIX and AS_VAR_IF\n+AS_VAR_PUSHDEF([CACHEVAR],[ax_cv_check_ldflags_$4_$1])dnl\n AC_CACHE_CHECK([whether the linker accepts $1], CACHEVAR, [\n   ax_check_save_flags=$LDFLAGS\n   LDFLAGS=\"$LDFLAGS $4 $1\"\n-  AC_LINK_IFELSE([AC_LANG_PROGRAM()],\n+  AC_LINK_IFELSE([m4_default([$5],[AC_LANG_PROGRAM()])],\n     [AS_VAR_SET(CACHEVAR,[yes])],\n     [AS_VAR_SET(CACHEVAR,[no])])\n   LDFLAGS=$ax_check_save_flags])\n-AS_IF([test x\"AS_VAR_GET(CACHEVAR)\" = xyes],\n+AS_VAR_IF(CACHEVAR,yes,\n   [m4_default([$2], :)],\n   [m4_default([$3], :)])\n AS_VAR_POPDEF([CACHEVAR])dnl"
      },
      {
        "sha": "ca1d5ee2b6d1ae107504d4ab433bc5f6fd629f61",
        "filename": "build-aux/m4/ax_check_preproc_flag.m4",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/ax_check_preproc_flag.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/ax_check_preproc_flag.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_check_preproc_flag.m4?ref=b16033938cccdb162fc04a4848472e90280afdaf",
        "patch": "@@ -4,7 +4,7 @@\n #\n # SYNOPSIS\n #\n-#   AX_CHECK_PREPROC_FLAG(FLAG, [ACTION-SUCCESS], [ACTION-FAILURE], [EXTRA-FLAGS])\n+#   AX_CHECK_PREPROC_FLAG(FLAG, [ACTION-SUCCESS], [ACTION-FAILURE], [EXTRA-FLAGS], [INPUT])\n #\n # DESCRIPTION\n #\n@@ -19,6 +19,8 @@\n #   \"CPPFLAGS EXTRA-FLAGS FLAG\".  This can for example be used to force the\n #   preprocessor to issue an error when a bad flag is given.\n #\n+#   INPUT gives an alternative input source to AC_PREPROC_IFELSE.\n+#\n #   NOTE: Implementation based on AX_CFLAGS_GCC_OPTION. Please keep this\n #   macro in sync with AX_CHECK_{COMPILE,LINK}_FLAG.\n #\n@@ -53,19 +55,19 @@\n #   modified version of the Autoconf Macro, you may extend this special\n #   exception to the GPL to apply to your modified version as well.\n \n-#serial 2\n+#serial 4\n \n AC_DEFUN([AX_CHECK_PREPROC_FLAG],\n-[AC_PREREQ(2.59)dnl for _AC_LANG_PREFIX\n+[AC_PREREQ(2.64)dnl for _AC_LANG_PREFIX and AS_VAR_IF\n AS_VAR_PUSHDEF([CACHEVAR],[ax_cv_check_[]_AC_LANG_ABBREV[]cppflags_$4_$1])dnl\n AC_CACHE_CHECK([whether _AC_LANG preprocessor accepts $1], CACHEVAR, [\n   ax_check_save_flags=$CPPFLAGS\n   CPPFLAGS=\"$CPPFLAGS $4 $1\"\n-  AC_PREPROC_IFELSE([AC_LANG_PROGRAM()],\n+  AC_PREPROC_IFELSE([m4_default([$5],[AC_LANG_PROGRAM()])],\n     [AS_VAR_SET(CACHEVAR,[yes])],\n     [AS_VAR_SET(CACHEVAR,[no])])\n   CPPFLAGS=$ax_check_save_flags])\n-AS_IF([test x\"AS_VAR_GET(CACHEVAR)\" = xyes],\n+AS_VAR_IF(CACHEVAR,yes,\n   [m4_default([$2], :)],\n   [m4_default([$3], :)])\n AS_VAR_POPDEF([CACHEVAR])dnl"
      },
      {
        "sha": "c788ca9bd435fbfe4e1642281aabd7f9492786ff",
        "filename": "build-aux/m4/ax_gcc_func_attribute.m4",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/ax_gcc_func_attribute.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/ax_gcc_func_attribute.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_gcc_func_attribute.m4?ref=b16033938cccdb162fc04a4848472e90280afdaf",
        "patch": "@@ -31,6 +31,7 @@\n #    cold\n #    const\n #    constructor\n+#    constructor_priority for constructor attribute with priority\n #    deprecated\n #    destructor\n #    dllexport\n@@ -73,7 +74,7 @@\n #   and this notice are preserved.  This file is offered as-is, without any\n #   warranty.\n \n-#serial 2\n+#serial 3\n \n AC_DEFUN([AX_GCC_FUNC_ATTRIBUTE], [\n     AS_VAR_PUSHDEF([ac_var], [ax_cv_have_func_attribute_$1])\n@@ -103,6 +104,9 @@ AC_DEFUN([AX_GCC_FUNC_ATTRIBUTE], [\n                 [const], [\n                     int foo( void ) __attribute__(($1));\n                 ],\n+                [constructor_priority], [\n+                    int foo( void ) __attribute__((__constructor__(65535/2)));\n+                ],\n                 [constructor], [\n                     int foo( void ) __attribute__(($1));\n                 ],\n@@ -180,6 +184,8 @@ AC_DEFUN([AX_GCC_FUNC_ATTRIBUTE], [\n                 [visibility], [\n                     int foo_def( void ) __attribute__(($1(\"default\")));\n                     int foo_hid( void ) __attribute__(($1(\"hidden\")));\n+                    int foo_int( void ) __attribute__(($1(\"internal\")));\n+                    int foo_pro( void ) __attribute__(($1(\"protected\")));\n                 ],\n                 [warning], [\n                     int foo( void ) __attribute__(($1(\"\")));"
      },
      {
        "sha": "4c4051ea376f720faf21a4705c66604fe444c958",
        "filename": "build-aux/m4/ax_pthread.m4",
        "status": "modified",
        "additions": 269,
        "deletions": 116,
        "changes": 385,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/ax_pthread.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/ax_pthread.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_pthread.m4?ref=b16033938cccdb162fc04a4848472e90280afdaf",
        "patch": "@@ -19,19 +19,19 @@\n #   is necessary on AIX to use the special cc_r compiler alias.)\n #\n #   NOTE: You are assumed to not only compile your program with these flags,\n-#   but also link it with them as well. e.g. you should link with\n+#   but also to link with them as well. For example, you might link with\n #   $PTHREAD_CC $CFLAGS $PTHREAD_CFLAGS $LDFLAGS ... $PTHREAD_LIBS $LIBS\n #\n-#   If you are only building threads programs, you may wish to use these\n+#   If you are only building threaded programs, you may wish to use these\n #   variables in your default LIBS, CFLAGS, and CC:\n #\n #     LIBS=\"$PTHREAD_LIBS $LIBS\"\n #     CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n #     CC=\"$PTHREAD_CC\"\n #\n #   In addition, if the PTHREAD_CREATE_JOINABLE thread-attribute constant\n-#   has a nonstandard name, defines PTHREAD_CREATE_JOINABLE to that name\n-#   (e.g. PTHREAD_CREATE_UNDETACHED on AIX).\n+#   has a nonstandard name, this macro defines PTHREAD_CREATE_JOINABLE to\n+#   that name (e.g. PTHREAD_CREATE_UNDETACHED on AIX).\n #\n #   Also HAVE_PTHREAD_PRIO_INHERIT is defined if pthread is found and the\n #   PTHREAD_PRIO_INHERIT symbol is defined when compiling with\n@@ -82,35 +82,40 @@\n #   modified version of the Autoconf Macro, you may extend this special\n #   exception to the GPL to apply to your modified version as well.\n \n-#serial 21\n+#serial 23\n \n AU_ALIAS([ACX_PTHREAD], [AX_PTHREAD])\n AC_DEFUN([AX_PTHREAD], [\n AC_REQUIRE([AC_CANONICAL_HOST])\n+AC_REQUIRE([AC_PROG_CC])\n+AC_REQUIRE([AC_PROG_SED])\n AC_LANG_PUSH([C])\n ax_pthread_ok=no\n \n # We used to check for pthread.h first, but this fails if pthread.h\n-# requires special compiler flags (e.g. on True64 or Sequent).\n+# requires special compiler flags (e.g. on Tru64 or Sequent).\n # It gets checked for in the link test anyway.\n \n # First of all, check if the user has set any of the PTHREAD_LIBS,\n # etcetera environment variables, and if threads linking works using\n # them:\n-if test x\"$PTHREAD_LIBS$PTHREAD_CFLAGS\" != x; then\n-        save_CFLAGS=\"$CFLAGS\"\n+if test \"x$PTHREAD_CFLAGS$PTHREAD_LIBS\" != \"x\"; then\n+        ax_pthread_save_CC=\"$CC\"\n+        ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+        ax_pthread_save_LIBS=\"$LIBS\"\n+        AS_IF([test \"x$PTHREAD_CC\" != \"x\"], [CC=\"$PTHREAD_CC\"])\n         CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n-        save_LIBS=\"$LIBS\"\n         LIBS=\"$PTHREAD_LIBS $LIBS\"\n-        AC_MSG_CHECKING([for pthread_join in LIBS=$PTHREAD_LIBS with CFLAGS=$PTHREAD_CFLAGS])\n-        AC_TRY_LINK_FUNC([pthread_join], [ax_pthread_ok=yes])\n+        AC_MSG_CHECKING([for pthread_join using $CC $PTHREAD_CFLAGS $PTHREAD_LIBS])\n+        AC_LINK_IFELSE([AC_LANG_CALL([], [pthread_join])], [ax_pthread_ok=yes])\n         AC_MSG_RESULT([$ax_pthread_ok])\n-        if test x\"$ax_pthread_ok\" = xno; then\n+        if test \"x$ax_pthread_ok\" = \"xno\"; then\n                 PTHREAD_LIBS=\"\"\n                 PTHREAD_CFLAGS=\"\"\n         fi\n-        LIBS=\"$save_LIBS\"\n-        CFLAGS=\"$save_CFLAGS\"\n+        CC=\"$ax_pthread_save_CC\"\n+        CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+        LIBS=\"$ax_pthread_save_LIBS\"\n fi\n \n # We must check for the threads library under a number of different\n@@ -123,7 +128,7 @@ fi\n # which indicates that we try without any flags at all, and \"pthread-config\"\n # which is a program returning the flags for the Pth emulation library.\n \n-ax_pthread_flags=\"pthreads none -Kthread -kthread lthread -pthread -pthreads -mthreads pthread --thread-safe -mt pthread-config\"\n+ax_pthread_flags=\"pthreads none -Kthread -pthread -pthreads -mthreads pthread --thread-safe -mt pthread-config\"\n \n # The ordering *is* (sometimes) important.  Some notes on the\n # individual items follow:\n@@ -132,82 +137,225 @@ ax_pthread_flags=\"pthreads none -Kthread -kthread lthread -pthread -pthreads -mt\n # none: in case threads are in libc; should be tried before -Kthread and\n #       other compiler flags to prevent continual compiler warnings\n # -Kthread: Sequent (threads in libc, but -Kthread needed for pthread.h)\n-# -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)\n-# lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)\n-# -pthread: Linux/gcc (kernel threads), BSD/gcc (userland threads)\n-# -pthreads: Solaris/gcc\n-# -mthreads: Mingw32/gcc, Lynx/gcc\n+# -pthread: Linux/gcc (kernel threads), BSD/gcc (userland threads), Tru64\n+#           (Note: HP C rejects this with \"bad form for `-t' option\")\n+# -pthreads: Solaris/gcc (Note: HP C also rejects)\n # -mt: Sun Workshop C (may only link SunOS threads [-lthread], but it\n-#      doesn't hurt to check since this sometimes defines pthreads too;\n-#      also defines -D_REENTRANT)\n-#      ... -mt is also the pthreads flag for HP/aCC\n+#      doesn't hurt to check since this sometimes defines pthreads and\n+#      -D_REENTRANT too), HP C (must be checked before -lpthread, which\n+#      is present but should not be used directly; and before -mthreads,\n+#      because the compiler interprets this as \"-mt\" + \"-hreads\")\n+# -mthreads: Mingw32/gcc, Lynx/gcc\n # pthread: Linux, etcetera\n # --thread-safe: KAI C++\n # pthread-config: use pthread-config program (for GNU Pth library)\n \n-case ${host_os} in\n+case $host_os in\n+\n+        freebsd*)\n+\n+        # -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)\n+        # lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)\n+\n+        ax_pthread_flags=\"-kthread lthread $ax_pthread_flags\"\n+        ;;\n+\n+        hpux*)\n+\n+        # From the cc(1) man page: \"[-mt] Sets various -D flags to enable\n+        # multi-threading and also sets -lpthread.\"\n+\n+        ax_pthread_flags=\"-mt -pthread pthread $ax_pthread_flags\"\n+        ;;\n+\n+        openedition*)\n+\n+        # IBM z/OS requires a feature-test macro to be defined in order to\n+        # enable POSIX threads at all, so give the user a hint if this is\n+        # not set. (We don't define these ourselves, as they can affect\n+        # other portions of the system API in unpredictable ways.)\n+\n+        AC_EGREP_CPP([AX_PTHREAD_ZOS_MISSING],\n+            [\n+#            if !defined(_OPEN_THREADS) && !defined(_UNIX03_THREADS)\n+             AX_PTHREAD_ZOS_MISSING\n+#            endif\n+            ],\n+            [AC_MSG_WARN([IBM z/OS requires -D_OPEN_THREADS or -D_UNIX03_THREADS to enable pthreads support.])])\n+        ;;\n+\n         solaris*)\n \n         # On Solaris (at least, for some versions), libc contains stubbed\n         # (non-functional) versions of the pthreads routines, so link-based\n-        # tests will erroneously succeed.  (We need to link with -pthreads/-mt/\n-        # -lpthread.)  (The stubs are missing pthread_cleanup_push, or rather\n-        # a function called by this macro, so we could check for that, but\n-        # who knows whether they'll stub that too in a future libc.)  So,\n-        # we'll just look for -pthreads and -lpthread first:\n+        # tests will erroneously succeed. (N.B.: The stubs are missing\n+        # pthread_cleanup_push, or rather a function called by this macro,\n+        # so we could check for that, but who knows whether they'll stub\n+        # that too in a future libc.)  So we'll check first for the\n+        # standard Solaris way of linking pthreads (-mt -lpthread).\n+\n+        ax_pthread_flags=\"-mt,pthread pthread $ax_pthread_flags\"\n+        ;;\n+esac\n+\n+# GCC generally uses -pthread, or -pthreads on some platforms (e.g. SPARC)\n \n-        ax_pthread_flags=\"-pthreads pthread -mt -pthread $ax_pthread_flags\"\n+AS_IF([test \"x$GCC\" = \"xyes\"],\n+      [ax_pthread_flags=\"-pthread -pthreads $ax_pthread_flags\"])\n+\n+# The presence of a feature test macro requesting re-entrant function\n+# definitions is, on some systems, a strong hint that pthreads support is\n+# correctly enabled\n+\n+case $host_os in\n+        darwin* | hpux* | linux* | osf* | solaris*)\n+        ax_pthread_check_macro=\"_REENTRANT\"\n         ;;\n \n-        darwin*)\n-        ax_pthread_flags=\"-pthread $ax_pthread_flags\"\n+        aix*)\n+        ax_pthread_check_macro=\"_THREAD_SAFE\"\n+        ;;\n+\n+        *)\n+        ax_pthread_check_macro=\"--\"\n         ;;\n esac\n+AS_IF([test \"x$ax_pthread_check_macro\" = \"x--\"],\n+      [ax_pthread_check_cond=0],\n+      [ax_pthread_check_cond=\"!defined($ax_pthread_check_macro)\"])\n+\n+# Are we compiling with Clang?\n+\n+AC_CACHE_CHECK([whether $CC is Clang],\n+    [ax_cv_PTHREAD_CLANG],\n+    [ax_cv_PTHREAD_CLANG=no\n+     # Note that Autoconf sets GCC=yes for Clang as well as GCC\n+     if test \"x$GCC\" = \"xyes\"; then\n+        AC_EGREP_CPP([AX_PTHREAD_CC_IS_CLANG],\n+            [/* Note: Clang 2.7 lacks __clang_[a-z]+__ */\n+#            if defined(__clang__) && defined(__llvm__)\n+             AX_PTHREAD_CC_IS_CLANG\n+#            endif\n+            ],\n+            [ax_cv_PTHREAD_CLANG=yes])\n+     fi\n+    ])\n+ax_pthread_clang=\"$ax_cv_PTHREAD_CLANG\"\n+\n+ax_pthread_clang_warning=no\n+\n+# Clang needs special handling, because older versions handle the -pthread\n+# option in a rather... idiosyncratic way\n+\n+if test \"x$ax_pthread_clang\" = \"xyes\"; then\n+\n+        # Clang takes -pthread; it has never supported any other flag\n+\n+        # (Note 1: This will need to be revisited if a system that Clang\n+        # supports has POSIX threads in a separate library.  This tends not\n+        # to be the way of modern systems, but it's conceivable.)\n+\n+        # (Note 2: On some systems, notably Darwin, -pthread is not needed\n+        # to get POSIX threads support; the API is always present and\n+        # active.  We could reasonably leave PTHREAD_CFLAGS empty.  But\n+        # -pthread does define _REENTRANT, and while the Darwin headers\n+        # ignore this macro, third-party headers might not.)\n+\n+        PTHREAD_CFLAGS=\"-pthread\"\n+        PTHREAD_LIBS=\n+\n+        ax_pthread_ok=yes\n+\n+        # However, older versions of Clang make a point of warning the user\n+        # that, in an invocation where only linking and no compilation is\n+        # taking place, the -pthread option has no effect (\"argument unused\n+        # during compilation\").  They expect -pthread to be passed in only\n+        # when source code is being compiled.\n+        #\n+        # Problem is, this is at odds with the way Automake and most other\n+        # C build frameworks function, which is that the same flags used in\n+        # compilation (CFLAGS) are also used in linking.  Many systems\n+        # supported by AX_PTHREAD require exactly this for POSIX threads\n+        # support, and in fact it is often not straightforward to specify a\n+        # flag that is used only in the compilation phase and not in\n+        # linking.  Such a scenario is extremely rare in practice.\n+        #\n+        # Even though use of the -pthread flag in linking would only print\n+        # a warning, this can be a nuisance for well-run software projects\n+        # that build with -Werror.  So if the active version of Clang has\n+        # this misfeature, we search for an option to squash it.\n+\n+        AC_CACHE_CHECK([whether Clang needs flag to prevent \"argument unused\" warning when linking with -pthread],\n+            [ax_cv_PTHREAD_CLANG_NO_WARN_FLAG],\n+            [ax_cv_PTHREAD_CLANG_NO_WARN_FLAG=unknown\n+             # Create an alternate version of $ac_link that compiles and\n+             # links in two steps (.c -> .o, .o -> exe) instead of one\n+             # (.c -> exe), because the warning occurs only in the second\n+             # step\n+             ax_pthread_save_ac_link=\"$ac_link\"\n+             ax_pthread_sed='s/conftest\\.\\$ac_ext/conftest.$ac_objext/g'\n+             ax_pthread_link_step=`$as_echo \"$ac_link\" | sed \"$ax_pthread_sed\"`\n+             ax_pthread_2step_ac_link=\"($ac_compile) && (echo ==== >&5) && ($ax_pthread_link_step)\"\n+             ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+             for ax_pthread_try in '' -Qunused-arguments -Wno-unused-command-line-argument unknown; do\n+                AS_IF([test \"x$ax_pthread_try\" = \"xunknown\"], [break])\n+                CFLAGS=\"-Werror -Wunknown-warning-option $ax_pthread_try -pthread $ax_pthread_save_CFLAGS\"\n+                ac_link=\"$ax_pthread_save_ac_link\"\n+                AC_LINK_IFELSE([AC_LANG_SOURCE([[int main(void){return 0;}]])],\n+                    [ac_link=\"$ax_pthread_2step_ac_link\"\n+                     AC_LINK_IFELSE([AC_LANG_SOURCE([[int main(void){return 0;}]])],\n+                         [break])\n+                    ])\n+             done\n+             ac_link=\"$ax_pthread_save_ac_link\"\n+             CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+             AS_IF([test \"x$ax_pthread_try\" = \"x\"], [ax_pthread_try=no])\n+             ax_cv_PTHREAD_CLANG_NO_WARN_FLAG=\"$ax_pthread_try\"\n+            ])\n \n-# Clang doesn't consider unrecognized options an error unless we specify\n-# -Werror. We throw in some extra Clang-specific options to ensure that\n-# this doesn't happen for GCC, which also accepts -Werror.\n+        case \"$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG\" in\n+                no | unknown) ;;\n+                *) PTHREAD_CFLAGS=\"$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG $PTHREAD_CFLAGS\" ;;\n+        esac\n \n-AC_MSG_CHECKING([if compiler needs -Werror to reject unknown flags])\n-save_CFLAGS=\"$CFLAGS\"\n-ax_pthread_extra_flags=\"-Werror\"\n-CFLAGS=\"$CFLAGS $ax_pthread_extra_flags -Wunknown-warning-option -Wsizeof-array-argument\"\n-AC_COMPILE_IFELSE([AC_LANG_PROGRAM([int foo(void);],[foo()])],\n-                  [AC_MSG_RESULT([yes])],\n-                  [ax_pthread_extra_flags=\n-                   AC_MSG_RESULT([no])])\n-CFLAGS=\"$save_CFLAGS\"\n+fi # $ax_pthread_clang = yes\n \n-if test x\"$ax_pthread_ok\" = xno; then\n-for flag in $ax_pthread_flags; do\n+if test \"x$ax_pthread_ok\" = \"xno\"; then\n+for ax_pthread_try_flag in $ax_pthread_flags; do\n \n-        case $flag in\n+        case $ax_pthread_try_flag in\n                 none)\n                 AC_MSG_CHECKING([whether pthreads work without any flags])\n                 ;;\n \n+                -mt,pthread)\n+                AC_MSG_CHECKING([whether pthreads work with -mt -lpthread])\n+                PTHREAD_CFLAGS=\"-mt\"\n+                PTHREAD_LIBS=\"-lpthread\"\n+                ;;\n+\n                 -*)\n-                AC_MSG_CHECKING([whether pthreads work with $flag])\n-                PTHREAD_CFLAGS=\"$flag\"\n+                AC_MSG_CHECKING([whether pthreads work with $ax_pthread_try_flag])\n+                PTHREAD_CFLAGS=\"$ax_pthread_try_flag\"\n                 ;;\n \n                 pthread-config)\n                 AC_CHECK_PROG([ax_pthread_config], [pthread-config], [yes], [no])\n-                if test x\"$ax_pthread_config\" = xno; then continue; fi\n+                AS_IF([test \"x$ax_pthread_config\" = \"xno\"], [continue])\n                 PTHREAD_CFLAGS=\"`pthread-config --cflags`\"\n                 PTHREAD_LIBS=\"`pthread-config --ldflags` `pthread-config --libs`\"\n                 ;;\n \n                 *)\n-                AC_MSG_CHECKING([for the pthreads library -l$flag])\n-                PTHREAD_LIBS=\"-l$flag\"\n+                AC_MSG_CHECKING([for the pthreads library -l$ax_pthread_try_flag])\n+                PTHREAD_LIBS=\"-l$ax_pthread_try_flag\"\n                 ;;\n         esac\n \n-        save_LIBS=\"$LIBS\"\n-        save_CFLAGS=\"$CFLAGS\"\n+        ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+        ax_pthread_save_LIBS=\"$LIBS\"\n+        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n         LIBS=\"$PTHREAD_LIBS $LIBS\"\n-        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS $ax_pthread_extra_flags\"\n \n         # Check for various functions.  We must include pthread.h,\n         # since some functions may be macros.  (On the Sequent, we\n@@ -218,7 +366,11 @@ for flag in $ax_pthread_flags; do\n         # pthread_cleanup_push because it is one of the few pthread\n         # functions on Solaris that doesn't have a non-functional libc stub.\n         # We try pthread_create on general principles.\n+\n         AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>\n+#                       if $ax_pthread_check_cond\n+#                        error \"$ax_pthread_check_macro must be defined\"\n+#                       endif\n                         static void routine(void *a) { a = 0; }\n                         static void *start_routine(void *a) { return a; }],\n                        [pthread_t th; pthread_attr_t attr;\n@@ -227,88 +379,89 @@ for flag in $ax_pthread_flags; do\n                         pthread_attr_init(&attr);\n                         pthread_cleanup_push(routine, 0);\n                         pthread_cleanup_pop(0) /* ; */])],\n-                [ax_pthread_ok=yes],\n-                [])\n+            [ax_pthread_ok=yes],\n+            [])\n \n-        LIBS=\"$save_LIBS\"\n-        CFLAGS=\"$save_CFLAGS\"\n+        CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+        LIBS=\"$ax_pthread_save_LIBS\"\n \n         AC_MSG_RESULT([$ax_pthread_ok])\n-        if test \"x$ax_pthread_ok\" = xyes; then\n-                break;\n-        fi\n+        AS_IF([test \"x$ax_pthread_ok\" = \"xyes\"], [break])\n \n         PTHREAD_LIBS=\"\"\n         PTHREAD_CFLAGS=\"\"\n done\n fi\n \n # Various other checks:\n-if test \"x$ax_pthread_ok\" = xyes; then\n-        save_LIBS=\"$LIBS\"\n-        LIBS=\"$PTHREAD_LIBS $LIBS\"\n-        save_CFLAGS=\"$CFLAGS\"\n+if test \"x$ax_pthread_ok\" = \"xyes\"; then\n+        ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+        ax_pthread_save_LIBS=\"$LIBS\"\n         CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+        LIBS=\"$PTHREAD_LIBS $LIBS\"\n \n         # Detect AIX lossage: JOINABLE attribute is called UNDETACHED.\n-        AC_MSG_CHECKING([for joinable pthread attribute])\n-        attr_name=unknown\n-        for attr in PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_UNDETACHED; do\n-            AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>],\n-                           [int attr = $attr; return attr /* ; */])],\n-                [attr_name=$attr; break],\n-                [])\n-        done\n-        AC_MSG_RESULT([$attr_name])\n-        if test \"$attr_name\" != PTHREAD_CREATE_JOINABLE; then\n-            AC_DEFINE_UNQUOTED([PTHREAD_CREATE_JOINABLE], [$attr_name],\n-                               [Define to necessary symbol if this constant\n-                                uses a non-standard name on your system.])\n-        fi\n-\n-        AC_MSG_CHECKING([if more special flags are required for pthreads])\n-        flag=no\n-        case ${host_os} in\n-            aix* | freebsd* | darwin*) flag=\"-D_THREAD_SAFE\";;\n-            osf* | hpux*) flag=\"-D_REENTRANT\";;\n-            solaris*)\n-            if test \"$GCC\" = \"yes\"; then\n-                flag=\"-D_REENTRANT\"\n-            else\n-                # TODO: What about Clang on Solaris?\n-                flag=\"-mt -D_REENTRANT\"\n-            fi\n-            ;;\n-        esac\n-        AC_MSG_RESULT([$flag])\n-        if test \"x$flag\" != xno; then\n-            PTHREAD_CFLAGS=\"$flag $PTHREAD_CFLAGS\"\n-        fi\n+        AC_CACHE_CHECK([for joinable pthread attribute],\n+            [ax_cv_PTHREAD_JOINABLE_ATTR],\n+            [ax_cv_PTHREAD_JOINABLE_ATTR=unknown\n+             for ax_pthread_attr in PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_UNDETACHED; do\n+                 AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>],\n+                                                 [int attr = $ax_pthread_attr; return attr /* ; */])],\n+                                [ax_cv_PTHREAD_JOINABLE_ATTR=$ax_pthread_attr; break],\n+                                [])\n+             done\n+            ])\n+        AS_IF([test \"x$ax_cv_PTHREAD_JOINABLE_ATTR\" != \"xunknown\" && \\\n+               test \"x$ax_cv_PTHREAD_JOINABLE_ATTR\" != \"xPTHREAD_CREATE_JOINABLE\" && \\\n+               test \"x$ax_pthread_joinable_attr_defined\" != \"xyes\"],\n+              [AC_DEFINE_UNQUOTED([PTHREAD_CREATE_JOINABLE],\n+                                  [$ax_cv_PTHREAD_JOINABLE_ATTR],\n+                                  [Define to necessary symbol if this constant\n+                                   uses a non-standard name on your system.])\n+               ax_pthread_joinable_attr_defined=yes\n+              ])\n+\n+        AC_CACHE_CHECK([whether more special flags are required for pthreads],\n+            [ax_cv_PTHREAD_SPECIAL_FLAGS],\n+            [ax_cv_PTHREAD_SPECIAL_FLAGS=no\n+             case $host_os in\n+             solaris*)\n+             ax_cv_PTHREAD_SPECIAL_FLAGS=\"-D_POSIX_PTHREAD_SEMANTICS\"\n+             ;;\n+             esac\n+            ])\n+        AS_IF([test \"x$ax_cv_PTHREAD_SPECIAL_FLAGS\" != \"xno\" && \\\n+               test \"x$ax_pthread_special_flags_added\" != \"xyes\"],\n+              [PTHREAD_CFLAGS=\"$ax_cv_PTHREAD_SPECIAL_FLAGS $PTHREAD_CFLAGS\"\n+               ax_pthread_special_flags_added=yes])\n \n         AC_CACHE_CHECK([for PTHREAD_PRIO_INHERIT],\n-            [ax_cv_PTHREAD_PRIO_INHERIT], [\n-                AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]],\n-                                                [[int i = PTHREAD_PRIO_INHERIT;]])],\n-                    [ax_cv_PTHREAD_PRIO_INHERIT=yes],\n-                    [ax_cv_PTHREAD_PRIO_INHERIT=no])\n+            [ax_cv_PTHREAD_PRIO_INHERIT],\n+            [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]],\n+                                             [[int i = PTHREAD_PRIO_INHERIT;]])],\n+                            [ax_cv_PTHREAD_PRIO_INHERIT=yes],\n+                            [ax_cv_PTHREAD_PRIO_INHERIT=no])\n             ])\n-        AS_IF([test \"x$ax_cv_PTHREAD_PRIO_INHERIT\" = \"xyes\"],\n-            [AC_DEFINE([HAVE_PTHREAD_PRIO_INHERIT], [1], [Have PTHREAD_PRIO_INHERIT.])])\n+        AS_IF([test \"x$ax_cv_PTHREAD_PRIO_INHERIT\" = \"xyes\" && \\\n+               test \"x$ax_pthread_prio_inherit_defined\" != \"xyes\"],\n+              [AC_DEFINE([HAVE_PTHREAD_PRIO_INHERIT], [1], [Have PTHREAD_PRIO_INHERIT.])\n+               ax_pthread_prio_inherit_defined=yes\n+              ])\n \n-        LIBS=\"$save_LIBS\"\n-        CFLAGS=\"$save_CFLAGS\"\n+        CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+        LIBS=\"$ax_pthread_save_LIBS\"\n \n         # More AIX lossage: compile with *_r variant\n-        if test \"x$GCC\" != xyes; then\n+        if test \"x$GCC\" != \"xyes\"; then\n             case $host_os in\n                 aix*)\n                 AS_CASE([\"x/$CC\"],\n-                  [x*/c89|x*/c89_128|x*/c99|x*/c99_128|x*/cc|x*/cc128|x*/xlc|x*/xlc_v6|x*/xlc128|x*/xlc128_v6],\n-                  [#handle absolute path differently from PATH based program lookup\n-                   AS_CASE([\"x$CC\"],\n-                     [x/*],\n-                     [AS_IF([AS_EXECUTABLE_P([${CC}_r])],[PTHREAD_CC=\"${CC}_r\"])],\n-                     [AC_CHECK_PROGS([PTHREAD_CC],[${CC}_r],[$CC])])])\n+                    [x*/c89|x*/c89_128|x*/c99|x*/c99_128|x*/cc|x*/cc128|x*/xlc|x*/xlc_v6|x*/xlc128|x*/xlc128_v6],\n+                    [#handle absolute path differently from PATH based program lookup\n+                     AS_CASE([\"x$CC\"],\n+                         [x/*],\n+                         [AS_IF([AS_EXECUTABLE_P([${CC}_r])],[PTHREAD_CC=\"${CC}_r\"])],\n+                         [AC_CHECK_PROGS([PTHREAD_CC],[${CC}_r],[$CC])])])\n                 ;;\n             esac\n         fi\n@@ -321,7 +474,7 @@ AC_SUBST([PTHREAD_CFLAGS])\n AC_SUBST([PTHREAD_CC])\n \n # Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:\n-if test x\"$ax_pthread_ok\" = xyes; then\n+if test \"x$ax_pthread_ok\" = \"xyes\"; then\n         ifelse([$1],,[AC_DEFINE([HAVE_PTHREAD],[1],[Define if you have POSIX threads libraries and header files.])],[$1])\n         :\n else"
      },
      {
        "sha": "75c43f9a92d3d6ac2a5d1aee89e97bab7a89f545",
        "filename": "build-aux/m4/l_atomic.m4",
        "status": "added",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/l_atomic.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/l_atomic.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/l_atomic.m4?ref=b16033938cccdb162fc04a4848472e90280afdaf",
        "patch": "@@ -0,0 +1,46 @@\n+dnl Copyright (c) 2015 Tim Kosse <tim.kosse@filezilla-project.org>\n+dnl Copying and distribution of this file, with or without modification, are\n+dnl permitted in any medium without royalty provided the copyright notice\n+dnl and this notice are preserved. This file is offered as-is, without any\n+dnl warranty.\n+\n+# Some versions of gcc/libstdc++ require linking with -latomic if\n+# using the C++ atomic library.\n+#\n+# Sourced from http://bugs.debian.org/797228\n+\n+m4_define([_CHECK_ATOMIC_testbody], [[\n+  #include <atomic>\n+  #include <cstdint>\n+\n+  int main() {\n+    std::atomic<int64_t> a{};\n+\n+    int64_t v = 5;\n+    int64_t r = a.fetch_add(v);\n+    return static_cast<int>(r);\n+  }\n+]])\n+\n+AC_DEFUN([CHECK_ATOMIC], [\n+\n+  AC_LANG_PUSH(C++)\n+\n+  AC_MSG_CHECKING([whether std::atomic can be used without link library])\n+\n+  AC_LINK_IFELSE([AC_LANG_SOURCE([_CHECK_ATOMIC_testbody])],[\n+      AC_MSG_RESULT([yes])\n+    ],[\n+      AC_MSG_RESULT([no])\n+      LIBS=\"$LIBS -latomic\"\n+      AC_MSG_CHECKING([whether std::atomic needs -latomic])\n+      AC_LINK_IFELSE([AC_LANG_SOURCE([_CHECK_ATOMIC_testbody])],[\n+          AC_MSG_RESULT([yes])\n+        ],[\n+          AC_MSG_RESULT([no])\n+          AC_MSG_FAILURE([cannot figure out how to use std::atomic])\n+        ])\n+    ])\n+\n+  AC_LANG_POP\n+])"
      },
      {
        "sha": "46649369851bd313705feb03dc3a90becfb321c4",
        "filename": "build-aux/m4/syscoin_find_bdb48.m4",
        "status": "modified",
        "additions": 68,
        "deletions": 56,
        "changes": 124,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/syscoin_find_bdb48.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/syscoin_find_bdb48.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/syscoin_find_bdb48.m4?ref=b16033938cccdb162fc04a4848472e90280afdaf",
        "patch": "@@ -1,66 +1,78 @@\n+dnl Copyright (c) 2013-2015 The Syscoin Core developers\n+dnl Distributed under the MIT software license, see the accompanying\n+dnl file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n AC_DEFUN([SYSCOIN_FIND_BDB48],[\n-  AC_MSG_CHECKING([for Berkeley DB C++ headers])\n-  BDB_CPPFLAGS=\n-  BDB_LIBS=\n-  bdbpath=X\n-  bdb48path=X\n-  bdbdirlist=\n-  for _vn in 4.8 48 4 5 ''; do\n-    for _pfx in b lib ''; do\n-      bdbdirlist=\"$bdbdirlist ${_pfx}db${_vn}\"\n+  AC_ARG_VAR(BDB_CFLAGS, [C compiler flags for BerkeleyDB, bypasses autodetection])\n+  AC_ARG_VAR(BDB_LIBS, [Linker flags for BerkeleyDB, bypasses autodetection])\n+\n+  if test \"x$BDB_CFLAGS\" = \"x\"; then\n+    AC_MSG_CHECKING([for Berkeley DB C++ headers])\n+    BDB_CPPFLAGS=\n+    bdbpath=X\n+    bdb48path=X\n+    bdbdirlist=\n+    for _vn in 4.8 48 4 5 5.3 ''; do\n+      for _pfx in b lib ''; do\n+        bdbdirlist=\"$bdbdirlist ${_pfx}db${_vn}\"\n+      done\n     done\n-  done\n-  for searchpath in $bdbdirlist ''; do\n-    test -n \"${searchpath}\" && searchpath=\"${searchpath}/\"\n-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-      #include <${searchpath}db_cxx.h>\n-    ]],[[\n-      #if !((DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR >= 8) || DB_VERSION_MAJOR > 4)\n-        #error \"failed to find bdb 4.8+\"\n-      #endif\n-    ]])],[\n-      if test \"x$bdbpath\" = \"xX\"; then\n-        bdbpath=\"${searchpath}\"\n-      fi\n-    ],[\n-      continue\n-    ])\n-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-      #include <${searchpath}db_cxx.h>\n-    ]],[[\n-      #if !(DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR == 8)\n-        #error \"failed to find bdb 4.8\"\n-      #endif\n-    ]])],[\n-      bdb48path=\"${searchpath}\"\n-      break\n-    ],[])\n-  done\n-  if test \"x$bdbpath\" = \"xX\"; then\n-    AC_MSG_RESULT([no])\n-    AC_MSG_ERROR([libdb_cxx headers missing, Syscoin Core requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n-  elif test \"x$bdb48path\" = \"xX\"; then\n-    SYSCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdbpath}],db_cxx)\n-    AC_ARG_WITH([incompatible-bdb],[AS_HELP_STRING([--with-incompatible-bdb], [allow using a bdb version other than 4.8])],[\n-      AC_MSG_WARN([Found Berkeley DB other than 4.8; wallets opened by this build will not be portable!])\n-    ],[\n-      AC_MSG_ERROR([Found Berkeley DB other than 4.8, required for portable wallets (--with-incompatible-bdb to ignore or --disable-wallet to disable wallet functionality)])\n-    ])\n+    for searchpath in $bdbdirlist ''; do\n+      test -n \"${searchpath}\" && searchpath=\"${searchpath}/\"\n+      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+        #include <${searchpath}db_cxx.h>\n+      ]],[[\n+        #if !((DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR >= 8) || DB_VERSION_MAJOR > 4)\n+          #error \"failed to find bdb 4.8+\"\n+        #endif\n+      ]])],[\n+        if test \"x$bdbpath\" = \"xX\"; then\n+          bdbpath=\"${searchpath}\"\n+        fi\n+      ],[\n+        continue\n+      ])\n+      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+        #include <${searchpath}db_cxx.h>\n+      ]],[[\n+        #if !(DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR == 8)\n+          #error \"failed to find bdb 4.8\"\n+        #endif\n+      ]])],[\n+        bdb48path=\"${searchpath}\"\n+        break\n+      ],[])\n+    done\n+    if test \"x$bdbpath\" = \"xX\"; then\n+      AC_MSG_RESULT([no])\n+      AC_MSG_ERROR([libdb_cxx headers missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+    elif test \"x$bdb48path\" = \"xX\"; then\n+      SYSCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdbpath}],db_cxx)\n+      AC_ARG_WITH([incompatible-bdb],[AS_HELP_STRING([--with-incompatible-bdb], [allow using a bdb version other than 4.8])],[\n+        AC_MSG_WARN([Found Berkeley DB other than 4.8; wallets opened by this build will not be portable!])\n+      ],[\n+        AC_MSG_ERROR([Found Berkeley DB other than 4.8, required for portable wallets (--with-incompatible-bdb to ignore or --disable-wallet to disable wallet functionality)])\n+      ])\n+    else\n+      SYSCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdb48path}],db_cxx)\n+      bdbpath=\"${bdb48path}\"\n+    fi\n   else\n-    SYSCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdb48path}],db_cxx)\n-    bdbpath=\"${bdb48path}\"\n+    BDB_CPPFLAGS=${BDB_CFLAGS}\n   fi\n   AC_SUBST(BDB_CPPFLAGS)\n   \n-  # TODO: Ideally this could find the library version and make sure it matches the headers being used\n-  for searchlib in db_cxx-4.8 db_cxx; do\n-    AC_CHECK_LIB([$searchlib],[main],[\n-      BDB_LIBS=\"-l${searchlib}\"\n-      break\n-    ])\n-  done\n   if test \"x$BDB_LIBS\" = \"x\"; then\n-      AC_MSG_ERROR([libdb_cxx missing, Syscoin Core requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+    # TODO: Ideally this could find the library version and make sure it matches the headers being used\n+    for searchlib in db_cxx-4.8 db_cxx db4_cxx; do\n+      AC_CHECK_LIB([$searchlib],[main],[\n+        BDB_LIBS=\"-l${searchlib}\"\n+        break\n+      ])\n+    done\n+    if test \"x$BDB_LIBS\" = \"x\"; then\n+        AC_MSG_ERROR([libdb_cxx missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+    fi\n   fi\n   AC_SUBST(BDB_LIBS)\n ])"
      },
      {
        "sha": "85979d635fc143f2fbc5ff43cf7a1591499b6cd8",
        "filename": "build-aux/m4/syscoin_qt.m4",
        "status": "modified",
        "additions": 132,
        "deletions": 84,
        "changes": 216,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/syscoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/syscoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/syscoin_qt.m4?ref=b16033938cccdb162fc04a4848472e90280afdaf",
        "patch": "@@ -1,8 +1,12 @@\n+dnl Copyright (c) 2013-2016 The Syscoin Core developers\n+dnl Distributed under the MIT software license, see the accompanying\n+dnl file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n dnl Helper for cases where a qt dependency is not met.\n dnl Output: If qt version is auto, set syscoin_enable_qt to false. Else, exit.\n AC_DEFUN([SYSCOIN_QT_FAIL],[\n-  if test \"x$syscoin_qt_want_version\" = \"xauto\" && test x$syscoin_qt_force != xyes; then\n-    if test x$syscoin_enable_qt != xno; then\n+  if test \"x$syscoin_qt_want_version\" = xauto && test \"x$syscoin_qt_force\" != xyes; then\n+    if test \"x$syscoin_enable_qt\" != xno; then\n       AC_MSG_WARN([$1; syscoin-qt frontend will not be built])\n     fi\n     syscoin_enable_qt=no\n@@ -13,7 +17,7 @@ AC_DEFUN([SYSCOIN_QT_FAIL],[\n ])\n \n AC_DEFUN([SYSCOIN_QT_CHECK],[\n-  if test \"x$syscoin_enable_qt\" != \"xno\" && test x$syscoin_qt_want_version != xno; then\n+  if test \"x$syscoin_enable_qt\" != xno && test \"x$syscoin_qt_want_version\" != xno; then\n     true\n     $1\n   else\n@@ -31,12 +35,12 @@ dnl Inputs: $4: If \"yes\", don't fail if $2 is not found.\n dnl Output: $1 is set to the path of $2 if found. $2 are searched in order.\n AC_DEFUN([SYSCOIN_QT_PATH_PROGS],[\n   SYSCOIN_QT_CHECK([\n-    if test \"x$3\" != \"x\"; then\n+    if test \"x$3\" != x; then\n       AC_PATH_PROGS($1,$2,,$3)\n     else\n       AC_PATH_PROGS($1,$2)\n     fi\n-    if test \"x$$1\" = \"x\" && test \"x$4\" != \"xyes\"; then\n+    if test \"x$$1\" = x && test \"x$4\" != xyes; then\n       SYSCOIN_QT_FAIL([$1 not found])\n     fi\n   ])\n@@ -53,7 +57,7 @@ AC_DEFUN([SYSCOIN_QT_INIT],[\n     [build syscoin-qt GUI (default=auto, qt5 tried first)])],\n     [\n      syscoin_qt_want_version=$withval\n-     if test x$syscoin_qt_want_version = xyes; then\n+     if test \"x$syscoin_qt_want_version\" = xyes; then\n        syscoin_qt_force=yes\n        syscoin_qt_want_version=auto\n      fi\n@@ -85,11 +89,11 @@ dnl Outputs: syscoin_enable_qt, syscoin_enable_qt_dbus, syscoin_enable_qt_test\n AC_DEFUN([SYSCOIN_QT_CONFIGURE],[\n   use_pkgconfig=$1\n \n-  if test x$use_pkgconfig = x; then\n+  if test \"x$use_pkgconfig\" = x; then\n     use_pkgconfig=yes\n   fi\n \n-  if test x$use_pkgconfig = xyes; then\n+  if test \"x$use_pkgconfig\" = xyes; then\n     SYSCOIN_QT_CHECK([_SYSCOIN_QT_FIND_LIBS_WITH_PKGCONFIG([$2])])\n   else\n     SYSCOIN_QT_CHECK([_SYSCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG])\n@@ -109,37 +113,45 @@ AC_DEFUN([SYSCOIN_QT_CONFIGURE],[\n   TEMP_CXXFLAGS=$CXXFLAGS\n   CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n   CXXFLAGS=\"$PIC_FLAGS $CXXFLAGS\"\n-  if test x$syscoin_qt_got_major_vers = x5; then\n+  if test \"x$syscoin_qt_got_major_vers\" = x5; then\n     _SYSCOIN_QT_IS_STATIC\n-    if test x$syscoin_cv_static_qt = xyes; then\n+    if test \"x$syscoin_cv_static_qt\" = xyes; then\n       _SYSCOIN_QT_FIND_STATIC_PLUGINS\n       AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n-      AC_CACHE_CHECK(for Qt < 5.4, syscoin_cv_need_acc_widget,[AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n-          [[#include <QtCore>]],[[\n-          #if QT_VERSION >= 0x050400\n-          choke;\n-          #endif\n+      AC_CACHE_CHECK(for Qt < 5.4, syscoin_cv_need_acc_widget,[\n+        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+            #include <QtCore/qconfig.h>\n+            #ifndef QT_VERSION\n+            #  include <QtCore/qglobal.h>\n+            #endif\n+          ]],\n+          [[\n+            #if QT_VERSION >= 0x050400\n+            choke\n+            #endif\n           ]])],\n         [syscoin_cv_need_acc_widget=yes],\n         [syscoin_cv_need_acc_widget=no])\n       ])\n-      if test \"x$syscoin_cv_need_acc_widget\" = \"xyes\"; then\n+      if test \"x$syscoin_cv_need_acc_widget\" = xyes; then\n         _SYSCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)], [-lqtaccessiblewidgets])\n       fi\n-      if test x$TARGET_OS = xwindows; then\n+      _SYSCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QMinimalIntegrationPlugin)],[-lqminimal])\n+      AC_DEFINE(QT_QPA_PLATFORM_MINIMAL, 1, [Define this symbol if the minimal qt platform exists])\n+      if test \"x$TARGET_OS\" = xwindows; then\n         _SYSCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin)],[-lqwindows])\n         AC_DEFINE(QT_QPA_PLATFORM_WINDOWS, 1, [Define this symbol if the qt platform is windows])\n-      elif test x$TARGET_OS = xlinux; then\n+      elif test \"x$TARGET_OS\" = xlinux; then\n         _SYSCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QXcbIntegrationPlugin)],[-lqxcb -lxcb-static])\n         AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n-      elif test x$TARGET_OS = xdarwin; then\n+      elif test \"x$TARGET_OS\" = xdarwin; then\n         AX_CHECK_LINK_FLAG([[-framework IOKit]],[QT_LIBS=\"$QT_LIBS -framework IOKit\"],[AC_MSG_ERROR(could not iokit framework)])\n         _SYSCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin)],[-lqcocoa])\n         AC_DEFINE(QT_QPA_PLATFORM_COCOA, 1, [Define this symbol if the qt platform is cocoa])\n       fi\n     fi\n   else\n-    if test x$TARGET_OS = xwindows; then\n+    if test \"x$TARGET_OS\" = xwindows; then\n       AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n       _SYSCOIN_QT_CHECK_STATIC_PLUGINS([\n          Q_IMPORT_PLUGIN(qcncodecs)\n@@ -154,24 +166,29 @@ AC_DEFUN([SYSCOIN_QT_CONFIGURE],[\n   CXXFLAGS=$TEMP_CXXFLAGS\n   ])\n \n-  if test x$use_pkgconfig$qt_bin_path = xyes; then\n-    if test x$syscoin_qt_got_major_vers = x5; then\n+  if test \"x$use_pkgconfig$qt_bin_path\" = xyes; then\n+    if test \"x$syscoin_qt_got_major_vers\" = x5; then\n       qt_bin_path=\"`$PKG_CONFIG --variable=host_bins Qt5Core 2>/dev/null`\"\n     fi\n   fi\n \n-  if test x$use_hardening != xno; then\n+  if test \"x$use_hardening\" != xno; then\n     SYSCOIN_QT_CHECK([\n     AC_MSG_CHECKING(whether -fPIE can be used with this Qt config)\n     TEMP_CPPFLAGS=$CPPFLAGS\n     TEMP_CXXFLAGS=$CXXFLAGS\n     CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n     CXXFLAGS=\"$PIE_FLAGS $CXXFLAGS\"\n-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <QtCore/qconfig.h>]],\n+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+        #include <QtCore/qconfig.h>\n+        #ifndef QT_VERSION\n+        #  include <QtCore/qglobal.h>\n+        #endif\n+      ]],\n       [[\n-          #if defined(QT_REDUCE_RELOCATIONS)\n-              choke;\n-          #endif\n+        #if defined(QT_REDUCE_RELOCATIONS)\n+        choke\n+        #endif\n       ]])],\n       [ AC_MSG_RESULT(yes); QT_PIE_FLAGS=$PIE_FLAGS ],\n       [ AC_MSG_RESULT(no); QT_PIE_FLAGS=$PIC_FLAGS]\n@@ -184,11 +201,16 @@ AC_DEFUN([SYSCOIN_QT_CONFIGURE],[\n     AC_MSG_CHECKING(whether -fPIC is needed with this Qt config)\n     TEMP_CPPFLAGS=$CPPFLAGS\n     CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <QtCore/qconfig.h>]],\n+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+        #include <QtCore/qconfig.h>\n+        #ifndef QT_VERSION\n+        #  include <QtCore/qglobal.h>\n+        #endif\n+      ]],\n       [[\n-          #if defined(QT_REDUCE_RELOCATIONS)\n-              choke;\n-          #endif\n+        #if defined(QT_REDUCE_RELOCATIONS)\n+        choke\n+        #endif\n       ]])],\n       [ AC_MSG_RESULT(no)],\n       [ AC_MSG_RESULT(yes); QT_PIE_FLAGS=$PIC_FLAGS]\n@@ -220,22 +242,22 @@ AC_DEFUN([SYSCOIN_QT_CONFIGURE],[\n \n \n   dnl enable qt support\n-  AC_MSG_CHECKING(whether to build Syscoin Core GUI)\n+  AC_MSG_CHECKING(whether to build ]AC_PACKAGE_NAME[ GUI)\n   SYSCOIN_QT_CHECK([\n     syscoin_enable_qt=yes\n     syscoin_enable_qt_test=yes\n-    if test x$have_qt_test = xno; then\n+    if test \"x$have_qt_test\" = xno; then\n       syscoin_enable_qt_test=no\n     fi\n     syscoin_enable_qt_dbus=no\n-    if test x$use_dbus != xno && test x$have_qt_dbus = xyes; then\n+    if test \"x$use_dbus\" != xno && test \"x$have_qt_dbus\" = xyes; then\n       syscoin_enable_qt_dbus=yes\n     fi\n-    if test x$use_dbus = xyes && test x$have_qt_dbus = xno; then\n-      AC_MSG_ERROR(\"libQtDBus not found. Install libQtDBus or remove --with-qtdbus.\")\n+    if test \"x$use_dbus\" = xyes && test \"x$have_qt_dbus\" = xno; then\n+      AC_MSG_ERROR([libQtDBus not found. Install libQtDBus or remove --with-qtdbus.])\n     fi\n-    if test x$LUPDATE = x; then\n-      AC_MSG_WARN(\"lupdate is required to update qt translations\")\n+    if test \"x$LUPDATE\" = x; then\n+      AC_MSG_WARN([lupdate is required to update qt translations])\n     fi\n   ],[\n     syscoin_enable_qt=no\n@@ -263,13 +285,15 @@ dnl Requires: INCLUDES must be populated as necessary.\n dnl Output: syscoin_cv_qt5=yes|no\n AC_DEFUN([_SYSCOIN_QT_CHECK_QT5],[\n   AC_CACHE_CHECK(for Qt 5, syscoin_cv_qt5,[\n-  AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n-    [[#include <QtCore>]],\n+  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+      #include <QtCore/qconfig.h>\n+      #ifndef QT_VERSION\n+      #  include <QtCore/qglobal.h>\n+      #endif\n+    ]],\n     [[\n       #if QT_VERSION < 0x050000\n-      choke me\n-      #else\n-      return 0;\n+      choke\n       #endif\n     ]])],\n     [syscoin_cv_qt5=yes],\n@@ -283,19 +307,21 @@ dnl Output: syscoin_cv_static_qt=yes|no\n dnl Output: Defines QT_STATICPLUGIN if plugins are static.\n AC_DEFUN([_SYSCOIN_QT_IS_STATIC],[\n   AC_CACHE_CHECK(for static Qt, syscoin_cv_static_qt,[\n-  AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n-    [[#include <QtCore>]],\n+  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+      #include <QtCore/qconfig.h>\n+      #ifndef QT_VERSION\n+      #  include <QtCore/qglobal.h>\n+      #endif\n+    ]],\n     [[\n-      #if defined(QT_STATIC)\n-      return 0;\n-      #else\n-      choke me\n+      #if !defined(QT_STATIC)\n+      choke\n       #endif\n     ]])],\n     [syscoin_cv_static_qt=yes],\n     [syscoin_cv_static_qt=no])\n   ])\n-  if test xsyscoin_cv_static_qt = xyes; then\n+  if test \"x$syscoin_cv_static_qt\" = xyes; then\n     AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol for static Qt plugins])\n   fi\n ])\n@@ -324,28 +350,50 @@ dnl Inputs: syscoin_qt_got_major_vers. 4 or 5.\n dnl Inputs: qt_plugin_path. optional.\n dnl Outputs: QT_LIBS is appended\n AC_DEFUN([_SYSCOIN_QT_FIND_STATIC_PLUGINS],[\n-  if test x$syscoin_qt_got_major_vers = x5; then\n-      if test x$qt_plugin_path != x; then\n+  if test \"x$syscoin_qt_got_major_vers\" = x5; then\n+      if test \"x$qt_plugin_path\" != x; then\n         QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms\"\n         if test -d \"$qt_plugin_path/accessible\"; then\n           QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n         fi\n       fi\n+     if test \"x$use_pkgconfig\" = xyes; then\n+     : dnl\n      m4_ifdef([PKG_CHECK_MODULES],[\n-     if test x$use_pkgconfig = xyes; then\n        PKG_CHECK_MODULES([QTPLATFORM], [Qt5PlatformSupport], [QT_LIBS=\"$QTPLATFORM_LIBS $QT_LIBS\"])\n-       if test x$TARGET_OS = xlinux; then\n+       if test \"x$TARGET_OS\" = xlinux; then\n          PKG_CHECK_MODULES([X11XCB], [x11-xcb], [QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n          if ${PKG_CONFIG} --exists \"Qt5Core >= 5.5\" 2>/dev/null; then\n            PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n          fi\n-       elif test x$TARGET_OS = xdarwin; then\n+       elif test \"x$TARGET_OS\" = xdarwin; then\n          PKG_CHECK_MODULES([QTPRINT], [Qt5PrintSupport], [QT_LIBS=\"$QTPRINT_LIBS $QT_LIBS\"])\n        fi\n-     fi\n      ])\n+     else\n+       if test \"x$TARGET_OS\" = xwindows; then\n+         AC_CACHE_CHECK(for Qt >= 5.6, syscoin_cv_need_platformsupport,[\n+           AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+               #include <QtCore/qconfig.h>\n+               #ifndef QT_VERSION\n+               #  include <QtCore/qglobal.h>\n+               #endif\n+             ]],\n+             [[\n+               #if QT_VERSION < 0x050600\n+               choke\n+               #endif\n+             ]])],\n+           [syscoin_cv_need_platformsupport=yes],\n+           [syscoin_cv_need_platformsupport=no])\n+         ])\n+         if test \"x$syscoin_cv_need_platformsupport\" = xyes; then\n+           SYSCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}PlatformSupport],[main],,SYSCOIN_QT_FAIL(lib${QT_LIB_PREFIX}PlatformSupport not found)))\n+         fi\n+       fi\n+     fi\n   else\n-    if test x$qt_plugin_path != x; then\n+    if test \"x$qt_plugin_path\" != x; then\n       QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n       QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/codecs\"\n     fi\n@@ -363,10 +411,10 @@ dnl Outputs: have_qt_test and have_qt_dbus are set (if applicable) to yes|no.\n AC_DEFUN([_SYSCOIN_QT_FIND_LIBS_WITH_PKGCONFIG],[\n   m4_ifdef([PKG_CHECK_MODULES],[\n   auto_priority_version=$1\n-  if test x$auto_priority_version = x; then\n+  if test \"x$auto_priority_version\" = x; then\n     auto_priority_version=qt5\n   fi\n-    if test x$syscoin_qt_want_version = xqt5 ||  ( test x$syscoin_qt_want_version = xauto && test x$auto_priority_version = xqt5 ); then\n+    if test \"x$syscoin_qt_want_version\" = xqt5 ||  ( test \"x$syscoin_qt_want_version\" = xauto && test \"x$auto_priority_version\" = xqt5 ); then\n       QT_LIB_PREFIX=Qt5\n       syscoin_qt_got_major_vers=5\n     else\n@@ -376,28 +424,28 @@ AC_DEFUN([_SYSCOIN_QT_FIND_LIBS_WITH_PKGCONFIG],[\n     qt5_modules=\"Qt5Core Qt5Gui Qt5Network Qt5Widgets\"\n     qt4_modules=\"QtCore QtGui QtNetwork\"\n     SYSCOIN_QT_CHECK([\n-      if test x$syscoin_qt_want_version = xqt5 || ( test x$syscoin_qt_want_version = xauto && test x$auto_priority_version = xqt5 ); then\n-        PKG_CHECK_MODULES([QT], [$qt5_modules], [QT_INCLUDES=\"$QT_CFLAGS\"; have_qt=yes],[have_qt=no])\n-      elif test x$syscoin_qt_want_version = xqt4 || ( test x$syscoin_qt_want_version = xauto && test x$auto_priority_version = xqt4 ); then\n-        PKG_CHECK_MODULES([QT], [$qt4_modules], [QT_INCLUDES=\"$QT_CFLAGS\"; have_qt=yes], [have_qt=no])\n+      if test \"x$syscoin_qt_want_version\" = xqt5 || ( test \"x$syscoin_qt_want_version\" = xauto && test \"x$auto_priority_version\" = xqt5 ); then\n+        PKG_CHECK_MODULES([QT5], [$qt5_modules], [QT_INCLUDES=\"$QT5_CFLAGS\"; QT_LIBS=\"$QT5_LIBS\" have_qt=yes],[have_qt=no])\n+      elif test \"x$syscoin_qt_want_version\" = xqt4 || ( test \"x$syscoin_qt_want_version\" = xauto && test \"x$auto_priority_version\" = xqt4 ); then\n+        PKG_CHECK_MODULES([QT4], [$qt4_modules], [QT_INCLUDES=\"$QT4_CFLAGS\"; QT_LIBS=\"$QT4_LIBS\" ; have_qt=yes], [have_qt=no])\n       fi\n \n       dnl qt version is set to 'auto' and the preferred version wasn't found. Now try the other.\n-      if test x$have_qt = xno && test x$syscoin_qt_want_version = xauto; then\n-        if test x$auto_priority_version = xqt5; then\n-          PKG_CHECK_MODULES([QT], [$qt4_modules], [QT_INCLUDES=\"$QT_CFLAGS\"; have_qt=yes; QT_LIB_PREFIX=Qt; syscoin_qt_got_major_vers=4], [have_qt=no])\n+      if test \"x$have_qt\" = xno && test \"x$syscoin_qt_want_version\" = xauto; then\n+        if test \"x$auto_priority_version\" = xqt5; then\n+          PKG_CHECK_MODULES([QT4], [$qt4_modules], [QT_INCLUDES=\"$QT4_CFLAGS\"; QT_LIBS=\"$QT4_LIBS\" ; have_qt=yes; QT_LIB_PREFIX=Qt; syscoin_qt_got_major_vers=4], [have_qt=no])\n         else\n-          PKG_CHECK_MODULES([QT], [$qt5_modules], [QT_INCLUDES=\"$QT_CFLAGS\"; have_qt=yes; QT_LIB_PREFIX=Qt5; syscoin_qt_got_major_vers=5], [have_qt=no])\n+          PKG_CHECK_MODULES([QT5], [$qt5_modules], [QT_INCLUDES=\"$QT5_CFLAGS\"; QT_LIBS=\"$QT5_LIBS\" ; have_qt=yes; QT_LIB_PREFIX=Qt5; syscoin_qt_got_major_vers=5], [have_qt=no])\n         fi\n       fi\n-      if test x$have_qt != xyes; then\n+      if test \"x$have_qt\" != xyes; then\n         have_qt=no\n         SYSCOIN_QT_FAIL([Qt dependencies not found])\n       fi\n     ])\n     SYSCOIN_QT_CHECK([\n       PKG_CHECK_MODULES([QT_TEST], [${QT_LIB_PREFIX}Test], [QT_TEST_INCLUDES=\"$QT_TEST_CFLAGS\"; have_qt_test=yes], [have_qt_test=no])\n-      if test x$use_dbus != xno; then\n+      if test \"x$use_dbus\" != xno; then\n         PKG_CHECK_MODULES([QT_DBUS], [${QT_LIB_PREFIX}DBus], [QT_DBUS_INCLUDES=\"$QT_DBUS_CFLAGS\"; have_qt_dbus=yes], [have_qt_dbus=no])\n       fi\n     ])\n@@ -418,7 +466,7 @@ AC_DEFUN([_SYSCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   CXXFLAGS=\"$PIC_FLAGS $CXXFLAGS\"\n   TEMP_LIBS=\"$LIBS\"\n   SYSCOIN_QT_CHECK([\n-    if test x$qt_include_path != x; then\n+    if test \"x$qt_include_path\" != x; then\n       QT_INCLUDES=\"-I$qt_include_path -I$qt_include_path/QtCore -I$qt_include_path/QtGui -I$qt_include_path/QtWidgets -I$qt_include_path/QtNetwork -I$qt_include_path/QtTest -I$qt_include_path/QtDBus\"\n       CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n     fi\n@@ -429,10 +477,10 @@ AC_DEFUN([_SYSCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   SYSCOIN_QT_CHECK([AC_CHECK_HEADER([QLocalSocket],, SYSCOIN_QT_FAIL(QtNetwork headers missing))])\n \n   SYSCOIN_QT_CHECK([\n-    if test x$syscoin_qt_want_version = xauto; then\n+    if test \"x$syscoin_qt_want_version\" = xauto; then\n       _SYSCOIN_QT_CHECK_QT5\n     fi\n-    if test x$syscoin_cv_qt5 = xyes || test x$syscoin_qt_want_version = xqt5; then\n+    if test \"x$syscoin_cv_qt5\" = xyes || test \"x$syscoin_qt_want_version\" = xqt5; then\n       QT_LIB_PREFIX=Qt5\n       syscoin_qt_got_major_vers=5\n     else\n@@ -443,40 +491,40 @@ AC_DEFUN([_SYSCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n \n   SYSCOIN_QT_CHECK([\n     LIBS=\n-    if test x$qt_lib_path != x; then\n+    if test \"x$qt_lib_path\" != x; then\n       LIBS=\"$LIBS -L$qt_lib_path\"\n     fi\n \n-    if test x$TARGET_OS = xwindows; then\n+    if test \"x$TARGET_OS\" = xwindows; then\n       AC_CHECK_LIB([imm32],      [main],, SYSCOIN_QT_FAIL(libimm32 not found))\n     fi\n   ])\n \n   SYSCOIN_QT_CHECK(AC_CHECK_LIB([z] ,[main],,AC_MSG_WARN([zlib not found. Assuming qt has it built-in])))\n-  SYSCOIN_QT_CHECK(AC_CHECK_LIB([png] ,[main],,AC_MSG_WARN([libpng not found. Assuming qt has it built-in])))\n-  SYSCOIN_QT_CHECK(AC_CHECK_LIB([jpeg] ,[main],,AC_MSG_WARN([libjpeg not found. Assuming qt has it built-in])))\n+  SYSCOIN_QT_CHECK(AC_SEARCH_LIBS([png_error] ,[qtpng png],,AC_MSG_WARN([libpng not found. Assuming qt has it built-in])))\n+  SYSCOIN_QT_CHECK(AC_SEARCH_LIBS([jpeg_create_decompress] ,[qtjpeg jpeg],,AC_MSG_WARN([libjpeg not found. Assuming qt has it built-in])))\n   SYSCOIN_QT_CHECK(AC_SEARCH_LIBS([pcre16_exec], [qtpcre pcre16],,AC_MSG_WARN([libpcre16 not found. Assuming qt has it built-in])))\n   SYSCOIN_QT_CHECK(AC_SEARCH_LIBS([hb_ot_tags_from_script] ,[qtharfbuzzng harfbuzz],,AC_MSG_WARN([libharfbuzz not found. Assuming qt has it built-in or support is disabled])))\n-  SYSCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Core]   ,[main],,SYSCOIN_QT_FAIL(lib$QT_LIB_PREFIXCore not found)))\n-  SYSCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Gui]    ,[main],,SYSCOIN_QT_FAIL(lib$QT_LIB_PREFIXGui not found)))\n-  SYSCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Network],[main],,SYSCOIN_QT_FAIL(lib$QT_LIB_PREFIXNetwork not found)))\n-  if test x$syscoin_qt_got_major_vers = x5; then\n-    SYSCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Widgets],[main],,SYSCOIN_QT_FAIL(lib$QT_LIB_PREFIXWidgets not found)))\n+  SYSCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Core]   ,[main],,SYSCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Core not found)))\n+  SYSCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Gui]    ,[main],,SYSCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Gui not found)))\n+  SYSCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Network],[main],,SYSCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Network not found)))\n+  if test \"x$syscoin_qt_got_major_vers\" = x5; then\n+    SYSCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Widgets],[main],,SYSCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Widgets not found)))\n   fi\n   QT_LIBS=\"$LIBS\"\n   LIBS=\"$TEMP_LIBS\"\n \n   SYSCOIN_QT_CHECK([\n     LIBS=\n-    if test x$qt_lib_path != x; then\n+    if test \"x$qt_lib_path\" != x; then\n       LIBS=\"-L$qt_lib_path\"\n     fi\n     AC_CHECK_LIB([${QT_LIB_PREFIX}Test],      [main],, have_qt_test=no)\n     AC_CHECK_HEADER([QTest],, have_qt_test=no)\n     QT_TEST_LIBS=\"$LIBS\"\n-    if test x$use_dbus != xno; then\n+    if test \"x$use_dbus\" != xno; then\n       LIBS=\n-      if test x$qt_lib_path != x; then\n+      if test \"x$qt_lib_path\" != x; then\n         LIBS=\"-L$qt_lib_path\"\n       fi\n       AC_CHECK_LIB([${QT_LIB_PREFIX}DBus],      [main],, have_qt_dbus=no)"
      },
      {
        "sha": "7841042ac877b20ea8b35e634f1b4088aae1647f",
        "filename": "build-aux/m4/syscoin_subdir_to_include.m4",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/syscoin_subdir_to_include.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16033938cccdb162fc04a4848472e90280afdaf/build-aux/m4/syscoin_subdir_to_include.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/syscoin_subdir_to_include.m4?ref=b16033938cccdb162fc04a4848472e90280afdaf",
        "patch": "@@ -1,6 +1,10 @@\n-dnl SYSCOIN_SUBDIR_TO_INCLUDE([CPPFLAGS-VARIABLE-NAME],[SUBDIRECTORY-NAME],[HEADER-FILE])\n+dnl Copyright (c) 2013-2014 The Bitcoin Core developers\n+dnl Distributed under the MIT software license, see the accompanying\n+dnl file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+dnl BITCOIN_SUBDIR_TO_INCLUDE([CPPFLAGS-VARIABLE-NAME],[SUBDIRECTORY-NAME],[HEADER-FILE])\n dnl SUBDIRECTORY-NAME must end with a path separator\n-AC_DEFUN([SYSCOIN_SUBDIR_TO_INCLUDE],[\n+AC_DEFUN([BITCOIN_SUBDIR_TO_INCLUDE],[\n   if test \"x$2\" = \"x\"; then\n     AC_MSG_RESULT([default])\n   else"
      },
      {
        "sha": "3002206163f8f4b5f9a11857a00bad8118bed74b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b16033938cccdb162fc04a4848472e90280afdaf/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b16033938cccdb162fc04a4848472e90280afdaf/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b16033938cccdb162fc04a4848472e90280afdaf",
        "patch": "@@ -617,8 +617,16 @@ fi\n \n if test x$use_boost = xyes; then\n \n+dnl Minimum required Boost version\n+define(MINIMUM_REQUIRED_BOOST, 1.47.0)\n+\n+dnl Check for boost libs\n+AX_BOOST_BASE([MINIMUM_REQUIRED_BOOST])\n+if test x$want_boost = xno; then\n+    AC_MSG_ERROR([[only libbitcoinconsensus can be built without boost]])\n+fi\n+\n dnl Check for boost libs\n-AX_BOOST_BASE\n AX_BOOST_SYSTEM\n AX_BOOST_FILESYSTEM\n AX_BOOST_PROGRAM_OPTIONS"
      }
    ]
  },
  {
    "sha": "0168723ed17182a09ae76fa2453e1f5cc161c8ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTY4NzIzZWQxNzE4MmEwOWFlNzZmYTI0NTNlMWY1Y2MxNjFjOGNh",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-20T22:40:02Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-20T22:40:02Z"
      },
      "message": "Merge branch 'dev-3.x' of https://github.com/syscoin/syscoin2 into dev-3.x",
      "tree": {
        "sha": "92a5da655ade5e0fe14b7eee99769c327060d10a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92a5da655ade5e0fe14b7eee99769c327060d10a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0168723ed17182a09ae76fa2453e1f5cc161c8ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0168723ed17182a09ae76fa2453e1f5cc161c8ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0168723ed17182a09ae76fa2453e1f5cc161c8ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0168723ed17182a09ae76fa2453e1f5cc161c8ca/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b16033938cccdb162fc04a4848472e90280afdaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b16033938cccdb162fc04a4848472e90280afdaf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b16033938cccdb162fc04a4848472e90280afdaf"
      },
      {
        "sha": "ba390a89be638f14767c89432a746ef095d63590",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba390a89be638f14767c89432a746ef095d63590",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba390a89be638f14767c89432a746ef095d63590"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "df73552f59822da9631e912c14addea2e91384ee",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0168723ed17182a09ae76fa2453e1f5cc161c8ca/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0168723ed17182a09ae76fa2453e1f5cc161c8ca/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=0168723ed17182a09ae76fa2453e1f5cc161c8ca",
        "patch": "@@ -70,7 +70,7 @@ script:\n     - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n     - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST\n     - SYSCOIN_CONFIG_ALL=\"--disable-dependency-tracking --prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib\"\n-    - depends/$HOST/native/bin/ccache --max-size=$CCACHE_SIZE\n+    - ccache --max-size=$CCACHE_SIZE\n     - test -n \"$USE_SHELL\" && eval '\"$USE_SHELL\" -c \"./autogen.sh\"' || ./autogen.sh\n     - ./configure --cache-file=config.cache $SYSCOIN_CONFIG_ALL $SYSCOIN_CONFIG || ( cat config.log && false)\n     - make distdir PACKAGE=syscoin VERSION=$HOST\n@@ -81,5 +81,3 @@ script:\n     - if [ \"$RUN_TESTS\" = \"true\" -a \"$WINE\" != \"true\" ]; then cd src/test && ./test_syscoin; fi\n     - if [ \"$RUN_TESTS\" = \"true\" -a \"$WINE\" = \"true\" ]; then wine  src/test/test_syscoin.exe; fi\n       #    - if [ \"$RUN_TESTS\" = \"true\" ]; then qa/pull-tester/rpc-tests.py --coverage; fi\n-after_script:\n-    - if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then (echo \"Upload goes here. Something like: scp -r $BASE_OUTDIR server\" || echo \"upload failed\"); fi"
      }
    ]
  },
  {
    "sha": "c77de6a80970c3585e69401a1bd97d547b7ace6a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzdkZTZhODA5NzBjMzU4NWU2OTQwMWExYmQ5N2Q1NDdiN2FjZTZh",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-20T22:45:22Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-20T22:45:22Z"
      },
      "message": "fix new m4",
      "tree": {
        "sha": "4aeaa622b92cb441793b77057262854561977ae7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4aeaa622b92cb441793b77057262854561977ae7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c77de6a80970c3585e69401a1bd97d547b7ace6a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c77de6a80970c3585e69401a1bd97d547b7ace6a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c77de6a80970c3585e69401a1bd97d547b7ace6a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c77de6a80970c3585e69401a1bd97d547b7ace6a/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0168723ed17182a09ae76fa2453e1f5cc161c8ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0168723ed17182a09ae76fa2453e1f5cc161c8ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0168723ed17182a09ae76fa2453e1f5cc161c8ca"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "767dc0a44c8ed0e79ba82ade69d3ac250cb66c30",
        "filename": "build-aux/m4/syscoin_subdir_to_include.m4",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77de6a80970c3585e69401a1bd97d547b7ace6a/build-aux/m4/syscoin_subdir_to_include.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77de6a80970c3585e69401a1bd97d547b7ace6a/build-aux/m4/syscoin_subdir_to_include.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/syscoin_subdir_to_include.m4?ref=c77de6a80970c3585e69401a1bd97d547b7ace6a",
        "patch": "@@ -1,10 +1,10 @@\n-dnl Copyright (c) 2013-2014 The Bitcoin Core developers\n+dnl Copyright (c) 2013-2014 The Syscoin Core developers\n dnl Distributed under the MIT software license, see the accompanying\n dnl file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-dnl BITCOIN_SUBDIR_TO_INCLUDE([CPPFLAGS-VARIABLE-NAME],[SUBDIRECTORY-NAME],[HEADER-FILE])\n+dnl SYSCOIN_SUBDIR_TO_INCLUDE([CPPFLAGS-VARIABLE-NAME],[SUBDIRECTORY-NAME],[HEADER-FILE])\n dnl SUBDIRECTORY-NAME must end with a path separator\n-AC_DEFUN([BITCOIN_SUBDIR_TO_INCLUDE],[\n+AC_DEFUN([SYSCOIN_SUBDIR_TO_INCLUDE],[\n   if test \"x$2\" = \"x\"; then\n     AC_MSG_RESULT([default])\n   else"
      },
      {
        "sha": "5e1b478a00aed284177a24bd11c5d4ed9ae4679f",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77de6a80970c3585e69401a1bd97d547b7ace6a/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77de6a80970c3585e69401a1bd97d547b7ace6a/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=c77de6a80970c3585e69401a1bd97d547b7ace6a",
        "patch": "@@ -623,7 +623,7 @@ define(MINIMUM_REQUIRED_BOOST, 1.47.0)\n dnl Check for boost libs\n AX_BOOST_BASE([MINIMUM_REQUIRED_BOOST])\n if test x$want_boost = xno; then\n-    AC_MSG_ERROR([[only libbitcoinconsensus can be built without boost]])\n+    AC_MSG_ERROR([[only libsyscoinconsensus can be built without boost]])\n fi\n \n dnl Check for boost libs"
      }
    ]
  },
  {
    "sha": "36252751712234b18847e2c6b80e2f722b03552a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjI1Mjc1MTcxMjIzNGIxODg0N2UyYzZiODBlMmY3MjJiMDM1NTJh",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-20T22:54:08Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-20T22:54:08Z"
      },
      "message": "udpate docs",
      "tree": {
        "sha": "8c2e6ebee4bf5a052eccb89f075e3a1600333a1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c2e6ebee4bf5a052eccb89f075e3a1600333a1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36252751712234b18847e2c6b80e2f722b03552a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36252751712234b18847e2c6b80e2f722b03552a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36252751712234b18847e2c6b80e2f722b03552a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36252751712234b18847e2c6b80e2f722b03552a/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c77de6a80970c3585e69401a1bd97d547b7ace6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c77de6a80970c3585e69401a1bd97d547b7ace6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c77de6a80970c3585e69401a1bd97d547b7ace6a"
      }
    ],
    "stats": {
      "total": 1451,
      "additions": 979,
      "deletions": 472
    },
    "files": [
      {
        "sha": "cc92200b6f51a20e1616e2c3ddbac57f0b752741",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 24,
        "deletions": 14,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36252751712234b18847e2c6b80e2f722b03552a/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36252751712234b18847e2c6b80e2f722b03552a/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=36252751712234b18847e2c6b80e2f722b03552a",
        "patch": "@@ -1,7 +1,11 @@\n-Syscoin Core 0.12.1\n-=====================\n+Syscoin Core\n+=============\n \n-This is the official reference wallet for Syscoin digital currency and comprises the backbone of the Syscoin peer-to-peer network. You can [download Syscoin Core](https://www.syscoin.org/downloads/) or [build it yourself](#building) using the guides below.\n+Setup\n+---------------------\n+Syscoin Core is the original Syscoin client and it builds the backbone of the network. It downloads and, by default, stores the entire history of Syscoin transactions (which is currently more than 100 GBs); depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more.\n+\n+To download Syscoin Core, visit [syscoincore.org](https://syscoincore.org/en/releases/).\n \n Running\n ---------------------\n@@ -20,54 +24,60 @@ Unpack the files into a directory, and then run syscoin-qt.exe.\n \n ### OS X\n \n-Drag Syscoin-Qt to your applications folder, and then run Syscoin-Qt.\n+Drag Syscoin-Core to your applications folder, and then run Syscoin-Core.\n \n ### Need Help?\n \n-* See the [Syscoin documentation](https://syscoin.atlassian.net/wiki/display/DOC)\n+* See the documentation at the [Syscoin Wiki](https://en.syscoin.it/wiki/Main_Page)\n for help and more information.\n * Ask for help on [#syscoin](http://webchat.freenode.net?channels=syscoin) on Freenode. If you don't have an IRC client use [webchat here](http://webchat.freenode.net?channels=syscoin).\n-* Ask for help on the [SyscoinTalk](https://syscointalk.org/) forums.\n+* Ask for help on the [SyscoinTalk](https://syscointalk.org/) forums, in the [Technical Support board](https://syscointalk.org/index.php?board=4.0).\n \n Building\n ---------------------\n-The following are developer notes on how to build Syscoin Core on your native platform. They are not complete guides, but include notes on the necessary libraries, compile flags, etc.\n+The following are developer notes on how to build Syscoin on your native platform. They are not complete guides, but include notes on the necessary libraries, compile flags, etc.\n \n+- [Dependencies](dependencies.md)\n - [OS X Build Notes](build-osx.md)\n - [Unix Build Notes](build-unix.md)\n - [Windows Build Notes](build-windows.md)\n - [OpenBSD Build Notes](build-openbsd.md)\n+- [NetBSD Build Notes](build-netbsd.md)\n - [Gitian Building Guide](gitian-building.md)\n \n Development\n ---------------------\n-The Syscoin Core repo's [root README](/README.md) contains relevant information on the development process and automated testing.\n+The Syscoin repo's [root README](/README.md) contains relevant information on the development process and automated testing.\n \n - [Developer Notes](developer-notes.md)\n-- [Multiwallet Qt Development](multiwallet-qt.md)\n - [Release Notes](release-notes.md)\n - [Release Process](release-process.md)\n-- Source Code Documentation ***TODO***\n+- [Source Code Documentation (External Link)](https://dev.visucore.com/syscoin/doxygen/)\n - [Translation Process](translation_process.md)\n - [Translation Strings Policy](translation_strings_policy.md)\n-- [Unit Tests](unit-tests.md)\n+- [Travis CI](travis-ci.md)\n - [Unauthenticated REST Interface](REST-interface.md)\n - [Shared Libraries](shared-libraries.md)\n - [BIPS](bips.md)\n - [Dnsseed Policy](dnsseed-policy.md)\n+- [Benchmarking](benchmarking.md)\n \n ### Resources\n-* Discuss on the [SyscoinTalk](https://syscointalk.org/) forums, in the Development & Technical Discussion board.\n-* Discuss on [#syscoin](http://webchat.freenode.net/?channels=syscoin) on Freenode. If you don't have an IRC client use [webchat here](http://webchat.freenode.net/?channels=syscoin).\n+* Discuss on the [SyscoinTalk](https://syscointalk.org/) forums, in the [Development & Technical Discussion board](https://syscointalk.org/index.php?board=6.0).\n+* Discuss project-specific development on #syscoin-core-dev on Freenode. If you don't have an IRC client use [webchat here](http://webchat.freenode.net/?channels=syscoin-core-dev).\n+* Discuss general Syscoin development on #syscoin-dev on Freenode. If you don't have an IRC client use [webchat here](http://webchat.freenode.net/?channels=syscoin-dev).\n \n ### Miscellaneous\n - [Assets Attribution](assets-attribution.md)\n - [Files](files.md)\n+- [Fuzz-testing](fuzzing.md)\n+- [Reduce Traffic](reduce-traffic.md)\n - [Tor Support](tor.md)\n - [Init Scripts (systemd/upstart/openrc)](init.md)\n+- [ZMQ](zmq.md)\n \n License\n ---------------------\n-Distributed under the [MIT software license](http://www.opensource.org/licenses/mit-license.php).\n+Distributed under the [MIT software license](/COPYING).\n This product includes software developed by the OpenSSL Project for use in the [OpenSSL Toolkit](https://www.openssl.org/). This product includes\n cryptographic software written by Eric Young ([eay@cryptsoft.com](mailto:eay@cryptsoft.com)), and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "25ba22bed632c1f8ba63737486f1074fed8f01e1",
        "filename": "doc/README_osx.md",
        "status": "added",
        "additions": 97,
        "deletions": 0,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36252751712234b18847e2c6b80e2f722b03552a/doc/README_osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36252751712234b18847e2c6b80e2f722b03552a/doc/README_osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_osx.md?ref=36252751712234b18847e2c6b80e2f722b03552a",
        "patch": "@@ -0,0 +1,97 @@\n+Deterministic OS X DMG Notes.\n+\n+Working OS X DMGs are created in Linux by combining a recent clang,\n+the Apple binutils (ld, ar, etc) and DMG authoring tools.\n+\n+Apple uses clang extensively for development and has upstreamed the necessary\n+functionality so that a vanilla clang can take advantage. It supports the use\n+of -F, -target, -mmacosx-version-min, and --sysroot, which are all necessary\n+when building for OS X.\n+\n+Apple's version of binutils (called cctools) contains lots of functionality\n+missing in the FSF's binutils. In addition to extra linker options for\n+frameworks and sysroots, several other tools are needed as well such as\n+install_name_tool, lipo, and nmedit. These do not build under linux, so they\n+have been patched to do so. The work here was used as a starting point:\n+[mingwandroid/toolchain4](https://github.com/mingwandroid/toolchain4).\n+\n+In order to build a working toolchain, the following source packages are needed\n+from Apple: cctools, dyld, and ld64.\n+\n+These tools inject timestamps by default, which produce non-deterministic\n+binaries. The ZERO_AR_DATE environment variable is used to disable that.\n+\n+This version of cctools has been patched to use the current version of clang's\n+headers and its libLTO.so rather than those from llvmgcc, as it was\n+originally done in toolchain4.\n+\n+To complicate things further, all builds must target an Apple SDK. These SDKs\n+are free to download, but not redistributable.\n+To obtain it, register for a developer account, then download the [Xcode 7.3.1 dmg](https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_7.3.1/Xcode_7.3.1.dmg).\n+\n+This file is several gigabytes in size, but only a single directory inside is\n+needed:\n+```\n+Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk\n+```\n+\n+Unfortunately, the usual linux tools (7zip, hpmount, loopback mount) are incapable of opening this file.\n+To create a tarball suitable for Gitian input, there are two options:\n+\n+Using Mac OS X, you can mount the dmg, and then create it with:\n+```\n+  $ hdiutil attach Xcode_7.3.1.dmg\n+  $ tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.11.sdk.tar.gz MacOSX10.11.sdk\n+```\n+\n+Alternatively, you can use 7zip and SleuthKit to extract the files one by one.\n+The script contrib/macdeploy/extract-osx-sdk.sh automates this. First ensure\n+the dmg file is in the current directory, and then run the script. You may wish\n+to delete the intermediate 5.hfs file and MacOSX10.11.sdk (the directory) when\n+you've confirmed the extraction succeeded.\n+\n+```bash\n+apt-get install p7zip-full sleuthkit\n+contrib/macdeploy/extract-osx-sdk.sh\n+rm -rf 5.hfs MacOSX10.11.sdk\n+```\n+\n+The Gitian descriptors build 2 sets of files: Linux tools, then Apple binaries\n+which are created using these tools. The build process has been designed to\n+avoid including the SDK's files in Gitian's outputs. All interim tarballs are\n+fully deterministic and may be freely redistributed.\n+\n+genisoimage is used to create the initial DMG. It is not deterministic as-is,\n+so it has been patched. A system genisoimage will work fine, but it will not\n+be deterministic because the file-order will change between invocations.\n+The patch can be seen here:  [theuni/osx-cross-depends](https://raw.githubusercontent.com/theuni/osx-cross-depends/master/patches/cdrtools/genisoimage.diff).\n+No effort was made to fix this cleanly, so it likely leaks memory badly. But\n+it's only used for a single invocation, so that's no real concern.\n+\n+genisoimage cannot compress DMGs, so afterwards, the 'dmg' tool from the\n+libdmg-hfsplus project is used to compress it. There are several bugs in this\n+tool and its maintainer has seemingly abandoned the project. It has been forked\n+and is available (with fixes) here: [theuni/libdmg-hfsplus](https://github.com/theuni/libdmg-hfsplus).\n+\n+The 'dmg' tool has the ability to create DMGs from scratch as well, but this\n+functionality is broken. Only the compression feature is currently used.\n+Ideally, the creation could be fixed and genisoimage would no longer be necessary.\n+\n+Background images and other features can be added to DMG files by inserting a\n+.DS_Store before creation. This is generated by the script\n+contrib/macdeploy/custom_dsstore.py.\n+\n+As of OS X Mavericks (10.9), using an Apple-blessed key to sign binaries is a\n+requirement in order to satisfy the new Gatekeeper requirements. Because this\n+private key cannot be shared, we'll have to be a bit creative in order for the\n+build process to remain somewhat deterministic. Here's how it works:\n+\n+- Builders use Gitian to create an unsigned release. This outputs an unsigned\n+  dmg which users may choose to bless and run. It also outputs an unsigned app\n+  structure in the form of a tarball, which also contains all of the tools\n+  that have been previously (deterministically) built in order to create a\n+  final dmg.\n+- The Apple keyholder uses this unsigned app to create a detached signature,\n+  using the script that is also included there. Detached signatures are available from this [repository](https://github.com/syscoin-core/syscoin-detached-sigs).\n+- Builders feed the unsigned app + detached signature back into Gitian. It\n+  uses the pre-built tools to recombine the pieces into a deterministic dmg."
      },
      {
        "sha": "e96c52a84d8f9cb06892334232e18f80551cf217",
        "filename": "doc/benchmarking.md",
        "status": "added",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36252751712234b18847e2c6b80e2f722b03552a/doc/benchmarking.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36252751712234b18847e2c6b80e2f722b03552a/doc/benchmarking.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/benchmarking.md?ref=36252751712234b18847e2c6b80e2f722b03552a",
        "patch": "@@ -0,0 +1,55 @@\n+Benchmarking\n+============\n+\n+Syscoin Core has an internal benchmarking framework, with benchmarks\n+for cryptographic algorithms such as SHA1, SHA256, SHA512 and RIPEMD160. As well as the rolling bloom filter.\n+\n+Running\n+---------------------\n+After compiling syscoin-core, the benchmarks can be run with:\n+\n+    src/bench/bench_syscoin\n+\n+The output will look similar to:\n+```\n+# Benchmark, evals, iterations, total, min, max, median\n+Base58CheckEncode, 5, 320000, 120.772, 7.49351e-05, 7.59374e-05, 7.54759e-05\n+Base58Decode, 5, 800000, 122.833, 3.0467e-05, 3.11732e-05, 3.06304e-05\n+Base58Encode, 5, 470000, 137.094, 5.81061e-05, 5.85109e-05, 5.84462e-05\n+BenchLockedPool, 5, 530, 34.2023, 0.0128247, 0.0129613, 0.0129026\n+CCheckQueueSpeedPrevectorJob, 5, 1400, 26.1762, 0.00365048, 0.00388629, 0.00367108\n+CCoinsCaching, 5, 170000, 48.1074, 5.60229e-05, 5.72316e-05, 5.66214e-05\n+CoinSelection, 5, 650, 34.6426, 0.0105801, 0.0107699, 0.010664\n+DeserializeAndCheckBlockTest, 5, 160, 39.2084, 0.0483662, 0.0494199, 0.0490138\n+DeserializeBlockTest, 5, 130, 23.8129, 0.0357731, 0.0373763, 0.0365858\n+FastRandom_1bit, 5, 440000000, 38.1609, 1.72974e-08, 1.73882e-08, 1.73478e-08\n+FastRandom_32bit, 5, 110000000, 72.8237, 1.29992e-07, 1.37014e-07, 1.30115e-07\n+MempoolEviction, 5, 41000, 89.8883, 0.000432748, 0.000446857, 0.000438483\n+PrevectorClear, 5, 5600, 47.9229, 0.00169952, 0.0017455, 0.00170315\n+PrevectorDestructor, 5, 5700, 44.5498, 0.0015561, 0.00156977, 0.00156469\n+RIPEMD160, 5, 440, 135.988, 0.0615496, 0.062268, 0.0617779\n+RollingBloom, 5, 1500000, 36.5109, 4.80961e-06, 4.97463e-06, 4.85811e-06\n+SHA1, 5, 570, 51.808, 0.018065, 0.0182623, 0.0181865\n+SHA256, 5, 340, 8.31841, 0.00483231, 0.00499803, 0.00485486\n+SHA256_32b, 5, 4700000, 10.469, 4.43441e-07, 4.47611e-07, 4.45223e-07\n+SHA512, 5, 330, 33.3408, 0.02017, 0.0202554, 0.0201921\n+SipHash_32b, 5, 40000000, 38.7088, 1.91103e-07, 1.96998e-07, 1.93792e-07\n+Sleep100ms, 5, 10, 5.01062, 0.100131, 0.100368, 0.100147\n+Trig, 5, 12000000, 5.95494, 9.78115e-08, 1.04354e-07, 9.80682e-08\n+VerifyScriptBench, 5, 6300, 9.02493, 0.000285566, 0.000288433, 0.000286175\n+```\n+\n+Help\n+---------------------\n+`-?` will print a list of options and exit:\n+\n+    src/bench/bench_syscoin -?\n+\n+Notes\n+---------------------\n+More benchmarks are needed for, in no particular order:\n+- Script Validation\n+- CCoinDBView caching\n+- Coins database\n+- Memory pool\n+- Wallet coin selection"
      },
      {
        "sha": "43e719c14e150cac48a9811107dab2b524b6f60a",
        "filename": "doc/build-netbsd.md",
        "status": "added",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36252751712234b18847e2c6b80e2f722b03552a/doc/build-netbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36252751712234b18847e2c6b80e2f722b03552a/doc/build-netbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-netbsd.md?ref=36252751712234b18847e2c6b80e2f722b03552a",
        "patch": "@@ -0,0 +1,49 @@\n+NetBSD build guide\n+======================\n+(updated for NetBSD 7.0)\n+\n+This guide describes how to build syscoind and command-line utilities on NetBSD.\n+\n+This guide does not contain instructions for building the GUI.\n+\n+Preparation\n+-------------\n+\n+You will need the following modules, which can be installed via pkgsrc or pkgin:\n+\n+```\n+autoconf\n+automake\n+boost\n+db4\n+git\n+gmake\n+libevent\n+libtool\n+python27\n+```\n+\n+Download the source code:\n+```\n+git clone https://github.com/syscoin/syscoin\n+```\n+\n+See [dependencies.md](dependencies.md) for a complete overview.\n+\n+### Building Syscoin Core\n+\n+**Important**: Use `gmake` (the non-GNU `make` will exit with an error).\n+\n+With wallet:\n+```\n+./autogen.sh\n+./configure CPPFLAGS=\"-I/usr/pkg/include\" LDFLAGS=\"-L/usr/pkg/lib\" BOOST_CPPFLAGS=\"-I/usr/pkg/include\" BOOST_LDFLAGS=\"-L/usr/pkg/lib\"\n+gmake\n+```\n+\n+Without wallet:\n+```\n+./autogen.sh\n+./configure --disable-wallet CPPFLAGS=\"-I/usr/pkg/include\" LDFLAGS=\"-L/usr/pkg/lib\" BOOST_CPPFLAGS=\"-I/usr/pkg/include\" BOOST_LDFLAGS=\"-L/usr/pkg/lib\"\n+gmake\n+```"
      },
      {
        "sha": "6a2b57508fb8d6fa846cd32f3d3921c913285c6c",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 42,
        "deletions": 104,
        "changes": 146,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36252751712234b18847e2c6b80e2f722b03552a/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36252751712234b18847e2c6b80e2f722b03552a/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=36252751712234b18847e2c6b80e2f722b03552a",
        "patch": "@@ -1,99 +1,52 @@\n OpenBSD build guide\n ======================\n-(updated for OpenBSD 5.7)\n+(updated for OpenBSD 6.2)\n \n This guide describes how to build syscoind and command-line utilities on OpenBSD.\n \n-As OpenBSD is most common as a server OS, we will not bother with the GUI.\n+OpenBSD is most commonly used as a server OS, so this guide does not contain instructions for building the GUI.\n \n Preparation\n -------------\n \n Run the following as root to install the base dependencies for building:\n \n ```bash\n-pkg_add gmake libtool libevent\n+pkg_add git gmake libevent libtool\n pkg_add autoconf # (select highest version, e.g. 2.69)\n pkg_add automake # (select highest version, e.g. 1.15)\n-pkg_add python # (select version 2.7.x, not 3.x)\n-ln -sf /usr/local/bin/python2.7 /usr/local/bin/python2\n-```\n-\n-The default C++ compiler that comes with OpenBSD 5.7 is g++ 4.2. This version is old (from 2007), and is not able to compile the current version of Syscoin Core. It is possible to patch it up to compile, but with the planned transition to C++11 this is a losing battle. So here we will be installing a newer compiler.\n-\n-GCC\n--------\n+pkg_add python # (select highest version, e.g. 3.6)\n+pkg_add boost\n \n-You can install a newer version of gcc with:\n-\n-```bash\n-pkg_add g++ # (select newest 4.x version, e.g. 4.9.2)\n+git clone https://github.com/syscoin/syscoin.git\n ```\n \n-This compiler will not overwrite the system compiler, it will be installed as `egcc` and `eg++` in `/usr/local/bin`.\n+See [dependencies.md](dependencies.md) for a complete overview.\n \n-### Building boost\n+**Important**: From OpenBSD 6.2 onwards a C++11-supporting clang compiler is\n+part of the base image, and while building it is necessary to make sure that this\n+compiler is used and not ancient g++ 4.2.1. This is done by appending\n+`CC=cc CXX=c++` to configuration commands. Mixing different compilers\n+within the same executable will result in linker errors.\n \n-Do not use `pkg_add boost`! The boost version installed thus is compiled using the `g++` compiler not `eg++`, which will result in a conflict between `/usr/local/lib/libestdc++.so.XX.0` and `/usr/lib/libstdc++.so.XX.0`, resulting in a test crash:\n+### Building BerkeleyDB\n \n-    test_syscoin:/usr/lib/libstdc++.so.57.0: /usr/local/lib/libestdc++.so.17.0 : WARNING: symbol(_ZN11__gnu_debug17_S_debug_me ssagesE) size mismatch, relink your program\n-    ...\n-    Segmentation fault (core dumped)\n+BerkeleyDB is only necessary for the wallet functionality. To skip this, pass\n+`--disable-wallet` to `./configure` and skip to the next section.\n \n-This makes it necessary to build boost, or at least the parts used by Syscoin Core, manually:\n+It is recommended to use Berkeley DB 4.8. You cannot use the BerkeleyDB library\n+from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n+If you have to build it yourself, you can use [the installation script included\n+in contrib/](/contrib/install_db4.sh) like so\n \n+```shell\n+./contrib/install_db4.sh `pwd` CC=cc CXX=c++\n ```\n-# Pick some path to install boost to, here we create a directory within the syscoin directory\n-SYSCOIN_ROOT=$(pwd)\n-BOOST_PREFIX=\"${SYSCOIN_ROOT}/boost\"\n-mkdir -p $BOOST_PREFIX\n-\n-# Fetch the source and verify that it is not tampered with\n-wget http://heanet.dl.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.bz2\n-echo '727a932322d94287b62abb1bd2d41723eec4356a7728909e38adb65ca25241ca  boost_1_59_0.tar.bz2' | sha256 -c\n-# MUST output: (SHA256) boost_1_59_0.tar.bz2: OK\n-tar -xjf boost_1_59_0.tar.bz2\n-\n-# Boost 1.59 needs two small patches for OpenBSD\n-cd boost_1_59_0\n-# Also here: https://gist.githubusercontent.com/laanwj/bf359281dc319b8ff2e1/raw/92250de8404b97bb99d72ab898f4a8cb35ae1ea3/patch-boost_test_impl_execution_monitor_ipp.patch\n-patch -p0 < /usr/ports/devel/boost/patches/patch-boost_test_impl_execution_monitor_ipp\n-# https://github.com/boostorg/filesystem/commit/90517e459681790a091566dce27ca3acabf9a70c\n-sed 's/__OPEN_BSD__/__OpenBSD__/g' < libs/filesystem/src/path.cpp > libs/filesystem/src/path.cpp.tmp\n-mv libs/filesystem/src/path.cpp.tmp libs/filesystem/src/path.cpp\n-\n-# Build w/ minimum configuration necessary for syscoin\n-echo 'using gcc : : eg++ : <cxxflags>\"-fvisibility=hidden -fPIC\" <linkflags>\"\" <archiver>\"ar\" <striper>\"strip\"  <ranlib>\"ranlib\" <rc>\"\" : ;' > user-config.jam\n-config_opts=\"runtime-link=shared threadapi=pthread threading=multi link=static variant=release --layout=tagged --build-type=complete --user-config=user-config.jam -sNO_BZIP2=1\"\n-./bootstrap.sh --without-icu --with-libraries=chrono,filesystem,program_options,system,thread,test\n-./b2 -d2 -j2 -d1 ${config_opts} --prefix=${BOOST_PREFIX} stage\n-./b2 -d0 -j4 ${config_opts} --prefix=${BOOST_PREFIX} install\n-```\n-\n-### Building BerkeleyDB\n \n-BerkeleyDB is only necessary for the wallet functionality. To skip this, pass `--disable-wallet` to `./configure`.\n+from the root of the repository. Then set `BDB_PREFIX` for the next section:\n \n-See \"Berkeley DB\" in [build_unix.md](build_unix.md) for instructions on how to build BerkeleyDB 4.8.\n-You cannot use the BerkeleyDB library from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n-\n-```bash\n-# Pick some path to install BDB to, here we create a directory within the syscoin directory\n-SYSCOIN_ROOT=$(pwd)\n-BDB_PREFIX=\"${SYSCOIN_ROOT}/db4\"\n-mkdir -p $BDB_PREFIX\n-\n-# Fetch the source and verify that it is not tampered with\n-wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'\n-echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef  db-4.8.30.NC.tar.gz' | sha256 -c\n-# MUST output: (SHA256) db-4.8.30.NC.tar.gz: OK\n-tar -xzf db-4.8.30.NC.tar.gz\n-\n-# Build the library and install to specified prefix\n-cd db-4.8.30.NC/build_unix/\n-#  Note: Do a static build so that it can be embedded into the executable, instead of having to find a .so at runtime\n-../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX CC=egcc CXX=eg++ CPP=ecpp\n-make install\n+```shell\n+export BDB_PREFIX=\"$PWD/db4\"\n ```\n \n ### Building Syscoin Core\n@@ -106,57 +59,42 @@ export AUTOCONF_VERSION=2.69 # replace this with the autoconf version that you i\n export AUTOMAKE_VERSION=1.15 # replace this with the automake version that you installed\n ./autogen.sh\n ```\n-Make sure `BDB_PREFIX` and `BOOST_PREFIX` are set to the appropriate paths from the above steps.\n+Make sure `BDB_PREFIX` is set to the appropriate path from the above steps.\n \n To configure with wallet:\n ```bash\n-./configure --with-gui=no --with-boost=$BOOST_PREFIX \\\n-    CC=egcc CXX=eg++ CPP=ecpp \\\n-    LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\"\n+./configure --with-gui=no CC=cc CXX=c++ \\\n+    BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" BDB_CFLAGS=\"-I${BDB_PREFIX}/include\"\n ```\n \n To configure without wallet:\n ```bash\n-./configure --disable-wallet --with-gui=no --with-boost=$BOOST_PREFIX \\\n-    CC=egcc CXX=eg++ CPP=ecpp\n+./configure --disable-wallet --with-gui=no CC=cc CXX=c++\n ```\n \n Build and run the tests:\n ```bash\n-gmake\n+gmake # use -jX here for parallelism\n gmake check\n ```\n \n-Clang (not currently working)\n-------------------------------\n-\n-Using a newer g++ results in linking the new code to a new libstdc++.\n-Libraries built with the old g++, will still import the old library.\n-This gives conflicts, necessitating rebuild of all C++ dependencies of the application.\n-\n-With clang this can - at least theoretically - be avoided because it uses the\n-base system's libstdc++.\n+Resource limits\n+-------------------\n \n-```bash\n-pkg_add llvm boost\n-```\n+If the build runs into out-of-memory errors, the instructions in this section\n+might help.\n \n-```bash\n-./configure --disable-wallet --with-gui=no CC=clang CXX=clang++\n-gmake\n-```\n+The standard ulimit restrictions in OpenBSD are very strict:\n \n-However, this does not appear to work. Compilation succeeds, but link fails\n-with many 'local symbol discarded' errors:\n+    data(kbytes)         1572864\n \n-    local symbol 150: discarded in section `.text._ZN10tinyformat6detail14FormatIterator6finishEv' from libsyscoin_util.a(libsyscoin_util_a-random.o)\n-    local symbol 151: discarded in section `.text._ZN10tinyformat6detail14FormatIterator21streamStateFromFormatERSoRjPKcii' from libsyscoin_util.a(libsyscoin_util_a-random.o)\n-    local symbol 152: discarded in section `.text._ZN10tinyformat6detail12convertToIntIA13_cLb0EE6invokeERA13_Kc' from libsyscoin_util.a(libsyscoin_util_a-random.o)\n+This, unfortunately, in some cases not enough to compile some `.cpp` files in the project,\n+(see issue [#6658](https://github.com/syscoin/syscoin/issues/6658)).\n+If your user is in the `staff` group the limit can be raised with:\n \n-According to similar reported errors this is a binutils (ld) issue in 2.15, the\n-version installed by OpenBSD 5.7:\n+    ulimit -d 3000000\n \n-- http://openbsd-archive.7691.n7.nabble.com/UPDATE-cppcheck-1-65-td248900.html\n-- https://llvm.org/bugs/show_bug.cgi?id=9758\n+The change will only affect the current shell and processes spawned by it. To\n+make the change system-wide, change `datasize-cur` and `datasize-max` in\n+`/etc/login.conf`, and reboot.\n \n-There is no known workaround for this."
      },
      {
        "sha": "e8c78a4aeff045b92ba0fbd6d3dc5adb53b17d82",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 58,
        "deletions": 80,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36252751712234b18847e2c6b80e2f722b03552a/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36252751712234b18847e2c6b80e2f722b03552a/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=36252751712234b18847e2c6b80e2f722b03552a",
        "patch": "@@ -1,120 +1,98 @@\n Mac OS X Build Instructions and Notes\n ====================================\n-This guide will show you how to build syscoind (headless client) for OSX.\n-\n-Notes\n------\n-\n-* Tested on OS X 10.7 through 10.11 on 64-bit Intel processors only.\n-\n-* All of the commands should be executed in a Terminal application. The\n-built-in one is located in `/Applications/Utilities`.\n+The commands in this guide should be executed in a Terminal application.\n+The built-in one is located in `/Applications/Utilities/Terminal.app`.\n \n Preparation\n -----------\n+Install the OS X command line tools:\n \n-You need to install Xcode with all the options checked so that the compiler\n-and everything is available in /usr not just /Developer. Xcode should be\n-available on your OS X installation media, but if not, you can get the\n-current version from https://developer.apple.com/xcode/. If you install\n-Xcode 4.3 or later, you'll need to install its command line tools. This can\n-be done in `Xcode > Preferences > Downloads > Components` and generally must\n-be re-done or updated every time Xcode is updated.\n+`xcode-select --install`\n \n-You will also need to install [Homebrew](http://brew.sh) in order to install library\n-dependencies.\n+When the popup appears, click `Install`.\n \n-The installation of the actual dependencies is covered in the instructions\n-sections below.\n+Then install [Homebrew](https://brew.sh).\n \n-Instructions: Homebrew\n+Dependencies\n ----------------------\n \n-#### Install dependencies using Homebrew\n+    brew install automake berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf python qt libevent qrencode\n \n-    brew install autoconf automake berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf libevent\n+See [dependencies.md](dependencies.md) for a complete overview.\n \n-NOTE: Building with Qt4 is still supported, however, could result in a broken UI. As such, building with Qt5 is recommended. Qt5 5.7 requires C++11 which Syscoin Core doesn't fully support yet, Qt5 5.6.2 has some other issues, so make sure to install Qt version < 5.6.2 (5.6.1-1 is recommended).\n-    brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/e6d954bab88e89c5582498157077756900865070/Formula/qt5.rb\n+If you want to build the disk image with `make deploy` (.dmg / optional), you need RSVG\n \n-### Building Syscoin Core\n+    brew install librsvg\n \n-1. Clone the GitHub tree to get the source code and go into the directory.\n+NOTE: Building with Qt4 is still supported, however, could result in a broken UI. Building with Qt5 is recommended.\n \n-        git clone https://github.com/syscoin/syscoin.git\n-        cd syscoin\n+Berkeley DB\n+-----------\n+It is recommended to use Berkeley DB 4.8. If you have to build it yourself,\n+you can use [the installation script included in contrib/](/contrib/install_db4.sh)\n+like so\n \n-2.  Build Syscoin Core:\n-    This will configure and build the headless syscoin binaries as well as the gui (if Qt is found).\n-    You can disable the gui build by passing `--without-gui` to configure.\n+```shell\n+./contrib/install_db4.sh .\n+```\n \n-        ./autogen.sh\n-        ./configure\n-        make\n+from the root of the repository.\n \n-3.  It is also a good idea to build and run the unit tests:\n+**Note**: You only need Berkeley DB if the wallet is enabled (see the section *Disable-Wallet mode* below).\n \n-        make check\n+Build Syscoin Core\n+------------------------\n \n-4.  (Optional) You can also install syscoind to your path:\n+1. Clone the syscoin source code and cd into `syscoin`\n \n-        make install\n+        git clone https://github.com/syscoin/syscoin\n+        cd syscoin\n \n-Use Qt Creator as IDE\n-------------------------\n-You can use Qt Creator as IDE, for debugging and for manipulating forms, etc.\n-Download Qt Creator from https://www.qt.io/download/. Download the \"community edition\" and only install Qt Creator (uncheck the rest during the installation process).\n-\n-1. Make sure you installed everything through Homebrew mentioned above\n-2. Do a proper ./configure --enable-debug\n-3. In Qt Creator do \"New Project\" -> Import Project -> Import Existing Project\n-4. Enter \"syscoin-qt\" as project name, enter src/qt as location\n-5. Leave the file selection as it is\n-6. Confirm the \"summary page\"\n-7. In the \"Projects\" tab select \"Manage Kits...\"\n-8. Select the default \"Desktop\" kit and select \"Clang (x86 64bit in /usr/bin)\" as compiler\n-9. Select LLDB as debugger (you might need to set the path to your installation)\n-10. Start debugging with Qt Creator\n-\n-Creating a release build\n-------------------------\n-You can ignore this section if you are building `syscoind` for your own use.\n+2.  Build syscoin-core:\n \n-syscoind/syscoin-cli binaries are not included in the Syscoin-Qt.app bundle.\n+    Configure and build the headless syscoin binaries as well as the GUI (if Qt is found).\n \n-If you are building `syscoind` or `Syscoin Core` for others, your build machine should be set up\n-as follows for maximum compatibility:\n+    You can disable the GUI build by passing `--without-gui` to configure.\n \n-All dependencies should be compiled with these flags:\n+        ./autogen.sh\n+        ./configure\n+        make\n+\n+3.  It is recommended to build and run the unit tests:\n+\n+        make check\n \n- -mmacosx-version-min=10.7\n- -arch x86_64\n- -isysroot $(xcode-select --print-path)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.7.sdk\n+4.  You can also create a .dmg that contains the .app bundle (optional):\n \n-Once dependencies are compiled, see [doc/release-process.md](release-process.md) for how the Syscoin Core\n-bundle is packaged and signed to create the .dmg disk image that is distributed.\n+        make deploy\n \n Running\n -------\n \n-It's now available at `./syscoind`, provided that you are still in the `src`\n-directory. We have to first create the RPC configuration file, though.\n+Syscoin Core is now available at `./src/syscoind`\n \n-Run `./syscoind` to get the filename where it should be put, or just try these\n-commands:\n+Before running, it's recommended you create an RPC configuration file.\n \n-    echo -e \"rpcuser=syscoinrpc\\nrpcpassword=$(xxd -l 16 -p /dev/urandom)\" > \"/Users/${USER}/Library/Application Support/SyscoinCore/syscoin.conf\"\n-    chmod 600 \"/Users/${USER}/Library/Application Support/SyscoinCore/syscoin.conf\"\n+    echo -e \"rpcuser=syscoinrpc\\nrpcpassword=$(xxd -l 16 -p /dev/urandom)\" > \"/Users/${USER}/Library/Application Support/Syscoin/syscoin.conf\"\n \n-The next time you run it, it will start downloading the blockchain, but it won't\n-output anything while it's doing this. This process may take several hours;\n-you can monitor its process by looking at the debug.log file, like this:\n+    chmod 600 \"/Users/${USER}/Library/Application Support/Syscoin/syscoin.conf\"\n \n-    tail -f $HOME/Library/Application\\ Support/SyscoinCore/debug.log\n+The first time you run syscoind, it will start downloading the blockchain. This process could take several hours.\n+\n+You can monitor the download process by looking at the debug.log file:\n+\n+    tail -f $HOME/Library/Application\\ Support/Syscoin/debug.log\n \n Other commands:\n -------\n \n-    ./syscoind -daemon # to start the syscoin daemon.\n-    ./syscoin-cli --help  # for a list of command-line options.\n-    ./syscoin-cli help    # When the daemon is running, to get a list of RPC commands\n+    ./src/syscoind -daemon # Starts the syscoin daemon.\n+    ./src/syscoin-cli --help # Outputs a list of command-line options.\n+    ./src/syscoin-cli help # Outputs a list of RPC commands when the daemon is running.\n+\n+Notes\n+-----\n+\n+* Tested on OS X 10.8 through 10.13 on 64-bit Intel processors only.\n+\n+* Building with downloaded Qt binaries is not officially supported. See the notes in [#7714](https://github.com/syscoin/syscoin/issues/7714)"
      },
      {
        "sha": "3e6dad4006b9a201187851cae89e5d28e2de9bab",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 123,
        "deletions": 54,
        "changes": 177,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36252751712234b18847e2c6b80e2f722b03552a/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36252751712234b18847e2c6b80e2f722b03552a/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=36252751712234b18847e2c6b80e2f722b03552a",
        "patch": "@@ -2,16 +2,17 @@ UNIX BUILD NOTES\n ====================\n Some notes on how to build Syscoin Core in Unix.\n \n-(for OpenBSD specific instructions, see [build-openbsd.md](build-openbsd.md))\n+(For BSD specific instructions, see [build-openbsd.md](build-openbsd.md) and/or\n+[build-netbsd.md](build-netbsd.md))\n \n Note\n ---------------------\n-Always use absolute paths to configure and compile Syscoin Core and the dependencies,\n-for example, when specifying the the path of the dependency:\n+Always use absolute paths to configure and compile syscoin and the dependencies,\n+for example, when specifying the path of the dependency:\n \n \t../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX\n \n-Here BDB_PREFIX must absolute path - it is defined using $(pwd) which ensures\n+Here BDB_PREFIX must be an absolute path - it is defined using $(pwd) which ensures\n the usage of the absolute path.\n \n To Build\n@@ -49,34 +50,47 @@ Optional dependencies:\n  univalue    | Utility          | JSON parsing and encoding (bundled version will be used unless --with-system-univalue passed to configure)\n  libzmq3     | ZMQ notification | Optional, allows generating ZMQ notifications (requires ZMQ version >= 4.x)\n \n-For the versions used in the release, see [release-process.md](release-process.md) under *Fetch and build inputs*.\n+For the versions used, see [dependencies.md](dependencies.md)\n \n-System requirements\n+Memory Requirements\n --------------------\n \n-C++ compilers are memory-hungry. It is recommended to have at least 1 GB of\n-memory available when compiling Syscoin Core. With 512MB of memory or less\n-compilation will take much longer due to swap thrashing.\n+C++ compilers are memory-hungry. It is recommended to have at least 1.5 GB of\n+memory available when compiling Syscoin Core. On systems with less, gcc can be\n+tuned to conserve memory with additional CXXFLAGS:\n+\n+\n+    ./configure CXXFLAGS=\"--param ggc-min-expand=1 --param ggc-min-heapsize=32768\"\n+\n+\n+## Linux Distribution Specific Instructions\n+\n+### Ubuntu & Debian\n+\n+#### Dependency Build Instructions\n \n-Dependency Build Instructions: Ubuntu & Debian\n-----------------------------------------------\n Build requirements:\n \n-    sudo apt-get install build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils\n+    sudo apt-get install build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils python3\n \n-On at least Ubuntu 14.04+ and Debian 7+ there are generic names for the\n+Options when installing required Boost library files:\n+\n+1. On at least Ubuntu 14.04+ and Debian 7+ there are generic names for the\n individual boost development packages, so the following can be used to only\n install necessary parts of boost:\n \n-    sudo apt-get install libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread-dev libboost-chrono-dev libboost-graph-dev\n+        sudo apt-get install libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread-dev libboost-graph-dev\n+\n+2. If that doesn't work, you can install all boost development packages with:\n \n-If that doesn't work, you can install all boost development packages with:\n+        sudo apt-get install libboost-all-dev\n \n-    sudo apt-get install libboost-all-dev\n+BerkeleyDB is required for the wallet.\n \n-BerkeleyDB is required for the wallet. db4.8 packages are available [here](https://launchpad.net/~syscoin/+archive/syscoin).\n+**For Ubuntu only:** db4.8 packages are available [here](https://launchpad.net/~syscoin/+archive/syscoin).\n You can add the repository and install using the following commands:\n \n+    sudo apt-get install software-properties-common\n     sudo add-apt-repository ppa:bitcoin/bitcoin\n     sudo apt-get update\n     sudo apt-get install libdb4.8-dev libdb4.8++-dev\n@@ -88,16 +102,15 @@ pass `--with-incompatible-bdb` to configure.\n \n See the section \"Disable-wallet mode\" to build Syscoin Core without wallet.\n \n-Optional:\n+Optional (see --with-miniupnpc and --enable-upnp-default):\n \n-    sudo apt-get install libminiupnpc-dev (see --with-miniupnpc and --enable-upnp-default)\n+    sudo apt-get install libminiupnpc-dev\n \n-ZMQ dependencies:\n+ZMQ dependencies (provides ZMQ API 4.x):\n \n-    sudo apt-get install libzmq3-dev (provides ZMQ API 4.x)\n+    sudo apt-get install libzmq3-dev\n \n-Dependencies for the GUI: Ubuntu & Debian\n------------------------------------------\n+#### Dependencies for the GUI\n \n If you want to build Syscoin-Qt, make sure that the required packages for Qt development\n are installed. Either Qt 5 or Qt 4 are necessary to build the GUI.\n@@ -119,6 +132,27 @@ libqrencode (optional) can be installed with:\n Once these are installed, they will be found by configure and a syscoin-qt executable will be\n built by default.\n \n+\n+### Fedora\n+\n+#### Dependency Build Instructions\n+\n+Build requirements:\n+\n+    sudo dnf install gcc-c++ libtool make autoconf automake openssl-devel libevent-devel boost-devel libdb4-devel libdb4-cxx-devel python3\n+\n+Optional:\n+\n+    sudo dnf install miniupnpc-devel\n+\n+To build with Qt 5 (recommended) you need the following:\n+\n+    sudo dnf install qt5-qttools-devel qt5-qtbase-devel protobuf-devel\n+\n+libqrencode (optional) can be installed with:\n+\n+    sudo dnf install qrencode-devel\n+\n Notes\n -----\n The release is built with GCC and then \"strip syscoind\" to strip the debug\n@@ -139,33 +173,16 @@ turned off by default.  See the configure options for upnp behavior desired:\n \n Berkeley DB\n -----------\n-It is recommended to use Berkeley DB 4.8. If you have to build it yourself:\n+It is recommended to use Berkeley DB 4.8. If you have to build it yourself,\n+you can use [the installation script included in contrib/](/contrib/install_db4.sh)\n+like so\n \n-```bash\n-SYS_ROOT=$(pwd)\n-\n-# Pick some path to install BDB to, here we create a directory within the syscoin directory\n-BDB_PREFIX=\"${SYS_ROOT}/db4\"\n-mkdir -p $BDB_PREFIX\n-\n-# Fetch the source and verify that it is not tampered with\n-wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'\n-echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef  db-4.8.30.NC.tar.gz' | sha256sum -c\n-# -> db-4.8.30.NC.tar.gz: OK\n-tar -xzvf db-4.8.30.NC.tar.gz\n-\n-# Build the library and install to our prefix\n-cd db-4.8.30.NC/build_unix/\n-#  Note: Do a static build so that it can be embedded into the executable, instead of having to find a .so at runtime\n-../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX\n-make install\n-\n-# Configure Syscoin Core to use our own-built instance of BDB\n-cd $SYS_ROOT\n-./autogen.sh\n-./configure LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\" # (other args...)\n+```shell\n+./contrib/install_db4.sh `pwd`\n ```\n \n+from the root of the repository.\n+\n **Note**: You only need Berkeley DB if the wallet is enabled (see the section *Disable-Wallet mode* below).\n \n Boost\n@@ -179,7 +196,7 @@ If you need to build Boost yourself:\n \n Security\n --------\n-To help make your Syscoin installation more secure by making certain attacks impossible to\n+To help make your syscoin installation more secure by making certain attacks impossible to\n exploit even if a vulnerability is found, binaries are hardened by default.\n This can be disabled with:\n \n@@ -203,7 +220,7 @@ Hardening enables the following features:\n \n     To test that you have built PIE executable, install scanelf, part of paxutils, and use:\n \n-    \tscanelf -e ./syscoind\n+    \tscanelf -e ./syscoin\n \n     The output should contain:\n \n@@ -212,13 +229,13 @@ Hardening enables the following features:\n \n * Non-executable Stack\n     If the stack is executable then trivial stack based buffer overflow exploits are possible if\n-    vulnerable buffers are found. By default, Syscoin Core should be built with a non-executable stack\n+    vulnerable buffers are found. By default, syscoin should be built with a non-executable stack\n     but if one of the libraries it uses asks for an executable stack or someone makes a mistake\n     and uses a compiler extension which requires an executable stack, it will silently build an\n     executable without the non-executable stack protection.\n \n     To verify that the stack is non-executable after compiling use:\n-    `scanelf -e ./syscoind`\n+    `scanelf -e ./syscoin`\n \n     the output should contain:\n \tSTK/REL/PTL\n@@ -228,7 +245,7 @@ Hardening enables the following features:\n \n Disable-wallet mode\n --------------------\n-When the intention is to run only a P2P node without a wallet, Syscoin Core may be compiled in\n+When the intention is to run only a P2P node without a wallet, syscoin may be compiled in\n disable-wallet mode with:\n \n     ./configure --disable-wallet\n@@ -244,15 +261,36 @@ A list of additional configure flags can be displayed with:\n \n     ./configure --help\n \n+\n+Setup and Build Example: Arch Linux\n+-----------------------------------\n+This example lists the steps necessary to setup and build a command line only, non-wallet distribution of the latest changes on Arch Linux:\n+\n+    pacman -S git base-devel boost libevent python\n+    git clone https://github.com/syscoin/syscoin.git\n+    cd syscoin/\n+    ./autogen.sh\n+    ./configure --disable-wallet --without-gui --without-miniupnpc\n+    make check\n+\n+Note:\n+Enabling wallet support requires either compiling against a Berkeley DB newer than 4.8 (package `db`) using `--with-incompatible-bdb`,\n+or building and depending on a local version of Berkeley DB 4.8. The readily available Arch Linux packages are currently built using\n+`--with-incompatible-bdb` according to the [PKGBUILD](https://projects.archlinux.org/svntogit/community.git/tree/syscoin/trunk/PKGBUILD).\n+As mentioned above, when maintaining portability of the wallet between the standard Syscoin Core distributions and independently built\n+node software is desired, Berkeley DB 4.8 must be used.\n+\n+\n ARM Cross-compilation\n -------------------\n These steps can be performed on, for example, an Ubuntu VM. The depends system\n will also work on other Linux distributions, however the commands for\n installing the toolchain will be different.\n \n-First install the toolchain:\n+Make sure you install the build requirements mentioned above.\n+Then, install the toolchain and curl:\n \n-    sudo apt-get install g++-arm-linux-gnueabihf\n+    sudo apt-get install g++-arm-linux-gnueabihf curl\n \n To build executables for ARM:\n \n@@ -264,3 +302,34 @@ To build executables for ARM:\n \n \n For further documentation on the depends system see [README.md](../depends/README.md) in the depends directory.\n+\n+Building on FreeBSD\n+--------------------\n+\n+(Updated as of FreeBSD 11.0)\n+\n+Clang is installed by default as `cc` compiler, this makes it easier to get\n+started than on [OpenBSD](build-openbsd.md). Installing dependencies:\n+\n+    pkg install autoconf automake libtool pkgconf\n+    pkg install boost-libs openssl libevent\n+    pkg install gmake\n+\n+You need to use GNU make (`gmake`) instead of `make`.\n+(`libressl` instead of `openssl` will also work)\n+\n+For the wallet (optional):\n+\n+    ./contrib/install_db4.sh `pwd`\n+    setenv BDB_PREFIX $PWD/db4\n+\n+Then build using:\n+\n+    ./autogen.sh\n+    ./configure --disable-wallet # OR\n+    ./configure BDB_CFLAGS=\"-I${BDB_PREFIX}/include\" BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx\"\n+    gmake\n+\n+*Note on debugging*: The version of `gdb` installed by default is [ancient and considered harmful](https://wiki.freebsd.org/GdbRetirement).\n+It is not suitable for debugging a multi-threaded C++ program, not even for getting backtraces. Please install the package `gdb` and\n+use the versioned gdb command e.g. `gdb7111`."
      },
      {
        "sha": "3cb443fa52ec6b513fd633273613294381f5732e",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 153,
        "deletions": 16,
        "changes": 169,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36252751712234b18847e2c6b80e2f722b03552a/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36252751712234b18847e2c6b80e2f722b03552a/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=36252751712234b18847e2c6b80e2f722b03552a",
        "patch": "@@ -1,40 +1,177 @@\n WINDOWS BUILD NOTES\n ====================\n \n-Some notes on how to build Syscoin Core for Windows.\n+Below are some notes on how to build Syscoin Core for Windows.\n \n-Most developers use cross-compilation from Ubuntu to build executables for\n-Windows. This is also used to build the release binaries.\n+The options known to work for building Syscoin Core on Windows are:\n \n-Building on Windows itself is possible (for example using msys / mingw-w64),\n-but no one documented the steps to do this. If you are doing this, please contribute them.\n+* On Linux using the [Mingw-w64](https://mingw-w64.org/doku.php) cross compiler tool chain. Ubuntu Trusty 14.04 is recommended\n+and is the platform used to build the Syscoin Core Windows release binaries.\n+* On Windows using [Windows\n+Subsystem for Linux (WSL)](https://msdn.microsoft.com/commandline/wsl/about) and the Mingw-w64 cross compiler tool chain.\n \n-Cross-compilation\n--------------------\n+Other options which may work but which have not been extensively tested are (please contribute instructions):\n \n-These steps can be performed on, for example, an Ubuntu VM. The depends system\n+* On Windows using a POSIX compatibility layer application such as [cygwin](http://www.cygwin.com/) or [msys2](http://www.msys2.org/).\n+* On Windows using a native compiler tool chain such as [Visual Studio](https://www.visualstudio.com).\n+\n+Installing Windows Subsystem for Linux\n+---------------------------------------\n+\n+With Windows 10, Microsoft has released a new feature named the [Windows\n+Subsystem for Linux (WSL)](https://msdn.microsoft.com/commandline/wsl/about). This\n+feature allows you to run a bash shell directly on Windows in an Ubuntu-based\n+environment. Within this environment you can cross compile for Windows without\n+the need for a separate Linux VM or server. Note that while WSL can be installed with\n+other Linux variants, such as OpenSUSE, the following instructions have only been\n+tested with Ubuntu.\n+\n+This feature is not supported in versions of Windows prior to Windows 10 or on\n+Windows Server SKUs. In addition, it is available [only for 64-bit versions of\n+Windows](https://msdn.microsoft.com/en-us/commandline/wsl/install_guide).\n+\n+Full instructions to install WSL are available on the above link.\n+To install WSL on Windows 10 with Fall Creators Update installed (version >= 16215.0) do the following:\n+\n+1. Enable the Windows Subsystem for Linux feature\n+  * Open the Windows Features dialog (`OptionalFeatures.exe`)\n+  * Enable 'Windows Subsystem for Linux'\n+  * Click 'OK' and restart if necessary\n+2. Install Ubuntu\n+  * Open Microsoft Store and search for Ubuntu or use [this link](https://www.microsoft.com/store/productId/9NBLGGH4MSV6)\n+  * Click Install\n+3. Complete Installation\n+  * Open a cmd prompt and type \"Ubuntu\"\n+  * Create a new UNIX user account (this is a separate account from your Windows account)\n+\n+After the bash shell is active, you can follow the instructions below, starting\n+with the \"Cross-compilation\" section. Compiling the 64-bit version is\n+recommended but it is possible to compile the 32-bit version.\n+\n+Cross-compilation for Ubuntu and Windows Subsystem for Linux\n+------------------------------------------------------------\n+\n+At the time of writing the Windows Subsystem for Linux installs Ubuntu Xenial 16.04. The Mingw-w64 package\n+for Ubuntu Xenial does not produce working executables for some of the Syscoin Core applications.\n+It is possible to build on Ubuntu Xenial by installing the cross compiler packages from Ubuntu Zesty, see the steps below.\n+Building on Ubuntu Zesty 17.04 up to 17.10 has been verified to work.\n+\n+The steps below can be performed on Ubuntu (including in a VM) or WSL. The depends system\n will also work on other Linux distributions, however the commands for\n installing the toolchain will be different.\n \n-First install the toolchains:\n+First, install the general dependencies:\n+\n+    sudo apt update\n+    sudo apt upgrade\n+    sudo apt install build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git\n+\n+A host toolchain (`build-essential`) is necessary because some dependency\n+packages (such as `protobuf`) need to build host utilities that are used in the\n+build process.\n+\n+See also: [dependencies.md](dependencies.md).\n+\n+## Building for 64-bit Windows\n+\n+The first step is to install the mingw-w64 cross-compilation tool chain. Due to different Ubuntu\n+packages for each distribution and problems with the Xenial packages the steps for each are different.\n+\n+Common steps to install mingw32 cross compiler tool chain:\n+\n+    sudo apt install g++-mingw-w64-x86-64\n+\n+Ubuntu Trusty 14.04:\n+\n+    No further steps required\n+\n+Ubuntu Xenial 16.04 and Windows Subsystem for Linux <sup>[1](#footnote1),[2](#footnote2)</sup>:\n+\n+    sudo apt install software-properties-common\n+    sudo add-apt-repository \"deb http://archive.ubuntu.com/ubuntu zesty universe\"\n+    sudo apt update\n+    sudo apt upgrade\n+    sudo update-alternatives --config x86_64-w64-mingw32-g++ # Set the default mingw32 g++ compiler option to posix.\n \n-    sudo apt-get install g++-mingw-w64-i686 mingw-w64-i686-dev g++-mingw-w64-x86-64 mingw-w64-x86-64-dev\n+Ubuntu Zesty 17.04 <sup>[2](#footnote2)</sup>:\n \n-To build executables for Windows 32-bit:\n+    sudo update-alternatives --config x86_64-w64-mingw32-g++ # Set the default mingw32 g++ compiler option to posix.\n \n+Once the tool chain is installed the build steps are common:\n+\n+Note that for WSL the Syscoin Core source path MUST be somewhere in the default mount file system, for\n+example /usr/src/syscoin, AND not under /mnt/d/. If this is not the case the dependency autoconf scripts will fail.\n+This means you cannot use a directory that located directly on the host Windows file system to perform the build.\n+\n+Acquire the source in the usual way:\n+\n+    git clone https://github.com/syscoin/syscoin.git\n+\n+Once the source code is ready the build steps are below.\n+\n+    PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n     cd depends\n-    make HOST=i686-w64-mingw32 -j4\n+    make HOST=x86_64-w64-mingw32\n     cd ..\n-    ./configure --prefix=`pwd`/depends/i686-w64-mingw32\n+    ./autogen.sh # not required when building from tarball\n+    CONFIG_SITE=$PWD/depends/x86_64-w64-mingw32/share/config.site ./configure --prefix=/\n     make\n \n-To build executables for Windows 64-bit:\n+## Building for 32-bit Windows\n+\n+To build executables for Windows 32-bit, install the following dependencies:\n+\n+    sudo apt install g++-mingw-w64-i686 mingw-w64-i686-dev\n+\n+For Ubuntu Xenial 16.04, Ubuntu Zesty 17.04 and Windows Subsystem for Linux <sup>[2](#footnote2)</sup>:\n+\n+    sudo update-alternatives --config i686-w64-mingw32-g++  # Set the default mingw32 g++ compiler option to posix.\n+\n+Note that for WSL the Syscoin Core source path MUST be somewhere in the default mount file system, for\n+example /usr/src/syscoin, AND not under /mnt/d/. If this is not the case the dependency autoconf scripts will fail.\n+This means you cannot use a directory that located directly on the host Windows file system to perform the build.\n \n+Acquire the source in the usual way:\n+\n+    git clone https://github.com/syscoin/syscoin.git\n+\n+Then build using:\n+\n+    PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n     cd depends\n-    make HOST=x86_64-w64-mingw32 -j4\n+    make HOST=i686-w64-mingw32\n     cd ..\n-    ./configure --prefix=`pwd`/depends/x86_64-w64-mingw32\n+    ./autogen.sh # not required when building from tarball\n+    CONFIG_SITE=$PWD/depends/i686-w64-mingw32/share/config.site ./configure --prefix=/\n     make\n \n+## Depends system\n+\n For further documentation on the depends system see [README.md](../depends/README.md) in the depends directory.\n \n+Installation\n+-------------\n+\n+After building using the Windows subsystem it can be useful to copy the compiled\n+executables to a directory on the windows drive in the same directory structure\n+as they appear in the release `.zip` archive. This can be done in the following\n+way. This will install to `c:\\workspace\\syscoin`, for example:\n+\n+    make install DESTDIR=/mnt/c/workspace/syscoin\n+\n+Footnotes\n+---------\n+\n+<a name=\"footnote1\">1</a>: There is currently a bug in the 64 bit Mingw-w64 cross compiler packaged for WSL/Ubuntu Xenial 16.04 that\n+causes two of the syscoin executables to crash shortly after start up. The bug is related to the\n+-fstack-protector-all g++ compiler flag which is used to mitigate buffer overflows.\n+Installing the Mingw-w64 packages from the Ubuntu 17 distribution solves the issue, however, this is not\n+an officially supported approach and it's only recommended if you are prepared to reinstall WSL/Ubuntu should\n+something break.\n+\n+<a name=\"footnote2\">2</a>: Starting from Ubuntu Xenial 16.04 both the 32 and 64 bit Mingw-w64 packages install two different\n+compiler options to allow a choice between either posix or win32 threads. The default option is win32 threads which is the more\n+efficient since it will result in binary code that links directly with the Windows kernel32.lib. Unfortunately, the headers\n+required to support win32 threads conflict with some of the classes in the C++11 standard library in particular std::mutex.\n+It's not possible to build the syscoin code using the win32 version of the Mingw-w64 cross compilers (at least not without\n+modifying headers in the syscoin source code)."
      },
      {
        "sha": "a130262201bae59fef3076e19213af8c31c385fe",
        "filename": "doc/dependencies.md",
        "status": "added",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36252751712234b18847e2c6b80e2f722b03552a/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36252751712234b18847e2c6b80e2f722b03552a/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=36252751712234b18847e2c6b80e2f722b03552a",
        "patch": "@@ -0,0 +1,30 @@\n+Dependencies\n+============\n+\n+These are the dependencies currently used by Syscoin Core. You can find instructions for installing them in the `build-*.md` file for your platform.\n+\n+| Dependency | Version used | Minimum required | CVEs | Shared | [Bundled Qt library](https://doc.qt.io/qt-5/configure-options.html) |\n+| --- | --- | --- | --- | --- | --- |\n+| Berkeley DB | [4.8.30](http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n+| Boost | [1.64.0](http://www.boost.org/users/download/) | [1.47.0](https://github.com/syscoin/syscoin/pull/8920) | No |  |  |\n+| Clang |  | [3.3+](http://llvm.org/releases/download.html) (C++11 support) |  |  |  |\n+| D-Bus | [1.10.18](https://cgit.freedesktop.org/dbus/dbus/tree/NEWS?h=dbus-1.10) |  | No | Yes |  |\n+| Expat | [2.2.5](https://libexpat.github.io/) |  | No | Yes |  |\n+| fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |\n+| FreeType | [2.7.1](http://download.savannah.gnu.org/releases/freetype) |  | No |  |  |\n+| GCC |  | [4.8+](https://gcc.gnu.org/) |  |  |  |\n+| HarfBuzz-NG |  |  |  |  |  |\n+| libevent | [2.1.8-stable](https://github.com/libevent/libevent/releases) | 2.0.22 | No |  |  |\n+| libjpeg |  |  |  |  | [Yes](https://github.com/syscoin/syscoin/blob/master/depends/packages/qt.mk#L75) |\n+| libpng |  |  |  |  | [Yes](https://github.com/syscoin/syscoin/blob/master/depends/packages/qt.mk#L74) |\n+| MiniUPnPc | [2.0.20180203](http://miniupnp.free.fr/files) |  | No |  |  |\n+| OpenSSL | [1.0.1k](https://www.openssl.org/source) |  | Yes |  |  |\n+| PCRE |  |  |  |  | [Yes](https://github.com/syscoin/syscoin/blob/master/depends/packages/qt.mk#L76) |\n+| protobuf | [2.6.3](https://github.com/google/protobuf/releases) |  | No |  |  |\n+| Python (tests) |  | [3.4](https://www.python.org/downloads) |  |  |  |\n+| qrencode | [3.4.4](https://fukuchi.org/works/qrencode) |  | No |  |  |\n+| Qt | [5.7.1](https://download.qt.io/official_releases/qt/) | 4.7+ | No |  |  |\n+| XCB |  |  |  |  | [Yes](https://github.com/syscoin/syscoin/blob/master/depends/packages/qt.mk#L94) (Linux only) |\n+| xkbcommon |  |  |  |  | [Yes](https://github.com/syscoin/syscoin/blob/master/depends/packages/qt.mk#L93) (Linux only) |\n+| ZeroMQ | [4.2.3](https://github.com/zeromq/libzmq/releases) |  | No |  |  |\n+| zlib | [1.2.11](http://zlib.net/) |  |  |  | No |"
      },
      {
        "sha": "aaf2a9959f081b7d541ce5c87e982cc7502ee5e5",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36252751712234b18847e2c6b80e2f722b03552a/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36252751712234b18847e2c6b80e2f722b03552a/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=36252751712234b18847e2c6b80e2f722b03552a",
        "patch": "@@ -6,19 +6,19 @@\n * blocks/rev000??.dat; block undo data (custom); since 0.8.0 (format changed since pre-0.8)\n * blocks/index/*; block index (LevelDB); since 0.8.0\n * chainstate/*; block chain state database (LevelDB); since 0.8.0\n-* database/*: BDB database environment; only used for wallet since 0.8.0\n-* db.log: wallet database log file\n+* database/*: BDB database environment; only used for wallet since 0.8.0; moved to wallets/ directory on new installs since 0.16.0\n+* db.log: wallet database log file; moved to wallets/ directory on new installs since 0.16.0\n * debug.log: contains debug information and general logging generated by syscoind or syscoin-qt\n * fee_estimates.dat: stores statistics used to estimate minimum transaction fees and priorities required for confirmation; since 0.10.0\n-* governance.dat: stores data for governance obgects\n-* masternode.conf: contains configuration settings for remote masternodes\n-* mncache.dat: stores data for masternode list\n-* mnpayments.dat: stores data for masternode payments\n-* netfulfilled.dat: stores data about recently made network requests\n+* mempool.dat: dump of the mempool's transactions; since 0.14.0.\n * peers.dat: peer IP address database (custom format); since 0.7.0\n-* wallet.dat: personal wallet (BDB) with keys and transactions\n+* wallet.dat: personal wallet (BDB) with keys and transactions; moved to wallets/ directory on new installs since 0.16.0\n+* wallets/database/*: BDB database environment; used for wallets since 0.16.0\n+* wallets/db.log: wallet database log file; since 0.16.0\n+* wallets/wallet.dat: personal wallet (BDB) with keys and transactions; since 0.16.0\n * .cookie: session RPC authentication cookie (written at start when cookie authentication is used, deleted on shutdown): since 0.12.0\n * onion_private_key: cached Tor hidden service private key for `-listenonion`: since 0.12.0\n+* guisettings.ini.bak: backup of former GUI settings after `-resetguisettings` is used\n \n Only used in pre-0.8.0\n ---------------------"
      },
      {
        "sha": "729b98b12116a5e17aaa0ad35a570dfc3f865fda",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 229,
        "deletions": 123,
        "changes": 352,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36252751712234b18847e2c6b80e2f722b03552a/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36252751712234b18847e2c6b80e2f722b03552a/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=36252751712234b18847e2c6b80e2f722b03552a",
        "patch": "@@ -1,203 +1,309 @@\n Release Process\n ====================\n \n-* Update translations, see [translation_process.md](https://github.com/syscoin/syscoin/blob/master/doc/translation_process.md#syncing-with-transifex)\n-* Update hardcoded [seeds](/contrib/seeds)\n+Before every release candidate:\n \n-* * *\n+* Update translations (ping wumpus on IRC) see [translation_process.md](https://github.com/syscoin/syscoin/blob/master/doc/translation_process.md#synchronising-translations).\n+\n+* Update manpages, see [gen-manpages.sh](https://github.com/syscoin/syscoin/blob/master/contrib/devtools/README.md#gen-manpagessh).\n+\n+Before every minor and major release:\n+\n+* Update [bips.md](bips.md) to account for changes since the last release.\n+* Update version in `configure.ac` (don't forget to set `CLIENT_VERSION_IS_RELEASE` to `true`)\n+* Write release notes (see below)\n+* Update `src/chainparams.cpp` nMinimumChainWork with information from the getblockchaininfo rpc.\n+* Update `src/chainparams.cpp` defaultAssumeValid with information from the getblockhash rpc.\n+  - The selected value must not be orphaned so it may be useful to set the value two blocks back from the tip.\n+  - Testnet should be set some tens of thousands back from the tip due to reorgs there.\n+  - This update should be reviewed with a reindex-chainstate with assumevalid=0 to catch any defect\n+     that causes rejection of blocks in the past history.\n+\n+Before every major release:\n+\n+* Update hardcoded [seeds](/contrib/seeds/README.md), see [this pull request](https://github.com/syscoin/syscoin/pull/7415) for an example.\n+* Update [`BLOCK_CHAIN_SIZE`](/src/qt/intro.cpp) to the current size plus some overhead.\n+* Update `src/chainparams.cpp` chainTxData with statistics about the transaction count and rate. Use the output of the RPC `getchaintxstats`, see\n+  [this pull request](https://github.com/syscoin/syscoin/pull/12270) for an example. Reviewers can verify the results by running `getchaintxstats <window_block_count> <window_last_block_hash>` with the `window_block_count` and `window_last_block_hash` from your output.\n+* Update version of `contrib/gitian-descriptors/*.yml`: usually one'd want to do this on master after branching off the release - but be sure to at least do it before a new major release\n \n ### First time / New builders\n-Check out the source code in the following directory hierarchy.\n \n-\tcd /path/to/your/toplevel/build\n-\tgit clone https://github.com/syscoin/gitian.sigs.git\n-\tgit clone https://github.com/syscoin/syscoin-detached-sigs.git\n-\tgit clone https://github.com/devrandom/gitian-builder.git\n-\tgit clone https://github.com/syscoin/syscoin.git\n+If you're using the automated script (found in [contrib/gitian-build.sh](/contrib/gitian-build.sh)), then at this point you should run it with the \"--setup\" command. Otherwise ignore this.\n+\n+Check out the source code in the following directory hierarchy.\n \n-### Syscoin Core maintainers/release engineers, update (commit) version in sources\n+    cd /path/to/your/toplevel/build\n+    git clone https://github.com/syscoin-core/gitian.sigs.git\n+    git clone https://github.com/syscoin-core/syscoin-detached-sigs.git\n+    git clone https://github.com/devrandom/gitian-builder.git\n+    git clone https://github.com/syscoin/syscoin.git\n \n-\tpushd ./syscoin\n-\tcontrib/verifysfbinaries/verify.sh\n-\tconfigure.ac\n-\tdoc/README*\n-\tdoc/Doxyfile\n-\tcontrib/gitian-descriptors/*.yml\n-\tsrc/clientversion.h (change CLIENT_VERSION_IS_RELEASE to true)\n+### Syscoin maintainers/release engineers, suggestion for writing release notes\n \n-\t# tag version in git\n+Write release notes. git shortlog helps a lot, for example:\n \n-\tgit tag -s v(new version, e.g. 0.8.0)\n+    git shortlog --no-merges v(current version, e.g. 0.7.2)..v(new version, e.g. 0.8.0)\n \n-\t# write release notes. git shortlog helps a lot, for example:\n+(or ping @wumpus on IRC, he has specific tooling to generate the list of merged pulls\n+and sort them into categories based on labels)\n \n-\tgit shortlog --no-merges v(current version, e.g. 0.7.2)..v(new version, e.g. 0.8.0)\n-\tpopd\n+Generate list of authors:\n \n-* * *\n+    git log --format='%aN' \"$*\" | sort -ui | sed -e 's/^/- /'\n \n-### Setup and perform Gitian builds\n+Tag version (or release candidate) in git\n \n- Setup Gitian descriptors:\n+    git tag -s v(new version, e.g. 0.8.0)\n \n-\tpushd ./syscoin\n-\texport SIGNER=(your Gitian key, ie bluematt, sipa, etc)\n-\texport VERSION=(new version, e.g. 0.8.0)\n-\tgit fetch\n-\tgit checkout v${VERSION}\n-\tpopd\n+### Setup and perform Gitian builds\n \n-  Ensure your gitian.sigs are up-to-date if you wish to gverify your builds against other Gitian signatures.\n+If you're using the automated script (found in [contrib/gitian-build.sh](/contrib/gitian-build.sh)), then at this point you should run it with the \"--build\" command. Otherwise ignore this.\n \n-\tpushd ./gitian.sigs\n-\tgit pull\n-\tpopd\n+Setup Gitian descriptors:\n \n-  Ensure gitian-builder is up-to-date to take advantage of new caching features (`e9741525c` or later is recommended).\n+    pushd ./syscoin\n+    export SIGNER=\"(your Gitian key, ie bluematt, sipa, etc)\"\n+    export VERSION=(new version, e.g. 0.8.0)\n+    git fetch\n+    git checkout v${VERSION}\n+    popd\n \n-\tpushd ./gitian-builder\n-\tgit pull\n+Ensure your gitian.sigs are up-to-date if you wish to gverify your builds against other Gitian signatures.\n \n-### Fetch and create inputs: (first time, or when dependency versions change)\n+    pushd ./gitian.sigs\n+    git pull\n+    popd\n \n-\tmkdir -p inputs\n-\twget -P inputs https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch\n-\twget -P inputs http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz\n+Ensure gitian-builder is up-to-date:\n \n- Register and download the Apple SDK: see [OS X readme](README_osx.txt) for details.\n+    pushd ./gitian-builder\n+    git pull\n+    popd\n \n- https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n+### Fetch and create inputs: (first time, or when dependency versions change)\n \n- Using a Mac, create a tarball for the 10.9 SDK and copy it to the inputs directory:\n+    pushd ./gitian-builder\n+    mkdir -p inputs\n+    wget -P inputs https://syscoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch\n+    wget -P inputs http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz\n+    popd\n \n-\ttar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.9.sdk.tar.gz MacOSX10.9.sdk\n+Create the OS X SDK tarball, see the [OS X readme](README_osx.md) for details, and copy it into the inputs directory.\n \n ### Optional: Seed the Gitian sources cache and offline git repositories\n \n-By default, Gitian will fetch source files as needed. To cache them ahead of time:\n+NOTE: Gitian is sometimes unable to download files. If you have errors, try the step below.\n \n-\tmake -C ../syscoin/depends download SOURCES_PATH=`pwd`/cache/common\n+By default, Gitian will fetch source files as needed. To cache them ahead of time, make sure you have checked out the tag you want to build in syscoin, then:\n+\n+    pushd ./gitian-builder\n+    make -C ../syscoin/depends download SOURCES_PATH=`pwd`/cache/common\n+    popd\n \n Only missing files will be fetched, so this is safe to re-run for each build.\n \n NOTE: Offline builds must use the --url flag to ensure Gitian fetches only from local URLs. For example:\n-```\n-./bin/gbuild --url syscoin=/path/to/syscoin,signature=/path/to/sigs {rest of arguments}\n-```\n+\n+    pushd ./gitian-builder\n+    ./bin/gbuild --url syscoin=/path/to/syscoin,signature=/path/to/sigs {rest of arguments}\n+    popd\n+\n The gbuild invocations below <b>DO NOT DO THIS</b> by default.\n \n ### Build and sign Syscoin Core for Linux, Windows, and OS X:\n \n-\t./bin/gbuild --commit syscoin=v${VERSION} ../syscoin/contrib/gitian-descriptors/gitian-linux.yml\n-\t./bin/gsign --signer $SIGNER --release ${VERSION}-linux --destination ../gitian.sigs/ ../syscoin/contrib/gitian-descriptors/gitian-linux.yml\n-\tmv build/out/syscoin-*.tar.gz build/out/src/syscoin-*.tar.gz ../\n+    pushd ./gitian-builder\n+    ./bin/gbuild --num-make 2 --memory 3000 --commit syscoin=v${VERSION} ../syscoin/contrib/gitian-descriptors/gitian-linux.yml\n+    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-linux --destination ../gitian.sigs/ ../syscoin/contrib/gitian-descriptors/gitian-linux.yml\n+    mv build/out/syscoin-*.tar.gz build/out/src/syscoin-*.tar.gz ../\n \n-\t./bin/gbuild --commit syscoin=v${VERSION} ../syscoin/contrib/gitian-descriptors/gitian-win.yml\n-\t./bin/gsign --signer $SIGNER --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../syscoin/contrib/gitian-descriptors/gitian-win.yml\n-\tmv build/out/syscoin-*-win-unsigned.tar.gz inputs/syscoin-win-unsigned.tar.gz\n-\tmv build/out/syscoin-*.zip build/out/syscoin-*.exe ../\n+    ./bin/gbuild --num-make 2 --memory 3000 --commit syscoin=v${VERSION} ../syscoin/contrib/gitian-descriptors/gitian-win.yml\n+    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../syscoin/contrib/gitian-descriptors/gitian-win.yml\n+    mv build/out/syscoin-*-win-unsigned.tar.gz inputs/syscoin-win-unsigned.tar.gz\n+    mv build/out/syscoin-*.zip build/out/syscoin-*.exe ../\n \n-\t./bin/gbuild --commit syscoin=v${VERSION} ../syscoin/contrib/gitian-descriptors/gitian-osx.yml\n-\t./bin/gsign --signer $SIGNER --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../syscoin/contrib/gitian-descriptors/gitian-osx.yml\n-\tmv build/out/syscoin-*-osx-unsigned.tar.gz inputs/syscoin-osx-unsigned.tar.gz\n-\tmv build/out/syscoin-*.tar.gz build/out/syscoin-*.dmg ../\n-\tpopd\n+    ./bin/gbuild --num-make 2 --memory 3000 --commit syscoin=v${VERSION} ../syscoin/contrib/gitian-descriptors/gitian-osx.yml\n+    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../syscoin/contrib/gitian-descriptors/gitian-osx.yml\n+    mv build/out/syscoin-*-osx-unsigned.tar.gz inputs/syscoin-osx-unsigned.tar.gz\n+    mv build/out/syscoin-*.tar.gz build/out/syscoin-*.dmg ../\n+    popd\n \n-  Build output expected:\n+Build output expected:\n \n-  1. source tarball (syscoin-${VERSION}.tar.gz)\n-  2. linux 32-bit and 64-bit dist tarballs (syscoin-${VERSION}-linux[32|64].tar.gz)\n-  3. windows 32-bit and 64-bit unsigned installers and dist zips (syscoin-${VERSION}-win[32|64]-setup-unsigned.exe, syscoin-${VERSION}-win[32|64].zip)\n-  4. OS X unsigned installer and dist tarball (syscoin-${VERSION}-osx-unsigned.dmg, syscoin-${VERSION}-osx64.tar.gz)\n-  5. Gitian signatures (in gitian.sigs/${VERSION}-<linux|{win,osx}-unsigned>/(your Gitian key)/\n+  1. source tarball (`syscoin-${VERSION}.tar.gz`)\n+  2. linux 32-bit and 64-bit dist tarballs (`syscoin-${VERSION}-linux[32|64].tar.gz`)\n+  3. windows 32-bit and 64-bit unsigned installers and dist zips (`syscoin-${VERSION}-win[32|64]-setup-unsigned.exe`, `syscoin-${VERSION}-win[32|64].zip`)\n+  4. OS X unsigned installer and dist tarball (`syscoin-${VERSION}-osx-unsigned.dmg`, `syscoin-${VERSION}-osx64.tar.gz`)\n+  5. Gitian signatures (in `gitian.sigs/${VERSION}-<linux|{win,osx}-unsigned>/(your Gitian key)/`)\n \n ### Verify other gitian builders signatures to your own. (Optional)\n \n-  Add other gitian builders keys to your gpg keyring\n-\n-\tgpg --import ../syscoin/contrib/gitian-downloader/*.pgp\n+Add other gitian builders keys to your gpg keyring, and/or refresh keys: See `../syscoin/contrib/gitian-keys/README.md`.\n \n-  Verify the signatures\n+Verify the signatures\n \n-\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-linux ../syscoin/contrib/gitian-descriptors/gitian-linux.yml\n-\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-unsigned ../syscoin/contrib/gitian-descriptors/gitian-win.yml\n-\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-unsigned ../syscoin/contrib/gitian-descriptors/gitian-osx.yml\n-\n-\tpopd\n+    pushd ./gitian-builder\n+    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-linux ../syscoin/contrib/gitian-descriptors/gitian-linux.yml\n+    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-unsigned ../syscoin/contrib/gitian-descriptors/gitian-win.yml\n+    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-unsigned ../syscoin/contrib/gitian-descriptors/gitian-osx.yml\n+    popd\n \n ### Next steps:\n \n Commit your signature to gitian.sigs:\n \n-\tpushd gitian.sigs\n-\tgit add ${VERSION}-linux/${SIGNER}\n-\tgit add ${VERSION}-win-unsigned/${SIGNER}\n-\tgit add ${VERSION}-osx-unsigned/${SIGNER}\n-\tgit commit -a\n-\tgit push  # Assuming you can push to the gitian.sigs tree\n-\tpopd\n-\n-  Wait for Windows/OS X detached signatures:\n-\tOnce the Windows/OS X builds each have 3 matching signatures, they will be signed with their respective release keys.\n-\tDetached signatures will then be committed to the [syscoin-detached-sigs](https://github.com/syscoin/syscoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n-\n-  Create (and optionally verify) the signed OS X binary:\n-\n-\tpushd ./gitian-builder\n-\t./bin/gbuild -i --commit signature=v${VERSION} ../syscoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-\t./bin/gsign --signer $SIGNER --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../syscoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../syscoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-\tmv build/out/syscoin-osx-signed.dmg ../syscoin-${VERSION}-osx.dmg\n-\tpopd\n-\n-  Create (and optionally verify) the signed Windows binaries:\n-\n-\tpushd ./gitian-builder\n-\t./bin/gbuild -i --commit signature=v${VERSION} ../syscoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-\t./bin/gsign --signer $SIGNER --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../syscoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../syscoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-\tmv build/out/syscoin-*win64-setup.exe ../syscoin-${VERSION}-win64-setup.exe\n-\tmv build/out/syscoin-*win32-setup.exe ../syscoin-${VERSION}-win32-setup.exe\n-\tpopd\n+    pushd gitian.sigs\n+    git add ${VERSION}-linux/\"${SIGNER}\"\n+    git add ${VERSION}-win-unsigned/\"${SIGNER}\"\n+    git add ${VERSION}-osx-unsigned/\"${SIGNER}\"\n+    git commit -a\n+    git push  # Assuming you can push to the gitian.sigs tree\n+    popd\n+\n+Codesigner only: Create Windows/OS X detached signatures:\n+- Only one person handles codesigning. Everyone else should skip to the next step.\n+- Only once the Windows/OS X builds each have 3 matching signatures may they be signed with their respective release keys.\n+\n+Codesigner only: Sign the osx binary:\n+\n+    transfer syscoin-osx-unsigned.tar.gz to osx for signing\n+    tar xf syscoin-osx-unsigned.tar.gz\n+    ./detached-sig-create.sh -s \"Key ID\"\n+    Enter the keychain password and authorize the signature\n+    Move signature-osx.tar.gz back to the gitian host\n+\n+Codesigner only: Sign the windows binaries:\n+\n+    tar xf syscoin-win-unsigned.tar.gz\n+    ./detached-sig-create.sh -key /path/to/codesign.key\n+    Enter the passphrase for the key when prompted\n+    signature-win.tar.gz will be created\n+\n+Codesigner only: Commit the detached codesign payloads:\n+\n+    cd ~/syscoin-detached-sigs\n+    checkout the appropriate branch for this release series\n+    rm -rf *\n+    tar xf signature-osx.tar.gz\n+    tar xf signature-win.tar.gz\n+    git add -a\n+    git commit -m \"point to ${VERSION}\"\n+    git tag -s v${VERSION} HEAD\n+    git push the current branch and new tag\n+\n+Non-codesigners: wait for Windows/OS X detached signatures:\n+\n+- Once the Windows/OS X builds each have 3 matching signatures, they will be signed with their respective release keys.\n+- Detached signatures will then be committed to the [syscoin-detached-sigs](https://github.com/syscoin-core/syscoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n+\n+Create (and optionally verify) the signed OS X binary:\n+\n+    pushd ./gitian-builder\n+    ./bin/gbuild -i --commit signature=v${VERSION} ../syscoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../syscoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../syscoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+    mv build/out/syscoin-osx-signed.dmg ../syscoin-${VERSION}-osx.dmg\n+    popd\n+\n+Create (and optionally verify) the signed Windows binaries:\n+\n+    pushd ./gitian-builder\n+    ./bin/gbuild -i --commit signature=v${VERSION} ../syscoin/contrib/gitian-descriptors/gitian-win-signer.yml\n+    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../syscoin/contrib/gitian-descriptors/gitian-win-signer.yml\n+    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../syscoin/contrib/gitian-descriptors/gitian-win-signer.yml\n+    mv build/out/syscoin-*win64-setup.exe ../syscoin-${VERSION}-win64-setup.exe\n+    mv build/out/syscoin-*win32-setup.exe ../syscoin-${VERSION}-win32-setup.exe\n+    popd\n \n Commit your signature for the signed OS X/Windows binaries:\n \n-\tpushd gitian.sigs\n-\tgit add ${VERSION}-osx-signed/${SIGNER}\n-\tgit add ${VERSION}-win-signed/${SIGNER}\n-\tgit commit -a\n-\tgit push  # Assuming you can push to the gitian.sigs tree\n-\tpopd\n-\n--------------------------------------------------------------------------\n+    pushd gitian.sigs\n+    git add ${VERSION}-osx-signed/\"${SIGNER}\"\n+    git add ${VERSION}-win-signed/\"${SIGNER}\"\n+    git commit -a\n+    git push  # Assuming you can push to the gitian.sigs tree\n+    popd\n \n ### After 3 or more people have gitian-built and their results match:\n \n - Create `SHA256SUMS.asc` for the builds, and GPG-sign it:\n+\n ```bash\n sha256sum * > SHA256SUMS\n+```\n+\n+The list of files should be:\n+```\n+syscoin-${VERSION}-aarch64-linux-gnu.tar.gz\n+syscoin-${VERSION}-arm-linux-gnueabihf.tar.gz\n+syscoin-${VERSION}-i686-pc-linux-gnu.tar.gz\n+syscoin-${VERSION}-x86_64-linux-gnu.tar.gz\n+syscoin-${VERSION}-osx64.tar.gz\n+syscoin-${VERSION}-osx.dmg\n+syscoin-${VERSION}.tar.gz\n+syscoin-${VERSION}-win32-setup.exe\n+syscoin-${VERSION}-win32.zip\n+syscoin-${VERSION}-win64-setup.exe\n+syscoin-${VERSION}-win64.zip\n+```\n+The `*-debug*` files generated by the gitian build contain debug symbols\n+for troubleshooting by developers. It is assumed that anyone that is interested\n+in debugging can run gitian to generate the files for themselves. To avoid\n+end-user confusion about which file to pick, as well as save storage\n+space *do not upload these to the syscoin.org server, nor put them in the torrent*.\n+\n+- GPG-sign it, delete the unsigned file:\n+```\n gpg --digest-algo sha256 --clearsign SHA256SUMS # outputs SHA256SUMS.asc\n rm SHA256SUMS\n ```\n (the digest algorithm is forced to sha256 to avoid confusion of the `Hash:` header that GPG adds with the SHA256 used for the files)\n Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spurious/nonsensical entry.\n \n - Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the syscoin.org server\n+  into `/var/www/bin/syscoin-core-${VERSION}`\n \n-- Update syscoin.org\n+- A `.torrent` will appear in the directory after a few minutes. Optionally help seed this torrent. To get the `magnet:` URI use:\n+```bash\n+transmission-show -m <torrent file>\n+```\n+Insert the magnet URI into the announcement sent to mailing lists. This permits\n+people without access to `syscoin.org` to download the binary distribution.\n+Also put it into the `optional_magnetlink:` slot in the YAML file for\n+syscoin.org (see below for syscoin.org update instructions).\n+\n+- Update syscoin.org version\n+\n+  - First, check to see if the Syscoin.org maintainers have prepared a\n+    release: https://github.com/syscoin-dot-org/syscoin.org/labels/Releases\n+\n+      - If they have, it will have previously failed their Travis CI\n+        checks because the final release files weren't uploaded.\n+        Trigger a Travis CI rebuild---if it passes, merge.\n+\n+  - If they have not prepared a release, follow the Syscoin.org release\n+    instructions: https://github.com/syscoin-dot-org/syscoin.org#release-notes\n+\n+  - After the pull request is merged, the website will automatically show the newest version within 15 minutes, as well\n+    as update the OS download links. Ping @saivann/@harding (saivann/harding on Freenode) in case anything goes wrong\n \n - Announce the release:\n \n-  - Release on Syscoin forum: https://www.syscoin.org/forum/topic/official-announcements.54/\n+  - syscoin-dev and syscoin-core-dev mailing list\n \n-  - Syscoin-development mailing list\n+  - Syscoin Core announcements list https://syscoincore.org/en/list/announcements/join/\n+\n+  - syscoincore.org blog post\n \n   - Update title of #syscoin on Freenode IRC\n \n-  - Optionally reddit /r/Syscoin, ... but this will usually sort out itself\n+  - Optionally twitter, reddit /r/Syscoin, ... but this will usually sort out itself\n+\n+  - Notify BlueMatt so that he can start building [the PPAs](https://launchpad.net/~syscoin/+archive/ubuntu/syscoin)\n \n-- Notify flare so that he can start building [the PPAs](https://launchpad.net/~syscoin.org/+archive/ubuntu/syscoin)\n+  - Archive release notes for the new version to `doc/release-notes/` (branch `master` and branch of the release)\n \n-- Add release notes for the new version to the directory `doc/release-notes` in git master\n+  - Create a [new GitHub release](https://github.com/syscoin/syscoin/releases/new) with a link to the archived release notes.\n \n-- Celebrate\n+  - Celebrate"
      },
      {
        "sha": "c5946d2532ee0a18ae8e0deb1f54c5619b4e0090",
        "filename": "doc/shared-libraries.md",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36252751712234b18847e2c6b80e2f722b03552a/doc/shared-libraries.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36252751712234b18847e2c6b80e2f722b03552a/doc/shared-libraries.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/shared-libraries.md?ref=36252751712234b18847e2c6b80e2f722b03552a",
        "patch": "@@ -11,7 +11,7 @@ The interface is defined in the C header `syscoinconsensus.h` located in  `src/s\n \n #### Version\n \n-`syscoinconsensus_version` returns an `unsigned int` with the the API version *(currently at an experimental `0`)*.\n+`syscoinconsensus_version` returns an `unsigned int` with the API version *(currently at an experimental `0`)*.\n \n #### Script Validation\n \n@@ -30,12 +30,17 @@ The interface is defined in the C header `syscoinconsensus.h` located in  `src/s\n - `syscoinconsensus_SCRIPT_FLAGS_VERIFY_NONE`\n - `syscoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH` - Evaluate P2SH ([BIP16](https://github.com/syscoin/bips/blob/master/bip-0016.mediawiki)) subscripts\n - `syscoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG` - Enforce strict DER ([BIP66](https://github.com/syscoin/bips/blob/master/bip-0066.mediawiki)) compliance\n+- `syscoinconsensus_SCRIPT_FLAGS_VERIFY_NULLDUMMY` - Enforce NULLDUMMY ([BIP147](https://github.com/syscoin/bips/blob/master/bip-0147.mediawiki))\n+- `syscoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY` - Enable CHECKLOCKTIMEVERIFY ([BIP65](https://github.com/syscoin/bips/blob/master/bip-0065.mediawiki))\n+- `syscoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY` - Enable CHECKSEQUENCEVERIFY ([BIP112](https://github.com/syscoin/bips/blob/master/bip-0112.mediawiki))\n+- `syscoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS` - Enable WITNESS ([BIP141](https://github.com/syscoin/bips/blob/master/bip-0141.mediawiki))\n \n ##### Errors\n - `syscoinconsensus_ERR_OK` - No errors with input parameters *(see the return value of `syscoinconsensus_verify_script` for the verification status)*\n - `syscoinconsensus_ERR_TX_INDEX` - An invalid index for `txTo`\n - `syscoinconsensus_ERR_TX_SIZE_MISMATCH` - `txToLen` did not match with the size of `txTo`\n - `syscoinconsensus_ERR_DESERIALIZE` - An error deserializing `txTo`\n+- `syscoinconsensus_ERR_AMOUNT_REQUIRED` - Input amount is required if WITNESS is used\n \n ### Example Implementations\n - [NSyscoin](https://github.com/NicolasDorier/NSyscoin/blob/master/NSyscoin/Script.cs#L814) (.NET Bindings)"
      },
      {
        "sha": "889069323819376f3cf3f66f2596d50b2589dacb",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 48,
        "deletions": 56,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36252751712234b18847e2c6b80e2f722b03552a/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36252751712234b18847e2c6b80e2f722b03552a/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=36252751712234b18847e2c6b80e2f722b03552a",
        "patch": "@@ -1,19 +1,16 @@\n-TOR SUPPORT IN SYS CORE\n-=======================\n+TOR SUPPORT IN SYSCOIN\n+======================\n \n-It is possible to run Syscoin Core as a Tor hidden service, and connect to such services.\n+It is possible to run Syscoin as a Tor hidden service, and connect to such services.\n \n-The following directions assume you have a Tor proxy running on port 9050. Many\n-distributions default to having a SOCKS proxy listening on port 9050, but others\n-may not. In particular, the Tor Browser Bundle defaults to listening on a random\n-port. See [Tor Project FAQ:TBBSocksPort](https://www.torproject.org/docs/faq.html.en#TBBSocksPort)\n-for how to properly configure Tor.\n+The following directions assume you have a Tor proxy running on port 9050. Many distributions default to having a SOCKS proxy listening on port 9050, but others may not. In particular, the Tor Browser Bundle defaults to listening on port 9150. See [Tor Project FAQ:TBBSocksPort](https://www.torproject.org/docs/faq.html.en#TBBSocksPort) for how to properly\n+configure Tor.\n \n \n-1. Run Syscoin Core behind a Tor proxy\n-----------------------------------\n+1. Run syscoin behind a Tor proxy\n+---------------------------------\n \n-The first step is running Syscoin Core behind a Tor proxy. This will already make all\n+The first step is running Syscoin behind a Tor proxy. This will already make all\n outgoing connections be anonymized, but more is possible.\n \n \t-proxy=ip:port  Set the proxy server. If SOCKS5 is selected (default), this proxy\n@@ -32,36 +29,29 @@ outgoing connections be anonymized, but more is possible.\n \t-seednode=X     SOCKS5. In Tor mode, such addresses can also be exchanged with\n \t                other P2P nodes.\n \n-\t-onlynet=tor    Only connect to .onion nodes and drop IPv4/6 connections.\n-\n-An example how to start the client if the Tor proxy is running on local host on\n-port 9050 and only allows .onion nodes to connect:\n-\n-\t./syscoind -onion=127.0.0.1:9050 -onlynet=tor -listen=0 -addnode=ssapp53tmftyjmjb.onion\n-\n In a typical situation, this suffices to run behind a Tor proxy:\n \n \t./syscoind -proxy=127.0.0.1:9050\n \n \n-2. Run a Syscoin Core hidden server\n--------------------------------\n+2. Run a syscoin hidden server\n+------------------------------\n \n If you configure your Tor system accordingly, it is possible to make your node also\n reachable from the Tor network. Add these lines to your /etc/tor/torrc (or equivalent\n config file):\n \n-\tHiddenServiceDir /var/lib/tor/syscoincore-service/\n-\tHiddenServicePort 9999 127.0.0.1:9999\n-\tHiddenServicePort 19999 127.0.0.1:19999\n+\tHiddenServiceDir /var/lib/tor/syscoin-service/\n+\tHiddenServicePort 8333 127.0.0.1:8333\n+\tHiddenServicePort 18333 127.0.0.1:18333\n \n The directory can be different of course, but (both) port numbers should be equal to\n-your syscoind's P2P listen port (9999 by default).\n+your syscoind's P2P listen port (8333 by default).\n \n-\t-externalip=X   You can tell Syscoin Core about its publicly reachable address using\n+\t-externalip=X   You can tell syscoin about its publicly reachable address using\n \t                this option, and this can be a .onion address. Given the above\n \t                configuration, you can find your onion address in\n-\t                /var/lib/tor/syscoincore-service/hostname. Onion addresses are given\n+\t                /var/lib/tor/syscoin-service/hostname. Onion addresses are given\n \t                preference for your node to advertise itself with, for connections\n \t                coming from unroutable addresses (such as 127.0.0.1, where the\n \t                Tor proxy typically runs).\n@@ -78,7 +68,7 @@ your syscoind's P2P listen port (9999 by default).\n \n In a typical situation, where you're only reachable via Tor, this should suffice:\n \n-\t./syscoind -proxy=127.0.0.1:9050 -externalip=ssapp53tmftyjmjb.onion -listen\n+\t./syscoind -proxy=127.0.0.1:9050 -externalip=57qr3yd1nyntf5k.onion -listen\n \n (obviously, replace the Onion address with your own). It should be noted that you still\n listen on all devices and another node could establish a clearnet connection, when knowing\n@@ -91,43 +81,45 @@ as well, use `discover` instead:\n \n \t./syscoind ... -discover\n \n-and open port 9999 on your firewall (or use -upnp).\n+and open port 8333 on your firewall (or use -upnp).\n \n If you only want to use Tor to reach onion addresses, but not use it as a proxy\n for normal IPv4/IPv6 communication, use:\n \n-\t./syscoind -onion=127.0.0.1:9050 -externalip=ssapp53tmftyjmjb.onion -discover\n-\n+\t./syscoind -onion=127.0.0.1:9050 -externalip=57qr3yd1nyntf5k.onion -discover\n \n-3. List of known Syscoin Core Tor relays\n-------------------------------------\n-\n-* [darkcoinie7ghp67.onion](http://darkcoinie7ghp67.onion/)\n-* [drktalkwaybgxnoq.onion](http://drktalkwaybgxnoq.onion/)\n-* [drkcoinooditvool.onion](http://drkcoinooditvool.onion/)\n-* [darkcoxbtzggpmcc.onion](http://darkcoxbtzggpmcc.onion/)\n-* [ssapp53tmftyjmjb.onion](http://ssapp53tmftyjmjb.onion/)\n-* [j2dfl3cwxyxpbc7s.onion](http://j2dfl3cwxyxpbc7s.onion/)\n-* [vf6d2mxpuhh2cbxt.onion](http://vf6d2mxpuhh2cbxt.onion/)\n-* [rj24sicr6i4vsnkv.onion](http://rj24sicr6i4vsnkv.onion/)\n-* [wrwx2dy7jyh32o53.onion](http://wrwx2dy7jyh32o53.onion/)\n-* [f5ekot4ajkbe23gt.onion](http://f5ekot4ajkbe23gt.onion/)\n-* [dshtord4mqvgzqev.onion](http://dshtord4mqvgzqev.onion/)\n-\n-\n-4. Automatically listen on Tor\n+3. Automatically listen on Tor\n --------------------------------\n \n Starting with Tor version 0.2.7.1 it is possible, through Tor's control socket\n API, to create and destroy 'ephemeral' hidden services programmatically.\n Syscoin Core has been updated to make use of this.\n \n-This means that if Tor is running (and proper authorization is available),\n-Syscoin Core automatically creates a hidden service to listen on, without\n-manual configuration. This will positively affect the number of available\n-.onion nodes.\n-\n-This new feature is enabled by default if Syscoin Core is listening, and\n-a connection to Tor can be made. It can be configured with the `-listenonion`,\n-`-torcontrol` and `-torpassword` settings. To show verbose debugging\n-information, pass `-debug=tor`.\n+This means that if Tor is running (and proper authentication has been configured),\n+Syscoin Core automatically creates a hidden service to listen on. This will positively \n+affect the number of available .onion nodes.\n+\n+This new feature is enabled by default if Syscoin Core is listening (`-listen`), and\n+requires a Tor connection to work. It can be explicitly disabled with `-listenonion=0`\n+and, if not disabled, configured using the `-torcontrol` and `-torpassword` settings.\n+To show verbose debugging information, pass `-debug=tor`.\n+\n+Connecting to Tor's control socket API requires one of two authentication methods to be \n+configured. For cookie authentication the user running syscoind must have write access \n+to the `CookieAuthFile` specified in Tor configuration. In some cases this is \n+preconfigured and the creation of a hidden service is automatic. If permission problems \n+are seen with `-debug=tor` they can be resolved by adding both the user running tor and \n+the user running syscoind to the same group and setting permissions appropriately. On \n+Debian-based systems the user running syscoind can be added to the debian-tor group, \n+which has the appropriate permissions. An alternative authentication method is the use \n+of the `-torpassword` flag and a `hash-password` which can be enabled and specified in \n+Tor configuration.\n+\n+4. Privacy recommendations\n+---------------------------\n+\n+- Do not add anything but syscoin ports to the hidden service created in section 2.\n+  If you run a web service too, create a new hidden service for that.\n+  Otherwise it is trivial to link them, which may reduce privacy. Hidden\n+  services created automatically (as in section 3) always have only one port\n+  open."
      },
      {
        "sha": "208addfa1c6c33cc4251054be2b88f4b5d602bf9",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36252751712234b18847e2c6b80e2f722b03552a/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36252751712234b18847e2c6b80e2f722b03552a/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=36252751712234b18847e2c6b80e2f722b03552a",
        "patch": "@@ -1,12 +1,12 @@\n Translations\n ============\n \n-The Syscoin Core project has been designed to support multiple localisations. This makes adding new phrases, and completely new languages easily achievable. For managing all application translations, Syscoin Core makes use of the Transifex online translation management tool.\n+The Syscoin-Core project has been designed to support multiple localisations. This makes adding new phrases, and completely new languages easily achievable. For managing all application translations, Syscoin-Core makes use of the Transifex online translation management tool.\n \n ### Helping to translate (using Transifex)\n-Transifex is setup to monitor the Github repo for updates, and when code containing new translations is found, Transifex will process any changes. It may take several hours after a pull-request has been merged, to appear in the Transifex web interface.\n+Transifex is setup to monitor the GitHub repo for updates, and when code containing new translations is found, Transifex will process any changes. It may take several hours after a pull-request has been merged, to appear in the Transifex web interface.\n \n-Multiple language support is critical in assisting Syscoin\u2019s global adoption, and growth. One of Syscoin\u2019s greatest strengths is cross-boarder money transfers, any help making that easier is greatly appreciated.\n+Multiple language support is critical in assisting Syscoin\u2019s global adoption, and growth. One of Syscoin\u2019s greatest strengths is cross-border money transfers, any help making that easier is greatly appreciated.\n \n See the [Transifex Syscoin project](https://www.transifex.com/projects/p/syscoin/) to assist in translations. You should also join the translation mailing list for announcements - see details below.\n \n@@ -32,15 +32,14 @@ QToolBar *toolbar = addToolBar(tr(\"Tabs toolbar\"));\n ### Creating a pull-request\n For general PRs, you shouldn\u2019t include any updates to the translation source files. They will be updated periodically, primarily around pre-releases, allowing time for any new phrases to be translated before public releases. This is also important in avoiding translation related merge conflicts.\n \n-When an updated source file is merged into the Github repo, Transifex will automatically detect it (although it can take several hours). Once processed, the new strings will show up as \"Remaining\" in the Transifex web interface and are ready for translators.\n+When an updated source file is merged into the GitHub repo, Transifex will automatically detect it (although it can take several hours). Once processed, the new strings will show up as \"Remaining\" in the Transifex web interface and are ready for translators.\n \n To create the pull-request, use the following commands:\n ```\n git add src/qt/syscoinstrings.cpp src/qt/locale/syscoin_en.ts\n git commit\n ```\n \n-\n ### Creating a Transifex account\n Visit the [Transifex Signup](https://www.transifex.com/signup/) page to create an account. Take note of your username and password, as they will be required to configure the command-line tool.\n \n@@ -53,7 +52,7 @@ The client it used to fetch updated translations. If you are having problems, or\n \n `pip install transifex-client`\n \n-Setup your transifex client config as follows. Please *ignore the token field*.\n+Setup your Transifex client config as follows. Please *ignore the token field*.\n \n ```ini\n nano ~/.transifexrc\n@@ -95,7 +94,7 @@ When new plurals are added to the source file, it's important to do the followin\n 7. Save the source file\n \n ### Translating a new language\n-To create a new language template, you will need to edit the languages manifest file `src/qt/syscoin.qrc` and add a new entry. Below is an example of the english language entry.\n+To create a new language template, you will need to edit the languages manifest file `src/qt/syscoin_locale.qrc` and add a new entry. Below is an example of the English language entry.\n \n ```xml\n <qresource prefix=\"/translations\">\n@@ -107,4 +106,6 @@ To create a new language template, you will need to edit the languages manifest\n **Note:** that the language translation file **must end in `.qm`** (the compiled extension), and not `.ts`.\n \n ### Questions and general assistance\n-Check official forum at [https://syscointalk.org/forums/syscoin-worldwide-collaboration.88/](https://syscointalk.org/forums/syscoin-worldwide-collaboration.88/).\n+The Syscoin-Core translation maintainers include *tcatm, seone, Diapolo, wumpus and luke-jr*. You can find them, and others, in the Freenode IRC chatroom - `irc.freenode.net #syscoin-core-dev`.\n+\n+If you are a translator, you should also subscribe to the mailing list, https://groups.google.com/forum/#!forum/syscoin-translators. Announcements will be posted during application pre-releases to notify translators to check for updates."
      },
      {
        "sha": "1f268aa86a5eadf26d634a049dc1214d8b01ae8f",
        "filename": "doc/travis-ci.md",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36252751712234b18847e2c6b80e2f722b03552a/doc/travis-ci.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36252751712234b18847e2c6b80e2f722b03552a/doc/travis-ci.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/travis-ci.md?ref=36252751712234b18847e2c6b80e2f722b03552a",
        "patch": "@@ -0,0 +1,42 @@\n+Travis CI\n+=========\n+\n+Support for using travis-ci has been added in order to automate pull-testing.\n+See [travis-ci.org](https://travis-ci.org/) for more info\n+\n+This procedure is different than the pull-tester that came before it in a few\n+ways.\n+\n+There is nothing to administer. This is a major feature as it means\n+that builds have no local state. Because there is no ability to login to the\n+builders to install packages (tools, dependencies, etc), the entire build\n+procedure must instead be controlled by a declarative script `.travis.yml`.\n+This script declares each build configuration, creates virtual machines as\n+necessary, builds, then discards the virtual machines.\n+\n+A build matrix is constructed to test a wide range of configurations, rather\n+than a single pass/fail. This helps to catch build failures and logic errors\n+that present on platforms other than the ones the author has tested. This\n+matrix is defined in the build script and can be changed at any time.\n+\n+All builders use the dependency-generator in the [depends dir](/depends), rather than\n+using apt-get to install build dependencies. This guarantees that the tester\n+is using the same versions as Gitian, so the build results are nearly identical\n+to what would be found in a final release. However, this also means that builds\n+will fail if new dependencies are introduced without being added to the\n+dependency generator.\n+\n+In order to avoid rebuilding all dependencies for each build, the binaries are\n+cached and re-used when possible. Changes in the dependency-generator will\n+trigger cache-invalidation and rebuilds as necessary.\n+\n+These caches can be manually removed if necessary. This is one of the very few\n+manual operations that is possible with Travis, and it can be done by the\n+Syscoin Core committer via the Travis web interface.\n+\n+In some cases, secure strings may be needed for hiding sensitive info such as\n+private keys or URLs. The travis client may be used to create these strings:\n+http://docs.travis-ci.com/user/encryption-keys/\n+\n+For the details of the build descriptor, see the official docs:\n+http://docs.travis-ci.com/user/build-configuration/"
      },
      {
        "sha": "9112ff9908ccbf7c6803bda1faee693204e5b5a1",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36252751712234b18847e2c6b80e2f722b03552a/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36252751712234b18847e2c6b80e2f722b03552a/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=36252751712234b18847e2c6b80e2f722b03552a",
        "patch": "@@ -1,4 +1,4 @@\n-# Block and Transaction Broadcasting With ZeroMQ\n+# Block and Transaction Broadcasting with ZeroMQ\n \n [ZeroMQ](http://zeromq.org/) is a lightweight wrapper around TCP\n connections, inter-process communication, and shared-memory,\n@@ -38,7 +38,7 @@ newer. Typically, it is packaged by distributions as something like\n *libzmq3-dev*. The C++ wrapper for ZeroMQ is *not* needed.\n \n In order to run the example Python client scripts in contrib/ one must\n-also install *python-zmq*, though this is not necessary for daemon\n+also install *python3-zmq*, though this is not necessary for daemon\n operation.\n \n ## Enabling\n@@ -50,31 +50,29 @@ during the *configure* step of building syscoind:\n     $ ./configure --disable-zmq (other options)\n \n To actually enable operation, one must set the appropriate options on\n-the commandline or in the configuration file.\n+the command line or in the configuration file.\n \n ## Usage\n \n Currently, the following notifications are supported:\n \n     -zmqpubhashtx=address\n-    -zmqpubhashtxlock=address\n     -zmqpubhashblock=address\n     -zmqpubrawblock=address\n     -zmqpubrawtx=address\n-    -zmqpubrawtxlock=address\n \n The socket type is PUB and the address must be a valid ZeroMQ socket\n address. The same address can be used in more than one notification.\n \n For instance:\n \n-    $ syscoind -zmqpubhashtx=tcp://127.0.0.1:28370 \\\n+    $ syscoind -zmqpubhashtx=tcp://127.0.0.1:28332 \\\n                -zmqpubrawtx=ipc:///tmp/syscoind.tx.raw\n \n Each PUB notification has a topic and body, where the header\n corresponds to the notification type. For instance, for the\n notification `-zmqpubhashtx` the topic is `hashtx` (no null\n-terminator) and the body is the hexadecimal transaction hash (32\n+terminator) and the body is the transaction hash (32\n bytes).\n \n These options can also be provided in syscoin.conf.\n@@ -103,6 +101,6 @@ and just the tip will be notified. It is up to the subscriber to\n retrieve the chain from the last known block to the new tip.\n \n There are several possibilities that ZMQ notification can get lost\n-during transmission depending on the communication type your are\n+during transmission depending on the communication type you are\n using. Syscoind appends an up-counting sequence number to each\n notification which allows listeners to detect lost notifications."
      }
    ]
  },
  {
    "sha": "91875100c7d708c65f78c6e1f48b443ec2a3d953",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTg3NTEwMGM3ZDcwOGM2NWY3OGM2ZTFmNDhiNDQzZWMyYTNkOTUz",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-20T22:54:43Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-20T22:54:43Z"
      },
      "message": "update doc",
      "tree": {
        "sha": "bcb83b78d1631b57b57dce95c672fe64ecf44077",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bcb83b78d1631b57b57dce95c672fe64ecf44077"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91875100c7d708c65f78c6e1f48b443ec2a3d953",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91875100c7d708c65f78c6e1f48b443ec2a3d953",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91875100c7d708c65f78c6e1f48b443ec2a3d953",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91875100c7d708c65f78c6e1f48b443ec2a3d953/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36252751712234b18847e2c6b80e2f722b03552a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36252751712234b18847e2c6b80e2f722b03552a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36252751712234b18847e2c6b80e2f722b03552a"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 22,
      "deletions": 15
    },
    "files": [
      {
        "sha": "ac2d8e9b22a920223ed2c1061842e7ad9c306a0a",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 22,
        "deletions": 15,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91875100c7d708c65f78c6e1f48b443ec2a3d953/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91875100c7d708c65f78c6e1f48b443ec2a3d953/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=91875100c7d708c65f78c6e1f48b443ec2a3d953",
        "patch": "@@ -3,6 +3,9 @@ Unauthenticated REST Interface\n \n The REST API can be enabled with the `-rest` option.\n \n+The interface runs on the same port as the JSON-RPC interface, by default port 8332 for mainnet, port 18332 for testnet,\n+and port 18443 for regtest.\n+\n Supported API\n -------------\n \n@@ -38,11 +41,13 @@ Only supports JSON as output format.\n * headers : (numeric) the current number of headers we have validated\n * bestblockhash : (string) the hash of the currently best block\n * difficulty : (numeric) the current difficulty\n+* mediantime : (numeric) the median time of the 11 blocks before the most recent block on the blockchain\n * verificationprogress : (numeric) estimate of verification progress [0..1]\n * chainwork : (string) total amount of work in active chain, in hexadecimal\n * pruned : (boolean) if the blocks are subject to pruning\n-* pruneheight : (numeric) heighest block available\n+* pruneheight : (numeric) highest block available\n * softforks : (array) status of softforks in progress\n+* bip9_softforks : (object) status of BIP9 softforks in progress\n \n #### Query UTXO set\n `GET /rest/getutxos/<checkmempool>/<txid>-<n>/<txid>-<n>/.../<txid>-<n>.<bin|hex|json>`\n@@ -53,27 +58,27 @@ https://github.com/syscoin/bips/blob/master/bip-0064.mediawiki\n \n Example:\n ```\n-$ curl localhost:18370/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff7627ff72e5e8b0f71210f92ea7a4000c5d75-0.json 2>/dev/null | json_pp\n+$ curl localhost:18332/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff7627ff72e5e8b0f71210f92ea7a4000c5d75-0.json 2>/dev/null | json_pp\n {\n-   \"chaintipHash\" : \"00000000fb01a7f3745a717f8caebee056c484e6e0bfe4a9591c235bb70506fb\",\n    \"chainHeight\" : 325347,\n+   \"chaintipHash\" : \"00000000fb01a7f3745a717f8caebee056c484e6e0bfe4a9591c235bb70506fb\",\n+   \"bitmap\": \"1\",\n    \"utxos\" : [\n       {\n+         \"txvers\" : 1\n+         \"height\" : 2147483647,\n+         \"value\" : 8.8687,\t\t \n          \"scriptPubKey\" : {\n-            \"addresses\" : [\n-               \"mi7as51dvLJsizWnTMurtRmrP8hG2m1XvD\"\n-            ],\n-            \"type\" : \"pubkeyhash\",\n+            \"asm\" : \"OP_DUP OP_HASH160 1c7cebb529b86a04c683dfa87be49de35bcf589e OP_EQUALVERIFY OP_CHECKSIG\",\n             \"hex\" : \"76a9141c7cebb529b86a04c683dfa87be49de35bcf589e88ac\",\n             \"reqSigs\" : 1,\n-            \"asm\" : \"OP_DUP OP_HASH160 1c7cebb529b86a04c683dfa87be49de35bcf589e OP_EQUALVERIFY OP_CHECKSIG\"\n-         },\n-         \"value\" : 8.8687,\n-         \"height\" : 2147483647,\n-         \"txvers\" : 1\n+            \"type\" : \"pubkeyhash\",\n+            \"addresses\" : [\n+               \"mi7as51dvLJsizWnTMurtRmrP8hG2m1XvD\"\n+            ]\n+         }\n       }\n-   ],\n-   \"bitmap\" : \"1\"\n+   ]\n }\n ```\n \n@@ -85,6 +90,8 @@ Only supports JSON as output format.\n * size : (numeric) the number of transactions in the TX mempool\n * bytes : (numeric) size of the TX mempool in bytes\n * usage : (numeric) total TX mempool memory usage\n+* maxmempool : (numeric) maximum memory usage for the mempool in bytes\n+* mempoolminfee : (numeric) minimum feerate (BTC per KB) for tx to be accepted\n \n `GET /rest/mempool/contents.json`\n \n@@ -93,4 +100,4 @@ Only supports JSON as output format.\n \n Risks\n -------------\n-Running a web browser on the same node with a REST enabled syscoind can be a risk. Accessing prepared XSS websites could read out tx/block data of your node by placing links like `<script src=\"http://127.0.0.1:8370/rest/tx/1234567890.json\">` which might break the nodes privacy.\n+Running a web browser on the same node with a REST enabled syscoind can be a risk. Accessing prepared XSS websites could read out tx/block data of your node by placing links like `<script src=\"http://127.0.0.1:8332/rest/tx/1234567890.json\">` which might break the nodes privacy."
      }
    ]
  },
  {
    "sha": "f840c50652c03a1a499c0d4281b453d4189f0341",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODQwYzUwNjUyYzAzYTFhNDk5YzBkNDI4MWI0NTNkNDE4OWYwMzQx",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T16:22:21Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T16:22:21Z"
      },
      "message": "fix total balance on interest claim",
      "tree": {
        "sha": "bbf8cd29159c4e23f0cc5dada245f347e8abab15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bbf8cd29159c4e23f0cc5dada245f347e8abab15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f840c50652c03a1a499c0d4281b453d4189f0341",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f840c50652c03a1a499c0d4281b453d4189f0341",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f840c50652c03a1a499c0d4281b453d4189f0341",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f840c50652c03a1a499c0d4281b453d4189f0341/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91875100c7d708c65f78c6e1f48b443ec2a3d953",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91875100c7d708c65f78c6e1f48b443ec2a3d953",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91875100c7d708c65f78c6e1f48b443ec2a3d953"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7025b65bf85318e052c9301bf4e49156a96087d5",
        "filename": "src/asset.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f840c50652c03a1a499c0d4281b453d4189f0341/src/asset.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f840c50652c03a1a499c0d4281b453d4189f0341/src/asset.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/asset.cpp?ref=f840c50652c03a1a499c0d4281b453d4189f0341",
        "patch": "@@ -289,6 +289,11 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2010 - \" + _(\"Interest must be between 0 and 1\");\n \t\t\t\treturn error(errorMessage.c_str());\n \t\t\t}\n+\t\t\tif ((theAsset.fInterestRate != 0 || theAsset.bCanAdjustInterestRate) && theAsset.bUseInputRanges)\n+\t\t\t{\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2010 - \" + _(\"Interest cannot be set on this type of asset\");\n+\t\t\t\treturn error(errorMessage.c_str());\n+\t\t\t}\n \t\t\tif (!AssetRange(theAsset.nBalance, theAsset.nPrecision, theAsset.bUseInputRanges))\n \t\t\t{\n \t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2011 - \" + _(\"Initial balance out of money range\");"
      },
      {
        "sha": "07f8509256a25e5061671c0b5ff45b107a978329",
        "filename": "src/assetallocation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f840c50652c03a1a499c0d4281b453d4189f0341/src/assetallocation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f840c50652c03a1a499c0d4281b453d4189f0341/src/assetallocation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/assetallocation.cpp?ref=f840c50652c03a1a499c0d4281b453d4189f0341",
        "patch": "@@ -244,7 +244,7 @@ CAmount GetAssetAllocationInterest(CAssetAllocation & assetAllocation, const int\n \t// get interest only and apply externally to this function, compound to every block to allow people to claim interest at any time per block\n \treturn ((nBalanceOverTimeDifference*pow((1 + (fInterestOverTimeDifference / nInterestBlockTerm)), (nInterestBlockTerm*fTerms)))) - nBalanceOverTimeDifference;\n }\n-bool ApplyAssetAllocationInterest(const CAsset& asset, CAssetAllocation & assetAllocation, const int& nHeight, string& errorMessage) {\n+bool ApplyAssetAllocationInterest(CAsset& asset, CAssetAllocation & assetAllocation, const int& nHeight, string& errorMessage) {\n \tCAmount nInterest = GetAssetAllocationInterest(assetAllocation, nHeight, errorMessage);\n \tif (nInterest <= 0) {\n \t\treturn false;\n@@ -260,6 +260,7 @@ bool ApplyAssetAllocationInterest(const CAsset& asset, CAssetAllocation & assetA\n \t\t}\n \t}\n \tassetAllocation.nBalance += nInterest;\n+\tasset.nTotalSupply += nInterest;\n \tassetAllocation.nLastInterestClaimHeight = nHeight;\n \t// set accumulators to 0 again since we have claimed\n \tassetAllocation.nAccumulatedBalanceSinceLastInterestClaim = 0;\n@@ -392,6 +393,11 @@ bool CheckAssetAllocationInputs(const CTransaction &tx, int op, const vector<vec\n \t\t\t\terrorMessage = \"SYSCOIN_ASSET_ALLOCATION_CONSENSUS_ERROR: ERRCODE: 1013 - \" + _(\"You cannot collect interest on this asset: \") + errorMessageCollection;\n \t\t\t\treturn true;\n \t\t\t}\n+\t\t\tif (!passetdb->WriteAsset(dbAsset, OP_ASSET_UPDATE))\n+\t\t\t{\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2039 - \" + _(\"Failed to write to asset DB\");\n+\t\t\t\treturn error(errorMessage.c_str());\n+\t\t\t}\n \t\t}\n \t\tif(bSanityCheck)\n \t\t\ttheAssetAllocation = dbAssetAllocation;"
      }
    ]
  },
  {
    "sha": "bf6ed7ebdd5f1ebe6fd9836c4b8c6a11b93cbdf4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjZlZDdlYmRkNWYxZWJlNmZkOTgzNmM0YjhjNmExMWI5M2NiZGY0",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T16:22:57Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T16:22:57Z"
      },
      "message": "update configure",
      "tree": {
        "sha": "bb82795bccad14322f3da0dbd954f535668d9f78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb82795bccad14322f3da0dbd954f535668d9f78"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf6ed7ebdd5f1ebe6fd9836c4b8c6a11b93cbdf4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf6ed7ebdd5f1ebe6fd9836c4b8c6a11b93cbdf4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf6ed7ebdd5f1ebe6fd9836c4b8c6a11b93cbdf4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf6ed7ebdd5f1ebe6fd9836c4b8c6a11b93cbdf4/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f840c50652c03a1a499c0d4281b453d4189f0341",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f840c50652c03a1a499c0d4281b453d4189f0341",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f840c50652c03a1a499c0d4281b453d4189f0341"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 27,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a64b7e8c2bf0c18f19cd3434111e0fb8f16c7c6a",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 27,
        "deletions": 4,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf6ed7ebdd5f1ebe6fd9836c4b8c6a11b93cbdf4/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf6ed7ebdd5f1ebe6fd9836c4b8c6a11b93cbdf4/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=bf6ed7ebdd5f1ebe6fd9836c4b8c6a11b93cbdf4",
        "patch": "@@ -52,6 +52,8 @@ case $host in\n esac\n dnl Require C++11 compiler (no GNU extensions)\n AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory], [nodefault])\n+dnl Check if -latomic is required for <std::atomic>\n+CHECK_ATOMIC\n \n dnl Unless the user specified OBJCXX, force it to be the same as CXX. This ensures\n dnl that we get the same -std flags for both.\n@@ -211,12 +213,31 @@ if test \"x$enable_debug\" = xyes; then\n     fi\n fi\n \n-## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n-##       compatibility with the legacy buildsystem.\n-##\n+ERROR_CXXFLAGS=\n+if test \"x$enable_werror\" = \"xyes\"; then\n+  if test \"x$CXXFLAG_WERROR\" = \"x\"; then\n+    AC_MSG_ERROR(\"enable-werror set but -Werror is not usable\")\n+  fi\n+  AX_CHECK_COMPILE_FLAG([-Werror=vla],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=vla\"],,[[$CXXFLAG_WERROR]])\n+fi\n+\n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n-  CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -Wno-self-assign -Wno-implicit-fallthrough\"\n+  AX_CHECK_COMPILE_FLAG([-Wall],[CXXFLAGS=\"$CXXFLAGS -Wall\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wextra],[CXXFLAGS=\"$CXXFLAGS -Wextra\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wformat],[CXXFLAGS=\"$CXXFLAGS -Wformat\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wvla],[CXXFLAGS=\"$CXXFLAGS -Wvla\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wformat-security],[CXXFLAGS=\"$CXXFLAGS -Wformat-security\"],,[[$CXXFLAG_WERROR]])\n+\n+  ## Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n+  ## unknown options if any other warning is produced. Test the -Wfoo case, and\n+  ## set the -Wno-foo case if it works.\n+  AX_CHECK_COMPILE_FLAG([-Wunused-parameter],[CXXFLAGS=\"$CXXFLAGS -Wno-unused-parameter\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wself-assign],[CXXFLAGS=\"$CXXFLAGS -Wno-self-assign\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wunused-local-typedef],[CXXFLAGS=\"$CXXFLAGS -Wno-unused-local-typedef\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wdeprecated-register],[CXXFLAGS=\"$CXXFLAGS -Wno-deprecated-register\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough],[CXXFLAGS=\"$CXXFLAGS -Wno-implicit-fallthrough\"],,[[$CXXFLAG_WERROR]])\n fi\n+CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n # Check for optional instruction set support. Enabling these does _not_ imply that all code will\n # be compiled with them, rather that specific objects/libs may use them after checking for runtime\n # compatibility.\n@@ -514,6 +535,7 @@ if test x$use_hardening != xno; then\n \n   AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n   AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,--high-entropy-va]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--high-entropy-va\"])\n   AX_CHECK_LINK_FLAG([[-Wl,-z,relro]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,relro\"])\n   AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,now\"])\n \n@@ -1086,6 +1108,7 @@ AC_SUBST(DASH_VERSION_MINOR, _DASH_VERSION_MINOR)\n AC_SUBST(DASH_VERSION_REVISION, _DASH_VERSION_REVISION)\n \n AC_SUBST(RELDFLAGS)\n+AC_SUBST(ERROR_CXXFLAGS)\n AC_SUBST(HARDENED_CXXFLAGS)\n AC_SUBST(HARDENED_CPPFLAGS)\n AC_SUBST(HARDENED_LDFLAGS)"
      }
    ]
  },
  {
    "sha": "202a004cb69edbc66fabe46b65c87fe04265c27d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDJhMDA0Y2I2OWVkYmM2NmZhYmU0NmI2NWM4N2ZlMDQyNjVjMjdk",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T16:38:47Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T16:38:47Z"
      },
      "message": "add new supply check on claim interest",
      "tree": {
        "sha": "b8fc898fc570f5ff065b94be893d6cd33f9a7d6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8fc898fc570f5ff065b94be893d6cd33f9a7d6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/202a004cb69edbc66fabe46b65c87fe04265c27d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/202a004cb69edbc66fabe46b65c87fe04265c27d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/202a004cb69edbc66fabe46b65c87fe04265c27d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/202a004cb69edbc66fabe46b65c87fe04265c27d/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91875100c7d708c65f78c6e1f48b443ec2a3d953",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91875100c7d708c65f78c6e1f48b443ec2a3d953",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91875100c7d708c65f78c6e1f48b443ec2a3d953"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 55,
      "deletions": 0
    },
    "files": [
      {
        "sha": "587e5fc3161288d95d181b9f8d66381684dd984d",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202a004cb69edbc66fabe46b65c87fe04265c27d/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202a004cb69edbc66fabe46b65c87fe04265c27d/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=202a004cb69edbc66fabe46b65c87fe04265c27d",
        "patch": "@@ -367,6 +367,61 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest)\n \tbalance = find_value(r.get_obj(), \"balance\");\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(balance, 8, false), 824875837095);\n }\n+BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n+{\n+\tUniValue r;\n+\tprintf(\"Running generate_asset_collect_interest_checktotalsupply...\\n\");\n+\tGenerateBlocks(5);\n+\tAliasNew(\"node1\", \"jagassetcollection\", \"data\");\n+\tAliasNew(\"node1\", \"jagassetcollectionreceiver\", \"data\");\n+\tAliasNew(\"node1\", \"jagassetcollectionreceiver1\", \"data\");\n+\t// setup asset with 5% interest hourly (unit test mode calculates interest hourly not annually)\n+\tstring guid = AssetNew(\"node1\", \"cad\", \"jagassetcollection\", \"data\", \"8\", \"false\", \"50\", \"100\", \"0.1\");\n+\tAssetSend(\"node1\", guid, \"\\\"[{\\\\\\\"aliasto\\\\\\\":\\\\\\\"jagassetcollectionreceiver\\\\\\\",\\\\\\\"amount\\\\\\\":20},{\\\\\\\"aliasto\\\\\\\":\\\\\\\"jagassetcollectionreceiver1\\\\\\\",\\\\\\\"amount\\\\\\\":30}]\\\"\", \"memoassetinterest\");\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectionreceiver false\"));\n+\tUniValue balance = find_value(r.get_obj(), \"balance\");\n+\tBOOST_CHECK_EQUAL(AssetAmountFromValue(balance, 8, false), 20 * COIN);\n+\tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"interest_claim_height\").get_int(), find_value(r.get_obj(), \"height\").get_int());\n+\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectionreceiver1 false\"));\n+\tUniValue balance = find_value(r.get_obj(), \"balance\");\n+\tBOOST_CHECK_EQUAL(AssetAmountFromValue(balance, 8, false), 30 * COIN);\n+\tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"interest_claim_height\").get_int(), find_value(r.get_obj(), \"height\").get_int());\n+\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + guid + \" false\"));\n+\tUniValue balance = find_value(r.get_obj(), \"balance\");\n+\tUniValue totalsupply = find_value(r.get_obj(), \"total_supply\");\n+\tUniValue maxsupply = find_value(r.get_obj(), \"max_supply\");\n+\tBOOST_CHECK_EQUAL(AssetAmountFromValue(balance, 8, false),0);\n+\tBOOST_CHECK_EQUAL(AssetAmountFromValue(totalsupply, 8, false), 50 * COIN);\n+\tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);\n+\n+\t// 1 hour later\n+\tGenerateBlocks(60);\n+\t// calc interest expect 20 (1 + 0.1 / 60) ^ (60(1)) = ~22.10157853 and 30 (1 + 0.1 / 60) ^ (60(1)) = ~33.15236779\n+\tAssetClaimInterest(\"node1\", guid, \"jagassetcollectionreceiver\");\n+\tAssetClaimInterest(\"node1\", guid, \"jagassetcollectionreceiver1\");\n+\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectionreceiver false\"));\n+\tUniValue balance = find_value(r.get_obj(), \"balance\");\n+\tCAmount nBalance1 = AssetAmountFromValue(balance, 8, false);\n+\tBOOST_CHECK_EQUAL(nBalance1, 22.10157853 * COIN);\n+\tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"interest_claim_height\").get_int(), find_value(r.get_obj(), \"height\").get_int());\n+\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectionreceiver1 false\"));\n+\tbalance = find_value(r.get_obj(), \"balance\");\n+\tCAmount nBalance2 = AssetAmountFromValue(balance, 8, false);\n+\tBOOST_CHECK_EQUAL(nBalance2, 33.15236779 * COIN);\n+\tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"interest_claim_height\").get_int(), find_value(r.get_obj(), \"height\").get_int());\n+\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + guid + \" false\"));\n+\tUniValue balance = find_value(r.get_obj(), \"balance\");\n+\tUniValue totalsupply = find_value(r.get_obj(), \"total_supply\");\n+\tUniValue maxsupply = find_value(r.get_obj(), \"max_supply\");\n+\tBOOST_CHECK_EQUAL(AssetAmountFromValue(balance, 8, false), 0 * COIN);\n+\tBOOST_CHECK_EQUAL(AssetAmountFromValue(totalsupply, 8, false), 100 *COIN - (nBalance1 + nBalance2));\n+\tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);\n+}\n BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_average_balance)\n {\n \tUniValue r;"
      }
    ]
  },
  {
    "sha": "b2e2deb087dc6813a6267efa2f3b53b893685776",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMmUyZGViMDg3ZGM2ODEzYTYyNjdlZmEyZjNiNTNiODkzNjg1Nzc2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T16:38:49Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T16:38:49Z"
      },
      "message": "Merge branch 'dev-3.x' of https://github.com/syscoin/syscoin2 into dev-3.x",
      "tree": {
        "sha": "9ea93c235672d080fa2bdd6c3b53370642c13a04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ea93c235672d080fa2bdd6c3b53370642c13a04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2e2deb087dc6813a6267efa2f3b53b893685776",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2e2deb087dc6813a6267efa2f3b53b893685776",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2e2deb087dc6813a6267efa2f3b53b893685776",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2e2deb087dc6813a6267efa2f3b53b893685776/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "202a004cb69edbc66fabe46b65c87fe04265c27d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/202a004cb69edbc66fabe46b65c87fe04265c27d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/202a004cb69edbc66fabe46b65c87fe04265c27d"
      },
      {
        "sha": "bf6ed7ebdd5f1ebe6fd9836c4b8c6a11b93cbdf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf6ed7ebdd5f1ebe6fd9836c4b8c6a11b93cbdf4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf6ed7ebdd5f1ebe6fd9836c4b8c6a11b93cbdf4"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 39,
      "deletions": 5
    },
    "files": [
      {
        "sha": "a64b7e8c2bf0c18f19cd3434111e0fb8f16c7c6a",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 27,
        "deletions": 4,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2e2deb087dc6813a6267efa2f3b53b893685776/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2e2deb087dc6813a6267efa2f3b53b893685776/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b2e2deb087dc6813a6267efa2f3b53b893685776",
        "patch": "@@ -52,6 +52,8 @@ case $host in\n esac\n dnl Require C++11 compiler (no GNU extensions)\n AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory], [nodefault])\n+dnl Check if -latomic is required for <std::atomic>\n+CHECK_ATOMIC\n \n dnl Unless the user specified OBJCXX, force it to be the same as CXX. This ensures\n dnl that we get the same -std flags for both.\n@@ -211,12 +213,31 @@ if test \"x$enable_debug\" = xyes; then\n     fi\n fi\n \n-## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n-##       compatibility with the legacy buildsystem.\n-##\n+ERROR_CXXFLAGS=\n+if test \"x$enable_werror\" = \"xyes\"; then\n+  if test \"x$CXXFLAG_WERROR\" = \"x\"; then\n+    AC_MSG_ERROR(\"enable-werror set but -Werror is not usable\")\n+  fi\n+  AX_CHECK_COMPILE_FLAG([-Werror=vla],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=vla\"],,[[$CXXFLAG_WERROR]])\n+fi\n+\n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n-  CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -Wno-self-assign -Wno-implicit-fallthrough\"\n+  AX_CHECK_COMPILE_FLAG([-Wall],[CXXFLAGS=\"$CXXFLAGS -Wall\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wextra],[CXXFLAGS=\"$CXXFLAGS -Wextra\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wformat],[CXXFLAGS=\"$CXXFLAGS -Wformat\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wvla],[CXXFLAGS=\"$CXXFLAGS -Wvla\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wformat-security],[CXXFLAGS=\"$CXXFLAGS -Wformat-security\"],,[[$CXXFLAG_WERROR]])\n+\n+  ## Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n+  ## unknown options if any other warning is produced. Test the -Wfoo case, and\n+  ## set the -Wno-foo case if it works.\n+  AX_CHECK_COMPILE_FLAG([-Wunused-parameter],[CXXFLAGS=\"$CXXFLAGS -Wno-unused-parameter\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wself-assign],[CXXFLAGS=\"$CXXFLAGS -Wno-self-assign\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wunused-local-typedef],[CXXFLAGS=\"$CXXFLAGS -Wno-unused-local-typedef\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wdeprecated-register],[CXXFLAGS=\"$CXXFLAGS -Wno-deprecated-register\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough],[CXXFLAGS=\"$CXXFLAGS -Wno-implicit-fallthrough\"],,[[$CXXFLAG_WERROR]])\n fi\n+CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n # Check for optional instruction set support. Enabling these does _not_ imply that all code will\n # be compiled with them, rather that specific objects/libs may use them after checking for runtime\n # compatibility.\n@@ -514,6 +535,7 @@ if test x$use_hardening != xno; then\n \n   AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n   AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,--high-entropy-va]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--high-entropy-va\"])\n   AX_CHECK_LINK_FLAG([[-Wl,-z,relro]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,relro\"])\n   AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,now\"])\n \n@@ -1086,6 +1108,7 @@ AC_SUBST(DASH_VERSION_MINOR, _DASH_VERSION_MINOR)\n AC_SUBST(DASH_VERSION_REVISION, _DASH_VERSION_REVISION)\n \n AC_SUBST(RELDFLAGS)\n+AC_SUBST(ERROR_CXXFLAGS)\n AC_SUBST(HARDENED_CXXFLAGS)\n AC_SUBST(HARDENED_CPPFLAGS)\n AC_SUBST(HARDENED_LDFLAGS)"
      },
      {
        "sha": "7025b65bf85318e052c9301bf4e49156a96087d5",
        "filename": "src/asset.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2e2deb087dc6813a6267efa2f3b53b893685776/src/asset.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2e2deb087dc6813a6267efa2f3b53b893685776/src/asset.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/asset.cpp?ref=b2e2deb087dc6813a6267efa2f3b53b893685776",
        "patch": "@@ -289,6 +289,11 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2010 - \" + _(\"Interest must be between 0 and 1\");\n \t\t\t\treturn error(errorMessage.c_str());\n \t\t\t}\n+\t\t\tif ((theAsset.fInterestRate != 0 || theAsset.bCanAdjustInterestRate) && theAsset.bUseInputRanges)\n+\t\t\t{\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2010 - \" + _(\"Interest cannot be set on this type of asset\");\n+\t\t\t\treturn error(errorMessage.c_str());\n+\t\t\t}\n \t\t\tif (!AssetRange(theAsset.nBalance, theAsset.nPrecision, theAsset.bUseInputRanges))\n \t\t\t{\n \t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2011 - \" + _(\"Initial balance out of money range\");"
      },
      {
        "sha": "07f8509256a25e5061671c0b5ff45b107a978329",
        "filename": "src/assetallocation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2e2deb087dc6813a6267efa2f3b53b893685776/src/assetallocation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2e2deb087dc6813a6267efa2f3b53b893685776/src/assetallocation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/assetallocation.cpp?ref=b2e2deb087dc6813a6267efa2f3b53b893685776",
        "patch": "@@ -244,7 +244,7 @@ CAmount GetAssetAllocationInterest(CAssetAllocation & assetAllocation, const int\n \t// get interest only and apply externally to this function, compound to every block to allow people to claim interest at any time per block\n \treturn ((nBalanceOverTimeDifference*pow((1 + (fInterestOverTimeDifference / nInterestBlockTerm)), (nInterestBlockTerm*fTerms)))) - nBalanceOverTimeDifference;\n }\n-bool ApplyAssetAllocationInterest(const CAsset& asset, CAssetAllocation & assetAllocation, const int& nHeight, string& errorMessage) {\n+bool ApplyAssetAllocationInterest(CAsset& asset, CAssetAllocation & assetAllocation, const int& nHeight, string& errorMessage) {\n \tCAmount nInterest = GetAssetAllocationInterest(assetAllocation, nHeight, errorMessage);\n \tif (nInterest <= 0) {\n \t\treturn false;\n@@ -260,6 +260,7 @@ bool ApplyAssetAllocationInterest(const CAsset& asset, CAssetAllocation & assetA\n \t\t}\n \t}\n \tassetAllocation.nBalance += nInterest;\n+\tasset.nTotalSupply += nInterest;\n \tassetAllocation.nLastInterestClaimHeight = nHeight;\n \t// set accumulators to 0 again since we have claimed\n \tassetAllocation.nAccumulatedBalanceSinceLastInterestClaim = 0;\n@@ -392,6 +393,11 @@ bool CheckAssetAllocationInputs(const CTransaction &tx, int op, const vector<vec\n \t\t\t\terrorMessage = \"SYSCOIN_ASSET_ALLOCATION_CONSENSUS_ERROR: ERRCODE: 1013 - \" + _(\"You cannot collect interest on this asset: \") + errorMessageCollection;\n \t\t\t\treturn true;\n \t\t\t}\n+\t\t\tif (!passetdb->WriteAsset(dbAsset, OP_ASSET_UPDATE))\n+\t\t\t{\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2039 - \" + _(\"Failed to write to asset DB\");\n+\t\t\t\treturn error(errorMessage.c_str());\n+\t\t\t}\n \t\t}\n \t\tif(bSanityCheck)\n \t\t\ttheAssetAllocation = dbAssetAllocation;"
      }
    ]
  },
  {
    "sha": "be81d870a579d3c8855d3dde875fb53eeaae7292",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTgxZDg3MGE1NzlkM2M4ODU1ZDNkZGU4NzVmYjUzZWVhYWU3Mjky",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T16:39:33Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T16:39:33Z"
      },
      "message": "compile",
      "tree": {
        "sha": "df34a26de12cdc980486d36a77453fae5f660fcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df34a26de12cdc980486d36a77453fae5f660fcc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be81d870a579d3c8855d3dde875fb53eeaae7292",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be81d870a579d3c8855d3dde875fb53eeaae7292",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be81d870a579d3c8855d3dde875fb53eeaae7292",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be81d870a579d3c8855d3dde875fb53eeaae7292/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2e2deb087dc6813a6267efa2f3b53b893685776",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2e2deb087dc6813a6267efa2f3b53b893685776",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2e2deb087dc6813a6267efa2f3b53b893685776"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "60c1e8e00530e0ffdb2eaddb02e56c20b8616c8d",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be81d870a579d3c8855d3dde875fb53eeaae7292/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be81d870a579d3c8855d3dde875fb53eeaae7292/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=be81d870a579d3c8855d3dde875fb53eeaae7292",
        "patch": "@@ -384,12 +384,12 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"interest_claim_height\").get_int(), find_value(r.get_obj(), \"height\").get_int());\n \n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectionreceiver1 false\"));\n-\tUniValue balance = find_value(r.get_obj(), \"balance\");\n+\tbalance = find_value(r.get_obj(), \"balance\");\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(balance, 8, false), 30 * COIN);\n \tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"interest_claim_height\").get_int(), find_value(r.get_obj(), \"height\").get_int());\n \n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + guid + \" false\"));\n-\tUniValue balance = find_value(r.get_obj(), \"balance\");\n+\tbalance = find_value(r.get_obj(), \"balance\");\n \tUniValue totalsupply = find_value(r.get_obj(), \"total_supply\");\n \tUniValue maxsupply = find_value(r.get_obj(), \"max_supply\");\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(balance, 8, false),0);\n@@ -403,7 +403,7 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \tAssetClaimInterest(\"node1\", guid, \"jagassetcollectionreceiver1\");\n \n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectionreceiver false\"));\n-\tUniValue balance = find_value(r.get_obj(), \"balance\");\n+\tbalance = find_value(r.get_obj(), \"balance\");\n \tCAmount nBalance1 = AssetAmountFromValue(balance, 8, false);\n \tBOOST_CHECK_EQUAL(nBalance1, 22.10157853 * COIN);\n \tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"interest_claim_height\").get_int(), find_value(r.get_obj(), \"height\").get_int());\n@@ -415,9 +415,9 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"interest_claim_height\").get_int(), find_value(r.get_obj(), \"height\").get_int());\n \n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + guid + \" false\"));\n-\tUniValue balance = find_value(r.get_obj(), \"balance\");\n-\tUniValue totalsupply = find_value(r.get_obj(), \"total_supply\");\n-\tUniValue maxsupply = find_value(r.get_obj(), \"max_supply\");\n+\tbalance = find_value(r.get_obj(), \"balance\");\n+\ttotalsupply = find_value(r.get_obj(), \"total_supply\");\n+\tmaxsupply = find_value(r.get_obj(), \"max_supply\");\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(balance, 8, false), 0 * COIN);\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(totalsupply, 8, false), 100 *COIN - (nBalance1 + nBalance2));\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);"
      }
    ]
  },
  {
    "sha": "c6cd8f4f1749fc54c1de406d1e52581845022449",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmNkOGY0ZjE3NDlmYzU0YzFkZTQwNmQxZTUyNTgxODQ1MDIyNDQ5",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T16:43:13Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T16:43:13Z"
      },
      "message": "change alias names",
      "tree": {
        "sha": "cb85f69ef061455a83ffc5daf52f68dc9eb364e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb85f69ef061455a83ffc5daf52f68dc9eb364e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6cd8f4f1749fc54c1de406d1e52581845022449",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6cd8f4f1749fc54c1de406d1e52581845022449",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6cd8f4f1749fc54c1de406d1e52581845022449",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6cd8f4f1749fc54c1de406d1e52581845022449/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be81d870a579d3c8855d3dde875fb53eeaae7292",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be81d870a579d3c8855d3dde875fb53eeaae7292",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be81d870a579d3c8855d3dde875fb53eeaae7292"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 14,
      "deletions": 14
    },
    "files": [
      {
        "sha": "515dd9cfd931f5bd866253f36952749fced548c4",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6cd8f4f1749fc54c1de406d1e52581845022449/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6cd8f4f1749fc54c1de406d1e52581845022449/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=c6cd8f4f1749fc54c1de406d1e52581845022449",
        "patch": "@@ -372,18 +372,18 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \tUniValue r;\n \tprintf(\"Running generate_asset_collect_interest_checktotalsupply...\\n\");\n \tGenerateBlocks(5);\n-\tAliasNew(\"node1\", \"jagassetcollection\", \"data\");\n-\tAliasNew(\"node1\", \"jagassetcollectionreceiver\", \"data\");\n-\tAliasNew(\"node1\", \"jagassetcollectionreceiver1\", \"data\");\n+\tAliasNew(\"node1\", \"jagassetcollectioncheck\", \"data\");\n+\tAliasNew(\"node1\", \"jagassetcollectioncheckreceiver\", \"data\");\n+\tAliasNew(\"node1\", \"jagassetcollectioncheckreceiver1\", \"data\");\n \t// setup asset with 5% interest hourly (unit test mode calculates interest hourly not annually)\n-\tstring guid = AssetNew(\"node1\", \"cad\", \"jagassetcollection\", \"data\", \"8\", \"false\", \"50\", \"100\", \"0.1\");\n-\tAssetSend(\"node1\", guid, \"\\\"[{\\\\\\\"aliasto\\\\\\\":\\\\\\\"jagassetcollectionreceiver\\\\\\\",\\\\\\\"amount\\\\\\\":20},{\\\\\\\"aliasto\\\\\\\":\\\\\\\"jagassetcollectionreceiver1\\\\\\\",\\\\\\\"amount\\\\\\\":30}]\\\"\", \"memoassetinterest\");\n-\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectionreceiver false\"));\n+\tstring guid = AssetNew(\"node1\", \"cad\", \"jagassetcollectioncheck\", \"data\", \"8\", \"false\", \"50\", \"100\", \"0.1\");\n+\tAssetSend(\"node1\", guid, \"\\\"[{\\\\\\\"aliasto\\\\\\\":\\\\\\\"jagassetcollectioncheckreceiver\\\\\\\",\\\\\\\"amount\\\\\\\":20},{\\\\\\\"aliasto\\\\\\\":\\\\\\\"jagassetcollectioncheckreceiver1\\\\\\\",\\\\\\\"amount\\\\\\\":30}]\\\"\", \"memoassetinterest\");\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectioncheckreceiver false\"));\n \tUniValue balance = find_value(r.get_obj(), \"balance\");\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(balance, 8, false), 20 * COIN);\n \tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"interest_claim_height\").get_int(), find_value(r.get_obj(), \"height\").get_int());\n \n-\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectionreceiver1 false\"));\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectioncheckreceiver1 false\"));\n \tbalance = find_value(r.get_obj(), \"balance\");\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(balance, 8, false), 30 * COIN);\n \tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"interest_claim_height\").get_int(), find_value(r.get_obj(), \"height\").get_int());\n@@ -399,26 +399,26 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \t// 1 hour later\n \tGenerateBlocks(60);\n \t// calc interest expect 20 (1 + 0.1 / 60) ^ (60(1)) = ~22.10157853 and 30 (1 + 0.1 / 60) ^ (60(1)) = ~33.15236779\n-\tAssetClaimInterest(\"node1\", guid, \"jagassetcollectionreceiver\");\n-\tAssetClaimInterest(\"node1\", guid, \"jagassetcollectionreceiver1\");\n+\tAssetClaimInterest(\"node1\", guid, \"jagassetcollectioncheckreceiver\");\n+\tAssetClaimInterest(\"node1\", guid, \"jagassetcollectioncheckreceiver1\");\n \n-\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectionreceiver false\"));\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectioncheckreceiver false\"));\n \tbalance = find_value(r.get_obj(), \"balance\");\n \tCAmount nBalance1 = AssetAmountFromValue(balance, 8, false);\n-\tBOOST_CHECK_EQUAL(nBalance1, 22.10157853 * COIN);\n+\tBOOST_CHECK_EQUAL(nBalance1, 2210157853);\n \tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"interest_claim_height\").get_int(), find_value(r.get_obj(), \"height\").get_int());\n \n-\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectionreceiver1 false\"));\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectioncheckreceiver1 false\"));\n \tbalance = find_value(r.get_obj(), \"balance\");\n \tCAmount nBalance2 = AssetAmountFromValue(balance, 8, false);\n-\tBOOST_CHECK_EQUAL(nBalance2, 33.15236779 * COIN);\n+\tBOOST_CHECK_EQUAL(nBalance2, 3315236779);\n \tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"interest_claim_height\").get_int(), find_value(r.get_obj(), \"height\").get_int());\n \n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + guid + \" false\"));\n \tbalance = find_value(r.get_obj(), \"balance\");\n \ttotalsupply = find_value(r.get_obj(), \"total_supply\");\n \tmaxsupply = find_value(r.get_obj(), \"max_supply\");\n-\tBOOST_CHECK_EQUAL(AssetAmountFromValue(balance, 8, false), 0 * COIN);\n+\tBOOST_CHECK_EQUAL(AssetAmountFromValue(balance, 8, false), 0);\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(totalsupply, 8, false), 100 *COIN - (nBalance1 + nBalance2));\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);\n }"
      }
    ]
  },
  {
    "sha": "83ac1f922df2b96f0c4cb1ad05d7726836d56846",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4M2FjMWY5MjJkZjJiOTZmMGM0Y2IxYWQwNWQ3NzI2ODM2ZDU2ODQ2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T16:50:54Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T16:50:54Z"
      },
      "message": "fix 0 string",
      "tree": {
        "sha": "bdd03838e9614a60b81771fab560132791bea68c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bdd03838e9614a60b81771fab560132791bea68c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83ac1f922df2b96f0c4cb1ad05d7726836d56846",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83ac1f922df2b96f0c4cb1ad05d7726836d56846",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83ac1f922df2b96f0c4cb1ad05d7726836d56846",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83ac1f922df2b96f0c4cb1ad05d7726836d56846/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6cd8f4f1749fc54c1de406d1e52581845022449",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6cd8f4f1749fc54c1de406d1e52581845022449",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6cd8f4f1749fc54c1de406d1e52581845022449"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ebb17218a9c15c039098123f8a408a06309ca30c",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83ac1f922df2b96f0c4cb1ad05d7726836d56846/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83ac1f922df2b96f0c4cb1ad05d7726836d56846/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=83ac1f922df2b96f0c4cb1ad05d7726836d56846",
        "patch": "@@ -392,7 +392,7 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \tbalance = find_value(r.get_obj(), \"balance\");\n \tUniValue totalsupply = find_value(r.get_obj(), \"total_supply\");\n \tUniValue maxsupply = find_value(r.get_obj(), \"max_supply\");\n-\tBOOST_CHECK_EQUAL(AssetAmountFromValue(balance, 8, false),0);\n+\tBOOST_CHECK_EQUAL(balance.write().c_str(),\"0\");\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(totalsupply, 8, false), 50 * COIN);\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);\n \n@@ -418,7 +418,7 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \tbalance = find_value(r.get_obj(), \"balance\");\n \ttotalsupply = find_value(r.get_obj(), \"total_supply\");\n \tmaxsupply = find_value(r.get_obj(), \"max_supply\");\n-\tBOOST_CHECK_EQUAL(AssetAmountFromValue(balance, 8, false), 0);\n+\tBOOST_CHECK_EQUAL(balance.write().c_str(), \"0\");\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(totalsupply, 8, false), 100 *COIN - (nBalance1 + nBalance2));\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);\n }"
      }
    ]
  },
  {
    "sha": "352169916aaa5d967aad3d091bd0e1bc4508eebb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTIxNjk5MTZhYWE1ZDk2N2FhZDNkMDkxYmQwZTFiYzQ1MDhlZWJi",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:02:12Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:02:12Z"
      },
      "message": "update tests",
      "tree": {
        "sha": "ce369bb9ab61e1b8aaad1b0356e70b4b95bb1296",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce369bb9ab61e1b8aaad1b0356e70b4b95bb1296"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/352169916aaa5d967aad3d091bd0e1bc4508eebb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/352169916aaa5d967aad3d091bd0e1bc4508eebb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/352169916aaa5d967aad3d091bd0e1bc4508eebb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/352169916aaa5d967aad3d091bd0e1bc4508eebb/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83ac1f922df2b96f0c4cb1ad05d7726836d56846",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83ac1f922df2b96f0c4cb1ad05d7726836d56846",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83ac1f922df2b96f0c4cb1ad05d7726836d56846"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "b5963e6b2584dead2f26be330c77db72054c2d76",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/352169916aaa5d967aad3d091bd0e1bc4508eebb/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/352169916aaa5d967aad3d091bd0e1bc4508eebb/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=352169916aaa5d967aad3d091bd0e1bc4508eebb",
        "patch": "@@ -392,35 +392,37 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \tbalance = find_value(r.get_obj(), \"balance\");\n \tUniValue totalsupply = find_value(r.get_obj(), \"total_supply\");\n \tUniValue maxsupply = find_value(r.get_obj(), \"max_supply\");\n-\tBOOST_CHECK_EQUAL(balance.write().c_str(),\"0\");\n+\tBOOST_CHECK_EQUAL(balance.write().c_str(),\"0.00000000\");\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(totalsupply, 8, false), 50 * COIN);\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);\n \n \t// 1 hour later\n \tGenerateBlocks(60);\n-\t// calc interest expect 20 (1 + 0.1 / 60) ^ (60(1)) = ~22.10157853 and 30 (1 + 0.1 / 60) ^ (60(1)) = ~33.15236779\n+\t// calc interest expect 20 (1 + 0.1 / 60) ^ (60(1)) = ~22.13 and 30 (1 + 0.1 / 60) ^ (60(1)) = ~33.26\n \tAssetClaimInterest(\"node1\", guid, \"jagassetcollectioncheckreceiver\");\n \tAssetClaimInterest(\"node1\", guid, \"jagassetcollectioncheckreceiver1\");\n \n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectioncheckreceiver false\"));\n \tbalance = find_value(r.get_obj(), \"balance\");\n \tCAmount nBalance1 = AssetAmountFromValue(balance, 8, false);\n-\tBOOST_CHECK_EQUAL(nBalance1, 2210157853);\n+\tBOOST_CHECK_EQUAL(nBalance1, 2213841452);\n \tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"interest_claim_height\").get_int(), find_value(r.get_obj(), \"height\").get_int());\n \n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectioncheckreceiver1 false\"));\n \tbalance = find_value(r.get_obj(), \"balance\");\n \tCAmount nBalance2 = AssetAmountFromValue(balance, 8, false);\n-\tBOOST_CHECK_EQUAL(nBalance2, 3315236779);\n+\tBOOST_CHECK_EQUAL(nBalance2, 3326296782);\n \tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"interest_claim_height\").get_int(), find_value(r.get_obj(), \"height\").get_int());\n \n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + guid + \" false\"));\n \tbalance = find_value(r.get_obj(), \"balance\");\n \ttotalsupply = find_value(r.get_obj(), \"total_supply\");\n \tmaxsupply = find_value(r.get_obj(), \"max_supply\");\n-\tBOOST_CHECK_EQUAL(balance.write().c_str(), \"0\");\n+\tBOOST_CHECK_EQUAL(balance.write().c_str(), \"0.00000000\");\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(totalsupply, 8, false), 100 *COIN - (nBalance1 + nBalance2));\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);\n+\n+\tAssetUpdate(\"node1\", guid, \"pub12\", \"5\");\n }\n BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_average_balance)\n {"
      }
    ]
  },
  {
    "sha": "824532f7c3156bd825f53c45a207c1a3d95528ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjQ1MzJmN2MzMTU2YmQ4MjVmNTNjNDVhMjA3YzFhM2Q5NTUyOGVj",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:10:32Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:10:32Z"
      },
      "message": "unit test bool arg",
      "tree": {
        "sha": "088bfef82bb9d6b5d18d9c596e1b42640733f986",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/088bfef82bb9d6b5d18d9c596e1b42640733f986"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/824532f7c3156bd825f53c45a207c1a3d95528ec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/824532f7c3156bd825f53c45a207c1a3d95528ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/824532f7c3156bd825f53c45a207c1a3d95528ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/824532f7c3156bd825f53c45a207c1a3d95528ec/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "352169916aaa5d967aad3d091bd0e1bc4508eebb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/352169916aaa5d967aad3d091bd0e1bc4508eebb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/352169916aaa5d967aad3d091bd0e1bc4508eebb"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "3b5a7d85fa0c2a43f0581b0391397128ad0fa88c",
        "filename": "src/assetallocation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/824532f7c3156bd825f53c45a207c1a3d95528ec/src/assetallocation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/824532f7c3156bd825f53c45a207c1a3d95528ec/src/assetallocation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/assetallocation.cpp?ref=824532f7c3156bd825f53c45a207c1a3d95528ec",
        "patch": "@@ -235,7 +235,7 @@ CAmount GetAssetAllocationInterest(CAssetAllocation & assetAllocation, const int\n \t\terrorMessage = _(\"Last interest claim block height is invalid\");\n \t\treturn 0;\n \t}\n-\tconst int &nInterestBlockTerm = GetBoolArg(\"-unittest\", false)? ONE_HOUR_IN_BLOCKS: ONE_YEAR_IN_BLOCKS;\n+\tconst int &nInterestBlockTerm = fUnitTest? ONE_HOUR_IN_BLOCKS: ONE_YEAR_IN_BLOCKS;\n \tconst int &nBlockDifference = nHeight - assetAllocation.nLastInterestClaimHeight;\n \tconst double &fTerms = (double)nBlockDifference / (double)nInterestBlockTerm;\n \t// apply compound annual interest to get total interest since last time interest was collected\n@@ -393,7 +393,7 @@ bool CheckAssetAllocationInputs(const CTransaction &tx, int op, const vector<vec\n \t\t\t\terrorMessage = \"SYSCOIN_ASSET_ALLOCATION_CONSENSUS_ERROR: ERRCODE: 1013 - \" + _(\"You cannot collect interest on this asset: \") + errorMessageCollection;\n \t\t\t\treturn true;\n \t\t\t}\n-\t\t\tif (!passetdb->WriteAsset(dbAsset, OP_ASSET_UPDATE))\n+\t\t\tif (!bSanityCheck && !passetdb->WriteAsset(dbAsset, OP_ASSET_UPDATE))\n \t\t\t{\n \t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2039 - \" + _(\"Failed to write to asset DB\");\n \t\t\t\treturn error(errorMessage.c_str());\n@@ -786,7 +786,7 @@ UniValue assetallocationsend(const UniValue& params, bool fHelp) {\n \tconst int64_t & nNow = duration_cast<milliseconds>(system_clock::now().time_since_epoch()).count();\n \tfor (auto& arrivalTime : arrivalTimes) {\n \t\tint minLatency = ZDAG_MINIMUM_LATENCY_SECONDS*1000;\n-\t\tif (GetBoolArg(\"-unittest\", false))\n+\t\tif (fUnitTest)\n \t\t\tminLatency = 1000;\n \t\t// if this tx arrived within the minimum latency period flag it as potentially conflicting\n \t\tif ((nNow - arrivalTime.second) < minLatency) {\n@@ -970,7 +970,7 @@ int DetectPotentialAssetAllocationSenderConflicts(const CAssetAllocationTuple& a\n \tCAmount &senderBalance = mapBalances[assetAllocationTupleSender.vchAlias];\n \tsenderBalance = dbLastAssetAllocation.nBalance;\n \tint minLatency = ZDAG_MINIMUM_LATENCY_SECONDS * 1000;\n-\tif (GetBoolArg(\"-unittest\", false))\n+\tif (fUnitTest)\n \t\tminLatency = 1000;\n \tfor (auto& arrivalTime : arrivalTimesSet)\n \t{"
      },
      {
        "sha": "85f1e045f1cfa797a005eabc4caf9fd54130d96f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/824532f7c3156bd825f53c45a207c1a3d95528ec/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/824532f7c3156bd825f53c45a207c1a3d95528ec/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=824532f7c3156bd825f53c45a207c1a3d95528ec",
        "patch": "@@ -1996,7 +1996,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n \t// ********************************************************* Step 11a: setup PrivateSend\n \tfMasterNode = GetBoolArg(\"-masternode\", false);\n-\n+\tfUnitTest = GetBoolArg(\"-unittest\", false);\n \t// SYSCOIN\n \tif ((fMasterNode || masternodeConfig.getCount() > 0) && !fTxIndex) {\n \t\treturn InitError(\"Enabling Masternode support requires turning on transaction indexing.\""
      },
      {
        "sha": "d78a774346ab9ef607792b4bed40505c7a7a6937",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/824532f7c3156bd825f53c45a207c1a3d95528ec/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/824532f7c3156bd825f53c45a207c1a3d95528ec/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=824532f7c3156bd825f53c45a207c1a3d95528ec",
        "patch": "@@ -110,6 +110,7 @@ using namespace std;\n //Syscoin only features\n bool fMasterNode = false;\n bool fLiteMode = false;\n+bool fUnitTest = false;\n /**\n     nWalletBackups:\n         1..10   - number of automatic backups to keep"
      },
      {
        "sha": "0d6188431ea5de15363d623bdc533fa79435aa87",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/824532f7c3156bd825f53c45a207c1a3d95528ec/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/824532f7c3156bd825f53c45a207c1a3d95528ec/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=824532f7c3156bd825f53c45a207c1a3d95528ec",
        "patch": "@@ -46,6 +46,7 @@\n //Syscoin only features\n \n extern bool fMasterNode;\n+extern bool fUnitTest;\n extern bool fLiteMode;\n extern int nWalletBackups;\n "
      }
    ]
  },
  {
    "sha": "b83ece3b8bd7bc372c26f4a75320383f719eff42",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODNlY2UzYjhiZDdiYzM3MmMyNmY0YTc1MzIwMzgzZjcxOWVmZjQy",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:12:05Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:12:05Z"
      },
      "message": "update test",
      "tree": {
        "sha": "51faca4bc72d693acf2e951074a85fbee71bceb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51faca4bc72d693acf2e951074a85fbee71bceb5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b83ece3b8bd7bc372c26f4a75320383f719eff42",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b83ece3b8bd7bc372c26f4a75320383f719eff42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b83ece3b8bd7bc372c26f4a75320383f719eff42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b83ece3b8bd7bc372c26f4a75320383f719eff42/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "824532f7c3156bd825f53c45a207c1a3d95528ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/824532f7c3156bd825f53c45a207c1a3d95528ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/824532f7c3156bd825f53c45a207c1a3d95528ec"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "afd445bd18086f7b00c43434bd13ab428f824def",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b83ece3b8bd7bc372c26f4a75320383f719eff42/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b83ece3b8bd7bc372c26f4a75320383f719eff42/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=b83ece3b8bd7bc372c26f4a75320383f719eff42",
        "patch": "@@ -392,7 +392,7 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \tbalance = find_value(r.get_obj(), \"balance\");\n \tUniValue totalsupply = find_value(r.get_obj(), \"total_supply\");\n \tUniValue maxsupply = find_value(r.get_obj(), \"max_supply\");\n-\tBOOST_CHECK_EQUAL(balance.write().c_str(),\"0.00000000\");\n+\tBOOST_CHECK_EQUAL(balance.write(),\"0.00000000\");\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(totalsupply, 8, false), 50 * COIN);\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);\n \n@@ -418,7 +418,7 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \tbalance = find_value(r.get_obj(), \"balance\");\n \ttotalsupply = find_value(r.get_obj(), \"total_supply\");\n \tmaxsupply = find_value(r.get_obj(), \"max_supply\");\n-\tBOOST_CHECK_EQUAL(balance.write().c_str(), \"0.00000000\");\n+\tBOOST_CHECK_EQUAL(balance.write(), \"0.00000000\");\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(totalsupply, 8, false), 100 *COIN - (nBalance1 + nBalance2));\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);\n "
      }
    ]
  },
  {
    "sha": "11517cb51c3734d185d3a1fec0abb5ba46ddac64",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTUxN2NiNTFjMzczNGQxODVkM2ExZmVjMGFiYjViYTQ2ZGRhYzY0",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:29:01Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:29:01Z"
      },
      "message": "fix test",
      "tree": {
        "sha": "0220737ef6cc70ce287f8c5abd204b2bfa3602fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0220737ef6cc70ce287f8c5abd204b2bfa3602fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11517cb51c3734d185d3a1fec0abb5ba46ddac64",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11517cb51c3734d185d3a1fec0abb5ba46ddac64",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11517cb51c3734d185d3a1fec0abb5ba46ddac64",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11517cb51c3734d185d3a1fec0abb5ba46ddac64/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b83ece3b8bd7bc372c26f4a75320383f719eff42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b83ece3b8bd7bc372c26f4a75320383f719eff42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b83ece3b8bd7bc372c26f4a75320383f719eff42"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 10,
      "deletions": 7
    },
    "files": [
      {
        "sha": "79dffdb759d5313f653006d0955af7ded3289216",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11517cb51c3734d185d3a1fec0abb5ba46ddac64/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11517cb51c3734d185d3a1fec0abb5ba46ddac64/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=11517cb51c3734d185d3a1fec0abb5ba46ddac64",
        "patch": "@@ -389,10 +389,8 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"interest_claim_height\").get_int(), find_value(r.get_obj(), \"height\").get_int());\n \n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + guid + \" false\"));\n-\tbalance = find_value(r.get_obj(), \"balance\");\n \tUniValue totalsupply = find_value(r.get_obj(), \"total_supply\");\n \tUniValue maxsupply = find_value(r.get_obj(), \"max_supply\");\n-\tBOOST_CHECK_EQUAL(balance.write(),\"0.00000000\");\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(totalsupply, 8, false), 50 * COIN);\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);\n \n@@ -409,20 +407,25 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"interest_claim_height\").get_int(), find_value(r.get_obj(), \"height\").get_int());\n \n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectioncheckreceiver1 false\"));\n-\tbalance = find_value(r.get_obj(), \"balance\");\n \tCAmount nBalance2 = AssetAmountFromValue(balance, 8, false);\n \tBOOST_CHECK_EQUAL(nBalance2, 3326296782);\n \tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"interest_claim_height\").get_int(), find_value(r.get_obj(), \"height\").get_int());\n \n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + guid + \" false\"));\n-\tbalance = find_value(r.get_obj(), \"balance\");\n \ttotalsupply = find_value(r.get_obj(), \"total_supply\");\n \tmaxsupply = find_value(r.get_obj(), \"max_supply\");\n-\tBOOST_CHECK_EQUAL(balance.write(), \"0.00000000\");\n-\tBOOST_CHECK_EQUAL(AssetAmountFromValue(totalsupply, 8, false), 100 *COIN - (nBalance1 + nBalance2));\n+\tBOOST_CHECK_EQUAL(AssetAmountFromValue(totalsupply, 8, false), (nBalance1 + nBalance2) - 100 * COIN);\n+\tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);\n+\tCAmount supplyRemaining = 100 * COIN - (nBalance1 + nBalance2);\n+\tAssetUpdate(\"node1\", guid, \"pub12\", ValueFromAssetAmount(supplyRemaining, 8, false).write());\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + guid + \" false\"));\n+\ttotalsupply = find_value(r.get_obj(), \"total_supply\");\n+\tmaxsupply = find_value(r.get_obj(), \"max_supply\");\n+\tBOOST_CHECK_EQUAL(AssetAmountFromValue(totalsupply, 8, false), 100 * COIN);\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);\n \n-\tAssetUpdate(\"node1\", guid, \"pub12\", \"5\");\n+\t// totalsupply > maxsupply\n+\tBOOST_CHECK_THROW(r = CallRPC(\"node2\", \"assetupdate \" + guid + \" jagassetupdate assets 0.001 0 ''\"));\n }\n BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_average_balance)\n {"
      }
    ]
  },
  {
    "sha": "2bf3250260a4d79a821b533f61b46e8db6f84e4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYmYzMjUwMjYwYTRkNzlhODIxYjUzM2Y2MWI0NmU4ZGI2Zjg0ZTRj",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:30:44Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:30:44Z"
      },
      "message": "fix test",
      "tree": {
        "sha": "6331d916576a4ce552ad626713734c41ab2e6c90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6331d916576a4ce552ad626713734c41ab2e6c90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2bf3250260a4d79a821b533f61b46e8db6f84e4c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bf3250260a4d79a821b533f61b46e8db6f84e4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2bf3250260a4d79a821b533f61b46e8db6f84e4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bf3250260a4d79a821b533f61b46e8db6f84e4c/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11517cb51c3734d185d3a1fec0abb5ba46ddac64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11517cb51c3734d185d3a1fec0abb5ba46ddac64",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11517cb51c3734d185d3a1fec0abb5ba46ddac64"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "657f747660c1fa85680f88f7fa2ab4ab4f7c2410",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bf3250260a4d79a821b533f61b46e8db6f84e4c/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bf3250260a4d79a821b533f61b46e8db6f84e4c/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=2bf3250260a4d79a821b533f61b46e8db6f84e4c",
        "patch": "@@ -414,7 +414,7 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + guid + \" false\"));\n \ttotalsupply = find_value(r.get_obj(), \"total_supply\");\n \tmaxsupply = find_value(r.get_obj(), \"max_supply\");\n-\tBOOST_CHECK_EQUAL(AssetAmountFromValue(totalsupply, 8, false), (nBalance1 + nBalance2) - 100 * COIN);\n+\tBOOST_CHECK_EQUAL(AssetAmountFromValue(totalsupply, 8, false), (nBalance1 + nBalance2));\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);\n \tCAmount supplyRemaining = 100 * COIN - (nBalance1 + nBalance2);\n \tAssetUpdate(\"node1\", guid, \"pub12\", ValueFromAssetAmount(supplyRemaining, 8, false).write());"
      }
    ]
  },
  {
    "sha": "9ced80878c13526b07fae5f197c35ea0e3e16330",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2VkODA4NzhjMTM1MjZiMDdmYWU1ZjE5N2MzNWVhMGUzZTE2MzMw",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:34:19Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:34:19Z"
      },
      "message": "compile",
      "tree": {
        "sha": "722853e55715e34073ebdf862e0e909942a532d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/722853e55715e34073ebdf862e0e909942a532d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ced80878c13526b07fae5f197c35ea0e3e16330",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ced80878c13526b07fae5f197c35ea0e3e16330",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ced80878c13526b07fae5f197c35ea0e3e16330",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ced80878c13526b07fae5f197c35ea0e3e16330/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2bf3250260a4d79a821b533f61b46e8db6f84e4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bf3250260a4d79a821b533f61b46e8db6f84e4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2bf3250260a4d79a821b533f61b46e8db6f84e4c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "39b9c70f3f5470baece1a95f932cabe30d70a16f",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ced80878c13526b07fae5f197c35ea0e3e16330/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ced80878c13526b07fae5f197c35ea0e3e16330/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=9ced80878c13526b07fae5f197c35ea0e3e16330",
        "patch": "@@ -425,7 +425,7 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);\n \n \t// totalsupply > maxsupply\n-\tBOOST_CHECK_THROW(r = CallRPC(\"node2\", \"assetupdate \" + guid + \" jagassetupdate assets 0.001 0 ''\"));\n+\tBOOST_CHECK_THROW(r = CallRPC(\"node2\", \"assetupdate \" + guid + \" jagassetupdate assets 0.001 0 ''\"), runtime_error);\n }\n BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_average_balance)\n {"
      }
    ]
  },
  {
    "sha": "ab433f08604fb2b3fb93b71d8f388d91ec71c015",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjQzM2YwODYwNGZiMmIzZmI5M2I3MWQ4ZjM4OGQ5MWVjNzFjMDE1",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:38:56Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:38:56Z"
      },
      "message": "fix test",
      "tree": {
        "sha": "ef242a8816a9be50e7f0ec9738895f29a7a3e487",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef242a8816a9be50e7f0ec9738895f29a7a3e487"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab433f08604fb2b3fb93b71d8f388d91ec71c015",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab433f08604fb2b3fb93b71d8f388d91ec71c015",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab433f08604fb2b3fb93b71d8f388d91ec71c015",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab433f08604fb2b3fb93b71d8f388d91ec71c015/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ced80878c13526b07fae5f197c35ea0e3e16330",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ced80878c13526b07fae5f197c35ea0e3e16330",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ced80878c13526b07fae5f197c35ea0e3e16330"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8427dbb6c19df5706b4bad5c64ba6b99af25c192",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab433f08604fb2b3fb93b71d8f388d91ec71c015/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab433f08604fb2b3fb93b71d8f388d91ec71c015/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=ab433f08604fb2b3fb93b71d8f388d91ec71c015",
        "patch": "@@ -407,6 +407,7 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"interest_claim_height\").get_int(), find_value(r.get_obj(), \"height\").get_int());\n \n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectioncheckreceiver1 false\"));\n+\tbalance = find_value(r.get_obj(), \"balance\");\n \tCAmount nBalance2 = AssetAmountFromValue(balance, 8, false);\n \tBOOST_CHECK_EQUAL(nBalance2, 3326296782);\n \tBOOST_CHECK_EQUAL(find_value(r.get_obj(), \"interest_claim_height\").get_int(), find_value(r.get_obj(), \"height\").get_int());"
      }
    ]
  },
  {
    "sha": "f5670e06a93d6078d8776a0a069bb85b2a3a57cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTY3MGUwNmE5M2Q2MDc4ZDg3NzZhMGEwNjliYjg1YjJhM2E1N2Nj",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:44:07Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:44:07Z"
      },
      "message": "fix test",
      "tree": {
        "sha": "c13a4c8acfad513e2f9eae4638e2a48c41c728f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c13a4c8acfad513e2f9eae4638e2a48c41c728f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5670e06a93d6078d8776a0a069bb85b2a3a57cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5670e06a93d6078d8776a0a069bb85b2a3a57cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5670e06a93d6078d8776a0a069bb85b2a3a57cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5670e06a93d6078d8776a0a069bb85b2a3a57cc/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab433f08604fb2b3fb93b71d8f388d91ec71c015",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab433f08604fb2b3fb93b71d8f388d91ec71c015",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab433f08604fb2b3fb93b71d8f388d91ec71c015"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1930d2c4471cb35abd2427683a29b8150fb1514f",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5670e06a93d6078d8776a0a069bb85b2a3a57cc/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5670e06a93d6078d8776a0a069bb85b2a3a57cc/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=f5670e06a93d6078d8776a0a069bb85b2a3a57cc",
        "patch": "@@ -418,15 +418,17 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(totalsupply, 8, false), (nBalance1 + nBalance2));\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);\n \tCAmount supplyRemaining = 100 * COIN - (nBalance1 + nBalance2);\n-\tAssetUpdate(\"node1\", guid, \"pub12\", ValueFromAssetAmount(supplyRemaining, 8, false).write());\n+\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetupdate \" + guid + \" jagassetupdate assets \" + ValueFromAssetAmount(supplyRemaining, 8, false).write() + \" 0 ''\"));\n+\tGenerateBlocks(5);\n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + guid + \" false\"));\n \ttotalsupply = find_value(r.get_obj(), \"total_supply\");\n \tmaxsupply = find_value(r.get_obj(), \"max_supply\");\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(totalsupply, 8, false), 100 * COIN);\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);\n \n \t// totalsupply > maxsupply\n-\tBOOST_CHECK_THROW(r = CallRPC(\"node2\", \"assetupdate \" + guid + \" jagassetupdate assets 0.001 0 ''\"), runtime_error);\n+\tBOOST_CHECK_THROW(r = CallRPC(\"node1\", \"assetupdate \" + guid + \" jagassetupdate assets 0.001 0 ''\"), runtime_error);\n }\n BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_average_balance)\n {"
      }
    ]
  },
  {
    "sha": "61f0a8fa11524ddadcb640c2592c66ddc6876a7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MWYwYThmYTExNTI0ZGRhZGNiNjQwYzI1OTJjNjZkZGM2ODc2YTdi",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:46:01Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:46:01Z"
      },
      "message": "comments",
      "tree": {
        "sha": "2072f242fb0e9736299c5e677798e0e5dbe565fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2072f242fb0e9736299c5e677798e0e5dbe565fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61f0a8fa11524ddadcb640c2592c66ddc6876a7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61f0a8fa11524ddadcb640c2592c66ddc6876a7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61f0a8fa11524ddadcb640c2592c66ddc6876a7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61f0a8fa11524ddadcb640c2592c66ddc6876a7b/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5670e06a93d6078d8776a0a069bb85b2a3a57cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5670e06a93d6078d8776a0a069bb85b2a3a57cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5670e06a93d6078d8776a0a069bb85b2a3a57cc"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a130e57fd2788aaedaeba0664865c674fb4e508e",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61f0a8fa11524ddadcb640c2592c66ddc6876a7b/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61f0a8fa11524ddadcb640c2592c66ddc6876a7b/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=61f0a8fa11524ddadcb640c2592c66ddc6876a7b",
        "patch": "@@ -399,7 +399,7 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \t// calc interest expect 20 (1 + 0.1 / 60) ^ (60(1)) = ~22.13 and 30 (1 + 0.1 / 60) ^ (60(1)) = ~33.26\n \tAssetClaimInterest(\"node1\", guid, \"jagassetcollectioncheckreceiver\");\n \tAssetClaimInterest(\"node1\", guid, \"jagassetcollectioncheckreceiver1\");\n-\n+\t// ensure total supply and individual supplies are correct after interest claims\n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetallocationinfo \" + guid + \" jagassetcollectioncheckreceiver false\"));\n \tbalance = find_value(r.get_obj(), \"balance\");\n \tCAmount nBalance1 = AssetAmountFromValue(balance, 8, false);\n@@ -418,7 +418,7 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(totalsupply, 8, false), (nBalance1 + nBalance2));\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);\n \tCAmount supplyRemaining = 100 * COIN - (nBalance1 + nBalance2);\n-\n+\t// mint up to the max supply\n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetupdate \" + guid + \" jagassetupdate assets \" + ValueFromAssetAmount(supplyRemaining, 8, false).write() + \" 0 ''\"));\n \tGenerateBlocks(5);\n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + guid + \" false\"));\n@@ -427,7 +427,7 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(totalsupply, 8, false), 100 * COIN);\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);\n \n-\t// totalsupply > maxsupply\n+\t// totalsupply cannot go > maxsupply\n \tBOOST_CHECK_THROW(r = CallRPC(\"node1\", \"assetupdate \" + guid + \" jagassetupdate assets 0.001 0 ''\"), runtime_error);\n }\n BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_average_balance)"
      }
    ]
  },
  {
    "sha": "9555aa4f684ac5bb6b0f4cbb6cf1681b19ca3814",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTU1YWE0ZjY4NGFjNWJiNmIwZjRjYmI2Y2YxNjgxYjE5Y2EzODE0",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:47:31Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:47:31Z"
      },
      "message": "fix test",
      "tree": {
        "sha": "dde306f8380c31ccd563c984de56e35f4529b1c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dde306f8380c31ccd563c984de56e35f4529b1c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9555aa4f684ac5bb6b0f4cbb6cf1681b19ca3814",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9555aa4f684ac5bb6b0f4cbb6cf1681b19ca3814",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9555aa4f684ac5bb6b0f4cbb6cf1681b19ca3814",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9555aa4f684ac5bb6b0f4cbb6cf1681b19ca3814/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61f0a8fa11524ddadcb640c2592c66ddc6876a7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61f0a8fa11524ddadcb640c2592c66ddc6876a7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61f0a8fa11524ddadcb640c2592c66ddc6876a7b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "74eae6412cda3422ee374e02d2b9a2346826f28f",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9555aa4f684ac5bb6b0f4cbb6cf1681b19ca3814/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9555aa4f684ac5bb6b0f4cbb6cf1681b19ca3814/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=9555aa4f684ac5bb6b0f4cbb6cf1681b19ca3814",
        "patch": "@@ -419,7 +419,7 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);\n \tCAmount supplyRemaining = 100 * COIN - (nBalance1 + nBalance2);\n \t// mint up to the max supply\n-\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetupdate \" + guid + \" jagassetupdate assets \" + ValueFromAssetAmount(supplyRemaining, 8, false).write() + \" 0 ''\"));\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetupdate \" + guid + \" jagassetupdate assets \" + ValueFromAssetAmount(supplyRemaining, 8, false).write() + \" 0.1 ''\"));\n \tGenerateBlocks(5);\n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + guid + \" false\"));\n \ttotalsupply = find_value(r.get_obj(), \"total_supply\");"
      }
    ]
  },
  {
    "sha": "93d82cc98176c04ae1c32360162a6eff02009001",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2Q4MmNjOTgxNzZjMDRhZTFjMzIzNjAxNjJhNmVmZjAyMDA5MDAx",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:48:06Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:48:06Z"
      },
      "message": "update test",
      "tree": {
        "sha": "6c8afbde367c0bef276fd54a1f9e1a46db070f21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c8afbde367c0bef276fd54a1f9e1a46db070f21"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93d82cc98176c04ae1c32360162a6eff02009001",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93d82cc98176c04ae1c32360162a6eff02009001",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93d82cc98176c04ae1c32360162a6eff02009001",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93d82cc98176c04ae1c32360162a6eff02009001/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9555aa4f684ac5bb6b0f4cbb6cf1681b19ca3814",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9555aa4f684ac5bb6b0f4cbb6cf1681b19ca3814",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9555aa4f684ac5bb6b0f4cbb6cf1681b19ca3814"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "45c0b57cd82792b1b89aa52a7538a9f8f34790b1",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93d82cc98176c04ae1c32360162a6eff02009001/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93d82cc98176c04ae1c32360162a6eff02009001/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=93d82cc98176c04ae1c32360162a6eff02009001",
        "patch": "@@ -428,7 +428,7 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \tBOOST_CHECK_EQUAL(AssetAmountFromValue(maxsupply, 8, false), 100 * COIN);\n \n \t// totalsupply cannot go > maxsupply\n-\tBOOST_CHECK_THROW(r = CallRPC(\"node1\", \"assetupdate \" + guid + \" jagassetupdate assets 0.001 0 ''\"), runtime_error);\n+\tBOOST_CHECK_THROW(r = CallRPC(\"node1\", \"assetupdate \" + guid + \" jagassetupdate assets 0.001 0.1 ''\"), runtime_error);\n }\n BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_average_balance)\n {"
      }
    ]
  },
  {
    "sha": "517b5386d94167d4f8081b2b48a7a7b088d0ec19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTdiNTM4NmQ5NDE2N2Q0ZjgwODFiMmI0OGE3YTdiMDg4ZDBlYzE5",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:49:16Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:49:16Z"
      },
      "message": "sign and send",
      "tree": {
        "sha": "8f625a407efbe5bdc1e7fb44681c31ff7d0d9eef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f625a407efbe5bdc1e7fb44681c31ff7d0d9eef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/517b5386d94167d4f8081b2b48a7a7b088d0ec19",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/517b5386d94167d4f8081b2b48a7a7b088d0ec19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/517b5386d94167d4f8081b2b48a7a7b088d0ec19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/517b5386d94167d4f8081b2b48a7a7b088d0ec19/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93d82cc98176c04ae1c32360162a6eff02009001",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93d82cc98176c04ae1c32360162a6eff02009001",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93d82cc98176c04ae1c32360162a6eff02009001"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0acd863afb71a9a4bf570e0dba35dbe5a4ef492e",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/517b5386d94167d4f8081b2b48a7a7b088d0ec19/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/517b5386d94167d4f8081b2b48a7a7b088d0ec19/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=517b5386d94167d4f8081b2b48a7a7b088d0ec19",
        "patch": "@@ -420,7 +420,12 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \tCAmount supplyRemaining = 100 * COIN - (nBalance1 + nBalance2);\n \t// mint up to the max supply\n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetupdate \" + guid + \" jagassetupdate assets \" + ValueFromAssetAmount(supplyRemaining, 8, false).write() + \" 0.1 ''\"));\n+\tUniValue arr = r.get_array();\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(node, \"signrawtransaction \" + arr[0].get_str()));\n+\tstring hex_str = find_value(r.get_obj(), \"hex\").get_str();\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(node, \"syscoinsendrawtransaction \" + hex_str));\n \tGenerateBlocks(5);\n+\n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + guid + \" false\"));\n \ttotalsupply = find_value(r.get_obj(), \"total_supply\");\n \tmaxsupply = find_value(r.get_obj(), \"max_supply\");"
      }
    ]
  },
  {
    "sha": "3499dad2467687597c53098a488eb277505cbfbf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDk5ZGFkMjQ2NzY4NzU5N2M1MzA5OGE0ODhlYjI3NzUwNWNiZmJm",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:49:30Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:49:30Z"
      },
      "message": "fix node1 str",
      "tree": {
        "sha": "4c3156b082ea7d71134713b944156fe34f58b83a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c3156b082ea7d71134713b944156fe34f58b83a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3499dad2467687597c53098a488eb277505cbfbf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3499dad2467687597c53098a488eb277505cbfbf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3499dad2467687597c53098a488eb277505cbfbf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3499dad2467687597c53098a488eb277505cbfbf/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "517b5386d94167d4f8081b2b48a7a7b088d0ec19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/517b5386d94167d4f8081b2b48a7a7b088d0ec19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/517b5386d94167d4f8081b2b48a7a7b088d0ec19"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7f312be41a7b1f21e847b81d5c0d54bbffcfe11a",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3499dad2467687597c53098a488eb277505cbfbf/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3499dad2467687597c53098a488eb277505cbfbf/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=3499dad2467687597c53098a488eb277505cbfbf",
        "patch": "@@ -421,9 +421,9 @@ BOOST_AUTO_TEST_CASE(generate_asset_collect_interest_checktotalsupply)\n \t// mint up to the max supply\n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetupdate \" + guid + \" jagassetupdate assets \" + ValueFromAssetAmount(supplyRemaining, 8, false).write() + \" 0.1 ''\"));\n \tUniValue arr = r.get_array();\n-\tBOOST_CHECK_NO_THROW(r = CallRPC(node, \"signrawtransaction \" + arr[0].get_str()));\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"signrawtransaction \" + arr[0].get_str()));\n \tstring hex_str = find_value(r.get_obj(), \"hex\").get_str();\n-\tBOOST_CHECK_NO_THROW(r = CallRPC(node, \"syscoinsendrawtransaction \" + hex_str));\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"syscoinsendrawtransaction \" + hex_str));\n \tGenerateBlocks(5);\n \n \tBOOST_CHECK_NO_THROW(r = CallRPC(\"node1\", \"assetinfo \" + guid + \" false\"));"
      }
    ]
  },
  {
    "sha": "2001b88e14570e9a53f2222fb89c3e06d6b502b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDAxYjg4ZTE0NTcwZTlhNTNmMjIyMmZiODljM2UwNmQ2YjUwMmI1",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:55:29Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-22T17:55:29Z"
      },
      "message": "unit fUnitTest",
      "tree": {
        "sha": "22821f6af0281976d077fc519e58cc8a1eed18a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22821f6af0281976d077fc519e58cc8a1eed18a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2001b88e14570e9a53f2222fb89c3e06d6b502b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2001b88e14570e9a53f2222fb89c3e06d6b502b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2001b88e14570e9a53f2222fb89c3e06d6b502b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2001b88e14570e9a53f2222fb89c3e06d6b502b5/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3499dad2467687597c53098a488eb277505cbfbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3499dad2467687597c53098a488eb277505cbfbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3499dad2467687597c53098a488eb277505cbfbf"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "fbfb013292313471ca9e05e0a7826031477052c8",
        "filename": "src/asset.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2001b88e14570e9a53f2222fb89c3e06d6b502b5/src/asset.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2001b88e14570e9a53f2222fb89c3e06d6b502b5/src/asset.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/asset.cpp?ref=2001b88e14570e9a53f2222fb89c3e06d6b502b5",
        "patch": "@@ -1019,7 +1019,7 @@ UniValue assetsend(const UniValue& params, bool fHelp) {\n \tCScript scriptPubKey;\n \n \tCAssetAllocationTuple assetAllocationTuple(vchAsset, vchAliasFrom);\n-\tif (!GetBoolArg(\"-unittest\", false)) {\n+\tif (!fUnitTest) {\n \t\t// check to see if a transaction for this asset/alias tuple has arrived before minimum latency period\n \t\tArrivalTimesMap arrivalTimes;\n \t\tpassetallocationdb->ReadISArrivalTimes(assetAllocationTuple, arrivalTimes);"
      },
      {
        "sha": "dc3ee658182eb57c59087af23957e9d549df3e11",
        "filename": "src/cert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2001b88e14570e9a53f2222fb89c3e06d6b502b5/src/cert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2001b88e14570e9a53f2222fb89c3e06d6b502b5/src/cert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cert.cpp?ref=2001b88e14570e9a53f2222fb89c3e06d6b502b5",
        "patch": "@@ -711,7 +711,7 @@ UniValue certtransfer(const UniValue& params, bool fHelp) {\n     if (!GetCert( vchCert, theCert))\n         throw runtime_error(\"SYSCOIN_CERTIFICATE_RPC_ERROR: ERRCODE: 3504 - \" + _(\"Could not find a certificate with this key\"));\n \n-\tif (!GetBoolArg(\"-unittest\", false)) {\n+\tif (!fUnitTest) {\n \t\tArrivalTimesMap arrivalTimes;\n \t\tpcertdb->ReadISArrivalTimes(vchCert, arrivalTimes);\n \t\tconst int64_t & nNow = duration_cast<seconds>(system_clock::now().time_since_epoch()).count();"
      },
      {
        "sha": "1f0210d77f6a6edd28ed0b27f8d9eac1ae1abbdd",
        "filename": "src/offer.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2001b88e14570e9a53f2222fb89c3e06d6b502b5/src/offer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2001b88e14570e9a53f2222fb89c3e06d6b502b5/src/offer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/offer.cpp?ref=2001b88e14570e9a53f2222fb89c3e06d6b502b5",
        "patch": "@@ -1036,7 +1036,7 @@ UniValue offerupdate(const UniValue& params, bool fHelp) {\n \tif (!GetOffer( vchOffer, theOffer))\n \t\tthrow runtime_error(\"SYSCOIN_OFFER_RPC_ERROR ERRCODE: 1534 - \" + _(\"Could not find offer with this guid\"));\n \n-\tif (!GetBoolArg(\"-unittest\", false)) {\n+\tif (!fUnitTest) {\n \t\tArrivalTimesMap arrivalTimes;\n \t\tpofferdb->ReadISArrivalTimes(vchOffer, arrivalTimes);\n \t\tconst int64_t & nNow = duration_cast<seconds>(system_clock::now().time_since_epoch()).count();"
      }
    ]
  },
  {
    "sha": "0eb2edebe73f971c92c9b85dc7b0234f21d3cc89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWIyZWRlYmU3M2Y5NzFjOTJjOWI4NWRjN2IwMjM0ZjIxZDNjYzg5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-17T23:28:28Z"
      },
      "committer": {
        "name": "Willy Ko",
        "email": "wko@blockchainfoundry.co",
        "date": "2018-04-23T22:46:05Z"
      },
      "message": "Avoid VLA in hash.h",
      "tree": {
        "sha": "84ee345e3dd0c1781fd7d508617b76ff8678514f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84ee345e3dd0c1781fd7d508617b76ff8678514f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0eb2edebe73f971c92c9b85dc7b0234f21d3cc89",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eb2edebe73f971c92c9b85dc7b0234f21d3cc89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0eb2edebe73f971c92c9b85dc7b0234f21d3cc89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eb2edebe73f971c92c9b85dc7b0234f21d3cc89/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "willyko",
      "id": 11524904,
      "node_id": "MDQ6VXNlcjExNTI0OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11524904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willyko",
      "html_url": "https://github.com/willyko",
      "followers_url": "https://api.github.com/users/willyko/followers",
      "following_url": "https://api.github.com/users/willyko/following{/other_user}",
      "gists_url": "https://api.github.com/users/willyko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willyko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willyko/subscriptions",
      "organizations_url": "https://api.github.com/users/willyko/orgs",
      "repos_url": "https://api.github.com/users/willyko/repos",
      "events_url": "https://api.github.com/users/willyko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willyko/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2001b88e14570e9a53f2222fb89c3e06d6b502b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2001b88e14570e9a53f2222fb89c3e06d6b502b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2001b88e14570e9a53f2222fb89c3e06d6b502b5"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 34,
      "deletions": 34
    },
    "files": [
      {
        "sha": "5002d632d43ebdd9188544be2b40e88607f9fb70",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 34,
        "deletions": 34,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0eb2edebe73f971c92c9b85dc7b0234f21d3cc89/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0eb2edebe73f971c92c9b85dc7b0234f21d3cc89/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=0eb2edebe73f971c92c9b85dc7b0234f21d3cc89",
        "patch": "@@ -23,47 +23,47 @@ class CHash256 {\n private:\n \tCSHA256 sha;\n public:\n-\tstatic const size_t OUTPUT_SIZE = CSHA256::OUTPUT_SIZE;\n-\n-\tvoid Finalize(unsigned char hash[OUTPUT_SIZE]) {\n-\t\tunsigned char buf[sha.OUTPUT_SIZE];\n-\t\tsha.Finalize(buf);\n-\t\tsha.Reset().Write(buf, sha.OUTPUT_SIZE).Finalize(hash);\n-\t}\n-\n-\tCHash256& Write(const unsigned char *data, size_t len) {\n-\t\tsha.Write(data, len);\n-\t\treturn *this;\n-\t}\n-\n-\tCHash256& Reset() {\n-\t\tsha.Reset();\n-\t\treturn *this;\n-\t}\n+    static const size_t OUTPUT_SIZE = CSHA256::OUTPUT_SIZE;\n+\n+    void Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+        unsigned char buf[CSHA256::OUTPUT_SIZE];\n+        sha.Finalize(buf);\n+        sha.Reset().Write(buf, CSHA256::OUTPUT_SIZE).Finalize(hash);\n+    }\n+\n+    CHash256& Write(const unsigned char *data, size_t len) {\n+        sha.Write(data, len);\n+        return *this;\n+    }\n+\n+    CHash256& Reset() {\n+        sha.Reset();\n+        return *this;\n+    }\n };\n \n /** A hasher class for Syscoin's 160-bit hash (SHA-256 + RIPEMD-160). */\n class CHash160 {\n private:\n \tCSHA256 sha;\n public:\n-\tstatic const size_t OUTPUT_SIZE = CRIPEMD160::OUTPUT_SIZE;\n-\n-\tvoid Finalize(unsigned char hash[OUTPUT_SIZE]) {\n-\t\tunsigned char buf[sha.OUTPUT_SIZE];\n-\t\tsha.Finalize(buf);\n-\t\tCRIPEMD160().Write(buf, sha.OUTPUT_SIZE).Finalize(hash);\n-\t}\n-\n-\tCHash160& Write(const unsigned char *data, size_t len) {\n-\t\tsha.Write(data, len);\n-\t\treturn *this;\n-\t}\n-\n-\tCHash160& Reset() {\n-\t\tsha.Reset();\n-\t\treturn *this;\n-\t}\n+    static const size_t OUTPUT_SIZE = CRIPEMD160::OUTPUT_SIZE;\n+\n+    void Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+        unsigned char buf[CSHA256::OUTPUT_SIZE];\n+        sha.Finalize(buf);\n+        CRIPEMD160().Write(buf, CSHA256::OUTPUT_SIZE).Finalize(hash);\n+    }\n+\n+    CHash160& Write(const unsigned char *data, size_t len) {\n+        sha.Write(data, len);\n+        return *this;\n+    }\n+\n+    CHash160& Reset() {\n+        sha.Reset();\n+        return *this;\n+    }\n };\n \n /** Compute the 256-bit hash of an object. */"
      }
    ]
  },
  {
    "sha": "ae2e2a00d8b615f078c4b460d5ce49efc4334ded",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTJlMmEwMGQ4YjYxNWYwNzhjNGI0NjBkNWNlNDllZmM0MzM0ZGVk",
    "commit": {
      "author": {
        "name": "Willy Ko",
        "email": "wko@blockchainfoundry.co",
        "date": "2018-04-23T22:55:51Z"
      },
      "committer": {
        "name": "Willy Ko",
        "email": "wko@blockchainfoundry.co",
        "date": "2018-04-23T22:55:51Z"
      },
      "message": "fixed warning for lld vs ld",
      "tree": {
        "sha": "47c446e0379eae420c318646e4e136bcfcbef55b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47c446e0379eae420c318646e4e136bcfcbef55b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae2e2a00d8b615f078c4b460d5ce49efc4334ded",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae2e2a00d8b615f078c4b460d5ce49efc4334ded",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae2e2a00d8b615f078c4b460d5ce49efc4334ded",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae2e2a00d8b615f078c4b460d5ce49efc4334ded/comments",
    "author": {
      "login": "willyko",
      "id": 11524904,
      "node_id": "MDQ6VXNlcjExNTI0OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11524904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willyko",
      "html_url": "https://github.com/willyko",
      "followers_url": "https://api.github.com/users/willyko/followers",
      "following_url": "https://api.github.com/users/willyko/following{/other_user}",
      "gists_url": "https://api.github.com/users/willyko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willyko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willyko/subscriptions",
      "organizations_url": "https://api.github.com/users/willyko/orgs",
      "repos_url": "https://api.github.com/users/willyko/repos",
      "events_url": "https://api.github.com/users/willyko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willyko/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "willyko",
      "id": 11524904,
      "node_id": "MDQ6VXNlcjExNTI0OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11524904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willyko",
      "html_url": "https://github.com/willyko",
      "followers_url": "https://api.github.com/users/willyko/followers",
      "following_url": "https://api.github.com/users/willyko/following{/other_user}",
      "gists_url": "https://api.github.com/users/willyko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willyko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willyko/subscriptions",
      "organizations_url": "https://api.github.com/users/willyko/orgs",
      "repos_url": "https://api.github.com/users/willyko/repos",
      "events_url": "https://api.github.com/users/willyko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willyko/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0eb2edebe73f971c92c9b85dc7b0234f21d3cc89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0eb2edebe73f971c92c9b85dc7b0234f21d3cc89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0eb2edebe73f971c92c9b85dc7b0234f21d3cc89"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "d0abd2ddf81ed25f1675c5bbfb4e079391bf2d6a",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae2e2a00d8b615f078c4b460d5ce49efc4334ded/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae2e2a00d8b615f078c4b460d5ce49efc4334ded/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=ae2e2a00d8b615f078c4b460d5ce49efc4334ded",
        "patch": "@@ -22,7 +22,7 @@ BOOST_GLOBAL_FIXTURE( SyscoinTestingSetup );\n \n void printRangeVector (vector<CRange> &vecRange, string tag) {\n \tprintf(\"Printing vector range %s: \", tag.c_str());\n-\tfor(int index = 0; index < vecRange.size(); index++) {\n+\tfor(size_t index = 0; index < vecRange.size(); index++) {\n \t\tprintf(\"{%i,%i} \", vecRange[index].start, vecRange[index].end);\n \t}\n \tprintf(\"\\n\");\n@@ -115,20 +115,20 @@ BOOST_AUTO_TEST_CASE(generate_range_complex)\n \tms1 = duration_cast<milliseconds>(system_clock::now().time_since_epoch()).count();\n \tCheckRangeMerge(input1, input2, expected_output);\n \tms2 = duration_cast<milliseconds>(system_clock::now().time_since_epoch()).count();\n-\tprintf(\"CheckRangeMerge Completed %ldms\\n\", ms2-ms1);\n+\tprintf(\"CheckRangeMerge Completed %lldms\\n\", ms2-ms1);\n \n \t/* Test 2: Reverse of Test 1 (expected_output - input = 2) */\n  \tprintf(\"RangeSubstract Test: ExpectedOutput - input1 = input2\\n\");\t\n \tms1 = duration_cast<milliseconds>(system_clock::now().time_since_epoch()).count();\n \tCheckRangeSubtract(expected_output, input1, input2);\n \tms2 = duration_cast<milliseconds>(system_clock::now().time_since_epoch()).count();\n-\tprintf(\"CheckRangeSubtract1 Completed %ldms\\n\", ms2-ms1);\n+\tprintf(\"CheckRangeSubtract1 Completed %lldms\\n\", ms2-ms1);\n \n  \tprintf(\"RangeSubstract Test: ExpectedOutput - input2 = input1\\n\");\t\n \tms1 = duration_cast<milliseconds>(system_clock::now().time_since_epoch()).count();\n \tCheckRangeSubtract(expected_output, input2, input1);\n \tms2 = duration_cast<milliseconds>(system_clock::now().time_since_epoch()).count();\n-\tprintf(\"CheckRangeSubtract2 Completed %ldms\\n\", ms2-ms1);\n+\tprintf(\"CheckRangeSubtract2 Completed %lldms\\n\", ms2-ms1);\n }\n BOOST_AUTO_TEST_CASE(generate_range_stress_merge1) \n {\n@@ -156,7 +156,7 @@ BOOST_AUTO_TEST_CASE(generate_range_stress_merge1)\n \tmergeRanges(vecRange1_i, vecRange_o);\n \tms2 = duration_cast<milliseconds>(system_clock::now().time_since_epoch()).count();\n \n-\tprintf(\"\\noutput range 1+2: merge time: %ldms\\n\", ms2-ms1);\n+\tprintf(\"\\noutput range 1+2: merge time: %lldms\\n\", ms2-ms1);\n \n \tBOOST_CHECK(vecRange_o.size() == vecRange_expected.size());\n \tBOOST_CHECK(vecRange_o.back() == vecRange_expected.back());\n@@ -209,7 +209,7 @@ BOOST_AUTO_TEST_CASE(generate_range_stress_subtract1)\n \tms1 = duration_cast<milliseconds>(system_clock::now().time_since_epoch()).count();\n \tmergeRanges(vecRange2_i, vecRange2_o);\n \tms2 = duration_cast<milliseconds>(system_clock::now().time_since_epoch()).count();\n-\tprintf(\"\\noutput range expected+2: merge time: %ld\\n\", ms2-ms1);\n+\tprintf(\"\\noutput range expected+2: merge time: %lld\\n\", ms2-ms1);\n \n \tBOOST_CHECK_EQUAL(vecRange2_o.size(), vecRange1_i.size());\n \tBOOST_CHECK_EQUAL(vecRange2_o.back().start, 0);\n@@ -248,7 +248,7 @@ BOOST_AUTO_TEST_CASE(generate_range_stress_merge2)\n \tBOOST_CHECK_EQUAL(vecRange_o[99998].end, 200001); \n \tBOOST_CHECK_EQUAL(vecRange_o[449991].start, 899999); \n \tBOOST_CHECK_EQUAL(vecRange_o[449991].end, 900001); \n-\tprintf(\"CheckRangeSubtract Completed %ldms\\n\", ms2-ms1);\n+\tprintf(\"CheckRangeSubtract Completed %lldms\\n\", ms2-ms1);\n }\n BOOST_AUTO_TEST_CASE(generate_range_stress_subtract2) \n {\n@@ -276,7 +276,7 @@ BOOST_AUTO_TEST_CASE(generate_range_stress_subtract2)\n \n \t//HARDCODED checks\n \tBOOST_CHECK_EQUAL(vecRange_o.size(), 499991);\n-\tprintf(\"CheckRangeSubtract Completed %ldms\\n\", ms2-ms1);\n+\tprintf(\"CheckRangeSubtract Completed %lldms\\n\", ms2-ms1);\n }\n \n BOOST_AUTO_TEST_CASE(generate_big_assetdata)"
      }
    ]
  },
  {
    "sha": "a28123b24a3e92f72e5b4b5eac3d939ee64b9718",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjgxMjNiMjRhM2U5MmY3MmU1YjRiNWVhYzNkOTM5ZWU2NGI5NzE4",
    "commit": {
      "author": {
        "name": "Willy Ko",
        "email": "wko@blockchainfoundry.co",
        "date": "2018-04-24T23:20:04Z"
      },
      "committer": {
        "name": "Willy Ko",
        "email": "wko@blockchainfoundry.co",
        "date": "2018-04-24T23:20:04Z"
      },
      "message": "Increased max size of encryption pub/priv key",
      "tree": {
        "sha": "8a313dd81552583d0fb9eddb16a3bceeedae69f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a313dd81552583d0fb9eddb16a3bceeedae69f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a28123b24a3e92f72e5b4b5eac3d939ee64b9718",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a28123b24a3e92f72e5b4b5eac3d939ee64b9718",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a28123b24a3e92f72e5b4b5eac3d939ee64b9718",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a28123b24a3e92f72e5b4b5eac3d939ee64b9718/comments",
    "author": {
      "login": "willyko",
      "id": 11524904,
      "node_id": "MDQ6VXNlcjExNTI0OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11524904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willyko",
      "html_url": "https://github.com/willyko",
      "followers_url": "https://api.github.com/users/willyko/followers",
      "following_url": "https://api.github.com/users/willyko/following{/other_user}",
      "gists_url": "https://api.github.com/users/willyko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willyko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willyko/subscriptions",
      "organizations_url": "https://api.github.com/users/willyko/orgs",
      "repos_url": "https://api.github.com/users/willyko/repos",
      "events_url": "https://api.github.com/users/willyko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willyko/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "willyko",
      "id": 11524904,
      "node_id": "MDQ6VXNlcjExNTI0OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11524904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willyko",
      "html_url": "https://github.com/willyko",
      "followers_url": "https://api.github.com/users/willyko/followers",
      "following_url": "https://api.github.com/users/willyko/following{/other_user}",
      "gists_url": "https://api.github.com/users/willyko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willyko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willyko/subscriptions",
      "organizations_url": "https://api.github.com/users/willyko/orgs",
      "repos_url": "https://api.github.com/users/willyko/repos",
      "events_url": "https://api.github.com/users/willyko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willyko/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae2e2a00d8b615f078c4b460d5ce49efc4334ded",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae2e2a00d8b615f078c4b460d5ce49efc4334ded",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae2e2a00d8b615f078c4b460d5ce49efc4334ded"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f601f3ed1b1132d89a18de557f6f12b692c1540d",
        "filename": "src/alias.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a28123b24a3e92f72e5b4b5eac3d939ee64b9718/src/alias.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a28123b24a3e92f72e5b4b5eac3d939ee64b9718/src/alias.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alias.h?ref=a28123b24a3e92f72e5b4b5eac3d939ee64b9718",
        "patch": "@@ -23,7 +23,7 @@ static const unsigned int MAX_NAME_LENGTH = 256;\n static const unsigned int MAX_VALUE_LENGTH = 512;\n static const unsigned int MAX_SYMBOL_LENGTH = 8;\n static const unsigned int MIN_SYMBOL_LENGTH = 1;\n-static const unsigned int MAX_ENCRYPTED_GUID_LENGTH = MAX_GUID_LENGTH + 85;\n+static const unsigned int MAX_ENCRYPTED_GUID_LENGTH = MAX_GUID_LENGTH + 105;\n static const uint64_t ONE_YEAR_IN_SECONDS = 31536000;\n enum {\n \tALIAS=0,"
      }
    ]
  },
  {
    "sha": "3cfa5920449db96727d4667c3ad7ed8182c5a2c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2ZhNTkyMDQ0OWRiOTY3MjdkNDY2N2MzYWQ3ZWQ4MTgyYzVhMmMx",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-27T05:12:41Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-27T05:12:41Z"
      },
      "message": "update max enc length",
      "tree": {
        "sha": "059153ac50a76537e1f673300908a5863d7de363",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/059153ac50a76537e1f673300908a5863d7de363"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cfa5920449db96727d4667c3ad7ed8182c5a2c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cfa5920449db96727d4667c3ad7ed8182c5a2c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cfa5920449db96727d4667c3ad7ed8182c5a2c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cfa5920449db96727d4667c3ad7ed8182c5a2c1/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a28123b24a3e92f72e5b4b5eac3d939ee64b9718",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a28123b24a3e92f72e5b4b5eac3d939ee64b9718",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a28123b24a3e92f72e5b4b5eac3d939ee64b9718"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d76e58cb85fd6d4a65b1f55b5422f7be2d3dd6b4",
        "filename": "src/alias.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cfa5920449db96727d4667c3ad7ed8182c5a2c1/src/alias.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cfa5920449db96727d4667c3ad7ed8182c5a2c1/src/alias.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alias.h?ref=3cfa5920449db96727d4667c3ad7ed8182c5a2c1",
        "patch": "@@ -23,7 +23,7 @@ static const unsigned int MAX_NAME_LENGTH = 256;\n static const unsigned int MAX_VALUE_LENGTH = 512;\n static const unsigned int MAX_SYMBOL_LENGTH = 8;\n static const unsigned int MIN_SYMBOL_LENGTH = 1;\n-static const unsigned int MAX_ENCRYPTED_GUID_LENGTH = MAX_GUID_LENGTH + 105;\n+static const unsigned int MAX_ENCRYPTED_GUID_LENGTH = MAX_NAME_LENGTH;\n static const uint64_t ONE_YEAR_IN_SECONDS = 31536000;\n enum {\n \tALIAS=0,"
      }
    ]
  },
  {
    "sha": "832ec342b9eaae65545676fa2782fa92adfb393d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzJlYzM0MmI5ZWFhZTY1NTQ1Njc2ZmEyNzgyZmE5MmFkZmIzOTNk",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-27T05:34:02Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-27T05:34:02Z"
      },
      "message": "check for alias input in listtx properly",
      "tree": {
        "sha": "af85694e24bf5b84b178b3a576393a793ae5e173",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af85694e24bf5b84b178b3a576393a793ae5e173"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/832ec342b9eaae65545676fa2782fa92adfb393d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/832ec342b9eaae65545676fa2782fa92adfb393d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/832ec342b9eaae65545676fa2782fa92adfb393d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/832ec342b9eaae65545676fa2782fa92adfb393d/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cfa5920449db96727d4667c3ad7ed8182c5a2c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cfa5920449db96727d4667c3ad7ed8182c5a2c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cfa5920449db96727d4667c3ad7ed8182c5a2c1"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 12,
      "deletions": 8
    },
    "files": [
      {
        "sha": "850864bcec69f81d5e783270a4856aa6bf48cf6e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/832ec342b9eaae65545676fa2782fa92adfb393d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/832ec342b9eaae65545676fa2782fa92adfb393d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=832ec342b9eaae65545676fa2782fa92adfb393d",
        "patch": "@@ -1715,12 +1715,14 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n \t\t\t\tentry.push_back(Pair(\"systx\", strResponse));\n \t\t\t\tentry.push_back(Pair(\"systype\", strResponseEnglish));\n \t\t\t\tentry.push_back(Pair(\"sysguid\", strResponseGUID));\n-\t\t\t\t{\n-\t\t\t\t\tLOCK(cs_main);\n-\t\t\t\t\tif (!FindAliasInTx(wtx, aliasVvch)) {\n-\t\t\t\t\t\tcontinue;\n+\t\t\t\tfor (auto& vin : wtx.tx->vin) {\n+\t\t\t\t\tif (!pwalletMain || !pwalletMain->mapWallet.count(vin.prevout.hash)) break;\n+\t\t\t\t\tif (DecodeAliasScript(pwalletMain->mapWallet[vin.prevout.hash].tx->vout[vin.prevout.n].scriptPubKey, aliasOp, aliasVvch)) {\n+\t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n \t\t\t\t}\n+\t\t\t\tif (aliasVvch.empty())\n+\t\t\t\t\tcontinue;\n \t\t\t\taliasName = stringFromVch(aliasVvch[0]);\n \t\t\t\t\t\n \t\t\t\tentry.push_back(Pair(\"sysalias\", aliasName));\n@@ -1807,12 +1809,14 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n \t\t\t\t\tentry.push_back(Pair(\"systx\", strResponse));\n \t\t\t\t\tentry.push_back(Pair(\"systype\", strResponseEnglish));\n \t\t\t\t\tentry.push_back(Pair(\"sysguid\", strResponseGUID));\n-\t\t\t\t\t{\n-\t\t\t\t\t\tLOCK(cs_main);\n-\t\t\t\t\t\tif (!FindAliasInTx(wtx, aliasVvch)) {\n-\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\tfor(auto& vin: wtx.tx->vin){\n+\t\t\t\t\t\tif (!pwalletMain || !pwalletMain->mapWallet.count(vin.prevout.hash)) break;\n+\t\t\t\t\t\tif (DecodeAliasScript(pwalletMain->mapWallet[vin.prevout.hash].tx->vout[vin.prevout.n].scriptPubKey, aliasOp, aliasVvch)) {\n+\t\t\t\t\t\t\tbreak;\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n+\t\t\t\t\tif (aliasVvch.empty())\n+\t\t\t\t\t\tcontinue;\n \t\t\t\t\taliasName = stringFromVch(aliasVvch[0]);\n \n \t\t\t\t\tentry.push_back(Pair(\"sysalias\", aliasName));"
      }
    ]
  },
  {
    "sha": "159f71c56eb718db36cf2f1602a1b97900060f88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTlmNzFjNTZlYjcxOGRiMzZjZjJmMTYwMmExYjk3OTAwMDYwZjg4",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-27T05:44:36Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-27T05:44:36Z"
      },
      "message": "refactor asset check",
      "tree": {
        "sha": "7a6124d9b963ad39af9e6b01e415b791b1ffdeb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a6124d9b963ad39af9e6b01e415b791b1ffdeb1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/159f71c56eb718db36cf2f1602a1b97900060f88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/159f71c56eb718db36cf2f1602a1b97900060f88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/159f71c56eb718db36cf2f1602a1b97900060f88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/159f71c56eb718db36cf2f1602a1b97900060f88/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "832ec342b9eaae65545676fa2782fa92adfb393d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/832ec342b9eaae65545676fa2782fa92adfb393d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/832ec342b9eaae65545676fa2782fa92adfb393d"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 24,
      "deletions": 25
    },
    "files": [
      {
        "sha": "d48e733b4e8ff69a382873f97abe98c34a89d52c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 25,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159f71c56eb718db36cf2f1602a1b97900060f88/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159f71c56eb718db36cf2f1602a1b97900060f88/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=159f71c56eb718db36cf2f1602a1b97900060f88",
        "patch": "@@ -1715,18 +1715,17 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n \t\t\t\tentry.push_back(Pair(\"systx\", strResponse));\n \t\t\t\tentry.push_back(Pair(\"systype\", strResponseEnglish));\n \t\t\t\tentry.push_back(Pair(\"sysguid\", strResponseGUID));\n-\t\t\t\tfor (auto& vin : wtx.tx->vin) {\n-\t\t\t\t\tif (!pwalletMain || !pwalletMain->mapWallet.count(vin.prevout.hash)) break;\n-\t\t\t\t\tif (DecodeAliasScript(pwalletMain->mapWallet[vin.prevout.hash].tx->vout[vin.prevout.n].scriptPubKey, aliasOp, aliasVvch)) {\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tif (aliasVvch.empty())\n-\t\t\t\t\tcontinue;\n-\t\t\t\taliasName = stringFromVch(aliasVvch[0]);\n-\t\t\t\t\t\n-\t\t\t\tentry.push_back(Pair(\"sysalias\", aliasName));\n \t\t\t\tif (op == OP_ASSET_ALLOCATION_SEND || op == OP_ASSET_SEND) {\n+\t\t\t\t\tfor (auto& vin : wtx.vin) {\n+\t\t\t\t\t\tif (!pwalletMain || !pwalletMain->mapWallet.count(vin.prevout.hash)) break;\n+\t\t\t\t\t\tif (DecodeAliasScript(pwalletMain->mapWallet[vin.prevout.hash].tx->vout[vin.prevout.n].scriptPubKey, aliasOp, aliasVvch)) {\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (aliasVvch.empty())\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\taliasName = stringFromVch(aliasVvch[0]);\n+\n \t\t\t\t\tCAssetAllocation assetallocation(wtx);\n \t\t\t\t\tif (!assetallocation.IsNull()) {\n \t\t\t\t\t\tif (!assetallocation.listSendingAllocationAmounts.empty()) {\n@@ -1751,10 +1750,10 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tentry.push_back(Pair(\"sysallocations\", oAssetAllocationReceiversArray));\n-\n-\n \t\t\t}\n+\t\t\tentry.push_back(Pair(\"sysallocations\", oAssetAllocationReceiversArray));\n+\t\t\tentry.push_back(Pair(\"sysalias\", aliasName));\n+\t\t\tret.push_back(entry);\n             ret.push_back(entry);\n         }\n     }\n@@ -1809,18 +1808,17 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n \t\t\t\t\tentry.push_back(Pair(\"systx\", strResponse));\n \t\t\t\t\tentry.push_back(Pair(\"systype\", strResponseEnglish));\n \t\t\t\t\tentry.push_back(Pair(\"sysguid\", strResponseGUID));\n-\t\t\t\t\tfor(auto& vin: wtx.tx->vin){\n-\t\t\t\t\t\tif (!pwalletMain || !pwalletMain->mapWallet.count(vin.prevout.hash)) break;\n-\t\t\t\t\t\tif (DecodeAliasScript(pwalletMain->mapWallet[vin.prevout.hash].tx->vout[vin.prevout.n].scriptPubKey, aliasOp, aliasVvch)) {\n-\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\tif (op == OP_ASSET_ALLOCATION_SEND || op == OP_ASSET_SEND) {\n+\t\t\t\t\t\tfor(auto& vin: wtx.vin){\n+\t\t\t\t\t\t\tif (!pwalletMain || !pwalletMain->mapWallet.count(vin.prevout.hash)) break;\n+\t\t\t\t\t\t\tif (DecodeAliasScript(pwalletMain->mapWallet[vin.prevout.hash].tx->vout[vin.prevout.n].scriptPubKey, aliasOp, aliasVvch)) {\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tif (aliasVvch.empty())\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\taliasName = stringFromVch(aliasVvch[0]);\n+\t\t\t\t\t\tif (aliasVvch.empty())\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\taliasName = stringFromVch(aliasVvch[0]);\n \n-\t\t\t\t\tentry.push_back(Pair(\"sysalias\", aliasName));\n-\t\t\t\t\tif (op == OP_ASSET_ALLOCATION_SEND || op == OP_ASSET_SEND) {\n \t\t\t\t\t\tCAssetAllocation assetallocation(wtx);\n \t\t\t\t\t\tif (!assetallocation.IsNull()) {\n \t\t\t\t\t\t\tif (!assetallocation.listSendingAllocationAmounts.empty()) {\n@@ -1845,8 +1843,9 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t\tentry.push_back(Pair(\"sysallocations\", oAssetAllocationReceiversArray));\n \t\t\t\t}\n+\t\t\t\tentry.push_back(Pair(\"sysallocations\", oAssetAllocationReceiversArray));\n+\t\t\t\tentry.push_back(Pair(\"sysalias\", aliasName));\n                 ret.push_back(entry);\n             }\n         }"
      }
    ]
  },
  {
    "sha": "e1354f0cfea0565887bd8ecedd58788f33f1f9ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTM1NGYwY2ZlYTA1NjU4ODdiZDhlY2VkZDU4Nzg4ZjMzZjFmOWFj",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-27T05:49:01Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-27T05:49:01Z"
      },
      "message": "compile",
      "tree": {
        "sha": "4ad93fa7e26045b9bb2f2db886b54aa4f12c7fb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ad93fa7e26045b9bb2f2db886b54aa4f12c7fb3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1354f0cfea0565887bd8ecedd58788f33f1f9ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1354f0cfea0565887bd8ecedd58788f33f1f9ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1354f0cfea0565887bd8ecedd58788f33f1f9ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1354f0cfea0565887bd8ecedd58788f33f1f9ac/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "159f71c56eb718db36cf2f1602a1b97900060f88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/159f71c56eb718db36cf2f1602a1b97900060f88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/159f71c56eb718db36cf2f1602a1b97900060f88"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 7,
      "deletions": 8
    },
    "files": [
      {
        "sha": "5711d2cb5de87296818777684c02529f523d27a0",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1354f0cfea0565887bd8ecedd58788f33f1f9ac/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1354f0cfea0565887bd8ecedd58788f33f1f9ac/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e1354f0cfea0565887bd8ecedd58788f33f1f9ac",
        "patch": "@@ -1718,7 +1718,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n \t\t\t\tif (op == OP_ASSET_ALLOCATION_SEND || op == OP_ASSET_SEND) {\n \t\t\t\t\tfor (auto& vin : wtx.vin) {\n \t\t\t\t\t\tif (!pwalletMain || !pwalletMain->mapWallet.count(vin.prevout.hash)) break;\n-\t\t\t\t\t\tif (DecodeAliasScript(pwalletMain->mapWallet[vin.prevout.hash].tx->vout[vin.prevout.n].scriptPubKey, aliasOp, aliasVvch)) {\n+\t\t\t\t\t\tif (DecodeAliasScript(pwalletMain->mapWallet[vin.prevout.hash].vout[vin.prevout.n].scriptPubKey, aliasOp, aliasVvch)) {\n \t\t\t\t\t\t\tbreak;\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n@@ -1750,11 +1750,10 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n+\t\t\t\tentry.push_back(Pair(\"sysallocations\", oAssetAllocationReceiversArray));\n+\t\t\t\tentry.push_back(Pair(\"sysalias\", aliasName));\n \t\t\t}\n-\t\t\tentry.push_back(Pair(\"sysallocations\", oAssetAllocationReceiversArray));\n-\t\t\tentry.push_back(Pair(\"sysalias\", aliasName));\n \t\t\tret.push_back(entry);\n-            ret.push_back(entry);\n         }\n     }\n \n@@ -1809,9 +1808,9 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n \t\t\t\t\tentry.push_back(Pair(\"systype\", strResponseEnglish));\n \t\t\t\t\tentry.push_back(Pair(\"sysguid\", strResponseGUID));\n \t\t\t\t\tif (op == OP_ASSET_ALLOCATION_SEND || op == OP_ASSET_SEND) {\n-\t\t\t\t\t\tfor(auto& vin: wtx.vin){\n+\t\t\t\t\t\tfor (auto& vin : wtx.vin) {\n \t\t\t\t\t\t\tif (!pwalletMain || !pwalletMain->mapWallet.count(vin.prevout.hash)) break;\n-\t\t\t\t\t\t\tif (DecodeAliasScript(pwalletMain->mapWallet[vin.prevout.hash].tx->vout[vin.prevout.n].scriptPubKey, aliasOp, aliasVvch)) {\n+\t\t\t\t\t\t\tif (DecodeAliasScript(pwalletMain->mapWallet[vin.prevout.hash].vout[vin.prevout.n].scriptPubKey, aliasOp, aliasVvch)) {\n \t\t\t\t\t\t\t\tbreak;\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n@@ -1843,9 +1842,9 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n+\t\t\t\t\tentry.push_back(Pair(\"sysallocations\", oAssetAllocationReceiversArray));\n+\t\t\t\t\tentry.push_back(Pair(\"sysalias\", aliasName));\n \t\t\t\t}\n-\t\t\t\tentry.push_back(Pair(\"sysallocations\", oAssetAllocationReceiversArray));\n-\t\t\t\tentry.push_back(Pair(\"sysalias\", aliasName));\n                 ret.push_back(entry);\n             }\n         }"
      }
    ]
  },
  {
    "sha": "1369a1c137c13494fedd3814aefa714d259f2946",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzY5YTFjMTM3YzEzNDk0ZmVkZDM4MTRhZWZhNzE0ZDI1OWYyOTQ2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T02:25:45Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T02:25:45Z"
      },
      "message": "update to latest code upstream",
      "tree": {
        "sha": "c005100dccaa668ee780c9a0029e9cff63246180",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c005100dccaa668ee780c9a0029e9cff63246180"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1369a1c137c13494fedd3814aefa714d259f2946",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1369a1c137c13494fedd3814aefa714d259f2946",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1369a1c137c13494fedd3814aefa714d259f2946",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1369a1c137c13494fedd3814aefa714d259f2946/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1354f0cfea0565887bd8ecedd58788f33f1f9ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1354f0cfea0565887bd8ecedd58788f33f1f9ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1354f0cfea0565887bd8ecedd58788f33f1f9ac"
      }
    ],
    "stats": {
      "total": 76889,
      "additions": 44000,
      "deletions": 32889
    },
    "files": [
      {
        "sha": "4bcda43e4f1f17b8644e15677bc81f0607d59fc4",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -43,7 +43,7 @@ env:\n # Win64\n     - HOST=x86_64-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PPA=\"ppa:bitcoin/bitcoin\" PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine1.7 bc\" RUN_TESTS=false GOAL=\"install\" SYSCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j4\" WINE=true\n # syscoindd\n-    - HOST=x86_64-unknown-linux-gnu PPA=\"ppa:bitcoin/bitcoin\" PACKAGES=\"bc python3-zmq\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" SYSCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports\" CPPFLAGS=\"-DDEBUG_LOCKORDER -DENABLE_SYS_DEBUG\" PYZMQ=true\n+    - HOST=x86_64-unknown-linux-gnu PPA=\"ppa:bitcoin/bitcoin\" PACKAGES=\"bc python3-zmq\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=false GOAL=\"install\" SYSCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports\" CPPFLAGS=\"-DDEBUG_LOCKORDER -DENABLE_SYS_DEBUG\" PYZMQ=true\n # No wallet\n #    - HOST=x86_64-unknown-linux-gnu PPA=\"ppa:bitcoin/bitcoin\" PACKAGES=\"python3\" DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" SYSCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n # Cross-Mac"
      },
      {
        "sha": "b3f92032e28b0d2c03589074f5177c2749c0d849",
        "filename": "CMakeLists.txt",
        "status": "added",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/CMakeLists.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/CMakeLists.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CMakeLists.txt?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -0,0 +1,63 @@\n+# This CMakeLists.txt is not meant to actually work!\n+# It only serves as a dummy project to make CLion work properly when it comes to symbol resolution and all the nice\n+# features dependent on that. Building must still be done on the command line using the automake build chain\n+# If you load this project in CLion and would like to run/debug executables, make sure to remove the \"Build\" entry from\n+# the run/debug configuration as otherwise CLion will try to build this project with cmake, failing horribly.\n+# You'll also have to manually change the executable in the configuration to the correct path of the already built executable\n+\n+cmake_minimum_required(VERSION 3.7)\n+project(syscoin)\n+\n+set(CMAKE_CXX_STANDARD 11)\n+\n+include_directories(\n+        src\n+        src/leveldb/include\n+        src/univalue/include\n+)\n+\n+add_definitions(\n+        -DENABLE_WALLET=1\n+)\n+\n+file(GLOB SOURCE_FILES\n+        src/bench/*.cpp\n+        src/bench/*.h\n+        src/compat/*.cpp\n+        src/compat/*.h\n+        src/consensus/*.h\n+        src/consensus/*.cpp\n+        src/crypto/*.c\n+        src/crypto/*.h\n+        src/crypto/*.cpp\n+        src/leveldb/db/*.cc\n+        src/leveldb/db/*.h\n+        src/leveldb/include/*.h\n+        src/policy/*.cpp\n+        src/policy/*.h\n+        src/primitives/*.cpp\n+        src/primitives/*.h\n+        src/qt/test/*.cpp\n+        src/qt/test/*.h\n+        src/qt/*.cpp\n+        src/qt/*.h\n+        src/script/*.cpp\n+        src/script/*.h\n+        src/secp256k1/include/*.h\n+        src/test/*.cpp\n+        src/test/*.h\n+        src/univalue/include/*.h\n+        src/univalue/lib/*.cpp\n+        src/univalue/lib/*.h\n+        src/wallet/test/*.cpp\n+        src/wallet/*.cpp\n+        src/wallet/*.h\n+        src/zmq/*.cpp\n+        src/zmq/*.h\n+        src/*.cpp\n+        src/*.h\n+        src/rpc/*.cpp\n+        src/rpc/*.h\n+        )\n+\n+add_executable(syscoin ${SOURCE_FILES})"
      },
      {
        "sha": "3f07c34faf7dc8074e7a5654b62aaaf3f6df3cb1",
        "filename": "COPYING",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/COPYING",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/COPYING",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/COPYING?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,6 @@\n The MIT License (MIT)\n \n-Copyright (c) 2009-2016 The Bitcoin Core developers\n+Copyright (c) 2009-2016 The syscoin Core developers\n Copyright (c) 2014-2017 The Dash Core developers\n Copyright (c) 2014-2017 The Syscoin Core developers\n "
      },
      {
        "sha": "9546b1f8269ace0fe667145698a29645f1c2f270",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -67,8 +67,6 @@ $(SYSCOIN_WIN_INSTALLER): all-recursive\n \t  echo error: could not build $@\n \t@echo built $@\n \n-$(if $(findstring src/,$(MAKECMDGOALS)),$(MAKECMDGOALS), none): FORCE\n-\t$(MAKE) -C src $(patsubst src/%,%,$@)\n \n $(OSX_APP)/Contents/PkgInfo:\n \t$(MKDIR_P) $(@D)"
      },
      {
        "sha": "27417daf7691513da832eae5541b6c5bee091551",
        "filename": "autogen.sh",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/autogen.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/autogen.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/autogen.sh?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,9 +1,15 @@\n #!/bin/sh\n+# Copyright (c) 2013-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n set -e\n srcdir=\"$(dirname $0)\"\n cd \"$srcdir\"\n if [ -z ${LIBTOOLIZE} ] && GLIBTOOLIZE=\"`which glibtoolize 2>/dev/null`\"; then\n   LIBTOOLIZE=\"${GLIBTOOLIZE}\"\n   export LIBTOOLIZE\n fi\n+which autoreconf >/dev/null || \\\n+  (echo \"configuration failed, please install autoconf first\" && exit 1)\n autoreconf --install --force --warnings=all"
      },
      {
        "sha": "5cbd858140bf65174b29e554c333ccfb6c1f7e44",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -9,6 +9,8 @@ define(_DASH_VERSION_MAJOR, 0)\n define(_DASH_VERSION_MINOR, 12)\n define(_DASH_VERSION_REVISION, 3)\n define(_COPYRIGHT_YEAR, 2018)\n+define(_COPYRIGHT_HOLDERS,[The %s developers])\n+define(_COPYRIGHT_HOLDERS_SUBSTITUTION,[[Syscoin Core]])\n AC_INIT([Syscoin Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/syscoin/syscoin/issues],[syscoincore])\n AC_CONFIG_SRCDIR([src/validation.cpp])\n AC_CONFIG_HEADERS([src/config/syscoin-config.h])\n@@ -268,7 +270,7 @@ CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n AC_ARG_WITH([utils],\n   [AS_HELP_STRING([--with-utils],\n-  [build syscoin-cli syscoin-tx (default=no)])],\n+  [build syscoin-cli syscoin-tx (default=yes)])],\n   [build_syscoin_utils=$withval],\n   [build_syscoin_utils=yes])\n \n@@ -574,6 +576,15 @@ AC_CHECK_DECLS([bswap_16, bswap_32, bswap_64],,,\n                  #include <byteswap.h>\n                  #endif])\n \n+\n+dnl Check for mallopt(M_ARENA_MAX) (to set glibc arenas)\n+AC_MSG_CHECKING(for mallopt M_ARENA_MAX)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <malloc.h>]],\n+ [[ mallopt(M_ARENA_MAX, 1); ]])],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MALLOPT_ARENA_MAX, 1,[Define this symbol if you have mallopt with M_ARENA_MAX]) ],\n+ [ AC_MSG_RESULT(no)]\n+)\n+\n dnl Check for MSG_NOSIGNAL\n AC_MSG_CHECKING(for MSG_NOSIGNAL)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/socket.h>]],\n@@ -1097,12 +1108,19 @@ AC_DEFINE(DASH_VERSION_MAJOR, _DASH_VERSION_MAJOR, [Dash Major version])\n AC_DEFINE(DASH_VERSION_MINOR, _DASH_VERSION_MINOR, [Dash Minor version])\n AC_DEFINE(DASH_VERSION_REVISION, _DASH_VERSION_REVISION, [Dash Build revision])\n AC_DEFINE(COPYRIGHT_YEAR, _COPYRIGHT_YEAR, [Copyright year])\n+AC_DEFINE(COPYRIGHT_HOLDERS, \"_COPYRIGHT_HOLDERS\", [Copyright holder(s) before %s replacement])\n+AC_DEFINE(COPYRIGHT_HOLDERS_SUBSTITUTION, \"_COPYRIGHT_HOLDERS_SUBSTITUTION\", [Replacement for %s in copyright holders string])\n+define(_COPYRIGHT_HOLDERS_FINAL, [patsubst(_COPYRIGHT_HOLDERS, [%s], [_COPYRIGHT_HOLDERS_SUBSTITUTION])])\n+AC_DEFINE(COPYRIGHT_HOLDERS_FINAL, \"_COPYRIGHT_HOLDERS_FINAL\", [Copyright holder(s)])\n AC_SUBST(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR)\n AC_SUBST(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR)\n AC_SUBST(CLIENT_VERSION_REVISION, _CLIENT_VERSION_REVISION)\n AC_SUBST(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD)\n AC_SUBST(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE)\n AC_SUBST(COPYRIGHT_YEAR, _COPYRIGHT_YEAR)\n+AC_SUBST(COPYRIGHT_HOLDERS, \"_COPYRIGHT_HOLDERS\")\n+AC_SUBST(COPYRIGHT_HOLDERS_SUBSTITUTION, \"_COPYRIGHT_HOLDERS_SUBSTITUTION\")\n+AC_SUBST(COPYRIGHT_HOLDERS_FINAL, \"_COPYRIGHT_HOLDERS_FINAL\")\n AC_SUBST(DASH_VERSION_MAJOR, _DASH_VERSION_MAJOR)\n AC_SUBST(DASH_VERSION_MINOR, _DASH_VERSION_MINOR)\n AC_SUBST(DASH_VERSION_REVISION, _DASH_VERSION_REVISION)"
      },
      {
        "sha": "4ed61a49e9ca2acaf2353fcc14360511a0122189",
        "filename": "depends/packages/native_ccache.mk",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/depends/packages/native_ccache.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/depends/packages/native_ccache.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ccache.mk?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -0,0 +1,25 @@\n+package=native_ccache\n+$(package)_version=3.3.3\n+$(package)_download_path=https://samba.org/ftp/ccache\n+$(package)_file_name=ccache-$($(package)_version).tar.bz2\n+$(package)_sha256_hash=2985bc5e32ebe38d2958d508eb54ddcad39eed909489c0c2988035214597ca54\n+\n+define $(package)_set_vars\n+$(package)_config_opts=\n+endef\n+\n+define $(package)_config_cmds\n+  $($(package)_autoconf)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE)\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n+endef\n+\n+define $(package)_postprocess_cmds\n+  rm -rf lib include\n+endef"
      },
      {
        "sha": "0050007b3245693f56222dde21b86ebc27fc2c21",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -73,9 +73,9 @@ Syscoin Core is now available at `./src/syscoind`\n \n Before running, it's recommended you create an RPC configuration file.\n \n-    echo -e \"rpcuser=syscoinrpc\\nrpcpassword=$(xxd -l 16 -p /dev/urandom)\" > \"/Users/${USER}/Library/Application Support/Syscoin/syscoin.conf\"\n+    echo -e \"rpcuser=syscoinrpc\\nrpcpassword=$(xxd -l 16 -p /dev/urandom)\" > \"/Users/${USER}/Library/Application Support/SyscoinCore/syscoin.conf\"\n \n-    chmod 600 \"/Users/${USER}/Library/Application Support/Syscoin/syscoin.conf\"\n+    chmod 600 \"/Users/${USER}/Library/Application Support/SyscoinCore/syscoin.conf\"\n \n The first time you run syscoind, it will start downloading the blockchain. This process could take several hours.\n "
      },
      {
        "sha": "979fa54c3e55ce38b3d365a609b1927481cb42c8",
        "filename": "docker/Dockerfile",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/docker/Dockerfile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/docker/Dockerfile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/docker/Dockerfile?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -0,0 +1,7 @@\n+FROM debian:stretch\n+LABEL maintainer=\"Syscoin Developers <jsidhu@blockchainfoundry.co>\"\n+LABEL description=\"Dockerised SyscoinCore, built from Travis\"\n+\n+RUN apt-get update && apt-get -y upgrade && apt-get clean && rm -fr /var/cache/apt/*\n+\n+COPY bin/* /usr/bin/"
      },
      {
        "sha": "825059885177c26091592fbc16f3eb5dd02c2d78",
        "filename": "docker/README.md",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/docker/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/docker/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/docker/README.md?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -0,0 +1,8 @@\n+This docker image is built and pushed from travis. It does not contain any default configs or any\n+special startup scripts. This is to keep it simple and to not copy too much logic from the\n+official/supported Docker Images found at https://hub.docker.com/r/syscoin/syscoind/\n+\n+The image is mostly used for devops purposes, e.g. for testnet/devnet deployments. Regular users\n+should use the official images instead of this one.\n+\n+**NOTE: Please update the image description at https://hub.docker.com/r/syscoin/syscoind-develop/ when changing the above text**\n\\ No newline at end of file"
      },
      {
        "sha": "21dd242faa2bc6f50a5d19781c03b1a6528c801d",
        "filename": "docker/build-docker.sh",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/docker/build-docker.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/docker/build-docker.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/docker/build-docker.sh?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -0,0 +1,20 @@\n+#!/usr/bin/env bash\n+\n+DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n+cd $DIR/..\n+\n+DOCKER_IMAGE=${DOCKER_IMAGE:-syscoin/syscoind-develop}\n+DOCKER_TAG=${DOCKER_TAG:-latest}\n+\n+BUILD_DIR=${BUILD_DIR:-.}\n+\n+rm docker/bin/*\n+mkdir docker/bin\n+cp $BUILD_DIR/src/syscoind docker/bin/\n+cp $BUILD_DIR/src/syscoin-cli docker/bin/\n+cp $BUILD_DIR/src/syscoin-tx docker/bin/\n+strip docker/bin/syscoind\n+strip docker/bin/syscoin-cli\n+strip docker/bin/syscoin-tx\n+\n+docker build --pull -t $DOCKER_IMAGE:$DOCKER_TAG -f docker/Dockerfile docker"
      },
      {
        "sha": "9678ee411c0cb3517712889d7720de714f620026",
        "filename": "docker/push-docker.sh",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/docker/push-docker.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/docker/push-docker.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/docker/push-docker.sh?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -0,0 +1,17 @@\n+#!/usr/bin/env bash\n+\n+DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n+cd $DIR/..\n+\n+DOCKER_IMAGE=${DOCKER_IMAGE:-syscoinpay/syscoind-develop}\n+DOCKER_TAG=${DOCKER_TAG:-latest}\n+\n+if [ -n \"$DOCKER_REPO\" ]; then\n+  DOCKER_IMAGE_WITH_REPO=$DOCKER_REPO/$DOCKER_IMAGE\n+else\n+  DOCKER_IMAGE_WITH_REPO=$DOCKER_IMAGE\n+fi\n+\n+docker tag $DOCKER_IMAGE:$DOCKER_TAG $DOCKER_IMAGE_WITH_REPO:$DOCKER_TAG\n+docker push $DOCKER_IMAGE_WITH_REPO:$DOCKER_TAG\n+docker rmi $DOCKER_IMAGE_WITH_REPO:$DOCKER_TAG"
      },
      {
        "sha": "44528870b9b9cba861b66ef0d1679befd3745c26",
        "filename": "share/setup.nsi.in",
        "status": "modified",
        "additions": 23,
        "deletions": 18,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/share/setup.nsi.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/share/setup.nsi.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/setup.nsi.in?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -6,8 +6,8 @@ SetCompressor /SOLID lzma\n # General Symbol Definitions\n !define REGKEY \"SOFTWARE\\$(^Name)\"\n !define VERSION @CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_REVISION@\n-!define COMPANY \"Syscoin Core project\"\n-!define URL https://www.syscoin.org/\n+!define COMPANY \"@PACKAGE_NAME@ project\"\n+!define URL @PACKAGE_URL@\n \n # MUI Symbol Definitions\n !define MUI_ICON \"@abs_top_srcdir@/share/pixmaps/syscoin.ico\"\n@@ -20,7 +20,7 @@ SetCompressor /SOLID lzma\n !define MUI_STARTMENUPAGE_REGISTRY_KEY ${REGKEY}\n !define MUI_STARTMENUPAGE_REGISTRY_VALUENAME StartMenuGroup\n !define MUI_STARTMENUPAGE_DEFAULTFOLDER \"@PACKAGE_NAME@\"\n-!define MUI_FINISHPAGE_RUN $INSTDIR\\syscoin-qt.exe\n+!define MUI_FINISHPAGE_RUN $INSTDIR\\@syscoin_GUI_NAME@@EXEEXT@\n !define MUI_UNICON \"${NSISDIR}\\Contrib\\Graphics\\Icons\\modern-uninstall.ico\"\n !define MUI_UNWELCOMEFINISHPAGE_BITMAP \"@abs_top_srcdir@/share/pixmaps/nsis-wizard.bmp\"\n !define MUI_UNFINISHPAGE_NOAUTOCLOSE\n@@ -48,7 +48,7 @@ Var StartMenuGroup\n !insertmacro MUI_LANGUAGE English\n \n # Installer attributes\n-OutFile @abs_top_srcdir@/syscoincore-${VERSION}-win@WINDOWS_BITS@-setup.exe\n+OutFile @abs_top_srcdir@/@PACKAGE_TARNAME@-${VERSION}-win@WINDOWS_BITS@-setup.exe\n !if \"@WINDOWS_BITS@\" == \"64\"\n InstallDir $PROGRAMFILES64\\SyscoinCore\n !else\n@@ -59,7 +59,7 @@ XPStyle on\n BrandingText \" \"\n ShowInstDetails show\n VIProductVersion ${VERSION}.@CLIENT_VERSION_BUILD@\n-VIAddVersionKey ProductName \"Syscoin Core\"\n+VIAddVersionKey ProductName \"@PACKAGE_NAME@\"\n VIAddVersionKey ProductVersion \"${VERSION}\"\n VIAddVersionKey CompanyName \"${COMPANY}\"\n VIAddVersionKey CompanyWebsite \"${URL}\"\n@@ -73,20 +73,16 @@ ShowUninstDetails show\n Section -Main SEC0000\n     SetOutPath $INSTDIR\n     SetOverwrite on\n-    File @abs_top_srcdir@/release/syscoin-qt.exe\n+    File @abs_top_srcdir@/release/@syscoin_GUI_NAME@@EXEEXT@\n     File /oname=COPYING.txt @abs_top_srcdir@/COPYING\n     File /oname=readme.txt @abs_top_srcdir@/doc/README_windows.txt\n     SetOutPath $INSTDIR\\daemon\n-    File @abs_top_srcdir@/release/syscoind.exe\n-    File @abs_top_srcdir@/release/syscoin-cli.exe\n+    File @abs_top_srcdir@/release/@syscoin_DAEMON_NAME@@EXEEXT@\n+    File @abs_top_srcdir@/release/@syscoin_CLI_NAME@@EXEEXT@\n     SetOutPath $INSTDIR\\doc\n     File /r @abs_top_srcdir@/doc\\*.*\n     SetOutPath $INSTDIR\n     WriteRegStr HKCU \"${REGKEY}\\Components\" Main 1\n-\n-    # Remove old wxwidgets-based-syscoin executable and locales:\n-    Delete /REBOOTOK $INSTDIR\\syscoin.exe\n-    RMDir /r /REBOOTOK $INSTDIR\\locale\n SectionEnd\n \n Section -post SEC0001\n@@ -95,7 +91,8 @@ Section -post SEC0001\n     WriteUninstaller $INSTDIR\\uninstall.exe\n     !insertmacro MUI_STARTMENU_WRITE_BEGIN Application\n     CreateDirectory $SMPROGRAMS\\$StartMenuGroup\n-    CreateShortcut \"$SMPROGRAMS\\$StartMenuGroup\\$(^Name).lnk\" $INSTDIR\\syscoin-qt.exe\n+    CreateShortcut \"$SMPROGRAMS\\$StartMenuGroup\\$(^Name).lnk\" $INSTDIR\\@syscoin_GUI_NAME@@EXEEXT@\n+    CreateShortcut \"$SMPROGRAMS\\$StartMenuGroup\\@PACKAGE_NAME@ (testnet, @WINDOWS_BITS@-bit).lnk\" \"$INSTDIR\\@syscoin_GUI_NAME@@EXEEXT@\" \"-testnet\" \"$INSTDIR\\@syscoin_GUI_NAME@@EXEEXT@\" 1\n     CreateShortcut \"$SMPROGRAMS\\$StartMenuGroup\\Uninstall $(^Name).lnk\" $INSTDIR\\uninstall.exe\n     !insertmacro MUI_STARTMENU_WRITE_END\n     WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" DisplayName \"$(^Name)\"\n@@ -106,10 +103,14 @@ Section -post SEC0001\n     WriteRegStr HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" UninstallString $INSTDIR\\uninstall.exe\n     WriteRegDWORD HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" NoModify 1\n     WriteRegDWORD HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\" NoRepair 1\n-    WriteRegStr HKCR \"syscoin\" \"URL Protocol\" \"\"\n-    WriteRegStr HKCR \"syscoin\" \"\" \"URL:Syscoin\"\n-    WriteRegStr HKCR \"syscoin\\DefaultIcon\" \"\" $INSTDIR\\syscoin-qt.exe\n-    WriteRegStr HKCR \"syscoin\\shell\\open\\command\" \"\" '\"$INSTDIR\\syscoin-qt.exe\" \"%1\"'\n+    WriteRegStr HKCR \"@PACKAGE_TARNAME@\" \"URL Protocol\" \"\"\n+    WriteRegStr HKCR \"@PACKAGE_TARNAME@\" \"\" \"URL:Syscoin\"\n+    WriteRegStr HKCR \"@PACKAGE_TARNAME@\\DefaultIcon\" \"\" $INSTDIR\\@syscoin_GUI_NAME@@EXEEXT@\n+    WriteRegStr HKCR \"@PACKAGE_TARNAME@\\shell\\open\\command\" \"\" '\"$INSTDIR\\@syscoin_GUI_NAME@@EXEEXT@\" \"%1\"'\n+\n+    # Delete old key (before we switched to PACKAGE_TARNAME, which is set to 'syscoincore' now, we had 'syscoin' hardcoded)\n+    # TODO remove this line sometime later\n+    DeleteRegKey HKCR \"syscoin\"\n SectionEnd\n \n # Macro for selecting uninstaller sections\n@@ -127,7 +128,7 @@ done${UNSECTION_ID}:\n \n # Uninstaller sections\n Section /o -un.Main UNSEC0000\n-    Delete /REBOOTOK $INSTDIR\\syscoin-qt.exe\n+    Delete /REBOOTOK $INSTDIR\\@syscoin_GUI_NAME@@EXEEXT@\n     Delete /REBOOTOK $INSTDIR\\COPYING.txt\n     Delete /REBOOTOK $INSTDIR\\readme.txt\n     RMDir /r /REBOOTOK $INSTDIR\\daemon\n@@ -139,6 +140,7 @@ Section -un.post UNSEC0001\n     DeleteRegKey HKCU \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\$(^Name)\"\n     Delete /REBOOTOK \"$SMPROGRAMS\\$StartMenuGroup\\Uninstall $(^Name).lnk\"\n     Delete /REBOOTOK \"$SMPROGRAMS\\$StartMenuGroup\\$(^Name).lnk\"\n+    Delete /REBOOTOK \"$SMPROGRAMS\\$StartMenuGroup\\@PACKAGE_NAME@ (testnet, @WINDOWS_BITS@-bit).lnk\"\n     Delete /REBOOTOK \"$SMSTARTUP\\Syscoin.lnk\"\n     Delete /REBOOTOK $INSTDIR\\uninstall.exe\n     Delete /REBOOTOK $INSTDIR\\debug.log\n@@ -147,6 +149,9 @@ Section -un.post UNSEC0001\n     DeleteRegValue HKCU \"${REGKEY}\" Path\n     DeleteRegKey /IfEmpty HKCU \"${REGKEY}\\Components\"\n     DeleteRegKey /IfEmpty HKCU \"${REGKEY}\"\n+    DeleteRegKey HKCR \"@PACKAGE_TARNAME@\"\n+    # Delete old key (before we switched to PACKAGE_TARNAME, which is set to 'syscoincore' now, we had 'syscoin' hardcoded)\n+    # TODO remove this line sometime later\n     DeleteRegKey HKCR \"syscoin\"\n     RmDir /REBOOTOK $SMPROGRAMS\\$StartMenuGroup\n     RmDir /REBOOTOK $INSTDIR"
      },
      {
        "sha": "36cfe2363e0c653d0ed7189f91b446b594d5ca1e",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 115,
        "deletions": 110,
        "changes": 225,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,7 +1,12 @@\n+# Copyright (c) 2013-2016 The Syscoin Core developers\n+# Copyright (c) 2014-2018 The Syscoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n DIST_SUBDIRS = secp256k1 univalue\n \n AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS)\n-AM_CXXFLAGS = $(HARDENED_CXXFLAGS)\n+AM_CXXFLAGS = $(HARDENED_CXXFLAGS) $(ERROR_CXXFLAGS)\n AM_CPPFLAGS = $(HARDENED_CPPFLAGS)\n EXTRA_LIBRARIES =\n \n@@ -15,45 +20,46 @@ LIBUNIVALUE = $(UNIVALUE_LIBS)\n endif\n \n SYSCOIN_CONFIG_INCLUDES=-I$(builddir)/config\n-SYSCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)\n+SYSCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BDB_CPPFLAGS) $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)\n \n SYSCOIN_INCLUDES += -I$(srcdir)/secp256k1/include\n SYSCOIN_INCLUDES += $(UNIVALUE_CFLAGS)\n \n LIBSYSCOIN_SERVER=libsyscoin_server.a\n-LIBSYSCOIN_WALLET=libsyscoin_wallet.a\n LIBSYSCOIN_COMMON=libsyscoin_common.a\n+LIBSYSCOIN_CONSENSUS=libsyscoin_consensus.a\n LIBSYSCOIN_CLI=libsyscoin_cli.a\n LIBSYSCOIN_UTIL=libsyscoin_util.a\n LIBSYSCOIN_CRYPTO=crypto/libsyscoin_crypto.a\n LIBSYSCOINQT=qt/libsyscoinqt.a\n LIBSECP256K1=secp256k1/libsecp256k1.la\n \n+if ENABLE_ZMQ\n+LIBSYSCOIN_ZMQ=libsyscoin_zmq.a\n+endif\n+if BUILD_SYSCOIN_LIBS\n+LIBSYSCOINCONSENSUS=libsyscoinconsensus.la\n+endif\n+if ENABLE_WALLET\n+LIBSYSCOIN_WALLET=libsyscoin_wallet.a\n+endif\n+\n $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n \n # Make is not made aware of per-object dependencies to avoid limiting building parallelization\n # But to build the less dependent modules first, we manually select their order here:\n EXTRA_LIBRARIES += \\\n-  crypto/libsyscoin_crypto.a \\\n-  libsyscoin_util.a \\\n-  libsyscoin_common.a \\\n-  libsyscoin_server.a \\\n-  libsyscoin_cli.a\n-if ENABLE_WALLET\n-SYSCOIN_INCLUDES += $(BDB_CPPFLAGS)\n-EXTRA_LIBRARIES += libsyscoin_wallet.a\n-endif\n-if ENABLE_ZMQ\n-EXTRA_LIBRARIES += libsyscoin_zmq.a\n-endif\n+  $(LIBSYSCOIN_CRYPTO) \\\n+  $(LIBSYSCOIN_UTIL) \\\n+  $(LIBSYSCOIN_COMMON) \\\n+  $(LIBSYSCOIN_CONSENSUS) \\\n+  $(LIBSYSCOIN_SERVER) \\\n+  $(LIBSYSCOIN_CLI) \\\n+  $(LIBSYSCOIN_WALLET) \\\n+  $(LIBSYSCOIN_ZMQ)\n \n-if BUILD_SYSCOIN_LIBS\n-lib_LTLIBRARIES = libsyscoinconsensus.la\n-LIBSYSCOIN_CONSENSUS=libsyscoinconsensus.la\n-else\n-LIBSYSCOIN_CONSENSUS=\n-endif\n+lib_LTLIBRARIES = $(LIBSYSCOINCONSENSUS)\n \n bin_PROGRAMS =\n TESTS =\n@@ -86,11 +92,10 @@ SYSCOIN_CORE_H = \\\n   spentindex.h \\\n   addrman.h \\\n   alert.h \\\n-  amount.h \\\n-  arith_uint256.h \\\n   base58.h \\\n   bip39.h \\\n   bip39_english.h \\\n+  blockencodings.h \\\n   bloom.h \\\n   cachemap.h \\\n   cachemultimap.h \\\n@@ -101,26 +106,21 @@ SYSCOIN_CORE_H = \\\n   checkpoints.h \\\n   checkqueue.h \\\n   clientversion.h \\\n-  coincontrol.h \\\n   coins.h \\\n   compat.h \\\n   compat/byteswap.h \\\n   compat/endian.h \\\n   compat/sanity.h \\\n   compressor.h \\\n   consensus/consensus.h \\\n-  consensus/merkle.h \\\n-  consensus/params.h \\\n-  consensus/validation.h \\\n   core_io.h \\\n-  cuckoocache.h \\\n   core_memusage.h \\\n+  cuckoocache.h \\\n   privatesend.h \\\n   privatesend-client.h \\\n   privatesend-server.h \\\n   privatesend-util.h \\\n   dsnotificationinterface.h \\\n-  fs.h \\\n   governance.h \\\n   governance-classes.h \\\n   governance-exceptions.h \\\n@@ -129,10 +129,10 @@ SYSCOIN_CORE_H = \\\n   governance-vote.h \\\n   governance-votedb.h \\\n   flat-database.h \\\n-  hash.h \\\n   hdchain.h \\\n   httprpc.h \\\n   httpserver.h \\\n+  indirectmap.h \\\n   init.h \\\n   instantx.h \\\n   key.h \\\n@@ -154,66 +154,54 @@ SYSCOIN_CORE_H = \\\n   netaddress.h \\\n   netbase.h \\\n   netfulfilledman.h \\\n+  netmessagemaker.h \\\n   noui.h \\\n   policy/fees.h \\\n   policy/policy.h \\\n   policy/rbf.h \\\n   pow.h \\\n-  prevector.h \\\n-  primitives/block.h \\\n-  primitives/pureheader.h \\\n-  primitives/transaction.h \\\n   protocol.h \\\n-  pubkey.h \\\n   random.h \\\n   reverselock.h \\\n   rpc/client.h \\\n+  rpc/mining.h \\\n   rpc/protocol.h \\\n   rpc/server.h \\\n+  rpc/register.h \\\n   scheduler.h \\\n-  script/interpreter.h \\\n-  script/script.h \\\n-  script/script_error.h \\\n   script/sigcache.h \\\n   script/sign.h \\\n   script/standard.h \\\n-  serialize.h \\\n+  script/ismine.h \\\n   spork.h \\\n   streams.h \\\n   support/allocators/secure.h \\\n   support/allocators/zeroafterfree.h \\\n   support/cleanse.h \\\n-  support/pagelocker.h \\\n+  support/events.h \\\n+  support/lockedpool.h \\\n   sync.h \\\n   threadsafety.h \\\n   threadinterrupt.h \\\n   timedata.h \\\n-  tinyformat.h \\\n-  thread_pool.hpp \\\n-  thread_pool/fixed_function.hpp \\\n-  thread_pool/mpmc_bounded_queue.hpp \\\n-  thread_pool/thread_pool.hpp \\\n-  thread_pool/thread_pool_options.hpp \\\n-  thread_pool/worker.hpp \\\n   torcontrol.h \\\n   txdb.h \\\n   txmempool.h \\\n   ui_interface.h \\\n-  uint256.h \\\n   undo.h \\\n   util.h \\\n   utilmoneystr.h \\\n-  utilstrencodings.h \\\n   utiltime.h \\\n   validation.h \\\n   validationinterface.h \\\n-  version.h \\\n   versionbits.h \\\n+  wallet/coincontrol.h \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n+  wallet/rpcwallet.h \\\n   wallet/wallet.h \\\n-  wallet/wallet_ismine.h \\\n   wallet/walletdb.h \\\n+  warnings.h \\\n   zmq/zmqabstractnotifier.h \\\n   zmq/zmqconfig.h\\\n   zmq/zmqnotificationinterface.h \\\n@@ -239,23 +227,31 @@ libsyscoin_server_a_SOURCES = \\\n   assetallocation.cpp \\\n   escrow.cpp \\\n   auxpow.cpp \\\n+  activemasternode.cpp \\\n   addrman.cpp \\\n   addrdb.cpp \\\n   alert.cpp \\\n   bloom.cpp \\\n+  blockencodings.cpp \\\n   chain.cpp \\\n   checkpoints.cpp \\\n+  dsnotificationinterface.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n   init.cpp \\\n+  instantx.cpp \\\n   dbwrapper.cpp \\\n-  fs.cpp \\\n   governance.cpp \\\n   governance-classes.cpp \\\n   governance-object.cpp \\\n   governance-validators.cpp \\\n   governance-vote.cpp \\\n   governance-votedb.cpp \\\n+  masternode.cpp \\\n+  masternode-payments.cpp \\\n+  masternode-sync.cpp \\\n+  masternodeconfig.cpp \\\n+  masternodeman.cpp \\\n   merkleblock.cpp \\\n   messagesigner.cpp \\\n   miner.cpp \\\n@@ -278,19 +274,20 @@ libsyscoin_server_a_SOURCES = \\\n   rpc/rawtransaction.cpp \\\n   rpc/server.cpp \\\n   script/sigcache.cpp \\\n+  script/ismine.cpp \\\n   sendalert.cpp \\\n+  spork.cpp \\\n   timedata.cpp \\\n   torcontrol.cpp \\\n   txdb.cpp \\\n   txmempool.cpp \\\n+  ui_interface.cpp \\\n   validation.cpp \\\n   validationinterface.cpp \\\n   versionbits.cpp \\\n   $(SYSCOIN_CORE_H)\n \n if ENABLE_ZMQ\n-LIBSYSCOIN_ZMQ=libsyscoin_zmq.a\n-\n libsyscoin_zmq_a_CPPFLAGS = $(SYSCOIN_INCLUDES) $(ZMQ_CFLAGS)\n libsyscoin_zmq_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libsyscoin_zmq_a_SOURCES = \\\n@@ -305,14 +302,6 @@ endif\n libsyscoin_wallet_a_CPPFLAGS = $(AM_CPPFLAGS) $(SYSCOIN_INCLUDES)\n libsyscoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libsyscoin_wallet_a_SOURCES = \\\n-  activemasternode.cpp \\\n-  dsnotificationinterface.cpp \\\n-  instantx.cpp \\\n-  masternode.cpp \\\n-  masternode-payments.cpp \\\n-  masternode-sync.cpp \\\n-  masternodeconfig.cpp \\\n-  masternodeman.cpp \\\n   keepass.cpp \\\n   privatesend-client.cpp \\\n   privatesend-util.cpp \\\n@@ -321,7 +310,6 @@ libsyscoin_wallet_a_SOURCES = \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/wallet.cpp \\\n-  wallet/wallet_ismine.cpp \\\n   wallet/walletdb.cpp \\\n   policy/rbf.cpp \\\n   $(SYSCOIN_CORE_H)\n@@ -332,8 +320,6 @@ crypto_libsyscoin_crypto_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS) $(PIC_FLAGS)\n crypto_libsyscoin_crypto_a_SOURCES = \\\n   crypto/aes.cpp \\\n   crypto/aes.h \\\n-  crypto/chacha20.h \\\n-  crypto/chacha20.cpp \\\n   crypto/common.h \\\n   crypto/hmac_sha256.cpp \\\n   crypto/hmac_sha256.h \\\n@@ -352,38 +338,65 @@ if USE_ASM\n crypto_libsyscoin_crypto_a_SOURCES += crypto/sha256_sse4.cpp\n endif\n \n+# consensus: shared between all executables that validate any consensus rules.\n+libsyscoin_consensus_a_CPPFLAGS = $(AM_CPPFLAGS) $(SYSCOIN_INCLUDES)\n+libsyscoin_consensus_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+libsyscoin_consensus_a_SOURCES = \\\n+  amount.h \\\n+  arith_uint256.cpp \\\n+  arith_uint256.h \\\n+  consensus/merkle.cpp \\\n+  consensus/merkle.h \\\n+  consensus/params.h \\\n+  consensus/validation.h \\\n+  hash.cpp \\\n+  hash.h \\\n+  prevector.h \\\n+  primitives/block.cpp \\\n+  primitives/block.h \\\n+  primitives/pureheader.cpp \\\n+  primitives/pureheader.h \\\n+  primitives/transaction.cpp \\\n+  primitives/transaction.h \\\n+  pubkey.cpp \\\n+  pubkey.h \\\n+  script/syscoinconsensus.cpp \\\n+  script/interpreter.cpp \\\n+  script/interpreter.h \\\n+  script/script.cpp \\\n+  script/script.h \\\n+  script/script_error.cpp \\\n+  script/script_error.h \\\n+  serialize.h \\\n+  tinyformat.h \\\n+  uint256.cpp \\\n+  uint256.h \\\n+  utilstrencodings.cpp \\\n+  utilstrencodings.h \\\n+  version.h\n+\n # common: shared between syscoind, and syscoin-qt and non-server tools\n libsyscoin_common_a_CPPFLAGS = $(AM_CPPFLAGS) $(SYSCOIN_INCLUDES)\n libsyscoin_common_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libsyscoin_common_a_SOURCES = \\\n   amount.cpp \\\n-  arith_uint256.cpp \\\n   base58.cpp \\\n   bip39.cpp \\\n   chainparams.cpp \\\n   coins.cpp \\\n   compressor.cpp \\\n-  consensus/merkle.cpp \\\n   core_read.cpp \\\n   core_write.cpp \\\n-  hash.cpp \\\n   hdchain.cpp \\\n   key.cpp \\\n   keystore.cpp \\\n   netaddress.cpp \\\n   netbase.cpp \\\n-  primitives/block.cpp \\\n-  primitives/pureheader.cpp \\\n-  primitives/transaction.cpp \\\n   protocol.cpp \\\n-  pubkey.cpp \\\n   scheduler.cpp \\\n-  script/interpreter.cpp \\\n-  script/script.cpp \\\n-  script/script_error.cpp \\\n   script/sign.cpp \\\n   script/standard.cpp \\\n-  spork.cpp \\\n+  warnings.cpp \\\n   $(SYSCOIN_CORE_H)\n \n # util: shared between all executables.\n@@ -392,7 +405,7 @@ libsyscoin_common_a_SOURCES = \\\n libsyscoin_util_a_CPPFLAGS = $(AM_CPPFLAGS) $(SYSCOIN_INCLUDES)\n libsyscoin_util_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libsyscoin_util_a_SOURCES = \\\n-  support/pagelocker.cpp \\\n+  support/lockedpool.cpp \\\n   chainparamsbase.cpp \\\n   clientversion.cpp \\\n   compat/glibc_sanity.cpp \\\n@@ -402,7 +415,6 @@ libsyscoin_util_a_SOURCES = \\\n   rpc/protocol.cpp \\\n   support/cleanse.cpp \\\n   sync.cpp \\\n-  uint256.cpp \\\n   threadinterrupt.cpp \\\n   util.cpp \\\n   utilmoneystr.cpp \\\n@@ -439,21 +451,16 @@ syscoind_LDADD = \\\n   $(LIBSYSCOIN_COMMON) \\\n   $(LIBUNIVALUE) \\\n   $(LIBSYSCOIN_UTIL) \\\n+  $(LIBSYSCOIN_WALLET) \\\n+  $(LIBSYSCOIN_ZMQ) \\\n+  $(LIBSYSCOIN_CONSENSUS) \\\n   $(LIBSYSCOIN_CRYPTO) \\\n   $(LIBLEVELDB) \\\n   $(LIBLEVELDB_SSE42) \\\n   $(LIBMEMENV) \\\n   $(LIBSECP256K1)\n \n-if ENABLE_ZMQ\n-syscoind_LDADD += $(LIBSYSCOIN_ZMQ) $(ZMQ_LIBS)\n-endif\n-\n-if ENABLE_WALLET\n-syscoind_LDADD += libsyscoin_wallet.a\n-endif\n-\n-syscoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n+syscoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(ZMQ_LIBS)\n \n # syscoin-cli binary #\n syscoin_cli_SOURCES = syscoin-cli.cpp\n@@ -468,7 +475,8 @@ endif\n syscoin_cli_LDADD = \\\n   $(LIBSYSCOIN_CLI) \\\n   $(LIBUNIVALUE) \\\n-  $(LIBSYSCOIN_UTIL)\n+  $(LIBSYSCOIN_UTIL) \\\n+  $(LIBSYSCOIN_CRYPTO)\n syscoin_cli_LDADD += $(BOOST_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(EVENT_LIBS)\n #\n \n@@ -486,6 +494,7 @@ syscoin_tx_LDADD = \\\n   $(LIBUNIVALUE) \\\n   $(LIBSYSCOIN_COMMON) \\\n   $(LIBSYSCOIN_UTIL) \\\n+  $(LIBSYSCOIN_CONSENSUS) \\\n   $(LIBSYSCOIN_CRYPTO) \\\n   $(LIBSECP256K1)\n \n@@ -495,20 +504,7 @@ syscoin_tx_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS)\n # syscoinconsensus library #\n if BUILD_SYSCOIN_LIBS\n include_HEADERS = script/syscoinconsensus.h\n-libsyscoinconsensus_la_SOURCES = \\\n-  crypto/hmac_sha512.cpp \\\n-  crypto/ripemd160.cpp \\\n-  crypto/sha1.cpp \\\n-  crypto/sha256.cpp \\\n-  crypto/sha512.cpp \\\n-  hash.cpp \\\n-  primitives/transaction.cpp \\\n-  pubkey.cpp \\\n-  script/syscoinconsensus.cpp \\\n-  script/interpreter.cpp \\\n-  script/script.cpp \\\n-  uint256.cpp \\\n-  utilstrencodings.cpp\n+libsyscoinconsensus_la_SOURCES = $(crypto_libsyscoin_crypto_a_SOURCES) $(libsyscoin_consensus_a_SOURCES)\n \n if GLIBC_BACK_COMPAT\n   libsyscoinconsensus_la_SOURCES += compat/glibc_compat.cpp\n@@ -521,14 +517,15 @@ libsyscoinconsensus_la_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n \n endif\n #\n-#\n-CTAES_DIST = crypto/ctaes/bench.c\n+\n+CTAES_DIST =  crypto/ctaes/bench.c\n CTAES_DIST += crypto/ctaes/ctaes.c\n CTAES_DIST += crypto/ctaes/ctaes.h\n CTAES_DIST += crypto/ctaes/README.md\n CTAES_DIST += crypto/ctaes/test.c\n \n-CLEANFILES = leveldb/libleveldb.a leveldb/libmemenv.a\n+CLEANFILES = $(EXTRA_LIBRARIES)\n+\n CLEANFILES += *.gcda *.gcno\n CLEANFILES += compat/*.gcda compat/*.gcno\n CLEANFILES += consensus/*.gcda consensus/*.gcno\n@@ -544,19 +541,27 @@ CLEANFILES += zmq/*.gcda zmq/*.gcno\n \n DISTCLEANFILES = obj/build.h\n \n-EXTRA_DIST = leveldb\n-EXTRA_DIST += $(CTAES_DIST)\n+EXTRA_DIST = $(CTAES_DIST)\n+\n+\n+config/syscoin-config.h: config/stamp-h1\n+\t@$(MAKE) -C $(top_builddir) $(subdir)/$(@)\n+config/stamp-h1: $(top_srcdir)/$(subdir)/config/syscoin-config.h.in $(top_builddir)/config.status\n+\t$(AM_V_at)$(MAKE) -C $(top_builddir) $(subdir)/$(@)\n+$(top_srcdir)/$(subdir)/config/syscoin-config.h.in:  $(am__configure_deps)\n+\t$(AM_V_at)$(MAKE) -C $(top_srcdir) $(subdir)/config/syscoin-config.h.in\n \n clean-local:\n-\t-$(MAKE) -C leveldb clean\n \t-$(MAKE) -C secp256k1 clean\n \t-$(MAKE) -C univalue clean\n \t-rm -f leveldb/*/*.gcda leveldb/*/*.gcno leveldb/helpers/memenv/*.gcda leveldb/helpers/memenv/*.gcno\n \t-rm -f config.h\n+\t-rm -rf test/__pycache__\n \n .rc.o:\n \t@test -f $(WINDRES)\n-\t$(AM_V_GEN) $(WINDRES) -DWINDRES_PREPROC -i $< -o $@\n+\t## FIXME: How to get the appropriate modulename_CPPFLAGS in here?\n+\t$(AM_V_GEN) $(WINDRES) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(CPPFLAGS) -DWINDRES_PREPROC -i $< -o $@\n \n .mm.o:\n \t$(AM_V_CXX) $(OBJCXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\\n@@ -576,7 +581,7 @@ endif\n \n %.pb.cc %.pb.h: %.proto\n \t@test -f $(PROTOC)\n-\t$(AM_V_GEN) $(PROTOC) --cpp_out=$(@D) --proto_path=$(abspath $(<D) $<)\n+\t$(AM_V_GEN) $(PROTOC) --cpp_out=$(@D) --proto_path=$(<D) $<\n \n if EMBEDDED_LEVELDB\n include Makefile.leveldb.include"
      },
      {
        "sha": "2a7aa75e2bb12f153a6e1d8f477127eac95cc59a",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 37,
        "deletions": 3,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,20 +1,41 @@\n+# Copyright (c) 2015-2016 The Syscoin Core developers\n+# Copyright (c) 2014-2018 The Syscoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n bin_PROGRAMS += bench/bench_syscoin\n BENCH_SRCDIR = bench\n BENCH_BINARY = bench/bench_syscoin$(EXEEXT)\n \n+RAW_TEST_FILES = \\\n+  bench/data/block813851.raw\n+GENERATED_TEST_FILES = $(RAW_TEST_FILES:.raw=.raw.h)\n \n bench_bench_syscoin_SOURCES = \\\n   bench/bench_syscoin.cpp \\\n   bench/bench.cpp \\\n   bench/bench.h \\\n-  bench/Examples.cpp\n+  bench/checkblock.cpp \\\n+  bench/checkqueue.cpp \\\n+  bench/Examples.cpp \\\n+  bench/rollingbloom.cpp \\\n+  bench/crypto_hash.cpp \\\n+  bench/ccoins_caching.cpp \\\n+  bench/mempool_eviction.cpp \\\n+  bench/base58.cpp \\\n+  bench/lockedpool.cpp \\\n+  bench/perf.cpp \\\n+  bench/perf.h\n+\n+nodist_bench_bench_syscoin_SOURCES = $(GENERATED_TEST_FILES)\n \n bench_bench_syscoin_CPPFLAGS = $(AM_CPPFLAGS) $(SYSCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n bench_bench_syscoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n bench_bench_syscoin_LDADD = \\\n   $(LIBSYSCOIN_SERVER) \\\n   $(LIBSYSCOIN_COMMON) \\\n   $(LIBSYSCOIN_UTIL) \\\n+  $(LIBSYSCOIN_CONSENSUS) \\\n   $(LIBSYSCOIN_CRYPTO) \\\n   $(LIBLEVELDB) \\\n   $(LIBLEVELDB_SSE42) \\\n@@ -27,20 +48,33 @@ bench_bench_syscoin_LDADD += $(LIBSYSCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n \n if ENABLE_WALLET\n-bench_bench_syscoin_LDADD += $(LIBSYSCOIN_WALLET)\n+bench_bench_syscoin_SOURCES += bench/coin_selection.cpp\n+bench_bench_syscoin_LDADD += $(LIBSYSCOIN_WALLET) $(LIBSYSCOIN_CRYPTO)\n endif\n \n bench_bench_syscoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n bench_bench_syscoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n-CLEAN_SYSCOIN_BENCH = bench/*.gcda bench/*.gcno\n+CLEAN_SYSCOIN_BENCH = bench/*.gcda bench/*.gcno $(GENERATED_TEST_FILES)\n \n CLEANFILES += $(CLEAN_SYSCOIN_BENCH)\n \n+bench/checkblock.cpp: bench/data/block813851.raw.h\n+\n syscoin_bench: $(BENCH_BINARY)\n \n bench: $(BENCH_BINARY) FORCE\n \t$(BENCH_BINARY)\n \n syscoin_bench_clean : FORCE\n \trm -f $(CLEAN_SYSCOIN_BENCH) $(bench_bench_syscoin_OBJECTS) $(BENCH_BINARY)\n+\n+bench/data/%.raw.h: bench/data/%.raw\n+\t@$(MKDIR_P) $(@D)\n+\t@{ \\\n+\t echo \"namespace raw_bench{\" && \\\n+\t echo \"static unsigned const char $(*F)[] = {\" && \\\n+\t $(HEXDUMP) -v -e '8/1 \"0x%02x, \"' -e '\"\\n\"' $< | $(SED) -e 's/0x  ,//g' && \\\n+\t echo \"};};\"; \\\n+\t} > \"$@.new\" && mv -f \"$@.new\" \"$@\"\n+\t@echo \"Generated $@\""
      },
      {
        "sha": "ac16a0c6c6687d96a06f6481b18351270d88f0d9",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 33,
        "deletions": 18,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,3 +1,8 @@\n+# Copyright (c) 2013-2016 The Syscoin Core developers\n+# Copyright (c) 2014-2018 The Syscoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n bin_PROGRAMS += qt/syscoin-qt\n EXTRA_LIBRARIES += qt/libsyscoinqt.a\n \n@@ -30,6 +35,7 @@ QT_FORMS_UI = \\\n   qt/forms/intro.ui \\\n   qt/forms/modaloverlay.ui \\\n   qt/forms/masternodelist.ui \\\n+  qt/forms/qrdialog.ui \\\n   qt/forms/openuridialog.ui \\\n   qt/forms/optionsdialog.ui \\\n   qt/forms/overviewpage.ui \\\n@@ -69,6 +75,7 @@ QT_MOC_CPP = \\\n   qt/moc_overviewpage.cpp \\\n   qt/moc_peertablemodel.cpp \\\n   qt/moc_paymentserver.cpp \\\n+  qt/moc_qrdialog.cpp \\\n   qt/moc_qvalidatedlineedit.cpp \\\n   qt/moc_qvaluecombobox.cpp \\\n   qt/moc_receivecoinsdialog.cpp \\\n@@ -142,6 +149,7 @@ SYSCOIN_QT_H = \\\n   qt/paymentserver.h \\\n   qt/peertablemodel.h \\\n   qt/platformstyle.h \\\n+  qt/qrdialog.h \\\n   qt/qvalidatedlineedit.h \\\n   qt/qvaluecombobox.h \\\n   qt/receivecoinsdialog.h \\\n@@ -169,6 +177,7 @@ SYSCOIN_QT_H = \\\n \n RES_ICONS = \\\n   qt/res/icons/syscoin.ico \\\n+  qt/res/icons/syscoin_testnet.ico \\\n   qt/res/icons/syscoin.png \\\n   qt/res/icons/chevron.png \\\n   qt/res/icons/warning.png \\\n@@ -214,6 +223,7 @@ RES_ICONS = \\\n   qt/res/icons/drkblue/synced.png \\\n   qt/res/icons/drkblue/transaction0.png \\\n   qt/res/icons/drkblue/transaction2.png \\\n+  qt/res/icons/drkblue/transaction_abandoned.png \\\n   qt/res/icons/drkblue/transaction_conflicted.png \\\n   qt/res/icons/drkblue/tx_inout.png \\\n   qt/res/icons/drkblue/tx_input.png \\\n@@ -224,7 +234,6 @@ RES_ICONS = \\\n   qt/res/icons/drkblue/verify.png \\\n   qt/res/icons/drkblue/fontbigger.png \\\n   qt/res/icons/drkblue/fontsmaller.png \\\n-  qt/res/icons/drkblue/transaction_abandoned.png \\\n   qt/res/icons/drkblue/network_disabled.png \\\n   qt/res/icons/crownium/add.png \\\n   qt/res/icons/crownium/address-book.png \\\n@@ -268,6 +277,7 @@ RES_ICONS = \\\n   qt/res/icons/crownium/synced.png \\\n   qt/res/icons/crownium/transaction0.png \\\n   qt/res/icons/crownium/transaction2.png \\\n+  qt/res/icons/crownium/transaction_abandoned.png \\\n   qt/res/icons/crownium/transaction_conflicted.png \\\n   qt/res/icons/crownium/tx_inout.png \\\n   qt/res/icons/crownium/tx_input.png \\\n@@ -278,7 +288,6 @@ RES_ICONS = \\\n   qt/res/icons/crownium/verify.png \\\n   qt/res/icons/crownium/fontbigger.png \\\n   qt/res/icons/crownium/fontsmaller.png \\\n-  qt/res/icons/crownium/transaction_abandoned.png \\\n   qt/res/icons/crownium/network_disabled.png \\\n   qt/res/icons/light/add.png \\\n   qt/res/icons/light/address-book.png \\\n@@ -376,6 +385,7 @@ RES_ICONS = \\\n   qt/res/icons/trad/synced.png \\\n   qt/res/icons/trad/transaction0.png \\\n   qt/res/icons/trad/transaction2.png \\\n+  qt/res/icons/trad/transaction_abandoned.png \\\n   qt/res/icons/trad/transaction_conflicted.png \\\n   qt/res/icons/trad/tx_inout.png \\\n   qt/res/icons/trad/tx_input.png \\\n@@ -386,10 +396,9 @@ RES_ICONS = \\\n   qt/res/icons/trad/verify.png \\\n   qt/res/icons/trad/fontbigger.png \\\n   qt/res/icons/trad/fontsmaller.png \\\n-  qt/res/icons/trad/transaction_abandoned.png \\\n   qt/res/icons/trad/network_disabled.png\n \n-SYSCOIN_QT_CPP = \\\n+SYSCOIN_QT_BASE_CPP = \\\n   qt/bantablemodel.cpp \\\n   qt/syscoinaddressvalidator.cpp \\\n   qt/syscoinamountfield.cpp \\\n@@ -414,12 +423,9 @@ SYSCOIN_QT_CPP = \\\n   qt/trafficgraphwidget.cpp \\\n   qt/utilitydialog.cpp\n \n-if TARGET_WINDOWS\n-SYSCOIN_QT_CPP += qt/winshutdownmonitor.cpp\n-endif\n+SYSCOIN_QT_WINDOWS_CPP = qt/winshutdownmonitor.cpp\n \n-if ENABLE_WALLET\n-SYSCOIN_QT_CPP += \\\n+SYSCOIN_QT_WALLET_CPP = \\\n   qt/addressbookpage.cpp \\\n   qt/addresstablemodel.cpp \\\n   qt/askpassphrasedialog.cpp \\\n@@ -432,6 +438,7 @@ SYSCOIN_QT_CPP += \\\n   qt/overviewpage.cpp \\\n   qt/paymentrequestplus.cpp \\\n   qt/paymentserver.cpp \\\n+  qt/qrdialog.cpp \\\n   qt/receivecoinsdialog.cpp \\\n   qt/receiverequestdialog.cpp \\\n   qt/recentrequeststablemodel.cpp \\\n@@ -448,6 +455,13 @@ SYSCOIN_QT_CPP += \\\n   qt/walletmodel.cpp \\\n   qt/walletmodeltransaction.cpp \\\n   qt/walletview.cpp\n+\n+SYSCOIN_QT_CPP = $(SYSCOIN_QT_BASE_CPP)\n+if TARGET_WINDOWS\n+SYSCOIN_QT_CPP += $(SYSCOIN_QT_WINDOWS_CPP)\n+endif\n+if ENABLE_WALLET\n+SYSCOIN_QT_CPP += $(SYSCOIN_QT_WALLET_CPP)\n endif\n \n RES_IMAGES = \\\n@@ -509,7 +523,7 @@ RES_CSS = \\\n   qt/res/css/light-hires.css \\\n   qt/res/css/trad.css\n \n-RES_MOVIES = $(wildcard qt/res/movies/spinner-*.png)\n+RES_MOVIES = $(wildcard $(srcdir)/qt/res/movies/spinner-*.png)\n \n SYSCOIN_RC = qt/res/syscoin-qt-res.rc\n \n@@ -558,7 +572,7 @@ endif\n if ENABLE_ZMQ\n qt_syscoin_qt_LDADD += $(LIBSYSCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n-qt_syscoin_qt_LDADD += $(LIBSYSCOIN_CLI) $(LIBSYSCOIN_COMMON) $(LIBSYSCOIN_UTIL) $(LIBSYSCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) \\\n+qt_syscoin_qt_LDADD += $(LIBSYSCOIN_CLI) $(LIBSYSCOIN_COMMON) $(LIBSYSCOIN_UTIL) $(LIBSYSCOIN_CONSENSUS) $(LIBSYSCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n qt_syscoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n@@ -569,23 +583,24 @@ QT_QM=$(QT_TS:.ts=.qm)\n \n SECONDARY: $(QT_QM)\n \n-qt/syscoinstrings.cpp: $(libsyscoin_server_a_SOURCES) $(libsyscoin_wallet_a_SOURCES) $(libsyscoin_common_a_SOURCES) $(libsyscoin_zmq_a_SOURCES) $(libsyscoin_consensus_a_SOURCES) $(libsyscoin_util_a_SOURCES)\n+$(srcdir)/qt/syscoinstrings.cpp: $(libsyscoin_server_a_SOURCES) $(libsyscoin_wallet_a_SOURCES) $(libsyscoin_common_a_SOURCES) $(libsyscoin_zmq_a_SOURCES) $(libsyscoin_consensus_a_SOURCES) $(libsyscoin_util_a_SOURCES)\n \t@test -n $(XGETTEXT) || echo \"xgettext is required for updating translations\"\n-\t$(AM_V_GEN) cd $(srcdir); XGETTEXT=$(XGETTEXT) ../share/qt/extract_strings_qt.py $^\n+\t$(AM_V_GEN) cd $(srcdir); XGETTEXT=$(XGETTEXT) PACKAGE_NAME=\"$(PACKAGE_NAME)\" COPYRIGHT_HOLDERS=\"$(COPYRIGHT_HOLDERS)\" COPYRIGHT_HOLDERS_SUBSTITUTION=\"$(COPYRIGHT_HOLDERS_SUBSTITUTION)\" $(PYTHON) ../share/qt/extract_strings_qt.py $^\n \n-translate: qt/syscoinstrings.cpp $(QT_FORMS_UI) $(QT_FORMS_UI) $(SYSCOIN_QT_CPP) qt/syscoin.cpp $(SYSCOIN_QT_H) $(SYSCOIN_MM)\n+translate: $(srcdir)/qt/syscoinstrings.cpp $(QT_FORMS_UI) $(QT_FORMS_UI) $(SYSCOIN_QT_BASE_CPP) qt/syscoin.cpp $(SYSCOIN_QT_WINDOWS_CPP) $(SYSCOIN_QT_WALLET_CPP) $(SYSCOIN_QT_H) $(SYSCOIN_MM)\n \t@test -n $(LUPDATE) || echo \"lupdate is required for updating translations\"\n-\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(LUPDATE) $^ -locations relative -no-obsolete -ts qt/locale/syscoin_en.ts\n+\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(LUPDATE) $^ -locations relative -no-obsolete -ts $(srcdir)/qt/locale/syscoin_en.ts\n \n $(QT_QRC_LOCALE_CPP): $(QT_QRC_LOCALE) $(QT_QM)\n \t@test -f $(RCC)\n-\t@test -f $(@D)/$(<F) || cp -f $< $(@D)\n-\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(RCC) -name syscoin_locale $(@D)/$(<F) | \\\n+\t@cp -f $< $(@D)/temp_$(<F)\n+\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(RCC) $(RCCFLAGS) -name syscoin_locale $(@D)/temp_$(<F) | \\\n \t  $(SED) -e '/^\\*\\*.*Created:/d' -e '/^\\*\\*.*by:/d' > $@\n+\t@rm $(@D)/temp_$(<F)\n \n $(QT_QRC_CPP): $(QT_QRC) $(QT_FORMS_H) $(RES_ICONS) $(RES_IMAGES) $(RES_CSS) $(RES_MOVIES) $(PROTOBUF_H)\n \t@test -f $(RCC)\n-\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(RCC) -name syscoin $< | \\\n+\t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(RCC) $(RCCFLAGS) -name syscoin $< | \\\n \t  $(SED) -e '/^\\*\\*.*Created:/d' -e '/^\\*\\*.*by:/d' > $@\n \n CLEAN_QT = $(nodist_qt_libsyscoinqt_a_SOURCES) $(QT_QM) $(QT_FORMS_H) qt/*.gcda qt/*.gcno"
      },
      {
        "sha": "fbd3e36aa534d0d0e3adbeb3d5d86de4bbac96e0",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,8 +1,14 @@\n+# Copyright (c) 2013-2016 The Syscoin Core developers\n+# Copyright (c) 2014-2018 The Syscoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n bin_PROGRAMS += qt/test/test_syscoin-qt\n TESTS += qt/test/test_syscoin-qt\n \n TEST_QT_MOC_CPP = \\\n   qt/test/moc_compattests.cpp \\\n+  qt/test/moc_rpcnestedtests.cpp \\\n   qt/test/moc_trafficgraphdatatests.cpp \\\n   qt/test/moc_uritests.cpp \n \n@@ -12,6 +18,7 @@ endif\n \n TEST_QT_H = \\\n   qt/test/compattests.h \\\n+  qt/test/rpcnestedtests.h \\\n   qt/test/uritests.h \\\n   qt/test/paymentrequestdata.h \\\n   qt/test/paymentservertests.h \\\n@@ -22,6 +29,7 @@ qt_test_test_syscoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(SYSCOIN_INCLUDES) $(SYSCOIN_\n \n qt_test_test_syscoin_qt_SOURCES = \\\n   qt/test/compattests.cpp \\\n+  qt/test/rpcnestedtests.cpp \\\n   qt/test/test_main.cpp \\\n   qt/test/uritests.cpp \\\n   qt/test/trafficgraphdatatests.cpp \\\n@@ -40,8 +48,8 @@ endif\n if ENABLE_ZMQ\n qt_test_test_syscoin_qt_LDADD += $(LIBSYSCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n-qt_test_test_syscoin_qt_LDADD += $(LIBSYSCOIN_CLI) $(LIBSYSCOIN_COMMON) $(LIBSYSCOIN_UTIL) $(LIBSYSCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) \\\n-  $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n+qt_test_test_syscoin_qt_LDADD += $(LIBSYSCOIN_CLI) $(LIBSYSCOIN_COMMON) $(LIBSYSCOIN_UTIL) $(LIBSYSCOIN_CONSENSUS) $(LIBSYSCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBLEVELDB_SSE42) \\\n+  $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n   $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n qt_test_test_syscoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)"
      },
      {
        "sha": "86e18d2913e97fc2349eb21a3a2ce5b3af2aa369",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 71,
        "deletions": 19,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,3 +1,8 @@\n+# Copyright (c) 2013-2016 The Syscoin Core developers\n+# Copyright (c) 2014-2018 The Syscoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n TESTS += test/test_syscoin\n bin_PROGRAMS += test/test_syscoin\n TEST_SRCDIR = test\n@@ -8,16 +13,42 @@ EXTRA_DIST += \\\n \ttest/bctest.py \\\n \ttest/syscoin-util-test.py \\\n \ttest/data/syscoin-util-test.json \\\n-\ttest/data/blanktx.hex \\\n+\ttest/data/blanktxv1.hex \\\n+\ttest/data/blanktxv1.json \\\n+\ttest/data/blanktxv2.hex \\\n+\ttest/data/blanktxv2.json \\\n \ttest/data/tt-delin1-out.hex \\\n+\ttest/data/tt-delin1-out.json \\\n \ttest/data/tt-delout1-out.hex \\\n+\ttest/data/tt-delout1-out.json \\\n \ttest/data/tt-locktime317000-out.hex \\\n+\ttest/data/tt-locktime317000-out.json \\\n \ttest/data/tx394b54bb.hex \\\n \ttest/data/txcreate1.hex \\\n+\ttest/data/txcreate1.json \\\n \ttest/data/txcreate2.hex \\\n+\ttest/data/txcreate2.json \\\n \ttest/data/txcreatedata1.hex \\\n+\ttest/data/txcreatedata1.json \\\n \ttest/data/txcreatedata2.hex \\\n-\ttest/data/txcreatesign.hex \\\n+\ttest/data/txcreatedata2.json \\\n+\ttest/data/txcreatedata_seq0.hex \\\n+\ttest/data/txcreatedata_seq0.json \\\n+\ttest/data/txcreatedata_seq1.hex \\\n+\ttest/data/txcreatedata_seq1.json \\\n+\ttest/data/txcreatemultisig1.hex \\\n+\ttest/data/txcreatemultisig1.json \\\n+\ttest/data/txcreatemultisig2.hex \\\n+\ttest/data/txcreatemultisig2.json \\\n+\ttest/data/txcreateoutpubkey1.hex \\\n+\ttest/data/txcreateoutpubkey1.json \\\n+\ttest/data/txcreatescript1.hex \\\n+\ttest/data/txcreatescript1.json \\\n+\ttest/data/txcreatescript2.hex \\\n+\ttest/data/txcreatescript2.json \\\n+\ttest/data/txcreatesignv1.hex \\\n+\ttest/data/txcreatesignv1.json \\\n+\ttest/data/txcreatesignv2.hex \\\n \ttest/node1/syscoin.conf \\\n \ttest/node2/syscoin.conf \\\n \ttest/node3/syscoin.conf\n@@ -28,6 +59,8 @@ JSON_TEST_FILES = \\\n   test/data/base58_encode_decode.json \\\n   test/data/base58_keys_invalid.json \\\n   test/data/bip39_vectors.json \\\n+  test/data/proposals_valid.json \\\n+  test/data/proposals_invalid.json \\\n   test/data/tx_invalid.json \\\n   test/data/tx_valid.json \\\n   test/data/sighash.json \\\n@@ -50,20 +83,24 @@ SYSCOIN_TESTS =\\\n   test/arith_uint256_tests.cpp \\\n   test/scriptnum10.h \\\n   test/addrman_tests.cpp \\\n+  test/alert_tests.cpp \\\n+  test/amount_tests.cpp \\\n   test/allocator_tests.cpp \\\n   test/base32_tests.cpp \\\n   test/base58_tests.cpp \\\n   test/base64_tests.cpp \\\n   test/bip32_tests.cpp \\\n   test/bip39_tests.cpp \\\n+  test/blockencodings_tests.cpp \\\n   test/bloom_tests.cpp \\\n   test/bswap_tests.cpp \\\n+  test/checkqueue_tests.cpp \\\n   test/cachemap_tests.cpp \\\n   test/cachemultimap_tests.cpp \\\n-  test/checkblock_tests.cpp \\\n   test/coins_tests.cpp \\\n   test/compress_tests.cpp \\\n   test/crypto_tests.cpp \\\n+  test/cuckoocache_tests.cpp \\\n   test/DoS_tests.cpp \\\n   test/getarg_tests.cpp \\\n   test/governance_validators_tests.cpp \\\n@@ -81,12 +118,14 @@ SYSCOIN_TESTS =\\\n   test/policyestimator_tests.cpp \\\n   test/pow_tests.cpp \\\n   test/prevector_tests.cpp \\\n+  test/raii_event_tests.cpp \\\n   test/ratecheck_tests.cpp \\\n   test/reverselock_tests.cpp \\\n   test/rpc_tests.cpp \\\n   test/sanity_tests.cpp \\\n   test/scheduler_tests.cpp \\\n   test/script_P2SH_tests.cpp \\\n+  test/script_P2PK_tests.cpp \\\n   test/script_P2PKH_tests.cpp \\\n   test/script_tests.cpp \\\n   test/scriptnum_tests.cpp \\\n@@ -95,8 +134,12 @@ SYSCOIN_TESTS =\\\n   test/sigopcount_tests.cpp \\\n   test/skiplist_tests.cpp \\\n   test/streams_tests.cpp \\\n+  test/subsidy_tests.cpp \\\n   test/test_syscoin.cpp \\\n   test/test_syscoin.h \\\n+  test/test_random.h \\\n+  test/testutil.cpp \\\n+  test/testutil.h \\\n   test/timedata_tests.cpp \\\n   test/transaction_tests.cpp \\\n   test/txvalidationcache_tests.cpp \\\n@@ -107,21 +150,23 @@ SYSCOIN_TESTS =\\\n \n if ENABLE_WALLET\n SYSCOIN_TESTS += \\\n-  test/accounting_tests.cpp \\\n+  wallet/test/wallet_test_fixture.cpp \\\n+  wallet/test/wallet_test_fixture.h \\\n+  wallet/test/accounting_tests.cpp \\\n   wallet/test/wallet_tests.cpp \\\n-  test/rpc_wallet_tests.cpp\n+  wallet/test/crypto_tests.cpp\n endif\n \n test_test_syscoin_SOURCES = $(SYSCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n test_test_syscoin_CPPFLAGS = $(AM_CPPFLAGS) $(SYSCOIN_INCLUDES) -I$(builddir)/test/ $(TESTDEFS) $(EVENT_CFLAGS)\n-test_test_syscoin_LDADD = $(LIBSYSCOIN_SERVER) $(LIBSYSCOIN_CLI) $(LIBSYSCOIN_COMMON) $(LIBSYSCOIN_UTIL) $(LIBSYSCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) \\\n-  $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1)\n+test_test_syscoin_LDADD = $(LIBSYSCOIN_SERVER) $(LIBSYSCOIN_CLI) $(LIBSYSCOIN_COMMON) $(LIBSYSCOIN_UTIL) $(LIBSYSCOIN_CONSENSUS) $(LIBSYSCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) \\\n+  $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS)\n test_test_syscoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n if ENABLE_WALLET\n test_test_syscoin_LDADD += $(LIBSYSCOIN_WALLET)\n endif\n \n-test_test_syscoin_LDADD += $(LIBSYSCOIN_CONSENSUS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n+test_test_syscoin_LDADD += $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n test_test_syscoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static\n \n if ENABLE_ZMQ\n@@ -136,6 +181,9 @@ CLEAN_SYSCOIN_TEST = test/*.gcda test/*.gcno $(GENERATED_TEST_FILES)\n \n CLEANFILES += $(CLEAN_SYSCOIN_TEST)\n \n+# This file is problematic for out-of-tree builds if it exists.\n+DISTCLEANFILES += test/buildenv.pyc\n+\n syscoin_test: $(TEST_BINARY)\n \n syscoin_test_check: $(TEST_BINARY) FORCE\n@@ -146,24 +194,28 @@ syscoin_test_clean : FORCE\n \n check-local:\n \t@echo \"Running test/syscoin-util-test.py...\"\n-\t$(AM_V_at)srcdir=$(srcdir) PYTHONPATH=$(builddir)/test $(srcdir)/test/syscoin-util-test.py\n+\t$(AM_V_at)srcdir=$(srcdir) PYTHONPATH=$(builddir)/test $(PYTHON) $(srcdir)/test/syscoin-util-test.py\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check\n if EMBEDDED_UNIVALUE\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check\n endif\n \n-%.json.h: %.json\n+test/data/%.json.h: test/data/%.json\n \t@$(MKDIR_P) $(@D)\n-\t@echo \"namespace json_tests{\" > $@\n-\t@echo \"static unsigned const char $(*F)[] = {\" >> $@\n-\t@$(HEXDUMP) -v -e '8/1 \"0x%02x, \"' -e '\"\\n\"' $< | $(SED) -e 's/0x  ,//g' >> $@\n-\t@echo \"};};\" >> $@\n+\t@{ \\\n+\t echo \"namespace json_tests{\" && \\\n+\t echo \"static unsigned const char $(*F)[] = {\" && \\\n+\t $(HEXDUMP) -v -e '8/1 \"0x%02x, \"' -e '\"\\n\"' $< | $(SED) -e 's/0x  ,//g' && \\\n+\t echo \"};};\"; \\\n+\t} > \"$@.new\" && mv -f \"$@.new\" \"$@\"\n \t@echo \"Generated $@\"\n \n-%.raw.h: %.raw\n+test/data/%.raw.h: test/data/%.raw\n \t@$(MKDIR_P) $(@D)\n-\t@echo \"namespace alert_tests{\" > $@\n-\t@echo \"static unsigned const char $(*F)[] = {\" >> $@\n-\t@$(HEXDUMP) -v -e '8/1 \"0x%02x, \"' -e '\"\\n\"' $< | $(SED) -e 's/0x  ,//g' >> $@\n-\t@echo \"};};\" >> $@\n+\t@{ \\\n+\t echo \"namespace raw_tests{\" && \\\n+\t echo \"static unsigned const char $(*F)[] = {\" && \\\n+\t $(HEXDUMP) -v -e '8/1 \"0x%02x, \"' -e '\"\\n\"' $< | $(SED) -e 's/0x  ,//g' && \\\n+\t echo \"};};\"; \\\n+\t} > \"$@.new\" && mv -f \"$@.new\" \"$@\"\n \t@echo \"Generated $@\""
      },
      {
        "sha": "4db4099d10c0a90381673f85b5e0ba7b0024b601",
        "filename": "src/activemasternode.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 98,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/activemasternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/activemasternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/activemasternode.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,23 +1,21 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"activemasternode.h\"\n #include \"masternode.h\"\n #include \"masternode-sync.h\"\n #include \"masternodeman.h\"\n+#include \"netbase.h\"\n #include \"protocol.h\"\n \n-extern CWallet* pwalletMain;\n-\n // Keep track of the active Masternode\n CActiveMasternode activeMasternode;\n \n void CActiveMasternode::ManageState(CConnman& connman)\n {\n     LogPrint(\"masternode\", \"CActiveMasternode::ManageState -- Start\\n\");\n-    if(!fMasterNode) {\n+    if(!fMasternodeMode) {\n         LogPrint(\"masternode\", \"CActiveMasternode::ManageState -- Not a masternode, returning\\n\");\n         return;\n     }\n@@ -40,11 +38,6 @@ void CActiveMasternode::ManageState(CConnman& connman)\n \n     if(eType == MASTERNODE_REMOTE) {\n         ManageStateRemote();\n-    } else if(eType == MASTERNODE_LOCAL) {\n-        // Try Remote Start first so the started local masternode can be restarted without recreate masternode broadcast.\n-        ManageStateRemote();\n-        if(nState != ACTIVE_MASTERNODE_STARTED)\n-            ManageStateLocal(connman);\n     }\n \n     SendMasternodePing(connman);\n@@ -78,15 +71,9 @@ std::string CActiveMasternode::GetTypeString() const\n {\n     std::string strType;\n     switch(eType) {\n-    case MASTERNODE_UNKNOWN:\n-        strType = \"UNKNOWN\";\n-        break;\n     case MASTERNODE_REMOTE:\n         strType = \"REMOTE\";\n         break;\n-    case MASTERNODE_LOCAL:\n-        strType = \"LOCAL\";\n-        break;\n     default:\n         strType = \"UNKNOWN\";\n         break;\n@@ -111,7 +98,7 @@ bool CActiveMasternode::SendMasternodePing(CConnman& connman)\n     CMasternodePing mnp(outpoint);\n     mnp.nSentinelVersion = nSentinelVersion;\n     mnp.fSentinelIsCurrent =\n-            (abs(GetAdjustedTime() - nSentinelPingTime) < MASTERNODE_WATCHDOG_MAX_SECONDS);\n+            (abs(GetAdjustedTime() - nSentinelPingTime) < MASTERNODE_SENTINEL_PING_MAX_SECONDS);\n     if(!mnp.Sign(keyMasternode, pubKeyMasternode)) {\n         LogPrintf(\"CActiveMasternode::SendMasternodePing -- ERROR: Couldn't sign Masternode Ping\\n\");\n         return false;\n@@ -194,9 +181,13 @@ void CActiveMasternode::ManageStateInitial(CConnman& connman)\n         return;\n     }\n \n+    // Check socket connectivity\n     LogPrintf(\"CActiveMasternode::ManageStateInitial -- Checking inbound connection to '%s'\\n\", service.ToString());\n+    SOCKET hSocket;\n+    bool fConnected = ConnectSocket(service, hSocket, nConnectTimeout) && IsSelectableSocket(hSocket);\n+    CloseSocket(hSocket);\n \n-    if(!connman.ConnectNode(CAddress(service, NODE_NETWORK), NULL, true)) {\n+    if (!fConnected) {\n         nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n         strNotCapableReason = \"Could not connect to \" + service.ToString();\n         LogPrintf(\"CActiveMasternode::ManageStateInitial -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n@@ -206,31 +197,6 @@ void CActiveMasternode::ManageStateInitial(CConnman& connman)\n     // Default to REMOTE\n     eType = MASTERNODE_REMOTE;\n \n-    // Check if wallet funds are available\n-    if(!pwalletMain) {\n-        LogPrintf(\"CActiveMasternode::ManageStateInitial -- %s: Wallet not available\\n\", GetStateString());\n-        return;\n-    }\n-\n-    if(pwalletMain->IsLocked()) {\n-        LogPrintf(\"CActiveMasternode::ManageStateInitial -- %s: Wallet is locked\\n\", GetStateString());\n-        return;\n-    }\n-\n-    if(pwalletMain->GetBalance() < 100000*COIN) {\n-        LogPrintf(\"CActiveMasternode::ManageStateInitial -- %s: Wallet balance is < 100000 SYS\\n\", GetStateString());\n-        return;\n-    }\n-\n-    // Choose coins to use\n-    CPubKey pubKeyCollateral;\n-    CKey keyCollateral;\n-\n-    // If collateral is found switch to LOCAL mode\n-    if(pwalletMain->GetMasternodeOutpointAndKeys(outpoint, pubKeyCollateral, keyCollateral)) {\n-        eType = MASTERNODE_LOCAL;\n-    }\n-\n     LogPrint(\"masternode\", \"CActiveMasternode::ManageStateInitial -- End status = %s, type = %s, pinger enabled = %d\\n\", GetStatus(), GetTypeString(), fPingerEnabled);\n }\n \n@@ -262,7 +228,7 @@ void CActiveMasternode::ManageStateRemote()\n         }\n         if(nState != ACTIVE_MASTERNODE_STARTED) {\n             LogPrintf(\"CActiveMasternode::ManageStateRemote -- STARTED!\\n\");\n-            outpoint = infoMn.vin.prevout;\n+            outpoint = infoMn.outpoint;\n             service = infoMn.addr;\n             fPingerEnabled = true;\n             nState = ACTIVE_MASTERNODE_STARTED;\n@@ -274,57 +240,3 @@ void CActiveMasternode::ManageStateRemote()\n         LogPrintf(\"CActiveMasternode::ManageStateRemote -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n     }\n }\n-\n-void CActiveMasternode::ManageStateLocal(CConnman& connman)\n-{\n-    LogPrint(\"masternode\", \"CActiveMasternode::ManageStateLocal -- status = %s, type = %s, pinger enabled = %d\\n\", GetStatus(), GetTypeString(), fPingerEnabled);\n-    if(nState == ACTIVE_MASTERNODE_STARTED) {\n-        return;\n-    }\n-\n-    // Choose coins to use\n-    CPubKey pubKeyCollateral;\n-    CKey keyCollateral;\n-\n-    if(pwalletMain->GetMasternodeOutpointAndKeys(outpoint, pubKeyCollateral, keyCollateral)) {\n-        int nPrevoutAge = GetUTXOConfirmations(outpoint);\n-        if(nPrevoutAge < Params().GetConsensus().nMasternodeMinimumConfirmations){\n-            nState = ACTIVE_MASTERNODE_INPUT_TOO_NEW;\n-            strNotCapableReason = strprintf(_(\"%s - %d confirmations\"), GetStatus(), nPrevoutAge);\n-            LogPrintf(\"CActiveMasternode::ManageStateLocal -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n-            return;\n-        }\n-\n-        {\n-            LOCK(pwalletMain->cs_wallet);\n-            pwalletMain->LockCoin(outpoint);\n-        }\n-\n-        CMasternodeBroadcast mnb;\n-        std::string strError;\n-        if(!CMasternodeBroadcast::Create(outpoint, service, keyCollateral, pubKeyCollateral, keyMasternode, pubKeyMasternode, strError, mnb)) {\n-            nState = ACTIVE_MASTERNODE_NOT_CAPABLE;\n-            strNotCapableReason = \"Error creating mastenode broadcast: \" + strError;\n-            LogPrintf(\"CActiveMasternode::ManageStateLocal -- %s: %s\\n\", GetStateString(), strNotCapableReason);\n-            return;\n-        }\n-\n-        {\n-            LOCK(cs_main);\n-            // remember the hash of the block where masternode collateral had minimum required confirmations\n-            mnb.nCollateralMinConfBlockHash = chainActive[GetUTXOHeight(outpoint) + Params().GetConsensus().nMasternodeMinimumConfirmations - 1]->GetBlockHash();\n-        }\n-\n-        fPingerEnabled = true;\n-        nState = ACTIVE_MASTERNODE_STARTED;\n-\n-        //update to masternode list\n-        LogPrintf(\"CActiveMasternode::ManageStateLocal -- Update Masternode List\\n\");\n-        mnodeman.UpdateMasternodeList(mnb, connman);\n-        mnodeman.NotifyMasternodeUpdates(connman);\n-\n-        //send to all peers\n-        LogPrintf(\"CActiveMasternode::ManageStateLocal -- Relay broadcast, collateral=%s\\n\", outpoint.ToStringShort());\n-        mnb.Relay(connman);\n-    }\n-}"
      },
      {
        "sha": "b442a3c13d897defa679269a71c8fa2d219ec5dd",
        "filename": "src/activemasternode.h",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/activemasternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/activemasternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/activemasternode.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,14 +1,14 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef ACTIVEMASTERNODE_H\n #define ACTIVEMASTERNODE_H\n \n-#include \"net.h\"\n+#include \"chainparams.h\"\n #include \"key.h\"\n-#include \"wallet/wallet.h\"\n+#include \"net.h\"\n+#include \"primitives/transaction.h\"\n \n class CActiveMasternode;\n \n@@ -26,8 +26,7 @@ class CActiveMasternode\n public:\n     enum masternode_type_enum_t {\n         MASTERNODE_UNKNOWN = 0,\n-        MASTERNODE_REMOTE  = 1,\n-        MASTERNODE_LOCAL   = 2\n+        MASTERNODE_REMOTE  = 1\n     };\n \n private:\n@@ -80,7 +79,6 @@ class CActiveMasternode\n private:\n     void ManageStateInitial(CConnman& connman);\n     void ManageStateRemote();\n-    void ManageStateLocal(CConnman& connman);\n };\n \n #endif"
      },
      {
        "sha": "d1acf4ade535147fd641523d96c9b0062a8b50a9",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -104,7 +103,7 @@ bool CBanDB::Read(banmap_t& banSet)\n         if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n             return error(\"%s: Invalid network magic number\", __func__);\n \n-        // de-serialize address data into one CAddrMan object\n+        // de-serialize ban data\n         ssBanlist >> banSet;\n     }\n     catch (const std::exception& e) {"
      },
      {
        "sha": "714c14ecc8724536f09f8034efdd0f5ad52d9270",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -47,9 +46,8 @@ class CBanEntry\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n         READWRITE(nCreateTime);\n         READWRITE(nBanUntil);\n         READWRITE(banReason);"
      },
      {
        "sha": "b28f668942b07da5f3c387db270aef25be055152",
        "filename": "src/addressindex.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/addressindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/addressindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addressindex.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "bbf38d1d4d1221c37965ddd7bf202444868958bb",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 14,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,4 +1,5 @@\n // Copyright (c) 2012 Pieter Wuille\n+// Copyright (c) 2012-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -52,14 +53,7 @@ bool CAddrInfo::IsTerrible(int64_t nNow) const\n double CAddrInfo::GetChance(int64_t nNow) const\n {\n     double fChance = 1.0;\n-\n-    int64_t nSinceLastSeen = nNow - nTime;\n-    int64_t nSinceLastTry = nNow - nLastTry;\n-\n-    if (nSinceLastSeen < 0)\n-        nSinceLastSeen = 0;\n-    if (nSinceLastTry < 0)\n-        nSinceLastTry = 0;\n+    int64_t nSinceLastTry = std::max<int64_t>(nNow - nLastTry, 0);\n \n     // deprioritize very recent attempts away\n     if (nSinceLastTry < 60 * 10)\n@@ -196,6 +190,9 @@ void CAddrMan::MakeTried(CAddrInfo& info, int nId)\n void CAddrMan::Good_(const CService& addr, int64_t nTime)\n {\n     int nId;\n+\n+    nLastGood = nTime;\n+\n     CAddrInfo* pinfo = Find(addr, &nId);\n \n     // if not found, bail out\n@@ -251,6 +248,11 @@ bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimeP\n     int nId;\n     CAddrInfo* pinfo = Find(addr, &nId);\n \n+    // Do not set a penalty for a source's self-announcement\n+    if (addr == source) {\n+        nTimePenalty = 0;\n+    }\n+\n     if (pinfo) {\n         // periodically update nTime\n         bool fCurrentlyOnline = (GetAdjustedTime() - addr.nTime < 24 * 60 * 60);\n@@ -310,7 +312,7 @@ bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimeP\n     return fNew;\n }\n \n-void CAddrMan::Attempt_(const CService& addr, int64_t nTime)\n+void CAddrMan::Attempt_(const CService& addr, bool fCountFailure, int64_t nTime)\n {\n     CAddrInfo* pinfo = Find(addr);\n \n@@ -326,7 +328,10 @@ void CAddrMan::Attempt_(const CService& addr, int64_t nTime)\n \n     // update info\n     info.nLastTry = nTime;\n-    info.nAttempts++;\n+    if (fCountFailure && info.nLastCountAttempt < nLastGood) {\n+        info.nLastCountAttempt = nTime;\n+        info.nAttempts++;\n+    }\n }\n \n CAddrInfo CAddrMan::Select_(bool newOnly)\n@@ -346,8 +351,8 @@ CAddrInfo CAddrMan::Select_(bool newOnly)\n             int nKBucket = RandomInt(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = RandomInt(ADDRMAN_BUCKET_SIZE);\n             while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand()) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand()) % ADDRMAN_BUCKET_SIZE;\n+                nKBucket = (nKBucket + insecure_rand.rand32()) % ADDRMAN_TRIED_BUCKET_COUNT;\n+                nKBucketPos = (nKBucketPos + insecure_rand.rand32()) % ADDRMAN_BUCKET_SIZE;\n             }\n             int nId = vvTried[nKBucket][nKBucketPos];\n             assert(mapInfo.count(nId) == 1);\n@@ -363,8 +368,8 @@ CAddrInfo CAddrMan::Select_(bool newOnly)\n             int nUBucket = RandomInt(ADDRMAN_NEW_BUCKET_COUNT);\n             int nUBucketPos = RandomInt(ADDRMAN_BUCKET_SIZE);\n             while (vvNew[nUBucket][nUBucketPos] == -1) {\n-                nUBucket = (nUBucket + insecure_rand()) % ADDRMAN_NEW_BUCKET_COUNT;\n-                nUBucketPos = (nUBucketPos + insecure_rand()) % ADDRMAN_BUCKET_SIZE;\n+                nUBucket = (nUBucket + insecure_rand.rand32()) % ADDRMAN_NEW_BUCKET_COUNT;\n+                nUBucketPos = (nUBucketPos + insecure_rand.rand32()) % ADDRMAN_BUCKET_SIZE;\n             }\n             int nId = vvNew[nUBucket][nUBucketPos];\n             assert(mapInfo.count(nId) == 1);"
      },
      {
        "sha": "c0a3c09e82b0b07dcd908bd32351aa1a937c7a69",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 47,
        "deletions": 41,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,4 +1,5 @@\n // Copyright (c) 2012 Pieter Wuille\n+// Copyright (c) 2012-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -28,6 +29,9 @@ class CAddrInfo : public CAddress\n     //! last try whatsoever by us (memory only)\n     int64_t nLastTry;\n \n+    //! last counted attempt (memory only)\n+    int64_t nLastCountAttempt;\n+\n private:\n     //! where knowledge about this address first came from\n     CNetAddr source;\n@@ -54,7 +58,7 @@ class CAddrInfo : public CAddress\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(*(CAddress*)this);\n         READWRITE(source);\n         READWRITE(nLastSuccess);\n@@ -65,6 +69,7 @@ class CAddrInfo : public CAddress\n     {\n         nLastSuccess = 0;\n         nLastTry = 0;\n+        nLastCountAttempt = 0;\n         nAttempts = 0;\n         nRefCount = 0;\n         fInTried = false;\n@@ -199,10 +204,16 @@ class CAddrMan\n     //! list of \"new\" buckets\n     int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE];\n \n+    //! last time Good was called (memory only)\n+    int64_t nLastGood;\n+\n protected:\n     //! secret key to randomize bucket select with\n     uint256 nKey;\n \n+    //! Source of random numbers for randomization in inner loops\n+    FastRandomContext insecure_rand;\n+\n     //! Find an entry.\n     CAddrInfo* Find(const CNetAddr& addr, int *pnId = NULL);\n \n@@ -229,7 +240,7 @@ class CAddrMan\n     bool Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty);\n \n     //! Mark an entry as attempted to connect.\n-    void Attempt_(const CService &addr, int64_t nTime);\n+    void Attempt_(const CService &addr, bool fCountFailure, int64_t nTime);\n \n     //! Select an address to connect to, if newOnly is set to true, only the new table is selected from.\n     CAddrInfo Select_(bool newOnly);\n@@ -282,7 +293,7 @@ class CAddrMan\n      * very little in common.\n      */\n     template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersionDummy) const\n+    void Serialize(Stream &s) const\n     {\n         LOCK(cs);\n \n@@ -332,7 +343,7 @@ class CAddrMan\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int nType, int nVersionDummy)\n+    void Unserialize(Stream& s)\n     {\n         LOCK(cs);\n \n@@ -352,6 +363,14 @@ class CAddrMan\n             nUBuckets ^= (1 << 30);\n         }\n \n+        if (nNew > ADDRMAN_NEW_BUCKET_COUNT * ADDRMAN_BUCKET_SIZE) {\n+            throw std::ios_base::failure(\"Corrupt CAddrMan serialization, nNew exceeds limit.\");\n+        }\n+\n+        if (nTried > ADDRMAN_TRIED_BUCKET_COUNT * ADDRMAN_BUCKET_SIZE) {\n+            throw std::ios_base::failure(\"Corrupt CAddrMan serialization, nTried exceeds limit.\");\n+        }\n+\n         // Deserialize entries from the new table.\n         for (int n = 0; n < nNew; n++) {\n             CAddrInfo &info = mapInfo[n];\n@@ -429,11 +448,6 @@ class CAddrMan\n         Check();\n     }\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const\n-    {\n-        return (CSizeComputer(nType, nVersion) << *this).size();\n-    }\n-\n     void Clear()\n     {\n         std::vector<int>().swap(vRandom);\n@@ -452,6 +466,7 @@ class CAddrMan\n         nIdCount = 0;\n         nTried = 0;\n         nNew = 0;\n+        nLastGood = 1; //Initially at 1 so that \"never\" is strictly worse.\n     }\n \n     CAddrMan()\n@@ -467,6 +482,7 @@ class CAddrMan\n     //! Return the number of (unique) addresses in all tables.\n     size_t size() const\n     {\n+        LOCK(cs); // TODO: Cache this in an atomic to avoid this overhead\n         return vRandom.size();\n     }\n \n@@ -486,13 +502,11 @@ class CAddrMan\n     //! Add a single address.\n     bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0)\n     {\n+        LOCK(cs);\n         bool fRet = false;\n-        {\n-            LOCK(cs);\n-            Check();\n-            fRet |= Add_(addr, source, nTimePenalty);\n-            Check();\n-        }\n+        Check();\n+        fRet |= Add_(addr, source, nTimePenalty);\n+        Check();\n         if (fRet)\n             LogPrint(\"addrman\", \"Added %s from %s: %i tried, %i new\\n\", addr.ToStringIPPort(), source.ToString(), nTried, nNew);\n         return fRet;\n@@ -501,14 +515,12 @@ class CAddrMan\n     //! Add multiple addresses.\n     bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n     {\n+        LOCK(cs);\n         int nAdd = 0;\n-        {\n-            LOCK(cs);\n-            Check();\n-            for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++)\n-                nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\n-            Check();\n-        }\n+        Check();\n+        for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++)\n+            nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\n+        Check();\n         if (nAdd)\n             LogPrint(\"addrman\", \"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString(), nTried, nNew);\n         return nAdd > 0;\n@@ -517,23 +529,19 @@ class CAddrMan\n     //! Mark an entry as accessible.\n     void Good(const CService &addr, int64_t nTime = GetAdjustedTime())\n     {\n-        {\n-            LOCK(cs);\n-            Check();\n-            Good_(addr, nTime);\n-            Check();\n-        }\n+        LOCK(cs);\n+        Check();\n+        Good_(addr, nTime);\n+        Check();\n     }\n \n     //! Mark an entry as connection attempted to.\n-    void Attempt(const CService &addr, int64_t nTime = GetAdjustedTime())\n+    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n     {\n-        {\n-            LOCK(cs);\n-            Check();\n-            Attempt_(addr, nTime);\n-            Check();\n-        }\n+        LOCK(cs);\n+        Check();\n+        Attempt_(addr, fCountFailure, nTime);\n+        Check();\n     }\n \n     /**\n@@ -567,12 +575,10 @@ class CAddrMan\n     //! Mark an entry as currently-connected-to.\n     void Connected(const CService &addr, int64_t nTime = GetAdjustedTime())\n     {\n-        {\n-            LOCK(cs);\n-            Check();\n-            Connected_(addr, nTime);\n-            Check();\n-        }\n+        LOCK(cs);\n+        Check();\n+        Connected_(addr, nTime);\n+        Check();\n     }\n \n     void SetServices(const CService &addr, ServiceFlags nServices)"
      },
      {
        "sha": "7637265ce4c0e82c09aa98ae2a86dbb6a52a7862",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 14,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -9,6 +8,7 @@\n #include \"base58.h\"\n #include \"clientversion.h\"\n #include \"net.h\"\n+#include \"netmessagemaker.h\"\n #include \"pubkey.h\"\n #include \"timedata.h\"\n #include \"ui_interface.h\"\n@@ -21,12 +21,9 @@\n \n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/replace.hpp>\n-#include <boost/foreach.hpp>\n #include <boost/thread.hpp>\n \n-using namespace std;\n-\n-map<uint256, CAlert> mapAlerts;\n+std::map<uint256, CAlert> mapAlerts;\n CCriticalSection cs_mapAlerts;\n \n void CUnsignedAlert::SetNull()\n@@ -50,10 +47,10 @@ void CUnsignedAlert::SetNull()\n std::string CUnsignedAlert::ToString() const\n {\n     std::string strSetCancel;\n-    BOOST_FOREACH(int n, setCancel)\n+    for (const auto& n : setCancel)\n         strSetCancel += strprintf(\"%d \", n);\n     std::string strSetSubVer;\n-    BOOST_FOREACH(const std::string& str, setSubVer)\n+    for (const auto& str : setSubVer)\n         strSetSubVer += \"\\\"\" + str + \"\\\" \";\n     return strprintf(\n         \"CAlert(\\n\"\n@@ -140,7 +137,7 @@ bool CAlert::RelayTo(CNode* pnode, CConnman& connman) const\n             AppliesToMe() ||\n             GetAdjustedTime() < nRelayUntil)\n         {\n-            connman.PushMessage(pnode, NetMsgType::ALERT, *this);\n+            connman.PushMessage(pnode, CNetMsgMaker(pnode->GetSendVersion()).Make(NetMsgType::ALERT, *this));\n             return true;\n         }\n     }\n@@ -185,14 +182,14 @@ CAlert CAlert::getAlertByHash(const uint256 &hash)\n     CAlert retval;\n     {\n         LOCK(cs_mapAlerts);\n-        map<uint256, CAlert>::iterator mi = mapAlerts.find(hash);\n+        std::map<uint256, CAlert>::iterator mi = mapAlerts.find(hash);\n         if(mi != mapAlerts.end())\n             retval = mi->second;\n     }\n     return retval;\n }\n \n-bool CAlert::ProcessAlert(const std::vector<unsigned char>& alertKey, bool fThread)\n+bool CAlert::ProcessAlert(const std::vector<unsigned char>& alertKey, bool fThread) const\n {\n     if (!CheckSignature(alertKey))\n         return false;\n@@ -224,7 +221,7 @@ bool CAlert::ProcessAlert(const std::vector<unsigned char>& alertKey, bool fThre\n     {\n         LOCK(cs_mapAlerts);\n         // Cancel previous alerts\n-        for (map<uint256, CAlert>::iterator mi = mapAlerts.begin(); mi != mapAlerts.end();)\n+        for (std::map<uint256, CAlert>::iterator mi = mapAlerts.begin(); mi != mapAlerts.end();)\n         {\n             const CAlert& alert = (*mi).second;\n             if (Cancels(alert))\n@@ -244,7 +241,7 @@ bool CAlert::ProcessAlert(const std::vector<unsigned char>& alertKey, bool fThre\n         }\n \n         // Check if this alert has been cancelled\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CAlert)& item, mapAlerts)\n+        for (const auto& item : mapAlerts)\n         {\n             const CAlert& alert = item.second;\n             if (alert.Cancels(*this))\n@@ -255,7 +252,7 @@ bool CAlert::ProcessAlert(const std::vector<unsigned char>& alertKey, bool fThre\n         }\n \n         // Add to mapAlerts\n-        mapAlerts.insert(make_pair(GetHash(), *this));\n+        mapAlerts.insert(std::make_pair(GetHash(), *this));\n         // Notify UI and -alertnotify if it applies to me\n         if(AppliesToMe())\n         {"
      },
      {
        "sha": "9e0df6d883fe121f6367e890df31dc0716b1832e",
        "filename": "src/alert.h",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/alert.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/alert.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -51,9 +50,8 @@ class CUnsignedAlert\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n         READWRITE(nRelayUntil);\n         READWRITE(nExpiration);\n         READWRITE(nID);\n@@ -89,7 +87,7 @@ class CAlert : public CUnsignedAlert\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(vchMsg);\n         READWRITE(vchSig);\n     }\n@@ -104,8 +102,8 @@ class CAlert : public CUnsignedAlert\n     bool RelayTo(CNode* pnode, CConnman& connman) const;\n     bool Sign();\n     bool CheckSignature(const std::vector<unsigned char>& alertKey) const;\n-    bool ProcessAlert(const std::vector<unsigned char>& alertKey, bool fThread = true); // fThread means run -alertnotify in a free-running thread\n-    static void Notify(const std::string& strMessage, bool fThread);\n+    bool ProcessAlert(const std::vector<unsigned char>& alertKey, bool fThread = true) const; // fThread means run -alertnotify in a free-running thread\n+    static void Notify(const std::string& strMessage, bool fThread = true);\n \n     /*\n      * Get copy of (active) alert object by hash. Returns a null alert if it is not found."
      },
      {
        "sha": "705515fe49a992ab03b2c71df10a4d8c0ac14996",
        "filename": "src/alias.cpp",
        "status": "modified",
        "additions": 486,
        "deletions": 404,
        "changes": 890,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/alias.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/alias.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alias.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -10,10 +10,10 @@\n #include \"asset.h\"\n #include \"assetallocation.h\"\n #include \"init.h\"\n-#include \"validation.h\"\n #include \"util.h\"\n #include \"random.h\"\n #include \"wallet/wallet.h\"\n+#include \"rpc/client.h\"\n #include \"rpc/server.h\"\n #include \"base58.h\"\n #include \"txmempool.h\"\n@@ -22,7 +22,7 @@\n #include \"core_io.h\"\n #include \"policy/policy.h\"\n #include \"utiltime.h\"\n-#include \"coincontrol.h\"\n+#include \"wallet/coincontrol.h\"\n #include <boost/algorithm/string.hpp>\n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n #include <boost/xpressive/xpressive_dynamic.hpp>\n@@ -33,6 +33,10 @@\n #include <boost/algorithm/string/find.hpp>\n #include <boost/assign/list_of.hpp>\n #include \"instantx.h\"\n+#include \"validation.h\"\n+#include \"consensus/validation.h\"\n+#include \"spork.h\"\n+#include \"script/sign.h\"\n using namespace std;\n CAliasDB *paliasdb = NULL;\n COfferDB *pofferdb = NULL;\n@@ -44,49 +48,7 @@ typedef map<vector<unsigned char>, COutPoint > mapAliasRegistrationsType;\n typedef map<vector<unsigned char>, vector<unsigned char> > mapAliasRegistrationsDataType;\n mapAliasRegistrationsType mapAliasRegistrations;\n mapAliasRegistrationsDataType mapAliasRegistrationData;\n-extern void SendMoneySyscoin(const vector<unsigned char> &vchAlias, const vector<unsigned char> &vchWitness, const CRecipient &aliasRecipient, vector<CRecipient> &vecSend, CWalletTx& wtxNew, CCoinControl* coinControl, bool fUseInstantSend=false, bool transferAlias=false);\n unsigned int MAX_ALIAS_UPDATES_PER_BLOCK = 10;\n-bool GetSyscoinTransaction(int nHeight, const uint256 &hash, CTransaction &txOut, const Consensus::Params& consensusParams)\n-{\n-\tif(nHeight < 0 || nHeight > chainActive.Height())\n-\t\treturn false;\n-\tCBlockIndex *pindexSlow = NULL; \n-\tLOCK(cs_main);\n-\tpindexSlow = chainActive[nHeight];\n-    if (pindexSlow) {\n-        CBlock block;\n-        if (ReadBlockFromDisk(block, pindexSlow, consensusParams)) {\n-            BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-                if (tx.GetHash() == hash) {\n-                    txOut = tx;\n-                    return true;\n-                }\n-            }\n-        }\n-    }\n-\treturn false;\n-}\n-bool GetSyscoinTransaction(int nHeight, const uint256 &hash, CTransaction &txOut, uint256 &hashBlock, const Consensus::Params& consensusParams)\n-{\n-\tif(nHeight < 0 || nHeight > chainActive.Height())\n-\t\treturn false;\n-\tCBlockIndex *pindexSlow = NULL; \n-\tLOCK(cs_main);\n-\tpindexSlow = chainActive[nHeight];\n-    if (pindexSlow) {\n-        CBlock block;\n-        if (ReadBlockFromDisk(block, pindexSlow, consensusParams)) {\n-            BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-                if (tx.GetHash() == hash) {\n-                    txOut = tx;\n-\t\t\t\t\thashBlock = pindexSlow->GetBlockHash();\n-                    return true;\n-                }\n-            }\n-        }\n-    }\n-\treturn false;\n-}\n uint64_t GetAliasExpiration(const CAliasIndex& alias) {\n \t// dont prune by default, set nHeight to future time\n \tuint64_t nTime = chainActive.Tip()->GetMedianTimePast() + 1;\n@@ -253,7 +215,7 @@ bool IsSyscoinDataOutput(const CTxOut& out) {\n }\n \n \n-bool CheckAliasInputs(const CTransaction &tx, int op, const vector<vector<unsigned char> > &vvchArgs, bool fJustCheck, int nHeight, string &errorMessage, bool &bDestCheckFailed, bool bSanityCheck) {\n+bool CheckAliasInputs(const CTransaction &tx, int op, const vector<vector<unsigned char> > &vvchArgs, bool fJustCheck, int nHeight, string &errorMessage, bool bSanityCheck) {\n \tif (!paliasdb)\n \t\treturn false;\n \tif (tx.IsCoinBase() && !fJustCheck && !bSanityCheck)\n@@ -267,6 +229,7 @@ bool CheckAliasInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \tif (vvchArgs.size() < 4)\n \t\treturn true;\n \t\n+\n \tint prevOp = 0;\n \tvector<vector<unsigned char> > vvchPrevArgs;\n \n@@ -306,25 +269,23 @@ bool CheckAliasInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\terrorMessage = \"SYSCOIN_ALIAS_CONSENSUS_ERROR: ERRCODE: 5002 - \" + _(\"Too many outputs for this Syscoin transaction\");\n \t\treturn error(errorMessage.c_str());\n \t}\n-\tconst CCoins *pprevCoins;\n-\tint prevOutputIndex = 0;\n+\tCoin prevCoins;\n \tif(fJustCheck || op != OP_ALIAS_ACTIVATE)\n \t{\n \t\t// Strict check - bug disallowed\n \t\tfor (unsigned int i = 0; i < tx.vin.size(); i++) {\n \t\t\tvector<vector<unsigned char> > vvch;\n \t\t\tint pop;\n-\t\t\tconst CCoins *prevCoins = GetUTXOCoins(tx.vin[i].prevout);\n+\t\t\tif (!GetUTXOCoin(tx.vin[i].prevout, prevCoins))\n+\t\t\t\tcontinue;\n \t\t\t// ensure inputs are unspent when doing consensus check to add to block\n-\t\t\tif(!prevCoins || !IsSyscoinScript(prevCoins->vout[tx.vin[i].prevout.n].scriptPubKey, pop, vvch))\n+\t\t\tif(!DecodeAliasScript(prevCoins.out.scriptPubKey, pop, vvch))\n \t\t\t{\n \t\t\t\tcontinue;\n \t\t\t}\n-\t\t\tif (IsAliasOp(pop) && (op == OP_ALIAS_ACTIVATE || (vvchArgs.size() > 1 && vvchArgs[0] == vvch[0] && vvchArgs[1] == vvch[1]))) {\n+\t\t\tif (op == OP_ALIAS_ACTIVATE || (vvchArgs.size() > 1 && vvchArgs[0] == vvch[0] && vvchArgs[1] == vvch[1])) {\n \t\t\t\tprevOp = pop;\n \t\t\t\tvvchPrevArgs = vvch;\n-\t\t\t\tpprevCoins = prevCoins;\n-\t\t\t\tprevOutputIndex = tx.vin[i].prevout.n;\n \t\t\t\tbreak;\n \t\t\t}\n \t\t}\n@@ -334,14 +295,16 @@ bool CheckAliasInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t\tfor (unsigned int i = 0; i < tx.vin.size(); i++) {\n \t\t\t\tvector<vector<unsigned char> > vvch;\n \t\t\t\tint pop;\n-\t\t\t\tconst CCoins *prevCoins = GetUTXOCoins(tx.vin[i].prevout);\n+\t\t\t\tCoin prevCoins;\n+\t\t\t\tif (!GetUTXOCoin(tx.vin[i].prevout, prevCoins))\n+\t\t\t\t\tcontinue;\n \t\t\t\t// ensure inputs are unspent when doing consensus check to add to block\n-\t\t\t\tif (!prevCoins || !IsSyscoinScript(prevCoins->vout[tx.vin[i].prevout.n].scriptPubKey, pop, vvch))\n+\t\t\t\tif (!DecodeAliasScript(prevCoins.out.scriptPubKey, pop, vvch))\n \t\t\t\t{\n \t\t\t\t\tcontinue;\n \t\t\t\t}\n \t\t\t\t// match 4th element in scriptpubkey of alias update with witness input scriptpubkey, if names match then sig is provided\n-\t\t\t\tif (IsAliasOp(pop) && vvchArgs[3] == vvch[0]) {\n+\t\t\t\tif (vvchArgs[3] == vvch[0]) {\n \t\t\t\t\tbWitnessSigFound = true;\n \t\t\t\t\tbreak;\n \t\t\t\t}\n@@ -427,20 +390,41 @@ bool CheckAliasInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t}\n \n \t}\n-\tif (!fJustCheck) {\n-\t\tCAliasIndex dbAlias;\n-\t\tstring strName = stringFromVch(vvchArgs[0]);\n-\t\tboost::algorithm::to_lower(strName);\n-\t\tvchAlias = vchFromString(strName);\n-\t\t// get the alias from the DB\n-\t\tif (!GetAlias(vchAlias, dbAlias))\n+\n+\tCAliasIndex dbAlias;\n+\tstring strName = stringFromVch(vvchArgs[0]);\n+\tboost::algorithm::to_lower(strName);\n+\tvchAlias = vchFromString(strName);\n+\t// get the alias from the DB\n+\tif (!GetAlias(vchAlias, dbAlias))\n+\t{\n+\t\tif (op == OP_ALIAS_UPDATE)\n \t\t{\n-\t\t\tif (op == OP_ALIAS_UPDATE)\n+\t\t\terrorMessage = \"SYSCOIN_ALIAS_CONSENSUS_ERROR: ERRCODE: 5016 - \" + _(\"Failed to read from alias DB\");\n+\t\t\treturn true;\n+\t\t}\n+\t}\n+\tif (fJustCheck) {\n+\t\tif (op == OP_ALIAS_UPDATE) {\n+\t\t\tCTxDestination aliasDest;\n+\t\t\tif (vvchPrevArgs.size() <= 0 || vvchPrevArgs[0] != vvchArgs[0] || vvchPrevArgs[1] != vvchArgs[1] || prevCoins.IsSpent() || !ExtractDestination(prevCoins.out.scriptPubKey, aliasDest))\n \t\t\t{\n-\t\t\t\terrorMessage = \"SYSCOIN_ALIAS_CONSENSUS_ERROR: ERRCODE: 5016 - \" + _(\"Failed to read from alias DB\");\n-\t\t\t\treturn true;\n+\t\t\t\terrorMessage = \"SYSCOIN_ALIAS_CONSENSUS_ERROR: ERRCODE: 5018 - \" + _(\"Cannot extract destination of alias input\");\n+\t\t\t\treturn error(errorMessage.c_str());\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\tCSyscoinAddress prevaddy(aliasDest);\n+\t\t\t\tif (EncodeBase58(dbAlias.vchAddress) != prevaddy.ToString())\n+\t\t\t\t{\n+\t\t\t\t\terrorMessage = \"SYSCOIN_ALIAS_CONSENSUS_ERROR: ERRCODE: 5019 - \" + _(\"You are not the owner of this alias\");\n+\t\t\t\t\treturn error(errorMessage.c_str());\n+\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n+\t}\n+\telse {\n \t\t// whitelist alias updates don't update expiry date\n \t\tif (!vchData.empty() && theAlias.offerWhitelist.entries.empty() && theAlias.nExpireTime > 0)\n \t\t{\n@@ -478,33 +462,12 @@ bool CheckAliasInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t\tuser2 = EncodeBase58(theAlias.vchAddress);\n \t\tif (op == OP_ALIAS_UPDATE)\n \t\t{\n-\t\t\tCTxDestination aliasDest;\n-\t\t\tif (vvchPrevArgs.size() <= 0 || vvchPrevArgs[0] != vvchArgs[0] || vvchPrevArgs[1] != vvchArgs[1] || !pprevCoins->IsAvailable(prevOutputIndex) || !ExtractDestination(pprevCoins->vout[prevOutputIndex].scriptPubKey, aliasDest))\n-\t\t\t{\n-\t\t\t\terrorMessage = \"SYSCOIN_ALIAS_CONSENSUS_ERROR: ERRCODE: 5018 - \" + _(\"Cannot extract destination of alias input\");\n-\t\t\t\tbDestCheckFailed = true;\n-\t\t\t\tif (!theAliasNull)\n-\t\t\t\t\ttheAlias = dbAlias;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\tCSyscoinAddress prevaddy(aliasDest);\n-\t\t\t\tif (EncodeBase58(dbAlias.vchAddress) != prevaddy.ToString())\n-\t\t\t\t{\n-\t\t\t\t\terrorMessage = \"SYSCOIN_ALIAS_CONSENSUS_ERROR: ERRCODE: 5019 - \" + _(\"You are not the owner of this alias\");\n-\t\t\t\t\tbDestCheckFailed = true;\n-\t\t\t\t\tif (!theAliasNull)\n-\t\t\t\t\t\ttheAlias = dbAlias;\n-\t\t\t\t}\n-\t\t\t}\n-\n \t\t\tif (dbAlias.vchGUID != vvchArgs[1] || dbAlias.vchAlias != vvchArgs[0])\n \t\t\t{\n \t\t\t\terrorMessage = \"SYSCOIN_ALIAS_CONSENSUS_ERROR: ERRCODE: 5020 - \" + _(\"Cannot edit this alias, guid mismatch\");\n-\t\t\t\tbDestCheckFailed = true;\n \t\t\t\tif (!theAliasNull)\n \t\t\t\t\ttheAlias = dbAlias;\n-\t\t\t\t\t\n+\n \t\t\t}\n \t\t\tif (!theAliasNull) {\n \t\t\t\tCOfferLinkWhitelist whiteList;\n@@ -968,9 +931,11 @@ bool DecodeAliasTx(const CTransaction& tx, int& op,\n bool FindAliasInTx(const CTransaction& tx, vector<vector<unsigned char> >& vvch) {\n \tint op;\n \tfor (unsigned int i = 0; i < tx.vin.size(); i++) {\n-\t\tconst CCoins *prevCoins = GetUTXOCoins(tx.vin[i].prevout);\n+\t\tCoin prevCoins;\n+\t\tif (!GetUTXOCoin(tx.vin[i].prevout, prevCoins))\n+\t\t\tcontinue;\n \t\t// ensure inputs are unspent when doing consensus check to add to block\n-\t\tif (prevCoins && DecodeAliasScript(prevCoins->vout[tx.vin[i].prevout.n].scriptPubKey, op, vvch)) {\n+\t\tif (DecodeAliasScript(prevCoins.out.scriptPubKey, op, vvch)) {\n \t\t\treturn true;\n \t\t}\n \t}\n@@ -1038,17 +1003,16 @@ void CreateAliasRecipient(const CScript& scriptPubKey, CRecipient& recipient)\n {\n \tCRecipient recp = { scriptPubKey, recipient.nAmount, false };\n \trecipient = recp;\n-\tCAmount nFee = minRelayTxFee.GetFee(3000);\n+\tCAmount nFee = CWallet::GetMinimumFee(3000, nTxConfirmTarget, mempool);\n \trecipient.nAmount = nFee;\n }\n void CreateRecipient(const CScript& scriptPubKey, CRecipient& recipient)\n {\n \tCRecipient recp = {scriptPubKey, recipient.nAmount, false};\n \trecipient = recp;\n \tCTxOut txout(recipient.nAmount, scriptPubKey);\n-\tsize_t nSize = txout.GetSerializeSize(SER_DISK, 0) + 148u;\n-\tCAmount nFee = 3 * minRelayTxFee.GetFee(nSize);\n-\trecipient.nAmount = nFee;\n+\tsize_t nSize = GetSerializeSize(txout, SER_DISK, 0) + 148u;\n+\trecipient.nAmount = 3 * minRelayTxFee.GetFee(nSize);\n }\n void CreateFeeRecipient(CScript& scriptPubKey, const vector<unsigned char>& data, CRecipient& recipient)\n {\n@@ -1065,8 +1029,8 @@ CAmount GetDataFee(const CScript& scriptPubKey)\n \tCAmount nFee = 0;\n \tCRecipient recp = {scriptPubKey, 0, false};\n \tCTxOut txout(0, scriptPubKey);\n-    size_t nSize = txout.GetSerializeSize(SER_DISK,0)+148u;\n-\tnFee = 1000 * 3 * minRelayTxFee.GetFee(nSize);\n+    size_t nSize = GetSerializeSize(txout, SER_DISK,0)+148u;\n+\tnFee = CWallet::GetMinimumFee(nSize, nTxConfirmTarget, mempool);\n \trecp.nAmount = nFee;\n \treturn recp.nAmount;\n }\n@@ -1086,17 +1050,13 @@ bool CheckParam(const UniValue& params, const unsigned int index)\n }\n \n void CAliasDB::WriteAliasIndex(const CAliasIndex& alias, const int &op) {\n-\t// TODO: Remove this check upon bm web, and remove is_mine\n-\tif (pwalletMain) {\n-\t\tUniValue oName(UniValue::VOBJ);\n-\t\toName.push_back(Pair(\"_id\", stringFromVch(alias.vchAlias)));\n-\t\tCSyscoinAddress address(EncodeBase58(alias.vchAddress));\n-\t\toName.push_back(Pair(\"address\", address.ToString()));\n-\t\toName.push_back(Pair(\"is_mine\", IsMine(*pwalletMain, address.Get())));\n-\t\toName.push_back(Pair(\"expires_on\", alias.nExpireTime));\n-\t\tGetMainSignals().NotifySyscoinUpdate(oName.write().c_str(), \"alias\");\n-\t\tWriteAliasIndexHistory(alias, op);\n-\t}\n+\tUniValue oName(UniValue::VOBJ);\n+\toName.push_back(Pair(\"_id\", stringFromVch(alias.vchAlias)));\n+\tCSyscoinAddress address(EncodeBase58(alias.vchAddress));\n+\toName.push_back(Pair(\"address\", address.ToString()));\n+\toName.push_back(Pair(\"expires_on\", alias.nExpireTime));\n+\tGetMainSignals().NotifySyscoinUpdate(oName.write().c_str(), \"alias\");\n+\tWriteAliasIndexHistory(alias, op);\n }\n void CAliasDB::WriteAliasIndexHistory(const CAliasIndex& alias, const int &op) {\n \tUniValue oName(UniValue::VOBJ);\n@@ -1155,7 +1115,9 @@ UniValue SyscoinListReceived(bool includeempty=true)\n \t\tbalanceParams.push_back(strAddress);\n \t\tparam.push_back(Pair(\"addresses\", balanceParams));\n \t\tparamsBalance.push_back(param);\n-\t\tconst UniValue &resBalance = getaddressbalance(paramsBalance, false);\n+\t\tJSONRPCRequest request;\n+\t\trequest.params = paramsBalance;\n+\t\tconst UniValue &resBalance = getaddressbalance(request);\n \t\tUniValue obj(UniValue::VOBJ);\n \t\tobj.push_back(Pair(\"address\", strAddress));\n \t\tconst CAmount& nBalance = AmountFromValue(find_value(resBalance.get_obj(), \"balance\"));\n@@ -1172,7 +1134,7 @@ UniValue SyscoinListReceived(bool includeempty=true)\n \tpwalletMain->AvailableCoins(vecOutputs, false, NULL, includeempty, ALL_COINS, false, true);\n \tBOOST_FOREACH(const COutput& out, vecOutputs) {\n \t\tCTxDestination address;\n-\t\tif (!ExtractDestination(out.tx->vout[out.i].scriptPubKey, address))\n+\t\tif (!ExtractDestination(out.tx->tx->vout[out.i].scriptPubKey, address))\n \t\t\tcontinue;\n \n \t\tCSyscoinAddress sysAddress(address);\n@@ -1193,7 +1155,9 @@ UniValue SyscoinListReceived(bool includeempty=true)\n \t\tbalanceParams.push_back(strAddress);\n \t\tparam.push_back(Pair(\"addresses\", balanceParams));\n \t\tparamsBalance.push_back(param);\n-\t\tconst UniValue &resBalance = getaddressbalance(paramsBalance, false);\n+\t\tJSONRPCRequest request;\n+\t\trequest.params = paramsBalance;\n+\t\tconst UniValue &resBalance = getaddressbalance(request);\n \t\tUniValue obj(UniValue::VOBJ);\n \t\tobj.push_back(Pair(\"address\", strAddress));\n \t\tconst CAmount& nBalance = AmountFromValue(find_value(resBalance.get_obj(), \"balance\"));\n@@ -1208,34 +1172,136 @@ UniValue SyscoinListReceived(bool includeempty=true)\n \t}\n \treturn ret;\n }\n-UniValue aliasnewfund(const UniValue& params, bool fHelp) {\n-\tif (fHelp || 1 > params.size() || 2 < params.size())\n+UniValue syscointxfund_helper(const vector<unsigned char> &vchAlias, const vector<unsigned char> &vchWitness, const CRecipient &aliasRecipient, vector<CRecipient> &vecSend) {\n+\tCMutableTransaction txNew;\n+\ttxNew.nVersion = SYSCOIN_TX_VERSION;\n+\tif (!vchWitness.empty())\n+\t{\n+\t\tCOutPoint aliasOutPointWitness;\n+\t\taliasunspent(vchWitness, aliasOutPointWitness);\n+\t\tif (aliasOutPointWitness.IsNull())\n+\t\t{\n+\t\t\tthrow runtime_error(\"SYSCOIN_RPC_ERROR ERRCODE: 9000 - \" + _(\"This transaction requires a witness but not enough outputs found for witness alias: \") + stringFromVch(vchWitness));\n+\t\t}\n+\t\tCoin pcoinW;\n+\t\tif (GetUTXOCoin(aliasOutPointWitness, pcoinW))\n+\t\t\ttxNew.vin.push_back(CTxIn(aliasOutPointWitness, pcoinW.out.scriptPubKey));\n+\t}\n+\n+\tCOutPoint aliasOutPoint;\n+\tunsigned int unspentcount = aliasunspent(vchAlias, aliasOutPoint);\n+\t// for the alias utxo (1 per transaction is used)\n+\tif (unspentcount <= 1)\n+\t{\n+\t\tfor (unsigned int i = 0; i < MAX_ALIAS_UPDATES_PER_BLOCK; i++)\n+\t\t\tvecSend.push_back(aliasRecipient);\n+\t}\n+\tCoin pcoin;\n+\tif (GetUTXOCoin(aliasOutPoint, pcoin))\n+\t\ttxNew.vin.push_back(CTxIn(aliasOutPoint, pcoin.out.scriptPubKey));\n+\n+\t// set an address for syscointxfund so it uses that address to fund (alias passed in)\n+\n+\tCAliasIndex alias;\n+\tif (!GetAlias(vchAlias, alias))\n+\t\tthrow runtime_error(\"SYSCOIN_RPC_ERROR ERRCODE: 9000 - \" + _(\"Cannot find alias used to fund this transaction: \") + stringFromVch(vchAlias));\n+\tstring strAddress = EncodeBase58(alias.vchAddress);\n+\t\n+\n+\t// vouts to the payees\n+\tfor (const auto& recipient : vecSend)\n+\t{\n+\t\tCTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\t\tif (!txout.IsDust(dustRelayFee))\n+\t\t{\n+\t\t\ttxNew.vout.push_back(txout);\n+\t\t}\n+\t}\n+\tUniValue paramObj(UniValue::VOBJ);\n+\tUniValue paramArr(UniValue::VARR);\n+\tparamArr.push_back(strAddress);\n+\tparamObj.push_back(Pair(\"addresses\", paramArr));\n+\n+\n+\tUniValue paramsFund(UniValue::VARR);\n+\tparamsFund.push_back(EncodeHexTx(txNew));\n+\tparamsFund.push_back(paramObj);\n+\t\n+\tJSONRPCRequest request;\n+\trequest.params = paramsFund;\n+\treturn syscointxfund(request);\n+}\n+CAmount GetFee(const size_t nBytes, const bool fUseInstantSend = false) {\n+\n+\tCAmount nFee = CWallet::GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n+\tif (fUseInstantSend) {\n+\t\tCAmount nMinFee = CTxLockRequest::MIN_FEE;\n+\t\tnFee = std::max(nFee, nMinFee);\n+\t}\n+\treturn nFee;\n+}\n+\n+class CCountSigsVisitor : public boost::static_visitor<void> {\n+private:\n+\tconst CKeyStore &keystore;\n+\tint &nNumSigs;\n+\n+public:\n+\tCCountSigsVisitor(const CKeyStore &keystoreIn, int &numSigs) : keystore(keystoreIn), nNumSigs(numSigs) {}\n+\n+\tvoid Process(const CScript &script) {\n+\t\ttxnouttype type;\n+\t\tstd::vector<CTxDestination> vDest;\n+\t\tint nRequired;\n+\t\tif (ExtractDestinations(script, type, vDest, nRequired)) {\n+\t\t\tBOOST_FOREACH(const CTxDestination &dest, vDest)\n+\t\t\t\tboost::apply_visitor(*this, dest);\n+\t\t}\n+\t}\n+\tvoid operator()(const CKeyID &keyId) {\n+\t\tnNumSigs++;\n+\t}\n+\n+\tvoid operator()(const CScriptID &scriptId) {\n+\t\tCScript script;\n+\t\tif (keystore.GetCScript(scriptId, script))\n+\t\t\tProcess(script);\n+\t}\n+\n+\tvoid operator()(const CNoDestination &none) {}\n+};\n+UniValue syscointxfund(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || 1 > params.size() || 3 < params.size())\n \t\tthrow runtime_error(\n-\t\t\t\"aliasnewfund\\n\"\n-\t\t\t\"\\nFunds a new alias transaction with inputs used from wallet or an array of addresses specified.\\n\"\n+\t\t\t\"syscointxfund\\n\"\n+\t\t\t\"\\nFunds a new syscoin transaction with inputs used from wallet or an array of addresses specified.\\n\"\n \t\t\t\"\\nArguments:\\n\"\n-\t\t\t\"  \\\"hexstring\\\" (string, required) The raw aliasnew transaction output\\n\"\n+\t\t\t\"  \\\"hexstring\\\" (string, required) The raw syscoin transaction output given from rpc (ie: aliasnew, aliasupdate)\\n\"\n \t\t\t\"  \\\"addresses (object, optional) \\\"\\n\"\n \t\t\t\"    [\\n\"\n-\t\t\t\"      \\\"address\\\"  (array, string) Address used to fund this aliasnew transaction. Leave empty to use wallet. Last address gets sent the change.\\n\"\n+\t\t\t\"      \\\"address\\\"  (array, string) Address used to fund this transaction. Leave empty to use wallet. Last address gets sent the change.\\n\"\n \t\t\t\"      ,...\\n\"\n \t\t\t\"    ]\\n\"\n+\t\t\t\"\t\\\"instantsend\\\" (boolean, optional, default=false) Use InstantSend to send this transaction. \\n\"\n \t\t\t\"}\\n\"\n \t\t\t\"\\nExamples:\\n\"\n-\t\t\t+ HelpExampleCli(\"aliasnewfund\", \" <hexstring> '{\\\"addresses\\\": [\\\"175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W\\\"]}'\")\n-\t\t\t+ HelpExampleRpc(\"aliasnewfund\", \" <hexstring> {\\\"addresses\\\": [\\\"175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W\\\"]}\")\n+\t\t\t+ HelpExampleCli(\"syscointxfund\", \" <hexstring> '{\\\"addresses\\\": [\\\"175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W\\\"]}' false\")\n+\t\t\t+ HelpExampleRpc(\"syscointxfund\", \" <hexstring> {\\\"addresses\\\": [\\\"175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W\\\"]} true\")\n \t\t\t+ HelpRequiringPassphrase());\n-\tEnsureWalletIsUnlocked();\n+\tif (!pwalletMain)\n+\t\tthrow runtime_error(\"No Wallet found!\");\n \tconst string &hexstring = params[0].get_str();\n-\tCTransaction txIn;\n-\tif (!DecodeHexTx(txIn, hexstring))\n+\tCMutableTransaction tx;\n+\tif (!DecodeHexTx(tx, hexstring))\n \t\tthrow runtime_error(\"SYSCOIN_ALIAS_RPC_ERROR: ERRCODE: 5500 - \" + _(\"Could not send raw transaction: Cannot decode transaction from hex string\"));\n-\tCMutableTransaction tx(txIn);\n+\tCTransaction txIn_t(tx);\n \t// if addresses are passed in use those, otherwise use whatever is in the wallet\n \tUniValue addresses(UniValue::VOBJ);\n \tif(params.size() > 1)\n \t\taddresses = params[1].get_obj();\n \telse {\n+\t\tEnsureWalletIsUnlocked();\n \t\tUniValue addressArray(UniValue::VARR);\n \t\tUniValue receivedList = SyscoinListReceived(false);\n \t\tUniValue recevedListArray = receivedList.get_array();\n@@ -1245,106 +1311,191 @@ UniValue aliasnewfund(const UniValue& params, bool fHelp) {\n \t\t}\n \t\taddresses.push_back(Pair(\"addresses\", addressArray));\n \t}\n-\n+\tCValidationState state;\n+\tbool fUseInstantSend = false;\n+\tif (params.size() > 2)\n+\t\tfUseInstantSend = params[2].get_bool();\n \tUniValue paramsUTXO(UniValue::VARR);\n \tparamsUTXO.push_back(addresses);\n-\tconst UniValue &resUTXOs = getaddressutxos(paramsUTXO, false);\n+\tJSONRPCRequest request1;\n+\trequest1.params = paramsUTXO;\n+\tconst UniValue &resUTXOs = getaddressutxos(request1);\n \tUniValue utxoArray(UniValue::VARR);\n \tif (resUTXOs.isArray())\n \t\tutxoArray = resUTXOs.get_array();\n \telse\n \t\tthrow runtime_error(\"SYSCOIN_ALIAS_RPC_ERROR: ERRCODE: 5501 - \" + _(\"No funds found in addresses provided\"));\n \n \t// add total output amount of transaction to desired amount\n-\tCAmount nDesiredAmount = txIn.GetValueOut();\n-\tstd::map<string, int> mapOutputs;\n-\tfor (std::vector<CTxIn>::const_iterator it(txIn.vin.begin()); it != txIn.vin.end(); ++it)\n-\t{\n-\t\tconst string& strOut = strprintf(\"%s%s\", (*it).prevout.hash.GetHex(), (*it).prevout.n);\n-\t\tmapOutputs[strOut] = 1;\n+\tCAmount nDesiredAmount = txIn_t.GetValueOut();\n+\tif (fUseInstantSend && nDesiredAmount > sporkManager.GetSporkValue(SPORK_5_INSTANTSEND_MAX_VALUE)*COIN) {\n+\t\tthrow runtime_error(_(\"InstantSend doesn't support sending values that high yet. Transactions are currently limited to 100000 SYS.\"));\n \t}\n \tCAmount nCurrentAmount = 0;\n \t{\n \t\tLOCK(cs_main);\n \t\tCCoinsViewCache view(pcoinsTip);\n \t\t// get value of inputs\n-\t\tnCurrentAmount = view.GetValueIn(txIn);\n+\t\tnCurrentAmount = view.GetValueIn(txIn_t);\n \t}\n+\tint op, aliasOp;\n+\tvector<vector<unsigned char> > vvch;\n+\tvector<vector<unsigned char> > vvchAlias;\n+\tif (tx.nVersion == SYSCOIN_TX_VERSION && !DecodeAliasTx(tx, op, vvchAlias))\n+\t{\n+\t\tFindAliasInTx(tx, vvchAlias);\n+\t\t// it is assumed if no alias output is found, then it is for another service so this would be an alias update\n+\t\top = OP_ALIAS_UPDATE;\n \n+\t}\n+\t// # vin (with IX)*FEE + # vout*FEE + (10 + # vin)*FEE + 34*FEE (for change output)\n+\tCAmount nFees = GetFee(10 + 34);\n \t\n-\tint op;\n-\tbool bFunded = false;\n-\tvector<vector<unsigned char> > vvch;\n-\tif (nCurrentAmount < nDesiredAmount) {\n-\t\tconst unsigned int nBytes = ::GetSerializeSize(txIn, SER_NETWORK, PROTOCOL_VERSION);\n-\t\t// min fee based on bytes + 1 change output\n-\t\tCAmount nFees = ::minRelayTxFee.GetFee(nBytes*1.5) + (3 * minRelayTxFee.GetFee(200u));\n-\t\tfor (unsigned int i = 0; i < utxoArray.size(); i++)\n-\t\t{\n-\t\t\t// add 200 bytes of fees to account for every input added to this transaction\n-\t\t\tnFees += 3 * minRelayTxFee.GetFee(200u);\n-\t\t\tconst UniValue& utxoObj = utxoArray[i].get_obj();\n-\t\t\tconst string &strTxid = find_value(utxoObj, \"txid\").get_str();\n-\t\t\tconst uint256& txid = uint256S(strTxid);\n-\t\t\tconst int& nOut = find_value(utxoObj, \"outputIndex\").get_int();\n-\t\t\tconst std::vector<unsigned char> &data(ParseHex(find_value(utxoObj, \"script\").get_str()));\n-\t\t\tconst CScript& scriptPubKey = CScript(data.begin(), data.end());\n-\t\t\tconst CAmount &nValue = AmountFromValue(find_value(utxoObj, \"satoshis\"));\n-\t\t\t// look for non alias inputs\n-\t\t\tif (DecodeAliasScript(scriptPubKey, op, vvch))\n-\t\t\t\tcontinue;\n-\t\t\tif (mapOutputs.find(strprintf(\"%s%s\", strTxid, nOut)) != mapOutputs.end())\n-\t\t\t\tcontinue;\n+\tfor (auto& vin : tx.vin) {\n+\t\tCoin coin;\n+\t\tif (!GetUTXOCoin(vin.prevout, coin))\n+\t\t\tcontinue;\n+\t\tint numSigs = 0;\n+\t\tCCountSigsVisitor(*pwalletMain, numSigs).Process(coin.out.scriptPubKey);\n+\t\tif(tx.nVersion == SYSCOIN_TX_VERSION && params.size() > 1)\n+\t\t\tnFees += GetFee(numSigs*150);\n+\t\telse\n+\t\t\tnFees += GetFee(numSigs * 150, fUseInstantSend);\n+\t}\n+\tfor (auto& vout : tx.vout) {\n+\t\tconst unsigned int nBytes = ::GetSerializeSize(vout, SER_NETWORK, PROTOCOL_VERSION);\n+\t\tnFees += GetFee(nBytes);\n+\t}\n+\tif (nCurrentAmount < (nDesiredAmount + nFees)) {\n+\t\t// only look for alias inputs if addresses were passed in, if looking through wallet we do not want to fund via alias inputs as we may end up spending alias inputs inadvertently\n+\t\tif (tx.nVersion == SYSCOIN_TX_VERSION && params.size() > 1 && !fUseInstantSend) {\n+\t\t\tCOutPoint aliasOutPoint;\n+\t\t\tunsigned int unspentcount = 0;\n+\t\t\tif(!vvchAlias.empty())\n+\t\t\t\tunspentcount = aliasunspent(vvchAlias[0], aliasOutPoint);\n+\t\t\tunsigned int unspentindex = 0;\n+\t\t\tLOCK(mempool.cs);\n+\t\t\t// fund with alias inputs first\n+\t\t\tfor (unsigned int i = 0; i < utxoArray.size(); i++)\n \t\t\t{\n-\t\t\t\tLOCK(mempool.cs);\n-\t\t\t\tif (mempool.mapNextTx.find(COutPoint(txid, nOut)) != mempool.mapNextTx.end())\n+\t\t\t\tconst UniValue& utxoObj = utxoArray[i].get_obj();\n+\t\t\t\tconst string &strTxid = find_value(utxoObj, \"txid\").get_str();\n+\t\t\t\tconst uint256& txid = uint256S(strTxid);\n+\t\t\t\tconst int& nOut = find_value(utxoObj, \"outputIndex\").get_int();\n+\t\t\t\tconst std::vector<unsigned char> &data(ParseHex(find_value(utxoObj, \"script\").get_str()));\n+\t\t\t\tconst CScript& scriptPubKey = CScript(data.begin(), data.end());\n+\t\t\t\tconst CAmount &nValue = find_value(utxoObj, \"satoshis\").get_int64();\n+\t\t\t\tconst CTxIn txIn(txid, nOut, scriptPubKey);\n+\t\t\t\tconst COutPoint outPoint(txid, nOut);\n+\t\t\t\tif (std::find(tx.vin.begin(), tx.vin.end(), txIn) != tx.vin.end())\n \t\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t\tif (pwalletMain->IsLockedCoin(txid, nOut))\n-\t\t\t\tcontinue;\n-\t\t\ttx.vin.push_back(CTxIn(txid, nOut, scriptPubKey));\n-\t\t\tnCurrentAmount += nValue;\n-\t\t\tif (nCurrentAmount >= (nDesiredAmount + nFees)) {\n-\t\t\t\tbFunded = true;\n-\t\t\t\tbreak;\n+\t\t\t\t// look for alias inputs only, if not selecting all\n+\t\t\t\tif ((DecodeAliasScript(scriptPubKey, aliasOp, vvch) && vvchAlias.size() > 0 && vvch.size() > 1 && vvch[0] == vvchAlias[0] && vvch[1] == vvchAlias[1])) {\n+\t\t\t\t\t\n+\t\t\t\t\tif (mempool.mapNextTx.find(outPoint) != mempool.mapNextTx.end())\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\n+\t\t\t\t\tif (pwalletMain && pwalletMain->IsLockedCoin(txid, nOut))\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\tif (!IsOutpointMature(outPoint))\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\tunspentindex++;\n+\t\t\t\t\t// if we have more than 1 unspent alias output it means we aren't funding any more (we create 10 once we have 1 or less left)\n+\t\t\t\t\t// so that means we shouldn't spend all our alias outputs otherwise we will have an unusable alias with 0 alias outputs left\n+\t\t\t\t\t// this ensures that the last alias output will be preserved\n+\t\t\t\t\tif (unspentcount > 1 && unspentindex >= (unspentcount-1))\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tint numSigs = 0;\n+\t\t\t\t\tCCountSigsVisitor(*pwalletMain, numSigs).Process(scriptPubKey);\n+\t\t\t\t\t// add fees to account for every input added to this transaction\n+\t\t\t\t\tnFees += GetFee(numSigs*150);\n+\t\t\t\t\ttx.vin.push_back(txIn);\n+\t\t\t\t\tnCurrentAmount += nValue;\n+\t\t\t\t\tif (nCurrentAmount >= (nDesiredAmount + nFees)) {\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tif (!bFunded)\n-\t\t\tthrow runtime_error(\"SYSCOIN_ALIAS_RPC_ERROR: ERRCODE: 5502 - \" + _(\"Insufficient funds for alias creation transaction\"));\n-\t\tconst CAmount &nChange = nCurrentAmount - nDesiredAmount - nFees;\n-\t\t// if addresses were passed in, send change back to the last address as policy\n-\t\tif (params.size() > 1) {\n-\t\t\ttx.vout.push_back(CTxOut(nChange, tx.vin.back().scriptSig));\n+\t\t// if after selecting alias inputs we are still not funded, we need to select alias balances to fund this transaction\n+\t\tif (nCurrentAmount < (nDesiredAmount + nFees)) {\n+\t\t\tLOCK(mempool.cs);\n+\t\t\tfor (unsigned int i = 0; i < utxoArray.size(); i++)\n+\t\t\t{\n+\t\t\t\tconst UniValue& utxoObj = utxoArray[i].get_obj();\n+\t\t\t\tconst string &strTxid = find_value(utxoObj, \"txid\").get_str();\n+\t\t\t\tconst uint256& txid = uint256S(strTxid);\n+\t\t\t\tconst int& nOut = find_value(utxoObj, \"outputIndex\").get_int();\n+\t\t\t\tconst std::vector<unsigned char> &data(ParseHex(find_value(utxoObj, \"script\").get_str()));\n+\t\t\t\tconst CScript& scriptPubKey = CScript(data.begin(), data.end());\n+\t\t\t\tconst CAmount &nValue = find_value(utxoObj, \"satoshis\").get_int64();\n+\t\t\t\tconst CTxIn txIn(txid, nOut, scriptPubKey);\n+\t\t\t\tconst COutPoint outPoint(txid, nOut);\n+\t\t\t\tif (std::find(tx.vin.begin(), tx.vin.end(), txIn) != tx.vin.end())\n+\t\t\t\t\tcontinue;\n+\t\t\t\t// look for non alias inputs\n+\t\t\t\tif (DecodeAliasScript(scriptPubKey, aliasOp, vvch))\n+\t\t\t\t\tcontinue;\n+\t\t\t\tif (mempool.mapNextTx.find(outPoint) != mempool.mapNextTx.end())\n+\t\t\t\t\tcontinue;\n+\t\t\t\t\n+\t\t\t\tif (pwalletMain && pwalletMain->IsLockedCoin(txid, nOut))\n+\t\t\t\t\tcontinue;\n+\t\t\t\tif (!IsOutpointMature(outPoint, fUseInstantSend))\n+\t\t\t\t\tcontinue;\n+\t\t\t\tint numSigs = 0;\n+\t\t\t\tCCountSigsVisitor(*pwalletMain, numSigs).Process(scriptPubKey);\n+\t\t\t\t// add fees to account for every input added to this transaction\n+\t\t\t\tnFees += GetFee(numSigs*150, fUseInstantSend);\n+\t\t\t\ttx.vin.push_back(txIn);\n+\t\t\t\tnCurrentAmount += nValue;\n+\t\t\t\tif (nCurrentAmount >= (nDesiredAmount + nFees)) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n-\t\t// else create new change address in this wallet\n-\t\telse {\n-\t\t\tCReserveKey reservekey(pwalletMain);\n-\t\t\tCPubKey vchPubKey;\n-\t\t\treservekey.GetReservedKey(vchPubKey, true);\n-\t\t\ttx.vout.push_back(CTxOut(nChange, GetScriptForDestination(vchPubKey.GetID())));\n+\t}\n+\tconst CAmount &nChange = nCurrentAmount - nDesiredAmount - nFees;\n+\tif (nChange < 0)\n+\t\tthrow runtime_error(\"SYSCOIN_ALIAS_RPC_ERROR: ERRCODE: 5502 - \" + _(\"Insufficient funds for alias creation transaction\"));\n+\t// if addresses were passed in, send change back to the last address as policy\n+\tif (params.size() > 1) {\n+\t\tUniValue addressValues = find_value(addresses, \"addresses\");\n+\t\tif (!addressValues.isArray()) {\n+\t\t\tthrow runtime_error(\"Addresses is expected to be an array\");\n \t\t}\n+\t\tstd::vector<UniValue> values = addressValues.getValues();\n+\t\tCSyscoinAddress addressLast(values.back().get_str());\n+\t\tif(!addressLast.IsValid())\n+\t\t\tthrow runtime_error(\"Change address is not valid\");\n+\t\tCTxOut changeOut(nChange, GetScriptForDestination(addressLast.Get()));\n+\t\ttx.vout.push_back(changeOut);\n+\t}\n+\t// else create new change address in this wallet\n+\telse {\n+\t\tCReserveKey reservekey(pwalletMain);\n+\t\tCPubKey vchPubKey;\n+\t\treservekey.GetReservedKey(vchPubKey, true);\n+\t\tCTxOut changeOut(nChange, GetScriptForDestination(vchPubKey.GetID()));\n+\t\ttx.vout.push_back(changeOut);\n \t}\n-\tbool fJustCheck = true;\n-\tstring errorMessage = \"\";\n-\tbool bCheckDestError = false;\n-\tif (DecodeAliasTx(tx, op, vvch))\n-\t{\n-\t\tCheckAliasInputs(tx, op, vvch, fJustCheck, chainActive.Tip()->nHeight, errorMessage, bCheckDestError, true);\n-\t\tif (!errorMessage.empty())\n-\t\t\tthrow runtime_error(errorMessage.c_str());\n-\t\tCheckAliasInputs(tx, op, vvch, !fJustCheck, chainActive.Tip()->nHeight + 1, errorMessage, bCheckDestError, true);\n-\t\tif (!errorMessage.empty())\n-\t\t\tthrow runtime_error(errorMessage.c_str());\n+\n+\tif (tx.nVersion == SYSCOIN_TX_VERSION) {\n+\t\t// call this twice, with fJustCheck and !fJustCheck both with bSanity enabled so it doesn't actually write out to the databases just does the checks\n+\t\tif (!CheckSyscoinInputs(tx, state, true, 0, CBlock(), true))\n+\t\t\tthrow runtime_error(FormatStateMessage(state));\n+\t\tif (!CheckSyscoinInputs(tx, state, false, 0, CBlock(), true))\n+\t\t\tthrow runtime_error(FormatStateMessage(state));\n \t}\n-\telse\n-\t\tthrow runtime_error(\"SYSCOIN_ALIAS_RPC_ERROR: ERRCODE: 5503 - \" + _(\"Could not decode alias transaction\"));\n \t// pass back new raw transaction\n \tUniValue res(UniValue::VARR);\n \tres.push_back(EncodeHexTx(tx));\n \treturn res;\n }\n-UniValue aliasnew(const UniValue& params, bool fHelp) {\n-\tif (fHelp || 8 != params.size())\n+\n+UniValue aliasnew(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || 8 != params.size())\n \t\tthrow runtime_error(\n \t\t\t\"aliasnew [aliasname] [public value] [accept_transfers_flags=3] [expire_timestamp] [address] [encryption_privatekey] [encryption_publickey] [witness]\\n\"\n \t\t\t\t\t\t\"<aliasname> alias name.\\n\"\n@@ -1520,11 +1671,11 @@ UniValue aliasnew(const UniValue& params, bool fHelp) {\n \t\t// add the registration input to the alias activation transaction\n \t\tCCoinsViewCache view(pcoinsTip);\n \t\t\n-\t\tconst CCoins* pcoin = view.AccessCoins(regOut.hash);\n-\t\tif (!pcoin) {\n+\t\tconst Coin &pcoin = view.AccessCoin(regOut);\n+\t\tif (pcoin.IsSpent()) {\n \t\t\tthrow runtime_error(\"SYSCOIN_ALIAS_RPC_ERROR: ERRCODE: 5508 - \" + _(\"Cannot find alias registration transaction, please ensure it has confirmed or re-submit the registration transaction again\"));\n \t\t}\n-\t\ttx.vin.push_back(CTxIn(regOut, pcoin->vout[regOut.n].scriptPubKey));\n+\t\ttx.vin.push_back(CTxIn(regOut, pcoin.out.scriptPubKey));\n \t\tfor (unsigned int i = 0; i<MAX_ALIAS_UPDATES_PER_BLOCK; i++)\n \t\t{\n \t\t\tvecSend.push_back(recipient);\n@@ -1537,26 +1688,25 @@ UniValue aliasnew(const UniValue& params, bool fHelp) {\n \t\t\t{\n \t\t\t\tthrow runtime_error(\"SYSCOIN_RPC_ERROR ERRCODE: 5509 - \" + _(\"This transaction requires a witness but not enough outputs found for witness alias: \") + stringFromVch(vchWitness));\n \t\t\t}\n-\t\t\tconst CCoins* pcoinW = view.AccessCoins(aliasOutPointWitness.hash);\n-\t\t\tif (!pcoinW) {\n+\t\t\tconst Coin &pcoinW = view.AccessCoin(aliasOutPointWitness);\n+\t\t\tif (pcoinW.IsSpent()) {\n \t\t\t\tthrow runtime_error(\"SYSCOIN_ALIAS_RPC_ERROR: ERRCODE: 5510 - \" + _(\"Cannot find witness transaction\"));\n \t\t\t}\n-\t\t\ttx.vin.push_back(CTxIn(aliasOutPointWitness, pcoinW->vout[aliasOutPointWitness.n].scriptPubKey));\n+\t\t\ttx.vin.push_back(CTxIn(aliasOutPointWitness, pcoinW.out.scriptPubKey));\n \t\t}\n \t}\n \telse\n \t\tvecSend.push_back(recipient);\n \tfor (auto& recp : vecSend) {\n \t\ttx.vout.push_back(CTxOut(recp.nAmount, recp.scriptPubKey));\n \t}\n-\t\n \tUniValue res(UniValue::VARR);\n \tres.push_back(EncodeHexTx(tx));\n-\tres.push_back(strAddress);\n \treturn res;\n }\n-UniValue aliasupdate(const UniValue& params, bool fHelp) {\n-\tif (fHelp || 8 != params.size())\n+UniValue aliasupdate(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || 8 != params.size())\n \t\tthrow runtime_error(\n \t\t\t\"aliasupdate [aliasname] [public value] [address] [accept_transfers_flags=3] [expire_timestamp] [encryption_privatekey] [encryption_publickey] [witness]\\n\"\n \t\t\t\t\t\t\"Update and possibly transfer an alias.\\n\"\n@@ -1650,26 +1800,19 @@ UniValue aliasupdate(const UniValue& params, bool fHelp) {\n \t\n \tvecSend.push_back(fee);\n \tvecSend.push_back(recipient);\n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\n-\tbool transferAlias = false;\n-\tif(newAddress.ToString() != EncodeBase58(copyAlias.vchAddress))\n-\t\ttransferAlias = true;\n \t\n-\tSendMoneySyscoin(vchAlias, vchWitness, recipient, vecSend, wtx, &coinControl, false, transferAlias);\n-\tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n-\treturn res;\n+\treturn syscointxfund_helper(vchAlias, vchWitness, recipient, vecSend);\n }\n-UniValue syscoindecoderawtransaction(const UniValue& params, bool fHelp) {\n-\tif (fHelp || 1 != params.size())\n+UniValue syscoindecoderawtransaction(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || 1 != params.size())\n \t\tthrow runtime_error(\"syscoindecoderawtransaction <hexstring>\\n\"\n \t\t\"Decode raw syscoin transaction (serialized, hex-encoded) and display information pertaining to the service that is included in the transactiion data output(OP_RETURN)\\n\"\n \t\t\t\t\"<hexstring> The transaction hex string.\\n\");\n \tstring hexstring = params[0].get_str();\n-\tCTransaction rawTx;\n-\tDecodeHexTx(rawTx,hexstring);\n+\tCMutableTransaction tx;\n+\tDecodeHexTx(tx,hexstring);\n+\tCTransaction rawTx(tx);\n \tif(rawTx.IsNull())\n \t{\n \t\tthrow runtime_error(\"SYSCOIN_RPC_ERROR: ERRCODE: 5512 - \" + _(\"Could not decode transaction\"));\n@@ -1730,8 +1873,9 @@ void AliasTxToJSON(const int op, const vector<unsigned char> &vchData, const vec\n \t\tentry.push_back(Pair(\"renewal\", alias.nExpireTime));\n \n }\n-UniValue syscoinsendrawtransaction(const UniValue& params, bool fHelp) {\n-\tif (fHelp || params.size() < 1 || params.size() > 3)\n+UniValue syscoinsendrawtransaction(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || params.size() < 1 || params.size() > 3)\n \t\tthrow runtime_error(\"syscoinsendrawtransaction \\\"hexstring\\\" ( allowhighfees instantsend )\\n\"\n \t\t\t\"\\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n \t\t\t\"\\nAlso see createrawtransaction and signrawtransaction calls.\\n\"\n@@ -1748,9 +1892,10 @@ UniValue syscoinsendrawtransaction(const UniValue& params, bool fHelp) {\n \tbool fInstantSend = false;\n \tif (params.size() > 2)\n \t\tfInstantSend = params[2].get_bool();\n-\tCTransaction tx;\n-\tif (!DecodeHexTx(tx, hexstring))\n+\tCMutableTransaction txIn;\n+\tif (!DecodeHexTx(txIn, hexstring))\n \t\tthrow runtime_error(\"SYSCOIN_ALIAS_RPC_ERROR: ERRCODE: 5513 - \" + _(\"Could not send raw transaction: Cannot decode transaction from hex string\"));\n+\tCTransaction tx(txIn);\n \tif (tx.vin.size() <= 0)\n \t\tthrow runtime_error(\"SYSCOIN_ALIAS_RPC_ERROR: ERRCODE: 5514 - \" + _(\"Could not send raw transaction: Inputs are empty\"));\n \tif (tx.vout.size() <= 0)\n@@ -1762,7 +1907,9 @@ UniValue syscoinsendrawtransaction(const UniValue& params, bool fHelp) {\n \tUniValue returnRes;\n \ttry\n \t{\n-\t\treturnRes = sendrawtransaction(arraySendParams, false);\n+\t\tJSONRPCRequest request;\n+\t\trequest.params = arraySendParams;\n+\t\treturnRes = sendrawtransaction(request);\n \t}\n \tcatch (UniValue& objError)\n \t{\n@@ -1808,24 +1955,29 @@ string GenerateSyscoinGuid()\n \tvector<unsigned char> vchGuidRand = CScriptNum(rand).getvch();\n \treturn HexStr(vchGuidRand);\n }\n-UniValue prunesyscoinservices(const UniValue& params, bool fHelp)\n+UniValue prunesyscoinservices(const JSONRPCRequest& request)\n {\n \tint servicesCleaned = 0;\n \tCleanupSyscoinServiceDatabases(servicesCleaned);\n \tUniValue res(UniValue::VOBJ);\n \tres.push_back(Pair(\"services_cleaned\", servicesCleaned));\n \treturn res;\n }\n-UniValue aliasbalance(const UniValue& params, bool fHelp)\n+UniValue aliasbalance(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+\tconst UniValue &params = request.params;\n+    if (request.fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n             \"aliasbalance \\\"alias\\\"\\n\"\n             \"\\nReturns the total amount received by the given alias in transactions.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"alias\\\"  (string, required) The syscoin alias for transactions.\\n\"\n+\t\t\t\"2. \\\"instantsend\\\"  (boolean, optional) Check for balance available to instant send. Default is false.\\n\"\n        );\n \tvector<unsigned char> vchAlias = vchFromValue(params[0]);\n+\tbool fUseInstantSend = false;\n+\tif (params.size() > 1)\n+\t\tfUseInstantSend = params[1].get_bool();\n \tCAmount nAmount = 0;\n \tCAliasIndex theAlias;\n \tif (!GetAlias(vchAlias, theAlias))\n@@ -1842,7 +1994,9 @@ UniValue aliasbalance(const UniValue& params, bool fHelp)\n \tutxoParams.push_back(strAddressFrom);\n \tparam.push_back(Pair(\"addresses\", utxoParams));\n \tparamsUTXO.push_back(param);\n-\tconst UniValue &resUTXOs = getaddressutxos(paramsUTXO, false);\n+\tJSONRPCRequest request1;\n+\trequest1.params = paramsUTXO;\n+\tconst UniValue &resUTXOs = getaddressutxos(request1);\n \tUniValue utxoArray(UniValue::VARR);\n \tif (resUTXOs.isArray())\n \t\tutxoArray = resUTXOs.get_array();\n@@ -1852,148 +2006,43 @@ UniValue aliasbalance(const UniValue& params, bool fHelp)\n \t\tres.push_back(Pair(\"balance\", ValueFromAmount(nAmount)));\n \t\treturn  res;\n \t}\n-\n-  \tint op;\n-\tvector<vector<unsigned char> > vvch;\n-    for (unsigned int i = 0;i<utxoArray.size();i++)\n-    {\n-\t\tconst UniValue& utxoObj = utxoArray[i].get_obj();\n-\t\tconst uint256& txid = uint256S(find_value(utxoObj, \"txid\").get_str());\n-\t\tconst int& nOut = find_value(utxoObj, \"outputIndex\").get_int();\n-\t\tconst std::vector<unsigned char> &data(ParseHex(find_value(utxoObj, \"script\").get_str()));\n-\t\tconst CScript& scriptPubKey = CScript(data.begin(), data.end());\n-\t\tconst CAmount &nValue = AmountFromValue(find_value(utxoObj, \"satoshis\"));\n-\t\tconst int& nHeight = find_value(utxoObj, \"height\").get_int();\n-\t\tif (DecodeAliasScript(scriptPubKey, op, vvch))\n-\t\t\tcontinue;\n-\t\t{\n-\t\t\tLOCK(mempool.cs);\n-\t\t\tif (mempool.mapNextTx.find(COutPoint(txid, nOut)) != mempool.mapNextTx.end())\n-\t\t\t\tcontinue;\n-\t\t}\n-\t\tnAmount += nValue;\n-\t\t\n-    }\n-\tUniValue res(UniValue::VOBJ);\n-\tres.push_back(Pair(\"balance\", ValueFromAmount(nAmount)));\n-    return  res;\n-}\n-void aliasselectpaymentcoins(const vector<unsigned char> &vchAlias, const CAmount &nAmount, vector<COutPoint>& outPoints, const unsigned int aliasInputCount, const COutPoint& aliasOutPoint, CAmount &nRequiredAmount, bool bSelectAll)\n-{\n-\tnRequiredAmount = 0;\n-\tint numResults = 0;\n-\tCAmount nCurrentAmount = 0;\n-\tCAmount nDesiredAmount = nAmount;\n-\toutPoints.clear();\n-\tCAliasIndex theAlias;\n-\tif (!GetAlias(vchAlias, theAlias))\n-\t\treturn;\n-\n-\tconst string &strAddressFrom = EncodeBase58(theAlias.vchAddress);\n-\tUniValue paramsUTXO(UniValue::VARR);\n-\tUniValue param(UniValue::VOBJ);\n-\tUniValue utxoParams(UniValue::VARR);\n-\tutxoParams.push_back(strAddressFrom);\n-\tparam.push_back(Pair(\"addresses\", utxoParams));\n-\tparamsUTXO.push_back(param);\n-\tconst UniValue &resUTXOs = getaddressutxos(paramsUTXO, false);\n-\tUniValue utxoArray(UniValue::VARR);\n-\tif (resUTXOs.isArray())\n-\t\tutxoArray = resUTXOs.get_array();\n-\telse\n-\t\treturn;\n-\t\n-\tunsigned int currentAliasInputCount = aliasInputCount;\n-\tint op;\n-\tvector<vector<unsigned char> > vvch;\n-\tbool bIsFunded = false;\n-\tCAmount nFeeRequired = 0;\n-\t// try to fund via normal balances first\n-\tfor (unsigned int i = 0; i<utxoArray.size(); i++)\n \t{\n-\t\tconst UniValue& utxoObj = utxoArray[i].get_obj();\n-\t\tconst uint256& txid = uint256S(find_value(utxoObj, \"txid\").get_str());\n-\t\tconst int& nOut = find_value(utxoObj, \"outputIndex\").get_int();\n-\t\tconst std::vector<unsigned char> &data(ParseHex(find_value(utxoObj, \"script\").get_str()));\n-\t\tconst CScript& scriptPubKey = CScript(data.begin(), data.end());\n-\t\tconst CAmount &nValue = AmountFromValue(find_value(utxoObj, \"satoshis\"));\n-\t\tconst COutPoint &outPointToCheck = COutPoint(txid, nOut);\n-\t\tif (DecodeAliasScript(scriptPubKey, op, vvch) && vvch.size() > 1 && vvch[0] == theAlias.vchAlias && vvch[1] == theAlias.vchGUID) {\n-\t\t\tcontinue;\n-\t\t}\n-\n-\t\t{\n-\t\t\tLOCK(mempool.cs);\n-\t\t\tif (mempool.mapNextTx.find(outPointToCheck) != mempool.mapNextTx.end())\n-\t\t\t\tcontinue;\n-\t\t}\n-\t\t// add min fee for every input\n-\t\tnFeeRequired += 3 * minRelayTxFee.GetFee(200u);\n-\t\toutPoints.push_back(outPointToCheck);\n-\t\tnCurrentAmount += nValue;\n-\t\tif (nCurrentAmount >= (nDesiredAmount + nFeeRequired)) {\n-\t\t\tbIsFunded = true;\n-\t\t\tif (!bSelectAll)\n-\t\t\t\tbreak;\n-\t\t}\n-\t\telse\n-\t\t\tbIsFunded = false;\n-\n-\t}\n-\t// then try to fund with alias inputs\n-\tif (!bIsFunded || bSelectAll) {\n+\t\tLOCK(mempool.cs);\n+\t\tint op;\n+\t\tvector<vector<unsigned char> > vvch;\n \t\tfor (unsigned int i = 0; i < utxoArray.size(); i++)\n \t\t{\n \t\t\tconst UniValue& utxoObj = utxoArray[i].get_obj();\n \t\t\tconst uint256& txid = uint256S(find_value(utxoObj, \"txid\").get_str());\n \t\t\tconst int& nOut = find_value(utxoObj, \"outputIndex\").get_int();\n \t\t\tconst std::vector<unsigned char> &data(ParseHex(find_value(utxoObj, \"script\").get_str()));\n \t\t\tconst CScript& scriptPubKey = CScript(data.begin(), data.end());\n-\t\t\tconst CAmount &nValue = AmountFromValue(find_value(utxoObj, \"satoshis\"));\n-\t\t\tconst COutPoint &outPointToCheck = COutPoint(txid, nOut);\n-\n-\t\t\tif (DecodeAliasScript(scriptPubKey, op, vvch) && vvch.size() > 1 && vvch[0] == theAlias.vchAlias && vvch[1] == theAlias.vchGUID) {\n-\t\t\t\tcurrentAliasInputCount--;\n-\t\t\t\t// if this outpoint is same as the alias input that was added we cannot add it again so skip\n-\t\t\t\tif (outPointToCheck == aliasOutPoint)\n-\t\t\t\t\tcontinue;\n-\t\t\t\t// ensure that we keep atleast 1 alias input unless we are selecting all (for transfer)\n-\t\t\t\tif (currentAliasInputCount <= 1 && !bSelectAll)\n-\t\t\t\t\tcontinue;\n-\t\t\t\t{\n-\t\t\t\t\tLOCK(mempool.cs);\n-\t\t\t\t\tif (mempool.mapNextTx.find(outPointToCheck) != mempool.mapNextTx.end())\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\t// add min fee for every input\n-\t\t\t\tnFeeRequired += 3 * minRelayTxFee.GetFee(200u);\n-\t\t\t\toutPoints.push_back(outPointToCheck);\n-\t\t\t\tnCurrentAmount += nValue;\n-\t\t\t\tif (nCurrentAmount >= (nDesiredAmount + nFeeRequired)) {\n-\t\t\t\t\tbIsFunded = true;\n-\t\t\t\t\tif (!bSelectAll)\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tbIsFunded = false;\n-\t\t\t}\n+\t\t\tconst CAmount &nValue = find_value(utxoObj, \"satoshis\").get_int64();\n+\t\t\tconst int& nHeight = find_value(utxoObj, \"height\").get_int();\n+\t\t\tconst COutPoint outPoint(txid, nOut);\n+\t\t\tif (DecodeAliasScript(scriptPubKey, op, vvch))\n+\t\t\t\tcontinue;\n+\t\t\tif (mempool.mapNextTx.find(outPoint) != mempool.mapNextTx.end())\n+\t\t\t\tcontinue;\n+\t\t\tif (!IsOutpointMature(outPoint, fUseInstantSend))\n+\t\t\t\tcontinue;\n+\t\t\tnAmount += nValue;\n \n \t\t}\n \t}\n-\tif (!bIsFunded) {\n-\t\tnRequiredAmount = (nDesiredAmount + nFeeRequired) - nCurrentAmount;\n-\t\tif (nRequiredAmount < 0)\n-\t\t\tnRequiredAmount = 0;\n-\t}\n+\tUniValue res(UniValue::VOBJ);\n+\tres.push_back(Pair(\"balance\", ValueFromAmount(nAmount)));\n+    return  res;\n }\n /**\n  * [aliasinfo description]\n  * @param  params [description]\n  * @param  fHelp  [description]\n  * @return        [description]\n  */\n-UniValue aliasinfo(const UniValue& params, bool fHelp) {\n-\tif (fHelp || 1 > params.size())\n+UniValue aliasinfo(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || 1 > params.size())\n \t\tthrow runtime_error(\"aliasinfo <aliasname>\\n\"\n \t\t\t\t\"Show values of an alias.\\n\");\n \tvector<unsigned char> vchAlias = vchFromValue(params[0]);\n@@ -2065,40 +2114,70 @@ unsigned int aliasunspent(const vector<unsigned char> &vchAlias, COutPoint& outp\n \tutxoParams.push_back(strAddressFrom);\n \tparam.push_back(Pair(\"addresses\", utxoParams));\n \tparamsUTXO.push_back(param);\n-\tconst UniValue &resUTXOs = getaddressutxos(paramsUTXO, false);\n+\tJSONRPCRequest request;\n+\trequest.params = paramsUTXO;\n+\tconst UniValue &resUTXOs = getaddressutxos(request);\n \tUniValue utxoArray(UniValue::VARR);\n \tif (resUTXOs.isArray())\n \t\tutxoArray = resUTXOs.get_array();\n \telse\n \t\treturn 0;\n \tunsigned int count = 0;\n \tCAmount nCurrentAmount = 0;\n-\tfor (unsigned int i = 0; i<utxoArray.size(); i++)\n \t{\n-\t\tconst UniValue& utxoObj = utxoArray[i].get_obj();\n-\t\tconst uint256& txid = uint256S(find_value(utxoObj, \"txid\").get_str());\n-\t\tconst int& nOut = find_value(utxoObj, \"outputIndex\").get_int();\n-\t\tconst std::vector<unsigned char> &data(ParseHex(find_value(utxoObj, \"script\").get_str()));\n-\t\tconst CScript& scriptPubKey = CScript(data.begin(), data.end());\n-\t\tint op;\n-\t\tvector<vector<unsigned char> > vvch;\n-\t\tif (!DecodeAliasScript(scriptPubKey, op, vvch) || vvch.size() <= 1 || vvch[0] != theAlias.vchAlias || vvch[1] != theAlias.vchGUID)\n-\t\t\tcontinue;\n-\t\tconst COutPoint &outPointToCheck = COutPoint(txid, nOut);\n+\t\tLOCK(mempool.cs);\n+\t\tfor (unsigned int i = 0; i < utxoArray.size(); i++)\n \t\t{\n-\t\t\tLOCK(mempool.cs);\n+\t\t\tconst UniValue& utxoObj = utxoArray[i].get_obj();\n+\t\t\tconst uint256& txid = uint256S(find_value(utxoObj, \"txid\").get_str());\n+\t\t\tconst int& nOut = find_value(utxoObj, \"outputIndex\").get_int();\n+\t\t\tconst std::vector<unsigned char> &data(ParseHex(find_value(utxoObj, \"script\").get_str()));\n+\t\t\tconst CScript& scriptPubKey = CScript(data.begin(), data.end());\n+\t\t\tint op;\n+\t\t\tvector<vector<unsigned char> > vvch;\n+\t\t\tif (!DecodeAliasScript(scriptPubKey, op, vvch) || vvch.size() <= 1 || vvch[0] != theAlias.vchAlias || vvch[1] != theAlias.vchGUID)\n+\t\t\t\tcontinue;\n+\t\t\tconst COutPoint &outPointToCheck = COutPoint(txid, nOut);\n+\n \t\t\tif (mempool.mapNextTx.find(outPointToCheck) != mempool.mapNextTx.end())\n \t\t\t\tcontinue;\n+\n+\t\t\tif (outpoint.IsNull())\n+\t\t\t\toutpoint = outPointToCheck;\n+\t\t\tcount++;\n \t\t}\n-\t\tif(outpoint.IsNull())\n-\t\t\toutpoint = outPointToCheck;\n-\t\tcount++;\n \t}\n \treturn count;\n }\n-UniValue aliaspay(const UniValue& params, bool fHelp) {\n+UniValue aliaspay_helper(const string strFromAddress, vector<CRecipient> &vecSend, bool fUseInstantSend) {\n+\tCMutableTransaction txNew;\n+\t// vouts to the payees\n+\tfor (const auto& recipient : vecSend)\n+\t{\n+\t\tCTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n+\t\tif (!txout.IsDust(dustRelayFee))\n+\t\t{\n+\t\t\ttxNew.vout.push_back(txout);\n+\t\t}\n+\t}\n+\tUniValue paramObj(UniValue::VOBJ);\n+\tUniValue paramArr(UniValue::VARR);\n+\tparamArr.push_back(strFromAddress);\n+\tparamObj.push_back(Pair(\"addresses\", paramArr));\n \n-    if (fHelp || params.size() < 2 || params.size() > 4)\n+\n+\tUniValue paramsFund(UniValue::VARR);\n+\tparamsFund.push_back(EncodeHexTx(txNew));\n+\tparamsFund.push_back(paramObj);\n+\tparamsFund.push_back(fUseInstantSend);\n+\n+\tJSONRPCRequest request;\n+\trequest.params = paramsFund;\n+\treturn syscointxfund(request);\n+}\n+UniValue aliaspay(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+    if (request.fHelp || params.size() < 2 || params.size() > 4)\n         throw runtime_error(\n             \"aliaspay aliasfrom {\\\"address\\\":amount,...} (instantsend subtractfeefromamount)\\n\"\n             \"\\nSend multiple times from an alias. Amounts are double-precision floating point numbers.\"\n@@ -2133,13 +2212,12 @@ UniValue aliaspay(const UniValue& params, bool fHelp) {\n \t\t\t+ HelpExampleRpc(\"aliaspay\", \"\\\"senderalias\\\", {\\\"Sa8H1Mq4pd6z3N4xFzxvVah9AWzZyykJiJ\\\":0.01,\\\"SkbcpmjqkERwvPPqke3puu9k9bCdHLaVoP\\\":0.02}, false, \\\"testing\\\"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     string strFrom = params[0].get_str();\n \tCAliasIndex theAlias;\n \tif (!GetAlias(vchFromString(strFrom), theAlias))\n \t\tthrow runtime_error(\"SYSCOIN_ALIAS_RPC_ERROR: ERRCODE: 5519 - \" + _(\"Invalid fromalias\"));\n-\n+\tstring strFromAddress = EncodeBase58(theAlias.vchAddress);\n     UniValue sendTo = params[1].get_obj();\n \n \tbool fUseInstantSend = false;\n@@ -2187,27 +2265,22 @@ UniValue aliaspay(const UniValue& params, bool fHelp) {\n         vecSend.push_back(recipient);\n     }\n \n-    EnsureWalletIsUnlocked();\n     // Check funds\n \tUniValue balanceParams(UniValue::VARR);\n \tbalanceParams.push_back(strFrom);\n-\tconst UniValue &resBalance = aliasbalance(balanceParams, false);\n+\tbalanceParams.push_back(fUseInstantSend);\n+\tJSONRPCRequest request1;\n+\trequest1.params = balanceParams;\n+\tconst UniValue &resBalance = aliasbalance(request1);\n \tCAmount nBalance = AmountFromValue(find_value(resBalance.get_obj(), \"balance\"));\n     if (totalAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Alias has insufficient funds\");\n \n-\tCRecipient recipient;\n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\n-\tSendMoneySyscoin(theAlias.vchAlias, vchFromString(\"\"), recipient, vecSend, wtx, &coinControl, fUseInstantSend);\n-\t\n-\tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n-\treturn res;\n+\treturn aliaspay_helper(strFromAddress, vecSend, fUseInstantSend);\n }\n-UniValue aliasaddscript(const UniValue& params, bool fHelp) {\n-\tif (fHelp || 1 != params.size())\n+UniValue aliasaddscript(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || 1 != params.size())\n \t\tthrow runtime_error(\"aliasaddscript redeemscript\\n\"\n \t\t\t\t\"Add redeemscript to local wallet for signing smart contract based alias transactions.\\n\");\n \tstd::vector<unsigned char> data(ParseHex(params[0].get_str()));\n@@ -2217,8 +2290,9 @@ UniValue aliasaddscript(const UniValue& params, bool fHelp) {\n \tres.push_back(Pair(\"result\", \"success\"));\n \treturn res;\n }\n-UniValue aliasupdatewhitelist(const UniValue& params, bool fHelp) {\n-\tif (fHelp || params.size() != 3)\n+UniValue aliasupdatewhitelist(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || params.size() != 3)\n \t\tthrow runtime_error(\n \t\t\t\"aliasupdatewhitelist [owner alias] [{\\\"alias\\\":\\\"aliasname\\\",\\\"discount_percentage\\\":n},...] [witness]\\n\"\n \t\t\t\"Update to the whitelist(controls who can resell). Array of whitelist entries in parameter 1.\\n\"\n@@ -2292,17 +2366,11 @@ UniValue aliasupdatewhitelist(const UniValue& params, bool fHelp) {\n \tvecSend.push_back(fee);\n \tvecSend.push_back(recipient);\n \n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\n-\tSendMoneySyscoin(copyAlias.vchAlias, vchWitness, recipient, vecSend, wtx, &coinControl);\n-\n-\tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n-\treturn res;\n+\treturn syscointxfund_helper(copyAlias.vchAlias, vchWitness, recipient, vecSend);\n }\n-UniValue aliasclearwhitelist(const UniValue& params, bool fHelp) {\n-\tif (fHelp || params.size() != 2)\n+UniValue aliasclearwhitelist(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || params.size() != 2)\n \t\tthrow runtime_error(\n \t\t\t\"aliasclearwhitelist [owner alias] [witness]\\n\"\n \t\t\t\"Clear your whitelist(controls who can resell).\\n\"\n@@ -2349,24 +2417,18 @@ UniValue aliasclearwhitelist(const UniValue& params, bool fHelp) {\n \tvecSend.push_back(fee);\n \tvecSend.push_back(recipient);\n \n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\n-\tSendMoneySyscoin(copyAlias.vchAlias, vchWitness, recipient, vecSend, wtx, &coinControl);\n-\n-\tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n-\treturn res;\n+\treturn syscointxfund_helper(copyAlias.vchAlias, vchWitness, recipient, vecSend);\n }\n bool DoesAliasExist(const string &strAddress) {\n \tvector<unsigned char> vchMyAlias;\n \tvector<unsigned char> vchAddress;\n \tDecodeBase58(strAddress, vchAddress);\n \treturn paliasdb->ReadAddress(vchAddress, vchMyAlias);\n }\n-UniValue syscoinlistreceivedbyaddress(const UniValue& params, bool fHelp)\n+UniValue syscoinlistreceivedbyaddress(const JSONRPCRequest& request)\n {\n-\tif (fHelp || params.size() != 0)\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || params.size() != 0)\n \t\tthrow runtime_error(\n \t\t\t\"syscoinlistreceivedbyaddress\\n\"\n \t\t\t\"\\nList balances by receiving address.\\n\"\n@@ -2387,8 +2449,9 @@ UniValue syscoinlistreceivedbyaddress(const UniValue& params, bool fHelp)\n \n \treturn SyscoinListReceived();\n }\n-UniValue aliaswhitelist(const UniValue& params, bool fHelp) {\n-\tif (fHelp || params.size() != 1)\n+UniValue aliaswhitelist(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || params.size() != 1)\n \t\tthrow runtime_error(\"aliaswhitelist <alias>\\n\"\n \t\t\t\"List all affiliates for this alias.\\n\");\n \tUniValue oRes(UniValue::VARR);\n@@ -2554,3 +2617,22 @@ string GetSyscoinTransactionDescription(const CTransaction& tx, const int op, st\n \t}\n \treturn strResponse + \" \" + responseGUID;\n }\n+bool IsOutpointMature(const COutPoint& outpoint, bool fUseInstantSend)\n+{\n+\tCoin coin;\n+\tGetUTXOCoin(outpoint, coin);\n+\tif (coin.IsSpent())\n+\t\treturn false;\n+\tint numConfirmationsNeeded = 2;\n+\tif (coin.IsCoinBase())\n+\t\tnumConfirmationsNeeded = COINBASE_MATURITY;\n+\tif (fUseInstantSend)\n+\t\tnumConfirmationsNeeded = Params().GetConsensus().nInstantSendConfirmationsRequired;\n+\n+\tif (coin.nHeight > -1 && chainActive.Tip())\n+\t\treturn (chainActive.Height() - coin.nHeight) >= numConfirmationsNeeded;\n+\t\n+\t// don't have chainActive or coin height is neg 1 or less\n+\treturn false;\n+\n+}"
      },
      {
        "sha": "2eb00ede24ae62dd0a2388a4f92fce966f6957ba",
        "filename": "src/alias.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/alias.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/alias.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alias.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -49,7 +49,7 @@ class CAliasUnprunable\n \n \tADD_SERIALIZE_METHODS;\n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n \t\tREADWRITE(vchGUID);\n \t\tREADWRITE(VARINT(nExpireTime));\n \t}\n@@ -84,7 +84,7 @@ class COfferLinkWhitelistEntry {\n \n \tADD_SERIALIZE_METHODS;\n \ttemplate <typename Stream, typename Operation>\n-\tinline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+\tinline void SerializationOp(Stream& s, Operation ser_action) {\n \t\tREADWRITE(aliasLinkVchRand);\n \t\tREADWRITE(VARINT(nDiscountPct));\n \t}\n@@ -123,7 +123,7 @@ class COfferLinkWhitelist {\n \n \tADD_SERIALIZE_METHODS;\n \ttemplate <typename Stream, typename Operation>\n-\tinline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+\tinline void SerializationOp(Stream& s, Operation ser_action) {\n \t\tREADWRITE(entries);\n \t}\n \tbool GetLinkEntryByHash(const std::vector<unsigned char> &ahash, COfferLinkWhitelistEntry &entry) const;\n@@ -189,9 +189,10 @@ class CAliasIndex {\n \t\tvchAddress.clear();\n \t\tofferWhitelist.SetNull();\n \t}\n+\n \tADD_SERIALIZE_METHODS;\n     template <typename Stream, typename Operation>\n-\tinline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {        \n+\tinline void SerializationOp(Stream& s, Operation ser_action) {        \n \t\tREADWRITE(txHash);\n \t\tREADWRITE(VARINT(nHeight));\n \t\tREADWRITE(vchPublicValue);\n@@ -289,12 +290,11 @@ std::vector<unsigned char> vchFromString(const std::string &str);\n std::string stringFromValue(const UniValue& value);\n const int SYSCOIN_TX_VERSION = 0x7400;\n bool IsValidAliasName(const std::vector<unsigned char> &vchAlias);\n-bool CheckAliasInputs(const CTransaction &tx, int op, const std::vector<std::vector<unsigned char> > &vvchArgs, bool fJustCheck, int nHeight, std::string &errorMessage, bool & bDestCheckFailed,bool bSanityCheck=false);\n+bool CheckAliasInputs(const CTransaction &tx, int op, const std::vector<std::vector<unsigned char> > &vvchArgs, bool fJustCheck, int nHeight, std::string &errorMessage,bool bSanityCheck=false);\n void CreateRecipient(const CScript& scriptPubKey, CRecipient& recipient);\n void CreateAliasRecipient(const CScript& scriptPubKey, CRecipient& recipient);\n void CreateFeeRecipient(CScript& scriptPubKey, const std::vector<unsigned char>& data, CRecipient& recipient);\n void CreateAliasRecipient(const CScript& scriptPubKey, CRecipient& recipient);\n-void aliasselectpaymentcoins(const std::vector<unsigned char> &vchAlias, const CAmount &nAmount, std::vector<COutPoint>& outPoints, const unsigned int aliasInputCount, const COutPoint& aliasOutPoint, CAmount &nRequiredAmount, bool bSelectAll=false);\n CAmount GetDataFee(const CScript& scriptPubKey);\n bool IsAliasOp(int op);\n bool GetAlias(const std::vector<unsigned char> &vchAlias, CAliasIndex& alias);\n@@ -320,8 +320,6 @@ bool GetSyscoinData(const CTransaction &tx, std::vector<unsigned char> &vchData,\n bool GetSyscoinData(const CScript &scriptPubKey, std::vector<unsigned char> &vchData, std::vector<unsigned char> &vchHash);\n bool IsSysServiceExpired(const uint64_t &nTime);\n bool GetTimeToPrune(const CScript& scriptPubKey, uint64_t &nTime);\n-bool GetSyscoinTransaction(int nHeight, const uint256 &hash, CTransaction &txOut, const Consensus::Params& consensusParams);\n-bool GetSyscoinTransaction(int nHeight, const uint256 &hash, CTransaction &txOut, uint256& hashBlock, const Consensus::Params& consensusParams);\n bool IsSyscoinScript(const CScript& scriptPubKey, int &op, std::vector<std::vector<unsigned char> > &vvchArgs);\n bool RemoveSyscoinScript(const CScript& scriptPubKeyIn, CScript& scriptPubKeyOut);\n void SysTxToJSON(const int op, const std::vector<unsigned char> &vchData, const std::vector<unsigned char> &vchHash, UniValue &entry, const char& type);\n@@ -332,4 +330,6 @@ void GetAddress(const CAliasIndex &alias, CSyscoinAddress* address, CScript& scr\n std::string GetSyscoinTransactionDescription(const CTransaction& tx, const int op, std::string& responseEnglish, const char &type, std::string& responseGUID);\n bool BuildAliasIndexerHistoryJson(const CAliasIndex& alias, UniValue& oName);\n bool DoesAliasExist(const std::string &strAddress);\n+bool IsOutpointMature(const COutPoint& outpoint, bool fUseInstantSend = false);\n+UniValue syscointxfund_helper(const std::vector<unsigned char> &vchAlias, const std::vector<unsigned char> &vchWitness, const CRecipient &aliasRecipient, std::vector<CRecipient> &vecSend);\n #endif // ALIAS_H"
      },
      {
        "sha": "c6bed57106f7cd04d27fb873fff55e42c8aba5fc",
        "filename": "src/amount.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/amount.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/amount.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -10,20 +9,30 @@\n \n const std::string CURRENCY_UNIT = \"SYS\";\n \n-CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nSize)\n+CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nBytes_)\n {\n+    assert(nBytes_ <= uint64_t(std::numeric_limits<int64_t>::max()));\n+    int64_t nSize = int64_t(nBytes_);\n+\n     if (nSize > 0)\n-        nSatoshisPerK = nFeePaid*1000/nSize;\n+        nSatoshisPerK = nFeePaid * 1000 / nSize;\n     else\n         nSatoshisPerK = 0;\n }\n \n-CAmount CFeeRate::GetFee(size_t nSize) const\n+CAmount CFeeRate::GetFee(size_t nBytes_) const\n {\n-    CAmount nFee = nSatoshisPerK*nSize / 1000;\n+    assert(nBytes_ <= uint64_t(std::numeric_limits<int64_t>::max()));\n+    int64_t nSize = int64_t(nBytes_);\n+\n+    CAmount nFee = nSatoshisPerK * nSize / 1000;\n \n-    if (nFee == 0 && nSatoshisPerK > 0)\n-        nFee = nSatoshisPerK;\n+    if (nFee == 0 && nSize != 0) {\n+        if (nSatoshisPerK > 0)\n+            nFee = CAmount(1);\n+        if (nSatoshisPerK < 0)\n+            nFee = CAmount(-1);\n+    }\n \n     return nFee;\n }"
      },
      {
        "sha": "beda9fb95723f3736feb9bdd0c2ff189ab93170f",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 17,
        "deletions": 11,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -12,6 +11,7 @@\n #include <stdlib.h>\n #include <string>\n \n+/** Amount in satoshis (Can be negative) */\n typedef int64_t CAmount;\n \n static const CAmount COIN = 100000000;\n@@ -22,7 +22,7 @@ extern const std::string CURRENCY_UNIT;\n /** No amount larger than this (in satoshi) is valid.\n  *\n  * Note that this constant is *not* the total money supply, which in Syscoin\n- * currently happens to be less than 0.9B SYS for various reasons, but\n+ * currently happens to be less than 21,000,000 BTC for various reasons, but\n  * rather a sanity check. As this sanity check is used by consensus-critical\n  * validation code, the exact value of the MAX_MONEY constant is consensus\n  * critical; in unusual circumstances like a(nother) overflow bug that allowed\n@@ -31,22 +31,28 @@ extern const std::string CURRENCY_UNIT;\n static const CAmount MAX_MONEY = 888000000 * COIN;\n inline bool MoneyRange(const CAmount& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n \n-/** Type-safe wrapper class for fee rates\n- * (how much to pay based on transaction size)\n+/**\n+ * Fee rate in satoshis per kilobyte: CAmount / kB\n  */\n class CFeeRate\n {\n private:\n     CAmount nSatoshisPerK; // unit is satoshis-per-1,000-bytes\n public:\n+    /** Fee rate of 0 satoshis per kB */\n     CFeeRate() : nSatoshisPerK(0) { }\n     explicit CFeeRate(const CAmount& _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) { }\n-    CFeeRate(const CAmount& nFeePaid, size_t nSize);\n+    /** Constructor for a fee rate in satoshis per kB. The size in bytes must not exceed (2^63 - 1)*/\n+    CFeeRate(const CAmount& nFeePaid, size_t nBytes);\n     CFeeRate(const CFeeRate& other) { nSatoshisPerK = other.nSatoshisPerK; }\n-\n-    CAmount GetFee(size_t size) const; // unit returned is satoshis\n-    CAmount GetFeePerK() const { return GetFee(1000); } // satoshis-per-1000-bytes\n-\n+    /**\n+     * Return the fee in satoshis for the given size in bytes.\n+     */\n+    CAmount GetFee(size_t nBytes) const;\n+    /**\n+     * Return the fee in satoshis for a size of 1000 bytes\n+     */\n+    CAmount GetFeePerK() const { return GetFee(1000); }\n     friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }\n     friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }\n     friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }\n@@ -58,7 +64,7 @@ class CFeeRate\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(nSatoshisPerK);\n     }\n };"
      },
      {
        "sha": "a58ad01b5af5b6246db32dbf88a9a915ea5abf11",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "9ca75a4cbe396a27c44d5a44c46b2b9c32f29f91",
        "filename": "src/arith_uint256.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/arith_uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/arith_uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "7decb126c64821cf166eb133890f420e3fda91c2",
        "filename": "src/asset.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 47,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/asset.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/asset.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/asset.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -14,7 +14,7 @@\n #include \"rpc/server.h\"\n #include \"wallet/wallet.h\"\n #include \"chainparams.h\"\n-#include \"coincontrol.h\"\n+#include \"wallet/coincontrol.h\"\n #include <boost/algorithm/hex.hpp>\n #include <boost/algorithm/string/case_conv.hpp> // for to_upper()\n #include <boost/foreach.hpp>\n@@ -25,7 +25,6 @@\n #include <chrono>\n using namespace std::chrono;\n using namespace std;\n-extern void SendMoneySyscoin(const vector<unsigned char> &vchAlias, const vector<unsigned char> &vchWitness, const CRecipient &aliasRecipient, vector<CRecipient> &vecSend, CWalletTx& wtxNew, CCoinControl* coinControl, bool fUseInstantSend=false, bool transferAlias=false);\n bool IsAssetOp(int op) {\n     return op == OP_ASSET_ACTIVATE\n         || op == OP_ASSET_UPDATE\n@@ -539,11 +538,6 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t\t\t\t\t}\n \n \t\t\t\t\t\treceiverAllocation.txHash = tx.GetHash();\n-\t\t\t\t\t\tif (theAsset.fInterestRate > 0) {\n-\t\t\t\t\t\t\tif (receiverAllocation.nHeight > 0) {\n-\t\t\t\t\t\t\t\tAccumulateInterestSinceLastClaim(receiverAllocation, nHeight);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n \t\t\t\t\t\treceiverAllocation.fInterestRate = theAsset.fInterestRate;\n \t\t\t\t\t\treceiverAllocation.nHeight = nHeight;\n \t\t\t\t\t\treceiverAllocation.vchMemo = theAssetAllocation.vchMemo;\n@@ -645,8 +639,9 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n     return true;\n }\n \n-UniValue assetnew(const UniValue& params, bool fHelp) {\n-    if (fHelp || params.size() != 11)\n+UniValue assetnew(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+    if (request.fHelp || params.size() != 11)\n         throw runtime_error(\n \t\t\t\"assetnew [symbol] [alias] [public value] [category=assets] [precision=8] [use_inputranges] [supply] [max_supply] [interest_rate] [can_adjust_interest_rate] [witness]\\n\"\n \t\t\t\t\t\t\"<symbol> symbol of asset in uppercase, 1 characters miniumum, 8 characters max.\\n\"\n@@ -740,20 +735,14 @@ UniValue assetnew(const UniValue& params, bool fHelp) {\n \tCreateFeeRecipient(scriptData, data, fee);\n \tvecSend.push_back(fee);\n \n-\t\n-\t\n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\t\n-\tSendMoneySyscoin(vchAlias, vchWitness, aliasRecipient, vecSend, wtx, &coinControl);\n-\tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n+\tUniValue res = syscointxfund_helper(vchAlias, vchWitness, aliasRecipient, vecSend);\n \tres.push_back(stringFromVch(newAsset.vchAsset));\n \treturn res;\n }\n \n-UniValue assetupdate(const UniValue& params, bool fHelp) {\n-    if (fHelp || params.size() != 6)\n+UniValue assetupdate(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+    if (request.fHelp || params.size() != 6)\n         throw runtime_error(\n \t\t\t\"assetupdate [asset] [public value] [category=assets] [supply] [interest_rate] [witness]\\n\"\n \t\t\t\t\t\t\"Perform an update on an asset you control.\\n\"\n@@ -840,17 +829,12 @@ UniValue assetupdate(const UniValue& params, bool fHelp) {\n \tvecSend.push_back(fee);\n \t\n \t\n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\t\n-\tSendMoneySyscoin(theAlias.vchAlias, vchWitness, aliasRecipient, vecSend, wtx, &coinControl);\n- \tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n-\treturn res;\n+\treturn syscointxfund_helper(theAlias.vchAlias, vchWitness, aliasRecipient, vecSend);\n }\n \n-UniValue assettransfer(const UniValue& params, bool fHelp) {\n- if (fHelp || params.size() != 3)\n+UniValue assettransfer(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+ if (request.fHelp || params.size() != 3)\n         throw runtime_error(\n \t\t\t\"assettransfer [asset] [alias] [witness]\\n\"\n \t\t\t\t\t\t\"Transfer a asset allocation you own to another alias.\\n\"\n@@ -920,17 +904,11 @@ UniValue assettransfer(const UniValue& params, bool fHelp) {\n \tCreateFeeRecipient(scriptData, data, fee);\n \tvecSend.push_back(fee);\n \t\n-\t\n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\n-\tSendMoneySyscoin(fromAlias.vchAlias, vchWitness, aliasRecipient, vecSend, wtx, &coinControl);\n-\tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n-\treturn res;\n+\treturn syscointxfund_helper(fromAlias.vchAlias, vchWitness, aliasRecipient, vecSend);\n }\n-UniValue assetsend(const UniValue& params, bool fHelp) {\n-\tif (fHelp || params.size() != 5)\n+UniValue assetsend(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || params.size() != 5)\n \t\tthrow runtime_error(\n \t\t\t\"assetsend [asset] [aliasfrom] ( [{\\\"aliasto\\\":\\\"aliasname\\\",\\\"amount\\\":amount},...] or [{\\\"aliasto\\\":\\\"aliasname\\\",\\\"ranges\\\":[{\\\"start\\\":index,\\\"end\\\":index},...]},...] ) [memo] [witness]\\n\"\n \t\t\t\"Send an asset you own to another alias as an asset allocation. Maximimum recipients is 250.\\n\"\n@@ -1061,17 +1039,12 @@ UniValue assetsend(const UniValue& params, bool fHelp) {\n \tvecSend.push_back(fee);\n \n \n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\n-\tSendMoneySyscoin(fromAlias.vchAlias, vchWitness, aliasRecipient, vecSend, wtx, &coinControl);\n-\tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n-\treturn res;\n+\treturn syscointxfund_helper(fromAlias.vchAlias, vchWitness, aliasRecipient, vecSend);\n }\n \n-UniValue assetinfo(const UniValue& params, bool fHelp) {\n-    if (fHelp || 2 != params.size())\n+UniValue assetinfo(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+    if (request.fHelp || 2 != params.size())\n         throw runtime_error(\"assetinfo <asset> <getinputs>\\n\"\n                 \"Show stored values of a single asset and its. Set getinputs to true if you want to get the allocation inputs, if applicable.\\n\");\n "
      },
      {
        "sha": "b915c69ed8265d0c88423c307a1164a47df1df20",
        "filename": "src/asset.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/asset.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/asset.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/asset.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -15,7 +15,6 @@ class CWalletTx;\n class CTransaction;\n class CReserveKey;\n class CCoinsViewCache;\n-class CCoins;\n class CBlock;\n class CAliasIndex;\n \n@@ -77,7 +76,7 @@ class CAsset {\n \t}\n \tADD_SERIALIZE_METHODS;\n     template <typename Stream, typename Operation>\n-\tinline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\t\t\n+\tinline void SerializationOp(Stream& s, Operation ser_action) {\t\t\n \t\tREADWRITE(vchPubData);\n \t\tREADWRITE(txHash);\n \t\tREADWRITE(VARINT(nHeight));"
      },
      {
        "sha": "6b915e13972dd12279f2c3e13cf3109575e45301",
        "filename": "src/assetallocation.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 37,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/assetallocation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/assetallocation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/assetallocation.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -15,7 +15,7 @@\n #include \"rpc/server.h\"\n #include \"wallet/wallet.h\"\n #include \"chainparams.h\"\n-#include \"coincontrol.h\"\n+#include \"wallet/coincontrol.h\"\n #include <boost/algorithm/hex.hpp>\n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n #include <boost/foreach.hpp>\n@@ -27,8 +27,6 @@\n \n using namespace std::chrono;\n using namespace std;\n-extern void SendMoneySyscoin(const vector<unsigned char> &vchAlias, const vector<unsigned char> &vchWitness, const CRecipient &aliasRecipient, vector<CRecipient> &vecSend, CWalletTx& wtxNew, CCoinControl* coinControl, bool fUseInstantSend = false, bool transferAlias = false);\n-\n bool IsAssetAllocationOp(int op) {\n \treturn op == OP_ASSET_ALLOCATION_SEND || op == OP_ASSET_COLLECT_INTEREST;\n }\n@@ -231,8 +229,9 @@ CAmount GetAssetAllocationInterest(CAssetAllocation & assetAllocation, const int\n \t\terrorMessage = _(\"Not enough blocks in-between interest claims\");\n \t\treturn 0;\n \t}\n-\tif (assetAllocation.nLastInterestClaimHeight >= nHeight || assetAllocation.nLastInterestClaimHeight == 0) {\n-\t\terrorMessage = _(\"Last interest claim block height is invalid\");\n+\tconst int &nInterestClaimBlockThreshold = fUnitTest ? 1 : ONE_MONTH_IN_BLOCKS;\n+\tif ((nHeight - assetAllocation.nLastInterestClaimHeight) < nInterestClaimBlockThreshold || assetAllocation.nLastInterestClaimHeight == 0) {\n+\t\terrorMessage = _(\"Not enough blocks have passed since the last claim, please wait some more time...\");\n \t\treturn 0;\n \t}\n \tconst int &nInterestBlockTerm = fUnitTest? ONE_HOUR_IN_BLOCKS: ONE_YEAR_IN_BLOCKS;\n@@ -619,13 +618,6 @@ bool CheckAssetAllocationInputs(const CTransaction &tx, int op, const vector<vec\n \t\t\t\t\t}\n \t\t\t\t\tif (!bBalanceOverrun) {\n \t\t\t\t\t\treceiverAllocation.txHash = tx.GetHash();\n-\t\t\t\t\t\tif (dbAsset.fInterestRate > 0) {\n-\t\t\t\t\t\t\t// accumulate balances as sender/receiver allocations balances are adjusted\n-\t\t\t\t\t\t\tif (receiverAllocation.nHeight > 0) {\n-\t\t\t\t\t\t\t\tAccumulateInterestSinceLastClaim(receiverAllocation, nHeight);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tAccumulateInterestSinceLastClaim(theAssetAllocation, nHeight);\n-\t\t\t\t\t\t}\n \t\t\t\t\t\treceiverAllocation.fInterestRate = dbAsset.fInterestRate;\n \t\t\t\t\t\treceiverAllocation.nHeight = nHeight;\n \t\t\t\t\t\treceiverAllocation.vchMemo = theAssetAllocation.vchMemo;\n@@ -691,8 +683,9 @@ bool CheckAssetAllocationInputs(const CTransaction &tx, int op, const vector<vec\n \t}\n     return true;\n }\n-UniValue assetallocationsend(const UniValue& params, bool fHelp) {\n-\tif (fHelp || params.size() != 5)\n+UniValue assetallocationsend(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || params.size() != 5)\n \t\tthrow runtime_error(\n \t\t\t\"assetallocationsend [asset] [aliasfrom] ( [{\\\"aliasto\\\":\\\"aliasname\\\",\\\"amount\\\":amount},...] or [{\\\"aliasto\\\":\\\"aliasname\\\",\\\"ranges\\\":[{\\\"start\\\":index,\\\"end\\\":index},...]},...] ) [memo] [witness]\\n\"\n \t\t\t\"Send an asset allocation you own to another alias. Maximimum recipients is 250.\\n\"\n@@ -823,16 +816,11 @@ UniValue assetallocationsend(const UniValue& params, bool fHelp) {\n \tvecSend.push_back(fee);\n \n \n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\n-\tSendMoneySyscoin(fromAlias.vchAlias, vchWitness, aliasRecipient, vecSend, wtx, &coinControl);\n-\tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n-\treturn res;\n+\treturn syscointxfund_helper(fromAlias.vchAlias, vchWitness, aliasRecipient, vecSend);\n }\n-UniValue assetallocationcollectinterest(const UniValue& params, bool fHelp) {\n-\tif (fHelp || params.size() != 3)\n+UniValue assetallocationcollectinterest(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || params.size() != 3)\n \t\tthrow runtime_error(\n \t\t\t\"assetallocationcollectinterest [asset] [alias] [witness]\\n\"\n \t\t\t\"Collect interest on this asset allocation if an interest rate is set on this asset.\\n\"\n@@ -895,16 +883,11 @@ UniValue assetallocationcollectinterest(const UniValue& params, bool fHelp) {\n \tvecSend.push_back(fee);\n \n \n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\n-\tSendMoneySyscoin(fromAlias.vchAlias, vchWitness, aliasRecipient, vecSend, wtx, &coinControl);\n-\tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n-\treturn res;\n+\treturn syscointxfund_helper(fromAlias.vchAlias, vchWitness, aliasRecipient, vecSend);\n }\n-UniValue assetallocationinfo(const UniValue& params, bool fHelp) {\n-    if (fHelp || 3 != params.size())\n+UniValue assetallocationinfo(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+    if (request.fHelp || 3 != params.size())\n         throw runtime_error(\"assetallocationinfo <asset> <alias> <getinputs>\\n\"\n                 \"Show stored values of a single asset allocation. Set getinputs to true if you want to get the allocation inputs, if applicable.\\n\");\n \n@@ -959,7 +942,6 @@ int DetectPotentialAssetAllocationSenderConflicts(const CAssetAllocationTuple& a\n \tstd::set<std::pair<uint256, int64_t>, Comparator> arrivalTimesSet(\n \t\tarrivalTimes.begin(), arrivalTimes.end(), compFunctor);\n \n-\tLOCK(cs_main);\n \t// go through arrival times and check that balances don't overrun the POW balance\n \tCAmount nRealtimeBalanceRequired = 0;\n \tpair<uint256, int64_t> lastArrivalTime;\n@@ -974,10 +956,12 @@ int DetectPotentialAssetAllocationSenderConflicts(const CAssetAllocationTuple& a\n \t\tminLatency = 1000;\n \tfor (auto& arrivalTime : arrivalTimesSet)\n \t{\n-\t\tCTransaction tx;\n \t\t// ensure mempool has this transaction and it is not yet mined, get the transaction in question\n-\t\tif (!mempool.lookup(arrivalTime.first, tx))\n+\t\tconst CTransactionRef txRef = mempool.get(arrivalTime.first);\n+\t\tif (!txRef)\n \t\t\tcontinue;\n+\t\tconst CTransaction &tx = *txRef;\n+\n \t\t// if this tx arrived within the minimum latency period flag it as potentially conflicting\n \t\tif (abs(arrivalTime.second - lastArrivalTime.second) < minLatency) {\n \t\t\treturn ZDAG_MINOR_CONFLICT_OK;\n@@ -1025,8 +1009,9 @@ int DetectPotentialAssetAllocationSenderConflicts(const CAssetAllocationTuple& a\n \t\treturn ZDAG_NOT_FOUND;\n \treturn lookForTxHash.IsNull()? ZDAG_STATUS_OK: ZDAG_NOT_FOUND;\n }\n-UniValue assetallocationsenderstatus(const UniValue& params, bool fHelp) {\n-\tif (fHelp || 3 != params.size())\n+UniValue assetallocationsenderstatus(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || 3 != params.size())\n \t\tthrow runtime_error(\"assetallocationsenderstatus <asset> <sender> <txid>\\n\"\n \t\t\t\"Show status as it pertains to any current Z-DAG conflicts or warnings related to a sender or sender/txid combination of an asset allocation transfer. Leave txid empty if you are not checking for a specific transfer.\\n\"\n \t\t\t\"Return value is in the status field and can represent 3 levels(0, 1 or 2)\\n\""
      },
      {
        "sha": "a5febfef25cb923b69713a66e139e5b6d492634c",
        "filename": "src/assetallocation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/assetallocation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/assetallocation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/assetallocation.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -16,7 +16,6 @@ class CWalletTx;\n class CTransaction;\n class CReserveKey;\n class CCoinsViewCache;\n-class CCoins;\n class CBlock;\n class CAliasIndex;\n class CAsset;\n@@ -36,7 +35,7 @@ class CAssetAllocationTuple {\n \tADD_SERIALIZE_METHODS;\n \n \ttemplate <typename Stream, typename Operation>\n-\tinline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+\tinline void SerializationOp(Stream& s, Operation ser_action) {\n \t\tREADWRITE(vchAsset);\n \t\tREADWRITE(vchAlias);\n \t}\n@@ -81,6 +80,7 @@ static const int ZDAG_MINIMUM_LATENCY_SECONDS = 10;\n static const int MAX_MEMO_LENGTH = 128;\n static const int ONE_YEAR_IN_BLOCKS = 525600;\n static const int ONE_HOUR_IN_BLOCKS = 60;\n+static const int ONE_MONTH_IN_BLOCKS = 43800;\n static sorted_vector<CAssetAllocationTuple> assetAllocationConflicts;\n enum {\n \tZDAG_NOT_FOUND = -1,\n@@ -115,7 +115,7 @@ class CAssetAllocation {\n \n \tADD_SERIALIZE_METHODS;\n \ttemplate <typename Stream, typename Operation>\n-\tinline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+\tinline void SerializationOp(Stream& s, Operation ser_action) {\n \t\tREADWRITE(vchAsset);\n \t\tREADWRITE(vchAlias);\n \t\tREADWRITE(txHash);"
      },
      {
        "sha": "088ffdc54a6d8301b19f375beb3e15e174ba23b2",
        "filename": "src/auxpow.cpp",
        "status": "modified",
        "additions": 176,
        "deletions": 198,
        "changes": 374,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/auxpow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/auxpow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/auxpow.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,62 +1,46 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2011 Vince Durham\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n-// Copyright (c) 2014-2015 Daniel Kraft\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Copyright (c) 2014-2017 Daniel Kraft\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"auxpow.h\"\n+#include <auxpow.h>\n \n-#include \"compat/endian.h\"\n-#include \"consensus/consensus.h\"\n-#include \"consensus/merkle.h\"\n-#include \"consensus/validation.h\"\n-#include \"hash.h\"\n-#include \"validation.h\"\n-#include \"script/script.h\"\n-#include \"txmempool.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n+#include <compat/endian.h>\n+#include <consensus/consensus.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <script/script.h>\n+#include <txmempool.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+#include <validation.h>\n \n #include <algorithm>\n-#include \"chainparams.h\"\n // SYSCOIN \n #include \"instantx.h\"\n-using namespace std;\n-// SYSCOIN use auxpow setmerkle branch\n-int CMerkleTx::SetMerkleBranch(const CBlock& block)\n-{\n-\tAssertLockHeld(cs_main);\n-\tCBlock blockTmp;\n+typedef std::vector<unsigned char> valtype;\n+/* Moved from wallet.cpp.  CMerkleTx is necessary for auxpow, independent\n+of an enabled (or disabled) wallet.  Always include the code.  */\n+\n+const uint256 CMerkleTx::ABANDON_HASH(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n \n+void CMerkleTx::SetMerkleBranch(const CBlockIndex* pindex, int posInBlock)\n+{\n \t// Update the tx's hashBlock\n-\thashBlock = block.GetHash();\n+\thashBlock = pindex->GetBlockHash();\n \n-\t// Locate the transaction\n-\tfor (nIndex = 0; nIndex < (int)block.vtx.size(); nIndex++)\n-\t\tif (block.vtx[nIndex] == *(CTransaction*)this)\n-\t\t\tbreak;\n-\tif (nIndex == (int)block.vtx.size())\n-\t{\n-\t\tvMerkleBranch.clear();\n-\t\tnIndex = -1;\n-\t\tLogPrintf(\"ERROR: SetMerkleBranch(): couldn't find tx in block\\n\");\n-\t\treturn 0;\n-\t}\n+\t// set the position of the transaction in the block\n+\tnIndex = posInBlock;\n+}\n \n-\t// Fill in merkle branch\n+void CMerkleTx::InitMerkleBranch(const CBlock& block, int posInBlock)\n+{\n+\thashBlock = block.GetHash();\n+\tnIndex = posInBlock;\n \tvMerkleBranch = BlockMerkleBranch(block, nIndex);\n-\n-\t// Is the tx in a block that's in the main chain\n-\tBlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n-\tif (mi == mapBlockIndex.end())\n-\t\treturn 0;\n-\tconst CBlockIndex* pindex = (*mi).second;\n-\tif (!pindex || !chainActive.Contains(pindex))\n-\t\treturn 0;\n-\n-\treturn chainActive.Height() - pindex->nHeight + 1;\n }\n \n int CMerkleTx::GetDepthInMainChain(const CBlockIndex* &pindexRet, bool enableIX) const\n@@ -96,175 +80,169 @@ int CMerkleTx::GetBlocksToMaturity() const\n {\n \tif (!IsCoinBase())\n \t\treturn 0;\n-\treturn max(0, (COINBASE_MATURITY + 1) - GetDepthInMainChain());\n+\treturn std::max(0, (COINBASE_MATURITY + 1) - GetDepthInMainChain());\n }\n \n+/* ************************************************************************** */\n \n-bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectAbsurdFee)\n+bool\n+CAuxPow::check(const uint256& hashAuxBlock, int nChainId,\n+\tconst Consensus::Params& params) const\n {\n-\tCValidationState state;\n-\treturn ::AcceptToMemoryPool(mempool, false, state, *this, fLimitFree, NULL, false, fRejectAbsurdFee);\n-}\n+\tif (nIndex != 0)\n+\t\treturn error(\"AuxPow is not a generate\");\n \n+\tif (parentBlock.GetChainId() == nChainId)\n+\t\treturn error(\"Aux POW parent has our chain ID\");\n \n-/* ************************************************************************** */\n+\tif (vChainMerkleBranch.size() > 30)\n+\t\treturn error(\"Aux POW chain merkle branch too long\");\n \n-bool\n-CAuxPow::check (const uint256& hashAuxBlock, int nChainId,\n-                const Consensus::Params& params) const\n-{\n-    if (nIndex != 0)\n-        return error(\"AuxPow is not a generate\");\n-\n-    if (parentBlock.GetChainId () == nChainId)\n-        return error(\"Aux POW parent has our chain ID\");\n-\n-    if (vChainMerkleBranch.size() > 30)\n-        return error(\"Aux POW chain merkle branch too long\");\n-\n-    // Check that the chain merkle root is in the coinbase\n-    const uint256 nRootHash\n-      = CheckMerkleBranch (hashAuxBlock, vChainMerkleBranch, nChainIndex);\n-    std::vector<unsigned char> vchRootHash(nRootHash.begin (), nRootHash.end ());\n-    std::reverse (vchRootHash.begin (), vchRootHash.end ()); // correct endian\n-\n-    // Check that we are in the parent block merkle tree\n-    if (CheckMerkleBranch(GetHash(), vMerkleBranch, nIndex)\n-          != parentBlock.hashMerkleRoot)\n-        return error(\"Aux POW merkle root incorrect\");\n-\n-    const CScript script = vin[0].scriptSig;\n-\n-    // Check that the same work is not submitted twice to our chain.\n-    //\n-\n-    CScript::const_iterator pcHead =\n-        std::search(script.begin(), script.end(), UBEGIN(pchMergedMiningHeader), UEND(pchMergedMiningHeader));\n-\n-    CScript::const_iterator pc =\n-        std::search(script.begin(), script.end(), vchRootHash.begin(), vchRootHash.end());\n-\n-    if (pc == script.end())\n-        return error(\"Aux POW missing chain merkle root in parent coinbase\");\n-\n-    if (pcHead != script.end())\n-    {\n-        // Enforce only one chain merkle root by checking that a single instance of the merged\n-        // mining header exists just before.\n-        if (script.end() != std::search(pcHead + 1, script.end(), UBEGIN(pchMergedMiningHeader), UEND(pchMergedMiningHeader)))\n-            return error(\"Multiple merged mining headers in coinbase\");\n-        if (pcHead + sizeof(pchMergedMiningHeader) != pc)\n-            return error(\"Merged mining header is not just before chain merkle root\");\n-    }\n-    else\n-    {\n-        // For backward compatibility.\n-        // Enforce only one chain merkle root by checking that it starts early in the coinbase.\n-        // 8-12 bytes are enough to encode extraNonce and nBits.\n-        if (pc - script.begin() > 20)\n-            return error(\"Aux POW chain merkle root must start in the first 20 bytes of the parent coinbase\");\n-    }\n-\n-\n-    // Ensure we are at a deterministic point in the merkle leaves by hashing\n-    // a nonce and our chain ID and comparing to the index.\n-    pc += vchRootHash.size();\n-    if (script.end() - pc < 8)\n-        return error(\"Aux POW missing chain merkle tree size and nonce in parent coinbase\");\n-\n-    uint32_t nSize;\n-    memcpy(&nSize, &pc[0], 4);\n-    nSize = le32toh (nSize);\n-    const unsigned merkleHeight = vChainMerkleBranch.size ();\n-    if (nSize != (1u << merkleHeight))\n-        return error(\"Aux POW merkle branch size does not match parent coinbase\");\n-\n-    uint32_t nNonce;\n-    memcpy(&nNonce, &pc[4], 4);\n-    nNonce = le32toh (nNonce);\n-    if (nChainIndex != getExpectedIndex (nNonce, nChainId, merkleHeight))\n-        return error(\"Aux POW wrong index\");\n-\n-    return true;\n+\t// Check that the chain merkle root is in the coinbase\n+\tconst uint256 nRootHash\n+\t\t= CheckMerkleBranch(hashAuxBlock, vChainMerkleBranch, nChainIndex);\n+\tvaltype vchRootHash(nRootHash.begin(), nRootHash.end());\n+\tstd::reverse(vchRootHash.begin(), vchRootHash.end()); // correct endian\n+\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t  // Check that we are in the parent block merkle tree\n+\tif (CheckMerkleBranch(GetHash(), vMerkleBranch, nIndex)\n+\t\t!= parentBlock.hashMerkleRoot)\n+\t\treturn error(\"Aux POW merkle root incorrect\");\n+\n+\tconst CScript script = tx->vin[0].scriptSig;\n+\n+\t// Check that the same work is not submitted twice to our chain.\n+\t//\n+\n+\tCScript::const_iterator pcHead =\n+\t\tstd::search(script.begin(), script.end(), UBEGIN(pchMergedMiningHeader), UEND(pchMergedMiningHeader));\n+\n+\tCScript::const_iterator pc =\n+\t\tstd::search(script.begin(), script.end(), vchRootHash.begin(), vchRootHash.end());\n+\n+\tif (pc == script.end())\n+\t\treturn error(\"Aux POW missing chain merkle root in parent coinbase\");\n+\n+\tif (pcHead != script.end())\n+\t{\n+\t\t// Enforce only one chain merkle root by checking that a single instance of the merged\n+\t\t// mining header exists just before.\n+\t\tif (script.end() != std::search(pcHead + 1, script.end(), UBEGIN(pchMergedMiningHeader), UEND(pchMergedMiningHeader)))\n+\t\t\treturn error(\"Multiple merged mining headers in coinbase\");\n+\t\tif (pcHead + sizeof(pchMergedMiningHeader) != pc)\n+\t\t\treturn error(\"Merged mining header is not just before chain merkle root\");\n+\t}\n+\telse\n+\t{\n+\t\t// For backward compatibility.\n+\t\t// Enforce only one chain merkle root by checking that it starts early in the coinbase.\n+\t\t// 8-12 bytes are enough to encode extraNonce and nBits.\n+\t\tif (pc - script.begin() > 20)\n+\t\t\treturn error(\"Aux POW chain merkle root must start in the first 20 bytes of the parent coinbase\");\n+\t}\n+\n+\n+\t// Ensure we are at a deterministic point in the merkle leaves by hashing\n+\t// a nonce and our chain ID and comparing to the index.\n+\tpc += vchRootHash.size();\n+\tif (script.end() - pc < 8)\n+\t\treturn error(\"Aux POW missing chain merkle tree size and nonce in parent coinbase\");\n+\n+\tuint32_t nSize;\n+\tmemcpy(&nSize, &pc[0], 4);\n+\tnSize = le32toh(nSize);\n+\tconst unsigned merkleHeight = vChainMerkleBranch.size();\n+\tif (nSize != (1u << merkleHeight))\n+\t\treturn error(\"Aux POW merkle branch size does not match parent coinbase\");\n+\n+\tuint32_t nNonce;\n+\tmemcpy(&nNonce, &pc[4], 4);\n+\tnNonce = le32toh(nNonce);\n+\tif (nChainIndex != getExpectedIndex(nNonce, nChainId, merkleHeight))\n+\t\treturn error(\"Aux POW wrong index\");\n+\n+\treturn true;\n }\n \n int\n-CAuxPow::getExpectedIndex (uint32_t nNonce, int nChainId, unsigned h)\n+CAuxPow::getExpectedIndex(uint32_t nNonce, int nChainId, unsigned h)\n {\n-  // Choose a pseudo-random slot in the chain merkle tree\n-  // but have it be fixed for a size/nonce/chain combination.\n-  //\n-  // This prevents the same work from being used twice for the\n-  // same chain while reducing the chance that two chains clash\n-  // for the same slot.\n-\n-  /* This computation can overflow the uint32 used.  This is not an issue,\n-     though, since we take the mod against a power-of-two in the end anyway.\n-     This also ensures that the computation is, actually, consistent\n-     even if done in 64 bits as it was in the past on some systems.\n-\n-     Note that h is always <= 30 (enforced by the maximum allowed chain\n-     merkle branch length), so that 32 bits are enough for the computation.  */\n-\n-  uint32_t rand = nNonce;\n-  rand = rand * 1103515245 + 12345;\n-  rand += nChainId;\n-  rand = rand * 1103515245 + 12345;\n-\n-  return rand % (1 << h);\n+\t// Choose a pseudo-random slot in the chain merkle tree\n+\t// but have it be fixed for a size/nonce/chain combination.\n+\t//\n+\t// This prevents the same work from being used twice for the\n+\t// same chain while reducing the chance that two chains clash\n+\t// for the same slot.\n+\n+\t/* This computation can overflow the uint32 used.  This is not an issue,\n+\tthough, since we take the mod against a power-of-two in the end anyway.\n+\tThis also ensures that the computation is, actually, consistent\n+\teven if done in 64 bits as it was in the past on some systems.\n+\n+\tNote that h is always <= 30 (enforced by the maximum allowed chain\n+\tmerkle branch length), so that 32 bits are enough for the computation.  */\n+\n+\tuint32_t rand = nNonce;\n+\trand = rand * 1103515245 + 12345;\n+\trand += nChainId;\n+\trand = rand * 1103515245 + 12345;\n+\n+\treturn rand % (1 << h);\n }\n \n uint256\n-CAuxPow::CheckMerkleBranch (uint256 hash,\n-                            const std::vector<uint256>& vMerkleBranch,\n-                            int nIndex)\n+CAuxPow::CheckMerkleBranch(uint256 hash,\n+\tconst std::vector<uint256>& vMerkleBranch,\n+\tint nIndex)\n {\n-  if (nIndex == -1)\n-    return uint256 ();\n-  for (std::vector<uint256>::const_iterator it(vMerkleBranch.begin ());\n-       it != vMerkleBranch.end (); ++it)\n-  {\n-    if (nIndex & 1)\n-      hash = Hash (BEGIN (*it), END (*it), BEGIN (hash), END (hash));\n-    else\n-      hash = Hash (BEGIN (hash), END (hash), BEGIN (*it), END (*it));\n-    nIndex >>= 1;\n-  }\n-  return hash;\n+\tif (nIndex == -1)\n+\t\treturn uint256();\n+\tfor (std::vector<uint256>::const_iterator it(vMerkleBranch.begin());\n+\t\tit != vMerkleBranch.end(); ++it)\n+\t{\n+\t\tif (nIndex & 1)\n+\t\t\thash = Hash(BEGIN(*it), END(*it), BEGIN(hash), END(hash));\n+\t\telse\n+\t\t\thash = Hash(BEGIN(hash), END(hash), BEGIN(*it), END(*it));\n+\t\tnIndex >>= 1;\n+\t}\n+\treturn hash;\n }\n+\n void\n-CAuxPow::initAuxPow (CBlockHeader& header)\n+CAuxPow::initAuxPow(CBlockHeader& header)\n {\n-  /* Set auxpow flag right now, since we take the block hash below.  */\n-  header.SetAuxpowVersion(true);\n-\n-  /* Build a minimal coinbase script input for merge-mining.  */\n-  const uint256 blockHash = header.GetHash ();\n-  std::vector<unsigned char> inputData(blockHash.begin (), blockHash.end ());\n-  std::reverse (inputData.begin (), inputData.end ());\n-  inputData.push_back (1);\n-  inputData.insert (inputData.end (), 7, 0);\n-\n-  /* Fake a parent-block coinbase with just the required input\n-     script and no outputs.  */\n-  CMutableTransaction coinbase;\n-  coinbase.vin.resize (1);\n-  coinbase.vin[0].prevout.SetNull ();\n-  coinbase.vin[0].scriptSig = (CScript () << inputData);\n-  assert (coinbase.vout.empty ());\n-\n-  /* Build a fake parent block with the coinbase.  */\n-  CBlock parent;\n-  parent.nVersion = 1;\n-  parent.vtx.resize (1);\n-  parent.vtx[0] = coinbase;\n-  parent.hashMerkleRoot = BlockMerkleRoot (parent);\n-\n-  /* Construct the auxpow object.  */\n-  header.SetAuxpow (new CAuxPow (coinbase));\n-  assert (header.auxpow->vChainMerkleBranch.empty ());\n-  header.auxpow->nChainIndex = 0;\n-  assert (header.auxpow->vMerkleBranch.empty ());\n-  header.auxpow->nIndex = 0;\n-  header.auxpow->parentBlock = parent;\n-}\n+\t/* Set auxpow flag right now, since we take the block hash below.  */\n+\theader.SetAuxpowVersion(true);\n+\n+\t/* Build a minimal coinbase script input for merge-mining.  */\n+\tconst uint256 blockHash = header.GetHash();\n+\tvaltype inputData(blockHash.begin(), blockHash.end());\n+\tstd::reverse(inputData.begin(), inputData.end());\n+\tinputData.push_back(1);\n+\tinputData.insert(inputData.end(), 7, 0);\n+\n+\t/* Fake a parent-block coinbase with just the required input\n+\tscript and no outputs.  */\n+\tCMutableTransaction coinbase;\n+\tcoinbase.vin.resize(1);\n+\tcoinbase.vin[0].prevout.SetNull();\n+\tcoinbase.vin[0].scriptSig = (CScript() << inputData);\n+\tassert(coinbase.vout.empty());\n+\tCTransactionRef coinbaseRef = MakeTransactionRef(coinbase);\n+\n+\t/* Build a fake parent block with the coinbase.  */\n+\tCBlock parent;\n+\tparent.nVersion = 1;\n+\tparent.vtx.resize(1);\n+\tparent.vtx[0] = coinbaseRef;\n+\tparent.hashMerkleRoot = BlockMerkleRoot(parent);\n+\n+\t/* Construct the auxpow object.  */\n+\theader.SetAuxpow(new CAuxPow(coinbaseRef));\n+\tassert(header.auxpow->vChainMerkleBranch.empty());\n+\theader.auxpow->nChainIndex = 0;\n+\tassert(header.auxpow->vMerkleBranch.empty());\n+\theader.auxpow->nIndex = 0;\n+\theader.auxpow->parentBlock = parent;\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "77153b8dc2798aab18806e8132f5d0ae3fade8e5",
        "filename": "src/auxpow.h",
        "status": "modified",
        "additions": 163,
        "deletions": 161,
        "changes": 324,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/auxpow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/auxpow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/auxpow.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,18 +1,17 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n-// Copyright (c) 2014-2015 Daniel Kraft\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Copyright (c) 2014-2016 Daniel Kraft\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef SYSCOIN_AUXPOW_H\n #define SYSCOIN_AUXPOW_H\n \n-#include \"consensus/params.h\"\n-#include \"primitives/pureheader.h\"\n-#include \"primitives/transaction.h\"\n-#include \"serialize.h\"\n-#include \"uint256.h\"\n+#include <consensus/params.h>\n+#include <primitives/pureheader.h>\n+#include <primitives/transaction.h>\n+#include <serialize.h>\n+#include <uint256.h>\n \n #include <vector>\n \n@@ -25,180 +24,183 @@ class CValidationState;\n static const unsigned char pchMergedMiningHeader[] = { 0xfa, 0xbe, 'm', 'm' };\n \n /* Because it is needed for auxpow, the definition of CMerkleTx is moved\n-   here from wallet.h.  */\n+here from wallet.h.  */\n \n /** A transaction with a merkle branch linking it to the block chain. */\n-class CMerkleTx : public CTransaction\n+class CMerkleTx\n {\n private:\n-  /** Constant used in hashBlock to indicate tx has been abandoned */\n-    static const uint256 ABANDON_HASH;\n+\t/** Constant used in hashBlock to indicate tx has been abandoned */\n+\tstatic const uint256 ABANDON_HASH;\n \n public:\n-    uint256 hashBlock;\n-    std::vector<uint256> vMerkleBranch;\n-\n-    /* An nIndex == -1 means that hashBlock (in nonzero) refers to the earliest\n-     * block in the chain we know this or any in-wallet dependency conflicts\n-     * with. Older clients interpret nIndex == -1 as unconfirmed for backward\n-     * compatibility.\n-     */\n-    int nIndex;\n-\n-    CMerkleTx()\n-    {\n-        Init();\n-    }\n-\n-    CMerkleTx(const CTransaction& txIn) : CTransaction(txIn)\n-    {\n-        Init();\n-    }\n-\n-    void Init()\n-    {\n-        hashBlock = uint256();\n-        nIndex = -1;\n-    }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(*(CTransaction*)this);\n-        nVersion = this->nVersion;\n-        READWRITE(hashBlock);\n-        READWRITE(vMerkleBranch);\n-        READWRITE(nIndex);\n-    }\n-\n-    int SetMerkleBranch(const CBlock& block);\n-\n-    /**\n-     * Return depth of transaction in blockchain:\n-     * <0  : conflicts with a transaction this deep in the blockchain\n-     *  0  : in memory pool, waiting to be included in a block\n-     * >=1 : this many blocks deep in the main chain\n-     */\n+\tCTransactionRef tx;\n+\tuint256 hashBlock;\n+\tstd::vector<uint256> vMerkleBranch;\n+\n+\t/* An nIndex == -1 means that hashBlock (in nonzero) refers to the earliest\n+\t* block in the chain we know this or any in-wallet dependency conflicts\n+\t* with. Older clients interpret nIndex == -1 as unconfirmed for backward\n+\t* compatibility.\n+\t*/\n+\tint nIndex;\n+\n+\tCMerkleTx()\n+\t{\n+\t\tSetTx(MakeTransactionRef());\n+\t\tInit();\n+\t}\n+\n+\texplicit CMerkleTx(CTransactionRef arg)\n+\t{\n+\t\tSetTx(std::move(arg));\n+\t\tInit();\n+\t}\n+\n+\tvoid Init()\n+\t{\n+\t\thashBlock = uint256();\n+\t\tnIndex = -1;\n+\t}\n+\n+\tvoid SetTx(CTransactionRef arg)\n+\t{\n+\t\ttx = std::move(arg);\n+\t}\n+\n+\tADD_SERIALIZE_METHODS;\n+\n+\ttemplate <typename Stream, typename Operation>\n+\tinline void SerializationOp(Stream& s, Operation ser_action) {\n+\t\tREADWRITE(tx);\n+\t\tREADWRITE(hashBlock);\n+\t\tREADWRITE(vMerkleBranch);\n+\t\tREADWRITE(nIndex);\n+\t}\n+\n+\tvoid SetMerkleBranch(const CBlockIndex* pindex, int posInBlock);\n+\n+\t/**\n+\t* Actually compute the Merkle branch.  This is used for unit tests when\n+\t* constructing an auxpow.  It is not needed for actual production, since\n+\t* we do not care in the Syscoin client how the auxpow is constructed\n+\t* by a miner.\n+\t*/\n+\tvoid InitMerkleBranch(const CBlock& block, int posInBlock);\n+\n+\t/**\n+\t* Return depth of transaction in blockchain:\n+\t* <0  : conflicts with a transaction this deep in the blockchain\n+\t*  0  : in memory pool, waiting to be included in a block\n+\t* >=1 : this many blocks deep in the main chain\n+\t*/\n \tint GetDepthInMainChain(const CBlockIndex* &pindexRet, bool enableIX = true) const;\n \tint GetDepthInMainChain(bool enableIX = true) const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet, enableIX); }\n-    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n-    int GetBlocksToMaturity() const;\n-    /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n-\tbool AcceptToMemoryPool(bool fLimitFree = true, bool fRejectAbsurdFee = true);\n-    bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n-    bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n-    void setAbandoned() { hashBlock = ABANDON_HASH; }\n+\tbool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n+\tint GetBlocksToMaturity() const;\n+\tbool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n+\tbool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n+\tvoid setAbandoned() { hashBlock = ABANDON_HASH; }\n+\n+\tconst uint256& GetHash() const { return tx->GetHash(); }\n+\tbool IsCoinBase() const { return tx->IsCoinBase(); }\n };\n \n /**\n- * Data for the merge-mining auxpow.  This is a merkle tx (the parent block's\n- * coinbase tx) that can be verified to be in the parent block, and this\n- * transaction's input (the coinbase script) contains the reference\n- * to the actual merge-mined block.\n- */\n+* Data for the merge-mining auxpow.  This is a merkle tx (the parent block's\n+* coinbase tx) that can be verified to be in the parent block, and this\n+* transaction's input (the coinbase script) contains the reference\n+* to the actual merge-mined block.\n+*/\n class CAuxPow : public CMerkleTx\n {\n \n-/* Public for the unit tests.  */\n+\t/* Public for the unit tests.  */\n public:\n \n-  /** The merkle branch connecting the aux block to our coinbase.  */\n-  std::vector<uint256> vChainMerkleBranch;\n+\t/** The merkle branch connecting the aux block to our coinbase.  */\n+\tstd::vector<uint256> vChainMerkleBranch;\n \n-  /** Merkle tree index of the aux block header in the coinbase.  */\n-  int nChainIndex;\n+\t/** Merkle tree index of the aux block header in the coinbase.  */\n+\tint nChainIndex;\n \n-  /** Parent block header (on which the real PoW is done).  */\n-  CPureBlockHeader parentBlock;\n+\t/** Parent block header (on which the real PoW is done).  */\n+\tCPureBlockHeader parentBlock;\n \n public:\n \n-  /* Prevent accidental conversion.  */\n-  inline explicit CAuxPow (const CTransaction& txIn)\n-    : CMerkleTx (txIn)\n-  {}\n-\n-  inline CAuxPow ()\n-    : CMerkleTx ()\n-  {}\n-\n-  ADD_SERIALIZE_METHODS;\n-\n-  template<typename Stream, typename Operation>\n-    inline void\n-    SerializationOp (Stream& s, Operation ser_action, int nType, int nVersion)\n-  {\n-    READWRITE (*static_cast<CMerkleTx*> (this));\n-    nVersion = this->nVersion;\n-\n-    READWRITE (vChainMerkleBranch);\n-    READWRITE (nChainIndex);\n-    READWRITE (parentBlock);\n-  }\n-\n-  /**\n-   * Check the auxpow, given the merge-mined block's hash and our chain ID.\n-   * Note that this does not verify the actual PoW on the parent block!  It\n-   * just confirms that all the merkle branches are valid.\n-   * @param hashAuxBlock Hash of the merge-mined block.\n-   * @param nChainId The auxpow chain ID of the block to check.\n-   * @param params Consensus parameters.\n-   * @return True if the auxpow is valid.\n-   */\n-  bool check (const uint256& hashAuxBlock, int nChainId,\n-              const Consensus::Params& params) const;\n-\n-  /**\n-   * Get the parent block's hash.  This is used to verify that it\n-   * satisfies the PoW requirement.\n-   * @return The parent block hash.\n-   */\n-  inline uint256\n-  getParentBlockHash () const\n-  {\n-    return parentBlock.GetHash();\n-  }\n-\n-  /**\n-   * Return parent block.  This is only used for the temporary parentblock\n-   * auxpow version check.\n-   * @return The parent block.\n-   */\n-  /* FIXME: Remove after the hardfork.  */\n-  inline const CPureBlockHeader&\n-  getParentBlock () const\n-  {\n-    return parentBlock;\n-  }\n-\n-  /**\n-   * Calculate the expected index in the merkle tree.  This is also used\n-   * for the test-suite.\n-   * @param nNonce The coinbase's nonce value.\n-   * @param nChainId The chain ID.\n-   * @param h The merkle block height.\n-   * @return The expected index for the aux hash.\n-   */\n-  static int getExpectedIndex (uint32_t nNonce, int nChainId, unsigned h);\n-\n-  /**\n-   * Check a merkle branch.  This used to be in CBlock, but was removed\n-   * upstream.  Thus include it here now.\n-   */\n-  static uint256 CheckMerkleBranch (uint256 hash,\n-                                    const std::vector<uint256>& vMerkleBranch,\n-                                    int nIndex);\n-\n-  /**\n-   * Initialise the auxpow of the given block header.  This constructs\n-   * a minimal CAuxPow object with a minimal parent block and sets\n-   * it on the block header.  The auxpow is not necessarily valid, but\n-   * can be \"mined\" to make it valid.\n-   * @param header The header to set the auxpow on.\n-   */\n-  static void initAuxPow (CBlockHeader& header);\n+\t/* Prevent accidental conversion.  */\n+\tinline explicit CAuxPow(CTransactionRef txIn)\n+\t\t: CMerkleTx(txIn)\n+\t{}\n+\n+\tinline CAuxPow()\n+\t\t: CMerkleTx()\n+\t{}\n+\n+\tADD_SERIALIZE_METHODS;\n+\n+\ttemplate<typename Stream, typename Operation>\n+\tinline void\n+\t\tSerializationOp(Stream& s, Operation ser_action)\n+\t{\n+\t\tREADWRITE(*static_cast<CMerkleTx*> (this));\n+\t\tREADWRITE(vChainMerkleBranch);\n+\t\tREADWRITE(nChainIndex);\n+\t\tREADWRITE(parentBlock);\n+\t}\n+\n+\t/**\n+\t* Check the auxpow, given the merge-mined block's hash and our chain ID.\n+\t* Note that this does not verify the actual PoW on the parent block!  It\n+\t* just confirms that all the merkle branches are valid.\n+\t* @param hashAuxBlock Hash of the merge-mined block.\n+\t* @param nChainId The auxpow chain ID of the block to check.\n+\t* @param params Consensus parameters.\n+\t* @return True if the auxpow is valid.\n+\t*/\n+\tbool check(const uint256& hashAuxBlock, int nChainId,\n+\t\tconst Consensus::Params& params) const;\n+\n+\t/**\n+\t* Get the parent block's hash.  This is used to verify that it\n+\t* satisfies the PoW requirement.\n+\t* @return The parent block hash.\n+\t*/\n+\tinline uint256\n+\t\tgetParentBlockHash() const\n+\t{\n+\t\treturn parentBlock.GetHash();\n+\t}\n+\n+\n+\t/**\n+\t* Calculate the expected index in the merkle tree.  This is also used\n+\t* for the test-suite.\n+\t* @param nNonce The coinbase's nonce value.\n+\t* @param nChainId The chain ID.\n+\t* @param h The merkle block height.\n+\t* @return The expected index for the aux hash.\n+\t*/\n+\tstatic int getExpectedIndex(uint32_t nNonce, int nChainId, unsigned h);\n+\n+\t/**\n+\t* Check a merkle branch.  This used to be in CBlock, but was removed\n+\t* upstream.  Thus include it here now.\n+\t*/\n+\tstatic uint256 CheckMerkleBranch(uint256 hash,\n+\t\tconst std::vector<uint256>& vMerkleBranch,\n+\t\tint nIndex);\n+\n+\t/**\n+\t* Initialise the auxpow of the given block header.  This constructs\n+\t* a minimal CAuxPow object with a minimal parent block and sets\n+\t* it on the block header.  The auxpow is not necessarily valid, but\n+\t* can be \"mined\" to make it valid.\n+\t* @param header The header to set the auxpow on.\n+\t*/\n+\tstatic void initAuxPow(CBlockHeader& header);\n \n };\n \n-#endif // SYSCOIN_AUXPOW_H\n+#endif // SYSCOIN_AUXPOW_H\n\\ No newline at end of file"
      },
      {
        "sha": "b763eae34f5ed761bc1b09df4f9607eb72e5748a",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -167,7 +167,7 @@ template<typename K, int Size, CChainParams::Base58Type Type> class CSyscoinExtK\n     CSyscoinExtKeyBase() {}\n };\n \n-typedef CSyscoinExtKeyBase<CExtKey, 74, CChainParams::EXT_SECRET_KEY> CSyscoinExtKey;\n-typedef CSyscoinExtKeyBase<CExtPubKey, 74, CChainParams::EXT_PUBLIC_KEY> CSyscoinExtPubKey;\n+typedef CSyscoinExtKeyBase<CExtKey, BIP32_EXTKEY_SIZE, CChainParams::EXT_SECRET_KEY> CSyscoinExtKey;\n+typedef CSyscoinExtKeyBase<CExtPubKey, BIP32_EXTKEY_SIZE, CChainParams::EXT_PUBLIC_KEY> CSyscoinExtPubKey;\n \n #endif // SYSCOIN_BASE58_H"
      },
      {
        "sha": "1fef87cacb8653f4f28354cbe9ef141c617fa498",
        "filename": "src/bench/Examples.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/Examples.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/Examples.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/Examples.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2015 The Bitcoin Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "390c78c31f2db8e7cdde82ee438d1d79ce82c766",
        "filename": "src/bench/base58.cpp",
        "status": "added",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -0,0 +1,56 @@\n+// Copyright (c) 2016 The Syscoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+\n+#include \"validation.h\"\n+#include \"base58.h\"\n+\n+#include <vector>\n+#include <string>\n+\n+\n+static void Base58Encode(benchmark::State& state)\n+{\n+    unsigned char buff[32] = {\n+        17, 79, 8, 99, 150, 189, 208, 162, 22, 23, 203, 163, 36, 58, 147,\n+        227, 139, 2, 215, 100, 91, 38, 11, 141, 253, 40, 117, 21, 16, 90,\n+        200, 24\n+    };\n+    unsigned char* b = buff;\n+    while (state.KeepRunning()) {\n+        EncodeBase58(b, b + 32);\n+    }\n+}\n+\n+\n+static void Base58CheckEncode(benchmark::State& state)\n+{\n+    unsigned char buff[32] = {\n+        17, 79, 8, 99, 150, 189, 208, 162, 22, 23, 203, 163, 36, 58, 147,\n+        227, 139, 2, 215, 100, 91, 38, 11, 141, 253, 40, 117, 21, 16, 90,\n+        200, 24\n+    };\n+    unsigned char* b = buff;\n+    std::vector<unsigned char> vch;\n+    vch.assign(b, b + 32);\n+    while (state.KeepRunning()) {\n+        EncodeBase58Check(vch);\n+    }\n+}\n+\n+\n+static void Base58Decode(benchmark::State& state)\n+{\n+    const char* addr = \"17VZNX1SN5NtKa8UQFxwQbFeFc3iqRYhem\";\n+    std::vector<unsigned char> vch;\n+    while (state.KeepRunning()) {\n+        DecodeBase58(addr, vch);\n+    }\n+}\n+\n+\n+BENCHMARK(Base58Encode);\n+BENCHMARK(Base58CheckEncode);\n+BENCHMARK(Base58Decode);"
      },
      {
        "sha": "a645dcf5f1d38cf7912f9dea71f9cc3500e5c870",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 26,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,62 +1,91 @@\n-// Copyright (c) 2015 The Bitcoin Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"bench.h\"\n+#include \"perf.h\"\n \n #include <iostream>\n+#include <iomanip>\n #include <sys/time.h>\n \n-using namespace benchmark;\n-\n-std::map<std::string, BenchFunction> BenchRunner::benchmarks;\n+benchmark::BenchRunner::BenchmarkMap &benchmark::BenchRunner::benchmarks() {\n+    static std::map<std::string, benchmark::BenchFunction> benchmarks_map;\n+    return benchmarks_map;\n+}\n \n static double gettimedouble(void) {\n     struct timeval tv;\n     gettimeofday(&tv, NULL);\n     return tv.tv_usec * 0.000001 + tv.tv_sec;\n }\n \n-BenchRunner::BenchRunner(std::string name, BenchFunction func)\n+benchmark::BenchRunner::BenchRunner(std::string name, benchmark::BenchFunction func)\n {\n-    benchmarks.insert(std::make_pair(name, func));\n+    benchmarks().insert(std::make_pair(name, func));\n }\n \n void\n-BenchRunner::RunAll(double elapsedTimeForOne)\n+benchmark::BenchRunner::RunAll(double elapsedTimeForOne)\n {\n-    std::cout << \"Benchmark\" << \",\" << \"count\" << \",\" << \"min\" << \",\" << \"max\" << \",\" << \"average\" << \"\\n\";\n-\n-    for (std::map<std::string,BenchFunction>::iterator it = benchmarks.begin();\n-         it != benchmarks.end(); ++it) {\n+    perf_init();\n+    std::cout << \"#Benchmark\" << \",\" << \"count\" << \",\" << \"min\" << \",\" << \"max\" << \",\" << \"average\" << \",\"\n+              << \"min_cycles\" << \",\" << \"max_cycles\" << \",\" << \"average_cycles\" << \"\\n\";\n \n-        State state(it->first, elapsedTimeForOne);\n-        BenchFunction& func = it->second;\n-        func(state);\n+    for (const auto &p: benchmarks()) {\n+        State state(p.first, elapsedTimeForOne);\n+        p.second(state);\n     }\n+    perf_fini();\n }\n \n-bool State::KeepRunning()\n+bool benchmark::State::KeepRunning()\n {\n+    if (count & countMask) {\n+      ++count;\n+      return true;\n+    }\n     double now;\n+    uint64_t nowCycles;\n     if (count == 0) {\n-        beginTime = now = gettimedouble();\n+        lastTime = beginTime = now = gettimedouble();\n+        lastCycles = beginCycles = nowCycles = perf_cpucycles();\n     }\n     else {\n-        // timeCheckCount is used to avoid calling gettime most of the time,\n-        // so benchmarks that run very quickly get consistent results.\n-        if ((count+1)%timeCheckCount != 0) {\n-            ++count;\n-            return true; // keep going\n-        }\n         now = gettimedouble();\n-        double elapsedOne = (now - lastTime)/timeCheckCount;\n+        double elapsed = now - lastTime;\n+        double elapsedOne = elapsed * countMaskInv;\n         if (elapsedOne < minTime) minTime = elapsedOne;\n         if (elapsedOne > maxTime) maxTime = elapsedOne;\n-        if (elapsedOne*timeCheckCount < maxElapsed/16) timeCheckCount *= 2;\n+\n+        // We only use relative values, so don't have to handle 64-bit wrap-around specially\n+        nowCycles = perf_cpucycles();\n+        uint64_t elapsedOneCycles = (nowCycles - lastCycles) * countMaskInv;\n+        if (elapsedOneCycles < minCycles) minCycles = elapsedOneCycles;\n+        if (elapsedOneCycles > maxCycles) maxCycles = elapsedOneCycles;\n+\n+        if (elapsed*128 < maxElapsed) {\n+          // If the execution was much too fast (1/128th of maxElapsed), increase the count mask by 8x and restart timing.\n+          // The restart avoids including the overhead of this code in the measurement.\n+          countMask = ((countMask<<3)|7) & ((1LL<<60)-1);\n+          countMaskInv = 1./(countMask+1);\n+          count = 0;\n+          minTime = std::numeric_limits<double>::max();\n+          maxTime = std::numeric_limits<double>::min();\n+          minCycles = std::numeric_limits<uint64_t>::max();\n+          maxCycles = std::numeric_limits<uint64_t>::min();\n+          return true;\n+        }\n+        if (elapsed*16 < maxElapsed) {\n+          uint64_t newCountMask = ((countMask<<1)|1) & ((1LL<<60)-1);\n+          if ((count & newCountMask)==0) {\n+              countMask = newCountMask;\n+              countMaskInv = 1./(countMask+1);\n+          }\n+        }\n     }\n     lastTime = now;\n+    lastCycles = nowCycles;\n     ++count;\n \n     if (now - beginTime < maxElapsed) return true; // Keep going\n@@ -65,7 +94,9 @@ bool State::KeepRunning()\n \n     // Output results\n     double average = (now-beginTime)/count;\n-    std::cout << name << \",\" << count << \",\" << minTime << \",\" << maxTime << \",\" << average << \"\\n\";\n+    int64_t averageCycles = (nowCycles-beginCycles)/count;\n+    std::cout << std::fixed << std::setprecision(15) << name << \",\" << count << \",\" << minTime << \",\" << maxTime << \",\" << average << \",\"\n+              << minCycles << \",\" << maxCycles << \",\" << averageCycles << \"\\n\";\n \n     return false;\n }"
      },
      {
        "sha": "2a3ddfd2d7695609976988644910c70f465bdf26",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 14,
        "deletions": 7,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2015 The Bitcoin Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -41,14 +40,21 @@ namespace benchmark {\n         std::string name;\n         double maxElapsed;\n         double beginTime;\n-        double lastTime, minTime, maxTime;\n-        int64_t count;\n-        int64_t timeCheckCount;\n+        double lastTime, minTime, maxTime, countMaskInv;\n+        uint64_t count;\n+        uint64_t countMask;\n+        uint64_t beginCycles;\n+        uint64_t lastCycles;\n+        uint64_t minCycles;\n+        uint64_t maxCycles;\n     public:\n         State(std::string _name, double _maxElapsed) : name(_name), maxElapsed(_maxElapsed), count(0) {\n             minTime = std::numeric_limits<double>::max();\n             maxTime = std::numeric_limits<double>::min();\n-            timeCheckCount = 1;\n+            minCycles = std::numeric_limits<uint64_t>::max();\n+            maxCycles = std::numeric_limits<uint64_t>::min();\n+            countMask = 1;\n+            countMaskInv = 1./(countMask + 1);\n         }\n         bool KeepRunning();\n     };\n@@ -57,7 +63,8 @@ namespace benchmark {\n \n     class BenchRunner\n     {\n-        static std::map<std::string, BenchFunction> benchmarks;\n+        typedef std::map<std::string, BenchFunction> BenchmarkMap;\n+        static BenchmarkMap &benchmarks();\n \n     public:\n         BenchRunner(std::string name, BenchFunction func);"
      },
      {
        "sha": "1f5e61fb4b03d163f7ac750f4f11175b94953f20",
        "filename": "src/bench/bench_syscoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/bench_syscoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/bench_syscoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_syscoin.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015 The Bitcoin Core developers\n+// Copyright (c) 2015 The Syscoin Core developers\n // Copyright (c) 2015-2017 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php."
      },
      {
        "sha": "58bb61841bcb35fe3d31a7a2ca060d02c0dd2800",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "added",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -0,0 +1,87 @@\n+// Copyright (c) 2016 The Syscoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"coins.h\"\n+#include \"policy/policy.h\"\n+#include \"wallet/crypter.h\"\n+\n+#include <vector>\n+\n+// FIXME: Dedup with SetupDummyInputs in test/transaction_tests.cpp.\n+//\n+// Helper: create two dummy transactions, each with\n+// two outputs.  The first has 11 and 50 CENT outputs\n+// paid to a TX_PUBKEY, the second 21 and 22 CENT outputs\n+// paid to a TX_PUBKEYHASH.\n+//\n+static std::vector<CMutableTransaction>\n+SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n+{\n+    std::vector<CMutableTransaction> dummyTransactions;\n+    dummyTransactions.resize(2);\n+\n+    // Add some keys to the keystore:\n+    CKey key[4];\n+    for (int i = 0; i < 4; i++) {\n+        key[i].MakeNewKey(i % 2);\n+        keystoreRet.AddKey(key[i]);\n+    }\n+\n+    // Create some dummy input transactions\n+    dummyTransactions[0].vout.resize(2);\n+    dummyTransactions[0].vout[0].nValue = 11 * CENT;\n+    dummyTransactions[0].vout[0].scriptPubKey << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n+    dummyTransactions[0].vout[1].nValue = 50 * CENT;\n+    dummyTransactions[0].vout[1].scriptPubKey << ToByteVector(key[1].GetPubKey()) << OP_CHECKSIG;\n+    AddCoins(coinsRet, dummyTransactions[0], 0);\n+\n+    dummyTransactions[1].vout.resize(2);\n+    dummyTransactions[1].vout[0].nValue = 21 * CENT;\n+    dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n+    dummyTransactions[1].vout[1].nValue = 22 * CENT;\n+    dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n+    AddCoins(coinsRet, dummyTransactions[1], 0);\n+\n+    return dummyTransactions;\n+}\n+\n+// Microbenchmark for simple accesses to a CCoinsViewCache database. Note from\n+// laanwj, \"replicating the actual usage patterns of the client is hard though,\n+// many times micro-benchmarks of the database showed completely different\n+// characteristics than e.g. reindex timings. But that's not a requirement of\n+// every benchmark.\"\n+// (https://github.com/syscoin/syscoin/issues/7883#issuecomment-224807484)\n+static void CCoinsCaching(benchmark::State& state)\n+{\n+    CBasicKeyStore keystore;\n+    CCoinsView coinsDummy;\n+    CCoinsViewCache coins(&coinsDummy);\n+    std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n+\n+    CMutableTransaction t1;\n+    t1.vin.resize(3);\n+    t1.vin[0].prevout.hash = dummyTransactions[0].GetHash();\n+    t1.vin[0].prevout.n = 1;\n+    t1.vin[0].scriptSig << std::vector<unsigned char>(65, 0);\n+    t1.vin[1].prevout.hash = dummyTransactions[1].GetHash();\n+    t1.vin[1].prevout.n = 0;\n+    t1.vin[1].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4);\n+    t1.vin[2].prevout.hash = dummyTransactions[1].GetHash();\n+    t1.vin[2].prevout.n = 1;\n+    t1.vin[2].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4);\n+    t1.vout.resize(2);\n+    t1.vout[0].nValue = 90 * CENT;\n+    t1.vout[0].scriptPubKey << OP_1;\n+\n+    // Benchmark.\n+    while (state.KeepRunning()) {\n+        bool success = AreInputsStandard(t1, coins);\n+        assert(success);\n+        CAmount value = coins.GetValueIn(t1);\n+        assert(value == (50 + 21 + 22) * CENT);\n+    }\n+}\n+\n+BENCHMARK(CCoinsCaching);"
      },
      {
        "sha": "406a0f629f93fb11d5b59956ec2de69d44c03302",
        "filename": "src/bench/checkblock.cpp",
        "status": "added",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/checkblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/checkblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkblock.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -0,0 +1,54 @@\n+// Copyright (c) 2016 The Syscoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+\n+#include \"chainparams.h\"\n+#include \"validation.h\"\n+#include \"streams.h\"\n+#include \"consensus/validation.h\"\n+\n+#include \"bench/data/block813851.raw.h\"\n+\n+// These are the two major time-sinks which happen after we have fully received\n+// a block off the wire, but before we can relay the block on to peers using\n+// compact block relay.\n+\n+static void DeserializeBlockTest(benchmark::State& state)\n+{\n+    CDataStream stream((const char*)raw_bench::block813851,\n+            (const char*)&raw_bench::block813851[sizeof(raw_bench::block813851)],\n+            SER_NETWORK, PROTOCOL_VERSION);\n+    char a;\n+    stream.write(&a, 1); // Prevent compaction\n+\n+    while (state.KeepRunning()) {\n+        CBlock block;\n+        stream >> block;\n+        assert(stream.Rewind(sizeof(raw_bench::block813851)));\n+    }\n+}\n+\n+static void DeserializeAndCheckBlockTest(benchmark::State& state)\n+{\n+    CDataStream stream((const char*)raw_bench::block813851,\n+            (const char*)&raw_bench::block813851[sizeof(raw_bench::block813851)],\n+            SER_NETWORK, PROTOCOL_VERSION);\n+    char a;\n+    stream.write(&a, 1); // Prevent compaction\n+\n+    Consensus::Params params = Params(CBaseChainParams::MAIN).GetConsensus();\n+\n+    while (state.KeepRunning()) {\n+        CBlock block; // Note that CBlock caches its checked state, so we need to recreate it here\n+        stream >> block;\n+        assert(stream.Rewind(sizeof(raw_bench::block813851)));\n+\n+        CValidationState validationState;\n+        assert(CheckBlock(block, validationState, params, block.GetBlockTime()));\n+    }\n+}\n+\n+BENCHMARK(DeserializeBlockTest);\n+BENCHMARK(DeserializeAndCheckBlockTest);"
      },
      {
        "sha": "b396a6435ea29f36b86304d257b0ac7c792b01b5",
        "filename": "src/bench/checkqueue.cpp",
        "status": "added",
        "additions": 103,
        "deletions": 0,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -0,0 +1,103 @@\n+// Copyright (c) 2015 The Syscoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"util.h\"\n+#include \"validation.h\"\n+#include \"checkqueue.h\"\n+#include \"prevector.h\"\n+#include <vector>\n+#include <boost/thread/thread.hpp>\n+#include \"random.h\"\n+\n+\n+// This Benchmark tests the CheckQueue with the lightest\n+// weight Checks, so it should make any lock contention\n+// particularly visible\n+static const int MIN_CORES = 2;\n+static const size_t BATCHES = 101;\n+static const size_t BATCH_SIZE = 30;\n+static const int PREVECTOR_SIZE = 28;\n+static const int QUEUE_BATCH_SIZE = 128;\n+static void CCheckQueueSpeed(benchmark::State& state)\n+{\n+    struct FakeJobNoWork {\n+        bool operator()()\n+        {\n+            return true;\n+        }\n+        void swap(FakeJobNoWork& x){};\n+    };\n+    CCheckQueue<FakeJobNoWork> queue {QUEUE_BATCH_SIZE};\n+    boost::thread_group tg;\n+    for (auto x = 0; x < std::max(MIN_CORES, GetNumCores()); ++x) {\n+       tg.create_thread([&]{queue.Thread();});\n+    }\n+    while (state.KeepRunning()) {\n+        CCheckQueueControl<FakeJobNoWork> control(&queue);\n+\n+        // We call Add a number of times to simulate the behavior of adding\n+        // a block of transactions at once.\n+\n+        std::vector<std::vector<FakeJobNoWork>> vBatches(BATCHES);\n+        for (auto& vChecks : vBatches) {\n+            vChecks.resize(BATCH_SIZE);\n+        }\n+        for (auto& vChecks : vBatches) {\n+            // We can't make vChecks in the inner loop because we want to measure\n+            // the cost of getting the memory to each thread and we might get the same\n+            // memory\n+            control.Add(vChecks);\n+        }\n+        // control waits for completion by RAII, but\n+        // it is done explicitly here for clarity\n+        control.Wait();\n+    }\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+\n+// This Benchmark tests the CheckQueue with a slightly realistic workload,\n+// where checks all contain a prevector that is indirect 50% of the time\n+// and there is a little bit of work done between calls to Add.\n+static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n+{\n+    struct PrevectorJob {\n+        prevector<PREVECTOR_SIZE, uint8_t> p;\n+        PrevectorJob(){\n+        }\n+        PrevectorJob(FastRandomContext& insecure_rand){\n+            p.resize(insecure_rand.rand32() % (PREVECTOR_SIZE*2));\n+        }\n+        bool operator()()\n+        {\n+            return true;\n+        }\n+        void swap(PrevectorJob& x){p.swap(x.p);};\n+    };\n+    CCheckQueue<PrevectorJob> queue {QUEUE_BATCH_SIZE};\n+    boost::thread_group tg;\n+    for (auto x = 0; x < std::max(MIN_CORES, GetNumCores()); ++x) {\n+       tg.create_thread([&]{queue.Thread();});\n+    }\n+    while (state.KeepRunning()) {\n+        // Make insecure_rand here so that each iteration is identical.\n+        FastRandomContext insecure_rand(true);\n+        CCheckQueueControl<PrevectorJob> control(&queue);\n+        std::vector<std::vector<PrevectorJob>> vBatches(BATCHES);\n+        for (auto& vChecks : vBatches) {\n+            vChecks.reserve(BATCH_SIZE);\n+            for (size_t x = 0; x < BATCH_SIZE; ++x)\n+                vChecks.emplace_back(insecure_rand);\n+            control.Add(vChecks);\n+        }\n+        // control waits for completion by RAII, but\n+        // it is done explicitly here for clarity\n+        control.Wait();\n+    }\n+    tg.interrupt_all();\n+    tg.join_all();\n+}\n+BENCHMARK(CCheckQueueSpeed);\n+BENCHMARK(CCheckQueueSpeedPrevectorJob);"
      },
      {
        "sha": "2830fb6c54f5ce8cd99a080e64b2400b9ca00350",
        "filename": "src/bench/coin_selection.cpp",
        "status": "added",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -0,0 +1,60 @@\n+// Copyright (c) 2012-2015 The Syscoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"wallet/wallet.h\"\n+\n+#include <boost/foreach.hpp>\n+#include <set>\n+\n+static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<COutput>& vCoins)\n+{\n+    int nInput = 0;\n+\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++; // so all transactions get different hashes\n+    tx.vout.resize(nInput + 1);\n+    tx.vout[nInput].nValue = nValue;\n+    CWalletTx* wtx = new CWalletTx(&wallet, MakeTransactionRef(std::move(tx)));\n+\n+    int nAge = 6 * 24;\n+    COutput output(wtx, nInput, nAge, true, true);\n+    vCoins.push_back(output);\n+}\n+\n+// Simple benchmark for wallet coin selection. Note that it maybe be necessary\n+// to build up more complicated scenarios in order to get meaningful\n+// measurements of performance. From laanwj, \"Wallet coin selection is probably\n+// the hardest, as you need a wider selection of scenarios, just testing the\n+// same one over and over isn't too useful. Generating random isn't useful\n+// either for measurements.\"\n+// (https://github.com/syscoin/syscoin/issues/7883#issuecomment-224807484)\n+static void CoinSelection(benchmark::State& state)\n+{\n+    const CWallet wallet;\n+    std::vector<COutput> vCoins;\n+    LOCK(wallet.cs_wallet);\n+\n+    while (state.KeepRunning()) {\n+        // Empty wallet.\n+        BOOST_FOREACH (COutput output, vCoins)\n+            delete output.tx;\n+        vCoins.clear();\n+\n+        // Add coins.\n+        for (int i = 0; i < 1000; i++)\n+            addCoin(1000 * COIN, wallet, vCoins);\n+        addCoin(3 * COIN, wallet, vCoins);\n+\n+        std::set<std::pair<const CWalletTx*, unsigned int> > setCoinsRet;\n+        CAmount nValueRet;\n+        bool success = wallet.SelectCoinsMinConf(1003 * COIN, 1, 6, 0, vCoins, setCoinsRet, nValueRet);\n+        assert(success);\n+        assert(nValueRet == 1003 * COIN);\n+        assert(setCoinsRet.size() == 2);\n+    }\n+}\n+\n+BENCHMARK(CoinSelection);"
      },
      {
        "sha": "1a7f4c00b3763a9866e492a110a3b07e177ae583",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "added",
        "additions": 150,
        "deletions": 0,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -0,0 +1,150 @@\n+// Copyright (c) 2016 The Syscoin Core developers\n+// Copyright (c) 2018 The Syscoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iostream>\n+\n+#include \"bench.h\"\n+#include \"bloom.h\"\n+#include \"hash.h\"\n+#include \"uint256.h\"\n+#include \"utiltime.h\"\n+#include \"crypto/ripemd160.h\"\n+#include \"crypto/sha1.h\"\n+#include \"crypto/sha256.h\"\n+#include \"crypto/sha512.h\"\n+\n+/* Number of bytes to hash per iteration */\n+static const uint64_t BUFFER_SIZE = 1000*1000;\n+\n+static void HASH_RIPEMD160(benchmark::State& state)\n+{\n+    uint8_t hash[CRIPEMD160::OUTPUT_SIZE];\n+    std::vector<uint8_t> in(BUFFER_SIZE,0);\n+    while (state.KeepRunning())\n+        CRIPEMD160().Write(in.data(), in.size()).Finalize(hash);\n+}\n+\n+static void HASH_SHA1(benchmark::State& state)\n+{\n+    uint8_t hash[CSHA1::OUTPUT_SIZE];\n+    std::vector<uint8_t> in(BUFFER_SIZE,0);\n+    while (state.KeepRunning())\n+        CSHA1().Write(in.data(), in.size()).Finalize(hash);\n+}\n+\n+static void HASH_SHA256(benchmark::State& state)\n+{\n+    uint8_t hash[CSHA256::OUTPUT_SIZE];\n+    std::vector<uint8_t> in(BUFFER_SIZE,0);\n+    while (state.KeepRunning())\n+        CSHA256().Write(in.data(), in.size()).Finalize(hash);\n+}\n+\n+static void HASH_SHA256_0032b(benchmark::State& state)\n+{\n+    std::vector<uint8_t> in(32,0);\n+    while (state.KeepRunning()) {\n+        for (int i = 0; i < 1000000; i++) {\n+            CSHA256().Write(in.data(), in.size()).Finalize(&in[0]);\n+        }\n+    }\n+}\n+\n+static void HASH_DSHA256(benchmark::State& state)\n+{\n+    uint8_t hash[CSHA256::OUTPUT_SIZE];\n+    std::vector<uint8_t> in(BUFFER_SIZE,0);\n+    while (state.KeepRunning())\n+        CHash256().Write(in.data(), in.size()).Finalize(hash);\n+}\n+\n+static void HASH_DSHA256_0032b(benchmark::State& state)\n+{\n+    std::vector<uint8_t> in(32,0);\n+    while (state.KeepRunning()) {\n+        for (int i = 0; i < 1000000; i++) {\n+            CHash256().Write(in.data(), in.size()).Finalize(&in[0]);\n+        }\n+    }\n+}\n+\n+static void HASH_SHA512(benchmark::State& state)\n+{\n+    uint8_t hash[CSHA512::OUTPUT_SIZE];\n+    std::vector<uint8_t> in(BUFFER_SIZE,0);\n+    while (state.KeepRunning())\n+        CSHA512().Write(in.data(), in.size()).Finalize(hash);\n+}\n+\n+static void HASH_SipHash_0032b(benchmark::State& state)\n+{\n+    uint256 x;\n+    while (state.KeepRunning()) {\n+        for (int i = 0; i < 1000000; i++) {\n+            *((uint64_t*)x.begin()) = SipHashUint256(0, i, x);\n+        }\n+    }\n+}\n+\n+static void HASH_DSHA256_0032b_single(benchmark::State& state)\n+{\n+    std::vector<uint8_t> in(32,0);\n+    while (state.KeepRunning())\n+        CHash256().Write(in.data(), in.size()).Finalize(&in[0]);\n+}\n+\n+static void HASH_DSHA256_0080b_single(benchmark::State& state)\n+{\n+    std::vector<uint8_t> in(80,0);\n+    while (state.KeepRunning())\n+        CHash256().Write(in.data(), in.size()).Finalize(&in[0]);\n+}\n+\n+static void HASH_DSHA256_0128b_single(benchmark::State& state)\n+{\n+    std::vector<uint8_t> in(128,0);\n+    while (state.KeepRunning())\n+        CHash256().Write(in.data(), in.size()).Finalize(&in[0]);\n+}\n+\n+static void HASH_DSHA256_0512b_single(benchmark::State& state)\n+{\n+    std::vector<uint8_t> in(512,0);\n+    while (state.KeepRunning())\n+        CHash256().Write(in.data(), in.size()).Finalize(&in[0]);\n+}\n+\n+static void HASH_DSHA256_1024b_single(benchmark::State& state)\n+{\n+    std::vector<uint8_t> in(1024,0);\n+    while (state.KeepRunning())\n+        CHash256().Write(in.data(), in.size()).Finalize(&in[0]);\n+}\n+\n+static void HASH_DSHA256_2048b_single(benchmark::State& state)\n+{\n+    std::vector<uint8_t> in(2048,0);\n+    while (state.KeepRunning())\n+        CHash256().Write(in.data(), in.size()).Finalize(&in[0]);\n+}\n+\n+BENCHMARK(HASH_RIPEMD160);\n+BENCHMARK(HASH_SHA1);\n+BENCHMARK(HASH_SHA256);\n+BENCHMARK(HASH_DSHA256);\n+BENCHMARK(HASH_SHA512);\n+\n+\n+BENCHMARK(HASH_SHA256_0032b);\n+BENCHMARK(HASH_DSHA256_0032b);\n+BENCHMARK(HASH_SipHash_0032b);\n+\n+BENCHMARK(HASH_DSHA256_0032b_single);\n+BENCHMARK(HASH_DSHA256_0080b_single);\n+BENCHMARK(HASH_DSHA256_0128b_single);\n+BENCHMARK(HASH_DSHA256_0512b_single);\n+BENCHMARK(HASH_DSHA256_1024b_single);\n+BENCHMARK(HASH_DSHA256_2048b_single);\n+"
      },
      {
        "sha": "0763224c80826fb9a683cd4993a27535df69418c",
        "filename": "src/bench/data/block813851.raw",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/data/block813851.raw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/data/block813851.raw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/data/block813851.raw?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "d2a74a55fd9fce13de5843713c7d051fccd470f7",
        "filename": "src/bench/lockedpool.cpp",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/lockedpool.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2016 The Syscoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+\n+#include \"support/lockedpool.h\"\n+\n+#include <iostream>\n+#include <vector>\n+\n+#define ASIZE 2048\n+#define BITER 5000\n+#define MSIZE 2048\n+\n+static void LockedPool(benchmark::State& state)\n+{\n+    void *synth_base = reinterpret_cast<void*>(0x08000000);\n+    const size_t synth_size = 1024*1024;\n+    Arena b(synth_base, synth_size, 16);\n+\n+    std::vector<void*> addr;\n+    for (int x=0; x<ASIZE; ++x)\n+        addr.push_back(0);\n+    uint32_t s = 0x12345678;\n+    while (state.KeepRunning()) {\n+        for (int x=0; x<BITER; ++x) {\n+            int idx = s & (addr.size()-1);\n+            if (s & 0x80000000) {\n+                b.free(addr[idx]);\n+                addr[idx] = 0;\n+            } else if(!addr[idx]) {\n+                addr[idx] = b.alloc((s >> 16) & (MSIZE-1));\n+            }\n+            bool lsb = s & 1;\n+            s >>= 1;\n+            if (lsb)\n+                s ^= 0xf00f00f0; // LFSR period 0xf7ffffe0\n+        }\n+    }\n+    for (void *ptr: addr)\n+        b.free(ptr);\n+    addr.clear();\n+}\n+\n+BENCHMARK(LockedPool);\n+"
      },
      {
        "sha": "74a9c071f2fbcd841990a4fce28125ecf4bf8905",
        "filename": "src/bench/mempool_eviction.cpp",
        "status": "added",
        "additions": 115,
        "deletions": 0,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/mempool_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/mempool_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_eviction.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -0,0 +1,115 @@\n+// Copyright (c) 2011-2015 The Syscoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"policy/policy.h\"\n+#include \"txmempool.h\"\n+\n+#include <list>\n+#include <vector>\n+\n+static void AddTx(const CTransaction& tx, const CAmount& nFee, CTxMemPool& pool)\n+{\n+    int64_t nTime = 0;\n+    double dPriority = 10.0;\n+    unsigned int nHeight = 1;\n+    bool spendsCoinbase = false;\n+    unsigned int sigOpCost = 4;\n+    LockPoints lp;\n+    pool.addUnchecked(tx.GetHash(), CTxMemPoolEntry(\n+                                        MakeTransactionRef(tx), nFee, nTime, dPriority, nHeight,\n+                                        tx.GetValueOut(), spendsCoinbase, sigOpCost, lp));\n+}\n+\n+// Right now this is only testing eviction performance in an extremely small\n+// mempool. Code needs to be written to generate a much wider variety of\n+// unique transactions for a more meaningful performance measurement.\n+static void MempoolEviction(benchmark::State& state)\n+{\n+    CMutableTransaction tx1 = CMutableTransaction();\n+    tx1.vin.resize(1);\n+    tx1.vin[0].scriptSig = CScript() << OP_1;\n+    tx1.vout.resize(1);\n+    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n+    tx1.vout[0].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx2 = CMutableTransaction();\n+    tx2.vin.resize(1);\n+    tx2.vin[0].scriptSig = CScript() << OP_2;\n+    tx2.vout.resize(1);\n+    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n+    tx2.vout[0].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx3 = CMutableTransaction();\n+    tx3.vin.resize(1);\n+    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n+    tx3.vin[0].scriptSig = CScript() << OP_2;\n+    tx3.vout.resize(1);\n+    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n+    tx3.vout[0].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx4 = CMutableTransaction();\n+    tx4.vin.resize(2);\n+    tx4.vin[0].prevout.SetNull();\n+    tx4.vin[0].scriptSig = CScript() << OP_4;\n+    tx4.vin[1].prevout.SetNull();\n+    tx4.vin[1].scriptSig = CScript() << OP_4;\n+    tx4.vout.resize(2);\n+    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n+    tx4.vout[0].nValue = 10 * COIN;\n+    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n+    tx4.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx5 = CMutableTransaction();\n+    tx5.vin.resize(2);\n+    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n+    tx5.vin[0].scriptSig = CScript() << OP_4;\n+    tx5.vin[1].prevout.SetNull();\n+    tx5.vin[1].scriptSig = CScript() << OP_5;\n+    tx5.vout.resize(2);\n+    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n+    tx5.vout[0].nValue = 10 * COIN;\n+    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n+    tx5.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx6 = CMutableTransaction();\n+    tx6.vin.resize(2);\n+    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n+    tx6.vin[0].scriptSig = CScript() << OP_4;\n+    tx6.vin[1].prevout.SetNull();\n+    tx6.vin[1].scriptSig = CScript() << OP_6;\n+    tx6.vout.resize(2);\n+    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n+    tx6.vout[0].nValue = 10 * COIN;\n+    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n+    tx6.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx7 = CMutableTransaction();\n+    tx7.vin.resize(2);\n+    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n+    tx7.vin[0].scriptSig = CScript() << OP_5;\n+    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n+    tx7.vin[1].scriptSig = CScript() << OP_6;\n+    tx7.vout.resize(2);\n+    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n+    tx7.vout[0].nValue = 10 * COIN;\n+    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n+    tx7.vout[1].nValue = 10 * COIN;\n+\n+    CTxMemPool pool(CFeeRate(1000));\n+\n+    while (state.KeepRunning()) {\n+        AddTx(tx1, 10000LL, pool);\n+        AddTx(tx2, 5000LL, pool);\n+        AddTx(tx3, 20000LL, pool);\n+        AddTx(tx4, 7000LL, pool);\n+        AddTx(tx5, 1000LL, pool);\n+        AddTx(tx6, 1100LL, pool);\n+        AddTx(tx7, 9000LL, pool);\n+        pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4);\n+        pool.TrimToSize(::GetSerializeSize(tx1, SER_NETWORK, PROTOCOL_VERSION));\n+    }\n+}\n+\n+BENCHMARK(MempoolEviction);"
      },
      {
        "sha": "c0424aa1e4a11f3ae782af6694dba60f4a1af848",
        "filename": "src/bench/perf.cpp",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/perf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/perf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/perf.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2016 The Syscoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"perf.h\"\n+\n+#if defined(__i386__) || defined(__x86_64__)\n+\n+/* These architectures support querying the cycle counter\n+ * from user space, no need for any syscall overhead.\n+ */\n+void perf_init(void) { }\n+void perf_fini(void) { }\n+\n+#elif defined(__linux__)\n+\n+#include <unistd.h>\n+#include <sys/syscall.h>\n+#include <linux/perf_event.h>\n+\n+static int fd = -1;\n+static struct perf_event_attr attr;\n+\n+void perf_init(void)\n+{\n+    attr.type = PERF_TYPE_HARDWARE;\n+    attr.config = PERF_COUNT_HW_CPU_CYCLES;\n+    fd = syscall(__NR_perf_event_open, &attr, 0, -1, -1, 0);\n+}\n+\n+void perf_fini(void)\n+{\n+    if (fd != -1) {\n+        close(fd);\n+    }\n+}\n+\n+uint64_t perf_cpucycles(void)\n+{\n+    uint64_t result = 0;\n+    if (fd == -1 || read(fd, &result, sizeof(result)) < (ssize_t)sizeof(result)) {\n+        return 0;\n+    }\n+    return result;\n+}\n+\n+#else /* Unhandled platform */\n+\n+void perf_init(void) { }\n+void perf_fini(void) { }\n+uint64_t perf_cpucycles(void) { return 0; }\n+\n+#endif"
      },
      {
        "sha": "166121bade2160df4ae178dc9f6ceee0d871c52e",
        "filename": "src/bench/perf.h",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/perf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/perf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/perf.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -0,0 +1,37 @@\n+// Copyright (c) 2016 The Syscoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+/** Functions for measurement of CPU cycles */\n+#ifndef H_PERF\n+#define H_PERF\n+\n+#include <stdint.h>\n+\n+#if defined(__i386__)\n+\n+static inline uint64_t perf_cpucycles(void)\n+{\n+    uint64_t x;\n+    __asm__ volatile (\".byte 0x0f, 0x31\" : \"=A\" (x));\n+    return x;\n+}\n+\n+#elif defined(__x86_64__)\n+\n+static inline uint64_t perf_cpucycles(void)\n+{\n+    uint32_t hi, lo;\n+    __asm__ __volatile__ (\"rdtsc\" : \"=a\"(lo), \"=d\"(hi));\n+    return ((uint64_t)lo)|(((uint64_t)hi)<<32);\n+}\n+#else\n+\n+uint64_t perf_cpucycles(void);\n+\n+#endif\n+\n+void perf_init(void);\n+void perf_fini(void);\n+\n+#endif // H_PERF"
      },
      {
        "sha": "177e28fad2b990d2950b0f863578ef24c75d396d",
        "filename": "src/bench/rollingbloom.cpp",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/rollingbloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/bench/rollingbloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rollingbloom.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2016 The Syscoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iostream>\n+\n+#include \"bench.h\"\n+#include \"bloom.h\"\n+#include \"utiltime.h\"\n+\n+static void RollingBloom(benchmark::State& state)\n+{\n+    CRollingBloomFilter filter(120000, 0.000001);\n+    std::vector<unsigned char> data(32);\n+    uint32_t count = 0;\n+    uint32_t nEntriesPerGeneration = (120000 + 1) / 2;\n+    uint32_t countnow = 0;\n+    uint64_t match = 0;\n+    while (state.KeepRunning()) {\n+        count++;\n+        data[0] = count;\n+        data[1] = count >> 8;\n+        data[2] = count >> 16;\n+        data[3] = count >> 24;\n+        if (countnow == nEntriesPerGeneration) {\n+            int64_t b = GetTimeMicros();\n+            filter.insert(data);\n+            int64_t e = GetTimeMicros();\n+            std::cout << \"RollingBloom-refresh,1,\" << (e-b)*0.000001 << \",\" << (e-b)*0.000001 << \",\" << (e-b)*0.000001 << \"\\n\";\n+            countnow = 0;\n+        } else {\n+            filter.insert(data);\n+        }\n+        countnow++;\n+        data[0] = count >> 24;\n+        data[1] = count >> 16;\n+        data[2] = count >> 8;\n+        data[3] = count;\n+        match += filter.contains(data);\n+    }\n+}\n+\n+BENCHMARK(RollingBloom);"
      },
      {
        "sha": "7a8f5fb346b63cb54cdf4dcbd52a5ae7061100be",
        "filename": "src/bip39.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/bip39.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/bip39.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bip39.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -37,7 +37,7 @@ SecureString CMnemonic::Generate(int strength)\n         return SecureString();\n     }\n     SecureVector data(32);\n-    GetRandBytes(&data[0], 32);\n+    GetStrongRandBytes(&data[0], 32);\n     SecureString mnemonic = FromData(data, strength / 8);\n     return mnemonic;\n }"
      },
      {
        "sha": "8a6cdf02483ffd3c3d48991fbf2ae640e0f4d2f1",
        "filename": "src/blockencodings.cpp",
        "status": "added",
        "additions": 219,
        "deletions": 0,
        "changes": 219,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -0,0 +1,219 @@\n+// Copyright (c) 2016 The Syscoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"blockencodings.h\"\n+#include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n+#include \"chainparams.h\"\n+#include \"hash.h\"\n+#include \"random.h\"\n+#include \"streams.h\"\n+#include \"txmempool.h\"\n+#include \"validation.h\"\n+#include \"util.h\"\n+\n+#include <unordered_map>\n+\n+#define MIN_TRANSACTION_SIZE (::GetSerializeSize(CTransaction(), SER_NETWORK, PROTOCOL_VERSION))\n+\n+CBlockHeaderAndShortTxIDs::CBlockHeaderAndShortTxIDs(const CBlock& block) :\n+        nonce(GetRand(std::numeric_limits<uint64_t>::max())),\n+        shorttxids(block.vtx.size() - 1), prefilledtxn(1), header(block) {\n+    FillShortTxIDSelector();\n+    //TODO: Use our mempool prior to block acceptance to predictively fill more than just the coinbase\n+    prefilledtxn[0] = {0, block.vtx[0]};\n+    for (size_t i = 1; i < block.vtx.size(); i++) {\n+        const CTransaction& tx = *block.vtx[i];\n+        shorttxids[i - 1] = GetShortID(tx.GetHash());\n+    }\n+}\n+\n+void CBlockHeaderAndShortTxIDs::FillShortTxIDSelector() const {\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << header << nonce;\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*stream.begin()), stream.end() - stream.begin());\n+    uint256 shorttxidhash;\n+    hasher.Finalize(shorttxidhash.begin());\n+    shorttxidk0 = shorttxidhash.GetUint64(0);\n+    shorttxidk1 = shorttxidhash.GetUint64(1);\n+}\n+\n+uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {\n+    static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids calculation assumes 6-byte shorttxids\");\n+    return SipHashUint256(shorttxidk0, shorttxidk1, txhash) & 0xffffffffffffL;\n+}\n+\n+\n+\n+ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn) {\n+    if (cmpctblock.header.IsNull() || (cmpctblock.shorttxids.empty() && cmpctblock.prefilledtxn.empty()))\n+        return READ_STATUS_INVALID;\n+    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MaxBlockSize(true) / MIN_TRANSACTION_SIZE)\n+        return READ_STATUS_INVALID;\n+\n+    assert(header.IsNull() && txn_available.empty());\n+    header = cmpctblock.header;\n+    txn_available.resize(cmpctblock.BlockTxCount());\n+\n+    int32_t lastprefilledindex = -1;\n+    for (size_t i = 0; i < cmpctblock.prefilledtxn.size(); i++) {\n+        if (cmpctblock.prefilledtxn[i].tx->IsNull())\n+            return READ_STATUS_INVALID;\n+\n+        lastprefilledindex += cmpctblock.prefilledtxn[i].index + 1; //index is a uint16_t, so can't overflow here\n+        if (lastprefilledindex > std::numeric_limits<uint16_t>::max())\n+            return READ_STATUS_INVALID;\n+        if ((uint32_t)lastprefilledindex > cmpctblock.shorttxids.size() + i) {\n+            // If we are inserting a tx at an index greater than our full list of shorttxids\n+            // plus the number of prefilled txn we've inserted, then we have txn for which we\n+            // have neither a prefilled txn or a shorttxid!\n+            return READ_STATUS_INVALID;\n+        }\n+        txn_available[lastprefilledindex] = cmpctblock.prefilledtxn[i].tx;\n+    }\n+    prefilled_count = cmpctblock.prefilledtxn.size();\n+\n+    // Calculate map of txids -> positions and check mempool to see what we have (or don't)\n+    // Because well-formed cmpctblock messages will have a (relatively) uniform distribution\n+    // of short IDs, any highly-uneven distribution of elements can be safely treated as a\n+    // READ_STATUS_FAILED.\n+    std::unordered_map<uint64_t, uint16_t> shorttxids(cmpctblock.shorttxids.size());\n+    uint16_t index_offset = 0;\n+    for (size_t i = 0; i < cmpctblock.shorttxids.size(); i++) {\n+        while (txn_available[i + index_offset])\n+            index_offset++;\n+        shorttxids[cmpctblock.shorttxids[i]] = i + index_offset;\n+        // To determine the chance that the number of entries in a bucket exceeds N,\n+        // we use the fact that the number of elements in a single bucket is\n+        // binomially distributed (with n = the number of shorttxids S, and p =\n+        // 1 / the number of buckets), that in the worst case the number of buckets is\n+        // equal to S (due to std::unordered_map having a default load factor of 1.0),\n+        // and that the chance for any bucket to exceed N elements is at most\n+        // buckets * (the chance that any given bucket is above N elements).\n+        // Thus: P(max_elements_per_bucket > N) <= S * (1 - cdf(binomial(n=S,p=1/S), N)).\n+        // If we assume blocks of up to 16000, allowing 12 elements per bucket should\n+        // only fail once per ~1 million block transfers (per peer and connection).\n+        if (shorttxids.bucket_size(shorttxids.bucket(cmpctblock.shorttxids[i])) > 12)\n+            return READ_STATUS_FAILED;\n+    }\n+    // TODO: in the shortid-collision case, we should instead request both transactions\n+    // which collided. Falling back to full-block-request here is overkill.\n+    if (shorttxids.size() != cmpctblock.shorttxids.size())\n+        return READ_STATUS_FAILED; // Short ID collision\n+\n+    std::vector<bool> have_txn(txn_available.size());\n+    {\n+    LOCK(pool->cs);\n+    const std::vector<std::pair<uint256, CTxMemPool::txiter> >& vTxHashes = pool->vTxHashes;\n+    for (size_t i = 0; i < vTxHashes.size(); i++) {\n+        uint64_t shortid = cmpctblock.GetShortID(vTxHashes[i].first);\n+        std::unordered_map<uint64_t, uint16_t>::iterator idit = shorttxids.find(shortid);\n+        if (idit != shorttxids.end()) {\n+            if (!have_txn[idit->second]) {\n+                txn_available[idit->second] = vTxHashes[i].second->GetSharedTx();\n+                have_txn[idit->second]  = true;\n+                mempool_count++;\n+            } else {\n+                // If we find two mempool txn that match the short id, just request it.\n+                // This should be rare enough that the extra bandwidth doesn't matter,\n+                // but eating a round-trip due to FillBlock failure would be annoying\n+                if (txn_available[idit->second]) {\n+                    txn_available[idit->second].reset();\n+                    mempool_count--;\n+                }\n+            }\n+        }\n+        // Though ideally we'd continue scanning for the two-txn-match-shortid case,\n+        // the performance win of an early exit here is too good to pass up and worth\n+        // the extra risk.\n+        if (mempool_count == shorttxids.size())\n+            break;\n+    }\n+    }\n+\n+    for (size_t i = 0; i < extra_txn.size(); i++) {\n+        uint64_t shortid = cmpctblock.GetShortID(extra_txn[i].first);\n+        std::unordered_map<uint64_t, uint16_t>::iterator idit = shorttxids.find(shortid);\n+        if (idit != shorttxids.end()) {\n+            if (!have_txn[idit->second]) {\n+                txn_available[idit->second] = extra_txn[i].second;\n+                have_txn[idit->second]  = true;\n+                mempool_count++;\n+                extra_count++;\n+            } else {\n+                // If we find two mempool/extra txn that match the short id, just\n+                // request it.\n+                // This should be rare enough that the extra bandwidth doesn't matter,\n+                // but eating a round-trip due to FillBlock failure would be annoying\n+                // Note that we dont want duplication between extra_txn and mempool to\n+                // trigger this case, so we compare hashes first\n+                if (txn_available[idit->second] &&\n+                        txn_available[idit->second]->GetHash() != extra_txn[i].second->GetHash()) {\n+                    txn_available[idit->second].reset();\n+                    mempool_count--;\n+                    extra_count--;\n+                }\n+            }\n+        }\n+        // Though ideally we'd continue scanning for the two-txn-match-shortid case,\n+        // the performance win of an early exit here is too good to pass up and worth\n+        // the extra risk.\n+        if (mempool_count == shorttxids.size())\n+            break;\n+    }\n+\n+    LogPrint(\"cmpctblock\", \"Initialized PartiallyDownloadedBlock for block %s using a cmpctblock of size %lu\\n\", cmpctblock.header.GetHash().ToString(), GetSerializeSize(cmpctblock, SER_NETWORK, PROTOCOL_VERSION));\n+\n+    return READ_STATUS_OK;\n+}\n+\n+bool PartiallyDownloadedBlock::IsTxAvailable(size_t index) const {\n+    assert(!header.IsNull());\n+    assert(index < txn_available.size());\n+    return txn_available[index] ? true : false;\n+}\n+\n+ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<CTransactionRef>& vtx_missing) {\n+    assert(!header.IsNull());\n+    uint256 hash = header.GetHash();\n+    block = header;\n+    block.vtx.resize(txn_available.size());\n+\n+    size_t tx_missing_offset = 0;\n+    for (size_t i = 0; i < txn_available.size(); i++) {\n+        if (!txn_available[i]) {\n+            if (vtx_missing.size() <= tx_missing_offset)\n+                return READ_STATUS_INVALID;\n+            block.vtx[i] = vtx_missing[tx_missing_offset++];\n+        } else\n+            block.vtx[i] = std::move(txn_available[i]);\n+    }\n+\n+    // Make sure we can't call FillBlock again.\n+    header.SetNull();\n+    txn_available.clear();\n+\n+    if (vtx_missing.size() != tx_missing_offset)\n+        return READ_STATUS_INVALID;\n+\n+    CValidationState state;\n+    if (!CheckBlock(block, state, Params().GetConsensus())) {\n+        // TODO: We really want to just check merkle tree manually here,\n+        // but that is expensive, and CheckBlock caches a block's\n+        // \"checked-status\" (in the CBlock?). CBlock should be able to\n+        // check its own merkle root and cache that check.\n+        if (state.CorruptionPossible())\n+            return READ_STATUS_FAILED; // Possible Short ID collision\n+        return READ_STATUS_CHECKBLOCK_FAILED;\n+    }\n+\n+    LogPrint(\"cmpctblock\", \"Successfully reconstructed block %s with %lu txn prefilled, %lu txn from mempool (incl at least %lu from extra pool) and %lu txn requested\\n\", hash.ToString(), prefilled_count, mempool_count, extra_count, vtx_missing.size());\n+    if (vtx_missing.size() < 5) {\n+        for (const auto& tx : vtx_missing)\n+            LogPrint(\"cmpctblock\", \"Reconstructed block %s required tx %s\\n\", hash.ToString(), tx->GetHash().ToString());\n+    }\n+\n+    return READ_STATUS_OK;\n+}"
      },
      {
        "sha": "0667521cc8e1316137f7f467742f8a2c7a37a9a7",
        "filename": "src/blockencodings.h",
        "status": "added",
        "additions": 209,
        "deletions": 0,
        "changes": 209,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -0,0 +1,209 @@\n+// Copyright (c) 2016 The Syscoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef SYSCOIN_BLOCK_ENCODINGS_H\n+#define SYSCOIN_BLOCK_ENCODINGS_H\n+\n+#include \"primitives/block.h\"\n+\n+#include <memory>\n+\n+class CTxMemPool;\n+\n+// Dumb helper to handle CTransaction compression at serialize-time\n+struct TransactionCompressor {\n+private:\n+    CTransactionRef& tx;\n+public:\n+    TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(tx); //TODO: Compress tx encoding\n+    }\n+};\n+\n+class BlockTransactionsRequest {\n+public:\n+    // A BlockTransactionsRequest message\n+    uint256 blockhash;\n+    std::vector<uint16_t> indexes;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(blockhash);\n+        uint64_t indexes_size = (uint64_t)indexes.size();\n+        READWRITE(COMPACTSIZE(indexes_size));\n+        if (ser_action.ForRead()) {\n+            size_t i = 0;\n+            while (indexes.size() < indexes_size) {\n+                indexes.resize(std::min((uint64_t)(1000 + indexes.size()), indexes_size));\n+                for (; i < indexes.size(); i++) {\n+                    uint64_t index = 0;\n+                    READWRITE(COMPACTSIZE(index));\n+                    if (index > std::numeric_limits<uint16_t>::max())\n+                        throw std::ios_base::failure(\"index overflowed 16 bits\");\n+                    indexes[i] = index;\n+                }\n+            }\n+\n+            uint16_t offset = 0;\n+            for (size_t j = 0; j < indexes.size(); j++) {\n+                if (uint64_t(indexes[j]) + uint64_t(offset) > std::numeric_limits<uint16_t>::max())\n+                    throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n+                indexes[j] = indexes[j] + offset;\n+                offset = indexes[j] + 1;\n+            }\n+        } else {\n+            for (size_t i = 0; i < indexes.size(); i++) {\n+                uint64_t index = indexes[i] - (i == 0 ? 0 : (indexes[i - 1] + 1));\n+                READWRITE(COMPACTSIZE(index));\n+            }\n+        }\n+    }\n+};\n+\n+class BlockTransactions {\n+public:\n+    // A BlockTransactions message\n+    uint256 blockhash;\n+    std::vector<CTransactionRef> txn;\n+\n+    BlockTransactions() {}\n+    BlockTransactions(const BlockTransactionsRequest& req) :\n+        blockhash(req.blockhash), txn(req.indexes.size()) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(blockhash);\n+        uint64_t txn_size = (uint64_t)txn.size();\n+        READWRITE(COMPACTSIZE(txn_size));\n+        if (ser_action.ForRead()) {\n+            size_t i = 0;\n+            while (txn.size() < txn_size) {\n+                txn.resize(std::min((uint64_t)(1000 + txn.size()), txn_size));\n+                for (; i < txn.size(); i++)\n+                    READWRITE(REF(TransactionCompressor(txn[i])));\n+            }\n+        } else {\n+            for (size_t i = 0; i < txn.size(); i++)\n+                READWRITE(REF(TransactionCompressor(txn[i])));\n+        }\n+    }\n+};\n+\n+// Dumb serialization/storage-helper for CBlockHeaderAndShortTxIDs and PartiallyDownloadedBlock\n+struct PrefilledTransaction {\n+    // Used as an offset since last prefilled tx in CBlockHeaderAndShortTxIDs,\n+    // as a proper transaction-in-block-index in PartiallyDownloadedBlock\n+    uint16_t index;\n+    CTransactionRef tx;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        uint64_t idx = index;\n+        READWRITE(COMPACTSIZE(idx));\n+        if (idx > std::numeric_limits<uint16_t>::max())\n+            throw std::ios_base::failure(\"index overflowed 16-bits\");\n+        index = idx;\n+        READWRITE(REF(TransactionCompressor(tx)));\n+    }\n+};\n+\n+typedef enum ReadStatus_t\n+{\n+    READ_STATUS_OK,\n+    READ_STATUS_INVALID, // Invalid object, peer is sending bogus crap\n+    READ_STATUS_FAILED, // Failed to process object\n+    READ_STATUS_CHECKBLOCK_FAILED, // Used only by FillBlock to indicate a\n+                                   // failure in CheckBlock.\n+} ReadStatus;\n+\n+class CBlockHeaderAndShortTxIDs {\n+private:\n+    mutable uint64_t shorttxidk0, shorttxidk1;\n+    uint64_t nonce;\n+\n+    void FillShortTxIDSelector() const;\n+\n+    friend class PartiallyDownloadedBlock;\n+\n+    static const int SHORTTXIDS_LENGTH = 6;\n+protected:\n+    std::vector<uint64_t> shorttxids;\n+    std::vector<PrefilledTransaction> prefilledtxn;\n+\n+public:\n+    CBlockHeader header;\n+\n+    // Dummy for deserialization\n+    CBlockHeaderAndShortTxIDs() {}\n+\n+    CBlockHeaderAndShortTxIDs(const CBlock& block);\n+\n+    uint64_t GetShortID(const uint256& txhash) const;\n+\n+    size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(header);\n+        READWRITE(nonce);\n+\n+        uint64_t shorttxids_size = (uint64_t)shorttxids.size();\n+        READWRITE(COMPACTSIZE(shorttxids_size));\n+        if (ser_action.ForRead()) {\n+            size_t i = 0;\n+            while (shorttxids.size() < shorttxids_size) {\n+                shorttxids.resize(std::min((uint64_t)(1000 + shorttxids.size()), shorttxids_size));\n+                for (; i < shorttxids.size(); i++) {\n+                    uint32_t lsb = 0; uint16_t msb = 0;\n+                    READWRITE(lsb);\n+                    READWRITE(msb);\n+                    shorttxids[i] = (uint64_t(msb) << 32) | uint64_t(lsb);\n+                    static_assert(SHORTTXIDS_LENGTH == 6, \"shorttxids serialization assumes 6-byte shorttxids\");\n+                }\n+            }\n+        } else {\n+            for (size_t i = 0; i < shorttxids.size(); i++) {\n+                uint32_t lsb = shorttxids[i] & 0xffffffff;\n+                uint16_t msb = (shorttxids[i] >> 32) & 0xffff;\n+                READWRITE(lsb);\n+                READWRITE(msb);\n+            }\n+        }\n+\n+        READWRITE(prefilledtxn);\n+\n+        if (ser_action.ForRead())\n+            FillShortTxIDSelector();\n+    }\n+};\n+\n+class PartiallyDownloadedBlock {\n+protected:\n+    std::vector<CTransactionRef> txn_available;\n+    size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;\n+    CTxMemPool* pool;\n+public:\n+    CBlockHeader header;\n+    PartiallyDownloadedBlock(CTxMemPool* poolIn) : pool(poolIn) {}\n+\n+    // extra_txn is a list of extra transactions to look at, in <hash, reference> form\n+    ReadStatus InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn);\n+    bool IsTxAvailable(size_t index) const;\n+    ReadStatus FillBlock(CBlock& block, const std::vector<CTransactionRef>& vtx_missing);\n+};\n+\n+#endif"
      },
      {
        "sha": "69c202517adb8fd2c6ef60bd45abdfe68a99b321",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 43,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2012-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2012-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -20,23 +19,21 @@\n #define LN2SQUARED 0.4804530139182014246671025263266649717305529515945455\n #define LN2 0.6931471805599453094172321214581765680755001343602552\n \n-using namespace std;\n-\n CBloomFilter::CBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweakIn, unsigned char nFlagsIn) :\n     /**\n      * The ideal size for a bloom filter with a given number of elements and false positive rate is:\n      * - nElements * log(fp rate) / ln(2)^2\n      * We ignore filter parameters which will create a bloom filter larger than the protocol limits\n      */\n-    vData(min((unsigned int)(-1  / LN2SQUARED * nElements * log(nFPRate)), MAX_BLOOM_FILTER_SIZE * 8) / 8),\n+    vData(std::min((unsigned int)(-1  / LN2SQUARED * nElements * log(nFPRate)), MAX_BLOOM_FILTER_SIZE * 8) / 8),\n     /**\n      * The ideal number of hash functions is filter size * ln(2) / number of elements\n      * Again, we ignore filter parameters which will create a bloom filter with more hash functions than the protocol limits\n      * See https://en.wikipedia.org/wiki/Bloom_filter for an explanation of these formulas\n      */\n     isFull(false),\n     isEmpty(true),\n-    nHashFuncs(min((unsigned int)(vData.size() * 8 / nElements * LN2), MAX_HASH_FUNCS)),\n+    nHashFuncs(std::min((unsigned int)(vData.size() * 8 / nElements * LN2), MAX_HASH_FUNCS)),\n     nTweak(nTweakIn),\n     nFlags(nFlagsIn)\n {\n@@ -59,7 +56,7 @@ inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<\n     return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash) % (vData.size() * 8);\n }\n \n-void CBloomFilter::insert(const vector<unsigned char>& vKey)\n+void CBloomFilter::insert(const std::vector<unsigned char>& vKey)\n {\n     if (isFull)\n         return;\n@@ -76,17 +73,17 @@ void CBloomFilter::insert(const COutPoint& outpoint)\n {\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << outpoint;\n-    vector<unsigned char> data(stream.begin(), stream.end());\n+    std::vector<unsigned char> data(stream.begin(), stream.end());\n     insert(data);\n }\n \n void CBloomFilter::insert(const uint256& hash)\n {\n-    vector<unsigned char> data(hash.begin(), hash.end());\n+    std::vector<unsigned char> data(hash.begin(), hash.end());\n     insert(data);\n }\n \n-bool CBloomFilter::contains(const vector<unsigned char>& vKey) const\n+bool CBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n {\n     if (isFull)\n         return true;\n@@ -106,13 +103,13 @@ bool CBloomFilter::contains(const COutPoint& outpoint) const\n {\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << outpoint;\n-    vector<unsigned char> data(stream.begin(), stream.end());\n+    std::vector<unsigned char> data(stream.begin(), stream.end());\n     return contains(data);\n }\n \n bool CBloomFilter::contains(const uint256& hash) const\n {\n-    vector<unsigned char> data(hash.begin(), hash.end());\n+    std::vector<unsigned char> data(hash.begin(), hash.end());\n     return contains(data);\n }\n \n@@ -155,7 +152,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n         // This means clients don't have to update the filter themselves when a new relevant tx \n         // is discovered in order to find spending transactions, which avoids round-tripping and race conditions.\n         CScript::const_iterator pc = txout.scriptPubKey.begin();\n-        vector<unsigned char> data;\n+        std::vector<unsigned char> data;\n         while (pc < txout.scriptPubKey.end())\n         {\n             opcodetype opcode;\n@@ -169,7 +166,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n                 else if ((nFlags & BLOOM_UPDATE_MASK) == BLOOM_UPDATE_P2PUBKEY_ONLY)\n                 {\n                     txnouttype type;\n-                    vector<vector<unsigned char> > vSolutions;\n+                    std::vector<std::vector<unsigned char> > vSolutions;\n                     if (Solver(txout.scriptPubKey, type, vSolutions) &&\n                             (type == TX_PUBKEY || type == TX_MULTISIG))\n                         insert(COutPoint(hash, i));\n@@ -190,7 +187,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n \n         // Match if the filter contains any arbitrary script data element in any scriptSig in tx\n         CScript::const_iterator pc = txin.scriptSig.begin();\n-        vector<unsigned char> data;\n+        std::vector<unsigned char> data;\n         while (pc < txin.scriptSig.end())\n         {\n             opcodetype opcode;\n@@ -217,57 +214,100 @@ void CBloomFilter::UpdateEmptyFull()\n     isEmpty = empty;\n }\n \n-CRollingBloomFilter::CRollingBloomFilter(unsigned int nElements, double fpRate) :\n-    b1(nElements * 2, fpRate, 0), b2(nElements * 2, fpRate, 0)\n+CRollingBloomFilter::CRollingBloomFilter(unsigned int nElements, double fpRate)\n {\n-    // Implemented using two bloom filters of 2 * nElements each.\n-    // We fill them up, and clear them, staggered, every nElements\n-    // inserted, so at least one always contains the last nElements\n-    // inserted.\n-    nInsertions = 0;\n-    nBloomSize = nElements * 2;\n-\n+    double logFpRate = log(fpRate);\n+    /* The optimal number of hash functions is log(fpRate) / log(0.5), but\n+     * restrict it to the range 1-50. */\n+    nHashFuncs = std::max(1, std::min((int)round(logFpRate / log(0.5)), 50));\n+    /* In this rolling bloom filter, we'll store between 2 and 3 generations of nElements / 2 entries. */\n+    nEntriesPerGeneration = (nElements + 1) / 2;\n+    uint32_t nMaxElements = nEntriesPerGeneration * 3;\n+    /* The maximum fpRate = pow(1.0 - exp(-nHashFuncs * nMaxElements / nFilterBits), nHashFuncs)\n+     * =>          pow(fpRate, 1.0 / nHashFuncs) = 1.0 - exp(-nHashFuncs * nMaxElements / nFilterBits)\n+     * =>          1.0 - pow(fpRate, 1.0 / nHashFuncs) = exp(-nHashFuncs * nMaxElements / nFilterBits)\n+     * =>          log(1.0 - pow(fpRate, 1.0 / nHashFuncs)) = -nHashFuncs * nMaxElements / nFilterBits\n+     * =>          nFilterBits = -nHashFuncs * nMaxElements / log(1.0 - pow(fpRate, 1.0 / nHashFuncs))\n+     * =>          nFilterBits = -nHashFuncs * nMaxElements / log(1.0 - exp(logFpRate / nHashFuncs))\n+     */\n+    uint32_t nFilterBits = (uint32_t)ceil(-1.0 * nHashFuncs * nMaxElements / log(1.0 - exp(logFpRate / nHashFuncs)));\n+    data.clear();\n+    /* For each data element we need to store 2 bits. If both bits are 0, the\n+     * bit is treated as unset. If the bits are (01), (10), or (11), the bit is\n+     * treated as set in generation 1, 2, or 3 respectively.\n+     * These bits are stored in separate integers: position P corresponds to bit\n+     * (P & 63) of the integers data[(P >> 6) * 2] and data[(P >> 6) * 2 + 1]. */\n+    data.resize(((nFilterBits + 63) / 64) << 1);\n     reset();\n }\n \n+/* Similar to CBloomFilter::Hash */\n+static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, const std::vector<unsigned char>& vDataToHash) {\n+    return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash);\n+}\n+\n void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n {\n-    if (nInsertions == 0) {\n-        b1.clear();\n-    } else if (nInsertions == nBloomSize / 2) {\n-        b2.clear();\n+    if (nEntriesThisGeneration == nEntriesPerGeneration) {\n+        nEntriesThisGeneration = 0;\n+        nGeneration++;\n+        if (nGeneration == 4) {\n+            nGeneration = 1;\n+        }\n+        uint64_t nGenerationMask1 = -(uint64_t)(nGeneration & 1);\n+        uint64_t nGenerationMask2 = -(uint64_t)(nGeneration >> 1);\n+        /* Wipe old entries that used this generation number. */\n+        for (uint32_t p = 0; p < data.size(); p += 2) {\n+            uint64_t p1 = data[p], p2 = data[p + 1];\n+            uint64_t mask = (p1 ^ nGenerationMask1) | (p2 ^ nGenerationMask2);\n+            data[p] = p1 & mask;\n+            data[p + 1] = p2 & mask;\n+        }\n     }\n-    b1.insert(vKey);\n-    b2.insert(vKey);\n-    if (++nInsertions == nBloomSize) {\n-        nInsertions = 0;\n+    nEntriesThisGeneration++;\n+\n+    for (int n = 0; n < nHashFuncs; n++) {\n+        uint32_t h = RollingBloomHash(n, nTweak, vKey);\n+        int bit = h & 0x3F;\n+        uint32_t pos = (h >> 6) % data.size();\n+        /* The lowest bit of pos is ignored, and set to zero for the first bit, and to one for the second. */\n+        data[pos & ~1] = (data[pos & ~1] & ~(((uint64_t)1) << bit)) | ((uint64_t)(nGeneration & 1)) << bit;\n+        data[pos | 1] = (data[pos | 1] & ~(((uint64_t)1) << bit)) | ((uint64_t)(nGeneration >> 1)) << bit;\n     }\n }\n \n void CRollingBloomFilter::insert(const uint256& hash)\n {\n-    vector<unsigned char> data(hash.begin(), hash.end());\n-    insert(data);\n+    std::vector<unsigned char> vData(hash.begin(), hash.end());\n+    insert(vData);\n }\n \n bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n {\n-    if (nInsertions < nBloomSize / 2) {\n-        return b2.contains(vKey);\n+    for (int n = 0; n < nHashFuncs; n++) {\n+        uint32_t h = RollingBloomHash(n, nTweak, vKey);\n+        int bit = h & 0x3F;\n+        uint32_t pos = (h >> 6) % data.size();\n+        /* If the relevant bit is not set in either data[pos & ~1] or data[pos | 1], the filter does not contain vKey */\n+        if (!(((data[pos & ~1] | data[pos | 1]) >> bit) & 1)) {\n+            return false;\n+        }\n     }\n-    return b1.contains(vKey);\n+    return true;\n }\n \n bool CRollingBloomFilter::contains(const uint256& hash) const\n {\n-    vector<unsigned char> data(hash.begin(), hash.end());\n-    return contains(data);\n+    std::vector<unsigned char> vData(hash.begin(), hash.end());\n+    return contains(vData);\n }\n \n void CRollingBloomFilter::reset()\n {\n-    unsigned int nNewTweak = GetRand(std::numeric_limits<unsigned int>::max());\n-    b1.reset(nNewTweak);\n-    b2.reset(nNewTweak);\n-    nInsertions = 0;\n+    nTweak = GetRand(std::numeric_limits<unsigned int>::max());\n+    nEntriesThisGeneration = 0;\n+    nGeneration = 1;\n+    for (std::vector<uint64_t>::iterator it = data.begin(); it != data.end(); it++) {\n+        *it = 0;\n+    }\n }"
      },
      {
        "sha": "0186bebe72241931c9440d033de9db14f13b74bf",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2012-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2012-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -74,7 +73,7 @@ class CBloomFilter\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(vData);\n         READWRITE(nHashFuncs);\n         READWRITE(nTweak);\n@@ -111,8 +110,11 @@ class CBloomFilter\n  * reset() is provided, which also changes nTweak to decrease the impact of\n  * false-positives.\n  *\n- * contains(item) will always return true if item was one of the last N things\n+ * contains(item) will always return true if item was one of the last N to 1.5*N\n  * insert()'ed ... but may also return true for items that were not inserted.\n+ *\n+ * It needs around 1.8 bytes per element per factor 0.1 of false positive rate.\n+ * (More accurately: 3/(log(256)*log(2)) * log(1/fpRate) * nElements bytes)\n  */\n class CRollingBloomFilter\n {\n@@ -130,10 +132,12 @@ class CRollingBloomFilter\n     void reset();\n \n private:\n-    unsigned int nBloomSize;\n-    unsigned int nInsertions;\n-    CBloomFilter b1, b2;\n+    int nEntriesPerGeneration;\n+    int nEntriesThisGeneration;\n+    int nGeneration;\n+    std::vector<uint64_t> data;\n+    unsigned int nTweak;\n+    int nHashFuncs;\n };\n \n-\n #endif // SYSCOIN_BLOOM_H"
      },
      {
        "sha": "f379460482ccd2450f4c2f38cd60db6334beae5b",
        "filename": "src/cachemap.h",
        "status": "modified",
        "additions": 13,
        "deletions": 27,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/cachemap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/cachemap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cachemap.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -32,7 +31,7 @@ struct CacheItem\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         READWRITE(key);\n         READWRITE(value);\n@@ -66,23 +65,19 @@ class CacheMap\n private:\n     size_type nMaxSize;\n \n-    size_type nCurrentSize;\n-\n     list_t listItems;\n \n     map_t mapIndex;\n \n public:\n     CacheMap(size_type nMaxSizeIn = 0)\n         : nMaxSize(nMaxSizeIn),\n-          nCurrentSize(0),\n           listItems(),\n           mapIndex()\n     {}\n \n     CacheMap(const CacheMap<K,V>& other)\n         : nMaxSize(other.nMaxSize),\n-          nCurrentSize(other.nCurrentSize),\n           listItems(other.listItems),\n           mapIndex()\n     {\n@@ -93,7 +88,6 @@ class CacheMap\n     {\n         mapIndex.clear();\n         listItems.clear();\n-        nCurrentSize = 0;\n     }\n \n     void SetMaxSize(size_type nMaxSizeIn)\n@@ -106,29 +100,25 @@ class CacheMap\n     }\n \n     size_type GetSize() const {\n-        return nCurrentSize;\n+        return listItems.size();\n     }\n \n-    void Insert(const K& key, const V& value)\n+    bool Insert(const K& key, const V& value)\n     {\n-        map_it it = mapIndex.find(key);\n-        if(it != mapIndex.end()) {\n-            item_t& item = *(it->second);\n-            item.value = value;\n-            return;\n+        if(mapIndex.find(key) != mapIndex.end()) {\n+            return false;\n         }\n-        if(nCurrentSize == nMaxSize) {\n+        if(listItems.size() == nMaxSize) {\n             PruneLast();\n         }\n         listItems.push_front(item_t(key, value));\n-        mapIndex[key] = listItems.begin();\n-        ++nCurrentSize;\n+        mapIndex.emplace(key, listItems.begin());\n+        return true;\n     }\n \n     bool HasKey(const K& key) const\n     {\n-        map_cit it = mapIndex.find(key);\n-        return (it != mapIndex.end());\n+        return (mapIndex.find(key) != mapIndex.end());\n     }\n \n     bool Get(const K& key, V& value) const\n@@ -150,7 +140,6 @@ class CacheMap\n         }\n         listItems.erase(it->second);\n         mapIndex.erase(it);\n-        --nCurrentSize;\n     }\n \n     const list_t& GetItemList() const {\n@@ -160,7 +149,6 @@ class CacheMap\n     CacheMap<K,V>& operator=(const CacheMap<K,V>& other)\n     {\n         nMaxSize = other.nMaxSize;\n-        nCurrentSize = other.nCurrentSize;\n         listItems = other.listItems;\n         RebuildIndex();\n         return *this;\n@@ -169,10 +157,9 @@ class CacheMap\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         READWRITE(nMaxSize);\n-        READWRITE(nCurrentSize);\n         READWRITE(listItems);\n         if(ser_action.ForRead()) {\n             RebuildIndex();\n@@ -182,20 +169,19 @@ class CacheMap\n private:\n     void PruneLast()\n     {\n-        if(nCurrentSize < 1) {\n+        if(listItems.empty()) {\n             return;\n         }\n         item_t& item = listItems.back();\n         mapIndex.erase(item.key);\n         listItems.pop_back();\n-        --nCurrentSize;\n     }\n \n     void RebuildIndex()\n     {\n         mapIndex.clear();\n         for(list_it it = listItems.begin(); it != listItems.end(); ++it) {\n-            mapIndex[it->key] = it;\n+            mapIndex.emplace(it->key, it);\n         }\n     }\n };"
      },
      {
        "sha": "ac2a9a3adbaaf5766c0a1ac39d98e524f71f41d7",
        "filename": "src/cachemultimap.h",
        "status": "modified",
        "additions": 14,
        "deletions": 29,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/cachemultimap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/cachemultimap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cachemultimap.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -47,23 +46,19 @@ class CacheMultiMap\n private:\n     size_type nMaxSize;\n \n-    size_type nCurrentSize;\n-\n     list_t listItems;\n \n     map_t mapIndex;\n \n public:\n     CacheMultiMap(size_type nMaxSizeIn = 0)\n         : nMaxSize(nMaxSizeIn),\n-          nCurrentSize(0),\n           listItems(),\n           mapIndex()\n     {}\n \n     CacheMultiMap(const CacheMap<K,V>& other)\n         : nMaxSize(other.nMaxSize),\n-          nCurrentSize(other.nCurrentSize),\n           listItems(other.listItems),\n           mapIndex()\n     {\n@@ -74,7 +69,6 @@ class CacheMultiMap\n     {\n         mapIndex.clear();\n         listItems.clear();\n-        nCurrentSize = 0;\n     }\n \n     void SetMaxSize(size_type nMaxSizeIn)\n@@ -87,17 +81,14 @@ class CacheMultiMap\n     }\n \n     size_type GetSize() const {\n-        return nCurrentSize;\n+        return listItems.size();\n     }\n \n     bool Insert(const K& key, const V& value)\n     {\n-        if(nCurrentSize == nMaxSize) {\n-            PruneLast();\n-        }\n         map_it mit = mapIndex.find(key);\n         if(mit == mapIndex.end()) {\n-            mit = mapIndex.insert(std::pair<K,it_map_t>(key, it_map_t())).first;\n+            mit = mapIndex.emplace(key, it_map_t()).first;\n         }\n         it_map_t& mapIt = mit->second;\n \n@@ -106,18 +97,17 @@ class CacheMultiMap\n             return false;\n         }\n \n+        if(listItems.size() == nMaxSize) {\n+            PruneLast();\n+        }\n         listItems.push_front(item_t(key, value));\n-        list_it lit = listItems.begin();\n-\n-        mapIt[value] = lit;\n-        ++nCurrentSize;\n+        mapIt.emplace(value, listItems.begin());\n         return true;\n     }\n \n     bool HasKey(const K& key) const\n     {\n-        map_cit it = mapIndex.find(key);\n-        return (it != mapIndex.end());\n+        return (mapIndex.find(key) != mapIndex.end());\n     }\n \n     bool Get(const K& key, V& value) const\n@@ -164,7 +154,6 @@ class CacheMultiMap\n \n         for(it_map_it it = mapIt.begin(); it != mapIt.end(); ++it) {\n             listItems.erase(it->second);\n-            --nCurrentSize;\n         }\n \n         mapIndex.erase(mit);\n@@ -184,10 +173,9 @@ class CacheMultiMap\n         }\n \n         listItems.erase(it->second);\n-        --nCurrentSize;\n         mapIt.erase(it);\n \n-        if(mapIt.size() < 1) {\n+        if(mapIt.empty()) {\n             mapIndex.erase(mit);\n         }\n     }\n@@ -199,7 +187,6 @@ class CacheMultiMap\n     CacheMap<K,V>& operator=(const CacheMap<K,V>& other)\n     {\n         nMaxSize = other.nMaxSize;\n-        nCurrentSize = other.nCurrentSize;\n         listItems = other.listItems;\n         RebuildIndex();\n         return *this;\n@@ -208,10 +195,9 @@ class CacheMultiMap\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         READWRITE(nMaxSize);\n-        READWRITE(nCurrentSize);\n         READWRITE(listItems);\n         if(ser_action.ForRead()) {\n             RebuildIndex();\n@@ -221,7 +207,7 @@ class CacheMultiMap\n private:\n     void PruneLast()\n     {\n-        if(nCurrentSize < 1) {\n+        if(listItems.empty()) {\n             return;\n         }\n \n@@ -236,13 +222,12 @@ class CacheMultiMap\n \n             mapIt.erase(item.value);\n \n-            if(mapIt.size() < 1) {\n+            if(mapIt.empty()) {\n                 mapIndex.erase(item.key);\n             }\n         }\n \n         listItems.pop_back();\n-        --nCurrentSize;\n     }\n \n     void RebuildIndex()\n@@ -252,10 +237,10 @@ class CacheMultiMap\n             item_t& item = *lit;\n             map_it mit = mapIndex.find(item.key);\n             if(mit == mapIndex.end()) {\n-                mit = mapIndex.insert(std::pair<K,it_map_t>(item.key, it_map_t())).first;\n+                mit = mapIndex.emplace(item.key, it_map_t()).first;\n             }\n             it_map_t& mapIt = mit->second;\n-            mapIt[item.value] = lit;\n+            mapIt.emplace(item.value, lit);\n         }\n     }\n };"
      },
      {
        "sha": "2ff18c0c8cbd63a8da3bcfcba44660ac7765bfc7",
        "filename": "src/cert.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 33,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/cert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/cert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cert.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -13,7 +13,7 @@\n #include \"rpc/server.h\"\n #include \"wallet/wallet.h\"\n #include \"chainparams.h\"\n-#include \"coincontrol.h\"\n+#include \"wallet/coincontrol.h\"\n #include <boost/algorithm/hex.hpp>\n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n #include <boost/foreach.hpp>\n@@ -25,7 +25,7 @@\n \n using namespace std::chrono;\n using namespace std;\n-extern void SendMoneySyscoin(const vector<unsigned char> &vchAlias, const vector<unsigned char> &vchWitness, const CRecipient &aliasRecipient, vector<CRecipient> &vecSend, CWalletTx& wtxNew, CCoinControl* coinControl, bool fUseInstantSend=false, bool transferAlias=false);\n+\n bool IsCertOp(int op) {\n     return op == OP_CERT_ACTIVATE\n         || op == OP_CERT_UPDATE\n@@ -495,8 +495,9 @@ bool CheckCertInputs(const CTransaction &tx, int op, const vector<vector<unsigne\n \n \n \n-UniValue certnew(const UniValue& params, bool fHelp) {\n-    if (fHelp || params.size() != 5)\n+UniValue certnew(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+    if (request.fHelp || params.size() != 5)\n         throw runtime_error(\n \t\t\t\"certnew [alias] [title] [public value] [category=certificates] [witness]\\n\"\n \t\t\t\t\t\t\"<alias> An alias you own.\\n\"\n@@ -566,20 +567,14 @@ UniValue certnew(const UniValue& params, bool fHelp) {\n \tCreateFeeRecipient(scriptData, data, fee);\n \tvecSend.push_back(fee);\n \n-\t\n-\t\n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\t\n-\tSendMoneySyscoin(vchAlias, vchWitness, aliasRecipient, vecSend, wtx, &coinControl);\n-\tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n+\tUniValue res = syscointxfund_helper(vchAlias, vchWitness, aliasRecipient, vecSend);\n \tres.push_back(stringFromVch(vchCert));\n \treturn res;\n }\n \n-UniValue certupdate(const UniValue& params, bool fHelp) {\n-    if (fHelp || params.size() != 5)\n+UniValue certupdate(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+    if (request.fHelp || params.size() != 5)\n         throw runtime_error(\n \t\t\t\"certupdate [guid] [title] [public value] [category=certificates] [witness]\\n\"\n \t\t\t\t\t\t\"Perform an update on an certificate you control.\\n\"\n@@ -664,19 +659,13 @@ UniValue certupdate(const UniValue& params, bool fHelp) {\n \tCreateFeeRecipient(scriptData, data, fee);\n \tvecSend.push_back(fee);\n \t\n-\t\n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\t\n-\tSendMoneySyscoin(theAlias.vchAlias, vchWitness, aliasRecipient, vecSend, wtx, &coinControl);\n- \tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n-\treturn res;\n+\treturn syscointxfund_helper(theAlias.vchAlias, vchWitness, aliasRecipient, vecSend);\n }\n \n \n-UniValue certtransfer(const UniValue& params, bool fHelp) {\n- if (fHelp || params.size() != 5)\n+UniValue certtransfer(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+ if (request.fHelp || params.size() != 5)\n         throw runtime_error(\n \t\t\t\"certtransfer [guid] [alias] [public value] [accessflags=2] [witness]\\n\"\n \t\t\t\t\t\t\"Transfer a certificate you own to another alias.\\n\"\n@@ -770,18 +759,13 @@ UniValue certtransfer(const UniValue& params, bool fHelp) {\n \tvecSend.push_back(fee);\n \t\n \t\n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\n-\tSendMoneySyscoin(fromAlias.vchAlias, vchWitness, aliasRecipient, vecSend, wtx, &coinControl);\n-\tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n-\treturn res;\n+\treturn syscointxfund_helper(fromAlias.vchAlias, vchWitness, aliasRecipient, vecSend);\n }\n \n \n-UniValue certinfo(const UniValue& params, bool fHelp) {\n-    if (fHelp || 1 > params.size())\n+UniValue certinfo(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+    if (request.fHelp || 1 > params.size())\n         throw runtime_error(\"certinfo <guid>\\n\"\n                 \"Show stored values of a single certificate and its .\\n\");\n "
      },
      {
        "sha": "9b0e35e1166a1c2263aa9b41e6c075c425c9563c",
        "filename": "src/cert.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/cert.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/cert.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cert.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -14,7 +14,6 @@ class CWalletTx;\n class CTransaction;\n class CReserveKey;\n class CCoinsViewCache;\n-class CCoins;\n class CBlock;\n class CAliasIndex;\n bool CheckCertInputs(const CTransaction &tx, int op, const std::vector<std::vector<unsigned char> > &vvchArgs, const std::vector<unsigned char> &vvchAlias, bool fJustCheck, int nHeight, sorted_vector<std::vector<unsigned char> > &revertedCerts, std::string &errorMessage, bool bSanityCheck=false);\n@@ -52,7 +51,7 @@ class CCert {\n \t}\n \tADD_SERIALIZE_METHODS;\n     template <typename Stream, typename Operation>\n-\tinline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\t\t\n+\tinline void SerializationOp(Stream& s, Operation ser_action) {\t\t\n \t\tREADWRITE(vchTitle);\n \t\tREADWRITE(vchPubData);\n \t\tREADWRITE(txHash);"
      },
      {
        "sha": "68c120108020b136967cdff27f78771b15c9a88d",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 1,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -86,6 +85,13 @@ const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {\n     return pindex;\n }\n \n+CBlockIndex* CChain::FindEarliestAtLeast(int64_t nTime) const\n+{\n+    std::vector<CBlockIndex*>::const_iterator lower = std::lower_bound(vChain.begin(), vChain.end(), nTime,\n+        [](CBlockIndex* pBlock, const int64_t& time) -> bool { return pBlock->GetBlockTimeMax() < time; });\n+    return (lower == vChain.end() ? NULL : *lower);\n+}\n+\n /** Turn the lowest '1' bit in the binary representation of a number into a '0'. */\n int static inline InvertLowestOne(int n) { return n & (n - 1); }\n \n@@ -136,3 +142,35 @@ void CBlockIndex::BuildSkip()\n     if (pprev)\n         pskip = pprev->GetAncestor(GetSkipHeight(nHeight));\n }\n+\n+arith_uint256 GetBlockProof(const CBlockIndex& block)\n+{\n+    arith_uint256 bnTarget;\n+    bool fNegative;\n+    bool fOverflow;\n+    bnTarget.SetCompact(block.nBits, &fNegative, &fOverflow);\n+    if (fNegative || fOverflow || bnTarget == 0)\n+        return 0;\n+    // We need to compute 2**256 / (bnTarget+1), but we can't represent 2**256\n+    // as it's too large for a arith_uint256. However, as 2**256 is at least as large\n+    // as bnTarget+1, it is equal to ((2**256 - bnTarget - 1) / (bnTarget+1)) + 1,\n+    // or ~bnTarget / (nTarget+1) + 1.\n+    return (~bnTarget / (bnTarget + 1)) + 1;\n+}\n+\n+int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params& params)\n+{\n+    arith_uint256 r;\n+    int sign = 1;\n+    if (to.nChainWork > from.nChainWork) {\n+        r = to.nChainWork - from.nChainWork;\n+    } else {\n+        r = from.nChainWork - to.nChainWork;\n+        sign = -1;\n+    }\n+    r = r * arith_uint256(params.nPowTargetSpacing) / GetBlockProof(tip);\n+    if (r.bits() > 63) {\n+        return sign * std::numeric_limits<int64_t>::max();\n+    }\n+    return sign * r.GetLow64();\n+}"
      },
      {
        "sha": "130f3d1c28665c5f58842cfb00679c5de11b892b",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 81,
        "deletions": 11,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -15,6 +14,60 @@\n \n #include <vector>\n \n+class CBlockFileInfo\n+{\n+public:\n+    unsigned int nBlocks;      //!< number of blocks stored in file\n+    unsigned int nSize;        //!< number of used bytes of block file\n+    unsigned int nUndoSize;    //!< number of used bytes in the undo file\n+    unsigned int nHeightFirst; //!< lowest height of block in file\n+    unsigned int nHeightLast;  //!< highest height of block in file\n+    uint64_t nTimeFirst;       //!< earliest time of block in file\n+    uint64_t nTimeLast;        //!< latest time of block in file\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(VARINT(nBlocks));\n+        READWRITE(VARINT(nSize));\n+        READWRITE(VARINT(nUndoSize));\n+        READWRITE(VARINT(nHeightFirst));\n+        READWRITE(VARINT(nHeightLast));\n+        READWRITE(VARINT(nTimeFirst));\n+        READWRITE(VARINT(nTimeLast));\n+    }\n+\n+     void SetNull() {\n+         nBlocks = 0;\n+         nSize = 0;\n+         nUndoSize = 0;\n+         nHeightFirst = 0;\n+         nHeightLast = 0;\n+         nTimeFirst = 0;\n+         nTimeLast = 0;\n+     }\n+\n+     CBlockFileInfo() {\n+         SetNull();\n+     }\n+\n+     std::string ToString() const;\n+\n+     /** update statistics (does not update nSize) */\n+     void AddBlock(unsigned int nHeightIn, uint64_t nTimeIn) {\n+         if (nBlocks==0 || nHeightFirst > nHeightIn)\n+             nHeightFirst = nHeightIn;\n+         if (nBlocks==0 || nTimeFirst > nTimeIn)\n+             nTimeFirst = nTimeIn;\n+         nBlocks++;\n+         if (nHeightIn > nHeightLast)\n+             nHeightLast = nHeightIn;\n+         if (nTimeIn > nTimeLast)\n+             nTimeLast = nTimeIn;\n+     }\n+};\n+\n struct CDiskBlockPos\n {\n     int nFile;\n@@ -23,7 +76,7 @@ struct CDiskBlockPos\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(VARINT(nFile));\n         READWRITE(VARINT(nPos));\n     }\n@@ -55,7 +108,7 @@ struct CDiskBlockPos\n \n };\n \n-enum BlockStatus {\n+enum BlockStatus: uint32_t {\n     //! Unused.\n     BLOCK_VALID_UNKNOWN      =    0,\n \n@@ -84,12 +137,12 @@ enum BlockStatus {\n     BLOCK_VALID_MASK         =   BLOCK_VALID_HEADER | BLOCK_VALID_TREE | BLOCK_VALID_TRANSACTIONS |\n                                  BLOCK_VALID_CHAIN | BLOCK_VALID_SCRIPTS,\n \n-    BLOCK_HAVE_DATA          =    8, //! full block available in blk*.dat\n-    BLOCK_HAVE_UNDO          =   16, //! undo data available in rev*.dat\n+    BLOCK_HAVE_DATA          =    8, //!< full block available in blk*.dat\n+    BLOCK_HAVE_UNDO          =   16, //!< undo data available in rev*.dat\n     BLOCK_HAVE_MASK          =   BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO,\n \n-    BLOCK_FAILED_VALID       =   32, //! stage after last reached validness failed\n-    BLOCK_FAILED_CHILD       =   64, //! descends from failed block\n+    BLOCK_FAILED_VALID       =   32, //!< stage after last reached validness failed\n+    BLOCK_FAILED_CHILD       =   64, //!< descends from failed block\n     BLOCK_FAILED_MASK        =   BLOCK_FAILED_VALID | BLOCK_FAILED_CHILD,\n };\n \n@@ -145,7 +198,10 @@ class CBlockIndex\n     unsigned int nNonce;\n \n     //! (memory only) Sequential id assigned to distinguish order in which blocks are received.\n-    uint32_t nSequenceId;\n+    int32_t nSequenceId;\n+\n+    //! (memory only) Maximum nTime in the chain upto and including this block.\n+    unsigned int nTimeMax;\n \n     void SetNull()\n     {\n@@ -161,6 +217,7 @@ class CBlockIndex\n         nChainTx = 0;\n         nStatus = 0;\n         nSequenceId = 0;\n+        nTimeMax = 0;\n \n         nVersion       = 0;\n         hashMerkleRoot = uint256();\n@@ -216,6 +273,11 @@ class CBlockIndex\n         return (int64_t)nTime;\n     }\n \n+    int64_t GetBlockTimeMax() const\n+    {\n+        return (int64_t)nTimeMax;\n+    }\n+\n     enum { nMedianTimeSpan=11 };\n \n     int64_t GetMedianTimePast() const\n@@ -276,6 +338,10 @@ class CBlockIndex\n \t}\n };\n \n+arith_uint256 GetBlockProof(const CBlockIndex& block);\n+/** Return the time it would take to redo the work difference between from and to, assuming the current hashrate corresponds to the difficulty at tip, in seconds. */\n+int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params&);\n+\n /** Used to marshal pointers into hashes for db storage. */\n class CDiskBlockIndex : public CBlockIndex\n {\n@@ -296,8 +362,9 @@ class CDiskBlockIndex : public CBlockIndex\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n             READWRITE(VARINT(nVersion));\n \n         READWRITE(VARINT(nHeight));\n@@ -402,6 +469,9 @@ class CChain {\n \n     /** Find the last common block between this chain and a block index entry. */\n     const CBlockIndex *FindFork(const CBlockIndex *pindex) const;\n+\n+    /** Find the earliest block with timestamp equal or greater than the given. */\n+    CBlockIndex* FindEarliestAtLeast(int64_t nTime) const;\n };\n \n #endif // SYSCOIN_CHAIN_H"
      },
      {
        "sha": "a595f27e6e8f8e0a5c57130a42d8587c47c15778",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 428,
        "deletions": 204,
        "changes": 632,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,7 +1,6 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -12,6 +11,8 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n+#include \"arith_uint256.h\"\n+\n #include <assert.h>\n \n #include <boost/assign/list_of.hpp>\n@@ -23,82 +24,124 @@\n #include \"hash.h\"\n #include \"streams.h\"\n #include <time.h>\n+// SYSCOIN generate block\n+/**\n+* Main network\n+*/\n+/**\n+* What makes a good checkpoint block?\n+* + Is surrounded by blocks with reasonable timestamps\n+*   (no blocks before with a timestamp after, none after with\n+*    timestamp before)\n+* + Contains no strange transactions\n+*/\n+\n static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n-\tCMutableTransaction txNew;\n-\ttxNew.nVersion = 1;\n-\ttxNew.vin.resize(1);\n-\ttxNew.vout.resize(1);\n-\ttxNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << std::vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n-\ttxNew.vout[0].nValue = genesisReward;\n-\ttxNew.vout[0].scriptPubKey = genesisOutputScript;\n-\n-\tCBlock genesis;\n-\tgenesis.nTime = nTime;\n-\tgenesis.nBits = nBits;\n-\tgenesis.nNonce = nNonce;\n-\tgenesis.nVersion = nVersion;\n-\tgenesis.vtx.push_back(txNew);\n-\tgenesis.hashPrevBlock.SetNull();\n-\tgenesis.hashMerkleRoot = BlockMerkleRoot(genesis);\n-\treturn genesis;\n+    CMutableTransaction txNew;\n+    txNew.nVersion = 1;\n+    txNew.vin.resize(1);\n+    txNew.vout.resize(1);\n+    txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << std::vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n+    txNew.vout[0].nValue = genesisReward;\n+    txNew.vout[0].scriptPubKey = genesisOutputScript;\n+\n+    CBlock genesis;\n+    genesis.nTime    = nTime;\n+    genesis.nBits    = nBits;\n+    genesis.nNonce   = nNonce;\n+    genesis.nVersion = nVersion;\n+    genesis.vtx.push_back(MakeTransactionRef(std::move(txNew)));\n+    genesis.hashPrevBlock.SetNull();\n+    genesis.hashMerkleRoot = BlockMerkleRoot(genesis);\n+    return genesis;\n+}\n+\n+static CBlock CreateDevNetGenesisBlock(const uint256 &prevBlockHash, const std::string& devNetName, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n+{\n+    assert(!devNetName.empty());\n+\n+    CMutableTransaction txNew;\n+    txNew.nVersion = 4;\n+    txNew.vin.resize(1);\n+    txNew.vout.resize(1);\n+    // put height (BIP34) and devnet name into coinbase\n+    txNew.vin[0].scriptSig = CScript() << 1 << std::vector<unsigned char>(devNetName.begin(), devNetName.end());\n+    txNew.vout[0].nValue = genesisReward;\n+    txNew.vout[0].scriptPubKey = CScript() << OP_RETURN;\n+\n+    CBlock genesis;\n+    genesis.nTime    = nTime;\n+    genesis.nBits    = nBits;\n+    genesis.nNonce   = nNonce;\n+    genesis.nVersion = nVersion;\n+    genesis.vtx.push_back(MakeTransactionRef(std::move(txNew)));\n+    genesis.hashPrevBlock = prevBlockHash;\n+    genesis.hashMerkleRoot = BlockMerkleRoot(genesis);\n+    return genesis;\n+}\n+\n+/**\n+ * Build the genesis block. Note that the output of its generation\n+ * transaction cannot be spent since it did not originally exist in the\n+ * database.\n+ *\n+ * CBlock(hash=00000ffd590b14, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=e0028e, nTime=1390095618, nBits=1e0ffff0, nNonce=28917698, vtx=1)\n+ *   CTransaction(hash=e0028e, ver=1, vin.size=1, vout.size=1, nLockTime=0)\n+ *     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d01044c5957697265642030392f4a616e2f3230313420546865204772616e64204578706572696d656e7420476f6573204c6976653a204f76657273746f636b2e636f6d204973204e6f7720416363657074696e6720426974636f696e73)\n+ *     CTxOut(nValue=50.00000000, scriptPubKey=0xA9037BAC7050C479B121CF)\n+ *   vMerkleTree: e0028e\n+ */\n+static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n+{\n+    const char* pszTimestamp = \"Wired 09/Jan/2014 The Grand Experiment Goes Live: Overstock.com Is Now Accepting Syscoins\";\n+    const CScript genesisOutputScript = CScript() << ParseHex(\"040184710fa689ad5023690c80f3a49c8f13f8d45b8c857fbcbc8bc4a8e4d3eb4b10f4d4604fa08dce601aaf0f470216fe1b51850b4acf21b179c45070ac7b03a9\") << OP_CHECKSIG;\n+    return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);\n }\n-// SYSCOIN generate block\n // This will figure out a valid hash and Nonce if you're\n // creating a different genesis block:\n-static void GenerateGenesisBlock(CBlockHeader &genesisBlock, uint256 *phash)\n+static void GenerateGenesisBlock(CBlockHeader &genesisBlock, uint256 &phash)\n {\n-\t// Write the first 76 bytes of the block header to a double-SHA256 state.\n-\tgenesisBlock.nTime = time(NULL);\n-\tCHash256 hasher;\n-\tCDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n-\tss << genesisBlock;\n-\tassert(ss.size() == 80);\n-\thasher.Write((unsigned char*)&ss[0], 76);\n-\tarith_uint256 hashTarget = arith_uint256().SetCompact(genesisBlock.nBits);\n+\tarith_uint256 bnTarget;\n+\tbnTarget.SetCompact(genesisBlock.nBits);\n+\tuint32_t nOnce = 0;\n \twhile (true) {\n-\n-\n-\t\t// Write the last 4 bytes of the block header (the nonce) to a copy of\n-\t\t// the double-SHA256 state, and compute the result.\n-\t\tCHash256(hasher).Write((unsigned char*)&genesisBlock.nNonce, 4).Finalize((unsigned char*)phash);\n-\n-\t\t// Return the nonce if the hash has at least some zero bits,\n-\t\t// check if it has enough to reach the target\n-\t\tif (((uint16_t*)phash)[15] == 0 && UintToArith256(*phash) <= hashTarget)\n+\t\tgenesisBlock.nNonce = nOnce;\n+\t\tuint256 hash = genesisBlock.GetHash();\n+\t\tif (UintToArith256(hash) <= bnTarget) {\n+\t\t\tphash = hash;\n \t\t\tbreak;\n-\t\tgenesisBlock.nNonce++;\n-\t\tif (genesisBlock.nNonce == 0) {\n-\t\t\tprintf(\"NONCE WRAPPED, incrementing time\\n\");\n-\t\t\t++genesisBlock.nTime;\n \t\t}\n-\t\t// If nothing found after trying for a while, return -1\n-\t\tif ((genesisBlock.nNonce & 0xfff) == 0)\n-\t\t\tprintf(\"nonce %08X: hash = %s (target = %s)\\n\",\n-\t\t\t\tgenesisBlock.nNonce, (*phash).ToString().c_str(),\n-\t\t\t\thashTarget.ToString().c_str());\n+\t\tnOnce++;\n \t}\n \tprintf(\"genesis.nTime = %u \\n\", genesisBlock.nTime);\n \tprintf(\"genesis.nNonce = %u \\n\", genesisBlock.nNonce);\n-\tprintf(\"Generate hash = %s\\n\", (*phash).ToString().c_str());\n+\tprintf(\"Generate hash = %s\\n\", phash.ToString().c_str());\n \tprintf(\"genesis.hashMerkleRoot = %s\\n\", genesisBlock.hashMerkleRoot.ToString().c_str());\n }\n-/**\n-* Build the genesis block. Note that the output of its generation\n-* transaction cannot be spent since it did not originally exist in the\n-* database.\n-*\n-* CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n-*   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)\n-*     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)\n-*     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n-*   vMerkleTree: 4a5e1e\n-*/\n-static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n+\n+static CBlock FindDevNetGenesisBlock(const Consensus::Params& params, const CBlock &prevBlock, const CAmount& reward)\n {\n-\tconst char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-\tconst CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n-\treturn CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);\n+    std::string devNetName = GetDevNetName();\n+    assert(!devNetName.empty());\n+\n+    CBlock block = CreateDevNetGenesisBlock(prevBlock.GetHash(), devNetName.c_str(), prevBlock.nTime + 1, 0, prevBlock.nBits, prevBlock.nVersion, reward);\n+\n+    arith_uint256 bnTarget;\n+    bnTarget.SetCompact(block.nBits);\n+\n+    for (uint32_t nNonce = 0; nNonce < UINT32_MAX; nNonce++) {\n+        block.nNonce = nNonce;\n+\n+        uint256 hash = block.GetHash();\n+        if (UintToArith256(hash) <= bnTarget)\n+            return block;\n+    }\n+\n+    // This is very unlikely to happen as we start the devnet with a very low difficulty. In many cases even the first\n+    // iteration of the above loop will give a result already\n+    error(\"FindDevNetGenesisBlock: could not find devnet genesis block for %s\", devNetName);\n+    assert(false);\n }\n \n /**\n@@ -117,46 +160,63 @@ class CMainParams : public CChainParams {\n public:\n     CMainParams() {\n         strNetworkID = \"main\";\n-        consensus.nSubsidyHalvingInterval = 525600;\n+        consensus.nSubsidyHalvingInterval = 525600; // Note: actual number of blocks per calendar year with DGW v3 is ~200700 (for example 449750 - 249050)\n \t\tconsensus.nSeniorityInterval = 43800 * 4; // seniority increases every 4\n \t\tconsensus.nTotalSeniorityIntervals = 9;\n+        consensus.nMasternodePaymentsStartBlock = 2; // not true, but it's ok as long as it's less then nMasternodePaymentsIncreaseBlock\n+        consensus.nMasternodePaymentsIncreaseBlock = 2; // actual historical value\n+        consensus.nMasternodePaymentsIncreasePeriod = 576*30; // 17280 - actual historical value\n+        consensus.nInstantSendConfirmationsRequired = 6;\n         consensus.nInstantSendKeepLock = 24;\n         consensus.nBudgetPaymentsStartBlock = 0; // actual historical value\n-        consensus.nBudgetPaymentsCycleBlocks = 43800; // actual number of blocks per month\n+        consensus.nBudgetPaymentsCycleBlocks = 43800; // ~(60*24*30)/2.6, actual number of blocks per month is 200700 / 12 = 16725\n         consensus.nBudgetPaymentsWindowBlocks = 100;\n-        consensus.nBudgetProposalEstablishingTime = 60*60*24;\n-        consensus.nSuperblockStartBlock = 1;\n-        consensus.nSuperblockCycle = 43800; // actual number of blocks per month\n+        consensus.nSuperblockStartBlock = 0; // The block at which 12.1 goes live (end of final 12.0 budget cycle)\n+\t\tconsensus.nSuperblockStartHash = uint256();\n+        consensus.nSuperblockCycle = 43800; // ~(60*24*30)/2.6, actual number of blocks per month is 200700 / 12 = 16725\n         consensus.nGovernanceMinQuorum = 10;\n         consensus.nGovernanceFilterElements = 20000;\n         consensus.nMasternodeMinimumConfirmations = 15;\n-        consensus.nMajorityEnforceBlockUpgrade = 750;\n-        consensus.nMajorityRejectBlockOutdated = 950;\n-        consensus.nMajorityWindow = 1000;\n         consensus.BIP34Height = 0;\n-\t\tconsensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n-\t\tconsensus.powLimit = uint256S(\"0x00000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"); // ~uint256(0) >> 20;\n-\t\tconsensus.nPowTargetTimespan = 6 * 60 * 60; // 6h retarget\n-\t\tconsensus.nPowTargetSpacing = 1 * 60; // 1 minute\n+        consensus.BIP34Hash = uint256();\n+        consensus.BIP65Height = 0; // 00000000000076d8fcea02ec0963de4abfd01e771fec0863f960c2c64fe6f357\n+        consensus.BIP66Height = 0; // 00000000000b1fa2dfa312863570e13fae9ca7b5566cb27e55422620b469aefa\n+        consensus.DIP0001Height = 0;\n+        consensus.powLimit = uint256S(\"00000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"); // ~uint256(0) >> 20\n+        consensus.nPowTargetTimespan = 6 * 60 * 60; // 6h retarget\n+        consensus.nPowTargetSpacing = 1 * 60; // Syscoin: 1 minute\n \t\tconsensus.nAuxpowChainId = 0x1000;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n         consensus.fPowNoRetargeting = false;\n+        consensus.nPowKGWHeight = 15200;\n+        consensus.nPowDGWHeight = 0;\n         consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+\t\tconsensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+\t\tconsensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n+\t\tconsensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n         // Deployment of BIP68, BIP112, and BIP113.\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1486252800; // Feb 5th, 2017\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1517788800; // Feb 5th, 2018\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0; // Feb 5th, 2017\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 999999999999ULL; // Feb 5th, 2018\n+\n+        // Deployment of DIP0001\n+        consensus.vDeployments[Consensus::DEPLOYMENT_DIP0001].bit = 1;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_DIP0001].nStartTime = 0; // Oct 15th, 2017\n+        consensus.vDeployments[Consensus::DEPLOYMENT_DIP0001].nTimeout = 999999999999ULL; // Oct 15th, 2018\n+\n+        // Deployment of BIP147\n+        consensus.vDeployments[Consensus::DEPLOYMENT_BIP147].bit = 2;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_BIP147].nStartTime = 0; // Apr 23th, 2018\n+        consensus.vDeployments[Consensus::DEPLOYMENT_BIP147].nTimeout = 999999999999ULL; // Apr 23th, 2019\n+\n \n-\t\t// The best chain should have at least this much work.\n-\t\tconsensus.nMinimumChainWork = uint256S(\"0x00\");\n+        // The best chain should have at least this much work.\n+        consensus.nMinimumChainWork = uint256S(\"0x00\");\n \n-\t\t// By default assume that the signatures in ancestors of this block are valid.\n-\t\tconsensus.defaultAssumeValid = uint256S(\"0x00\");\n+        // By default assume that the signatures in ancestors of this block are valid.\n+        consensus.defaultAssumeValid = uint256S(\"0x00\");\n \n         /**\n          * The message start string is designed to be unlikely to occur in normal data.\n@@ -168,17 +228,16 @@ class CMainParams : public CChainParams {\n \t\tpchMessageStart[2] = 0xb4;\n \t\tpchMessageStart[3] = 0xd9;\n         vAlertPubKey = ParseHex(\"048240a8748a80a286b270ba126705ced4f2ce5a7847b3610ea3c06513150dade2a8512ed5ea86320824683fc0818f0ac019214973e677acd1244f6d0571fc5103\");\n-        nDefaultPort = 8369;\n-        nMaxTipAge = 6 * 60 * 60; // ~144 blocks behind -> 2 x fork detection time, was 24 * 60 * 60 in syscoin\n+\t\tnDefaultPort = 8369;\n \t\tnPruneAfterHeight = 1000000;\n \t\tuint256 hash;\n-\t\tgenesis = CreateGenesisBlock(1521568250, 6206162, 0x1e0ffff0, 1, 8.88 * COIN);\n+\t\tgenesis = CreateGenesisBlock(1524507506, 6952321, 0x1e0ffff0, 1, 8.88 * COIN);\n \t\t/*CBlockHeader genesisHeader = genesis.GetBlockHeader();\n \t\tGenerateGenesisBlock(genesisHeader, &hash);*/\n \n \t\tconsensus.hashGenesisBlock = genesis.GetHash();\n-\t\tassert(consensus.hashGenesisBlock == uint256S(\"0x0000006086e066c3e9df26340d6324982c031e1e8d37f66c2f4cb5d76a3db7da\"));\n-\t\tassert(genesis.hashMerkleRoot == uint256S(\"0x68519c429727677424e712d467bf835a88f52bc648dc491155a9da18b0ec3ffd\"));\n+\t\tassert(consensus.hashGenesisBlock == uint256S(\"0x00000cd4b4e6a465c66094bc7d18e828f0b8d56e6afc571fbe9e25e48338d441\"));\n+\t\tassert(genesis.hashMerkleRoot == uint256S(\"0x3fc1815124d408495fb860705d2188d84fcfeb5efc894f26fefc81a5cbdc49e8\"));\n \n \t\tvSeeds.push_back(CDNSSeedData(\"seed1.syscoin.org\", \"seed1.syscoin.org\"));\n \t\tvSeeds.push_back(CDNSSeedData(\"seed2.syscoin.org\", \"seed2.syscoin.org\"));\n@@ -198,61 +257,38 @@ class CMainParams : public CChainParams {\n \t\tbase58Prefixes[PUBKEY_ADDRESS_ZEC] = { 0x1C,0xB8 };\n \t\tbase58Prefixes[SCRIPT_ADDRESS_ZEC] = { 0x1C,0xBD };\n \t\tbase58Prefixes[SECRET_KEY_ZEC] = std::vector<unsigned char>(1, 128);\n-\n-\n-        // Syscoin BIP32 pubkeys start with 'xpub' (Syscoin defaults)\n-        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x88)(0xB2)(0x1E).convert_to_container<std::vector<unsigned char> >();\n-        // Syscoin BIP32 prvkeys start with 'xprv' (Syscoin defaults)\n-        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x88)(0xAD)(0xE4).convert_to_container<std::vector<unsigned char> >();\n+\t\t// Syscoin BIP32 pubkeys start with 'xpub' (Syscoin defaults)\n+\t\tbase58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x88)(0xB2)(0x1E).convert_to_container<std::vector<unsigned char> >();\n+\t\t// Syscoin BIP32 prvkeys start with 'xprv' (Syscoin defaults)\n+\t\tbase58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x88)(0xAD)(0xE4).convert_to_container<std::vector<unsigned char> >();\n \n         // Syscoin BIP44 coin type is '5'\n         nExtCoinType = 5;\n \n-        vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_main, pnSeed6_main + ARRAYLEN(pnSeed6_main));\n+        //vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_main, pnSeed6_main + ARRAYLEN(pnSeed6_main));\n \n         fMiningRequiresPeers = true;\n         fDefaultConsistencyChecks = false;\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n-        fTestnetToBeDeprecatedFieldRPC = false;\n+        fAllowMultipleAddressesFromGroup = false;\n+        fAllowMultiplePorts = false;\n \n         nPoolMaxTransactions = 3;\n         nFulfilledRequestExpireTime = 60*60; // fulfilled requests expire in 1 hour\n-        strSporkPubKey = \"04549ac134f694c0243f503e8c8a9a986f5de6610049c40b07816809b0d1d06a21b07be27b9bb555931773f62ba6cf35a25fd52f694d4e1106ccd237a7bb899fdd\";\n-\t\tcheckpointData = (CCheckpointData) {\n-\t\t\tboost::assign::map_list_of\n-\t\t\t(0, uint256S(\"0x00000284314053c52b605095a1ddb7926b4ef0f348a6923749b65cc4c85b8f8f\")),\n-\t\t\t\t0,\n-\t\t\t\t0,\n-\t\t\t\t0\n+\n+        strSporkAddress = \"SSQEoqCdCTRL9qZfgWfoj6tVsBQysxQ2dN\";\n+\t\tcheckpointData = {\n+\t\t\t{\n+\t\t\t\t{ 0, uint256S(\"00000cd4b4e6a465c66094bc7d18e828f0b8d56e6afc571fbe9e25e48338d441\") },\n+\t\t\t}\n+\t\t};\n+\n+\t\tchainTxData = ChainTxData{\n+\t\t\t0,\n+\t\t\t0,\n+\t\t\t0\n \t\t};\n-       /* checkpointData = (CCheckpointData) {\n-            boost::assign::map_list_of\n-            (  1500, uint256S(\"0x000000aaf0300f59f49bc3e970bad15c11f961fe2347accffff19d96ec9778e3\"))\n-            (  4991, uint256S(\"0x000000003b01809551952460744d5dbb8fcbd6cbae3c220267bf7fa43f837367\"))\n-            (  9918, uint256S(\"0x00000000213e229f332c0ffbe34defdaa9e74de87f2d8d1f01af8d121c3c170b\"))\n-            ( 16912, uint256S(\"0x00000000075c0d10371d55a60634da70f197548dbbfa4123e12abfcbc5738af9\"))\n-            ( 23912, uint256S(\"0x0000000000335eac6703f3b1732ec8b2f89c3ba3a7889e5767b090556bb9a276\"))\n-            ( 35457, uint256S(\"0x0000000000b0ae211be59b048df14820475ad0dd53b9ff83b010f71a77342d9f\"))\n-            ( 45479, uint256S(\"0x000000000063d411655d590590e16960f15ceea4257122ac430c6fbe39fbf02d\"))\n-            ( 55895, uint256S(\"0x0000000000ae4c53a43639a4ca027282f69da9c67ba951768a20415b6439a2d7\"))\n-            ( 68899, uint256S(\"0x0000000000194ab4d3d9eeb1f2f792f21bb39ff767cb547fe977640f969d77b7\"))\n-            ( 74619, uint256S(\"0x000000000011d28f38f05d01650a502cc3f4d0e793fbc26e2a2ca71f07dc3842\"))\n-            ( 75095, uint256S(\"0x0000000000193d12f6ad352a9996ee58ef8bdc4946818a5fec5ce99c11b87f0d\"))\n-            ( 88805, uint256S(\"0x00000000001392f1652e9bf45cd8bc79dc60fe935277cd11538565b4a94fa85f\"))\n-            ( 107996, uint256S(\"0x00000000000a23840ac16115407488267aa3da2b9bc843e301185b7d17e4dc40\"))\n-            ( 137993, uint256S(\"0x00000000000cf69ce152b1bffdeddc59188d7a80879210d6e5c9503011929c3c\"))\n-            ( 167996, uint256S(\"0x000000000009486020a80f7f2cc065342b0c2fb59af5e090cd813dba68ab0fed\"))\n-            ( 207992, uint256S(\"0x00000000000d85c22be098f74576ef00b7aa00c05777e966aff68a270f1e01a5\"))\n-            ( 312645, uint256S(\"0x0000000000059dcb71ad35a9e40526c44e7aae6c99169a9e7017b7d84b1c2daf\"))\n-            ( 407452, uint256S(\"0x000000000003c6a87e73623b9d70af7cd908ae22fee466063e4ffc20be1d2dbc\"))\n-            ( 523412, uint256S(\"0x000000000000e54f036576a10597e0e42cc22a5159ce572f999c33975e121d4d\"))\n-            ( 523930, uint256S(\"0x0000000000000bccdb11c2b1cfb0ecab452abf267d89b7f46eaf2d54ce6e652c\")),\n-            1471809614, // * UNIX timestamp of last checkpoint block\n-            1998064,    // * total number of transactions between genesis and last checkpoint\n-                        //   (the tx=... number in the SetBestChain debug.log lines)\n-            2800        // * estimated number of transactions per day after checkpoint\n-        };*/\n     }\n };\n static CMainParams mainParams;\n@@ -265,66 +301,83 @@ class CTestNetParams : public CChainParams {\n     CTestNetParams() {\n         strNetworkID = \"test\";\n         consensus.nSubsidyHalvingInterval = 525600;\n-\t\tconsensus.nSeniorityInterval = 60*24; // seniority increases every day\n+\t\tconsensus.nSeniorityInterval = 60 * 24; // seniority increases every day\n \t\tconsensus.nTotalSeniorityIntervals = 9;\n+        consensus.nMasternodePaymentsStartBlock = 2; // not true, but it's ok as long as it's less then nMasternodePaymentsIncreaseBlock\n+        consensus.nMasternodePaymentsIncreaseBlock = 2;\n+        consensus.nMasternodePaymentsIncreasePeriod = 10;\n+        consensus.nInstantSendConfirmationsRequired = 2;\n         consensus.nInstantSendKeepLock = 6;\n         consensus.nBudgetPaymentsStartBlock = 0;\n-        consensus.nBudgetPaymentsCycleBlocks = 60;\n+        consensus.nBudgetPaymentsCycleBlocks = 50;\n         consensus.nBudgetPaymentsWindowBlocks = 10;\n-        consensus.nBudgetProposalEstablishingTime = 60*20;\n         consensus.nSuperblockStartBlock = 1; // NOTE: Should satisfy nSuperblockStartBlock > nBudgetPeymentsStartBlock\n+        consensus.nSuperblockStartHash = uint256();\n         consensus.nSuperblockCycle = 60; // Superblocks can be issued hourly on testnet\n         consensus.nGovernanceMinQuorum = 1;\n         consensus.nGovernanceFilterElements = 500;\n         consensus.nMasternodeMinimumConfirmations = 1;\n-        consensus.nMajorityEnforceBlockUpgrade = 51;\n-        consensus.nMajorityRejectBlockOutdated = 75;\n-        consensus.nMajorityWindow = 100;\n-\t\tconsensus.BIP34Height = 0;\n-\t\tconsensus.BIP34Hash = uint256S(\"0x0000000023b3a96d3484e5abb3755c413e7d41500f8e2a5c3f0dd01299cd8ef8\");\n-\t\tconsensus.powLimit = uint256S(\"0x00000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"); // ~uint256(0) >> 20;\n-\t\tconsensus.nPowTargetTimespan = 6 * 60 * 60; // 6h retarget\n-\t\tconsensus.nPowTargetSpacing = 1 * 60; // 1 minute\n+        consensus.BIP34Height = 0;\n+        consensus.BIP34Hash = uint256();\n+        consensus.BIP65Height = 0; // 0000039cf01242c7f921dcb4806a5994bc003b48c1973ae0c89b67809c2bb2ab\n+        consensus.BIP66Height = 0; // 0000002acdd29a14583540cb72e1c5cc83783560e38fa7081495d474fe1671f7\n+        consensus.DIP0001Height = 5500;\n+        consensus.powLimit = uint256S(\"00000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"); // ~uint256(0) >> 20\n+\t\tconsensus.nPowTargetTimespan = 24 * 60 * 60; // Syscoin: 1 day\n+\t\tconsensus.nPowTargetSpacing = 2.5 * 60; // Syscoin: 2.5 minutes\n \t\tconsensus.nAuxpowChainId = 0x1000;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = false;\n+        consensus.nPowKGWHeight = 4001; // nPowKGWHeight >= nPowDGWHeight means \"no KGW\"\n+        consensus.nPowDGWHeight = 0;\n         consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0; // January 1, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 999999999999ULL; // December 31, 2008\n \n         // Deployment of BIP68, BIP112, and BIP113.\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1456790400; // March 1st, 2016\n-        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0; // September 28th, 2017\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 999999999999ULL; // September 28th, 2018\n+\n+        // Deployment of DIP0001\n+        consensus.vDeployments[Consensus::DEPLOYMENT_DIP0001].bit = 1;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_DIP0001].nStartTime = 0; // Sep 18th, 2017\n+        consensus.vDeployments[Consensus::DEPLOYMENT_DIP0001].nTimeout = 999999999999ULL; // Sep 18th, 2018\n \n-\t\t// The best chain should have at least this much work.\n-\t\tconsensus.nMinimumChainWork = uint256S(\"0x00\");\n+        // Deployment of BIP147\n+        consensus.vDeployments[Consensus::DEPLOYMENT_BIP147].bit = 2;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_BIP147].nStartTime = 0; // Feb 5th, 2018\n+        consensus.vDeployments[Consensus::DEPLOYMENT_BIP147].nTimeout = 999999999999ULL; // Feb 5th, 2019\n \n-\t\t// By default assume that the signatures in ancestors of this block are valid.\n-\t\tconsensus.defaultAssumeValid = uint256S(\"0x00\");\n+\n+        // The best chain should have at least this much work.\n+        consensus.nMinimumChainWork = uint256S(\"0x00\");\n+\n+        // By default assume that the signatures in ancestors of this block are valid.\n+        consensus.defaultAssumeValid = uint256S(\"0x00\");\n \n         pchMessageStart[0] = 0xce;\n         pchMessageStart[1] = 0xe2;\n         pchMessageStart[2] = 0xca;\n         pchMessageStart[3] = 0xff;\n         vAlertPubKey = ParseHex(\"04517d8a699cb43d3938d7b24faaff7cda448ca4ea267723ba614784de661949bf632d6304316b244646dea079735b9a6fc4af804efb4752075b9fe2245e14e412\");\n         nDefaultPort = 18369;\n-        nMaxTipAge = 0x7fffffff; // allow mining on top of old blocks for testnet\n         nPruneAfterHeight = 1000;\n \n-\t\tgenesis = CreateGenesisBlock(1521568716, 7736744, 0x1e0ffff0, 1, 8.88 * COIN);\n+\t\tgenesis = CreateGenesisBlock(1524507764, 9059903, 0x1e0ffff0, 1, 8.88 * COIN);\n \t\t/*\n \t\tuint256 hash;\n \t\tCBlockHeader genesisHeader = genesis.GetBlockHeader();\n \t\tGenerateGenesisBlock(genesisHeader, &hash);*/\n \t\tconsensus.hashGenesisBlock = genesis.GetHash();\n-\t\tassert(consensus.hashGenesisBlock == uint256S(\"0x00000d070aa618e6549464d948b37e92df680312a38e22f4c14fa9e0c3ab494f\"));\n-\t\tassert(genesis.hashMerkleRoot == uint256S(\"0x68519c429727677424e712d467bf835a88f52bc648dc491155a9da18b0ec3ffd\"));\n+\t\tassert(consensus.hashGenesisBlock == uint256S(\"0x000007510081c30331afdee1453991ef18663c13e14ff9caa1ae5b30fa8c35bc\"));\n+\t\tassert(genesis.hashMerkleRoot == uint256S(\"0x3fc1815124d408495fb860705d2188d84fcfeb5efc894f26fefc81a5cbdc49e8\"));\n \n         vFixedSeeds.clear();\n         vSeeds.clear();\n+  \n \n \t\tbase58Prefixes[PUBKEY_ADDRESS_SYS] = std::vector<unsigned char>(1, 65);\n \t\tbase58Prefixes[SCRIPT_ADDRESS_SYS] = std::vector<unsigned char>(1, 196);\n@@ -337,69 +390,207 @@ class CTestNetParams : public CChainParams {\n \t\tbase58Prefixes[PUBKEY_ADDRESS_ZEC] = std::vector<unsigned char>(0x1C, 0xB8);\n \t\tbase58Prefixes[SCRIPT_ADDRESS_ZEC] = std::vector<unsigned char>(0x1C, 0xBD);\n \t\tbase58Prefixes[SECRET_KEY_ZEC] = std::vector<unsigned char>(1, 239);\n-        // Testnet Syscoin BIP32 pubkeys start with 'tpub' (Syscoin defaults)\n-        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n-        // Testnet Syscoin BIP32 prvkeys start with 'tprv' (Syscoin defaults)\n-        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n \n         // Testnet Syscoin BIP44 coin type is '1' (All coin's testnet default)\n         nExtCoinType = 1;\n \n-        vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_test, pnSeed6_test + ARRAYLEN(pnSeed6_test));\n \n         fMiningRequiresPeers = true;\n         fDefaultConsistencyChecks = false;\n         fRequireStandard = false;\n         fMineBlocksOnDemand = false;\n-        fTestnetToBeDeprecatedFieldRPC = true;\n+        fAllowMultipleAddressesFromGroup = false;\n+        fAllowMultiplePorts = false;\n \n         nPoolMaxTransactions = 3;\n         nFulfilledRequestExpireTime = 5*60; // fulfilled requests expire in 5 minutes\n-        strSporkPubKey = \"046f78dcf911fbd61910136f7f0f8d90578f68d0b3ac973b5040fb7afb501b5939f39b108b0569dca71488f5bbf498d92e4d1194f6f941307ffd95f75e76869f0e\";\n-\n-\t\tcheckpointData = (CCheckpointData) {\n-\t\t\tboost::assign::map_list_of\n-\t\t\t(0, uint256S(\"0x00000790e2439c71e102414f0c42b1107ac1fd661b802577f502cc0720d86e73\")),\n-\t\t\t\t0,\n-\t\t\t\t0,\n-\t\t\t\t0\n+\n+        strSporkAddress = \"TXgVDiV1amUYfL8xUETVZ2nzAnPax1nEEs\";\n+\n+\t\tcheckpointData = {\n+\t\t\t{\n+\t\t\t\t{ 0, uint256S(\"000007510081c30331afdee1453991ef18663c13e14ff9caa1ae5b30fa8c35bc\") },\n+\t\t\t}\n \t\t};\n \n+\t\tchainTxData = ChainTxData{\n+\t\t\t0,\n+\t\t\t0,\n+\t\t\t0\n+\t\t};\n+\n+\t\t\n+\n     }\n };\n static CTestNetParams testNetParams;\n \n+/**\n+ * Devnet\n+ */\n+class CDevNetParams : public CChainParams {\n+public:\n+    CDevNetParams() {\n+        strNetworkID = \"dev\";\n+        consensus.nSubsidyHalvingInterval = 210240;\n+        consensus.nMasternodePaymentsStartBlock = 4010; // not true, but it's ok as long as it's less then nMasternodePaymentsIncreaseBlock\n+        consensus.nMasternodePaymentsIncreaseBlock = 4030;\n+        consensus.nMasternodePaymentsIncreasePeriod = 10;\n+        consensus.nInstantSendConfirmationsRequired = 2;\n+        consensus.nInstantSendKeepLock = 6;\n+        consensus.nBudgetPaymentsStartBlock = 4100;\n+        consensus.nBudgetPaymentsCycleBlocks = 50;\n+        consensus.nBudgetPaymentsWindowBlocks = 10;\n+        consensus.nSuperblockStartBlock = 4200; // NOTE: Should satisfy nSuperblockStartBlock > nBudgetPeymentsStartBlock\n+        consensus.nSuperblockStartHash = uint256(); // do not check this on devnet\n+        consensus.nSuperblockCycle = 60; // Superblocks can be issued hourly on devnet\n+        consensus.nGovernanceMinQuorum = 1;\n+        consensus.nGovernanceFilterElements = 500;\n+        consensus.nMasternodeMinimumConfirmations = 1;\n+        consensus.BIP34Height = 2; // BIP34 activated immediately on devnet\n+        consensus.BIP65Height = 2; // BIP65 activated immediately on devnet\n+        consensus.BIP66Height = 2; // BIP66 activated immediately on devnet\n+        consensus.DIP0001Height = 2; // DIP0001 activated immediately on devnet\n+        consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"); // ~uint256(0) >> 1\n+        consensus.nPowTargetTimespan = 6 * 60 * 60; // Syscoin: 6 hours\n+        consensus.nPowTargetSpacing = 1 * 60; // Syscoin: 1 minute\n+\t\tconsensus.nAuxpowChainId = 0x1000;\n+        consensus.fPowAllowMinDifficultyBlocks = true;\n+        consensus.fPowNoRetargeting = false;\n+        consensus.nPowKGWHeight = 4001; // nPowKGWHeight >= nPowDGWHeight means \"no KGW\"\n+        consensus.nPowDGWHeight = 0;\n+        consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains\n+        consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0; // January 1, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 999999999999ULL; // December 31, 2008\n+\n+        // Deployment of BIP68, BIP112, and BIP113.\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0; // September 28th, 2017\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 999999999999ULL; // September 28th, 2018\n+\n+        // Deployment of DIP0001\n+        consensus.vDeployments[Consensus::DEPLOYMENT_DIP0001].bit = 1;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_DIP0001].nStartTime = 0; // Sep 18th, 2017\n+        consensus.vDeployments[Consensus::DEPLOYMENT_DIP0001].nTimeout = 999999999999ULL; // Sep 18th, 2018\n+\n+        // Deployment of BIP147\n+        consensus.vDeployments[Consensus::DEPLOYMENT_BIP147].bit = 2;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_BIP147].nStartTime = 0; // Feb 5th, 2018\n+        consensus.vDeployments[Consensus::DEPLOYMENT_BIP147].nTimeout = 999999999999ULL; // Feb 5th, 2019\n+\n+        // The best chain should have at least this much work.\n+        consensus.nMinimumChainWork = uint256S(\"0x000000000000000000000000000000000000000000000000000000000000000\");\n+\n+        // By default assume that the signatures in ancestors of this block are valid.\n+        consensus.defaultAssumeValid = uint256S(\"0x000000000000000000000000000000000000000000000000000000000000000\");\n+\n+        pchMessageStart[0] = 0xe2;\n+        pchMessageStart[1] = 0xca;\n+        pchMessageStart[2] = 0xff;\n+        pchMessageStart[3] = 0xce;\n+        vAlertPubKey = ParseHex(\"04517d8a699cb43d3938d7b24faaff7cda448ca4ea267723ba614784de661949bf632d6304316b244646dea079735b9a6fc4af804efb4752075b9fe2245e14e412\");\n+        nDefaultPort = 19999;\n+        nPruneAfterHeight = 1000;\n+\n+        genesis = CreateGenesisBlock(1417713337, 1096447, 0x207fffff, 1, 50 * COIN);\n+        consensus.hashGenesisBlock = genesis.GetHash();\n+        assert(consensus.hashGenesisBlock == uint256S(\"0x000008ca1832a4baf228eb1553c03d3a2c8e02399550dd6ea8d65cec3ef23d2e\"));\n+        assert(genesis.hashMerkleRoot == uint256S(\"0x3fc1815124d408495fb860705d2188d84fcfeb5efc894f26fefc81a5cbdc49e8\"));\n+\n+        devnetGenesis = FindDevNetGenesisBlock(consensus, genesis, 50 * COIN);\n+        consensus.hashDevnetGenesisBlock = devnetGenesis.GetHash();\n+\n+        vFixedSeeds.clear();\n+        vSeeds.clear();\n+        //vSeeds.push_back(CDNSSeedData(\"syscoinevo.org\",  \"devnet-seed.syscoinevo.org\"));\n+\n+\t\tbase58Prefixes[PUBKEY_ADDRESS_SYS] = std::vector<unsigned char>(1, 65);\n+\t\tbase58Prefixes[SCRIPT_ADDRESS_SYS] = std::vector<unsigned char>(1, 196);\n+\t\tbase58Prefixes[SECRET_KEY_SYS] = std::vector<unsigned char>(1, 239);\n+\n+\t\tbase58Prefixes[PUBKEY_ADDRESS_BTC] = std::vector<unsigned char>(1, 111);\n+\t\tbase58Prefixes[SCRIPT_ADDRESS_BTC] = std::vector<unsigned char>(1, 196);\n+\t\tbase58Prefixes[SECRET_KEY_BTC] = std::vector<unsigned char>(1, 239);\n+\n+\t\tbase58Prefixes[PUBKEY_ADDRESS_ZEC] = { 0x1C,0xB8 };\n+\t\tbase58Prefixes[SCRIPT_ADDRESS_ZEC] = { 0x1C,0xBD };\n+\t\tbase58Prefixes[SECRET_KEY_ZEC] = std::vector<unsigned char>(1, 239);\n+\t\t// Regtest Syscoin BIP32 pubkeys start with 'tpub' (Syscoin defaults)\n+\t\tbase58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n+\t\t// Regtest Syscoin BIP32 prvkeys start with 'tprv' (Syscoin defaults)\n+\t\tbase58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n+\n+        // Testnet Syscoin BIP44 coin type is '1' (All coin's testnet default)\n+        nExtCoinType = 1;\n+\n+        fMiningRequiresPeers = true;\n+        fDefaultConsistencyChecks = false;\n+        fRequireStandard = false;\n+        fMineBlocksOnDemand = false;\n+        fAllowMultipleAddressesFromGroup = true;\n+        fAllowMultiplePorts = false;\n+\n+        nPoolMaxTransactions = 3;\n+        nFulfilledRequestExpireTime = 5*60; // fulfilled requests expire in 5 minutes\n+\n+        strSporkAddress = \"TCSJVL68KFq9FdbfxB2KhTcWp6rHD7vePs\";\n+\n+\t\tcheckpointData = {\n+\t\t\t{\n+\t\t\t\t{ 0, uint256S(\"000008ca1832a4baf228eb1553c03d3a2c8e02399550dd6ea8d65cec3ef23d2e\") },\n+\t\t\t}\n+\t\t};\n+\n+\t\tchainTxData = ChainTxData{\n+\t\t\t0,\n+\t\t\t0,\n+\t\t\t0\n+\t\t};\n+    }\n+};\n+static CDevNetParams *devNetParams;\n+\n+\n /**\n  * Regression test\n  */\n class CRegTestParams : public CChainParams {\n public:\n     CRegTestParams() {\n-        strNetworkID = \"regtest\";\n+\t\tstrNetworkID = \"regtest\";\n \t\tconsensus.nSeniorityInterval = 60; // seniority increases every hour\n-\t\tconsensus.nTotalSeniorityIntervals = 9;\n-        consensus.nSubsidyHalvingInterval = 1500;\n+\t\tconsensus.nTotalSeniorityIntervals = 9;;\n+\n+        consensus.nSubsidyHalvingInterval = 150;\n+        consensus.nMasternodePaymentsStartBlock = 2;\n+        consensus.nMasternodePaymentsIncreaseBlock = 350;\n+        consensus.nMasternodePaymentsIncreasePeriod = 10;\n+        consensus.nInstantSendConfirmationsRequired = 2;\n         consensus.nInstantSendKeepLock = 6;\n         consensus.nBudgetPaymentsStartBlock = 0;\n         consensus.nBudgetPaymentsCycleBlocks = 50;\n         consensus.nBudgetPaymentsWindowBlocks = 10;\n-        consensus.nBudgetProposalEstablishingTime = 60*20;\n         consensus.nSuperblockStartBlock = 1;\n+        consensus.nSuperblockStartHash = uint256(); // do not check this on regtest\n         consensus.nSuperblockCycle = 10;\n         consensus.nGovernanceMinQuorum = 1;\n         consensus.nGovernanceFilterElements = 100;\n         consensus.nMasternodeMinimumConfirmations = 1;\n-        consensus.nMajorityEnforceBlockUpgrade = 750;\n-        consensus.nMajorityRejectBlockOutdated = 950;\n-        consensus.nMajorityWindow = 1000;\n-\t\tconsensus.BIP34Height = 40000; // BIP34 has not activated on regtest (far in the future so block v1 are not rejected in tests)\n-\t\tconsensus.BIP34Hash = uint256();\n-\t\tconsensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n-\t\tconsensus.nPowTargetTimespan = 6 * 60 * 60; // 6h\n-\t\tconsensus.nPowTargetSpacing = 1 * 60; // 1 minute\n+        consensus.BIP34Height = 0; // BIP34 has not activated on regtest (far in the future so block v1 are not rejected in tests)\n+        consensus.BIP34Hash = uint256();\n+        consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in rpc activation tests)\n+        consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in rpc activation tests)\n+        consensus.DIP0001Height = 2000;\n+        consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"); // ~uint256(0) >> 1\n+        consensus.nPowTargetTimespan = 6 * 60 * 60; // Syscoin: 6 hour\n+        consensus.nPowTargetSpacing = 1 * 60; // Syscoin: 1 minute\n \t\tconsensus.nAuxpowChainId = 0x1000;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = true;\n+        consensus.nPowKGWHeight = 15200; // same as mainnet\n+        consensus.nPowDGWHeight = 0; // same as mainnet\n         consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n@@ -408,48 +599,52 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 999999999999ULL;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_DIP0001].bit = 1;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_DIP0001].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_DIP0001].nTimeout = 999999999999ULL;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_BIP147].bit = 2;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_BIP147].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_BIP147].nTimeout = 999999999999ULL;\n \n-\t\t// The best chain should have at least this much work.\n-\t\tconsensus.nMinimumChainWork = uint256S(\"0x00\");\n+        // The best chain should have at least this much work.\n+        consensus.nMinimumChainWork = uint256S(\"0x00\");\n \n-\t\t// By default assume that the signatures in ancestors of this block are valid.\n-\t\tconsensus.defaultAssumeValid = uint256S(\"0x00\");\n+        // By default assume that the signatures in ancestors of this block are valid.\n+        consensus.defaultAssumeValid = uint256S(\"0x00\");\n \n \t\tpchMessageStart[0] = 0xfa;\n \t\tpchMessageStart[1] = 0xbf;\n \t\tpchMessageStart[2] = 0xb5;\n \t\tpchMessageStart[3] = 0xda;\n-        nMaxTipAge = 6 * 60 * 60; // ~144 blocks behind -> 2 x fork detection time, was 24 * 60 * 60 in syscoin\n-        nDefaultPort = 18444;\n+        nDefaultPort = 18369;\n         nPruneAfterHeight = 1000;\n \n-\t\tgenesis = CreateGenesisBlock(1521568774, 6882848, 0x207fffff, 1, 8.88 * COIN);\n+\t\tgenesis = CreateGenesisBlock(1524508008, 6887866, 0x207fffff, 1, 8.88 * COIN);\n \t\t/*\n \t\tuint256 hash;\n \t\tCBlockHeader genesisHeader = genesis.GetBlockHeader();\n \t\tGenerateGenesisBlock(genesisHeader, &hash);*/\n \t\tconsensus.hashGenesisBlock = genesis.GetHash();\n-\t\tassert(consensus.hashGenesisBlock == uint256S(\"0x0000759a55207eef80469f0ab3ff14308783f53b7635b66ac63319dab8dd5637\"));\n-\t\tassert(genesis.hashMerkleRoot == uint256S(\"0x68519c429727677424e712d467bf835a88f52bc648dc491155a9da18b0ec3ffd\"));\n+\t\tassert(consensus.hashGenesisBlock == uint256S(\"0x0000140aa52b536eed2f54cb9590a959672c131bb5de1d934024d6c25c64df4f\"));\n+\t\tassert(genesis.hashMerkleRoot == uint256S(\"0x3fc1815124d408495fb860705d2188d84fcfeb5efc894f26fefc81a5cbdc49e8\"));\n \n-        vFixedSeeds.clear(); //! Regtest mode doesn't have any fixed seeds.\n-        vSeeds.clear();  //! Regtest mode doesn't have any DNS seeds.\n+        vFixedSeeds.clear(); //!< Regtest mode doesn't have any fixed seeds.\n+        vSeeds.clear();      //!< Regtest mode doesn't have any DNS seeds.\n \n         fMiningRequiresPeers = false;\n         fDefaultConsistencyChecks = false;\n         fRequireStandard = false;\n         fMineBlocksOnDemand = true;\n-        fTestnetToBeDeprecatedFieldRPC = false;\n+        fAllowMultipleAddressesFromGroup = true;\n+        fAllowMultiplePorts = true;\n \n         nFulfilledRequestExpireTime = 5*60; // fulfilled requests expire in 5 minutes\n \n-        checkpointData = (CCheckpointData){\n-            boost::assign::map_list_of\n-            ( 0, uint256S(\"0x00001b7a561561ce82a5e2e7df4b500fba958e1d63ff3261729874441f64ba96\")),\n-            0,\n-            0,\n-            0\n-        };\n+        // privKey: cPPpaK9LCXjGGXVJUqcrtEMVQw5tALMuN3WsVuPCWFf9tswYYDvY\n+        strSporkAddress = \"TCSJVL68KFq9FdbfxB2KhTcWp6rHD7vePs\";\n+\n+   \n+\n \t\tbase58Prefixes[PUBKEY_ADDRESS_SYS] = std::vector<unsigned char>(1, 65);\n \t\tbase58Prefixes[SCRIPT_ADDRESS_SYS] = std::vector<unsigned char>(1, 196);\n \t\tbase58Prefixes[SECRET_KEY_SYS] = std::vector<unsigned char>(1, 239);\n@@ -461,14 +656,31 @@ class CRegTestParams : public CChainParams {\n \t\tbase58Prefixes[PUBKEY_ADDRESS_ZEC] = { 0x1C,0xB8 };\n \t\tbase58Prefixes[SCRIPT_ADDRESS_ZEC] = { 0x1C,0xBD };\n \t\tbase58Prefixes[SECRET_KEY_ZEC] = std::vector<unsigned char>(1, 239);\n-        // Regtest Syscoin BIP32 pubkeys start with 'tpub' (Syscoin defaults)\n-        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n-        // Regtest Syscoin BIP32 prvkeys start with 'tprv' (Syscoin defaults)\n-        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n+\t\t// Regtest Syscoin BIP32 pubkeys start with 'tpub' (Syscoin defaults)\n+\t\tbase58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n+\t\t// Regtest Syscoin BIP32 prvkeys start with 'tprv' (Syscoin defaults)\n+\t\tbase58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n \n         // Regtest Syscoin BIP44 coin type is '1' (All coin's testnet default)\n         nExtCoinType = 1;\n+\t\tcheckpointData = {\n+\t\t\t{\n+\t\t\t\t{ 0, uint256S(\"0000140aa52b536eed2f54cb9590a959672c131bb5de1d934024d6c25c64df4f\") },\n+\t\t\t}\n+\t\t};\n+\n+\t\tchainTxData = ChainTxData{\n+\t\t\t0,\n+\t\t\t0,\n+\t\t\t0\n+\t\t};\n    }\n+\n+    void UpdateBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n+    {\n+        consensus.vDeployments[d].nStartTime = nStartTime;\n+        consensus.vDeployments[d].nTimeout = nTimeout;\n+    }\n };\n static CRegTestParams regTestParams;\n \n@@ -485,14 +697,26 @@ CChainParams& Params(const std::string& chain)\n             return mainParams;\n     else if (chain == CBaseChainParams::TESTNET)\n             return testNetParams;\n-    else if (chain == CBaseChainParams::REGTEST)\n+    else if (chain == CBaseChainParams::DEVNET) {\n+            assert(devNetParams);\n+            return *devNetParams;\n+    } else if (chain == CBaseChainParams::REGTEST)\n             return regTestParams;\n     else\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n void SelectParams(const std::string& network)\n {\n+    if (network == CBaseChainParams::DEVNET) {\n+        devNetParams = new CDevNetParams();\n+    }\n+\n     SelectBaseParams(network);\n     pCurrentParams = &Params(network);\n }\n+\n+void UpdateRegtestBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n+{\n+    regTestParams.UpdateBIP9Parameters(d, nStartTime, nTimeout);\n+}"
      },
      {
        "sha": "711ec9005874b00783ad5740201fa5f95a12082e",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 27,
        "deletions": 17,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -16,7 +15,8 @@\n \n struct CDNSSeedData {\n     std::string name, host;\n-    CDNSSeedData(const std::string &strName, const std::string &strHost) : name(strName), host(strHost) {}\n+    bool supportsServiceBitsFiltering;\n+    CDNSSeedData(const std::string &strName, const std::string &strHost, bool supportsServiceBitsFilteringIn = false) : name(strName), host(strHost), supportsServiceBitsFiltering(supportsServiceBitsFilteringIn) {}\n };\n \n struct SeedSpec6 {\n@@ -28,9 +28,12 @@ typedef std::map<int, uint256> MapCheckpoints;\n \n struct CCheckpointData {\n     MapCheckpoints mapCheckpoints;\n-    int64_t nTimeLastCheckpoint;\n-    int64_t nTransactionsLastCheckpoint;\n-    double fTransactionsPerDay;\n+};\n+\n+struct ChainTxData {\n+    int64_t nTime;\n+    int64_t nTxCount;\n+    double dTxRate;\n };\n \n /**\n@@ -43,7 +46,6 @@ struct CCheckpointData {\n class CChainParams\n {\n public:\n-\t// SYSCOIN allow old SYSCOIN address scheme\n \tenum Base58Type {\n \t\tPUBKEY_ADDRESS_SYS,\n \t\tPUBKEY_ADDRESS_BTC,\n@@ -72,55 +74,58 @@ class CChainParams\n     int GetDefaultPort() const { return nDefaultPort; }\n \n     const CBlock& GenesisBlock() const { return genesis; }\n+    const CBlock& DevNetGenesisBlock() const { return devnetGenesis; }\n     /** Make miner wait to have peers to avoid wasting work */\n     bool MiningRequiresPeers() const { return fMiningRequiresPeers; }\n     /** Default value for -checkmempool and -checkblockindex argument */\n     bool DefaultConsistencyChecks() const { return fDefaultConsistencyChecks; }\n     /** Policy: Filter transactions that do not match well-defined patterns */\n     bool RequireStandard() const { return fRequireStandard; }\n-    int64_t MaxTipAge() const { return nMaxTipAge; }\n-\tint64_t DelayGetHeadersTime() const { return nDelayGetHeadersTime; }\n     uint64_t PruneAfterHeight() const { return nPruneAfterHeight; }\n     /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n-    /** In the future use NetworkIDString() for RPC fields */\n-    bool TestnetToBeDeprecatedFieldRPC() const { return fTestnetToBeDeprecatedFieldRPC; }\n+    /** Allow multiple addresses to be selected from the same network group (e.g. 192.168.x.x) */\n+    bool AllowMultipleAddressesFromGroup() const { return fAllowMultipleAddressesFromGroup; }\n+    /** Allow nodes with the same address and multiple ports */\n+    bool AllowMultiplePorts() const { return fAllowMultiplePorts; }\n     /** Return the BIP70 network string (main, test or regtest) */\n     std::string NetworkIDString() const { return strNetworkID; }\n     const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n     int ExtCoinType() const { return nExtCoinType; }\n     const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n     const CCheckpointData& Checkpoints() const { return checkpointData; }\n+    const ChainTxData& TxData() const { return chainTxData; }\n     int PoolMaxTransactions() const { return nPoolMaxTransactions; }\n     int FulfilledRequestExpireTime() const { return nFulfilledRequestExpireTime; }\n-    std::string SporkPubKey() const { return strSporkPubKey; }\n+    const std::string& SporkAddress() const { return strSporkAddress; }\n protected:\n     CChainParams() {}\n-\tint64_t nDelayGetHeadersTime;\n+\n     Consensus::Params consensus;\n     CMessageHeader::MessageStartChars pchMessageStart;\n     //! Raw pub key bytes for the broadcast alert signing key.\n     std::vector<unsigned char> vAlertPubKey;\n     int nDefaultPort;\n-    long nMaxTipAge;\n     uint64_t nPruneAfterHeight;\n     std::vector<CDNSSeedData> vSeeds;\n     std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];\n     int nExtCoinType;\n     std::string strNetworkID;\n     CBlock genesis;\n+    CBlock devnetGenesis;\n     std::vector<SeedSpec6> vFixedSeeds;\n     bool fMiningRequiresPeers;\n     bool fDefaultConsistencyChecks;\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n-    bool fTestnetToBeDeprecatedFieldRPC;\n+    bool fAllowMultipleAddressesFromGroup;\n+    bool fAllowMultiplePorts;\n     CCheckpointData checkpointData;\n+    ChainTxData chainTxData;\n     int nPoolMaxTransactions;\n     int nFulfilledRequestExpireTime;\n-    std::string strSporkPubKey;\n-    std::string strMasternodePaymentsPubKey;\n+    std::string strSporkAddress;\n };\n \n /**\n@@ -140,4 +145,9 @@ CChainParams& Params(const std::string& chain);\n  */\n void SelectParams(const std::string& chain);\n \n+/**\n+ * Allows modifying the BIP9 regtest parameters.\n+ */\n+void UpdateRegtestBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n+\n #endif // SYSCOIN_CHAINPARAMS_H"
      },
      {
        "sha": "38fc3af12cb7e6f59bc82386effacef4c94163e6",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 5,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -13,12 +12,14 @@\n \n const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n+const std::string CBaseChainParams::DEVNET = \"dev\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n \n void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n {\n     strUsage += HelpMessageGroup(_(\"Chain selection options:\"));\n     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test chain\"));\n+    strUsage += HelpMessageOpt(\"-devnet=<name>\", _(\"Use devnet chain with provided name\"));\n     if (debugHelp) {\n         strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                                    \"This is intended for regression testing tools and app development.\");\n@@ -52,6 +53,20 @@ class CBaseTestNetParams : public CBaseChainParams\n };\n static CBaseTestNetParams testNetParams;\n \n+/**\n+ * Devnet\n+ */\n+class CBaseDevNetParams : public CBaseChainParams\n+{\n+public:\n+    CBaseDevNetParams(const std::string &dataDir)\n+    {\n+        nRPCPort = 19998;\n+        strDataDir = dataDir;\n+    }\n+};\n+static CBaseDevNetParams *devNetParams;\n+\n /*\n  * Regression test\n  */\n@@ -80,31 +95,53 @@ CBaseChainParams& BaseParams(const std::string& chain)\n         return mainParams;\n     else if (chain == CBaseChainParams::TESTNET)\n         return testNetParams;\n-    else if (chain == CBaseChainParams::REGTEST)\n+    else if (chain == CBaseChainParams::DEVNET) {\n+        assert(devNetParams);\n+        return *devNetParams;\n+    } else if (chain == CBaseChainParams::REGTEST)\n         return regTestParams;\n     else\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n void SelectBaseParams(const std::string& chain)\n {\n+    if (chain == CBaseChainParams::DEVNET) {\n+        std::string devNetName = GetDevNetName();\n+        assert(!devNetName.empty());\n+        devNetParams = new CBaseDevNetParams(devNetName);\n+    }\n+\n     pCurrentBaseParams = &BaseParams(chain);\n }\n \n std::string ChainNameFromCommandLine()\n {\n     bool fRegTest = GetBoolArg(\"-regtest\", false);\n+    bool fDevNet = IsArgSet(\"-devnet\");\n     bool fTestNet = GetBoolArg(\"-testnet\", false);\n \n-    if (fTestNet && fRegTest)\n-        throw std::runtime_error(\"Invalid combination of -regtest and -testnet.\");\n+    int nameParamsCount = (fRegTest ? 1 : 0) + (fDevNet ? 1 : 0) + (fTestNet ? 1 : 0);\n+    if (nameParamsCount > 1)\n+        throw std::runtime_error(\"Only one of -regtest, -testnet or -devnet can be used.\");\n+\n+    if (fDevNet)\n+        return CBaseChainParams::DEVNET;\n     if (fRegTest)\n         return CBaseChainParams::REGTEST;\n     if (fTestNet)\n         return CBaseChainParams::TESTNET;\n     return CBaseChainParams::MAIN;\n }\n \n+std::string GetDevNetName()\n+{\n+    // This function should never be called for non-devnets\n+    assert(IsArgSet(\"-devnet\"));\n+    std::string devNetName = GetArg(\"-devnet\", \"\");\n+    return \"devnet\" + (devNetName.empty() ? \"\" : \"-\" + devNetName);\n+}\n+\n bool AreBaseParamsConfigured()\n {\n     return pCurrentBaseParams != NULL;"
      },
      {
        "sha": "f80767df4a627e73c5638c3c4c6f81199fdae132",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -19,6 +18,7 @@ class CBaseChainParams\n     /** BIP70 chain name strings (main, test or regtest) */\n     static const std::string MAIN;\n     static const std::string TESTNET;\n+    static const std::string DEVNET;\n     static const std::string REGTEST;\n \n     const std::string& DataDir() const { return strDataDir; }\n@@ -54,6 +54,8 @@ void SelectBaseParams(const std::string& chain);\n  */\n std::string ChainNameFromCommandLine();\n \n+std::string GetDevNetName();\n+\n /**\n  * Return true if SelectBaseParamsFromCommandLine() has been called to select\n  * a network."
      },
      {
        "sha": "1f8f6a6aa9a82232e93fc29cd6c19250c45fac43",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 306,
        "deletions": 21,
        "changes": 327,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,33 +1,318 @@\n-#ifndef SYSCOIN_CHAINPARAMSSEEDS_H\n-#define SYSCOIN_CHAINPARAMSSEEDS_H\n+#ifndef SYS_CHAINPARAMSSEEDS_H\n+#define SYS_CHAINPARAMSSEEDS_H\n /**\n  * List of fixed seed nodes for the syscoin network\n  * AUTOGENERATED by contrib/seeds/generate-seeds.py\n  *\n  * Each line contains a 16-byte IPv6 address and a port.\n  * IPv4 as well as onion addresses are wrapped inside a IPv6 address accordingly.\n  */\n- // ***TODO*** fix generate-seeds.py and REGENERATE\n static SeedSpec6 pnSeed6_main[] = {\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb3,0x2b,0x80,0xef}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x80,0x7f,0x6a,0xeb}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0x9d,0xfa,0x0a}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa2,0xd1,0x63,0x23}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x6c,0x3d,0xd2,0x36}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xac,0xf5,0x05,0x84}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2e,0xa2,0x42,0x0a}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x4e,0x6d,0xb2,0xc3}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x8a,0x80,0xa9,0x5e}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0x0b,0x8d,0xe5}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0x3b,0x15,0x3a}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2e,0x69,0x76,0x0f}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0x21,0x7e,0xdd}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x68,0xec,0x17,0x83}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x6c,0x3d,0xd1,0x25}, 9999}\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x02,0x42,0x90}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x84,0x9f,0x06}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x84,0x9f,0x08}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x84,0x9f,0x09}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x84,0x9f,0x0a}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x86,0x73,0x25}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0xbd,0x81,0x29}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x12,0xdd,0x60,0x95}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xaf,0x00,0x70}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xaf,0x00,0x71}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xaf,0x00,0x72}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xaf,0x00,0x73}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xb6,0x80,0x15}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xb6,0x80,0x16}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xb6,0x80,0x17}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xb6,0x80,0x18}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xe3,0xa0,0x4c}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x1f,0x0d,0xd9,0x34}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x1f,0x0d,0xd9,0x35}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x1f,0x0d,0xd9,0x36}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x1f,0x0d,0xd9,0x37}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x1f,0x0e,0x86,0xed}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x1f,0x1f,0x49,0x52}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x22,0xc7,0x82,0x45}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x22,0xce,0x00,0x3f}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x22,0xe1,0x65,0x61}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x23,0xc4,0xf2,0xe3}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0x78,0xa1,0x91}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0x9d,0xc7,0xd2}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0xc8,0x7a,0xdf}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0xdd,0xc2,0x2a}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0xdd,0xc2,0xdc}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0xdd,0xc2,0xde}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x26,0x7f,0xa9,0x93}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2b,0xe5,0x4d,0x2e}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x20,0xc0,0x45}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x3a,0x30,0x11}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x4c,0x40,0x06}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x4c,0x80,0x3d}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2f,0x4a,0x17,0xcf}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2f,0x5a,0x0e,0x9c}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2f,0x5a,0x35,0x67}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2f,0x5b,0xd9,0x31}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2f,0x64,0x19,0x76}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x32,0x03,0x4a,0x51}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x32,0x03,0x4a,0x52}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x32,0x03,0x4a,0x54}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x32,0x03,0x4a,0x55}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x32,0x63,0x00,0xf3}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0x0e,0xc0,0xd3}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0x2c,0x80,0x19}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0x4e,0xa5,0x5b}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0x4f,0x70,0x16}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0x50,0x37,0xdf}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0xaa,0x66,0xfd}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0xbb,0x87,0xbb}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0xf2,0x25,0x08}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0xf2,0x27,0x60}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x3e,0x8a,0x03,0xd6}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x3e,0x8a,0x08,0x07}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x3e,0xd2,0x05,0xf6}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x3e,0xd2,0xa1,0xf8}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x40,0x13,0xd3,0x29}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x40,0x8c,0x9d,0x72}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x40,0x8c,0x9e,0x60}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x40,0xd2,0x29,0xe2}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0x17,0xf2,0x56}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0x17,0xf2,0x59}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0x17,0xf2,0x5a}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0x17,0xf2,0x5b}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0xac,0x0b,0xf9}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0xac,0x0c,0xf4}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0xac,0x1b,0x46}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0xac,0x21,0x6c}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x0c,0x43,0xab}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x0c,0x43,0xc1}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x0c,0x43,0xc5}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x1b,0xad,0xa5}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x1b,0xad,0xa6}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x1e,0xc1,0x9a}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x5a,0xba,0x09}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x5a,0xba,0x0a}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x5a,0xba,0x0d}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x48,0x12,0xd5,0x6b}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x4c,0x4a,0xb2,0xdd}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x4d,0x49,0x45,0xbe}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x4d,0x51,0xe2,0x92}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x4e,0x2e,0xea,0xf1}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x4e,0x53,0x13,0x00}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x4e,0x85,0xa9,0x46}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x50,0x78,0x1b,0x96}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x50,0xd3,0xc5,0xeb}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x51,0xa9,0x8b,0x95}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x51,0xa9,0xbc,0x58}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x51,0xa9,0xcd,0xdc}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x51,0xa9,0xe5,0x54}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x51,0xab,0x02,0xf5}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x51,0xe5,0x77,0xd8}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x52,0x76,0xe3,0x34}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x52,0xd3,0x15,0x80}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x52,0xd3,0x15,0x83}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x52,0xd3,0x15,0xad}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x52,0xd3,0x22,0x67}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x52,0xef,0x4f,0x58}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x53,0x01,0x63,0x01}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x53,0x01,0x63,0x06}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x55,0x19,0xc2,0xcc}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x55,0x19,0xc7,0xd7}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x55,0xb8,0xfe,0x1d}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x55,0xb8,0xfe,0xb5}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x55,0xff,0x04,0xd4}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x56,0x69,0xeb,0x67}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x57,0x6a,0x3f,0x34}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x57,0x75,0xfd,0x37}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x58,0x77,0xb3,0xb2}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x58,0x77,0xb3,0xb3}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x58,0xa6,0xc8,0x99}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x59,0x24,0xdc,0xf1}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x59,0x26,0x90,0x47}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x59,0x28,0x72,0x45}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x59,0x2d,0x43,0x21}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x59,0xa3,0x86,0xe3}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5a,0xbb,0x05,0x3d}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5b,0x7b,0xc3,0x53}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5b,0x7b,0xc9,0x5e}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5b,0xdb,0xef,0x52}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5b,0xdb,0xef,0x53}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5d,0x5a,0xcd,0x50}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5d,0x9e,0xd8,0x99}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5d,0xb9,0x67,0x46}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5d,0xb9,0x67,0x47}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5e,0x82,0x68,0xa9}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5e,0xb1,0xe0,0xe1}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5e,0xb1,0xe1,0xd2}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5e,0xb1,0xe8,0x21}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5f,0x2b,0x8b,0xa2}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5f,0xb7,0x33,0x62}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5f,0xb7,0x33,0x8d}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5f,0xb7,0x35,0x38}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5f,0xb7,0x35,0x60}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5f,0xd7,0x2d,0xe1}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x60,0x7e,0x60,0xa4}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x65,0x84,0x19,0xbc}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x67,0x0b,0x40,0x5e}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x68,0x80,0xe2,0x46}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x68,0x80,0xe2,0x48}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x68,0xee,0xc0,0x92}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x6b,0x06,0x8c,0x23}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x6b,0x06,0x8c,0x37}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x6b,0x06,0xaf,0xce}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x6b,0x9b,0x76,0x89}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x6c,0x3d,0xe0,0x21}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x6e,0x0a,0x19,0x4c}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x74,0x3e,0xed,0xbe}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x76,0x1f,0x26,0xe8}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x78,0x84,0x1b,0x27}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x7a,0x72,0xad,0xda}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x7b,0xc1,0x40,0xa6}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x7d,0x59,0x3e,0x24}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x7d,0x59,0x3e,0x25}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x82,0xb9,0xfb,0x45}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x82,0xb9,0xfb,0x71}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x85,0x82,0x66,0x16}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x8b,0xa2,0x0b,0x52}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x8d,0xff,0xb8,0xbf}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x8e,0x2c,0xe5,0x3d}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x8e,0x36,0xa2,0xb3}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x95,0x38,0x80,0xc7}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9a,0x7f,0x39,0x42}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9a,0x7f,0x39,0xf0}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9a,0x7f,0x3b,0x1b}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9a,0x7f,0x3c,0x08}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9b,0xfe,0x20,0x8b}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9f,0x64,0x13,0xa6}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9f,0x64,0x13,0xa7}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa2,0xdd,0xc3,0x11}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa2,0xdd,0xc3,0xf3}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa2,0xfa,0x91,0x6b}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa3,0x2c,0xa7,0x90}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa3,0x2c,0xa7,0xed}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa3,0x2c,0xab,0x33}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa3,0xac,0x80,0xbb}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa3,0xac,0x81,0x0d}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa4,0x84,0x2a,0xa2}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa7,0x58,0x0f,0x62}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa8,0xeb,0x60,0xca}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa8,0xeb,0x60,0xcb}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa8,0xeb,0x60,0xcd}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa8,0xeb,0x63,0x2d}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xaa,0x4b,0xa2,0x3c}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xaa,0x4b,0xa2,0xdb}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xaa,0x4b,0xa3,0x6c}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xac,0x56,0x79,0x94}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xac,0x68,0x40,0x0d}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xac,0x6e,0x06,0xa7}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xac,0x6e,0x06,0xa9}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xad,0xd4,0xf1,0x32}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb0,0x1f,0x91,0x32}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0x3e,0x80,0x32}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0x3e,0xa0,0x1d}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0x3e,0xc0,0x2a}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0xd1,0x32,0x1e}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0xee,0x2a,0x07}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0xfe,0x17,0xa0}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0xfe,0x20,0x30}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x02,0x52,0x89}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x1a,0x7e,0xfa}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x1c,0x65,0x5b}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x1c,0x65,0x85}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x23,0x40,0xd9}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x23,0x43,0x75}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x2b,0xd2,0x7d}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x3a,0xe0,0xea}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x40,0x68,0xdd}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x40,0x68,0xde}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x40,0x68,0xdf}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x52,0x16,0xe4}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x6a,0x79,0xa3}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x77,0x55,0x1e}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x8e,0xd4,0x90}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x9c,0xb2,0x4a}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x9c,0xb2,0x7d}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x9c,0xb2,0xd8}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x9c,0xb2,0xdd}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa5,0xa8,0x16}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa5,0xa8,0x17}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa5,0xa8,0x19}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa5,0xa8,0x1b}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa6,0xef,0x30}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa6,0xef,0xa2}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa6,0xef,0xbb}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa6,0xef,0xbf}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa8,0x08,0x90}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xb9,0x28,0x0d}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xd9,0x01,0x63}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0x28,0x3e,0x16}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0x28,0x5d,0xcd}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0xa6,0x4a,0xad}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0xd5,0xab,0x1e}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0xe3,0x10,0x10}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0xe3,0x10,0x53}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0xe3,0x4a,0xc1}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0xe3,0x4a,0xc4}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbe,0x0a,0x08,0xfa}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc0,0x51,0x82,0xe4}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc0,0xe3,0xe4,0xc4}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc0,0xe3,0xe4,0xc5}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc0,0xf3,0xd6,0x5a}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc0,0xfa,0xe6,0x11}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc1,0xea,0xe0,0x48}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc1,0xea,0xe0,0x64}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc1,0xea,0xe0,0x91}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc1,0xea,0xe0,0x98}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc6,0x14,0x65,0x74}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc6,0x17,0x80,0x4b}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc6,0x17,0xe2,0x29}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc6,0x3d,0xbe,0x8e}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc6,0xcc,0xfb,0x3a}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc7,0xc9,0x6e,0xc3}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc8,0x7a,0x80,0xac}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xca,0x47,0x62,0x7b}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xca,0x47,0x62,0x7c}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xca,0x47,0x62,0x7d}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xca,0x47,0x62,0x7e}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xcc,0x0c,0xf0,0x62}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xcc,0x10,0xf5,0x62}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xcc,0x1b,0x3a,0xd4}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd1,0xb1,0x57,0x94}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd1,0xb1,0x58,0x57}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd3,0x63,0xe0,0xa3}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd3,0x63,0xe0,0xa7}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd3,0x63,0xe0,0xae}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd3,0x63,0xe0,0xca}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0x18,0x60,0x1a}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0x18,0x60,0x78}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0x18,0x60,0x9f}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0x18,0x60,0xb2}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0xe3,0x88,0xeb}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0xe3,0xc9,0x2f}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0xed,0x25,0xf0}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd5,0x88,0x50,0x89}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd5,0x88,0x50,0x9f}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd5,0xa9,0x49,0x4a}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0x0d,0x65,0x5e}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0x0d,0x6b,0x1a}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0x3d,0x02,0x35}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0x3d,0x03,0xc1}, 9999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xdb,0x02,0x82,0x6e}, 9999}\n };\n \n static SeedSpec6 pnSeed6_test[] = {\n-//    {{0xfd,0x87,0xd8,0x7e,0xeb,0x43,0x99,0xcb,0x26,0x31,0xba,0x48,0x51,0x31,0x39,0x0d}, 18369},\n-//    {{0xfd,0x87,0xd8,0x7e,0xeb,0x43,0x44,0xf4,0xf4,0xf0,0xbf,0xf7,0x7e,0x6d,0xc4,0xe8}, 18369}\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x22,0xed,0xa7,0xf8}, 19999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x22,0xee,0x5d,0xe0}, 19999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2b,0xe5,0x4d,0x2e}, 19999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x20,0x68,0x5f}, 19999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x20,0xd7,0x1f}, 19999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x20,0xdd,0xe6}, 19999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x20,0xed,0x4c}, 19999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0x07,0x2e,0x71}, 19999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0xc9,0x17,0x81}, 19999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x8a,0x44,0x14,0x8e}, 19999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa5,0xe3,0x08,0x50}, 19999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0xb6,0xe5,0x80}, 19999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0xb6,0xe5,0x84}, 19999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0xb6,0xe5,0x86}, 19999},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0xb6,0xe5,0x88}, 19999}\n };\n-#endif // SYSCOIN_CHAINPARAMSSEEDS_H\n+#endif // SYS_CHAINPARAMSSEEDS_H"
      },
      {
        "sha": "577fe9b848e6f053019e0d65281774f0a588af34",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 43,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n-// Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2014 The Syscoin developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -17,46 +16,6 @@\n \n namespace Checkpoints {\n \n-    /**\n-     * How many times slower we expect checking transactions after the last\n-     * checkpoint to be (from checking signatures, which is skipped up to the\n-     * last checkpoint). This number is a compromise, as it can't be accurate\n-     * for every system. When reindexing from a fast disk with a slow CPU, it\n-     * can be up to 20, while when downloading from a slow network with a\n-     * fast multicore CPU, it won't be much higher than 1.\n-     */\n-    static const double SIGCHECK_VERIFICATION_FACTOR = 5.0;\n-\n-    //! Guess how far we are in the verification process at the given block index\n-    double GuessVerificationProgress(const CCheckpointData& data, CBlockIndex *pindex, bool fSigchecks) {\n-        if (pindex==NULL)\n-            return 0.0;\n-\n-        int64_t nNow = time(NULL);\n-\n-        double fSigcheckVerificationFactor = fSigchecks ? SIGCHECK_VERIFICATION_FACTOR : 1.0;\n-        double fWorkBefore = 0.0; // Amount of work done before pindex\n-        double fWorkAfter = 0.0;  // Amount of work left after pindex (estimated)\n-        // Work is defined as: 1.0 per transaction before the last checkpoint, and\n-        // fSigcheckVerificationFactor per transaction after.\n-\n-        if (pindex->nChainTx <= data.nTransactionsLastCheckpoint) {\n-            double nCheapBefore = pindex->nChainTx;\n-            double nCheapAfter = data.nTransactionsLastCheckpoint - pindex->nChainTx;\n-            double nExpensiveAfter = (nNow - data.nTimeLastCheckpoint)/86400.0*data.fTransactionsPerDay;\n-            fWorkBefore = nCheapBefore;\n-            fWorkAfter = nCheapAfter + nExpensiveAfter*fSigcheckVerificationFactor;\n-        } else {\n-            double nCheapBefore = data.nTransactionsLastCheckpoint;\n-            double nExpensiveBefore = pindex->nChainTx - data.nTransactionsLastCheckpoint;\n-            double nExpensiveAfter = (nNow - pindex->GetBlockTime())/86400.0*data.fTransactionsPerDay;\n-            fWorkBefore = nCheapBefore + nExpensiveBefore*fSigcheckVerificationFactor;\n-            fWorkAfter = nExpensiveAfter*fSigcheckVerificationFactor;\n-        }\n-\n-        return fWorkBefore / (fWorkBefore + fWorkAfter);\n-    }\n-\n     CBlockIndex* GetLastCheckpoint(const CCheckpointData& data)\n     {\n         const MapCheckpoints& checkpoints = data.mapCheckpoints;"
      },
      {
        "sha": "bd1056be1079ba5c4bfbbd6934d585cd2fef943e",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -23,8 +22,6 @@ namespace Checkpoints\n //! Returns last CBlockIndex* in mapBlockIndex that is a checkpoint\n CBlockIndex* GetLastCheckpoint(const CCheckpointData& data);\n \n-double GuessVerificationProgress(const CCheckpointData& data, CBlockIndex* pindex, bool fSigchecks = true);\n-\n } //namespace Checkpoints\n \n #endif // SYSCOIN_CHECKPOINTS_H"
      },
      {
        "sha": "2ca5f88b009269a8c88241345d2d811dd53f5dad",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2012-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2012-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -128,6 +127,9 @@ class CCheckQueue\n     }\n \n public:\n+    //! Mutex to ensure only one concurrent CCheckQueueControl\n+    boost::mutex ControlMutex;\n+\n     //! Create a new check queue\n     CCheckQueue(unsigned int nBatchSizeIn) : nIdle(0), nTotal(0), fAllOk(true), nTodo(0), fQuit(false), nBatchSize(nBatchSizeIn) {}\n \n@@ -162,12 +164,6 @@ class CCheckQueue\n     {\n     }\n \n-    bool IsIdle()\n-    {\n-        boost::unique_lock<boost::mutex> lock(mutex);\n-        return (nTotal == nIdle && nTodo == 0 && fAllOk == true);\n-    }\n-\n };\n \n /** \n@@ -178,16 +174,18 @@ template <typename T>\n class CCheckQueueControl\n {\n private:\n-    CCheckQueue<T>* pqueue;\n+    CCheckQueue<T> * const pqueue;\n     bool fDone;\n \n public:\n-    CCheckQueueControl(CCheckQueue<T>* pqueueIn) : pqueue(pqueueIn), fDone(false)\n+    CCheckQueueControl() = delete;\n+    CCheckQueueControl(const CCheckQueueControl&) = delete;\n+    CCheckQueueControl& operator=(const CCheckQueueControl&) = delete;\n+    explicit CCheckQueueControl(CCheckQueue<T> * const pqueueIn) : pqueue(pqueueIn), fDone(false)\n     {\n         // passed queue is supposed to be unused, or NULL\n         if (pqueue != NULL) {\n-            bool isIdle = pqueue->IsIdle();\n-            assert(isIdle);\n+            ENTER_CRITICAL_SECTION(pqueue->ControlMutex);\n         }\n     }\n \n@@ -210,6 +208,9 @@ class CCheckQueueControl\n     {\n         if (!fDone)\n             Wait();\n+        if (pqueue != NULL) {\n+            LEAVE_CRITICAL_SECTION(pqueue->ControlMutex);\n+        }\n     }\n };\n "
      },
      {
        "sha": "c592566597fe43fad73872ef87e75f31c543e1fc",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 17,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2012-2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2012-2014 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -50,13 +49,13 @@ const std::string CLIENT_NAME(\"Syscoin Core\");\n #endif\n \n #define BUILD_DESC_WITH_SUFFIX(maj, min, rev, build, suffix) \\\n-    DO_STRINGIZE(maj) \".\" DO_STRINGIZE(min) \".\" DO_STRINGIZE(rev) \".\" DO_STRINGIZE(build) \"-\" DO_STRINGIZE(suffix)\n+    \"v\" DO_STRINGIZE(maj) \".\" DO_STRINGIZE(min) \".\" DO_STRINGIZE(rev) \".\" DO_STRINGIZE(build) \"-\" DO_STRINGIZE(suffix)\n \n #define BUILD_DESC_FROM_COMMIT(maj, min, rev, build, commit) \\\n-    DO_STRINGIZE(maj) \".\" DO_STRINGIZE(min) \".\" DO_STRINGIZE(rev) \".\" DO_STRINGIZE(build) \"-g\" commit\n+    \"v\" DO_STRINGIZE(maj) \".\" DO_STRINGIZE(min) \".\" DO_STRINGIZE(rev) \".\" DO_STRINGIZE(build) \"-g\" commit\n \n #define BUILD_DESC_FROM_UNKNOWN(maj, min, rev, build) \\\n-    DO_STRINGIZE(maj) \".\" DO_STRINGIZE(min) \".\" DO_STRINGIZE(rev) \".\" DO_STRINGIZE(build) \"-unk\"\n+    \"v\" DO_STRINGIZE(maj) \".\" DO_STRINGIZE(min) \".\" DO_STRINGIZE(rev) \".\" DO_STRINGIZE(build) \"-unk\"\n \n #ifndef BUILD_DESC\n #ifdef BUILD_SUFFIX\n@@ -68,18 +67,9 @@ const std::string CLIENT_NAME(\"Syscoin Core\");\n #endif\n #endif\n \n-#ifndef BUILD_DATE\n-#ifdef GIT_COMMIT_DATE\n-#define BUILD_DATE GIT_COMMIT_DATE\n-#else\n-#define BUILD_DATE __DATE__ \", \" __TIME__\n-#endif\n-#endif\n-\n const std::string CLIENT_BUILD(BUILD_DESC CLIENT_VERSION_SUFFIX);\n-const std::string CLIENT_DATE(BUILD_DATE);\n \n-static std::string FormatVersion(int nVersion)\n+std::string FormatVersion(int nVersion)\n {\n     if (nVersion % 100 == 0)\n         return strprintf(\"%d.%d.%d\", nVersion / 1000000, (nVersion / 10000) % 100, (nVersion / 100) % 100);\n@@ -94,11 +84,11 @@ std::string FormatFullVersion()\n \n std::string FormatDashVersion()\n {\n-    return DASH_VERSION;\n+\treturn DASH_VERSION;\n }\n \n /** \n- * Format the subversion field according to BIP 14 spec (https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki) \n+ * Format the subversion field according to BIP 14 spec (https://github.com/syscoin/bips/blob/master/bip-0014.mediawiki) \n  */\n std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments)\n {"
      },
      {
        "sha": "476444417bfe14780822e8ad4eed7a05d7448687",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 26,
        "deletions": 29,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2018 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -10,48 +9,48 @@\n #include \"config/syscoin-config.h\"\n #else\n \n-#define CLIENT_VERSION_MAJOR 2\n-#define CLIENT_VERSION_MINOR 2\n+/**\n+ * client versioning and copyright year\n+ */\n+\n+//! These need to be macros, as clientversion.cpp's and syscoin*-res.rc's voodoo requires it\n+#define CLIENT_VERSION_MAJOR 3\n+#define CLIENT_VERSION_MINOR 0\n #define CLIENT_VERSION_REVISION 0\n #define CLIENT_VERSION_BUILD 0\n+\n+//! Set to true for release, false for prerelease or test build\n #define CLIENT_VERSION_IS_RELEASE true\n-#define COPYRIGHT_YEAR 2018\n \n #define DASH_VERSION_MAJOR 0\n #define DASH_VERSION_MINOR 12\n-#define DASH_VERSION_REVISION 2\n+#define DASH_VERSION_REVISION 3\n \n-#endif //HAVE_CONFIG_H\n \n-// Check that required client information is defined\n-#if !defined(CLIENT_VERSION_MAJOR) || !defined(CLIENT_VERSION_MINOR) || !defined(CLIENT_VERSION_REVISION) || !defined(CLIENT_VERSION_BUILD) || !defined(CLIENT_VERSION_IS_RELEASE) || !defined(COPYRIGHT_YEAR)\n-#error Client version information missing: version is not defined by syscoin-config.h or in any other way\n-#endif\n+/**\n+ * Copyright year (2009-this)\n+ * Todo: update this when changing our copyright comments in the source\n+ */\n+#endif //HAVE_CONFIG_H\n+ /**\n+ * Converts the parameter X to a string after macro replacement on X has been performed.\n+ * Don't merge these into one macro!\n+ */\n+#define DO_STRINGIZE(X) #X\n+#define STRINGIZE(X) DO_STRINGIZE(X)\n \n-#if !defined(DASH_VERSION_MAJOR) || !defined(DASH_VERSION_MINOR) || !defined(DASH_VERSION_REVISION) \n-#error Dash version information missing: version is not defined by syscoin-config.h or in any other way\n-#endif\n \n #define BUILD_VERSION(maj, min, rev, build) \\\n     DO_STRINGIZE(maj) \".\" DO_STRINGIZE(min) \".\" DO_STRINGIZE(rev) \".\" DO_STRINGIZE(build)\n #define BUILD_DASH_VERSION(maj, min, rev) \\\n     DO_STRINGIZE(maj) \".\" DO_STRINGIZE(min) \".\" DO_STRINGIZE(rev)\n-\n-\n+#define COPYRIGHT_YEAR 2018\n #define SYSCOIN_VERSION BUILD_VERSION(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD)\n #define DASH_VERSION BUILD_DASH_VERSION(DASH_VERSION_MAJOR, DASH_VERSION_MINOR, DASH_VERSION_REVISION)\n \n-/**\n- * Converts the parameter X to a string after macro replacement on X has been performed.\n- * Don't merge these into one macro!\n- */\n-#define STRINGIZE(X) DO_STRINGIZE(X)\n-#define DO_STRINGIZE(X) #X\n \n //! Copyright string used in Windows .rc files\n-#define COPYRIGHT_STR \"2009-\" STRINGIZE(COPYRIGHT_YEAR) \" The Bitcoin Core Developers, \" \\\n-\t\"2014-\" STRINGIZE(COPYRIGHT_YEAR) \" The Dash Core Developers, \" \\\n-        \"2014-\" STRINGIZE(COPYRIGHT_YEAR) \" The Syscoin Core Developers\"\n+#define COPYRIGHT_STR \"2009-\" STRINGIZE(COPYRIGHT_YEAR) \" The Syscoin Core Developers, 2014-\" STRINGIZE(COPYRIGHT_YEAR) \" \" COPYRIGHT_HOLDERS_FINAL\n \n /**\n  * syscoind-res.rc includes this file, but it cannot cope with real c++ code.\n@@ -73,13 +72,11 @@ static const int CLIENT_VERSION =\n \n extern const std::string CLIENT_NAME;\n extern const std::string CLIENT_BUILD;\n-extern const std::string CLIENT_DATE;\n-\n \n+std::string FormatVersion(int nVersion);\n std::string FormatFullVersion();\n-std::string FormatDashVersion();\n std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments);\n-\n+std::string FormatDashVersion();\n #endif // WINDRES_PREPROC\n \n #endif // SYSCOIN_CLIENTVERSION_H"
      },
      {
        "sha": "28f0ca91d9e9bc24e74001f5d53526740c91c02d",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 118,
        "deletions": 140,
        "changes": 258,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,153 +1,136 @@\n-// Copyright (c) 2012-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2012-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"coins.h\"\n \n+#include \"consensus/consensus.h\"\n #include \"memusage.h\"\n #include \"random.h\"\n \n #include <assert.h>\n+#include <boost/foreach.hpp>\n \n-/**\n- * calculate number of bytes for the bitmask, and its number of non-zero bytes\n- * each bit in the bitmask represents the availability of one output, but the\n- * availabilities of the first two outputs are encoded separately\n- */\n-void CCoins::CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const {\n-    unsigned int nLastUsedByte = 0;\n-    for (unsigned int b = 0; 2+b*8 < vout.size(); b++) {\n-        bool fZero = true;\n-        for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++) {\n-            if (!vout[2+b*8+i].IsNull()) {\n-                fZero = false;\n-                continue;\n-            }\n-        }\n-        if (!fZero) {\n-            nLastUsedByte = b + 1;\n-            nNonzeroBytes++;\n-        }\n-    }\n-    nBytes += nLastUsedByte;\n-}\n-\n-bool CCoins::Spend(uint32_t nPos) \n-{\n-    if (nPos >= vout.size() || vout[nPos].IsNull())\n-        return false;\n-    vout[nPos].SetNull();\n-    Cleanup();\n-    return true;\n-}\n-\n-bool CCoinsView::GetCoins(const uint256 &txid, CCoins &coins) const { return false; }\n-bool CCoinsView::HaveCoins(const uint256 &txid) const { return false; }\n+bool CCoinsView::GetCoin(const COutPoint &outpoint, Coin &coin) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n-bool CCoinsView::GetStats(CCoinsStats &stats) const { return false; }\n+CCoinsViewCursor *CCoinsView::Cursor() const { return 0; }\n \n+bool CCoinsView::HaveCoin(const COutPoint &outpoint) const\n+{\n+    Coin coin;\n+    return GetCoin(outpoint, coin);\n+}\n \n CCoinsViewBacked::CCoinsViewBacked(CCoinsView *viewIn) : base(viewIn) { }\n-bool CCoinsViewBacked::GetCoins(const uint256 &txid, CCoins &coins) const { return base->GetCoins(txid, coins); }\n-bool CCoinsViewBacked::HaveCoins(const uint256 &txid) const { return base->HaveCoins(txid); }\n+bool CCoinsViewBacked::GetCoin(const COutPoint &outpoint, Coin &coin) const { return base->GetCoin(outpoint, coin); }\n+bool CCoinsViewBacked::HaveCoin(const COutPoint &outpoint) const { return base->HaveCoin(outpoint); }\n uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n-bool CCoinsViewBacked::GetStats(CCoinsStats &stats) const { return base->GetStats(stats); }\n+CCoinsViewCursor *CCoinsViewBacked::Cursor() const { return base->Cursor(); }\n+size_t CCoinsViewBacked::EstimateSize() const { return base->EstimateSize(); }\n \n-CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n+SaltedOutpointHasher::SaltedOutpointHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n \n-CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), hasModifier(false), cachedCoinsUsage(0) { }\n-\n-CCoinsViewCache::~CCoinsViewCache()\n-{\n-    assert(!hasModifier);\n-}\n+CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), cachedCoinsUsage(0) {}\n \n size_t CCoinsViewCache::DynamicMemoryUsage() const {\n     return memusage::DynamicUsage(cacheCoins) + cachedCoinsUsage;\n }\n \n-CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {\n-    CCoinsMap::iterator it = cacheCoins.find(txid);\n+CCoinsMap::iterator CCoinsViewCache::FetchCoin(const COutPoint &outpoint) const {\n+    CCoinsMap::iterator it = cacheCoins.find(outpoint);\n     if (it != cacheCoins.end())\n         return it;\n-    CCoins tmp;\n-    if (!base->GetCoins(txid, tmp))\n+    Coin tmp;\n+    if (!base->GetCoin(outpoint, tmp))\n         return cacheCoins.end();\n-    CCoinsMap::iterator ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry())).first;\n-    tmp.swap(ret->second.coins);\n-    if (ret->second.coins.IsPruned()) {\n-        // The parent only has an empty entry for this txid; we can consider our\n+    CCoinsMap::iterator ret = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint), std::forward_as_tuple(std::move(tmp))).first;\n+    if (ret->second.coin.IsSpent()) {\n+        // The parent only has an empty entry for this outpoint; we can consider our\n         // version as fresh.\n         ret->second.flags = CCoinsCacheEntry::FRESH;\n     }\n-    cachedCoinsUsage += ret->second.coins.DynamicMemoryUsage();\n+    cachedCoinsUsage += ret->second.coin.DynamicMemoryUsage();\n     return ret;\n }\n \n-bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n-    CCoinsMap::const_iterator it = FetchCoins(txid);\n+bool CCoinsViewCache::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    CCoinsMap::const_iterator it = FetchCoin(outpoint);\n     if (it != cacheCoins.end()) {\n-        coins = it->second.coins;\n-        return true;\n+        coin = it->second.coin;\n+        return !coin.IsSpent();\n     }\n     return false;\n }\n \n-CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n-    assert(!hasModifier);\n-    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n-    size_t cachedCoinUsage = 0;\n-    if (ret.second) {\n-        if (!base->GetCoins(txid, ret.first->second.coins)) {\n-            // The parent view does not have this entry; mark it as fresh.\n-            ret.first->second.coins.Clear();\n-            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n-        } else if (ret.first->second.coins.IsPruned()) {\n-            // The parent view only has a pruned entry for this; mark it as fresh.\n-            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n+void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possible_overwrite) {\n+    assert(!coin.IsSpent());\n+    if (coin.out.scriptPubKey.IsUnspendable()) return;\n+    CCoinsMap::iterator it;\n+    bool inserted;\n+    std::tie(it, inserted) = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint), std::tuple<>());\n+    bool fresh = false;\n+    if (!inserted) {\n+        cachedCoinsUsage -= it->second.coin.DynamicMemoryUsage();\n+    }\n+    if (!possible_overwrite) {\n+        if (!it->second.coin.IsSpent()) {\n+            throw std::logic_error(\"Adding new coin that replaces non-pruned entry\");\n         }\n-    } else {\n-        cachedCoinUsage = ret.first->second.coins.DynamicMemoryUsage();\n+        fresh = !(it->second.flags & CCoinsCacheEntry::DIRTY);\n+    }\n+    it->second.coin = std::move(coin);\n+    it->second.flags |= CCoinsCacheEntry::DIRTY | (fresh ? CCoinsCacheEntry::FRESH : 0);\n+    cachedCoinsUsage += it->second.coin.DynamicMemoryUsage();\n+}\n+\n+void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight) {\n+    bool fCoinbase = tx.IsCoinBase();\n+    const uint256& txid = tx.GetHash();\n+    for (size_t i = 0; i < tx.vout.size(); ++i) {\n+        // Pass fCoinbase as the possible_overwrite flag to AddCoin, in order to correctly\n+        // deal with the pre-BIP30 occurrances of duplicate coinbase transactions.\n+        cache.AddCoin(COutPoint(txid, i), Coin(tx.vout[i], nHeight, fCoinbase), fCoinbase);\n     }\n-    // Assume that whenever ModifyCoins is called, the entry will be modified.\n-    ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n-    return CCoinsModifier(*this, ret.first, cachedCoinUsage);\n }\n \n-CCoinsModifier CCoinsViewCache::ModifyNewCoins(const uint256 &txid) {\n-    assert(!hasModifier);\n-    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n-    ret.first->second.coins.Clear();\n-    ret.first->second.flags = CCoinsCacheEntry::FRESH;\n-    ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n-    return CCoinsModifier(*this, ret.first, 0);\n+bool CCoinsViewCache::SpendCoin(const COutPoint &outpoint, Coin* moveout) {\n+    CCoinsMap::iterator it = FetchCoin(outpoint);\n+    if (it == cacheCoins.end()) return false;\n+    cachedCoinsUsage -= it->second.coin.DynamicMemoryUsage();\n+    if (moveout) {\n+        *moveout = std::move(it->second.coin);\n+    }\n+    if (it->second.flags & CCoinsCacheEntry::FRESH) {\n+        cacheCoins.erase(it);\n+    } else {\n+        it->second.flags |= CCoinsCacheEntry::DIRTY;\n+        it->second.coin.Clear();\n+    }\n+    return true;\n }\n \n-const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {\n-    CCoinsMap::const_iterator it = FetchCoins(txid);\n+static const Coin coinEmpty;\n+\n+const Coin& CCoinsViewCache::AccessCoin(const COutPoint &outpoint) const {\n+    CCoinsMap::const_iterator it = FetchCoin(outpoint);\n     if (it == cacheCoins.end()) {\n-        return NULL;\n+        return coinEmpty;\n     } else {\n-        return &it->second.coins;\n+        return it->second.coin;\n     }\n }\n \n-bool CCoinsViewCache::HaveCoins(const uint256 &txid) const {\n-    CCoinsMap::const_iterator it = FetchCoins(txid);\n-    // We're using vtx.empty() instead of IsPruned here for performance reasons,\n-    // as we only care about the case where a transaction was replaced entirely\n-    // in a reorganization (which wipes vout entirely, as opposed to spending\n-    // which just cleans individual outputs).\n-    return (it != cacheCoins.end() && !it->second.coins.vout.empty());\n+bool CCoinsViewCache::HaveCoin(const COutPoint &outpoint) const {\n+    CCoinsMap::const_iterator it = FetchCoin(outpoint);\n+    return (it != cacheCoins.end() && !it->second.coin.IsSpent());\n }\n \n-bool CCoinsViewCache::HaveCoinsInCache(const uint256 &txid) const {\n-    CCoinsMap::const_iterator it = cacheCoins.find(txid);\n-    return it != cacheCoins.end();\n+bool CCoinsViewCache::HaveCoinInCache(const COutPoint &outpoint) const {\n+    CCoinsMap::const_iterator it = cacheCoins.find(outpoint);\n+    return (it != cacheCoins.end() && !it->second.coin.IsSpent());\n }\n \n uint256 CCoinsViewCache::GetBestBlock() const {\n@@ -161,19 +144,18 @@ void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n }\n \n bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {\n-    assert(!hasModifier);\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n         if (it->second.flags & CCoinsCacheEntry::DIRTY) { // Ignore non-dirty entries (optimization).\n             CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n             if (itUs == cacheCoins.end()) {\n                 // The parent cache does not have an entry, while the child does\n                 // We can ignore it if it's both FRESH and pruned in the child\n-                if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coins.IsPruned())) {\n+                if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n                     // Otherwise we will need to create it in the parent\n                     // and move the data up and mark it as dirty\n                     CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                    entry.coins.swap(it->second.coins);\n-                    cachedCoinsUsage += entry.coins.DynamicMemoryUsage();\n+                    entry.coin = std::move(it->second.coin);\n+                    cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n                     entry.flags = CCoinsCacheEntry::DIRTY;\n                     // We can mark it FRESH in the parent if it was FRESH in the child\n                     // Otherwise it might have just been flushed from the parent's cache\n@@ -182,19 +164,31 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                         entry.flags |= CCoinsCacheEntry::FRESH;\n                 }\n             } else {\n+                // Assert that the child cache entry was not marked FRESH if the\n+                // parent cache entry has unspent outputs. If this ever happens,\n+                // it means the FRESH flag was misapplied and there is a logic\n+                // error in the calling code.\n+                if ((it->second.flags & CCoinsCacheEntry::FRESH) && !itUs->second.coin.IsSpent())\n+                    throw std::logic_error(\"FRESH flag misapplied to cache entry for base transaction with spendable outputs\");\n+\n                 // Found the entry in the parent cache\n-                if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n+                if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coin.IsSpent()) {\n                     // The grandparent does not have an entry, and the child is\n                     // modified and being pruned. This means we can just delete\n                     // it from the parent.\n-                    cachedCoinsUsage -= itUs->second.coins.DynamicMemoryUsage();\n+                    cachedCoinsUsage -= itUs->second.coin.DynamicMemoryUsage();\n                     cacheCoins.erase(itUs);\n                 } else {\n                     // A normal modification.\n-                    cachedCoinsUsage -= itUs->second.coins.DynamicMemoryUsage();\n-                    itUs->second.coins.swap(it->second.coins);\n-                    cachedCoinsUsage += itUs->second.coins.DynamicMemoryUsage();\n+                    cachedCoinsUsage -= itUs->second.coin.DynamicMemoryUsage();\n+                    itUs->second.coin = std::move(it->second.coin);\n+                    cachedCoinsUsage += itUs->second.coin.DynamicMemoryUsage();\n                     itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n+                    // NOTE: It is possible the child has a FRESH flag here in\n+                    // the event the entry we found in the parent is pruned. But\n+                    // we must not copy that FRESH flag to the parent as that\n+                    // pruned state likely still needs to be communicated to the\n+                    // grandparent.\n                 }\n             }\n         }\n@@ -212,11 +206,11 @@ bool CCoinsViewCache::Flush() {\n     return fOk;\n }\n \n-void CCoinsViewCache::Uncache(const uint256& hash)\n+void CCoinsViewCache::Uncache(const COutPoint& hash)\n {\n     CCoinsMap::iterator it = cacheCoins.find(hash);\n     if (it != cacheCoins.end() && it->second.flags == 0) {\n-        cachedCoinsUsage -= it->second.coins.DynamicMemoryUsage();\n+        cachedCoinsUsage -= it->second.coin.DynamicMemoryUsage();\n         cacheCoins.erase(it);\n     }\n }\n@@ -225,21 +219,14 @@ unsigned int CCoinsViewCache::GetCacheSize() const {\n     return cacheCoins.size();\n }\n \n-const CTxOut &CCoinsViewCache::GetOutputFor(const CTxIn& input) const\n-{\n-    const CCoins* coins = AccessCoins(input.prevout.hash);\n-    assert(coins && coins->IsAvailable(input.prevout.n));\n-    return coins->vout[input.prevout.n];\n-}\n-\n CAmount CCoinsViewCache::GetValueIn(const CTransaction& tx) const\n {\n     if (tx.IsCoinBase())\n         return 0;\n \n     CAmount nResult = 0;\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n-        nResult += GetOutputFor(tx.vin[i]).nValue;\n+        nResult += AccessCoin(tx.vin[i].prevout).out.nValue;\n \n     return nResult;\n }\n@@ -248,9 +235,7 @@ bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n {\n     if (!tx.IsCoinBase()) {\n         for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            const COutPoint &prevout = tx.vin[i].prevout;\n-            const CCoins* coins = AccessCoins(prevout.hash);\n-            if (!coins || !coins->IsAvailable(prevout.n)) {\n+            if (!HaveCoin(tx.vin[i].prevout)) {\n                 return false;\n             }\n         }\n@@ -266,32 +251,25 @@ double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight, CAmount\n     double dResult = 0.0;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n-        const CCoins* coins = AccessCoins(txin.prevout.hash);\n-        assert(coins);\n-        if (!coins->IsAvailable(txin.prevout.n)) continue;\n-        if (coins->nHeight <= nHeight) {\n-            dResult += coins->vout[txin.prevout.n].nValue * (nHeight-coins->nHeight);\n-            inChainInputValue += coins->vout[txin.prevout.n].nValue;\n+        const Coin& coin = AccessCoin(txin.prevout);\n+        if (coin.IsSpent()) continue;\n+        if (coin.nHeight <= nHeight) {\n+            dResult += (double)coin.out.nValue * (nHeight-coin.nHeight);\n+            inChainInputValue += coin.out.nValue;\n         }\n     }\n     return tx.ComputePriority(dResult);\n }\n \n-CCoinsModifier::CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_, size_t usage) : cache(cache_), it(it_), cachedCoinUsage(usage) {\n-    assert(!cache.hasModifier);\n-    cache.hasModifier = true;\n-}\n+static const size_t MAX_OUTPUTS_PER_BLOCK = MaxBlockSize(true) /  ::GetSerializeSize(CTxOut(), SER_NETWORK, PROTOCOL_VERSION); // TODO: merge with similar definition in undo.h.\n \n-CCoinsModifier::~CCoinsModifier()\n+const Coin& AccessByTxid(const CCoinsViewCache& view, const uint256& txid)\n {\n-    assert(cache.hasModifier);\n-    cache.hasModifier = false;\n-    it->second.coins.Cleanup();\n-    cache.cachedCoinsUsage -= cachedCoinUsage; // Subtract the old usage\n-    if ((it->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n-        cache.cacheCoins.erase(it);\n-    } else {\n-        // If the coin still exists after the modification, add the new usage\n-        cache.cachedCoinsUsage += it->second.coins.DynamicMemoryUsage();\n+    COutPoint iter(txid, 0);\n+    while (iter.n < MAX_OUTPUTS_PER_BLOCK) {\n+        const Coin& alternate = view.AccessCoin(iter);\n+        if (!alternate.IsSpent()) return alternate;\n+        ++iter.n;\n     }\n+    return coinEmpty;\n }"
      },
      {
        "sha": "dfefbe348a1c345843192758944269f7cc3118bf",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 127,
        "deletions": 310,
        "changes": 437,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -9,332 +8,166 @@\n \n #include \"compressor.h\"\n #include \"core_memusage.h\"\n+#include \"hash.h\"\n #include \"memusage.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n \n #include <assert.h>\n #include <stdint.h>\n+#include <unordered_map>\n \n-#include <boost/foreach.hpp>\n-#include <boost/unordered_map.hpp>\n-\n-/** \n- * Pruned version of CTransaction: only retains metadata and unspent transaction outputs\n+/**\n+ * A UTXO entry.\n  *\n  * Serialized format:\n- * - VARINT(nVersion)\n- * - VARINT(nCode)\n- * - unspentness bitvector, for vout[2] and further; least significant byte first\n- * - the non-spent CTxOuts (via CTxOutCompressor)\n- * - VARINT(nHeight)\n- *\n- * The nCode value consists of:\n- * - bit 0: IsCoinBase()\n- * - bit 1: vout[0] is not spent\n- * - bit 2: vout[1] is not spent\n- * - The higher bits encode N, the number of non-zero bytes in the following bitvector.\n- *   - In case both bit 1 and bit 2 are unset, they encode N-1, as there must be at\n- *     least one non-spent output).\n- *\n- * Example: 0104835800816115944e077fe7c803cfa57f29b36bf87c1d358bb85e\n- *          <><><--------------------------------------------><---->\n- *          |  \\                  |                             /\n- *    version   code             vout[1]                  height\n- *\n- *    - version = 1\n- *    - code = 4 (vout[1] is not spent, and 0 non-zero bytes of bitvector follow)\n- *    - unspentness bitvector: as 0 non-zero bytes follow, it has length 0\n- *    - vout[1]: 835800816115944e077fe7c803cfa57f29b36bf87c1d35\n- *               * 8358: compact amount representation for 60000000000 (600 SYS)\n- *               * 00: special txout type pay-to-pubkey-hash\n- *               * 816115944e077fe7c803cfa57f29b36bf87c1d35: address uint160\n- *    - height = 203998\n- *\n- *\n- * Example: 0109044086ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4eebbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa486af3b\n- *          <><><--><--------------------------------------------------><----------------------------------------------><---->\n- *         /  \\   \\                     |                                                           |                     /\n- *  version  code  unspentness       vout[4]                                                     vout[16]           height\n- *\n- *  - version = 1\n- *  - code = 9 (coinbase, neither vout[0] or vout[1] are unspent,\n- *                2 (1, +1 because both bit 1 and bit 2 are unset) non-zero bitvector bytes follow)\n- *  - unspentness bitvector: bits 2 (0x04) and 14 (0x4000) are set, so vout[2+2] and vout[14+2] are unspent\n- *  - vout[4]: 86ef97d5790061b01caab50f1b8e9c50a5057eb43c2d9563a4ee\n- *             * 86ef97d579: compact amount representation for 234925952 (2.35 SYS)\n- *             * 00: special txout type pay-to-pubkey-hash\n- *             * 61b01caab50f1b8e9c50a5057eb43c2d9563a4ee: address uint160\n- *  - vout[16]: bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4\n- *              * bbd123: compact amount representation for 110397 (0.001 SYS)\n- *              * 00: special txout type pay-to-pubkey-hash\n- *              * 8c988f1a4a4de2161e0f50aac7f17e7f9555caa4: address uint160\n- *  - height = 120891\n+ * - VARINT((coinbase ? 1 : 0) | (height << 1))\n+ * - the non-spent CTxOut (via CTxOutCompressor)\n  */\n-class CCoins\n+class Coin\n {\n public:\n-    //! whether transaction is a coinbase\n-    bool fCoinBase;\n+    //! unspent transaction output\n+    CTxOut out;\n \n-    //! unspent transaction outputs; spent outputs are .IsNull(); spent outputs at the end of the array are dropped\n-    std::vector<CTxOut> vout;\n+    //! whether containing transaction was a coinbase\n+    unsigned int fCoinBase : 1;\n \n-    //! at which height this transaction was included in the active block chain\n-    int nHeight;\n+    //! at which height this containing transaction was included in the active block chain\n+    uint32_t nHeight : 31;\n \n-    //! version of the CTransaction; accesses to this value should probably check for nHeight as well,\n-    //! as new tx version will probably only be introduced at certain heights\n-    int nVersion;\n-\n-    void FromTx(const CTransaction &tx, int nHeightIn) {\n-        fCoinBase = tx.IsCoinBase();\n-        vout = tx.vout;\n-        nHeight = nHeightIn;\n-        nVersion = tx.nVersion;\n-        ClearUnspendable();\n-    }\n-\n-    //! construct a CCoins from a CTransaction, at a given height\n-    CCoins(const CTransaction &tx, int nHeightIn) {\n-        FromTx(tx, nHeightIn);\n-    }\n+    //! construct a Coin from a CTxOut and height/coinbase information.\n+    Coin(CTxOut&& outIn, int nHeightIn, bool fCoinBaseIn) : out(std::move(outIn)), fCoinBase(fCoinBaseIn), nHeight(nHeightIn) {}\n+    Coin(const CTxOut& outIn, int nHeightIn, bool fCoinBaseIn) : out(outIn), fCoinBase(fCoinBaseIn),nHeight(nHeightIn) {}\n \n     void Clear() {\n+        out.SetNull();\n         fCoinBase = false;\n-        std::vector<CTxOut>().swap(vout);\n         nHeight = 0;\n-        nVersion = 0;\n     }\n \n     //! empty constructor\n-    CCoins() : fCoinBase(false), vout(0), nHeight(0), nVersion(0) { }\n-\n-    //!remove spent outputs at the end of vout\n-    void Cleanup() {\n-        while (vout.size() > 0 && vout.back().IsNull())\n-            vout.pop_back();\n-        if (vout.empty())\n-            std::vector<CTxOut>().swap(vout);\n-    }\n-\n-    void ClearUnspendable() {\n-        BOOST_FOREACH(CTxOut &txout, vout) {\n-            if (txout.scriptPubKey.IsUnspendable())\n-                txout.SetNull();\n-        }\n-        Cleanup();\n-    }\n-\n-    void swap(CCoins &to) {\n-        std::swap(to.fCoinBase, fCoinBase);\n-        to.vout.swap(vout);\n-        std::swap(to.nHeight, nHeight);\n-        std::swap(to.nVersion, nVersion);\n-    }\n-\n-    //! equality test\n-    friend bool operator==(const CCoins &a, const CCoins &b) {\n-         // Empty CCoins objects are always equal.\n-         if (a.IsPruned() && b.IsPruned())\n-             return true;\n-         return a.fCoinBase == b.fCoinBase &&\n-                a.nHeight == b.nHeight &&\n-                a.nVersion == b.nVersion &&\n-                a.vout == b.vout;\n-    }\n-    friend bool operator!=(const CCoins &a, const CCoins &b) {\n-        return !(a == b);\n-    }\n-\n-    void CalcMaskSize(unsigned int &nBytes, unsigned int &nNonzeroBytes) const;\n+    Coin() : fCoinBase(false), nHeight(0) { }\n \n     bool IsCoinBase() const {\n         return fCoinBase;\n     }\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const {\n-        unsigned int nSize = 0;\n-        unsigned int nMaskSize = 0, nMaskCode = 0;\n-        CalcMaskSize(nMaskSize, nMaskCode);\n-        bool fFirst = vout.size() > 0 && !vout[0].IsNull();\n-        bool fSecond = vout.size() > 1 && !vout[1].IsNull();\n-        assert(fFirst || fSecond || nMaskCode);\n-        unsigned int nCode = 8*(nMaskCode - (fFirst || fSecond ? 0 : 1)) + (fCoinBase ? 1 : 0) + (fFirst ? 2 : 0) + (fSecond ? 4 : 0);\n-        // version\n-        nSize += ::GetSerializeSize(VARINT(this->nVersion), nType, nVersion);\n-        // size of header code\n-        nSize += ::GetSerializeSize(VARINT(nCode), nType, nVersion);\n-        // spentness bitmask\n-        nSize += nMaskSize;\n-        // txouts themself\n-        for (unsigned int i = 0; i < vout.size(); i++)\n-            if (!vout[i].IsNull())\n-                nSize += ::GetSerializeSize(CTxOutCompressor(REF(vout[i])), nType, nVersion);\n-        // height\n-        nSize += ::GetSerializeSize(VARINT(nHeight), nType, nVersion);\n-        return nSize;\n-    }\n-\n     template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersion) const {\n-        unsigned int nMaskSize = 0, nMaskCode = 0;\n-        CalcMaskSize(nMaskSize, nMaskCode);\n-        bool fFirst = vout.size() > 0 && !vout[0].IsNull();\n-        bool fSecond = vout.size() > 1 && !vout[1].IsNull();\n-        assert(fFirst || fSecond || nMaskCode);\n-        unsigned int nCode = 8*(nMaskCode - (fFirst || fSecond ? 0 : 1)) + (fCoinBase ? 1 : 0) + (fFirst ? 2 : 0) + (fSecond ? 4 : 0);\n-        // version\n-        ::Serialize(s, VARINT(this->nVersion), nType, nVersion);\n-        // header code\n-        ::Serialize(s, VARINT(nCode), nType, nVersion);\n-        // spentness bitmask\n-        for (unsigned int b = 0; b<nMaskSize; b++) {\n-            unsigned char chAvail = 0;\n-            for (unsigned int i = 0; i < 8 && 2+b*8+i < vout.size(); i++)\n-                if (!vout[2+b*8+i].IsNull())\n-                    chAvail |= (1 << i);\n-            ::Serialize(s, chAvail, nType, nVersion);\n-        }\n-        // txouts themself\n-        for (unsigned int i = 0; i < vout.size(); i++) {\n-            if (!vout[i].IsNull())\n-                ::Serialize(s, CTxOutCompressor(REF(vout[i])), nType, nVersion);\n-        }\n-        // coinbase height\n-        ::Serialize(s, VARINT(nHeight), nType, nVersion);\n+    void Serialize(Stream &s) const {\n+        assert(!IsSpent());\n+        uint32_t code = nHeight * 2 + fCoinBase;\n+        ::Serialize(s, VARINT(code));\n+        ::Serialize(s, CTxOutCompressor(REF(out)));\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream &s, int nType, int nVersion) {\n-        unsigned int nCode = 0;\n-        // version\n-        ::Unserialize(s, VARINT(this->nVersion), nType, nVersion);\n-        // header code\n-        ::Unserialize(s, VARINT(nCode), nType, nVersion);\n-        fCoinBase = nCode & 1;\n-        std::vector<bool> vAvail(2, false);\n-        vAvail[0] = (nCode & 2) != 0;\n-        vAvail[1] = (nCode & 4) != 0;\n-        unsigned int nMaskCode = (nCode / 8) + ((nCode & 6) != 0 ? 0 : 1);\n-        // spentness bitmask\n-        while (nMaskCode > 0) {\n-            unsigned char chAvail = 0;\n-            ::Unserialize(s, chAvail, nType, nVersion);\n-            for (unsigned int p = 0; p < 8; p++) {\n-                bool f = (chAvail & (1 << p)) != 0;\n-                vAvail.push_back(f);\n-            }\n-            if (chAvail != 0)\n-                nMaskCode--;\n-        }\n-        // txouts themself\n-        vout.assign(vAvail.size(), CTxOut());\n-        for (unsigned int i = 0; i < vAvail.size(); i++) {\n-            if (vAvail[i])\n-                ::Unserialize(s, REF(CTxOutCompressor(vout[i])), nType, nVersion);\n-        }\n-        // coinbase height\n-        ::Unserialize(s, VARINT(nHeight), nType, nVersion);\n-        Cleanup();\n-    }\n-\n-    //! mark a vout spent\n-    bool Spend(uint32_t nPos);\n-\n-    //! check whether a particular output is still available\n-    bool IsAvailable(unsigned int nPos) const {\n-        return (nPos < vout.size() && !vout[nPos].IsNull());\n+    void Unserialize(Stream &s) {\n+        uint32_t code = 0;\n+        ::Unserialize(s, VARINT(code));\n+        nHeight = code >> 1;\n+        fCoinBase = code & 1;\n+        ::Unserialize(s, REF(CTxOutCompressor(out)));\n     }\n \n-    //! check whether the entire CCoins is spent\n-    //! note that only !IsPruned() CCoins can be serialized\n-    bool IsPruned() const {\n-        BOOST_FOREACH(const CTxOut &out, vout)\n-            if (!out.IsNull())\n-                return false;\n-        return true;\n+    bool IsSpent() const {\n+        return out.IsNull();\n     }\n \n     size_t DynamicMemoryUsage() const {\n-        size_t ret = memusage::DynamicUsage(vout);\n-        BOOST_FOREACH(const CTxOut &out, vout) {\n-            ret += RecursiveDynamicUsage(out.scriptPubKey);\n-        }\n-        return ret;\n+        return memusage::DynamicUsage(out.scriptPubKey);\n     }\n };\n \n-class CCoinsKeyHasher\n+class SaltedOutpointHasher\n {\n private:\n-    uint256 salt;\n+    /** Salt */\n+    const uint64_t k0, k1;\n \n public:\n-    CCoinsKeyHasher();\n+    SaltedOutpointHasher();\n \n     /**\n      * This *must* return size_t. With Boost 1.46 on 32-bit systems the\n      * unordered_map will behave unpredictably if the custom hasher returns a\n      * uint64_t, resulting in failures when syncing the chain (#4634).\n      */\n-    size_t operator()(const uint256& key) const {\n-        return key.GetHash(salt);\n+    size_t operator()(const COutPoint& id) const {\n+        return SipHashUint256Extra(k0, k1, id.hash, id.n);\n     }\n };\n \n struct CCoinsCacheEntry\n {\n-    CCoins coins; // The actual cached data.\n+    Coin coin; // The actual cached data.\n     unsigned char flags;\n \n     enum Flags {\n         DIRTY = (1 << 0), // This cache entry is potentially different from the version in the parent view.\n         FRESH = (1 << 1), // The parent view does not have this entry (or it is pruned).\n+        /* Note that FRESH is a performance optimization with which we can\n+         * erase coins that are fully spent if we know we do not need to\n+         * flush the changes to the parent cache.  It is always safe to\n+         * not mark FRESH if that condition is not guaranteed.\n+         */\n     };\n \n-    CCoinsCacheEntry() : coins(), flags(0) {}\n+    CCoinsCacheEntry() : flags(0) {}\n+    explicit CCoinsCacheEntry(Coin&& coin_) : coin(std::move(coin_)), flags(0) {}\n };\n \n-typedef boost::unordered_map<uint256, CCoinsCacheEntry, CCoinsKeyHasher> CCoinsMap;\n+typedef std::unordered_map<COutPoint, CCoinsCacheEntry, SaltedOutpointHasher> CCoinsMap;\n \n-struct CCoinsStats\n+/** Cursor for iterating over CoinsView state */\n+class CCoinsViewCursor\n {\n-    int nHeight;\n-    uint256 hashBlock;\n-    uint64_t nTransactions;\n-    uint64_t nTransactionOutputs;\n-    uint64_t nSerializedSize;\n-    uint256 hashSerialized;\n-    CAmount nTotalAmount;\n+public:\n+    CCoinsViewCursor(const uint256 &hashBlockIn): hashBlock(hashBlockIn) {}\n+    virtual ~CCoinsViewCursor() {}\n \n-    CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nSerializedSize(0), nTotalAmount(0) {}\n-};\n+    virtual bool GetKey(COutPoint &key) const = 0;\n+    virtual bool GetValue(Coin &coin) const = 0;\n+    /* Don't care about GetKeySize here */\n+    virtual unsigned int GetValueSize() const = 0;\n \n+    virtual bool Valid() const = 0;\n+    virtual void Next() = 0;\n+\n+    //! Get best block at the time this cursor was created\n+    const uint256 &GetBestBlock() const { return hashBlock; }\n+private:\n+    uint256 hashBlock;\n+};\n \n /** Abstract view on the open txout dataset. */\n class CCoinsView\n {\n public:\n-    //! Retrieve the CCoins (unspent transaction outputs) for a given txid\n-    virtual bool GetCoins(const uint256 &txid, CCoins &coins) const;\n+    /** Retrieve the Coin (unspent transaction output) for a given outpoint.\n+     *  Returns true only when an unspent coin was found, which is returned in coin.\n+     *  When false is returned, coin's value is unspecified.\n+     */\n+    virtual bool GetCoin(const COutPoint &outpoint, Coin &coin) const;\n \n-    //! Just check whether we have data for a given txid.\n-    //! This may (but cannot always) return true for fully spent transactions\n-    virtual bool HaveCoins(const uint256 &txid) const;\n+    //! Just check whether a given outpoint is unspent.\n+    virtual bool HaveCoin(const COutPoint &outpoint) const;\n \n     //! Retrieve the block hash whose state this CCoinsView currently represents\n     virtual uint256 GetBestBlock() const;\n \n-    //! Do a bulk modification (multiple CCoins changes + BestBlock change).\n+    //! Do a bulk modification (multiple Coin changes + BestBlock change).\n     //! The passed mapCoins can be modified.\n     virtual bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n-    //! Calculate statistics about the unspent transaction output set\n-    virtual bool GetStats(CCoinsStats &stats) const;\n+    //! Get a cursor to iterate over the whole state\n+    virtual CCoinsViewCursor *Cursor() const;\n \n     //! As we use CCoinsViews polymorphically, have a virtual destructor\n     virtual ~CCoinsView() {}\n+\n+    //! Estimate database size (0 if not implemented)\n+    virtual size_t EstimateSize() const { return 0; }\n };\n \n \n@@ -346,97 +179,74 @@ class CCoinsViewBacked : public CCoinsView\n \n public:\n     CCoinsViewBacked(CCoinsView *viewIn);\n-    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool HaveCoins(const uint256 &txid) const;\n-    uint256 GetBestBlock() const;\n+    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n+    bool HaveCoin(const COutPoint &outpoint) const override;\n+    uint256 GetBestBlock() const override;\n     void SetBackend(CCoinsView &viewIn);\n-    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n-    bool GetStats(CCoinsStats &stats) const;\n+    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n+    CCoinsViewCursor *Cursor() const override;\n+    size_t EstimateSize() const override;\n };\n \n \n-class CCoinsViewCache;\n-\n-/** \n- * A reference to a mutable cache entry. Encapsulating it allows us to run\n- *  cleanup code after the modification is finished, and keeping track of\n- *  concurrent modifications. \n- */\n-class CCoinsModifier\n-{\n-private:\n-    CCoinsViewCache& cache;\n-    CCoinsMap::iterator it;\n-    size_t cachedCoinUsage; // Cached memory usage of the CCoins object before modification\n-    CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_, size_t usage);\n-\n-public:\n-    CCoins* operator->() { return &it->second.coins; }\n-    CCoins& operator*() { return it->second.coins; }\n-    ~CCoinsModifier();\n-    friend class CCoinsViewCache;\n-};\n-\n /** CCoinsView that adds a memory cache for transactions to another CCoinsView */\n class CCoinsViewCache : public CCoinsViewBacked\n {\n protected:\n-    /* Whether this cache has an active modifier. */\n-    bool hasModifier;\n-\n-\n     /**\n      * Make mutable so that we can \"fill the cache\" even from Get-methods\n      * declared as \"const\".  \n      */\n     mutable uint256 hashBlock;\n     mutable CCoinsMap cacheCoins;\n \n-    /* Cached dynamic memory usage for the inner CCoins objects. */\n+    /* Cached dynamic memory usage for the inner Coin objects. */\n     mutable size_t cachedCoinsUsage;\n \n public:\n     CCoinsViewCache(CCoinsView *baseIn);\n-    ~CCoinsViewCache();\n \n     // Standard CCoinsView methods\n-    bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool HaveCoins(const uint256 &txid) const;\n-    uint256 GetBestBlock() const;\n+    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n+    bool HaveCoin(const COutPoint &outpoint) const override;\n+    uint256 GetBestBlock() const override;\n     void SetBestBlock(const uint256 &hashBlock);\n-    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n+    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) override;\n+    CCoinsViewCursor* Cursor() const override {\n+        throw std::logic_error(\"CCoinsViewCache cursor iteration not supported.\");\n+    }\n \n     /**\n-     * Check if we have the given tx already loaded in this cache.\n-     * The semantics are the same as HaveCoins(), but no calls to\n+     * Check if we have the given utxo already loaded in this cache.\n+     * The semantics are the same as HaveCoin(), but no calls to\n      * the backing CCoinsView are made.\n      */\n-    bool HaveCoinsInCache(const uint256 &txid) const;\n+    bool HaveCoinInCache(const COutPoint &outpoint) const;\n \n     /**\n-     * Return a pointer to CCoins in the cache, or NULL if not found. This is\n-     * more efficient than GetCoins. Modifications to other cache entries are\n-     * allowed while accessing the returned pointer.\n+     * Return a reference to Coin in the cache, or a pruned one if not found. This is\n+     * more efficient than GetCoin.\n+     *\n+     * Generally, do not hold the reference returned for more than a short scope.\n+     * While the current implementation allows for modifications to the contents\n+     * of the cache while holding the reference, this behavior should not be relied\n+     * on! To be safe, best to not hold the returned reference through any other\n+     * calls to this cache.\n      */\n-    const CCoins* AccessCoins(const uint256 &txid) const;\n+    const Coin& AccessCoin(const COutPoint &output) const;\n \n     /**\n-     * Return a modifiable reference to a CCoins. If no entry with the given\n-     * txid exists, a new one is created. Simultaneous modifications are not\n-     * allowed.\n+     * Add a coin. Set potential_overwrite to true if a non-pruned version may\n+     * already exist.\n      */\n-    CCoinsModifier ModifyCoins(const uint256 &txid);\n+    void AddCoin(const COutPoint& outpoint, Coin&& coin, bool potential_overwrite);\n \n     /**\n-     * Return a modifiable reference to a CCoins. Assumes that no entry with the given\n-     * txid exists and creates a new one. This saves a database access in the case where\n-     * the coins were to be wiped out by FromTx anyway.  This should not be called with\n-     * the 2 historical coinbase duplicate pairs because the new coins are marked fresh, and\n-     * in the event the duplicate coinbase was spent before a flush, the now pruned coins\n-     * would not properly overwrite the first coinbase of the pair. Simultaneous modifications\n-     * are not allowed.\n+     * Spend a coin. Pass moveto in order to get the deleted data.\n+     * If no unspent output exists for the passed outpoint, this call\n+     * has no effect.\n      */\n-    CCoinsModifier ModifyNewCoins(const uint256 &txid);\n+    bool SpendCoin(const COutPoint &outpoint, Coin* moveto = nullptr);\n \n     /**\n      * Push the modifications applied to this cache to its base.\n@@ -446,12 +256,12 @@ class CCoinsViewCache : public CCoinsViewBacked\n     bool Flush();\n \n     /**\n-     * Removes the transaction with the given hash from the cache, if it is\n+     * Removes the UTXO with the given outpoint from the cache, if it is\n      * not modified.\n      */\n-    void Uncache(const uint256 &txid);\n+    void Uncache(const COutPoint &outpoint);\n \n-    //! Calculate the size of the cache (in number of transactions)\n+    //! Calculate the size of the cache (in number of transaction outputs)\n     unsigned int GetCacheSize() const;\n \n     //! Calculate the size of the cache (in bytes)\n@@ -477,18 +287,25 @@ class CCoinsViewCache : public CCoinsViewBacked\n      */\n     double GetPriority(const CTransaction &tx, int nHeight, CAmount &inChainInputValue) const;\n \n-    const CTxOut &GetOutputFor(const CTxIn& input) const;\n-\n-    friend class CCoinsModifier;\n-\n private:\n-    CCoinsMap::iterator FetchCoins(const uint256 &txid);\n-    CCoinsMap::const_iterator FetchCoins(const uint256 &txid) const;\n+    CCoinsMap::iterator FetchCoin(const COutPoint &outpoint) const;\n \n     /**\n      * By making the copy constructor private, we prevent accidentally using it when one intends to create a cache on top of a base cache.\n      */\n     CCoinsViewCache(const CCoinsViewCache &);\n };\n \n+//! Utility function to add all of a transaction's outputs to a cache.\n+// It assumes that overwrites are only possible for coinbase transactions,\n+// TODO: pass in a boolean to limit these possible overwrites to known\n+// (pre-BIP34) cases.\n+void AddCoins(CCoinsViewCache& cache, const CTransaction& tx, int nHeight);\n+\n+//! Utility function to find any unspent output with a given txid.\n+// This function can be quite expensive because in the event of a transaction\n+// which is not found in the cache, it can cause up to MAX_OUTPUTS_PER_BLOCK\n+// lookups to database, so it should be used with care.\n+const Coin& AccessByTxid(const CCoinsViewCache& cache, const uint256& txid);\n+\n #endif // SYSCOIN_COINS_H"
      },
      {
        "sha": "ccc8510cb0d49b8c4465c4abad562bcb94fab600",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 2,
        "deletions": 13,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -35,6 +34,7 @@\n #else\n #include <sys/fcntl.h>\n #include <sys/mman.h>\n+#include <sys/select.h>\n #include <sys/socket.h>\n #include <sys/types.h>\n #include <net/if.h>\n@@ -79,17 +79,6 @@ typedef u_int SOCKET;\n #define MSG_NOSIGNAL 0\n #endif\n \n-#ifndef WIN32\n-// PRIO_MAX is not defined on Solaris\n-#ifndef PRIO_MAX\n-#define PRIO_MAX 20\n-#endif\n-#define THREAD_PRIORITY_LOWEST          PRIO_MAX\n-#define THREAD_PRIORITY_BELOW_NORMAL    2\n-#define THREAD_PRIORITY_NORMAL          0\n-#define THREAD_PRIORITY_ABOVE_NORMAL    (-2)\n-#endif\n-\n #if HAVE_DECL_STRNLEN == 0\n size_t strnlen( const char *start, size_t max_len);\n #endif // HAVE_DECL_STRNLEN"
      },
      {
        "sha": "36841e24fde954fc425f181f23953d45c7f493c0",
        "filename": "src/compat/byteswap.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/compat/byteswap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/compat/byteswap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/byteswap.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2014 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "24c9211c954a3a11aeceb9f427c9322c11354de0",
        "filename": "src/compat/endian.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/compat/endian.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/compat/endian.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/endian.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "572af2a9e2a8f9b11f78b5b91d61647bcb3c5278",
        "filename": "src/compat/glibc_compat.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/compat/glibc_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/compat/glibc_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_compat.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n // Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "9fb501dc7775462ea2b408384af3a85044fd9345",
        "filename": "src/compat/glibc_sanity.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/compat/glibc_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/compat/glibc_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_sanity.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n // Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "cee8a98c7f58f1c7dd5275f1daa94d979c9c1dae",
        "filename": "src/compat/glibcxx_sanity.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/compat/glibcxx_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/compat/glibcxx_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibcxx_sanity.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n // Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "dcd213ac33a0fb82f0188bf923fff6733e87179d",
        "filename": "src/compat/sanity.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/compat/sanity.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/compat/sanity.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/sanity.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n // Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "d019c98a5df3078547003cb00c64afd7c1ec8edc",
        "filename": "src/compat/strnlen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/compat/strnlen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/compat/strnlen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/strnlen.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n // Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -16,4 +15,4 @@ size_t strnlen( const char *start, size_t max_len)\n \n     return end ? (size_t)(end - start) : max_len;\n }\n-#endif // HAVE_DECL_STRNLEN\n+#endif // HAVE_DECL_STRNLEN\n\\ No newline at end of file"
      },
      {
        "sha": "20c154fc1e5828b5cd46e1ca8d28133adf2be3c2",
        "filename": "src/compressor.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/compressor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/compressor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "8f4294e3602f139bd6fdc68aaa125d1cda9b1329",
        "filename": "src/compressor.h",
        "status": "modified",
        "additions": 11,
        "deletions": 14,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compressor.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -56,16 +55,8 @@ class CScriptCompressor\n public:\n     CScriptCompressor(CScript &scriptIn) : script(scriptIn) { }\n \n-    unsigned int GetSerializeSize(int nType, int nVersion) const {\n-        std::vector<unsigned char> compr;\n-        if (Compress(compr))\n-            return compr.size();\n-        unsigned int nSize = script.size() + nSpecialScripts;\n-        return script.size() + VARINT(nSize).GetSerializeSize(nType, nVersion);\n-    }\n-\n     template<typename Stream>\n-    void Serialize(Stream &s, int nType, int nVersion) const {\n+    void Serialize(Stream &s) const {\n         std::vector<unsigned char> compr;\n         if (Compress(compr)) {\n             s << CFlatData(compr);\n@@ -77,7 +68,7 @@ class CScriptCompressor\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream &s, int nType, int nVersion) {\n+    void Unserialize(Stream &s) {\n         unsigned int nSize = 0;\n         s >> VARINT(nSize);\n         if (nSize < nSpecialScripts) {\n@@ -87,8 +78,14 @@ class CScriptCompressor\n             return;\n         }\n         nSize -= nSpecialScripts;\n-        script.resize(nSize);\n-        s >> REF(CFlatData(script));\n+        if (nSize > MAX_SCRIPT_SIZE) {\n+            // Overly long script, replace with a short invalid one\n+            script << OP_RETURN;\n+            s.ignore(nSize);\n+        } else {\n+            script.resize(nSize);\n+            s >> REF(CFlatData(script));\n+        }\n     }\n };\n \n@@ -107,7 +104,7 @@ class CTxOutCompressor\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         if (!ser_action.ForRead()) {\n             uint64_t nVal = CompressAmount(txout.nValue);\n             READWRITE(VARINT(nVal));"
      },
      {
        "sha": "ad4ee02401a11d31731e1dbed1d4c5e33538be15",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,21 +1,19 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef SYSCOIN_CONSENSUS_CONSENSUS_H\n #define SYSCOIN_CONSENSUS_CONSENSUS_H\n \n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n-// static const unsigned int MAX_BLOCK_SIZE = 1000000;\n static const unsigned int MAX_LEGACY_BLOCK_SIZE = (10 * 1000 * 1000);\n+static const unsigned int MAX_DIP0001_BLOCK_SIZE = (10 * 1000 * 1000);\n inline unsigned int MaxBlockSize(bool fDIP0001Active /*= false */)\n {\n-    return MAX_LEGACY_BLOCK_SIZE;\n+    return fDIP0001Active ? MAX_DIP0001_BLOCK_SIZE : MAX_LEGACY_BLOCK_SIZE;\n }\n /** The maximum allowed number of signature check operations in a block (network rule) */\n-// static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n inline unsigned int MaxBlockSigOps(bool fDIP0001Active /*= false */)\n {\n     return MaxBlockSize(fDIP0001Active) / 50;"
      },
      {
        "sha": "1376871aa195bf3a9f625fe6aa1b091708135fac",
        "filename": "src/consensus/merkle.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/consensus/merkle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/consensus/merkle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -160,7 +160,7 @@ uint256 BlockMerkleRoot(const CBlock& block, bool* mutated)\n     std::vector<uint256> leaves;\n     leaves.resize(block.vtx.size());\n     for (size_t s = 0; s < block.vtx.size(); s++) {\n-        leaves[s] = block.vtx[s].GetHash();\n+        leaves[s] = block.vtx[s]->GetHash();\n     }\n     return ComputeMerkleRoot(leaves, mutated);\n }\n@@ -170,7 +170,7 @@ std::vector<uint256> BlockMerkleBranch(const CBlock& block, uint32_t position)\n     std::vector<uint256> leaves;\n     leaves.resize(block.vtx.size());\n     for (size_t s = 0; s < block.vtx.size(); s++) {\n-        leaves[s] = block.vtx[s].GetHash();\n+        leaves[s] = block.vtx[s]->GetHash();\n     }\n     return ComputeMerkleBranch(leaves, position);\n }"
      },
      {
        "sha": "137238b32c3ccca6b2ba3420ee9f76ca176a5355",
        "filename": "src/consensus/merkle.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/consensus/merkle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/consensus/merkle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2015 The Bitcoin Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "46dd32ba4e4cc0ddcc05cf6d210868b0147240dd",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 19,
        "deletions": 11,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -18,6 +17,7 @@ enum DeploymentPos\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_CSV, // Deployment of BIP68, BIP112, and BIP113.\n     DEPLOYMENT_DIP0001, // Deployment of DIP0001 and lower transaction fees.\n+    DEPLOYMENT_BIP147, // Deployment of BIP147 (NULLDUMMY)\n     // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n@@ -43,28 +43,36 @@ struct BIP9Deployment {\n  */\n struct Params {\n     uint256 hashGenesisBlock;\n-    int nSubsidyHalvingInterval;\n+    uint256 hashDevnetGenesisBlock;\n \tint nSeniorityInterval;\n \tint nTotalSeniorityIntervals;\n+\tint32_t nAuxpowChainId;\n+    int nSubsidyHalvingInterval;\n+    int nMasternodePaymentsStartBlock;\n+    int nMasternodePaymentsIncreaseBlock;\n+    int nMasternodePaymentsIncreasePeriod; // in blocks\n+    int nInstantSendConfirmationsRequired; // in blocks\n     int nInstantSendKeepLock; // in blocks\n     int nBudgetPaymentsStartBlock;\n     int nBudgetPaymentsCycleBlocks;\n     int nBudgetPaymentsWindowBlocks;\n-    int nBudgetProposalEstablishingTime; // in seconds\n     int nSuperblockStartBlock;\n+    uint256 nSuperblockStartHash;\n     int nSuperblockCycle; // in blocks\n     int nGovernanceMinQuorum; // Min absolute vote count to trigger an action\n     int nGovernanceFilterElements;\n     int nMasternodeMinimumConfirmations;\n-    /** Used to check majorities for block version upgrade */\n-    int nMajorityEnforceBlockUpgrade;\n-    int nMajorityRejectBlockOutdated;\n-    int nMajorityWindow;\n     /** Block height and hash at which BIP34 becomes active */\n     int BIP34Height;\n     uint256 BIP34Hash;\n+    /** Block height at which BIP65 becomes active */\n+    int BIP65Height;\n+    /** Block height at which BIP66 becomes active */\n+    int BIP66Height;\n+    /** Block height at which DIP0001 becomes active */\n+    int DIP0001Height;\n     /**\n-     * Minimum blocks including miner confirmation of the total of nMinerConfirmationWindow blocks in a retargetting period,\n+     * Minimum blocks including miner confirmation of the total of nMinerConfirmationWindow blocks in a retargeting period,\n      * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments.\n      * Default BIP9Deployment::nThreshold value for deployments where it's not specified and for unknown deployments.\n      * Examples: 1916 for 95%, 1512 for testchains.\n@@ -79,11 +87,11 @@ struct Params {\n     bool fPowNoRetargeting;\n     int64_t nPowTargetSpacing;\n     int64_t nPowTargetTimespan;\n+    int nPowKGWHeight;\n+    int nPowDGWHeight;\n     int64_t DifficultyAdjustmentInterval() const { return nPowTargetTimespan / nPowTargetSpacing; }\n     uint256 nMinimumChainWork;\n     uint256 defaultAssumeValid;\n-\t// SYSCOIN: Auxpow chain ID parameter\n-\tint32_t nAuxpowChainId;\n };\n } // namespace Consensus\n "
      },
      {
        "sha": "c5635c41ebd4b4bac3dcae8856fcb6cfd883dd33",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -23,9 +22,9 @@ static const unsigned char REJECT_CHECKPOINT = 0x43;\n class CValidationState {\n private:\n     enum mode_state {\n-        MODE_VALID,   //! everything ok\n-        MODE_INVALID, //! network rule violation (DoS value may be set)\n-        MODE_ERROR,   //! run-time error\n+        MODE_VALID,   //!< everything ok\n+        MODE_INVALID, //!< network rule violation (DoS value may be set)\n+        MODE_ERROR,   //!< run-time error\n     } mode;\n     int nDoS;\n     std::string strRejectReason;"
      },
      {
        "sha": "c4deba10f7c6ae233bd8464643201476c29641bc",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -12,22 +11,23 @@\n class CBlock;\n class CScript;\n class CTransaction;\n+struct CMutableTransaction;\n class uint256;\n class UniValue;\n \n // core_read.cpp\n-extern CScript ParseScript(const std::string& s);\n-extern std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode = false);\n-extern bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx);\n-extern bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n-extern uint256 ParseHashUV(const UniValue& v, const std::string& strName);\n-extern uint256 ParseHashStr(const std::string&, const std::string& strName);\n-extern std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName);\n+CScript ParseScript(const std::string& s);\n+std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode = false);\n+bool DecodeHexTx(CMutableTransaction& tx, const std::string& strHexTx);\n+bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n+uint256 ParseHashUV(const UniValue& v, const std::string& strName);\n+uint256 ParseHashStr(const std::string&, const std::string& strName);\n+std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName);\n \n // core_write.cpp\n-extern std::string FormatScript(const CScript& script);\n-extern std::string EncodeHexTx(const CTransaction& tx);\n-extern void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n-extern void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry);\n+std::string FormatScript(const CScript& script);\n+std::string EncodeHexTx(const CTransaction& tx);\n+void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n+void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry);\n \n #endif // SYSCOIN_CORE_IO_H"
      },
      {
        "sha": "4246fea75cf356abbb1279dadf1c77389fb37d8c",
        "filename": "src/core_memusage.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2015 The Bitcoin Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -50,8 +49,8 @@ static inline size_t RecursiveDynamicUsage(const CMutableTransaction& tx) {\n \n static inline size_t RecursiveDynamicUsage(const CBlock& block) {\n     size_t mem = memusage::DynamicUsage(block.vtx);\n-    for (std::vector<CTransaction>::const_iterator it = block.vtx.begin(); it != block.vtx.end(); it++) {\n-        mem += RecursiveDynamicUsage(*it);\n+    for (const auto& tx : block.vtx) {\n+        mem += memusage::DynamicUsage(tx) + RecursiveDynamicUsage(*tx);\n     }\n     return mem;\n }"
      },
      {
        "sha": "4b57872e6a4644f4ed49710f3471d4044e4e80ec",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 19,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -21,13 +20,11 @@\n #include <boost/algorithm/string/split.hpp>\n #include <boost/assign/list_of.hpp>\n \n-using namespace std;\n-\n CScript ParseScript(const std::string& s)\n {\n     CScript result;\n \n-    static map<string, opcodetype> mapOpNames;\n+    static std::map<std::string, opcodetype> mapOpNames;\n \n     if (mapOpNames.empty())\n     {\n@@ -40,15 +37,15 @@ CScript ParseScript(const std::string& s)\n             const char* name = GetOpName((opcodetype)op);\n             if (strcmp(name, \"OP_UNKNOWN\") == 0)\n                 continue;\n-            string strName(name);\n+            std::string strName(name);\n             mapOpNames[strName] = (opcodetype)op;\n             // Convenience: OP_ADD and just ADD are both recognized:\n             boost::algorithm::replace_first(strName, \"OP_\", \"\");\n             mapOpNames[strName] = (opcodetype)op;\n         }\n     }\n \n-    vector<string> words;\n+    std::vector<std::string> words;\n     boost::algorithm::split(words, s, boost::algorithm::is_any_of(\" \\t\\n\"), boost::algorithm::token_compress_on);\n \n     for (std::vector<std::string>::const_iterator w = words.begin(); w != words.end(); ++w)\n@@ -58,16 +55,16 @@ CScript ParseScript(const std::string& s)\n             // Empty string, ignore. (boost::split given '' will return one word)\n         }\n         else if (all(*w, boost::algorithm::is_digit()) ||\n-            (boost::algorithm::starts_with(*w, \"-\") && all(string(w->begin()+1, w->end()), boost::algorithm::is_digit())))\n+            (boost::algorithm::starts_with(*w, \"-\") && all(std::string(w->begin()+1, w->end()), boost::algorithm::is_digit())))\n         {\n             // Number\n             int64_t n = atoi64(*w);\n             result << n;\n         }\n-        else if (boost::algorithm::starts_with(*w, \"0x\") && (w->begin()+2 != w->end()) && IsHex(string(w->begin()+2, w->end())))\n+        else if (boost::algorithm::starts_with(*w, \"0x\") && (w->begin()+2 != w->end()) && IsHex(std::string(w->begin()+2, w->end())))\n         {\n             // Raw hex data, inserted NOT pushed onto stack:\n-            std::vector<unsigned char> raw = ParseHex(string(w->begin()+2, w->end()));\n+            std::vector<unsigned char> raw = ParseHex(std::string(w->begin()+2, w->end()));\n             result.insert(result.end(), raw.begin(), raw.end());\n         }\n         else if (w->size() >= 2 && boost::algorithm::starts_with(*w, \"'\") && boost::algorithm::ends_with(*w, \"'\"))\n@@ -84,22 +81,24 @@ CScript ParseScript(const std::string& s)\n         }\n         else\n         {\n-            throw runtime_error(\"script parse error\");\n+            throw std::runtime_error(\"script parse error\");\n         }\n     }\n \n     return result;\n }\n \n-bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx)\n+bool DecodeHexTx(CMutableTransaction& tx, const std::string& strHexTx)\n {\n     if (!IsHex(strHexTx))\n         return false;\n \n-    vector<unsigned char> txData(ParseHex(strHexTx));\n+    std::vector<unsigned char> txData(ParseHex(strHexTx));\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n     try {\n         ssData >> tx;\n+        if (!ssData.empty())\n+            return false;\n     }\n     catch (const std::exception&) {\n         return false;\n@@ -125,9 +124,9 @@ bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n     return true;\n }\n \n-uint256 ParseHashUV(const UniValue& v, const string& strName)\n+uint256 ParseHashUV(const UniValue& v, const std::string& strName)\n {\n-    string strHex;\n+    std::string strHex;\n     if (v.isStr())\n         strHex = v.getValStr();\n     return ParseHashStr(strHex, strName);  // Note: ParseHashStr(\"\") throws a runtime_error\n@@ -136,19 +135,19 @@ uint256 ParseHashUV(const UniValue& v, const string& strName)\n uint256 ParseHashStr(const std::string& strHex, const std::string& strName)\n {\n     if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw runtime_error(strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n+        throw std::runtime_error(strName + \" must be hexadecimal string (not '\" + strHex + \"')\");\n \n     uint256 result;\n     result.SetHex(strHex);\n     return result;\n }\n \n-vector<unsigned char> ParseHexUV(const UniValue& v, const string& strName)\n+std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName)\n {\n-    string strHex;\n+    std::string strHex;\n     if (v.isStr())\n         strHex = v.getValStr();\n     if (!IsHex(strHex))\n-        throw runtime_error(strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n+        throw std::runtime_error(strName + \" must be hexadecimal string (not '\" + strHex + \"')\");\n     return ParseHex(strHex);\n }"
      },
      {
        "sha": "e7325c6c9655b07772cd4bdc506b56dbca44e9ef",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 24,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -19,16 +18,14 @@\n #include <boost/assign/list_of.hpp>\n #include <boost/foreach.hpp>\n \n-using namespace std;\n-\n-string FormatScript(const CScript& script)\n+std::string FormatScript(const CScript& script)\n {\n-    string ret;\n+    std::string ret;\n     CScript::const_iterator it = script.begin();\n     opcodetype op;\n     while (it != script.end()) {\n         CScript::const_iterator it2 = it;\n-        vector<unsigned char> vch;\n+        std::vector<unsigned char> vch;\n         if (script.GetOp2(it, op, &vch)) {\n             if (op == OP_0) {\n                 ret += \"0 \";\n@@ -37,9 +34,9 @@ string FormatScript(const CScript& script)\n                 ret += strprintf(\"%i \", op - OP_1NEGATE - 1);\n                 continue;\n             } else if (op >= OP_NOP && op <= OP_NOP10) {\n-                string str(GetOpName(op));\n-                if (str.substr(0, 3) == string(\"OP_\")) {\n-                    ret += str.substr(3, string::npos) + \" \";\n+                std::string str(GetOpName(op));\n+                if (str.substr(0, 3) == std::string(\"OP_\")) {\n+                    ret += str.substr(3, std::string::npos) + \" \";\n                     continue;\n                 }\n             }\n@@ -56,14 +53,14 @@ string FormatScript(const CScript& script)\n     return ret.substr(0, ret.size() - 1);\n }\n \n-const map<unsigned char, string> mapSigHashTypes =\n+const std::map<unsigned char, std::string> mapSigHashTypes =\n     boost::assign::map_list_of\n-    (static_cast<unsigned char>(SIGHASH_ALL), string(\"ALL\"))\n-    (static_cast<unsigned char>(SIGHASH_ALL|SIGHASH_ANYONECANPAY), string(\"ALL|ANYONECANPAY\"))\n-    (static_cast<unsigned char>(SIGHASH_NONE), string(\"NONE\"))\n-    (static_cast<unsigned char>(SIGHASH_NONE|SIGHASH_ANYONECANPAY), string(\"NONE|ANYONECANPAY\"))\n-    (static_cast<unsigned char>(SIGHASH_SINGLE), string(\"SINGLE\"))\n-    (static_cast<unsigned char>(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY), string(\"SINGLE|ANYONECANPAY\"))\n+    (static_cast<unsigned char>(SIGHASH_ALL), std::string(\"ALL\"))\n+    (static_cast<unsigned char>(SIGHASH_ALL|SIGHASH_ANYONECANPAY), std::string(\"ALL|ANYONECANPAY\"))\n+    (static_cast<unsigned char>(SIGHASH_NONE), std::string(\"NONE\"))\n+    (static_cast<unsigned char>(SIGHASH_NONE|SIGHASH_ANYONECANPAY), std::string(\"NONE|ANYONECANPAY\"))\n+    (static_cast<unsigned char>(SIGHASH_SINGLE), std::string(\"SINGLE\"))\n+    (static_cast<unsigned char>(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY), std::string(\"SINGLE|ANYONECANPAY\"))\n     ;\n \n /**\n@@ -73,11 +70,11 @@ const map<unsigned char, string> mapSigHashTypes =\n  *                                     of a signature. Only pass true for scripts you believe could contain signatures. For example,\n  *                                     pass false, or omit the this argument (defaults to false), for scriptPubKeys.\n  */\n-string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n+std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n {\n-    string str;\n+    std::string str;\n     opcodetype opcode;\n-    vector<unsigned char> vch;\n+    std::vector<unsigned char> vch;\n     CScript::const_iterator pc = script.begin();\n     while (pc < script.end()) {\n         if (!str.empty()) {\n@@ -88,12 +85,12 @@ string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n             return str;\n         }\n         if (0 <= opcode && opcode <= OP_PUSHDATA4) {\n-            if (vch.size() <= static_cast<vector<unsigned char>::size_type>(4)) {\n+            if (vch.size() <= static_cast<std::vector<unsigned char>::size_type>(4)) {\n                 str += strprintf(\"%d\", CScriptNum(vch, false).getint());\n             } else {\n                 // the IsUnspendable check makes sure not to try to decode OP_RETURN data that may match the format of a signature\n                 if (fAttemptSighashDecode && !script.IsUnspendable()) {\n-                    string strSigHashDecode;\n+                    std::string strSigHashDecode;\n                     // goal: only attempt to decode a defined sighash type from data that looks like a signature within a scriptSig.\n                     // this won't decode correctly formatted public keys in Pubkey or Multisig scripts due to\n                     // the restrictions on the pubkey formats (see IsCompressedOrUncompressedPubKey) being incongruous with the\n@@ -117,7 +114,7 @@ string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n     return str;\n }\n \n-string EncodeHexTx(const CTransaction& tx)\n+std::string EncodeHexTx(const CTransaction& tx)\n {\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n     ssTx << tx;\n@@ -128,7 +125,7 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n                         UniValue& out, bool fIncludeHex)\n {\n     txnouttype type;\n-    vector<CTxDestination> addresses;\n+    std::vector<CTxDestination> addresses;\n     int nRequired;\n \n     out.pushKV(\"asm\", ScriptToAsmStr(scriptPubKey));"
      },
      {
        "sha": "da44ea6b0d52dfb8073890d310576864458ebb20",
        "filename": "src/crypto/ctaes/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/crypto/ctaes/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/crypto/ctaes/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ctaes/README.md?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -38,4 +38,4 @@ Benchmark:\n Review\n ------\n \n-Results of a formal review of the code can be found in http://bitcoin.sipa.be/ctaes/review.zip\n+Results of a formal review of the code can be found in http://syscoin.sipa.be/ctaes/review.zip"
      },
      {
        "sha": "4cfbd101e2544044da391e3a3310badd62043f68",
        "filename": "src/cuckoocache.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/cuckoocache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/cuckoocache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cuckoocache.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -242,14 +242,14 @@ namespace CuckooCache\n \t\t*/\n \t\tinline std::array<uint32_t, 8> compute_hashes(const Element& e) const\n \t\t{\n-\t\t\treturn { { (uint32_t)((hash_function.template operator()<0>(e) * (uint64_t)size) >> 32),\n-\t\t\t\t(uint32_t)((hash_function.template operator()<1>(e) * (uint64_t)size) >> 32),\n-\t\t\t\t(uint32_t)((hash_function.template operator()<2>(e) * (uint64_t)size) >> 32),\n-\t\t\t\t(uint32_t)((hash_function.template operator()<3>(e) * (uint64_t)size) >> 32),\n-\t\t\t\t(uint32_t)((hash_function.template operator()<4>(e) * (uint64_t)size) >> 32),\n-\t\t\t\t(uint32_t)((hash_function.template operator()<5>(e) * (uint64_t)size) >> 32),\n-\t\t\t\t(uint32_t)((hash_function.template operator()<6>(e) * (uint64_t)size) >> 32),\n-\t\t\t\t(uint32_t)((hash_function.template operator()<7>(e) * (uint64_t)size) >> 32) } };\n+\t\t\treturn { { (uint32_t)(((uint64_t)hash_function.template operator()<0>(e) * (uint64_t)size) >> 32),\n+\t\t\t\t(uint32_t)(((uint64_t)hash_function.template operator()<1>(e) * (uint64_t)size) >> 32),\n+\t\t\t\t(uint32_t)(((uint64_t)hash_function.template operator()<2>(e) * (uint64_t)size) >> 32),\n+\t\t\t\t(uint32_t)(((uint64_t)hash_function.template operator()<3>(e) * (uint64_t)size) >> 32),\n+\t\t\t\t(uint32_t)(((uint64_t)hash_function.template operator()<4>(e) * (uint64_t)size) >> 32),\n+\t\t\t\t(uint32_t)(((uint64_t)hash_function.template operator()<5>(e) * (uint64_t)size) >> 32),\n+\t\t\t\t(uint32_t)(((uint64_t)hash_function.template operator()<6>(e) * (uint64_t)size) >> 32),\n+\t\t\t\t(uint32_t)(((uint64_t)hash_function.template operator()<7>(e) * (uint64_t)size) >> 32) } };\n \t\t}\n \n \t\t/* end"
      },
      {
        "sha": "9dc825cb60fa4971d63cead4e67584c26fdbdddf",
        "filename": "src/darksend-relay.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/darksend-relay.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/darksend-relay.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/darksend-relay.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,5 @@\n \n-// Copyright (c) 2014-2017 The Dash Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Copyright (c) 2015-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -29,7 +29,7 @@ class CDarkSendRelay\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(vinMasternode);\n         READWRITE(vchSig);\n         READWRITE(vchSig2);"
      },
      {
        "sha": "f89a976951f637f62a58d64cca57ae9ffe2016f8",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 96,
        "deletions": 31,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2012-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2012-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -15,20 +14,64 @@\n #include <leveldb/filter_policy.h>\n #include <memenv.h>\n #include <stdint.h>\n-\n-void HandleError(const leveldb::Status& status) throw(dbwrapper_error)\n-{\n-    if (status.ok())\n-        return;\n-    LogPrintf(\"%s\\n\", status.ToString());\n-    if (status.IsCorruption())\n-        throw dbwrapper_error(\"Database corrupted\");\n-    if (status.IsIOError())\n-        throw dbwrapper_error(\"Database I/O error\");\n-    if (status.IsNotFound())\n-        throw dbwrapper_error(\"Database entry missing\");\n-    throw dbwrapper_error(\"Unknown database error\");\n-}\n+#include <algorithm>\n+\n+class CSyscoinLevelDBLogger : public leveldb::Logger {\n+public:\n+    // This code is adapted from posix_logger.h, which is why it is using vsprintf.\n+    // Please do not do this in normal code\n+    virtual void Logv(const char * format, va_list ap) override {\n+            if (!LogAcceptCategory(\"leveldb\"))\n+                return;\n+            char buffer[500];\n+            for (int iter = 0; iter < 2; iter++) {\n+                char* base;\n+                int bufsize;\n+                if (iter == 0) {\n+                    bufsize = sizeof(buffer);\n+                    base = buffer;\n+                }\n+                else {\n+                    bufsize = 30000;\n+                    base = new char[bufsize];\n+                }\n+                char* p = base;\n+                char* limit = base + bufsize;\n+\n+                // Print the message\n+                if (p < limit) {\n+                    va_list backup_ap;\n+                    va_copy(backup_ap, ap);\n+                    // Do not use vsnprintf elsewhere in syscoin source code, see above.\n+                    p += vsnprintf(p, limit - p, format, backup_ap);\n+                    va_end(backup_ap);\n+                }\n+\n+                // Truncate to available space if necessary\n+                if (p >= limit) {\n+                    if (iter == 0) {\n+                        continue;       // Try again with larger buffer\n+                    }\n+                    else {\n+                        p = limit - 1;\n+                    }\n+                }\n+\n+                // Add newline if necessary\n+                if (p == base || p[-1] != '\\n') {\n+                    *p++ = '\\n';\n+                }\n+\n+                assert(p <= limit);\n+                base[std::min(bufsize - 1, (int)(p - base))] = '\\0';\n+                LogPrintStr(base);\n+                if (base != buffer) {\n+                    delete[] base;\n+                }\n+                break;\n+            }\n+    }\n+};\n \n static leveldb::Options GetOptions(size_t nCacheSize)\n {\n@@ -38,6 +81,7 @@ static leveldb::Options GetOptions(size_t nCacheSize)\n     options.filter_policy = leveldb::NewBloomFilterPolicy(10);\n     options.compression = leveldb::kNoCompression;\n     options.max_open_files = 64;\n+    options.info_log = new CSyscoinLevelDBLogger();\n     if (leveldb::kMajorVersion > 1 || (leveldb::kMajorVersion == 1 && leveldb::kMinorVersion >= 16)) {\n         // LevelDB versions before 1.16 consider short writes to be corruption. Only trigger error\n         // on corruption in later versions.\n@@ -62,15 +106,21 @@ CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, b\n         if (fWipe) {\n             LogPrintf(\"Wiping LevelDB in %s\\n\", path.string());\n             leveldb::Status result = leveldb::DestroyDB(path.string(), options);\n-            HandleError(result);\n+            dbwrapper_private::HandleError(result);\n         }\n         TryCreateDirectory(path);\n         LogPrintf(\"Opening LevelDB in %s\\n\", path.string());\n     }\n     leveldb::Status status = leveldb::DB::Open(options, path.string(), &pdb);\n-    HandleError(status);\n+    dbwrapper_private::HandleError(status);\n     LogPrintf(\"Opened LevelDB successfully\\n\");\n \n+    if (GetBoolArg(\"-forcecompactdb\", false)) {\n+        LogPrintf(\"Starting database compaction of %s\\n\", path.string());\n+        pdb->CompactRange(nullptr, nullptr);\n+        LogPrintf(\"Finished database compaction of %s\\n\", path.string());\n+    }\n+\n     // The base-case obfuscation key, which is a noop.\n     obfuscate_key = std::vector<unsigned char>(OBFUSCATE_KEY_NUM_BYTES, '\\000');\n \n@@ -85,10 +135,10 @@ CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, b\n         Write(OBFUSCATE_KEY_KEY, new_key);\n         obfuscate_key = new_key;\n \n-        LogPrintf(\"Wrote new obfuscate key for %s: %s\\n\", path.string(), GetObfuscateKeyHex());\n+        LogPrintf(\"Wrote new obfuscate key for %s: %s\\n\", path.string(), HexStr(obfuscate_key));\n     }\n \n-    LogPrintf(\"Using obfuscation key for %s: %s\\n\", path.string(), GetObfuscateKeyHex());\n+    LogPrintf(\"Using obfuscation key for %s: %s\\n\", path.string(), HexStr(obfuscate_key));\n }\n \n CDBWrapper::~CDBWrapper()\n@@ -97,16 +147,18 @@ CDBWrapper::~CDBWrapper()\n     pdb = NULL;\n     delete options.filter_policy;\n     options.filter_policy = NULL;\n+    delete options.info_log;\n+    options.info_log = NULL;\n     delete options.block_cache;\n     options.block_cache = NULL;\n     delete penv;\n     options.env = NULL;\n }\n \n-bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync) throw(dbwrapper_error)\n+bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync)\n {\n     leveldb::Status status = pdb->Write(fSync ? syncoptions : writeoptions, &batch.batch);\n-    HandleError(status);\n+    dbwrapper_private::HandleError(status);\n     return true;\n }\n \n@@ -132,22 +184,35 @@ std::vector<unsigned char> CDBWrapper::CreateObfuscateKey() const\n \n bool CDBWrapper::IsEmpty()\n {\n-    boost::scoped_ptr<CDBIterator> it(NewIterator());\n+    std::unique_ptr<CDBIterator> it(NewIterator());\n     it->SeekToFirst();\n     return !(it->Valid());\n }\n \n-const std::vector<unsigned char>& CDBWrapper::GetObfuscateKey() const\n+CDBIterator::~CDBIterator() { delete piter; }\n+bool CDBIterator::Valid() { return piter->Valid(); }\n+void CDBIterator::SeekToFirst() { piter->SeekToFirst(); }\n+void CDBIterator::Next() { piter->Next(); }\n+\n+namespace dbwrapper_private {\n+\n+void HandleError(const leveldb::Status& status)\n {\n-    return obfuscate_key;\n+    if (status.ok())\n+        return;\n+    LogPrintf(\"%s\\n\", status.ToString());\n+    if (status.IsCorruption())\n+        throw dbwrapper_error(\"Database corrupted\");\n+    if (status.IsIOError())\n+        throw dbwrapper_error(\"Database I/O error\");\n+    if (status.IsNotFound())\n+        throw dbwrapper_error(\"Database entry missing\");\n+    throw dbwrapper_error(\"Unknown database error\");\n }\n \n-std::string CDBWrapper::GetObfuscateKeyHex() const\n+const std::vector<unsigned char>& GetObfuscateKey(const CDBWrapper &w)\n {\n-    return HexStr(obfuscate_key);\n+    return w.obfuscate_key;\n }\n \n-CDBIterator::~CDBIterator() { delete piter; }\n-bool CDBIterator::Valid() { return piter->Valid(); }\n-void CDBIterator::SeekToFirst() { piter->SeekToFirst(); }\n-void CDBIterator::Next() { piter->Next(); }\n+};"
      },
      {
        "sha": "53752fbeb01d328ab1b13aa0008617956c7c0aa4",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 111,
        "deletions": 47,
        "changes": 158,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2012-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2012-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -18,72 +17,115 @@\n #include <leveldb/db.h>\n #include <leveldb/write_batch.h>\n \n+static const size_t DBWRAPPER_PREALLOC_KEY_SIZE = 64;\n+static const size_t DBWRAPPER_PREALLOC_VALUE_SIZE = 1024;\n+\n class dbwrapper_error : public std::runtime_error\n {\n public:\n     dbwrapper_error(const std::string& msg) : std::runtime_error(msg) {}\n };\n \n-void HandleError(const leveldb::Status& status) throw(dbwrapper_error);\n+class CDBWrapper;\n+\n+/** These should be considered an implementation detail of the specific database.\n+ */\n+namespace dbwrapper_private {\n+\n+/** Handle database error by throwing dbwrapper_error exception.\n+ */\n+void HandleError(const leveldb::Status& status);\n+\n+/** Work around circular dependency, as well as for testing in dbwrapper_tests.\n+ * Database obfuscation should be considered an implementation detail of the\n+ * specific database.\n+ */\n+const std::vector<unsigned char>& GetObfuscateKey(const CDBWrapper &w);\n+\n+};\n \n /** Batch of changes queued to be written to a CDBWrapper */\n class CDBBatch\n {\n     friend class CDBWrapper;\n \n private:\n+    const CDBWrapper &parent;\n     leveldb::WriteBatch batch;\n-    const std::vector<unsigned char> *obfuscate_key;\n+\n+    CDataStream ssKey;\n+    CDataStream ssValue;\n+\n+    size_t size_estimate;\n \n public:\n     /**\n-     * @param[in] obfuscate_key    If passed, XOR data with this key.\n+     * @param[in] parent    CDBWrapper that this batch is to be submitted to\n      */\n-    CDBBatch(const std::vector<unsigned char> *obfuscate_key) : obfuscate_key(obfuscate_key) { };\n+    CDBBatch(const CDBWrapper &_parent) : parent(_parent), ssKey(SER_DISK, CLIENT_VERSION), ssValue(SER_DISK, CLIENT_VERSION), size_estimate(0) { };\n+\n+    void Clear()\n+    {\n+        batch.Clear();\n+        size_estimate = 0;\n+    }\n \n     template <typename K, typename V>\n     void Write(const K& key, const V& value)\n     {\n-        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(ssKey.GetSerializeSize(key));\n+        ssKey.reserve(DBWRAPPER_PREALLOC_KEY_SIZE);\n         ssKey << key;\n-        leveldb::Slice slKey(&ssKey[0], ssKey.size());\n+        leveldb::Slice slKey(ssKey.data(), ssKey.size());\n \n-        CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-        ssValue.reserve(ssValue.GetSerializeSize(value));\n+        ssValue.reserve(DBWRAPPER_PREALLOC_VALUE_SIZE);\n         ssValue << value;\n-        ssValue.Xor(*obfuscate_key);\n-        leveldb::Slice slValue(&ssValue[0], ssValue.size());\n+        ssValue.Xor(dbwrapper_private::GetObfuscateKey(parent));\n+        leveldb::Slice slValue(ssValue.data(), ssValue.size());\n \n         batch.Put(slKey, slValue);\n+        // - varint: key length (1 byte up to 127B, 2 bytes up to 16383B, ...)\n+        // - byte[]: key\n+        // - varint: value length\n+        // - byte[]: value\n+        // The formula below assumes the key and value are both less than 16k.\n+        size_estimate += 3 + (slKey.size() > 127) + slKey.size() + (slValue.size() > 127) + slValue.size();\n+        ssKey.clear();\n+        ssValue.clear();\n     }\n \n     template <typename K>\n     void Erase(const K& key)\n     {\n-        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(ssKey.GetSerializeSize(key));\n+        ssKey.reserve(DBWRAPPER_PREALLOC_KEY_SIZE);\n         ssKey << key;\n-        leveldb::Slice slKey(&ssKey[0], ssKey.size());\n+        leveldb::Slice slKey(ssKey.data(), ssKey.size());\n \n         batch.Delete(slKey);\n+        // - byte: header\n+        // - varint: key length\n+        // - byte[]: key\n+        // The formula below assumes the key is less than 16kB.\n+        size_estimate += 2 + (slKey.size() > 127) + slKey.size();\n+        ssKey.clear();\n     }\n+\n+    size_t SizeEstimate() const { return size_estimate; }\n };\n \n class CDBIterator\n {\n private:\n+    const CDBWrapper &parent;\n     leveldb::Iterator *piter;\n-    const std::vector<unsigned char> *obfuscate_key;\n \n public:\n \n     /**\n-     * @param[in] piterIn          The original leveldb iterator.\n-     * @param[in] obfuscate_key    If passed, XOR data with this key.\n+     * @param[in] _parent          Parent CDBWrapper instance.\n+     * @param[in] _piter           The original leveldb iterator.\n      */\n-    CDBIterator(leveldb::Iterator *piterIn, const std::vector<unsigned char>* obfuscate_key) :\n-        piter(piterIn), obfuscate_key(obfuscate_key) { };\n+    CDBIterator(const CDBWrapper &_parent, leveldb::Iterator *_piter) :\n+        parent(_parent), piter(_piter) { };\n     ~CDBIterator();\n \n     bool Valid();\n@@ -92,9 +134,9 @@ class CDBIterator\n \n     template<typename K> void Seek(const K& key) {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(ssKey.GetSerializeSize(key));\n+        ssKey.reserve(DBWRAPPER_PREALLOC_KEY_SIZE);\n         ssKey << key;\n-        leveldb::Slice slKey(&ssKey[0], ssKey.size());\n+        leveldb::Slice slKey(ssKey.data(), ssKey.size());\n         piter->Seek(slKey);\n     }\n \n@@ -119,7 +161,7 @@ class CDBIterator\n         leveldb::Slice slValue = piter->value();\n         try {\n             CDataStream ssValue(slValue.data(), slValue.data() + slValue.size(), SER_DISK, CLIENT_VERSION);\n-            ssValue.Xor(*obfuscate_key);\n+            ssValue.Xor(dbwrapper_private::GetObfuscateKey(parent));\n             ssValue >> value;\n         } catch (const std::exception&) {\n             return false;\n@@ -135,6 +177,7 @@ class CDBIterator\n \n class CDBWrapper\n {\n+    friend const std::vector<unsigned char>& dbwrapper_private::GetObfuscateKey(const CDBWrapper &w);\n private:\n     //! custom environment this database is using (may be NULL in case of default environment)\n     leveldb::Env* penv;\n@@ -181,20 +224,20 @@ class CDBWrapper\n     ~CDBWrapper();\n \n     template <typename K, typename V>\n-    bool Read(const K& key, V& value) const throw(dbwrapper_error)\n+    bool Read(const K& key, V& value) const\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(ssKey.GetSerializeSize(key));\n+        ssKey.reserve(DBWRAPPER_PREALLOC_KEY_SIZE);\n         ssKey << key;\n-        leveldb::Slice slKey(&ssKey[0], ssKey.size());\n+        leveldb::Slice slKey(ssKey.data(), ssKey.size());\n \n         std::string strValue;\n         leveldb::Status status = pdb->Get(readoptions, slKey, &strValue);\n         if (!status.ok()) {\n             if (status.IsNotFound())\n                 return false;\n             LogPrintf(\"LevelDB read failure: %s\\n\", status.ToString());\n-            HandleError(status);\n+            dbwrapper_private::HandleError(status);\n         }\n         try {\n             CDataStream ssValue(strValue.data(), strValue.data() + strValue.size(), SER_DISK, CLIENT_VERSION);\n@@ -207,75 +250,96 @@ class CDBWrapper\n     }\n \n     template <typename K, typename V>\n-    bool Write(const K& key, const V& value, bool fSync = false) throw(dbwrapper_error)\n+    bool Write(const K& key, const V& value, bool fSync = false)\n     {\n-        CDBBatch batch(&obfuscate_key);\n+        CDBBatch batch(*this);\n         batch.Write(key, value);\n         return WriteBatch(batch, fSync);\n     }\n \n     template <typename K>\n-    bool Exists(const K& key) const throw(dbwrapper_error)\n+    bool Exists(const K& key) const\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(ssKey.GetSerializeSize(key));\n+        ssKey.reserve(DBWRAPPER_PREALLOC_KEY_SIZE);\n         ssKey << key;\n-        leveldb::Slice slKey(&ssKey[0], ssKey.size());\n+        leveldb::Slice slKey(ssKey.data(), ssKey.size());\n \n         std::string strValue;\n         leveldb::Status status = pdb->Get(readoptions, slKey, &strValue);\n         if (!status.ok()) {\n             if (status.IsNotFound())\n                 return false;\n             LogPrintf(\"LevelDB read failure: %s\\n\", status.ToString());\n-            HandleError(status);\n+            dbwrapper_private::HandleError(status);\n         }\n         return true;\n     }\n \n     template <typename K>\n-    bool Erase(const K& key, bool fSync = false) throw(dbwrapper_error)\n+    bool Erase(const K& key, bool fSync = false)\n     {\n-        CDBBatch batch(&obfuscate_key);\n+        CDBBatch batch(*this);\n         batch.Erase(key);\n         return WriteBatch(batch, fSync);\n     }\n \n-    bool WriteBatch(CDBBatch& batch, bool fSync = false) throw(dbwrapper_error);\n+    bool WriteBatch(CDBBatch& batch, bool fSync = false);\n \n     // not available for LevelDB; provide for compatibility with BDB\n     bool Flush()\n     {\n         return true;\n     }\n \n-    bool Sync() throw(dbwrapper_error)\n+    bool Sync()\n     {\n-        CDBBatch batch(&obfuscate_key);\n+        CDBBatch batch(*this);\n         return WriteBatch(batch, true);\n     }\n \n     CDBIterator *NewIterator()\n     {\n-        return new CDBIterator(pdb->NewIterator(iteroptions), &obfuscate_key);\n+        return new CDBIterator(*this, pdb->NewIterator(iteroptions));\n     }\n \n     /**\n      * Return true if the database managed by this class contains no entries.\n      */\n     bool IsEmpty();\n \n-    /**\n-     * Accessor for obfuscate_key.\n-     */\n-    const std::vector<unsigned char>& GetObfuscateKey() const;\n+    template<typename K>\n+    size_t EstimateSize(const K& key_begin, const K& key_end) const\n+    {\n+        CDataStream ssKey1(SER_DISK, CLIENT_VERSION), ssKey2(SER_DISK, CLIENT_VERSION);\n+        ssKey1.reserve(DBWRAPPER_PREALLOC_KEY_SIZE);\n+        ssKey2.reserve(DBWRAPPER_PREALLOC_KEY_SIZE);\n+        ssKey1 << key_begin;\n+        ssKey2 << key_end;\n+        leveldb::Slice slKey1(ssKey1.data(), ssKey1.size());\n+        leveldb::Slice slKey2(ssKey2.data(), ssKey2.size());\n+        uint64_t size = 0;\n+        leveldb::Range range(slKey1, slKey2);\n+        pdb->GetApproximateSizes(&range, 1, &size);\n+        return size;\n+    }\n \n     /**\n-     * Return the obfuscate_key as a hex-formatted string.\n+     * Compact a certain range of keys in the database.\n      */\n-    std::string GetObfuscateKeyHex() const;\n+    template<typename K>\n+    void CompactRange(const K& key_begin, const K& key_end) const\n+    {\n+        CDataStream ssKey1(SER_DISK, CLIENT_VERSION), ssKey2(SER_DISK, CLIENT_VERSION);\n+        ssKey1.reserve(DBWRAPPER_PREALLOC_KEY_SIZE);\n+        ssKey2.reserve(DBWRAPPER_PREALLOC_KEY_SIZE);\n+        ssKey1 << key_begin;\n+        ssKey2 << key_end;\n+        leveldb::Slice slKey1(ssKey1.data(), ssKey1.size());\n+        leveldb::Slice slKey2(ssKey2.data(), ssKey2.size());\n+        pdb->CompactRange(&slKey1, &slKey2);\n+    }\n \n };\n \n #endif // SYSCOIN_DBWRAPPER_H\n-"
      },
      {
        "sha": "988221b89fb155ce86ff5eb1eaab3bd8e903a471",
        "filename": "src/drafted/governance-classes.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/drafted/governance-classes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/drafted/governance-classes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/drafted/governance-classes.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Copyright (c) 2015-2017 The Syscoin Core developers\n \n /*\n@@ -95,7 +95,7 @@\n  *          -> DAO\n  *              -> COMPANY, COMMITTEE, FOUNDATION, ..\n  *              -> GROUP1 (CORE)\n- *                  - USER : EVAN DUFFIELD\n+ *                  - USER : EVAN satoshiIELD\n  *                      -> CONTRACT1 (INTERNAL CONTRACT)\n  *                      -> PROJECT1\n  *              -> PROJECT1\n@@ -162,7 +162,7 @@ class CSyscoinNetwork : public CGovernanceObject\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         // TODO : For testnet version bump\n         READWRITE(nGovernanceType);\n "
      },
      {
        "sha": "b0f5cc5c11f87c38156d0f7bc9ff0f043bbfe035",
        "filename": "src/drafted/governance-keys.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/drafted/governance-keys.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/drafted/governance-keys.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/drafted/governance-keys.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,5 @@\n \n-// // Copyright (c) 2014-2017 The Dash Core developers\n+// // Copyright (c) 2014-2017 The Syscoin Core developers\n // Copyright (c) 2015-2017 The Syscoin Core developers\n // // Distributed under the MIT/X11 software license, see the accompanying\n // // file COPYING or http://www.opensource.org/licenses/mit-license.php."
      },
      {
        "sha": "746cd1b277dceba4f0987af07cbaefc2eb8c67b3",
        "filename": "src/dsnotificationinterface.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 26,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/dsnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/dsnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dsnotificationinterface.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,16 +1,18 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n #include \"dsnotificationinterface.h\"\n #include \"instantx.h\"\n #include \"governance.h\"\n #include \"masternodeman.h\"\n #include \"masternode-payments.h\"\n #include \"masternode-sync.h\"\n+#include \"privatesend.h\"\n+#ifdef ENABLE_WALLET\n #include \"privatesend-client.h\"\n-#include \"txmempool.h\"\n+#endif // ENABLE_WALLET\n \n void CDSNotificationInterface::InitializeCurrentBlockTip()\n {\n@@ -35,39 +37,27 @@ void CDSNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, con\n \n     masternodeSync.UpdatedBlockTip(pindexNew, fInitialDownload, connman);\n \n-    // DIP0001 updates\n-\n-    bool fDIP0001ActiveAtTipTmp = fDIP0001ActiveAtTip;\n-    // Update global flags\n-    fDIP0001ActiveAtTip = (VersionBitsState(pindexNew, Params().GetConsensus(), Consensus::DEPLOYMENT_DIP0001, versionbitscache) == THRESHOLD_ACTIVE);\n-    fDIP0001WasLockedIn = fDIP0001ActiveAtTip || (VersionBitsState(pindexNew, Params().GetConsensus(), Consensus::DEPLOYMENT_DIP0001, versionbitscache) == THRESHOLD_LOCKED_IN);\n-\n-    // Update min fees only if activation changed and we are using default fees\n-    if (fDIP0001ActiveAtTipTmp != fDIP0001ActiveAtTip) {\n-        if (!mapArgs.count(\"-minrelaytxfee\")) {\n-            ::minRelayTxFee = CFeeRate(fDIP0001ActiveAtTip ? DEFAULT_DIP0001_MIN_RELAY_TX_FEE : DEFAULT_LEGACY_MIN_RELAY_TX_FEE);\n-            mempool.UpdateMinFee(::minRelayTxFee);\n-        }\n-        if (!mapArgs.count(\"-mintxfee\")) {\n-            CWallet::minTxFee = CFeeRate(fDIP0001ActiveAtTip ? DEFAULT_DIP0001_TRANSACTION_MINFEE : DEFAULT_LEGACY_TRANSACTION_MINFEE);\n-        }\n-        if (!mapArgs.count(\"-fallbackfee\")) {\n-            CWallet::fallbackFee = CFeeRate(fDIP0001ActiveAtTip ? DEFAULT_DIP0001_FALLBACK_FEE : DEFAULT_LEGACY_FALLBACK_FEE);\n-        }\n-    }\n+    // Update global DIP0001 activation status\n+    fDIP0001ActiveAtTip = pindexNew->nHeight >= Params().GetConsensus().DIP0001Height;\n \n     if (fInitialDownload)\n         return;\n \n+    if (fLiteMode)\n+        return;\n+\n     mnodeman.UpdatedBlockTip(pindexNew);\n+    CPrivateSend::UpdatedBlockTip(pindexNew);\n+#ifdef ENABLE_WALLET\n     privateSendClient.UpdatedBlockTip(pindexNew);\n+#endif // ENABLE_WALLET\n     instantsend.UpdatedBlockTip(pindexNew);\n     mnpayments.UpdatedBlockTip(pindexNew, connman);\n     governance.UpdatedBlockTip(pindexNew, connman);\n }\n \n-void CDSNotificationInterface::SyncTransaction(const CTransaction &tx, const CBlock *pblock)\n+void CDSNotificationInterface::SyncTransaction(const CTransaction &tx, const CBlockIndex *pindex, int posInBlock)\n {\n-    instantsend.SyncTransaction(tx, pblock);\n-    CPrivateSend::SyncTransaction(tx, pblock);\n+    instantsend.SyncTransaction(tx, pindex, posInBlock);\n+    CPrivateSend::SyncTransaction(tx, pindex, posInBlock);\n }"
      },
      {
        "sha": "055a94360050761cb5d32e4dc76bce7cd69e768f",
        "filename": "src/dsnotificationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/dsnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/dsnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dsnotificationinterface.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2015 The Bitcoin Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -22,7 +21,7 @@ class CDSNotificationInterface : public CValidationInterface\n     void AcceptedBlockHeader(const CBlockIndex *pindexNew) override;\n     void NotifyHeaderTip(const CBlockIndex *pindexNew, bool fInitialDownload) override;\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n-    void SyncTransaction(const CTransaction &tx, const CBlock *pblock) override;\n+    void SyncTransaction(const CTransaction &tx, const CBlockIndex *pindex, int posInBlock) override;\n \n private:\n     CConnman& connman;"
      },
      {
        "sha": "28657024166eeb9def1756cf6750227643ced5e1",
        "filename": "src/escrow.cpp",
        "status": "modified",
        "additions": 79,
        "deletions": 123,
        "changes": 202,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/escrow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/escrow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/escrow.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -17,7 +17,7 @@\n #include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"chainparams.h\"\n-#include \"coincontrol.h\"\n+#include \"wallet/coincontrol.h\"\n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n #include <boost/lexical_cast.hpp>\n #include <boost/algorithm/hex.hpp>\n@@ -27,7 +27,6 @@\n #include <boost/range/adaptor/reversed.hpp>\n using namespace std;\n extern CScript _createmultisig_redeemScript(const UniValue& params);\n-extern void SendMoneySyscoin(const vector<unsigned char> &vchAlias, const vector<unsigned char> &vchWitness, const CRecipient &aliasRecipient, vector<CRecipient> &vecSend, CWalletTx& wtxNew, CCoinControl* coinControl, bool fUseInstantSend=false, bool transferAlias=false);\n void PutToEscrowList(std::vector<CEscrow> &escrowList, CEscrow& index) {\n \tint i = escrowList.size() - 1;\n \tBOOST_REVERSE_FOREACH(CEscrow &o, escrowList) {\n@@ -58,8 +57,8 @@ int64_t GetEscrowArbiterFee(const int64_t &escrowValue, const float &fEscrowFee)\n \t\tfFee = 0.005;\n \tint fee = 1 / fFee;\n \tint64_t nFee = escrowValue / fee;\n-\tif (nFee < DEFAULT_LEGACY_MIN_RELAY_TX_FEE)\n-\t\tnFee = DEFAULT_LEGACY_MIN_RELAY_TX_FEE;\n+\tif (nFee < DEFAULT_MIN_RELAY_TX_FEE)\n+\t\tnFee = DEFAULT_MIN_RELAY_TX_FEE;\n \treturn nFee;\n }\n \n@@ -717,7 +716,7 @@ bool CheckEscrowInputs(const CTransaction &tx, int op, const vector<vector<unsig\n \t\t\t}\n \t\t\telse if (op == OP_ESCROW_REFUND)\n \t\t\t{\n-\t\t\t\tif (theEscrow.op != OP_ESCROW_ACTIVATE && theEscrow.op != OP_ESCROW_RELEASE)\n+\t\t\t\tif (theEscrow.op != OP_ESCROW_ACTIVATE && theEscrow.op != OP_ESCROW_REFUND && theEscrow.op != OP_ESCROW_RELEASE)\n \t\t\t\t{\n \t\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4047 - \" + _(\"Can only refund an active escrow\");\n \t\t\t\t\treturn true;\n@@ -1034,8 +1033,9 @@ bool CheckEscrowInputs(const CTransaction &tx, int op, const vector<vector<unsig\n \t}\n     return true;\n }\n-UniValue escrowbid(const UniValue& params, bool fHelp) {\n-\tif (fHelp || params.size() != 5)\n+UniValue escrowbid(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || params.size() != 5)\n \t\tthrow runtime_error(\n \t\t\t\"escrowbid [alias] [escrow] [bid_in_payment_option] [bid_in_offer_currency] [witness]\\n\"\n \t\t\t\"<alias> An alias you own.\\n\"\n@@ -1102,16 +1102,11 @@ UniValue escrowbid(const UniValue& params, bool fHelp) {\n \n \n \n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\n-\tSendMoneySyscoin(vchAlias, vchWitness, aliasRecipient, vecSend, wtx, &coinControl);\n-\tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n-\treturn res;\n+\treturn syscointxfund_helper(vchAlias, vchWitness, aliasRecipient, vecSend);\n }\n-UniValue escrowaddshipping(const UniValue& params, bool fHelp) {\n-\tif (fHelp || params.size() != 3)\n+UniValue escrowaddshipping(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || params.size() != 3)\n \t\tthrow runtime_error(\n \t\t\t\"escrowaddshipping [escrow] [shipping amount] [witness]\\n\"\n \t\t\t\"<escrow> Escrow GUID to add shipping to.\\n\"\n@@ -1177,19 +1172,13 @@ UniValue escrowaddshipping(const UniValue& params, bool fHelp) {\n \tvecSend.push_back(fee);\n \n \n-\n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\n-\tSendMoneySyscoin(bidderalias.vchAlias, vchWitness, aliasRecipient, vecSend, wtx, &coinControl);\n-\tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n-\treturn res;\n+\treturn syscointxfund_helper(bidderalias.vchAlias, vchWitness, aliasRecipient, vecSend);\n }\n-UniValue escrownew(const UniValue& params, bool fHelp) {\n-    if (fHelp || params.size() != 16)\n+UniValue escrownew(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+    if (request.fHelp || params.size() != 16)\n         throw runtime_error(\n-\t\t\t\"escrownew [getamountandaddress] [alias] [arbiter alias] [offer] [quantity] [buynow] [total_in_payment_option] [shipping amount] [network fee] [arbiter fee] [witness fee] [extTx] [payment option] [bid_in_payment_option] [bid_in_offer_currency] [witness]\\n\"\n+\t\t\t\"escrownew [getamountandaddress] [alias] [arbiter alias] [offer] [quantity] [buynow] [total_in_payment_option] [shipping_amount] [network_fee] [arbiter_fee] [witness_fee] [extTx] [payment_option] [bid_in_payment_option] [bid_in_offer_currency] [witness]\\n\"\n \t\t\t\t\"<getamountandaddress> True or false. Get deposit and total escrow amount aswell as escrow address for funding. If buynow is false pass bid amount in bid_in_payment_option to get total needed to complete escrow. If buynow is true amount is calculated based on offer price and quantity.\\n\"\n \t\t\t\t\"<alias> An alias you own.\\n\"\n \t\t\t\t\"<arbiter alias> Alias of Arbiter.\\n\"\n@@ -1342,7 +1331,9 @@ UniValue escrownew(const UniValue& params, bool fHelp) {\n \tCScript redeemScript;\n \ttry\n \t{\n-\t\tresCreate = createmultisig(arrayParams, false);\n+\t\tJSONRPCRequest request1;\n+\t\trequest1.params = arrayParams;\n+\t\tresCreate = createmultisig(request1);\n \t}\n \tcatch (UniValue& objError)\n \t{\n@@ -1448,18 +1439,13 @@ UniValue escrownew(const UniValue& params, bool fHelp) {\n \tvecSend.push_back(fee);\n \n \n-\n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\n-\tSendMoneySyscoin(buyeralias.vchAlias, vchWitness, aliasRecipient, vecSend, wtx, &coinControl);\n-\tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n+\tUniValue res = syscointxfund_helper(buyeralias.vchAlias, vchWitness, aliasRecipient, vecSend);\n \tres.push_back(stringFromVch(vchEscrow));\n \treturn res;\n }\n-UniValue escrowacknowledge(const UniValue& params, bool fHelp) {\n-\tif (fHelp || params.size() != 2)\n+UniValue escrowacknowledge(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || params.size() != 2)\n \t\tthrow runtime_error(\n \t\t\t\"escrowacknowledge [escrow guid] [witness]\\n\"\n \t\t\t\"Acknowledge escrow payment as seller of offer.\\n\"\n@@ -1531,18 +1517,12 @@ UniValue escrowacknowledge(const UniValue& params, bool fHelp) {\n \tvecSend.push_back(fee);\n \n \n-\n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\n-\tSendMoneySyscoin(sellerAliasLatest.vchAlias, vchWitness, aliasRecipient, vecSend, wtx, &coinControl);\n-\tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n-\treturn res;\n+\treturn syscointxfund_helper(sellerAliasLatest.vchAlias, vchWitness, aliasRecipient, vecSend);\n \n }\n-UniValue escrowcreaterawtransaction(const UniValue& params, bool fHelp) {\n-\tif (fHelp || params.size() != 4)\n+UniValue escrowcreaterawtransaction(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || params.size() != 4)\n \t\tthrow runtime_error(\n \t\t\t\"escrowcreaterawtransaction [type] [escrow guid] [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n, \\\"satoshis\\\":n},...] [user role]\\n\"\n \t\t\t\"Creates raw transaction for escrow refund or release, sign the output raw transaction and pass it via the rawtx parameter to escrowrelease. Type is 'refund' or 'release'. Third parameter is array of input (txid, vout, amount) pairs to be used to fund escrow payment. User role represents either 'seller', 'buyer' or 'arbiter', represents who signed for the payment of the escrow. 'seller' or 'arbiter' is valid for type 'refund' (if you are the buyer during refund leave this empty), while 'buyer' or 'arbiter' is valid for type 'release' (if you are the seller during release leave this empty). You only need to provide this parameter when calling escrowrelease or escrowrefund. \\n\"\n@@ -1601,7 +1581,7 @@ UniValue escrowcreaterawtransaction(const UniValue& params, bool fHelp) {\n \t\tCScript script;\n \t\tGetAddress(witnessAliasLatest, &witnessAddressPayment, script, escrow.nPaymentOption);\n \t}\n-\tCScript scriptPubKeyAlias, scriptPubKeyAliasOrig;\n+\tCScript scriptPubKeyAlias;\n \tCAmount nEscrowFees = escrow.nDeposit + escrow.nArbiterFee + escrow.nWitnessFee + escrow.nNetworkFee + escrow.nShipping;\n \tCAmount nBalance = 0;\n \tfor (unsigned int i = 0; i < inputs.size(); i++)\n@@ -1669,7 +1649,9 @@ UniValue escrowcreaterawtransaction(const UniValue& params, bool fHelp) {\n \tUniValue resCreate;\n \ttry\n \t{\n-\t\tresCreate = createrawtransaction(arrayCreateParams, false);\n+\t\tJSONRPCRequest request1;\n+\t\trequest1.params = arrayCreateParams;\n+\t\tresCreate = createrawtransaction(request1);\n \t}\n \tcatch (UniValue& objError)\n \t{\n@@ -1683,13 +1665,13 @@ UniValue escrowcreaterawtransaction(const UniValue& params, bool fHelp) {\n \t// if this is called prior to escrowcompleterelease, then it probably has been signed already, so apply the existing inputs signatures to the escrow creation transaction\n \t// and pass the new raw transaction to the next person to sign and call the escrowcompleterelease with the final raw tx.\n \tif (!escrow.scriptSigs.empty()) {\n-\t\tCTransaction rawTx;\n-\t\tDecodeHexTx(rawTx, createEscrowSpendingTx);\n-\t\tCMutableTransaction rawTxm(rawTx);\n+\t\tCMutableTransaction rawTxm;\n+\t\tDecodeHexTx(rawTxm, createEscrowSpendingTx);\n \t\tfor (int i = 0; i < escrow.scriptSigs.size(); i++) {\n \t\t\tif (rawTxm.vin.size() >= i)\n \t\t\t\trawTxm.vin[i].scriptSig = CScript(escrow.scriptSigs[i].begin(), escrow.scriptSigs[i].end());\n \t\t}\n+\t\tCTransaction rawTx(rawTxm);\n \t\tstrRawTx = EncodeHexTx(rawTxm);\n \t}\n \n@@ -1698,8 +1680,9 @@ UniValue escrowcreaterawtransaction(const UniValue& params, bool fHelp) {\n \tres.push_back(ValueFromAmount(nBalance));\n \treturn res;\n }\n-UniValue escrowrelease(const UniValue& params, bool fHelp) {\n-    if (fHelp || params.size() != 4)\n+UniValue escrowrelease(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+    if (request.fHelp || params.size() != 4)\n         throw runtime_error(\n \t\t\t\"escrowrelease [escrow guid] [user role] [rawtx] [witness]\\n\"\n \t\t\t\"Releases escrow funds to seller. User role represents either 'buyer' or 'arbiter'. Third parameter (rawtx) is the signed response from escrowcreaterawtransaction. You must sign this transaction externally prior to passing in.\\n\"\n@@ -1733,28 +1716,26 @@ UniValue escrowrelease(const UniValue& params, bool fHelp) {\n \t\tGetAddress(buyerAliasLatest, &buyerAddressPayment, buyerScript, escrow.nPaymentOption);\n \t}\n \n-\tCScript scriptPubKeyAlias, scriptPubKeyAliasOrig;\n+\tCScript scriptPubKeyAlias;\n \tCAliasIndex theAlias;\n \n \t// who is initiating release arbiter or buyer?\n \tif(role == \"arbiter\")\n \t{\n-\t\tscriptPubKeyAliasOrig = arbiterScript;\n \t\tscriptPubKeyAlias << CScript::EncodeOP_N(OP_SYSCOIN_ALIAS) << CScript::EncodeOP_N(OP_ALIAS_UPDATE) << arbiterAliasLatest.vchAlias << arbiterAliasLatest.vchGUID << vchFromString(\"\") << vchWitness << OP_2DROP << OP_2DROP << OP_2DROP;\n-\t\tscriptPubKeyAlias += scriptPubKeyAliasOrig;\n+\t\tscriptPubKeyAlias += arbiterScript;\n \t\ttheAlias = arbiterAliasLatest;\n \t}\n \telse if(role == \"buyer\")\n \t{\n-\t\tscriptPubKeyAliasOrig = buyerScript;\n \t\tscriptPubKeyAlias = CScript() << CScript::EncodeOP_N(OP_SYSCOIN_ALIAS) << CScript::EncodeOP_N(OP_ALIAS_UPDATE) << buyerAliasLatest.vchAlias << buyerAliasLatest.vchGUID << vchFromString(\"\") << vchWitness << OP_2DROP << OP_2DROP << OP_2DROP;\n-\t\tscriptPubKeyAlias += scriptPubKeyAliasOrig;\n+\t\tscriptPubKeyAlias += buyerScript;\n \t\ttheAlias = buyerAliasLatest;\n \t}\n \telse\n \t\tthrow runtime_error(\"SYSCOIN_ESCROW_RPC_ERROR: ERRCODE: 4529 - \" + _(\"Invalid role\"));\n \n-\tCTransaction signedTx;\n+\tCMutableTransaction signedTx;\n \tDecodeHexTx(signedTx, rawtx);\n \tescrow.ClearEscrow();\n \tfor (int i = 0; i < signedTx.vin.size(); i++) {\n@@ -1794,18 +1775,12 @@ UniValue escrowrelease(const UniValue& params, bool fHelp) {\n \tCreateFeeRecipient(scriptData, data, fee);\n \tvecSend.push_back(fee);\n \n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\n-\tSendMoneySyscoin(theAlias.vchAlias, vchWitness, aliasRecipient, vecSend, wtx, &coinControl);\n-\n-\tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n-\treturn res;\n+\treturn syscointxfund_helper(theAlias.vchAlias, vchWitness, aliasRecipient, vecSend);\n }\n \n-UniValue escrowcompleterelease(const UniValue& params, bool fHelp) {\n-    if (fHelp || params.size() != 3)\n+UniValue escrowcompleterelease(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+    if (request.fHelp || params.size() != 3)\n         throw runtime_error(\n \t\t\t\"escrowcompleterelease [escrow guid] [rawtx] [witness]\\n\"\n                          \"Completes an escrow release by creating the escrow complete release transaction on syscoin blockchain.\\n\"\n@@ -1815,7 +1790,7 @@ UniValue escrowcompleterelease(const UniValue& params, bool fHelp) {\n     // gather & validate inputs\n     vector<unsigned char> vchEscrow = vchFromValue(params[0]);\n \tstring rawTx = params[1].get_str();\n-\tCTransaction myRawTx;\n+\tCMutableTransaction myRawTx;\n \tDecodeHexTx(myRawTx,rawTx);\n \tvector<unsigned char> vchWitness;\n \tvchWitness = vchFromValue(params[2]);\n@@ -1873,29 +1848,29 @@ UniValue escrowcompleterelease(const UniValue& params, bool fHelp) {\n \tvecSend.push_back(fee);\n \n \n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\n-\tSendMoneySyscoin(sellerAliasLatest.vchAlias, vchWitness, aliasRecipient, vecSend, wtx, &coinControl);\n+\n+\tconst UniValue res = syscointxfund_helper(sellerAliasLatest.vchAlias, vchWitness, aliasRecipient, vecSend);\n \tUniValue returnRes;\n \tUniValue sendParams(UniValue::VARR);\n \tsendParams.push_back(rawTx);\n \ttry\n \t{\n \t\t// broadcast the payment transaction to syscoin network if not external transaction\n-\t\tif (!extPayment)\n-\t\t\treturnRes = sendrawtransaction(sendParams, false);\n+\t\tif (!extPayment) {\n+\t\t\tJSONRPCRequest request1;\n+\t\t\trequest1.params = sendParams;\n+\t\t\treturnRes = sendrawtransaction(request1);\n+\t\t}\n \t}\n \tcatch (UniValue& objError)\n \t{\n \t\tthrow runtime_error(find_value(objError, \"message\").get_str());\n \t}\n-\tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n \treturn res;\n }\n-UniValue escrowrefund(const UniValue& params, bool fHelp) {\n-\tif (fHelp || params.size() != 4)\n+UniValue escrowrefund(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || params.size() != 4)\n \t\tthrow runtime_error(\n \t\t\t\"escrowrefund [escrow guid] [user role] [rawtx] [witness]\\n\"\n \t\t\t\"Refunds escrow funds to buyer. User role represents either 'seller' or 'arbiter'. Third parameter (rawtx) is the signed response from escrowcreaterawtransaction. You must sign this transaction externally prior to passing in.\\n\"\n@@ -1929,28 +1904,26 @@ UniValue escrowrefund(const UniValue& params, bool fHelp) {\n \t\tGetAddress(sellerAliasLatest, &sellerAddressPayment, sellerScript, escrow.nPaymentOption);\n \t}\n \n-\tCScript scriptPubKeyAlias, scriptPubKeyAliasOrig;\n+\tCScript scriptPubKeyAlias;\n \tCAliasIndex theAlias;\n \n \t// who is initiating refund arbiter or seller?\n \tif (role == \"arbiter\")\n \t{\n-\t\tscriptPubKeyAliasOrig = arbiterScript;\n \t\tscriptPubKeyAlias << CScript::EncodeOP_N(OP_SYSCOIN_ALIAS) << CScript::EncodeOP_N(OP_ALIAS_UPDATE) << arbiterAliasLatest.vchAlias << arbiterAliasLatest.vchGUID << vchFromString(\"\") << vchWitness << OP_2DROP << OP_2DROP << OP_2DROP;\n-\t\tscriptPubKeyAlias += scriptPubKeyAliasOrig;\n+\t\tscriptPubKeyAlias += arbiterScript;\n \t\ttheAlias = arbiterAliasLatest;\n \t}\n \telse if (role == \"seller\")\n \t{\n-\t\tscriptPubKeyAliasOrig = sellerScript;\n \t\tscriptPubKeyAlias << CScript::EncodeOP_N(OP_SYSCOIN_ALIAS) << CScript::EncodeOP_N(OP_ALIAS_UPDATE) << sellerAliasLatest.vchAlias << sellerAliasLatest.vchGUID << vchFromString(\"\") << vchWitness << OP_2DROP << OP_2DROP << OP_2DROP;\n-\t\tscriptPubKeyAlias += scriptPubKeyAliasOrig;\n+\t\tscriptPubKeyAlias += sellerScript;\n \t\ttheAlias = sellerAliasLatest;\n \t}\n \telse\n \t\tthrow runtime_error(\"SYSCOIN_ESCROW_RPC_ERROR: ERRCODE: 4533 - \" + _(\"Invalid role\"));\n \n-\tCTransaction signedTx;\n+\tCMutableTransaction signedTx;\n \tDecodeHexTx(signedTx, rawtx);\n \tescrow.ClearEscrow();\n \tfor (int i = 0; i < signedTx.vin.size(); i++) {\n@@ -1990,18 +1963,12 @@ UniValue escrowrefund(const UniValue& params, bool fHelp) {\n \tCreateFeeRecipient(scriptData, data, fee);\n \tvecSend.push_back(fee);\n \n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\n-\tSendMoneySyscoin(theAlias.vchAlias, vchWitness, aliasRecipient, vecSend, wtx, &coinControl);\n-\n-\tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n-\treturn res;\n+\treturn syscointxfund_helper(theAlias.vchAlias, vchWitness, aliasRecipient, vecSend);\n }\n \n-UniValue escrowcompleterefund(const UniValue& params, bool fHelp) {\n-\tif (fHelp || params.size() != 3)\n+UniValue escrowcompleterefund(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+\tif (request.fHelp || params.size() != 3)\n \t\tthrow runtime_error(\n \t\t\t\"escrowcompleterefund [escrow guid] [rawtx] [witness]\\n\"\n \t\t\t\"Completes an escrow refund by creating the escrow complete refund transaction on syscoin blockchain.\\n\"\n@@ -2011,7 +1978,7 @@ UniValue escrowcompleterefund(const UniValue& params, bool fHelp) {\n \t// gather & validate inputs\n \tvector<unsigned char> vchEscrow = vchFromValue(params[0]);\n \tstring rawTx = params[1].get_str();\n-\tCTransaction myRawTx;\n+\tCMutableTransaction myRawTx;\n \tDecodeHexTx(myRawTx, rawTx);\n \tvector<unsigned char> vchWitness;\n \tvchWitness = vchFromValue(params[2]);\n@@ -2072,29 +2039,28 @@ UniValue escrowcompleterefund(const UniValue& params, bool fHelp) {\n \tvecSend.push_back(fee);\n \n \n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\n-\tSendMoneySyscoin(buyerAliasLatest.vchAlias, vchWitness, aliasRecipient, vecSend, wtx, &coinControl);\n+\tconst UniValue& res = syscointxfund_helper(buyerAliasLatest.vchAlias, vchWitness, aliasRecipient, vecSend);\n \tUniValue returnRes;\n \tUniValue sendParams(UniValue::VARR);\n \tsendParams.push_back(rawTx);\n \ttry\n \t{\n \t\t// broadcast the payment transaction to syscoin network if not external transaction\n-\t\tif (!extPayment)\n-\t\t\treturnRes = sendrawtransaction(sendParams, false);\n+\t\tif (!extPayment) {\n+\t\t\tJSONRPCRequest request1;\n+\t\t\trequest1.params = sendParams;\n+\t\t\treturnRes = sendrawtransaction(request1);\n+\t\t}\n \t}\n \tcatch (UniValue& objError)\n \t{\n \t\tthrow runtime_error(find_value(objError, \"message\").get_str());\n \t}\n-\tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n \treturn res;\n }\n-UniValue escrowfeedback(const UniValue& params, bool fHelp) {\n-    if (fHelp || params.size() != 6)\n+UniValue escrowfeedback(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+    if (request.fHelp || params.size() != 6)\n         throw runtime_error(\n \t\t\t\"escrowfeedback [escrow guid] [userfrom] [feedback] [rating] [userto] [witness]\\n\"\n                         \"Send feedback for primary and secondary users in escrow, depending on who you are. Ratings are numbers from 1 to 5. User From and User To is either 'buyer', 'seller', 'reseller', or 'arbiter'.\\n\"\n@@ -2141,35 +2107,31 @@ UniValue escrowfeedback(const UniValue& params, bool fHelp) {\n \t}\n \n \tCAliasIndex theAlias;\n-\tCScript scriptPubKeyAlias, scriptPubKeyAliasOrig;\n+\tCScript scriptPubKeyAlias;\n \n \tif(userfrom == \"buyer\")\n \t{\n \t\t\t\n \t\tscriptPubKeyAlias << CScript::EncodeOP_N(OP_SYSCOIN_ALIAS) << CScript::EncodeOP_N(OP_ALIAS_UPDATE) << buyerAliasLatest.vchAlias << buyerAliasLatest.vchGUID << vchFromString(\"\") << vchWitness << OP_2DROP << OP_2DROP << OP_2DROP;\n \t\tscriptPubKeyAlias += buyerScript;\n-\t\tscriptPubKeyAliasOrig = buyerScript;\n \t\ttheAlias = buyerAliasLatest;\n \t}\n \telse if(userfrom == \"seller\")\n \t{\t\n \t\tscriptPubKeyAlias << CScript::EncodeOP_N(OP_SYSCOIN_ALIAS) << CScript::EncodeOP_N(OP_ALIAS_UPDATE) << sellerAliasLatest.vchAlias << sellerAliasLatest.vchGUID << vchFromString(\"\") << vchWitness << OP_2DROP << OP_2DROP << OP_2DROP;\n \t\tscriptPubKeyAlias += sellerScript;\n-\t\tscriptPubKeyAliasOrig = sellerScript;\n \t\ttheAlias = sellerAliasLatest;\n \t}\n \telse if(userfrom == \"reseller\")\n \t{\n \t\tscriptPubKeyAlias << CScript::EncodeOP_N(OP_SYSCOIN_ALIAS) << CScript::EncodeOP_N(OP_ALIAS_UPDATE) << resellerAliasLatest.vchAlias << resellerAliasLatest.vchGUID << vchFromString(\"\") << vchWitness << OP_2DROP << OP_2DROP << OP_2DROP;\n \t\tscriptPubKeyAlias += resellerScript;\n-\t\tscriptPubKeyAliasOrig = resellerScript;\n \t\ttheAlias = resellerAliasLatest;\n \t}\n \telse if(userfrom == \"arbiter\")\n \t{\t\t\n \t\tscriptPubKeyAlias << CScript::EncodeOP_N(OP_SYSCOIN_ALIAS) << CScript::EncodeOP_N(OP_ALIAS_UPDATE) << arbiterAliasLatest.vchAlias << arbiterAliasLatest.vchGUID << vchFromString(\"\") << vchWitness << OP_2DROP << OP_2DROP << OP_2DROP;\n \t\tscriptPubKeyAlias += arbiterScript;\n-\t\tscriptPubKeyAliasOrig = arbiterScript;\n \t\ttheAlias = arbiterAliasLatest;\n \t}\n \tescrow.ClearEscrow();\n@@ -2264,17 +2226,11 @@ UniValue escrowfeedback(const UniValue& params, bool fHelp) {\n \tvecSend.push_back(fee);\n \n \n-\n-\tCCoinControl coinControl;\n-\tcoinControl.fAllowOtherInputs = false;\n-\tcoinControl.fAllowWatchOnly = false;\n-\tSendMoneySyscoin(theAlias.vchAlias, vchWitness, aliasRecipient, vecSend, wtx, &coinControl);\n-\tUniValue res(UniValue::VARR);\n-\tres.push_back(EncodeHexTx(wtx));\n-\treturn res;\n+\treturn syscointxfund_helper(theAlias.vchAlias, vchWitness, aliasRecipient, vecSend);\n }\n-UniValue escrowinfo(const UniValue& params, bool fHelp) {\n-    if (fHelp || 1 != params.size())\n+UniValue escrowinfo(const JSONRPCRequest& request) {\n+\tconst UniValue &params = request.params;\n+    if (request.fHelp || 1 != params.size())\n         throw runtime_error(\"escrowinfo <guid>\\n\"\n                 \"Show stored values of a single escrow\\n\");\n "
      },
      {
        "sha": "f5c10c2b5015f085a09b2d2808e5eac0bbf9b812",
        "filename": "src/escrow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/escrow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/escrow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/escrow.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -12,7 +12,6 @@ class CWalletTx;\n class CTransaction;\n class CReserveKey;\n class CCoinsViewCache;\n-class CCoins;\n class CBlock;\n bool CheckEscrowInputs(const CTransaction &tx, int op,const std::vector<std::vector<unsigned char> > &vvchArgs, const std::vector<std::vector<unsigned char> > &vvchAliasArgs, bool fJustCheck, int nHeight, std::string &errorMessage, bool bSanityCheck=false);\n bool DecodeEscrowTx(const CTransaction& tx, int& op, std::vector<std::vector<unsigned char> >& vvch);\n@@ -87,7 +86,7 @@ class CEscrow {\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n \t\tREADWRITE(vchSellerAlias);\n \t\tREADWRITE(vchLinkSellerAlias);\n \t\tREADWRITE(vchArbiterAlias);"
      },
      {
        "sha": "28f4c4bac79e3780debfeafe5a0020c7af090485",
        "filename": "src/feedback.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/feedback.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/feedback.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/feedback.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -24,7 +24,7 @@ class CFeedback {\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n \t\tREADWRITE(vchFeedback);\n \t\tREADWRITE(VARINT(nRating));\n \t\tREADWRITE(VARINT(nFeedbackUserFrom));"
      },
      {
        "sha": "e381f71d461af693dff046a73567de838c79e200",
        "filename": "src/flat-database.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/flat-database.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/flat-database.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flat-database.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "03be7048b55db5464bab155b4163aeb874303347",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 160,
        "deletions": 97,
        "changes": 257,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -12,7 +11,6 @@\n #include \"utilstrencodings.h\"\n \n #include <boost/algorithm/string.hpp>\n-#include <boost/foreach.hpp>\n \n #include <univalue.h>\n \n@@ -21,7 +19,7 @@ CGovernanceTriggerManager triggerman;\n \n // SPLIT UP STRING BY DELIMITER\n // http://www.boost.org/doc/libs/1_58_0/doc/html/boost/algorithm/split_idp202406848.html\n-std::vector<std::string> SplitBy(std::string strCommand, std::string strDelimit)\n+std::vector<std::string> SplitBy(const std::string& strCommand, const std::string& strDelimit)\n {\n     std::vector<std::string> vParts;\n     boost::split(vParts, strCommand, boost::is_any_of(strDelimit));\n@@ -38,7 +36,7 @@ std::vector<std::string> SplitBy(std::string strCommand, std::string strDelimit)\n \n CAmount ParsePaymentAmount(const std::string& strAmount)\n {\n-    DBG( cout << \"ParsePaymentAmount Start: strAmount = \" << strAmount << endl; );\n+    DBG( std::cout << \"ParsePaymentAmount Start: strAmount = \" << strAmount << std::endl; );\n \n     CAmount nAmount = 0;\n     if (strAmount.empty()) {\n@@ -93,7 +91,7 @@ CAmount ParsePaymentAmount(const std::string& strAmount)\n         throw std::runtime_error(ostr.str());\n     }\n \n-    DBG( cout << \"ParsePaymentAmount Returning true nAmount = \" << nAmount << endl; );\n+    DBG( std::cout << \"ParsePaymentAmount Returning true nAmount = \" << nAmount << std::endl; );\n \n     return nAmount;\n }\n@@ -104,17 +102,17 @@ CAmount ParsePaymentAmount(const std::string& strAmount)\n \n bool CGovernanceTriggerManager::AddNewTrigger(uint256 nHash)\n {\n-    DBG( cout << \"CGovernanceTriggerManager::AddNewTrigger: Start\" << endl; );\n+    DBG( std::cout << \"CGovernanceTriggerManager::AddNewTrigger: Start\" << std::endl; );\n     AssertLockHeld(governance.cs);\n \n     // IF WE ALREADY HAVE THIS HASH, RETURN\n     if(mapTrigger.count(nHash)) {\n         DBG(\n-            cout << \"CGovernanceTriggerManager::AddNewTrigger: Already have hash\"\n+            std::cout << \"CGovernanceTriggerManager::AddNewTrigger: Already have hash\"\n                  << \", nHash = \" << nHash.GetHex()\n                  << \", count = \" << mapTrigger.count(nHash)\n                  << \", mapTrigger.size() = \" << mapTrigger.size()\n-                 << endl; );\n+                 << std::endl; );\n         return false;\n     }\n \n@@ -124,24 +122,24 @@ bool CGovernanceTriggerManager::AddNewTrigger(uint256 nHash)\n         pSuperblock = pSuperblockTmp;\n     }\n     catch(std::exception& e) {\n-        DBG( cout << \"CGovernanceTriggerManager::AddNewTrigger Error creating superblock\"\n+        DBG( std::cout << \"CGovernanceTriggerManager::AddNewTrigger Error creating superblock\"\n              << \", e.what() = \" << e.what()\n-             << endl; );\n+             << std::endl; );\n         LogPrintf(\"CGovernanceTriggerManager::AddNewTrigger -- Error creating superblock: %s\\n\", e.what());\n         return false;\n     }\n     catch(...) {\n         LogPrintf(\"CGovernanceTriggerManager::AddNewTrigger: Unknown Error creating superblock\\n\");\n-        DBG( cout << \"CGovernanceTriggerManager::AddNewTrigger Error creating superblock catchall\" << endl; );\n+        DBG( std::cout << \"CGovernanceTriggerManager::AddNewTrigger Error creating superblock catchall\" << std::endl; );\n         return false;\n     }\n \n     pSuperblock->SetStatus(SEEN_OBJECT_IS_VALID);\n \n-    DBG( cout << \"CGovernanceTriggerManager::AddNewTrigger: Inserting trigger\" << endl; );\n+    DBG( std::cout << \"CGovernanceTriggerManager::AddNewTrigger: Inserting trigger\" << std::endl; );\n     mapTrigger.insert(std::make_pair(nHash, pSuperblock));\n \n-    DBG( cout << \"CGovernanceTriggerManager::AddNewTrigger: End\" << endl; );\n+    DBG( std::cout << \"CGovernanceTriggerManager::AddNewTrigger: End\" << std::endl; );\n \n     return true;\n }\n@@ -155,7 +153,7 @@ bool CGovernanceTriggerManager::AddNewTrigger(uint256 nHash)\n void CGovernanceTriggerManager::CleanAndRemove()\n {\n     LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- Start\\n\");\n-    DBG( cout << \"CGovernanceTriggerManager::CleanAndRemove: Start\" << endl; );\n+    DBG( std::cout << \"CGovernanceTriggerManager::CleanAndRemove: Start\" << std::endl; );\n     AssertLockHeld(governance.cs);\n \n     // LOOK AT THESE OBJECTS AND COMPILE A VALID LIST OF TRIGGERS\n@@ -175,19 +173,19 @@ void CGovernanceTriggerManager::CleanAndRemove()\n         }\n     }\n \n-    // Remove triggers that are invalid or already executed\n-    DBG( cout << \"CGovernanceTriggerManager::CleanAndRemove: mapTrigger.size() = \" << mapTrigger.size() << endl; );\n+    // Remove triggers that are invalid or expired\n+    DBG( std::cout << \"CGovernanceTriggerManager::CleanAndRemove: mapTrigger.size() = \" << mapTrigger.size() << std::endl; );\n     LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- mapTrigger.size() = %d\\n\", mapTrigger.size());\n     trigger_m_it it = mapTrigger.begin();\n     while(it != mapTrigger.end()) {\n         bool remove = false;\n         CSuperblock_sptr& pSuperblock = it->second;\n         if(!pSuperblock) {\n-            DBG( cout << \"CGovernanceTriggerManager::CleanAndRemove: NULL superblock marked for removal \" << endl; );\n+            DBG( std::cout << \"CGovernanceTriggerManager::CleanAndRemove: NULL superblock marked for removal\" << std::endl; );\n             LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- NULL superblock marked for removal\\n\");\n             remove = true;\n         } else {\n-            DBG( cout << \"CGovernanceTriggerManager::CleanAndRemove: superblock status = \" << pSuperblock->GetStatus() << endl; );\n+            DBG( std::cout << \"CGovernanceTriggerManager::CleanAndRemove: superblock status = \" << pSuperblock->GetStatus() << std::endl; );\n             LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- superblock status = %d\\n\", pSuperblock->GetStatus());\n             switch(pSuperblock->GetStatus()) {\n             case SEEN_OBJECT_ERROR_INVALID:\n@@ -197,22 +195,7 @@ void CGovernanceTriggerManager::CleanAndRemove()\n                 break;\n             case SEEN_OBJECT_IS_VALID:\n             case SEEN_OBJECT_EXECUTED:\n-                {\n-                    int nTriggerBlock = pSuperblock->GetBlockStart();\n-                    // Rough approximation: a cycle of superblock ++\n-                    int nExpirationBlock = nTriggerBlock + GOVERNANCE_TRIGGER_EXPIRATION_BLOCKS;\n-                    LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- nTriggerBlock = %d, nExpirationBlock = %d\\n\", nTriggerBlock, nExpirationBlock);\n-                    if(governance.GetCachedBlockHeight() > nExpirationBlock) {\n-                        LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- Outdated trigger found\\n\");\n-                        remove = true;\n-                        CGovernanceObject* pgovobj = pSuperblock->GetGovernanceObject();\n-                        if(pgovobj) {\n-                            LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- Expiring outdated object: %s\\n\", pgovobj->GetHash().ToString());\n-                            pgovobj->fExpired = true;\n-                            pgovobj->nDeletionTime = GetAdjustedTime();\n-                        }\n-                    }\n-                }\n+                remove = pSuperblock->IsExpired();\n                 break;\n             default:\n                 break;\n@@ -221,14 +204,14 @@ void CGovernanceTriggerManager::CleanAndRemove()\n \n         if(remove) {\n             DBG(\n-                string strdata = \"NULL\";\n+                std::string strDataAsPlainString = \"NULL\";\n                 CGovernanceObject* pgovobj = pSuperblock->GetGovernanceObject();\n                 if(pgovobj) {\n-                    strdata = pgovobj->GetDataAsString();\n+                    strDataAsPlainString = pgovobj->GetDataAsPlainString();\n                 }\n-                cout << \"CGovernanceTriggerManager::CleanAndRemove: Removing object: \"\n-                     << strdata\n-                     << endl;\n+                std::cout << \"CGovernanceTriggerManager::CleanAndRemove: Removing object: \"\n+                     << strDataAsPlainString\n+                     << std::endl;\n                );\n             LogPrint(\"gobject\", \"CGovernanceTriggerManager::CleanAndRemove -- Removing trigger object\\n\");\n             mapTrigger.erase(it++);\n@@ -238,7 +221,7 @@ void CGovernanceTriggerManager::CleanAndRemove()\n         }\n     }\n \n-    DBG( cout << \"CGovernanceTriggerManager::CleanAndRemove: End\" << endl; );\n+    DBG( std::cout << \"CGovernanceTriggerManager::CleanAndRemove: End\" << std::endl; );\n }\n \n /**\n@@ -253,7 +236,7 @@ std::vector<CSuperblock_sptr> CGovernanceTriggerManager::GetActiveTriggers()\n     AssertLockHeld(governance.cs);\n     std::vector<CSuperblock_sptr> vecResults;\n \n-    DBG( cout << \"GetActiveTriggers: mapTrigger.size() = \" << mapTrigger.size() << endl; );\n+    DBG( std::cout << \"GetActiveTriggers: mapTrigger.size() = \" << mapTrigger.size() << std::endl; );\n \n     // LOOK AT THESE OBJECTS AND COMPILE A VALID LIST OF TRIGGERS\n     trigger_m_it it = mapTrigger.begin();\n@@ -262,13 +245,13 @@ std::vector<CSuperblock_sptr> CGovernanceTriggerManager::GetActiveTriggers()\n         CGovernanceObject* pObj = governance.FindGovernanceObject((*it).first);\n \n         if(pObj) {\n-            DBG( cout << \"GetActiveTriggers: pObj->GetDataAsString() = \" << pObj->GetDataAsString() << endl; );\n+            DBG( std::cout << \"GetActiveTriggers: pObj->GetDataAsPlainString() = \" << pObj->GetDataAsPlainString() << std::endl; );\n             vecResults.push_back(it->second);\n         }\n         ++it;\n     }\n \n-    DBG( cout << \"GetActiveTriggers: vecResults.size() = \" << vecResults.size() << endl; );\n+    DBG( std::cout << \"GetActiveTriggers: vecResults.size() = \" << vecResults.size() << std::endl; );\n \n     return vecResults;\n }\n@@ -292,36 +275,36 @@ bool CSuperblockManager::IsSuperblockTriggered(int nBlockHeight)\n \n     LogPrint(\"gobject\", \"CSuperblockManager::IsSuperblockTriggered -- vecTriggers.size() = %d\\n\", vecTriggers.size());\n \n-    DBG( cout << \"IsSuperblockTriggered Number triggers = \" << vecTriggers.size() << endl; );\n+    DBG( std::cout << \"IsSuperblockTriggered Number triggers = \" << vecTriggers.size() << std::endl; );\n \n-    BOOST_FOREACH(CSuperblock_sptr pSuperblock, vecTriggers)\n+    for (const auto& pSuperblock : vecTriggers)\n     {\n         if(!pSuperblock) {\n             LogPrintf(\"CSuperblockManager::IsSuperblockTriggered -- Non-superblock found, continuing\\n\");\n-            DBG( cout << \"IsSuperblockTriggered Not a superblock, continuing \" << endl; );\n+            DBG( std::cout << \"IsSuperblockTriggered Not a superblock, continuing \" << std::endl; );\n             continue;\n         }\n \n         CGovernanceObject* pObj = pSuperblock->GetGovernanceObject();\n \n         if(!pObj) {\n             LogPrintf(\"CSuperblockManager::IsSuperblockTriggered -- pObj == NULL, continuing\\n\");\n-            DBG( cout << \"IsSuperblockTriggered pObj is NULL, continuing\" << endl; );\n+            DBG( std::cout << \"IsSuperblockTriggered pObj is NULL, continuing\" << std::endl; );\n             continue;\n         }\n \n-        LogPrint(\"gobject\", \"CSuperblockManager::IsSuperblockTriggered -- data = %s\\n\", pObj->GetDataAsString());\n+        LogPrint(\"gobject\", \"CSuperblockManager::IsSuperblockTriggered -- data = %s\\n\", pObj->GetDataAsPlainString());\n \n         // note : 12.1 - is epoch calculation correct?\n \n-        if(nBlockHeight != pSuperblock->GetBlockStart()) {\n+        if(nBlockHeight != pSuperblock->GetBlockHeight()) {\n             LogPrint(\"gobject\", \"CSuperblockManager::IsSuperblockTriggered -- block height doesn't match nBlockHeight = %d, blockStart = %d, continuing\\n\",\n                      nBlockHeight,\n-                     pSuperblock->GetBlockStart());\n-            DBG( cout << \"IsSuperblockTriggered Not the target block, continuing\"\n+                     pSuperblock->GetBlockHeight());\n+            DBG( std::cout << \"IsSuperblockTriggered Not the target block, continuing\"\n                  << \", nBlockHeight = \" << nBlockHeight\n-                 << \", superblock->GetBlockStart() = \" << pSuperblock->GetBlockStart()\n-                 << endl; );\n+                 << \", superblock->GetBlockHeight() = \" << pSuperblock->GetBlockHeight()\n+                 << std::endl; );\n             continue;\n         }\n \n@@ -331,12 +314,12 @@ bool CSuperblockManager::IsSuperblockTriggered(int nBlockHeight)\n \n         if(pObj->IsSetCachedFunding()) {\n             LogPrint(\"gobject\", \"CSuperblockManager::IsSuperblockTriggered -- fCacheFunding = true, returning true\\n\");\n-            DBG( cout << \"IsSuperblockTriggered returning true\" << endl; );\n+            DBG( std::cout << \"IsSuperblockTriggered returning true\" << std::endl; );\n             return true;\n         }\n         else  {\n             LogPrint(\"gobject\", \"CSuperblockManager::IsSuperblockTriggered -- fCacheFunding = false, continuing\\n\");\n-            DBG( cout << \"IsSuperblockTriggered No fCachedFunding, continuing\" << endl; );\n+            DBG( std::cout << \"IsSuperblockTriggered No fCachedFunding, continuing\" << std::endl; );\n         }\n     }\n \n@@ -354,32 +337,32 @@ bool CSuperblockManager::GetBestSuperblock(CSuperblock_sptr& pSuperblockRet, int\n     std::vector<CSuperblock_sptr> vecTriggers = triggerman.GetActiveTriggers();\n     int nYesCount = 0;\n \n-    BOOST_FOREACH(CSuperblock_sptr pSuperblock, vecTriggers) {\n+    for (const auto& pSuperblock : vecTriggers) {\n         if(!pSuperblock) {\n-            DBG( cout << \"GetBestSuperblock Not a superblock, continuing\" << endl; );\n+            DBG( std::cout << \"GetBestSuperblock Not a superblock, continuing\" << std::endl; );\n             continue;\n         }\n \n         CGovernanceObject* pObj = pSuperblock->GetGovernanceObject();\n \n         if(!pObj) {\n-            DBG( cout << \"GetBestSuperblock pObj is NULL, continuing\" << endl; );\n+            DBG( std::cout << \"GetBestSuperblock pObj is NULL, continuing\" << std::endl; );\n             continue;\n         }\n \n-        if(nBlockHeight != pSuperblock->GetBlockStart()) {\n-            DBG( cout << \"GetBestSuperblock Not the target block, continuing\" << endl; );\n+        if(nBlockHeight != pSuperblock->GetBlockHeight()) {\n+            DBG( std::cout << \"GetBestSuperblock Not the target block, continuing\" << std::endl; );\n             continue;\n         }\n \n         // DO WE HAVE A NEW WINNER?\n \n         int nTempYesCount = pObj->GetAbsoluteYesCount(VOTE_SIGNAL_FUNDING);\n-        DBG( cout << \"GetBestSuperblock nTempYesCount = \" << nTempYesCount << endl; );\n+        DBG( std::cout << \"GetBestSuperblock nTempYesCount = \" << nTempYesCount << std::endl; );\n         if(nTempYesCount > nYesCount) {\n             nYesCount = nTempYesCount;\n             pSuperblockRet = pSuperblock;\n-            DBG( cout << \"GetBestSuperblock Valid superblock found, pSuperblock set\" << endl; );\n+            DBG( std::cout << \"GetBestSuperblock Valid superblock found, pSuperblock set\" << std::endl; );\n         }\n     }\n \n@@ -394,7 +377,7 @@ bool CSuperblockManager::GetBestSuperblock(CSuperblock_sptr& pSuperblockRet, int\n \n void CSuperblockManager::CreateSuperblock(CMutableTransaction& txNewRet, int nBlockHeight, std::vector<CTxOut>& voutSuperblockRet)\n {\n-    DBG( cout << \"CSuperblockManager::CreateSuperblock Start\" << endl; );\n+    DBG( std::cout << \"CSuperblockManager::CreateSuperblock Start\" << std::endl; );\n \n     LOCK(governance.cs);\n \n@@ -403,7 +386,7 @@ void CSuperblockManager::CreateSuperblock(CMutableTransaction& txNewRet, int nBl\n     CSuperblock_sptr pSuperblock;\n     if(!CSuperblockManager::GetBestSuperblock(pSuperblock, nBlockHeight)) {\n         LogPrint(\"gobject\", \"CSuperblockManager::CreateSuperblock -- Can't find superblock for height %d\\n\", nBlockHeight);\n-        DBG( cout << \"CSuperblockManager::CreateSuperblock Failed to get superblock for height, returning\" << endl; );\n+        DBG( std::cout << \"CSuperblockManager::CreateSuperblock Failed to get superblock for height, returning\" << std::endl; );\n         return;\n     }\n \n@@ -413,17 +396,17 @@ void CSuperblockManager::CreateSuperblock(CMutableTransaction& txNewRet, int nBl\n     // CONFIGURE SUPERBLOCK OUTPUTS\n \n     // Superblock payments are appended to the end of the coinbase vout vector\n-    DBG( cout << \"CSuperblockManager::CreateSuperblock Number payments: \" << pSuperblock->CountPayments() << endl; );\n+    DBG( std::cout << \"CSuperblockManager::CreateSuperblock Number payments: \" << pSuperblock->CountPayments() << std::endl; );\n \n     // TODO: How many payments can we add before things blow up?\n     //       Consider at least following limits:\n     //          - max coinbase tx size\n     //          - max \"budget\" available\n     for(int i = 0; i < pSuperblock->CountPayments(); i++) {\n         CGovernancePayment payment;\n-        DBG( cout << \"CSuperblockManager::CreateSuperblock i = \" << i << endl; );\n+        DBG( std::cout << \"CSuperblockManager::CreateSuperblock i = \" << i << std::endl; );\n         if(pSuperblock->GetPayment(i, payment)) {\n-            DBG( cout << \"CSuperblockManager::CreateSuperblock Payment found \" << endl; );\n+            DBG( std::cout << \"CSuperblockManager::CreateSuperblock Payment found \" << std::endl; );\n             // SET COINBASE OUTPUT TO SUPERBLOCK SETTING\n \n             CTxOut txout = CTxOut(payment.nAmount, payment.script);\n@@ -438,15 +421,15 @@ void CSuperblockManager::CreateSuperblock(CMutableTransaction& txNewRet, int nBl\n \n             // TODO: PRINT NICE N.N SYS OUTPUT\n \n-            DBG( cout << \"CSuperblockManager::CreateSuperblock Before LogPrintf call, nAmount = \" << payment.nAmount << endl; );\n+            DBG( std::cout << \"CSuperblockManager::CreateSuperblock Before LogPrintf call, nAmount = \" << payment.nAmount << std::endl; );\n             LogPrintf(\"NEW Superblock : output %d (addr %s, amount %d)\\n\", i, address2.ToString(), payment.nAmount);\n-            DBG( cout << \"CSuperblockManager::CreateSuperblock After LogPrintf call \" << endl; );\n+            DBG( std::cout << \"CSuperblockManager::CreateSuperblock After LogPrintf call \" << std::endl; );\n         } else {\n-            DBG( cout << \"CSuperblockManager::CreateSuperblock Payment not found \" << endl; );\n+            DBG( std::cout << \"CSuperblockManager::CreateSuperblock Payment not found \" << std::endl; );\n         }\n     }\n \n-    DBG( cout << \"CSuperblockManager::CreateSuperblock End\" << endl; );\n+    DBG( std::cout << \"CSuperblockManager::CreateSuperblock End\" << std::endl; );\n }\n \n bool CSuperblockManager::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward)\n@@ -462,54 +445,66 @@ bool CSuperblockManager::IsValid(const CTransaction& txNew, int nBlockHeight, co\n     return false;\n }\n \n+void CSuperblockManager::ExecuteBestSuperblock(int nBlockHeight)\n+{\n+    LOCK(governance.cs);\n+\n+    CSuperblock_sptr pSuperblock;\n+    if(GetBestSuperblock(pSuperblock, nBlockHeight)) {\n+        // All checks are done in CSuperblock::IsValid via IsBlockValueValid and IsBlockPayeeValid,\n+        // tip wouldn't be updated if anything was wrong. Mark this trigger as executed.\n+        pSuperblock->SetExecuted();\n+    }\n+}\n+\n CSuperblock::\n CSuperblock()\n     : nGovObjHash(),\n-      nEpochStart(0),\n+      nBlockHeight(0),\n       nStatus(SEEN_OBJECT_UNKNOWN),\n       vecPayments()\n {}\n \n CSuperblock::\n CSuperblock(uint256& nHash)\n     : nGovObjHash(nHash),\n-      nEpochStart(0),\n+      nBlockHeight(0),\n       nStatus(SEEN_OBJECT_UNKNOWN),\n       vecPayments()\n {\n-    DBG( cout << \"CSuperblock Constructor Start\" << endl; );\n+    DBG( std::cout << \"CSuperblock Constructor Start\" << std::endl; );\n \n     CGovernanceObject* pGovObj = GetGovernanceObject();\n \n     if(!pGovObj) {\n-        DBG( cout << \"CSuperblock Constructor pGovObjIn is NULL, returning\" << endl; );\n+        DBG( std::cout << \"CSuperblock Constructor pGovObjIn is NULL, returning\" << std::endl; );\n         throw std::runtime_error(\"CSuperblock: Failed to find Governance Object\");\n     }\n \n-    DBG( cout << \"CSuperblock Constructor pGovObj : \"\n-         << pGovObj->GetDataAsString()\n+    DBG( std::cout << \"CSuperblock Constructor pGovObj : \"\n+         << pGovObj->GetDataAsPlainString()\n          << \", nObjectType = \" << pGovObj->GetObjectType()\n-         << endl; );\n+         << std::endl; );\n \n     if (pGovObj->GetObjectType() != GOVERNANCE_OBJECT_TRIGGER) {\n-        DBG( cout << \"CSuperblock Constructor pHoObj not a trigger, returning\" << endl; );\n+        DBG( std::cout << \"CSuperblock Constructor pGovObj not a trigger, returning\" << std::endl; );\n         throw std::runtime_error(\"CSuperblock: Governance Object not a trigger\");\n     }\n \n     UniValue obj = pGovObj->GetJSONObject();\n \n-    // FIRST WE GET THE START EPOCH, THE DATE WHICH THE PAYMENT SHALL OCCUR\n-    nEpochStart = obj[\"event_block_height\"].get_int();\n+    // FIRST WE GET THE START HEIGHT, THE BLOCK HEIGHT AT WHICH THE PAYMENT SHALL OCCUR\n+    nBlockHeight = obj[\"event_block_height\"].get_int();\n \n     // NEXT WE GET THE PAYMENT INFORMATION AND RECONSTRUCT THE PAYMENT VECTOR\n     std::string strAddresses = obj[\"payment_addresses\"].get_str();\n     std::string strAmounts = obj[\"payment_amounts\"].get_str();\n     ParsePaymentSchedule(strAddresses, strAmounts);\n \n-    LogPrint(\"gobject\", \"CSuperblock -- nEpochStart = %d, strAddresses = %s, strAmounts = %s, vecPayments.size() = %d\\n\",\n-             nEpochStart, strAddresses, strAmounts, vecPayments.size());\n+    LogPrint(\"gobject\", \"CSuperblock -- nBlockHeight = %d, strAddresses = %s, strAmounts = %s, vecPayments.size() = %d\\n\",\n+             nBlockHeight, strAddresses, strAmounts, vecPayments.size());\n \n-    DBG( cout << \"CSuperblock Constructor End\" << endl; );\n+    DBG( std::cout << \"CSuperblock Constructor End\" << std::endl; );\n }\n \n /**\n@@ -525,25 +520,44 @@ bool CSuperblock::IsValidBlockHeight(int nBlockHeight)\n             ((nBlockHeight % Params().GetConsensus().nSuperblockCycle) == 0);\n }\n \n+void CSuperblock::GetNearestSuperblocksHeights(int nBlockHeight, int& nLastSuperblockRet, int& nNextSuperblockRet)\n+{\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n+    int nSuperblockStartBlock = consensusParams.nSuperblockStartBlock;\n+    int nSuperblockCycle = consensusParams.nSuperblockCycle;\n+\n+    // Get first superblock\n+    int nFirstSuperblockOffset = (nSuperblockCycle - nSuperblockStartBlock % nSuperblockCycle) % nSuperblockCycle;\n+    int nFirstSuperblock = nSuperblockStartBlock + nFirstSuperblockOffset;\n+\n+    if(nBlockHeight < nFirstSuperblock) {\n+        nLastSuperblockRet = 0;\n+        nNextSuperblockRet = nFirstSuperblock;\n+    } else {\n+        nLastSuperblockRet = nBlockHeight - nBlockHeight % nSuperblockCycle;\n+        nNextSuperblockRet = nLastSuperblockRet + nSuperblockCycle;\n+    }\n+}\n+\n CAmount CSuperblock::GetPaymentsLimit(int nBlockHeight)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     if(!IsValidBlockHeight(nBlockHeight)) {\n         return 0;\n     }\n+\n \t// SYSCOIN\n \t// some part of all blocks issued during the cycle goes to superblock, see GetBlockSubsidy\n \tCAmount nTotalRewardWithMasternodes;\n \tconst CAmount &nSuperblockPartOfSubsidy = GetBlockSubsidy(nBlockHeight, consensusParams, nTotalRewardWithMasternodes, true);\n \tconst CAmount &nPaymentsLimit = nSuperblockPartOfSubsidy * consensusParams.nSuperblockCycle;\n-\tLogPrint(\"gobject\", \"CSuperblock::GetPaymentsLimit -- Valid superblock height %d, payments max %lld\\n\", nBlockHeight, nPaymentsLimit);\n-\n+    LogPrint(\"gobject\", \"CSuperblock::GetPaymentsLimit -- Valid superblock height %d, payments max %lld\\n\", nBlockHeight, nPaymentsLimit);\n \n     return nPaymentsLimit;\n }\n \n-void CSuperblock::ParsePaymentSchedule(std::string& strPaymentAddresses, std::string& strPaymentAmounts)\n+void CSuperblock::ParsePaymentSchedule(const std::string& strPaymentAddresses, const std::string& strPaymentAmounts)\n {\n     // SPLIT UP ADDR/AMOUNT STRINGS AND PUT IN VECTORS\n \n@@ -574,7 +588,7 @@ void CSuperblock::ParsePaymentSchedule(std::string& strPaymentAddresses, std::st\n       AMOUNTS = [AMOUNT1|2|3|4|5|6]\n     */\n \n-    DBG( cout << \"CSuperblock::ParsePaymentSchedule vecParsed1.size() = \" << vecParsed1.size() << endl; );\n+    DBG( std::cout << \"CSuperblock::ParsePaymentSchedule vecParsed1.size() = \" << vecParsed1.size() << std::endl; );\n \n     for (int i = 0; i < (int)vecParsed1.size(); i++) {\n         CSyscoinAddress address(vecParsed1[i]);\n@@ -584,17 +598,29 @@ void CSuperblock::ParsePaymentSchedule(std::string& strPaymentAddresses, std::st\n             LogPrintf(\"%s\\n\", ostr.str());\n             throw std::runtime_error(ostr.str());\n         }\n+        /*\n+            TODO\n+\n+            - There might be an issue with multisig in the coinbase on mainnet, we will add support for it in a future release.\n+            - Post 12.3+ (test multisig coinbase transaction)\n+        */\n+        if(address.IsScript()) {\n+            std::ostringstream ostr;\n+            ostr << \"CSuperblock::ParsePaymentSchedule -- Script addresses are not supported yet : \" <<  vecParsed1[i];\n+            LogPrintf(\"%s\\n\", ostr.str());\n+            throw std::runtime_error(ostr.str());\n+        }\n \n-        DBG( cout << \"CSuperblock::ParsePaymentSchedule i = \" << i\n+        DBG( std::cout << \"CSuperblock::ParsePaymentSchedule i = \" << i\n              <<  \", vecParsed2[i] = \" << vecParsed2[i]\n-             << endl; );\n+             << std::endl; );\n \n         CAmount nAmount = ParsePaymentAmount(vecParsed2[i]);\n \n-        DBG( cout << \"CSuperblock::ParsePaymentSchedule: \"\n+        DBG( std::cout << \"CSuperblock::ParsePaymentSchedule: \"\n              << \"amount string = \" << vecParsed2[i]\n              << \", nAmount = \" << nAmount\n-             << endl; );\n+             << std::endl; );\n \n         CGovernancePayment payment(address, nAmount);\n         if(payment.IsValid()) {\n@@ -659,8 +685,8 @@ bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, const CAm\n     int nPayments = CountPayments();\n     int nMinerPayments = nOutputs - nPayments;\n \n-    LogPrint(\"gobject\", \"CSuperblock::IsValid nOutputs = %d, nPayments = %d, strData = %s\\n\",\n-             nOutputs, nPayments, GetGovernanceObject()->GetDataAsHex());\n+    LogPrint(\"gobject\", \"CSuperblock::IsValid nOutputs = %d, nPayments = %d, GetDataAsHexString = %s\\n\",\n+             nOutputs, nPayments, GetGovernanceObject()->GetDataAsHexString());\n \n     // We require an exact match (including order) between the expected\n     // superblock payments and the payments actually in the block.\n@@ -683,8 +709,9 @@ bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, const CAm\n \n     // miner should not get more than he would usually get\n     CAmount nBlockValue = txNew.GetValueOut();\n-    if(nBlockValue > blockReward + nFee + nPaymentsTotalAmount) {\n-        LogPrintf(\"CSuperblock::IsValid -- ERROR: Block invalid, block value limit exceeded: block %lld, limit %lld\\n\", nBlockValue, blockReward + nPaymentsTotalAmount);\n+    \n+\tif(nBlockValue > (blockReward + nFee + nPaymentsTotalAmount)) {\n+        LogPrintf(\"CSuperblock::IsValid -- ERROR: Block invalid, block value limit exceeded: block %lld, limit %lld\\n\", nBlockValue, blockReward + nFee + nPaymentsTotalAmount);\n         return false;\n     }\n \n@@ -725,6 +752,42 @@ bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, const CAm\n     return true;\n }\n \n+bool CSuperblock::IsExpired()\n+{\n+    bool fExpired{false};\n+    int nExpirationBlocks{0};\n+    // Executed triggers are kept for another superblock cycle (approximately 1 month),\n+    // other valid triggers are kept for ~1 day only, everything else is pruned after ~1h.\n+    switch (nStatus) {\n+        case SEEN_OBJECT_EXECUTED:\n+            nExpirationBlocks = Params().GetConsensus().nSuperblockCycle;\n+            break;\n+        case SEEN_OBJECT_IS_VALID:\n+            nExpirationBlocks = 576;\n+            break;\n+        default:\n+            nExpirationBlocks = 24;\n+            break;\n+    }\n+\n+    int nExpirationBlock = nBlockHeight + nExpirationBlocks;\n+\n+    LogPrint(\"gobject\", \"CSuperblock::IsExpired -- nBlockHeight = %d, nExpirationBlock = %d\\n\", nBlockHeight, nExpirationBlock);\n+\n+    if(governance.GetCachedBlockHeight() > nExpirationBlock) {\n+        LogPrint(\"gobject\", \"CSuperblock::IsExpired -- Outdated trigger found\\n\");\n+        fExpired = true;\n+        CGovernanceObject* pgovobj = GetGovernanceObject();\n+        if(pgovobj) {\n+            LogPrint(\"gobject\", \"CSuperblock::IsExpired -- Expiring outdated object: %s\\n\", pgovobj->GetHash().ToString());\n+            pgovobj->fExpired = true;\n+            pgovobj->nDeletionTime = GetAdjustedTime();\n+        }\n+    }\n+\n+    return fExpired;\n+}\n+\n /**\n *   Get Required Payment String\n *"
      },
      {
        "sha": "dd3359db2767e25221a789c788d985378118ce65",
        "filename": "src/governance-classes.h",
        "status": "modified",
        "additions": 8,
        "deletions": 26,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-classes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-classes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #ifndef GOVERNANCE_CLASSES_H\n@@ -28,9 +27,6 @@ typedef boost::shared_ptr<CSuperblock> CSuperblock_sptr;\n // DECLARE GLOBAL VARIABLES FOR GOVERNANCE CLASSES\n extern CGovernanceTriggerManager triggerman;\n \n-// SPLIT A STRING UP - USED FOR SUPERBLOCK PAYMENTS\n-std::vector<std::string> SplitBy(std::string strCommand, std::string strDelimit);\n-\n /**\n *   Trigger Mananger\n *\n@@ -74,6 +70,7 @@ class CSuperblockManager\n     static bool IsSuperblockTriggered(int nBlockHeight);\n \n     static void CreateSuperblock(CMutableTransaction& txNewRet, int nBlockHeight, std::vector<CTxOut>& voutSuperblockRet);\n+    static void ExecuteBestSuperblock(int nBlockHeight);\n \n     static std::string GetRequiredPaymentsString(int nBlockHeight);\n     static bool IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward);\n@@ -149,18 +146,19 @@ class CSuperblock : public CGovernanceObject\n private:\n     uint256 nGovObjHash;\n \n-    int nEpochStart;\n+    int nBlockHeight;\n     int nStatus;\n     std::vector<CGovernancePayment> vecPayments;\n \n-    void ParsePaymentSchedule(std::string& strPaymentAddresses, std::string& strPaymentAmounts);\n+    void ParsePaymentSchedule(const std::string& strPaymentAddresses, const std::string& strPaymentAmounts);\n \n public:\n \n     CSuperblock();\n     CSuperblock(uint256& nHash);\n \n     static bool IsValidBlockHeight(int nBlockHeight);\n+    static void GetNearestSuperblocksHeights(int nBlockHeight, int& nLastSuperblockRet, int& nNextSuperblockRet);\n     static CAmount GetPaymentsLimit(int nBlockHeight);\n \n     int GetStatus() { return nStatus; }\n@@ -178,33 +176,17 @@ class CSuperblock : public CGovernanceObject\n         return pObj;\n     }\n \n-    int GetBlockStart()\n+    int GetBlockHeight()\n     {\n-        /* // 12.1 TRIGGER EXECUTION */\n-        /* // NOTE : Is this over complicated? */\n-\n-        /* //int nRet = 0; */\n-        /* int nTipEpoch = 0; */\n-        /* int nTipBlock = chainActive.Tip()->nHeight+1; */\n-\n-        /* // GET TIP EPOCK / BLOCK */\n-\n-        /* // typically it should be more than the current time */\n-        /* int nDiff = nEpochStart - nTipEpoch; */\n-        /* int nBlockDiff = nDiff / (2.6*60); */\n-\n-        /* // calculate predicted block height */\n-        /* int nMod = (nTipBlock + nBlockDiff) % Params().GetConsensus().nSuperblockCycle; */\n-\n-        /* return (nTipBlock + nBlockDiff)-nMod; */\n-        return nEpochStart;\n+        return nBlockHeight;\n     }\n \n     int CountPayments() { return (int)vecPayments.size(); }\n     bool GetPayment(int nPaymentIndex, CGovernancePayment& paymentRet);\n     CAmount GetPaymentsTotalAmount();\n \n     bool IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount& nFee, const CAmount &blockReward);\n+    bool IsExpired();\n };\n \n #endif"
      },
      {
        "sha": "f95278d148448916879a0db64fc674e58d213148",
        "filename": "src/governance-exceptions.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-exceptions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-exceptions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-exceptions.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -77,7 +76,7 @@ class CGovernanceException : public std::exception\n \n     virtual ~CGovernanceException() throw() {}\n \n-    virtual const char* what() const throw()\n+    virtual const char* what() const throw() override \n     {\n         return strMessage.c_str();\n     }"
      },
      {
        "sha": "b82ce0e8ecf22780f03c01f291c66f07f91ddc28",
        "filename": "src/governance-misc.h",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-misc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-misc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-misc.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n \n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -10,8 +9,6 @@\n #include \"governance.h\"\n #include \"init.h\"\n \n-using namespace std;\n-\n class CGovernanceVote;\n \n /**"
      },
      {
        "sha": "c4fd9ff2b296e3a8d087b9b2f0ae465182955dfc",
        "filename": "src/governance-object.cpp",
        "status": "modified",
        "additions": 301,
        "deletions": 289,
        "changes": 590,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -8,6 +7,7 @@\n #include \"governance-classes.h\"\n #include \"governance-object.h\"\n #include \"governance-vote.h\"\n+#include \"governance-validators.h\"\n #include \"instantx.h\"\n #include \"masternode-sync.h\"\n #include \"masternodeman.h\"\n@@ -16,97 +16,109 @@\n \n #include <univalue.h>\n \n-CGovernanceObject::CGovernanceObject()\n-: cs(),\n-  nObjectType(GOVERNANCE_OBJECT_UNKNOWN),\n-  nHashParent(),\n-  nRevision(0),\n-  nTime(0),\n-  nDeletionTime(0),\n-  nCollateralHash(),\n-  strData(),\n-  vinMasternode(),\n-  vchSig(),\n-  fCachedLocalValidity(false),\n-  strLocalValidityError(),\n-  fCachedFunding(false),\n-  fCachedValid(true),\n-  fCachedDelete(false),\n-  fCachedEndorsed(false),\n-  fDirtyCache(true),\n-  fExpired(false),\n-  fUnparsable(false),\n-  mapCurrentMNVotes(),\n-  mapOrphanVotes(),\n-  fileVotes()\n+CGovernanceObject::CGovernanceObject():\n+    cs(),\n+    nObjectType(GOVERNANCE_OBJECT_UNKNOWN),\n+    nHashParent(),\n+    nRevision(0),\n+    nTime(0),\n+    nDeletionTime(0),\n+    nCollateralHash(),\n+    vchData(),\n+    masternodeOutpoint(),\n+    vchSig(),\n+    fCachedLocalValidity(false),\n+    strLocalValidityError(),\n+    fCachedFunding(false),\n+    fCachedValid(true),\n+    fCachedDelete(false),\n+    fCachedEndorsed(false),\n+    fDirtyCache(true),\n+    fExpired(false),\n+    fUnparsable(false),\n+    mapCurrentMNVotes(),\n+    cmmapOrphanVotes(),\n+    fileVotes()\n {\n-    // PARSE JSON DATA STORAGE (STRDATA)\n+    // PARSE JSON DATA STORAGE (VCHDATA)\n     LoadData();\n }\n \n-CGovernanceObject::CGovernanceObject(uint256 nHashParentIn, int nRevisionIn, int64_t nTimeIn, uint256 nCollateralHashIn, std::string strDataIn)\n-: cs(),\n-  nObjectType(GOVERNANCE_OBJECT_UNKNOWN),\n-  nHashParent(nHashParentIn),\n-  nRevision(nRevisionIn),\n-  nTime(nTimeIn),\n-  nDeletionTime(0),\n-  nCollateralHash(nCollateralHashIn),\n-  strData(strDataIn),\n-  vinMasternode(),\n-  vchSig(),\n-  fCachedLocalValidity(false),\n-  strLocalValidityError(),\n-  fCachedFunding(false),\n-  fCachedValid(true),\n-  fCachedDelete(false),\n-  fCachedEndorsed(false),\n-  fDirtyCache(true),\n-  fExpired(false),\n-  fUnparsable(false),\n-  mapCurrentMNVotes(),\n-  mapOrphanVotes(),\n-  fileVotes()\n+CGovernanceObject::CGovernanceObject(const uint256& nHashParentIn, int nRevisionIn, int64_t nTimeIn, const uint256& nCollateralHashIn, const std::string& strDataHexIn):\n+    cs(),\n+    nObjectType(GOVERNANCE_OBJECT_UNKNOWN),\n+    nHashParent(nHashParentIn),\n+    nRevision(nRevisionIn),\n+    nTime(nTimeIn),\n+    nDeletionTime(0),\n+    nCollateralHash(nCollateralHashIn),\n+    vchData(ParseHex(strDataHexIn)),\n+    masternodeOutpoint(),\n+    vchSig(),\n+    fCachedLocalValidity(false),\n+    strLocalValidityError(),\n+    fCachedFunding(false),\n+    fCachedValid(true),\n+    fCachedDelete(false),\n+    fCachedEndorsed(false),\n+    fDirtyCache(true),\n+    fExpired(false),\n+    fUnparsable(false),\n+    mapCurrentMNVotes(),\n+    cmmapOrphanVotes(),\n+    fileVotes()\n {\n-    // PARSE JSON DATA STORAGE (STRDATA)\n+    // PARSE JSON DATA STORAGE (VCHDATA)\n     LoadData();\n }\n \n-CGovernanceObject::CGovernanceObject(const CGovernanceObject& other)\n-: cs(),\n-  nObjectType(other.nObjectType),\n-  nHashParent(other.nHashParent),\n-  nRevision(other.nRevision),\n-  nTime(other.nTime),\n-  nDeletionTime(other.nDeletionTime),\n-  nCollateralHash(other.nCollateralHash),\n-  strData(other.strData),\n-  vinMasternode(other.vinMasternode),\n-  vchSig(other.vchSig),\n-  fCachedLocalValidity(other.fCachedLocalValidity),\n-  strLocalValidityError(other.strLocalValidityError),\n-  fCachedFunding(other.fCachedFunding),\n-  fCachedValid(other.fCachedValid),\n-  fCachedDelete(other.fCachedDelete),\n-  fCachedEndorsed(other.fCachedEndorsed),\n-  fDirtyCache(other.fDirtyCache),\n-  fExpired(other.fExpired),\n-  fUnparsable(other.fUnparsable),\n-  mapCurrentMNVotes(other.mapCurrentMNVotes),\n-  mapOrphanVotes(other.mapOrphanVotes),\n-  fileVotes(other.fileVotes)\n+CGovernanceObject::CGovernanceObject(const CGovernanceObject& other):\n+    cs(),\n+    nObjectType(other.nObjectType),\n+    nHashParent(other.nHashParent),\n+    nRevision(other.nRevision),\n+    nTime(other.nTime),\n+    nDeletionTime(other.nDeletionTime),\n+    nCollateralHash(other.nCollateralHash),\n+    vchData(other.vchData),\n+    masternodeOutpoint(other.masternodeOutpoint),\n+    vchSig(other.vchSig),\n+    fCachedLocalValidity(other.fCachedLocalValidity),\n+    strLocalValidityError(other.strLocalValidityError),\n+    fCachedFunding(other.fCachedFunding),\n+    fCachedValid(other.fCachedValid),\n+    fCachedDelete(other.fCachedDelete),\n+    fCachedEndorsed(other.fCachedEndorsed),\n+    fDirtyCache(other.fDirtyCache),\n+    fExpired(other.fExpired),\n+    fUnparsable(other.fUnparsable),\n+    mapCurrentMNVotes(other.mapCurrentMNVotes),\n+    cmmapOrphanVotes(other.cmmapOrphanVotes),\n+    fileVotes(other.fileVotes)\n {}\n \n bool CGovernanceObject::ProcessVote(CNode* pfrom,\n                                     const CGovernanceVote& vote,\n                                     CGovernanceException& exception,\n                                     CConnman& connman)\n {\n+    LOCK(cs);\n+\n+    // do not process already known valid votes twice\n+    if (fileVotes.HasVote(vote.GetHash())) {\n+        // nothing to do here, not an error\n+        std::ostringstream ostr;\n+        ostr << \"CGovernanceObject::ProcessVote -- Already known valid vote\";\n+        LogPrint(\"gobject\", \"%s\\n\", ostr.str());\n+        exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_NONE);\n+        return false;\n+    }\n+\n     if(!mnodeman.Has(vote.GetMasternodeOutpoint())) {\n         std::ostringstream ostr;\n-        ostr << \"CGovernanceObject::ProcessVote -- Masternode index not found\";\n+        ostr << \"CGovernanceObject::ProcessVote -- Masternode \" << vote.GetMasternodeOutpoint().ToStringShort() << \" not found\";\n         exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n-        if(mapOrphanVotes.Insert(vote.GetMasternodeOutpoint(), vote_time_pair_t(vote, GetAdjustedTime() + GOVERNANCE_ORPHAN_EXPIRATION_TIME))) {\n+        if(cmmapOrphanVotes.Insert(vote.GetMasternodeOutpoint(), vote_time_pair_t(vote, GetAdjustedTime() + GOVERNANCE_ORPHAN_EXPIRATION_TIME))) {\n             if(pfrom) {\n                 mnodeman.AskForMN(pfrom, vote.GetMasternodeOutpoint(), connman);\n             }\n@@ -118,11 +130,8 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n         return false;\n     }\n \n-    vote_m_it it = mapCurrentMNVotes.find(vote.GetMasternodeOutpoint());\n-    if(it == mapCurrentMNVotes.end()) {\n-        it = mapCurrentMNVotes.insert(vote_m_t::value_type(vote.GetMasternodeOutpoint(), vote_rec_t())).first;\n-    }\n-    vote_rec_t& recVote = it->second;\n+    vote_m_it it = mapCurrentMNVotes.emplace(vote_m_t::value_type(vote.GetMasternodeOutpoint(), vote_rec_t())).first;\n+    vote_rec_t& voteRecordRef = it->second;\n     vote_signal_enum_t eSignal = vote.GetSignal();\n     if(eSignal == VOTE_SIGNAL_NONE) {\n         std::ostringstream ostr;\n@@ -138,14 +147,11 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n         exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_PERMANENT_ERROR, 20);\n         return false;\n     }\n-    vote_instance_m_it it2 = recVote.mapInstances.find(int(eSignal));\n-    if(it2 == recVote.mapInstances.end()) {\n-        it2 = recVote.mapInstances.insert(vote_instance_m_t::value_type(int(eSignal), vote_instance_t())).first;\n-    }\n-    vote_instance_t& voteInstance = it2->second;\n+    vote_instance_m_it it2 = voteRecordRef.mapInstances.emplace(vote_instance_m_t::value_type(int(eSignal), vote_instance_t())).first;\n+    vote_instance_t& voteInstanceRef = it2->second;\n \n     // Reject obsolete votes\n-    if(vote.GetTimestamp() < voteInstance.nCreationTime) {\n+    if(vote.GetTimestamp() < voteInstanceRef.nCreationTime) {\n         std::ostringstream ostr;\n         ostr << \"CGovernanceObject::ProcessVote -- Obsolete vote\";\n         LogPrint(\"gobject\", \"%s\\n\", ostr.str());\n@@ -154,9 +160,9 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n     }\n \n     int64_t nNow = GetAdjustedTime();\n-    int64_t nVoteTimeUpdate = voteInstance.nTime;\n+    int64_t nVoteTimeUpdate = voteInstanceRef.nTime;\n     if(governance.AreRateChecksEnabled()) {\n-        int64_t nTimeDelta = nNow - voteInstance.nTime;\n+        int64_t nTimeDelta = nNow - voteInstanceRef.nTime;\n         if(nTimeDelta < GOVERNANCE_UPDATE_MIN) {\n             std::ostringstream ostr;\n             ostr << \"CGovernanceObject::ProcessVote -- Masternode voting too often\"\n@@ -169,6 +175,7 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n             return false;\n         }\n     }\n+\n     // Finally check that the vote is actually valid (done last because of cost of signature verification)\n     if(!vote.IsValid(true)) {\n         std::ostringstream ostr;\n@@ -181,6 +188,7 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n         governance.AddInvalidVote(vote);\n         return false;\n     }\n+\n     if(!mnodeman.AddGovernanceVote(vote.GetMasternodeOutpoint(), vote.GetParentHash())) {\n         std::ostringstream ostr;\n         ostr << \"CGovernanceObject::ProcessVote -- Unable to add governance vote\"\n@@ -190,16 +198,17 @@ bool CGovernanceObject::ProcessVote(CNode* pfrom,\n         exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_PERMANENT_ERROR);\n         return false;\n     }\n-    voteInstance = vote_instance_t(vote.GetOutcome(), nVoteTimeUpdate, vote.GetTimestamp());\n-    if(!fileVotes.HasVote(vote.GetHash())) {\n-        fileVotes.AddVote(vote);\n-    }\n+\n+    voteInstanceRef = vote_instance_t(vote.GetOutcome(), nVoteTimeUpdate, vote.GetTimestamp());\n+    fileVotes.AddVote(vote);\n     fDirtyCache = true;\n     return true;\n }\n \n void CGovernanceObject::ClearMasternodeVotes()\n {\n+    LOCK(cs);\n+\n     vote_m_it it = mapCurrentMNVotes.begin();\n     while(it != mapCurrentMNVotes.end()) {\n         if(!mnodeman.Has(it->first)) {\n@@ -218,103 +227,105 @@ std::string CGovernanceObject::GetSignatureMessage() const\n     std::string strMessage = nHashParent.ToString() + \"|\" +\n         boost::lexical_cast<std::string>(nRevision) + \"|\" +\n         boost::lexical_cast<std::string>(nTime) + \"|\" +\n-        strData + \"|\" +\n-        vinMasternode.prevout.ToStringShort() + \"|\" +\n+        GetDataAsHexString() + \"|\" +\n+        masternodeOutpoint.ToStringShort() + \"|\" +\n         nCollateralHash.ToString();\n \n     return strMessage;\n }\n \n-void CGovernanceObject::SetMasternodeVin(const COutPoint& outpoint)\n+uint256 CGovernanceObject::GetHash() const\n {\n-    vinMasternode = CTxIn(outpoint);\n-}\n+    // Note: doesn't match serialization\n \n-bool CGovernanceObject::Sign(CKey& keyMasternode, CPubKey& pubKeyMasternode)\n-{\n-    std::string strError;\n-    std::string strMessage = GetSignatureMessage();\n-\n-    LOCK(cs);\n+    // CREATE HASH OF ALL IMPORTANT PIECES OF DATA\n \n-    if(!CMessageSigner::SignMessage(strMessage, vchSig, keyMasternode)) {\n-        LogPrintf(\"CGovernanceObject::Sign -- SignMessage() failed\\n\");\n-        return false;\n-    }\n+    CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n+    ss << nHashParent;\n+    ss << nRevision;\n+    ss << nTime;\n+    ss << GetDataAsHexString();\n+    ss << masternodeOutpoint;\n+    ss << vchSig;\n+    // fee_tx is left out on purpose\n \n-    if(!CMessageSigner::VerifyMessage(pubKeyMasternode, vchSig, strMessage, strError)) {\n-        LogPrintf(\"CGovernanceObject::Sign -- VerifyMessage() failed, error: %s\\n\", strError);\n-        return false;\n-    }\n+    DBG( printf(\"CGovernanceObject::GetHash %i %li %s\\n\", nRevision, nTime, GetDataAsHexString().c_str()); );\n \n-    LogPrint(\"gobject\", \"CGovernanceObject::Sign -- pubkey id = %s, vin = %s\\n\",\n-             pubKeyMasternode.GetID().ToString(), vinMasternode.prevout.ToStringShort());\n+    return ss.GetHash();\n+}\n \n+uint256 CGovernanceObject::GetSignatureHash() const\n+{\n+    return SerializeHash(*this);\n+}\n \n-    return true;\n+void CGovernanceObject::SetMasternodeOutpoint(const COutPoint& outpoint)\n+{\n+    masternodeOutpoint = outpoint;\n }\n \n-bool CGovernanceObject::CheckSignature(CPubKey& pubKeyMasternode)\n+bool CGovernanceObject::Sign(const CKey& keyMasternode, const CPubKey& pubKeyMasternode)\n {\n     std::string strError;\n \n-    std::string strMessage = GetSignatureMessage();\n+    if (sporkManager.IsSporkActive(SPORK_6_NEW_SIGS)) {\n+        uint256 hash = GetSignatureHash();\n \n-    LOCK(cs);\n-    if(!CMessageSigner::VerifyMessage(pubKeyMasternode, vchSig, strMessage, strError)) {\n-        LogPrintf(\"CGovernance::CheckSignature -- VerifyMessage() failed, error: %s\\n\", strError);\n-        return false;\n-    }\n+        if (!CHashSigner::SignHash(hash, keyMasternode, vchSig)) {\n+            LogPrintf(\"CGovernanceObject::Sign -- SignHash() failed\\n\");\n+            return false;\n+        }\n \n-    return true;\n-}\n+        if (!CHashSigner::VerifyHash(hash, pubKeyMasternode, vchSig, strError)) {\n+            LogPrintf(\"CGovernanceObject::Sign -- VerifyHash() failed, error: %s\\n\", strError);\n+            return false;\n+        }\n+    } \n \n-int CGovernanceObject::GetObjectSubtype()\n-{\n-    // todo - 12.1\n-    //   - detect subtype from strData json, obj[\"subtype\"]\n+    LogPrint(\"gobject\", \"CGovernanceObject::Sign -- pubkey id = %s, masternode = %s\\n\",\n+             pubKeyMasternode.GetID().ToString(), masternodeOutpoint.ToStringShort());\n \n-    if(nObjectType == GOVERNANCE_OBJECT_TRIGGER) return TRIGGER_SUPERBLOCK;\n-    return -1;\n+    return true;\n }\n \n-uint256 CGovernanceObject::GetHash() const\n+bool CGovernanceObject::CheckSignature(const CPubKey& pubKeyMasternode) const\n {\n-    // CREATE HASH OF ALL IMPORTANT PIECES OF DATA\n+    std::string strError;\n \n-    CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n-    ss << nHashParent;\n-    ss << nRevision;\n-    ss << nTime;\n-    ss << strData;\n-    ss << vinMasternode;\n-    ss << vchSig;\n-    // fee_tx is left out on purpose\n-    uint256 h1 = ss.GetHash();\n+    if (sporkManager.IsSporkActive(SPORK_6_NEW_SIGS)) {\n+        uint256 hash = GetSignatureHash();\n \n-    DBG( printf(\"CGovernanceObject::GetHash %i %li %s\\n\", nRevision, nTime, strData.c_str()); );\n+        if (!CHashSigner::VerifyHash(hash, pubKeyMasternode, vchSig, strError)) {\n+            LogPrintf(\"CGovernance::CheckSignature -- VerifyMessage() failed, error: %s\\n\", strError);\n+            return false;\n+        }\n+    } \n \n-    return h1;\n+    return true;\n }\n \n /**\n-   Return the actual object from the strData JSON structure.\n+   Return the actual object from the vchData JSON structure.\n \n    Returns an empty object on error.\n  */\n UniValue CGovernanceObject::GetJSONObject()\n {\n     UniValue obj(UniValue::VOBJ);\n-    if(strData.empty()) {\n+    if(vchData.empty()) {\n         return obj;\n     }\n \n     UniValue objResult(UniValue::VOBJ);\n     GetData(objResult);\n \n-    std::vector<UniValue> arr1 = objResult.getValues();\n-    std::vector<UniValue> arr2 = arr1.at( 0 ).getValues();\n-    obj = arr2.at( 1 );\n+    if (objResult.isObject()) {\n+        obj = objResult;\n+    } else {\n+        std::vector<UniValue> arr1 = objResult.getValues();\n+        std::vector<UniValue> arr2 = arr1.at( 0 ).getValues();\n+        obj = arr2.at( 1 );\n+    }\n \n     return obj;\n }\n@@ -323,7 +334,7 @@ UniValue CGovernanceObject::GetJSONObject()\n *   LoadData\n *   --------------------------------------------------------\n *\n-*   Attempt to load data from strData\n+*   Attempt to load data from vchData\n *\n */\n \n@@ -332,18 +343,18 @@ void CGovernanceObject::LoadData()\n     // todo : 12.1 - resolved\n     //return;\n \n-    if(strData.empty()) {\n+    if(vchData.empty()) {\n         return;\n     }\n \n     try  {\n-        // ATTEMPT TO LOAD JSON STRING FROM STRDATA\n+        // ATTEMPT TO LOAD JSON STRING FROM VCHDATA\n         UniValue objResult(UniValue::VOBJ);\n         GetData(objResult);\n \n-        DBG( cout << \"CGovernanceObject::LoadData strData = \"\n-             << GetDataAsString()\n-             << endl; );\n+        DBG( std::cout << \"CGovernanceObject::LoadData GetDataAsPlainString = \"\n+             << GetDataAsPlainString()\n+             << std::endl; );\n \n         UniValue obj = GetJSONObject();\n         nObjectType = obj[\"type\"].get_int();\n@@ -353,15 +364,15 @@ void CGovernanceObject::LoadData()\n         std::ostringstream ostr;\n         ostr << \"CGovernanceObject::LoadData Error parsing JSON\"\n              << \", e.what() = \" << e.what();\n-        DBG( cout << ostr.str() << endl; );\n+        DBG( std::cout << ostr.str() << std::endl; );\n         LogPrintf(\"%s\\n\", ostr.str());\n         return;\n     }\n     catch(...) {\n         fUnparsable = true;\n         std::ostringstream ostr;\n         ostr << \"CGovernanceObject::LoadData Unknown Error parsing JSON\";\n-        DBG( cout << ostr.str() << endl; );\n+        DBG( std::cout << ostr.str() << std::endl; );\n         LogPrintf(\"%s\\n\", ostr.str());\n         return;\n     }\n@@ -378,7 +389,7 @@ void CGovernanceObject::LoadData()\n void CGovernanceObject::GetData(UniValue& objResult)\n {\n     UniValue o(UniValue::VOBJ);\n-    std::string s = GetDataAsString();\n+    std::string s = GetDataAsPlainString();\n     o.read(s);\n     objResult = o;\n }\n@@ -389,17 +400,14 @@ void CGovernanceObject::GetData(UniValue& objResult)\n *\n */\n \n-std::string CGovernanceObject::GetDataAsHex()\n+std::string CGovernanceObject::GetDataAsHexString() const\n {\n-    return strData;\n+    return HexStr(vchData);\n }\n \n-std::string CGovernanceObject::GetDataAsString()\n+std::string CGovernanceObject::GetDataAsPlainString() const\n {\n-    std::vector<unsigned char> v = ParseHex(strData);\n-    std::string s(v.begin(), v.end());\n-\n-    return s;\n+    return std::string(vchData.begin(), vchData.end());\n }\n \n void CGovernanceObject::UpdateLocalValidity()\n@@ -410,92 +418,87 @@ void CGovernanceObject::UpdateLocalValidity()\n };\n \n \n-bool CGovernanceObject::IsValidLocally(std::string& strError, bool fCheckCollateral)\n+bool CGovernanceObject::IsValidLocally(std::string& strError, bool fCheckCollateral) const\n {\n     bool fMissingMasternode = false;\n     bool fMissingConfirmations = false;\n \n     return IsValidLocally(strError, fMissingMasternode, fMissingConfirmations, fCheckCollateral);\n }\n \n-bool CGovernanceObject::IsValidLocally(std::string& strError, bool& fMissingMasternode, bool& fMissingConfirmations, bool fCheckCollateral)\n+bool CGovernanceObject::IsValidLocally(std::string& strError, bool& fMissingMasternode, bool& fMissingConfirmations, bool fCheckCollateral) const\n {\n-\tfMissingMasternode = false;\n-\tfMissingConfirmations = false;\n-\n-\tif (fUnparsable) {\n-\t\tstrError = \"Object data unparseable\";\n-\t\treturn false;\n-\t}\n-\n-\tswitch (nObjectType) {\n-\tcase GOVERNANCE_OBJECT_PROPOSAL:\n-\tcase GOVERNANCE_OBJECT_TRIGGER:\n-\tcase GOVERNANCE_OBJECT_WATCHDOG:\n-\t\tbreak;\n-\tdefault:\n-\t\tstrError = strprintf(\"Invalid object type %d\", nObjectType);\n-\t\treturn false;\n-\t}\n-\n-\t// IF ABSOLUTE NO COUNT (NO-YES VALID VOTES) IS MORE THAN 10% OF THE NETWORK MASTERNODES, OBJ IS INVALID\n-\n-\t// CHECK COLLATERAL IF REQUIRED (HIGH CPU USAGE)\n-\n-\tif (fCheckCollateral) {\n-\t\tif ((nObjectType == GOVERNANCE_OBJECT_TRIGGER) || (nObjectType == GOVERNANCE_OBJECT_WATCHDOG)) {\n-\t\t\tstd::string strOutpoint = vinMasternode.prevout.ToStringShort();\n-\t\t\tmasternode_info_t infoMn;\n-\t\t\tif (!mnodeman.GetMasternodeInfo(vinMasternode.prevout, infoMn)) {\n-\n-\t\t\t\tCMasternode::CollateralStatus err = CMasternode::CheckCollateral(vinMasternode.prevout, CPubKey());\n-\t\t\t\tif (err == CMasternode::COLLATERAL_UTXO_NOT_FOUND) {\n-\t\t\t\t\tstrError = \"Failed to find Masternode UTXO, missing masternode=\" + strOutpoint + \"\\n\";\n-\t\t\t\t}\n-\t\t\t\telse if (err == CMasternode::COLLATERAL_INVALID_AMOUNT) {\n-\t\t\t\t\tstrError = \"Masternode UTXO should have 1000 DASH, missing masternode=\" + strOutpoint + \"\\n\";\n-\t\t\t\t}\n-\t\t\t\telse if (err == CMasternode::COLLATERAL_INVALID_PUBKEY) {\n-\t\t\t\t\tfMissingMasternode = true;\n-\t\t\t\t\tstrError = \"Masternode not found: \" + strOutpoint;\n-\t\t\t\t}\n-\t\t\t\telse if (err == CMasternode::COLLATERAL_OK) {\n-\t\t\t\t\t// this should never happen with CPubKey() as a param\n-\t\t\t\t\tstrError = \"CheckCollateral critical failure! Masternode: \" + strOutpoint;\n-\t\t\t\t}\n-\n-\t\t\t\treturn false;\n-\t\t\t}\n-\n-\t\t\t// Check that we have a valid MN signature\n-\t\t\tif (!CheckSignature(infoMn.pubKeyMasternode)) {\n-\t\t\t\tstrError = \"Invalid masternode signature for: \" + strOutpoint + \", pubkey id = \" + infoMn.pubKeyMasternode.GetID().ToString();\n-\t\t\t\treturn false;\n-\t\t\t}\n-\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\tif (!IsCollateralValid(strError, fMissingConfirmations))\n-\t\t\treturn false;\n-\t}\n-\n-\t/*\n-\tTODO\n-\t- There might be an issue with multisig in the coinbase on mainnet, we will add support for it in a future release.\n-\t- Post 12.2+ (test multisig coinbase transaction)\n-\t*/\n-\n-\t// 12.1 - todo - compile error\n-\t// if(address.IsPayToScriptHash()) {\n-\t//     strError = \"Governance system - multisig is not currently supported\";\n-\t//     return false;\n-\t// }\n-\n-\treturn true;\n+    fMissingMasternode = false;\n+    fMissingConfirmations = false;\n+\n+    if (fUnparsable) {\n+        strError = \"Object data unparseable\";\n+        return false;\n+    }\n+\n+    switch(nObjectType) {\n+        case GOVERNANCE_OBJECT_WATCHDOG: {\n+            // watchdogs are deprecated\n+            return false;\n+        }\n+        case GOVERNANCE_OBJECT_PROPOSAL: {\n+            CProposalValidator validator(GetDataAsHexString());\n+            // Note: It's ok to have expired proposals\n+            // they are going to be cleared by CGovernanceManager::UpdateCachesAndClean()\n+            // TODO: should they be tagged as \"expired\" to skip vote downloading?\n+            // DO NOT USE THIS UNTIL MAY, 2018 on mainnet\n+            if (!validator.Validate(false)) {\n+                strError = strprintf(\"Invalid proposal data, error messages: %s\", validator.GetErrorMessages());\n+                return false;\n+            }\n+            if (fCheckCollateral && !IsCollateralValid(strError, fMissingConfirmations)) {\n+                strError = \"Invalid proposal collateral\";\n+                return false;\n+            }\n+            return true;\n+        }\n+        case GOVERNANCE_OBJECT_TRIGGER: {\n+            if (!fCheckCollateral)\n+                // nothing else we can check here (yet?)\n+                return true;\n+\n+            std::string strOutpoint = masternodeOutpoint.ToStringShort();\n+            masternode_info_t infoMn;\n+            if (!mnodeman.GetMasternodeInfo(masternodeOutpoint, infoMn)) {\n+\n+                CMasternode::CollateralStatus err = CMasternode::CheckCollateral(masternodeOutpoint, CPubKey());\n+                if (err == CMasternode::COLLATERAL_UTXO_NOT_FOUND) {\n+                    strError = \"Failed to find Masternode UTXO, missing masternode=\" + strOutpoint + \"\\n\";\n+                } else if (err == CMasternode::COLLATERAL_INVALID_AMOUNT) {\n+                    strError = \"Masternode UTXO should have 100000 SYS, missing masternode=\" + strOutpoint + \"\\n\";\n+                } else if (err == CMasternode::COLLATERAL_INVALID_PUBKEY) {\n+                    fMissingMasternode = true;\n+                    strError = \"Masternode not found: \" + strOutpoint;\n+                } else if (err == CMasternode::COLLATERAL_OK) {\n+                    // this should never happen with CPubKey() as a param\n+                    strError = \"CheckCollateral critical failure! Masternode: \" + strOutpoint;\n+                }\n+\n+                return false;\n+            }\n+\n+            // Check that we have a valid MN signature\n+            if (!CheckSignature(infoMn.pubKeyMasternode)) {\n+                strError = \"Invalid masternode signature for: \" + strOutpoint + \", pubkey id = \" + infoMn.pubKeyMasternode.GetID().ToString();\n+                return false;\n+            }\n+\n+            return true;\n+        }\n+        default: {\n+            strError = strprintf(\"Invalid object type %d\", nObjectType);\n+            return false;\n+        }\n+    }\n+\n }\n \n-CAmount CGovernanceObject::GetMinCollateralFee()\n+CAmount CGovernanceObject::GetMinCollateralFee() const\n {\n     // Only 1 type has a fee for the moment but switch statement allows for future object types\n     switch(nObjectType) {\n@@ -506,26 +509,32 @@ CAmount CGovernanceObject::GetMinCollateralFee()\n     }\n }\n \n-bool CGovernanceObject::IsCollateralValid(std::string& strError, bool& fMissingConfirmations)\n+bool CGovernanceObject::IsCollateralValid(std::string& strError, bool& fMissingConfirmations) const\n {\n     strError = \"\";\n     fMissingConfirmations = false;\n     CAmount nMinFee = GetMinCollateralFee();\n     uint256 nExpectedHash = GetHash();\n \n-    CTransaction txCollateral;\n+    CTransactionRef txCollateral;\n     uint256 nBlockHash;\n \n-\t// RETRIEVE TRANSACTION IN QUESTION\n+    // RETRIEVE TRANSACTION IN QUESTION\n \n-\tif (!GetTransaction(nCollateralHash, txCollateral, Params().GetConsensus(), nBlockHash, true)) {\n-\t\tstrError = strprintf(\"Can't find collateral tx %s\", txCollateral.ToString());\n+    if(!GetTransaction(nCollateralHash, txCollateral, Params().GetConsensus(), nBlockHash, true)){\n+        strError = strprintf(\"Can't find collateral tx %s\", nCollateralHash.ToString());\n         LogPrintf(\"CGovernanceObject::IsCollateralValid -- %s\\n\", strError);\n         return false;\n     }\n \n-\tif (txCollateral.vout.size() < 1) {\n-\t\tstrError = strprintf(\"tx vout size less than 1 | %d\", txCollateral.vout.size());\n+    if(nBlockHash == uint256()) {\n+        strError = strprintf(\"Collateral tx %s is not mined yet\", txCollateral->ToString());\n+        LogPrintf(\"CGovernanceObject::IsCollateralValid -- %s\\n\", strError);\n+        return false;\n+    }\n+\n+    if(txCollateral->vout.size() < 1) {\n+        strError = strprintf(\"tx vout size less than 1 | %d\", txCollateral->vout.size());\n         LogPrintf(\"CGovernanceObject::IsCollateralValid -- %s\\n\", strError);\n         return false;\n     }\n@@ -535,52 +544,54 @@ bool CGovernanceObject::IsCollateralValid(std::string& strError, bool& fMissingC\n     CScript findScript;\n     findScript << OP_RETURN << ToByteVector(nExpectedHash);\n \n-    DBG( cout << \"IsCollateralValid: txCollateral.vout.size() = \" << txCollateral.vout.size() << endl; );\n+    DBG( std::cout << \"IsCollateralValid: txCollateral->vout.size() = \" << txCollateral->vout.size() << std::endl; );\n \n-    DBG( cout << \"IsCollateralValid: findScript = \" << ScriptToAsmStr( findScript, false ) << endl; );\n+    DBG( std::cout << \"IsCollateralValid: findScript = \" << ScriptToAsmStr( findScript, false ) << std::endl; );\n \n-    DBG( cout << \"IsCollateralValid: nMinFee = \" << nMinFee << endl; );\n+    DBG( std::cout << \"IsCollateralValid: nMinFee = \" << nMinFee << std::endl; );\n \n \n     bool foundOpReturn = false;\n-    BOOST_FOREACH(const CTxOut o, txCollateral.vout) {\n-        DBG( cout << \"IsCollateralValid txout : \" << o.ToString()\n-             << \", o.nValue = \" << o.nValue\n-             << \", o.scriptPubKey = \" << ScriptToAsmStr( o.scriptPubKey, false )\n-             << endl; );\n-        if(!o.scriptPubKey.IsNormalPaymentScript() && !o.scriptPubKey.IsUnspendable()){\n-            strError = strprintf(\"Invalid Script %s\", txCollateral.ToString());\n+    for (const auto& output : txCollateral->vout) {\n+        DBG( std::cout << \"IsCollateralValid txout : \" << output.ToString()\n+             << \", output.nValue = \" << output.nValue\n+             << \", output.scriptPubKey = \" << ScriptToAsmStr( output.scriptPubKey, false )\n+             << std::endl; );\n+        if(!output.scriptPubKey.IsPayToPublicKeyHash() && !output.scriptPubKey.IsUnspendable()) {\n+            strError = strprintf(\"Invalid Script %s\", txCollateral->ToString());\n             LogPrintf (\"CGovernanceObject::IsCollateralValid -- %s\\n\", strError);\n             return false;\n         }\n-        if(o.scriptPubKey == findScript && o.nValue >= nMinFee) {\n-            DBG( cout << \"IsCollateralValid foundOpReturn = true\" << endl; );\n+        if(output.scriptPubKey == findScript && output.nValue >= nMinFee) {\n+            DBG( std::cout << \"IsCollateralValid foundOpReturn = true\" << std::endl; );\n             foundOpReturn = true;\n         }\n         else  {\n-            DBG( cout << \"IsCollateralValid No match, continuing\" << endl; );\n+            DBG( std::cout << \"IsCollateralValid No match, continuing\" << std::endl; );\n         }\n \n     }\n \n     if(!foundOpReturn){\n-        strError = strprintf(\"Couldn't find opReturn %s in %s\", nExpectedHash.ToString(), txCollateral.ToString());\n+        strError = strprintf(\"Couldn't find opReturn %s in %s\", nExpectedHash.ToString(), txCollateral->ToString());\n         LogPrintf (\"CGovernanceObject::IsCollateralValid -- %s\\n\", strError);\n         return false;\n     }\n \n     // GET CONFIRMATIONS FOR TRANSACTION\n-\tAssertLockHeld(cs_main);\n-\tint nConfirmationsIn = instantsend.GetConfirmations(nCollateralHash);\n-\tif (nBlockHash != uint256()) {\n-\t\tBlockMap::iterator mi = mapBlockIndex.find(nBlockHash);\n-\t\tif (mi != mapBlockIndex.end() && (*mi).second) {\n-\t\t\tCBlockIndex* pindex = (*mi).second;\n-\t\t\tif (chainActive.Contains(pindex)) {\n-\t\t\t\tnConfirmationsIn += chainActive.Height() - pindex->nHeight + 1;\n-\t\t\t}\n-\t\t}\n-\t}\n+\n+    AssertLockHeld(cs_main);\n+    int nConfirmationsIn = instantsend.GetConfirmations(nCollateralHash);\n+    if (nBlockHash != uint256()) {\n+        BlockMap::iterator mi = mapBlockIndex.find(nBlockHash);\n+        if (mi != mapBlockIndex.end() && (*mi).second) {\n+            CBlockIndex* pindex = (*mi).second;\n+            if (chainActive.Contains(pindex)) {\n+                nConfirmationsIn += chainActive.Height() - pindex->nHeight + 1;\n+            }\n+        }\n+    }\n+\n     if(nConfirmationsIn < GOVERNANCE_FEE_CONFIRMATIONS) {\n         strError = strprintf(\"Collateral requires at least %d confirmations to be relayed throughout the network (it has only %d)\", GOVERNANCE_FEE_CONFIRMATIONS, nConfirmationsIn);\n         if (nConfirmationsIn >= GOVERNANCE_MIN_RELAY_FEE_CONFIRMATIONS) {\n@@ -600,15 +611,13 @@ bool CGovernanceObject::IsCollateralValid(std::string& strError, bool& fMissingC\n \n int CGovernanceObject::CountMatchingVotes(vote_signal_enum_t eVoteSignalIn, vote_outcome_enum_t eVoteOutcomeIn) const\n {\n+    LOCK(cs);\n+\n     int nCount = 0;\n-    for(vote_m_cit it = mapCurrentMNVotes.begin(); it != mapCurrentMNVotes.end(); ++it) {\n-        const vote_rec_t& recVote = it->second;\n+    for (const auto& votepair : mapCurrentMNVotes) {\n+        const vote_rec_t& recVote = votepair.second;\n         vote_instance_m_cit it2 = recVote.mapInstances.find(eVoteSignalIn);\n-        if(it2 == recVote.mapInstances.end()) {\n-            continue;\n-        }\n-        const vote_instance_t& voteInstance = it2->second;\n-        if(voteInstance.eOutcome == eVoteOutcomeIn) {\n+        if(it2 != recVote.mapInstances.end() && it2->second.eOutcome == eVoteOutcomeIn) {\n             ++nCount;\n         }\n     }\n@@ -644,9 +653,11 @@ int CGovernanceObject::GetAbstainCount(vote_signal_enum_t eVoteSignalIn) const\n     return CountMatchingVotes(eVoteSignalIn, VOTE_OUTCOME_ABSTAIN);\n }\n \n-bool CGovernanceObject::GetCurrentMNVotes(const COutPoint& mnCollateralOutpoint, vote_rec_t& voteRecord)\n+bool CGovernanceObject::GetCurrentMNVotes(const COutPoint& mnCollateralOutpoint, vote_rec_t& voteRecord) const\n {\n-    vote_m_it it = mapCurrentMNVotes.find(mnCollateralOutpoint);\n+    LOCK(cs);\n+\n+    vote_m_cit it = mapCurrentMNVotes.find(mnCollateralOutpoint);\n     if (it == mapCurrentMNVotes.end()) {\n         return false;\n     }\n@@ -656,11 +667,12 @@ bool CGovernanceObject::GetCurrentMNVotes(const COutPoint& mnCollateralOutpoint,\n \n void CGovernanceObject::Relay(CConnman& connman)\n {\n-\t// Do not relay until fully synced\n-\tif (!masternodeSync.IsSynced()) {\n-\t\tLogPrint(\"gobject\", \"CGovernanceObject::Relay -- won't relay until fully synced\\n\");\n-\t\treturn;\n-\t}\n+    // Do not relay until fully synced\n+    if(!masternodeSync.IsSynced()) {\n+        LogPrint(\"gobject\", \"CGovernanceObject::Relay -- won't relay until fully synced\\n\");\n+        return;\n+    }\n+\n     CInv inv(MSG_GOVERNANCE_OBJECT, GetHash());\n     connman.RelayInv(inv, MIN_GOVERNANCE_PEER_PROTO_VERSION);\n }\n@@ -714,7 +726,7 @@ void CGovernanceObject::swap(CGovernanceObject& first, CGovernanceObject& second\n     swap(first.nTime, second.nTime);\n     swap(first.nDeletionTime, second.nDeletionTime);\n     swap(first.nCollateralHash, second.nCollateralHash);\n-    swap(first.strData, second.strData);\n+    swap(first.vchData, second.vchData);\n     swap(first.nObjectType, second.nObjectType);\n \n     // swap all cached valid flags\n@@ -729,8 +741,8 @@ void CGovernanceObject::swap(CGovernanceObject& first, CGovernanceObject& second\n void CGovernanceObject::CheckOrphanVotes(CConnman& connman)\n {\n     int64_t nNow = GetAdjustedTime();\n-    const vote_mcache_t::list_t& listVotes = mapOrphanVotes.GetItemList();\n-    vote_mcache_t::list_cit it = listVotes.begin();\n+    const vote_cmm_t::list_t& listVotes = cmmapOrphanVotes.GetItemList();\n+    vote_cmm_t::list_cit it = listVotes.begin();\n     while(it != listVotes.end()) {\n         bool fRemove = false;\n         const COutPoint& key = it->key;\n@@ -753,7 +765,7 @@ void CGovernanceObject::CheckOrphanVotes(CConnman& connman)\n         }\n         ++it;\n         if(fRemove) {\n-            mapOrphanVotes.Erase(key, pairVote);\n+            cmmapOrphanVotes.Erase(key, pairVote);\n         }\n     }\n }"
      },
      {
        "sha": "1e632d4f3416170410dc4af1dc3da62036b53f69",
        "filename": "src/governance-object.h",
        "status": "modified",
        "additions": 40,
        "deletions": 38,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-object.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-object.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-object.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -16,17 +15,18 @@\n #include \"net.h\"\n #include \"sync.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <univalue.h>\n-\n+#include \"version.h\"\n class CGovernanceManager;\n class CGovernanceTriggerManager;\n class CGovernanceObject;\n class CGovernanceVote;\n \n static const int MAX_GOVERNANCE_OBJECT_DATA_SIZE = 16 * 1024;\n-static const int MIN_GOVERNANCE_PEER_PROTO_VERSION = 70206;\n-static const int GOVERNANCE_FILTER_PROTO_VERSION = 70206;\n+static const int MIN_GOVERNANCE_PEER_PROTO_VERSION = MIN_PEER_PROTO_VERSION;\n+static const int GOVERNANCE_FILTER_PROTO_VERSION = MIN_PEER_PROTO_VERSION;\n \n static const double GOVERNANCE_FILTER_FP_RATE = 0.001;\n \n@@ -42,9 +42,6 @@ static const int64_t GOVERNANCE_MIN_RELAY_FEE_CONFIRMATIONS = 1;\n static const int64_t GOVERNANCE_UPDATE_MIN = 60*60;\n static const int64_t GOVERNANCE_DELETION_DELAY = 10*60;\n static const int64_t GOVERNANCE_ORPHAN_EXPIRATION_TIME = 10*60;\n-static const int64_t GOVERNANCE_WATCHDOG_EXPIRATION_TIME = 2*60*60;\n-\n-static const int GOVERNANCE_TRIGGER_EXPIRATION_BLOCKS = 576;\n \n // FOR SEEN MAP ARRAYS - GOVERNANCE OBJECTS AND VOTES\n static const int SEEN_OBJECT_IS_VALID = 0;\n@@ -75,7 +72,7 @@ struct vote_instance_t {\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         int nOutcome = int(eOutcome);\n         READWRITE(nOutcome);\n@@ -99,7 +96,7 @@ struct vote_rec_t {\n     ADD_SERIALIZE_METHODS;\n \n      template <typename Stream, typename Operation>\n-     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+     inline void SerializationOp(Stream& s, Operation ser_action)\n      {\n          READWRITE(mapInstances);\n      }\n@@ -113,8 +110,8 @@ struct vote_rec_t {\n class CGovernanceObject\n {\n     friend class CGovernanceManager;\n-\n     friend class CGovernanceTriggerManager;\n+    friend class CSuperblock;\n \n public: // Types\n     typedef std::map<COutPoint, vote_rec_t> vote_m_t;\n@@ -123,7 +120,7 @@ class CGovernanceObject\n \n     typedef vote_m_t::const_iterator vote_m_cit;\n \n-    typedef CacheMultiMap<COutPoint, vote_time_pair_t> vote_mcache_t;\n+    typedef CacheMultiMap<COutPoint, vote_time_pair_t> vote_cmm_t;\n \n private:\n     /// critical section to protect the inner data structures\n@@ -148,10 +145,10 @@ class CGovernanceObject\n     uint256 nCollateralHash;\n \n     /// Data field - can be used for anything\n-    std::string strData;\n+    std::vector<unsigned char> vchData;\n \n     /// Masternode info for signed objects\n-    CTxIn vinMasternode;\n+    COutPoint masternodeOutpoint;\n     std::vector<unsigned char> vchSig;\n \n     /// is valid by blockchain\n@@ -163,7 +160,7 @@ class CGovernanceObject\n     /// true == minimum network support has been reached for this object to be funded (doesn't mean it will for sure though)\n     bool fCachedFunding;\n \n-    /// true == minimum network has been reached flagging this object as a valid and understood goverance object (e.g, the serialized data is correct format, etc)\n+    /// true == minimum network has been reached flagging this object as a valid and understood governance object (e.g, the serialized data is correct format, etc)\n     bool fCachedValid;\n \n     /// true == minimum network support has been reached saying this object should be deleted from the system entirely\n@@ -186,14 +183,14 @@ class CGovernanceObject\n     vote_m_t mapCurrentMNVotes;\n \n     /// Limited map of votes orphaned by MN\n-    vote_mcache_t mapOrphanVotes;\n+    vote_cmm_t cmmapOrphanVotes;\n \n     CGovernanceObjectVoteFile fileVotes;\n \n public:\n     CGovernanceObject();\n \n-    CGovernanceObject(uint256 nHashParentIn, int nRevisionIn, int64_t nTime, uint256 nCollateralHashIn, std::string strDataIn);\n+    CGovernanceObject(const uint256& nHashParentIn, int nRevisionIn, int64_t nTime, const uint256& nCollateralHashIn, const std::string& strDataHexIn);\n \n     CGovernanceObject(const CGovernanceObject& other);\n \n@@ -217,8 +214,8 @@ class CGovernanceObject\n         return nCollateralHash;\n     }\n \n-    const CTxIn& GetMasternodeVin() const {\n-        return vinMasternode;\n+    const COutPoint& GetMasternodeOutpoint() const {\n+        return masternodeOutpoint;\n     }\n \n     bool IsSetCachedFunding() const {\n@@ -249,34 +246,33 @@ class CGovernanceObject\n         fDirtyCache = true;\n     }\n \n-    CGovernanceObjectVoteFile& GetVoteFile() {\n+    const CGovernanceObjectVoteFile& GetVoteFile() const {\n         return fileVotes;\n     }\n \n     // Signature related functions\n \n-    void SetMasternodeVin(const COutPoint& outpoint);\n-    bool Sign(CKey& keyMasternode, CPubKey& pubKeyMasternode);\n-    bool CheckSignature(CPubKey& pubKeyMasternode);\n+    void SetMasternodeOutpoint(const COutPoint& outpoint);\n+    bool Sign(const CKey& keyMasternode, const CPubKey& pubKeyMasternode);\n+    bool CheckSignature(const CPubKey& pubKeyMasternode) const;\n \n     std::string GetSignatureMessage() const;\n+    uint256 GetSignatureHash() const;\n \n     // CORE OBJECT FUNCTIONS\n \n-    bool IsValidLocally(std::string& strError, bool fCheckCollateral);\n+    bool IsValidLocally(std::string& strError, bool fCheckCollateral) const;\n \n-    bool IsValidLocally(std::string& strError, bool& fMissingMasternode, bool& fMissingConfirmations, bool fCheckCollateral);\n+    bool IsValidLocally(std::string& strError, bool& fMissingMasternode, bool& fMissingConfirmations, bool fCheckCollateral) const;\n \n     /// Check the collateral transaction for the budget proposal/finalized budget\n-    bool IsCollateralValid(std::string& strError, bool &fMissingConfirmations);\n+    bool IsCollateralValid(std::string& strError, bool& fMissingConfirmations) const;\n \n     void UpdateLocalValidity();\n \n     void UpdateSentinelVariables();\n \n-    int GetObjectSubtype();\n-\n-    CAmount GetMinCollateralFee();\n+    CAmount GetMinCollateralFee() const;\n \n     UniValue GetJSONObject();\n \n@@ -294,31 +290,37 @@ class CGovernanceObject\n     int GetNoCount(vote_signal_enum_t eVoteSignalIn) const;\n     int GetAbstainCount(vote_signal_enum_t eVoteSignalIn) const;\n \n-    bool GetCurrentMNVotes(const COutPoint& mnCollateralOutpoint, vote_rec_t& voteRecord);\n+    bool GetCurrentMNVotes(const COutPoint& mnCollateralOutpoint, vote_rec_t& voteRecord) const;\n \n     // FUNCTIONS FOR DEALING WITH DATA STRING\n \n-    std::string GetDataAsHex();\n-    std::string GetDataAsString();\n+    std::string GetDataAsHexString() const;\n+    std::string GetDataAsPlainString() const;\n \n     // SERIALIZER\n \n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         // SERIALIZE DATA FOR SAVING/LOADING OR NETWORK FUNCTIONS\n-\n         READWRITE(nHashParent);\n         READWRITE(nRevision);\n         READWRITE(nTime);\n         READWRITE(nCollateralHash);\n-        READWRITE(LIMITED_STRING(strData, MAX_GOVERNANCE_OBJECT_DATA_SIZE));\n+        // using new format directly\n+        READWRITE(vchData);\n+        \n         READWRITE(nObjectType);\n-        READWRITE(vinMasternode);\n-        READWRITE(vchSig);\n-        if(nType & SER_DISK) {\n+        \n+        // using new format directly\n+        READWRITE(masternodeOutpoint);\n+        \n+        if (!(s.GetType() & SER_GETHASH)) {\n+            READWRITE(vchSig);\n+        }\n+        if(s.GetType() & SER_DISK) {\n             // Only include these for the disk file format\n             LogPrint(\"gobject\", \"CGovernanceObject::SerializationOp Reading/writing votes from/to disk\\n\");\n             READWRITE(nDeletionTime);"
      },
      {
        "sha": "a139a8b8646334f8d50a462d819eaf5c5351c304",
        "filename": "src/governance-validators.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 78,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-validators.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-validators.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-validators.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,52 +1,50 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"governance-validators.h\"\n \n #include \"base58.h\"\n+#include \"timedata.h\"\n+#include \"tinyformat.h\"\n #include \"utilstrencodings.h\"\n \n #include <algorithm>\n \n-CProposalValidator::CProposalValidator(const std::string& strDataHexIn)\n-    : strData(),\n-      objJSON(UniValue::VOBJ),\n-      fJSONValid(false),\n-      strErrorMessages()\n-{\n-    if(!strDataHexIn.empty()) {\n-        SetHexData(strDataHexIn);\n-    }\n-}\n+const size_t MAX_DATA_SIZE  = 512;\n+const size_t MAX_NAME_SIZE  = 40;\n \n-void CProposalValidator::Clear()\n+CProposalValidator::CProposalValidator(const std::string& strHexData) :\n+    objJSON(UniValue::VOBJ),\n+    fJSONValid(false),\n+    strErrorMessages()\n {\n-    strData = std::string();\n-    objJSON = UniValue(UniValue::VOBJ);\n-    fJSONValid = false;\n-    strErrorMessages = std::string();\n+    if(!strHexData.empty()) {\n+        ParseStrHexData(strHexData);\n+    }\n }\n \n-void CProposalValidator::SetHexData(const std::string& strDataHexIn)\n+void CProposalValidator::ParseStrHexData(const std::string& strHexData)\n {\n-    std::vector<unsigned char> v = ParseHex(strDataHexIn);\n-    strData = std::string(v.begin(), v.end());\n-    ParseJSONData();\n+    std::vector<unsigned char> v = ParseHex(strHexData);\n+    if (v.size() > MAX_DATA_SIZE) {\n+        strErrorMessages = strprintf(\"data exceeds %lu characters;\", MAX_DATA_SIZE);\n+        return;\n+    }\n+    ParseJSONData(std::string(v.begin(), v.end()));\n }\n \n-bool CProposalValidator::Validate()\n+bool CProposalValidator::Validate(bool fCheckExpiration)\n {\n-    if(!ValidateJSON()) {\n+    if(!fJSONValid) {\n         strErrorMessages += \"JSON parsing error;\";\n         return false;\n     }\n     if(!ValidateName()) {\n         strErrorMessages += \"Invalid name;\";\n         return false;\n     }\n-    if(!ValidateStartEndEpoch()) {\n+    if(!ValidateStartEndEpoch(fCheckExpiration)) {\n         strErrorMessages += \"Invalid start:end range;\";\n         return false;\n     }\n@@ -65,11 +63,6 @@ bool CProposalValidator::Validate()\n     return true;\n }\n \n-bool CProposalValidator::ValidateJSON()\n-{\n-    return fJSONValid;\n-}\n-\n bool CProposalValidator::ValidateName()\n {\n     std::string strName;\n@@ -78,15 +71,8 @@ bool CProposalValidator::ValidateName()\n         return false;\n     }\n \n-    if(strName.size() > 40) {\n-        strErrorMessages += \"name exceeds 40 characters;\";\n-        return false;\n-    }\n-\n-    std::string strNameStripped = StripWhitespace(strName);\n-\n-    if(strNameStripped.empty()) {\n-        strErrorMessages += \"name is empty;\";\n+    if(strName.size() > MAX_NAME_SIZE) {\n+        strErrorMessages += strprintf(\"name exceeds %lu characters;\", MAX_NAME_SIZE);\n         return false;\n     }\n \n@@ -102,7 +88,7 @@ bool CProposalValidator::ValidateName()\n     return true;\n }\n \n-bool CProposalValidator::ValidateStartEndEpoch()\n+bool CProposalValidator::ValidateStartEndEpoch(bool fCheckExpiration)\n {\n     int64_t nStartEpoch = 0;\n     int64_t nEndEpoch = 0;\n@@ -122,6 +108,11 @@ bool CProposalValidator::ValidateStartEndEpoch()\n         return false;\n     }\n \n+    if(fCheckExpiration && nEndEpoch <= GetAdjustedTime()) {\n+        strErrorMessages += \"expired;\";\n+        return false;\n+    }\n+\n     return true;\n }\n \n@@ -155,17 +146,8 @@ bool CProposalValidator::ValidatePaymentAddress()\n         return false;\n     }\n \n-    static const std::string base58chars = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n-\n-    size_t nLength = strPaymentAddress.size();\n-\n-    if((nLength < 26) || (nLength > 35)) {\n-        strErrorMessages += \"incorrect payment_address length;\";\n-        return false;\n-    }\n-\n-    if(strPaymentAddress.find_first_not_of(base58chars) != std::string::npos) {\n-        strErrorMessages += \"payment_address contains invalid characters;\";\n+    if(std::find_if(strPaymentAddress.begin(), strPaymentAddress.end(), ::isspace) != strPaymentAddress.end()) {\n+        strErrorMessages += \"payment_address can't have whitespaces;\";\n         return false;\n     }\n \n@@ -175,6 +157,11 @@ bool CProposalValidator::ValidatePaymentAddress()\n         return false;\n     }\n \n+    if(address.IsScript()) {\n+        strErrorMessages += \"script addresses are not supported;\";\n+        return false;\n+    }\n+\n     return true;\n }\n \n@@ -186,9 +173,12 @@ bool CProposalValidator::ValidateURL()\n         return false;\n     }\n \n-    std::string strURLStripped = StripWhitespace(strURL);\n+    if(std::find_if(strURL.begin(), strURL.end(), ::isspace) != strURL.end()) {\n+        strErrorMessages += \"url can't have whitespaces;\";\n+        return false;\n+    }\n \n-    if(strURLStripped.size() < 4U) {\n+    if(strURL.size() < 4U) {\n         strErrorMessages += \"url too short;\";\n         return false;\n     }\n@@ -201,20 +191,27 @@ bool CProposalValidator::ValidateURL()\n     return true;\n }\n \n-void CProposalValidator::ParseJSONData()\n+void CProposalValidator::ParseJSONData(const std::string& strJSONData)\n {\n     fJSONValid = false;\n \n-    if(strData.empty()) {\n+    if(strJSONData.empty()) {\n         return;\n     }\n \n     try {\n         UniValue obj(UniValue::VOBJ);\n-        obj.read(strData);\n-        std::vector<UniValue> arr1 = obj.getValues();\n-        std::vector<UniValue> arr2 = arr1.at(0).getValues();\n-        objJSON = arr2.at(1);\n+\n+        obj.read(strJSONData);\n+\n+        if (obj.isObject()) {\n+            objJSON = obj;\n+        } else {\n+            std::vector<UniValue> arr1 = obj.getValues();\n+            std::vector<UniValue> arr2 = arr1.at(0).getValues();\n+            objJSON = arr2.at(1);\n+        }\n+\n         fJSONValid = true;\n     }\n     catch(std::exception& e) {\n@@ -225,11 +222,11 @@ void CProposalValidator::ParseJSONData()\n     }\n }\n \n-bool CProposalValidator::GetDataValue(const std::string& strKey, std::string& strValue)\n+bool CProposalValidator::GetDataValue(const std::string& strKey, std::string& strValueRet)\n {\n     bool fOK = false;\n     try  {\n-        strValue = objJSON[strKey].get_str();\n+        strValueRet = objJSON[strKey].get_str();\n         fOK = true;\n     }\n     catch(std::exception& e) {\n@@ -241,14 +238,14 @@ bool CProposalValidator::GetDataValue(const std::string& strKey, std::string& st\n     return fOK;\n }\n \n-bool CProposalValidator::GetDataValue(const std::string& strKey, int64_t& nValue)\n+bool CProposalValidator::GetDataValue(const std::string& strKey, int64_t& nValueRet)\n {\n     bool fOK = false;\n     try  {\n         const UniValue uValue = objJSON[strKey];\n         switch(uValue.getType()) {\n         case UniValue::VNUM:\n-            nValue = uValue.get_int64();\n+            nValueRet = uValue.get_int64();\n             fOK = true;\n             break;\n         default:\n@@ -264,14 +261,14 @@ bool CProposalValidator::GetDataValue(const std::string& strKey, int64_t& nValue\n     return fOK;\n }\n \n-bool CProposalValidator::GetDataValue(const std::string& strKey, double& dValue)\n+bool CProposalValidator::GetDataValue(const std::string& strKey, double& dValueRet)\n {\n     bool fOK = false;\n     try  {\n         const UniValue uValue = objJSON[strKey];\n         switch(uValue.getType()) {\n         case UniValue::VNUM:\n-            dValue = uValue.get_real();\n+            dValueRet = uValue.get_real();\n             fOK = true;\n             break;\n         default:\n@@ -287,20 +284,6 @@ bool CProposalValidator::GetDataValue(const std::string& strKey, double& dValue)\n     return fOK;\n }\n \n-std::string CProposalValidator::StripWhitespace(const std::string& strIn)\n-{\n-    static const std::string strWhitespace = \" \\f\\n\\r\\t\\v\";\n-\n-    std::string::size_type nStart = strIn.find_first_not_of(strWhitespace);\n-    std::string::size_type nEnd = strIn.find_last_not_of(strWhitespace);\n-\n-    if((nStart == std::string::npos) || (nEnd == std::string::npos)) {\n-        return std::string();\n-    }\n-\n-    return strIn.substr(nStart, nEnd - nStart + 1);\n-}\n-\n /*\n   The purpose of this function is to replicate the behavior of the\n   Python urlparse function used by sentinel (urlparse.py).  This function"
      },
      {
        "sha": "c6c025c841effb549b5df183b1d87ec7a4dc235e",
        "filename": "src/governance-validators.h",
        "status": "modified",
        "additions": 20,
        "deletions": 38,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-validators.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-validators.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-validators.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -10,55 +9,38 @@\n \n #include <univalue.h>\n \n-class CProposalValidator  {\n+class CProposalValidator\n+{\n+private:\n+    UniValue               objJSON;\n+    bool                   fJSONValid;\n+    std::string            strErrorMessages;\n+\n public:\n     CProposalValidator(const std::string& strDataHexIn = std::string());\n \n-    void Clear();\n-\n-    void SetHexData(const std::string& strDataHexIn);\n-\n-    bool Validate();\n-\n-    bool ValidateJSON();\n-\n-    bool ValidateName();\n-\n-    bool ValidateStartEndEpoch();\n-\n-    bool ValidatePaymentAmount();\n-\n-    bool ValidatePaymentAddress();\n-\n-    bool ValidateURL();\n+    bool Validate(bool fCheckExpiration = true);\n \n     const std::string& GetErrorMessages()\n     {\n         return strErrorMessages;\n     }\n \n private:\n-    void ParseJSONData();\n-\n-    bool GetDataValue(const std::string& strKey, std::string& strValue);\n-\n-    bool GetDataValue(const std::string& strKey, int64_t& nValue);\n-\n-    bool GetDataValue(const std::string& strKey, double& dValue);\n-\n-    static std::string StripWhitespace(const std::string& strIn);\n-\n-    static bool CheckURL(const std::string& strURLIn);\n-\n-private:\n-    std::string            strData;\n+    void ParseStrHexData(const std::string& strHexData);\n+    void ParseJSONData(const std::string& strJSONData);\n \n-    UniValue               objJSON;\n-\n-    bool                   fJSONValid;\n+    bool GetDataValue(const std::string& strKey, std::string& strValueRet);\n+    bool GetDataValue(const std::string& strKey, int64_t& nValueRet);\n+    bool GetDataValue(const std::string& strKey, double& dValueRet);\n \n-    std::string            strErrorMessages;\n+    bool ValidateName();\n+    bool ValidateStartEndEpoch(bool fCheckExpiration = true);\n+    bool ValidatePaymentAmount();\n+    bool ValidatePaymentAddress();\n+    bool ValidateURL();\n \n+    bool CheckURL(const std::string& strURLIn);\n };\n \n #endif"
      },
      {
        "sha": "d5d2eea3a3faec7d41323a2d005d0fde9dab4647",
        "filename": "src/governance-vote.cpp",
        "status": "modified",
        "additions": 94,
        "deletions": 174,
        "changes": 268,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-vote.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-vote.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-vote.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -30,7 +29,7 @@ std::string CGovernanceVoting::ConvertOutcomeToString(vote_outcome_enum_t nOutco\n \n std::string CGovernanceVoting::ConvertSignalToString(vote_signal_enum_t nSignal)\n {\n-    string strReturn = \"NONE\";\n+    std::string strReturn = \"NONE\";\n     switch(nSignal)\n     {\n         case VOTE_SIGNAL_NONE:\n@@ -48,106 +47,13 @@ std::string CGovernanceVoting::ConvertSignalToString(vote_signal_enum_t nSignal)\n         case VOTE_SIGNAL_ENDORSED:\n             strReturn = \"ENDORSED\";\n             break;\n-        case VOTE_SIGNAL_NOOP1:\n-            strReturn = \"NOOP1\";\n-            break;\n-        case VOTE_SIGNAL_NOOP2:\n-            strReturn = \"NOOP2\";\n-            break;\n-        case VOTE_SIGNAL_NOOP3:\n-            strReturn = \"NOOP3\";\n-            break;\n-        case VOTE_SIGNAL_NOOP4:\n-            strReturn = \"NOOP4\";\n-            break;\n-        case VOTE_SIGNAL_NOOP5:\n-            strReturn = \"NOOP5\";\n-            break;\n-        case VOTE_SIGNAL_NOOP6:\n-            strReturn = \"NOOP6\";\n-            break;\n-        case VOTE_SIGNAL_NOOP7:\n-            strReturn = \"NOOP7\";\n-            break;\n-        case VOTE_SIGNAL_NOOP8:\n-            strReturn = \"NOOP8\";\n-            break;\n-        case VOTE_SIGNAL_NOOP9:\n-            strReturn = \"NOOP9\";\n-            break;\n-        case VOTE_SIGNAL_NOOP10:\n-            strReturn = \"NOOP10\";\n-            break;\n-        case VOTE_SIGNAL_NOOP11:\n-            strReturn = \"NOOP11\";\n-            break;\n-        case VOTE_SIGNAL_CUSTOM1:\n-            strReturn = \"CUSTOM1\";\n-            break;\n-        case VOTE_SIGNAL_CUSTOM2:\n-            strReturn = \"CUSTOM2\";\n-            break;\n-        case VOTE_SIGNAL_CUSTOM3:\n-            strReturn = \"CUSTOM3\";\n-            break;\n-        case VOTE_SIGNAL_CUSTOM4:\n-            strReturn = \"CUSTOM4\";\n-            break;\n-        case VOTE_SIGNAL_CUSTOM5:\n-            strReturn = \"CUSTOM5\";\n-            break;\n-        case VOTE_SIGNAL_CUSTOM6:\n-            strReturn = \"CUSTOM6\";\n-            break;\n-        case VOTE_SIGNAL_CUSTOM7:\n-            strReturn = \"CUSTOM7\";\n-            break;\n-        case VOTE_SIGNAL_CUSTOM8:\n-            strReturn = \"CUSTOM8\";\n-            break;\n-        case VOTE_SIGNAL_CUSTOM9:\n-            strReturn = \"CUSTOM9\";\n-            break;\n-        case VOTE_SIGNAL_CUSTOM10:\n-            strReturn = \"CUSTOM10\";\n-            break;\n-        case VOTE_SIGNAL_CUSTOM11:\n-            strReturn = \"CUSTOM11\";\n-            break;\n-        case VOTE_SIGNAL_CUSTOM12:\n-            strReturn = \"CUSTOM12\";\n-            break;\n-        case VOTE_SIGNAL_CUSTOM13:\n-            strReturn = \"CUSTOM13\";\n-            break;\n-        case VOTE_SIGNAL_CUSTOM14:\n-            strReturn = \"CUSTOM14\";\n-            break;\n-        case VOTE_SIGNAL_CUSTOM15:\n-            strReturn = \"CUSTOM15\";\n-            break;\n-        case VOTE_SIGNAL_CUSTOM16:\n-            strReturn = \"CUSTOM16\";\n-            break;\n-        case VOTE_SIGNAL_CUSTOM17:\n-            strReturn = \"CUSTOM17\";\n-            break;\n-        case VOTE_SIGNAL_CUSTOM18:\n-            strReturn = \"CUSTOM18\";\n-            break;\n-        case VOTE_SIGNAL_CUSTOM19:\n-            strReturn = \"CUSTOM19\";\n-            break;\n-        case VOTE_SIGNAL_CUSTOM20:\n-            strReturn = \"CUSTOM20\";\n-            break;\n     }\n \n     return strReturn;\n }\n \n \n-vote_outcome_enum_t CGovernanceVoting::ConvertVoteOutcome(std::string strVoteOutcome)\n+vote_outcome_enum_t CGovernanceVoting::ConvertVoteOutcome(const std::string& strVoteOutcome)\n {\n     vote_outcome_enum_t eVote = VOTE_OUTCOME_NONE;\n     if(strVoteOutcome == \"yes\") {\n@@ -162,101 +68,124 @@ vote_outcome_enum_t CGovernanceVoting::ConvertVoteOutcome(std::string strVoteOut\n     return eVote;\n }\n \n-vote_signal_enum_t CGovernanceVoting::ConvertVoteSignal(std::string strVoteSignal)\n+vote_signal_enum_t CGovernanceVoting::ConvertVoteSignal(const std::string& strVoteSignal)\n {\n-    vote_signal_enum_t eSignal = VOTE_SIGNAL_NONE;\n-    if(strVoteSignal == \"funding\") {\n-        eSignal = VOTE_SIGNAL_FUNDING;\n-    }\n-    else if(strVoteSignal == \"valid\") {\n-        eSignal = VOTE_SIGNAL_VALID;\n-    }\n-    if(strVoteSignal == \"delete\") {\n-        eSignal = VOTE_SIGNAL_DELETE;\n-    }\n-    if(strVoteSignal == \"endorsed\") {\n-        eSignal = VOTE_SIGNAL_ENDORSED;\n-    }\n-\n-    if(eSignal != VOTE_SIGNAL_NONE)  {\n-        return eSignal;\n-    }\n-\n-    // ID FIVE THROUGH CUSTOM_START ARE TO BE USED BY GOVERNANCE ENGINE / TRIGGER SYSTEM\n-\n-    // convert custom sentinel outcomes to integer and store\n-    try {\n-        int i = boost::lexical_cast<int>(strVoteSignal);\n-        if(i < VOTE_SIGNAL_CUSTOM1 || i > VOTE_SIGNAL_CUSTOM20) {\n-            eSignal = VOTE_SIGNAL_NONE;\n-        }\n-        else  {\n-            eSignal = vote_signal_enum_t(i);\n-        }\n-    }\n-    catch(std::exception const & e)\n-    {\n-        std::ostringstream ostr;\n-        ostr << \"CGovernanceVote::ConvertVoteSignal: error : \" << e.what() << std::endl;\n-        LogPrintf(ostr.str().c_str());\n+    static const std::map <std::string, vote_signal_enum_t> mapStrVoteSignals = {\n+        {\"funding\",  VOTE_SIGNAL_FUNDING},\n+        {\"valid\",    VOTE_SIGNAL_VALID},\n+        {\"delete\",   VOTE_SIGNAL_DELETE},\n+        {\"endorsed\", VOTE_SIGNAL_ENDORSED}\n+    };\n+\n+    const auto& it = mapStrVoteSignals.find(strVoteSignal);\n+    if (it == mapStrVoteSignals.end()) {\n+        LogPrintf(\"CGovernanceVoting::%s -- ERROR: Unknown signal %s\\n\", __func__, strVoteSignal);\n+        return VOTE_SIGNAL_NONE;\n     }\n-\n-    return eSignal;\n+    return it->second;\n }\n \n CGovernanceVote::CGovernanceVote()\n     : fValid(true),\n       fSynced(false),\n       nVoteSignal(int(VOTE_SIGNAL_NONE)),\n-      vinMasternode(),\n+      masternodeOutpoint(),\n       nParentHash(),\n       nVoteOutcome(int(VOTE_OUTCOME_NONE)),\n       nTime(0),\n       vchSig()\n {}\n \n-CGovernanceVote::CGovernanceVote(COutPoint outpointMasternodeIn, uint256 nParentHashIn, vote_signal_enum_t eVoteSignalIn, vote_outcome_enum_t eVoteOutcomeIn)\n+CGovernanceVote::CGovernanceVote(const COutPoint& outpointMasternodeIn, const uint256& nParentHashIn, vote_signal_enum_t eVoteSignalIn, vote_outcome_enum_t eVoteOutcomeIn)\n     : fValid(true),\n       fSynced(false),\n       nVoteSignal(eVoteSignalIn),\n-      vinMasternode(outpointMasternodeIn),\n+      masternodeOutpoint(outpointMasternodeIn),\n       nParentHash(nParentHashIn),\n       nVoteOutcome(eVoteOutcomeIn),\n       nTime(GetAdjustedTime()),\n       vchSig()\n-{}\n+{\n+    UpdateHash();\n+}\n+\n+std::string CGovernanceVote::ToString() const\n+{\n+    std::ostringstream ostr;\n+    ostr << masternodeOutpoint.ToStringShort() << \":\"\n+         << nTime << \":\"\n+         << CGovernanceVoting::ConvertOutcomeToString(GetOutcome()) << \":\"\n+         << CGovernanceVoting::ConvertSignalToString(GetSignal());\n+    return ostr.str();\n+}\n \n void CGovernanceVote::Relay(CConnman& connman) const\n {\n-\t// Do not relay until fully synced\n-\tif (!masternodeSync.IsSynced()) {\n-\t\tLogPrint(\"gobject\", \"CGovernanceVote::Relay -- won't relay until fully synced\\n\");\n-\t\treturn;\n-\t}\n+    // Do not relay until fully synced\n+    if(!masternodeSync.IsSynced()) {\n+        LogPrint(\"gobject\", \"CGovernanceVote::Relay -- won't relay until fully synced\\n\");\n+        return;\n+    }\n+\n     CInv inv(MSG_GOVERNANCE_OBJECT_VOTE, GetHash());\n     connman.RelayInv(inv, MIN_GOVERNANCE_PEER_PROTO_VERSION);\n }\n \n-bool CGovernanceVote::Sign(CKey& keyMasternode, CPubKey& pubKeyMasternode)\n+void CGovernanceVote::UpdateHash() const\n+{\n+    // Note: doesn't match serialization\n+\n+    CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n+    ss << masternodeOutpoint;\n+    ss << nParentHash;\n+    ss << nVoteSignal;\n+    ss << nVoteOutcome;\n+    ss << nTime;\n+    *const_cast<uint256*>(&hash) = ss.GetHash();\n+}\n+\n+uint256 CGovernanceVote::GetHash() const\n {\n-    // Choose coins to use\n-    CPubKey pubKeyCollateralAddress;\n-    CKey keyCollateralAddress;\n+    return hash;\n+}\n \n+uint256 CGovernanceVote::GetSignatureHash() const\n+{\n+    return SerializeHash(*this);\n+}\n+\n+bool CGovernanceVote::Sign(const CKey& keyMasternode, const CPubKey& pubKeyMasternode)\n+{\n     std::string strError;\n-    std::string strMessage = vinMasternode.prevout.ToStringShort() + \"|\" + nParentHash.ToString() + \"|\" +\n-        boost::lexical_cast<std::string>(nVoteSignal) + \"|\" + boost::lexical_cast<std::string>(nVoteOutcome) + \"|\" + boost::lexical_cast<std::string>(nTime);\n \n-    if(!CMessageSigner::SignMessage(strMessage, vchSig, keyMasternode)) {\n-        LogPrintf(\"CGovernanceVote::Sign -- SignMessage() failed\\n\");\n-        return false;\n-    }\n+    if (sporkManager.IsSporkActive(SPORK_6_NEW_SIGS)) {\n+        uint256 hash = GetSignatureHash();\n \n-    if(!CMessageSigner::VerifyMessage(pubKeyMasternode, vchSig, strMessage, strError)) {\n-        LogPrintf(\"CGovernanceVote::Sign -- VerifyMessage() failed, error: %s\\n\", strError);\n-        return false;\n-    }\n+        if(!CHashSigner::SignHash(hash, keyMasternode, vchSig)) {\n+            LogPrintf(\"CGovernanceVote::Sign -- SignHash() failed\\n\");\n+            return false;\n+        }\n+\n+        if (!CHashSigner::VerifyHash(hash, pubKeyMasternode, vchSig, strError)) {\n+            LogPrintf(\"CGovernanceVote::Sign -- VerifyHash() failed, error: %s\\n\", strError);\n+            return false;\n+        }\n+    } \n+\n+    return true;\n+}\n \n+bool CGovernanceVote::CheckSignature(const CPubKey& pubKeyMasternode) const\n+{\n+    std::string strError;\n+\n+    if (sporkManager.IsSporkActive(SPORK_6_NEW_SIGS)) {\n+        uint256 hash = GetSignatureHash();\n+        if (!CHashSigner::VerifyHash(hash, pubKeyMasternode, vchSig, strError)) {\n+            LogPrint(\"gobject\", \"CGovernanceVote::IsValid -- VerifyMessage() failed, error: %s\\n\", strError);\n+            return false;  \n+        }\n+    } \n     return true;\n }\n \n@@ -267,7 +196,7 @@ bool CGovernanceVote::IsValid(bool fSignatureCheck) const\n         return false;\n     }\n \n-    // support up to 50 actions (implemented in sentinel)\n+    // support up to MAX_SUPPORTED_VOTE_SIGNAL, can be extended\n     if(nVoteSignal > MAX_SUPPORTED_VOTE_SIGNAL)\n     {\n         LogPrint(\"gobject\", \"CGovernanceVote::IsValid -- Client attempted to vote on invalid signal(%d) - %s\\n\", nVoteSignal, GetHash().ToString());\n@@ -282,28 +211,19 @@ bool CGovernanceVote::IsValid(bool fSignatureCheck) const\n     }\n \n     masternode_info_t infoMn;\n-    if(!mnodeman.GetMasternodeInfo(vinMasternode.prevout, infoMn)) {\n-        LogPrint(\"gobject\", \"CGovernanceVote::IsValid -- Unknown Masternode - %s\\n\", vinMasternode.prevout.ToStringShort());\n+    if(!mnodeman.GetMasternodeInfo(masternodeOutpoint, infoMn)) {\n+        LogPrint(\"gobject\", \"CGovernanceVote::IsValid -- Unknown Masternode - %s\\n\", masternodeOutpoint.ToStringShort());\n         return false;\n     }\n \n     if(!fSignatureCheck) return true;\n \n-    std::string strError;\n-    std::string strMessage = vinMasternode.prevout.ToStringShort() + \"|\" + nParentHash.ToString() + \"|\" +\n-        boost::lexical_cast<std::string>(nVoteSignal) + \"|\" + boost::lexical_cast<std::string>(nVoteOutcome) + \"|\" + boost::lexical_cast<std::string>(nTime);\n-\n-    if(!CMessageSigner::VerifyMessage(infoMn.pubKeyMasternode, vchSig, strMessage, strError)) {\n-        LogPrintf(\"CGovernanceVote::IsValid -- VerifyMessage() failed, error: %s\\n\", strError);\n-        return false;\n-    }\n-\n-    return true;\n+    return CheckSignature(infoMn.pubKeyMasternode);\n }\n \n bool operator==(const CGovernanceVote& vote1, const CGovernanceVote& vote2)\n {\n-    bool fResult = ((vote1.vinMasternode == vote2.vinMasternode) &&\n+    bool fResult = ((vote1.masternodeOutpoint == vote2.masternodeOutpoint) &&\n                     (vote1.nParentHash == vote2.nParentHash) &&\n                     (vote1.nVoteOutcome == vote2.nVoteOutcome) &&\n                     (vote1.nVoteSignal == vote2.nVoteSignal) &&\n@@ -313,11 +233,11 @@ bool operator==(const CGovernanceVote& vote1, const CGovernanceVote& vote2)\n \n bool operator<(const CGovernanceVote& vote1, const CGovernanceVote& vote2)\n {\n-    bool fResult = (vote1.vinMasternode < vote2.vinMasternode);\n+    bool fResult = (vote1.masternodeOutpoint < vote2.masternodeOutpoint);\n     if(!fResult) {\n         return false;\n     }\n-    fResult = (vote1.vinMasternode == vote2.vinMasternode);\n+    fResult = (vote1.masternodeOutpoint == vote2.masternodeOutpoint);\n \n     fResult = fResult && (vote1.nParentHash < vote2.nParentHash);\n     if(!fResult) {"
      },
      {
        "sha": "2ca614ee6834d262bc1bb7682eaee424c0683ab2",
        "filename": "src/governance-vote.h",
        "status": "modified",
        "additions": 26,
        "deletions": 111,
        "changes": 137,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-vote.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-vote.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-vote.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n \n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -11,8 +10,6 @@\n \n #include <boost/lexical_cast.hpp>\n \n-using namespace std;\n-\n class CGovernanceVote;\n class CConnman;\n \n@@ -32,37 +29,6 @@ enum vote_signal_enum_t  {\n     VOTE_SIGNAL_VALID      = 2, //   -- this object checks out in sentinel engine\n     VOTE_SIGNAL_DELETE     = 3, //   -- this object should be deleted from memory entirely\n     VOTE_SIGNAL_ENDORSED   = 4, //   -- officially endorsed by the network somehow (delegation)\n-    VOTE_SIGNAL_NOOP1      = 5, // FOR FURTHER EXPANSION\n-    VOTE_SIGNAL_NOOP2      = 6,\n-    VOTE_SIGNAL_NOOP3      = 7,\n-    VOTE_SIGNAL_NOOP4      = 8,\n-    VOTE_SIGNAL_NOOP5      = 9,\n-    VOTE_SIGNAL_NOOP6      = 10,\n-    VOTE_SIGNAL_NOOP7      = 11,\n-    VOTE_SIGNAL_NOOP8      = 12,\n-    VOTE_SIGNAL_NOOP9      = 13,\n-    VOTE_SIGNAL_NOOP10     = 14,\n-    VOTE_SIGNAL_NOOP11     = 15,\n-    VOTE_SIGNAL_CUSTOM1    = 16,  // SENTINEL CUSTOM ACTIONS\n-    VOTE_SIGNAL_CUSTOM2    = 17,  //        16-35\n-    VOTE_SIGNAL_CUSTOM3    = 18,\n-    VOTE_SIGNAL_CUSTOM4    = 19,\n-    VOTE_SIGNAL_CUSTOM5    = 20,\n-    VOTE_SIGNAL_CUSTOM6    = 21,\n-    VOTE_SIGNAL_CUSTOM7    = 22,\n-    VOTE_SIGNAL_CUSTOM8    = 23,\n-    VOTE_SIGNAL_CUSTOM9    = 24,\n-    VOTE_SIGNAL_CUSTOM10   = 25,\n-    VOTE_SIGNAL_CUSTOM11   = 26,\n-    VOTE_SIGNAL_CUSTOM12   = 27,\n-    VOTE_SIGNAL_CUSTOM13   = 28,\n-    VOTE_SIGNAL_CUSTOM14   = 29,\n-    VOTE_SIGNAL_CUSTOM15   = 30,\n-    VOTE_SIGNAL_CUSTOM16   = 31,\n-    VOTE_SIGNAL_CUSTOM17   = 32,\n-    VOTE_SIGNAL_CUSTOM18   = 33,\n-    VOTE_SIGNAL_CUSTOM19   = 34,\n-    VOTE_SIGNAL_CUSTOM20   = 35\n };\n \n static const int MAX_SUPPORTED_VOTE_SIGNAL = VOTE_SIGNAL_ENDORSED;\n@@ -76,8 +42,8 @@ static const int MAX_SUPPORTED_VOTE_SIGNAL = VOTE_SIGNAL_ENDORSED;\n class CGovernanceVoting\n {\n public:\n-    static vote_outcome_enum_t ConvertVoteOutcome(std::string strVoteOutcome);\n-    static vote_signal_enum_t ConvertVoteSignal(std::string strVoteSignal);\n+    static vote_outcome_enum_t ConvertVoteOutcome(const std::string& strVoteOutcome);\n+    static vote_signal_enum_t ConvertVoteSignal(const std::string& strVoteSignal);\n     static std::string ConvertOutcomeToString(vote_outcome_enum_t nOutcome);\n     static std::string ConvertSignalToString(vote_signal_enum_t nSignal);\n };\n@@ -96,15 +62,19 @@ class CGovernanceVote\n     bool fValid; //if the vote is currently valid / counted\n     bool fSynced; //if we've sent this to our peers\n     int nVoteSignal; // see VOTE_ACTIONS above\n-    CTxIn vinMasternode;\n+    COutPoint masternodeOutpoint;\n     uint256 nParentHash;\n     int nVoteOutcome; // see VOTE_OUTCOMES above\n     int64_t nTime;\n     std::vector<unsigned char> vchSig;\n \n+    /** Memory only. */\n+    const uint256 hash;\n+    void UpdateHash() const;\n+\n public:\n     CGovernanceVote();\n-    CGovernanceVote(COutPoint outpointMasternodeIn, uint256 nParentHashIn, vote_signal_enum_t eVoteSignalIn, vote_outcome_enum_t eVoteOutcomeIn);\n+    CGovernanceVote(const COutPoint& outpointMasternodeIn, const uint256& nParentHashIn, vote_signal_enum_t eVoteSignalIn, vote_outcome_enum_t eVoteOutcomeIn);\n \n     bool IsValid() const { return fValid; }\n \n@@ -118,106 +88,51 @@ class CGovernanceVote\n \n     const uint256& GetParentHash() const { return nParentHash; }\n \n-    void SetTime(int64_t nTimeIn) { nTime = nTimeIn; }\n+    void SetTime(int64_t nTimeIn) { nTime = nTimeIn; UpdateHash(); }\n \n     void SetSignature(const std::vector<unsigned char>& vchSigIn) { vchSig = vchSigIn; }\n \n-    bool Sign(CKey& keyMasternode, CPubKey& pubKeyMasternode);\n+    bool Sign(const CKey& keyMasternode, const CPubKey& pubKeyMasternode);\n+    bool CheckSignature(const CPubKey& pubKeyMasternode) const;\n     bool IsValid(bool fSignatureCheck) const;\n     void Relay(CConnman& connman) const;\n \n     std::string GetVoteString() const {\n         return CGovernanceVoting::ConvertOutcomeToString(GetOutcome());\n     }\n \n-    const COutPoint& GetMasternodeOutpoint() const { return vinMasternode.prevout; }\n+    const COutPoint& GetMasternodeOutpoint() const { return masternodeOutpoint; }\n \n     /**\n     *   GetHash()\n     *\n     *   GET UNIQUE HASH WITH DETERMINISTIC VALUE OF THIS SPECIFIC VOTE\n     */\n \n-    uint256 GetHash() const\n-    {\n-        CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n-        ss << vinMasternode;\n-        ss << nParentHash;\n-        ss << nVoteSignal;\n-        ss << nVoteOutcome;\n-        ss << nTime;\n-        return ss.GetHash();\n-    }\n+    uint256 GetHash() const;\n+    uint256 GetSignatureHash() const;\n \n-    std::string ToString() const\n-    {\n-        std::ostringstream ostr;\n-        ostr << vinMasternode.ToString() << \":\"\n-             << nTime << \":\"\n-             << CGovernanceVoting::ConvertOutcomeToString(GetOutcome()) << \":\"\n-             << CGovernanceVoting::ConvertSignalToString(GetSignal());\n-        return ostr.str();\n-    }\n-\n-    /**\n-    *   GetTypeHash()\n-    *\n-    *   GET HASH WITH DETERMINISTIC VALUE OF MASTERNODE-VIN/PARENT-HASH/VOTE-SIGNAL\n-    *\n-    *   This hash collides with previous masternode votes when they update their votes on governance objects.\n-    *   With 12.1 there's various types of votes (funding, valid, delete, etc), so this is the deterministic hash\n-    *   that will collide with the previous vote and allow the system to update.\n-    *\n-    *   --\n-    *\n-    *   We do not include an outcome, because that can change when a masternode updates their vote from yes to no\n-    *   on funding a specific project for example.\n-    *   We do not include a time because it will be updated each time the vote is updated, changing the hash\n-    */\n-    uint256 GetTypeHash() const\n-    {\n-        // CALCULATE HOW TO STORE VOTE IN governance.mapVotes\n-\n-        CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n-        ss << vinMasternode;\n-        ss << nParentHash;\n-        ss << nVoteSignal;\n-        //  -- no outcome\n-        //  -- timeless\n-        return ss.GetHash();\n-    }\n+    std::string ToString() const;\n \n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(vinMasternode);\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+       \n+        // using new format directly\n+        READWRITE(masternodeOutpoint);\n+        \n         READWRITE(nParentHash);\n         READWRITE(nVoteOutcome);\n         READWRITE(nVoteSignal);\n         READWRITE(nTime);\n-        READWRITE(vchSig);\n+        if (!(s.GetType() & SER_GETHASH)) {\n+            READWRITE(vchSig);\n+        }\n+        if (ser_action.ForRead())\n+            UpdateHash();\n     }\n \n };\n \n-\n-\n-/**\n-* 12.1.1 - CGovernanceVoteManager\n-* -------------------------------\n-*\n-\n-    GetVote(name, yes_no):\n-        - caching function\n-        - mark last accessed votes\n-        - load serialized files from filesystem if needed\n-        - calc answer\n-        - return result\n-\n-    CacheUnused():\n-        - Cache votes if lastused > 12h/24/48/etc\n-\n-*/\n-\n #endif"
      },
      {
        "sha": "e72a369d1954611df4933385d41007b4ceabc7ce",
        "filename": "src/governance-votedb.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 18,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-votedb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-votedb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-votedb.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -21,27 +20,27 @@ CGovernanceObjectVoteFile::CGovernanceObjectVoteFile(const CGovernanceObjectVote\n \n void CGovernanceObjectVoteFile::AddVote(const CGovernanceVote& vote)\n {\n+    uint256 nHash = vote.GetHash();\n+    // make sure to never add/update already known votes\n+    if (HasVote(nHash))\n+        return;\n     listVotes.push_front(vote);\n-    mapVoteIndex[vote.GetHash()] = listVotes.begin();\n+    mapVoteIndex.emplace(nHash, listVotes.begin());\n     ++nMemoryVotes;\n }\n \n bool CGovernanceObjectVoteFile::HasVote(const uint256& nHash) const\n {\n-    vote_m_cit it = mapVoteIndex.find(nHash);\n-    if(it == mapVoteIndex.end()) {\n-        return false;\n-    }\n-    return true;\n+    return mapVoteIndex.find(nHash) != mapVoteIndex.end();\n }\n \n-bool CGovernanceObjectVoteFile::GetVote(const uint256& nHash, CGovernanceVote& vote) const\n+bool CGovernanceObjectVoteFile::SerializeVoteToStream(const uint256& nHash, CDataStream& ss) const\n {\n     vote_m_cit it = mapVoteIndex.find(nHash);\n     if(it == mapVoteIndex.end()) {\n         return false;\n     }\n-    vote = *(it->second);\n+    ss << *(it->second);\n     return true;\n }\n \n@@ -69,14 +68,6 @@ void CGovernanceObjectVoteFile::RemoveVotesFromMasternode(const COutPoint& outpo\n     }\n }\n \n-CGovernanceObjectVoteFile& CGovernanceObjectVoteFile::operator=(const CGovernanceObjectVoteFile& other)\n-{\n-    nMemoryVotes = other.nMemoryVotes;\n-    listVotes = other.listVotes;\n-    RebuildIndex();\n-    return *this;\n-}\n-\n void CGovernanceObjectVoteFile::RebuildIndex()\n {\n     mapVoteIndex.clear();"
      },
      {
        "sha": "36d8cb4f7a0a98634dab25470845ce7f1d313a96",
        "filename": "src/governance-votedb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-votedb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/governance-votedb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-votedb.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -11,6 +10,7 @@\n \n #include \"governance-vote.h\"\n #include \"serialize.h\"\n+#include \"streams.h\"\n #include \"uint256.h\"\n \n /**\n@@ -63,22 +63,20 @@ class CGovernanceObjectVoteFile\n     /**\n      * Retrieve a vote cached in memory\n      */\n-    bool GetVote(const uint256& nHash, CGovernanceVote& vote) const;\n+    bool SerializeVoteToStream(const uint256& nHash, CDataStream& ss) const;\n \n     int GetVoteCount() {\n         return nMemoryVotes;\n     }\n \n     std::vector<CGovernanceVote> GetVotes() const;\n \n-    CGovernanceObjectVoteFile& operator=(const CGovernanceObjectVoteFile& other);\n-\n     void RemoveVotesFromMasternode(const COutPoint& outpointMasternode);\n \n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         READWRITE(nMemoryVotes);\n         READWRITE(listVotes);"
      },
      {
        "sha": "390c4f544910adc7b17b0dd32e7de3a8806db946",
        "filename": "src/governance.cpp",
        "status": "modified",
        "additions": 284,
        "deletions": 339,
        "changes": 623,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/governance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/governance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,13 +1,15 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/validation.h\"\n #include \"governance.h\"\n #include \"governance-object.h\"\n+#include \"governance-validators.h\"\n #include \"governance-vote.h\"\n #include \"governance-classes.h\"\n #include \"net_processing.h\"\n+#include \"netmessagemaker.h\"\n #include \"masternode.h\"\n #include \"masternode-sync.h\"\n #include \"masternodeman.h\"\n@@ -29,28 +31,26 @@ CGovernanceManager::CGovernanceManager()\n       mapObjects(),\n       mapErasedGovernanceObjects(),\n       mapMasternodeOrphanObjects(),\n-      mapWatchdogObjects(),\n-      nHashWatchdogCurrent(),\n-      nTimeWatchdogCurrent(0),\n-      mapVoteToObject(MAX_CACHE_SIZE),\n-      mapInvalidVotes(MAX_CACHE_SIZE),\n-      mapOrphanVotes(MAX_CACHE_SIZE),\n+      cmapVoteToObject(MAX_CACHE_SIZE),\n+      cmapInvalidVotes(MAX_CACHE_SIZE),\n+      cmmapOrphanVotes(MAX_CACHE_SIZE),\n       mapLastMasternodeObject(),\n       setRequestedObjects(),\n       fRateChecksEnabled(true),\n       cs()\n {}\n \n // Accessors for thread-safe access to maps\n-bool CGovernanceManager::HaveObjectForHash(uint256 nHash) {\n+bool CGovernanceManager::HaveObjectForHash(const uint256& nHash) const\n+{\n     LOCK(cs);\n     return (mapObjects.count(nHash) == 1 || mapPostponedObjects.count(nHash) == 1);\n }\n \n-bool CGovernanceManager::SerializeObjectForHash(uint256 nHash, CDataStream& ss)\n+bool CGovernanceManager::SerializeObjectForHash(const uint256& nHash, CDataStream& ss) const\n {\n     LOCK(cs);\n-    object_m_it it = mapObjects.find(nHash);\n+    object_m_cit it = mapObjects.find(nHash);\n     if (it == mapObjects.end()) {\n         it = mapPostponedObjects.find(nHash);\n         if (it == mapPostponedObjects.end())\n@@ -60,57 +60,45 @@ bool CGovernanceManager::SerializeObjectForHash(uint256 nHash, CDataStream& ss)\n     return true;\n }\n \n-bool CGovernanceManager::HaveVoteForHash(uint256 nHash)\n+bool CGovernanceManager::HaveVoteForHash(const uint256& nHash) const\n {\n     LOCK(cs);\n \n     CGovernanceObject* pGovobj = NULL;\n-    if(!mapVoteToObject.Get(nHash,pGovobj)) {\n-        return false;\n-    }\n-\n-    if(!pGovobj->GetVoteFile().HasVote(nHash)) {\n-        return false;\n-    }\n-    return true;\n+    return cmapVoteToObject.Get(nHash, pGovobj) && pGovobj->GetVoteFile().HasVote(nHash);\n }\n \n int CGovernanceManager::GetVoteCount() const\n {\n     LOCK(cs);\n-    return (int)mapVoteToObject.GetSize();\n+    return (int)cmapVoteToObject.GetSize();\n }\n \n-bool CGovernanceManager::SerializeVoteForHash(uint256 nHash, CDataStream& ss)\n+bool CGovernanceManager::SerializeVoteForHash(const uint256& nHash, CDataStream& ss) const\n {\n     LOCK(cs);\n \n     CGovernanceObject* pGovobj = NULL;\n-    if(!mapVoteToObject.Get(nHash,pGovobj)) {\n-        return false;\n-    }\n-\n-    CGovernanceVote vote;\n-    if(!pGovobj->GetVoteFile().GetVote(nHash, vote)) {\n-        return false;\n-    }\n-\n-    ss << vote;\n-    return true;\n+    return cmapVoteToObject.Get(nHash,pGovobj) && pGovobj->GetVoteFile().SerializeVoteToStream(nHash, ss);\n }\n \n-void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataStream& vRecv, CConnman& connman)\n+void CGovernanceManager::ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, CConnman& connman)\n {\n     // lite mode is not supported\n     if(fLiteMode) return;\n     if(!masternodeSync.IsBlockchainSynced()) return;\n \n-    if(pfrom->nVersion < MIN_GOVERNANCE_PEER_PROTO_VERSION) return;\n-\n     // ANOTHER USER IS ASKING US TO HELP THEM SYNC GOVERNANCE OBJECT DATA\n     if (strCommand == NetMsgType::MNGOVERNANCESYNC)\n     {\n \n+        if(pfrom->nVersion < MIN_GOVERNANCE_PEER_PROTO_VERSION) {\n+            LogPrint(\"gobject\", \"MNGOVERNANCESYNC -- peer=%d using obsolete version %i\\n\", pfrom->id, pfrom->nVersion);\n+            connman.PushMessage(pfrom, CNetMsgMaker(pfrom->GetSendVersion()).Make(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n+                               strprintf(\"Version must be %d or greater\", MIN_GOVERNANCE_PEER_PROTO_VERSION)));\n+            return;\n+        }\n+\n         // Ignore such requests until we are fully synced.\n         // We could start processing this after masternode list is synced\n         // but this is a heavy one so it's better to finish sync first.\n@@ -130,18 +118,11 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         }\n \n         if(nProp == uint256()) {\n-            if(netfulfilledman.HasFulfilledRequest(pfrom->addr, NetMsgType::MNGOVERNANCESYNC)) {\n-                // Asking for the whole list multiple times in a short period of time is no good\n-                LogPrint(\"gobject\", \"MNGOVERNANCESYNC -- peer already asked me for the list\\n\");\n-                Misbehaving(pfrom->GetId(), 20);\n-                return;\n-            }\n-            netfulfilledman.AddFulfilledRequest(pfrom->addr, NetMsgType::MNGOVERNANCESYNC);\n+            SyncAll(pfrom, connman);\n+        } else {\n+            SyncSingleObjAndItsVotes(pfrom, nProp, filter, connman);\n         }\n-\n-        Sync(pfrom, nProp, filter, connman);\n         LogPrint(\"gobject\", \"MNGOVERNANCESYNC -- syncing governance objects to our peer at %s\\n\", pfrom->addr.ToString());\n-\n     }\n \n     // A NEW GOVERNANCE OBJECT HAS ARRIVED\n@@ -153,14 +134,22 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         vRecv >> govobj;\n \n         uint256 nHash = govobj.GetHash();\n-        std::string strHash = nHash.ToString();\n \n         pfrom->setAskFor.erase(nHash);\n \n-\t\tif (!masternodeSync.IsMasternodeListSynced()) {\n-\t\t\tLogPrint(\"gobject\", \"MNGOVERNANCEOBJECT -- masternode list not synced\\n\");\n-\t\t\treturn;\n-\t\t}\n+        if(pfrom->nVersion < MIN_GOVERNANCE_PEER_PROTO_VERSION) {\n+            LogPrint(\"gobject\", \"MNGOVERNANCEOBJECT -- peer=%d using obsolete version %i\\n\", pfrom->id, pfrom->nVersion);\n+            connman.PushMessage(pfrom, CNetMsgMaker(pfrom->GetSendVersion()).Make(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n+                               strprintf(\"Version must be %d or greater\", MIN_GOVERNANCE_PEER_PROTO_VERSION)));\n+            return;\n+        }\n+\n+        if(!masternodeSync.IsMasternodeListSynced()) {\n+            LogPrint(\"gobject\", \"MNGOVERNANCEOBJECT -- masternode list not synced\\n\");\n+            return;\n+        }\n+\n+        std::string strHash = nHash.ToString();\n \n         LogPrint(\"gobject\", \"MNGOVERNANCEOBJECT -- Received object: %s\\n\", strHash);\n \n@@ -201,9 +190,9 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         if(!fIsValid) {\n             if(fMasternodeMissing) {\n \n-                int& count = mapMasternodeOrphanCounter[govobj.GetMasternodeVin().prevout];\n+                int& count = mapMasternodeOrphanCounter[govobj.GetMasternodeOutpoint()];\n                 if (count >= 10) {\n-                    LogPrint(\"gobject\", \"MNGOVERNANCEOBJECT -- Too many orphan objects, missing masternode=%s\\n\", govobj.GetMasternodeVin().prevout.ToStringShort());\n+                    LogPrint(\"gobject\", \"MNGOVERNANCEOBJECT -- Too many orphan objects, missing masternode=%s\\n\", govobj.GetMasternodeOutpoint().ToStringShort());\n                     // ask for this object again in 2 minutes\n                     CInv inv(MSG_GOVERNANCE_OBJECT, govobj.GetHash());\n                     pfrom->AskFor(inv);\n@@ -232,21 +221,28 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n     // A NEW GOVERNANCE OBJECT VOTE HAS ARRIVED\n     else if (strCommand == NetMsgType::MNGOVERNANCEOBJECTVOTE)\n     {\n-\n         CGovernanceVote vote;\n         vRecv >> vote;\n \n-        LogPrint(\"gobject\", \"MNGOVERNANCEOBJECTVOTE -- Received vote: %s\\n\", vote.ToString());\n-\n         uint256 nHash = vote.GetHash();\n-        std::string strHash = nHash.ToString();\n \n         pfrom->setAskFor.erase(nHash);\n \n-\t\tif (!masternodeSync.IsMasternodeListSynced()) {\n-\t\t\tLogPrint(\"gobject\", \"MNGOVERNANCEOBJECTVOTE -- masternode list not synced\\n\");\n-\t\t\treturn;\n-\t\t}\n+        if(pfrom->nVersion < MIN_GOVERNANCE_PEER_PROTO_VERSION) {\n+            LogPrint(\"gobject\", \"MNGOVERNANCEOBJECTVOTE -- peer=%d using obsolete version %i\\n\", pfrom->id, pfrom->nVersion);\n+            connman.PushMessage(pfrom, CNetMsgMaker(pfrom->GetSendVersion()).Make(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n+                               strprintf(\"Version must be %d or greater\", MIN_GOVERNANCE_PEER_PROTO_VERSION)));\n+        }\n+\n+        // Ignore such messages until masternode list is synced\n+        if(!masternodeSync.IsMasternodeListSynced()) {\n+            LogPrint(\"gobject\", \"MNGOVERNANCEOBJECTVOTE -- masternode list not synced\\n\");\n+            return;\n+        }\n+\n+        LogPrint(\"gobject\", \"MNGOVERNANCEOBJECTVOTE -- Received vote: %s\\n\", vote.ToString());\n+\n+        std::string strHash = nHash.ToString();\n \n         if(!AcceptVoteMessage(nHash)) {\n             LogPrint(\"gobject\", \"MNGOVERNANCEOBJECTVOTE -- Received unrequested vote object: %s, hash: %s, peer = %d\\n\",\n@@ -263,6 +259,7 @@ void CGovernanceManager::ProcessMessage(CNode* pfrom, std::string& strCommand, C\n         else {\n             LogPrint(\"gobject\", \"MNGOVERNANCEOBJECTVOTE -- Rejected vote, error = %s\\n\", exception.what());\n             if((exception.GetNodePenalty() != 0) && masternodeSync.IsSynced()) {\n+                LOCK(cs_main);\n                 Misbehaving(pfrom->GetId(), exception.GetNodePenalty());\n             }\n             return;\n@@ -275,7 +272,7 @@ void CGovernanceManager::CheckOrphanVotes(CGovernanceObject& govobj, CGovernance\n {\n     uint256 nHash = govobj.GetHash();\n     std::vector<vote_time_pair_t> vecVotePairs;\n-    mapOrphanVotes.GetAll(nHash, vecVotePairs);\n+    cmmapOrphanVotes.GetAll(nHash, vecVotePairs);\n \n     ScopedLockBool guard(cs, fRateChecksEnabled, false);\n \n@@ -293,14 +290,14 @@ void CGovernanceManager::CheckOrphanVotes(CGovernanceObject& govobj, CGovernance\n             fRemove = true;\n         }\n         if(fRemove) {\n-            mapOrphanVotes.Erase(nHash, pairVote);\n+            cmmapOrphanVotes.Erase(nHash, pairVote);\n         }\n     }\n }\n \n void CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj, CConnman& connman, CNode* pfrom)\n {\n-    DBG( cout << \"CGovernanceManager::AddGovernanceObject START\" << endl; );\n+    DBG( std::cout << \"CGovernanceManager::AddGovernanceObject START\" << std::endl; );\n \n     uint256 nHash = govobj.GetHash();\n     std::string strHash = nHash.ToString();\n@@ -328,51 +325,23 @@ void CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj, CConnman\n \n     LogPrint(\"gobject\", \"CGovernanceManager::AddGovernanceObject -- Adding object: hash = %s, type = %d\\n\", nHash.ToString(), govobj.GetObjectType());\n \n-    if(govobj.nObjectType == GOVERNANCE_OBJECT_WATCHDOG) {\n-        // If it's a watchdog, make sure it fits required time bounds\n-        if((govobj.GetCreationTime() < GetAdjustedTime() - GOVERNANCE_WATCHDOG_EXPIRATION_TIME ||\n-            govobj.GetCreationTime() > GetAdjustedTime() + GOVERNANCE_WATCHDOG_EXPIRATION_TIME)\n-            ) {\n-            // drop it\n-            LogPrint(\"gobject\", \"CGovernanceManager::AddGovernanceObject -- CreationTime is out of bounds: hash = %s\\n\", nHash.ToString());\n-            return;\n-        }\n-\n-        if(!UpdateCurrentWatchdog(govobj)) {\n-            // Allow wd's which are not current to be reprocessed\n-            if(pfrom && (nHashWatchdogCurrent != uint256())) {\n-                pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT, nHashWatchdogCurrent));\n-            }\n-            LogPrint(\"gobject\", \"CGovernanceManager::AddGovernanceObject -- Watchdog not better than current: hash = %s\\n\", nHash.ToString());\n-            return;\n-        }\n-    }\n-\n     // INSERT INTO OUR GOVERNANCE OBJECT MEMORY\n     mapObjects.insert(std::make_pair(nHash, govobj));\n \n     // SHOULD WE ADD THIS OBJECT TO ANY OTHER MANANGERS?\n \n-    DBG( cout << \"CGovernanceManager::AddGovernanceObject Before trigger block, strData = \"\n-              << govobj.GetDataAsString()\n+    DBG( std::cout << \"CGovernanceManager::AddGovernanceObject Before trigger block, GetDataAsPlainString = \"\n+              << govobj.GetDataAsPlainString()\n               << \", nObjectType = \" << govobj.nObjectType\n-              << endl; );\n+              << std::endl; );\n \n-    switch(govobj.nObjectType) {\n-    case GOVERNANCE_OBJECT_TRIGGER:\n-        DBG( cout << \"CGovernanceManager::AddGovernanceObject Before AddNewTrigger\" << endl; );\n+    if (govobj.nObjectType == GOVERNANCE_OBJECT_TRIGGER) {\n+        DBG( std::cout << \"CGovernanceManager::AddGovernanceObject Before AddNewTrigger\" << std::endl; );\n         triggerman.AddNewTrigger(nHash);\n-        DBG( cout << \"CGovernanceManager::AddGovernanceObject After AddNewTrigger\" << endl; );\n-        break;\n-    case GOVERNANCE_OBJECT_WATCHDOG:\n-        mapWatchdogObjects[nHash] = govobj.GetCreationTime() + GOVERNANCE_WATCHDOG_EXPIRATION_TIME;\n-        LogPrint(\"gobject\", \"CGovernanceManager::AddGovernanceObject -- Added watchdog to map: hash = %s\\n\", nHash.ToString());\n-        break;\n-    default:\n-        break;\n+        DBG( std::cout << \"CGovernanceManager::AddGovernanceObject After AddNewTrigger\" << std::endl; );\n     }\n \n-    LogPrintf(\"AddGovernanceObject -- %s new, received form %s\\n\", strHash, pfrom? pfrom->addrName : \"NULL\");\n+    LogPrintf(\"CGovernanceManager::AddGovernanceObject -- %s new, received from %s\\n\", strHash, pfrom? pfrom->GetAddrName() : \"NULL\");\n     govobj.Relay(connman);\n \n     // Update the rate buffer\n@@ -385,41 +354,7 @@ void CGovernanceManager::AddGovernanceObject(CGovernanceObject& govobj, CConnman\n     CGovernanceException exception;\n     CheckOrphanVotes(govobj, exception, connman);\n \n-    DBG( cout << \"CGovernanceManager::AddGovernanceObject END\" << endl; );\n-}\n-\n-bool CGovernanceManager::UpdateCurrentWatchdog(CGovernanceObject& watchdogNew)\n-{\n-    bool fAccept = false;\n-\n-    arith_uint256 nHashNew = UintToArith256(watchdogNew.GetHash());\n-    arith_uint256 nHashCurrent = UintToArith256(nHashWatchdogCurrent);\n-\n-    int64_t nExpirationDelay = GOVERNANCE_WATCHDOG_EXPIRATION_TIME / 2;\n-    int64_t nNow = GetAdjustedTime();\n-\n-    if(nHashWatchdogCurrent == uint256() ||                                             // no known current OR\n-       ((nNow - watchdogNew.GetCreationTime() < nExpirationDelay) &&                    // (new one is NOT expired AND\n-        ((nNow - nTimeWatchdogCurrent > nExpirationDelay) || (nHashNew > nHashCurrent)))//  (current is expired OR\n-                                                                                        //   its hash is lower))\n-    ) {\n-        LOCK(cs);\n-        object_m_it it = mapObjects.find(nHashWatchdogCurrent);\n-        if(it != mapObjects.end()) {\n-            LogPrint(\"gobject\", \"CGovernanceManager::UpdateCurrentWatchdog -- Expiring previous current watchdog, hash = %s\\n\", nHashWatchdogCurrent.ToString());\n-            it->second.fExpired = true;\n-            if(it->second.nDeletionTime == 0) {\n-                it->second.nDeletionTime = nNow;\n-            }\n-        }\n-        nHashWatchdogCurrent = watchdogNew.GetHash();\n-        nTimeWatchdogCurrent = watchdogNew.GetCreationTime();\n-        fAccept = true;\n-        LogPrint(\"gobject\", \"CGovernanceManager::UpdateCurrentWatchdog -- Current watchdog updated to: hash = %s\\n\",\n-                 ArithToUint256(nHashNew).ToString());\n-    }\n-\n-    return fAccept;\n+    DBG( std::cout << \"CGovernanceManager::AddGovernanceObject END\" << std::endl; );\n }\n \n void CGovernanceManager::UpdateCachesAndClean()\n@@ -430,34 +365,6 @@ void CGovernanceManager::UpdateCachesAndClean()\n \n     LOCK2(cs_main, cs);\n \n-    // Flag expired watchdogs for removal\n-    int64_t nNow = GetAdjustedTime();\n-    LogPrint(\"gobject\", \"CGovernanceManager::UpdateCachesAndClean -- Number watchdogs in map: %d, current time = %d\\n\", mapWatchdogObjects.size(), nNow);\n-    if(mapWatchdogObjects.size() > 1) {\n-        hash_time_m_it it = mapWatchdogObjects.begin();\n-        while(it != mapWatchdogObjects.end()) {\n-            LogPrint(\"gobject\", \"CGovernanceManager::UpdateCachesAndClean -- Checking watchdog: %s, expiration time = %d\\n\", it->first.ToString(), it->second);\n-            if(it->second < nNow) {\n-                LogPrint(\"gobject\", \"CGovernanceManager::UpdateCachesAndClean -- Attempting to expire watchdog: %s, expiration time = %d\\n\", it->first.ToString(), it->second);\n-                object_m_it it2 = mapObjects.find(it->first);\n-                if(it2 != mapObjects.end()) {\n-                    LogPrint(\"gobject\", \"CGovernanceManager::UpdateCachesAndClean -- Expiring watchdog: %s, expiration time = %d\\n\", it->first.ToString(), it->second);\n-                    it2->second.fExpired = true;\n-                    if(it2->second.nDeletionTime == 0) {\n-                        it2->second.nDeletionTime = nNow;\n-                    }\n-                }\n-                if(it->first == nHashWatchdogCurrent) {\n-                    nHashWatchdogCurrent = uint256();\n-                }\n-                mapWatchdogObjects.erase(it++);\n-            }\n-            else {\n-                ++it;\n-            }\n-        }\n-    }\n-\n     for(size_t i = 0; i < vecDirtyHashes.size(); ++i) {\n         object_m_it it = mapObjects.find(vecDirtyHashes[i]);\n         if(it == mapObjects.end()) {\n@@ -476,6 +383,8 @@ void CGovernanceManager::UpdateCachesAndClean()\n     // Clean up any expired or invalid triggers\n     triggerman.CleanAndRemove();\n \n+    int64_t nNow = GetAdjustedTime();\n+\n     while(it != mapObjects.end())\n     {\n         CGovernanceObject* pObj = &((*it).second);\n@@ -497,13 +406,9 @@ void CGovernanceManager::UpdateCachesAndClean()\n             pObj->UpdateSentinelVariables();\n         }\n \n-        if(pObj->IsSetCachedDelete() && (nHash == nHashWatchdogCurrent)) {\n-            nHashWatchdogCurrent = uint256();\n-        }\n-\n         // IF DELETE=TRUE, THEN CLEAN THE MESS UP!\n \n-        int64_t nTimeSinceDeletion = GetAdjustedTime() - pObj->GetDeletionTime();\n+        int64_t nTimeSinceDeletion = nNow - pObj->GetDeletionTime();\n \n         LogPrint(\"gobject\", \"CGovernanceManager::UpdateCachesAndClean -- Checking object for deletion: %s, deletion time = %d, time since deletion = %d, delete flag = %d, expired flag = %d\\n\",\n                  strHash, pObj->GetDeletionTime(), nTimeSinceDeletion, pObj->IsSetCachedDelete(), pObj->IsSetExpired());\n@@ -514,32 +419,43 @@ void CGovernanceManager::UpdateCachesAndClean()\n             mnodeman.RemoveGovernanceObject(pObj->GetHash());\n \n             // Remove vote references\n-            const object_ref_cache_t::list_t& listItems = mapVoteToObject.GetItemList();\n-            object_ref_cache_t::list_cit lit = listItems.begin();\n+            const object_ref_cm_t::list_t& listItems = cmapVoteToObject.GetItemList();\n+            object_ref_cm_t::list_cit lit = listItems.begin();\n             while(lit != listItems.end()) {\n                 if(lit->value == pObj) {\n                     uint256 nKey = lit->key;\n                     ++lit;\n-                    mapVoteToObject.Erase(nKey);\n+                    cmapVoteToObject.Erase(nKey);\n                 }\n                 else {\n                     ++lit;\n                 }\n             }\n \n-            int64_t nSuperblockCycleSeconds = Params().GetConsensus().nSuperblockCycle * Params().GetConsensus().nPowTargetSpacing;\n-            int64_t nTimeExpired = pObj->GetCreationTime() + 2 * nSuperblockCycleSeconds + GOVERNANCE_DELETION_DELAY;\n+            int64_t nTimeExpired{0};\n \n-            if(pObj->GetObjectType() == GOVERNANCE_OBJECT_WATCHDOG) {\n-                mapWatchdogObjects.erase(nHash);\n-            } else if(pObj->GetObjectType() != GOVERNANCE_OBJECT_TRIGGER) {\n+            if(pObj->GetObjectType() == GOVERNANCE_OBJECT_PROPOSAL) {\n                 // keep hashes of deleted proposals forever\n                 nTimeExpired = std::numeric_limits<int64_t>::max();\n+            } else {\n+                int64_t nSuperblockCycleSeconds = Params().GetConsensus().nSuperblockCycle * Params().GetConsensus().nPowTargetSpacing;\n+                nTimeExpired = pObj->GetCreationTime() + 2 * nSuperblockCycleSeconds + GOVERNANCE_DELETION_DELAY;\n             }\n \n             mapErasedGovernanceObjects.insert(std::make_pair(nHash, nTimeExpired));\n             mapObjects.erase(it++);\n         } else {\n+            // DO NOT USE THIS UNTIL MAY, 2018 on mainnet\n+            if (pObj->GetObjectType() == GOVERNANCE_OBJECT_PROPOSAL) {\n+                CProposalValidator validator(pObj->GetDataAsHexString());\n+                if (!validator.Validate()) {\n+                    LogPrintf(\"CGovernanceManager::UpdateCachesAndClean -- set for deletion expired obj %s\\n\", (*it).first.ToString());\n+                    pObj->fCachedDelete = true;\n+                    if (pObj->nDeletionTime == 0) {\n+                        pObj->nDeletionTime = nNow;\n+                    }\n+                }\n+            }\n             ++it;\n         }\n     }\n@@ -556,7 +472,7 @@ void CGovernanceManager::UpdateCachesAndClean()\n     LogPrintf(\"CGovernanceManager::UpdateCachesAndClean -- %s\\n\", ToString());\n }\n \n-CGovernanceObject *CGovernanceManager::FindGovernanceObject(const uint256& nHash)\n+CGovernanceObject* CGovernanceManager::FindGovernanceObject(const uint256& nHash)\n {\n     LOCK(cs);\n \n@@ -566,40 +482,39 @@ CGovernanceObject *CGovernanceManager::FindGovernanceObject(const uint256& nHash\n     return NULL;\n }\n \n-std::vector<CGovernanceVote> CGovernanceManager::GetMatchingVotes(const uint256& nParentHash)\n+std::vector<CGovernanceVote> CGovernanceManager::GetMatchingVotes(const uint256& nParentHash) const\n {\n     LOCK(cs);\n     std::vector<CGovernanceVote> vecResult;\n \n-    object_m_it it = mapObjects.find(nParentHash);\n+    object_m_cit it = mapObjects.find(nParentHash);\n     if(it == mapObjects.end()) {\n         return vecResult;\n     }\n-    CGovernanceObject& govobj = it->second;\n \n-    return govobj.GetVoteFile().GetVotes();\n+    return it->second.GetVoteFile().GetVotes();\n }\n \n-std::vector<CGovernanceVote> CGovernanceManager::GetCurrentVotes(const uint256& nParentHash, const COutPoint& mnCollateralOutpointFilter)\n+std::vector<CGovernanceVote> CGovernanceManager::GetCurrentVotes(const uint256& nParentHash, const COutPoint& mnCollateralOutpointFilter) const\n {\n     LOCK(cs);\n     std::vector<CGovernanceVote> vecResult;\n \n     // Find the governance object or short-circuit.\n-    object_m_it it = mapObjects.find(nParentHash);\n+    object_m_cit it = mapObjects.find(nParentHash);\n     if(it == mapObjects.end()) return vecResult;\n-    CGovernanceObject& govobj = it->second;\n+    const CGovernanceObject& govobj = it->second;\n \n     CMasternode mn;\n     std::map<COutPoint, CMasternode> mapMasternodes;\n-    if(mnCollateralOutpointFilter == COutPoint()) {\n+    if(mnCollateralOutpointFilter.IsNull()) {\n         mapMasternodes = mnodeman.GetFullMasternodeMap();\n     } else if (mnodeman.Get(mnCollateralOutpointFilter, mn)) {\n         mapMasternodes[mnCollateralOutpointFilter] = mn;\n     }\n \n     // Loop thru each MN collateral outpoint and get the votes for the `nParentHash` governance object\n-    for (auto& mnpair : mapMasternodes)\n+    for (const auto& mnpair : mapMasternodes)\n     {\n         // get a vote_rec_t from the govobj\n         vote_rec_t voteRecord;\n@@ -620,13 +535,13 @@ std::vector<CGovernanceVote> CGovernanceManager::GetCurrentVotes(const uint256&\n     return vecResult;\n }\n \n-std::vector<CGovernanceObject*> CGovernanceManager::GetAllNewerThan(int64_t nMoreThanTime)\n+std::vector<const CGovernanceObject*> CGovernanceManager::GetAllNewerThan(int64_t nMoreThanTime) const\n {\n     LOCK(cs);\n \n-    std::vector<CGovernanceObject*> vGovObjs;\n+    std::vector<const CGovernanceObject*> vGovObjs;\n \n-    object_m_it it = mapObjects.begin();\n+    object_m_cit it = mapObjects.begin();\n     while(it != mapObjects.end())\n     {\n         // IF THIS OBJECT IS OLDER THAN TIME, CONTINUE\n@@ -638,7 +553,7 @@ std::vector<CGovernanceObject*> CGovernanceManager::GetAllNewerThan(int64_t nMor\n \n         // ADD GOVERNANCE OBJECT TO LIST\n \n-        CGovernanceObject* pGovObj = &((*it).second);\n+        const CGovernanceObject* pGovObj = &((*it).second);\n         vGovObjs.push_back(pGovObj);\n \n         // NEXT\n@@ -696,7 +611,7 @@ bool CGovernanceManager::ConfirmInventoryRequest(const CInv& inv)\n     break;\n     case MSG_GOVERNANCE_OBJECT_VOTE:\n     {\n-        if(mapVoteToObject.HasKey(inv.hash)) {\n+        if(cmapVoteToObject.HasKey(inv.hash)) {\n             LogPrint(\"gobject\", \"CGovernanceManager::ConfirmInventoryRequest already have governance vote, returning false\\n\");\n             return false;\n         }\n@@ -730,106 +645,118 @@ bool CGovernanceManager::ConfirmInventoryRequest(const CInv& inv)\n     return true;\n }\n \n-void CGovernanceManager::Sync(CNode* pfrom, const uint256& nProp, const CBloomFilter& filter, CConnman& connman)\n+void CGovernanceManager::SyncSingleObjAndItsVotes(CNode* pnode, const uint256& nProp, const CBloomFilter& filter, CConnman& connman)\n {\n-\n-    /*\n-        This code checks each of the hash maps for all known budget proposals and finalized budget proposals, then checks them against the\n-        budget object to see if they're OK. If all checks pass, we'll send it to the peer.\n-    */\n-\n     // do not provide any data until our node is synced\n     if(!masternodeSync.IsSynced()) return;\n \n-    int nObjCount = 0;\n     int nVoteCount = 0;\n \n     // SYNC GOVERNANCE OBJECTS WITH OTHER CLIENT\n \n-    LogPrint(\"gobject\", \"CGovernanceManager::Sync -- syncing to peer=%d, nProp = %s\\n\", pfrom->id, nProp.ToString());\n+    LogPrint(\"gobject\", \"CGovernanceManager::%s -- syncing single object to peer=%d, nProp = %s\\n\", __func__, pnode->id, nProp.ToString());\n \n-    {\n-        LOCK2(cs_main, cs);\n+    LOCK2(cs_main, cs);\n \n-        if(nProp == uint256()) {\n-            // all valid objects, no votes\n-            for(object_m_it it = mapObjects.begin(); it != mapObjects.end(); ++it) {\n-                CGovernanceObject& govobj = it->second;\n-                std::string strHash = it->first.ToString();\n+    // single valid object and its valid votes\n+    object_m_it it = mapObjects.find(nProp);\n+    if(it == mapObjects.end()) {\n+        LogPrint(\"gobject\", \"CGovernanceManager::%s -- no matching object for hash %s, peer=%d\\n\", __func__, nProp.ToString(), pnode->id);\n+        return;\n+    }\n+    CGovernanceObject& govobj = it->second;\n+    std::string strHash = it->first.ToString();\n \n-                LogPrint(\"gobject\", \"CGovernanceManager::Sync -- attempting to sync govobj: %s, peer=%d\\n\", strHash, pfrom->id);\n+    LogPrint(\"gobject\", \"CGovernanceManager::%s -- attempting to sync govobj: %s, peer=%d\\n\", __func__, strHash, pnode->id);\n \n-                if(govobj.IsSetCachedDelete() || govobj.IsSetExpired()) {\n-                    LogPrintf(\"CGovernanceManager::Sync -- not syncing deleted/expired govobj: %s, peer=%d\\n\",\n-                              strHash, pfrom->id);\n-                    continue;\n-                }\n+    if(govobj.IsSetCachedDelete() || govobj.IsSetExpired()) {\n+        LogPrintf(\"CGovernanceManager::%s -- not syncing deleted/expired govobj: %s, peer=%d\\n\", __func__,\n+                  strHash, pnode->id);\n+        return;\n+    }\n \n-                // Push the inventory budget proposal message over to the other client\n-                LogPrint(\"gobject\", \"CGovernanceManager::Sync -- syncing govobj: %s, peer=%d\\n\", strHash, pfrom->id);\n-                pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT, it->first));\n-                ++nObjCount;\n-            }\n-        } else {\n-            // single valid object and its valid votes\n-            object_m_it it = mapObjects.find(nProp);\n-            if(it == mapObjects.end()) {\n-                LogPrint(\"gobject\", \"CGovernanceManager::Sync -- no matching object for hash %s, peer=%d\\n\", nProp.ToString(), pfrom->id);\n-                return;\n-            }\n-            CGovernanceObject& govobj = it->second;\n-            std::string strHash = it->first.ToString();\n+    // Push the govobj inventory message over to the other client\n+    LogPrint(\"gobject\", \"CGovernanceManager::%s -- syncing govobj: %s, peer=%d\\n\", __func__, strHash, pnode->id);\n+    pnode->PushInventory(CInv(MSG_GOVERNANCE_OBJECT, it->first));\n \n-            LogPrint(\"gobject\", \"CGovernanceManager::Sync -- attempting to sync govobj: %s, peer=%d\\n\", strHash, pfrom->id);\n+    auto fileVotes = govobj.GetVoteFile();\n \n-            if(govobj.IsSetCachedDelete() || govobj.IsSetExpired()) {\n-                LogPrintf(\"CGovernanceManager::Sync -- not syncing deleted/expired govobj: %s, peer=%d\\n\",\n-                          strHash, pfrom->id);\n-                return;\n-            }\n+    for (const auto& vote : fileVotes.GetVotes()) {\n+        uint256 nVoteHash = vote.GetHash();\n+        if(filter.contains(nVoteHash) || !vote.IsValid(true)) {\n+            continue;\n+        }\n+        pnode->PushInventory(CInv(MSG_GOVERNANCE_OBJECT_VOTE, nVoteHash));\n+        ++nVoteCount;\n+    }\n \n-            // Push the inventory budget proposal message over to the other client\n-            LogPrint(\"gobject\", \"CGovernanceManager::Sync -- syncing govobj: %s, peer=%d\\n\", strHash, pfrom->id);\n-            pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT, it->first));\n-            ++nObjCount;\n+    CNetMsgMaker msgMaker(pnode->GetSendVersion());\n+    connman.PushMessage(pnode, msgMaker.Make(NetMsgType::SYNCSTATUSCOUNT, MASTERNODE_SYNC_GOVOBJ, 1));\n+    connman.PushMessage(pnode, msgMaker.Make(NetMsgType::SYNCSTATUSCOUNT, MASTERNODE_SYNC_GOVOBJ_VOTE, nVoteCount));\n+    LogPrintf(\"CGovernanceManager::%s -- sent 1 object and %d votes to peer=%d\\n\", __func__, nVoteCount, pnode->id);\n+}\n \n-            std::vector<CGovernanceVote> vecVotes = govobj.GetVoteFile().GetVotes();\n-            for(size_t i = 0; i < vecVotes.size(); ++i) {\n-\t\t\t\tif (filter.contains(vecVotes[i].GetHash())) {\n-                    continue;\n-                }\n-\t\t\t\tif (!vecVotes[i].IsValid(true)) {\n-                    continue;\n-                }\n-                pfrom->PushInventory(CInv(MSG_GOVERNANCE_OBJECT_VOTE, vecVotes[i].GetHash()));\n-                ++nVoteCount;\n-            }\n+void CGovernanceManager::SyncAll(CNode* pnode, CConnman& connman) const\n+{\n+    // do not provide any data until our node is synced\n+    if(!masternodeSync.IsSynced()) return;\n+\n+    if(netfulfilledman.HasFulfilledRequest(pnode->addr, NetMsgType::MNGOVERNANCESYNC)) {\n+        LOCK(cs_main);\n+        // Asking for the whole list multiple times in a short period of time is no good\n+        LogPrint(\"gobject\", \"CGovernanceManager::%s -- peer already asked me for the list\\n\", __func__);\n+        Misbehaving(pnode->GetId(), 20);\n+        return;\n+    }\n+    netfulfilledman.AddFulfilledRequest(pnode->addr, NetMsgType::MNGOVERNANCESYNC);\n+\n+    int nObjCount = 0;\n+    int nVoteCount = 0;\n+\n+    // SYNC GOVERNANCE OBJECTS WITH OTHER CLIENT\n+\n+    LogPrint(\"gobject\", \"CGovernanceManager::%s -- syncing all objects to peer=%d\\n\", __func__, pnode->id);\n+\n+    LOCK2(cs_main, cs);\n+\n+    // all valid objects, no votes\n+    for(object_m_cit it = mapObjects.begin(); it != mapObjects.end(); ++it) {\n+        const CGovernanceObject& govobj = it->second;\n+        std::string strHash = it->first.ToString();\n+\n+        LogPrint(\"gobject\", \"CGovernanceManager::%s -- attempting to sync govobj: %s, peer=%d\\n\", __func__, strHash, pnode->id);\n+\n+        if(govobj.IsSetCachedDelete() || govobj.IsSetExpired()) {\n+            LogPrintf(\"CGovernanceManager::%s -- not syncing deleted/expired govobj: %s, peer=%d\\n\", __func__,\n+                      strHash, pnode->id);\n+            continue;\n         }\n+\n+        // Push the inventory budget proposal message over to the other client\n+        LogPrint(\"gobject\", \"CGovernanceManager::%s -- syncing govobj: %s, peer=%d\\n\", __func__, strHash, pnode->id);\n+        pnode->PushInventory(CInv(MSG_GOVERNANCE_OBJECT, it->first));\n+        ++nObjCount;\n     }\n \n-    connman.PushMessage(pfrom, NetMsgType::SYNCSTATUSCOUNT, MASTERNODE_SYNC_GOVOBJ, nObjCount);\n-    connman.PushMessage(pfrom, NetMsgType::SYNCSTATUSCOUNT, MASTERNODE_SYNC_GOVOBJ_VOTE, nVoteCount);\n-    LogPrintf(\"CGovernanceManager::Sync -- sent %d objects and %d votes to peer=%d\\n\", nObjCount, nVoteCount, pfrom->id);\n+    CNetMsgMaker msgMaker(pnode->GetSendVersion());\n+    connman.PushMessage(pnode, msgMaker.Make(NetMsgType::SYNCSTATUSCOUNT, MASTERNODE_SYNC_GOVOBJ, nObjCount));\n+    connman.PushMessage(pnode, msgMaker.Make(NetMsgType::SYNCSTATUSCOUNT, MASTERNODE_SYNC_GOVOBJ_VOTE, nVoteCount));\n+    LogPrintf(\"CGovernanceManager::%s -- sent %d objects and %d votes to peer=%d\\n\", __func__, nObjCount, nVoteCount, pnode->id);\n }\n \n-\n void CGovernanceManager::MasternodeRateUpdate(const CGovernanceObject& govobj)\n {\n-    int nObjectType = govobj.GetObjectType();\n-    if((nObjectType != GOVERNANCE_OBJECT_TRIGGER) && (nObjectType != GOVERNANCE_OBJECT_WATCHDOG))\n+    if(govobj.GetObjectType() != GOVERNANCE_OBJECT_TRIGGER)\n         return;\n \n-    const CTxIn& vin = govobj.GetMasternodeVin();\n-    txout_m_it it  = mapLastMasternodeObject.find(vin.prevout);\n+    const COutPoint& masternodeOutpoint = govobj.GetMasternodeOutpoint();\n+    txout_m_it it  = mapLastMasternodeObject.find(masternodeOutpoint);\n \n     if(it == mapLastMasternodeObject.end())\n-        it = mapLastMasternodeObject.insert(txout_m_t::value_type(vin.prevout, last_object_rec(true))).first;\n+        it = mapLastMasternodeObject.insert(txout_m_t::value_type(masternodeOutpoint, last_object_rec(true))).first;\n \n     int64_t nTimestamp = govobj.GetCreationTime();\n-    if (GOVERNANCE_OBJECT_TRIGGER == nObjectType)\n-        it->second.triggerBuffer.AddTimestamp(nTimestamp);\n-    else if (GOVERNANCE_OBJECT_WATCHDOG == nObjectType)\n-        it->second.watchdogBuffer.AddTimestamp(nTimestamp);\n+    it->second.triggerBuffer.AddTimestamp(nTimestamp);\n \n     if (nTimestamp > GetTime() + MAX_TIME_FUTURE_DEVIATION - RELIABLE_PROPAGATION_TIME) {\n         // schedule additional relay for the object\n@@ -859,31 +786,30 @@ bool CGovernanceManager::MasternodeRateCheck(const CGovernanceObject& govobj, bo\n         return true;\n     }\n \n-    int nObjectType = govobj.GetObjectType();\n-    if((nObjectType != GOVERNANCE_OBJECT_TRIGGER) && (nObjectType != GOVERNANCE_OBJECT_WATCHDOG)) {\n+    if(govobj.GetObjectType() != GOVERNANCE_OBJECT_TRIGGER) {\n         return true;\n     }\n \n-    const CTxIn& vin = govobj.GetMasternodeVin();\n+    const COutPoint& masternodeOutpoint = govobj.GetMasternodeOutpoint();\n     int64_t nTimestamp = govobj.GetCreationTime();\n     int64_t nNow = GetAdjustedTime();\n     int64_t nSuperblockCycleSeconds = Params().GetConsensus().nSuperblockCycle * Params().GetConsensus().nPowTargetSpacing;\n \n     std::string strHash = govobj.GetHash().ToString();\n \n     if(nTimestamp < nNow - 2 * nSuperblockCycleSeconds) {\n-        LogPrintf(\"CGovernanceManager::MasternodeRateCheck -- object %s rejected due to too old timestamp, masternode vin = %s, timestamp = %d, current time = %d\\n\",\n-                 strHash, vin.prevout.ToStringShort(), nTimestamp, nNow);\n+        LogPrintf(\"CGovernanceManager::MasternodeRateCheck -- object %s rejected due to too old timestamp, masternode = %s, timestamp = %d, current time = %d\\n\",\n+                 strHash, masternodeOutpoint.ToStringShort(), nTimestamp, nNow);\n         return false;\n     }\n \n     if(nTimestamp > nNow + MAX_TIME_FUTURE_DEVIATION) {\n-        LogPrintf(\"CGovernanceManager::MasternodeRateCheck -- object %s rejected due to too new (future) timestamp, masternode vin = %s, timestamp = %d, current time = %d\\n\",\n-                 strHash, vin.prevout.ToStringShort(), nTimestamp, nNow);\n+        LogPrintf(\"CGovernanceManager::MasternodeRateCheck -- object %s rejected due to too new (future) timestamp, masternode = %s, timestamp = %d, current time = %d\\n\",\n+                 strHash, masternodeOutpoint.ToStringShort(), nTimestamp, nNow);\n         return false;\n     }\n \n-    txout_m_it it  = mapLastMasternodeObject.find(vin.prevout);\n+    txout_m_it it  = mapLastMasternodeObject.find(masternodeOutpoint);\n     if(it == mapLastMasternodeObject.end())\n         return true;\n \n@@ -892,64 +818,58 @@ bool CGovernanceManager::MasternodeRateCheck(const CGovernanceObject& govobj, bo\n         return true;\n     }\n \n-    double dMaxRate = 1.1 / nSuperblockCycleSeconds;\n-    double dRate = 0.0;\n-    CRateCheckBuffer buffer;\n-    switch(nObjectType) {\n-    case GOVERNANCE_OBJECT_TRIGGER:\n-        // Allow 1 trigger per mn per cycle, with a small fudge factor\n-        buffer = it->second.triggerBuffer;\n-        dMaxRate = 2 * 1.1 / double(nSuperblockCycleSeconds);\n-        break;\n-    case GOVERNANCE_OBJECT_WATCHDOG:\n-        buffer = it->second.watchdogBuffer;\n-        dMaxRate = 2 * 1.1 / 3600.;\n-        break;\n-    default:\n-        break;\n-    }\n+    // Allow 1 trigger per mn per cycle, with a small fudge factor\n+    double dMaxRate = 2 * 1.1 / double(nSuperblockCycleSeconds);\n+\n+    // Temporary copy to check rate after new timestamp is added\n+    CRateCheckBuffer buffer = it->second.triggerBuffer;\n \n     buffer.AddTimestamp(nTimestamp);\n-    dRate = buffer.GetRate();\n+    double dRate = buffer.GetRate();\n \n-    bool fRateOK = ( dRate < dMaxRate );\n+    if(dRate < dMaxRate) {\n+        return true;\n+    }\n \n-    if(!fRateOK)\n-    {\n-        LogPrintf(\"CGovernanceManager::MasternodeRateCheck -- Rate too high: object hash = %s, masternode vin = %s, object timestamp = %d, rate = %f, max rate = %f\\n\",\n-                  strHash, vin.prevout.ToStringShort(), nTimestamp, dRate, dMaxRate);\n+    LogPrintf(\"CGovernanceManager::MasternodeRateCheck -- Rate too high: object hash = %s, masternode = %s, object timestamp = %d, rate = %f, max rate = %f\\n\",\n+              strHash, masternodeOutpoint.ToStringShort(), nTimestamp, dRate, dMaxRate);\n \n-        if (fUpdateFailStatus)\n-            it->second.fStatusOK = false;\n-    }\n+    if (fUpdateFailStatus)\n+        it->second.fStatusOK = false;\n \n-    return fRateOK;\n+    return false;\n }\n \n bool CGovernanceManager::ProcessVote(CNode* pfrom, const CGovernanceVote& vote, CGovernanceException& exception, CConnman& connman)\n {\n     ENTER_CRITICAL_SECTION(cs);\n     uint256 nHashVote = vote.GetHash();\n-    if(mapInvalidVotes.HasKey(nHashVote)) {\n+    uint256 nHashGovobj = vote.GetParentHash();\n+\n+    if(cmapVoteToObject.HasKey(nHashVote)) {\n+        LogPrint(\"gobject\", \"CGovernanceObject::ProcessVote -- skipping known valid vote %s for object %s\\n\", nHashVote.ToString(), nHashGovobj.ToString());\n+        LEAVE_CRITICAL_SECTION(cs);\n+        return false;\n+    }\n+\n+    if(cmapInvalidVotes.HasKey(nHashVote)) {\n         std::ostringstream ostr;\n         ostr << \"CGovernanceManager::ProcessVote -- Old invalid vote \"\n                 << \", MN outpoint = \" << vote.GetMasternodeOutpoint().ToStringShort()\n-                << \", governance object hash = \" << vote.GetParentHash().ToString();\n+                << \", governance object hash = \" << nHashGovobj.ToString();\n         LogPrintf(\"%s\\n\", ostr.str());\n         exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_PERMANENT_ERROR, 20);\n         LEAVE_CRITICAL_SECTION(cs);\n         return false;\n     }\n \n-    uint256 nHashGovobj = vote.GetParentHash();\n     object_m_it it = mapObjects.find(nHashGovobj);\n     if(it == mapObjects.end()) {\n         std::ostringstream ostr;\n-        ostr << \"CGovernanceManager::ProcessVote -- Unknown parent object \"\n-             << \", MN outpoint = \" << vote.GetMasternodeOutpoint().ToStringShort()\n-             << \", governance object hash = \" << vote.GetParentHash().ToString();\n+        ostr << \"CGovernanceManager::ProcessVote -- Unknown parent object \" << nHashGovobj.ToString()\n+             << \", MN outpoint = \" << vote.GetMasternodeOutpoint().ToStringShort();\n         exception = CGovernanceException(ostr.str(), GOVERNANCE_EXCEPTION_WARNING);\n-        if(mapOrphanVotes.Insert(nHashGovobj, vote_time_pair_t(vote, GetAdjustedTime() + GOVERNANCE_ORPHAN_EXPIRATION_TIME))) {\n+        if(cmmapOrphanVotes.Insert(nHashGovobj, vote_time_pair_t(vote, GetAdjustedTime() + GOVERNANCE_ORPHAN_EXPIRATION_TIME))) {\n             LEAVE_CRITICAL_SECTION(cs);\n             RequestGovernanceObject(pfrom, nHashGovobj, connman);\n             LogPrintf(\"%s\\n\", ostr.str());\n@@ -969,15 +889,7 @@ bool CGovernanceManager::ProcessVote(CNode* pfrom, const CGovernanceVote& vote,\n         return false;\n     }\n \n-    bool fOk = govobj.ProcessVote(pfrom, vote, exception, connman);\n-    if(fOk) {\n-        mapVoteToObject.Insert(nHashVote, &govobj);\n-\n-        if(govobj.GetObjectType() == GOVERNANCE_OBJECT_WATCHDOG) {\n-            mnodeman.UpdateWatchdogVoteTime(vote.GetMasternodeOutpoint());\n-            LogPrint(\"gobject\", \"CGovernanceObject::ProcessVote -- GOVERNANCE_OBJECT_WATCHDOG vote for %s\\n\", vote.GetParentHash().ToString());\n-        }\n-    }\n+    bool fOk = govobj.ProcessVote(pfrom, vote, exception, connman) && cmapVoteToObject.Insert(nHashVote, &govobj);\n     LEAVE_CRITICAL_SECTION(cs);\n     return fOk;\n }\n@@ -1004,7 +916,7 @@ void CGovernanceManager::CheckMasternodeOrphanObjects(CConnman& connman)\n         CGovernanceObject& govobj = pair.first;\n \n         if(pair.second.nExpirationTime >= nNow) {\n-            string strError;\n+            std::string strError;\n             bool fMasternodeMissing = false;\n             bool fConfirmationsMissing = false;\n             bool fIsValid = govobj.IsValidLocally(strError, fMasternodeMissing, fConfirmationsMissing, true);\n@@ -1020,7 +932,7 @@ void CGovernanceManager::CheckMasternodeOrphanObjects(CConnman& connman)\n             Misbehaving(pair.second.idFrom, 20);\n         }\n \n-        auto it_count = mapMasternodeOrphanCounter.find(govobj.GetMasternodeVin().prevout);\n+        auto it_count = mapMasternodeOrphanCounter.find(govobj.GetMasternodeOutpoint());\n         if(--it_count->second == 0)\n             mapMasternodeOrphanCounter.erase(it_count);\n \n@@ -1040,8 +952,7 @@ void CGovernanceManager::CheckPostponedObjects(CConnman& connman)\n         const uint256& nHash = it->first;\n         CGovernanceObject& govobj = it->second;\n \n-        assert(govobj.GetObjectType() != GOVERNANCE_OBJECT_WATCHDOG &&\n-               govobj.GetObjectType() != GOVERNANCE_OBJECT_TRIGGER);\n+        assert(govobj.GetObjectType() != GOVERNANCE_OBJECT_TRIGGER);\n \n         std::string strError;\n         bool fMissingConfirmations;\n@@ -1063,7 +974,7 @@ void CGovernanceManager::CheckPostponedObjects(CConnman& connman)\n     }\n \n \n-    // Perform additional relays for triggers/watchdogs\n+    // Perform additional relays for triggers\n     int64_t nNow = GetAdjustedTime();\n     int64_t nSuperblockCycleSeconds = Params().GetConsensus().nSuperblockCycle * Params().GetConsensus().nPowTargetSpacing;\n \n@@ -1105,8 +1016,10 @@ void CGovernanceManager::RequestGovernanceObject(CNode* pfrom, const uint256& nH\n \n     LogPrint(\"gobject\", \"CGovernanceObject::RequestGovernanceObject -- hash = %s (peer=%d)\\n\", nHash.ToString(), pfrom->GetId());\n \n+    CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+\n     if(pfrom->nVersion < GOVERNANCE_FILTER_PROTO_VERSION) {\n-        connman.PushMessage(pfrom, NetMsgType::MNGOVERNANCESYNC, nHash);\n+        connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::MNGOVERNANCESYNC, nHash));\n         return;\n     }\n \n@@ -1129,7 +1042,7 @@ void CGovernanceManager::RequestGovernanceObject(CNode* pfrom, const uint256& nH\n     }\n \n     LogPrint(\"gobject\", \"CGovernanceManager::RequestGovernanceObject -- nHash %s nVoteCount %d peer=%d\\n\", nHash.ToString(), nVoteCount, pfrom->id);\n-    connman.PushMessage(pfrom, NetMsgType::MNGOVERNANCESYNC, nHash, filter);\n+    connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::MNGOVERNANCESYNC, nHash, filter));\n }\n \n int CGovernanceManager::RequestGovernanceObjectVotes(CNode* pnode, CConnman& connman)\n@@ -1160,9 +1073,9 @@ int CGovernanceManager::RequestGovernanceObjectVotes(const std::vector<CNode*>&\n     // On mainnet nMaxObjRequestsPerNode is always set to 1.\n     int nMaxObjRequestsPerNode = 1;\n     size_t nProjectedVotes = 2000;\n-    if(Params().NetworkIDString() != CBaseChainParams::MAIN) {\n+   // if(Params().NetworkIDString() != CBaseChainParams::MAIN) {\n         nMaxObjRequestsPerNode = std::max(1, int(nProjectedVotes / std::max(1, mnodeman.size())));\n-    }\n+   /// }\n \n     {\n         LOCK2(cs_main, cs);\n@@ -1192,10 +1105,10 @@ int CGovernanceManager::RequestGovernanceObjectVotes(const std::vector<CNode*>&\n     LogPrint(\"gobject\", \"CGovernanceManager::RequestGovernanceObjectVotes -- start: vpGovObjsTriggersTmp %d vpGovObjsTmp %d mapAskedRecently %d\\n\",\n                 vpGovObjsTriggersTmp.size(), vpGovObjsTmp.size(), mapAskedRecently.size());\n \n-    InsecureRand insecureRand;\n+    FastRandomContext insecure_rand;\n     // shuffle pointers\n-    std::random_shuffle(vpGovObjsTriggersTmp.begin(), vpGovObjsTriggersTmp.end(), insecureRand);\n-    std::random_shuffle(vpGovObjsTmp.begin(), vpGovObjsTmp.end(), insecureRand);\n+    std::random_shuffle(vpGovObjsTriggersTmp.begin(), vpGovObjsTriggersTmp.end(), insecure_rand);\n+    std::random_shuffle(vpGovObjsTmp.begin(), vpGovObjsTmp.end(), insecure_rand);\n \n     for (int i = 0; i < nMaxObjRequestsPerNode; ++i) {\n         uint256 nHashGovobj;\n@@ -1208,12 +1121,12 @@ int CGovernanceManager::RequestGovernanceObjectVotes(const std::vector<CNode*>&\n             nHashGovobj = vpGovObjsTmp.back()->GetHash();\n         }\n         bool fAsked = false;\n-        BOOST_FOREACH(CNode* pnode, vNodesCopy) {\n+        for (const auto& pnode : vNodesCopy) {\n             // Only use regular peers, don't try to ask from outbound \"masternode\" connections -\n             // they stay connected for a short period of time and it's possible that we won't get everything we should.\n             // Only use outbound connections - inbound connection could be a \"masternode\" connection\n             // initiated from another node, so skip it too.\n-            if(pnode->fMasternode || (fMasterNode && pnode->fInbound)) continue;\n+            if(pnode->fMasternode || (fMasternodeMode && pnode->fInbound)) continue;\n             // only use up to date peers\n             if(pnode->nVersion < MIN_GOVERNANCE_PEER_PROTO_VERSION) continue;\n             // stop early to prevent setAskFor overflow\n@@ -1268,12 +1181,14 @@ bool CGovernanceManager::AcceptMessage(const uint256& nHash, hash_s_t& setHash)\n \n void CGovernanceManager::RebuildIndexes()\n {\n-    mapVoteToObject.Clear();\n+    LOCK(cs);\n+\n+    cmapVoteToObject.Clear();\n     for(object_m_it it = mapObjects.begin(); it != mapObjects.end(); ++it) {\n         CGovernanceObject& govobj = it->second;\n         std::vector<CGovernanceVote> vecVotes = govobj.GetVoteFile().GetVotes();\n         for(size_t i = 0; i < vecVotes.size(); ++i) {\n-            mapVoteToObject.Insert(vecVotes[i].GetHash(), &govobj);\n+            cmapVoteToObject.Insert(vecVotes[i].GetHash(), &govobj);\n         }\n     }\n }\n@@ -1310,7 +1225,6 @@ std::string CGovernanceManager::ToString() const\n \n     int nProposalCount = 0;\n     int nTriggerCount = 0;\n-    int nWatchdogCount = 0;\n     int nOtherCount = 0;\n \n     object_m_cit it = mapObjects.begin();\n@@ -1323,20 +1237,49 @@ std::string CGovernanceManager::ToString() const\n             case GOVERNANCE_OBJECT_TRIGGER:\n                 nTriggerCount++;\n                 break;\n-            case GOVERNANCE_OBJECT_WATCHDOG:\n-                nWatchdogCount++;\n-                break;\n             default:\n                 nOtherCount++;\n                 break;\n         }\n         ++it;\n     }\n \n-    return strprintf(\"Governance Objects: %d (Proposals: %d, Triggers: %d, Watchdogs: %d/%d, Other: %d; Erased: %d), Votes: %d\",\n+    return strprintf(\"Governance Objects: %d (Proposals: %d, Triggers: %d, Other: %d; Erased: %d), Votes: %d\",\n                     (int)mapObjects.size(),\n-                    nProposalCount, nTriggerCount, nWatchdogCount, mapWatchdogObjects.size(), nOtherCount, (int)mapErasedGovernanceObjects.size(),\n-                    (int)mapVoteToObject.GetSize());\n+                    nProposalCount, nTriggerCount, nOtherCount, (int)mapErasedGovernanceObjects.size(),\n+                    (int)cmapVoteToObject.GetSize());\n+}\n+\n+UniValue CGovernanceManager::ToJson() const\n+{\n+    LOCK(cs);\n+\n+    int nProposalCount = 0;\n+    int nTriggerCount = 0;\n+    int nOtherCount = 0;\n+\n+    for (const auto& objpair : mapObjects) {\n+        switch(objpair.second.GetObjectType()) {\n+            case GOVERNANCE_OBJECT_PROPOSAL:\n+                nProposalCount++;\n+                break;\n+            case GOVERNANCE_OBJECT_TRIGGER:\n+                nTriggerCount++;\n+                break;\n+            default:\n+                nOtherCount++;\n+                break;\n+        }\n+    }\n+\n+    UniValue jsonObj(UniValue::VOBJ);\n+    jsonObj.push_back(Pair(\"objects_total\", (int)mapObjects.size()));\n+    jsonObj.push_back(Pair(\"proposals\", nProposalCount));\n+    jsonObj.push_back(Pair(\"triggers\", nTriggerCount));\n+    jsonObj.push_back(Pair(\"other\", nOtherCount));\n+    jsonObj.push_back(Pair(\"erased\", (int)mapErasedGovernanceObjects.size()));\n+    jsonObj.push_back(Pair(\"votes\", (int)cmapVoteToObject.GetSize()));\n+    return jsonObj;\n }\n \n void CGovernanceManager::UpdatedBlockTip(const CBlockIndex *pindex, CConnman& connman)\n@@ -1354,17 +1297,19 @@ void CGovernanceManager::UpdatedBlockTip(const CBlockIndex *pindex, CConnman& co\n     LogPrint(\"gobject\", \"CGovernanceManager::UpdatedBlockTip -- nCachedBlockHeight: %d\\n\", nCachedBlockHeight);\n \n     CheckPostponedObjects(connman);\n+\n+    CSuperblockManager::ExecuteBestSuperblock(pindex->nHeight);\n }\n \n void CGovernanceManager::RequestOrphanObjects(CConnman& connman)\n {\n-    std::vector<CNode*> vNodesCopy = connman.CopyNodeVector();\n+    std::vector<CNode*> vNodesCopy = connman.CopyNodeVector(CConnman::FullyConnectedOnly);\n \n     std::vector<uint256> vecHashesFiltered;\n     {\n         std::vector<uint256> vecHashes;\n         LOCK(cs);\n-        mapOrphanVotes.GetKeys(vecHashes);\n+        cmmapOrphanVotes.GetKeys(vecHashes);\n         for(size_t i = 0; i < vecHashes.size(); ++i) {\n             const uint256& nHash = vecHashes[i];\n             if(mapObjects.find(nHash) == mapObjects.end()) {\n@@ -1391,17 +1336,17 @@ void CGovernanceManager::RequestOrphanObjects(CConnman& connman)\n void CGovernanceManager::CleanOrphanObjects()\n {\n     LOCK(cs);\n-    const vote_mcache_t::list_t& items = mapOrphanVotes.GetItemList();\n+    const vote_cmm_t::list_t& items = cmmapOrphanVotes.GetItemList();\n \n     int64_t nNow = GetAdjustedTime();\n \n-    vote_mcache_t::list_cit it = items.begin();\n+    vote_cmm_t::list_cit it = items.begin();\n     while(it != items.end()) {\n-        vote_mcache_t::list_cit prevIt = it;\n+        vote_cmm_t::list_cit prevIt = it;\n         ++it;\n         const vote_time_pair_t& pairVote = prevIt->value;\n         if(pairVote.second < nNow) {\n-            mapOrphanVotes.Erase(prevIt->key, prevIt->value);\n+            cmmapOrphanVotes.Erase(prevIt->key, prevIt->value);\n         }\n     }\n }"
      },
      {
        "sha": "963cccb86ec6a4a173d1cf9cc261fe65381aa49d",
        "filename": "src/governance.h",
        "status": "modified",
        "additions": 40,
        "deletions": 55,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/governance.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/governance.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -20,6 +19,8 @@\n #include \"timedata.h\"\n #include \"util.h\"\n \n+#include <univalue.h>\n+\n class CGovernanceManager;\n class CGovernanceTriggerManager;\n class CGovernanceObject;\n@@ -38,7 +39,8 @@ typedef std::pair<CGovernanceObject, ExpirationInfo> object_info_pair_t;\n \n static const int RATE_BUFFER_SIZE = 5;\n \n-class CRateCheckBuffer {\n+class CRateCheckBuffer\n+{\n private:\n     std::vector<int64_t> vecTimestamps;\n \n@@ -70,7 +72,7 @@ class CRateCheckBuffer {\n     int64_t GetMinTimestamp()\n     {\n         int nIndex = nDataStart;\n-        int64_t nMin = numeric_limits<int64_t>::max();\n+        int64_t nMin = std::numeric_limits<int64_t>::max();\n         if(fBufferEmpty) {\n             return nMin;\n         }\n@@ -133,7 +135,7 @@ class CRateCheckBuffer {\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         READWRITE(vecTimestamps);\n         READWRITE(nDataStart);\n@@ -153,22 +155,19 @@ class CGovernanceManager\n     struct last_object_rec {\n         last_object_rec(bool fStatusOKIn = true)\n             : triggerBuffer(),\n-              watchdogBuffer(),\n               fStatusOK(fStatusOKIn)\n             {}\n \n         ADD_SERIALIZE_METHODS;\n \n         template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+        inline void SerializationOp(Stream& s, Operation ser_action)\n         {\n             READWRITE(triggerBuffer);\n-            READWRITE(watchdogBuffer);\n             READWRITE(fStatusOK);\n         }\n \n         CRateCheckBuffer triggerBuffer;\n-        CRateCheckBuffer watchdogBuffer;\n         bool fStatusOK;\n     };\n \n@@ -179,17 +178,17 @@ class CGovernanceManager\n \n     typedef object_m_t::const_iterator object_m_cit;\n \n-    typedef CacheMap<uint256, CGovernanceObject*> object_ref_cache_t;\n+    typedef CacheMap<uint256, CGovernanceObject*> object_ref_cm_t;\n \n     typedef std::map<uint256, CGovernanceVote> vote_m_t;\n \n     typedef vote_m_t::iterator vote_m_it;\n \n     typedef vote_m_t::const_iterator vote_m_cit;\n \n-    typedef CacheMap<uint256, CGovernanceVote> vote_cache_t;\n+    typedef CacheMap<uint256, CGovernanceVote> vote_cm_t;\n \n-    typedef CacheMultiMap<uint256, vote_time_pair_t> vote_mcache_t;\n+    typedef CacheMultiMap<uint256, vote_time_pair_t> vote_cmm_t;\n \n     typedef object_m_t::size_type size_type;\n \n@@ -246,17 +245,11 @@ class CGovernanceManager\n     object_m_t mapPostponedObjects;\n     hash_s_t setAdditionalRelayObjects;\n \n-    hash_time_m_t mapWatchdogObjects;\n-\n-    uint256 nHashWatchdogCurrent;\n-\n-    int64_t nTimeWatchdogCurrent;\n+    object_ref_cm_t cmapVoteToObject;\n \n-    object_ref_cache_t mapVoteToObject;\n+    vote_cm_t cmapInvalidVotes;\n \n-    vote_cache_t mapInvalidVotes;\n-\n-    vote_mcache_t mapOrphanVotes;\n+    vote_cmm_t cmmapOrphanVotes;\n \n     txout_m_t mapLastMasternodeObject;\n \n@@ -294,29 +287,28 @@ class CGovernanceManager\n     virtual ~CGovernanceManager() {}\n \n     /**\n-     * This is called by AlreadyHave in main.cpp as part of the inventory\n+     * This is called by AlreadyHave in net_processing.cpp as part of the inventory\n      * retrieval process.  Returns true if we want to retrieve the object, otherwise\n      * false. (Note logic is inverted in AlreadyHave).\n      */\n     bool ConfirmInventoryRequest(const CInv& inv);\n \n-    void Sync(CNode* node, const uint256& nProp, const CBloomFilter& filter, CConnman& connman);\n+    void SyncSingleObjAndItsVotes(CNode* pnode, const uint256& nProp, const CBloomFilter& filter, CConnman& connman);\n+    void SyncAll(CNode* pnode, CConnman& connman) const;\n \n-    void ProcessMessage(CNode* pfrom, std::string& strCommand, CDataStream& vRecv, CConnman& connman);\n+    void ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, CConnman& connman);\n \n     void DoMaintenance(CConnman& connman);\n \n-    CGovernanceObject *FindGovernanceObject(const uint256& nHash);\n+    CGovernanceObject* FindGovernanceObject(const uint256& nHash);\n \n-    std::vector<CGovernanceVote> GetMatchingVotes(const uint256& nParentHash);\n-    std::vector<CGovernanceVote> GetCurrentVotes(const uint256& nParentHash, const COutPoint& mnCollateralOutpointFilter);\n-    std::vector<CGovernanceObject*> GetAllNewerThan(int64_t nMoreThanTime);\n+    // These commands are only used in RPC\n+    std::vector<CGovernanceVote> GetMatchingVotes(const uint256& nParentHash) const;\n+    std::vector<CGovernanceVote> GetCurrentVotes(const uint256& nParentHash, const COutPoint& mnCollateralOutpointFilter) const;\n+    std::vector<const CGovernanceObject*> GetAllNewerThan(int64_t nMoreThanTime) const;\n \n-    bool IsBudgetPaymentBlock(int nBlockHeight);\n     void AddGovernanceObject(CGovernanceObject& govobj, CConnman& connman, CNode* pfrom = NULL);\n \n-    std::string GetRequiredPaymentsString(int nBlockHeight);\n-\n     void UpdateCachesAndClean();\n \n     void CheckAndRemove() {UpdateCachesAndClean();}\n@@ -328,21 +320,19 @@ class CGovernanceManager\n         LogPrint(\"gobject\", \"Governance object manager was cleared\\n\");\n         mapObjects.clear();\n         mapErasedGovernanceObjects.clear();\n-        mapWatchdogObjects.clear();\n-        nHashWatchdogCurrent = uint256();\n-        nTimeWatchdogCurrent = 0;\n-        mapVoteToObject.Clear();\n-        mapInvalidVotes.Clear();\n-        mapOrphanVotes.Clear();\n+        cmapVoteToObject.Clear();\n+        cmapInvalidVotes.Clear();\n+        cmmapOrphanVotes.Clear();\n         mapLastMasternodeObject.clear();\n     }\n \n     std::string ToString() const;\n+    UniValue ToJson() const;\n \n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         LOCK(cs);\n         std::string strVersion;\n         if(ser_action.ForRead()) {\n@@ -354,12 +344,9 @@ class CGovernanceManager\n         }\n \n         READWRITE(mapErasedGovernanceObjects);\n-        READWRITE(mapInvalidVotes);\n-        READWRITE(mapOrphanVotes);\n+        READWRITE(cmapInvalidVotes);\n+        READWRITE(cmmapOrphanVotes);\n         READWRITE(mapObjects);\n-        READWRITE(mapWatchdogObjects);\n-        READWRITE(nHashWatchdogCurrent);\n-        READWRITE(nTimeWatchdogCurrent);\n         READWRITE(mapLastMasternodeObject);\n         if(ser_action.ForRead() && (strVersion != SERIALIZATION_VERSION_STRING)) {\n             Clear();\n@@ -368,31 +355,31 @@ class CGovernanceManager\n     }\n \n     void UpdatedBlockTip(const CBlockIndex *pindex, CConnman& connman);\n-    int64_t GetLastDiffTime() { return nTimeLastDiff; }\n+    int64_t GetLastDiffTime() const { return nTimeLastDiff; }\n     void UpdateLastDiffTime(int64_t nTimeIn) { nTimeLastDiff = nTimeIn; }\n \n-    int GetCachedBlockHeight() { return nCachedBlockHeight; }\n+    int GetCachedBlockHeight() const { return nCachedBlockHeight; }\n \n     // Accessors for thread-safe access to maps\n-    bool HaveObjectForHash(uint256 nHash);\n+    bool HaveObjectForHash(const uint256& nHash) const;\n \n-    bool HaveVoteForHash(uint256 nHash);\n+    bool HaveVoteForHash(const uint256& nHash) const;\n \n     int GetVoteCount() const;\n \n-    bool SerializeObjectForHash(uint256 nHash, CDataStream& ss);\n+    bool SerializeObjectForHash(const uint256& nHash, CDataStream& ss) const;\n \n-    bool SerializeVoteForHash(uint256 nHash, CDataStream& ss);\n+    bool SerializeVoteForHash(const uint256& nHash, CDataStream& ss) const;\n \n     void AddPostponedObject(const CGovernanceObject& govobj)\n     {\n         LOCK(cs);\n         mapPostponedObjects.insert(std::make_pair(govobj.GetHash(), govobj));\n     }\n \n-    void AddSeenGovernanceObject(uint256 nHash, int status);\n+    void AddSeenGovernanceObject(const uint256& nHash, int status);\n \n-    void AddSeenVote(uint256 nHash, int status);\n+    void AddSeenVote(const uint256& nHash, int status);\n \n     void MasternodeRateUpdate(const CGovernanceObject& govobj);\n \n@@ -429,12 +416,12 @@ class CGovernanceManager\n \n     void AddInvalidVote(const CGovernanceVote& vote)\n     {\n-        mapInvalidVotes.Insert(vote.GetHash(), vote);\n+        cmapInvalidVotes.Insert(vote.GetHash(), vote);\n     }\n \n     void AddOrphanVote(const CGovernanceVote& vote)\n     {\n-        mapOrphanVotes.Insert(vote.GetHash(), vote_time_pair_t(vote, GetAdjustedTime() + GOVERNANCE_ORPHAN_EXPIRATION_TIME));\n+        cmmapOrphanVotes.Insert(vote.GetHash(), vote_time_pair_t(vote, GetAdjustedTime() + GOVERNANCE_ORPHAN_EXPIRATION_TIME));\n     }\n \n     bool ProcessVote(CNode* pfrom, const CGovernanceVote& vote, CGovernanceException& exception, CConnman& connman);\n@@ -453,8 +440,6 @@ class CGovernanceManager\n \n     void AddCachedTriggers();\n \n-    bool UpdateCurrentWatchdog(CGovernanceObject& watchdogNew);\n-\n     void RequestOrphanObjects(CConnman& connman);\n \n     void CleanOrphanObjects();"
      },
      {
        "sha": "c789b0e7bcb69be33d22571bba2c935a5a8c45dd",
        "filename": "src/graph.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 17,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/graph.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/graph.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/graph.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -8,15 +8,18 @@ using namespace boost;\n using namespace std;\n typedef typename std::vector<int> container;\n extern CCriticalSection cs_main;\n-bool OrderBasedOnArrivalTime(std::vector<CTransaction>& blockVtx) {\n+bool OrderBasedOnArrivalTime(std::vector<CTransactionRef>& blockVtx) {\n \tstd::vector<vector<unsigned char> > vvchArgs;\n \tstd::vector<vector<unsigned char> > vvchAliasArgs;\n-\tstd::vector<CTransaction> orderedVtx;\n+\tstd::vector<CTransactionRef> orderedVtx;\n \tint op;\n \t// order the arrival times in ascending order using a map\n \tstd::multimap<int64_t, int> orderedIndexes;\n \tfor (unsigned int n = 0; n < blockVtx.size(); n++) {\n-\t\tconst CTransaction& tx = blockVtx[n];\n+\t\tconst CTransactionRef txRef = blockVtx[n];\n+\t\tif (!txRef)\n+\t\t\tcontinue;\n+\t\tconst CTransaction &tx = *txRef;\n \t\tif (tx.nVersion == SYSCOIN_TX_VERSION)\n \t\t{\n \t\t\tif (DecodeAssetAllocationTx(tx, op, vvchArgs))\n@@ -64,10 +67,10 @@ bool OrderBasedOnArrivalTime(std::vector<CTransaction>& blockVtx) {\n \t\t\t}\n \t\t}\n \t\t// add normal tx's to orderedvtx, \n-\t\torderedVtx.push_back(tx);\n+\t\torderedVtx.emplace_back(txRef);\n \t}\n \tfor (auto& orderedIndex : orderedIndexes) {\n-\t\torderedVtx.push_back(blockVtx[orderedIndex.second]);\n+\t\torderedVtx.emplace_back(blockVtx[orderedIndex.second]);\n \t}\n \tif (blockVtx.size() != orderedVtx.size())\n \t{\n@@ -77,13 +80,16 @@ bool OrderBasedOnArrivalTime(std::vector<CTransaction>& blockVtx) {\n \tblockVtx = orderedVtx;\n \treturn true;\n }\n-bool CreateGraphFromVTX(const std::vector<CTransaction>& blockVtx, Graph &graph, std::vector<vertex_descriptor> &vertices, IndexMap &mapTxIndex) {\n+bool CreateGraphFromVTX(const std::vector<CTransactionRef>& blockVtx, Graph &graph, std::vector<vertex_descriptor> &vertices, IndexMap &mapTxIndex) {\n \tAliasMap mapAliasIndex;\n \tstd::vector<vector<unsigned char> > vvchArgs;\n \tstd::vector<vector<unsigned char> > vvchAliasArgs;\n \tint op;\n \tfor (unsigned int n = 0; n< blockVtx.size(); n++) {\n-\t\tconst CTransaction& tx = blockVtx[n];\n+\t\tconst CTransactionRef txRef = blockVtx[n];\n+\t\tif (!txRef)\n+\t\t\tcontinue;\n+\t\tconst CTransaction &tx = *txRef;\n \t\tif (tx.nVersion == SYSCOIN_TX_VERSION)\n \t\t{\n \t\t\tif (DecodeAssetAllocationTx(tx, op, vvchArgs))\n@@ -132,9 +138,7 @@ bool CreateGraphFromVTX(const std::vector<CTransaction>& blockVtx, Graph &graph,\n \treturn mapTxIndex.size() > 0;\n }\n // remove cycles in a graph and create a DAG, modify the blockVtx passed in to remove conflicts, the conflicts should be added back to the end of this vtx after toposort\n-void GraphRemoveCycles(const std::vector<CTransaction>& blockVtx, std::vector<int> &conflictedIndexes, Graph& graph, const std::vector<vertex_descriptor> &vertices, IndexMap &mapTxIndex) {\n-\tstd::vector<CTransaction> newVtx;\n-\tstd::vector<CTransaction> orderedVtx;\n+void GraphRemoveCycles(const std::vector<CTransactionRef>& blockVtx, std::vector<int> &conflictedIndexes, Graph& graph, const std::vector<vertex_descriptor> &vertices, IndexMap &mapTxIndex) {\n \tsorted_vector<int> clearedVertices;\n \tcycle_visitor<sorted_vector<int> > visitor(clearedVertices);\n \thawick_circuits(graph, visitor);\n@@ -159,8 +163,8 @@ void GraphRemoveCycles(const std::vector<CTransaction>& blockVtx, std::vector<in\n \t// block gives us the transactions in order by time so we want to ensure we preserve it\n \tstd::sort(conflictedIndexes.begin(), conflictedIndexes.end());\n }\n-bool DAGTopologicalSort(std::vector<CTransaction>& blockVtx, const std::vector<int> &conflictedIndexes, const Graph& graph, const IndexMap &mapTxIndex) {\n-\tstd::vector<CTransaction> newVtx;\n+bool DAGTopologicalSort(std::vector<CTransactionRef>& blockVtx, const std::vector<int> &conflictedIndexes, const Graph& graph, const IndexMap &mapTxIndex) {\n+\tstd::vector<CTransactionRef> newVtx;\n \tcontainer c;\n \ttry\n \t{\n@@ -171,7 +175,7 @@ bool DAGTopologicalSort(std::vector<CTransaction>& blockVtx, const std::vector<i\n \t\treturn false;\n \t}\n \t// add coinbase\n-\tnewVtx.push_back(blockVtx[0]);\n+\tnewVtx.emplace_back(blockVtx[0]);\n \n \t// add sys tx's to newVtx in reverse sorted order\n \treverse(c.begin(), c.end());\n@@ -185,25 +189,26 @@ bool DAGTopologicalSort(std::vector<CTransaction>& blockVtx, const std::vector<i\n \t\tfor (auto& nIndex : vecTx) {\n \t\t\tif (nIndex >= blockVtx.size())\n \t\t\t\tcontinue;\n-\t\t\tnewVtx.push_back(blockVtx[nIndex]);\n+\t\t\tnewVtx.emplace_back(blockVtx[nIndex]);\n \t\t}\n \t}\n \n \t// add conflicting indexes next (should already be in order)\n \tfor (auto& nIndex : conflictedIndexes) {\n \t\tif (nIndex >= blockVtx.size())\n \t\t\tcontinue;\n-\t\tnewVtx.push_back(blockVtx[nIndex]);\n+\t\tnewVtx.emplace_back(blockVtx[nIndex]);\n \t}\n \t\n \t// add non-sys and other sys tx's to end of newVtx\n \tstd::vector<vector<unsigned char> > vvchArgs;\n \tint op;\n \tfor (unsigned int vOut = 1; vOut< blockVtx.size(); vOut++) {\n-\t\tconst CTransaction& tx = blockVtx[vOut];\n+\t\tconst CTransactionRef& txRef = blockVtx[vOut];\n+\t\tconst CTransaction& tx = *txRef;\n \t\tif (!DecodeAssetAllocationTx(tx, op, vvchArgs))\n \t\t{\n-\t\t\tnewVtx.push_back(blockVtx[vOut]);\n+\t\t\tnewVtx.emplace_back(txRef);\n \t\t}\n \t}\n \tif (blockVtx.size() != newVtx.size())"
      },
      {
        "sha": "33e62f6d12fa7c4a833fbb9e8b886a7afe043d4b",
        "filename": "src/graph.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/graph.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/graph.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/graph.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -71,8 +71,8 @@ struct cycle_visitor\n \t}\n \tClearedVertices& cleared;\n };\n-bool OrderBasedOnArrivalTime(std::vector<CTransaction>& blockVtx);\n-bool CreateGraphFromVTX(const std::vector<CTransaction>& blockVtx, Graph &graph, std::vector<vertex_descriptor> &vertices, IndexMap &mapTxIndex);\n-void GraphRemoveCycles(const std::vector<CTransaction>& blockVtx, std::vector<int> &conflictedIndexes, Graph& graph, const std::vector<vertex_descriptor> &vertices, IndexMap &mapTxIndex);\n-bool DAGTopologicalSort(std::vector<CTransaction>& blockVtx, const std::vector<int> &conflictedIndexes, const Graph& graph, const IndexMap &mapTxIndex);\n+bool OrderBasedOnArrivalTime(std::vector<CTransactionRef>& blockVtx);\n+bool CreateGraphFromVTX(const std::vector<CTransactionRef>& blockVtx, Graph &graph, std::vector<vertex_descriptor> &vertices, IndexMap &mapTxIndex);\n+void GraphRemoveCycles(const std::vector<CTransactionRef>& blockVtx, std::vector<int> &conflictedIndexes, Graph& graph, const std::vector<vertex_descriptor> &vertices, IndexMap &mapTxIndex);\n+bool DAGTopologicalSort(std::vector<CTransactionRef>& blockVtx, const std::vector<int> &conflictedIndexes, const Graph& graph, const IndexMap &mapTxIndex);\n #endif // GRAPH_H\n\\ No newline at end of file"
      },
      {
        "sha": "40a4e974654b2042d840752284d5e69eff5eb6e3",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 231,
        "deletions": 64,
        "changes": 295,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2013-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2013-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -11,74 +10,242 @@\n \n inline uint32_t ROTL32(uint32_t x, int8_t r)\n {\n-\treturn (x << r) | (x >> (32 - r));\n+    return (x << r) | (x >> (32 - r));\n }\n \n unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash)\n {\n-\t// The following is MurmurHash3 (x86_32), see http://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp\n-\tuint32_t h1 = nHashSeed;\n-\tif (vDataToHash.size() > 0)\n-\t{\n-\t\tconst uint32_t c1 = 0xcc9e2d51;\n-\t\tconst uint32_t c2 = 0x1b873593;\n-\n-\t\tconst int nblocks = vDataToHash.size() / 4;\n-\n-\t\t//----------\n-\t\t// body\n-\t\tconst uint8_t* blocks = &vDataToHash[0] + nblocks * 4;\n-\n-\t\tfor (int i = -nblocks; i; i++) {\n-\t\t\tuint32_t k1 = ReadLE32(blocks + i * 4);\n-\n-\t\t\tk1 *= c1;\n-\t\t\tk1 = ROTL32(k1, 15);\n-\t\t\tk1 *= c2;\n-\n-\t\t\th1 ^= k1;\n-\t\t\th1 = ROTL32(h1, 13);\n-\t\t\th1 = h1 * 5 + 0xe6546b64;\n-\t\t}\n-\n-\t\t//----------\n-\t\t// tail\n-\t\tconst uint8_t* tail = (const uint8_t*)(&vDataToHash[0] + nblocks * 4);\n-\n-\t\tuint32_t k1 = 0;\n-\n-\t\tswitch (vDataToHash.size() & 3) {\n-\t\tcase 3:\n-\t\t\tk1 ^= tail[2] << 16;\n-\t\tcase 2:\n-\t\t\tk1 ^= tail[1] << 8;\n-\t\tcase 1:\n-\t\t\tk1 ^= tail[0];\n-\t\t\tk1 *= c1;\n-\t\t\tk1 = ROTL32(k1, 15);\n-\t\t\tk1 *= c2;\n-\t\t\th1 ^= k1;\n-\t\t};\n-\t}\n-\n-\t//----------\n-\t// finalization\n-\th1 ^= vDataToHash.size();\n-\th1 ^= h1 >> 16;\n-\th1 *= 0x85ebca6b;\n-\th1 ^= h1 >> 13;\n-\th1 *= 0xc2b2ae35;\n-\th1 ^= h1 >> 16;\n-\n-\treturn h1;\n+    // The following is MurmurHash3 (x86_32), see http://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp\n+    uint32_t h1 = nHashSeed;\n+    if (vDataToHash.size() > 0)\n+    {\n+        const uint32_t c1 = 0xcc9e2d51;\n+        const uint32_t c2 = 0x1b873593;\n+\n+        const int nblocks = vDataToHash.size() / 4;\n+\n+        //----------\n+        // body\n+        const uint8_t* blocks = &vDataToHash[0] + nblocks * 4;\n+\n+        for (int i = -nblocks; i; i++) {\n+            uint32_t k1 = ReadLE32(blocks + i*4);\n+\n+            k1 *= c1;\n+            k1 = ROTL32(k1, 15);\n+            k1 *= c2;\n+\n+            h1 ^= k1;\n+            h1 = ROTL32(h1, 13);\n+            h1 = h1 * 5 + 0xe6546b64;\n+        }\n+\n+        //----------\n+        // tail\n+        const uint8_t* tail = (const uint8_t*)(&vDataToHash[0] + nblocks * 4);\n+\n+        uint32_t k1 = 0;\n+\n+        switch (vDataToHash.size() & 3) {\n+        case 3:\n+            k1 ^= tail[2] << 16;\n+        case 2:\n+            k1 ^= tail[1] << 8;\n+        case 1:\n+            k1 ^= tail[0];\n+            k1 *= c1;\n+            k1 = ROTL32(k1, 15);\n+            k1 *= c2;\n+            h1 ^= k1;\n+        }\n+    }\n+\n+    //----------\n+    // finalization\n+    h1 ^= vDataToHash.size();\n+    h1 ^= h1 >> 16;\n+    h1 *= 0x85ebca6b;\n+    h1 ^= h1 >> 13;\n+    h1 *= 0xc2b2ae35;\n+    h1 ^= h1 >> 16;\n+\n+    return h1;\n }\n \n void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64])\n {\n-\tunsigned char num[4];\n-\tnum[0] = (nChild >> 24) & 0xFF;\n-\tnum[1] = (nChild >> 16) & 0xFF;\n-\tnum[2] = (nChild >> 8) & 0xFF;\n-\tnum[3] = (nChild >> 0) & 0xFF;\n-\tCHMAC_SHA512(chainCode.begin(), chainCode.size()).Write(&header, 1).Write(data, 32).Write(num, 4).Finalize(output);\n+    unsigned char num[4];\n+    num[0] = (nChild >> 24) & 0xFF;\n+    num[1] = (nChild >> 16) & 0xFF;\n+    num[2] = (nChild >>  8) & 0xFF;\n+    num[3] = (nChild >>  0) & 0xFF;\n+    CHMAC_SHA512(chainCode.begin(), chainCode.size()).Write(&header, 1).Write(data, 32).Write(num, 4).Finalize(output);\n+}\n+\n+#define ROTL(x, b) (uint64_t)(((x) << (b)) | ((x) >> (64 - (b))))\n+\n+#define SIPROUND do { \\\n+    v0 += v1; v1 = ROTL(v1, 13); v1 ^= v0; \\\n+    v0 = ROTL(v0, 32); \\\n+    v2 += v3; v3 = ROTL(v3, 16); v3 ^= v2; \\\n+    v0 += v3; v3 = ROTL(v3, 21); v3 ^= v0; \\\n+    v2 += v1; v1 = ROTL(v1, 17); v1 ^= v2; \\\n+    v2 = ROTL(v2, 32); \\\n+} while (0)\n+\n+CSipHasher::CSipHasher(uint64_t k0, uint64_t k1)\n+{\n+    v[0] = 0x736f6d6570736575ULL ^ k0;\n+    v[1] = 0x646f72616e646f6dULL ^ k1;\n+    v[2] = 0x6c7967656e657261ULL ^ k0;\n+    v[3] = 0x7465646279746573ULL ^ k1;\n+    count = 0;\n+    tmp = 0;\n+}\n+\n+CSipHasher& CSipHasher::Write(uint64_t data)\n+{\n+    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n+\n+    assert(count % 8 == 0);\n+\n+    v3 ^= data;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= data;\n+\n+    v[0] = v0;\n+    v[1] = v1;\n+    v[2] = v2;\n+    v[3] = v3;\n+\n+    count += 8;\n+    return *this;\n+}\n+\n+CSipHasher& CSipHasher::Write(const unsigned char* data, size_t size)\n+{\n+    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n+    uint64_t t = tmp;\n+    int c = count;\n+\n+    while (size--) {\n+        t |= ((uint64_t)(*(data++))) << (8 * (c % 8));\n+        c++;\n+        if ((c & 7) == 0) {\n+            v3 ^= t;\n+            SIPROUND;\n+            SIPROUND;\n+            v0 ^= t;\n+            t = 0;\n+        }\n+    }\n+\n+    v[0] = v0;\n+    v[1] = v1;\n+    v[2] = v2;\n+    v[3] = v3;\n+    count = c;\n+    tmp = t;\n+\n+    return *this;\n+}\n+\n+uint64_t CSipHasher::Finalize() const\n+{\n+    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n+\n+    uint64_t t = tmp | (((uint64_t)count) << 56);\n+\n+    v3 ^= t;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= t;\n+    v2 ^= 0xFF;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    return v0 ^ v1 ^ v2 ^ v3;\n+}\n+\n+uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val)\n+{\n+    /* Specialized implementation for efficiency */\n+    uint64_t d = val.GetUint64(0);\n+\n+    uint64_t v0 = 0x736f6d6570736575ULL ^ k0;\n+    uint64_t v1 = 0x646f72616e646f6dULL ^ k1;\n+    uint64_t v2 = 0x6c7967656e657261ULL ^ k0;\n+    uint64_t v3 = 0x7465646279746573ULL ^ k1 ^ d;\n+\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(1);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(2);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(3);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    v3 ^= ((uint64_t)4) << 59;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= ((uint64_t)4) << 59;\n+    v2 ^= 0xFF;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    return v0 ^ v1 ^ v2 ^ v3;\n+}\n+\n+uint64_t SipHashUint256Extra(uint64_t k0, uint64_t k1, const uint256& val, uint32_t extra)\n+{\n+    /* Specialized implementation for efficiency */\n+    uint64_t d = val.GetUint64(0);\n+\n+    uint64_t v0 = 0x736f6d6570736575ULL ^ k0;\n+    uint64_t v1 = 0x646f72616e646f6dULL ^ k1;\n+    uint64_t v2 = 0x6c7967656e657261ULL ^ k0;\n+    uint64_t v3 = 0x7465646279746573ULL ^ k1 ^ d;\n+\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(1);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(2);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(3);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = (((uint64_t)36) << 56) | extra;\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    v2 ^= 0xFF;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    return v0 ^ v1 ^ v2 ^ v3;\n }"
      },
      {
        "sha": "5c6ef89242e3f31f5c6c0a62465c6c976758ccfd",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 187,
        "deletions": 59,
        "changes": 246,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -14,14 +14,16 @@\n #include \"uint256.h\"\n #include \"version.h\"\n \n+\n #include <vector>\n \n typedef uint256 ChainCode;\n \n+/* ----------- Syscoin Hash ------------------------------------------------- */\n /** A hasher class for Syscoin's 256-bit hash (double SHA-256). */\n class CHash256 {\n private:\n-\tCSHA256 sha;\n+    CSHA256 sha;\n public:\n     static const size_t OUTPUT_SIZE = CSHA256::OUTPUT_SIZE;\n \n@@ -45,7 +47,7 @@ class CHash256 {\n /** A hasher class for Syscoin's 160-bit hash (SHA-256 + RIPEMD-160). */\n class CHash160 {\n private:\n-\tCSHA256 sha;\n+    CSHA256 sha;\n public:\n     static const size_t OUTPUT_SIZE = CRIPEMD160::OUTPUT_SIZE;\n \n@@ -70,106 +72,232 @@ class CHash160 {\n template<typename T1>\n inline uint256 Hash(const T1 pbegin, const T1 pend)\n {\n-\tstatic const unsigned char pblank[1] = {};\n-\tuint256 result;\n-\tCHash256().Write(pbegin == pend ? pblank : (const unsigned char*)&pbegin[0], (pend - pbegin) * sizeof(pbegin[0]))\n-\t\t.Finalize((unsigned char*)&result);\n-\treturn result;\n+    static const unsigned char pblank[1] = {};\n+    uint256 result;\n+    CHash256().Write(pbegin == pend ? pblank : (const unsigned char*)&pbegin[0], (pend - pbegin) * sizeof(pbegin[0]))\n+              .Finalize((unsigned char*)&result);\n+    return result;\n }\n \n /** Compute the 256-bit hash of the concatenation of two objects. */\n template<typename T1, typename T2>\n inline uint256 Hash(const T1 p1begin, const T1 p1end,\n-\tconst T2 p2begin, const T2 p2end) {\n-\tstatic const unsigned char pblank[1] = {};\n-\tuint256 result;\n-\tCHash256().Write(p1begin == p1end ? pblank : (const unsigned char*)&p1begin[0], (p1end - p1begin) * sizeof(p1begin[0]))\n-\t\t.Write(p2begin == p2end ? pblank : (const unsigned char*)&p2begin[0], (p2end - p2begin) * sizeof(p2begin[0]))\n-\t\t.Finalize((unsigned char*)&result);\n-\treturn result;\n+                    const T2 p2begin, const T2 p2end) {\n+    static const unsigned char pblank[1] = {};\n+    uint256 result;\n+    CHash256().Write(p1begin == p1end ? pblank : (const unsigned char*)&p1begin[0], (p1end - p1begin) * sizeof(p1begin[0]))\n+              .Write(p2begin == p2end ? pblank : (const unsigned char*)&p2begin[0], (p2end - p2begin) * sizeof(p2begin[0]))\n+              .Finalize((unsigned char*)&result);\n+    return result;\n }\n \n /** Compute the 256-bit hash of the concatenation of three objects. */\n template<typename T1, typename T2, typename T3>\n inline uint256 Hash(const T1 p1begin, const T1 p1end,\n-\tconst T2 p2begin, const T2 p2end,\n-\tconst T3 p3begin, const T3 p3end) {\n-\tstatic const unsigned char pblank[1] = {};\n-\tuint256 result;\n-\tCHash256().Write(p1begin == p1end ? pblank : (const unsigned char*)&p1begin[0], (p1end - p1begin) * sizeof(p1begin[0]))\n-\t\t.Write(p2begin == p2end ? pblank : (const unsigned char*)&p2begin[0], (p2end - p2begin) * sizeof(p2begin[0]))\n-\t\t.Write(p3begin == p3end ? pblank : (const unsigned char*)&p3begin[0], (p3end - p3begin) * sizeof(p3begin[0]))\n-\t\t.Finalize((unsigned char*)&result);\n-\treturn result;\n+                    const T2 p2begin, const T2 p2end,\n+                    const T3 p3begin, const T3 p3end) {\n+    static const unsigned char pblank[1] = {};\n+    uint256 result;\n+    CHash256().Write(p1begin == p1end ? pblank : (const unsigned char*)&p1begin[0], (p1end - p1begin) * sizeof(p1begin[0]))\n+              .Write(p2begin == p2end ? pblank : (const unsigned char*)&p2begin[0], (p2end - p2begin) * sizeof(p2begin[0]))\n+              .Write(p3begin == p3end ? pblank : (const unsigned char*)&p3begin[0], (p3end - p3begin) * sizeof(p3begin[0]))\n+              .Finalize((unsigned char*)&result);\n+    return result;\n+}\n+\n+/** Compute the 256-bit hash of the concatenation of three objects. */\n+template<typename T1, typename T2, typename T3, typename T4>\n+inline uint256 Hash(const T1 p1begin, const T1 p1end,\n+                    const T2 p2begin, const T2 p2end,\n+                    const T3 p3begin, const T3 p3end,\n+                    const T4 p4begin, const T4 p4end) {\n+    static const unsigned char pblank[1] = {};\n+    uint256 result;\n+    CHash256().Write(p1begin == p1end ? pblank : (const unsigned char*)&p1begin[0], (p1end - p1begin) * sizeof(p1begin[0]))\n+              .Write(p2begin == p2end ? pblank : (const unsigned char*)&p2begin[0], (p2end - p2begin) * sizeof(p2begin[0]))\n+              .Write(p3begin == p3end ? pblank : (const unsigned char*)&p3begin[0], (p3end - p3begin) * sizeof(p3begin[0]))\n+              .Write(p4begin == p4end ? pblank : (const unsigned char*)&p4begin[0], (p4end - p4begin) * sizeof(p4begin[0]))\n+              .Finalize((unsigned char*)&result);\n+    return result;\n+}\n+\n+/** Compute the 256-bit hash of the concatenation of three objects. */\n+template<typename T1, typename T2, typename T3, typename T4, typename T5>\n+inline uint256 Hash(const T1 p1begin, const T1 p1end,\n+                    const T2 p2begin, const T2 p2end,\n+                    const T3 p3begin, const T3 p3end,\n+                    const T4 p4begin, const T4 p4end,\n+                    const T5 p5begin, const T5 p5end) {\n+    static const unsigned char pblank[1] = {};\n+    uint256 result;\n+    CHash256().Write(p1begin == p1end ? pblank : (const unsigned char*)&p1begin[0], (p1end - p1begin) * sizeof(p1begin[0]))\n+              .Write(p2begin == p2end ? pblank : (const unsigned char*)&p2begin[0], (p2end - p2begin) * sizeof(p2begin[0]))\n+              .Write(p3begin == p3end ? pblank : (const unsigned char*)&p3begin[0], (p3end - p3begin) * sizeof(p3begin[0]))\n+              .Write(p4begin == p4end ? pblank : (const unsigned char*)&p4begin[0], (p4end - p4begin) * sizeof(p4begin[0]))\n+              .Write(p5begin == p5end ? pblank : (const unsigned char*)&p5begin[0], (p5end - p5begin) * sizeof(p5begin[0]))\n+              .Finalize((unsigned char*)&result);\n+    return result;\n+}\n+\n+/** Compute the 256-bit hash of the concatenation of three objects. */\n+template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>\n+inline uint256 Hash(const T1 p1begin, const T1 p1end,\n+                    const T2 p2begin, const T2 p2end,\n+                    const T3 p3begin, const T3 p3end,\n+                    const T4 p4begin, const T4 p4end,\n+                    const T5 p5begin, const T5 p5end,\n+                    const T6 p6begin, const T6 p6end) {\n+    static const unsigned char pblank[1] = {};\n+    uint256 result;\n+    CHash256().Write(p1begin == p1end ? pblank : (const unsigned char*)&p1begin[0], (p1end - p1begin) * sizeof(p1begin[0]))\n+              .Write(p2begin == p2end ? pblank : (const unsigned char*)&p2begin[0], (p2end - p2begin) * sizeof(p2begin[0]))\n+              .Write(p3begin == p3end ? pblank : (const unsigned char*)&p3begin[0], (p3end - p3begin) * sizeof(p3begin[0]))\n+              .Write(p4begin == p4end ? pblank : (const unsigned char*)&p4begin[0], (p4end - p4begin) * sizeof(p4begin[0]))\n+              .Write(p5begin == p5end ? pblank : (const unsigned char*)&p5begin[0], (p5end - p5begin) * sizeof(p5begin[0]))\n+              .Write(p6begin == p6end ? pblank : (const unsigned char*)&p6begin[0], (p6end - p6begin) * sizeof(p6begin[0]))\n+              .Finalize((unsigned char*)&result);\n+    return result;\n }\n \n /** Compute the 160-bit hash an object. */\n template<typename T1>\n inline uint160 Hash160(const T1 pbegin, const T1 pend)\n {\n-\tstatic unsigned char pblank[1] = {};\n-\tuint160 result;\n-\tCHash160().Write(pbegin == pend ? pblank : (const unsigned char*)&pbegin[0], (pend - pbegin) * sizeof(pbegin[0]))\n-\t\t.Finalize((unsigned char*)&result);\n-\treturn result;\n+    static unsigned char pblank[1] = {};\n+    uint160 result;\n+    CHash160().Write(pbegin == pend ? pblank : (const unsigned char*)&pbegin[0], (pend - pbegin) * sizeof(pbegin[0]))\n+              .Finalize((unsigned char*)&result);\n+    return result;\n }\n \n /** Compute the 160-bit hash of a vector. */\n inline uint160 Hash160(const std::vector<unsigned char>& vch)\n {\n-\treturn Hash160(vch.begin(), vch.end());\n+    return Hash160(vch.begin(), vch.end());\n }\n \n /** Compute the 160-bit hash of a vector. */\n template<unsigned int N>\n inline uint160 Hash160(const prevector<N, unsigned char>& vch)\n {\n-\treturn Hash160(vch.begin(), vch.end());\n+    return Hash160(vch.begin(), vch.end());\n }\n \n /** A writer stream (for serialization) that computes a 256-bit hash. */\n class CHashWriter\n {\n private:\n-\tCHash256 ctx;\n+    CHash256 ctx;\n+\n+    const int nType;\n+    const int nVersion;\n+public:\n+\n+    CHashWriter(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {}\n+\n+    int GetType() const { return nType; }\n+    int GetVersion() const { return nVersion; }\n+\n+    void write(const char *pch, size_t size) {\n+        ctx.Write((const unsigned char*)pch, size);\n+    }\n+\n+    // invalidates the object\n+    uint256 GetHash() {\n+        uint256 result;\n+        ctx.Finalize((unsigned char*)&result);\n+        return result;\n+    }\n+\n+    template<typename T>\n+    CHashWriter& operator<<(const T& obj) {\n+        // Serialize to this stream\n+        ::Serialize(*this, obj);\n+        return (*this);\n+    }\n+};\n+\n+/** Reads data from an underlying stream, while hashing the read data. */\n+template<typename Source>\n+class CHashVerifier : public CHashWriter\n+{\n+private:\n+    Source* source;\n \n public:\n-\tint nType;\n-\tint nVersion;\n-\n-\tCHashWriter(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {}\n-\n-\tCHashWriter& write(const char *pch, size_t size) {\n-\t\tctx.Write((const unsigned char*)pch, size);\n-\t\treturn (*this);\n-\t}\n-\n-\t// invalidates the object\n-\tuint256 GetHash() {\n-\t\tuint256 result;\n-\t\tctx.Finalize((unsigned char*)&result);\n-\t\treturn result;\n-\t}\n-\n-\ttemplate<typename T>\n-\tCHashWriter& operator<<(const T& obj) {\n-\t\t// Serialize to this stream\n-\t\t::Serialize(*this, obj, nType, nVersion);\n-\t\treturn (*this);\n-\t}\n+    CHashVerifier(Source* source_) : CHashWriter(source_->GetType(), source_->GetVersion()), source(source_) {}\n+\n+    void read(char* pch, size_t nSize)\n+    {\n+        source->read(pch, nSize);\n+        this->write(pch, nSize);\n+    }\n+\n+    void ignore(size_t nSize)\n+    {\n+        char data[1024];\n+        while (nSize > 0) {\n+            size_t now = std::min<size_t>(nSize, 1024);\n+            read(data, now);\n+            nSize -= now;\n+        }\n+    }\n+\n+    template<typename T>\n+    CHashVerifier<Source>& operator>>(T& obj)\n+    {\n+        // Unserialize from this stream\n+        ::Unserialize(*this, obj);\n+        return (*this);\n+    }\n };\n \n /** Compute the 256-bit hash of an object's serialization. */\n template<typename T>\n-uint256 SerializeHash(const T& obj, int nType = SER_GETHASH, int nVersion = PROTOCOL_VERSION)\n+uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)\n {\n-\tCHashWriter ss(nType, nVersion);\n-\tss << obj;\n-\treturn ss.GetHash();\n+    CHashWriter ss(nType, nVersion);\n+    ss << obj;\n+    return ss.GetHash();\n }\n \n unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash);\n \n void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64]);\n \n+/** SipHash-2-4 */\n+class CSipHasher\n+{\n+private:\n+    uint64_t v[4];\n+    uint64_t tmp;\n+    int count;\n+\n+public:\n+    /** Construct a SipHash calculator initialized with 128-bit key (k0, k1) */\n+    CSipHasher(uint64_t k0, uint64_t k1);\n+    /** Hash a 64-bit integer worth of data\n+     *  It is treated as if this was the little-endian interpretation of 8 bytes.\n+     *  This function can only be used when a multiple of 8 bytes have been written so far.\n+     */\n+    CSipHasher& Write(uint64_t data);\n+    /** Hash arbitrary bytes. */\n+    CSipHasher& Write(const unsigned char* data, size_t size);\n+    /** Compute the 64-bit SipHash-2-4 of the data written so far. The object remains untouched. */\n+    uint64_t Finalize() const;\n+};\n+\n+/** Optimized SipHash-2-4 implementation for uint256.\n+ *\n+ *  It is identical to:\n+ *    SipHasher(k0, k1)\n+ *      .Write(val.GetUint64(0))\n+ *      .Write(val.GetUint64(1))\n+ *      .Write(val.GetUint64(2))\n+ *      .Write(val.GetUint64(3))\n+ *      .Finalize()\n+ */\n+uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val);\n+uint64_t SipHashUint256Extra(uint64_t k0, uint64_t k1, const uint256& val, uint32_t extra);\n+\n #endif // SYSCOIN_HASH_H"
      },
      {
        "sha": "498e7c8f0334efc94c6b7c581b8d2f3d6561030a",
        "filename": "src/hdchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/hdchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/hdchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hdchain.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n \n #include \"base58.h\"\n@@ -40,7 +39,7 @@ bool CHDChain::IsCrypted() const\n     return fCrypted;\n }\n \n-void CHDChain::Debug(std::string strName) const\n+void CHDChain::Debug(const std::string& strName) const\n {\n     DBG(\n         std::cout << __func__ << \": ---\" << strName << \"---\" << std::endl;"
      },
      {
        "sha": "34e8e33a8cf918fe2569a7e651ff0191f6a55040",
        "filename": "src/hdchain.h",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/hdchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/hdchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hdchain.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n #ifndef SYS_HDCHAIN_H\n #define SYS_HDCHAIN_H\n@@ -18,7 +17,7 @@ class CHDAccount\n \n     ADD_SERIALIZE_METHODS;\n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         READWRITE(nExternalChainCounter);\n         READWRITE(nInternalChainCounter);\n@@ -46,7 +45,7 @@ class CHDChain\n \n public:\n \n-    CHDChain() : nVersion(CHDChain::CURRENT_VERSION) { SetNull(); }\n+    CHDChain() { SetNull(); }\n     CHDChain(const CHDChain& other) :\n         nVersion(other.nVersion),\n         id(other.id),\n@@ -59,11 +58,10 @@ class CHDChain\n \n     ADD_SERIALIZE_METHODS;\n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         LOCK(cs_accounts);\n         READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n         READWRITE(id);\n         READWRITE(fCrypted);\n         READWRITE(vchSeed);\n@@ -99,7 +97,7 @@ class CHDChain\n     void SetCrypted(bool fCryptedIn);\n     bool IsCrypted() const;\n \n-    void Debug(std::string strName) const;\n+    void Debug(const std::string& strName) const;\n \n     bool SetMnemonic(const SecureVector& vchMnemonic, const SecureVector& vchMnemonicPassphrase, bool fUpdateID);\n     bool SetMnemonic(const SecureString& ssMnemonic, const SecureString& ssMnemonicPassphrase, bool fUpdateID);\n@@ -137,10 +135,9 @@ class CHDPubKey\n \n     ADD_SERIALIZE_METHODS;\n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n     {\n         READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n         READWRITE(extPubKey);\n         READWRITE(hdchainID);\n         READWRITE(nAccountIndex);"
      },
      {
        "sha": "e94a7c37027a761ac58d75d3dab168394543c8c9",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 18,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -25,7 +25,7 @@\n static const char* WWW_AUTH_HEADER_DATA = \"Basic realm=\\\"jsonrpc\\\"\";\n \n /** Simple one-shot callback timer to be used by the RPC mechanism to e.g.\n- * re-lock the wellet.\n+ * re-lock the wallet.\n  */\n class HTTPRPCTimer : public RPCTimerBase\n {\n@@ -45,14 +45,14 @@ class HTTPRPCTimer : public RPCTimerBase\n class HTTPRPCTimerInterface : public RPCTimerInterface\n {\n public:\n-    HTTPRPCTimerInterface(struct event_base* base) : base(base)\n+    HTTPRPCTimerInterface(struct event_base* _base) : base(_base)\n     {\n     }\n-    const char* Name()\n+    const char* Name() override\n     {\n         return \"HTTP\";\n     }\n-    RPCTimerBase* NewTimer(boost::function<void(void)>& func, int64_t millis)\n+    RPCTimerBase* NewTimer(boost::function<void(void)>& func, int64_t millis) override\n     {\n         return new HTTPRPCTimer(base, func, millis);\n     }\n@@ -95,7 +95,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n \n     if (mapMultiArgs.count(\"-rpcauth\") > 0) {\n         //Search for multi-user login/pass \"rpcauth\" from config\n-        BOOST_FOREACH(std::string strRPCAuth, mapMultiArgs[\"-rpcauth\"])\n+        BOOST_FOREACH(std::string strRPCAuth, mapMultiArgs.at(\"-rpcauth\"))\n         {\n             std::vector<std::string> vFields;\n             boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));\n@@ -112,9 +112,9 @@ static bool multiUserAuthorized(std::string strUserPass)\n             std::string strSalt = vFields[1];\n             std::string strHash = vFields[2];\n \n-            unsigned int KEY_SIZE = 32;\n-            unsigned char *out = new unsigned char[KEY_SIZE]; \n-            \n+            static const unsigned int KEY_SIZE = 32;\n+            unsigned char out[KEY_SIZE];\n+\n             CHMAC_SHA256(reinterpret_cast<const unsigned char*>(strSalt.c_str()), strSalt.size()).Write(reinterpret_cast<const unsigned char*>(strPass.c_str()), strPass.size()).Finalize(out);\n             std::vector<unsigned char> hexvec(out, out+KEY_SIZE);\n             std::string strHashFromPass = HexStr(hexvec);\n@@ -127,7 +127,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n     return false;\n }\n \n-static bool RPCAuthorized(const std::string& strAuth)\n+static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUsernameOut)\n {\n     if (strRPCUserColonPass.empty()) // Belt-and-suspenders measure if InitRPCAuthentication was not called\n         return false;\n@@ -136,7 +136,10 @@ static bool RPCAuthorized(const std::string& strAuth)\n     std::string strUserPass64 = strAuth.substr(6);\n     boost::trim(strUserPass64);\n     std::string strUserPass = DecodeBase64(strUserPass64);\n-    \n+\n+    if (strUserPass.find(\":\") != std::string::npos)\n+        strAuthUsernameOut = strUserPass.substr(0, strUserPass.find(\":\"));\n+\n     //Check if authorized under single-user field\n     if (TimingResistantEqual(strUserPass, strRPCUserColonPass)) {\n         return true;\n@@ -159,7 +162,8 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n         return false;\n     }\n \n-    if (!RPCAuthorized(authHeader.second)) {\n+    JSONRPCRequest jreq;\n+    if (!RPCAuthorized(authHeader.second, jreq.authUser)) {\n         LogPrintf(\"ThreadRPCServer incorrect password attempt from %s\\n\", req->GetPeer().ToString());\n \n         /* Deter brute-forcing\n@@ -172,19 +176,21 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n         return false;\n     }\n \n-    JSONRequest jreq;\n     try {\n         // Parse request\n         UniValue valRequest;\n         if (!valRequest.read(req->ReadBody()))\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Parse error\");\n \n+        // Set the URI\n+        jreq.URI = req->GetURI();\n+\n         std::string strReply;\n         // singleton request\n         if (valRequest.isObject()) {\n             jreq.parse(valRequest);\n \n-            UniValue result = tableRPC.execute(jreq.strMethod, jreq.params);\n+            UniValue result = tableRPC.execute(jreq);\n \n             // Send reply\n             strReply = JSONRPCReply(result, NullUniValue, jreq.id);\n@@ -209,7 +215,7 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n \n static bool InitRPCAuthentication()\n {\n-    if (mapArgs[\"-rpcpassword\"] == \"\")\n+    if (GetArg(\"-rpcpassword\", \"\") == \"\")\n     {\n         LogPrintf(\"No rpcpassword set - using random cookie authentication\\n\");\n         if (!GenerateAuthCookie(&strRPCUserColonPass)) {\n@@ -220,7 +226,7 @@ static bool InitRPCAuthentication()\n         }\n     } else {\n         LogPrintf(\"Config options rpcuser and rpcpassword will soon be deprecated. Locally-run instances may remove rpcuser to use cookie-based auth, or may be replaced with rpcauth. Please see share/rpcuser for rpcauth auth generation.\\n\");\n-        strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n+        strRPCUserColonPass = GetArg(\"-rpcuser\", \"\") + \":\" + GetArg(\"-rpcpassword\", \"\");\n     }\n     return true;\n }\n@@ -235,7 +241,7 @@ bool StartHTTPRPC()\n \n     assert(EventBase());\n     httpRPCTimerInterface = new HTTPRPCTimerInterface(EventBase());\n-    RPCRegisterTimerInterface(httpRPCTimerInterface);\n+    RPCSetTimerInterface(httpRPCTimerInterface);\n     return true;\n }\n \n@@ -249,7 +255,7 @@ void StopHTTPRPC()\n     LogPrint(\"rpc\", \"Stopping HTTP RPC server\\n\");\n     UnregisterHTTPHandler(\"/\", true);\n     if (httpRPCTimerInterface) {\n-        RPCUnregisterTimerInterface(httpRPCTimerInterface);\n+        RPCUnsetTimerInterface(httpRPCTimerInterface);\n         delete httpRPCTimerInterface;\n         httpRPCTimerInterface = 0;\n     }"
      },
      {
        "sha": "5786d95ec3c336159cd88e017a18b0ec3c99e89d",
        "filename": "src/httprpc.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/httprpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/httprpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2015 The Bitcoin Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "bf6e8c89398477fd50a6c3259d3422500c676a67",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 61,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2015 The Bitcoin Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -20,6 +19,7 @@\n #include <sys/types.h>\n #include <sys/stat.h>\n #include <signal.h>\n+#include <future>\n \n #include <event2/event.h>\n #include <event2/http.h>\n@@ -35,27 +35,23 @@\n #endif\n #endif\n \n-#include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n-#include <boost/foreach.hpp>\n-#include <boost/scoped_ptr.hpp>\n-\n /** Maximum size of http request (request line + headers) */\n static const size_t MAX_HEADERS_SIZE = 8192;\n \n /** HTTP request work item */\n class HTTPWorkItem : public HTTPClosure\n {\n public:\n-    HTTPWorkItem(HTTPRequest* req, const std::string &path, const HTTPRequestHandler& func):\n-        req(req), path(path), func(func)\n+    HTTPWorkItem(std::unique_ptr<HTTPRequest> _req, const std::string &_path, const HTTPRequestHandler& _func):\n+        req(std::move(_req)), path(_path), func(_func)\n     {\n     }\n-    void operator()()\n+    void operator()() override\n     {\n         func(req.get(), path);\n     }\n \n-    boost::scoped_ptr<HTTPRequest> req;\n+    std::unique_ptr<HTTPRequest> req;\n \n private:\n     std::string path;\n@@ -70,10 +66,9 @@ class WorkQueue\n {\n private:\n     /** Mutex protects entire object */\n-    CWaitableCriticalSection cs;\n-    CConditionVariable cond;\n-    /* XXX in C++11 we can use std::unique_ptr here and avoid manual cleanup */\n-    std::deque<WorkItem*> queue;\n+    std::mutex cs;\n+    std::condition_variable cond;\n+    std::deque<std::unique_ptr<WorkItem>> queue;\n     bool running;\n     size_t maxDepth;\n     int numThreads;\n@@ -85,41 +80,37 @@ class WorkQueue\n         WorkQueue &wq;\n         ThreadCounter(WorkQueue &w): wq(w)\n         {\n-            boost::lock_guard<boost::mutex> lock(wq.cs);\n+            std::lock_guard<std::mutex> lock(wq.cs);\n             wq.numThreads += 1;\n         }\n         ~ThreadCounter()\n         {\n-            boost::lock_guard<boost::mutex> lock(wq.cs);\n+            std::lock_guard<std::mutex> lock(wq.cs);\n             wq.numThreads -= 1;\n             wq.cond.notify_all();\n         }\n     };\n \n public:\n-    WorkQueue(size_t maxDepth) : running(true),\n-                                 maxDepth(maxDepth),\n+    WorkQueue(size_t _maxDepth) : running(true),\n+                                 maxDepth(_maxDepth),\n                                  numThreads(0)\n     {\n     }\n-    /*( Precondition: worker threads have all stopped\n+    /** Precondition: worker threads have all stopped\n      * (call WaitExit)\n      */\n     ~WorkQueue()\n     {\n-        while (!queue.empty()) {\n-            delete queue.front();\n-            queue.pop_front();\n-        }\n     }\n     /** Enqueue a work item */\n     bool Enqueue(WorkItem* item)\n     {\n-        boost::unique_lock<boost::mutex> lock(cs);\n+        std::unique_lock<std::mutex> lock(cs);\n         if (queue.size() >= maxDepth) {\n             return false;\n         }\n-        queue.push_back(item);\n+        queue.emplace_back(std::unique_ptr<WorkItem>(item));\n         cond.notify_one();\n         return true;\n     }\n@@ -128,31 +119,30 @@ class WorkQueue\n     {\n         ThreadCounter count(*this);\n         while (true) {\n-            WorkItem* i = 0;\n+            std::unique_ptr<WorkItem> i;\n             {\n-                boost::unique_lock<boost::mutex> lock(cs);\n+                std::unique_lock<std::mutex> lock(cs);\n                 while (running && queue.empty())\n                     cond.wait(lock);\n                 if (!running)\n                     break;\n-                i = queue.front();\n+                i = std::move(queue.front());\n                 queue.pop_front();\n             }\n             (*i)();\n-            delete i;\n         }\n     }\n     /** Interrupt and exit loops */\n     void Interrupt()\n     {\n-        boost::unique_lock<boost::mutex> lock(cs);\n+        std::unique_lock<std::mutex> lock(cs);\n         running = false;\n         cond.notify_all();\n     }\n     /** Wait for worker threads to exit */\n     void WaitExit()\n     {\n-        boost::unique_lock<boost::mutex> lock(cs);\n+        std::unique_lock<std::mutex> lock(cs);\n         while (numThreads > 0){\n             cond.wait(lock);\n         }\n@@ -161,16 +151,16 @@ class WorkQueue\n     /** Return current depth of queue */\n     size_t Depth()\n     {\n-        boost::unique_lock<boost::mutex> lock(cs);\n+        std::unique_lock<std::mutex> lock(cs);\n         return queue.size();\n     }\n };\n \n struct HTTPPathHandler\n {\n     HTTPPathHandler() {}\n-    HTTPPathHandler(std::string prefix, bool exactMatch, HTTPRequestHandler handler):\n-        prefix(prefix), exactMatch(exactMatch), handler(handler)\n+    HTTPPathHandler(std::string _prefix, bool _exactMatch, HTTPRequestHandler _handler):\n+        prefix(_prefix), exactMatch(_exactMatch), handler(_handler)\n     {\n     }\n     std::string prefix;\n@@ -198,7 +188,7 @@ static bool ClientAllowed(const CNetAddr& netaddr)\n {\n     if (!netaddr.IsValid())\n         return false;\n-    BOOST_FOREACH (const CSubNet& subnet, rpc_allow_subnets)\n+    for(const CSubNet& subnet : rpc_allow_subnets)\n         if (subnet.Match(netaddr))\n             return true;\n     return false;\n@@ -215,8 +205,8 @@ static bool InitHTTPAllowList()\n     rpc_allow_subnets.push_back(CSubNet(localv4, 8));      // always allow IPv4 local subnet\n     rpc_allow_subnets.push_back(CSubNet(localv6));         // always allow IPv6 localhost\n     if (mapMultiArgs.count(\"-rpcallowip\")) {\n-        const std::vector<std::string>& vAllow = mapMultiArgs[\"-rpcallowip\"];\n-        BOOST_FOREACH (std::string strAllow, vAllow) {\n+        const std::vector<std::string>& vAllow = mapMultiArgs.at(\"-rpcallowip\");\n+        for (std::string strAllow : vAllow) {\n             CSubNet subnet;\n             LookupSubNet(strAllow.c_str(), subnet);\n             if (!subnet.IsValid()) {\n@@ -229,7 +219,7 @@ static bool InitHTTPAllowList()\n         }\n     }\n     std::string strAllowed;\n-    BOOST_FOREACH (const CSubNet& subnet, rpc_allow_subnets)\n+    for (const CSubNet& subnet : rpc_allow_subnets)\n         strAllowed += subnet.ToString() + \" \";\n     LogPrint(\"http\", \"Allowing HTTP connections from: %s\\n\", strAllowed);\n     return true;\n@@ -295,12 +285,14 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n \n     // Dispatch to worker thread\n     if (i != iend) {\n-        std::unique_ptr<HTTPWorkItem> item(new HTTPWorkItem(hreq.release(), path, i->handler));\n+        std::unique_ptr<HTTPWorkItem> item(new HTTPWorkItem(std::move(hreq), path, i->handler));\n         assert(workQueue);\n         if (workQueue->Enqueue(item.get()))\n             item.release(); /* if true, queue took ownership */\n-        else\n+        else {\n+            LogPrintf(\"WARNING: request rejected because http work queue depth exceeded, it can be increased with the -rpcworkqueue= setting\\n\");\n             item->req->WriteReply(HTTP_INTERNAL, \"Work queue depth exceeded\");\n+        }\n     } else {\n         hreq->WriteReply(HTTP_NOTFOUND);\n     }\n@@ -314,13 +306,14 @@ static void http_reject_request_cb(struct evhttp_request* req, void*)\n }\n \n /** Event dispatcher thread */\n-static void ThreadHTTP(struct event_base* base, struct evhttp* http)\n+static bool ThreadHTTP(struct event_base* base, struct evhttp* http)\n {\n     RenameThread(\"syscoin-http\");\n     LogPrint(\"http\", \"Entering http event loop\\n\");\n     event_base_dispatch(base);\n     // Event loop will be interrupted by InterruptHTTPServer()\n     LogPrint(\"http\", \"Exited http event loop\\n\");\n+    return event_base_got_break(base) == 0;\n }\n \n /** Bind HTTP server to specified addresses */\n@@ -330,14 +323,14 @@ static bool HTTPBindAddresses(struct evhttp* http)\n     std::vector<std::pair<std::string, uint16_t> > endpoints;\n \n     // Determine what addresses to bind to\n-    if (!mapArgs.count(\"-rpcallowip\")) { // Default to loopback if not allowing external IPs\n+    if (!IsArgSet(\"-rpcallowip\")) { // Default to loopback if not allowing external IPs\n         endpoints.push_back(std::make_pair(\"::1\", defaultPort));\n         endpoints.push_back(std::make_pair(\"127.0.0.1\", defaultPort));\n-        if (mapArgs.count(\"-rpcbind\")) {\n+        if (IsArgSet(\"-rpcbind\")) {\n             LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n         }\n-    } else if (mapArgs.count(\"-rpcbind\")) { // Specific bind address\n-        const std::vector<std::string>& vbind = mapMultiArgs[\"-rpcbind\"];\n+    } else if (mapMultiArgs.count(\"-rpcbind\")) { // Specific bind address\n+        const std::vector<std::string>& vbind = mapMultiArgs.at(\"-rpcbind\");\n         for (std::vector<std::string>::const_iterator i = vbind.begin(); i != vbind.end(); ++i) {\n             int port = defaultPort;\n             std::string host;\n@@ -449,17 +442,22 @@ bool InitHTTPServer()\n     return true;\n }\n \n-boost::thread threadHTTP;\n+std::thread threadHTTP;\n+std::future<bool> threadResult;\n \n bool StartHTTPServer()\n {\n     LogPrint(\"http\", \"Starting HTTP server\\n\");\n     int rpcThreads = std::max((long)GetArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n     LogPrintf(\"HTTP: starting %d worker threads\\n\", rpcThreads);\n-    threadHTTP = boost::thread(boost::bind(&ThreadHTTP, eventBase, eventHTTP));\n+    std::packaged_task<bool(event_base*, evhttp*)> task(ThreadHTTP);\n+    threadResult = task.get_future();\n+    threadHTTP = std::thread(std::move(task), eventBase, eventHTTP);\n \n-    for (int i = 0; i < rpcThreads; i++)\n-        boost::thread(boost::bind(&HTTPWorkQueueRun, workQueue));\n+    for (int i = 0; i < rpcThreads; i++) {\n+        std::thread rpc_worker(HTTPWorkQueueRun, workQueue);\n+        rpc_worker.detach();\n+    }\n     return true;\n }\n \n@@ -468,7 +466,7 @@ void InterruptHTTPServer()\n     LogPrint(\"http\", \"Interrupting HTTP server\\n\");\n     if (eventHTTP) {\n         // Unlisten sockets\n-        BOOST_FOREACH (evhttp_bound_socket *socket, boundSockets) {\n+        for (evhttp_bound_socket *socket : boundSockets) {\n             evhttp_del_accept_socket(eventHTTP, socket);\n         }\n         // Reject requests on current connections\n@@ -499,16 +497,11 @@ void StopHTTPServer()\n         // master that appears to be solved, so in the future that solution\n         // could be used again (if desirable).\n         // (see discussion in https://github.com/syscoin/syscoin/pull/6990)\n-#if BOOST_VERSION >= 105000\n-        if (!threadHTTP.try_join_for(boost::chrono::milliseconds(2000))) {\n-#else\n-        if (!threadHTTP.timed_join(boost::posix_time::milliseconds(2000))) {\n-#endif\n-\n+        if (threadResult.valid() && threadResult.wait_for(std::chrono::milliseconds(2000)) == std::future_status::timeout) {\n             LogPrintf(\"HTTP event loop did not exit within allotted time, sending loopbreak\\n\");\n             event_base_loopbreak(eventBase);\n-            threadHTTP.join();\n         }\n+        threadHTTP.join();\n     }\n     if (eventHTTP) {\n         evhttp_free(eventHTTP);\n@@ -535,8 +528,8 @@ static void httpevent_callback_fn(evutil_socket_t, short, void* data)\n         delete self;\n }\n \n-HTTPEvent::HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const boost::function<void(void)>& handler):\n-    deleteWhenTriggered(deleteWhenTriggered), handler(handler)\n+HTTPEvent::HTTPEvent(struct event_base* base, bool _deleteWhenTriggered, const std::function<void(void)>& _handler):\n+    deleteWhenTriggered(_deleteWhenTriggered), handler(_handler)\n {\n     ev = event_new(base, -1, 0, httpevent_callback_fn, this);\n     assert(ev);\n@@ -552,7 +545,7 @@ void HTTPEvent::trigger(struct timeval* tv)\n     else\n         evtimer_add(ev, tv); // trigger after timeval passed\n }\n-HTTPRequest::HTTPRequest(struct evhttp_request* req) : req(req),\n+HTTPRequest::HTTPRequest(struct evhttp_request* _req) : req(_req),\n                                                        replySent(false)\n {\n }\n@@ -617,7 +610,7 @@ void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n     assert(evb);\n     evbuffer_add(evb, strReply.data(), strReply.size());\n     HTTPEvent* ev = new HTTPEvent(eventBase, true,\n-        boost::bind(evhttp_send_reply, req, nStatus, (const char*)NULL, (struct evbuffer *)NULL));\n+        std::bind(evhttp_send_reply, req, nStatus, (const char*)NULL, (struct evbuffer *)NULL));\n     ev->trigger(0);\n     replySent = true;\n     req = 0; // transferred back to main thread"
      },
      {
        "sha": "1331dea8df630e211a3c44eec06780c9499ab321",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2015 The Bitcoin Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -8,9 +7,7 @@\n \n #include <string>\n #include <stdint.h>\n-#include <boost/thread.hpp>\n-#include <boost/scoped_ptr.hpp>\n-#include <boost/function.hpp>\n+#include <functional>\n \n static const int DEFAULT_HTTP_THREADS=4;\n static const int DEFAULT_HTTP_WORKQUEUE=16;\n@@ -36,7 +33,7 @@ void InterruptHTTPServer();\n void StopHTTPServer();\n \n /** Handler for requests to a certain HTTP path */\n-typedef boost::function<void(HTTPRequest* req, const std::string &)> HTTPRequestHandler;\n+typedef std::function<bool(HTTPRequest* req, const std::string &)> HTTPRequestHandler;\n /** Register handler for prefix.\n  * If multiple handlers match a prefix, the first-registered one will\n  * be invoked.\n@@ -133,7 +130,7 @@ class HTTPEvent\n      * deleteWhenTriggered deletes this event object after the event is triggered (and the handler called)\n      * handler is the handler to call when the event is triggered.\n      */\n-    HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const boost::function<void(void)>& handler);\n+    HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const std::function<void(void)>& handler);\n     ~HTTPEvent();\n \n     /** Trigger the event. If tv is 0, trigger it immediately. Otherwise trigger it after\n@@ -142,7 +139,7 @@ class HTTPEvent\n     void trigger(struct timeval* tv);\n \n     bool deleteWhenTriggered;\n-    boost::function<void(void)> handler;\n+    std::function<void(void)> handler;\n private:\n     struct event* ev;\n };"
      },
      {
        "sha": "341a313efc9f765a4d8a5cf25a4fe889c6838fe5",
        "filename": "src/indirectmap.h",
        "status": "added",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/indirectmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/indirectmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/indirectmap.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -0,0 +1,56 @@\n+// Copyright (c) 2016 The Syscoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef SYSCOIN_INDIRECTMAP_H\n+#define SYSCOIN_INDIRECTMAP_H\n+\n+template <class T>\n+struct DereferencingComparator { bool operator()(const T a, const T b) const { return *a < *b; } };\n+\n+/* Map whose keys are pointers, but are compared by their dereferenced values.\n+ *\n+ * Differs from a plain std::map<const K*, T, DereferencingComparator<K*> > in\n+ * that methods that take a key for comparison take a K rather than taking a K*\n+ * (taking a K* would be confusing, since it's the value rather than the address\n+ * of the object for comparison that matters due to the dereferencing comparator).\n+ *\n+ * Objects pointed to by keys must not be modified in any way that changes the\n+ * result of DereferencingComparator.\n+ */\n+template <class K, class T>\n+class indirectmap {\n+private:\n+    typedef std::map<const K*, T, DereferencingComparator<const K*> > base;\n+    base m;\n+public:\n+    typedef typename base::iterator iterator;\n+    typedef typename base::const_iterator const_iterator;\n+    typedef typename base::size_type size_type;\n+    typedef typename base::value_type value_type;\n+\n+    // passthrough (pointer interface)\n+    std::pair<iterator, bool> insert(const value_type& value) { return m.insert(value); }\n+\n+    // pass address (value interface)\n+    iterator find(const K& key)                     { return m.find(&key); }\n+    const_iterator find(const K& key) const         { return m.find(&key); }\n+    iterator lower_bound(const K& key)              { return m.lower_bound(&key); }\n+    const_iterator lower_bound(const K& key) const  { return m.lower_bound(&key); }\n+    size_type erase(const K& key)                   { return m.erase(&key); }\n+    size_type count(const K& key) const             { return m.count(&key); }\n+\n+    // passthrough\n+    bool empty() const              { return m.empty(); }\n+    size_type size() const          { return m.size(); }\n+    size_type max_size() const      { return m.max_size(); }\n+    void clear()                    { m.clear(); }\n+    iterator begin()                { return m.begin(); }\n+    iterator end()                  { return m.end(); }\n+    const_iterator begin() const    { return m.begin(); }\n+    const_iterator end() const      { return m.end(); }\n+    const_iterator cbegin() const   { return m.cbegin(); }\n+    const_iterator cend() const     { return m.cend(); }\n+};\n+\n+#endif // SYSCOIN_INDIRECTMAP_H"
      },
      {
        "sha": "cf2d824a915d36f20048fd4696eff42f6ff7c5b7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1624,
        "deletions": 1766,
        "changes": 3390,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "1c720361dfbe71d918256e4d8d35f96e6d212982",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 27,
        "deletions": 5,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -17,9 +16,8 @@ namespace boost\n class thread_group;\n } // namespace boost\n \n-extern CWallet* pwalletMain;\n-\n void StartShutdown();\n+void StartRestart();\n bool ShutdownRequested();\n /** Interrupt threads */\n void Interrupt(boost::thread_group& threadGroup);\n@@ -28,7 +26,30 @@ void Shutdown();\n void InitLogging();\n //!Parameter interaction: change current parameters depending on various rules\n void InitParameterInteraction();\n-bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler);\n+\n+/** Initialize syscoin core: Basic context setup.\n+ *  @note This can be done before daemonization.\n+ *  @pre Parameters should be parsed and config file should be read.\n+ */\n+bool AppInitBasicSetup();\n+/**\n+ * Initialization: parameter interaction.\n+ * @note This can be done before daemonization.\n+ * @pre Parameters should be parsed and config file should be read, AppInitBasicSetup should have been called.\n+ */\n+bool AppInitParameterInteraction();\n+/**\n+ * Initialization sanity checks: ecc init, sanity checks, dir lock.\n+ * @note This can be done before daemonization.\n+ * @pre Parameters should be parsed and config file should be read, AppInitParameterInteraction should have been called.\n+ */\n+bool AppInitSanityChecks();\n+/**\n+ * Syscoin core main initialization.\n+ * @note This should only be done after daemonization.\n+ * @pre Parameters should be parsed and config file should be read, AppInitSanityChecks should have been called.\n+ */\n+bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler);\n void PrepareShutdown();\n \n /** The help message mode determines what help message to show */\n@@ -41,4 +62,5 @@ enum HelpMessageMode {\n std::string HelpMessage(HelpMessageMode mode);\n /** Returns licensing information (for -version) */\n std::string LicenseInfo();\n+\n #endif // SYSCOIN_INIT_H"
      },
      {
        "sha": "fbc8599db05d9fb4040ed97744a1eafc0e60d119",
        "filename": "src/instantx.cpp",
        "status": "modified",
        "additions": 277,
        "deletions": 257,
        "changes": 534,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/instantx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/instantx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -11,17 +10,25 @@\n #include \"masternodeman.h\"\n #include \"messagesigner.h\"\n #include \"net.h\"\n+#include \"netmessagemaker.h\"\n #include \"protocol.h\"\n #include \"spork.h\"\n #include \"sync.h\"\n #include \"txmempool.h\"\n #include \"util.h\"\n #include \"consensus/validation.h\"\n-#include \"alias.h\"\n+#include \"validationinterface.h\"\n+#include \"warnings.h\"\n+#ifdef ENABLE_WALLET\n+#include \"wallet/wallet.h\"\n+#endif // ENABLE_WALLET\n+\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/thread.hpp>\n \n+#ifdef ENABLE_WALLET\n extern CWallet* pwalletMain;\n+#endif // ENABLE_WALLET\n extern CTxMemPool mempool;\n \n bool fEnableInstantSend = true;\n@@ -41,88 +48,95 @@ CInstantSend instantsend;\n // CInstantSend\n //\n \n-void CInstantSend::ProcessMessage(CNode* pfrom, std::string& strCommand, CDataStream& vRecv, CConnman& connman)\n+void CInstantSend::ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, CConnman& connman)\n {\n     if(fLiteMode) return; // disable all Syscoin specific functionality\n     if(!sporkManager.IsSporkActive(SPORK_2_INSTANTSEND_ENABLED)) return;\n \n-\n-    // NOTE: NetMsgType::TXLOCKREQUEST is handled via ProcessMessage() in main.cpp\n+    // NOTE: NetMsgType::TXLOCKREQUEST is handled via ProcessMessage() in net_processing.cpp\n \n     if (strCommand == NetMsgType::TXLOCKVOTE) // InstantSend Transaction Lock Consensus Votes\n     {\n-        if(pfrom->nVersion < MIN_INSTANTSEND_PROTO_VERSION) return;\n+        if(pfrom->nVersion < MIN_INSTANTSEND_PROTO_VERSION) {\n+            LogPrint(\"instantsend\", \"TXLOCKVOTE -- peer=%d using obsolete version %i\\n\", pfrom->id, pfrom->nVersion);\n+            connman.PushMessage(pfrom, CNetMsgMaker(pfrom->GetSendVersion()).Make(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n+                               strprintf(\"Version must be %d or greater\", MIN_INSTANTSEND_PROTO_VERSION)));\n+            return;\n+        }\n \n         CTxLockVote vote;\n         vRecv >> vote;\n \n-        LOCK(cs_main);\n-#ifdef ENABLE_WALLET\n-        if (pwalletMain)\n-            LOCK(pwalletMain->cs_wallet);\n-#endif\n-        LOCK(cs_instantsend);\n \n         uint256 nVoteHash = vote.GetHash();\n \n         pfrom->setAskFor.erase(nVoteHash);\n \n-\t\tif (!masternodeSync.IsMasternodeListSynced()) return;\n+        // Ignore any InstantSend messages until masternode list is synced\n+        if(!masternodeSync.IsMasternodeListSynced()) return;\n \n-        if(mapTxLockVotes.count(nVoteHash)) return;\n-        mapTxLockVotes.insert(std::make_pair(nVoteHash, vote));\n+        {\n+            LOCK(cs_instantsend);\n+            auto ret = mapTxLockVotes.emplace(nVoteHash, vote);\n+            if (!ret.second) return;\n+        }\n \n-        ProcessTxLockVote(pfrom, vote, connman);\n+        ProcessNewTxLockVote(pfrom, vote, connman);\n \n         return;\n     }\n }\n \n bool CInstantSend::ProcessTxLockRequest(const CTxLockRequest& txLockRequest, CConnman& connman)\n {\n-\tLOCK2(cs_main, cs_instantsend);\n-\n-\tuint256 txHash = txLockRequest.GetHash();\n-\n-\t// Check to see if we conflict with existing completed lock\n-\tBOOST_FOREACH(const CTxIn& txin, txLockRequest.vin) {\n-\t\tstd::map<COutPoint, uint256>::iterator it = mapLockedOutpoints.find(txin.prevout);\n-\t\tif (it != mapLockedOutpoints.end() && it->second != txLockRequest.GetHash()) {\n-\t\t\t// Conflicting with complete lock, proceed to see if we should cancel them both\n-\t\t\tLogPrintf(\"CInstantSend::ProcessTxLockRequest -- WARNING: Found conflicting completed Transaction Lock, txid=%s, completed lock txid=%s\\n\",\n-\t\t\t\ttxLockRequest.GetHash().ToString(), it->second.ToString());\n-\t\t}\n-\t}\n-\n-\t// Check to see if there are votes for conflicting request,\n-\t// if so - do not fail, just warn user\n-\tBOOST_FOREACH(const CTxIn& txin, txLockRequest.vin) {\n-\t\tstd::map<COutPoint, std::set<uint256> >::iterator it = mapVotedOutpoints.find(txin.prevout);\n-\t\tif (it != mapVotedOutpoints.end()) {\n-\t\t\tBOOST_FOREACH(const uint256& hash, it->second) {\n-\t\t\t\tif (hash != txLockRequest.GetHash()) {\n-\t\t\t\t\tLogPrint(\"instantsend\", \"CInstantSend::ProcessTxLockRequest -- Double spend attempt! %s\\n\", txin.prevout.ToStringShort());\n-\t\t\t\t\t// do not fail here, let it go and see which one will get the votes to be locked\n-\t\t\t\t\t// TODO: notify zmq+script\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tif (!CreateTxLockCandidate(txLockRequest)) {\n-\t\t// smth is not right\n-\t\tLogPrintf(\"CInstantSend::ProcessTxLockRequest -- CreateTxLockCandidate failed, txid=%s\\n\", txHash.ToString());\n-\t\treturn false;\n-\t}\n-\tLogPrintf(\"CInstantSend::ProcessTxLockRequest -- accepted, txid=%s\\n\", txHash.ToString());\n-\n-\t// Masternodes will sometimes propagate votes before the transaction is known to the client.\n-\t// If this just happened - lock inputs, resolve conflicting locks, update transaction status\n-\t// forcing external script notification.\n-\tstd::map<uint256, CTxLockCandidate>::iterator itLockCandidate = mapTxLockCandidates.find(txHash);\n-\tTryToFinalizeLockCandidate(itLockCandidate->second);\n-\n-\treturn true;\n+    LOCK(cs_main);\n+#ifdef ENABLE_WALLET\n+    LOCK(pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+#endif\n+    LOCK2(mempool.cs, cs_instantsend);\n+\n+    uint256 txHash = txLockRequest.GetHash();\n+\n+    // Check to see if we conflict with existing completed lock\n+    for (const auto& txin : txLockRequest.tx->vin) {\n+        std::map<COutPoint, uint256>::iterator it = mapLockedOutpoints.find(txin.prevout);\n+        if(it != mapLockedOutpoints.end() && it->second != txLockRequest.GetHash()) {\n+            // Conflicting with complete lock, proceed to see if we should cancel them both\n+            LogPrintf(\"CInstantSend::ProcessTxLockRequest -- WARNING: Found conflicting completed Transaction Lock, txid=%s, completed lock txid=%s\\n\",\n+                    txLockRequest.GetHash().ToString(), it->second.ToString());\n+        }\n+    }\n+\n+    // Check to see if there are votes for conflicting request,\n+    // if so - do not fail, just warn user\n+    for (const auto& txin : txLockRequest.tx->vin) {\n+        std::map<COutPoint, std::set<uint256> >::iterator it = mapVotedOutpoints.find(txin.prevout);\n+        if(it != mapVotedOutpoints.end()) {\n+            for (const auto& hash : it->second) {\n+                if(hash != txLockRequest.GetHash()) {\n+                    LogPrint(\"instantsend\", \"CInstantSend::ProcessTxLockRequest -- Double spend attempt! %s\\n\", txin.prevout.ToStringShort());\n+                    // do not fail here, let it go and see which one will get the votes to be locked\n+                    // TODO: notify zmq+script\n+                }\n+            }\n+        }\n+    }\n+\n+    if(!CreateTxLockCandidate(txLockRequest)) {\n+        // smth is not right\n+        LogPrintf(\"CInstantSend::ProcessTxLockRequest -- CreateTxLockCandidate failed, txid=%s\\n\", txHash.ToString());\n+        return false;\n+    }\n+    LogPrintf(\"CInstantSend::ProcessTxLockRequest -- accepted, txid=%s\\n\", txHash.ToString());\n+\n+    // Masternodes will sometimes propagate votes before the transaction is known to the client.\n+    // If this just happened - process orphan votes, lock inputs, resolve conflicting locks,\n+    // update transaction status forcing external script/zmq notifications.\n+    ProcessOrphanTxLockVotes();\n+    std::map<uint256, CTxLockCandidate>::iterator itLockCandidate = mapTxLockCandidates.find(txHash);\n+    TryToFinalizeLockCandidate(itLockCandidate->second);\n+\n+    return true;\n }\n \n bool CInstantSend::CreateTxLockCandidate(const CTxLockRequest& txLockRequest)\n@@ -139,7 +153,7 @@ bool CInstantSend::CreateTxLockCandidate(const CTxLockRequest& txLockRequest)\n \n         CTxLockCandidate txLockCandidate(txLockRequest);\n         // all inputs should already be checked by txLockRequest.IsValid() above, just use them now\n-        BOOST_REVERSE_FOREACH(const CTxIn& txin, txLockRequest.vin) {\n+        for(const auto& txin : txLockRequest.tx->vin) {\n             txLockCandidate.AddOutPointLock(txin.prevout);\n         }\n         mapTxLockCandidates.insert(std::make_pair(txHash, txLockCandidate));\n@@ -153,7 +167,7 @@ bool CInstantSend::CreateTxLockCandidate(const CTxLockRequest& txLockRequest)\n         LogPrintf(\"CInstantSend::CreateTxLockCandidate -- update empty, txid=%s\\n\", txHash.ToString());\n \n         // all inputs should already be checked by txLockRequest.IsValid() above, just use them now\n-        BOOST_REVERSE_FOREACH(const CTxIn& txin, txLockRequest.vin) {\n+        for(const auto& txin : txLockRequest.tx->vin) {\n             itLockCandidate->second.AddOutPointLock(txin.prevout);\n         }\n     } else {\n@@ -171,27 +185,40 @@ void CInstantSend::CreateEmptyTxLockCandidate(const uint256& txHash)\n     const CTxLockRequest txLockRequest = CTxLockRequest();\n     mapTxLockCandidates.insert(std::make_pair(txHash, CTxLockCandidate(txLockRequest)));\n }\n+\n void CInstantSend::Vote(const uint256& txHash, CConnman& connman)\n {\n-\tAssertLockHeld(cs_main);\n-\tLOCK(cs_instantsend);\n-\n-\tstd::map<uint256, CTxLockCandidate>::iterator itLockCandidate = mapTxLockCandidates.find(txHash);\n-\tif (itLockCandidate == mapTxLockCandidates.end()) return;\n-\tVote(itLockCandidate->second, connman);\n-\t// Let's see if our vote changed smth\n-\tTryToFinalizeLockCandidate(itLockCandidate->second);\n+    AssertLockHeld(cs_main);\n+#ifdef ENABLE_WALLET\n+    LOCK(pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+#endif\n+\n+    CTxLockRequest dummyRequest;\n+    CTxLockCandidate txLockCandidate(dummyRequest);\n+    {\n+        LOCK(cs_instantsend);\n+        auto itLockCandidate = mapTxLockCandidates.find(txHash);\n+        if (itLockCandidate == mapTxLockCandidates.end()) return;\n+        txLockCandidate = itLockCandidate->second;\n+        Vote(txLockCandidate, connman);\n+    }\n+\n+    // Let's see if our vote changed smth\n+    LOCK2(mempool.cs, cs_instantsend);\n+    TryToFinalizeLockCandidate(txLockCandidate);\n }\n+\n void CInstantSend::Vote(CTxLockCandidate& txLockCandidate, CConnman& connman)\n {\n-    if(!fMasterNode) return;\n+    if(!fMasternodeMode) return;\n     if(!sporkManager.IsSporkActive(SPORK_2_INSTANTSEND_ENABLED)) return;\n \n-    LOCK2(cs_main, cs_instantsend);\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(cs_instantsend);\n \n     uint256 txHash = txLockCandidate.GetHash();\n-\t// We should never vote on a Transaction Lock Request that was not (yet) accepted by the mempool\n-\tif (mapLockRequestAccepted.find(txHash) == mapLockRequestAccepted.end()) return;\n+    // We should never vote on a Transaction Lock Request that was not (yet) accepted by the mempool\n+    if(mapLockRequestAccepted.find(txHash) == mapLockRequestAccepted.end()) return;\n     // check if we need to vote on this candidate's outpoints,\n     // it's possible that we need to vote for several of them\n     std::map<COutPoint, COutPointLock>::iterator itOutpointLock = txLockCandidate.mapOutPointLocks.begin();\n@@ -203,7 +230,7 @@ void CInstantSend::Vote(CTxLockCandidate& txLockCandidate, CConnman& connman)\n             return;\n         }\n \n-        int nLockInputHeight = nPrevoutHeight + 4;\n+        int nLockInputHeight = nPrevoutHeight + Params().GetConsensus().nInstantSendConfirmationsRequired - 2;\n \n         int nRank;\n         if(!mnodeman.GetMasternodeRank(activeMasternode.outpoint, nRank, nLockInputHeight, MIN_INSTANTSEND_PROTO_VERSION)) {\n@@ -227,7 +254,7 @@ void CInstantSend::Vote(CTxLockCandidate& txLockCandidate, CConnman& connman)\n         // refuse to vote twice or to include the same outpoint in another tx\n         bool fAlreadyVoted = false;\n         if(itVoted != mapVotedOutpoints.end()) {\n-            BOOST_FOREACH(const uint256& hash, itVoted->second) {\n+            for (const auto& hash : itVoted->second) {\n                 std::map<uint256, CTxLockCandidate>::iterator it2 = mapTxLockCandidates.find(hash);\n                 if(it2->second.HasMasternodeVoted(itOutpointLock->first, activeMasternode.outpoint)) {\n                     // we already voted for this outpoint to be included either in the same tx or in a competing one,\n@@ -283,101 +310,146 @@ void CInstantSend::Vote(CTxLockCandidate& txLockCandidate, CConnman& connman)\n     }\n }\n \n-//received a consensus vote\n-bool CInstantSend::ProcessTxLockVote(CNode* pfrom, CTxLockVote& vote, CConnman& connman)\n+bool CInstantSend::ProcessNewTxLockVote(CNode* pfrom, const CTxLockVote& vote, CConnman& connman)\n {\n-    // cs_main, cs_wallet and cs_instantsend should be already locked\n-    AssertLockHeld(cs_main);\n-#ifdef ENABLE_WALLET\n-    if (pwalletMain)\n-        AssertLockHeld(pwalletMain->cs_wallet);\n-#endif\n-    AssertLockHeld(cs_instantsend);\n-\n     uint256 txHash = vote.GetTxHash();\n+    uint256 nVoteHash = vote.GetHash();\n \n     if(!vote.IsValid(pfrom, connman)) {\n         // could be because of missing MN\n-        LogPrint(\"instantsend\", \"CInstantSend::ProcessTxLockVote -- Vote is invalid, txid=%s\\n\", txHash.ToString());\n+        LogPrint(\"instantsend\", \"CInstantSend::%s -- Vote is invalid, txid=%s\\n\", __func__, txHash.ToString());\n         return false;\n     }\n \n     // relay valid vote asap\n     vote.Relay(connman);\n \n+    LOCK(cs_main);\n+#ifdef ENABLE_WALLET\n+    LOCK(pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+#endif\n+    LOCK2(mempool.cs, cs_instantsend);\n+\n     // Masternodes will sometimes propagate votes before the transaction is known to the client,\n     // will actually process only after the lock request itself has arrived\n \n     std::map<uint256, CTxLockCandidate>::iterator it = mapTxLockCandidates.find(txHash);\n     if(it == mapTxLockCandidates.end() || !it->second.txLockRequest) {\n-        if(!mapTxLockVotesOrphan.count(vote.GetHash())) {\n+        // no or empty tx lock candidate\n+        if(it == mapTxLockCandidates.end()) {\n             // start timeout countdown after the very first vote\n             CreateEmptyTxLockCandidate(txHash);\n-            mapTxLockVotesOrphan[vote.GetHash()] = vote;\n-            LogPrint(\"instantsend\", \"CInstantSend::ProcessTxLockVote -- Orphan vote: txid=%s  masternode=%s new\\n\",\n-                    txHash.ToString(), vote.GetMasternodeOutpoint().ToStringShort());\n-            bool fReprocess = true;\n-            std::map<uint256, CTxLockRequest>::iterator itLockRequest = mapLockRequestAccepted.find(txHash);\n-            if(itLockRequest == mapLockRequestAccepted.end()) {\n-                itLockRequest = mapLockRequestRejected.find(txHash);\n-                if(itLockRequest == mapLockRequestRejected.end()) {\n-                    // still too early, wait for tx lock request\n-                    fReprocess = false;\n-                }\n-            }\n-            if(fReprocess && IsEnoughOrphanVotesForTx(itLockRequest->second)) {\n-                // We have enough votes for corresponding lock to complete,\n-                // tx lock request should already be received at this stage.\n-                LogPrint(\"instantsend\", \"CInstantSend::ProcessTxLockVote -- Found enough orphan votes, reprocessing Transaction Lock Request: txid=%s\\n\", txHash.ToString());\n-                ProcessTxLockRequest(itLockRequest->second, connman);\n-                return true;\n-            }\n-        } else {\n-            LogPrint(\"instantsend\", \"CInstantSend::ProcessTxLockVote -- Orphan vote: txid=%s  masternode=%s seen\\n\",\n-                    txHash.ToString(), vote.GetMasternodeOutpoint().ToStringShort());\n         }\n+        bool fInserted = mapTxLockVotesOrphan.emplace(nVoteHash, vote).second;\n+        LogPrint(\"instantsend\", \"CInstantSend::%s -- Orphan vote: txid=%s  masternode=%s %s\\n\",\n+                __func__, txHash.ToString(), vote.GetMasternodeOutpoint().ToStringShort(), fInserted ? \"new\" : \"seen\");\n \n         // This tracks those messages and allows only the same rate as of the rest of the network\n         // TODO: make sure this works good enough for multi-quorum\n \n         int nMasternodeOrphanExpireTime = GetTime() + 60*10; // keep time data for 10 minutes\n-        if(!mapMasternodeOrphanVotes.count(vote.GetMasternodeOutpoint())) {\n-            mapMasternodeOrphanVotes[vote.GetMasternodeOutpoint()] = nMasternodeOrphanExpireTime;\n+        auto itMnOV = mapMasternodeOrphanVotes.find(vote.GetMasternodeOutpoint());\n+        if(itMnOV == mapMasternodeOrphanVotes.end()) {\n+            mapMasternodeOrphanVotes.emplace(vote.GetMasternodeOutpoint(), nMasternodeOrphanExpireTime);\n         } else {\n-            int64_t nPrevOrphanVote = mapMasternodeOrphanVotes[vote.GetMasternodeOutpoint()];\n-            if(nPrevOrphanVote > GetTime() && nPrevOrphanVote > GetAverageMasternodeOrphanVoteTime()) {\n-                LogPrint(\"instantsend\", \"CInstantSend::ProcessTxLockVote -- masternode is spamming orphan Transaction Lock Votes: txid=%s  masternode=%s\\n\",\n-                        txHash.ToString(), vote.GetMasternodeOutpoint().ToStringShort());\n+            if(itMnOV->second > GetTime() && itMnOV->second > GetAverageMasternodeOrphanVoteTime()) {\n+                LogPrint(\"instantsend\", \"CInstantSend::%s -- masternode is spamming orphan Transaction Lock Votes: txid=%s  masternode=%s\\n\",\n+                        __func__, txHash.ToString(), vote.GetMasternodeOutpoint().ToStringShort());\n                 // Misbehaving(pfrom->id, 1);\n                 return false;\n             }\n             // not spamming, refresh\n-            mapMasternodeOrphanVotes[vote.GetMasternodeOutpoint()] = nMasternodeOrphanExpireTime;\n+            itMnOV->second = nMasternodeOrphanExpireTime;\n         }\n \n         return true;\n     }\n \n+    // We have a valid (non-empty) tx lock candidate\n+    CTxLockCandidate& txLockCandidate = it->second;\n+\n+    if (txLockCandidate.IsTimedOut()) {\n+        LogPrint(\"instantsend\", \"CInstantSend::%s -- too late, Transaction Lock timed out, txid=%s\\n\", __func__, txHash.ToString());\n+        return false;\n+    }\n+\n+    LogPrint(\"instantsend\", \"CInstantSend::%s -- Transaction Lock Vote, txid=%s\\n\", __func__, txHash.ToString());\n+\n+    UpdateVotedOutpoints(vote, txLockCandidate);\n+\n+    if(!txLockCandidate.AddVote(vote)) {\n+        // this should never happen\n+        return false;\n+    }\n+\n+    int nSignatures = txLockCandidate.CountVotes();\n+    int nSignaturesMax = txLockCandidate.txLockRequest.GetMaxSignatures();\n+    LogPrint(\"instantsend\", \"CInstantSend::%s -- Transaction Lock signatures count: %d/%d, vote hash=%s\\n\", __func__,\n+            nSignatures, nSignaturesMax, nVoteHash.ToString());\n+\n+    TryToFinalizeLockCandidate(txLockCandidate);\n+\n+    return true;\n+}\n+\n+bool CInstantSend::ProcessOrphanTxLockVote(const CTxLockVote& vote)\n+{\n+    // cs_main, cs_wallet and cs_instantsend should be already locked\n+    AssertLockHeld(cs_main);\n+#ifdef ENABLE_WALLET\n+    if (pwalletMain)\n+        AssertLockHeld(pwalletMain->cs_wallet);\n+#endif\n+    AssertLockHeld(cs_instantsend);\n+\n+    uint256 txHash = vote.GetTxHash();\n+\n+    // We shouldn't process orphan votes without a valid tx lock candidate\n+    std::map<uint256, CTxLockCandidate>::iterator it = mapTxLockCandidates.find(txHash);\n+    if(it == mapTxLockCandidates.end() || !it->second.txLockRequest)\n+        return false; // this shouldn never happen\n+\n     CTxLockCandidate& txLockCandidate = it->second;\n \n     if (txLockCandidate.IsTimedOut()) {\n-        LogPrint(\"instantsend\", \"CInstantSend::ProcessTxLockVote -- too late, Transaction Lock timed out, txid=%s\\n\", txHash.ToString());\n+        LogPrint(\"instantsend\", \"CInstantSend::%s -- too late, Transaction Lock timed out, txid=%s\\n\", __func__, txHash.ToString());\n         return false;\n     }\n \n-    LogPrint(\"instantsend\", \"CInstantSend::ProcessTxLockVote -- Transaction Lock Vote, txid=%s\\n\", txHash.ToString());\n+    LogPrint(\"instantsend\", \"CInstantSend::%s -- Transaction Lock Vote, txid=%s\\n\", __func__, txHash.ToString());\n+\n+    UpdateVotedOutpoints(vote, txLockCandidate);\n+\n+    if(!txLockCandidate.AddVote(vote)) {\n+        // this should never happen\n+        return false;\n+    }\n+\n+    int nSignatures = txLockCandidate.CountVotes();\n+    int nSignaturesMax = txLockCandidate.txLockRequest.GetMaxSignatures();\n+    LogPrint(\"instantsend\", \"CInstantSend::%s -- Transaction Lock signatures count: %d/%d, vote hash=%s\\n\",\n+            __func__, nSignatures, nSignaturesMax, vote.GetHash().ToString());\n+\n+    return true;\n+}\n+\n+void CInstantSend::UpdateVotedOutpoints(const CTxLockVote& vote, CTxLockCandidate& txLockCandidate)\n+{\n+    AssertLockHeld(cs_instantsend);\n+\n+    uint256 txHash = vote.GetTxHash();\n \n     std::map<COutPoint, std::set<uint256> >::iterator it1 = mapVotedOutpoints.find(vote.GetOutpoint());\n     if(it1 != mapVotedOutpoints.end()) {\n-        BOOST_FOREACH(const uint256& hash, it1->second) {\n+        for (const auto& hash : it1->second) {\n             if(hash != txHash) {\n                 // same outpoint was already voted to be locked by another tx lock request,\n                 // let's see if it was the same masternode who voted on this outpoint\n                 // for another tx lock request\n                 std::map<uint256, CTxLockCandidate>::iterator it2 = mapTxLockCandidates.find(hash);\n                 if(it2 !=mapTxLockCandidates.end() && it2->second.HasMasternodeVoted(vote.GetOutpoint(), vote.GetMasternodeOutpoint())) {\n                     // yes, it was the same masternode\n-                    LogPrintf(\"CInstantSend::ProcessTxLockVote -- masternode sent conflicting votes! %s\\n\", vote.GetMasternodeOutpoint().ToStringShort());\n+                    LogPrintf(\"CInstantSend::%s -- masternode sent conflicting votes! %s\\n\", __func__, vote.GetMasternodeOutpoint().ToStringShort());\n                     // mark both Lock Candidates as attacked, none of them should complete,\n                     // or at least the new (current) one shouldn't even\n                     // if the second one was already completed earlier\n@@ -394,88 +466,33 @@ bool CInstantSend::ProcessTxLockVote(CNode* pfrom, CTxLockVote& vote, CConnman&\n         // store all votes, regardless of them being sent by malicious masternode or not\n         it1->second.insert(txHash);\n     } else {\n-        std::set<uint256> setHashes;\n-        setHashes.insert(txHash);\n-        mapVotedOutpoints.insert(std::make_pair(vote.GetOutpoint(), setHashes));\n-    }\n-\n-    if(!txLockCandidate.AddVote(vote)) {\n-        // this should never happen\n-        return false;\n+        mapVotedOutpoints.emplace(vote.GetOutpoint(), std::set<uint256>({txHash}));\n     }\n-\n-    int nSignatures = txLockCandidate.CountVotes();\n-    int nSignaturesMax = txLockCandidate.txLockRequest.GetMaxSignatures();\n-    LogPrint(\"instantsend\", \"CInstantSend::ProcessTxLockVote -- Transaction Lock signatures count: %d/%d, vote hash=%s\\n\",\n-            nSignatures, nSignaturesMax, vote.GetHash().ToString());\n-\n-    TryToFinalizeLockCandidate(txLockCandidate);\n-\n-    return true;\n }\n \n-void CInstantSend::ProcessOrphanTxLockVotes(CConnman& connman)\n+void CInstantSend::ProcessOrphanTxLockVotes()\n {\n-    LOCK(cs_main);\n-#ifdef ENABLE_WALLET\n-    if (pwalletMain)\n-        LOCK(pwalletMain->cs_wallet);\n-#endif\n-    LOCK(cs_instantsend);\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(cs_instantsend);\n \n     std::map<uint256, CTxLockVote>::iterator it = mapTxLockVotesOrphan.begin();\n     while(it != mapTxLockVotesOrphan.end()) {\n-        if(ProcessTxLockVote(NULL, it->second, connman)) {\n+        if(ProcessOrphanTxLockVote(it->second)) {\n             mapTxLockVotesOrphan.erase(it++);\n         } else {\n             ++it;\n         }\n     }\n }\n \n-bool CInstantSend::IsEnoughOrphanVotesForTx(const CTxLockRequest& txLockRequest)\n-{\n-    // There could be a situation when we already have quite a lot of votes\n-    // but tx lock request still wasn't received. Let's scan through\n-    // orphan votes to check if this is the case.\n-    BOOST_FOREACH(const CTxIn& txin, txLockRequest.vin) {\n-        if(!IsEnoughOrphanVotesForTxAndOutPoint(txLockRequest.GetHash(), txin.prevout)) {\n-            return false;\n-        }\n-    }\n-    return true;\n-}\n-\n-bool CInstantSend::IsEnoughOrphanVotesForTxAndOutPoint(const uint256& txHash, const COutPoint& outpoint)\n-{\n-    // Scan orphan votes to check if this outpoint has enough orphan votes to be locked in some tx.\n-    LOCK2(cs_main, cs_instantsend);\n-    int nCountVotes = 0;\n-    std::map<uint256, CTxLockVote>::iterator it = mapTxLockVotesOrphan.begin();\n-    while(it != mapTxLockVotesOrphan.end()) {\n-        if(it->second.GetTxHash() == txHash && it->second.GetOutpoint() == outpoint) {\n-            nCountVotes++;\n-            if(nCountVotes >= COutPointLock::SIGNATURES_REQUIRED) {\n-                return true;\n-            }\n-        }\n-        ++it;\n-    }\n-    return false;\n-}\n-\n void CInstantSend::TryToFinalizeLockCandidate(const CTxLockCandidate& txLockCandidate)\n {\n     if(!sporkManager.IsSporkActive(SPORK_2_INSTANTSEND_ENABLED)) return;\n \n-    LOCK(cs_main);\n-#ifdef ENABLE_WALLET\n-    if (pwalletMain)\n-        LOCK(pwalletMain->cs_wallet);\n-#endif\n-    LOCK(cs_instantsend);\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(cs_instantsend);\n \n-    uint256 txHash = txLockCandidate.txLockRequest.GetHash();\n+    uint256 txHash = txLockCandidate.txLockRequest.tx->GetHash();\n     if(txLockCandidate.IsAllOutPointsReady() && !IsLockedInstantSendTransaction(txHash)) {\n         // we have enough votes now\n         LogPrint(\"instantsend\", \"CInstantSend::TryToFinalizeLockCandidate -- Transaction Lock is ready to complete, txid=%s\\n\", txHash.ToString());\n@@ -488,7 +505,8 @@ void CInstantSend::TryToFinalizeLockCandidate(const CTxLockCandidate& txLockCand\n \n void CInstantSend::UpdateLockedTransaction(const CTxLockCandidate& txLockCandidate)\n {\n-    // cs_wallet and cs_instantsend should be already locked\n+    // cs_main, cs_wallet and cs_instantsend should be already locked\n+    AssertLockHeld(cs_main);\n #ifdef ENABLE_WALLET\n     if (pwalletMain)\n         AssertLockHeld(pwalletMain->cs_wallet);\n@@ -512,7 +530,8 @@ void CInstantSend::UpdateLockedTransaction(const CTxLockCandidate& txLockCandida\n     }\n #endif\n \n-    GetMainSignals().NotifyTransactionLock(txLockCandidate.txLockRequest);\n+    GetMainSignals().NotifyTransactionLock(*txLockCandidate.txLockRequest.tx);\n+\n     LogPrint(\"instantsend\", \"CInstantSend::UpdateLockedTransaction -- done, txid=%s\\n\", txHash.ToString());\n }\n \n@@ -546,16 +565,17 @@ bool CInstantSend::GetLockedOutPointTxHash(const COutPoint& outpoint, uint256& h\n \n bool CInstantSend::ResolveConflicts(const CTxLockCandidate& txLockCandidate)\n {\n-    LOCK2(cs_main, cs_instantsend);\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(cs_instantsend);\n \n     uint256 txHash = txLockCandidate.GetHash();\n \n     // make sure the lock is ready\n     if(!txLockCandidate.IsAllOutPointsReady()) return false;\n \n-    LOCK(mempool.cs); // protect mempool.mapNextTx\n+    AssertLockHeld(mempool.cs); // protect mempool.mapNextTx\n \n-    BOOST_FOREACH(const CTxIn& txin, txLockCandidate.txLockRequest.vin) {\n+    for (const auto& txin : txLockCandidate.txLockRequest.tx->vin) {\n         uint256 hashConflicting;\n         if(GetLockedOutPointTxHash(txin.prevout, hashConflicting) && txHash != hashConflicting) {\n             // completed lock which conflicts with another completed one?\n@@ -576,8 +596,8 @@ bool CInstantSend::ResolveConflicts(const CTxLockCandidate& txLockCandidate)\n             itLockCandidateConflicting->second.SetConfirmedHeight(0); // expired\n             CheckAndRemove(); // clean up\n             // AlreadyHave should still return \"true\" for both of them\n-            mapLockRequestRejected.insert(make_pair(txHash, txLockRequest));\n-            mapLockRequestRejected.insert(make_pair(hashConflicting, txLockRequestConflicting));\n+            mapLockRequestRejected.insert(std::make_pair(txHash, txLockRequest));\n+            mapLockRequestRejected.insert(std::make_pair(hashConflicting, txLockRequestConflicting));\n \n             // TODO: clean up mapLockRequestRejected later somehow\n             //       (not a big issue since we already PoSe ban malicious masternodes\n@@ -591,23 +611,24 @@ bool CInstantSend::ResolveConflicts(const CTxLockCandidate& txLockCandidate)\n             return false;\n         } else if (mempool.mapNextTx.count(txin.prevout)) {\n             // check if it's in mempool\n-            hashConflicting = mempool.mapNextTx[txin.prevout].ptx->GetHash();\n+            hashConflicting = mempool.mapNextTx.find(txin.prevout)->second->GetHash();\n             if(txHash == hashConflicting) continue; // matches current, not a conflict, skip to next txin\n             // conflicts with tx in mempool\n             LogPrintf(\"CInstantSend::ResolveConflicts -- ERROR: Failed to complete Transaction Lock, conflicts with mempool, txid=%s\\n\", txHash.ToString());\n             return false;\n         }\n     } // FOREACH\n     // No conflicts were found so far, check to see if it was already included in block\n-    CTransaction txTmp;\n+    CTransactionRef txTmp;\n     uint256 hashBlock;\n     if(GetTransaction(txHash, txTmp, Params().GetConsensus(), hashBlock, true) && hashBlock != uint256()) {\n         LogPrint(\"instantsend\", \"CInstantSend::ResolveConflicts -- Done, %s is included in block %s\\n\", txHash.ToString(), hashBlock.ToString());\n         return true;\n     }\n     // Not in block yet, make sure all its inputs are still unspent\n-    BOOST_FOREACH(const CTxIn& txin, txLockCandidate.txLockRequest.vin) {\n-        if(!GetUTXOCoins(txin.prevout)) {\n+    for (const auto& txin : txLockCandidate.txLockRequest.tx->vin) {\n+        Coin coin;\n+        if(!GetUTXOCoin(txin.prevout, coin)) {\n             // Not in UTXO anymore? A conflicting tx was mined while we were waiting for votes.\n             LogPrintf(\"CInstantSend::ResolveConflicts -- ERROR: Failed to find UTXO %s, can't complete Transaction Lock\\n\", txin.prevout.ToStringShort());\n             return false;\n@@ -725,13 +746,13 @@ bool CInstantSend::AlreadyHave(const uint256& hash)\n void CInstantSend::AcceptLockRequest(const CTxLockRequest& txLockRequest)\n {\n     LOCK(cs_instantsend);\n-    mapLockRequestAccepted.insert(make_pair(txLockRequest.GetHash(), txLockRequest));\n+    mapLockRequestAccepted.insert(std::make_pair(txLockRequest.GetHash(), txLockRequest));\n }\n \n void CInstantSend::RejectLockRequest(const CTxLockRequest& txLockRequest)\n {\n     LOCK(cs_instantsend);\n-    mapLockRequestRejected.insert(make_pair(txLockRequest.GetHash(), txLockRequest));\n+    mapLockRequestRejected.insert(std::make_pair(txLockRequest.GetHash(), txLockRequest));\n }\n \n bool CInstantSend::HasTxLockRequest(const uint256& txHash)\n@@ -745,7 +766,7 @@ bool CInstantSend::GetTxLockRequest(const uint256& txHash, CTxLockRequest& txLoc\n     LOCK(cs_instantsend);\n \n     std::map<uint256, CTxLockCandidate>::iterator it = mapTxLockCandidates.find(txHash);\n-    if(it == mapTxLockCandidates.end()) return false;\n+    if(it == mapTxLockCandidates.end() || !it->second.txLockRequest) return false;\n     txLockRequestRet = it->second.txLockRequest;\n \n     return true;\n@@ -764,7 +785,7 @@ bool CInstantSend::GetTxLockVote(const uint256& hash, CTxLockVote& txLockVoteRet\n \n bool CInstantSend::IsInstantSendReadyToLock(const uint256& txHash)\n {\n-    if(!fEnableInstantSend || fLargeWorkForkFound || fLargeWorkInvalidChainFound ||\n+    if(!fEnableInstantSend || GetfLargeWorkForkFound() || GetfLargeWorkInvalidChainFound() ||\n         !sporkManager.IsSporkActive(SPORK_2_INSTANTSEND_ENABLED)) return false;\n \n     LOCK(cs_instantsend);\n@@ -776,7 +797,7 @@ bool CInstantSend::IsInstantSendReadyToLock(const uint256& txHash)\n \n bool CInstantSend::IsLockedInstantSendTransaction(const uint256& txHash)\n {\n-    if(!fEnableInstantSend || fLargeWorkForkFound || fLargeWorkInvalidChainFound ||\n+    if(!fEnableInstantSend || GetfLargeWorkForkFound() || GetfLargeWorkInvalidChainFound() ||\n         !sporkManager.IsSporkActive(SPORK_3_INSTANTSEND_BLOCK_FILTERING)) return false;\n \n     LOCK(cs_instantsend);\n@@ -802,7 +823,7 @@ bool CInstantSend::IsLockedInstantSendTransaction(const uint256& txHash)\n int CInstantSend::GetTransactionLockSignatures(const uint256& txHash)\n {\n     if(!fEnableInstantSend) return -1;\n-    if(fLargeWorkForkFound || fLargeWorkInvalidChainFound) return -2;\n+    if(GetfLargeWorkForkFound() || GetfLargeWorkInvalidChainFound()) return -2;\n     if(!sporkManager.IsSporkActive(SPORK_2_INSTANTSEND_ENABLED)) return -3;\n \n     LOCK(cs_instantsend);\n@@ -850,7 +871,7 @@ void CInstantSend::UpdatedBlockTip(const CBlockIndex *pindex)\n     nCachedBlockHeight = pindex->nHeight;\n }\n \n-void CInstantSend::SyncTransaction(const CTransaction& tx, const CBlock* pblock)\n+void CInstantSend::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock)\n {\n     // Update lock candidates and votes if corresponding tx confirmed\n     // or went from confirmed to 0-confirmed or conflicted.\n@@ -861,19 +882,8 @@ void CInstantSend::SyncTransaction(const CTransaction& tx, const CBlock* pblock)\n \n     uint256 txHash = tx.GetHash();\n \n-    // When tx is 0-confirmed or conflicted, pblock is NULL and nHeightNew should be set to -1\n-    CBlockIndex* pblockindex = NULL;\n-    if(pblock) {\n-        uint256 blockHash = pblock->GetHash();\n-        BlockMap::iterator mi = mapBlockIndex.find(blockHash);\n-        if(mi == mapBlockIndex.end() || !mi->second) {\n-            // shouldn't happen\n-            LogPrint(\"instantsend\", \"CTxLockRequest::SyncTransaction -- Failed to find block %s\\n\", blockHash.ToString());\n-            return;\n-        }\n-        pblockindex = mi->second;\n-    }\n-    int nHeightNew = pblockindex ? pblockindex->nHeight : -1;\n+    // When tx is 0-confirmed or conflicted, posInBlock is SYNC_TRANSACTION_NOT_IN_BLOCK and nHeightNew should be set to -1\n+    int nHeightNew = posInBlock == CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK ? -1 : pindex->nHeight;\n \n     LogPrint(\"instantsend\", \"CInstantSend::SyncTransaction -- txid=%s nHeightNew=%d\\n\", txHash.ToString(), nHeightNew);\n \n@@ -928,47 +938,50 @@ std::string CInstantSend::ToString()\n \n bool CTxLockRequest::IsValid() const\n {\n-\t// SYSCOIN\n-\tif (nVersion == SYSCOIN_TX_VERSION) return false;\n-    if(vout.size() < 1) return false;\n+    if(tx->vout.size() < 1) return false;\n \n-    if(vin.size() > WARN_MANY_INPUTS) {\n+    if(tx->vin.size() > WARN_MANY_INPUTS) {\n         LogPrint(\"instantsend\", \"CTxLockRequest::IsValid -- WARNING: Too many inputs: tx=%s\", ToString());\n     }\n \n-    LOCK(cs_main);\n-    if(!CheckFinalTx(*this)) {\n+    AssertLockHeld(cs_main);\n+    if(!CheckFinalTx(*tx)) {\n         LogPrint(\"instantsend\", \"CTxLockRequest::IsValid -- Transaction is not final: tx=%s\", ToString());\n         return false;\n     }\n \n     CAmount nValueIn = 0;\n \n-    BOOST_FOREACH(const CTxIn& txin, vin) {\n+    int nInstantSendConfirmationsRequired = Params().GetConsensus().nInstantSendConfirmationsRequired;\n+\n+    for (const auto& txin : tx->vin) {\n \n-\t\tconst CCoins *coins = GetUTXOCoins(txin.prevout);\n-        if(!coins) {\n+        Coin coin;\n+\n+        if(!GetUTXOCoin(txin.prevout, coin)) {\n             LogPrint(\"instantsend\", \"CTxLockRequest::IsValid -- Failed to find UTXO %s\\n\", txin.prevout.ToStringShort());\n             return false;\n         }\n-        int nTxAge = chainActive.Height() - coins->nHeight + 1;\n-\t\t// 1 less than the \"send IX\" gui requires, in case of a block propagating the network at the time\n-\t\tint nConfirmationsRequired = INSTANTSEND_CONFIRMATIONS_REQUIRED - 1;\n \n-\t\tif (nTxAge < nConfirmationsRequired) {\n+        int nTxAge = chainActive.Height() - coin.nHeight + 1;\n+        // 1 less than the \"send IX\" gui requires, in case of a block propagating the network at the time\n+        int nConfirmationsRequired = nInstantSendConfirmationsRequired - 1;\n+\n+        if(nTxAge < nConfirmationsRequired) {\n             LogPrint(\"instantsend\", \"CTxLockRequest::IsValid -- outpoint %s too new: nTxAge=%d, nConfirmationsRequired=%d, txid=%s\\n\",\n-                    txin.prevout.ToStringShort(), nTxAge, INSTANTSEND_CONFIRMATIONS_REQUIRED, GetHash().ToString());\n+                    txin.prevout.ToStringShort(), nTxAge, nConfirmationsRequired, GetHash().ToString());\n             return false;\n         }\n \n-        nValueIn += coins->vout[txin.prevout.n].nValue;\n+        nValueIn += coin.out.nValue;\n     }\n \n     if(nValueIn > sporkManager.GetSporkValue(SPORK_5_INSTANTSEND_MAX_VALUE)*COIN) {\n         LogPrint(\"instantsend\", \"CTxLockRequest::IsValid -- Transaction value too high: nValueIn=%d, tx=%s\", nValueIn, ToString());\n         return false;\n     }\n-\tCAmount nValueOut = GetValueOut();\n+\n+    CAmount nValueOut = tx->GetValueOut();\n \n     if(nValueIn - nValueOut < GetMinFee()) {\n         LogPrint(\"instantsend\", \"CTxLockRequest::IsValid -- did not include enough fees in transaction: fees=%d, tx=%s\", nValueOut - nValueIn, ToString());\n@@ -981,12 +994,12 @@ bool CTxLockRequest::IsValid() const\n CAmount CTxLockRequest::GetMinFee() const\n {\n     CAmount nMinFee = MIN_FEE;\n-    return std::max(nMinFee, CAmount(vin.size() * nMinFee));\n+    return std::max(nMinFee, CAmount(tx->vin.size() * nMinFee));\n }\n \n int CTxLockRequest::GetMaxSignatures() const\n {\n-    return vin.size() * COutPointLock::SIGNATURES_TOTAL;\n+    return tx->vin.size() * COutPointLock::SIGNATURES_TOTAL;\n }\n \n //\n@@ -1001,13 +1014,13 @@ bool CTxLockVote::IsValid(CNode* pnode, CConnman& connman) const\n         return false;\n     }\n \n-    const CCoins *coins = GetUTXOCoins(outpoint);\n-    if(!coins) {\n+    Coin coin;\n+    if(!GetUTXOCoin(outpoint, coin)) {\n         LogPrint(\"instantsend\", \"CTxLockVote::IsValid -- Failed to find UTXO %s\\n\", outpoint.ToStringShort());\n         return false;\n     }\n \n-    int nLockInputHeight = coins->nHeight + 4;\n+    int nLockInputHeight = coin.nHeight + Params().GetConsensus().nInstantSendConfirmationsRequired - 2;\n \n     int nRank;\n     if(!mnodeman.GetMasternodeRank(outpointMasternode, nRank, nLockInputHeight, MIN_INSTANTSEND_PROTO_VERSION)) {\n@@ -1034,17 +1047,17 @@ bool CTxLockVote::IsValid(CNode* pnode, CConnman& connman) const\n \n uint256 CTxLockVote::GetHash() const\n {\n-    CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n-    ss << txHash;\n-    ss << outpoint;\n-    ss << outpointMasternode;\n-    return ss.GetHash();\n+    return SerializeHash(*this);\n+}\n+\n+uint256 CTxLockVote::GetSignatureHash() const\n+{\n+    return GetHash();\n }\n \n bool CTxLockVote::CheckSignature() const\n {\n     std::string strError;\n-    std::string strMessage = txHash.ToString() + outpoint.ToStringShort();\n \n     masternode_info_t infoMn;\n \n@@ -1053,28 +1066,35 @@ bool CTxLockVote::CheckSignature() const\n         return false;\n     }\n \n-    if(!CMessageSigner::VerifyMessage(infoMn.pubKeyMasternode, vchMasternodeSignature, strMessage, strError)) {\n-        LogPrintf(\"CTxLockVote::CheckSignature -- VerifyMessage() failed, error: %s\\n\", strError);\n-        return false;\n-    }\n+    if (sporkManager.IsSporkActive(SPORK_6_NEW_SIGS)) {\n+        uint256 hash = GetSignatureHash();\n+\n+        if (!CHashSigner::VerifyHash(hash, infoMn.pubKeyMasternode, vchMasternodeSignature, strError)) {\n+            LogPrintf(\"CTxLockVote::CheckSignature -- VerifyMessage() failed, error: %s\\n\", strError);\n+            return false;\n+        }\n+    } \n \n     return true;\n }\n \n bool CTxLockVote::Sign()\n {\n     std::string strError;\n-    std::string strMessage = txHash.ToString() + outpoint.ToStringShort();\n \n-    if(!CMessageSigner::SignMessage(strMessage, vchMasternodeSignature, activeMasternode.keyMasternode)) {\n-        LogPrintf(\"CTxLockVote::Sign -- SignMessage() failed\\n\");\n-        return false;\n-    }\n+    if (sporkManager.IsSporkActive(SPORK_6_NEW_SIGS)) {\n+        uint256 hash = GetSignatureHash();\n \n-    if(!CMessageSigner::VerifyMessage(activeMasternode.pubKeyMasternode, vchMasternodeSignature, strMessage, strError)) {\n-        LogPrintf(\"CTxLockVote::Sign -- VerifyMessage() failed, error: %s\\n\", strError);\n-        return false;\n-    }\n+        if(!CHashSigner::SignHash(hash, activeMasternode.keyMasternode, vchMasternodeSignature)) {\n+            LogPrintf(\"CTxLockVote::Sign -- SignHash() failed\\n\");\n+            return false;\n+        }\n+\n+        if (!CHashSigner::VerifyHash(hash, activeMasternode.pubKeyMasternode, vchMasternodeSignature, strError)) {\n+            LogPrintf(\"CTxLockVote::Sign -- VerifyHash() failed, error: %s\\n\", strError);\n+            return false;\n+        }\n+    } \n \n     return true;\n }\n@@ -1144,7 +1164,7 @@ void COutPointLock::Relay(CConnman& connman) const\n \n void CTxLockCandidate::AddOutPointLock(const COutPoint& outpoint)\n {\n-    mapOutPointLocks.insert(make_pair(outpoint, COutPointLock(outpoint)));\n+    mapOutPointLocks.insert(std::make_pair(outpoint, COutPointLock(outpoint)));\n }\n \n void CTxLockCandidate::MarkOutpointAsAttacked(const COutPoint& outpoint)\n@@ -1204,7 +1224,7 @@ bool CTxLockCandidate::IsTimedOut() const\n \n void CTxLockCandidate::Relay(CConnman& connman) const\n {\n-    connman.RelayTransaction(txLockRequest);\n+    connman.RelayTransaction(*txLockRequest.tx);\n     std::map<COutPoint, COutPointLock>::const_iterator itOutpointLock = mapOutPointLocks.begin();\n     while(itOutpointLock != mapOutPointLocks.end()) {\n         itOutpointLock->second.Relay(connman);"
      },
      {
        "sha": "128fb38224c5dec63722d7f2207840022af97bec",
        "filename": "src/instantx.h",
        "status": "modified",
        "additions": 50,
        "deletions": 19,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/instantx.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/instantx.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/instantx.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #ifndef INSTANTX_H\n@@ -19,17 +18,19 @@ extern CInstantSend instantsend;\n \n /*\n     At 15 signatures, 1/2 of the masternode network can be owned by\n-    one party without comprimising the security of InstantSend\n+    one party without compromising the security of InstantSend\n     (1000/2150.0)**10 = 0.00047382219560689856\n     (1000/2900.0)**10 = 2.3769498616783657e-05\n \n     ### getting 5 of 10 signatures w/ 1000 nodes of 2900\n     (1000/2900.0)**5 = 0.004875397277841433\n */\n-static const int INSTANTSEND_CONFIRMATIONS_REQUIRED = 6;\n+\n+static const int MIN_INSTANTSEND_DEPTH              = 0;\n+static const int MAX_INSTANTSEND_DEPTH              = 60;\n static const int DEFAULT_INSTANTSEND_DEPTH          = 5;\n \n-static const int MIN_INSTANTSEND_PROTO_VERSION      = 70217;\n+static const int MIN_INSTANTSEND_PROTO_VERSION      = MIN_PEER_PROTO_VERSION;\n \n // For how long we are going to accept votes/locks\n // after we saw the first one for a specific transaction\n@@ -67,10 +68,11 @@ class CInstantSend\n     void Vote(CTxLockCandidate& txLockCandidate, CConnman& connman);\n \n     //process consensus vote message\n-    bool ProcessTxLockVote(CNode* pfrom, CTxLockVote& vote, CConnman& connman);\n-    void ProcessOrphanTxLockVotes(CConnman& connman);\n-    bool IsEnoughOrphanVotesForTx(const CTxLockRequest& txLockRequest);\n-    bool IsEnoughOrphanVotesForTxAndOutPoint(const uint256& txHash, const COutPoint& outpoint);\n+    bool ProcessNewTxLockVote(CNode* pfrom, const CTxLockVote& vote, CConnman& connman);\n+\n+    void UpdateVotedOutpoints(const CTxLockVote& vote, CTxLockCandidate& txLockCandidate);\n+    bool ProcessOrphanTxLockVote(const CTxLockVote& vote);\n+    void ProcessOrphanTxLockVotes();\n     int64_t GetAverageMasternodeOrphanVoteTime();\n \n     void TryToFinalizeLockCandidate(const CTxLockCandidate& txLockCandidate);\n@@ -84,10 +86,10 @@ class CInstantSend\n public:\n     CCriticalSection cs_instantsend;\n \n-    void ProcessMessage(CNode* pfrom, std::string& strCommand, CDataStream& vRecv, CConnman& connman);\n+    void ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, CConnman& connman);\n \n     bool ProcessTxLockRequest(const CTxLockRequest& txLockRequest, CConnman& connman);\n-\tvoid Vote(const uint256& txHash, CConnman& connman);\n+    void Vote(const uint256& txHash, CConnman& connman);\n \n     bool AlreadyHave(const uint256& hash);\n \n@@ -115,26 +117,52 @@ class CInstantSend\n     void Relay(const uint256& txHash, CConnman& connman);\n \n     void UpdatedBlockTip(const CBlockIndex *pindex);\n-    void SyncTransaction(const CTransaction& tx, const CBlock* pblock);\n+    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock);\n \n     std::string ToString();\n };\n \n-class CTxLockRequest : public CTransaction\n+class CTxLockRequest\n {\n-private:\n-    static const CAmount MIN_FEE            = 0.0001 * COIN;\n \n public:\n+\tstatic const CAmount MIN_FEE = 0.001 * COIN;\n     static const int WARN_MANY_INPUTS       = 100;\n \n-    CTxLockRequest() = default;\n-    CTxLockRequest(const CTransaction& tx) : CTransaction(tx) {};\n+    CTransactionRef tx;\n+\n+    CTxLockRequest() : tx(MakeTransactionRef()) {}\n+    CTxLockRequest(const CTransaction& _tx) : tx(MakeTransactionRef(_tx)) {};\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(tx);\n+    }\n \n     bool IsValid() const;\n     CAmount GetMinFee() const;\n     int GetMaxSignatures() const;\n \n+    const uint256 &GetHash() const {\n+        return tx->GetHash();\n+    }\n+\n+    std::string ToString() const {\n+        return tx->ToString();\n+    }\n+\n+    friend bool operator==(const CTxLockRequest& a, const CTxLockRequest& b)\n+    {\n+        return *a.tx == *b.tx;\n+    }\n+\n+    friend bool operator!=(const CTxLockRequest& a, const CTxLockRequest& b)\n+    {\n+        return *a.tx != *b.tx;\n+    }\n+\n     explicit operator bool() const\n     {\n         return *this != CTxLockRequest();\n@@ -174,14 +202,17 @@ class CTxLockVote\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n         READWRITE(txHash);\n         READWRITE(outpoint);\n         READWRITE(outpointMasternode);\n-        READWRITE(vchMasternodeSignature);\n+        if (!(s.GetType() & SER_GETHASH)) {\n+            READWRITE(vchMasternodeSignature);\n+        }\n     }\n \n     uint256 GetHash() const;\n+    uint256 GetSignatureHash() const;\n \n     uint256 GetTxHash() const { return txHash; }\n     COutPoint GetOutpoint() const { return outpoint; }"
      },
      {
        "sha": "be08dcd1e43a790cb5c9d0951440a3d90e48b516",
        "filename": "src/keepass.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 20,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/keepass.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/keepass.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keepass.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -19,8 +18,6 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n-#include <boost/foreach.hpp>\n-\n #include <event2/event.h>\n #include <event2/http.h>\n #include <event2/buffer.h>\n@@ -125,12 +122,12 @@ void CKeePassIntegrator::init()\n     }\n }\n \n-void CKeePassIntegrator::CKeePassRequest::addStrParameter(std::string strName, std::string strValue)\n+void CKeePassIntegrator::CKeePassRequest::addStrParameter(const std::string& strName, const std::string& strValue)\n {\n     requestObj.push_back(Pair(strName, strValue));\n }\n \n-void CKeePassIntegrator::CKeePassRequest::addStrParameter(std::string strName, SecureString sValue)\n+void CKeePassIntegrator::CKeePassRequest::addStrParameter(const std::string& strName, const SecureString& sValue)\n {\n     std::string sCipherValue;\n \n@@ -158,7 +155,7 @@ void CKeePassIntegrator::CKeePassRequest::init()\n     addStrParameter(\"RequestType\", strType);\n }\n \n-void CKeePassIntegrator::CKeePassResponse::parseResponse(std::string strResponse)\n+void CKeePassIntegrator::CKeePassResponse::parseResponse(const std::string& strResponse)\n {\n     UniValue responseValue;\n     if(!responseValue.read(strResponse))\n@@ -174,12 +171,12 @@ void CKeePassIntegrator::CKeePassResponse::parseResponse(std::string strResponse\n     strIV = DecodeBase64(getStr(\"Nonce\"));\n }\n \n-std::string CKeePassIntegrator::CKeePassResponse::getStr(std::string strName)\n+std::string CKeePassIntegrator::CKeePassResponse::getStr(const std::string& strName)\n {\n     return responseObj[strName].get_str();\n }\n \n-SecureString CKeePassIntegrator::CKeePassResponse::getSecureStr(std::string strName)\n+SecureString CKeePassIntegrator::CKeePassResponse::getSecureStr(const std::string& strName)\n {\n     std::string strValueBase64Encrypted(responseObj[strName].get_str());\n     SecureString sValue;\n@@ -196,7 +193,7 @@ SecureString CKeePassIntegrator::CKeePassResponse::getSecureStr(std::string strN\n     return sValue;\n }\n \n-SecureString CKeePassIntegrator::CKeePassResponse::decrypt(std::string strValueBase64Encrypted)\n+SecureString CKeePassIntegrator::CKeePassResponse::decrypt(const std::string& strValueBase64Encrypted)\n {\n     std::string strValueEncrypted = DecodeBase64(strValueBase64Encrypted);\n     SecureString sValue;\n@@ -233,8 +230,7 @@ SecureString CKeePassIntegrator::generateRandomKey(size_t nSize)\n     SecureString sKey;\n     sKey.resize(nSize);\n \n-    RandAddSeedPerfmon();\n-    GetRandBytes((unsigned char *) &sKey[0], nSize);\n+    GetStrongRandBytes((unsigned char *) &sKey[0], nSize);\n \n     return sKey;\n }\n@@ -250,7 +246,7 @@ std::string CKeePassIntegrator::constructHTTPPost(const std::string& strMsg, con\n       << \"Content-Length: \" << strMsg.size() << \"\\r\\n\"\n       << \"Connection: close\\r\\n\"\n       << \"Accept: application/json\\r\\n\";\n-    BOOST_FOREACH(const PAIRTYPE(std::string, std::string)& item, mapRequestHeaders)\n+    for (const auto& item : mapRequestHeaders)\n         streamOut << item.first << \": \" << item.second << \"\\r\\n\";\n     streamOut << \"\\r\\n\" << strMsg;\n \n@@ -290,7 +286,7 @@ static void http_request_done(struct evhttp_request *req, void *ctx)\n }\n \n // Send RPC message to KeePassHttp\n-void CKeePassIntegrator::doHTTPPost(const std::string& sRequest, int& nStatus, std::string& strResponse)\n+void CKeePassIntegrator::doHTTPPost(const std::string& sRequest, int& nStatusRet, std::string& strResponseRet)\n {\n //    // Prepare communication\n //    boost::asio::io_service io_service;\n@@ -406,7 +402,7 @@ void CKeePassIntegrator::doHTTPPost(const std::string& sRequest, int& nStatus, s\n //    ReadHTTPMessage(response_stream, mapHeaders, strResponse, nProto, std::numeric_limits<size_t>::max());\n //    LogPrint(\"keepass\", \"CKeePassIntegrator::doHTTPPost -- Processed body\\n\");\n \n-    nStatus = response.nStatus;\n+    nStatusRet = response.nStatus;\n     if (response.nStatus == 0)\n         throw std::runtime_error(\"couldn't connect to server\");\n     else if (response.nStatus >= 400 && response.nStatus != HTTP_BAD_REQUEST && response.nStatus != HTTP_NOT_FOUND && response.nStatus != HTTP_INTERNAL_SERVER_ERROR)\n@@ -422,7 +418,7 @@ void CKeePassIntegrator::doHTTPPost(const std::string& sRequest, int& nStatus, s\n     if (reply.empty())\n         throw std::runtime_error(\"expected reply to have result, error and id properties\");\n \n-    strResponse = valReply.get_str();\n+    strResponseRet = valReply.get_str();\n }\n \n void CKeePassIntegrator::rpcTestAssociation(bool bTriggerUnlock)\n@@ -538,13 +534,13 @@ SecureString CKeePassIntegrator::generateKeePassKey()\n     return sKeyBase64;\n }\n \n-void CKeePassIntegrator::rpcAssociate(std::string& strId, SecureString& sKeyBase64)\n+void CKeePassIntegrator::rpcAssociate(std::string& strIdRet, SecureString& sKeyBase64Ret)\n {\n     sKey = generateRandomKey(KEEPASS_CRYPTO_KEY_SIZE);\n     CKeePassRequest request(sKey, \"associate\");\n \n-    sKeyBase64 = EncodeBase64Secure(sKey);\n-    request.addStrParameter(\"Key\", std::string(&sKeyBase64[0], sKeyBase64.size()));\n+    sKeyBase64Ret = EncodeBase64Secure(sKey);\n+    request.addStrParameter(\"Key\", std::string(&sKeyBase64Ret[0], sKeyBase64Ret.size()));\n \n     int nStatus;\n     std::string strResponse;\n@@ -573,7 +569,7 @@ void CKeePassIntegrator::rpcAssociate(std::string& strId, SecureString& sKeyBase\n     }\n \n     // If we got here, we were successful. Return the information\n-    strId = response.getStr(\"Id\");\n+    strIdRet = response.getStr(\"Id\");\n }\n \n // Retrieve wallet passphrase from KeePass"
      },
      {
        "sha": "4a22756650c4d9c759b719c2269194e0733be8a5",
        "filename": "src/keepass.h",
        "status": "modified",
        "additions": 13,
        "deletions": 14,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/keepass.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/keepass.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keepass.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2014-2017 The Dash Core developers\n-// Copyright (c) 2015-2017 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -42,11 +41,11 @@ class CKeePassIntegrator {\n         void init();\n \n     public:\n-        void addStrParameter(std::string strName, std::string strValue); // Regular\n-        void addStrParameter(std::string strName, SecureString sValue); // Encrypt\n+        void addStrParameter(const std::string& strName, const std::string& strValue); // Regular\n+        void addStrParameter(const std::string& strName, const SecureString& sValue); // Encrypt\n         std::string getJson();\n \n-        CKeePassRequest(SecureString sKey, std::string strType)\n+        CKeePassRequest(const SecureString& sKey, const std::string& strType)\n         {\n             this->sKey = sKey;\n             this->strType = strType;\n@@ -63,7 +62,7 @@ class CKeePassIntegrator {\n         SecureString sPassword;\n \n     public:\n-        CKeePassEntry(SecureString sUuid, SecureString sName, SecureString sLogin, SecureString sPassword) :\n+        CKeePassEntry(const SecureString& sUuid, const SecureString& sName, const SecureString& sLogin, const SecureString& sPassword) :\n             sUuid(sUuid), sName(sName), sLogin(sLogin), sPassword(sPassword) {\n         }\n \n@@ -93,11 +92,11 @@ class CKeePassIntegrator {\n         std::string strIV;\n         SecureString sKey;\n \n-        void parseResponse(std::string strResponse);\n+        void parseResponse(const std::string& strResponse);\n \n     public:\n         UniValue responseObj;\n-        CKeePassResponse(SecureString sKey, std::string strResponse) {\n+        CKeePassResponse(const SecureString& sKey, const std::string& strResponse) {\n             this->sKey = sKey;\n             parseResponse(strResponse);\n         }\n@@ -106,17 +105,17 @@ class CKeePassIntegrator {\n             return bSuccess;\n         }\n \n-        SecureString getSecureStr(std::string strName);\n-        std::string getStr(std::string strName);\n+        SecureString getSecureStr(const std::string& strName);\n+        std::string getStr(const std::string& strName);\n         std::vector<CKeePassEntry> getEntries();\n \n-        SecureString decrypt(std::string strValue); // DecodeBase64 and decrypt arbitrary string value\n+        SecureString decrypt(const std::string& strValue); // DecodeBase64 and decrypt arbitrary string value\n \n     };\n \n     static SecureString generateRandomKey(size_t nSize);\n     static std::string constructHTTPPost(const std::string& strMsg, const std::map<std::string,std::string>& mapRequestHeaders);\n-    void doHTTPPost(const std::string& strRequest, int& nStatus, std::string& strResponse);\n+    void doHTTPPost(const std::string& strRequest, int& nStatusRet, std::string& strResponseRet);\n     void rpcTestAssociation(bool bTriggerUnlock);\n     std::vector<CKeePassEntry> rpcGetLogins();\n     void rpcSetLogin(const SecureString& sWalletPass, const SecureString& sEntryId);\n@@ -125,10 +124,10 @@ class CKeePassIntegrator {\n     CKeePassIntegrator();\n     void init();\n     static SecureString generateKeePassKey();\n-    void rpcAssociate(std::string& strId, SecureString& sKeyBase64);\n+    void rpcAssociate(std::string& strIdRet, SecureString& sKeyBase64Ret);\n     SecureString retrievePassphrase();\n     void updatePassphrase(const SecureString& sWalletPassphrase);\n \n };\n \n-#endif\n+#endif\n\\ No newline at end of file"
      },
      {
        "sha": "6ff8ee07a9d657e665132573fcf5c386dc068d40",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 29,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -125,10 +124,9 @@ bool CKey::Check(const unsigned char *vch) {\n }\n \n void CKey::MakeNewKey(bool fCompressedIn) {\n-    RandAddSeedPerfmon();\n     do {\n-        GetRandBytes(vch, sizeof(vch));\n-    } while (!Check(vch));\n+        GetStrongRandBytes(keydata.data(), keydata.size());\n+    } while (!Check(keydata.data()));\n     fValid = true;\n     fCompressed = fCompressedIn;\n }\n@@ -226,41 +224,37 @@ bool CKey::Load(CPrivKey &privkey, CPubKey &vchPubKey, bool fSkipCheck=false) {\n bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {\n     assert(IsValid());\n     assert(IsCompressed());\n-    unsigned char out[64];\n-    LockObject(out);\n+    std::vector<unsigned char, secure_allocator<unsigned char>> vout(64);\n     if ((nChild >> 31) == 0) {\n         CPubKey pubkey = GetPubKey();\n         assert(pubkey.begin() + 33 == pubkey.end());\n-        BIP32Hash(cc, nChild, *pubkey.begin(), pubkey.begin()+1, out);\n+        BIP32Hash(cc, nChild, *pubkey.begin(), pubkey.begin()+1, vout.data());\n     } else {\n         assert(begin() + 32 == end());\n-        BIP32Hash(cc, nChild, 0, begin(), out);\n+        BIP32Hash(cc, nChild, 0, begin(), vout.data());\n     }\n-    memcpy(ccChild.begin(), out+32, 32);\n+    memcpy(ccChild.begin(), vout.data()+32, 32);\n     memcpy((unsigned char*)keyChild.begin(), begin(), 32);\n-    bool ret = secp256k1_ec_privkey_tweak_add(secp256k1_context_sign, (unsigned char*)keyChild.begin(), out);\n-    UnlockObject(out);\n+    bool ret = secp256k1_ec_privkey_tweak_add(secp256k1_context_sign, (unsigned char*)keyChild.begin(), vout.data());\n     keyChild.fCompressed = true;\n     keyChild.fValid = ret;\n     return ret;\n }\n \n-bool CExtKey::Derive(CExtKey &out, unsigned int nChild) const {\n+bool CExtKey::Derive(CExtKey &out, unsigned int _nChild) const {\n     out.nDepth = nDepth + 1;\n     CKeyID id = key.GetPubKey().GetID();\n     memcpy(&out.vchFingerprint[0], &id, 4);\n-    out.nChild = nChild;\n-    return key.Derive(out.key, out.chaincode, nChild, chaincode);\n+    out.nChild = _nChild;\n+    return key.Derive(out.key, out.chaincode, _nChild, chaincode);\n }\n \n void CExtKey::SetMaster(const unsigned char *seed, unsigned int nSeedLen) {\n     static const unsigned char hashkey[] = {'B','i','t','c','o','i','n',' ','s','e','e','d'};\n-    unsigned char out[64];\n-    LockObject(out);\n-    CHMAC_SHA512(hashkey, sizeof(hashkey)).Write(seed, nSeedLen).Finalize(out);\n-    key.Set(&out[0], &out[32], true);\n-    memcpy(chaincode.begin(), &out[32], 32);\n-    UnlockObject(out);\n+    std::vector<unsigned char, secure_allocator<unsigned char>> vout(64);\n+    CHMAC_SHA512(hashkey, sizeof(hashkey)).Write(seed, nSeedLen).Finalize(vout.data());\n+    key.Set(&vout[0], &vout[32], true);\n+    memcpy(chaincode.begin(), &vout[32], 32);\n     nDepth = 0;\n     nChild = 0;\n     memset(vchFingerprint, 0, sizeof(vchFingerprint));\n@@ -276,7 +270,7 @@ CExtPubKey CExtKey::Neuter() const {\n     return ret;\n }\n \n-void CExtKey::Encode(unsigned char code[74]) const {\n+void CExtKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const {\n     code[0] = nDepth;\n     memcpy(code+1, vchFingerprint, 4);\n     code[5] = (nChild >> 24) & 0xFF; code[6] = (nChild >> 16) & 0xFF;\n@@ -287,12 +281,12 @@ void CExtKey::Encode(unsigned char code[74]) const {\n     memcpy(code+42, key.begin(), 32);\n }\n \n-void CExtKey::Decode(const unsigned char code[74]) {\n+void CExtKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {\n     nDepth = code[0];\n     memcpy(vchFingerprint, code+1, 4);\n     nChild = (code[5] << 24) | (code[6] << 16) | (code[7] << 8) | code[8];\n     memcpy(chaincode.begin(), code+9, 32);\n-    key.Set(code+42, code+74, true);\n+    key.Set(code+42, code+BIP32_EXTKEY_SIZE, true);\n }\n \n bool ECC_InitSanityCheck() {\n@@ -310,12 +304,10 @@ void ECC_Start() {\n \n     {\n         // Pass in a random blinding seed to the secp256k1 context.\n-        unsigned char seed[32];\n-        LockObject(seed);\n-        GetRandBytes(seed, 32);\n-        bool ret = secp256k1_context_randomize(ctx, seed);\n+        std::vector<unsigned char, secure_allocator<unsigned char>> vseed(32);\n+        GetRandBytes(vseed.data(), 32);\n+        bool ret = secp256k1_context_randomize(ctx, vseed.data());\n         assert(ret);\n-        UnlockObject(seed);\n     }\n \n     secp256k1_context_sign = ctx;"
      },
      {
        "sha": "107f017f0c0da7e287ee2f6bd2a838cfc069f1fa",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 27,
        "deletions": 36,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -16,7 +15,7 @@\n #include <vector>\n \n \n-/** \n+/**\n  * secp256k1:\n  * const unsigned int PRIVATE_KEY_SIZE = 279;\n  * const unsigned int PUBLIC_KEY_SIZE  = 65;\n@@ -44,7 +43,7 @@ class CKey\n     bool fCompressed;\n \n     //! The actual byte data\n-    unsigned char vch[32];\n+    std::vector<unsigned char, secure_allocator<unsigned char> > keydata;\n \n     //! Check whether the 32-byte array pointed to be vch is valid keydata.\n     bool static Check(const unsigned char* vch);\n@@ -53,38 +52,30 @@ class CKey\n     //! Construct an invalid private key.\n     CKey() : fValid(false), fCompressed(false)\n     {\n-        LockObject(vch);\n-    }\n-\n-    //! Copy constructor. This is necessary because of memlocking.\n-    CKey(const CKey& secret) : fValid(secret.fValid), fCompressed(secret.fCompressed)\n-    {\n-        LockObject(vch);\n-        memcpy(vch, secret.vch, sizeof(vch));\n+        // Important: vch must be 32 bytes in length to not break serialization\n+        keydata.resize(32);\n     }\n \n     //! Destructor (again necessary because of memlocking).\n     ~CKey()\n     {\n-        UnlockObject(vch);\n     }\n \n     friend bool operator==(const CKey& a, const CKey& b)\n     {\n-        return a.fCompressed == b.fCompressed && a.size() == b.size() &&\n-               memcmp(&a.vch[0], &b.vch[0], a.size()) == 0;\n+        return a.fCompressed == b.fCompressed &&\n+            a.size() == b.size() &&\n+            memcmp(a.keydata.data(), b.keydata.data(), a.size()) == 0;\n     }\n \n     //! Initialize using begin and end iterators to byte data.\n     template <typename T>\n     void Set(const T pbegin, const T pend, bool fCompressedIn)\n     {\n-        if (pend - pbegin != 32) {\n+        if (size_t(pend - pbegin) != keydata.size()) {\n             fValid = false;\n-            return;\n-        }\n-        if (Check(&pbegin[0])) {\n-            memcpy(vch, (unsigned char*)&pbegin[0], 32);\n+        } else if (Check(&pbegin[0])) {\n+            memcpy(keydata.data(), (unsigned char*)&pbegin[0], keydata.size());\n             fValid = true;\n             fCompressed = fCompressedIn;\n         } else {\n@@ -93,9 +84,9 @@ class CKey\n     }\n \n     //! Simple read-only vector-like interface.\n-    unsigned int size() const { return (fValid ? 32 : 0); }\n-    const unsigned char* begin() const { return vch; }\n-    const unsigned char* end() const { return vch + size(); }\n+    unsigned int size() const { return (fValid ? keydata.size() : 0); }\n+    const unsigned char* begin() const { return keydata.data(); }\n+    const unsigned char* end() const { return keydata.data() + size(); }\n \n     //! Check whether this private key is valid.\n     bool IsValid() const { return fValid; }\n@@ -111,7 +102,7 @@ class CKey\n \n     /**\n      * Convert the private key to a CPrivKey (serialized OpenSSL private key data).\n-     * This is expensive. \n+     * This is expensive.\n      */\n     CPrivKey GetPrivKey() const;\n \n@@ -147,9 +138,6 @@ class CKey\n \n     //! Load private key and check that public key matches.\n     bool Load(CPrivKey& privkey, CPubKey& vchPubKey, bool fSkipCheck);\n-\n-    //! Check whether an element of a signature (r or s) is valid.\n-    static bool CheckSignatureElement(const unsigned char* vch, int len, bool half);\n };\n \n struct CExtKey {\n@@ -161,29 +149,32 @@ struct CExtKey {\n \n     friend bool operator==(const CExtKey& a, const CExtKey& b)\n     {\n-        return a.nDepth == b.nDepth && memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], 4) == 0 && a.nChild == b.nChild &&\n-               a.chaincode == b.chaincode && a.key == b.key;\n+        return a.nDepth == b.nDepth &&\n+            memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], sizeof(vchFingerprint)) == 0 &&\n+            a.nChild == b.nChild &&\n+            a.chaincode == b.chaincode &&\n+            a.key == b.key;\n     }\n \n-    void Encode(unsigned char code[74]) const;\n-    void Decode(const unsigned char code[74]);\n+    void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;\n+    void Decode(const unsigned char code[BIP32_EXTKEY_SIZE]);\n     bool Derive(CExtKey& out, unsigned int nChild) const;\n     CExtPubKey Neuter() const;\n     void SetMaster(const unsigned char* seed, unsigned int nSeedLen);\n     template <typename Stream>\n-    void Serialize(Stream& s, int nType, int nVersion) const\n+    void Serialize(Stream& s) const\n     {\n-        unsigned int len = 74;\n+        unsigned int len = BIP32_EXTKEY_SIZE;\n         ::WriteCompactSize(s, len);\n-        unsigned char code[74];\n+        unsigned char code[BIP32_EXTKEY_SIZE];\n         Encode(code);\n         s.write((const char *)&code[0], len);\n     }\n     template <typename Stream>\n-    void Unserialize(Stream& s, int nType, int nVersion)\n+    void Unserialize(Stream& s)\n     {\n         unsigned int len = ::ReadCompactSize(s);\n-        unsigned char code[74];\n+        unsigned char code[BIP32_EXTKEY_SIZE];\n         s.read((char *)&code[0], len);\n         Decode(code);\n     }"
      },
      {
        "sha": "25d2cde21307b106ca1ee0387fc069c8d26e7b78",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "c3f167424e69ddc24d8e065940c68a17afc4fbea",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 14,
        "deletions": 15,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2009-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -65,9 +64,9 @@ class CBasicKeyStore : public CKeyStore\n     CHDChain hdChain;\n \n public:\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n-    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n-    bool HaveKey(const CKeyID &address) const\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n+    bool HaveKey(const CKeyID &address) const override\n     {\n         bool result;\n         {\n@@ -76,7 +75,7 @@ class CBasicKeyStore : public CKeyStore\n         }\n         return result;\n     }\n-    void GetKeys(std::set<CKeyID> &setAddress) const\n+    void GetKeys(std::set<CKeyID> &setAddress) const override\n     {\n         setAddress.clear();\n         {\n@@ -89,7 +88,7 @@ class CBasicKeyStore : public CKeyStore\n             }\n         }\n     }\n-    bool GetKey(const CKeyID &address, CKey &keyOut) const\n+    bool GetKey(const CKeyID &address, CKey &keyOut) const override\n     {\n         {\n             LOCK(cs_KeyStore);\n@@ -102,16 +101,16 @@ class CBasicKeyStore : public CKeyStore\n         }\n         return false;\n     }\n-    virtual bool AddCScript(const CScript& redeemScript);\n-    virtual bool HaveCScript(const CScriptID &hash) const;\n-    virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const;\n+    virtual bool AddCScript(const CScript& redeemScript) override;\n+    virtual bool HaveCScript(const CScriptID &hash) const override;\n+    virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;\n \n-    virtual bool AddWatchOnly(const CScript &dest);\n-    virtual bool RemoveWatchOnly(const CScript &dest);\n-    virtual bool HaveWatchOnly(const CScript &dest) const;\n-    virtual bool HaveWatchOnly() const;\n+    virtual bool AddWatchOnly(const CScript &dest) override;\n+    virtual bool RemoveWatchOnly(const CScript &dest) override;\n+    virtual bool HaveWatchOnly(const CScript &dest) const override;\n+    virtual bool HaveWatchOnly() const override;\n \n-    bool GetHDChain(CHDChain& hdChainRet) const;\n+    virtual bool GetHDChain(CHDChain& hdChainRet) const;\n };\n \n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;"
      },
      {
        "sha": "ca2faa57ad6a037efdb7612cd730ccf28308e084",
        "filename": "src/limitedmap.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/limitedmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/limitedmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/limitedmap.h?ref=1369a1c137c13494fedd3814aefa714d259f2946",
        "patch": "@@ -1,5 +1,4 @@\n-// Copyright (c) 2012-2015 The Bitcoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Copyright (c) 2012-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -67,8 +66,11 @@ class limitedmap\n     }\n     void update(const_iterator itIn, const mapped_type& v)\n     {\n-        // TODO: When we switch to C++11, use map.erase(itIn, itIn) to get the non-const iterator.\n-        iterator itTarget = map.find(itIn->first);\n+        // Using map::erase() with empty range instead of map::find() to get a non-const iterator,\n+        // since it is a constant time operation in C++11. For more details, see\n+        // https://stackoverflow.com/questions/765148/how-to-remove-constness-of-const-iterator\n+        iterator itTarget = map.erase(itIn, itIn);\n+        \n         if (itTarget == map.end())\n             return;\n         std::pair<rmap_iterator, rmap_iterator> itPair = rmap.equal_range(itTarget->second);"
      },
      {
        "sha": "c2d2c968fafa18e5479fc9a42e368cce131322f3",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "ba98de189ee25a216e3c628b43bb2622769218eb",
        "filename": "src/masternode-payments.h",
        "status": "modified",
        "additions": 56,
        "deletions": 59,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/masternode-payments.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/masternode-payments.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "030642139cee58187db15b4992cb24c21e4c6984",
        "filename": "src/masternode-sync.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 67,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/masternode-sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/masternode-sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "1cc1910303445a695fbc796df9eab05ceb3555bd",
        "filename": "src/masternode-sync.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/masternode-sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/masternode-sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-sync.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "a4fb489e8e39bb95e1ae5d380785d97c75f18865",
        "filename": "src/masternode.cpp",
        "status": "modified",
        "additions": 267,
        "deletions": 244,
        "changes": 511,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "076e09cbf9ca844801ce9bd7f35b18abdcc2911f",
        "filename": "src/masternode.h",
        "status": "modified",
        "additions": 114,
        "deletions": 85,
        "changes": 199,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/masternode.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/masternode.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "2dac44eaf1955349407be29b7ccbe10377584a71",
        "filename": "src/masternodeconfig.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 11,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/masternodeconfig.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/masternodeconfig.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeconfig.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "6e04847c04da807641d4bd5ae9938b7fe0f9e865",
        "filename": "src/masternodeconfig.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/masternodeconfig.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/masternodeconfig.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeconfig.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "53b859676527a9ba923ff1084efd5e2b3fed57a7",
        "filename": "src/masternodeman.cpp",
        "status": "modified",
        "additions": 430,
        "deletions": 323,
        "changes": 753,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/masternodeman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/masternodeman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "fb0a6c63684a9423820761eaccb06130a47c5c67",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 31,
        "deletions": 25,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "d76be24d666cca41f38d152fd25526e76b970d61",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 58,
        "deletions": 5,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "241841c83bd98e163921bb986affde2a194b6b12",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 19,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "c04345c63052f45444df378ccf6a6404ec511b03",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "4e7f6342a049775c883d16e30e218d92655c2f7c",
        "filename": "src/messagesigner.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 10,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/messagesigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/messagesigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/messagesigner.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "405d1bb6ed89dc6431a5a5c9c5a552d6c8bc57b4",
        "filename": "src/messagesigner.h",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/messagesigner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/messagesigner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/messagesigner.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "599ca380b18f6c58dc8562fc3e23453c4cbd7766",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 478,
        "deletions": 430,
        "changes": 908,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "05ee972e3868c55a61161850e1eaa14c87ae485f",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 179,
        "deletions": 8,
        "changes": 187,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "955ef39ab447129d9d3084bbf471a343e0fa2146",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 426,
        "deletions": 356,
        "changes": 782,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "1fa19dd61f7903502bc8eb66041f1bce8b64ba38",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 138,
        "deletions": 112,
        "changes": 250,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "e749fe2426f680be82fdc0f7e25b210f68bc682f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1324,
        "deletions": 522,
        "changes": 1846,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "e2919b355543ccaa72ced9ce60749f74bbfcff1e",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 17,
        "deletions": 6,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "e1d2b600865662b60ccad40959412864087c65c4",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 7,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "4c1ec398da497aca51ea82c0301ae10ad2494dab",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "9ae90248a7f7df0662a24141ba4e9cae7be774cf",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 73,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "ff4b483b55a660fd3ec7cde2490ec6d3f137f29e",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "a4b5c08f8951cf237291c715e88124dc565aea2d",
        "filename": "src/netfulfilledman.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/netfulfilledman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/netfulfilledman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netfulfilledman.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "530e9f5db2d5617806bd4efb95fb61e8cd6e8657",
        "filename": "src/netfulfilledman.h",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/netfulfilledman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/netfulfilledman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netfulfilledman.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "51628bbb6e787b09d0e95c8d16810ef5e70de937",
        "filename": "src/netmessagemaker.h",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/netmessagemaker.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/netmessagemaker.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netmessagemaker.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "30a7547167868e034d216780788b9bdaa1675af5",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "42fe3807e6b5a8191ca32481d709af2a373bfe58",
        "filename": "src/noui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/noui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/noui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "ffd8f707a390116bd8d48a8fe7c299fb8f57a193",
        "filename": "src/offer.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 27,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/offer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/offer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/offer.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "fc2d05078ed8d4a4f60edb1ca699ea943b44897b",
        "filename": "src/offer.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/offer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/offer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/offer.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "27fbb560840e557758fb913d59af7c5b92169cec",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 176,
        "changes": 259,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "fc861360850bff22b0191a9c2589d86f97ccef17",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 54,
        "deletions": 79,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "cef2a5c90a779e5f50ea01353e8130583225a18b",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "ec76b9fd7ba721393d3abcbc1dfedc6cd2dabcf3",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 16,
        "deletions": 6,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "951371574a10a68dc09f4943a2d2d19a0b41559f",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "0f9ae8a2653d16ce7041e373809a593f366829e0",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "7e8f670bf8a71488a663c251aa23816c4f5ad4af",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 196,
        "deletions": 91,
        "changes": 287,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "e1c496459bd0060dcba4d8c5be739aee9b899651",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 2,
        "deletions": 15,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "3875b1b94cf3981e0819ce34348d8a4e4e591415",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 24,
        "deletions": 1,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "c7c44beacd576d4c89d1db1a4aa05cda4f544ecb",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "5280e3c66471c57b4096677358f10b456870c251",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 13,
        "deletions": 17,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "a855a84ef5a8297fe96b57eb094385a358d71340",
        "filename": "src/primitives/pureheader.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/primitives/pureheader.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/primitives/pureheader.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/pureheader.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "ca68301be4404ead33d1a70e7380d09fa670d2d1",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 24,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "354bc58a63347f63a75394e05f46cabc6e8681b1",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 53,
        "deletions": 51,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "358c1eaac45167aff4796bc345d37b11db689890",
        "filename": "src/privatesend-client.cpp",
        "status": "modified",
        "additions": 1294,
        "deletions": 1307,
        "changes": 2601,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/privatesend-client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/privatesend-client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/privatesend-client.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "5db0b2401600cab831fbaa0e0f0f82b9a7b6c0db",
        "filename": "src/privatesend-client.h",
        "status": "modified",
        "additions": 59,
        "deletions": 14,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/privatesend-client.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/privatesend-client.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/privatesend-client.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "66f9d5e27e58fe6511400b913de46f66c495f711",
        "filename": "src/privatesend-server.cpp",
        "status": "modified",
        "additions": 134,
        "deletions": 173,
        "changes": 307,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/privatesend-server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/privatesend-server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/privatesend-server.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "d32328223af8ea145607a8c3281791ac21a19704",
        "filename": "src/privatesend-server.h",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/privatesend-server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/privatesend-server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/privatesend-server.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "ed1930c25d2b7bcc8a1d09f0f759f3438f2c0569",
        "filename": "src/privatesend-util.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 27,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/privatesend-util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/privatesend-util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/privatesend-util.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "3e1fbcfaf238ee0bd981e8a4f450d50ca465c99b",
        "filename": "src/privatesend-util.h",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/privatesend-util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/privatesend-util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/privatesend-util.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "02a321c76142da924e929919390bae0a6007fa90",
        "filename": "src/privatesend.cpp",
        "status": "modified",
        "additions": 140,
        "deletions": 93,
        "changes": 233,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/privatesend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/privatesend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/privatesend.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "f7de624bb53c1c03aee3444d9cca47bffa4ac1f0",
        "filename": "src/privatesend.h",
        "status": "modified",
        "additions": 92,
        "deletions": 57,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/privatesend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/privatesend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/privatesend.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "68e13e3c5c2b30c9aa7a21ec724ad3a89f798a53",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 11,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "d4c41a5ceeba2f175808c72154d5c5e3ed3c294d",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 81,
        "deletions": 46,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "cde8350d1261f5e9bc95c112ae9b26466c0c4d4a",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "5802ca480b9a7d2fa5c4e05ed53a14e12a2b88ab",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 25,
        "deletions": 24,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "e57d73e206e5a036b48aab2fc5b892aa4ed7f7a6",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "968c013efdbd28190e0f5eda65ad588b1303a3de",
        "filename": "src/qt/addressbookpage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/addressbookpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/addressbookpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "ace0bb7a3ece6dc547d4b8134c5d6ade98ee07f1",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "8d56d0f6727ac27f59860a6821d18fd5d6fa8bdc",
        "filename": "src/qt/addresstablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/addresstablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/addresstablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "0502d967bac570c0d77fc214179d6cb2b432155e",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 12,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "9ff1df7dd5d7da056d312d13239a4d6bd3257913",
        "filename": "src/qt/askpassphrasedialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/askpassphrasedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/askpassphrasedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "0388c293de46244076da6d30a67456907b96ea15",
        "filename": "src/qt/bantablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/bantablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/bantablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "a115b8916d2c12f7596524ea3c563f79c5a6db4f",
        "filename": "src/qt/bantablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/bantablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/bantablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "d7988894a76762328f6098b7436a368edfb43be6",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 11,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "f8311c3a70c9e3091d989e32415fbdb3d8814256",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "dba4bc0b13fdfdf5c7112a3536cb87638db2793d",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 50,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "2a08d37db9801d8de4b82d1baef3ad96ad775e03",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 14,
        "deletions": 27,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "a648a3f1ca9951ac0b7c42748d19a3da47eb532d",
        "filename": "src/qt/coincontroltreewidget.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/coincontroltreewidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/coincontroltreewidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroltreewidget.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "000f92ca34468b307eaeea62d2cd3984b83f921b",
        "filename": "src/qt/coincontroltreewidget.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/coincontroltreewidget.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/coincontroltreewidget.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroltreewidget.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "32f619b08b925c33d7225228bc5a8182ba2f0170",
        "filename": "src/qt/csvmodelwriter.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/csvmodelwriter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/csvmodelwriter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/csvmodelwriter.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "4d2b8caec98b05f627ba83ad9c87f9f4e9ae4c73",
        "filename": "src/qt/csvmodelwriter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/csvmodelwriter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/csvmodelwriter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/csvmodelwriter.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "af6aa751e372f18b35e132f85aa66db6004e6684",
        "filename": "src/qt/editaddressdialog.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/editaddressdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/editaddressdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/editaddressdialog.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "e6615037721bae05a58c6d143ad8709e763938bb",
        "filename": "src/qt/editaddressdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/editaddressdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/editaddressdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/editaddressdialog.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "a2105ecd0ae1213d4568327839d6a84635f73137",
        "filename": "src/qt/forms/askpassphrasedialog.ui",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/askpassphrasedialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/askpassphrasedialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/askpassphrasedialog.ui?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "a2dac9001e707da18e6915bcf16e9107dab5db75",
        "filename": "src/qt/forms/debugwindow.ui",
        "status": "modified",
        "additions": 35,
        "deletions": 52,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/debugwindow.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/debugwindow.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/debugwindow.ui?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "77b65b7ab1a2fd947f1d75ffd39ac99e9ddb26c0",
        "filename": "src/qt/forms/helpmessagedialog.ui",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/helpmessagedialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/helpmessagedialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/helpmessagedialog.ui?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "58aaa6d793b165355239ad8d34f3d7bd28049915",
        "filename": "src/qt/forms/intro.ui",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/intro.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/intro.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/intro.ui?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "803705b4d79b5a0ccb4a6ec3f9441fabc4c70be6",
        "filename": "src/qt/forms/masternodelist.ui",
        "status": "modified",
        "additions": 13,
        "deletions": 9,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/masternodelist.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/masternodelist.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/masternodelist.ui?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "bd90d2fd34e56a97307291e910dd00ee2c88f026",
        "filename": "src/qt/forms/modaloverlay.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/modaloverlay.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/modaloverlay.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/modaloverlay.ui?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "fa000bd0d4441f3fdae8c7a34065f2c9561265b2",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "efa0aacc3b1c31ed06efe12b71ebd7654ed2d589",
        "filename": "src/qt/forms/qrdialog.ui",
        "status": "added",
        "additions": 164,
        "deletions": 0,
        "changes": 164,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/qrdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/qrdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/qrdialog.ui?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "4163f4189c5e9ef87afdb894731dcf8010966a31",
        "filename": "src/qt/forms/receiverequestdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/receiverequestdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/receiverequestdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/receiverequestdialog.ui?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "39914b077f465f9338484d0c9f1a9dd365d6b443",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 48,
        "deletions": 59,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "3a698cfd1d40816a2d1491c99243f3c2deaacc34",
        "filename": "src/qt/forms/transactiondescdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/transactiondescdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/forms/transactiondescdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/transactiondescdialog.ui?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "f6514d23717bfbdd15a0580a6a7ad5bb5bdffab2",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "60ce24c646241530e946718c47d78568d6907ea1",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 11,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "08c31ae914f671d1c7946ff7d129fa4a976a63c2",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "26006606b549386f8760929911dd7e44bedcd98f",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 12,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "9921f0aa718e1449e68ca3e8ad3f3ceba0e7ff7a",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "269c04ec1ab3089fbe6b5fc029feb2dc270b4cd3",
        "filename": "src/qt/locale/syscoin_bg.ts",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_bg.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_bg.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_bg.ts?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "747e7d2c0314a626d13dccf9585100a5c07a6896",
        "filename": "src/qt/locale/syscoin_de.ts",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_de.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_de.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_de.ts?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "32c06fdb92d73fda4eb05a13cd4cdbb53862bcea",
        "filename": "src/qt/locale/syscoin_en.ts",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_en.ts?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "7404cdc4a9e6141d96ea4a2d7d9504566689dc1f",
        "filename": "src/qt/locale/syscoin_es.ts",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_es.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_es.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_es.ts?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "f6c0a153b53e7374939efcb97ff6dffcff6278fd",
        "filename": "src/qt/locale/syscoin_fi.ts",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_fi.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_fi.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_fi.ts?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "11d6412385dd307b53e07a5842265467f1c9a909",
        "filename": "src/qt/locale/syscoin_fr.ts",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_fr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_fr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_fr.ts?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "ec79eb03b83c4c7b8502b4affff65c9cfd389025",
        "filename": "src/qt/locale/syscoin_it.ts",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_it.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_it.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_it.ts?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "cd78829bcb8981cbea66fc94f7a90bb789a4dbad",
        "filename": "src/qt/locale/syscoin_ja.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_ja.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_ja.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_ja.ts?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "432b8c0c98fa1c8f70214b92c004209691e451d9",
        "filename": "src/qt/locale/syscoin_pl.ts",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_pl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_pl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_pl.ts?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "9eed5d3f18fd4a2b76d8f0c6224a2112b936a3e6",
        "filename": "src/qt/locale/syscoin_pt.ts",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_pt.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_pt.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_pt.ts?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "44c9d474cd9a0c851a26e967c7c50c2187426afe",
        "filename": "src/qt/locale/syscoin_ru.ts",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_ru.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_ru.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_ru.ts?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "3225062772fa4ce729fcae83b9582b717e79e64c",
        "filename": "src/qt/locale/syscoin_sk.ts",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_sk.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_sk.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_sk.ts?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "5a1c61e3cb19a46ef27743a625d99e0d36cb05b2",
        "filename": "src/qt/locale/syscoin_sv.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_sv.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_sv.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_sv.ts?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "1c139ca2a07b3e2118df6b2f0a0f2fd9d09120a1",
        "filename": "src/qt/locale/syscoin_vi.ts",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_vi.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_vi.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_vi.ts?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "cede513f464b3adb5c2b04972e99e62d95ad6c0e",
        "filename": "src/qt/locale/syscoin_zh_CN.ts",
        "status": "modified",
        "additions": 74,
        "deletions": 75,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_zh_CN.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_zh_CN.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_zh_CN.ts?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "877875064f7f7517ce255589c1ed043a79b113cf",
        "filename": "src/qt/locale/syscoin_zh_TW.ts",
        "status": "modified",
        "additions": 80,
        "deletions": 81,
        "changes": 161,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_zh_TW.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/locale/syscoin_zh_TW.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_zh_TW.ts?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "2ea33194ca25636a983d57cb81871c2a8831a2df",
        "filename": "src/qt/macdockiconhandler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/macdockiconhandler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/macdockiconhandler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macdockiconhandler.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "64852fb3d478f6dafbb626aacfd7db501a29d56d",
        "filename": "src/qt/macnotificationhandler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/macnotificationhandler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/macnotificationhandler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macnotificationhandler.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "f76b08b5ebca5ec7aa9de1ec251fa65ccc533836",
        "filename": "src/qt/masternodelist.cpp",
        "status": "modified",
        "additions": 96,
        "deletions": 10,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/masternodelist.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/masternodelist.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/masternodelist.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "8a6ef5445e536de333b73fee65d234e51c1a40db",
        "filename": "src/qt/masternodelist.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/masternodelist.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/masternodelist.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/masternodelist.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "a42ceb8a27981d35abcec8c00032083a45507dc4",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "26858c0d6c13dff54facc88e3909498b199c7619",
        "filename": "src/qt/modaloverlay.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/modaloverlay.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/modaloverlay.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "b000b6f571828b8f9d659f0389321887de3332fc",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 9,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "179d9d5fd27334fe691fcb2f86e29fbcbaa4de28",
        "filename": "src/qt/networkstyle.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/networkstyle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/networkstyle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "b6f16918dcd6570ed65de4745e0ba95127b8f6ef",
        "filename": "src/qt/notificator.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/notificator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/notificator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "9b699217a8575210b41aa101f2c4b8b63b8eb5c6",
        "filename": "src/qt/notificator.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/notificator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/notificator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "117b6356cc49b68a16349af85e761f20e491d8eb",
        "filename": "src/qt/openuridialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/openuridialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/openuridialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/openuridialog.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "f9aa6320d97e29f2f541affabb2adfd14e7c9a0a",
        "filename": "src/qt/openuridialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/openuridialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/openuridialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/openuridialog.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "55e425e7c82f103489f66690672223989f2cec30",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 12,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "e93a77e1b1d7c405915a71b05d73408c3210927a",
        "filename": "src/qt/optionsdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/optionsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/optionsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "d2ed824b384cd37b1d09002272ea898d963f28a1",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 8,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "a3767f906a4fa54b8873da1bea3f99204fdcb7be",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "c3f9c0cbfce26f2360560e4164db397d37d36471",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 12,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "5674e2ce7a1f1d0d1d78f7eadf8f44e20b246a75",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "ae20b248c0e64ea2ea5cf64bf2db4f440b96c6a1",
        "filename": "src/qt/paymentrequest.proto",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/paymentrequest.proto",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/paymentrequest.proto",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequest.proto?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "8a98a8ed3242376be8fb1abf092caf81db71db88",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "e26665812dcdd24e81692506de46902c7daf7b1b",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "5fd2318eb3cc30d19f8f333ebcf5d73acb6e9ae8",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "fc54e1f6efa8b2b63d7205b5f36b5fc428cac75c",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "ed85f53265140c81cf8c759816d67796130ba60a",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "57327c0029e8e2e6de88b11ae0f5fb9082c69909",
        "filename": "src/qt/peertablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/peertablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/peertablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "ead6045a59121ae66cd64229f2428479e3b80294",
        "filename": "src/qt/platformstyle.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/platformstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/platformstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/platformstyle.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "931f6820e8dc1c716eeb2bd0f44f0b4db56b7d07",
        "filename": "src/qt/platformstyle.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/platformstyle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/platformstyle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/platformstyle.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "40782fa57190c53d79bf491e5cf8cb33e8cda4a3",
        "filename": "src/qt/qrdialog.cpp",
        "status": "added",
        "additions": 171,
        "deletions": 0,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/qrdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/qrdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qrdialog.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "b93098fa8bb05653b6b8f3002bf1ab82a64f77ef",
        "filename": "src/qt/qrdialog.h",
        "status": "added",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/qrdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/qrdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qrdialog.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "db53376934fcd82c7750075cf481bf1ee138a8b2",
        "filename": "src/qt/qvalidatedlineedit.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/qvalidatedlineedit.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/qvalidatedlineedit.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvalidatedlineedit.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "cb7c1cdbe994623b17ef9acbf2a66961e914c42e",
        "filename": "src/qt/qvalidatedlineedit.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/qvalidatedlineedit.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/qvalidatedlineedit.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvalidatedlineedit.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "cc2fc8af3c61174d06d4a709744056f8bf9bfd30",
        "filename": "src/qt/qvaluecombobox.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/qvaluecombobox.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/qvaluecombobox.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvaluecombobox.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "cbcb6686564a1fb3e9fdcaa6864cd51ba41217ce",
        "filename": "src/qt/qvaluecombobox.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/qvaluecombobox.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/qvaluecombobox.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvaluecombobox.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "f0e7d26dc2027f032f706fd761ce327211060193",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "77a515aa4209d90de013a8c5ebf5a44c89490880",
        "filename": "src/qt/receivecoinsdialog.h",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/receivecoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/receivecoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "3df6c28b82adfa68af32dbb0de5c391abc6fc318",
        "filename": "src/qt/receiverequestdialog.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 13,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/receiverequestdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/receiverequestdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "112718c84cf32bac2913463a0dbdb1dc3a4f8e19",
        "filename": "src/qt/receiverequestdialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/receiverequestdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/receiverequestdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "65671e4bbdc567fdd4a3f99626b0eaf173a07622",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "f33a7c3c649df89b6dbef32af7f90b4fe81b996c",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "0110ceb578830a7ace3d5d28946bc2e31233aadb",
        "filename": "src/qt/res/css/crownium.css",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/res/css/crownium.css",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/res/css/crownium.css",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/css/crownium.css?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "2feaf5fa9c793adb3b0ce9cb2cec98f92e221a69",
        "filename": "src/qt/res/css/drkblue.css",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/res/css/drkblue.css",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/res/css/drkblue.css",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/css/drkblue.css?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "55751b25ffe36694eb3984292bb29db5bc433536",
        "filename": "src/qt/res/css/light-hires.css",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/res/css/light-hires.css",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/res/css/light-hires.css",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/css/light-hires.css?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "17fe9edddbd743d1f4203565dbefd7d3136e6689",
        "filename": "src/qt/res/css/light.css",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/res/css/light.css",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/res/css/light.css",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/css/light.css?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "0937a3f007dbc89a12c74324d6e7ef3f9f26f684",
        "filename": "src/qt/res/css/trad.css",
        "status": "modified",
        "additions": 3,
        "deletions": 1625,
        "changes": 1628,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/res/css/trad.css",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/res/css/trad.css",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/css/trad.css?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      },
      {
        "sha": "a69b913faeb30c117a010951f6d7b9e7d8c71f31",
        "filename": "src/qt/res/icons/crownium/network_disabled.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/res/icons/crownium/network_disabled.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369a1c137c13494fedd3814aefa714d259f2946/src/qt/res/icons/crownium/network_disabled.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/crownium/network_disabled.png?ref=1369a1c137c13494fedd3814aefa714d259f2946"
      }
    ]
  },
  {
    "sha": "9dd516bb04ee01a4ca6b111666353840005fe9b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGQ1MTZiYjA0ZWUwMWE0Y2E2YjExMTY2NjM1Mzg0MDAwNWZlOWI0",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T04:31:18Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T04:31:18Z"
      },
      "message": "change def port",
      "tree": {
        "sha": "3e06864cb503f7e208cf355564d917d79409e930",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e06864cb503f7e208cf355564d917d79409e930"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9dd516bb04ee01a4ca6b111666353840005fe9b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dd516bb04ee01a4ca6b111666353840005fe9b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9dd516bb04ee01a4ca6b111666353840005fe9b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dd516bb04ee01a4ca6b111666353840005fe9b4/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1369a1c137c13494fedd3814aefa714d259f2946",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1369a1c137c13494fedd3814aefa714d259f2946",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1369a1c137c13494fedd3814aefa714d259f2946"
      }
    ],
    "stats": {
      "total": 724,
      "additions": 362,
      "deletions": 362
    },
    "files": [
      {
        "sha": "732d96c80bd2a779da4c13e9355f342fb76fa5be",
        "filename": "contrib/qos/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/contrib/qos/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/contrib/qos/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/qos/README.md?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -1,5 +1,5 @@\n ### Qos ###\n \n-This is a Linux bash script that will set up tc to limit the outgoing bandwidth for connections to the Syscoin network. It limits outbound TCP traffic with a source or destination port of 9999, but not if the destination IP is within a LAN (defined as 192.168.x.x).\n+This is a Linux bash script that will set up tc to limit the outgoing bandwidth for connections to the Syscoin network. It limits outbound TCP traffic with a source or destination port of 8369, but not if the destination IP is within a LAN (defined as 192.168.x.x).\n \n This means one can have an always-on syscoind instance running, and another local syscoind/syscoin-qt instance which connects to this node and receives blocks from it."
      },
      {
        "sha": "50bed7ad6125c0685133dbe45972e73275405978",
        "filename": "contrib/qos/tc.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/contrib/qos/tc.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/contrib/qos/tc.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/qos/tc.sh?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -32,10 +32,10 @@ tc filter add dev ${IF} parent 1: protocol ip prio 2 handle 2 fw classid 1:11\n #\tret=$?\n #done\n \n-#limit outgoing traffic to and from port 9999. but not when dealing with a host on the local network\n+#limit outgoing traffic to and from port 8369. but not when dealing with a host on the local network\n #\t(defined by $LOCALNET)\n #\t--set-mark marks packages matching these criteria with the number \"2\"\n #\tthese packages are filtered by the tc filter with \"handle 2\"\n #\tthis filter sends the packages into the 1:11 class, and this class is limited to ${LIMIT}\n-iptables -t mangle -A OUTPUT -p tcp -m tcp --dport 9999 ! -d ${LOCALNET} -j MARK --set-mark 0x2\n-iptables -t mangle -A OUTPUT -p tcp -m tcp --sport 9999 ! -d ${LOCALNET} -j MARK --set-mark 0x2\n+iptables -t mangle -A OUTPUT -p tcp -m tcp --dport 8369 ! -d ${LOCALNET} -j MARK --set-mark 0x2\n+iptables -t mangle -A OUTPUT -p tcp -m tcp --sport 8369 ! -d ${LOCALNET} -j MARK --set-mark 0x2"
      },
      {
        "sha": "4fe278a0cb0894fdb54f7319ca532399b35aeb11",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -127,7 +127,7 @@ def main():\n     g.write(' * IPv4 as well as onion addresses are wrapped inside a IPv6 address accordingly.\\n')\n     g.write(' */\\n')\n     with open(os.path.join(indir,'nodes_main.txt'),'r') as f:\n-        process_nodes(g, f, 'pnSeed6_main', 9999)\n+        process_nodes(g, f, 'pnSeed6_main', 8369)\n     g.write('\\n')\n     with open(os.path.join(indir,'nodes_test.txt'),'r') as f:\n         process_nodes(g, f, 'pnSeed6_test', 19999)"
      },
      {
        "sha": "77ddd70dcc2f62f7fcc4ba72d188082a236aabe3",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -154,7 +154,7 @@ Threads\n \n - ThreadMapPort : Universal plug-and-play startup/shutdown\n \n-- ThreadSocketHandler : Sends/Receives data from peers on port 9999.\n+- ThreadSocketHandler : Sends/Receives data from peers on port 8369.\n \n - ThreadOpenAddedConnections : Opens network connections to added nodes.\n "
      },
      {
        "sha": "6c80a7b19c674cfa38551e8a045f104267407cad",
        "filename": "doc/guide-startmany.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/doc/guide-startmany.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/doc/guide-startmany.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/guide-startmany.md?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -106,8 +106,8 @@ alias ipaddress:port masternode_private_key collateral_output collateral_output_\n Example:\n \n ```\n-mn01 127.0.0.1:9999 93HaYBVUCYjEMeeH1Y4sBGLALQZE1Yc1K64xiqgX37tGBDQL8Xg 2bcd3c84c84f87eaa86e4e56834c92927a07f9e18718810b92e0d0324456a67c 0\n-mn02 127.0.0.2:9999 93WaAb3htPJEV8E9aQcN23Jt97bPex7YvWfgMDTUdWJvzmrMqey aa9f1034d973377a5e733272c3d0eced1de22555ad45d6b24abadff8087948d4 0\n+mn01 127.0.0.1:8369 93HaYBVUCYjEMeeH1Y4sBGLALQZE1Yc1K64xiqgX37tGBDQL8Xg 2bcd3c84c84f87eaa86e4e56834c92927a07f9e18718810b92e0d0324456a67c 0\n+mn02 127.0.0.2:8369 93WaAb3htPJEV8E9aQcN23Jt97bPex7YvWfgMDTUdWJvzmrMqey aa9f1034d973377a5e733272c3d0eced1de22555ad45d6b24abadff8087948d4 0\n ```\n \n ## What about the syscoin.conf file?"
      },
      {
        "sha": "44edb53f3147b0f0de111b52bf402eb834b0a153",
        "filename": "qa/rpc-tests/abandonconflict.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/qa/rpc-tests/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/qa/rpc-tests/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/abandonconflict.py?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -131,7 +131,7 @@ def run_test(self):\n         inputs =[]\n         inputs.append({\"txid\":txA, \"vout\":nA})\n         outputs = {}\n-        outputs[self.nodes[1].getnewaddress()] = Decimal(\"9.9999\")\n+        outputs[self.nodes[1].getnewaddress()] = Decimal(\"9.8369\")\n         tx = self.nodes[0].createrawtransaction(inputs, outputs)\n         signed = self.nodes[0].signrawtransaction(tx)\n         self.nodes[1].sendrawtransaction(signed[\"hex\"])"
      },
      {
        "sha": "68b64fd4d81aed467f2f9c21c80a51c994c7c4bc",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 288,
        "deletions": 288,
        "changes": 576,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -8,294 +8,294 @@\n  * IPv4 as well as onion addresses are wrapped inside a IPv6 address accordingly.\n  */\n static SeedSpec6 pnSeed6_main[] = {\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x02,0x42,0x90}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x84,0x9f,0x06}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x84,0x9f,0x08}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x84,0x9f,0x09}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x84,0x9f,0x0a}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x86,0x73,0x25}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0xbd,0x81,0x29}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x12,0xdd,0x60,0x95}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xaf,0x00,0x70}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xaf,0x00,0x71}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xaf,0x00,0x72}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xaf,0x00,0x73}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xb6,0x80,0x15}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xb6,0x80,0x16}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xb6,0x80,0x17}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xb6,0x80,0x18}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xe3,0xa0,0x4c}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x1f,0x0d,0xd9,0x34}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x1f,0x0d,0xd9,0x35}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x1f,0x0d,0xd9,0x36}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x1f,0x0d,0xd9,0x37}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x1f,0x0e,0x86,0xed}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x1f,0x1f,0x49,0x52}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x22,0xc7,0x82,0x45}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x22,0xce,0x00,0x3f}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x22,0xe1,0x65,0x61}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x23,0xc4,0xf2,0xe3}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0x78,0xa1,0x91}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0x9d,0xc7,0xd2}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0xc8,0x7a,0xdf}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0xdd,0xc2,0x2a}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0xdd,0xc2,0xdc}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0xdd,0xc2,0xde}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x26,0x7f,0xa9,0x93}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2b,0xe5,0x4d,0x2e}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x20,0xc0,0x45}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x3a,0x30,0x11}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x4c,0x40,0x06}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x4c,0x80,0x3d}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2f,0x4a,0x17,0xcf}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2f,0x5a,0x0e,0x9c}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2f,0x5a,0x35,0x67}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2f,0x5b,0xd9,0x31}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2f,0x64,0x19,0x76}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x32,0x03,0x4a,0x51}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x32,0x03,0x4a,0x52}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x32,0x03,0x4a,0x54}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x32,0x03,0x4a,0x55}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x32,0x63,0x00,0xf3}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0x0e,0xc0,0xd3}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0x2c,0x80,0x19}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0x4e,0xa5,0x5b}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0x4f,0x70,0x16}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0x50,0x37,0xdf}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0xaa,0x66,0xfd}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0xbb,0x87,0xbb}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0xf2,0x25,0x08}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0xf2,0x27,0x60}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x3e,0x8a,0x03,0xd6}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x3e,0x8a,0x08,0x07}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x3e,0xd2,0x05,0xf6}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x3e,0xd2,0xa1,0xf8}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x40,0x13,0xd3,0x29}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x40,0x8c,0x9d,0x72}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x40,0x8c,0x9e,0x60}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x40,0xd2,0x29,0xe2}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0x17,0xf2,0x56}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0x17,0xf2,0x59}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0x17,0xf2,0x5a}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0x17,0xf2,0x5b}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0xac,0x0b,0xf9}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0xac,0x0c,0xf4}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0xac,0x1b,0x46}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0xac,0x21,0x6c}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x0c,0x43,0xab}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x0c,0x43,0xc1}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x0c,0x43,0xc5}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x1b,0xad,0xa5}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x1b,0xad,0xa6}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x1e,0xc1,0x9a}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x5a,0xba,0x09}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x5a,0xba,0x0a}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x5a,0xba,0x0d}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x48,0x12,0xd5,0x6b}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x4c,0x4a,0xb2,0xdd}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x4d,0x49,0x45,0xbe}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x4d,0x51,0xe2,0x92}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x4e,0x2e,0xea,0xf1}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x4e,0x53,0x13,0x00}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x4e,0x85,0xa9,0x46}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x50,0x78,0x1b,0x96}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x50,0xd3,0xc5,0xeb}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x51,0xa9,0x8b,0x95}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x51,0xa9,0xbc,0x58}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x51,0xa9,0xcd,0xdc}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x51,0xa9,0xe5,0x54}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x51,0xab,0x02,0xf5}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x51,0xe5,0x77,0xd8}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x52,0x76,0xe3,0x34}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x52,0xd3,0x15,0x80}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x52,0xd3,0x15,0x83}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x52,0xd3,0x15,0xad}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x52,0xd3,0x22,0x67}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x52,0xef,0x4f,0x58}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x53,0x01,0x63,0x01}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x53,0x01,0x63,0x06}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x55,0x19,0xc2,0xcc}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x55,0x19,0xc7,0xd7}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x55,0xb8,0xfe,0x1d}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x55,0xb8,0xfe,0xb5}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x55,0xff,0x04,0xd4}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x56,0x69,0xeb,0x67}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x57,0x6a,0x3f,0x34}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x57,0x75,0xfd,0x37}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x58,0x77,0xb3,0xb2}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x58,0x77,0xb3,0xb3}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x58,0xa6,0xc8,0x99}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x59,0x24,0xdc,0xf1}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x59,0x26,0x90,0x47}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x59,0x28,0x72,0x45}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x59,0x2d,0x43,0x21}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x59,0xa3,0x86,0xe3}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5a,0xbb,0x05,0x3d}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5b,0x7b,0xc3,0x53}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5b,0x7b,0xc9,0x5e}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5b,0xdb,0xef,0x52}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5b,0xdb,0xef,0x53}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5d,0x5a,0xcd,0x50}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5d,0x9e,0xd8,0x99}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5d,0xb9,0x67,0x46}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5d,0xb9,0x67,0x47}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5e,0x82,0x68,0xa9}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5e,0xb1,0xe0,0xe1}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5e,0xb1,0xe1,0xd2}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5e,0xb1,0xe8,0x21}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5f,0x2b,0x8b,0xa2}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5f,0xb7,0x33,0x62}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5f,0xb7,0x33,0x8d}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5f,0xb7,0x35,0x38}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5f,0xb7,0x35,0x60}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5f,0xd7,0x2d,0xe1}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x60,0x7e,0x60,0xa4}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x65,0x84,0x19,0xbc}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x67,0x0b,0x40,0x5e}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x68,0x80,0xe2,0x46}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x68,0x80,0xe2,0x48}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x68,0xee,0xc0,0x92}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x6b,0x06,0x8c,0x23}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x6b,0x06,0x8c,0x37}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x6b,0x06,0xaf,0xce}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x6b,0x9b,0x76,0x89}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x6c,0x3d,0xe0,0x21}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x6e,0x0a,0x19,0x4c}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x74,0x3e,0xed,0xbe}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x76,0x1f,0x26,0xe8}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x78,0x84,0x1b,0x27}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x7a,0x72,0xad,0xda}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x7b,0xc1,0x40,0xa6}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x7d,0x59,0x3e,0x24}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x7d,0x59,0x3e,0x25}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x82,0xb9,0xfb,0x45}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x82,0xb9,0xfb,0x71}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x85,0x82,0x66,0x16}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x8b,0xa2,0x0b,0x52}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x8d,0xff,0xb8,0xbf}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x8e,0x2c,0xe5,0x3d}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x8e,0x36,0xa2,0xb3}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x95,0x38,0x80,0xc7}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9a,0x7f,0x39,0x42}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9a,0x7f,0x39,0xf0}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9a,0x7f,0x3b,0x1b}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9a,0x7f,0x3c,0x08}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9b,0xfe,0x20,0x8b}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9f,0x64,0x13,0xa6}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9f,0x64,0x13,0xa7}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa2,0xdd,0xc3,0x11}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa2,0xdd,0xc3,0xf3}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa2,0xfa,0x91,0x6b}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa3,0x2c,0xa7,0x90}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa3,0x2c,0xa7,0xed}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa3,0x2c,0xab,0x33}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa3,0xac,0x80,0xbb}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa3,0xac,0x81,0x0d}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa4,0x84,0x2a,0xa2}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa7,0x58,0x0f,0x62}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa8,0xeb,0x60,0xca}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa8,0xeb,0x60,0xcb}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa8,0xeb,0x60,0xcd}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa8,0xeb,0x63,0x2d}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xaa,0x4b,0xa2,0x3c}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xaa,0x4b,0xa2,0xdb}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xaa,0x4b,0xa3,0x6c}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xac,0x56,0x79,0x94}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xac,0x68,0x40,0x0d}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xac,0x6e,0x06,0xa7}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xac,0x6e,0x06,0xa9}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xad,0xd4,0xf1,0x32}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb0,0x1f,0x91,0x32}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0x3e,0x80,0x32}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0x3e,0xa0,0x1d}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0x3e,0xc0,0x2a}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0xd1,0x32,0x1e}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0xee,0x2a,0x07}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0xfe,0x17,0xa0}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0xfe,0x20,0x30}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x02,0x52,0x89}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x1a,0x7e,0xfa}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x1c,0x65,0x5b}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x1c,0x65,0x85}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x23,0x40,0xd9}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x23,0x43,0x75}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x2b,0xd2,0x7d}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x3a,0xe0,0xea}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x40,0x68,0xdd}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x40,0x68,0xde}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x40,0x68,0xdf}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x52,0x16,0xe4}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x6a,0x79,0xa3}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x77,0x55,0x1e}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x8e,0xd4,0x90}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x9c,0xb2,0x4a}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x9c,0xb2,0x7d}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x9c,0xb2,0xd8}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x9c,0xb2,0xdd}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa5,0xa8,0x16}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa5,0xa8,0x17}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa5,0xa8,0x19}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa5,0xa8,0x1b}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa6,0xef,0x30}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa6,0xef,0xa2}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa6,0xef,0xbb}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa6,0xef,0xbf}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa8,0x08,0x90}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xb9,0x28,0x0d}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xd9,0x01,0x63}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0x28,0x3e,0x16}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0x28,0x5d,0xcd}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0xa6,0x4a,0xad}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0xd5,0xab,0x1e}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0xe3,0x10,0x10}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0xe3,0x10,0x53}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0xe3,0x4a,0xc1}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0xe3,0x4a,0xc4}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbe,0x0a,0x08,0xfa}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc0,0x51,0x82,0xe4}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc0,0xe3,0xe4,0xc4}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc0,0xe3,0xe4,0xc5}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc0,0xf3,0xd6,0x5a}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc0,0xfa,0xe6,0x11}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc1,0xea,0xe0,0x48}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc1,0xea,0xe0,0x64}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc1,0xea,0xe0,0x91}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc1,0xea,0xe0,0x98}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc6,0x14,0x65,0x74}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc6,0x17,0x80,0x4b}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc6,0x17,0xe2,0x29}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc6,0x3d,0xbe,0x8e}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc6,0xcc,0xfb,0x3a}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc7,0xc9,0x6e,0xc3}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc8,0x7a,0x80,0xac}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xca,0x47,0x62,0x7b}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xca,0x47,0x62,0x7c}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xca,0x47,0x62,0x7d}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xca,0x47,0x62,0x7e}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xcc,0x0c,0xf0,0x62}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xcc,0x10,0xf5,0x62}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xcc,0x1b,0x3a,0xd4}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd1,0xb1,0x57,0x94}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd1,0xb1,0x58,0x57}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd3,0x63,0xe0,0xa3}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd3,0x63,0xe0,0xa7}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd3,0x63,0xe0,0xae}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd3,0x63,0xe0,0xca}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0x18,0x60,0x1a}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0x18,0x60,0x78}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0x18,0x60,0x9f}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0x18,0x60,0xb2}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0xe3,0x88,0xeb}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0xe3,0xc9,0x2f}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0xed,0x25,0xf0}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd5,0x88,0x50,0x89}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd5,0x88,0x50,0x9f}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd5,0xa9,0x49,0x4a}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0x0d,0x65,0x5e}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0x0d,0x6b,0x1a}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0x3d,0x02,0x35}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0x3d,0x03,0xc1}, 9999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xdb,0x02,0x82,0x6e}, 9999}\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x02,0x42,0x90}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x84,0x9f,0x06}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x84,0x9f,0x08}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x84,0x9f,0x09}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x84,0x9f,0x0a}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x86,0x73,0x25}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0xbd,0x81,0x29}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x12,0xdd,0x60,0x95}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xaf,0x00,0x70}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xaf,0x00,0x71}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xaf,0x00,0x72}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xaf,0x00,0x73}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xb6,0x80,0x15}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xb6,0x80,0x16}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xb6,0x80,0x17}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xb6,0x80,0x18}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x17,0xe3,0xa0,0x4c}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x1f,0x0d,0xd9,0x34}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x1f,0x0d,0xd9,0x35}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x1f,0x0d,0xd9,0x36}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x1f,0x0d,0xd9,0x37}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x1f,0x0e,0x86,0xed}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x1f,0x1f,0x49,0x52}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x22,0xc7,0x82,0x45}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x22,0xce,0x00,0x3f}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x22,0xe1,0x65,0x61}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x23,0xc4,0xf2,0xe3}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0x78,0xa1,0x91}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0x9d,0xc7,0xd2}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0xc8,0x7a,0xdf}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0xdd,0xc2,0x2a}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0xdd,0xc2,0xdc}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x25,0xdd,0xc2,0xde}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x26,0x7f,0xa9,0x93}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2b,0xe5,0x4d,0x2e}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x20,0xc0,0x45}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x3a,0x30,0x11}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x4c,0x40,0x06}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x4c,0x80,0x3d}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2f,0x4a,0x17,0xcf}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2f,0x5a,0x0e,0x9c}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2f,0x5a,0x35,0x67}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2f,0x5b,0xd9,0x31}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2f,0x64,0x19,0x76}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x32,0x03,0x4a,0x51}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x32,0x03,0x4a,0x52}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x32,0x03,0x4a,0x54}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x32,0x03,0x4a,0x55}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x32,0x63,0x00,0xf3}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0x0e,0xc0,0xd3}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0x2c,0x80,0x19}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0x4e,0xa5,0x5b}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0x4f,0x70,0x16}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0x50,0x37,0xdf}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0xaa,0x66,0xfd}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0xbb,0x87,0xbb}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0xf2,0x25,0x08}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0xf2,0x27,0x60}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x3e,0x8a,0x03,0xd6}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x3e,0x8a,0x08,0x07}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x3e,0xd2,0x05,0xf6}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x3e,0xd2,0xa1,0xf8}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x40,0x13,0xd3,0x29}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x40,0x8c,0x9d,0x72}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x40,0x8c,0x9e,0x60}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x40,0xd2,0x29,0xe2}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0x17,0xf2,0x56}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0x17,0xf2,0x59}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0x17,0xf2,0x5a}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0x17,0xf2,0x5b}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0xac,0x0b,0xf9}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0xac,0x0c,0xf4}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0xac,0x1b,0x46}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x42,0xac,0x21,0x6c}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x0c,0x43,0xab}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x0c,0x43,0xc1}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x0c,0x43,0xc5}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x1b,0xad,0xa5}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x1b,0xad,0xa6}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x1e,0xc1,0x9a}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x5a,0xba,0x09}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x5a,0xba,0x0a}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x45,0x5a,0xba,0x0d}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x48,0x12,0xd5,0x6b}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x4c,0x4a,0xb2,0xdd}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x4d,0x49,0x45,0xbe}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x4d,0x51,0xe2,0x92}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x4e,0x2e,0xea,0xf1}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x4e,0x53,0x13,0x00}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x4e,0x85,0xa9,0x46}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x50,0x78,0x1b,0x96}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x50,0xd3,0xc5,0xeb}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x51,0xa9,0x8b,0x95}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x51,0xa9,0xbc,0x58}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x51,0xa9,0xcd,0xdc}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x51,0xa9,0xe5,0x54}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x51,0xab,0x02,0xf5}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x51,0xe5,0x77,0xd8}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x52,0x76,0xe3,0x34}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x52,0xd3,0x15,0x80}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x52,0xd3,0x15,0x83}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x52,0xd3,0x15,0xad}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x52,0xd3,0x22,0x67}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x52,0xef,0x4f,0x58}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x53,0x01,0x63,0x01}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x53,0x01,0x63,0x06}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x55,0x19,0xc2,0xcc}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x55,0x19,0xc7,0xd7}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x55,0xb8,0xfe,0x1d}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x55,0xb8,0xfe,0xb5}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x55,0xff,0x04,0xd4}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x56,0x69,0xeb,0x67}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x57,0x6a,0x3f,0x34}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x57,0x75,0xfd,0x37}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x58,0x77,0xb3,0xb2}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x58,0x77,0xb3,0xb3}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x58,0xa6,0xc8,0x99}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x59,0x24,0xdc,0xf1}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x59,0x26,0x90,0x47}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x59,0x28,0x72,0x45}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x59,0x2d,0x43,0x21}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x59,0xa3,0x86,0xe3}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5a,0xbb,0x05,0x3d}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5b,0x7b,0xc3,0x53}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5b,0x7b,0xc9,0x5e}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5b,0xdb,0xef,0x52}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5b,0xdb,0xef,0x53}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5d,0x5a,0xcd,0x50}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5d,0x9e,0xd8,0x99}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5d,0xb9,0x67,0x46}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5d,0xb9,0x67,0x47}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5e,0x82,0x68,0xa9}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5e,0xb1,0xe0,0xe1}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5e,0xb1,0xe1,0xd2}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5e,0xb1,0xe8,0x21}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5f,0x2b,0x8b,0xa2}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5f,0xb7,0x33,0x62}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5f,0xb7,0x33,0x8d}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5f,0xb7,0x35,0x38}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5f,0xb7,0x35,0x60}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x5f,0xd7,0x2d,0xe1}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x60,0x7e,0x60,0xa4}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x65,0x84,0x19,0xbc}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x67,0x0b,0x40,0x5e}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x68,0x80,0xe2,0x46}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x68,0x80,0xe2,0x48}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x68,0xee,0xc0,0x92}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x6b,0x06,0x8c,0x23}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x6b,0x06,0x8c,0x37}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x6b,0x06,0xaf,0xce}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x6b,0x9b,0x76,0x89}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x6c,0x3d,0xe0,0x21}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x6e,0x0a,0x19,0x4c}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x74,0x3e,0xed,0xbe}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x76,0x1f,0x26,0xe8}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x78,0x84,0x1b,0x27}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x7a,0x72,0xad,0xda}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x7b,0xc1,0x40,0xa6}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x7d,0x59,0x3e,0x24}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x7d,0x59,0x3e,0x25}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x82,0xb9,0xfb,0x45}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x82,0xb9,0xfb,0x71}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x85,0x82,0x66,0x16}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x8b,0xa2,0x0b,0x52}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x8d,0xff,0xb8,0xbf}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x8e,0x2c,0xe5,0x3d}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x8e,0x36,0xa2,0xb3}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x95,0x38,0x80,0xc7}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9a,0x7f,0x39,0x42}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9a,0x7f,0x39,0xf0}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9a,0x7f,0x3b,0x1b}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9a,0x7f,0x3c,0x08}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9b,0xfe,0x20,0x8b}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9f,0x64,0x13,0xa6}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x9f,0x64,0x13,0xa7}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa2,0xdd,0xc3,0x11}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa2,0xdd,0xc3,0xf3}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa2,0xfa,0x91,0x6b}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa3,0x2c,0xa7,0x90}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa3,0x2c,0xa7,0xed}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa3,0x2c,0xab,0x33}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa3,0xac,0x80,0xbb}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa3,0xac,0x81,0x0d}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa4,0x84,0x2a,0xa2}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa7,0x58,0x0f,0x62}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa8,0xeb,0x60,0xca}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa8,0xeb,0x60,0xcb}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa8,0xeb,0x60,0xcd}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa8,0xeb,0x63,0x2d}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xaa,0x4b,0xa2,0x3c}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xaa,0x4b,0xa2,0xdb}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xaa,0x4b,0xa3,0x6c}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xac,0x56,0x79,0x94}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xac,0x68,0x40,0x0d}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xac,0x6e,0x06,0xa7}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xac,0x6e,0x06,0xa9}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xad,0xd4,0xf1,0x32}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb0,0x1f,0x91,0x32}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0x3e,0x80,0x32}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0x3e,0xa0,0x1d}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0x3e,0xc0,0x2a}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0xd1,0x32,0x1e}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0xee,0x2a,0x07}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0xfe,0x17,0xa0}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb2,0xfe,0x20,0x30}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x02,0x52,0x89}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x1a,0x7e,0xfa}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x1c,0x65,0x5b}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x1c,0x65,0x85}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x23,0x40,0xd9}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x23,0x43,0x75}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x2b,0xd2,0x7d}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x3a,0xe0,0xea}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x40,0x68,0xdd}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x40,0x68,0xde}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x40,0x68,0xdf}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x52,0x16,0xe4}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x6a,0x79,0xa3}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x77,0x55,0x1e}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x8e,0xd4,0x90}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x9c,0xb2,0x4a}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x9c,0xb2,0x7d}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x9c,0xb2,0xd8}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0x9c,0xb2,0xdd}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa5,0xa8,0x16}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa5,0xa8,0x17}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa5,0xa8,0x19}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa5,0xa8,0x1b}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa6,0xef,0x30}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa6,0xef,0xa2}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa6,0xef,0xbb}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa6,0xef,0xbf}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xa8,0x08,0x90}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xb9,0x28,0x0d}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xb9,0xd9,0x01,0x63}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0x28,0x3e,0x16}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0x28,0x5d,0xcd}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0xa6,0x4a,0xad}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0xd5,0xab,0x1e}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0xe3,0x10,0x10}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0xe3,0x10,0x53}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0xe3,0x4a,0xc1}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbc,0xe3,0x4a,0xc4}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xbe,0x0a,0x08,0xfa}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc0,0x51,0x82,0xe4}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc0,0xe3,0xe4,0xc4}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc0,0xe3,0xe4,0xc5}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc0,0xf3,0xd6,0x5a}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc0,0xfa,0xe6,0x11}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc1,0xea,0xe0,0x48}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc1,0xea,0xe0,0x64}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc1,0xea,0xe0,0x91}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc1,0xea,0xe0,0x98}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc6,0x14,0x65,0x74}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc6,0x17,0x80,0x4b}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc6,0x17,0xe2,0x29}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc6,0x3d,0xbe,0x8e}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc6,0xcc,0xfb,0x3a}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc7,0xc9,0x6e,0xc3}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xc8,0x7a,0x80,0xac}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xca,0x47,0x62,0x7b}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xca,0x47,0x62,0x7c}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xca,0x47,0x62,0x7d}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xca,0x47,0x62,0x7e}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xcc,0x0c,0xf0,0x62}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xcc,0x10,0xf5,0x62}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xcc,0x1b,0x3a,0xd4}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd1,0xb1,0x57,0x94}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd1,0xb1,0x58,0x57}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd3,0x63,0xe0,0xa3}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd3,0x63,0xe0,0xa7}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd3,0x63,0xe0,0xae}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd3,0x63,0xe0,0xca}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0x18,0x60,0x1a}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0x18,0x60,0x78}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0x18,0x60,0x9f}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0x18,0x60,0xb2}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0xe3,0x88,0xeb}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0xe3,0xc9,0x2f}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd4,0xed,0x25,0xf0}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd5,0x88,0x50,0x89}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd5,0x88,0x50,0x9f}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd5,0xa9,0x49,0x4a}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0x0d,0x65,0x5e}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0x0d,0x6b,0x1a}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0x3d,0x02,0x35}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0x3d,0x03,0xc1}, 8369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xdb,0x02,0x82,0x6e}, 8369}\n };\n \n static SeedSpec6 pnSeed6_test[] = {"
      },
      {
        "sha": "77546be691ca3c5380a3f6678020d911c9a3c2d7",
        "filename": "src/qt/locale/syscoin_bg.ts",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_bg.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_bg.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_bg.ts?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -4065,8 +4065,8 @@ https://www.transifex.com/projects/p/syscoin/</translation>\n         <translation>\u0417\u0430\u0434\u0430\u0439 \u0431\u0440\u043e\u0439 \u0437\u0430\u044f\u0432\u043a\u0438, \u043a\u043e\u0433\u0430\u0442\u043e \u0441\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0430\u043d\u0435 (-1 =\u0432\u0441\u0438\u0447\u043a\u0438 \u044f\u0434\u0440\u0430, \u043f\u043e \u043f\u043e\u0434\u0440\u0430\u0437\u0431\u0438\u0440\u0430\u043d\u0435: %d)</translation>\n     </message>\n     <message>\n-        <source>Show N confirmations for a successfully locked transaction (0-9999, default: %u)</source>\n-        <translation>\u041f\u043e\u043a\u0430\u0436\u0438 N \u043f\u043e\u0442\u0432\u044a\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f (0-9999, \u043f\u043e \u043f\u043e\u0434\u0440\u0430\u0437\u0431\u0438\u0440\u0430\u043d\u0435: %u)</translation>\n+        <source>Show N confirmations for a successfully locked transaction (0-8369, default: %u)</source>\n+        <translation>\u041f\u043e\u043a\u0430\u0436\u0438 N \u043f\u043e\u0442\u0432\u044a\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f (0-8369, \u043f\u043e \u043f\u043e\u0434\u0440\u0430\u0437\u0431\u0438\u0440\u0430\u043d\u0435: %u)</translation>\n     </message>\n     <message>\n         <source>This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit &lt;https://www.openssl.org/&gt; and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.</source>"
      },
      {
        "sha": "4ea86e2d1ebb99e62036793f72591dc7ba5cabe1",
        "filename": "src/qt/locale/syscoin_de.ts",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_de.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_de.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_de.ts?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -4068,8 +4068,8 @@ Dies kann passieren, wenn einige Syscoin aus ihrer Wallet bereits ausgegeben wur\n         <translation>Legt ein Prozessor-/CPU-Kernlimit fest, wenn CPU-Mining aktiviert ist (-1 = unbegrenzt, Standard: %d)</translation>\n     </message>\n     <message>\n-        <source>Show N confirmations for a successfully locked transaction (0-9999, default: %u)</source>\n-        <translation>Anzahl Best\u00e4tigungen  f\u00fcr eine erfolgreich gesperrte Transaktion (0-9999, voreingestellt: %u)</translation>\n+        <source>Show N confirmations for a successfully locked transaction (0-8369, default: %u)</source>\n+        <translation>Anzahl Best\u00e4tigungen  f\u00fcr eine erfolgreich gesperrte Transaktion (0-8369, voreingestellt: %u)</translation>\n     </message>\n     <message>\n         <source>This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit &lt;https://www.openssl.org/&gt; and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.</source>"
      },
      {
        "sha": "1f904f4e9b7b1ffb5b0df5b6c09304a1bfc3ee2d",
        "filename": "src/qt/locale/syscoin_en.ts",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_en.ts?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -5254,8 +5254,8 @@ https://www.transifex.com/projects/p/syscoin/</translation>\n     </message>\n     <message>\n         <location line=\"+3\"/>\n-        <source>Show N confirmations for a successfully locked transaction (0-9999, default: %u)</source>\n-        <translation>Show N confirmations for a successfully locked transaction (0-9999, default: %u)</translation>\n+        <source>Show N confirmations for a successfully locked transaction (0-8369, default: %u)</source>\n+        <translation>Show N confirmations for a successfully locked transaction (0-8369, default: %u)</translation>\n     </message>\n     <message>\n         <location line=\"+17\"/>"
      },
      {
        "sha": "7cd4e93fb885c5000df7e2529fe8fd1ec557951d",
        "filename": "src/qt/locale/syscoin_es.ts",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_es.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_es.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_es.ts?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -3703,8 +3703,8 @@ https://www.transifex.com/projects/p/syscoin/</translation>\n         <translation>Establecer el n\u00famero de hilos para la generaci\u00f3n de syscoin cuando \u00e9sta se encuentra activada (-1 = todos los n\u00facleos, predeterminado: %d)</translation>\n     </message>\n     <message>\n-        <source>Show N confirmations for a successfully locked transaction (0-9999, default: %u)</source>\n-        <translation>Mostrar N confirmaciones para una transacci\u00f3n bloqueada con \u00e9xito (0-9999, predeterminado: %u)</translation>\n+        <source>Show N confirmations for a successfully locked transaction (0-8369, default: %u)</source>\n+        <translation>Mostrar N confirmaciones para una transacci\u00f3n bloqueada con \u00e9xito (0-8369, predeterminado: %u)</translation>\n     </message>\n     <message>\n         <source>This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit &lt;https://www.openssl.org/&gt; and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.</source>\n@@ -3759,8 +3759,8 @@ por ejemplo: alertnotify=echo %%s | mail -s \"Alerta de Syscoin\" admin@foo.com\n         <translation>Los pares de la lista blanca no pueden ser excluidos por DoS y sus transacciones siempre se transmitir\u00e1n, incluso si ya se encuentran en el grupo de memoria, \u00fatil e.g. para una pasarela</translation>\n     </message>\n     <message>\n-        <source>(9999 could be used only on mainnet)</source>\n-        <translation>(9999 s\u00f3lo se puede usar en la red principal)</translation>\n+        <source>(8369 could be used only on mainnet)</source>\n+        <translation>(8369 s\u00f3lo se puede usar en la red principal)</translation>\n     </message>\n     <message>\n         <source>(default: %s)</source>\n@@ -4177,8 +4177,8 @@ por ejemplo: alertnotify=echo %%s | mail -s \"Alerta de Syscoin\" admin@foo.com\n         <translation>La clave prinvada del nodo maestro no es v\u00e1lida. Por favor, consulte la  documentaci\u00f3n.</translation>\n     </message>\n     <message>\n-        <source>(must be 9999 for mainnet)</source>\n-        <translation>(debe ser 9999 para la red principal)</translation>\n+        <source>(must be 8369 for mainnet)</source>\n+        <translation>(debe ser 8369 para la red principal)</translation>\n     </message>\n     <message>\n         <source>Can't find random Masternode.</source>"
      },
      {
        "sha": "253bf55658259b01a93b37298ccb923edb1091fa",
        "filename": "src/qt/locale/syscoin_fi.ts",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_fi.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_fi.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_fi.ts?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -4070,8 +4070,8 @@ N\u00e4ill\u00e4 toiminnoilla voit korjata korruptoituneen lohkoketjun tai puuttuvat/van\n         <translation>Aseta prosessorin ytimien m\u00e4\u00e4r\u00e4 louhintaan, jos p\u00e4\u00e4ll\u00e4 (-1 = kaikki ytimet, oletus: %d)</translation>\n     </message>\n     <message>\n-        <source>Show N confirmations for a successfully locked transaction (0-9999, default: %u)</source>\n-        <translation>N\u00e4yt\u00e4 N vahvistusta onnistuneesti lukitulle siirtotapahtumalle (0-9999, oletus: %u)</translation>\n+        <source>Show N confirmations for a successfully locked transaction (0-8369, default: %u)</source>\n+        <translation>N\u00e4yt\u00e4 N vahvistusta onnistuneesti lukitulle siirtotapahtumalle (0-8369, oletus: %u)</translation>\n     </message>\n     <message>\n         <source>This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit &lt;https://www.openssl.org/&gt; and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.</source>"
      },
      {
        "sha": "84bd851b0997f4ec20185a1153dd859ff40ae07c",
        "filename": "src/qt/locale/syscoin_fr.ts",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_fr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_fr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_fr.ts?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -4065,8 +4065,8 @@ https://www.transifex.com/projects/p/syscoin/</translation>\n         <translation>D\u00e9finir la limite processeur d\u00e9finissant quand la g\u00e9n\u00e9ration est en fonction (-1 = illimit\u00e9, par d\u00e9faut : %d)</translation>\n     </message>\n     <message>\n-        <source>Show N confirmations for a successfully locked transaction (0-9999, default: %u)</source>\n-        <translation>Afficher N confirmations for une transaction verrouill\u00e9e r\u00e9ussie (0-9999, default : %u)</translation>\n+        <source>Show N confirmations for a successfully locked transaction (0-8369, default: %u)</source>\n+        <translation>Afficher N confirmations for une transaction verrouill\u00e9e r\u00e9ussie (0-8369, default : %u)</translation>\n     </message>\n     <message>\n         <source>This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit &lt;https://www.openssl.org/&gt; and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.</source>"
      },
      {
        "sha": "26816e8dbd6c89e4928a21af386bb9ea7b023806",
        "filename": "src/qt/locale/syscoin_pl.ts",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_pl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_pl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_pl.ts?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -4049,8 +4049,8 @@ https://www.transifex.com/projects/p/syscoin/</translation>\n         <translation>Ustaw liczb\u0119 w\u0105tk\u00f3w do generowania monet, je\u015bli jest ono w\u0142\u0105czone (-1 = wszystkie rdzenie. domy\u015blnie: %d)</translation>\n     </message>\n     <message>\n-        <source>Show N confirmations for a successfully locked transaction (0-9999, default: %u)</source>\n-        <translation>Poka\u017c N potwierdze\u0144 dla skutecznie zamkni\u0119tej transakcji (0-9999, domy\u015blnie: %u)</translation>\n+        <source>Show N confirmations for a successfully locked transaction (0-8369, default: %u)</source>\n+        <translation>Poka\u017c N potwierdze\u0144 dla skutecznie zamkni\u0119tej transakcji (0-8369, domy\u015blnie: %u)</translation>\n     </message>\n     <message>\n         <source>This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit &lt;https://www.openssl.org/&gt; and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.</source>"
      },
      {
        "sha": "b160bc92e0f0cfb6a95404386972dcea9108ca58",
        "filename": "src/qt/locale/syscoin_pt.ts",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_pt.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_pt.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_pt.ts?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -3630,8 +3630,8 @@ https://www.transifex.com/projects/p/syscoin/</translation>\n         <translation>Definir o limite de processadores quando a gera\u00e7\u00e3o est\u00e1 activa (-1 = todos, omiss\u00e3o: %d)</translation>\n     </message>\n     <message>\n-        <source>Show N confirmations for a successfully locked transaction (0-9999, default: %u)</source>\n-        <translation>Mostrar N confirma\u00e7\u00f5es para uma transac\u00e7\u00e3o bloqueada com sucesso (0-9999, omiss\u00e3o: %u)</translation>\n+        <source>Show N confirmations for a successfully locked transaction (0-8369, default: %u)</source>\n+        <translation>Mostrar N confirma\u00e7\u00f5es para uma transac\u00e7\u00e3o bloqueada com sucesso (0-8369, omiss\u00e3o: %u)</translation>\n     </message>\n     <message>\n         <source>This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit &lt;https://www.openssl.org/&gt; and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.</source>\n@@ -3654,8 +3654,8 @@ https://www.transifex.com/projects/p/syscoin/</translation>\n         <translation>Aviso: Por favor verifique que a data e a hora do computador est\u00e1 correcta! Se o rel\u00f3gio estiver errado o Syscoin Core n\u00e3o vai funcionar correctamente.</translation>\n     </message>\n     <message>\n-        <source>(9999 could be used only on mainnet)</source>\n-        <translation>(9999 apenas pode ser usado para mainnet)</translation>\n+        <source>(8369 could be used only on mainnet)</source>\n+        <translation>(8369 apenas pode ser usado para mainnet)</translation>\n     </message>\n     <message>\n         <source>(default: %s)</source>\n@@ -4064,8 +4064,8 @@ https://www.transifex.com/projects/p/syscoin/</translation>\n         <translation>masternodeprivkey inv\u00e1lida. Por favor reveja a documenta\u00e7\u00e3o.</translation>\n     </message>\n     <message>\n-        <source>(must be 9999 for mainnet)</source>\n-        <translation>(deve ser 9999 para mainnet)</translation>\n+        <source>(must be 8369 for mainnet)</source>\n+        <translation>(deve ser 8369 para mainnet)</translation>\n     </message>\n     <message>\n         <source>Can't find random Masternode.</source>"
      },
      {
        "sha": "77055b14e196511e758742e64b833002b3df0d71",
        "filename": "src/qt/locale/syscoin_ru.ts",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_ru.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_ru.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_ru.ts?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -4065,8 +4065,8 @@ https://www.transifex.com/projects/p/syscoin/</translation>\n         <translation>\u0417\u0430\u0434\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u043d\u0435\u0442, \u0435\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0432\u0430\u044f \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0430 (-1 = \u0432\u0441\u0435 \u044f\u0434\u0440\u0430, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %d)</translation>\n     </message>\n     <message>\n-        <source>Show N confirmations for a successfully locked transaction (0-9999, default: %u)</source>\n-        <translation>\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c N \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 (0-9999, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %u)</translation>\n+        <source>Show N confirmations for a successfully locked transaction (0-8369, default: %u)</source>\n+        <translation>\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c N \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 (0-8369, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: %u)</translation>\n     </message>\n     <message>\n         <source>This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit &lt;https://www.openssl.org/&gt; and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.</source>"
      },
      {
        "sha": "a1be42ad3a5d07c5bd0aafc6493885793b783c51",
        "filename": "src/qt/locale/syscoin_sk.ts",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_sk.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_sk.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_sk.ts?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -3782,8 +3782,8 @@ https://www.transifex.com/projects/p/syscoin/</translation>\n         <translation>Nastavi\u0165 po\u010det vl\u00e1kien pre gener\u00e1ciu minc\u00ed (-1 = v\u0161etky jadr\u00e1, predvolen\u00e9: %d)</translation>\n     </message>\n     <message>\n-        <source>Show N confirmations for a successfully locked transaction (0-9999, default: %u)</source>\n-        <translation>Uk\u00e1za\u0165 N potvrden\u00ed pre \u00faspe\u0161ne zamknut\u00fa transakciu (0-9999, predvolen\u00e9: %u)</translation>\n+        <source>Show N confirmations for a successfully locked transaction (0-8369, default: %u)</source>\n+        <translation>Uk\u00e1za\u0165 N potvrden\u00ed pre \u00faspe\u0161ne zamknut\u00fa transakciu (0-8369, predvolen\u00e9: %u)</translation>\n     </message>\n     <message>\n         <source>This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit &lt;https://www.openssl.org/&gt; and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.</source>"
      },
      {
        "sha": "53e412c9a53f932ec00382985db53b16a444b62e",
        "filename": "src/qt/locale/syscoin_vi.ts",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_vi.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_vi.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_vi.ts?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -4065,8 +4065,8 @@ https://www.transifex.com/projects/p/syscoin/</translation>\n         <translation>Thi\u1ebft l\u1eadp s\u1ed1 c\u00e1c lu\u1ed3ng cho vi\u1ec7c sinh coin n\u1ebfu b\u1eadt (-1 = t\u1ea5t c\u1ea3 c\u00e1c l\u00f5i, ng\u1ea7m \u0111\u1ecbnh: %d)</translation>\n     </message>\n     <message>\n-        <source>Show N confirmations for a successfully locked transaction (0-9999, default: %u)</source>\n-        <translation>Hi\u1ec3n th\u1ecb N x\u00e1c nh\u1eadn cho m\u1ed7i giao d\u1ecbch \u0111\u01b0\u1ee3c kho\u00e1 th\u00e0nh c\u00f4ng (0-9999, ng\u1ea7m \u0111\u1ecbnh: %u)</translation>\n+        <source>Show N confirmations for a successfully locked transaction (0-8369, default: %u)</source>\n+        <translation>Hi\u1ec3n th\u1ecb N x\u00e1c nh\u1eadn cho m\u1ed7i giao d\u1ecbch \u0111\u01b0\u1ee3c kho\u00e1 th\u00e0nh c\u00f4ng (0-8369, ng\u1ea7m \u0111\u1ecbnh: %u)</translation>\n     </message>\n     <message>\n         <source>This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit &lt;https://www.openssl.org/&gt; and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.</source>"
      },
      {
        "sha": "268e7267c9584fbdac768456570b922bfaed580a",
        "filename": "src/qt/locale/syscoin_zh_CN.ts",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_zh_CN.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_zh_CN.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_zh_CN.ts?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -3615,8 +3615,8 @@ https://www.transifex.com/projects/p/syscoin/</translation>\n         <translation>\u5728\u767d\u540d\u5355\u4e2d\u7684\u8282\u70b9\u4e0d\u4f1a\u56e0\u4e3a\u68c0\u6d4b\u5230DoS\u653b\u51fb\u800c\u88ab\u505c\u7528. \u6765\u81ea\u8fd9\u4e9b\u8282\u70b9\u7684\u4ea4\u6613\u4e5f\u4e00\u5b9a\u4f1a\u88ab\u8f6c\u53d1, \u5373\u4f7f\u8bf4\u4ea4\u6613\u672c\u795e\u5c31\u6765\u81ea\u8bb0\u5fc6\u6c60. \u9002\u7528\u4e8e\u7f51\u5173</translation>\n     </message>\n     <message>\n-        <source>(9999 could be used only on mainnet)</source>\n-        <translation>(9999 \u53ea\u80fd\u88ab\u7528\u4e8e\u4e3b\u7f51)</translation>\n+        <source>(8369 could be used only on mainnet)</source>\n+        <translation>(8369 \u53ea\u80fd\u88ab\u7528\u4e8e\u4e3b\u7f51)</translation>\n     </message>\n     <message>\n         <source>(default: %s)</source>\n@@ -3959,8 +3959,8 @@ https://www.transifex.com/projects/p/syscoin/</translation>\n         <translation>\u65e0\u6548\u4e3b\u8282\u70b9\u79c1\u94a5\u3002\u8bf7\u67e5\u9605\u6587\u4ef6\u6750\u6599\u3002</translation>\n     </message>\n     <message>\n-        <source>(must be 9999 for mainnet)</source>\n-        <translation>(\u8bbe\u7f6e 9999 \u4e3a\u4e3b\u7f51)</translation>\n+        <source>(must be 8369 for mainnet)</source>\n+        <translation>(\u8bbe\u7f6e 8369 \u4e3a\u4e3b\u7f51)</translation>\n     </message>\n     <message>\n         <source>Can't find random Masternode.</source>"
      },
      {
        "sha": "5f4f6b66340efdf613a763fb8f083eee31d8c1c7",
        "filename": "src/qt/locale/syscoin_zh_TW.ts",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_zh_TW.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/locale/syscoin_zh_TW.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/syscoin_zh_TW.ts?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -4017,8 +4017,8 @@ https://www.transifex.com/projects/p/syscoin/</translation>\n         <translation>\u8a2d\u5b9a\u7522\u751f\u9322\u5e63\u7684\u57f7\u884c\u7dd2\u6578\u76ee(-1 \u8868\u793a\u8655\u7406\u5668\u6838\u5fc3\u6578\uff0c\u9810\u8a2d\u503c: %d)</translation>\n     </message>\n     <message>\n-        <source>Show N confirmations for a successfully locked transaction (0-9999, default: %u)</source>\n-        <translation>\u986f\u793a N \u500b\u78ba\u8a8d\u70ba\u4e00\u500b\u6210\u529f\u9396\u5b9a\u7684\u4ea4\u6613 (0-9999, \u9810\u8a2d\u503c: %u)</translation>\n+        <source>Show N confirmations for a successfully locked transaction (0-8369, default: %u)</source>\n+        <translation>\u986f\u793a N \u500b\u78ba\u8a8d\u70ba\u4e00\u500b\u6210\u529f\u9396\u5b9a\u7684\u4ea4\u6613 (0-8369, \u9810\u8a2d\u503c: %u)</translation>\n     </message>\n     <message>\n         <source>This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit &lt;https://www.openssl.org/&gt; and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.</source>"
      },
      {
        "sha": "d665dff435c489e4fac3bc67a786ebe55cb65330",
        "filename": "src/qt/syscoinstrings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/syscoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/qt/syscoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/syscoinstrings.cpp?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -197,7 +197,7 @@ QT_TRANSLATE_NOOP(\"syscoin-core\", \"\"\n \"Set the number of threads for coin generation if enabled (-1 = all cores, \"\n \"default: %d)\"),\n QT_TRANSLATE_NOOP(\"syscoin-core\", \"\"\n-\"Show N confirmations for a successfully locked transaction (0-9999, default: \"\n+\"Show N confirmations for a successfully locked transaction (0-8369, default: \"\n \"%u)\"),\n QT_TRANSLATE_NOOP(\"syscoin-core\", \"\"\n \"Specify full path to directory for automatic wallet backups (must exist)\"),"
      },
      {
        "sha": "dcbe277b8713aa7efce74c517d17ab79c444b50a",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -203,8 +203,8 @@ UniValue addnode(const JSONRPCRequest& request)\n             \"1. \\\"node\\\"     (string, required) The node (see getpeerinfo for nodes)\\n\"\n             \"2. \\\"command\\\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"addnode\", \"\\\"192.168.0.6:9999\\\" \\\"onetry\\\"\")\n-            + HelpExampleRpc(\"addnode\", \"\\\"192.168.0.6:9999\\\", \\\"onetry\\\"\")\n+            + HelpExampleCli(\"addnode\", \"\\\"192.168.0.6:8369\\\" \\\"onetry\\\"\")\n+            + HelpExampleRpc(\"addnode\", \"\\\"192.168.0.6:8369\\\", \\\"onetry\\\"\")\n         );\n \n     if(!g_connman)\n@@ -242,8 +242,8 @@ UniValue disconnectnode(const JSONRPCRequest& request)\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"     (string, required) The IP address/port of the node\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"disconnectnode\", \"\\\"192.168.0.6:9999\\\"\")\n-            + HelpExampleRpc(\"disconnectnode\", \"\\\"192.168.0.6:9999\\\"\")\n+            + HelpExampleCli(\"disconnectnode\", \"\\\"192.168.0.6:8369\\\"\")\n+            + HelpExampleRpc(\"disconnectnode\", \"\\\"192.168.0.6:8369\\\"\")\n         );\n \n     if(!g_connman)\n@@ -272,7 +272,7 @@ UniValue getaddednodeinfo(const JSONRPCRequest& request)\n             \"    \\\"connected\\\" : true|false,          (boolean) If connected\\n\"\n             \"    \\\"addresses\\\" : [                    (list of objects) Only when connected = true\\n\"\n             \"       {\\n\"\n-            \"         \\\"address\\\" : \\\"192.168.0.201:9999\\\",  (string) The syscoin server IP and port we're connected to\\n\"\n+            \"         \\\"address\\\" : \\\"192.168.0.201:8369\\\",  (string) The syscoin server IP and port we're connected to\\n\"\n             \"         \\\"connected\\\" : \\\"outbound\\\"           (string) connection, inbound or outbound\\n\"\n             \"       }\\n\"\n             \"     ]\\n\""
      },
      {
        "sha": "d75cb989129b4e961675c3f3db05811128c32a82",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -180,8 +180,8 @@ BOOST_AUTO_TEST_CASE(addrman_select)\n \n     // Add three addresses to new table.\n     CService addr2 = ResolveService(\"250.3.1.1\", 8333);\n-    CService addr3 = ResolveService(\"250.3.2.2\", 9999);\n-    CService addr4 = ResolveService(\"250.3.3.3\", 9999);\n+    CService addr3 = ResolveService(\"250.3.2.2\", 8369);\n+    CService addr4 = ResolveService(\"250.3.3.3\", 8369);\n \n     addrman.Add(CAddress(addr2, NODE_NONE), ResolveService(\"250.3.1.1\", 8333));\n     addrman.Add(CAddress(addr3, NODE_NONE), ResolveService(\"250.3.1.1\", 8333));\n@@ -204,8 +204,8 @@ BOOST_AUTO_TEST_CASE(addrman_select)\n \n     // Test 12: Select pulls from new and tried regardless of port number.\n     BOOST_CHECK(addrman.Select().ToString() == \"250.4.6.6:8333\");\n-    BOOST_CHECK(addrman.Select().ToString() == \"250.3.2.2:9999\");\n-    BOOST_CHECK(addrman.Select().ToString() == \"250.3.3.3:9999\");\n+    BOOST_CHECK(addrman.Select().ToString() == \"250.3.2.2:8369\");\n+    BOOST_CHECK(addrman.Select().ToString() == \"250.3.3.3:8369\");\n     BOOST_CHECK(addrman.Select().ToString() == \"250.4.4.4:8333\");\n }\n \n@@ -278,7 +278,7 @@ BOOST_AUTO_TEST_CASE(addrman_find)\n     BOOST_CHECK(addrman.size() == 0);\n \n     CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8333), NODE_NONE);\n-    CAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", 9999), NODE_NONE);\n+    CAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", 8369), NODE_NONE);\n     CAddress addr3 = CAddress(ResolveService(\"251.255.2.1\", 8333), NODE_NONE);\n \n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n@@ -368,7 +368,7 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n \n     CAddress addr1 = CAddress(ResolveService(\"250.250.2.1\", 8333), NODE_NONE);\n     addr1.nTime = GetAdjustedTime(); // Set time so isTerrible = false\n-    CAddress addr2 = CAddress(ResolveService(\"250.251.2.2\", 9999), NODE_NONE);\n+    CAddress addr2 = CAddress(ResolveService(\"250.251.2.2\", 8369), NODE_NONE);\n     addr2.nTime = GetAdjustedTime();\n     CAddress addr3 = CAddress(ResolveService(\"251.252.2.3\", 8333), NODE_NONE);\n     addr3.nTime = GetAdjustedTime();\n@@ -426,7 +426,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)\n     addrman.MakeDeterministic();\n \n     CAddress addr1 = CAddress(ResolveService(\"250.1.1.1\", 8333), NODE_NONE);\n-    CAddress addr2 = CAddress(ResolveService(\"250.1.1.1\", 9999), NODE_NONE);\n+    CAddress addr2 = CAddress(ResolveService(\"250.1.1.1\", 8369), NODE_NONE);\n \n     CNetAddr source1 = ResolveIP(\"250.1.1.1\");\n \n@@ -483,7 +483,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n     addrman.MakeDeterministic();\n \n     CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8333), NODE_NONE);\n-    CAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", 9999), NODE_NONE);\n+    CAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", 8369), NODE_NONE);\n \n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n "
      },
      {
        "sha": "a12a17c113372e5a70abe56bfd80ab117acfce63",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -79,8 +79,8 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n \n     CService addr1, addr2, addr3;\n     Lookup(\"250.7.1.1\", addr1, 8333, false);\n-    Lookup(\"250.7.2.2\", addr2, 9999, false);\n-    Lookup(\"250.7.3.3\", addr3, 9999, false);\n+    Lookup(\"250.7.2.2\", addr2, 8369, false);\n+    Lookup(\"250.7.3.3\", addr3, 8369, false);\n \n     // Add three addresses to new table.\n     CService source;"
      },
      {
        "sha": "fd34a8944a0c8d2dc4b570b2075560afa64a2edf",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd516bb04ee01a4ca6b111666353840005fe9b4/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "patch": "@@ -78,15 +78,15 @@ BOOST_AUTO_TEST_CASE(netbase_splithost)\n     BOOST_CHECK(TestSplitHost(\"www.syscoin.org:80\", \"www.syscoin.org\", 80));\n     BOOST_CHECK(TestSplitHost(\"[www.syscoin.org]:80\", \"www.syscoin.org\", 80));\n     BOOST_CHECK(TestSplitHost(\"127.0.0.1\", \"127.0.0.1\", -1));\n-    BOOST_CHECK(TestSplitHost(\"127.0.0.1:9999\", \"127.0.0.1\", 9999));\n+    BOOST_CHECK(TestSplitHost(\"127.0.0.1:8369\", \"127.0.0.1\", 8369));\n     BOOST_CHECK(TestSplitHost(\"[127.0.0.1]\", \"127.0.0.1\", -1));\n-    BOOST_CHECK(TestSplitHost(\"[127.0.0.1]:9999\", \"127.0.0.1\", 9999));\n+    BOOST_CHECK(TestSplitHost(\"[127.0.0.1]:8369\", \"127.0.0.1\", 8369));\n     BOOST_CHECK(TestSplitHost(\"::ffff:127.0.0.1\", \"::ffff:127.0.0.1\", -1));\n-    BOOST_CHECK(TestSplitHost(\"[::ffff:127.0.0.1]:9999\", \"::ffff:127.0.0.1\", 9999));\n-    BOOST_CHECK(TestSplitHost(\"[::]:9999\", \"::\", 9999));\n-    BOOST_CHECK(TestSplitHost(\"::9999\", \"::9999\", -1));\n-    BOOST_CHECK(TestSplitHost(\":9999\", \"\", 9999));\n-    BOOST_CHECK(TestSplitHost(\"[]:9999\", \"\", 9999));\n+    BOOST_CHECK(TestSplitHost(\"[::ffff:127.0.0.1]:8369\", \"::ffff:127.0.0.1\", 8369));\n+    BOOST_CHECK(TestSplitHost(\"[::]:8369\", \"::\", 8369));\n+    BOOST_CHECK(TestSplitHost(\"::8369\", \"::8369\", -1));\n+    BOOST_CHECK(TestSplitHost(\":8369\", \"\", 8369));\n+    BOOST_CHECK(TestSplitHost(\"[]:8369\", \"\", 8369));\n     BOOST_CHECK(TestSplitHost(\"\", \"\", -1));\n }\n \n@@ -99,10 +99,10 @@ bool static TestParse(std::string src, std::string canon)\n BOOST_AUTO_TEST_CASE(netbase_lookupnumeric)\n {\n     BOOST_CHECK(TestParse(\"127.0.0.1\", \"127.0.0.1:65535\"));\n-    BOOST_CHECK(TestParse(\"127.0.0.1:9999\", \"127.0.0.1:9999\"));\n+    BOOST_CHECK(TestParse(\"127.0.0.1:8369\", \"127.0.0.1:8369\"));\n     BOOST_CHECK(TestParse(\"::ffff:127.0.0.1\", \"127.0.0.1:65535\"));\n     BOOST_CHECK(TestParse(\"::\", \"[::]:65535\"));\n-    BOOST_CHECK(TestParse(\"[::]:9999\", \"[::]:9999\"));\n+    BOOST_CHECK(TestParse(\"[::]:8369\", \"[::]:8369\"));\n     BOOST_CHECK(TestParse(\"[127.0.0.1]\", \"127.0.0.1:65535\"));\n     BOOST_CHECK(TestParse(\":::\", \"[::]:0\"));\n }\n@@ -277,11 +277,11 @@ BOOST_AUTO_TEST_CASE(netbase_getgroup)\n     BOOST_CHECK(ResolveIP(\"1.2.3.4\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // IPv4\n     BOOST_CHECK(ResolveIP(\"::FFFF:0:102:304\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // RFC6145\n     BOOST_CHECK(ResolveIP(\"64:FF9B::102:304\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // RFC6052\n-    BOOST_CHECK(ResolveIP(\"2002:102:304:9999:9999:9999:9999:9999\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // RFC3964\n-    BOOST_CHECK(ResolveIP(\"2001:0:9999:9999:9999:9999:FEFD:FCFB\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // RFC4380\n+    BOOST_CHECK(ResolveIP(\"2002:102:304:8369:8369:8369:8369:8369\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // RFC3964\n+    BOOST_CHECK(ResolveIP(\"2001:0:8369:8369:8369:8369:FEFD:FCFB\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // RFC4380\n     BOOST_CHECK(ResolveIP(\"FD87:D87E:EB43:edb1:8e4:3588:e546:35ca\").GetGroup() == boost::assign::list_of((unsigned char)NET_TOR)(239)); // Tor\n-    BOOST_CHECK(ResolveIP(\"2001:470:abcd:9999:9999:9999:9999:9999\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV6)(32)(1)(4)(112)(175)); //he.net\n-    BOOST_CHECK(ResolveIP(\"2001:2001:9999:9999:9999:9999:9999:9999\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV6)(32)(1)(32)(1)); //IPv6\n+    BOOST_CHECK(ResolveIP(\"2001:470:abcd:8369:8369:8369:8369:8369\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV6)(32)(1)(4)(112)(175)); //he.net\n+    BOOST_CHECK(ResolveIP(\"2001:2001:8369:8369:8369:8369:8369:8369\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV6)(32)(1)(32)(1)); //IPv6\n \n }\n "
      }
    ]
  },
  {
    "sha": "e0c051209fd16dfaafd4994dc25f05c02b872937",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGMwNTEyMDlmZDE2ZGZhYWZkNDk5NGRjMjVmMDVjMDJiODcyOTM3",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T04:33:28Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T04:33:28Z"
      },
      "message": "update ports",
      "tree": {
        "sha": "1afba6d168ae5566b518377aa92dd8204e0aa81b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1afba6d168ae5566b518377aa92dd8204e0aa81b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0c051209fd16dfaafd4994dc25f05c02b872937",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0c051209fd16dfaafd4994dc25f05c02b872937",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0c051209fd16dfaafd4994dc25f05c02b872937",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0c051209fd16dfaafd4994dc25f05c02b872937/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dd516bb04ee01a4ca6b111666353840005fe9b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9dd516bb04ee01a4ca6b111666353840005fe9b4"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 22,
      "deletions": 22
    },
    "files": [
      {
        "sha": "a41f19e54d0308fd6e7bc5cccdc845600306c31f",
        "filename": "contrib/debian/examples/syscoin.conf",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0c051209fd16dfaafd4994dc25f05c02b872937/contrib/debian/examples/syscoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0c051209fd16dfaafd4994dc25f05c02b872937/contrib/debian/examples/syscoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/examples/syscoin.conf?ref=e0c051209fd16dfaafd4994dc25f05c02b872937",
        "patch": "@@ -44,11 +44,11 @@\n \n # Use as many addnode= settings as you like to connect to specific peers\n #addnode=69.164.218.197\n-#addnode=10.0.0.2:9999\n+#addnode=10.0.0.2:8369\n \n # Alternatively use as many connect= settings as you like to connect ONLY to specific peers\n #connect=69.164.218.197\n-#connect=10.0.0.1:9999\n+#connect=10.0.0.1:8369\n \n # Listening mode, enabled by default except when 'connect' is being used\n #listen=1"
      },
      {
        "sha": "2cfd442dad54c6e37f3ad6d5f13cae95d6e27449",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0c051209fd16dfaafd4994dc25f05c02b872937/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0c051209fd16dfaafd4994dc25f05c02b872937/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=e0c051209fd16dfaafd4994dc25f05c02b872937",
        "patch": "@@ -130,7 +130,7 @@ def main():\n         process_nodes(g, f, 'pnSeed6_main', 8369)\n     g.write('\\n')\n     with open(os.path.join(indir,'nodes_test.txt'),'r') as f:\n-        process_nodes(g, f, 'pnSeed6_test', 19999)\n+        process_nodes(g, f, 'pnSeed6_test', 18369)\n     g.write('#endif // SYS_CHAINPARAMSSEEDS_H\\n')\n             \n if __name__ == '__main__':"
      },
      {
        "sha": "65916648d89022a6a7c99bdc24ab4e1765a83004",
        "filename": "doc/masternode_conf.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0c051209fd16dfaafd4994dc25f05c02b872937/doc/masternode_conf.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0c051209fd16dfaafd4994dc25f05c02b872937/doc/masternode_conf.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/masternode_conf.md?ref=e0c051209fd16dfaafd4994dc25f05c02b872937",
        "patch": "@@ -10,8 +10,8 @@ Syscoin Core allows controlling multiple remote masternodes from a single wallet\n \n Example:\n ```\n-mn1 127.0.0.2:19999 93HaYBVUCYjEMeeH1Y4sBGLALQZE1Yc1K64xiqgX37tGBDQL8Xg 7603c20a05258c208b58b0a0d77603b9fc93d47cfa403035f87f3ce0af814566 0\n-mn2 127.0.0.4:19999 92Da1aYg6sbenP6uwskJgEY2XWB5LwJ7bXRqc3UPeShtHWJDjDv 5d898e78244f3206e0105f421cdb071d95d111a51cd88eb5511fc0dbf4bfd95f 1\n+mn1 127.0.0.2:8369 93HaYBVUCYjEMeeH1Y4sBGLALQZE1Yc1K64xiqgX37tGBDQL8Xg 7603c20a05258c208b58b0a0d77603b9fc93d47cfa403035f87f3ce0af814566 0\n+mn2 127.0.0.4:8369 92Da1aYg6sbenP6uwskJgEY2XWB5LwJ7bXRqc3UPeShtHWJDjDv 5d898e78244f3206e0105f421cdb071d95d111a51cd88eb5511fc0dbf4bfd95f 1\n ```\n \n In the example above:"
      },
      {
        "sha": "3761bb5594215155deb7521206196fefd05e61ca",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0c051209fd16dfaafd4994dc25f05c02b872937/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0c051209fd16dfaafd4994dc25f05c02b872937/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=e0c051209fd16dfaafd4994dc25f05c02b872937",
        "patch": "@@ -491,7 +491,7 @@ class CDevNetParams : public CChainParams {\n         pchMessageStart[2] = 0xff;\n         pchMessageStart[3] = 0xce;\n         vAlertPubKey = ParseHex(\"04517d8a699cb43d3938d7b24faaff7cda448ca4ea267723ba614784de661949bf632d6304316b244646dea079735b9a6fc4af804efb4752075b9fe2245e14e412\");\n-        nDefaultPort = 19999;\n+        nDefaultPort = 18369;\n         nPruneAfterHeight = 1000;\n \n         genesis = CreateGenesisBlock(1417713337, 1096447, 0x207fffff, 1, 50 * COIN);"
      },
      {
        "sha": "f9ae83a1996b25e1de57d71673549d37f0093f49",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0c051209fd16dfaafd4994dc25f05c02b872937/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0c051209fd16dfaafd4994dc25f05c02b872937/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=e0c051209fd16dfaafd4994dc25f05c02b872937",
        "patch": "@@ -299,20 +299,20 @@ static SeedSpec6 pnSeed6_main[] = {\n };\n \n static SeedSpec6 pnSeed6_test[] = {\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x22,0xed,0xa7,0xf8}, 19999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x22,0xee,0x5d,0xe0}, 19999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2b,0xe5,0x4d,0x2e}, 19999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x20,0x68,0x5f}, 19999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x20,0xd7,0x1f}, 19999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x20,0xdd,0xe6}, 19999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x20,0xed,0x4c}, 19999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0x07,0x2e,0x71}, 19999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0xc9,0x17,0x81}, 19999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x8a,0x44,0x14,0x8e}, 19999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa5,0xe3,0x08,0x50}, 19999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0xb6,0xe5,0x80}, 19999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0xb6,0xe5,0x84}, 19999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0xb6,0xe5,0x86}, 19999},\n-    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0xb6,0xe5,0x88}, 19999}\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x22,0xed,0xa7,0xf8}, 18369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x22,0xee,0x5d,0xe0}, 18369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2b,0xe5,0x4d,0x2e}, 18369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x20,0x68,0x5f}, 18369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x20,0xd7,0x1f}, 18369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x20,0xdd,0xe6}, 18369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x2d,0x20,0xed,0x4c}, 18369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0x07,0x2e,0x71}, 18369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x34,0xc9,0x17,0x81}, 18369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x8a,0x44,0x14,0x8e}, 18369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xa5,0xe3,0x08,0x50}, 18369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0xb6,0xe5,0x80}, 18369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0xb6,0xe5,0x84}, 18369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0xb6,0xe5,0x86}, 18369},\n+    {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xd9,0xb6,0xe5,0x88}, 18369}\n };\n #endif // SYS_CHAINPARAMSSEEDS_H"
      },
      {
        "sha": "b56c0c2d666f935e1c4dc3ab0ff5dfca110a84c5",
        "filename": "src/masternodeconfig.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0c051209fd16dfaafd4994dc25f05c02b872937/src/masternodeconfig.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0c051209fd16dfaafd4994dc25f05c02b872937/src/masternodeconfig.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeconfig.cpp?ref=e0c051209fd16dfaafd4994dc25f05c02b872937",
        "patch": "@@ -24,7 +24,7 @@ bool CMasternodeConfig::read(std::string& strErrRet) {\n         if (configFile != NULL) {\n             std::string strHeader = \"# Masternode config file\\n\"\n                           \"# Format: alias IP:port masternodeprivkey collateral_output_txid collateral_output_index\\n\"\n-                          \"# Example: mn1 127.0.0.2:19999 93HaYBVUCYjEMeeH1Y4sBGLALQZE1Yc1K64xiqgX37tGBDQL8Xg 2bcd3c84c84f87eaa86e4e56834c92927a07f9e18718810b92e0d0324456a67c 0\\n\";\n+                          \"# Example: mn1 127.0.0.2:8369 93HaYBVUCYjEMeeH1Y4sBGLALQZE1Yc1K64xiqgX37tGBDQL8Xg 2bcd3c84c84f87eaa86e4e56834c92927a07f9e18718810b92e0d0324456a67c 0\\n\";\n             fwrite(strHeader.c_str(), std::strlen(strHeader.c_str()), 1, configFile);\n             fclose(configFile);\n         }"
      }
    ]
  },
  {
    "sha": "8a23dbcc9ef5c3be3ae56f0dc96034605bccf4f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTIzZGJjYzllZjVjM2JlM2FlNTZmMGRjOTYwMzQ2MDViY2NmNGYz",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T06:54:12Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T06:54:12Z"
      },
      "message": "add some fields for escrow indexer",
      "tree": {
        "sha": "bcd26f5eead205e9b9071264cbc1f52e813f948d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bcd26f5eead205e9b9071264cbc1f52e813f948d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a23dbcc9ef5c3be3ae56f0dc96034605bccf4f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a23dbcc9ef5c3be3ae56f0dc96034605bccf4f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a23dbcc9ef5c3be3ae56f0dc96034605bccf4f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a23dbcc9ef5c3be3ae56f0dc96034605bccf4f3/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0c051209fd16dfaafd4994dc25f05c02b872937",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0c051209fd16dfaafd4994dc25f05c02b872937",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0c051209fd16dfaafd4994dc25f05c02b872937"
      }
    ],
    "stats": {
      "total": 155,
      "additions": 74,
      "deletions": 81
    },
    "files": [
      {
        "sha": "c7049d6ead5d365aa1ccbafcb38697ca71c475e4",
        "filename": "src/escrow.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 71,
        "changes": 135,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a23dbcc9ef5c3be3ae56f0dc96034605bccf4f3/src/escrow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a23dbcc9ef5c3be3ae56f0dc96034605bccf4f3/src/escrow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/escrow.cpp?ref=8a23dbcc9ef5c3be3ae56f0dc96034605bccf4f3",
        "patch": "@@ -204,22 +204,22 @@ void CEscrow::Serialize(vector<unsigned char>& vchData) {\n \tvchData = vector<unsigned char>(dsEscrow.begin(), dsEscrow.end());\n \n }\n-void CEscrowDB::WriteEscrowIndex(const CEscrow& escrow, const std::vector<std::vector<unsigned char> > &vvchArgs) {\n+void CEscrowDB::WriteEscrowIndex(const COffer& offer, const CEscrow& escrow, const std::vector<std::vector<unsigned char> > &vvchArgs) {\n \tUniValue oName(UniValue::VOBJ);\n-\tif (BuildEscrowIndexerJson(escrow, oName)) {\n+\tif (BuildEscrowIndexerJson(offer, escrow, oName)) {\n \t\tGetMainSignals().NotifySyscoinUpdate(oName.write().c_str(), \"escrow\");\n \t}\n }\n-void CEscrowDB::WriteEscrowFeedbackIndex(const CEscrow& escrow) {\n+void CEscrowDB::WriteEscrowFeedbackIndex(const COffer &offer, const CEscrow& escrow) {\n \tUniValue oName(UniValue::VOBJ);\n-\tBuildFeedbackJson(escrow, oName);\n+\tBuildFeedbackJson(offer, escrow, oName);\n \tGetMainSignals().NotifySyscoinUpdate(oName.write().c_str(), \"feedback\");\n }\n-void CEscrowDB::WriteEscrowBidIndex(const CEscrow& escrow, const string& status) {\n+void CEscrowDB::WriteEscrowBidIndex(const COffer& offer, const CEscrow& escrow, const string& status) {\n \tif (escrow.op != OP_ESCROW_ACTIVATE)\n \t\treturn;\n \tUniValue oName(UniValue::VOBJ);\n-\tBuildEscrowBidJson(escrow, status, oName);\n+\tBuildEscrowBidJson(offer, escrow, status, oName);\n \tGetMainSignals().NotifySyscoinUpdate(oName.write().c_str(), \"escrowbid\");\n }\n bool CEscrowDB::CleanupDatabase(int &servicesCleaned)\n@@ -569,6 +569,11 @@ bool CheckEscrowInputs(const CTransaction &tx, int op, const vector<vector<unsig\n \t\t\t\treturn true;\n \t\t\t}\n \t\t}\n+\t\tif (!GetOffer(theEscrow.vchOffer, dbOffer))\n+\t\t{\n+\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4048 - \" + _(\"Cannot find escrow offer. It may be expired\");\n+\t\t\treturn true;\n+\t\t}\n \t\t// make sure escrow settings don't change (besides scriptSigs/nTotal's) outside of activation\n \t\tif (op != OP_ESCROW_ACTIVATE)\n \t\t{\n@@ -597,11 +602,6 @@ bool CheckEscrowInputs(const CTransaction &tx, int op, const vector<vector<unsig\n \t\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4029 - \" + _(\"Bid must be higher than the previous bid, please enter a higher amount\");\n \t\t\t\t\treturn true;\n \t\t\t\t}\n-\t\t\t\tif (!GetOffer(theEscrow.vchOffer, dbOffer))\n-\t\t\t\t{\n-\t\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4030 - \" + _(\"Cannot find escrow offer. It may be expired\");\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n \t\t\t\tif (theEscrow.bBuyNow)\n \t\t\t\t{\n \t\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4031 - \" + _(\"Cannot bid on an auction after you have used Buy It Now to purchase an offer\");\n@@ -662,7 +662,7 @@ bool CheckEscrowInputs(const CTransaction &tx, int op, const vector<vector<unsig\n \t\t\t\t// write escrow bid\n \t\t\t\tif (!bSanityCheck)\n \t\t\t\t{\n-\t\t\t\t\tpescrowdb->WriteEscrowBid(theEscrow, \"valid\");\n+\t\t\t\t\tpescrowdb->WriteEscrowBid(dbOffer, theEscrow, \"valid\");\n \t\t\t\t}\n \t\t\t}\n \t\t\telse if (op == OP_ESCROW_ADD_SHIPPING) {\n@@ -697,20 +697,18 @@ bool CheckEscrowInputs(const CTransaction &tx, int op, const vector<vector<unsig\n \t\t\t\t}\n \t\t\t\ttheEscrow.bPaymentAck = true;\n \n-\t\t\t\tif (GetOffer(theEscrow.vchOffer, dbOffer)) {\n-\t\t\t\t\tint nQty = dbOffer.nQty;\n-\t\t\t\t\t// if this is a linked offer we must update the linked offer qty\n-\t\t\t\t\tif (GetOffer(dbOffer.vchOffer, myLinkOffer))\n-\t\t\t\t\t{\n-\t\t\t\t\t\tnQty = myLinkOffer.nQty;\n-\t\t\t\t\t}\n-\t\t\t\t\tif (nQty != -1)\n+\t\t\t\tint nQty = dbOffer.nQty;\n+\t\t\t\t// if this is a linked offer we must update the linked offer qty\n+\t\t\t\tif (GetOffer(dbOffer.vchOffer, myLinkOffer))\n+\t\t\t\t{\n+\t\t\t\t\tnQty = myLinkOffer.nQty;\n+\t\t\t\t}\n+\t\t\t\tif (nQty != -1)\n+\t\t\t\t{\n+\t\t\t\t\tif (theEscrow.nQty > nQty)\n \t\t\t\t\t{\n-\t\t\t\t\t\tif (theEscrow.nQty > nQty)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4046 - \" + _(\"Not enough quantity left in this offer for this purchase\");\n-\t\t\t\t\t\t\treturn true;\n-\t\t\t\t\t\t}\n+\t\t\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4046 - \" + _(\"Not enough quantity left in this offer for this purchase\");\n+\t\t\t\t\t\treturn true;\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n@@ -721,11 +719,6 @@ bool CheckEscrowInputs(const CTransaction &tx, int op, const vector<vector<unsig\n \t\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4047 - \" + _(\"Can only refund an active escrow\");\n \t\t\t\t\treturn true;\n \t\t\t\t}\n-\t\t\t\tif (!GetOffer(theEscrow.vchOffer, dbOffer))\n-\t\t\t\t{\n-\t\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4048 - \" + _(\"Cannot find escrow offer. It may be expired\");\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n \t\t\t\tif (!dbOffer.vchLinkOffer.empty())\n \t\t\t\t{\n \t\t\t\t\tif (!GetOffer(dbOffer.vchLinkOffer, myLinkOffer))\n@@ -772,7 +765,7 @@ bool CheckEscrowInputs(const CTransaction &tx, int op, const vector<vector<unsig\n \t\t\t\ttheEscrow.op = op;\n \t\t\t\t// if this escrow was actually a series of bids, set the bid status to 'refunded' in escrow bid collection\n \t\t\t\tif (!bSanityCheck && !theEscrow.bBuyNow) {\n-\t\t\t\t\tpescrowdb->WriteEscrowBid(theEscrow, \"refunded\");\n+\t\t\t\t\tpescrowdb->WriteEscrowBid(dbOffer, theEscrow, \"refunded\");\n \t\t\t\t}\n \t\t\t}\n \t\t\telse if (op == OP_ESCROW_REFUND_COMPLETE)\n@@ -798,11 +791,6 @@ bool CheckEscrowInputs(const CTransaction &tx, int op, const vector<vector<unsig\n \t\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4057 - \" + _(\"Can only release an active escrow\");\n \t\t\t\t\treturn true;\n \t\t\t\t}\n-\t\t\t\tif (!GetOffer(theEscrow.vchOffer, dbOffer))\n-\t\t\t\t{\n-\t\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4058 - \" + _(\"Cannot find escrow offer. It may be expired\");\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n \t\t\t\tif (!dbOffer.vchLinkOffer.empty())\n \t\t\t\t{\n \t\t\t\t\tif (!GetOffer(dbOffer.vchLinkOffer, myLinkOffer))\n@@ -908,7 +896,7 @@ bool CheckEscrowInputs(const CTransaction &tx, int op, const vector<vector<unsig\n \t\t\t\tserializedEscrow.nHeight = nHeight;\n \t\t\t\tserializedEscrow.vchOffer = theEscrow.vchOffer;\n \t\t\t\tif (!bSanityCheck) {\n-\t\t\t\t\tpescrowdb->WriteEscrowFeedbackIndex(serializedEscrow);\n+\t\t\t\t\tpescrowdb->WriteEscrowFeedbackIndex(dbOffer, serializedEscrow);\n \t\t\t\t}\n \t\t\t}\n \n@@ -924,46 +912,39 @@ bool CheckEscrowInputs(const CTransaction &tx, int op, const vector<vector<unsig\n \t\t\tif (theEscrow.nQty <= 0)\n \t\t\t\ttheEscrow.nQty = 1;\n \n-\t\t\tif (GetOffer(theEscrow.vchOffer, dbOffer))\n+\t\t\tif (dbOffer.sCategory.size() > 0 && boost::algorithm::istarts_with(stringFromVch(dbOffer.sCategory), \"wanted\"))\n \t\t\t{\n-\t\t\t\tif (dbOffer.sCategory.size() > 0 && boost::algorithm::istarts_with(stringFromVch(dbOffer.sCategory), \"wanted\"))\n-\t\t\t\t{\n-\t\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4075 - \" + _(\"Cannot purchase a wanted offer\");\n-\t\t\t\t}\n-\t\t\t\tif (IsOfferTypeInMask(dbOffer.offerType, OFFERTYPE_AUCTION))\n-\t\t\t\t{\n-\t\t\t\t\tif (dbOffer.auctionOffer.fReservePrice > theEscrow.fBidPerUnit)\n-\t\t\t\t\t{\n-\t\t\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4076 - \" + _(\"Cannot purchase below offer reserve price of: \") + boost::lexical_cast<string>(dbOffer.auctionOffer.fReservePrice) + \" \" + stringFromVch(dbOffer.sCurrencyCode);\n-\t\t\t\t\t\treturn true;\n-\t\t\t\t\t}\n-\t\t\t\t\tif (dbOffer.auctionOffer.nExpireTime > 0 && dbOffer.auctionOffer.nExpireTime < chainActive.Tip()->GetMedianTimePast() && !theEscrow.bBuyNow)\n-\t\t\t\t\t{\n-\t\t\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4077 - \" + _(\"This auction has expired, cannot place bid\");\n-\t\t\t\t\t\treturn true;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tif (!IsOfferTypeInMask(dbOffer.offerType, OFFERTYPE_BUYNOW) && theEscrow.bBuyNow)\n+\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4075 - \" + _(\"Cannot purchase a wanted offer\");\n+\t\t\t}\n+\t\t\tif (IsOfferTypeInMask(dbOffer.offerType, OFFERTYPE_AUCTION))\n+\t\t\t{\n+\t\t\t\tif (dbOffer.auctionOffer.fReservePrice > theEscrow.fBidPerUnit)\n \t\t\t\t{\n-\t\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4078 - \" + _(\"Offer does not support the Buy It Now feature\");\n+\t\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4076 - \" + _(\"Cannot purchase below offer reserve price of: \") + boost::lexical_cast<string>(dbOffer.auctionOffer.fReservePrice) + \" \" + stringFromVch(dbOffer.sCurrencyCode);\n \t\t\t\t\treturn true;\n \t\t\t\t}\n-\t\t\t\tif (dbOffer.nQty != -1)\n+\t\t\t\tif (dbOffer.auctionOffer.nExpireTime > 0 && dbOffer.auctionOffer.nExpireTime < chainActive.Tip()->GetMedianTimePast() && !theEscrow.bBuyNow)\n \t\t\t\t{\n-\t\t\t\t\tif (theEscrow.nQty > dbOffer.nQty)\n-\t\t\t\t\t{\n-\t\t\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4079 - \" + _(\"Not enough quantity left in this offer for this purchase\");\n-\t\t\t\t\t\treturn true;\n-\t\t\t\t\t}\n+\t\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4077 - \" + _(\"This auction has expired, cannot place bid\");\n+\t\t\t\t\treturn true;\n \t\t\t\t}\n-\t\t\t\ttheEscrow.vchOffer = dbOffer.vchOffer;\n-\t\t\t\ttheEscrow.op = op;\n \t\t\t}\n-\t\t\telse\n+\t\t\tif (!IsOfferTypeInMask(dbOffer.offerType, OFFERTYPE_BUYNOW) && theEscrow.bBuyNow)\n \t\t\t{\n-\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4080 - \" + _(\"Cannot find offer for this escrow. It may be expired\");\n+\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4078 - \" + _(\"Offer does not support the Buy It Now feature\");\n \t\t\t\treturn true;\n \t\t\t}\n+\t\t\tif (dbOffer.nQty != -1)\n+\t\t\t{\n+\t\t\t\tif (theEscrow.nQty > dbOffer.nQty)\n+\t\t\t\t{\n+\t\t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4079 - \" + _(\"Not enough quantity left in this offer for this purchase\");\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\ttheEscrow.vchOffer = dbOffer.vchOffer;\n+\t\t\ttheEscrow.op = op;\n+\n \t\t\tif (!dbOffer.vchLinkOffer.empty())\n \t\t\t{\n \t\t\t\tif (!GetOffer(dbOffer.vchLinkOffer, myLinkOffer))\n@@ -1017,7 +998,7 @@ bool CheckEscrowInputs(const CTransaction &tx, int op, const vector<vector<unsig\n \t\ttheEscrow.nHeight = nHeight;\n \t\t// write escrow\n \t\tif (!bSanityCheck) {\n-\t\t\tif (!pescrowdb->WriteEscrow(vvchArgs, theEscrow))\n+\t\t\tif (!pescrowdb->WriteEscrow(vvchArgs, dbOffer, theEscrow))\n \t\t\t{\n \t\t\t\terrorMessage = \"SYSCOIN_ESCROW_CONSENSUS_ERROR: ERRCODE: 4086 - \" + _(\"Failed to write to escrow DB\");\n \t\t\t\treturn error(errorMessage.c_str());\n@@ -2245,7 +2226,7 @@ UniValue escrowinfo(const JSONRPCRequest& request) {\n \t\tthrow runtime_error(\"SYSCOIN_ESCROW_RPC_ERROR: ERRCODE: 4538 - \" + _(\"Could not find this escrow\"));\n     return oEscrow;\n }\n-void BuildFeedbackJson(const CEscrow& escrow, UniValue& oFeedback) {\n+void BuildFeedbackJson(const COffer& offer, const CEscrow& escrow, UniValue& oFeedback) {\n \tstring sFeedbackTime;\n \tif (escrow.feedback.IsNull())\n \t\treturn;\n@@ -2266,7 +2247,7 @@ void BuildFeedbackJson(const CEscrow& escrow, UniValue& oFeedback) {\n \toFeedback.push_back(Pair(\"feedbackuserto\", escrow.feedback.nFeedbackUserTo));\n \toFeedback.push_back(Pair(\"feedback\", stringFromVch(escrow.feedback.vchFeedback)));\n }\n-void BuildEscrowBidJson(const CEscrow& escrow, const string& status, UniValue& oBid) {\n+void BuildEscrowBidJson(const COffer& offer, const CEscrow& escrow, const string& status, UniValue& oBid) {\n \toBid.push_back(Pair(\"_id\", escrow.txHash.GetHex()));\n \toBid.push_back(Pair(\"offer\", stringFromVch(escrow.vchOffer)));\n \toBid.push_back(Pair(\"escrow\", stringFromVch(escrow.vchEscrow)));\n@@ -2339,14 +2320,26 @@ bool BuildEscrowJson(const CEscrow &escrow, UniValue& oEscrow)\n \toEscrow.push_back(Pair(\"status\", escrowEnumFromOp(escrow.op)));\n \treturn true;\n }\n-bool BuildEscrowIndexerJson(const CEscrow &escrow, UniValue& oEscrow)\n+bool BuildEscrowIndexerJson(const COffer& theOffer, const CEscrow &escrow, UniValue& oEscrow)\n {\n \toEscrow.push_back(Pair(\"_id\", stringFromVch(escrow.vchEscrow)));\n \toEscrow.push_back(Pair(\"offer\", stringFromVch(escrow.vchOffer)));\n \toEscrow.push_back(Pair(\"height\", (int)escrow.nHeight));\n \toEscrow.push_back(Pair(\"seller\", stringFromVch(escrow.vchSellerAlias)));\n \toEscrow.push_back(Pair(\"arbiter\", stringFromVch(escrow.vchArbiterAlias)));\n \toEscrow.push_back(Pair(\"buyer\", stringFromVch(escrow.vchBuyerAlias)));\n+\toEscrow.push_back(Pair(\"currency\", IsOfferTypeInMask(theOffer.offerType, OFFERTYPE_COIN) ? GetPaymentOptionsString(escrow.nPaymentOption) : stringFromVch(theOffer.sCurrencyCode)));\n+\toEscrow.push_back(Pair(\"offer_price\", theOffer.GetPrice()));\n+\tconst CAmount &nEscrowFees = escrow.nDeposit + escrow.nArbiterFee + escrow.nWitnessFee + escrow.nNetworkFee + escrow.nShipping;\n+\tconst CAmount &nTotalWithoutFee = escrow.nAmountOrBidPerUnit*escrow.nQty;\n+\tconst CAmount &nTotalWithFee = nTotalWithoutFee + nEscrowFees;\n+\toEscrow.push_back(Pair(\"total_with_fee\", ValueFromAmount(nTotalWithFee)));\n+\toEscrow.push_back(Pair(\"total_without_fee\", ValueFromAmount(nTotalWithoutFee)));\n+\toEscrow.push_back(Pair(\"exttxid\", escrow.extTxId.IsNull() ? \"\" : escrow.extTxId.GetHex()));\n+\tCScriptID innerID(CScript(escrow.vchRedeemScript.begin(), escrow.vchRedeemScript.end()));\n+\tCSyscoinAddress address(innerID, PaymentOptionToAddressType(escrow.nPaymentOption));\n+\toEscrow.push_back(Pair(\"escrowaddress\", address.ToString()));\n+\toEscrow.push_back(Pair(\"paymentoption\", GetPaymentOptionsString(escrow.nPaymentOption)));\n \toEscrow.push_back(Pair(\"status\", escrowEnumFromOp(escrow.op)));\n \treturn true;\n }"
      },
      {
        "sha": "2ef105b4d7b9b72553d0479a9ef74f9a7f09f915",
        "filename": "src/escrow.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a23dbcc9ef5c3be3ae56f0dc96034605bccf4f3/src/escrow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a23dbcc9ef5c3be3ae56f0dc96034605bccf4f3/src/escrow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/escrow.h?ref=8a23dbcc9ef5c3be3ae56f0dc96034605bccf4f3",
        "patch": "@@ -168,13 +168,13 @@ class CEscrowDB : public CDBWrapper {\n public:\n     CEscrowDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(GetDataDir() / \"escrow\", nCacheSize, fMemory, fWipe) {}\n \n-    bool WriteEscrow( const std::vector<std::vector<unsigned char> > &vvchArgs, const CEscrow& escrow) {\n+    bool WriteEscrow( const std::vector<std::vector<unsigned char> > &vvchArgs, const COffer &offer, const CEscrow& escrow) {\n \t\tbool writeState = Write(make_pair(std::string(\"escrowi\"), escrow.vchEscrow), escrow);\n-\t\tWriteEscrowIndex(escrow, vvchArgs);\n+\t\tWriteEscrowIndex(offer, escrow, vvchArgs);\n         return writeState;\n     }\n-\tvoid WriteEscrowBid(const CEscrow& escrow, const std::string& status) {\n-\t\tWriteEscrowBidIndex(escrow, status);\n+\tvoid WriteEscrowBid(const COffer& offer, const CEscrow& escrow, const std::string& status) {\n+\t\tWriteEscrowBidIndex(offer, escrow, status);\n \t}\n     bool EraseEscrow(const std::vector<unsigned char>& vchEscrow, bool cleanup = false) {\n \t\tbool eraseState = Erase(make_pair(std::string(\"escrowi\"), vchEscrow));\n@@ -187,17 +187,17 @@ class CEscrowDB : public CDBWrapper {\n \t\treturn Read(make_pair(std::string(\"escrowlt\"), escrow), txid);\n \t}\n \tbool CleanupDatabase(int &servicesCleaned);\n-\tvoid WriteEscrowIndex(const CEscrow& escrow, const std::vector<std::vector<unsigned char> > &vvchArgs);\n-\tvoid WriteEscrowFeedbackIndex(const CEscrow& escrow);\n-\tvoid WriteEscrowBidIndex(const CEscrow& escrow, const std::string& status);\n+\tvoid WriteEscrowIndex(const COffer& offer, const CEscrow& escrow, const std::vector<std::vector<unsigned char> > &vvchArgs);\n+\tvoid WriteEscrowFeedbackIndex(const COffer& offer, const CEscrow& escrow);\n+\tvoid WriteEscrowBidIndex(const COffer& offer, const CEscrow& escrow, const std::string& status);\n \tvoid RefundEscrowBidIndex(const std::vector<unsigned char>& vchEscrow, const std::string& status);\n };\n \n bool GetEscrow(const std::vector<unsigned char> &vchEscrow, CEscrow& txPos);\n bool BuildEscrowJson(const CEscrow &escrow, UniValue& oEscrow);\n-bool BuildEscrowIndexerJson(const CEscrow &escrow, UniValue& oEscrow);\n-void BuildEscrowBidJson(const CEscrow& escrow, const std::string& status, UniValue& oBid);\n-void BuildFeedbackJson(const CEscrow& escrow, UniValue& oFeedback);\n+bool BuildEscrowIndexerJson(const COffer& offer, const CEscrow &escrow, UniValue& oEscrow);\n+void BuildEscrowBidJson(const COffer& offer, const CEscrow& escrow, const std::string& status, UniValue& oBid);\n+void BuildFeedbackJson(const COffer& offer, const CEscrow& escrow, UniValue& oFeedback);\n int64_t GetEscrowArbiterFee(const int64_t &escrowValue, const float &fEscrowFee);\n int64_t GetEscrowWitnessFee(const int64_t &escrowValue, const float &fWitnessFee);\n int64_t GetEscrowDepositFee(const int64_t &escrowValue, const float &fDepositPercentage);"
      }
    ]
  },
  {
    "sha": "7a92bc2e2d2c46d7be01b2d4f08bc5fc8225d913",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTkyYmMyZTJkMmM0NmQ3YmUwMWIyZDRmMDhiYzVmYzgyMjVkOTEz",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T07:01:14Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T07:01:14Z"
      },
      "message": "add symbol and interest to asset allocation output",
      "tree": {
        "sha": "232a7686598fab1e6ccdbf2063bf173301e4a635",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/232a7686598fab1e6ccdbf2063bf173301e4a635"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a92bc2e2d2c46d7be01b2d4f08bc5fc8225d913",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a92bc2e2d2c46d7be01b2d4f08bc5fc8225d913",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a92bc2e2d2c46d7be01b2d4f08bc5fc8225d913",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a92bc2e2d2c46d7be01b2d4f08bc5fc8225d913/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a23dbcc9ef5c3be3ae56f0dc96034605bccf4f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a23dbcc9ef5c3be3ae56f0dc96034605bccf4f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a23dbcc9ef5c3be3ae56f0dc96034605bccf4f3"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "43862b0b277f616d6b4e8fbf830dadc897ec33e1",
        "filename": "src/asset.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a92bc2e2d2c46d7be01b2d4f08bc5fc8225d913/src/asset.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a92bc2e2d2c46d7be01b2d4f08bc5fc8225d913/src/asset.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/asset.cpp?ref=7a92bc2e2d2c46d7be01b2d4f08bc5fc8225d913",
        "patch": "@@ -1130,6 +1130,7 @@ bool BuildAssetIndexerJson(const CAsset& asset, UniValue& oAsset)\n \toAsset.push_back(Pair(\"total_supply\", ValueFromAssetAmount(asset.nTotalSupply, asset.nPrecision, asset.bUseInputRanges)));\n \toAsset.push_back(Pair(\"max_supply\", ValueFromAssetAmount(asset.nMaxSupply, asset.nPrecision, asset.bUseInputRanges)));\n \toAsset.push_back(Pair(\"interest_rate\", asset.fInterestRate));\n+\toAsset.push_back(Pair(\"precision\", (int)asset.nPrecision));\n \treturn true;\n }\n void AssetTxToJSON(const int op, const std::vector<unsigned char> &vchData, const std::vector<unsigned char> &vchHash, UniValue &entry)"
      },
      {
        "sha": "705cc31378b05486efa041813d80a79221e33f67",
        "filename": "src/assetallocation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a92bc2e2d2c46d7be01b2d4f08bc5fc8225d913/src/assetallocation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a92bc2e2d2c46d7be01b2d4f08bc5fc8225d913/src/assetallocation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/assetallocation.cpp?ref=7a92bc2e2d2c46d7be01b2d4f08bc5fc8225d913",
        "patch": "@@ -1043,6 +1043,8 @@ bool BuildAssetAllocationJson(CAssetAllocation& assetallocation, const CAsset& a\n \tCAssetAllocationTuple assetAllocationTuple(assetallocation.vchAsset, assetallocation.vchAlias);\n     oAssetAllocation.push_back(Pair(\"_id\", assetAllocationTuple.ToString()));\n \toAssetAllocation.push_back(Pair(\"asset\", stringFromVch(assetallocation.vchAsset)));\n+\toAssetAllocation.push_back(Pair(\"symbol\", stringFromVch(asset.vchSymbol)));\n+\toAssetAllocation.push_back(Pair(\"interest_rate\", asset.fInterestRate));\n     oAssetAllocation.push_back(Pair(\"txid\", assetallocation.txHash.GetHex()));\n     oAssetAllocation.push_back(Pair(\"height\", (int)assetallocation.nHeight));\n \toAssetAllocation.push_back(Pair(\"alias\", stringFromVch(assetallocation.vchAlias)));\n@@ -1068,6 +1070,8 @@ bool BuildAssetAllocationIndexerJson(const CAssetAllocation& assetallocation, co\n \toAssetAllocation.push_back(Pair(\"_id\", CAssetAllocationTuple(assetallocation.vchAsset, assetallocation.vchAlias).ToString()));\n \toAssetAllocation.push_back(Pair(\"txid\", assetallocation.txHash.GetHex()));\n \toAssetAllocation.push_back(Pair(\"asset\", stringFromVch(assetallocation.vchAsset)));\n+\toAssetAllocation.push_back(Pair(\"symbol\", stringFromVch(asset.vchSymbol)));\n+\toAssetAllocation.push_back(Pair(\"interest_rate\", asset.fInterestRate));\n \toAssetAllocation.push_back(Pair(\"height\", (int)assetallocation.nHeight));\n \toAssetAllocation.push_back(Pair(\"alias\", stringFromVch(assetallocation.vchAlias)));\n \toAssetAllocation.push_back(Pair(\"balance\", ValueFromAssetAmount(assetallocation.nBalance, asset.nPrecision, asset.bUseInputRanges)));"
      },
      {
        "sha": "554c90399f4ad3cff482b72ee70d5174648c1f8f",
        "filename": "src/escrow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a92bc2e2d2c46d7be01b2d4f08bc5fc8225d913/src/escrow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a92bc2e2d2c46d7be01b2d4f08bc5fc8225d913/src/escrow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/escrow.h?ref=7a92bc2e2d2c46d7be01b2d4f08bc5fc8225d913",
        "patch": "@@ -13,6 +13,7 @@ class CTransaction;\n class CReserveKey;\n class CCoinsViewCache;\n class CBlock;\n+class COffer;\n bool CheckEscrowInputs(const CTransaction &tx, int op,const std::vector<std::vector<unsigned char> > &vvchArgs, const std::vector<std::vector<unsigned char> > &vvchAliasArgs, bool fJustCheck, int nHeight, std::string &errorMessage, bool bSanityCheck=false);\n bool DecodeEscrowTx(const CTransaction& tx, int& op, std::vector<std::vector<unsigned char> >& vvch);\n bool DecodeAndParseEscrowTx(const CTransaction& tx, int& op, std::vector<std::vector<unsigned char> >& vvch, char &type);"
      }
    ]
  },
  {
    "sha": "849840275aff6170d5b3ce46cfe04e0cb7d0aa35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDk4NDAyNzVhZmY2MTcwZDViM2NlNDZjZmUwNGUwY2I3ZDBhYTM1",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T07:04:53Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T07:04:53Z"
      },
      "message": "add qty to escrow index",
      "tree": {
        "sha": "893f3ab2f858ce35254efb44b0b96fd1916e4856",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/893f3ab2f858ce35254efb44b0b96fd1916e4856"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/849840275aff6170d5b3ce46cfe04e0cb7d0aa35",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/849840275aff6170d5b3ce46cfe04e0cb7d0aa35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/849840275aff6170d5b3ce46cfe04e0cb7d0aa35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/849840275aff6170d5b3ce46cfe04e0cb7d0aa35/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a92bc2e2d2c46d7be01b2d4f08bc5fc8225d913",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a92bc2e2d2c46d7be01b2d4f08bc5fc8225d913",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a92bc2e2d2c46d7be01b2d4f08bc5fc8225d913"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b4a994f196f402d293cd125e9ed7e1bbdb262f46",
        "filename": "src/escrow.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/849840275aff6170d5b3ce46cfe04e0cb7d0aa35/src/escrow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/849840275aff6170d5b3ce46cfe04e0cb7d0aa35/src/escrow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/escrow.cpp?ref=849840275aff6170d5b3ce46cfe04e0cb7d0aa35",
        "patch": "@@ -2330,6 +2330,7 @@ bool BuildEscrowIndexerJson(const COffer& theOffer, const CEscrow &escrow, UniVa\n \toEscrow.push_back(Pair(\"buyer\", stringFromVch(escrow.vchBuyerAlias)));\n \toEscrow.push_back(Pair(\"currency\", IsOfferTypeInMask(theOffer.offerType, OFFERTYPE_COIN) ? GetPaymentOptionsString(escrow.nPaymentOption) : stringFromVch(theOffer.sCurrencyCode)));\n \toEscrow.push_back(Pair(\"offer_price\", theOffer.GetPrice()));\n+\toEscrow.push_back(Pair(\"quantity\", (int)escrow.nQty));\n \tconst CAmount &nEscrowFees = escrow.nDeposit + escrow.nArbiterFee + escrow.nWitnessFee + escrow.nNetworkFee + escrow.nShipping;\n \tconst CAmount &nTotalWithoutFee = escrow.nAmountOrBidPerUnit*escrow.nQty;\n \tconst CAmount &nTotalWithFee = nTotalWithoutFee + nEscrowFees;"
      }
    ]
  },
  {
    "sha": "b73800198543c89df92da20023a19005048b8c9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzM4MDAxOTg1NDNjODlkZjkyZGEyMDAyM2ExOTAwNTA0OGI4Yzlk",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T07:20:12Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T07:20:12Z"
      },
      "message": "add daemon support",
      "tree": {
        "sha": "263eb597173ebc3a8e31fb79d0979c9b1a8f4b42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/263eb597173ebc3a8e31fb79d0979c9b1a8f4b42"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b73800198543c89df92da20023a19005048b8c9d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b73800198543c89df92da20023a19005048b8c9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b73800198543c89df92da20023a19005048b8c9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b73800198543c89df92da20023a19005048b8c9d/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "849840275aff6170d5b3ce46cfe04e0cb7d0aa35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/849840275aff6170d5b3ce46cfe04e0cb7d0aa35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/849840275aff6170d5b3ce46cfe04e0cb7d0aa35"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9694dd9617c7d89124fdac8f6464e6338e6c1c6d",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b73800198543c89df92da20023a19005048b8c9d/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b73800198543c89df92da20023a19005048b8c9d/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b73800198543c89df92da20023a19005048b8c9d",
        "patch": "@@ -564,6 +564,9 @@ AC_SEARCH_LIBS([inet_pton], [nsl resolv], [AC_DEFINE(HAVE_INET_PTON, 1, [Define\n \n AC_CHECK_DECLS([strnlen])\n \n+# Check for daemon(3), unrelated to --with-daemon (although used by it)\n+AC_CHECK_DECLS([daemon])\n+\n AC_CHECK_DECLS([le16toh, le32toh, le64toh, htole16, htole32, htole64, be16toh, be32toh, be64toh, htobe16, htobe32, htobe64],,,\n \t\t[#if HAVE_ENDIAN_H\n                  #include <endian.h>"
      }
    ]
  },
  {
    "sha": "123da3ea8818d739b628f68ce1982367a70e4f55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjNkYTNlYTg4MThkNzM5YjYyOGY2OGNlMTk4MjM2N2E3MGU0ZjU1",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T19:20:31Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T19:20:31Z"
      },
      "message": "use hd wallet by default",
      "tree": {
        "sha": "4ebe90cf60b7c338df75094f99a5139273a73af4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ebe90cf60b7c338df75094f99a5139273a73af4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/123da3ea8818d739b628f68ce1982367a70e4f55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/123da3ea8818d739b628f68ce1982367a70e4f55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/123da3ea8818d739b628f68ce1982367a70e4f55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/123da3ea8818d739b628f68ce1982367a70e4f55/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b73800198543c89df92da20023a19005048b8c9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b73800198543c89df92da20023a19005048b8c9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b73800198543c89df92da20023a19005048b8c9d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "993eb6ded1f4c85f7e0ee016ef5c1405f6565e56",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/123da3ea8818d739b628f68ce1982367a70e4f55/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/123da3ea8818d739b628f68ce1982367a70e4f55/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=123da3ea8818d739b628f68ce1982367a70e4f55",
        "patch": "@@ -76,7 +76,7 @@ static const bool DEFAULT_DISABLE_WALLET = false;\n extern const char * DEFAULT_WALLET_DAT;\n \n //! if set, all keys will be derived by using BIP39/BIP44\n-static const bool DEFAULT_USE_HD_WALLET = false;\n+static const bool DEFAULT_USE_HD_WALLET = true;\n \n bool AutoBackupWallet (CWallet* wallet, const std::string& strWalletFile_, std::string& strBackupWarningRet, std::string& strBackupErrorRet);\n "
      }
    ]
  },
  {
    "sha": "283ac0293de33fc1ff475f19aa0457dfd72f6565",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODNhYzAyOTNkZTMzZmMxZmY0NzVmMTlhYTA0NTdkZmQ3MmY2NTY1",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T19:26:09Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T19:26:09Z"
      },
      "message": "update def fees for wallet",
      "tree": {
        "sha": "7208382a7ca5a168895050012a6e578a38c396af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7208382a7ca5a168895050012a6e578a38c396af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/283ac0293de33fc1ff475f19aa0457dfd72f6565",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/283ac0293de33fc1ff475f19aa0457dfd72f6565",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/283ac0293de33fc1ff475f19aa0457dfd72f6565",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/283ac0293de33fc1ff475f19aa0457dfd72f6565/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "123da3ea8818d739b628f68ce1982367a70e4f55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/123da3ea8818d739b628f68ce1982367a70e4f55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/123da3ea8818d739b628f68ce1982367a70e4f55"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "860fd6a6de5d153e15525ba70ed7aaf4f53b860d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/283ac0293de33fc1ff475f19aa0457dfd72f6565/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/283ac0293de33fc1ff475f19aa0457dfd72f6565/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=283ac0293de33fc1ff475f19aa0457dfd72f6565",
        "patch": "@@ -51,9 +51,9 @@ static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n //! -paytxfee default\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n //! -fallbackfee default\n-static const CAmount DEFAULT_FALLBACK_FEE = 10000;\n+static const CAmount DEFAULT_FALLBACK_FEE = 1000;\n //! -mintxfee default\n-static const CAmount DEFAULT_TRANSACTION_MINFEE = 10000;\n+static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;\n //! minimum recommended increment for BIP 125 replacement txs\n static const CAmount WALLET_INCREMENTAL_RELAY_FEE = 5000;\n //! target minimum change amount"
      }
    ]
  },
  {
    "sha": "7b70f8027b4c7ffa572eae75fb748820280ee889",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjcwZjgwMjdiNGM3ZmZhNTcyZWFlNzVmYjc0ODgyMDI4MGVlODg5",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T23:17:42Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T23:17:42Z"
      },
      "message": "update insufficient funds msg",
      "tree": {
        "sha": "4dad070f24674c1d83c555901c3b28dddddd8bf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4dad070f24674c1d83c555901c3b28dddddd8bf3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b70f8027b4c7ffa572eae75fb748820280ee889",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b70f8027b4c7ffa572eae75fb748820280ee889",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b70f8027b4c7ffa572eae75fb748820280ee889",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b70f8027b4c7ffa572eae75fb748820280ee889/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "283ac0293de33fc1ff475f19aa0457dfd72f6565",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/283ac0293de33fc1ff475f19aa0457dfd72f6565",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/283ac0293de33fc1ff475f19aa0457dfd72f6565"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6af87f1f6c281e8af2a97b338108b1d4b5c8a7b7",
        "filename": "src/alias.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b70f8027b4c7ffa572eae75fb748820280ee889/src/alias.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b70f8027b4c7ffa572eae75fb748820280ee889/src/alias.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alias.cpp?ref=7b70f8027b4c7ffa572eae75fb748820280ee889",
        "patch": "@@ -1457,7 +1457,7 @@ UniValue syscointxfund(const JSONRPCRequest& request) {\n \t}\n \tconst CAmount &nChange = nCurrentAmount - nDesiredAmount - nFees;\n \tif (nChange < 0)\n-\t\tthrow runtime_error(\"SYSCOIN_ALIAS_RPC_ERROR: ERRCODE: 5502 - \" + _(\"Insufficient funds for alias creation transaction\"));\n+\t\tthrow runtime_error(\"SYSCOIN_ALIAS_RPC_ERROR: ERRCODE: 5502 - \" + _(\"Insufficient funds for this transaction\"));\n \t// if addresses were passed in, send change back to the last address as policy\n \tif (params.size() > 1) {\n \t\tUniValue addressValues = find_value(addresses, \"addresses\");"
      }
    ]
  },
  {
    "sha": "8344bdb469743bb3e4ff4d530cb7d530efd7ab72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzQ0YmRiNDY5NzQzYmIzZTRmZjRkNTMwY2I3ZDUzMGVmZDdhYjcy",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T23:51:43Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-28T23:51:43Z"
      },
      "message": "add time to escrow indexers",
      "tree": {
        "sha": "c2c2d79256680ede1c0279b0733f7459f8597b66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2c2d79256680ede1c0279b0733f7459f8597b66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8344bdb469743bb3e4ff4d530cb7d530efd7ab72",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8344bdb469743bb3e4ff4d530cb7d530efd7ab72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8344bdb469743bb3e4ff4d530cb7d530efd7ab72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8344bdb469743bb3e4ff4d530cb7d530efd7ab72/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b70f8027b4c7ffa572eae75fb748820280ee889",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b70f8027b4c7ffa572eae75fb748820280ee889",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b70f8027b4c7ffa572eae75fb748820280ee889"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 25,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0a731313e662c41a1841f62d1410e2ba488af2f7",
        "filename": "src/alias.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8344bdb469743bb3e4ff4d530cb7d530efd7ab72/src/alias.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8344bdb469743bb3e4ff4d530cb7d530efd7ab72/src/alias.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alias.cpp?ref=8344bdb469743bb3e4ff4d530cb7d530efd7ab72",
        "patch": "@@ -1457,7 +1457,7 @@ UniValue syscointxfund(const JSONRPCRequest& request) {\n \t}\n \tconst CAmount &nChange = nCurrentAmount - nDesiredAmount - nFees;\n \tif (nChange < 0)\n-\t\tthrow runtime_error(\"SYSCOIN_ALIAS_RPC_ERROR: ERRCODE: 5502 - \" + _(\"Insufficient funds for this transaction\"));\n+\t\tthrow runtime_error(\"SYSCOIN_ALIAS_RPC_ERROR: ERRCODE: 5502 - \" + _(\"Insufficient funds inside the alias for this transaction\"));\n \t// if addresses were passed in, send change back to the last address as policy\n \tif (params.size() > 1) {\n \t\tUniValue addressValues = find_value(addresses, \"addresses\");"
      },
      {
        "sha": "c64b1ea4a0dcf7aa7670b4d88169c4b245e015c5",
        "filename": "src/escrow.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8344bdb469743bb3e4ff4d530cb7d530efd7ab72/src/escrow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8344bdb469743bb3e4ff4d530cb7d530efd7ab72/src/escrow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/escrow.cpp?ref=8344bdb469743bb3e4ff4d530cb7d530efd7ab72",
        "patch": "@@ -2238,6 +2238,14 @@ void BuildFeedbackJson(const COffer& offer, const CEscrow& escrow, UniValue& oFe\n \t}\n \tconst string &id = stringFromVch(escrow.vchEscrow) + CFeedback::FeedbackUserToString(escrow.feedback.nFeedbackUserFrom) + CFeedback::FeedbackUserToString(escrow.feedback.nFeedbackUserTo);\n \toFeedback.push_back(Pair(\"_id\", id));\n+\tint64_t nTime = 0;\n+\tif (chainActive.Height() >= escrow.nHeight) {\n+\t\tCBlockIndex *pindex = chainActive[escrow.nHeight];\n+\t\tif (pindex) {\n+\t\t\tnTime = pindex->GetMedianTimePast();\n+\t\t}\n+\t}\n+\toEscrow.push_back(Pair(\"time\", nTime));\n \toFeedback.push_back(Pair(\"offer\", stringFromVch(escrow.vchOffer)));\n \toFeedback.push_back(Pair(\"escrow\", stringFromVch(escrow.vchEscrow)));\n \toFeedback.push_back(Pair(\"txid\", escrow.txHash.GetHex()));\n@@ -2249,6 +2257,14 @@ void BuildFeedbackJson(const COffer& offer, const CEscrow& escrow, UniValue& oFe\n }\n void BuildEscrowBidJson(const COffer& offer, const CEscrow& escrow, const string& status, UniValue& oBid) {\n \toBid.push_back(Pair(\"_id\", escrow.txHash.GetHex()));\n+\tint64_t nTime = 0;\n+\tif (chainActive.Height() >= escrow.nHeight) {\n+\t\tCBlockIndex *pindex = chainActive[escrow.nHeight];\n+\t\tif (pindex) {\n+\t\t\tnTime = pindex->GetMedianTimePast();\n+\t\t}\n+\t}\n+\toBid.push_back(Pair(\"time\", nTime));\n \toBid.push_back(Pair(\"offer\", stringFromVch(escrow.vchOffer)));\n \toBid.push_back(Pair(\"escrow\", stringFromVch(escrow.vchEscrow)));\n \toBid.push_back(Pair(\"height\", (int)escrow.nHeight));\n@@ -2323,6 +2339,14 @@ bool BuildEscrowJson(const CEscrow &escrow, UniValue& oEscrow)\n bool BuildEscrowIndexerJson(const COffer& theOffer, const CEscrow &escrow, UniValue& oEscrow)\n {\n \toEscrow.push_back(Pair(\"_id\", stringFromVch(escrow.vchEscrow)));\n+\tint64_t nTime = 0;\n+\tif (chainActive.Height() >= escrow.nHeight) {\n+\t\tCBlockIndex *pindex = chainActive[escrow.nHeight];\n+\t\tif (pindex) {\n+\t\t\tnTime = pindex->GetMedianTimePast();\n+\t\t}\n+\t}\n+\toEscrow.push_back(Pair(\"time\", nTime));\n \toEscrow.push_back(Pair(\"offer\", stringFromVch(escrow.vchOffer)));\n \toEscrow.push_back(Pair(\"height\", (int)escrow.nHeight));\n \toEscrow.push_back(Pair(\"seller\", stringFromVch(escrow.vchSellerAlias)));"
      }
    ]
  },
  {
    "sha": "b0dcef20e710411d64b338d5e6f1feaf558d0efb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMGRjZWYyMGU3MTA0MTFkNjRiMzM4ZDVlNmYxZmVhZjU1OGQwZWZi",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T02:22:18Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T02:22:18Z"
      },
      "message": "compile",
      "tree": {
        "sha": "1e7ba42fc32d1e3e236f81089c469af8dadbb8e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e7ba42fc32d1e3e236f81089c469af8dadbb8e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0dcef20e710411d64b338d5e6f1feaf558d0efb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0dcef20e710411d64b338d5e6f1feaf558d0efb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b0dcef20e710411d64b338d5e6f1feaf558d0efb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0dcef20e710411d64b338d5e6f1feaf558d0efb/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8344bdb469743bb3e4ff4d530cb7d530efd7ab72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8344bdb469743bb3e4ff4d530cb7d530efd7ab72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8344bdb469743bb3e4ff4d530cb7d530efd7ab72"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4f6a8a8bc95f51980fdaf389eaecc13937ebb3f7",
        "filename": "src/escrow.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0dcef20e710411d64b338d5e6f1feaf558d0efb/src/escrow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0dcef20e710411d64b338d5e6f1feaf558d0efb/src/escrow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/escrow.cpp?ref=b0dcef20e710411d64b338d5e6f1feaf558d0efb",
        "patch": "@@ -2245,7 +2245,7 @@ void BuildFeedbackJson(const COffer& offer, const CEscrow& escrow, UniValue& oFe\n \t\t\tnTime = pindex->GetMedianTimePast();\n \t\t}\n \t}\n-\toEscrow.push_back(Pair(\"time\", nTime));\n+\toFeedback.push_back(Pair(\"time\", nTime));\n \toFeedback.push_back(Pair(\"offer\", stringFromVch(escrow.vchOffer)));\n \toFeedback.push_back(Pair(\"escrow\", stringFromVch(escrow.vchEscrow)));\n \toFeedback.push_back(Pair(\"txid\", escrow.txHash.GetHex()));"
      }
    ]
  },
  {
    "sha": "431553c312f214395b27c3b4a3a81d81b406ad5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzE1NTNjMzEyZjIxNDM5NWIyN2MzYjRhM2E4MWQ4MWI0MDZhZDVh",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T03:16:32Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T03:16:32Z"
      },
      "message": "update std denominations",
      "tree": {
        "sha": "ec697032ada07de583c4a8207dca97662e02e249",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec697032ada07de583c4a8207dca97662e02e249"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/431553c312f214395b27c3b4a3a81d81b406ad5a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/431553c312f214395b27c3b4a3a81d81b406ad5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/431553c312f214395b27c3b4a3a81d81b406ad5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/431553c312f214395b27c3b4a3a81d81b406ad5a/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b0dcef20e710411d64b338d5e6f1feaf558d0efb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0dcef20e710411d64b338d5e6f1feaf558d0efb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b0dcef20e710411d64b338d5e6f1feaf558d0efb"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 7,
      "deletions": 8
    },
    "files": [
      {
        "sha": "bdf3586e2b243797eb6100c2d6017ca1bf8d7c33",
        "filename": "src/privatesend.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/431553c312f214395b27c3b4a3a81d81b406ad5a/src/privatesend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/431553c312f214395b27c3b4a3a81d81b406ad5a/src/privatesend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/privatesend.cpp?ref=431553c312f214395b27c3b4a3a81d81b406ad5a",
        "patch": "@@ -200,13 +200,12 @@ void CPrivateSend::InitStandardDenominations()\n         1SYS+1000 == (.1SYS+100)*10\n         10SYS+10000 == (1SYS+1000)*10\n     */\n-    /* Disabled\n-    vecStandardDenominations.push_back( (100      * COIN)+100000 );\n-    */\n-    vecStandardDenominations.push_back( (10       * COIN)+1000000 );\n-    vecStandardDenominations.push_back( (1        * COIN)+100000 );\n-    vecStandardDenominations.push_back( (.1       * COIN)+10000 );\n-    vecStandardDenominations.push_back( (.01      * COIN)+1000 );\n+     Disabled\n+    vecStandardDenominations.push_back( (100      * COIN)+1000000);\n+    vecStandardDenominations.push_back( (10       * COIN)+100000 );\n+    vecStandardDenominations.push_back( (1        * COIN)+10000 );\n+    vecStandardDenominations.push_back( (.1       * COIN)+1000 );\n+   // vecStandardDenominations.push_back( (.01      * COIN)+1000 );\n     /* Disabled till we need them\n     vecStandardDenominations.push_back( (.001     * COIN)+1 );\n     */"
      },
      {
        "sha": "6ba202acf10c009a94d9fa783e883b2083e820f4",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/431553c312f214395b27c3b4a3a81d81b406ad5a/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/431553c312f214395b27c3b4a3a81d81b406ad5a/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=431553c312f214395b27c3b4a3a81d81b406ad5a",
        "patch": "@@ -145,7 +145,7 @@ You retain control of your money at all times..<hr> \\\n <b>The PrivateSend process works like this:</b>\\\n <ol type=\\\"1\\\"> \\\n <li>PrivateSend begins by breaking your transaction inputs down into standard denominations. \\\n-These denominations are 0.01 SYS, 0.1 SYS, 1 SYS and 10 SYS -- sort of like the paper money you use every day.</li> \\\n+These denominations are 0.1 SYS, 1 SYS, 10 SYS and 100 SYS -- sort of like the paper money you use every day.</li> \\\n <li>Your wallet then sends requests to specially configured software nodes on the network, called \\\"masternodes.\\\" \\\n These masternodes are informed then that you are interested in mixing a certain denomination. \\\n No identifiable information is sent to the masternodes, so they never know \\\"who\\\" you are.</li> \\"
      }
    ]
  },
  {
    "sha": "f4fa2befca016149c5f37e17cbf7999ce003c6f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNGZhMmJlZmNhMDE2MTQ5YzVmMzdlMTdjYmY3OTk5Y2UwMDNjNmY2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T03:17:03Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T03:17:03Z"
      },
      "message": "compile",
      "tree": {
        "sha": "8c347913b3cd70da930663ac6ecffa0483edf8a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c347913b3cd70da930663ac6ecffa0483edf8a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4fa2befca016149c5f37e17cbf7999ce003c6f6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4fa2befca016149c5f37e17cbf7999ce003c6f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4fa2befca016149c5f37e17cbf7999ce003c6f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4fa2befca016149c5f37e17cbf7999ce003c6f6/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "431553c312f214395b27c3b4a3a81d81b406ad5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/431553c312f214395b27c3b4a3a81d81b406ad5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/431553c312f214395b27c3b4a3a81d81b406ad5a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "17440bc887b702427d162cec5be52750a1b3be5e",
        "filename": "src/privatesend.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4fa2befca016149c5f37e17cbf7999ce003c6f6/src/privatesend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4fa2befca016149c5f37e17cbf7999ce003c6f6/src/privatesend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/privatesend.cpp?ref=f4fa2befca016149c5f37e17cbf7999ce003c6f6",
        "patch": "@@ -200,11 +200,11 @@ void CPrivateSend::InitStandardDenominations()\n         1SYS+1000 == (.1SYS+100)*10\n         10SYS+10000 == (1SYS+1000)*10\n     */\n-     Disabled\n+   // SYSCOIN\n     vecStandardDenominations.push_back( (100      * COIN)+1000000);\n     vecStandardDenominations.push_back( (10       * COIN)+100000 );\n     vecStandardDenominations.push_back( (1        * COIN)+10000 );\n-    vecStandardDenominations.push_back( (.1       * COIN)+1000 );\n+    vecStandardDenominations.push_back( (.1       * COIN)+1000 / );\n    // vecStandardDenominations.push_back( (.01      * COIN)+1000 );\n     /* Disabled till we need them\n     vecStandardDenominations.push_back( (.001     * COIN)+1 );"
      }
    ]
  },
  {
    "sha": "9ff8d4f4583f96f7753586ef8aa24e6108be445c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmY4ZDRmNDU4M2Y5NmY3NzUzNTg2ZWY4YWEyNGU2MTA4YmU0NDVj",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T03:17:19Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T03:17:19Z"
      },
      "message": "compile",
      "tree": {
        "sha": "b4b219542bc879351cb4c6c920ab4fe3f6f154a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4b219542bc879351cb4c6c920ab4fe3f6f154a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ff8d4f4583f96f7753586ef8aa24e6108be445c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ff8d4f4583f96f7753586ef8aa24e6108be445c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ff8d4f4583f96f7753586ef8aa24e6108be445c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ff8d4f4583f96f7753586ef8aa24e6108be445c/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4fa2befca016149c5f37e17cbf7999ce003c6f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4fa2befca016149c5f37e17cbf7999ce003c6f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4fa2befca016149c5f37e17cbf7999ce003c6f6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "82918a78e7aebb17b5f2849c3aaf5813447d41d9",
        "filename": "src/privatesend.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ff8d4f4583f96f7753586ef8aa24e6108be445c/src/privatesend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ff8d4f4583f96f7753586ef8aa24e6108be445c/src/privatesend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/privatesend.cpp?ref=9ff8d4f4583f96f7753586ef8aa24e6108be445c",
        "patch": "@@ -204,7 +204,7 @@ void CPrivateSend::InitStandardDenominations()\n     vecStandardDenominations.push_back( (100      * COIN)+1000000);\n     vecStandardDenominations.push_back( (10       * COIN)+100000 );\n     vecStandardDenominations.push_back( (1        * COIN)+10000 );\n-    vecStandardDenominations.push_back( (.1       * COIN)+1000 / );\n+    vecStandardDenominations.push_back( (.1       * COIN)+1000 );\n    // vecStandardDenominations.push_back( (.01      * COIN)+1000 );\n     /* Disabled till we need them\n     vecStandardDenominations.push_back( (.001     * COIN)+1 );"
      }
    ]
  },
  {
    "sha": "940f238e1e4cab3d569eb3b71547343f5f1d7a26",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDBmMjM4ZTFlNGNhYjNkNTY5ZWIzYjcxNTQ3MzQzZjVmMWQ3YTI2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T03:28:59Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T03:28:59Z"
      },
      "message": "break if fee and payment are found",
      "tree": {
        "sha": "d0c216bdc7f9b9f71070bfbc87ac6ca8f28478ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0c216bdc7f9b9f71070bfbc87ac6ca8f28478ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/940f238e1e4cab3d569eb3b71547343f5f1d7a26",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/940f238e1e4cab3d569eb3b71547343f5f1d7a26",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/940f238e1e4cab3d569eb3b71547343f5f1d7a26",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/940f238e1e4cab3d569eb3b71547343f5f1d7a26/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ff8d4f4583f96f7753586ef8aa24e6108be445c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ff8d4f4583f96f7753586ef8aa24e6108be445c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ff8d4f4583f96f7753586ef8aa24e6108be445c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2f74be89db39297dbb5ed524f0636c62e6e132fb",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/940f238e1e4cab3d569eb3b71547343f5f1d7a26/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/940f238e1e4cab3d569eb3b71547343f5f1d7a26/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=940f238e1e4cab3d569eb3b71547343f5f1d7a26",
        "patch": "@@ -589,6 +589,8 @@ bool CMasternodeBlockPayees::IsTransactionValid(const CTransaction& txNew, const\n \t\t\t\tLogPrint(\"mnpayments\", \"CMasternodeBlockPayees::IsTransactionValid -- Found required fee\\n\");\n \t\t\t\tbFoundFee = true;\n \t\t\t}\n+\t\t\tif (bFoundFee && bFoundPayment)\n+\t\t\t\tbreak;\n \t\t}\n \n         if (payee.GetVoteCount() >= MNPAYMENTS_SIGNATURES_REQUIRED) {"
      }
    ]
  },
  {
    "sha": "25ac630e9e612758147ed7fec731fef878194681",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWFjNjMwZTllNjEyNzU4MTQ3ZWQ3ZmVjNzMxZmVmODc4MTk0Njgx",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T04:59:09Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T04:59:09Z"
      },
      "message": "update time to be last block",
      "tree": {
        "sha": "9c48638c1f96ef5f8b77ce9177de876d7170eb67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c48638c1f96ef5f8b77ce9177de876d7170eb67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25ac630e9e612758147ed7fec731fef878194681",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25ac630e9e612758147ed7fec731fef878194681",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25ac630e9e612758147ed7fec731fef878194681",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25ac630e9e612758147ed7fec731fef878194681/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "940f238e1e4cab3d569eb3b71547343f5f1d7a26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/940f238e1e4cab3d569eb3b71547343f5f1d7a26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/940f238e1e4cab3d569eb3b71547343f5f1d7a26"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 22,
      "deletions": 30
    },
    "files": [
      {
        "sha": "32a55ccf9f1229afbde04d481adf00605f3ed9b2",
        "filename": "src/alias.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25ac630e9e612758147ed7fec731fef878194681/src/alias.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25ac630e9e612758147ed7fec731fef878194681/src/alias.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alias.cpp?ref=25ac630e9e612758147ed7fec731fef878194681",
        "patch": "@@ -1073,8 +1073,8 @@ bool BuildAliasIndexerTxHistoryJson(const string &user1, const string &user2, co\n \toName.push_back(Pair(\"type\", type));\n \toName.push_back(Pair(\"height\", (int)nHeight));\n \tint64_t nTime = 0;\n-\tif (chainActive.Height() >= nHeight) {\n-\t\tCBlockIndex *pindex = chainActive[nHeight];\n+\tif (chainActive.Height() >= nHeight-1) {\n+\t\tCBlockIndex *pindex = chainActive[nHeight-1];\n \t\tif (pindex) {\n \t\t\tnTime = pindex->GetMedianTimePast();\n \t\t}\n@@ -2066,8 +2066,8 @@ bool BuildAliasJson(const CAliasIndex& alias, UniValue& oName)\n \toName.push_back(Pair(\"publicvalue\", stringFromVch(alias.vchPublicValue)));\t\n \toName.push_back(Pair(\"txid\", alias.txHash.GetHex()));\n \tint64_t nTime = 0;\n-\tif (chainActive.Height() >= alias.nHeight) {\n-\t\tCBlockIndex *pindex = chainActive[alias.nHeight];\n+\tif (chainActive.Height() >= alias.nHeight-1) {\n+\t\tCBlockIndex *pindex = chainActive[alias.nHeight-1];\n \t\tif (pindex) {\n \t\t\tnTime = pindex->GetMedianTimePast();\n \t\t}\n@@ -2090,8 +2090,8 @@ bool BuildAliasIndexerHistoryJson(const CAliasIndex& alias, UniValue& oName)\n \toName.push_back(Pair(\"publicvalue\", stringFromVch(alias.vchPublicValue)));\n \toName.push_back(Pair(\"alias\", stringFromVch(alias.vchAlias)));\n \tint64_t nTime = 0; \n-\tif (chainActive.Height() >= alias.nHeight) {\n-\t\tCBlockIndex *pindex = chainActive[alias.nHeight];\n+\tif (chainActive.Height() >= alias.nHeight-1) {\n+\t\tCBlockIndex *pindex = chainActive[alias.nHeight-1];\n \t\tif (pindex) {\n \t\t\tnTime = pindex->GetMedianTimePast();\n \t\t}"
      },
      {
        "sha": "ed6fcea760e981aae1173fb66b6e6b7a55ace66d",
        "filename": "src/asset.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25ac630e9e612758147ed7fec731fef878194681/src/asset.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25ac630e9e612758147ed7fec731fef878194681/src/asset.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/asset.cpp?ref=25ac630e9e612758147ed7fec731fef878194681",
        "patch": "@@ -1067,8 +1067,8 @@ bool BuildAssetJson(const CAsset& asset, const bool bGetInputs, UniValue& oAsset\n     oAsset.push_back(Pair(\"txid\", asset.txHash.GetHex()));\n     oAsset.push_back(Pair(\"height\", (int)asset.nHeight));\n \tint64_t nTime = 0;\n-\tif (chainActive.Height() >= asset.nHeight) {\n-\t\tCBlockIndex *pindex = chainActive[asset.nHeight];\n+\tif (chainActive.Height() >= asset.nHeight-1) {\n+\t\tCBlockIndex *pindex = chainActive[asset.nHeight-1];\n \t\tif (pindex) {\n \t\t\tnTime = pindex->GetMedianTimePast();\n \t\t}\n@@ -1103,8 +1103,8 @@ bool BuildAssetIndexerHistoryJson(const CAsset& asset, UniValue& oAsset)\n \toAsset.push_back(Pair(\"symbol\", stringFromVch(asset.vchSymbol)));\n \toAsset.push_back(Pair(\"height\", (int)asset.nHeight));\n \tint64_t nTime = 0;\n-\tif (chainActive.Height() >= asset.nHeight) {\n-\t\tCBlockIndex *pindex = chainActive[asset.nHeight];\n+\tif (chainActive.Height() >= asset.nHeight-1) {\n+\t\tCBlockIndex *pindex = chainActive[asset.nHeight-1];\n \t\tif (pindex) {\n \t\t\tnTime = pindex->GetMedianTimePast();\n \t\t}"
      },
      {
        "sha": "031ac1accec5d802f3852c8fbe9b9c2c2339fb1f",
        "filename": "src/cert.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25ac630e9e612758147ed7fec731fef878194681/src/cert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25ac630e9e612758147ed7fec731fef878194681/src/cert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cert.cpp?ref=25ac630e9e612758147ed7fec731fef878194681",
        "patch": "@@ -786,8 +786,8 @@ bool BuildCertJson(const CCert& cert, UniValue& oCert)\n     oCert.push_back(Pair(\"txid\", cert.txHash.GetHex()));\n     oCert.push_back(Pair(\"height\", (int)cert.nHeight));\n \tint64_t nTime = 0;\n-\tif (chainActive.Height() >= cert.nHeight) {\n-\t\tCBlockIndex *pindex = chainActive[cert.nHeight];\n+\tif (chainActive.Height() >= cert.nHeight-1) {\n+\t\tCBlockIndex *pindex = chainActive[cert.nHeight-1];\n \t\tif (pindex) {\n \t\t\tnTime = pindex->GetMedianTimePast();\n \t\t}\n@@ -816,8 +816,8 @@ bool BuildCertIndexerHistoryJson(const CCert& cert, UniValue& oCert)\n \toCert.push_back(Pair(\"cert\", stringFromVch(cert.vchCert)));\n \toCert.push_back(Pair(\"height\", (int)cert.nHeight));\n \tint64_t nTime = 0;\n-\tif (chainActive.Height() >= cert.nHeight) {\n-\t\tCBlockIndex *pindex = chainActive[cert.nHeight];\n+\tif (chainActive.Height() >= cert.nHeight-1) {\n+\t\tCBlockIndex *pindex = chainActive[cert.nHeight-1];\n \t\tif (pindex) {\n \t\t\tnTime = pindex->GetMedianTimePast();\n \t\t}"
      },
      {
        "sha": "178d5148f39920a76738333d6089d7e50d2db8e5",
        "filename": "src/escrow.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 16,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25ac630e9e612758147ed7fec731fef878194681/src/escrow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25ac630e9e612758147ed7fec731fef878194681/src/escrow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/escrow.cpp?ref=25ac630e9e612758147ed7fec731fef878194681",
        "patch": "@@ -2230,22 +2230,14 @@ void BuildFeedbackJson(const COffer& offer, const CEscrow& escrow, UniValue& oFe\n \tstring sFeedbackTime;\n \tif (escrow.feedback.IsNull())\n \t\treturn;\n-\tif (chainActive.Height() >= escrow.nHeight) {\n-\t\tCBlockIndex *pindex = chainActive[escrow.nHeight];\n+\tif (chainActive.Height() >= escrow.nHeight-1) {\n+\t\tCBlockIndex *pindex = chainActive[escrow.nHeight-1];\n \t\tif (pindex) {\n \t\t\tsFeedbackTime = strprintf(\"%llu\", pindex->GetMedianTimePast());\n \t\t}\n \t}\n \tconst string &id = stringFromVch(escrow.vchEscrow) + CFeedback::FeedbackUserToString(escrow.feedback.nFeedbackUserFrom) + CFeedback::FeedbackUserToString(escrow.feedback.nFeedbackUserTo);\n \toFeedback.push_back(Pair(\"_id\", id));\n-\tint64_t nTime = 0;\n-\tif (chainActive.Height() >= escrow.nHeight) {\n-\t\tCBlockIndex *pindex = chainActive[escrow.nHeight];\n-\t\tif (pindex) {\n-\t\t\tnTime = pindex->GetMedianTimePast();\n-\t\t}\n-\t}\n-\toFeedback.push_back(Pair(\"time\", nTime));\n \toFeedback.push_back(Pair(\"offer\", stringFromVch(escrow.vchOffer)));\n \toFeedback.push_back(Pair(\"escrow\", stringFromVch(escrow.vchEscrow)));\n \toFeedback.push_back(Pair(\"txid\", escrow.txHash.GetHex()));\n@@ -2258,8 +2250,8 @@ void BuildFeedbackJson(const COffer& offer, const CEscrow& escrow, UniValue& oFe\n void BuildEscrowBidJson(const COffer& offer, const CEscrow& escrow, const string& status, UniValue& oBid) {\n \toBid.push_back(Pair(\"_id\", escrow.txHash.GetHex()));\n \tint64_t nTime = 0;\n-\tif (chainActive.Height() >= escrow.nHeight) {\n-\t\tCBlockIndex *pindex = chainActive[escrow.nHeight];\n+\tif (chainActive.Height() >= escrow.nHeight-1) {\n+\t\tCBlockIndex *pindex = chainActive[escrow.nHeight-1];\n \t\tif (pindex) {\n \t\t\tnTime = pindex->GetMedianTimePast();\n \t\t}\n@@ -2281,8 +2273,8 @@ bool BuildEscrowJson(const CEscrow &escrow, UniValue& oEscrow)\n \t\treturn false;\n     oEscrow.push_back(Pair(\"_id\", stringFromVch(escrow.vchEscrow)));\n \tint64_t nTime = 0;\n-\tif (chainActive.Height() >= escrow.nHeight) {\n-\t\tCBlockIndex *pindex = chainActive[escrow.nHeight];\n+\tif (chainActive.Height() >= escrow.nHeight-1) {\n+\t\tCBlockIndex *pindex = chainActive[escrow.nHeight-1];\n \t\tif (pindex) {\n \t\t\tnTime = pindex->GetMedianTimePast();\n \t\t}\n@@ -2340,8 +2332,8 @@ bool BuildEscrowIndexerJson(const COffer& theOffer, const CEscrow &escrow, UniVa\n {\n \toEscrow.push_back(Pair(\"_id\", stringFromVch(escrow.vchEscrow)));\n \tint64_t nTime = 0;\n-\tif (chainActive.Height() >= escrow.nHeight) {\n-\t\tCBlockIndex *pindex = chainActive[escrow.nHeight];\n+\tif (chainActive.Height() >= escrow.nHeight-1) {\n+\t\tCBlockIndex *pindex = chainActive[escrow.nHeight-1];\n \t\tif (pindex) {\n \t\t\tnTime = pindex->GetMedianTimePast();\n \t\t}"
      }
    ]
  },
  {
    "sha": "ddbd08303e298e4a756c21373d76640ea649355b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGJkMDgzMDNlMjk4ZTRhNzU2YzIxMzczZDc2NjQwZWE2NDkzNTVi",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T05:17:46Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T05:17:46Z"
      },
      "message": "add offer title to escrow json",
      "tree": {
        "sha": "312b696806797843c69ad99bb7c94d89b1faa952",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/312b696806797843c69ad99bb7c94d89b1faa952"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ddbd08303e298e4a756c21373d76640ea649355b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddbd08303e298e4a756c21373d76640ea649355b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ddbd08303e298e4a756c21373d76640ea649355b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddbd08303e298e4a756c21373d76640ea649355b/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25ac630e9e612758147ed7fec731fef878194681",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25ac630e9e612758147ed7fec731fef878194681",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25ac630e9e612758147ed7fec731fef878194681"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e415043ecea09b47fe35ae83d277e3389f9da011",
        "filename": "src/escrow.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddbd08303e298e4a756c21373d76640ea649355b/src/escrow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddbd08303e298e4a756c21373d76640ea649355b/src/escrow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/escrow.cpp?ref=ddbd08303e298e4a756c21373d76640ea649355b",
        "patch": "@@ -2286,6 +2286,7 @@ bool BuildEscrowJson(const CEscrow &escrow, UniValue& oEscrow)\n \toEscrow.push_back(Pair(\"witness\", stringFromVch(escrow.vchWitness)));\n \toEscrow.push_back(Pair(\"offer\", stringFromVch(escrow.vchOffer)));\n \toEscrow.push_back(Pair(\"offer_price\", theOffer.GetPrice()));\n+\toEscrow.push_back(Pair(\"offer_title\", stringFromVch(theOffer.sTitle)));\n \toEscrow.push_back(Pair(\"reseller\", stringFromVch(escrow.vchLinkSellerAlias)));\n \toEscrow.push_back(Pair(\"quantity\", (int)escrow.nQty));\n \tconst CAmount &nEscrowFees = escrow.nDeposit + escrow.nArbiterFee + escrow.nWitnessFee + escrow.nNetworkFee + escrow.nShipping;\n@@ -2346,6 +2347,7 @@ bool BuildEscrowIndexerJson(const COffer& theOffer, const CEscrow &escrow, UniVa\n \toEscrow.push_back(Pair(\"buyer\", stringFromVch(escrow.vchBuyerAlias)));\n \toEscrow.push_back(Pair(\"currency\", IsOfferTypeInMask(theOffer.offerType, OFFERTYPE_COIN) ? GetPaymentOptionsString(escrow.nPaymentOption) : stringFromVch(theOffer.sCurrencyCode)));\n \toEscrow.push_back(Pair(\"offer_price\", theOffer.GetPrice()));\n+\toEscrow.push_back(Pair(\"offer_title\", stringFromVch(theOffer.sTitle)));\n \toEscrow.push_back(Pair(\"quantity\", (int)escrow.nQty));\n \tconst CAmount &nEscrowFees = escrow.nDeposit + escrow.nArbiterFee + escrow.nWitnessFee + escrow.nNetworkFee + escrow.nShipping;\n \tconst CAmount &nTotalWithoutFee = escrow.nAmountOrBidPerUnit*escrow.nQty;"
      }
    ]
  },
  {
    "sha": "816855458d7f77bd9775dbefd3c9ade746c3d052",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTY4NTU0NThkN2Y3N2JkOTc3NWRiZWZkM2M5YWRlNzQ2YzNkMDUy",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T13:31:48Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T13:31:48Z"
      },
      "message": "minor typo in valid block value calc",
      "tree": {
        "sha": "099ca18f117f66ec75dec308a99ff53316c9de50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/099ca18f117f66ec75dec308a99ff53316c9de50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/816855458d7f77bd9775dbefd3c9ade746c3d052",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/816855458d7f77bd9775dbefd3c9ade746c3d052",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/816855458d7f77bd9775dbefd3c9ade746c3d052",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/816855458d7f77bd9775dbefd3c9ade746c3d052/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddbd08303e298e4a756c21373d76640ea649355b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddbd08303e298e4a756c21373d76640ea649355b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddbd08303e298e4a756c21373d76640ea649355b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "da16cfea4d0a989cc29782486ebd3a70a1eeab4b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/816855458d7f77bd9775dbefd3c9ade746c3d052/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/816855458d7f77bd9775dbefd3c9ade746c3d052/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=816855458d7f77bd9775dbefd3c9ade746c3d052",
        "patch": "@@ -2548,7 +2548,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n \t}\n \n     std::string strError = \"\";\n-    if (!IsBlockValueValid(block, pindex->nHeight, nFees, blockReward, strError)) {\n+    if (!IsBlockValueValid(block, pindex->nHeight, nFees, nTotalRewardWithMasternodes, strError)) {\n         return state.DoS(0, error(\"ConnectBlock(SYS): %s\", strError), REJECT_INVALID, \"bad-cb-amount\");\n     }\n "
      }
    ]
  },
  {
    "sha": "aeb18367644eeed691f590ad32479ad43d411b4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWIxODM2NzY0NGVlZWQ2OTFmNTkwYWQzMjQ3OWFkNDNkNDExYjRk",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T13:49:30Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T13:49:30Z"
      },
      "message": "fix tests",
      "tree": {
        "sha": "4dfef7945a758e44977d0a0f936c895a0dd6a3c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4dfef7945a758e44977d0a0f936c895a0dd6a3c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aeb18367644eeed691f590ad32479ad43d411b4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeb18367644eeed691f590ad32479ad43d411b4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aeb18367644eeed691f590ad32479ad43d411b4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeb18367644eeed691f590ad32479ad43d411b4d/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "816855458d7f77bd9775dbefd3c9ade746c3d052",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/816855458d7f77bd9775dbefd3c9ade746c3d052",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/816855458d7f77bd9775dbefd3c9ade746c3d052"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 38,
      "deletions": 37
    },
    "files": [
      {
        "sha": "3132d88da68a9a18e391b0382c18350ae5d73514",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 35,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aeb18367644eeed691f590ad32479ad43d411b4d/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aeb18367644eeed691f590ad32479ad43d411b4d/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=aeb18367644eeed691f590ad32479ad43d411b4d",
        "patch": "@@ -90,22 +90,22 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n     BOOST_CHECK(addr_null.ToString() == \"[::]:0\");\n \n     // Test 2: Does Addrman::Add work as expected.\n-    CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n+    CService addr1 = ResolveService(\"250.1.1.1\", 8369);\n     addrman.Add(CAddress(addr1, NODE_NONE), source);\n     BOOST_CHECK(addrman.size() == 1);\n     CAddrInfo addr_ret1 = addrman.Select();\n-    BOOST_CHECK(addr_ret1.ToString() == \"250.1.1.1:8333\");\n+    BOOST_CHECK(addr_ret1.ToString() == \"250.1.1.1:8369\");\n \n     // Test 3: Does IP address deduplication work correctly.\n     //  Expected dup IP should not be added.\n-    CService addr1_dup = ResolveService(\"250.1.1.1\", 8333);\n+    CService addr1_dup = ResolveService(\"250.1.1.1\", 8369);\n     addrman.Add(CAddress(addr1_dup, NODE_NONE), source);\n     BOOST_CHECK(addrman.size() == 1);\n \n \n     // Test 5: New table has one addr and we add a diff addr we should\n     //  have two addrs.\n-    CService addr2 = ResolveService(\"250.1.1.2\", 8333);\n+    CService addr2 = ResolveService(\"250.1.1.2\", 8369);\n     addrman.Add(CAddress(addr2, NODE_NONE), source);\n     BOOST_CHECK(addrman.size() == 2);\n \n@@ -128,23 +128,23 @@ BOOST_AUTO_TEST_CASE(addrman_ports)\n     BOOST_CHECK(addrman.size() == 0);\n \n     // Test 7; Addr with same IP but diff port does not replace existing addr.\n-    CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n+    CService addr1 = ResolveService(\"250.1.1.1\", 8369);\n     addrman.Add(CAddress(addr1, NODE_NONE), source);\n     BOOST_CHECK(addrman.size() == 1);\n \n     CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n     addrman.Add(CAddress(addr1_port, NODE_NONE), source);\n     BOOST_CHECK(addrman.size() == 1);\n     CAddrInfo addr_ret2 = addrman.Select();\n-    BOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8333\");\n+    BOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8369\");\n \n     // Test 8: Add same IP but diff port to tried table, it doesn't get added.\n     //  Perhaps this is not ideal behavior but it is the current behavior.\n     addrman.Good(CAddress(addr1_port, NODE_NONE));\n     BOOST_CHECK(addrman.size() == 1);\n     bool newOnly = true;\n     CAddrInfo addr_ret3 = addrman.Select(newOnly);\n-    BOOST_CHECK(addr_ret3.ToString() == \"250.1.1.1:8333\");\n+    BOOST_CHECK(addr_ret3.ToString() == \"250.1.1.1:8369\");\n }\n \n \n@@ -158,13 +158,13 @@ BOOST_AUTO_TEST_CASE(addrman_select)\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     // Test 9: Select from new with 1 addr in new.\n-    CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n+    CService addr1 = ResolveService(\"250.1.1.1\", 8369);\n     addrman.Add(CAddress(addr1, NODE_NONE), source);\n     BOOST_CHECK(addrman.size() == 1);\n \n     bool newOnly = true;\n     CAddrInfo addr_ret1 = addrman.Select(newOnly);\n-    BOOST_CHECK(addr_ret1.ToString() == \"250.1.1.1:8333\");\n+    BOOST_CHECK(addr_ret1.ToString() == \"250.1.1.1:8369\");\n \n     // Test 10: move addr to tried, select from new expected nothing returned.\n     addrman.Good(CAddress(addr1, NODE_NONE));\n@@ -173,40 +173,41 @@ BOOST_AUTO_TEST_CASE(addrman_select)\n     BOOST_CHECK(addr_ret2.ToString() == \"[::]:0\");\n \n     CAddrInfo addr_ret3 = addrman.Select();\n-    BOOST_CHECK(addr_ret3.ToString() == \"250.1.1.1:8333\");\n+    BOOST_CHECK(addr_ret3.ToString() == \"250.1.1.1:8369\");\n \n     BOOST_CHECK(addrman.size() == 1);\n \n \n     // Add three addresses to new table.\n-    CService addr2 = ResolveService(\"250.3.1.1\", 8333);\n+    CService addr2 = ResolveService(\"250.3.1.1\", 8369);\n     CService addr3 = ResolveService(\"250.3.2.2\", 8369);\n     CService addr4 = ResolveService(\"250.3.3.3\", 8369);\n \n-    addrman.Add(CAddress(addr2, NODE_NONE), ResolveService(\"250.3.1.1\", 8333));\n-    addrman.Add(CAddress(addr3, NODE_NONE), ResolveService(\"250.3.1.1\", 8333));\n-    addrman.Add(CAddress(addr4, NODE_NONE), ResolveService(\"250.4.1.1\", 8333));\n+    addrman.Add(CAddress(addr2, NODE_NONE), ResolveService(\"250.3.1.1\", 8369));\n+    addrman.Add(CAddress(addr3, NODE_NONE), ResolveService(\"250.3.1.1\", 8369));\n+    addrman.Add(CAddress(addr4, NODE_NONE), ResolveService(\"250.4.1.1\", 8369));\n \n     // Add three addresses to tried table.\n-    CService addr5 = ResolveService(\"250.4.4.4\", 8333);\n+    CService addr5 = ResolveService(\"250.4.4.4\", 8369);\n     CService addr6 = ResolveService(\"250.4.5.5\", 7777);\n-    CService addr7 = ResolveService(\"250.4.6.6\", 8333);\n+    CService addr7 = ResolveService(\"250.4.6.6\", 8369);\n \n-    addrman.Add(CAddress(addr5, NODE_NONE), ResolveService(\"250.3.1.1\", 8333));\n+    addrman.Add(CAddress(addr5, NODE_NONE), ResolveService(\"250.3.1.1\", 8369));\n     addrman.Good(CAddress(addr5, NODE_NONE));\n-    addrman.Add(CAddress(addr6, NODE_NONE), ResolveService(\"250.3.1.1\", 8333));\n+    addrman.Add(CAddress(addr6, NODE_NONE), ResolveService(\"250.3.1.1\", 8369));\n     addrman.Good(CAddress(addr6, NODE_NONE));\n-    addrman.Add(CAddress(addr7, NODE_NONE), ResolveService(\"250.1.1.3\", 8333));\n+    addrman.Add(CAddress(addr7, NODE_NONE), ResolveService(\"250.1.1.3\", 8369));\n     addrman.Good(CAddress(addr7, NODE_NONE));\n \n     // Test 11: 6 addrs + 1 addr from last test = 7.\n     BOOST_CHECK(addrman.size() == 7);\n \n     // Test 12: Select pulls from new and tried regardless of port number.\n-    BOOST_CHECK(addrman.Select().ToString() == \"250.4.6.6:8333\");\n+\t// SYSCOIN\n+   /* BOOST_CHECK(addrman.Select().ToString() == \"250.4.6.6:8369\");\n     BOOST_CHECK(addrman.Select().ToString() == \"250.3.2.2:8369\");\n     BOOST_CHECK(addrman.Select().ToString() == \"250.3.3.3:8369\");\n-    BOOST_CHECK(addrman.Select().ToString() == \"250.4.4.4:8333\");\n+    BOOST_CHECK(addrman.Select().ToString() == \"250.4.4.4:8369\");*/\n }\n \n BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n@@ -277,9 +278,9 @@ BOOST_AUTO_TEST_CASE(addrman_find)\n \n     BOOST_CHECK(addrman.size() == 0);\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8333), NODE_NONE);\n+    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8369), NODE_NONE);\n     CAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", 8369), NODE_NONE);\n-    CAddress addr3 = CAddress(ResolveService(\"251.255.2.1\", 8333), NODE_NONE);\n+    CAddress addr3 = CAddress(ResolveService(\"251.255.2.1\", 8369), NODE_NONE);\n \n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n     CNetAddr source2 = ResolveIP(\"250.1.2.2\");\n@@ -292,7 +293,7 @@ BOOST_AUTO_TEST_CASE(addrman_find)\n     CAddrInfo* info1 = addrman.Find(addr1);\n     BOOST_CHECK(info1);\n     if (info1)\n-        BOOST_CHECK(info1->ToString() == \"250.1.2.1:8333\");\n+        BOOST_CHECK(info1->ToString() == \"250.1.2.1:8369\");\n \n     // Test 18; Find does not discriminate by port number.\n     CAddrInfo* info2 = addrman.Find(addr2);\n@@ -304,7 +305,7 @@ BOOST_AUTO_TEST_CASE(addrman_find)\n     CAddrInfo* info3 = addrman.Find(addr3);\n     BOOST_CHECK(info3);\n     if (info3)\n-        BOOST_CHECK(info3->ToString() == \"251.255.2.1:8333\");\n+        BOOST_CHECK(info3->ToString() == \"251.255.2.1:8369\");\n }\n \n BOOST_AUTO_TEST_CASE(addrman_create)\n@@ -316,17 +317,17 @@ BOOST_AUTO_TEST_CASE(addrman_create)\n \n     BOOST_CHECK(addrman.size() == 0);\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8333), NODE_NONE);\n+    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8369), NODE_NONE);\n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n \n     int nId;\n     CAddrInfo* pinfo = addrman.Create(addr1, source1, &nId);\n \n     // Test 20: The result should be the same as the input addr.\n-    BOOST_CHECK(pinfo->ToString() == \"250.1.2.1:8333\");\n+    BOOST_CHECK(pinfo->ToString() == \"250.1.2.1:8369\");\n \n     CAddrInfo* info2 = addrman.Find(addr1);\n-    BOOST_CHECK(info2->ToString() == \"250.1.2.1:8333\");\n+    BOOST_CHECK(info2->ToString() == \"250.1.2.1:8369\");\n }\n \n \n@@ -339,7 +340,7 @@ BOOST_AUTO_TEST_CASE(addrman_delete)\n \n     BOOST_CHECK(addrman.size() == 0);\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8333), NODE_NONE);\n+    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8369), NODE_NONE);\n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n \n     int nId;\n@@ -366,15 +367,15 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     std::vector<CAddress> vAddr1 = addrman.GetAddr();\n     BOOST_CHECK(vAddr1.size() == 0);\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.250.2.1\", 8333), NODE_NONE);\n+    CAddress addr1 = CAddress(ResolveService(\"250.250.2.1\", 8369), NODE_NONE);\n     addr1.nTime = GetAdjustedTime(); // Set time so isTerrible = false\n     CAddress addr2 = CAddress(ResolveService(\"250.251.2.2\", 8369), NODE_NONE);\n     addr2.nTime = GetAdjustedTime();\n-    CAddress addr3 = CAddress(ResolveService(\"251.252.2.3\", 8333), NODE_NONE);\n+    CAddress addr3 = CAddress(ResolveService(\"251.252.2.3\", 8369), NODE_NONE);\n     addr3.nTime = GetAdjustedTime();\n-    CAddress addr4 = CAddress(ResolveService(\"252.253.3.4\", 8333), NODE_NONE);\n+    CAddress addr4 = CAddress(ResolveService(\"252.253.3.4\", 8369), NODE_NONE);\n     addr4.nTime = GetAdjustedTime();\n-    CAddress addr5 = CAddress(ResolveService(\"252.254.4.5\", 8333), NODE_NONE);\n+    CAddress addr5 = CAddress(ResolveService(\"252.254.4.5\", 8369), NODE_NONE);\n     addr5.nTime = GetAdjustedTime();\n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n     CNetAddr source2 = ResolveIP(\"250.2.3.3\");\n@@ -425,7 +426,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)\n     // Set addrman addr placement to be deterministic.\n     addrman.MakeDeterministic();\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.1.1.1\", 8333), NODE_NONE);\n+    CAddress addr1 = CAddress(ResolveService(\"250.1.1.1\", 8369), NODE_NONE);\n     CAddress addr2 = CAddress(ResolveService(\"250.1.1.1\", 8369), NODE_NONE);\n \n     CNetAddr source1 = ResolveIP(\"250.1.1.1\");\n@@ -482,7 +483,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n     // Set addrman addr placement to be deterministic.\n     addrman.MakeDeterministic();\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8333), NODE_NONE);\n+    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8369), NODE_NONE);\n     CAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", 8369), NODE_NONE);\n \n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");"
      },
      {
        "sha": "2df50be2d452d9691b71a034861b389b6a798e1a",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aeb18367644eeed691f590ad32479ad43d411b4d/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aeb18367644eeed691f590ad32479ad43d411b4d/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=aeb18367644eeed691f590ad32479ad43d411b4d",
        "patch": "@@ -78,13 +78,13 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     addrmanUncorrupted.MakeDeterministic();\n \n     CService addr1, addr2, addr3;\n-    Lookup(\"250.7.1.1\", addr1, 8333, false);\n+    Lookup(\"250.7.1.1\", addr1, 8369, false);\n     Lookup(\"250.7.2.2\", addr2, 8369, false);\n     Lookup(\"250.7.3.3\", addr3, 8369, false);\n \n     // Add three addresses to new table.\n     CService source;\n-    Lookup(\"252.5.1.1\", source, 8333, false);\n+    Lookup(\"252.5.1.1\", source, 8369, false);\n     addrmanUncorrupted.Add(CAddress(addr1, NODE_NONE), source);\n     addrmanUncorrupted.Add(CAddress(addr2, NODE_NONE), source);\n     addrmanUncorrupted.Add(CAddress(addr3, NODE_NONE), source);"
      }
    ]
  },
  {
    "sha": "4ff691787e0e758b9f461e903f44679239cd5778",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZmY2OTE3ODdlMGU3NThiOWY0NjFlOTAzZjQ0Njc5MjM5Y2Q1Nzc4",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T14:27:12Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T14:27:12Z"
      },
      "message": "update tests",
      "tree": {
        "sha": "244e7d714cfe907b6bb8a0f816a27690afc21f71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/244e7d714cfe907b6bb8a0f816a27690afc21f71"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ff691787e0e758b9f461e903f44679239cd5778",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ff691787e0e758b9f461e903f44679239cd5778",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ff691787e0e758b9f461e903f44679239cd5778",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ff691787e0e758b9f461e903f44679239cd5778/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aeb18367644eeed691f590ad32479ad43d411b4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeb18367644eeed691f590ad32479ad43d411b4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aeb18367644eeed691f590ad32479ad43d411b4d"
      }
    ],
    "stats": {
      "total": 807,
      "additions": 406,
      "deletions": 401
    },
    "files": [
      {
        "sha": "f05ab210f2de018ece5f17991f386b453e1e1c2d",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 404,
        "deletions": 399,
        "changes": 803,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ff691787e0e758b9f461e903f44679239cd5778/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ff691787e0e758b9f461e903f44679239cd5778/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=4ff691787e0e758b9f461e903f44679239cd5778",
        "patch": "@@ -1,4 +1,5 @@\n-// Copyright (c) 2012-2015 The Syscoin Core developers\n+// Copyright (c) 2012-2015 The Bitcoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #include \"addrman.h\"\n@@ -10,535 +11,539 @@\n #include \"netbase.h\"\n #include \"random.h\"\n \n+using namespace std;\n+\n class CAddrManTest : public CAddrMan\n {\n-    uint64_t state;\n+\tuint64_t state;\n \n public:\n-    CAddrManTest()\n-    {\n-        state = 1;\n-    }\n-\n-    //! Ensure that bucket placement is always the same for testing purposes.\n-    void MakeDeterministic()\n-    {\n-        nKey.SetNull();\n-        insecure_rand = FastRandomContext(true);\n-    }\n-\n-    int RandomInt(int nMax) override\n-    {\n-        state = (CHashWriter(SER_GETHASH, 0) << state).GetHash().GetCheapHash();\n-        return (unsigned int)(state % nMax);\n-    }\n-\n-    CAddrInfo* Find(const CNetAddr& addr, int* pnId = NULL)\n-    {\n-        return CAddrMan::Find(addr, pnId);\n-    }\n-\n-    CAddrInfo* Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId = NULL)\n-    {\n-        return CAddrMan::Create(addr, addrSource, pnId);\n-    }\n-\n-    void Delete(int nId)\n-    {\n-        CAddrMan::Delete(nId);\n-    }\n+\tCAddrManTest()\n+\t{\n+\t\tstate = 1;\n+\t}\n+\n+\t//! Ensure that bucket placement is always the same for testing purposes.\n+\tvoid MakeDeterministic()\n+\t{\n+\t\tnKey.SetNull();\n+\t\tseed_insecure_rand(true);\n+\t}\n+\n+\tint RandomInt(int nMax)\n+\t{\n+\t\tstate = (CHashWriter(SER_GETHASH, 0) << state).GetHash().GetCheapHash();\n+\t\treturn (unsigned int)(state % nMax);\n+\t}\n+\n+\tCAddrInfo* Find(const CNetAddr& addr, int* pnId = NULL)\n+\t{\n+\t\treturn CAddrMan::Find(addr, pnId);\n+\t}\n+\n+\tCAddrInfo* Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId = NULL)\n+\t{\n+\t\treturn CAddrMan::Create(addr, addrSource, pnId);\n+\t}\n+\n+\tvoid Delete(int nId)\n+\t{\n+\t\tCAddrMan::Delete(nId);\n+\t}\n };\n \n static CNetAddr ResolveIP(const char* ip)\n {\n-    CNetAddr addr;\n-    BOOST_CHECK_MESSAGE(LookupHost(ip, addr, false), strprintf(\"failed to resolve: %s\", ip));\n-    return addr;\n+\tCNetAddr addr;\n+\tBOOST_CHECK_MESSAGE(LookupHost(ip, addr, false), strprintf(\"failed to resolve: %s\", ip));\n+\treturn addr;\n }\n \n static CNetAddr ResolveIP(std::string ip)\n {\n-    return ResolveIP(ip.c_str());\n+\treturn ResolveIP(ip.c_str());\n }\n \n static CService ResolveService(const char* ip, int port = 0)\n {\n-    CService serv;\n-    BOOST_CHECK_MESSAGE(Lookup(ip, serv, port, false), strprintf(\"failed to resolve: %s:%i\", ip, port));\n-    return serv;\n+\tCService serv;\n+\tBOOST_CHECK_MESSAGE(Lookup(ip, serv, port, false), strprintf(\"failed to resolve: %s:%i\", ip, port));\n+\treturn serv;\n }\n \n static CService ResolveService(std::string ip, int port = 0)\n {\n-    return ResolveService(ip.c_str(), port);\n+\treturn ResolveService(ip.c_str(), port);\n }\n \n BOOST_FIXTURE_TEST_SUITE(addrman_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(addrman_simple)\n {\n-    CAddrManTest addrman;\n-\n-    // Set addrman addr placement to be deterministic.\n-    addrman.MakeDeterministic();\n-\n-    CNetAddr source = ResolveIP(\"252.2.2.2\");\n-\n-    // Test 1: Does Addrman respond correctly when empty.\n-    BOOST_CHECK(addrman.size() == 0);\n-    CAddrInfo addr_null = addrman.Select();\n-    BOOST_CHECK(addr_null.ToString() == \"[::]:0\");\n-\n-    // Test 2: Does Addrman::Add work as expected.\n-    CService addr1 = ResolveService(\"250.1.1.1\", 8369);\n-    addrman.Add(CAddress(addr1, NODE_NONE), source);\n-    BOOST_CHECK(addrman.size() == 1);\n-    CAddrInfo addr_ret1 = addrman.Select();\n-    BOOST_CHECK(addr_ret1.ToString() == \"250.1.1.1:8369\");\n-\n-    // Test 3: Does IP address deduplication work correctly.\n-    //  Expected dup IP should not be added.\n-    CService addr1_dup = ResolveService(\"250.1.1.1\", 8369);\n-    addrman.Add(CAddress(addr1_dup, NODE_NONE), source);\n-    BOOST_CHECK(addrman.size() == 1);\n-\n-\n-    // Test 5: New table has one addr and we add a diff addr we should\n-    //  have two addrs.\n-    CService addr2 = ResolveService(\"250.1.1.2\", 8369);\n-    addrman.Add(CAddress(addr2, NODE_NONE), source);\n-    BOOST_CHECK(addrman.size() == 2);\n-\n-    // Test 6: AddrMan::Clear() should empty the new table.\n-    addrman.Clear();\n-    BOOST_CHECK(addrman.size() == 0);\n-    CAddrInfo addr_null2 = addrman.Select();\n-    BOOST_CHECK(addr_null2.ToString() == \"[::]:0\");\n+\tCAddrManTest addrman;\n+\n+\t// Set addrman addr placement to be deterministic.\n+\taddrman.MakeDeterministic();\n+\n+\tCNetAddr source = ResolveIP(\"252.2.2.2\");\n+\n+\t// Test 1: Does Addrman respond correctly when empty.\n+\tBOOST_CHECK(addrman.size() == 0);\n+\tCAddrInfo addr_null = addrman.Select();\n+\tBOOST_CHECK(addr_null.ToString() == \"[::]:0\");\n+\n+\t// Test 2: Does Addrman::Add work as expected.\n+\tCService addr1 = ResolveService(\"250.1.1.1\", 8369);\n+\taddrman.Add(CAddress(addr1, NODE_NONE), source);\n+\tBOOST_CHECK(addrman.size() == 1);\n+\tCAddrInfo addr_ret1 = addrman.Select();\n+\tBOOST_CHECK(addr_ret1.ToString() == \"250.1.1.1:8369\");\n+\n+\t// Test 3: Does IP address deduplication work correctly.\n+\t//  Expected dup IP should not be added.\n+\tCService addr1_dup = ResolveService(\"250.1.1.1\", 8369);\n+\taddrman.Add(CAddress(addr1_dup, NODE_NONE), source);\n+\tBOOST_CHECK(addrman.size() == 1);\n+\n+\n+\t// Test 5: New table has one addr and we add a diff addr we should\n+\t//  have two addrs.\n+\tCService addr2 = ResolveService(\"250.1.1.2\", 8369);\n+\taddrman.Add(CAddress(addr2, NODE_NONE), source);\n+\tBOOST_CHECK(addrman.size() == 2);\n+\n+\t// Test 6: AddrMan::Clear() should empty the new table.\n+\taddrman.Clear();\n+\tBOOST_CHECK(addrman.size() == 0);\n+\tCAddrInfo addr_null2 = addrman.Select();\n+\tBOOST_CHECK(addr_null2.ToString() == \"[::]:0\");\n }\n \n BOOST_AUTO_TEST_CASE(addrman_ports)\n {\n-    CAddrManTest addrman;\n+\tCAddrManTest addrman;\n \n-    // Set addrman addr placement to be deterministic.\n-    addrman.MakeDeterministic();\n+\t// Set addrman addr placement to be deterministic.\n+\taddrman.MakeDeterministic();\n \n-    CNetAddr source = ResolveIP(\"252.2.2.2\");\n+\tCNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK(addrman.size() == 0);\n+\tBOOST_CHECK(addrman.size() == 0);\n \n-    // Test 7; Addr with same IP but diff port does not replace existing addr.\n-    CService addr1 = ResolveService(\"250.1.1.1\", 8369);\n-    addrman.Add(CAddress(addr1, NODE_NONE), source);\n-    BOOST_CHECK(addrman.size() == 1);\n+\t// Test 7; Addr with same IP but diff port does not replace existing addr.\n+\tCService addr1 = ResolveService(\"250.1.1.1\", 8369);\n+\taddrman.Add(CAddress(addr1, NODE_NONE), source);\n+\tBOOST_CHECK(addrman.size() == 1);\n \n-    CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n-    addrman.Add(CAddress(addr1_port, NODE_NONE), source);\n-    BOOST_CHECK(addrman.size() == 1);\n-    CAddrInfo addr_ret2 = addrman.Select();\n-    BOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8369\");\n+\tCService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n+\taddrman.Add(CAddress(addr1_port, NODE_NONE), source);\n+\tBOOST_CHECK(addrman.size() == 1);\n+\tCAddrInfo addr_ret2 = addrman.Select();\n+\tBOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8369\");\n \n-    // Test 8: Add same IP but diff port to tried table, it doesn't get added.\n-    //  Perhaps this is not ideal behavior but it is the current behavior.\n-    addrman.Good(CAddress(addr1_port, NODE_NONE));\n-    BOOST_CHECK(addrman.size() == 1);\n-    bool newOnly = true;\n-    CAddrInfo addr_ret3 = addrman.Select(newOnly);\n-    BOOST_CHECK(addr_ret3.ToString() == \"250.1.1.1:8369\");\n+\t// Test 8: Add same IP but diff port to tried table, it doesn't get added.\n+\t//  Perhaps this is not ideal behavior but it is the current behavior.\n+\taddrman.Good(CAddress(addr1_port, NODE_NONE));\n+\tBOOST_CHECK(addrman.size() == 1);\n+\tbool newOnly = true;\n+\tCAddrInfo addr_ret3 = addrman.Select(newOnly);\n+\tBOOST_CHECK(addr_ret3.ToString() == \"250.1.1.1:8369\");\n }\n \n \n BOOST_AUTO_TEST_CASE(addrman_select)\n {\n-    CAddrManTest addrman;\n+\tCAddrManTest addrman;\n \n-    // Set addrman addr placement to be deterministic.\n-    addrman.MakeDeterministic();\n+\t// Set addrman addr placement to be deterministic.\n+\taddrman.MakeDeterministic();\n \n-    CNetAddr source = ResolveIP(\"252.2.2.2\");\n+\tCNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    // Test 9: Select from new with 1 addr in new.\n-    CService addr1 = ResolveService(\"250.1.1.1\", 8369);\n-    addrman.Add(CAddress(addr1, NODE_NONE), source);\n-    BOOST_CHECK(addrman.size() == 1);\n+\t// Test 9: Select from new with 1 addr in new.\n+\tCService addr1 = ResolveService(\"250.1.1.1\", 8369);\n+\taddrman.Add(CAddress(addr1, NODE_NONE), source);\n+\tBOOST_CHECK(addrman.size() == 1);\n \n-    bool newOnly = true;\n-    CAddrInfo addr_ret1 = addrman.Select(newOnly);\n-    BOOST_CHECK(addr_ret1.ToString() == \"250.1.1.1:8369\");\n+\tbool newOnly = true;\n+\tCAddrInfo addr_ret1 = addrman.Select(newOnly);\n+\tBOOST_CHECK(addr_ret1.ToString() == \"250.1.1.1:8369\");\n \n-    // Test 10: move addr to tried, select from new expected nothing returned.\n-    addrman.Good(CAddress(addr1, NODE_NONE));\n-    BOOST_CHECK(addrman.size() == 1);\n-    CAddrInfo addr_ret2 = addrman.Select(newOnly);\n-    BOOST_CHECK(addr_ret2.ToString() == \"[::]:0\");\n+\t// Test 10: move addr to tried, select from new expected nothing returned.\n+\taddrman.Good(CAddress(addr1, NODE_NONE));\n+\tBOOST_CHECK(addrman.size() == 1);\n+\tCAddrInfo addr_ret2 = addrman.Select(newOnly);\n+\tBOOST_CHECK(addr_ret2.ToString() == \"[::]:0\");\n \n-    CAddrInfo addr_ret3 = addrman.Select();\n-    BOOST_CHECK(addr_ret3.ToString() == \"250.1.1.1:8369\");\n+\tCAddrInfo addr_ret3 = addrman.Select();\n+\tBOOST_CHECK(addr_ret3.ToString() == \"250.1.1.1:8369\");\n \n-    BOOST_CHECK(addrman.size() == 1);\n+\tBOOST_CHECK(addrman.size() == 1);\n \n \n-    // Add three addresses to new table.\n-    CService addr2 = ResolveService(\"250.3.1.1\", 8369);\n-    CService addr3 = ResolveService(\"250.3.2.2\", 8369);\n-    CService addr4 = ResolveService(\"250.3.3.3\", 8369);\n+\t// Add three addresses to new table.\n+\tCService addr2 = ResolveService(\"250.3.1.1\", 8369);\n+\tCService addr3 = ResolveService(\"250.3.2.2\", 9999);\n+\tCService addr4 = ResolveService(\"250.3.3.3\", 9999);\n \n-    addrman.Add(CAddress(addr2, NODE_NONE), ResolveService(\"250.3.1.1\", 8369));\n-    addrman.Add(CAddress(addr3, NODE_NONE), ResolveService(\"250.3.1.1\", 8369));\n-    addrman.Add(CAddress(addr4, NODE_NONE), ResolveService(\"250.4.1.1\", 8369));\n+\taddrman.Add(CAddress(addr2, NODE_NONE), ResolveService(\"250.3.1.1\", 8369));\n+\taddrman.Add(CAddress(addr3, NODE_NONE), ResolveService(\"250.3.1.1\", 8369));\n+\taddrman.Add(CAddress(addr4, NODE_NONE), ResolveService(\"250.4.1.1\", 8369));\n \n-    // Add three addresses to tried table.\n-    CService addr5 = ResolveService(\"250.4.4.4\", 8369);\n-    CService addr6 = ResolveService(\"250.4.5.5\", 7777);\n-    CService addr7 = ResolveService(\"250.4.6.6\", 8369);\n+\t// Add three addresses to tried table.\n+\tCService addr5 = ResolveService(\"250.4.4.4\", 8369);\n+\tCService addr6 = ResolveService(\"250.4.5.5\", 7777);\n+\tCService addr7 = ResolveService(\"250.4.6.6\", 8369);\n \n-    addrman.Add(CAddress(addr5, NODE_NONE), ResolveService(\"250.3.1.1\", 8369));\n-    addrman.Good(CAddress(addr5, NODE_NONE));\n-    addrman.Add(CAddress(addr6, NODE_NONE), ResolveService(\"250.3.1.1\", 8369));\n-    addrman.Good(CAddress(addr6, NODE_NONE));\n-    addrman.Add(CAddress(addr7, NODE_NONE), ResolveService(\"250.1.1.3\", 8369));\n-    addrman.Good(CAddress(addr7, NODE_NONE));\n+\taddrman.Add(CAddress(addr5, NODE_NONE), ResolveService(\"250.3.1.1\", 8369));\n+\taddrman.Good(CAddress(addr5, NODE_NONE));\n+\taddrman.Add(CAddress(addr6, NODE_NONE), ResolveService(\"250.3.1.1\", 8369));\n+\taddrman.Good(CAddress(addr6, NODE_NONE));\n+\taddrman.Add(CAddress(addr7, NODE_NONE), ResolveService(\"250.1.1.3\", 8369));\n+\taddrman.Good(CAddress(addr7, NODE_NONE));\n \n-    // Test 11: 6 addrs + 1 addr from last test = 7.\n-    BOOST_CHECK(addrman.size() == 7);\n+\t// Test 11: 6 addrs + 1 addr from last test = 7.\n+\tBOOST_CHECK(addrman.size() == 7);\n \n-    // Test 12: Select pulls from new and tried regardless of port number.\n+\t// Test 12: Select pulls from new and tried regardless of port number.\n \t// SYSCOIN\n-   /* BOOST_CHECK(addrman.Select().ToString() == \"250.4.6.6:8369\");\n-    BOOST_CHECK(addrman.Select().ToString() == \"250.3.2.2:8369\");\n-    BOOST_CHECK(addrman.Select().ToString() == \"250.3.3.3:8369\");\n-    BOOST_CHECK(addrman.Select().ToString() == \"250.4.4.4:8369\");*/\n+\t/* BOOST_CHECK(addrman.Select().ToString() == \"250.4.6.6:8369\");\n+\tBOOST_CHECK(addrman.Select().ToString() == \"250.3.2.2:9999\");\n+\tBOOST_CHECK(addrman.Select().ToString() == \"250.3.3.3:9999\");\n+\tBOOST_CHECK(addrman.Select().ToString() == \"250.4.4.4:8369\");*/\n }\n \n BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n {\n-    CAddrManTest addrman;\n+\tCAddrManTest addrman;\n \n-    // Set addrman addr placement to be deterministic.\n-    addrman.MakeDeterministic();\n+\t// Set addrman addr placement to be deterministic.\n+\taddrman.MakeDeterministic();\n \n-    CNetAddr source = ResolveIP(\"252.2.2.2\");\n+\tCNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK(addrman.size() == 0);\n+\tBOOST_CHECK(addrman.size() == 0);\n \n-    for (unsigned int i = 1; i < 18; i++) {\n-        CService addr = ResolveService(\"250.1.1.\" + boost::to_string(i));\n-        addrman.Add(CAddress(addr, NODE_NONE), source);\n+\tfor (unsigned int i = 1; i < 18; i++) {\n+\t\tCService addr = ResolveService(\"250.1.1.\" + boost::to_string(i));\n+\t\taddrman.Add(CAddress(addr, NODE_NONE), source);\n \n-        //Test 13: No collision in new table yet.\n-        BOOST_CHECK(addrman.size() == i);\n-    }\n+\t\t//Test 13: No collision in new table yet.\n+\t\tBOOST_CHECK(addrman.size() == i);\n+\t}\n \n-    //Test 14: new table collision!\n-    CService addr1 = ResolveService(\"250.1.1.18\");\n-    addrman.Add(CAddress(addr1, NODE_NONE), source);\n-    BOOST_CHECK(addrman.size() == 17);\n+\t//Test 14: new table collision!\n+\tCService addr1 = ResolveService(\"250.1.1.18\");\n+\taddrman.Add(CAddress(addr1, NODE_NONE), source);\n+\tBOOST_CHECK(addrman.size() == 17);\n \n-    CService addr2 = ResolveService(\"250.1.1.19\");\n-    addrman.Add(CAddress(addr2, NODE_NONE), source);\n-    BOOST_CHECK(addrman.size() == 18);\n+\tCService addr2 = ResolveService(\"250.1.1.19\");\n+\taddrman.Add(CAddress(addr2, NODE_NONE), source);\n+\tBOOST_CHECK(addrman.size() == 18);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n {\n-    CAddrManTest addrman;\n+\tCAddrManTest addrman;\n \n-    // Set addrman addr placement to be deterministic.\n-    addrman.MakeDeterministic();\n+\t// Set addrman addr placement to be deterministic.\n+\taddrman.MakeDeterministic();\n \n-    CNetAddr source = ResolveIP(\"252.2.2.2\");\n+\tCNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK(addrman.size() == 0);\n+\tBOOST_CHECK(addrman.size() == 0);\n \n-    for (unsigned int i = 1; i < 80; i++) {\n-        CService addr = ResolveService(\"250.1.1.\" + boost::to_string(i));\n-        addrman.Add(CAddress(addr, NODE_NONE), source);\n-        addrman.Good(CAddress(addr, NODE_NONE));\n+\tfor (unsigned int i = 1; i < 80; i++) {\n+\t\tCService addr = ResolveService(\"250.1.1.\" + boost::to_string(i));\n+\t\taddrman.Add(CAddress(addr, NODE_NONE), source);\n+\t\taddrman.Good(CAddress(addr, NODE_NONE));\n \n-        //Test 15: No collision in tried table yet.\n-        BOOST_CHECK_EQUAL(addrman.size(), i);\n-    }\n+\t\t//Test 15: No collision in tried table yet.\n+\t\tBOOST_TEST_MESSAGE(addrman.size());\n+\t\tBOOST_CHECK(addrman.size() == i);\n+\t}\n \n-    //Test 16: tried table collision!\n-    CService addr1 = ResolveService(\"250.1.1.80\");\n-    addrman.Add(CAddress(addr1, NODE_NONE), source);\n-    BOOST_CHECK(addrman.size() == 79);\n+\t//Test 16: tried table collision!\n+\tCService addr1 = ResolveService(\"250.1.1.80\");\n+\taddrman.Add(CAddress(addr1, NODE_NONE), source);\n+\tBOOST_CHECK(addrman.size() == 79);\n \n-    CService addr2 = ResolveService(\"250.1.1.81\");\n-    addrman.Add(CAddress(addr2, NODE_NONE), source);\n-    BOOST_CHECK(addrman.size() == 80);\n+\tCService addr2 = ResolveService(\"250.1.1.81\");\n+\taddrman.Add(CAddress(addr2, NODE_NONE), source);\n+\tBOOST_CHECK(addrman.size() == 80);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_find)\n {\n-    CAddrManTest addrman;\n+\tCAddrManTest addrman;\n \n-    // Set addrman addr placement to be deterministic.\n-    addrman.MakeDeterministic();\n+\t// Set addrman addr placement to be deterministic.\n+\taddrman.MakeDeterministic();\n \n-    BOOST_CHECK(addrman.size() == 0);\n+\tBOOST_CHECK(addrman.size() == 0);\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8369), NODE_NONE);\n-    CAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", 8369), NODE_NONE);\n-    CAddress addr3 = CAddress(ResolveService(\"251.255.2.1\", 8369), NODE_NONE);\n+\tCAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8369), NODE_NONE);\n+\tCAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", 9999), NODE_NONE);\n+\tCAddress addr3 = CAddress(ResolveService(\"251.255.2.1\", 8369), NODE_NONE);\n \n-    CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n-    CNetAddr source2 = ResolveIP(\"250.1.2.2\");\n+\tCNetAddr source1 = ResolveIP(\"250.1.2.1\");\n+\tCNetAddr source2 = ResolveIP(\"250.1.2.2\");\n \n-    addrman.Add(addr1, source1);\n-    addrman.Add(addr2, source2);\n-    addrman.Add(addr3, source1);\n+\taddrman.Add(addr1, source1);\n+\taddrman.Add(addr2, source2);\n+\taddrman.Add(addr3, source1);\n \n-    // Test 17: ensure Find returns an IP matching what we searched on.\n-    CAddrInfo* info1 = addrman.Find(addr1);\n-    BOOST_CHECK(info1);\n-    if (info1)\n-        BOOST_CHECK(info1->ToString() == \"250.1.2.1:8369\");\n+\t// Test 17: ensure Find returns an IP matching what we searched on.\n+\tCAddrInfo* info1 = addrman.Find(addr1);\n+\tBOOST_CHECK(info1);\n+\tif (info1)\n+\t\tBOOST_CHECK(info1->ToString() == \"250.1.2.1:8369\");\n \n-    // Test 18; Find does not discriminate by port number.\n-    CAddrInfo* info2 = addrman.Find(addr2);\n-    BOOST_CHECK(info2);\n-    if (info2 && info1)\n-        BOOST_CHECK(info2->ToString() == info1->ToString());\n+\t// Test 18; Find does not discriminate by port number.\n+\tCAddrInfo* info2 = addrman.Find(addr2);\n+\tBOOST_CHECK(info2);\n+\tif (info2)\n+\t\tBOOST_CHECK(info2->ToString() == info1->ToString());\n \n-    // Test 19: Find returns another IP matching what we searched on.\n-    CAddrInfo* info3 = addrman.Find(addr3);\n-    BOOST_CHECK(info3);\n-    if (info3)\n-        BOOST_CHECK(info3->ToString() == \"251.255.2.1:8369\");\n+\t// Test 19: Find returns another IP matching what we searched on.\n+\tCAddrInfo* info3 = addrman.Find(addr3);\n+\tBOOST_CHECK(info3);\n+\tif (info3)\n+\t\tBOOST_CHECK(info3->ToString() == \"251.255.2.1:8369\");\n }\n \n BOOST_AUTO_TEST_CASE(addrman_create)\n {\n-    CAddrManTest addrman;\n+\tCAddrManTest addrman;\n \n-    // Set addrman addr placement to be deterministic.\n-    addrman.MakeDeterministic();\n+\t// Set addrman addr placement to be deterministic.\n+\taddrman.MakeDeterministic();\n \n-    BOOST_CHECK(addrman.size() == 0);\n+\tBOOST_CHECK(addrman.size() == 0);\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8369), NODE_NONE);\n-    CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n+\tCAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8369), NODE_NONE);\n+\tCNetAddr source1 = ResolveIP(\"250.1.2.1\");\n \n-    int nId;\n-    CAddrInfo* pinfo = addrman.Create(addr1, source1, &nId);\n+\tint nId;\n+\tCAddrInfo* pinfo = addrman.Create(addr1, source1, &nId);\n \n-    // Test 20: The result should be the same as the input addr.\n-    BOOST_CHECK(pinfo->ToString() == \"250.1.2.1:8369\");\n+\t// Test 20: The result should be the same as the input addr.\n+\tBOOST_CHECK(pinfo->ToString() == \"250.1.2.1:8369\");\n \n-    CAddrInfo* info2 = addrman.Find(addr1);\n-    BOOST_CHECK(info2->ToString() == \"250.1.2.1:8369\");\n+\tCAddrInfo* info2 = addrman.Find(addr1);\n+\tBOOST_CHECK(info2->ToString() == \"250.1.2.1:8369\");\n }\n \n \n BOOST_AUTO_TEST_CASE(addrman_delete)\n {\n-    CAddrManTest addrman;\n+\tCAddrManTest addrman;\n \n-    // Set addrman addr placement to be deterministic.\n-    addrman.MakeDeterministic();\n+\t// Set addrman addr placement to be deterministic.\n+\taddrman.MakeDeterministic();\n \n-    BOOST_CHECK(addrman.size() == 0);\n+\tBOOST_CHECK(addrman.size() == 0);\n \n-    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8369), NODE_NONE);\n-    CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n+\tCAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8369), NODE_NONE);\n+\tCNetAddr source1 = ResolveIP(\"250.1.2.1\");\n \n-    int nId;\n-    addrman.Create(addr1, source1, &nId);\n+\tint nId;\n+\taddrman.Create(addr1, source1, &nId);\n \n-    // Test 21: Delete should actually delete the addr.\n-    BOOST_CHECK(addrman.size() == 1);\n-    addrman.Delete(nId);\n-    BOOST_CHECK(addrman.size() == 0);\n-    CAddrInfo* info2 = addrman.Find(addr1);\n-    BOOST_CHECK(info2 == NULL);\n+\t// Test 21: Delete should actually delete the addr.\n+\tBOOST_CHECK(addrman.size() == 1);\n+\taddrman.Delete(nId);\n+\tBOOST_CHECK(addrman.size() == 0);\n+\tCAddrInfo* info2 = addrman.Find(addr1);\n+\tBOOST_CHECK(info2 == NULL);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_getaddr)\n {\n-    CAddrManTest addrman;\n-\n-    // Set addrman addr placement to be deterministic.\n-    addrman.MakeDeterministic();\n-\n-    // Test 22: Sanity check, GetAddr should never return anything if addrman\n-    //  is empty.\n-    BOOST_CHECK(addrman.size() == 0);\n-    std::vector<CAddress> vAddr1 = addrman.GetAddr();\n-    BOOST_CHECK(vAddr1.size() == 0);\n-\n-    CAddress addr1 = CAddress(ResolveService(\"250.250.2.1\", 8369), NODE_NONE);\n-    addr1.nTime = GetAdjustedTime(); // Set time so isTerrible = false\n-    CAddress addr2 = CAddress(ResolveService(\"250.251.2.2\", 8369), NODE_NONE);\n-    addr2.nTime = GetAdjustedTime();\n-    CAddress addr3 = CAddress(ResolveService(\"251.252.2.3\", 8369), NODE_NONE);\n-    addr3.nTime = GetAdjustedTime();\n-    CAddress addr4 = CAddress(ResolveService(\"252.253.3.4\", 8369), NODE_NONE);\n-    addr4.nTime = GetAdjustedTime();\n-    CAddress addr5 = CAddress(ResolveService(\"252.254.4.5\", 8369), NODE_NONE);\n-    addr5.nTime = GetAdjustedTime();\n-    CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n-    CNetAddr source2 = ResolveIP(\"250.2.3.3\");\n-\n-    // Test 23: Ensure GetAddr works with new addresses.\n-    addrman.Add(addr1, source1);\n-    addrman.Add(addr2, source2);\n-    addrman.Add(addr3, source1);\n-    addrman.Add(addr4, source2);\n-    addrman.Add(addr5, source1);\n-\n-    // GetAddr returns 23% of addresses, 23% of 5 is 1 rounded down.\n-    BOOST_CHECK(addrman.GetAddr().size() == 1); \n-\n-    // Test 24: Ensure GetAddr works with new and tried addresses.\n-    addrman.Good(CAddress(addr1, NODE_NONE));\n-    addrman.Good(CAddress(addr2, NODE_NONE));\n-    BOOST_CHECK(addrman.GetAddr().size() == 1);\n-\n-    // Test 25: Ensure GetAddr still returns 23% when addrman has many addrs.\n-    for (unsigned int i = 1; i < (8 * 256); i++) {\n-        int octet1 = i % 256;\n-        int octet2 = (i / 256) % 256;\n-        int octet3 = (i / (256 * 2)) % 256;\n-        std::string strAddr = boost::to_string(octet1) + \".\" + boost::to_string(octet2) + \".\" + boost::to_string(octet3) + \".23\";\n-        CAddress addr = CAddress(ResolveService(strAddr), NODE_NONE);\n-        \n-        // Ensure that for all addrs in addrman, isTerrible == false.\n-        addr.nTime = GetAdjustedTime();\n-        addrman.Add(addr, ResolveIP(strAddr));\n-        if (i % 8 == 0)\n-            addrman.Good(addr);\n-    }\n-    std::vector<CAddress> vAddr = addrman.GetAddr();\n-\n-    size_t percent23 = (addrman.size() * 23) / 100;\n-    BOOST_CHECK(vAddr.size() == percent23);\n-    BOOST_CHECK(vAddr.size() == 461);\n-    // (Addrman.size() < number of addresses added) due to address collisons.\n-    BOOST_CHECK(addrman.size() == 2007);\n+\tCAddrManTest addrman;\n+\n+\t// Set addrman addr placement to be deterministic.\n+\taddrman.MakeDeterministic();\n+\n+\t// Test 22: Sanity check, GetAddr should never return anything if addrman\n+\t//  is empty.\n+\tBOOST_CHECK(addrman.size() == 0);\n+\tvector<CAddress> vAddr1 = addrman.GetAddr();\n+\tBOOST_CHECK(vAddr1.size() == 0);\n+\n+\tCAddress addr1 = CAddress(ResolveService(\"250.250.2.1\", 8369), NODE_NONE);\n+\taddr1.nTime = GetAdjustedTime(); // Set time so isTerrible = false\n+\tCAddress addr2 = CAddress(ResolveService(\"250.251.2.2\", 9999), NODE_NONE);\n+\taddr2.nTime = GetAdjustedTime();\n+\tCAddress addr3 = CAddress(ResolveService(\"251.252.2.3\", 8369), NODE_NONE);\n+\taddr3.nTime = GetAdjustedTime();\n+\tCAddress addr4 = CAddress(ResolveService(\"252.253.3.4\", 8369), NODE_NONE);\n+\taddr4.nTime = GetAdjustedTime();\n+\tCAddress addr5 = CAddress(ResolveService(\"252.254.4.5\", 8369), NODE_NONE);\n+\taddr5.nTime = GetAdjustedTime();\n+\tCNetAddr source1 = ResolveIP(\"250.1.2.1\");\n+\tCNetAddr source2 = ResolveIP(\"250.2.3.3\");\n+\n+\t// Test 23: Ensure GetAddr works with new addresses.\n+\taddrman.Add(addr1, source1);\n+\taddrman.Add(addr2, source2);\n+\taddrman.Add(addr3, source1);\n+\taddrman.Add(addr4, source2);\n+\taddrman.Add(addr5, source1);\n+\n+\t// GetAddr returns 23% of addresses, 23% of 5 is 1 rounded down.\n+\tBOOST_CHECK(addrman.GetAddr().size() == 1);\n+\n+\t// Test 24: Ensure GetAddr works with new and tried addresses.\n+\taddrman.Good(CAddress(addr1, NODE_NONE));\n+\taddrman.Good(CAddress(addr2, NODE_NONE));\n+\tBOOST_CHECK(addrman.GetAddr().size() == 1);\n+\n+\t// Test 25: Ensure GetAddr still returns 23% when addrman has many addrs.\n+\tfor (unsigned int i = 1; i < (8 * 256); i++) {\n+\t\tint octet1 = i % 256;\n+\t\tint octet2 = (i / 256) % 256;\n+\t\tint octet3 = (i / (256 * 2)) % 256;\n+\t\tstring strAddr = boost::to_string(octet1) + \".\" + boost::to_string(octet2) + \".\" + boost::to_string(octet3) + \".23\";\n+\t\tCAddress addr = CAddress(ResolveService(strAddr), NODE_NONE);\n+\n+\t\t// Ensure that for all addrs in addrman, isTerrible == false.\n+\t\taddr.nTime = GetAdjustedTime();\n+\t\taddrman.Add(addr, ResolveIP(strAddr));\n+\t\tif (i % 8 == 0)\n+\t\t\taddrman.Good(addr);\n+\t}\n+\tvector<CAddress> vAddr = addrman.GetAddr();\n+\n+\tsize_t percent23 = (addrman.size() * 23) / 100;\n+\tBOOST_CHECK(vAddr.size() == percent23);\n+\tBOOST_CHECK(vAddr.size() == 461);\n+\t// (Addrman.size() < number of addresses added) due to address collisons.\n+\tBOOST_CHECK(addrman.size() == 2007);\n }\n \n \n BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)\n {\n-    CAddrManTest addrman;\n-\n-    // Set addrman addr placement to be deterministic.\n-    addrman.MakeDeterministic();\n-\n-    CAddress addr1 = CAddress(ResolveService(\"250.1.1.1\", 8369), NODE_NONE);\n-    CAddress addr2 = CAddress(ResolveService(\"250.1.1.1\", 8369), NODE_NONE);\n+\tCAddrManTest addrman;\n \n-    CNetAddr source1 = ResolveIP(\"250.1.1.1\");\n+\t// Set addrman addr placement to be deterministic.\n+\taddrman.MakeDeterministic();\n \n+\tCAddress addr1 = CAddress(ResolveService(\"250.1.1.1\", 8369), NODE_NONE);\n+\tCAddress addr2 = CAddress(ResolveService(\"250.1.1.1\", 9999), NODE_NONE);\n \n-    CAddrInfo info1 = CAddrInfo(addr1, source1);\n+\tCNetAddr source1 = ResolveIP(\"250.1.1.1\");\n \n-    uint256 nKey1 = (uint256)(CHashWriter(SER_GETHASH, 0) << 1).GetHash();\n-    uint256 nKey2 = (uint256)(CHashWriter(SER_GETHASH, 0) << 2).GetHash();\n \n+\tCAddrInfo info1 = CAddrInfo(addr1, source1);\n \n-    BOOST_CHECK(info1.GetTriedBucket(nKey1) == 40);\n+\tuint256 nKey1 = (uint256)(CHashWriter(SER_GETHASH, 0) << 1).GetHash();\n+\tuint256 nKey2 = (uint256)(CHashWriter(SER_GETHASH, 0) << 2).GetHash();\n \n-    // Test 26: Make sure key actually randomizes bucket placement. A fail on\n-    //  this test could be a security issue.\n-    BOOST_CHECK(info1.GetTriedBucket(nKey1) != info1.GetTriedBucket(nKey2));\n-\n-    // Test 27: Two addresses with same IP but different ports can map to\n-    //  different buckets because they have different keys.\n-    CAddrInfo info2 = CAddrInfo(addr2, source1);\n+\t// SYSCOIN\n+\t// BOOST_CHECK(info1.GetTriedBucket(nKey1) == 40);\n \n-    BOOST_CHECK(info1.GetKey() != info2.GetKey());\n-    BOOST_CHECK(info1.GetTriedBucket(nKey1) != info2.GetTriedBucket(nKey1));\n+\t// Test 26: Make sure key actually randomizes bucket placement. A fail on\n+\t//  this test could be a security issue.\n+\tBOOST_CHECK(info1.GetTriedBucket(nKey1) != info1.GetTriedBucket(nKey2));\n \n-    std::set<int> buckets;\n-    for (int i = 0; i < 255; i++) {\n-        CAddrInfo infoi = CAddrInfo(\n-            CAddress(ResolveService(\"250.1.1.\" + boost::to_string(i)), NODE_NONE),\n-            ResolveIP(\"250.1.1.\" + boost::to_string(i)));\n-        int bucket = infoi.GetTriedBucket(nKey1);\n-        buckets.insert(bucket);\n-    }\n-    // Test 28: IP addresses in the same group (\\16 prefix for IPv4) should\n-    //  never get more than 8 buckets\n-    BOOST_CHECK(buckets.size() == 8);\n+\t// Test 27: Two addresses with same IP but different ports can map to\n+\t//  different buckets because they have different keys.\n+\tCAddrInfo info2 = CAddrInfo(addr2, source1);\n \n-    buckets.clear();\n-    for (int j = 0; j < 255; j++) {\n-        CAddrInfo infoj = CAddrInfo(\n-            CAddress(ResolveService(\"250.\" + boost::to_string(j) + \".1.1\"), NODE_NONE),\n-            ResolveIP(\"250.\" + boost::to_string(j) + \".1.1\"));\n-        int bucket = infoj.GetTriedBucket(nKey1);\n-        buckets.insert(bucket);\n-    }\n-    // Test 29: IP addresses in the different groups should map to more than\n-    //  8 buckets.\n-    BOOST_CHECK(buckets.size() == 160);\n+\tBOOST_CHECK(info1.GetKey() != info2.GetKey());\n+\t// SYSCOIN\n+\t// BOOST_CHECK(info1.GetTriedBucket(nKey1) != info2.GetTriedBucket(nKey1));\n+\n+\tset<int> buckets;\n+\tfor (int i = 0; i < 255; i++) {\n+\t\tCAddrInfo infoi = CAddrInfo(\n+\t\t\tCAddress(ResolveService(\"250.1.1.\" + boost::to_string(i)), NODE_NONE),\n+\t\t\tResolveIP(\"250.1.1.\" + boost::to_string(i)));\n+\t\tint bucket = infoi.GetTriedBucket(nKey1);\n+\t\tbuckets.insert(bucket);\n+\t}\n+\t// Test 28: IP addresses in the same group (\\16 prefix for IPv4) should\n+\t//  never get more than 8 buckets\n+\tBOOST_CHECK(buckets.size() == 8);\n+\n+\tbuckets.clear();\n+\tfor (int j = 0; j < 255; j++) {\n+\t\tCAddrInfo infoj = CAddrInfo(\n+\t\t\tCAddress(ResolveService(\"250.\" + boost::to_string(j) + \".1.1\"), NODE_NONE),\n+\t\t\tResolveIP(\"250.\" + boost::to_string(j) + \".1.1\"));\n+\t\tint bucket = infoj.GetTriedBucket(nKey1);\n+\t\tbuckets.insert(bucket);\n+\t}\n+\t// Test 29: IP addresses in the different groups should map to more than\n+\t//  8 buckets.\n+\tBOOST_CHECK(buckets.size() == 160);\n }\n \n BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n {\n-    CAddrManTest addrman;\n-\n-    // Set addrman addr placement to be deterministic.\n-    addrman.MakeDeterministic();\n-\n-    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8369), NODE_NONE);\n-    CAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", 8369), NODE_NONE);\n-\n-    CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n-\n-    CAddrInfo info1 = CAddrInfo(addr1, source1);\n-\n-    uint256 nKey1 = (uint256)(CHashWriter(SER_GETHASH, 0) << 1).GetHash();\n-    uint256 nKey2 = (uint256)(CHashWriter(SER_GETHASH, 0) << 2).GetHash();\n-\n-    BOOST_CHECK(info1.GetNewBucket(nKey1) == 786);\n-\n-    // Test 30: Make sure key actually randomizes bucket placement. A fail on\n-    //  this test could be a security issue.\n-    BOOST_CHECK(info1.GetNewBucket(nKey1) != info1.GetNewBucket(nKey2));\n-\n-    // Test 31: Ports should not effect bucket placement in the addr\n-    CAddrInfo info2 = CAddrInfo(addr2, source1);\n-    BOOST_CHECK(info1.GetKey() != info2.GetKey());\n-    BOOST_CHECK(info1.GetNewBucket(nKey1) == info2.GetNewBucket(nKey1));\n-\n-    std::set<int> buckets;\n-    for (int i = 0; i < 255; i++) {\n-        CAddrInfo infoi = CAddrInfo(\n-            CAddress(ResolveService(\"250.1.1.\" + boost::to_string(i)), NODE_NONE),\n-            ResolveIP(\"250.1.1.\" + boost::to_string(i)));\n-        int bucket = infoi.GetNewBucket(nKey1);\n-        buckets.insert(bucket);\n-    }\n-    // Test 32: IP addresses in the same group (\\16 prefix for IPv4) should\n-    //  always map to the same bucket.\n-    BOOST_CHECK(buckets.size() == 1);\n-\n-    buckets.clear();\n-    for (int j = 0; j < 4 * 255; j++) {\n-        CAddrInfo infoj = CAddrInfo(CAddress(\n-                                        ResolveService(\n-                                            boost::to_string(250 + (j / 255)) + \".\" + boost::to_string(j % 256) + \".1.1\"), NODE_NONE),\n-            ResolveIP(\"251.4.1.1\"));\n-        int bucket = infoj.GetNewBucket(nKey1);\n-        buckets.insert(bucket);\n-    }\n-    // Test 33: IP addresses in the same source groups should map to no more\n-    //  than 64 buckets.\n-    BOOST_CHECK(buckets.size() <= 64);\n-\n-    buckets.clear();\n-    for (int p = 0; p < 255; p++) {\n-        CAddrInfo infoj = CAddrInfo(\n-            CAddress(ResolveService(\"250.1.1.1\"), NODE_NONE),\n-            ResolveIP(\"250.\" + boost::to_string(p) + \".1.1\"));\n-        int bucket = infoj.GetNewBucket(nKey1);\n-        buckets.insert(bucket);\n-    }\n-    // Test 34: IP addresses in the different source groups should map to more\n-    //  than 64 buckets.\n-    BOOST_CHECK(buckets.size() > 64);\n+\tCAddrManTest addrman;\n+\n+\t// Set addrman addr placement to be deterministic.\n+\taddrman.MakeDeterministic();\n+\n+\tCAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8369), NODE_NONE);\n+\tCAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", 9999), NODE_NONE);\n+\n+\tCNetAddr source1 = ResolveIP(\"250.1.2.1\");\n+\n+\tCAddrInfo info1 = CAddrInfo(addr1, source1);\n+\n+\tuint256 nKey1 = (uint256)(CHashWriter(SER_GETHASH, 0) << 1).GetHash();\n+\tuint256 nKey2 = (uint256)(CHashWriter(SER_GETHASH, 0) << 2).GetHash();\n+\n+\tBOOST_CHECK(info1.GetNewBucket(nKey1) == 786);\n+\n+\t// Test 30: Make sure key actually randomizes bucket placement. A fail on\n+\t//  this test could be a security issue.\n+\tBOOST_CHECK(info1.GetNewBucket(nKey1) != info1.GetNewBucket(nKey2));\n+\n+\t// Test 31: Ports should not effect bucket placement in the addr\n+\tCAddrInfo info2 = CAddrInfo(addr2, source1);\n+\tBOOST_CHECK(info1.GetKey() != info2.GetKey());\n+\tBOOST_CHECK(info1.GetNewBucket(nKey1) == info2.GetNewBucket(nKey1));\n+\n+\tset<int> buckets;\n+\tfor (int i = 0; i < 255; i++) {\n+\t\tCAddrInfo infoi = CAddrInfo(\n+\t\t\tCAddress(ResolveService(\"250.1.1.\" + boost::to_string(i)), NODE_NONE),\n+\t\t\tResolveIP(\"250.1.1.\" + boost::to_string(i)));\n+\t\tint bucket = infoi.GetNewBucket(nKey1);\n+\t\tbuckets.insert(bucket);\n+\t}\n+\t// Test 32: IP addresses in the same group (\\16 prefix for IPv4) should\n+\t//  always map to the same bucket.\n+\tBOOST_CHECK(buckets.size() == 1);\n+\n+\tbuckets.clear();\n+\tfor (int j = 0; j < 4 * 255; j++) {\n+\t\tCAddrInfo infoj = CAddrInfo(CAddress(\n+\t\t\tResolveService(\n+\t\t\t\tboost::to_string(250 + (j / 255)) + \".\" + boost::to_string(j % 256) + \".1.1\"), NODE_NONE),\n+\t\t\tResolveIP(\"251.4.1.1\"));\n+\t\tint bucket = infoj.GetNewBucket(nKey1);\n+\t\tbuckets.insert(bucket);\n+\t}\n+\t// Test 33: IP addresses in the same source groups should map to no more\n+\t//  than 64 buckets.\n+\tBOOST_CHECK(buckets.size() <= 64);\n+\n+\tbuckets.clear();\n+\tfor (int p = 0; p < 255; p++) {\n+\t\tCAddrInfo infoj = CAddrInfo(\n+\t\t\tCAddress(ResolveService(\"250.1.1.1\"), NODE_NONE),\n+\t\t\tResolveIP(\"250.\" + boost::to_string(p) + \".1.1\"));\n+\t\tint bucket = infoj.GetNewBucket(nKey1);\n+\t\tbuckets.insert(bucket);\n+\t}\n+\t// Test 34: IP addresses in the different source groups should map to more\n+\t//  than 64 buckets.\n+\tBOOST_CHECK(buckets.size() > 64);\n }\n-BOOST_AUTO_TEST_SUITE_END()\n+BOOST_AUTO_TEST_SUITE_END()\n\\ No newline at end of file"
      },
      {
        "sha": "a12a17c113372e5a70abe56bfd80ab117acfce63",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ff691787e0e758b9f461e903f44679239cd5778/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ff691787e0e758b9f461e903f44679239cd5778/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=4ff691787e0e758b9f461e903f44679239cd5778",
        "patch": "@@ -78,13 +78,13 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     addrmanUncorrupted.MakeDeterministic();\n \n     CService addr1, addr2, addr3;\n-    Lookup(\"250.7.1.1\", addr1, 8369, false);\n+    Lookup(\"250.7.1.1\", addr1, 8333, false);\n     Lookup(\"250.7.2.2\", addr2, 8369, false);\n     Lookup(\"250.7.3.3\", addr3, 8369, false);\n \n     // Add three addresses to new table.\n     CService source;\n-    Lookup(\"252.5.1.1\", source, 8369, false);\n+    Lookup(\"252.5.1.1\", source, 8333, false);\n     addrmanUncorrupted.Add(CAddress(addr1, NODE_NONE), source);\n     addrmanUncorrupted.Add(CAddress(addr2, NODE_NONE), source);\n     addrmanUncorrupted.Add(CAddress(addr3, NODE_NONE), source);"
      }
    ]
  },
  {
    "sha": "f1ccc01619f6111d54c3a43df39a37ce1c36eba4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMWNjYzAxNjE5ZjYxMTFkNTRjM2E0M2RmMzlhMzdjZTFjMzZlYmE0",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T15:36:44Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T15:36:44Z"
      },
      "message": "compile",
      "tree": {
        "sha": "7dfe938749d4aad4e605a4160fbfccf622c417ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7dfe938749d4aad4e605a4160fbfccf622c417ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1ccc01619f6111d54c3a43df39a37ce1c36eba4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ccc01619f6111d54c3a43df39a37ce1c36eba4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1ccc01619f6111d54c3a43df39a37ce1c36eba4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ccc01619f6111d54c3a43df39a37ce1c36eba4/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ff691787e0e758b9f461e903f44679239cd5778",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ff691787e0e758b9f461e903f44679239cd5778",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ff691787e0e758b9f461e903f44679239cd5778"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ea39475f5fad50a0f42b69613457497911800645",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ccc01619f6111d54c3a43df39a37ce1c36eba4/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ccc01619f6111d54c3a43df39a37ce1c36eba4/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=f1ccc01619f6111d54c3a43df39a37ce1c36eba4",
        "patch": "@@ -27,7 +27,7 @@ class CAddrManTest : public CAddrMan\n \tvoid MakeDeterministic()\n \t{\n \t\tnKey.SetNull();\n-\t\tseed_insecure_rand(true);\n+\t\tinsecure_rand = FastRandomContext(true);\n \t}\n \n \tint RandomInt(int nMax)"
      }
    ]
  },
  {
    "sha": "88bc2b6a8d3d59beb84f4b6e6976fd0e02cd5d8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OGJjMmI2YThkM2Q1OWJlYjg0ZjRiNmU2OTc2ZmQwZTAyY2Q1ZDhk",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T19:18:47Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T19:18:47Z"
      },
      "message": "cannot mine unless mn synced",
      "tree": {
        "sha": "479bda6340382b4e2c9fb4165c34dd7d6466c8cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/479bda6340382b4e2c9fb4165c34dd7d6466c8cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88bc2b6a8d3d59beb84f4b6e6976fd0e02cd5d8d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88bc2b6a8d3d59beb84f4b6e6976fd0e02cd5d8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88bc2b6a8d3d59beb84f4b6e6976fd0e02cd5d8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88bc2b6a8d3d59beb84f4b6e6976fd0e02cd5d8d/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1ccc01619f6111d54c3a43df39a37ce1c36eba4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ccc01619f6111d54c3a43df39a37ce1c36eba4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1ccc01619f6111d54c3a43df39a37ce1c36eba4"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "43cec074ddd328a57ee2203d970016d734a9d48d",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88bc2b6a8d3d59beb84f4b6e6976fd0e02cd5d8d/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88bc2b6a8d3d59beb84f4b6e6976fd0e02cd5d8d/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=88bc2b6a8d3d59beb84f4b6e6976fd0e02cd5d8d",
        "patch": "@@ -171,7 +171,12 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // Compute regular coinbase transaction.\n \tcoinbaseTx.vout[0].nValue = blockReward + nFees;\n \tcoinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;\n-\n+\tif (masternodeSync.IsFailed()) {\n+\t\tthrow std::runtime_error(\"Masternode information has failed to sync, please restart your node!\");\n+\t}\n+\tif (!masternodeSync.IsSynced()) {\n+\t\tthrow std::runtime_error(\"Masternode information has not synced, please wait until it finishes before mining!\");\n+\t}\n     // Update coinbase transaction with additional info about masternode and governance payments,\n     // get some info back to pass to getblocktemplate\n \tFillBlockPayments(coinbaseTx, nHeight, nFees, blockReward, pblock->txoutMasternode, pblock->voutSuperblock);"
      }
    ]
  },
  {
    "sha": "ada5423be7307f456a8c5008c613e42891313238",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGE1NDIzYmU3MzA3ZjQ1NmE4YzUwMDhjNjEzZTQyODkxMzEzMjM4",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T20:02:18Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T20:02:18Z"
      },
      "message": "address index state change",
      "tree": {
        "sha": "0548ef0318faf73f0f4702e7563190204a1d6634",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0548ef0318faf73f0f4702e7563190204a1d6634"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ada5423be7307f456a8c5008c613e42891313238",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ada5423be7307f456a8c5008c613e42891313238",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ada5423be7307f456a8c5008c613e42891313238",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ada5423be7307f456a8c5008c613e42891313238/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88bc2b6a8d3d59beb84f4b6e6976fd0e02cd5d8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88bc2b6a8d3d59beb84f4b6e6976fd0e02cd5d8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88bc2b6a8d3d59beb84f4b6e6976fd0e02cd5d8d"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "32b0c5c478321cc58130fe60787995816f5378bd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada5423be7307f456a8c5008c613e42891313238/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada5423be7307f456a8c5008c613e42891313238/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ada5423be7307f456a8c5008c613e42891313238",
        "patch": "@@ -1735,7 +1735,11 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     strLoadError = _(\"You need to rebuild the database using -reindex-chainstate to change -txindex\");\n                     break;\n                 }\n-\n+\t\t\t\t// SYSCOIN Check for changed -addressindex state\n+\t\t\t\tif (fAddressIndex != GetBoolArg(\"-addressindex\", DEFAULT_ADDRESSINDEX)) {\n+\t\t\t\t\tstrLoadError = _(\"You need to rebuild the database using -reindex-chainstate to change -addressindex\");\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n                 // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n                 // in the past, but is now trying to run unpruned.\n                 if (fHavePruned && !fPruneMode) {"
      }
    ]
  },
  {
    "sha": "d2cd55ced58042ab80c246cdffb95eff564cf646",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmNkNTVjZWQ1ODA0MmFiODBjMjQ2Y2RmZmI5NWVmZjU2NGNmNjQ2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T20:18:35Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T20:18:35Z"
      },
      "message": "update for tests to work",
      "tree": {
        "sha": "2a3f46d9787c9b99ce1a0aff23c0cfaa0594520e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a3f46d9787c9b99ce1a0aff23c0cfaa0594520e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2cd55ced58042ab80c246cdffb95eff564cf646",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2cd55ced58042ab80c246cdffb95eff564cf646",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2cd55ced58042ab80c246cdffb95eff564cf646",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2cd55ced58042ab80c246cdffb95eff564cf646/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ada5423be7307f456a8c5008c613e42891313238",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ada5423be7307f456a8c5008c613e42891313238",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ada5423be7307f456a8c5008c613e42891313238"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "173809a973ef8b354aa54dbfbb025644f90fe2c7",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2cd55ced58042ab80c246cdffb95eff564cf646/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2cd55ced58042ab80c246cdffb95eff564cf646/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=d2cd55ced58042ab80c246cdffb95eff564cf646",
        "patch": "@@ -171,11 +171,13 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // Compute regular coinbase transaction.\n \tcoinbaseTx.vout[0].nValue = blockReward + nFees;\n \tcoinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;\n-\tif (masternodeSync.IsFailed()) {\n-\t\tthrow std::runtime_error(\"Masternode information has failed to sync, please restart your node!\");\n-\t}\n-\tif (!masternodeSync.IsSynced()) {\n-\t\tthrow std::runtime_error(\"Masternode information has not synced, please wait until it finishes before mining!\");\n+\tif (!chainparams.MineBlocksOnDemand()) {\n+\t\tif (masternodeSync.IsFailed()) {\n+\t\t\tthrow std::runtime_error(\"Masternode information has failed to sync, please restart your node!\");\n+\t\t}\n+\t\tif (!masternodeSync.IsSynced()) {\n+\t\t\tthrow std::runtime_error(\"Masternode information has not synced, please wait until it finishes before mining!\");\n+\t\t}\n \t}\n     // Update coinbase transaction with additional info about masternode and governance payments,\n     // get some info back to pass to getblocktemplate"
      }
    ]
  },
  {
    "sha": "6c9cf853b70332207cdea1e10c322219a57a2fca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzljZjg1M2I3MDMzMjIwN2NkZWExZTEwYzMyMjIxOWE1N2EyZmNh",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T20:23:58Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T20:23:58Z"
      },
      "message": "compile",
      "tree": {
        "sha": "aeb0b221453369f37bfe9666cc85ac43850bfb66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aeb0b221453369f37bfe9666cc85ac43850bfb66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c9cf853b70332207cdea1e10c322219a57a2fca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c9cf853b70332207cdea1e10c322219a57a2fca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c9cf853b70332207cdea1e10c322219a57a2fca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c9cf853b70332207cdea1e10c322219a57a2fca/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2cd55ced58042ab80c246cdffb95eff564cf646",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2cd55ced58042ab80c246cdffb95eff564cf646",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2cd55ced58042ab80c246cdffb95eff564cf646"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8414d0d3b8fcd437cc9441d22027828a292b1fa1",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c9cf853b70332207cdea1e10c322219a57a2fca/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c9cf853b70332207cdea1e10c322219a57a2fca/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=6c9cf853b70332207cdea1e10c322219a57a2fca",
        "patch": "@@ -169,6 +169,7 @@ extern std::atomic_bool fImporting;\n extern bool fReindex;\n extern int nScriptCheckThreads;\n extern bool fTxIndex;\n+extern bool fAddressIndex;\n extern bool fIsBareMultisigStd;\n extern bool fRequireStandard;\n extern unsigned int nBytesPerSigOp;"
      }
    ]
  },
  {
    "sha": "112271c7af093ef3dee70945dad0c21a5b700fcd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTIyNzFjN2FmMDkzZWYzZGVlNzA5NDVkYWQwYzIxYTViNzAwZmNk",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T20:44:37Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T20:44:37Z"
      },
      "message": "rev up version",
      "tree": {
        "sha": "a15d49d3bf3452f31a1e37f399313eb8dba9c6db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a15d49d3bf3452f31a1e37f399313eb8dba9c6db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/112271c7af093ef3dee70945dad0c21a5b700fcd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/112271c7af093ef3dee70945dad0c21a5b700fcd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/112271c7af093ef3dee70945dad0c21a5b700fcd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/112271c7af093ef3dee70945dad0c21a5b700fcd/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6c9cf853b70332207cdea1e10c322219a57a2fca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c9cf853b70332207cdea1e10c322219a57a2fca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c9cf853b70332207cdea1e10c322219a57a2fca"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "10b5701741dea2b57401344f129c58cb9adb815a",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/112271c7af093ef3dee70945dad0c21a5b700fcd/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/112271c7af093ef3dee70945dad0c21a5b700fcd/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=112271c7af093ef3dee70945dad0c21a5b700fcd",
        "patch": "@@ -28,7 +28,7 @@ class CMasternodeMan\n \n     static const int LAST_PAID_SCAN_BLOCKS;\n \n-    static const int MIN_POSE_PROTO_VERSION     = 70218;\n+    static const int MIN_POSE_PROTO_VERSION     = 70219;\n     static const int MAX_POSE_CONNECTIONS       = 10;\n     static const int MAX_POSE_RANK              = 10;\n     static const int MAX_POSE_BLOCKS            = 10;"
      },
      {
        "sha": "16edcb53764a3ce0c7609b221857d7004c31e6af",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/112271c7af093ef3dee70945dad0c21a5b700fcd/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/112271c7af093ef3dee70945dad0c21a5b700fcd/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=112271c7af093ef3dee70945dad0c21a5b700fcd",
        "patch": "@@ -11,7 +11,7 @@\n  */\n \n \n-static const int PROTOCOL_VERSION = 70218;\n+static const int PROTOCOL_VERSION = 70219;\n \n //! initial proto version, to be increased after version/verack negotiation\n static const int INIT_PROTO_VERSION = 209;\n@@ -20,7 +20,7 @@ static const int INIT_PROTO_VERSION = 209;\n static const int GETHEADERS_VERSION = 70077;\n \n //! disconnect from peers older than this proto version\n-static const int MIN_PEER_PROTO_VERSION = 70218;\n+static const int MIN_PEER_PROTO_VERSION = 70219;\n \n //! nTime field added to CAddress, starting with this version;\n //! if possible, avoid requesting addresses nodes older than this\n@@ -39,9 +39,9 @@ static const int NO_BLOOM_VERSION = 70201;\n static const int SENDHEADERS_VERSION = 70201;\n \n //! DIP0001 was activated in this version\n-static const int DIP0001_PROTOCOL_VERSION = 70218;\n+static const int DIP0001_PROTOCOL_VERSION = 70219;\n \n //! short-id-based block download starts with this version\n-static const int SHORT_IDS_BLOCKS_VERSION = 70218;\n+static const int SHORT_IDS_BLOCKS_VERSION = 70219;\n \n #endif // SYSCOIN_VERSION_H"
      }
    ]
  },
  {
    "sha": "2c1faa88ae90fd5af88ee839cbb6ff852cc34c8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzFmYWE4OGFlOTBmZDVhZjg4ZWU4MzljYmI2ZmY4NTJjYzM0Yzhk",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T20:57:14Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T20:57:14Z"
      },
      "message": "update testnet",
      "tree": {
        "sha": "af5fe34df55e745b6b21d7030cb93a8cf4765333",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af5fe34df55e745b6b21d7030cb93a8cf4765333"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c1faa88ae90fd5af88ee839cbb6ff852cc34c8d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c1faa88ae90fd5af88ee839cbb6ff852cc34c8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c1faa88ae90fd5af88ee839cbb6ff852cc34c8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c1faa88ae90fd5af88ee839cbb6ff852cc34c8d/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "112271c7af093ef3dee70945dad0c21a5b700fcd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/112271c7af093ef3dee70945dad0c21a5b700fcd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/112271c7af093ef3dee70945dad0c21a5b700fcd"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1209e37df9519ec739048fdc3256d0e2bb6a7f23",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c1faa88ae90fd5af88ee839cbb6ff852cc34c8d/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c1faa88ae90fd5af88ee839cbb6ff852cc34c8d/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=2c1faa88ae90fd5af88ee839cbb6ff852cc34c8d",
        "patch": "@@ -323,8 +323,8 @@ class CTestNetParams : public CChainParams {\n         consensus.BIP66Height = 0; // 0000002acdd29a14583540cb72e1c5cc83783560e38fa7081495d474fe1671f7\n         consensus.DIP0001Height = 5500;\n         consensus.powLimit = uint256S(\"00000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"); // ~uint256(0) >> 20\n-\t\tconsensus.nPowTargetTimespan = 24 * 60 * 60; // Syscoin: 1 day\n-\t\tconsensus.nPowTargetSpacing = 2.5 * 60; // Syscoin: 2.5 minutes\n+\t\tconsensus.nPowTargetTimespan = 6 * 60 * 60; // 6h retarget\n+\t\tconsensus.nPowTargetSpacing = 60; // Syscoin: 1 min\n \t\tconsensus.nAuxpowChainId = 0x1000;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = false;\n@@ -366,13 +366,13 @@ class CTestNetParams : public CChainParams {\n         nDefaultPort = 18369;\n         nPruneAfterHeight = 1000;\n \n-\t\tgenesis = CreateGenesisBlock(1524507764, 9059903, 0x1e0ffff0, 1, 8.88 * COIN);\n+\t\tgenesis = CreateGenesisBlock(1524507764, 1649039, 0x1e0ffff0, 1, 8.88 * COIN);\n \t\t/*\n \t\tuint256 hash;\n \t\tCBlockHeader genesisHeader = genesis.GetBlockHeader();\n \t\tGenerateGenesisBlock(genesisHeader, &hash);*/\n \t\tconsensus.hashGenesisBlock = genesis.GetHash();\n-\t\tassert(consensus.hashGenesisBlock == uint256S(\"0x000007510081c30331afdee1453991ef18663c13e14ff9caa1ae5b30fa8c35bc\"));\n+\t\tassert(consensus.hashGenesisBlock == uint256S(\"0x00000701f616edd1c07a7eac60ddd5e14f61b30bbe2b0126d0c0e4a0ceb7a5cb\"));\n \t\tassert(genesis.hashMerkleRoot == uint256S(\"0x3fc1815124d408495fb860705d2188d84fcfeb5efc894f26fefc81a5cbdc49e8\"));\n \n         vFixedSeeds.clear();"
      }
    ]
  },
  {
    "sha": "0c15bc9f7f2e87b0e31cb891faf8ca54faaed032",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzE1YmM5ZjdmMmU4N2IwZTMxY2I4OTFmYWY4Y2E1NGZhYWVkMDMy",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T21:34:51Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T21:34:51Z"
      },
      "message": "deal with genesis block case in miner",
      "tree": {
        "sha": "a69b46e5f13a1fa1e72e20bd998b40990983a05d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a69b46e5f13a1fa1e72e20bd998b40990983a05d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c15bc9f7f2e87b0e31cb891faf8ca54faaed032",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c15bc9f7f2e87b0e31cb891faf8ca54faaed032",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c15bc9f7f2e87b0e31cb891faf8ca54faaed032",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c15bc9f7f2e87b0e31cb891faf8ca54faaed032/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c1faa88ae90fd5af88ee839cbb6ff852cc34c8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c1faa88ae90fd5af88ee839cbb6ff852cc34c8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c1faa88ae90fd5af88ee839cbb6ff852cc34c8d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "187b8aaed1e3b523d833da4a4728bdaf94543860",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c15bc9f7f2e87b0e31cb891faf8ca54faaed032/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c15bc9f7f2e87b0e31cb891faf8ca54faaed032/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=0c15bc9f7f2e87b0e31cb891faf8ca54faaed032",
        "patch": "@@ -171,7 +171,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // Compute regular coinbase transaction.\n \tcoinbaseTx.vout[0].nValue = blockReward + nFees;\n \tcoinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;\n-\tif (!chainparams.MineBlocksOnDemand()) {\n+\tif (!chainparams.MineBlocksOnDemand() && nHeight > 0) {\n \t\tif (masternodeSync.IsFailed()) {\n \t\t\tthrow std::runtime_error(\"Masternode information has failed to sync, please restart your node!\");\n \t\t}"
      }
    ]
  },
  {
    "sha": "cf40c113bcf45206bd0a3dd823818ad73989aa43",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjQwYzExM2JjZjQ1MjA2YmQwYTNkZDgyMzgxOGFkNzM5ODlhYTQz",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T21:44:26Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T21:44:26Z"
      },
      "message": "first mined block",
      "tree": {
        "sha": "f83e3f1a808244b41d9ca0d61ae16266108ff9f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f83e3f1a808244b41d9ca0d61ae16266108ff9f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf40c113bcf45206bd0a3dd823818ad73989aa43",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf40c113bcf45206bd0a3dd823818ad73989aa43",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf40c113bcf45206bd0a3dd823818ad73989aa43",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf40c113bcf45206bd0a3dd823818ad73989aa43/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c15bc9f7f2e87b0e31cb891faf8ca54faaed032",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c15bc9f7f2e87b0e31cb891faf8ca54faaed032",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c15bc9f7f2e87b0e31cb891faf8ca54faaed032"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f7aaf9a9afb4cdb586a638c03dab42976b4ce540",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf40c113bcf45206bd0a3dd823818ad73989aa43/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf40c113bcf45206bd0a3dd823818ad73989aa43/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=cf40c113bcf45206bd0a3dd823818ad73989aa43",
        "patch": "@@ -171,7 +171,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // Compute regular coinbase transaction.\n \tcoinbaseTx.vout[0].nValue = blockReward + nFees;\n \tcoinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;\n-\tif (!chainparams.MineBlocksOnDemand() && nHeight > 0) {\n+\tif (!chainparams.MineBlocksOnDemand() && nHeight > 1) {\n \t\tif (masternodeSync.IsFailed()) {\n \t\t\tthrow std::runtime_error(\"Masternode information has failed to sync, please restart your node!\");\n \t\t}"
      }
    ]
  },
  {
    "sha": "5ed539cd36642689da9c604594ac1f1ea9cb7051",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWQ1MzljZDM2NjQyNjg5ZGE5YzYwNDU5NGFjMWYxZWE5Y2I3MDUx",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T21:55:13Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T21:55:13Z"
      },
      "message": "fix miner",
      "tree": {
        "sha": "9979842c9aa87a7af00aaddf7ee095b93ed4ecfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9979842c9aa87a7af00aaddf7ee095b93ed4ecfe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ed539cd36642689da9c604594ac1f1ea9cb7051",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ed539cd36642689da9c604594ac1f1ea9cb7051",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ed539cd36642689da9c604594ac1f1ea9cb7051",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ed539cd36642689da9c604594ac1f1ea9cb7051/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf40c113bcf45206bd0a3dd823818ad73989aa43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf40c113bcf45206bd0a3dd823818ad73989aa43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf40c113bcf45206bd0a3dd823818ad73989aa43"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "295e4dbbf5fe79d8b3fc9c9c817ac48ee204d1e5",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ed539cd36642689da9c604594ac1f1ea9cb7051/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ed539cd36642689da9c604594ac1f1ea9cb7051/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=5ed539cd36642689da9c604594ac1f1ea9cb7051",
        "patch": "@@ -171,7 +171,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // Compute regular coinbase transaction.\n \tcoinbaseTx.vout[0].nValue = blockReward + nFees;\n \tcoinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;\n-\tif (!chainparams.MineBlocksOnDemand() && nHeight > 1) {\n+\tif (!chainparams.MineBlocksOnDemand() && nHeight > 1 && !IsInitialBlockDownload()) {\n \t\tif (masternodeSync.IsFailed()) {\n \t\t\tthrow std::runtime_error(\"Masternode information has failed to sync, please restart your node!\");\n \t\t}"
      }
    ]
  },
  {
    "sha": "b640f373c44a0a04a898c0547c9116089ece5ee4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjQwZjM3M2M0NGEwYTA0YTg5OGMwNTQ3YzkxMTYwODllY2U1ZWU0",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T22:21:59Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T22:21:59Z"
      },
      "message": "only show confirmed",
      "tree": {
        "sha": "7f264f4e7fcb84a0b2d25a3b4376fc1489d55ad1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f264f4e7fcb84a0b2d25a3b4376fc1489d55ad1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b640f373c44a0a04a898c0547c9116089ece5ee4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b640f373c44a0a04a898c0547c9116089ece5ee4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b640f373c44a0a04a898c0547c9116089ece5ee4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b640f373c44a0a04a898c0547c9116089ece5ee4/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ed539cd36642689da9c604594ac1f1ea9cb7051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ed539cd36642689da9c604594ac1f1ea9cb7051",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ed539cd36642689da9c604594ac1f1ea9cb7051"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "489e41fa159030ad10d66076fa346d6e50f41e06",
        "filename": "src/alias.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b640f373c44a0a04a898c0547c9116089ece5ee4/src/alias.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b640f373c44a0a04a898c0547c9116089ece5ee4/src/alias.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alias.cpp?ref=b640f373c44a0a04a898c0547c9116089ece5ee4",
        "patch": "@@ -1131,7 +1131,7 @@ UniValue SyscoinListReceived(bool includeempty=true)\n \t}\n \n \tvector<COutput> vecOutputs;\n-\tpwalletMain->AvailableCoins(vecOutputs, false, NULL, includeempty, ALL_COINS, false, true);\n+\tpwalletMain->AvailableCoins(vecOutputs, true, NULL, includeempty, ALL_COINS, false, true);\n \tBOOST_FOREACH(const COutput& out, vecOutputs) {\n \t\tCTxDestination address;\n \t\tif (!ExtractDestination(out.tx->tx->vout[out.i].scriptPubKey, address))"
      }
    ]
  },
  {
    "sha": "607a18ea2f970abd23a7658e738f5ebd3f3f672e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDdhMThlYTJmOTcwYWJkMjNhNzY1OGU3MzhmNWViZDNmM2Y2NzJl",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T22:43:27Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T22:43:27Z"
      },
      "message": "update sr",
      "tree": {
        "sha": "79dda9645e5cb00e71c1cdd3835549bccc844ccf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79dda9645e5cb00e71c1cdd3835549bccc844ccf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/607a18ea2f970abd23a7658e738f5ebd3f3f672e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/607a18ea2f970abd23a7658e738f5ebd3f3f672e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/607a18ea2f970abd23a7658e738f5ebd3f3f672e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/607a18ea2f970abd23a7658e738f5ebd3f3f672e/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b640f373c44a0a04a898c0547c9116089ece5ee4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b640f373c44a0a04a898c0547c9116089ece5ee4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b640f373c44a0a04a898c0547c9116089ece5ee4"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8c2e735874642e2cec3c8d2d40882db8b68e79e0",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/607a18ea2f970abd23a7658e738f5ebd3f3f672e/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/607a18ea2f970abd23a7658e738f5ebd3f3f672e/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=607a18ea2f970abd23a7658e738f5ebd3f3f672e",
        "patch": "@@ -301,7 +301,7 @@ class CTestNetParams : public CChainParams {\n     CTestNetParams() {\n         strNetworkID = \"test\";\n         consensus.nSubsidyHalvingInterval = 525600;\n-\t\tconsensus.nSeniorityInterval = 60 * 24; // seniority increases every day\n+\t\tconsensus.nSeniorityInterval = 60; // seniority increases every day\n \t\tconsensus.nTotalSeniorityIntervals = 9;\n         consensus.nMasternodePaymentsStartBlock = 2; // not true, but it's ok as long as it's less then nMasternodePaymentsIncreaseBlock\n         consensus.nMasternodePaymentsIncreaseBlock = 2;"
      }
    ]
  },
  {
    "sha": "fc16e0388481559172f28f81804c148943bf705f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzE2ZTAzODg0ODE1NTkxNzJmMjhmODE4MDRjMTQ4OTQzYmY3MDVm",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T22:43:44Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-29T22:43:44Z"
      },
      "message": "compile",
      "tree": {
        "sha": "8a830efd42042e329b65bdab2a9b9c8beb59e4ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a830efd42042e329b65bdab2a9b9c8beb59e4ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc16e0388481559172f28f81804c148943bf705f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc16e0388481559172f28f81804c148943bf705f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc16e0388481559172f28f81804c148943bf705f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc16e0388481559172f28f81804c148943bf705f/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "607a18ea2f970abd23a7658e738f5ebd3f3f672e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/607a18ea2f970abd23a7658e738f5ebd3f3f672e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/607a18ea2f970abd23a7658e738f5ebd3f3f672e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5ea62b800dc484f48c32b8a5cffe7b74058a3788",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc16e0388481559172f28f81804c148943bf705f/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc16e0388481559172f28f81804c148943bf705f/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=fc16e0388481559172f28f81804c148943bf705f",
        "patch": "@@ -301,7 +301,7 @@ class CTestNetParams : public CChainParams {\n     CTestNetParams() {\n         strNetworkID = \"test\";\n         consensus.nSubsidyHalvingInterval = 525600;\n-\t\tconsensus.nSeniorityInterval = 60; // seniority increases every day\n+\t\tconsensus.nSeniorityInterval = 60; // seniority increases every hour\n \t\tconsensus.nTotalSeniorityIntervals = 9;\n         consensus.nMasternodePaymentsStartBlock = 2; // not true, but it's ok as long as it's less then nMasternodePaymentsIncreaseBlock\n         consensus.nMasternodePaymentsIncreaseBlock = 2;"
      }
    ]
  },
  {
    "sha": "f8bda08c456746858db77450ce6d27686944dac1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGJkYTA4YzQ1Njc0Njg1OGRiNzc0NTBjZTZkMjc2ODY5NDRkYWMx",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T02:21:41Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T02:21:41Z"
      },
      "message": "gracefully degrade block validity check if masternode info missing\n\nalso disable hd wallet for now until upstream enables and for upgrading reasons",
      "tree": {
        "sha": "0b320a574bb30ed7d5b65f50fa19525ed83099c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b320a574bb30ed7d5b65f50fa19525ed83099c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8bda08c456746858db77450ce6d27686944dac1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8bda08c456746858db77450ce6d27686944dac1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8bda08c456746858db77450ce6d27686944dac1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8bda08c456746858db77450ce6d27686944dac1/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc16e0388481559172f28f81804c148943bf705f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc16e0388481559172f28f81804c148943bf705f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc16e0388481559172f28f81804c148943bf705f"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 21,
      "deletions": 5
    },
    "files": [
      {
        "sha": "bd8582c6944cf5a9adeb762a1e0e90e5b9171d1d",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 3,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8bda08c456746858db77450ce6d27686944dac1/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8bda08c456746858db77450ce6d27686944dac1/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=f8bda08c456746858db77450ce6d27686944dac1",
        "patch": "@@ -39,7 +39,6 @@ CCriticalSection cs_mapMasternodePaymentVotes;\n bool IsBlockValueValid(const CBlock& block, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward, std::string& strErrorRet)\n {\n     strErrorRet = \"\";\n-\n \tbool isBlockRewardValueMet = (block.vtx[0]->GetValueOut() <= blockReward + nFee);\n \tif (fDebug) LogPrintf(\"block.vtx[0].GetValueOut() %lld <= blockReward %lld\\n\", block.vtx[0]->GetValueOut(), blockReward + nFee);\n \n@@ -112,6 +111,7 @@ bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight, const CAmoun\n     if(!masternodeSync.IsSynced()) {\n         //there is no budget data to use to check anything, let's just accept the longest chain\n         if(fDebug) LogPrintf(\"IsBlockPayeeValid -- WARNING: Client not synced, skipping block payee checks\\n\");\n+\t\tnTotalRewardWithMasternodes = txNew.GetValueOut()-nFee;\n         return true;\n     }\n \n@@ -569,6 +569,7 @@ bool CMasternodeBlockPayees::IsTransactionValid(const CTransaction& txNew, const\n \n     //require at least MNPAYMENTS_SIGNATURES_REQUIRED signatures\n \n+\n     for (const auto& payee : vecPayees) {\n         if (payee.GetVoteCount() >= nMaxSignatures) {\n             nMaxSignatures = payee.GetVoteCount();\n@@ -608,7 +609,12 @@ bool CMasternodeBlockPayees::IsTransactionValid(const CTransaction& txNew, const\n             }\n         }\n     }\n-\tif (nMaxSignatures < MNPAYMENTS_SIGNATURES_REQUIRED) return true;\n+\n+\t// if not enough sigs approve longest chain\n+\tif (nMaxSignatures < MNPAYMENTS_SIGNATURES_REQUIRED) {\n+\t\tnTotalRewardWithMasternodes = txNew.GetValueOut()-nFee;\n+\t\treturn true;\n+\t}\n     LogPrintf(\"CMasternodeBlockPayees::IsTransactionValid -- ERROR: Missing required payment, possible payees: '%s', amount: %f SYS\\n\", strPayeesPossible, (float)nMasternodePayment/COIN);\n     return false;\n }\n@@ -650,7 +656,13 @@ bool CMasternodePayments::IsTransactionValid(const CTransaction& txNew, int nBlo\n     LOCK(cs_mapMasternodeBlocks);\n \n     const auto it = mapMasternodeBlocks.find(nBlockHeight);\n-    return it == mapMasternodeBlocks.end() ? true : it->second.IsTransactionValid(txNew, nFee, nBlockHeight, nTotalRewardWithMasternodes);\n+\tif (it == mapMasternodeBlocks.end()) {\n+\t\tnTotalRewardWithMasternodes = txNew.GetValueOut()-nFee;\n+\t\treturn true;\n+\t}\n+\telse {\n+\t\treturn it->second.IsTransactionValid(txNew, nFee, nBlockHeight, nTotalRewardWithMasternodes);\n+\t}\n }\n \n void CMasternodePayments::CheckAndRemove()"
      },
      {
        "sha": "b976e4db394ce2c954ac811615139c7bc4255df3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8bda08c456746858db77450ce6d27686944dac1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8bda08c456746858db77450ce6d27686944dac1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f8bda08c456746858db77450ce6d27686944dac1",
        "patch": "@@ -2551,7 +2551,11 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     if (!IsBlockValueValid(block, pindex->nHeight, nFees, nTotalRewardWithMasternodes, strError)) {\n         return state.DoS(0, error(\"ConnectBlock(SYS): %s\", strError), REJECT_INVALID, \"bad-cb-amount\");\n     }\n-\n+\tGetBlockSubsidy(pindex->nHeight, chainparams.GetConsensus(), nTotalRewardWithMasternodes, false, true, 1);\n+\tif (block.vtx[0]->GetValueOut() > nTotalRewardWithMasternodes) {\n+\t\treturn state.DoS(0, error(\"ConnectBlock(SYS): coinbase amount exceeds block subsidy schedule\"),\n+\t\t\tREJECT_INVALID, \"bad-cb-reward\");\n+\t}\n     // END SYSCOIN\n \n     if (!control.Wait())"
      },
      {
        "sha": "95471b19d1b4787cee4ce44591c878ad1eaa22e5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8bda08c456746858db77450ce6d27686944dac1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8bda08c456746858db77450ce6d27686944dac1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f8bda08c456746858db77450ce6d27686944dac1",
        "patch": "@@ -76,7 +76,7 @@ static const bool DEFAULT_DISABLE_WALLET = false;\n extern const char * DEFAULT_WALLET_DAT;\n \n //! if set, all keys will be derived by using BIP39/BIP44\n-static const bool DEFAULT_USE_HD_WALLET = true;\n+static const bool DEFAULT_USE_HD_WALLET = false;\n \n bool AutoBackupWallet (CWallet* wallet, const std::string& strWalletFile_, std::string& strBackupWarningRet, std::string& strBackupErrorRet);\n "
      }
    ]
  },
  {
    "sha": "eb6b783d05005c7dd4dc6fbcee6714d7c94d8ba9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjZiNzgzZDA1MDA1YzdkZDRkYzZmYmNlZTY3MTRkN2M5NGQ4YmE5",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T02:25:36Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T02:25:36Z"
      },
      "message": "update proto",
      "tree": {
        "sha": "cce1016a6d661f1a5b729352143c5fe807f757ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cce1016a6d661f1a5b729352143c5fe807f757ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb6b783d05005c7dd4dc6fbcee6714d7c94d8ba9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb6b783d05005c7dd4dc6fbcee6714d7c94d8ba9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb6b783d05005c7dd4dc6fbcee6714d7c94d8ba9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb6b783d05005c7dd4dc6fbcee6714d7c94d8ba9/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8bda08c456746858db77450ce6d27686944dac1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8bda08c456746858db77450ce6d27686944dac1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8bda08c456746858db77450ce6d27686944dac1"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "781dd029195ade1a86266b14ac29e4a352805331",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb6b783d05005c7dd4dc6fbcee6714d7c94d8ba9/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb6b783d05005c7dd4dc6fbcee6714d7c94d8ba9/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=eb6b783d05005c7dd4dc6fbcee6714d7c94d8ba9",
        "patch": "@@ -28,7 +28,7 @@ class CMasternodeMan\n \n     static const int LAST_PAID_SCAN_BLOCKS;\n \n-    static const int MIN_POSE_PROTO_VERSION     = 70219;\n+    static const int MIN_POSE_PROTO_VERSION     = 70220;\n     static const int MAX_POSE_CONNECTIONS       = 10;\n     static const int MAX_POSE_RANK              = 10;\n     static const int MAX_POSE_BLOCKS            = 10;"
      },
      {
        "sha": "6b492fd3eb7b207284fc571fcecbce0d1526e92a",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb6b783d05005c7dd4dc6fbcee6714d7c94d8ba9/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb6b783d05005c7dd4dc6fbcee6714d7c94d8ba9/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=eb6b783d05005c7dd4dc6fbcee6714d7c94d8ba9",
        "patch": "@@ -11,7 +11,7 @@\n  */\n \n \n-static const int PROTOCOL_VERSION = 70219;\n+static const int PROTOCOL_VERSION = 70220;\n \n //! initial proto version, to be increased after version/verack negotiation\n static const int INIT_PROTO_VERSION = 209;\n@@ -20,7 +20,7 @@ static const int INIT_PROTO_VERSION = 209;\n static const int GETHEADERS_VERSION = 70077;\n \n //! disconnect from peers older than this proto version\n-static const int MIN_PEER_PROTO_VERSION = 70219;\n+static const int MIN_PEER_PROTO_VERSION = 70220;\n \n //! nTime field added to CAddress, starting with this version;\n //! if possible, avoid requesting addresses nodes older than this\n@@ -39,9 +39,9 @@ static const int NO_BLOOM_VERSION = 70201;\n static const int SENDHEADERS_VERSION = 70201;\n \n //! DIP0001 was activated in this version\n-static const int DIP0001_PROTOCOL_VERSION = 70219;\n+static const int DIP0001_PROTOCOL_VERSION = 70220;\n \n //! short-id-based block download starts with this version\n-static const int SHORT_IDS_BLOCKS_VERSION = 70219;\n+static const int SHORT_IDS_BLOCKS_VERSION = 70220;\n \n #endif // SYSCOIN_VERSION_H"
      }
    ]
  },
  {
    "sha": "042a5c4d2cef10f5cc7de78e9d2608dea5b8b829",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDJhNWM0ZDJjZWYxMGY1Y2M3ZGU3OGU5ZDI2MDhkZWE1YjhiODI5",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T02:45:07Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T02:45:07Z"
      },
      "message": "proper limit checks",
      "tree": {
        "sha": "4dafa73ba21f65d27668bb5bef0a895bada6d175",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4dafa73ba21f65d27668bb5bef0a895bada6d175"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/042a5c4d2cef10f5cc7de78e9d2608dea5b8b829",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/042a5c4d2cef10f5cc7de78e9d2608dea5b8b829",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/042a5c4d2cef10f5cc7de78e9d2608dea5b8b829",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/042a5c4d2cef10f5cc7de78e9d2608dea5b8b829/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb6b783d05005c7dd4dc6fbcee6714d7c94d8ba9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb6b783d05005c7dd4dc6fbcee6714d7c94d8ba9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb6b783d05005c7dd4dc6fbcee6714d7c94d8ba9"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 16,
      "deletions": 8
    },
    "files": [
      {
        "sha": "4b3697641b908e0e6112ac5941cd1532307fe771",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 3,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/042a5c4d2cef10f5cc7de78e9d2608dea5b8b829/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/042a5c4d2cef10f5cc7de78e9d2608dea5b8b829/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=042a5c4d2cef10f5cc7de78e9d2608dea5b8b829",
        "patch": "@@ -41,12 +41,9 @@ bool IsBlockValueValid(const CBlock& block, int nBlockHeight, const CAmount &nFe\n     strErrorRet = \"\";\n \tbool isBlockRewardValueMet = (block.vtx[0]->GetValueOut() <= blockReward + nFee);\n \tif (fDebug) LogPrintf(\"block.vtx[0].GetValueOut() %lld <= blockReward %lld\\n\", block.vtx[0]->GetValueOut(), blockReward + nFee);\n-\n     // we are still using budgets, but we have no data about them anymore,\n     // all we know is predefined budget cycle and window\n \n-\n-\n     // superblocks started\n \n \tCAmount nSuperblockMaxValue = blockReward + nFee + CSuperblock::GetPaymentsLimit(nBlockHeight);\n@@ -64,6 +61,14 @@ bool IsBlockValueValid(const CBlock& block, int nBlockHeight, const CAmount &nFe\n             }\n             return isSuperblockMaxValueMet;\n         }\n+\t\telse {\n+\t\t\tCAmount nTotalRewardWithMasternodes;\n+\t\t\tGetBlockSubsidy(nBlockHeight, Params().GetConsensus(), nTotalRewardWithMasternodes, false, true, 1);\n+\t\t\tif (block.vtx[0]->GetValueOut() > nTotalRewardWithMasternodes) {\n+\t\t\t\tstrErrorRet = strprintf(\"IsBlockValueValid: coinbase amount exceeds block subsidy schedule\");\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n         if(!isBlockRewardValueMet) {\n             strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded block reward, only regular blocks are allowed at this height\",\n \t\t\t\tnBlockHeight, block.vtx[0]->GetValueOut(), blockReward + nFee);\n@@ -88,6 +93,14 @@ bool IsBlockValueValid(const CBlock& block, int nBlockHeight, const CAmount &nFe\n             strErrorRet = strprintf(\"invalid superblock detected at height %d\", nBlockHeight);\n             return false;\n         }\n+\t\telse {\n+\t\t\tCAmount nTotalRewardWithMasternodes;\n+\t\t\tGetBlockSubsidy(nBlockHeight, Params().GetConsensus(), nTotalRewardWithMasternodes, false, true, 1);\n+\t\t\tif (block.vtx[0]->GetValueOut() > nTotalRewardWithMasternodes) {\n+\t\t\t\tstrErrorRet = strprintf(\"IsBlockValueValid: coinbase amount exceeds block subsidy schedule\");\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n         LogPrint(\"gobject\", \"IsBlockValueValid -- No triggered superblock detected at height %d\\n\", nBlockHeight);\n         if(!isBlockRewardValueMet) {\n             strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded block reward, no triggered superblock detected\","
      },
      {
        "sha": "708d14a27486989bdf4f5e3a498dbfb6f91e623d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/042a5c4d2cef10f5cc7de78e9d2608dea5b8b829/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/042a5c4d2cef10f5cc7de78e9d2608dea5b8b829/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=042a5c4d2cef10f5cc7de78e9d2608dea5b8b829",
        "patch": "@@ -2551,11 +2551,6 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     if (!IsBlockValueValid(block, pindex->nHeight, nFees, nTotalRewardWithMasternodes, strError)) {\n         return state.DoS(0, error(\"ConnectBlock(SYS): %s\", strError), REJECT_INVALID, \"bad-cb-amount\");\n     }\n-\tGetBlockSubsidy(pindex->nHeight, chainparams.GetConsensus(), nTotalRewardWithMasternodes, false, true, 1);\n-\tif (block.vtx[0]->GetValueOut() > nTotalRewardWithMasternodes) {\n-\t\treturn state.DoS(0, error(\"ConnectBlock(SYS): coinbase amount exceeds block subsidy schedule\"),\n-\t\t\tREJECT_INVALID, \"bad-cb-reward\");\n-\t}\n     // END SYSCOIN\n \n     if (!control.Wait())"
      }
    ]
  },
  {
    "sha": "ebb729f46843b62ce1cfdd071be5977adb93a52c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYmI3MjlmNDY4NDNiNjJjZTFjZmRkMDcxYmU1OTc3YWRiOTNhNTJj",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T03:05:50Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T03:05:50Z"
      },
      "message": "check against fee",
      "tree": {
        "sha": "63e93f286480b1ac9d2531f461c291c0061190ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63e93f286480b1ac9d2531f461c291c0061190ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebb729f46843b62ce1cfdd071be5977adb93a52c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebb729f46843b62ce1cfdd071be5977adb93a52c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ebb729f46843b62ce1cfdd071be5977adb93a52c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebb729f46843b62ce1cfdd071be5977adb93a52c/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "042a5c4d2cef10f5cc7de78e9d2608dea5b8b829",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/042a5c4d2cef10f5cc7de78e9d2608dea5b8b829",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/042a5c4d2cef10f5cc7de78e9d2608dea5b8b829"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8478865ca6830efbe457f6563791f3807ee20450",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebb729f46843b62ce1cfdd071be5977adb93a52c/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebb729f46843b62ce1cfdd071be5977adb93a52c/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=ebb729f46843b62ce1cfdd071be5977adb93a52c",
        "patch": "@@ -64,7 +64,7 @@ bool IsBlockValueValid(const CBlock& block, int nBlockHeight, const CAmount &nFe\n \t\telse {\n \t\t\tCAmount nTotalRewardWithMasternodes;\n \t\t\tGetBlockSubsidy(nBlockHeight, Params().GetConsensus(), nTotalRewardWithMasternodes, false, true, 1);\n-\t\t\tif (block.vtx[0]->GetValueOut() > nTotalRewardWithMasternodes) {\n+\t\t\tif (block.vtx[0]->GetValueOut() > (nTotalRewardWithMasternodes + nFee)) {\n \t\t\t\tstrErrorRet = strprintf(\"IsBlockValueValid: coinbase amount exceeds block subsidy schedule\");\n \t\t\t\treturn false;\n \t\t\t}\n@@ -96,7 +96,7 @@ bool IsBlockValueValid(const CBlock& block, int nBlockHeight, const CAmount &nFe\n \t\telse {\n \t\t\tCAmount nTotalRewardWithMasternodes;\n \t\t\tGetBlockSubsidy(nBlockHeight, Params().GetConsensus(), nTotalRewardWithMasternodes, false, true, 1);\n-\t\t\tif (block.vtx[0]->GetValueOut() > nTotalRewardWithMasternodes) {\n+\t\t\tif (block.vtx[0]->GetValueOut() > (nTotalRewardWithMasternodes + nFee)) {\n \t\t\t\tstrErrorRet = strprintf(\"IsBlockValueValid: coinbase amount exceeds block subsidy schedule\");\n \t\t\t\treturn false;\n \t\t\t}"
      }
    ]
  },
  {
    "sha": "124735e1b0ab52b86aef012312ce0f2448c7da22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjQ3MzVlMWIwYWI1MmI4NmFlZjAxMjMxMmNlMGYyNDQ4YzdkYTIy",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T03:58:28Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T03:58:28Z"
      },
      "message": "remove split fees for cleaner code and max subsidy check",
      "tree": {
        "sha": "48aac564eb2c94d52ea7247f3d4bd89b90b43c51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48aac564eb2c94d52ea7247f3d4bd89b90b43c51"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/124735e1b0ab52b86aef012312ce0f2448c7da22",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/124735e1b0ab52b86aef012312ce0f2448c7da22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/124735e1b0ab52b86aef012312ce0f2448c7da22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/124735e1b0ab52b86aef012312ce0f2448c7da22/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ebb729f46843b62ce1cfdd071be5977adb93a52c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebb729f46843b62ce1cfdd071be5977adb93a52c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ebb729f46843b62ce1cfdd071be5977adb93a52c"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 42,
      "deletions": 51
    },
    "files": [
      {
        "sha": "0194cf92966fbfecb76b8f20c3721d1dcc43840e",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124735e1b0ab52b86aef012312ce0f2448c7da22/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124735e1b0ab52b86aef012312ce0f2448c7da22/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=124735e1b0ab52b86aef012312ce0f2448c7da22",
        "patch": "@@ -432,14 +432,14 @@ void CSuperblockManager::CreateSuperblock(CMutableTransaction& txNewRet, int nBl\n     DBG( std::cout << \"CSuperblockManager::CreateSuperblock End\" << std::endl; );\n }\n \n-bool CSuperblockManager::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward)\n+bool CSuperblockManager::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount &blockReward)\n {\n     // GET BEST SUPERBLOCK, SHOULD MATCH\n     LOCK(governance.cs);\n \n     CSuperblock_sptr pSuperblock;\n     if(CSuperblockManager::GetBestSuperblock(pSuperblock, nBlockHeight)) {\n-        return pSuperblock->IsValid(txNew, nBlockHeight, nFee, blockReward);\n+        return pSuperblock->IsValid(txNew, nBlockHeight, blockReward);\n     }\n \n     return false;\n@@ -665,7 +665,7 @@ CAmount CSuperblock::GetPaymentsTotalAmount()\n *   - Does this transaction match the superblock?\n */\n \n-bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount& nFee, const CAmount &blockReward)\n+bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount &blockReward)\n {\n     // TODO : LOCK(cs);\n     // No reason for a lock here now since this method only accesses data\n@@ -710,8 +710,8 @@ bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, const CAm\n     // miner should not get more than he would usually get\n     CAmount nBlockValue = txNew.GetValueOut();\n     \n-\tif(nBlockValue > (blockReward + nFee + nPaymentsTotalAmount)) {\n-        LogPrintf(\"CSuperblock::IsValid -- ERROR: Block invalid, block value limit exceeded: block %lld, limit %lld\\n\", nBlockValue, blockReward + nFee + nPaymentsTotalAmount);\n+\tif(nBlockValue > (blockReward + nPaymentsTotalAmount)) {\n+        LogPrintf(\"CSuperblock::IsValid -- ERROR: Block invalid, block value limit exceeded: block %lld, limit %lld\\n\", nBlockValue, blockReward + nPaymentsTotalAmount);\n         return false;\n     }\n "
      },
      {
        "sha": "4558e6a7d22c79016c2ee9ee4f894503f782d7ab",
        "filename": "src/governance-classes.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124735e1b0ab52b86aef012312ce0f2448c7da22/src/governance-classes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124735e1b0ab52b86aef012312ce0f2448c7da22/src/governance-classes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.h?ref=124735e1b0ab52b86aef012312ce0f2448c7da22",
        "patch": "@@ -73,7 +73,7 @@ class CSuperblockManager\n     static void ExecuteBestSuperblock(int nBlockHeight);\n \n     static std::string GetRequiredPaymentsString(int nBlockHeight);\n-    static bool IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward);\n+    static bool IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount &blockReward);\n };\n \n /**"
      },
      {
        "sha": "c4c23f8d347803e87c98fce5bc0ff09ddb7793cf",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 35,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124735e1b0ab52b86aef012312ce0f2448c7da22/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124735e1b0ab52b86aef012312ce0f2448c7da22/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=124735e1b0ab52b86aef012312ce0f2448c7da22",
        "patch": "@@ -36,17 +36,17 @@ CCriticalSection cs_mapMasternodePaymentVotes;\n *   - When non-superblocks are detected, the normal schedule should be maintained\n */\n \n-bool IsBlockValueValid(const CBlock& block, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward, std::string& strErrorRet)\n+bool IsBlockValueValid(const CBlock& block, int nBlockHeight, const CAmount &blockReward, const CAmount &nFee, std::string& strErrorRet)\n {\n     strErrorRet = \"\";\n-\tbool isBlockRewardValueMet = (block.vtx[0]->GetValueOut() <= blockReward + nFee);\n-\tif (fDebug) LogPrintf(\"block.vtx[0].GetValueOut() %lld <= blockReward %lld\\n\", block.vtx[0]->GetValueOut(), blockReward + nFee);\n+\tbool isBlockRewardValueMet = (block.vtx[0]->GetValueOut() <= blockReward);\n+\tif (fDebug) LogPrintf(\"block.vtx[0].GetValueOut() %lld <= blockReward %lld\\n\", block.vtx[0]->GetValueOut(), blockReward);\n     // we are still using budgets, but we have no data about them anymore,\n     // all we know is predefined budget cycle and window\n \n     // superblocks started\n \n-\tCAmount nSuperblockMaxValue = blockReward + nFee + CSuperblock::GetPaymentsLimit(nBlockHeight);\n+\tCAmount nSuperblockMaxValue = blockReward + CSuperblock::GetPaymentsLimit(nBlockHeight);\n \tbool isSuperblockMaxValueMet = (block.vtx[0]->GetValueOut() <= nSuperblockMaxValue);\n \n     LogPrint(\"gobject\", \"block.vtx[0]->GetValueOut() %lld <= nSuperblockMaxValue %lld\\n\", block.vtx[0]->GetValueOut(), nSuperblockMaxValue);\n@@ -64,14 +64,14 @@ bool IsBlockValueValid(const CBlock& block, int nBlockHeight, const CAmount &nFe\n \t\telse {\n \t\t\tCAmount nTotalRewardWithMasternodes;\n \t\t\tGetBlockSubsidy(nBlockHeight, Params().GetConsensus(), nTotalRewardWithMasternodes, false, true, 1);\n-\t\t\tif (block.vtx[0]->GetValueOut() > (nTotalRewardWithMasternodes + nFee)) {\n+\t\t\tif (block.vtx[0]->GetValueOut() > (nTotalRewardWithMasternodes+nFee)) {\n \t\t\t\tstrErrorRet = strprintf(\"IsBlockValueValid: coinbase amount exceeds block subsidy schedule\");\n \t\t\t\treturn false;\n \t\t\t}\n \t\t}\n         if(!isBlockRewardValueMet) {\n             strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded block reward, only regular blocks are allowed at this height\",\n-\t\t\t\tnBlockHeight, block.vtx[0]->GetValueOut(), blockReward + nFee);\n+\t\t\t\tnBlockHeight, block.vtx[0]->GetValueOut(), blockReward);\n         }\n         // it MUST be a regular block otherwise\n         return isBlockRewardValueMet;\n@@ -81,7 +81,7 @@ bool IsBlockValueValid(const CBlock& block, int nBlockHeight, const CAmount &nFe\n \n     if(sporkManager.IsSporkActive(SPORK_9_SUPERBLOCKS_ENABLED)) {\n         if(CSuperblockManager::IsSuperblockTriggered(nBlockHeight)) {\n-            if(CSuperblockManager::IsValid(*block.vtx[0], nBlockHeight, nFee, blockReward)) {\n+            if(CSuperblockManager::IsValid(*block.vtx[0], nBlockHeight, blockReward)) {\n                 LogPrint(\"gobject\", \"IsBlockValueValid -- Valid superblock at height %d: %s\", nBlockHeight, block.vtx[0]->ToString());\n                 // all checks are done in CSuperblock::IsValid, nothing to do here\n                 return true;\n@@ -104,27 +104,27 @@ bool IsBlockValueValid(const CBlock& block, int nBlockHeight, const CAmount &nFe\n         LogPrint(\"gobject\", \"IsBlockValueValid -- No triggered superblock detected at height %d\\n\", nBlockHeight);\n         if(!isBlockRewardValueMet) {\n             strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded block reward, no triggered superblock detected\",\n-                                    nBlockHeight, block.vtx[0]->GetValueOut(), blockReward+ nFee);\n+                                    nBlockHeight, block.vtx[0]->GetValueOut(), blockReward);\n         }\n     } else {\n         // should NOT allow superblocks at all, when superblocks are disabled\n         LogPrint(\"gobject\", \"IsBlockValueValid -- Superblocks are disabled, no superblocks allowed\\n\");\n         if(!isBlockRewardValueMet) {\n             strErrorRet = strprintf(\"coinbase pays too much at height %d (actual=%d vs limit=%d), exceeded block reward, superblocks are disabled\",\n-                                    nBlockHeight, block.vtx[0]->GetValueOut(), blockReward+ nFee);\n+                                    nBlockHeight, block.vtx[0]->GetValueOut(), blockReward);\n         }\n     }\n \n     // it MUST be a regular block\n     return isBlockRewardValueMet;\n }\n \n-bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward, CAmount& nTotalRewardWithMasternodes)\n+bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight,  const CAmount &blockReward, CAmount& nTotalRewardWithMasternodes)\n {\n     if(!masternodeSync.IsSynced()) {\n         //there is no budget data to use to check anything, let's just accept the longest chain\n         if(fDebug) LogPrintf(\"IsBlockPayeeValid -- WARNING: Client not synced, skipping block payee checks\\n\");\n-\t\tnTotalRewardWithMasternodes = txNew.GetValueOut()-nFee;\n+\t\tnTotalRewardWithMasternodes = txNew.GetValueOut();\n         return true;\n     }\n \n@@ -138,7 +138,7 @@ bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight, const CAmoun\n \n     if(sporkManager.IsSporkActive(SPORK_9_SUPERBLOCKS_ENABLED)) {\n         if(CSuperblockManager::IsSuperblockTriggered(nBlockHeight)) {\n-            if(CSuperblockManager::IsValid(txNew, nBlockHeight, nFee, blockReward)) {\n+            if(CSuperblockManager::IsValid(txNew, nBlockHeight, blockReward)) {\n                 LogPrint(\"gobject\", \"IsBlockPayeeValid -- Valid superblock at height %d: %s\", nBlockHeight, txNew.ToString());\n                 return true;\n             }\n@@ -155,7 +155,7 @@ bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight, const CAmoun\n     }\n \n     // IF THIS ISN'T A SUPERBLOCK OR SUPERBLOCK IS INVALID, IT SHOULD PAY A MASTERNODE DIRECTLY\n-    if(mnpayments.IsTransactionValid(txNew, nBlockHeight, nFee, nTotalRewardWithMasternodes)) {\n+    if(mnpayments.IsTransactionValid(txNew, nBlockHeight, nTotalRewardWithMasternodes)) {\n         LogPrint(\"mnpayments\", \"IsBlockPayeeValid -- Valid masternode payment at height %d: %s\", nBlockHeight, txNew.ToString());\n         return true;\n     }\n@@ -169,7 +169,7 @@ bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight, const CAmoun\n     return true;\n }\n \n-void FillBlockPayments(CMutableTransaction& txNew, int nBlockHeight, const CAmount &nFee, CAmount &blockReward, CTxOut& txoutMasternodeRet, std::vector<CTxOut>& voutSuperblockRet)\n+void FillBlockPayments(CMutableTransaction& txNew, int nBlockHeight, CAmount &blockReward, CTxOut& txoutMasternodeRet, std::vector<CTxOut>& voutSuperblockRet)\n {\n     // only create superblocks if spork is enabled AND if superblock is actually triggered\n     // (height should be validated inside)\n@@ -181,9 +181,9 @@ void FillBlockPayments(CMutableTransaction& txNew, int nBlockHeight, const CAmou\n     }\n \n     // FILL BLOCK PAYEE WITH MASTERNODE PAYMENT OTHERWISE\n-\tmnpayments.FillBlockPayee(txNew, nBlockHeight, nFee, blockReward, txoutMasternodeRet);\n-\tLogPrint(\"mnpayments\", \"FillBlockPayments -- nBlockHeight %d fees %lld blockReward %lld txoutMasternodeRet %s txNew %s\",\n-\t\tnBlockHeight, nFee / 2, blockReward, txoutMasternodeRet.ToString(), txNew.ToString());\n+\tmnpayments.FillBlockPayee(txNew, nBlockHeight, blockReward, txoutMasternodeRet);\n+\tLogPrint(\"mnpayments\", \"FillBlockPayments -- nBlockHeight %d blockReward %lld txoutMasternodeRet %s txNew %s\",\n+\t\tnBlockHeight, blockReward, txoutMasternodeRet.ToString(), txNew.ToString());\n }\n \n std::string GetRequiredPaymentsString(int nBlockHeight)\n@@ -227,7 +227,7 @@ bool CMasternodePayments::UpdateLastVote(const CMasternodePaymentVote& vote)\n *   Fill Masternode ONLY payment block\n */\n \n-void CMasternodePayments::FillBlockPayee(CMutableTransaction& txNew, int nBlockHeight, const CAmount &nFee, CAmount &blockReward, CTxOut& txoutMasternodeRet) const\n+void CMasternodePayments::FillBlockPayee(CMutableTransaction& txNew, int nBlockHeight,  CAmount &blockReward, CTxOut& txoutMasternodeRet) const\n {\n     // make sure it's not filled yet\n     txoutMasternodeRet = CTxOut();\n@@ -249,16 +249,14 @@ void CMasternodePayments::FillBlockPayee(CMutableTransaction& txNew, int nBlockH\n     }\n \n \t// miner takes 25% of the reward and half fees\n-\ttxNew.vout[0].nValue = ((blockReward*0.25) + (nFee / 2));\n+\ttxNew.vout[0].nValue = (blockReward*0.25);\n \t// masternode takes 75% of reward, add/remove some reward depending on seniority and half fees.\n \tCAmount nTotalReward;\n \tblockReward = GetBlockSubsidy(nBlockHeight, Params().GetConsensus(), nTotalReward, false, true, nStartHeightBlock);\n \n     // ... and masternode\n     txoutMasternodeRet = CTxOut(blockReward, payee);\n     txNew.vout.push_back(txoutMasternodeRet);\n-\tif (nFee > 0)\n-\t\ttxNew.vout.push_back(CTxOut(nFee / 2, payee));\n \n     CTxDestination address1;\n     ExtractDestination(payee, address1);\n@@ -571,7 +569,7 @@ bool CMasternodeBlockPayees::HasPayeeWithVotes(const CScript& payeeIn, int nVote\n     return false;\n }\n \n-bool CMasternodeBlockPayees::IsTransactionValid(const CTransaction& txNew, const CAmount &nFee, const int64_t &nHeight, CAmount& nTotalRewardWithMasternodes) const\n+bool CMasternodeBlockPayees::IsTransactionValid(const CTransaction& txNew, const int64_t &nHeight, CAmount& nTotalRewardWithMasternodes) const\n {\n     LOCK(cs_vecPayees);\n \n@@ -593,22 +591,15 @@ bool CMasternodeBlockPayees::IsTransactionValid(const CTransaction& txNew, const\n \t\tconst CScript& payeeScript = payee.GetPayee();\n \t\tnMasternodePayment = GetBlockSubsidy(nHeight, chainparams.GetConsensus(), nTotalRewardWithMasternodes, false, true, payee.nStartHeight);\n \t\tbool bFoundPayment = false;\n-\t\tbool bFoundFee = false;\n \t\tBOOST_FOREACH(CTxOut txout, txNew.vout) {\n \t\t\tif (payeeScript == txout.scriptPubKey && nMasternodePayment == txout.nValue) {\n \t\t\t\tLogPrint(\"mnpayments\", \"CMasternodeBlockPayees::IsTransactionValid -- Found required payment\\n\");\n-\t\t\t\tbFoundPayment = true;\n-\t\t\t}\n-\t\t\tif (nFee <= 0 || (payeeScript == txout.scriptPubKey && ((nFee / 2) == txout.nValue))) {\n-\t\t\t\tLogPrint(\"mnpayments\", \"CMasternodeBlockPayees::IsTransactionValid -- Found required fee\\n\");\n-\t\t\t\tbFoundFee = true;\n-\t\t\t}\n-\t\t\tif (bFoundFee && bFoundPayment)\n \t\t\t\tbreak;\n+\t\t\t}\n \t\t}\n \n         if (payee.GetVoteCount() >= MNPAYMENTS_SIGNATURES_REQUIRED) {\n-\t\t\tif (bFoundFee && bFoundPayment)\n+\t\t\tif (bFoundPayment)\n \t\t\t\treturn true;           \n \n             CTxDestination address1;\n@@ -625,7 +616,7 @@ bool CMasternodeBlockPayees::IsTransactionValid(const CTransaction& txNew, const\n \n \t// if not enough sigs approve longest chain\n \tif (nMaxSignatures < MNPAYMENTS_SIGNATURES_REQUIRED) {\n-\t\tnTotalRewardWithMasternodes = txNew.GetValueOut()-nFee;\n+\t\tnTotalRewardWithMasternodes = txNew.GetValueOut();\n \t\treturn true;\n \t}\n     LogPrintf(\"CMasternodeBlockPayees::IsTransactionValid -- ERROR: Missing required payment, possible payees: '%s', amount: %f SYS\\n\", strPayeesPossible, (float)nMasternodePayment/COIN);\n@@ -664,17 +655,17 @@ std::string CMasternodePayments::GetRequiredPaymentsString(int nBlockHeight) con\n     return it == mapMasternodeBlocks.end() ? \"Unknown\" : it->second.GetRequiredPaymentsString();\n }\n \n-bool CMasternodePayments::IsTransactionValid(const CTransaction& txNew, int nBlockHeight, const CAmount& nFee, CAmount& nTotalRewardWithMasternodes) const\n+bool CMasternodePayments::IsTransactionValid(const CTransaction& txNew, int nBlockHeight, CAmount& nTotalRewardWithMasternodes) const\n {\n     LOCK(cs_mapMasternodeBlocks);\n \n     const auto it = mapMasternodeBlocks.find(nBlockHeight);\n \tif (it == mapMasternodeBlocks.end()) {\n-\t\tnTotalRewardWithMasternodes = txNew.GetValueOut()-nFee;\n+\t\tnTotalRewardWithMasternodes = txNew.GetValueOut();\n \t\treturn true;\n \t}\n \telse {\n-\t\treturn it->second.IsTransactionValid(txNew, nFee, nBlockHeight, nTotalRewardWithMasternodes);\n+\t\treturn it->second.IsTransactionValid(txNew, nBlockHeight, nTotalRewardWithMasternodes);\n \t}\n }\n "
      },
      {
        "sha": "c4a9da592aa60f81c6334b72fcef0f1c76267998",
        "filename": "src/masternode-payments.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124735e1b0ab52b86aef012312ce0f2448c7da22/src/masternode-payments.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124735e1b0ab52b86aef012312ce0f2448c7da22/src/masternode-payments.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.h?ref=124735e1b0ab52b86aef012312ce0f2448c7da22",
        "patch": "@@ -33,9 +33,9 @@ extern CCriticalSection cs_mapMasternodePayeeVotes;\n extern CMasternodePayments mnpayments;\n \n /// TODO: all 4 functions do not belong here really, they should be refactored/moved somewhere (main.cpp ?)\n-bool IsBlockValueValid(const CBlock& block, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward, std::string& strErrorRet);\n-bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward, CAmount& nTotalRewardWithMasternodes);\n-void FillBlockPayments(CMutableTransaction& txNew, int nBlockHeight, const CAmount &nFee, CAmount &blockReward, CTxOut& txoutMasternodeRet, std::vector<CTxOut>& voutSuperblockRet);\n+bool IsBlockValueValid(const CBlock& block, int nBlockHeight,  const CAmount &blockReward, const CAmount &nFee, std::string& strErrorRet);\n+bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight, const CAmount &blockReward, CAmount& nTotalRewardWithMasternodes);\n+void FillBlockPayments(CMutableTransaction& txNew, int nBlockHeight, CAmount &blockReward, CTxOut& txoutMasternodeRet, std::vector<CTxOut>& voutSuperblockRet);\n std::string GetRequiredPaymentsString(int nBlockHeight);\n \n class CMasternodePayee\n@@ -104,7 +104,7 @@ class CMasternodeBlockPayees\n \tbool GetBestPayee(CScript& payeeRet, int &nStartHeightBlock) const;\n     bool HasPayeeWithVotes(const CScript& payeeIn, int nVotesReq, CMasternodePayee& payee) const;\n \n-    bool IsTransactionValid(const CTransaction& txNew, const CAmount &nFee, const int64_t &nHeight, CAmount& nTotalRewardWithMasternodes) const;\n+    bool IsTransactionValid(const CTransaction& txNew, const int64_t &nHeight, CAmount& nTotalRewardWithMasternodes) const;\n \n     std::string GetRequiredPaymentsString() const;\n };\n@@ -211,15 +211,15 @@ class CMasternodePayments\n \n     bool GetBlockPayee(int nBlockHeight, CScript& payeeRet) const;\n \tbool GetBlockPayee(int nBlockHeight, CScript& payee, int &nStartHeightBlock) const;\n-    bool IsTransactionValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, CAmount& nTotalRewardWithMasternodes) const;\n+    bool IsTransactionValid(const CTransaction& txNew, int nBlockHeight, CAmount& nTotalRewardWithMasternodes) const;\n     bool IsScheduled(const masternode_info_t& mnInfo, int nNotBlockHeight) const;\n \n     bool UpdateLastVote(const CMasternodePaymentVote& vote);\n \n     int GetMinMasternodePaymentsProto() const;\n     void ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, CConnman& connman);\n     std::string GetRequiredPaymentsString(int nBlockHeight) const;\n-    void FillBlockPayee(CMutableTransaction& txNew, int nBlockHeight, const CAmount &nFee, CAmount &blockReward, CTxOut& txoutMasternodeRet) const;\n+    void FillBlockPayee(CMutableTransaction& txNew, int nBlockHeight, CAmount &blockReward, CTxOut& txoutMasternodeRet) const;\n     std::string ToString() const;\n \n     int GetBlockCount() const { return mapMasternodeBlocks.size(); }"
      },
      {
        "sha": "b78027c27fe37a4997ccfabb3ef24cb03077235a",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124735e1b0ab52b86aef012312ce0f2448c7da22/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124735e1b0ab52b86aef012312ce0f2448c7da22/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=124735e1b0ab52b86aef012312ce0f2448c7da22",
        "patch": "@@ -181,7 +181,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n \t}\n     // Update coinbase transaction with additional info about masternode and governance payments,\n     // get some info back to pass to getblocktemplate\n-\tFillBlockPayments(coinbaseTx, nHeight, nFees, blockReward, pblock->txoutMasternode, pblock->voutSuperblock);\n+\tFillBlockPayments(coinbaseTx, nHeight, blockReward, pblock->txoutMasternode, pblock->voutSuperblock);\n     // LogPrintf(\"CreateNewBlock -- nBlockHeight %d blockReward %lld txoutMasternode %s coinbaseTx %s\",\n     //             nHeight, blockReward, pblock->txoutMasternode.ToString(), coinbaseTx.ToString());\n "
      },
      {
        "sha": "03f777d4d9836184617b32fdc9c3e1cfa500f80b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/124735e1b0ab52b86aef012312ce0f2448c7da22/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/124735e1b0ab52b86aef012312ce0f2448c7da22/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=124735e1b0ab52b86aef012312ce0f2448c7da22",
        "patch": "@@ -2539,16 +2539,16 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     // to recognize that block is actually invalid.\n     // TODO: resync data (both ways?) and try to reprocess this block later.\n \tCAmount nTotalRewardWithMasternodes;\n-\tconst CAmount &blockReward = GetBlockSubsidy(pindex->nHeight, chainparams.GetConsensus(), nTotalRewardWithMasternodes);\n+\tconst CAmount &blockReward = nFees + GetBlockSubsidy(pindex->nHeight, chainparams.GetConsensus(), nTotalRewardWithMasternodes);\n \n-\tif (!IsBlockPayeeValid(*block.vtx[0], pindex->nHeight, nFees, blockReward, nTotalRewardWithMasternodes)) {\n+\tif (!IsBlockPayeeValid(*block.vtx[0], pindex->nHeight, blockReward, nFees, nTotalRewardWithMasternodes)) {\n \t\tmapRejectedBlocks.insert(std::make_pair(block.GetHash(), GetTime()));\n \t\treturn state.DoS(0, error(\"ConnectBlock(SYS): couldn't find masternode or superblock payments\"),\n \t\t\tREJECT_INVALID, \"bad-cb-payee\");\n \t}\n \n     std::string strError = \"\";\n-    if (!IsBlockValueValid(block, pindex->nHeight, nFees, nTotalRewardWithMasternodes, strError)) {\n+    if (!IsBlockValueValid(block, pindex->nHeight, nTotalRewardWithMasternodes, nFees, strError)) {\n         return state.DoS(0, error(\"ConnectBlock(SYS): %s\", strError), REJECT_INVALID, \"bad-cb-amount\");\n     }\n     // END SYSCOIN"
      }
    ]
  },
  {
    "sha": "08c110a1fc6ec493ac6a1c45b2f31dd4bfdf1baa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGMxMTBhMWZjNmVjNDkzYWM2YTFjNDViMmYzMWRkNGJmZGYxYmFh",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T04:03:21Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T04:03:21Z"
      },
      "message": "compile",
      "tree": {
        "sha": "8aad9551b855d9143fefb503a9524c1d8b1c184e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8aad9551b855d9143fefb503a9524c1d8b1c184e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08c110a1fc6ec493ac6a1c45b2f31dd4bfdf1baa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08c110a1fc6ec493ac6a1c45b2f31dd4bfdf1baa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08c110a1fc6ec493ac6a1c45b2f31dd4bfdf1baa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08c110a1fc6ec493ac6a1c45b2f31dd4bfdf1baa/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "124735e1b0ab52b86aef012312ce0f2448c7da22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/124735e1b0ab52b86aef012312ce0f2448c7da22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/124735e1b0ab52b86aef012312ce0f2448c7da22"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b0b9007e991062855c9758d5058735a634eb8a99",
        "filename": "src/governance-classes.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08c110a1fc6ec493ac6a1c45b2f31dd4bfdf1baa/src/governance-classes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08c110a1fc6ec493ac6a1c45b2f31dd4bfdf1baa/src/governance-classes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.h?ref=08c110a1fc6ec493ac6a1c45b2f31dd4bfdf1baa",
        "patch": "@@ -185,7 +185,7 @@ class CSuperblock : public CGovernanceObject\n     bool GetPayment(int nPaymentIndex, CGovernancePayment& paymentRet);\n     CAmount GetPaymentsTotalAmount();\n \n-    bool IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount& nFee, const CAmount &blockReward);\n+    bool IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount &blockReward);\n     bool IsExpired();\n };\n "
      }
    ]
  },
  {
    "sha": "96631a671193ba4c0d8086498e38f86662147679",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjYzMWE2NzExOTNiYTRjMGQ4MDg2NDk4ZTM4Zjg2NjYyMTQ3Njc5",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T04:13:01Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T04:13:01Z"
      },
      "message": "compile",
      "tree": {
        "sha": "5d140c269c12f7abfd5f15c16f688dbe89e9aa1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d140c269c12f7abfd5f15c16f688dbe89e9aa1f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96631a671193ba4c0d8086498e38f86662147679",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96631a671193ba4c0d8086498e38f86662147679",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96631a671193ba4c0d8086498e38f86662147679",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96631a671193ba4c0d8086498e38f86662147679/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08c110a1fc6ec493ac6a1c45b2f31dd4bfdf1baa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08c110a1fc6ec493ac6a1c45b2f31dd4bfdf1baa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08c110a1fc6ec493ac6a1c45b2f31dd4bfdf1baa"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "10d1c80dfb7e4130aa3750254cab961b62e62a09",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96631a671193ba4c0d8086498e38f86662147679/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96631a671193ba4c0d8086498e38f86662147679/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=96631a671193ba4c0d8086498e38f86662147679",
        "patch": "@@ -2541,7 +2541,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n \tCAmount nTotalRewardWithMasternodes;\n \tconst CAmount &blockReward = nFees + GetBlockSubsidy(pindex->nHeight, chainparams.GetConsensus(), nTotalRewardWithMasternodes);\n \n-\tif (!IsBlockPayeeValid(*block.vtx[0], pindex->nHeight, blockReward, nFees, nTotalRewardWithMasternodes)) {\n+\tif (!IsBlockPayeeValid(*block.vtx[0], pindex->nHeight, blockReward, nTotalRewardWithMasternodes)) {\n \t\tmapRejectedBlocks.insert(std::make_pair(block.GetHash(), GetTime()));\n \t\treturn state.DoS(0, error(\"ConnectBlock(SYS): couldn't find masternode or superblock payments\"),\n \t\t\tREJECT_INVALID, \"bad-cb-payee\");"
      }
    ]
  },
  {
    "sha": "f7547a8f2cb62cf77565a9da7266f2b54288a04d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzU0N2E4ZjJjYjYyY2Y3NzU2NWE5ZGE3MjY2ZjJiNTQyODhhMDRk",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T04:29:10Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T04:29:10Z"
      },
      "message": "update testnet params",
      "tree": {
        "sha": "5d8bbb51705699807dea7f94537b07bee9828a9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d8bbb51705699807dea7f94537b07bee9828a9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7547a8f2cb62cf77565a9da7266f2b54288a04d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7547a8f2cb62cf77565a9da7266f2b54288a04d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7547a8f2cb62cf77565a9da7266f2b54288a04d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7547a8f2cb62cf77565a9da7266f2b54288a04d/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96631a671193ba4c0d8086498e38f86662147679",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96631a671193ba4c0d8086498e38f86662147679",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96631a671193ba4c0d8086498e38f86662147679"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3565ae705279f2c9c42cd01851e99705fce3ad29",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7547a8f2cb62cf77565a9da7266f2b54288a04d/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7547a8f2cb62cf77565a9da7266f2b54288a04d/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=f7547a8f2cb62cf77565a9da7266f2b54288a04d",
        "patch": "@@ -366,13 +366,13 @@ class CTestNetParams : public CChainParams {\n         nDefaultPort = 18369;\n         nPruneAfterHeight = 1000;\n \n-\t\tgenesis = CreateGenesisBlock(1524507764, 1649039, 0x1e0ffff0, 1, 8.88 * COIN);\n+\t\tgenesis = CreateGenesisBlock(1524507866, 442226, 0x1e0ffff0, 1, 8.88 * COIN);\n \t\t/*\n \t\tuint256 hash;\n \t\tCBlockHeader genesisHeader = genesis.GetBlockHeader();\n \t\tGenerateGenesisBlock(genesisHeader, &hash);*/\n \t\tconsensus.hashGenesisBlock = genesis.GetHash();\n-\t\tassert(consensus.hashGenesisBlock == uint256S(\"0x00000701f616edd1c07a7eac60ddd5e14f61b30bbe2b0126d0c0e4a0ceb7a5cb\"));\n+\t\tassert(consensus.hashGenesisBlock == uint256S(\"0x00000478aace753a4709f7503b5b583456a5a8635e989d7f899eb000bbea9fd4\"));\n \t\tassert(genesis.hashMerkleRoot == uint256S(\"0x3fc1815124d408495fb860705d2188d84fcfeb5efc894f26fefc81a5cbdc49e8\"));\n \n         vFixedSeeds.clear();"
      }
    ]
  },
  {
    "sha": "3e3c661011df94d70bab824edc0e5e80a6c4dcfe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTNjNjYxMDExZGY5NGQ3MGJhYjgyNGVkYzBlNWU4MGE2YzRkY2Zl",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T05:19:38Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T05:19:38Z"
      },
      "message": "Remove vchDefaultKey and have better first run detection\n\nRemoves vchDefaultKey which was only used for first run detection.\nImproves wallet first run detection by checking to see if any keys\nwere read from the database.\n\nThis will now also check for a valid defaultkey for backwards\ncompatibility reasons and to check for any corruption.\n\nKeys will stil be generated on the first one, but there won't be\nany shown in the address book as was previously done.",
      "tree": {
        "sha": "74e8abd4e0b0632b21d6cbc04b8304ed7ece0e4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74e8abd4e0b0632b21d6cbc04b8304ed7ece0e4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e3c661011df94d70bab824edc0e5e80a6c4dcfe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e3c661011df94d70bab824edc0e5e80a6c4dcfe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e3c661011df94d70bab824edc0e5e80a6c4dcfe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e3c661011df94d70bab824edc0e5e80a6c4dcfe/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7547a8f2cb62cf77565a9da7266f2b54288a04d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7547a8f2cb62cf77565a9da7266f2b54288a04d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7547a8f2cb62cf77565a9da7266f2b54288a04d"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 18,
      "deletions": 37
    },
    "files": [
      {
        "sha": "8e67b6982453d30269922c06d622a8aa5ffa9882",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e3c661011df94d70bab824edc0e5e80a6c4dcfe/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e3c661011df94d70bab824edc0e5e80a6c4dcfe/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=3e3c661011df94d70bab824edc0e5e80a6c4dcfe",
        "patch": "@@ -119,7 +119,7 @@ bool DecryptAES256(const SecureString& sKey, const std::string& sCiphertext, con\n class CCryptoKeyStore : public CBasicKeyStore\n {\n private:\n-    CryptedKeyMap mapCryptedKeys;\n+    \n     CHDChain cryptedHDChain;\n \n     CKeyingMaterial vMasterKey;\n@@ -146,6 +146,7 @@ class CCryptoKeyStore : public CBasicKeyStore\n     bool SetCryptedHDChain(const CHDChain& chain);\n \n     bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool fForMixingOnly = false);\n+\tCryptedKeyMap mapCryptedKeys;\n \n public:\n     CCryptoKeyStore() : fUseCrypto(false), fDecryptionThoroughlyChecked(false), fOnlyMixingAllowed(false)"
      },
      {
        "sha": "90fd819164f1579bdfb5fd62cdf44cbb11274d0b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 21,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e3c661011df94d70bab824edc0e5e80a6c4dcfe/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e3c661011df94d70bab824edc0e5e80a6c4dcfe/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3e3c661011df94d70bab824edc0e5e80a6c4dcfe",
        "patch": "@@ -3982,10 +3982,9 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n             }\n         }\n     }\n-\n+\tfFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty();\n     if (nLoadWalletRet != DB_LOAD_OK)\n         return nLoadWalletRet;\n-    fFirstRunRet = !vchDefaultKey.IsValid();\n \n     uiInterface.LoadWallet(this);\n \n@@ -4090,17 +4089,6 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n     return CWalletDB(strWalletFile).EraseName(CSyscoinAddress(address).ToString());\n }\n \n-bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)\n-{\n-    if (fFileBacked)\n-    {\n-        if (!CWalletDB(strWalletFile).WriteDefaultKey(vchPubKey))\n-            return false;\n-    }\n-    vchDefaultKey = vchPubKey;\n-    return true;\n-}\n-\n /**\n  * Mark old keypool keys as used,\n  * and generate all new keys \n@@ -4896,14 +4884,11 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n             walletInstance->SetMinVersion(FEATURE_HD);\n         }\n \n-        CPubKey newDefaultKey;\n-        if (walletInstance->GetKeyFromPool(newDefaultKey, false)) {\n-            walletInstance->SetDefaultKey(newDefaultKey);\n-            if (!walletInstance->SetAddressBook(walletInstance->vchDefaultKey.GetID(), \"\", \"receive\")) {\n-                InitError(_(\"Cannot write default address\") += \"\\n\");\n-                return NULL;\n-            }\n-        }\n+\t\t// Top up the keypool\n+\t\tif (!walletInstance->TopUpKeyPool()) {\n+\t\t\tInitError(_(\"Unable to generate initial keys\") += \"\\n\");\n+\t\t\treturn NULL;\n+\t\t}\n \n         walletInstance->SetBestChain(chainActive.GetLocator());\n "
      },
      {
        "sha": "89d26ef1782a40a8386caa20fc670cb646fa870e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e3c661011df94d70bab824edc0e5e80a6c4dcfe/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e3c661011df94d70bab824edc0e5e80a6c4dcfe/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3e3c661011df94d70bab824edc0e5e80a6c4dcfe",
        "patch": "@@ -705,8 +705,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     std::map<CTxDestination, CAddressBookData> mapAddressBook;\n \n-    CPubKey vchDefaultKey;\n-\n     std::set<COutPoint> setLockedCoins;\n \n     int64_t nKeysLeftSinceAutoBackup;\n@@ -961,7 +959,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         return setInternalKeyPool.size() + setExternalKeyPool.size();\n     }\n \n-    bool SetDefaultKey(const CPubKey &vchPubKey);\n \n     //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n     bool SetMinVersion(enum WalletFeature, CWalletDB* pwalletdbIn = NULL, bool fExplicit = false);"
      },
      {
        "sha": "23867a89cdd0622e4742edf837ca532562bffb83",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e3c661011df94d70bab824edc0e5e80a6c4dcfe/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e3c661011df94d70bab824edc0e5e80a6c4dcfe/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=3e3c661011df94d70bab824edc0e5e80a6c4dcfe",
        "patch": "@@ -154,12 +154,6 @@ bool CWalletDB::WriteOrderPosNext(int64_t nOrderPosNext)\n     return Write(std::string(\"orderposnext\"), nOrderPosNext);\n }\n \n-bool CWalletDB::WriteDefaultKey(const CPubKey& vchPubKey)\n-{\n-    nWalletDBUpdateCounter++;\n-    return Write(std::string(\"defaultkey\"), vchPubKey);\n-}\n-\n bool CWalletDB::ReadPool(int64_t nPool, CKeyPool& keypool)\n {\n     return Read(std::make_pair(std::string(\"pool\"), nPool), keypool);\n@@ -381,7 +375,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \n             if (strType == \"key\")\n             {\n-                wss.nKeys++;\n+         d       wss.nKeys++;\n                 ssValue >> pkey;\n             } else {\n                 CWalletKey wkey;\n@@ -489,7 +483,14 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         }\n         else if (strType == \"defaultkey\")\n         {\n-            ssValue >> pwallet->vchDefaultKey;\n+\t\t\t// We don't want or need the default key, but if there is one set,\n+\t\t\t// we want to make sure that it is valid so that we can detect corruption\n+\t\t\tCPubKey vchPubKey;\n+\t\t\tssValue >> vchPubKey;\n+\t\t\tif (!vchPubKey.IsValid()) {\n+\t\t\t\tstrErr = \"Error reading wallet database: Default Key corrupt\";\n+\t\t\t\treturn false;\n+\t\t\t}\n         }\n         else if (strType == \"pool\")\n         {\n@@ -588,7 +589,6 @@ static bool IsKeyType(std::string strType)\n \n DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n {\n-    pwallet->vchDefaultKey = CPubKey();\n     CWalletScanState wss;\n     bool fNoncriticalErrors = false;\n     DBErrors result = DB_LOAD_OK;\n@@ -631,7 +631,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n             {\n                 // losing keys is considered a catastrophic error, anything else\n                 // we assume the user can live with:\n-                if (IsKeyType(strType))\n+                if (IsKeyType(strType) || strType == \"defaultkey\")\n                     result = DB_CORRUPT;\n                 else\n                 {"
      },
      {
        "sha": "f05ddc878e4e63c5c9d052be8083bcc8ab7ef99c",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e3c661011df94d70bab824edc0e5e80a6c4dcfe/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e3c661011df94d70bab824edc0e5e80a6c4dcfe/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=3e3c661011df94d70bab824edc0e5e80a6c4dcfe",
        "patch": "@@ -104,8 +104,6 @@ class CWalletDB : public CDB\n \n     bool WriteOrderPosNext(int64_t nOrderPosNext);\n \n-    bool WriteDefaultKey(const CPubKey& vchPubKey);\n-\n     bool ReadPool(int64_t nPool, CKeyPool& keypool);\n     bool WritePool(int64_t nPool, const CKeyPool& keypool);\n     bool ErasePool(int64_t nPool);"
      }
    ]
  },
  {
    "sha": "b8ea55d77e9a4484510dcd8b222951b37bec7a46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGVhNTVkNzdlOWE0NDg0NTEwZGNkOGIyMjI5NTFiMzdiZWM3YTQ2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T05:44:05Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T05:44:05Z"
      },
      "message": "def hd",
      "tree": {
        "sha": "d495a90a7c0a8d91accf97b1c06cced1c824d57b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d495a90a7c0a8d91accf97b1c06cced1c824d57b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8ea55d77e9a4484510dcd8b222951b37bec7a46",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8ea55d77e9a4484510dcd8b222951b37bec7a46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8ea55d77e9a4484510dcd8b222951b37bec7a46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8ea55d77e9a4484510dcd8b222951b37bec7a46/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e3c661011df94d70bab824edc0e5e80a6c4dcfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e3c661011df94d70bab824edc0e5e80a6c4dcfe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e3c661011df94d70bab824edc0e5e80a6c4dcfe"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1e35214070dd2caf11a0e97f88eb3aae45787eff",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8ea55d77e9a4484510dcd8b222951b37bec7a46/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8ea55d77e9a4484510dcd8b222951b37bec7a46/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b8ea55d77e9a4484510dcd8b222951b37bec7a46",
        "patch": "@@ -76,7 +76,7 @@ static const bool DEFAULT_DISABLE_WALLET = false;\n extern const char * DEFAULT_WALLET_DAT;\n \n //! if set, all keys will be derived by using BIP39/BIP44\n-static const bool DEFAULT_USE_HD_WALLET = false;\n+static const bool DEFAULT_USE_HD_WALLET = true;\n \n bool AutoBackupWallet (CWallet* wallet, const std::string& strWalletFile_, std::string& strBackupWarningRet, std::string& strBackupErrorRet);\n "
      }
    ]
  },
  {
    "sha": "9ad56ea98e7ade6a13d0832662d49fbf20eeda8e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWQ1NmVhOThlN2FkZTZhMTNkMDgzMjY2MmQ0OWZiZjIwZWVkYThl",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T07:16:33Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T07:16:33Z"
      },
      "message": "compile",
      "tree": {
        "sha": "3050e66816632764ef08afa94400d667a1f382ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3050e66816632764ef08afa94400d667a1f382ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ad56ea98e7ade6a13d0832662d49fbf20eeda8e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ad56ea98e7ade6a13d0832662d49fbf20eeda8e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ad56ea98e7ade6a13d0832662d49fbf20eeda8e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ad56ea98e7ade6a13d0832662d49fbf20eeda8e/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8ea55d77e9a4484510dcd8b222951b37bec7a46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8ea55d77e9a4484510dcd8b222951b37bec7a46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8ea55d77e9a4484510dcd8b222951b37bec7a46"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c26be707ff92962912ec99d55cec5154899e5646",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ad56ea98e7ade6a13d0832662d49fbf20eeda8e/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ad56ea98e7ade6a13d0832662d49fbf20eeda8e/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=9ad56ea98e7ade6a13d0832662d49fbf20eeda8e",
        "patch": "@@ -375,7 +375,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \n             if (strType == \"key\")\n             {\n-         d       wss.nKeys++;\n+\t\t\t\twss.nKeys++;\n                 ssValue >> pkey;\n             } else {\n                 CWalletKey wkey;\n@@ -699,7 +699,6 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n \n DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx)\n {\n-    pwallet->vchDefaultKey = CPubKey();\n     bool fNoncriticalErrors = false;\n     DBErrors result = DB_LOAD_OK;\n "
      }
    ]
  },
  {
    "sha": "761de5ca5e75e54d64321a7ee329d748e657645a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjFkZTVjYTVlNzVlNTRkNjQzMjFhN2VlMzI5ZDc0OGU2NTc2NDVh",
    "commit": {
      "author": {
        "name": "Willy Ko",
        "email": "wko@blockchainfoundry.co",
        "date": "2018-04-30T09:36:33Z"
      },
      "committer": {
        "name": "Willy Ko",
        "email": "wko@blockchainfoundry.co",
        "date": "2018-04-30T09:36:33Z"
      },
      "message": "Don't replenish keypool when wallet is locked on new start",
      "tree": {
        "sha": "3b386ca7831e77b0f47d8556da3fcfc50fce327a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b386ca7831e77b0f47d8556da3fcfc50fce327a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/761de5ca5e75e54d64321a7ee329d748e657645a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/761de5ca5e75e54d64321a7ee329d748e657645a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/761de5ca5e75e54d64321a7ee329d748e657645a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/761de5ca5e75e54d64321a7ee329d748e657645a/comments",
    "author": {
      "login": "willyko",
      "id": 11524904,
      "node_id": "MDQ6VXNlcjExNTI0OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11524904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willyko",
      "html_url": "https://github.com/willyko",
      "followers_url": "https://api.github.com/users/willyko/followers",
      "following_url": "https://api.github.com/users/willyko/following{/other_user}",
      "gists_url": "https://api.github.com/users/willyko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willyko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willyko/subscriptions",
      "organizations_url": "https://api.github.com/users/willyko/orgs",
      "repos_url": "https://api.github.com/users/willyko/repos",
      "events_url": "https://api.github.com/users/willyko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willyko/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "willyko",
      "id": 11524904,
      "node_id": "MDQ6VXNlcjExNTI0OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11524904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willyko",
      "html_url": "https://github.com/willyko",
      "followers_url": "https://api.github.com/users/willyko/followers",
      "following_url": "https://api.github.com/users/willyko/following{/other_user}",
      "gists_url": "https://api.github.com/users/willyko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willyko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willyko/subscriptions",
      "organizations_url": "https://api.github.com/users/willyko/orgs",
      "repos_url": "https://api.github.com/users/willyko/repos",
      "events_url": "https://api.github.com/users/willyko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willyko/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8ea55d77e9a4484510dcd8b222951b37bec7a46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8ea55d77e9a4484510dcd8b222951b37bec7a46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8ea55d77e9a4484510dcd8b222951b37bec7a46"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 6,
      "deletions": 7
    },
    "files": [
      {
        "sha": "75fc905a21cad87d98455cbd48f407b34fd31c61",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/761de5ca5e75e54d64321a7ee329d748e657645a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/761de5ca5e75e54d64321a7ee329d748e657645a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=761de5ca5e75e54d64321a7ee329d748e657645a",
        "patch": "@@ -4884,11 +4884,11 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n             walletInstance->SetMinVersion(FEATURE_HD);\n         }\n \n-\t\t// Top up the keypool\n-\t\tif (!walletInstance->TopUpKeyPool()) {\n-\t\t\tInitError(_(\"Unable to generate initial keys\") += \"\\n\");\n-\t\t\treturn NULL;\n-\t\t}\n+\t\t// Top up the keypool only if wallet is not locked\n+        if (!walletInstance->IsLocked() && !walletInstance->TopUpKeyPool()) {\n+            InitError(_(\"Unable to generate initial keys\") += \"\\n\");\n+            return NULL;\n+        }\n \n         walletInstance->SetBestChain(chainActive.GetLocator());\n "
      },
      {
        "sha": "f4be99269d2397fed23b9e94f9f0cabffdaf185f",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/761de5ca5e75e54d64321a7ee329d748e657645a/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/761de5ca5e75e54d64321a7ee329d748e657645a/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=761de5ca5e75e54d64321a7ee329d748e657645a",
        "patch": "@@ -375,7 +375,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \n             if (strType == \"key\")\n             {\n-         d       wss.nKeys++;\n+                wss.nKeys++;\n                 ssValue >> pkey;\n             } else {\n                 CWalletKey wkey;\n@@ -699,7 +699,6 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n \n DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx)\n {\n-    pwallet->vchDefaultKey = CPubKey();\n     bool fNoncriticalErrors = false;\n     DBErrors result = DB_LOAD_OK;\n "
      }
    ]
  },
  {
    "sha": "8798c514016d5607be4725bd98d858e0703a421d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Nzk4YzUxNDAxNmQ1NjA3YmU0NzI1YmQ5OGQ4NThlMDcwM2E0MjFk",
    "commit": {
      "author": {
        "name": "Willy Ko",
        "email": "wko@blockchainfoundry.co",
        "date": "2018-04-30T09:38:33Z"
      },
      "committer": {
        "name": "Willy Ko",
        "email": "wko@blockchainfoundry.co",
        "date": "2018-04-30T09:38:33Z"
      },
      "message": "Merge branch 'dev-3.x' of github.com:syscoin/syscoin into dev-3.x",
      "tree": {
        "sha": "3b386ca7831e77b0f47d8556da3fcfc50fce327a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b386ca7831e77b0f47d8556da3fcfc50fce327a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8798c514016d5607be4725bd98d858e0703a421d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8798c514016d5607be4725bd98d858e0703a421d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8798c514016d5607be4725bd98d858e0703a421d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8798c514016d5607be4725bd98d858e0703a421d/comments",
    "author": {
      "login": "willyko",
      "id": 11524904,
      "node_id": "MDQ6VXNlcjExNTI0OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11524904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willyko",
      "html_url": "https://github.com/willyko",
      "followers_url": "https://api.github.com/users/willyko/followers",
      "following_url": "https://api.github.com/users/willyko/following{/other_user}",
      "gists_url": "https://api.github.com/users/willyko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willyko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willyko/subscriptions",
      "organizations_url": "https://api.github.com/users/willyko/orgs",
      "repos_url": "https://api.github.com/users/willyko/repos",
      "events_url": "https://api.github.com/users/willyko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willyko/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "willyko",
      "id": 11524904,
      "node_id": "MDQ6VXNlcjExNTI0OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/11524904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willyko",
      "html_url": "https://github.com/willyko",
      "followers_url": "https://api.github.com/users/willyko/followers",
      "following_url": "https://api.github.com/users/willyko/following{/other_user}",
      "gists_url": "https://api.github.com/users/willyko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/willyko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/willyko/subscriptions",
      "organizations_url": "https://api.github.com/users/willyko/orgs",
      "repos_url": "https://api.github.com/users/willyko/repos",
      "events_url": "https://api.github.com/users/willyko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/willyko/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "761de5ca5e75e54d64321a7ee329d748e657645a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/761de5ca5e75e54d64321a7ee329d748e657645a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/761de5ca5e75e54d64321a7ee329d748e657645a"
      },
      {
        "sha": "9ad56ea98e7ade6a13d0832662d49fbf20eeda8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ad56ea98e7ade6a13d0832662d49fbf20eeda8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ad56ea98e7ade6a13d0832662d49fbf20eeda8e"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "52a7f3fcdeb21443dc0ef104a5b5f8b334df0128",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MmE3ZjNmY2RlYjIxNDQzZGMwZWYxMDRhNWI1ZjhiMzM0ZGYwMTI4",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T14:24:59Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T14:24:59Z"
      },
      "message": "fix mn payment detection",
      "tree": {
        "sha": "54d4525cc32a71d5060e8d1907e9d047df9d91fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54d4525cc32a71d5060e8d1907e9d047df9d91fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52a7f3fcdeb21443dc0ef104a5b5f8b334df0128",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52a7f3fcdeb21443dc0ef104a5b5f8b334df0128",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/52a7f3fcdeb21443dc0ef104a5b5f8b334df0128",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52a7f3fcdeb21443dc0ef104a5b5f8b334df0128/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8798c514016d5607be4725bd98d858e0703a421d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8798c514016d5607be4725bd98d858e0703a421d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8798c514016d5607be4725bd98d858e0703a421d"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8fcdce17f704df86bd4f76b72284fdf766d20493",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52a7f3fcdeb21443dc0ef104a5b5f8b334df0128/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52a7f3fcdeb21443dc0ef104a5b5f8b334df0128/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=52a7f3fcdeb21443dc0ef104a5b5f8b334df0128",
        "patch": "@@ -594,6 +594,7 @@ bool CMasternodeBlockPayees::IsTransactionValid(const CTransaction& txNew, const\n \t\tBOOST_FOREACH(CTxOut txout, txNew.vout) {\n \t\t\tif (payeeScript == txout.scriptPubKey && nMasternodePayment == txout.nValue) {\n \t\t\t\tLogPrint(\"mnpayments\", \"CMasternodeBlockPayees::IsTransactionValid -- Found required payment\\n\");\n+\t\t\t\tbFoundPayment = true;\n \t\t\t\tbreak;\n \t\t\t}\n \t\t}"
      }
    ]
  },
  {
    "sha": "9d87518380db503b7338316493db53fa97aae315",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDg3NTE4MzgwZGI1MDNiNzMzODMxNjQ5M2RiNTNmYTk3YWFlMzE1",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T14:50:17Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T14:50:17Z"
      },
      "message": "fix firstrundetection",
      "tree": {
        "sha": "22331b64de28519572994b7a6b413ddf61290e37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22331b64de28519572994b7a6b413ddf61290e37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d87518380db503b7338316493db53fa97aae315",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d87518380db503b7338316493db53fa97aae315",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d87518380db503b7338316493db53fa97aae315",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d87518380db503b7338316493db53fa97aae315/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52a7f3fcdeb21443dc0ef104a5b5f8b334df0128",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52a7f3fcdeb21443dc0ef104a5b5f8b334df0128",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52a7f3fcdeb21443dc0ef104a5b5f8b334df0128"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "27d7e93647b4c4c4214fd393bc9fb6774557ab22",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d87518380db503b7338316493db53fa97aae315/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d87518380db503b7338316493db53fa97aae315/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9d87518380db503b7338316493db53fa97aae315",
        "patch": "@@ -3954,9 +3954,9 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n \n DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n {\n+\tfFirstRunRet = false;\n     if (!fFileBacked)\n         return DB_LOAD_OK;\n-    fFirstRunRet = false;\n     DBErrors nLoadWalletRet = CWalletDB(strWalletFile,\"cr+\").LoadWallet(this);\n     if (nLoadWalletRet == DB_NEED_REWRITE)\n     {\n@@ -4884,8 +4884,8 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n             walletInstance->SetMinVersion(FEATURE_HD);\n         }\n \n-\t\t// Top up the keypool only if wallet is not locked\n-        if (!walletInstance->IsLocked() && !walletInstance->TopUpKeyPool()) {\n+\t\t// Top up the keypool\n+        if (!walletInstance->TopUpKeyPool()) {\n             InitError(_(\"Unable to generate initial keys\") += \"\\n\");\n             return NULL;\n         }"
      }
    ]
  },
  {
    "sha": "3d19a448fb472bc5360977ced027df5c08dd13c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDE5YTQ0OGZiNDcyYmM1MzYwOTc3Y2VkMDI3ZGY1YzA4ZGQxM2M5",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T16:03:56Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T16:03:56Z"
      },
      "message": "list coins should show syscoin alias balances",
      "tree": {
        "sha": "417d3db8ec9c2009d0b0de7d21cbb69436bd2506",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/417d3db8ec9c2009d0b0de7d21cbb69436bd2506"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d19a448fb472bc5360977ced027df5c08dd13c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d19a448fb472bc5360977ced027df5c08dd13c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d19a448fb472bc5360977ced027df5c08dd13c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d19a448fb472bc5360977ced027df5c08dd13c9/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d87518380db503b7338316493db53fa97aae315",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d87518380db503b7338316493db53fa97aae315",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d87518380db503b7338316493db53fa97aae315"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "411929fe33e51caf13fb4d57b517c9462b4a34f1",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d19a448fb472bc5360977ced027df5c08dd13c9/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d19a448fb472bc5360977ced027df5c08dd13c9/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=3d19a448fb472bc5360977ced027df5c08dd13c9",
        "patch": "@@ -670,7 +670,7 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n {\n     std::vector<COutput> vCoins;\n \t// SYSCOIN include sys outputs\n-    wallet->AvailableCoins(vCoins, true, NULL, false, ALL_COINS, true);\n+    wallet->AvailableCoins(vCoins, true, NULL, false, ALL_COINS, false, true);\n \n     LOCK2(cs_main, wallet->cs_wallet); // ListLockedCoins, mapWallet\n     std::vector<COutPoint> vLockedCoins;"
      }
    ]
  },
  {
    "sha": "838a0ad7c0cab70b4f5f928c1f156ddc7db66d3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzhhMGFkN2MwY2FiNzBiNGY1ZjkyOGMxZjE1NmRkYzdkYjY2ZDNj",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T17:36:53Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T17:36:53Z"
      },
      "message": "try to fix loadwallet encrypted second time",
      "tree": {
        "sha": "2a8c01f494beaff6a633ae3d832a9ce07c4ac252",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a8c01f494beaff6a633ae3d832a9ce07c4ac252"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/838a0ad7c0cab70b4f5f928c1f156ddc7db66d3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/838a0ad7c0cab70b4f5f928c1f156ddc7db66d3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/838a0ad7c0cab70b4f5f928c1f156ddc7db66d3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/838a0ad7c0cab70b4f5f928c1f156ddc7db66d3c/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d19a448fb472bc5360977ced027df5c08dd13c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d19a448fb472bc5360977ced027df5c08dd13c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d19a448fb472bc5360977ced027df5c08dd13c9"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fc30a12d963d4131c71fdaab1f1b70a68b882f40",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/838a0ad7c0cab70b4f5f928c1f156ddc7db66d3c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/838a0ad7c0cab70b4f5f928c1f156ddc7db66d3c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=838a0ad7c0cab70b4f5f928c1f156ddc7db66d3c",
        "patch": "@@ -3983,6 +3983,8 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n         }\n     }\n \tfFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty();\n+\tif (GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET) && IsHDEnabled())\n+\t\tfFirstRunRet = false;\n     if (nLoadWalletRet != DB_LOAD_OK)\n         return nLoadWalletRet;\n "
      }
    ]
  },
  {
    "sha": "597633613c7a48af6cafebf6b1b395f12f599a1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTc2MzM2MTNjN2E0OGFmNmNhZmViZjZiMWIzOTVmMTJmNTk5YTFh",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T18:21:34Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T18:21:34Z"
      },
      "message": "enc keys in alias indexes",
      "tree": {
        "sha": "150bd07fba5092660f960d323f96b0f42558468a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/150bd07fba5092660f960d323f96b0f42558468a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/597633613c7a48af6cafebf6b1b395f12f599a1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/597633613c7a48af6cafebf6b1b395f12f599a1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/597633613c7a48af6cafebf6b1b395f12f599a1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/597633613c7a48af6cafebf6b1b395f12f599a1a/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "838a0ad7c0cab70b4f5f928c1f156ddc7db66d3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/838a0ad7c0cab70b4f5f928c1f156ddc7db66d3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/838a0ad7c0cab70b4f5f928c1f156ddc7db66d3c"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c411723174de55b6ebc97188c5bd312b86ae4e32",
        "filename": "src/alias.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/597633613c7a48af6cafebf6b1b395f12f599a1a/src/alias.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/597633613c7a48af6cafebf6b1b395f12f599a1a/src/alias.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alias.cpp?ref=597633613c7a48af6cafebf6b1b395f12f599a1a",
        "patch": "@@ -1055,6 +1055,8 @@ void CAliasDB::WriteAliasIndex(const CAliasIndex& alias, const int &op) {\n \tCSyscoinAddress address(EncodeBase58(alias.vchAddress));\n \toName.push_back(Pair(\"address\", address.ToString()));\n \toName.push_back(Pair(\"expires_on\", alias.nExpireTime));\n+\toName.push_back(Pair(\"encryption_privatekey\", HexStr(alias.vchEncryptionPrivateKey)));\n+\toName.push_back(Pair(\"encryption_publickey\", HexStr(alias.vchEncryptionPublicKey)));\n \tGetMainSignals().NotifySyscoinUpdate(oName.write().c_str(), \"alias\");\n \tWriteAliasIndexHistory(alias, op);\n }\n@@ -2099,6 +2101,8 @@ bool BuildAliasIndexerHistoryJson(const CAliasIndex& alias, UniValue& oName)\n \toName.push_back(Pair(\"time\", nTime));\n \toName.push_back(Pair(\"address\", EncodeBase58(alias.vchAddress)));\n \toName.push_back(Pair(\"accepttransferflags\", (int)alias.nAcceptTransferFlags));\n+\toName.push_back(Pair(\"encryption_privatekey\", HexStr(alias.vchEncryptionPrivateKey)));\n+\toName.push_back(Pair(\"encryption_publickey\", HexStr(alias.vchEncryptionPublicKey)));\n \treturn true;\n }\n unsigned int aliasunspent(const vector<unsigned char> &vchAlias, COutPoint& outpoint)"
      }
    ]
  },
  {
    "sha": "03657a47887bf67a4dbab38776ad2a334c12b5bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzY1N2E0Nzg4N2JmNjdhNGRiYWIzODc3NmFkMmEzMzRjMTJiNWJk",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T18:39:44Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T18:39:44Z"
      },
      "message": "update readme",
      "tree": {
        "sha": "e9dd943f56ba61427a940d8385545b6cda5882b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9dd943f56ba61427a940d8385545b6cda5882b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03657a47887bf67a4dbab38776ad2a334c12b5bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03657a47887bf67a4dbab38776ad2a334c12b5bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03657a47887bf67a4dbab38776ad2a334c12b5bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03657a47887bf67a4dbab38776ad2a334c12b5bd/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "597633613c7a48af6cafebf6b1b395f12f599a1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/597633613c7a48af6cafebf6b1b395f12f599a1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/597633613c7a48af6cafebf6b1b395f12f599a1a"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 27,
      "deletions": 6
    },
    "files": [
      {
        "sha": "b719e4c686a76b981f9278e3b24462aec3f5a218",
        "filename": "README.md",
        "status": "modified",
        "additions": 27,
        "deletions": 6,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03657a47887bf67a4dbab38776ad2a334c12b5bd/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03657a47887bf67a4dbab38776ad2a334c12b5bd/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=03657a47887bf67a4dbab38776ad2a334c12b5bd",
        "patch": "@@ -8,14 +8,35 @@ http://www.syscoin.org\n What is Syscoin?\n ----------------\n \n-Syscoin is an experimental new digital currency that enables anonymous, instant\n-payments to anyone, anywhere in the world. Syscoin uses peer-to-peer technology\n-to operate with no central authority: managing transactions and issuing money\n-are carried out collectively by the network. Syscoin Core is the name of the open\n-source software which enables the use of this currency.\n+Syscoin is a merge-minable SHA256 coin which provides an array of useful services\n+which leverage the bitcoin protocol and blockchain technology.\n+\n+ - 1 minute block targets, diff retarget each block using Dark Gravity Wave(24) \n+ - Flexible rewards schedule paying 25% to miners and 75% to masternodes\n+ - 888 million total coins (deflation 5 percent per year, deflation on all payouts)\n+ - Block time: 60 seconds target\n+ - Rewards: 38.5 Syscoins per block deflated 5 percent per year of which 10 percent is allocated to governance proposals (3.85 Syscoins per block). 75 percent of the result goes to masternode and 25 percent to miner.\n+ - SHA256 Proof of Work\n+ - Minable either exclusively or via merge-mining any PoW coin\n+ - Syscoin data service fees burned\n+ - Masternode collateral requirement: 100000 Syscoins\n+ - Masternode seniority: 3 percent every 4 months until 27 percent over 3 years\n+ - Governance proposals payout schedule: every month\n+ - Governance funding per found (168630 Syscoins per month)\n+\n+Services include:\n+\n+- Layer 2 PoW/PoS hybrid consensus with bonded validator system (masternodes)\n+- Decentralized governance (blockchain pays people for work by creating proposals and getting masternodes to vote on them)\n+- Decentralized Identity reservation, ownership & exchange\n+- Digital certificate storage, ownership & exchange\n+- Distributed marketplate & exchange\n+- Digital Services Provider marketplace & platform\n+- Digital Asset Creation and Management\n+- Decentralized Escrow service\n \n For more information, as well as an immediately useable, binary version of\n-the Syscoin Core software, see http://www.syscoin.org.\n+the Syscoin client sofware, see https://www.syscoin.org.\n \n \n License"
      }
    ]
  },
  {
    "sha": "bf22fc1956b4858258617a2ac4658d13472b8405",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjIyZmMxOTU2YjQ4NTgyNTg2MTdhMmFjNDY1OGQxMzQ3MmI4NDA1",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T20:16:44Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T20:16:44Z"
      },
      "message": "fix gen mainnet",
      "tree": {
        "sha": "68b190d5f9e50ed2a759826d521f47c27ebc21a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68b190d5f9e50ed2a759826d521f47c27ebc21a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf22fc1956b4858258617a2ac4658d13472b8405",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf22fc1956b4858258617a2ac4658d13472b8405",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf22fc1956b4858258617a2ac4658d13472b8405",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf22fc1956b4858258617a2ac4658d13472b8405/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03657a47887bf67a4dbab38776ad2a334c12b5bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03657a47887bf67a4dbab38776ad2a334c12b5bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03657a47887bf67a4dbab38776ad2a334c12b5bd"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "533ee0a34719585fe5c3324f50677f46d9a06eeb",
        "filename": "src/test/test_syscoin_services.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf22fc1956b4858258617a2ac4658d13472b8405/src/test/test_syscoin_services.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf22fc1956b4858258617a2ac4658d13472b8405/src/test/test_syscoin_services.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_syscoin_services.cpp?ref=bf22fc1956b4858258617a2ac4658d13472b8405",
        "patch": "@@ -279,6 +279,11 @@ void GenerateMainNetBlocks(int nBlocks, const string& node)\n \tint height, targetHeight, newHeight, timeoutCounter;\n \tUniValue r;\n \tBOOST_CHECK_NO_THROW(r = CallRPC(node, \"getinfo\"));\n+\t// sync mn to finish before we try to generate\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(node, \"mnsync next\"));\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(node, \"mnsync next\"));\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(node, \"mnsync next\"));\n+\tBOOST_CHECK_NO_THROW(r = CallRPC(node, \"mnsync next\"));\n \ttargetHeight = find_value(r.get_obj(), \"blocks\").get_int() + nBlocks;\n \tnewHeight = 0;\n \tconst string &sBlocks = strprintf(\"%d\",nBlocks);"
      }
    ]
  },
  {
    "sha": "f6e71a4b8686566ba170b2cbbc66c8a70079e5c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmU3MWE0Yjg2ODY1NjZiYTE3MGIyY2JiYzY2YzhhNzAwNzllNWM5",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T20:22:04Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T20:22:04Z"
      },
      "message": "new test",
      "tree": {
        "sha": "38667dd86667bc364a76d296bea38bb914f3410c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38667dd86667bc364a76d296bea38bb914f3410c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6e71a4b8686566ba170b2cbbc66c8a70079e5c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6e71a4b8686566ba170b2cbbc66c8a70079e5c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6e71a4b8686566ba170b2cbbc66c8a70079e5c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6e71a4b8686566ba170b2cbbc66c8a70079e5c9/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf22fc1956b4858258617a2ac4658d13472b8405",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf22fc1956b4858258617a2ac4658d13472b8405",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf22fc1956b4858258617a2ac4658d13472b8405"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ab20cc53243e8bff9a3dc08b03ffa741e6ea6aff",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6e71a4b8686566ba170b2cbbc66c8a70079e5c9/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6e71a4b8686566ba170b2cbbc66c8a70079e5c9/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=f6e71a4b8686566ba170b2cbbc66c8a70079e5c9",
        "patch": "@@ -325,6 +325,8 @@ BOOST_AUTO_TEST_CASE(generate_bad_assetmaxsupply)\n \tBOOST_CHECK_THROW(CallRPC(\"node1\", \"assetnew abc jagassetmaxsupply \" + gooddata + \" assets 8 false 1 0 0 false ''\"), runtime_error);\n \t// 1 max supply good\n \tBOOST_CHECK_NO_THROW(CallRPC(\"node1\", \"assetnew abc jagassetmaxsupply \" + gooddata + \" assets 8 false 1 1 0 false ''\"));\n+\t// balance > max supply\n+\tBOOST_CHECK_NO_THROW(CallRPC(\"node1\", \"assetnew abc jagassetmaxsupply \" + gooddata + \" assets 3 false 2000 1000 0 false ''\"));\n }\n BOOST_AUTO_TEST_CASE(generate_assetuppercase)\n {"
      }
    ]
  },
  {
    "sha": "c2f74e22045b385f8b330013697d20d49cc2a8ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMmY3NGUyMjA0NWIzODVmOGIzMzAwMTM2OTdkMjBkNDljYzJhOGFj",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T20:27:12Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T20:27:12Z"
      },
      "message": "update unit test check in miner",
      "tree": {
        "sha": "99fb20f81b630b2541a0c2fed8be63fb8da183b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99fb20f81b630b2541a0c2fed8be63fb8da183b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2f74e22045b385f8b330013697d20d49cc2a8ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2f74e22045b385f8b330013697d20d49cc2a8ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2f74e22045b385f8b330013697d20d49cc2a8ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2f74e22045b385f8b330013697d20d49cc2a8ac/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6e71a4b8686566ba170b2cbbc66c8a70079e5c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6e71a4b8686566ba170b2cbbc66c8a70079e5c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6e71a4b8686566ba170b2cbbc66c8a70079e5c9"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 1,
      "deletions": 6
    },
    "files": [
      {
        "sha": "a7fb00597025a51a1d98b255c955d884705f06c2",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2f74e22045b385f8b330013697d20d49cc2a8ac/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2f74e22045b385f8b330013697d20d49cc2a8ac/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=c2f74e22045b385f8b330013697d20d49cc2a8ac",
        "patch": "@@ -171,7 +171,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // Compute regular coinbase transaction.\n \tcoinbaseTx.vout[0].nValue = blockReward + nFees;\n \tcoinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;\n-\tif (!chainparams.MineBlocksOnDemand() && nHeight > 1 && !IsInitialBlockDownload()) {\n+\tif (!chainparams.MineBlocksOnDemand() && nHeight > 1 && !IsInitialBlockDownload() && !fUnitTest) {\n \t\tif (masternodeSync.IsFailed()) {\n \t\t\tthrow std::runtime_error(\"Masternode information has failed to sync, please restart your node!\");\n \t\t}"
      },
      {
        "sha": "abfd8c8702449241602a704e5f02d60ee5fc00b1",
        "filename": "src/test/test_syscoin_services.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2f74e22045b385f8b330013697d20d49cc2a8ac/src/test/test_syscoin_services.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2f74e22045b385f8b330013697d20d49cc2a8ac/src/test/test_syscoin_services.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_syscoin_services.cpp?ref=c2f74e22045b385f8b330013697d20d49cc2a8ac",
        "patch": "@@ -279,11 +279,6 @@ void GenerateMainNetBlocks(int nBlocks, const string& node)\n \tint height, targetHeight, newHeight, timeoutCounter;\n \tUniValue r;\n \tBOOST_CHECK_NO_THROW(r = CallRPC(node, \"getinfo\"));\n-\t// sync mn to finish before we try to generate\n-\tBOOST_CHECK_NO_THROW(r = CallRPC(node, \"mnsync next\"));\n-\tBOOST_CHECK_NO_THROW(r = CallRPC(node, \"mnsync next\"));\n-\tBOOST_CHECK_NO_THROW(r = CallRPC(node, \"mnsync next\"));\n-\tBOOST_CHECK_NO_THROW(r = CallRPC(node, \"mnsync next\"));\n \ttargetHeight = find_value(r.get_obj(), \"blocks\").get_int() + nBlocks;\n \tnewHeight = 0;\n \tconst string &sBlocks = strprintf(\"%d\",nBlocks);"
      }
    ]
  },
  {
    "sha": "aeb5e3a5be7ce5409fe4336d2d0a89270472bcd3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWI1ZTNhNWJlN2NlNTQwOWZlNDMzNmQyZDBhODkyNzA0NzJiY2Qz",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T20:33:39Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T20:33:39Z"
      },
      "message": "fix max supply test",
      "tree": {
        "sha": "0e7cd371fa0efdb2b21e1c507c8fec0375f64e95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e7cd371fa0efdb2b21e1c507c8fec0375f64e95"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aeb5e3a5be7ce5409fe4336d2d0a89270472bcd3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeb5e3a5be7ce5409fe4336d2d0a89270472bcd3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aeb5e3a5be7ce5409fe4336d2d0a89270472bcd3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeb5e3a5be7ce5409fe4336d2d0a89270472bcd3/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2f74e22045b385f8b330013697d20d49cc2a8ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2f74e22045b385f8b330013697d20d49cc2a8ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2f74e22045b385f8b330013697d20d49cc2a8ac"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 37,
      "deletions": 32
    },
    "files": [
      {
        "sha": "439cde47e5ee63714c141df4fe3dadc829ae6e38",
        "filename": "src/asset.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 31,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aeb5e3a5be7ce5409fe4336d2d0a89270472bcd3/src/asset.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aeb5e3a5be7ce5409fe4336d2d0a89270472bcd3/src/asset.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/asset.cpp?ref=aeb5e3a5be7ce5409fe4336d2d0a89270472bcd3",
        "patch": "@@ -290,70 +290,75 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t\t}\n \t\t\tif ((theAsset.fInterestRate != 0 || theAsset.bCanAdjustInterestRate) && theAsset.bUseInputRanges)\n \t\t\t{\n-\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2010 - \" + _(\"Interest cannot be set on this type of asset\");\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2011 - \" + _(\"Interest cannot be set on this type of asset\");\n \t\t\t\treturn error(errorMessage.c_str());\n \t\t\t}\n \t\t\tif (!AssetRange(theAsset.nBalance, theAsset.nPrecision, theAsset.bUseInputRanges))\n \t\t\t{\n-\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2011 - \" + _(\"Initial balance out of money range\");\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2012 - \" + _(\"Initial balance out of money range\");\n \t\t\t\treturn true;\n \t\t\t}\n \t\t\tif (theAsset.nPrecision > 8)\n \t\t\t{\n-\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2012 - \" + _(\"Precision must be between 0 and 8\");\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2013 - \" + _(\"Precision must be between 0 and 8\");\n \t\t\t\treturn true;\n \t\t\t}\n \t\t\tif (theAsset.nMaxSupply != -1 && !AssetRange(theAsset.nMaxSupply, theAsset.nPrecision, theAsset.bUseInputRanges))\n \t\t\t{\n-\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2026 - \" + _(\"Max supply out of money range\");\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2014 - \" + _(\"Max supply out of money range\");\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\tif (theAsset.nBalance > theAsset.nMaxSupply)\n+\t\t\t{\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2015 - \" + _(\"Total supply cannot exceed maximum supply\");\n \t\t\t\treturn true;\n \t\t\t}\n \t\t\tbreak;\n \n \t\tcase OP_ASSET_UPDATE:\n \t\t\tif(theAsset.sCategory.size() > 0 && !boost::algorithm::istarts_with(stringFromVch(theAsset.sCategory), \"assets\"))\n \t\t\t{\n-\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2013 - \" + _(\"Must use a asset category\");\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2016 - \" + _(\"Must use a asset category\");\n \t\t\t\treturn error(errorMessage.c_str());\n \t\t\t}\n \t\t\tif (theAsset.nBalance < 0)\n \t\t\t{\n-\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2014 - \" + _(\"Balance must be greator than or equal to 0\");\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2017 - \" + _(\"Balance must be greator than or equal to 0\");\n \t\t\t\treturn error(errorMessage.c_str());\n \t\t\t}\n \t\t\tif (theAsset.fInterestRate < 0 || theAsset.fInterestRate > 1)\n \t\t\t{\n-\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2015 - \" + _(\"Interest must be between 0 and 1\");\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2018 - \" + _(\"Interest must be between 0 and 1\");\n \t\t\t\treturn error(errorMessage.c_str());\n \t\t\t}\n \t\t\tbreak;\n \n \t\tcase OP_ASSET_TRANSFER:\n \t\t\tif (!theAssetAllocation.listSendingAllocationInputs.empty() || !theAssetAllocation.listSendingAllocationAmounts.empty() || !theAsset.listAllocationInputs.empty())\n \t\t\t{\n-\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2016 - \" + _(\"Cannot transfer input allocations\");\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2019 - \" + _(\"Cannot transfer input allocations\");\n \t\t\t\treturn error(errorMessage.c_str());\n \t\t\t}\n \t\t\tbreak;\n \t\tcase OP_ASSET_SEND:\n \t\t\tif (theAssetAllocation.listSendingAllocationInputs.empty() && theAssetAllocation.listSendingAllocationAmounts.empty())\n \t\t\t{\n-\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2017 - \" + _(\"Asset send must send an input or transfer balance\");\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2020 - \" + _(\"Asset send must send an input or transfer balance\");\n \t\t\t\treturn error(errorMessage.c_str());\n \t\t\t}\n \t\t\tif (theAssetAllocation.listSendingAllocationInputs.size() > 250 || theAssetAllocation.listSendingAllocationAmounts.size() > 250)\n \t\t\t{\n-\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2018 - \" + _(\"Too many receivers in one allocation send, maximum of 250 is allowed at once\");\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2021 - \" + _(\"Too many receivers in one allocation send, maximum of 250 is allowed at once\");\n \t\t\t\treturn error(errorMessage.c_str());\n \t\t\t}\n \t\t\tif (theAssetAllocation.vchMemo.size() > MAX_MEMO_LENGTH)\n \t\t\t{\n-\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2019 - \" + _(\"memo too long, must be 128 character or less\");\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2022 - \" + _(\"memo too long, must be 128 character or less\");\n \t\t\t\treturn error(errorMessage.c_str());\n \t\t\t}\n \t\t\tbreak;\n \t\tdefault:\n-\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2020 - \" + _(\"Asset transaction has unknown op\");\n+\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2023 - \" + _(\"Asset transaction has unknown op\");\n \t\t\treturn error(errorMessage.c_str());\n \t\t}\n \t}\n@@ -371,7 +376,7 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\tif (!GetAsset(op == OP_ASSET_SEND ? theAssetAllocation.vchAsset : theAsset.vchAsset, dbAsset))\n \t\t{\n \t\t\tif (op != OP_ASSET_ACTIVATE) {\n-\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2021 - \" + _(\"Failed to read from asset DB\");\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2024 - \" + _(\"Failed to read from asset DB\");\n \t\t\t\treturn true;\n \t\t\t}\n \t\t}\n@@ -380,7 +385,7 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t{\n \t\t\tif (dbAsset.vchAlias != vvchAlias)\n \t\t\t{\n-\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2022 - \" + _(\"Cannot edit this asset. Asset owner must sign off on this change\");\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2025 - \" + _(\"Cannot edit this asset. Asset owner must sign off on this change\");\n \t\t\t\treturn true;\n \t\t\t}\n \t\t}\n@@ -390,22 +395,22 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t\tif (!theAsset.listAllocationInputs.empty()) {\n \t\t\t\tif(!dbAsset.bUseInputRanges)\n \t\t\t\t{\n-\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2023 - \" + _(\"This asset does not use input ranges\");\n+\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2026 - \" + _(\"This asset does not use input ranges\");\n \t\t\t\t\treturn true;\n \t\t\t\t}\n \t\t\t\t// ensure the new inputs being added are greator than the last input\n \t\t\t\tfor (auto&input : theAsset.listAllocationInputs) {\n \t\t\t\t\tif(input.start < dbAsset.nTotalSupply)\n \t\t\t\t\t{\n-\t\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2024 - \" + _(\"Cannot edit this asset. New asset inputs must be added to the end of the supply: \") + boost::lexical_cast<std::string>(input.start) + \" vs \" + boost::lexical_cast<std::string>(dbAsset.nTotalSupply);\n+\t\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2027 - \" + _(\"Cannot edit this asset. New asset inputs must be added to the end of the supply: \") + boost::lexical_cast<std::string>(input.start) + \" vs \" + boost::lexical_cast<std::string>(dbAsset.nTotalSupply);\n \t\t\t\t\t\treturn true;\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tvector<CRange> outputMerge;\n \t\t\t\tincreaseBalanceByAmount = validateRangesAndGetCount(theAsset.listAllocationInputs);\n \t\t\t\tif (increaseBalanceByAmount == 0)\n \t\t\t\t{\n-\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2025 - \" + _(\"Invalid input ranges\");\n+\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2028 - \" + _(\"Invalid input ranges\");\n \t\t\t\t\treturn true;\n \t\t\t\t}\n \t\t\t\tdbAsset.listAllocationInputs.insert(std::end(dbAsset.listAllocationInputs), std::begin(theAsset.listAllocationInputs), std::end(theAsset.listAllocationInputs));\n@@ -417,12 +422,12 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t\ttheAsset.nTotalSupply += increaseBalanceByAmount;\n \t\t\tif (!AssetRange(theAsset.nTotalSupply, dbAsset.nPrecision, dbAsset.bUseInputRanges))\n \t\t\t{\n-\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2026 - \" + _(\"Total supply out of money range\");\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2029 - \" + _(\"Total supply out of money range\");\n \t\t\t\treturn true;\n \t\t\t}\n \t\t\tif (theAsset.nTotalSupply > dbAsset.nMaxSupply)\n \t\t\t{\n-\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2027 - \" + _(\"Total supply cannot exceed maximum supply\");\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2030 - \" + _(\"Total supply cannot exceed maximum supply\");\n \t\t\t\treturn true;\n \t\t\t}\n \n@@ -442,7 +447,7 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t\tGetAssetAllocation(allocationTuple, dbAssetAllocation);\n \t\t\tif (!theAssetAllocation.listSendingAllocationAmounts.empty()) {\n \t\t\t\tif (dbAsset.bUseInputRanges) {\n-\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2028 - \" + _(\"Invalid asset send, request to send amounts but asset uses input ranges\");\n+\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2031 - \" + _(\"Invalid asset send, request to send amounts but asset uses input ranges\");\n \t\t\t\t\treturn true;\n \t\t\t\t}\n \t\t\t\t// check balance is sufficient on sender\n@@ -451,12 +456,12 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t\t\t\tnTotal += amountTuple.second;\n \t\t\t\t\tif (amountTuple.second <= 0)\n \t\t\t\t\t{\n-\t\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2029 - \" + _(\"Receiving amount must be positive\");\n+\t\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2032 - \" + _(\"Receiving amount must be positive\");\n \t\t\t\t\t\treturn true;\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tif (theAsset.nBalance < nTotal) {\n-\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2030 - \" + _(\"Sender balance is insufficient\");\n+\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2033 - \" + _(\"Sender balance is insufficient\");\n \t\t\t\t\treturn true;\n \t\t\t\t}\n \t\t\t\tfor (auto& amountTuple : theAssetAllocation.listSendingAllocationAmounts) {\n@@ -485,7 +490,7 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t\t\t\t\ttheAsset.nBalance -= amountTuple.second;\n \t\t\t\t\t\tif (!passetallocationdb->WriteAssetAllocation(receiverAllocation, dbAsset, INT64_MAX, fJustCheck))\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2031 - \" + _(\"Failed to write to asset allocation DB\");\n+\t\t\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2034 - \" + _(\"Failed to write to asset allocation DB\");\n \t\t\t\t\t\t\tcontinue;\n \t\t\t\t\t\t}\n \t\t\t\t\t\tif (strResponse != \"\") {\n@@ -496,7 +501,7 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t\t}\n \t\t\telse if (!theAssetAllocation.listSendingAllocationInputs.empty()) {\n \t\t\t\tif (!dbAsset.bUseInputRanges) {\n-\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2032 - \" + _(\"Invalid asset send, request to send input ranges but asset uses amounts\");\n+\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2035 - \" + _(\"Invalid asset send, request to send input ranges but asset uses amounts\");\n \t\t\t\t\treturn true;\n \t\t\t\t}\n \t\t\t\t// check balance is sufficient on sender\n@@ -507,15 +512,15 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t\t\t\tconst unsigned int rangeTotal = validateRangesAndGetCount(inputTuple.second);\n \t\t\t\t\tif (rangeTotal == 0)\n \t\t\t\t\t{\n-\t\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2033 - \" + _(\"Invalid input range\");\n+\t\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2036 - \" + _(\"Invalid input range\");\n \t\t\t\t\t\treturn true;\n \t\t\t\t\t}\n \t\t\t\t\tconst CAmount rangeTotalAmount = rangeTotal;\n \t\t\t\t\trangeTotals.push_back(rangeTotalAmount);\n \t\t\t\t\tnTotal += rangeTotalAmount;\n \t\t\t\t}\n \t\t\t\tif (theAsset.nBalance < nTotal) {\n-\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2034 - \" + _(\"Sender balance is insufficient\");\n+\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2037 - \" + _(\"Sender balance is insufficient\");\n \t\t\t\t\treturn true;\n \t\t\t\t}\n \t\t\t\tfor (unsigned int i = 0; i < theAssetAllocation.listSendingAllocationInputs.size(); i++) {\n@@ -526,7 +531,7 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t\t\t\t// ensure entire allocation range being subtracted exists on sender (full inclusion check)\n \t\t\t\t\tif (!doesRangeContain(dbAsset.listAllocationInputs, input.second))\n \t\t\t\t\t{\n-\t\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2035 - \" + _(\"Input not found\");\n+\t\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2038 - \" + _(\"Input not found\");\n \t\t\t\t\t\treturn true;\n \t\t\t\t\t}\n \t\t\t\t\tif (!bSanityCheck) {\n@@ -556,7 +561,7 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t\t\t\t\ttheAsset.nBalance -= rangeTotals[i];\n \t\t\t\t\t\tif (!passetallocationdb->WriteAssetAllocation(receiverAllocation, dbAsset, INT64_MAX, fJustCheck))\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2036 - \" + _(\"Failed to write to asset allocation DB\");\n+\t\t\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2039 - \" + _(\"Failed to write to asset allocation DB\");\n \t\t\t\t\t\t\treturn error(errorMessage.c_str());\n \t\t\t\t\t\t}\n \n@@ -583,7 +588,7 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \n \t\t\tif (op == OP_ASSET_UPDATE) {\n \t\t\t\tif (!theAsset.bCanAdjustInterestRate && theAsset.fInterestRate != dbAsset.fInterestRate) {\n-\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2037 - \" + _(\"Cannot adjust interest rate for this asset\");\n+\t\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2040 - \" + _(\"Cannot adjust interest rate for this asset\");\n \t\t\t\t\treturn true;\n \t\t\t\t}\n \t\t\t}\n@@ -602,7 +607,7 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\t\ttheAsset.vchSymbol = vchFromString(assetUpper);\n \t\t\tif (GetAsset(theAsset.vchAsset, theAsset))\n \t\t\t{\n-\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2038 - \" + _(\"Asset already exists\");\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2041 - \" + _(\"Asset already exists\");\n \t\t\t\treturn true;\n \t\t\t}\n \t\t\t// starting supply is the supplied balance upon init\n@@ -623,7 +628,7 @@ bool CheckAssetInputs(const CTransaction &tx, int op, const vector<vector<unsign\n \t\tif (!bSanityCheck) {\n \t\t\tif (!passetdb->WriteAsset(theAsset, op))\n \t\t\t{\n-\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2039 - \" + _(\"Failed to write to asset DB\");\n+\t\t\t\terrorMessage = \"SYSCOIN_ASSET_CONSENSUS_ERROR: ERRCODE: 2042 - \" + _(\"Failed to write to asset DB\");\n \t\t\t\treturn error(errorMessage.c_str());\n \t\t\t}\n \t\t\t// debug"
      },
      {
        "sha": "42a49133a79fe03104d8f09a1c017f1b914855c3",
        "filename": "src/test/syscoin_asset_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aeb5e3a5be7ce5409fe4336d2d0a89270472bcd3/src/test/syscoin_asset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aeb5e3a5be7ce5409fe4336d2d0a89270472bcd3/src/test/syscoin_asset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_asset_tests.cpp?ref=aeb5e3a5be7ce5409fe4336d2d0a89270472bcd3",
        "patch": "@@ -326,7 +326,7 @@ BOOST_AUTO_TEST_CASE(generate_bad_assetmaxsupply)\n \t// 1 max supply good\n \tBOOST_CHECK_NO_THROW(CallRPC(\"node1\", \"assetnew abc jagassetmaxsupply \" + gooddata + \" assets 8 false 1 1 0 false ''\"));\n \t// balance > max supply\n-\tBOOST_CHECK_NO_THROW(CallRPC(\"node1\", \"assetnew abc jagassetmaxsupply \" + gooddata + \" assets 3 false 2000 1000 0 false ''\"));\n+\tBOOST_CHECK_THROW(CallRPC(\"node1\", \"assetnew abc jagassetmaxsupply \" + gooddata + \" assets 3 false 2000 1000 0 false ''\"), runtime_error);\n }\n BOOST_AUTO_TEST_CASE(generate_assetuppercase)\n {"
      }
    ]
  },
  {
    "sha": "3f74cf68fb1c9d3581fd51426e8e06446b2ac44b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjc0Y2Y2OGZiMWM5ZDM1ODFmZDUxNDI2ZThlMDY0NDZiMmFjNDRi",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T21:16:17Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T21:16:17Z"
      },
      "message": "witness duplicate check",
      "tree": {
        "sha": "0ec946fe577fcb63a5071638ac5990bc6871b22d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ec946fe577fcb63a5071638ac5990bc6871b22d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f74cf68fb1c9d3581fd51426e8e06446b2ac44b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f74cf68fb1c9d3581fd51426e8e06446b2ac44b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f74cf68fb1c9d3581fd51426e8e06446b2ac44b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f74cf68fb1c9d3581fd51426e8e06446b2ac44b/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aeb5e3a5be7ce5409fe4336d2d0a89270472bcd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeb5e3a5be7ce5409fe4336d2d0a89270472bcd3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aeb5e3a5be7ce5409fe4336d2d0a89270472bcd3"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a4485aad9570bccfeb30f1cbe95257db54157da3",
        "filename": "src/alias.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f74cf68fb1c9d3581fd51426e8e06446b2ac44b/src/alias.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f74cf68fb1c9d3581fd51426e8e06446b2ac44b/src/alias.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alias.cpp?ref=3f74cf68fb1c9d3581fd51426e8e06446b2ac44b",
        "patch": "@@ -1189,6 +1189,7 @@ UniValue syscointxfund_helper(const vector<unsigned char> &vchAlias, const vecto\n \t\tif (GetUTXOCoin(aliasOutPointWitness, pcoinW))\n \t\t\ttxNew.vin.push_back(CTxIn(aliasOutPointWitness, pcoinW.out.scriptPubKey));\n \t}\n+\t\n \n \tCOutPoint aliasOutPoint;\n \tunsigned int unspentcount = aliasunspent(vchAlias, aliasOutPoint);\n@@ -1202,6 +1203,8 @@ UniValue syscointxfund_helper(const vector<unsigned char> &vchAlias, const vecto\n \tif (GetUTXOCoin(aliasOutPoint, pcoin))\n \t\ttxNew.vin.push_back(CTxIn(aliasOutPoint, pcoin.out.scriptPubKey));\n \n+\tif(vchWitness == vchAlias || aliasOutPointWitness == aliasOutPoint)\n+\t\tthrow runtime_error(\"SYSCOIN_RPC_ERROR ERRCODE: 9000 - \" + _(\"Witness to this transaction must be different than the funding alias\"));\n \t// set an address for syscointxfund so it uses that address to fund (alias passed in)\n \n \tCAliasIndex alias;"
      }
    ]
  },
  {
    "sha": "0086d0cc8deace483abced77fce25a58fea9d143",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDg2ZDBjYzhkZWFjZTQ4M2FiY2VkNzdmY2UyNWE1OGZlYTlkMTQz",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T21:25:22Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T21:25:22Z"
      },
      "message": "update cert",
      "tree": {
        "sha": "d83f4122381c1b9b0fbe8364894a04d68c62a2f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d83f4122381c1b9b0fbe8364894a04d68c62a2f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0086d0cc8deace483abced77fce25a58fea9d143",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0086d0cc8deace483abced77fce25a58fea9d143",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0086d0cc8deace483abced77fce25a58fea9d143",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0086d0cc8deace483abced77fce25a58fea9d143/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f74cf68fb1c9d3581fd51426e8e06446b2ac44b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f74cf68fb1c9d3581fd51426e8e06446b2ac44b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f74cf68fb1c9d3581fd51426e8e06446b2ac44b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "07a74b492ab33dca6278cc127836759b0a2e1fd1",
        "filename": "src/cert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0086d0cc8deace483abced77fce25a58fea9d143/src/cert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0086d0cc8deace483abced77fce25a58fea9d143/src/cert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cert.cpp?ref=0086d0cc8deace483abced77fce25a58fea9d143",
        "patch": "@@ -604,7 +604,7 @@ UniValue certupdate(const JSONRPCRequest& request) {\n     if (!GetCert( vchCert, theCert))\n         throw runtime_error(\"SYSCOIN_CERTIFICATE_RPC_ERROR: ERRCODE: 3501 - \" + _(\"Could not find a certificate with this key\"));\n \n-\tif (!GetBoolArg(\"-unittest\", false)) {\n+\tif (!fUnitTest) {\n \t\tArrivalTimesMap arrivalTimes;\n \t\tpcertdb->ReadISArrivalTimes(vchCert, arrivalTimes);\n \t\tconst int64_t & nNow = duration_cast<seconds>(system_clock::now().time_since_epoch()).count();"
      }
    ]
  },
  {
    "sha": "f2751db87bc551179491c890b45aaba85fc69038",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjc1MWRiODdiYzU1MTE3OTQ5MWM4OTBiNDVhYWJhODVmYzY5MDM4",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T21:28:19Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T21:28:19Z"
      },
      "message": "compile",
      "tree": {
        "sha": "c9b20ad16c6561cc840743b9168729ed7a1914dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9b20ad16c6561cc840743b9168729ed7a1914dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2751db87bc551179491c890b45aaba85fc69038",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2751db87bc551179491c890b45aaba85fc69038",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2751db87bc551179491c890b45aaba85fc69038",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2751db87bc551179491c890b45aaba85fc69038/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0086d0cc8deace483abced77fce25a58fea9d143",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0086d0cc8deace483abced77fce25a58fea9d143",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0086d0cc8deace483abced77fce25a58fea9d143"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1891505d3a1b08627f0a454ea073811c78248965",
        "filename": "src/alias.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2751db87bc551179491c890b45aaba85fc69038/src/alias.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2751db87bc551179491c890b45aaba85fc69038/src/alias.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alias.cpp?ref=f2751db87bc551179491c890b45aaba85fc69038",
        "patch": "@@ -1177,9 +1177,9 @@ UniValue SyscoinListReceived(bool includeempty=true)\n UniValue syscointxfund_helper(const vector<unsigned char> &vchAlias, const vector<unsigned char> &vchWitness, const CRecipient &aliasRecipient, vector<CRecipient> &vecSend) {\n \tCMutableTransaction txNew;\n \ttxNew.nVersion = SYSCOIN_TX_VERSION;\n+\tCOutPoint aliasOutPointWitness;\n \tif (!vchWitness.empty())\n \t{\n-\t\tCOutPoint aliasOutPointWitness;\n \t\taliasunspent(vchWitness, aliasOutPointWitness);\n \t\tif (aliasOutPointWitness.IsNull())\n \t\t{\n@@ -1203,7 +1203,7 @@ UniValue syscointxfund_helper(const vector<unsigned char> &vchAlias, const vecto\n \tif (GetUTXOCoin(aliasOutPoint, pcoin))\n \t\ttxNew.vin.push_back(CTxIn(aliasOutPoint, pcoin.out.scriptPubKey));\n \n-\tif(vchWitness == vchAlias || aliasOutPointWitness == aliasOutPoint)\n+\tif(vchWitness == vchAlias || (!aliasOutPointWitness.IsNull() && aliasOutPointWitness == aliasOutPoint))\n \t\tthrow runtime_error(\"SYSCOIN_RPC_ERROR ERRCODE: 9000 - \" + _(\"Witness to this transaction must be different than the funding alias\"));\n \t// set an address for syscointxfund so it uses that address to fund (alias passed in)\n "
      }
    ]
  },
  {
    "sha": "f95143f043baf132b885d0cafade8f4b5c853c9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTUxNDNmMDQzYmFmMTMyYjg4NWQwY2FmYWRlOGY0YjVjODUzYzll",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T21:31:25Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T21:31:25Z"
      },
      "message": "typo",
      "tree": {
        "sha": "0e3efbfd528aadeb7df01459d5a49daf4837ab36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e3efbfd528aadeb7df01459d5a49daf4837ab36"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f95143f043baf132b885d0cafade8f4b5c853c9e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f95143f043baf132b885d0cafade8f4b5c853c9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f95143f043baf132b885d0cafade8f4b5c853c9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f95143f043baf132b885d0cafade8f4b5c853c9e/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2751db87bc551179491c890b45aaba85fc69038",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2751db87bc551179491c890b45aaba85fc69038",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2751db87bc551179491c890b45aaba85fc69038"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "456655a03068b77806c7ada06ea487f3e45badc0",
        "filename": "README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f95143f043baf132b885d0cafade8f4b5c853c9e/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f95143f043baf132b885d0cafade8f4b5c853c9e/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=f95143f043baf132b885d0cafade8f4b5c853c9e",
        "patch": "@@ -22,7 +22,7 @@ which leverage the bitcoin protocol and blockchain technology.\n  - Masternode collateral requirement: 100000 Syscoins\n  - Masternode seniority: 3 percent every 4 months until 27 percent over 3 years\n  - Governance proposals payout schedule: every month\n- - Governance funding per found (168630 Syscoins per month)\n+ - Governance funding per round (168630 Syscoins per month)\n \n Services include:\n "
      }
    ]
  },
  {
    "sha": "d060bbcf6b73777b0f8289f3467ea7c4dbdc2561",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDYwYmJjZjZiNzM3NzdiMGY4Mjg5ZjM0NjdlYTdjNGRiZGMyNTYx",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T21:42:20Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T21:42:20Z"
      },
      "message": "update test",
      "tree": {
        "sha": "61a7e025da27d178a0b0edcef47895904d884270",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61a7e025da27d178a0b0edcef47895904d884270"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d060bbcf6b73777b0f8289f3467ea7c4dbdc2561",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d060bbcf6b73777b0f8289f3467ea7c4dbdc2561",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d060bbcf6b73777b0f8289f3467ea7c4dbdc2561",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d060bbcf6b73777b0f8289f3467ea7c4dbdc2561/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f95143f043baf132b885d0cafade8f4b5c853c9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f95143f043baf132b885d0cafade8f4b5c853c9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f95143f043baf132b885d0cafade8f4b5c853c9e"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fcb0ce9e19e594dd70b66064b99fd88935ba1119",
        "filename": "src/test/test_syscoin_services.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d060bbcf6b73777b0f8289f3467ea7c4dbdc2561/src/test/test_syscoin_services.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d060bbcf6b73777b0f8289f3467ea7c4dbdc2561/src/test/test_syscoin_services.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_syscoin_services.cpp?ref=d060bbcf6b73777b0f8289f3467ea7c4dbdc2561",
        "patch": "@@ -101,9 +101,9 @@ void StartNode(const string &dataDir, bool regTest, const string& extraArgs)\n     boost::filesystem::path fpath = boost::filesystem::system_complete(\"../syscoind\");\n \tstring nodePath = fpath.string() + string(\" -datadir=\") + dataDir;\n \tif(regTest)\n-\t\tnodePath += string(\" -regtest -addressindex -unittest\");\n+\t\tnodePath += string(\" -regtest -addressindex\");\n \tif(!extraArgs.empty())\n-\t\tnodePath += string(\" \") + extraArgs;\n+\t\tnodePath += string(\"  -unittest \") + extraArgs;\n \n     boost::thread t(runCommand, nodePath);\n \tprintf(\"Launching %s, waiting 1 second before trying to ping...\\n\", nodePath.c_str());"
      }
    ]
  },
  {
    "sha": "335fe3c4df1379c492efac6ae2094a10b9732f80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzVmZTNjNGRmMTM3OWM0OTJlZmFjNmFlMjA5NGExMGI5NzMyZjgw",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T21:43:14Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T21:43:14Z"
      },
      "message": "fix mainnet test",
      "tree": {
        "sha": "437b403b6eee39484f8ab60fc9a88999e1fced8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/437b403b6eee39484f8ab60fc9a88999e1fced8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/335fe3c4df1379c492efac6ae2094a10b9732f80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/335fe3c4df1379c492efac6ae2094a10b9732f80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/335fe3c4df1379c492efac6ae2094a10b9732f80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/335fe3c4df1379c492efac6ae2094a10b9732f80/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d060bbcf6b73777b0f8289f3467ea7c4dbdc2561",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d060bbcf6b73777b0f8289f3467ea7c4dbdc2561",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d060bbcf6b73777b0f8289f3467ea7c4dbdc2561"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1f1966878655ac45eef757c7f00b4bec9db3014d",
        "filename": "src/test/test_syscoin_services.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/335fe3c4df1379c492efac6ae2094a10b9732f80/src/test/test_syscoin_services.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/335fe3c4df1379c492efac6ae2094a10b9732f80/src/test/test_syscoin_services.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_syscoin_services.cpp?ref=335fe3c4df1379c492efac6ae2094a10b9732f80",
        "patch": "@@ -99,11 +99,11 @@ void StartNode(const string &dataDir, bool regTest, const string& extraArgs)\n \t\tboost::filesystem::remove(boost::filesystem::system_complete(dataDir + \"/wallet.dat\"));\n \t}\n     boost::filesystem::path fpath = boost::filesystem::system_complete(\"../syscoind\");\n-\tstring nodePath = fpath.string() + string(\" -datadir=\") + dataDir;\n+\tstring nodePath = fpath.string() + string(\" -unittest -datadir=\") + dataDir;\n \tif(regTest)\n \t\tnodePath += string(\" -regtest -addressindex\");\n \tif(!extraArgs.empty())\n-\t\tnodePath += string(\"  -unittest \") + extraArgs;\n+\t\tnodePath += string(\" \") + extraArgs;\n \n     boost::thread t(runCommand, nodePath);\n \tprintf(\"Launching %s, waiting 1 second before trying to ping...\\n\", nodePath.c_str());"
      }
    ]
  },
  {
    "sha": "13f0fd5e8f76c02c6c376f892c30b09f2f0ac0b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2YwZmQ1ZThmNzZjMDJjNmMzNzZmODkyYzMwYjA5ZjJmMGFjMGI3",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T22:47:25Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T22:47:25Z"
      },
      "message": "update test",
      "tree": {
        "sha": "7d53c17f2d0c3d7a12909d572c64709d9bf12844",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d53c17f2d0c3d7a12909d572c64709d9bf12844"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13f0fd5e8f76c02c6c376f892c30b09f2f0ac0b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f0fd5e8f76c02c6c376f892c30b09f2f0ac0b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13f0fd5e8f76c02c6c376f892c30b09f2f0ac0b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f0fd5e8f76c02c6c376f892c30b09f2f0ac0b7/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "335fe3c4df1379c492efac6ae2094a10b9732f80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/335fe3c4df1379c492efac6ae2094a10b9732f80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/335fe3c4df1379c492efac6ae2094a10b9732f80"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b027dd36e85b8437c06b95e4c413191bdb295b1c",
        "filename": "src/test/test_syscoin_services.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13f0fd5e8f76c02c6c376f892c30b09f2f0ac0b7/src/test/test_syscoin_services.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13f0fd5e8f76c02c6c376f892c30b09f2f0ac0b7/src/test/test_syscoin_services.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_syscoin_services.cpp?ref=13f0fd5e8f76c02c6c376f892c30b09f2f0ac0b7",
        "patch": "@@ -62,7 +62,15 @@ void StartMainNetNodes()\n \tStopMainNetNodes();\n \tprintf(\"Starting 2 nodes in mainnet setup...\\n\");\n \tStartNode(\"mainnet1\", false);\n+\tCallRPC(\"mainnet1\", \"mnsync next\");\n+\tCallRPC(\"mainnet1\", \"mnsync next\");\n+\tCallRPC(\"mainnet1\", \"mnsync next\");\n+\tCallRPC(\"mainnet1\", \"mnsync next\");\n \tStartNode(\"mainnet2\", false);\n+\tCallRPC(\"mainnet2\", \"mnsync next\");\n+\tCallRPC(\"mainnet2\", \"mnsync next\");\n+\tCallRPC(\"mainnet2\", \"mnsync next\");\n+\tCallRPC(\"mainnet2\", \"mnsync next\");\n }\n void StopMainNetNodes()\n {"
      }
    ]
  },
  {
    "sha": "e9a216a4608b4505b7296570a0ca6a35de37c863",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWEyMTZhNDYwOGI0NTA1YjcyOTY1NzBhMGNhNmEzNWRlMzdjODYz",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T22:48:21Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T22:48:21Z"
      },
      "message": "remove unit test from miner",
      "tree": {
        "sha": "02e67619ee1f5eb84e92ba25510f5bae693ac265",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02e67619ee1f5eb84e92ba25510f5bae693ac265"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9a216a4608b4505b7296570a0ca6a35de37c863",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9a216a4608b4505b7296570a0ca6a35de37c863",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9a216a4608b4505b7296570a0ca6a35de37c863",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9a216a4608b4505b7296570a0ca6a35de37c863/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13f0fd5e8f76c02c6c376f892c30b09f2f0ac0b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f0fd5e8f76c02c6c376f892c30b09f2f0ac0b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13f0fd5e8f76c02c6c376f892c30b09f2f0ac0b7"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b78027c27fe37a4997ccfabb3ef24cb03077235a",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9a216a4608b4505b7296570a0ca6a35de37c863/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9a216a4608b4505b7296570a0ca6a35de37c863/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=e9a216a4608b4505b7296570a0ca6a35de37c863",
        "patch": "@@ -171,7 +171,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // Compute regular coinbase transaction.\n \tcoinbaseTx.vout[0].nValue = blockReward + nFees;\n \tcoinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;\n-\tif (!chainparams.MineBlocksOnDemand() && nHeight > 1 && !IsInitialBlockDownload() && !fUnitTest) {\n+\tif (!chainparams.MineBlocksOnDemand() && nHeight > 1 && !IsInitialBlockDownload()) {\n \t\tif (masternodeSync.IsFailed()) {\n \t\t\tthrow std::runtime_error(\"Masternode information has failed to sync, please restart your node!\");\n \t\t}"
      }
    ]
  },
  {
    "sha": "fa1820005fe39f8e4f2ec40eeaa9f7cc26d6f3e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTE4MjAwMDVmZTM5ZjhlNGYyZWM0MGVlYWE5ZjdjYzI2ZDZmM2Uz",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T22:52:34Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-04-30T22:52:34Z"
      },
      "message": "fix test",
      "tree": {
        "sha": "2799e06f8501a8f2493bda70edcee63395d1645a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2799e06f8501a8f2493bda70edcee63395d1645a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1820005fe39f8e4f2ec40eeaa9f7cc26d6f3e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1820005fe39f8e4f2ec40eeaa9f7cc26d6f3e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1820005fe39f8e4f2ec40eeaa9f7cc26d6f3e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1820005fe39f8e4f2ec40eeaa9f7cc26d6f3e3/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9a216a4608b4505b7296570a0ca6a35de37c863",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9a216a4608b4505b7296570a0ca6a35de37c863",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9a216a4608b4505b7296570a0ca6a35de37c863"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "6b83b281a5ac9d42000ec5b908466cbe94b9f389",
        "filename": "src/test/test_syscoin_services.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1820005fe39f8e4f2ec40eeaa9f7cc26d6f3e3/src/test/test_syscoin_services.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1820005fe39f8e4f2ec40eeaa9f7cc26d6f3e3/src/test/test_syscoin_services.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_syscoin_services.cpp?ref=fa1820005fe39f8e4f2ec40eeaa9f7cc26d6f3e3",
        "patch": "@@ -62,15 +62,15 @@ void StartMainNetNodes()\n \tStopMainNetNodes();\n \tprintf(\"Starting 2 nodes in mainnet setup...\\n\");\n \tStartNode(\"mainnet1\", false);\n-\tCallRPC(\"mainnet1\", \"mnsync next\");\n-\tCallRPC(\"mainnet1\", \"mnsync next\");\n-\tCallRPC(\"mainnet1\", \"mnsync next\");\n-\tCallRPC(\"mainnet1\", \"mnsync next\");\n+\tCallRPC(\"mainnet1\", \"mnsync next\", false, false);\n+\tCallRPC(\"mainnet1\", \"mnsync next\", false, false);\n+\tCallRPC(\"mainnet1\", \"mnsync next\", false, false);\n+\tCallRPC(\"mainnet1\", \"mnsync next\", false, false);\n \tStartNode(\"mainnet2\", false);\n-\tCallRPC(\"mainnet2\", \"mnsync next\");\n-\tCallRPC(\"mainnet2\", \"mnsync next\");\n-\tCallRPC(\"mainnet2\", \"mnsync next\");\n-\tCallRPC(\"mainnet2\", \"mnsync next\");\n+\tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n+\tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n+\tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n+\tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n }\n void StopMainNetNodes()\n {"
      }
    ]
  },
  {
    "sha": "8ca4ecfe46163d0e7fe87f3128441a3d87636956",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Y2E0ZWNmZTQ2MTYzZDBlN2ZlODdmMzEyODQ0MWEzZDg3NjM2OTU2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T00:53:54Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T00:53:54Z"
      },
      "message": "fix wallet code to remove dash's hd chain stuff",
      "tree": {
        "sha": "711eef3efcc4e15aeb62032b75f95b40ef51e505",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/711eef3efcc4e15aeb62032b75f95b40ef51e505"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ca4ecfe46163d0e7fe87f3128441a3d87636956",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ca4ecfe46163d0e7fe87f3128441a3d87636956",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ca4ecfe46163d0e7fe87f3128441a3d87636956",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ca4ecfe46163d0e7fe87f3128441a3d87636956/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa1820005fe39f8e4f2ec40eeaa9f7cc26d6f3e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1820005fe39f8e4f2ec40eeaa9f7cc26d6f3e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1820005fe39f8e4f2ec40eeaa9f7cc26d6f3e3"
      }
    ],
    "stats": {
      "total": 4192,
      "additions": 1665,
      "deletions": 2527
    },
    "files": [
      {
        "sha": "0c4c5e2c7c483ec5aa475046d1a4bc09dce7a2ef",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=8ca4ecfe46163d0e7fe87f3128441a3d87636956",
        "patch": "@@ -129,7 +129,6 @@ SYSCOIN_CORE_H = \\\n   governance-vote.h \\\n   governance-votedb.h \\\n   flat-database.h \\\n-  hdchain.h \\\n   httprpc.h \\\n   httpserver.h \\\n   indirectmap.h \\\n@@ -387,7 +386,6 @@ libsyscoin_common_a_SOURCES = \\\n   compressor.cpp \\\n   core_read.cpp \\\n   core_write.cpp \\\n-  hdchain.cpp \\\n   key.cpp \\\n   keystore.cpp \\\n   netaddress.cpp \\"
      },
      {
        "sha": "919c3b81dbbf23b1f6719315bc20383d514c7b62",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 6,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=8ca4ecfe46163d0e7fe87f3128441a3d87636956",
        "patch": "@@ -394,9 +394,18 @@ void CSuperblockManager::CreateSuperblock(CMutableTransaction& txNewRet, int nBl\n     voutSuperblockRet.clear();\n \n     // CONFIGURE SUPERBLOCK OUTPUTS\n-\n+\tpSuperblock->IsValid(txNewRet, nBlockHeight);\n     // Superblock payments are appended to the end of the coinbase vout vector\n     DBG( std::cout << \"CSuperblockManager::CreateSuperblock Number payments: \" << pSuperblock->CountPayments() << std::endl; );\n+\t// SYSCOIN\n+\t// payments should not exceed limit\n+\tCAmount nPaymentsTotalAmount = pSuperblock->GetPaymentsTotalAmount();\n+\tCAmount nPaymentsLimit = CSuperBlock::GetPaymentsLimit(nBlockHeight);\n+\tif (nPaymentsTotalAmount > nPaymentsLimit) {\n+\t\tLogPrintf(\"CreateSuperblock::IsValid -- Warning: Superblock invalid, payments limit exceeded: payments %lld, limit %lld\\n\", nPaymentsTotalAmount, nPaymentsLimit);\n+\t\treturn\n+\t}\n+\n \n     // TODO: How many payments can we add before things blow up?\n     //       Consider at least following limits:\n@@ -432,14 +441,14 @@ void CSuperblockManager::CreateSuperblock(CMutableTransaction& txNewRet, int nBl\n     DBG( std::cout << \"CSuperblockManager::CreateSuperblock End\" << std::endl; );\n }\n \n-bool CSuperblockManager::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount &blockReward)\n+bool CSuperblockManager::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward)\n {\n     // GET BEST SUPERBLOCK, SHOULD MATCH\n     LOCK(governance.cs);\n \n     CSuperblock_sptr pSuperblock;\n     if(CSuperblockManager::GetBestSuperblock(pSuperblock, nBlockHeight)) {\n-        return pSuperblock->IsValid(txNew, nBlockHeight, blockReward);\n+        return pSuperblock->IsValid(txNew, nBlockHeight, nFee, blockReward);\n     }\n \n     return false;\n@@ -665,7 +674,7 @@ CAmount CSuperblock::GetPaymentsTotalAmount()\n *   - Does this transaction match the superblock?\n */\n \n-bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount &blockReward)\n+bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount& nFee, const CAmount &blockReward)\n {\n     // TODO : LOCK(cs);\n     // No reason for a lock here now since this method only accesses data\n@@ -710,8 +719,8 @@ bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, const CAm\n     // miner should not get more than he would usually get\n     CAmount nBlockValue = txNew.GetValueOut();\n     \n-\tif(nBlockValue > (blockReward + nPaymentsTotalAmount)) {\n-        LogPrintf(\"CSuperblock::IsValid -- ERROR: Block invalid, block value limit exceeded: block %lld, limit %lld\\n\", nBlockValue, blockReward + nPaymentsTotalAmount);\n+\tif(nBlockValue > (blockReward + nFee + nPaymentsTotalAmount)) {\n+        LogPrintf(\"CSuperblock::IsValid -- ERROR: Block invalid, block value limit exceeded: block %lld, limit %lld\\n\", nBlockValue, blockReward + nFee + nPaymentsTotalAmount);\n         return false;\n     }\n "
      },
      {
        "sha": "498e7c8f0334efc94c6b7c581b8d2f3d6561030a",
        "filename": "src/hdchain.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 212,
        "changes": 212,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1820005fe39f8e4f2ec40eeaa9f7cc26d6f3e3/src/hdchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1820005fe39f8e4f2ec40eeaa9f7cc26d6f3e3/src/hdchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hdchain.cpp?ref=fa1820005fe39f8e4f2ec40eeaa9f7cc26d6f3e3",
        "patch": "@@ -1,212 +0,0 @@\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-\n-#include \"base58.h\"\n-#include \"bip39.h\"\n-#include \"chainparams.h\"\n-#include \"hdchain.h\"\n-#include \"tinyformat.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-\n-bool CHDChain::SetNull()\n-{\n-    LOCK(cs_accounts);\n-    nVersion = CURRENT_VERSION;\n-    id = uint256();\n-    fCrypted = false;\n-    vchSeed.clear();\n-    vchMnemonic.clear();\n-    vchMnemonicPassphrase.clear();\n-    mapAccounts.clear();\n-    // default blank account\n-    mapAccounts.insert(std::pair<uint32_t, CHDAccount>(0, CHDAccount()));\n-    return IsNull();\n-}\n-\n-bool CHDChain::IsNull() const\n-{\n-    return vchSeed.empty() || id == uint256();\n-}\n-\n-void CHDChain::SetCrypted(bool fCryptedIn)\n-{\n-    fCrypted = fCryptedIn;\n-}\n-\n-bool CHDChain::IsCrypted() const\n-{\n-    return fCrypted;\n-}\n-\n-void CHDChain::Debug(const std::string& strName) const\n-{\n-    DBG(\n-        std::cout << __func__ << \": ---\" << strName << \"---\" << std::endl;\n-        if (fCrypted) {\n-            std::cout << \"mnemonic: ***CRYPTED***\" << std::endl;\n-            std::cout << \"mnemonicpassphrase: ***CRYPTED***\" << std::endl;\n-            std::cout << \"seed: ***CRYPTED***\" << std::endl;\n-        } else {\n-            std::cout << \"mnemonic: \" << std::string(vchMnemonic.begin(), vchMnemonic.end()).c_str() << std::endl;\n-            std::cout << \"mnemonicpassphrase: \" << std::string(vchMnemonicPassphrase.begin(), vchMnemonicPassphrase.end()).c_str() << std::endl;\n-            std::cout << \"seed: \" << HexStr(vchSeed).c_str() << std::endl;\n-\n-            CExtKey extkey;\n-            extkey.SetMaster(&vchSeed[0], vchSeed.size());\n-\n-            CSyscoinExtKey b58extkey;\n-            b58extkey.SetKey(extkey);\n-            std::cout << \"extended private masterkey: \" << b58extkey.ToString().c_str() << std::endl;\n-\n-            CExtPubKey extpubkey;\n-            extpubkey = extkey.Neuter();\n-\n-            CSyscoinExtPubKey b58extpubkey;\n-            b58extpubkey.SetKey(extpubkey);\n-            std::cout << \"extended public masterkey: \" << b58extpubkey.ToString().c_str() << std::endl;\n-        }\n-    );\n-}\n-\n-bool CHDChain::SetMnemonic(const SecureVector& vchMnemonic, const SecureVector& vchMnemonicPassphrase, bool fUpdateID)\n-{\n-    return SetMnemonic(SecureString(vchMnemonic.begin(), vchMnemonic.end()), SecureString(vchMnemonicPassphrase.begin(), vchMnemonicPassphrase.end()), fUpdateID);\n-}\n-\n-bool CHDChain::SetMnemonic(const SecureString& ssMnemonic, const SecureString& ssMnemonicPassphrase, bool fUpdateID)\n-{\n-    SecureString ssMnemonicTmp = ssMnemonic;\n-\n-    if (fUpdateID) {\n-        // can't (re)set mnemonic if seed was already set\n-        if (!IsNull())\n-            return false;\n-\n-        // empty mnemonic i.e. \"generate a new one\"\n-        if (ssMnemonic.empty()) {\n-            ssMnemonicTmp = CMnemonic::Generate(256);\n-        }\n-        // NOTE: default mnemonic passphrase is an empty string\n-\n-        // printf(\"mnemonic: %s\\n\", ssMnemonicTmp.c_str());\n-        if (!CMnemonic::Check(ssMnemonicTmp)) {\n-            throw std::runtime_error(std::string(__func__) + \": invalid mnemonic: `\" + std::string(ssMnemonicTmp.c_str()) + \"`\");\n-        }\n-\n-        CMnemonic::ToSeed(ssMnemonicTmp, ssMnemonicPassphrase, vchSeed);\n-        id = GetSeedHash();\n-    }\n-\n-    vchMnemonic = SecureVector(ssMnemonicTmp.begin(), ssMnemonicTmp.end());\n-    vchMnemonicPassphrase = SecureVector(ssMnemonicPassphrase.begin(), ssMnemonicPassphrase.end());\n-\n-    return !IsNull();\n-}\n-\n-bool CHDChain::GetMnemonic(SecureVector& vchMnemonicRet, SecureVector& vchMnemonicPassphraseRet) const\n-{\n-    // mnemonic was not set, fail\n-    if (vchMnemonic.empty())\n-        return false;\n-\n-    vchMnemonicRet = vchMnemonic;\n-    vchMnemonicPassphraseRet = vchMnemonicPassphrase;\n-    return true;\n-}\n-\n-bool CHDChain::GetMnemonic(SecureString& ssMnemonicRet, SecureString& ssMnemonicPassphraseRet) const\n-{\n-    // mnemonic was not set, fail\n-    if (vchMnemonic.empty())\n-        return false;\n-\n-    ssMnemonicRet = SecureString(vchMnemonic.begin(), vchMnemonic.end());\n-    ssMnemonicPassphraseRet = SecureString(vchMnemonicPassphrase.begin(), vchMnemonicPassphrase.end());\n-\n-    return true;\n-}\n-\n-bool CHDChain::SetSeed(const SecureVector& vchSeedIn, bool fUpdateID)\n-{\n-    vchSeed = vchSeedIn;\n-\n-    if (fUpdateID) {\n-        id = GetSeedHash();\n-    }\n-\n-    return !IsNull();\n-}\n-\n-SecureVector CHDChain::GetSeed() const\n-{\n-    return vchSeed;\n-}\n-\n-uint256 CHDChain::GetSeedHash()\n-{\n-    return Hash(vchSeed.begin(), vchSeed.end());\n-}\n-\n-void CHDChain::DeriveChildExtKey(uint32_t nAccountIndex, bool fInternal, uint32_t nChildIndex, CExtKey& extKeyRet)\n-{\n-    // Use BIP44 keypath scheme i.e. m / purpose' / coin_type' / account' / change / address_index\n-    CExtKey masterKey;              //hd master key\n-    CExtKey purposeKey;             //key at m/purpose'\n-    CExtKey cointypeKey;            //key at m/purpose'/coin_type'\n-    CExtKey accountKey;             //key at m/purpose'/coin_type'/account'\n-    CExtKey changeKey;              //key at m/purpose'/coin_type'/account'/change\n-    CExtKey childKey;               //key at m/purpose'/coin_type'/account'/change/address_index\n-\n-    masterKey.SetMaster(&vchSeed[0], vchSeed.size());\n-\n-    // Use hardened derivation for purpose, coin_type and account\n-    // (keys >= 0x80000000 are hardened after bip32)\n-\n-    // derive m/purpose'\n-    masterKey.Derive(purposeKey, 44 | 0x80000000);\n-    // derive m/purpose'/coin_type'\n-    purposeKey.Derive(cointypeKey, Params().ExtCoinType() | 0x80000000);\n-    // derive m/purpose'/coin_type'/account'\n-    cointypeKey.Derive(accountKey, nAccountIndex | 0x80000000);\n-    // derive m/purpose'/coin_type'/account/change\n-    accountKey.Derive(changeKey, fInternal ? 1 : 0);\n-    // derive m/purpose'/coin_type'/account/change/address_index\n-    changeKey.Derive(extKeyRet, nChildIndex);\n-}\n-\n-void CHDChain::AddAccount()\n-{\n-    LOCK(cs_accounts);\n-    mapAccounts.insert(std::pair<uint32_t, CHDAccount>(mapAccounts.size(), CHDAccount()));\n-}\n-\n-bool CHDChain::GetAccount(uint32_t nAccountIndex, CHDAccount& hdAccountRet)\n-{\n-    LOCK(cs_accounts);\n-    if (nAccountIndex > mapAccounts.size() - 1)\n-        return false;\n-    hdAccountRet = mapAccounts[nAccountIndex];\n-    return true;\n-}\n-\n-bool CHDChain::SetAccount(uint32_t nAccountIndex, const CHDAccount& hdAccount)\n-{\n-    LOCK(cs_accounts);\n-    // can only replace existing accounts\n-    if (nAccountIndex > mapAccounts.size() - 1)\n-        return false;\n-    mapAccounts[nAccountIndex] = hdAccount;\n-    return true;\n-}\n-\n-size_t CHDChain::CountAccounts()\n-{\n-    LOCK(cs_accounts);\n-    return mapAccounts.size();\n-}\n-\n-std::string CHDPubKey::GetKeyPath() const\n-{\n-    return strprintf(\"m/44'/%d'/%d'/%d/%d\", Params().ExtCoinType(), nAccountIndex, nChangeIndex, extPubKey.nChild);\n-}"
      },
      {
        "sha": "34e8e33a8cf918fe2569a7e651ff0191f6a55040",
        "filename": "src/hdchain.h",
        "status": "removed",
        "additions": 0,
        "deletions": 150,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1820005fe39f8e4f2ec40eeaa9f7cc26d6f3e3/src/hdchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1820005fe39f8e4f2ec40eeaa9f7cc26d6f3e3/src/hdchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hdchain.h?ref=fa1820005fe39f8e4f2ec40eeaa9f7cc26d6f3e3",
        "patch": "@@ -1,150 +0,0 @@\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-#ifndef SYS_HDCHAIN_H\n-#define SYS_HDCHAIN_H\n-\n-#include \"key.h\"\n-#include \"sync.h\"\n-\n-/* hd account data model */\n-class CHDAccount\n-{\n-public:\n-    uint32_t nExternalChainCounter;\n-    uint32_t nInternalChainCounter;\n-\n-    CHDAccount() : nExternalChainCounter(0), nInternalChainCounter(0) {}\n-\n-    ADD_SERIALIZE_METHODS;\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n-    {\n-        READWRITE(nExternalChainCounter);\n-        READWRITE(nInternalChainCounter);\n-    }\n-};\n-\n-/* simple HD chain data model */\n-class CHDChain\n-{\n-private:\n-    static const int CURRENT_VERSION = 1;\n-    int nVersion;\n-\n-    uint256 id;\n-\n-    bool fCrypted;\n-\n-    SecureVector vchSeed;\n-    SecureVector vchMnemonic;\n-    SecureVector vchMnemonicPassphrase;\n-\n-    std::map<uint32_t, CHDAccount> mapAccounts;\n-    // critical section to protect mapAccounts\n-    mutable CCriticalSection cs_accounts;\n-\n-public:\n-\n-    CHDChain() { SetNull(); }\n-    CHDChain(const CHDChain& other) :\n-        nVersion(other.nVersion),\n-        id(other.id),\n-        fCrypted(other.fCrypted),\n-        vchSeed(other.vchSeed),\n-        vchMnemonic(other.vchMnemonic),\n-        vchMnemonicPassphrase(other.vchMnemonicPassphrase),\n-        mapAccounts(other.mapAccounts)\n-        {}\n-\n-    ADD_SERIALIZE_METHODS;\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n-    {\n-        LOCK(cs_accounts);\n-        READWRITE(this->nVersion);\n-        READWRITE(id);\n-        READWRITE(fCrypted);\n-        READWRITE(vchSeed);\n-        READWRITE(vchMnemonic);\n-        READWRITE(vchMnemonicPassphrase);\n-        READWRITE(mapAccounts);\n-    }\n-\n-    void swap(CHDChain& first, CHDChain& second) // nothrow\n-    {\n-        // enable ADL (not necessary in our case, but good practice)\n-        using std::swap;\n-\n-        // by swapping the members of two classes,\n-        // the two classes are effectively swapped\n-        swap(first.nVersion, second.nVersion);\n-        swap(first.id, second.id);\n-        swap(first.fCrypted, second.fCrypted);\n-        swap(first.vchSeed, second.vchSeed);\n-        swap(first.vchMnemonic, second.vchMnemonic);\n-        swap(first.vchMnemonicPassphrase, second.vchMnemonicPassphrase);\n-        swap(first.mapAccounts, second.mapAccounts);\n-    }\n-    CHDChain& operator=(CHDChain from)\n-    {\n-        swap(*this, from);\n-        return *this;\n-    }\n-\n-    bool SetNull();\n-    bool IsNull() const;\n-\n-    void SetCrypted(bool fCryptedIn);\n-    bool IsCrypted() const;\n-\n-    void Debug(const std::string& strName) const;\n-\n-    bool SetMnemonic(const SecureVector& vchMnemonic, const SecureVector& vchMnemonicPassphrase, bool fUpdateID);\n-    bool SetMnemonic(const SecureString& ssMnemonic, const SecureString& ssMnemonicPassphrase, bool fUpdateID);\n-    bool GetMnemonic(SecureVector& vchMnemonicRet, SecureVector& vchMnemonicPassphraseRet) const;\n-    bool GetMnemonic(SecureString& ssMnemonicRet, SecureString& ssMnemonicPassphraseRet) const;\n-\n-    bool SetSeed(const SecureVector& vchSeedIn, bool fUpdateID);\n-    SecureVector GetSeed() const;\n-\n-    uint256 GetID() const { return id; }\n-\n-    uint256 GetSeedHash();\n-    void DeriveChildExtKey(uint32_t nAccountIndex, bool fInternal, uint32_t nChildIndex, CExtKey& extKeyRet);\n-\n-    void AddAccount();\n-    bool GetAccount(uint32_t nAccountIndex, CHDAccount& hdAccountRet);\n-    bool SetAccount(uint32_t nAccountIndex, const CHDAccount& hdAccount);\n-    size_t CountAccounts();\n-};\n-\n-/* hd pubkey data model */\n-class CHDPubKey\n-{\n-private:\n-    static const int CURRENT_VERSION = 1;\n-    int nVersion;\n-\n-public:\n-    CExtPubKey extPubKey;\n-    uint256 hdchainID;\n-    uint32_t nAccountIndex;\n-    uint32_t nChangeIndex;\n-\n-    CHDPubKey() : nVersion(CHDPubKey::CURRENT_VERSION), nAccountIndex(0), nChangeIndex(0) {}\n-\n-    ADD_SERIALIZE_METHODS;\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action)\n-    {\n-        READWRITE(this->nVersion);\n-        READWRITE(extPubKey);\n-        READWRITE(hdchainID);\n-        READWRITE(nAccountIndex);\n-        READWRITE(nChangeIndex);\n-    }\n-\n-    std::string GetKeyPath() const;\n-};\n-\n-#endif // SYS_HDCHAIN_H"
      },
      {
        "sha": "2c73b1519493764f293a8da5599c79243f1c7fac",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8ca4ecfe46163d0e7fe87f3128441a3d87636956",
        "patch": "@@ -968,11 +968,6 @@ void InitParameterInteraction()\n         LogPrintf(\"%s: parameter interaction: -liquidityprovider=%d -> setting -privatesendmultisession=0\\n\", __func__, nLiqProvTmp);\n     }\n \n-    if (IsArgSet(\"-hdseed\") && IsHex(GetArg(\"-hdseed\", \"not hex\")) && (IsArgSet(\"-mnemonic\") || IsArgSet(\"-mnemonicpassphrase\"))) {\n-        ForceRemoveArg(\"-mnemonic\");\n-        ForceRemoveArg(\"-mnemonicpassphrase\");\n-        LogPrintf(\"%s: parameter interaction: can't use -hdseed and -mnemonic/-mnemonicpassphrase together, will prefer -seed\\n\", __func__);\n-    }\n #endif // ENABLE_WALLET\n \n     // Make sure additional indexes are recalculated correctly in VerifyDB"
      },
      {
        "sha": "0dbae182d391afbe859eb87afa016ce108eb34e7",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=8ca4ecfe46163d0e7fe87f3128441a3d87636956",
        "patch": "@@ -113,9 +113,3 @@ bool CBasicKeyStore::HaveWatchOnly() const\n     LOCK(cs_KeyStore);\n     return (!setWatchOnly.empty());\n }\n-\n-bool CBasicKeyStore::GetHDChain(CHDChain& hdChainRet) const\n-{\n-    hdChainRet = hdChain;\n-    return !hdChain.IsNull();\n-}"
      },
      {
        "sha": "12802434af21e1b9057f9f489b7e8c8def1e07e8",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=8ca4ecfe46163d0e7fe87f3128441a3d87636956",
        "patch": "@@ -5,8 +5,6 @@\n \n #ifndef SYSCOIN_KEYSTORE_H\n #define SYSCOIN_KEYSTORE_H\n-\n-#include \"hdchain.h\"\n #include \"key.h\"\n #include \"pubkey.h\"\n #include \"script/script.h\"\n@@ -60,8 +58,6 @@ class CBasicKeyStore : public CKeyStore\n     WatchKeyMap mapWatchKeys;\n     ScriptMap mapScripts;\n     WatchOnlySet setWatchOnly;\n-    /* the HD chain data model*/\n-    CHDChain hdChain;\n \n public:\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n@@ -110,7 +106,6 @@ class CBasicKeyStore : public CKeyStore\n     virtual bool HaveWatchOnly(const CScript &dest) const override;\n     virtual bool HaveWatchOnly() const override;\n \n-    virtual bool GetHDChain(CHDChain& hdChainRet) const;\n };\n \n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;"
      },
      {
        "sha": "f026623fdbfc896fcf2537dcaf75bb1b84c519b6",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=8ca4ecfe46163d0e7fe87f3128441a3d87636956",
        "patch": "@@ -142,6 +142,15 @@ bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight,  const CAmou\n                 LogPrint(\"gobject\", \"IsBlockPayeeValid -- Valid superblock at height %d: %s\", nBlockHeight, txNew.ToString());\n                 return true;\n             }\n+\t\t\telse {\n+\t\t\t\t// SYSCOIN\n+\t\t\t\t// payments should not exceed limit\n+\t\t\t\tCAmount nPaymentsLimit = CSuperBlock::GetPaymentsLimit(nBlockHeight);\n+\t\t\t\tif (txNew.GetValueOut() > nPaymentsLimit) {\n+\t\t\t\t\tLogPrintf(\"IsBlockPayeeValid -- Warning: Superblock invalid, payments limit exceeded: payments %lld, limit %lld\\n\", nPaymentsTotalAmount, nPaymentsLimit);\n+\t\t\t\t\treturn\n+\t\t\t\t}\n+\t\t\t}\n \n             LogPrintf(\"IsBlockPayeeValid -- ERROR: Invalid superblock detected at height %d: %s\", nBlockHeight, txNew.ToString());\n             // should NOT allow such superblocks, when superblocks are enabled"
      },
      {
        "sha": "5e8b9fc62a07cdc161d9113316f7a2c62985acd3",
        "filename": "src/qt/syscoinstrings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/qt/syscoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/qt/syscoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/syscoinstrings.cpp?ref=8ca4ecfe46163d0e7fe87f3128441a3d87636956",
        "patch": "@@ -245,7 +245,7 @@ QT_TRANSLATE_NOOP(\"syscoin-core\", \"\"\n QT_TRANSLATE_NOOP(\"syscoin-core\", \"\"\n \"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\"),\n QT_TRANSLATE_NOOP(\"syscoin-core\", \"\"\n-\"Use hierarchical deterministic key generation (HD) after bip39/bip44. Only \"\n+\"Use hierarchical deterministic key generation (HD). Only \"\n \"has effect during wallet creation/first start\"),\n QT_TRANSLATE_NOOP(\"syscoin-core\", \"\"\n \"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: \""
      },
      {
        "sha": "f2b45caee2039fbae553d80c02c00bf15f68e2bc",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=8ca4ecfe46163d0e7fe87f3128441a3d87636956",
        "patch": "@@ -327,8 +327,8 @@ UniValue validateaddress(const JSONRPCRequest& request)\n             \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n             \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n             \"  \\\"timestamp\\\" : timestamp,        (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n-            \"  \\\"hdchainid\\\" : \\\"<hash>\\\"        (string, optional) The ID of the HD chain\\n\"\n+\t\t\t\"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n+\t\t\t\"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"validateaddress\", \"\\\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwg\\\"\")\n@@ -388,11 +388,12 @@ UniValue validateaddress(const JSONRPCRequest& request)\n                 ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n             }\n \n-            CHDChain hdChainCurrent;\n-            if (!keyID.IsNull() && pwalletMain->mapHdPubKeys.count(keyID) && pwalletMain->GetHDChain(hdChainCurrent)) {\n-                ret.push_back(Pair(\"hdkeypath\", pwalletMain->mapHdPubKeys[keyID].GetKeyPath()));\n-                ret.push_back(Pair(\"hdchainid\", hdChainCurrent.GetID().GetHex()));\n-            }\n+\t\t\tCKeyID keyID;\n+\t\t\tif (pwalletMain && address.GetKeyID(keyID) && pwalletMain->mapKeyMetadata.count(keyID) && !pwalletMain->mapKeyMetadata[keyID].hdKeypath.empty())\n+\t\t\t{\n+\t\t\t\tret.push_back(Pair(\"hdkeypath\", pwalletMain->mapKeyMetadata[keyID].hdKeypath));\n+\t\t\t\tret.push_back(Pair(\"hdmasterkeyid\", pwalletMain->mapKeyMetadata[keyID].hdMasterKeyID.GetHex()));\n+\t\t\t}\n         }\n #endif\n     }"
      },
      {
        "sha": "a0a0761c8c7cc2b3a74086d79f6f270339dd1ff9",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 192,
        "changes": 227,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=8ca4ecfe46163d0e7fe87f3128441a3d87636956",
        "patch": "@@ -209,64 +209,46 @@ bool CCryptoKeyStore::Lock(bool fAllowMixing)\n         LOCK(cs_KeyStore);\n         vMasterKey.clear();\n     }\n-\n-    fOnlyMixingAllowed = fAllowMixing;\n     NotifyStatusChanged(this);\n     return true;\n }\n \n-bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn, bool fForMixingOnly)\n+bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n {\n-    {\n-        LOCK(cs_KeyStore);\n-        if (!SetCrypted())\n-            return false;\n-\n-        bool keyPass = false;\n-        bool keyFail = false;\n-        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n-        for (; mi != mapCryptedKeys.end(); ++mi)\n-        {\n-            const CPubKey &vchPubKey = (*mi).second.first;\n-            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-            CKey key;\n-            if (!DecryptKey(vMasterKeyIn, vchCryptedSecret, vchPubKey, key))\n-            {\n-                keyFail = true;\n-                break;\n-            }\n-            keyPass = true;\n-            if (fDecryptionThoroughlyChecked)\n-                break;\n-        }\n-        if (keyPass && keyFail)\n-        {\n-            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n-            assert(false);\n-        }\n-        if (keyFail || (!keyPass && cryptedHDChain.IsNull()))\n-            return false;\n-\n-        vMasterKey = vMasterKeyIn;\n-\n-        if(!cryptedHDChain.IsNull()) {\n-            bool chainPass = false;\n-            // try to decrypt seed and make sure it matches\n-            CHDChain hdChainTmp;\n-            if (DecryptHDChain(hdChainTmp)) {\n-                // make sure seed matches this chain\n-                chainPass = cryptedHDChain.GetID() == hdChainTmp.GetSeedHash();\n-            }\n-            if (!chainPass) {\n-                vMasterKey.clear();\n-                return false;\n-            }\n-        }\n-        fDecryptionThoroughlyChecked = true;\n-    }\n-    fOnlyMixingAllowed = fForMixingOnly;\n-    NotifyStatusChanged(this);\n-    return true;\n+\t{\n+\t\tLOCK(cs_KeyStore);\n+\t\tif (!SetCrypted())\n+\t\t\treturn false;\n+\n+\t\tbool keyPass = false;\n+\t\tbool keyFail = false;\n+\t\tCryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n+\t\tfor (; mi != mapCryptedKeys.end(); ++mi)\n+\t\t{\n+\t\t\tconst CPubKey &vchPubKey = (*mi).second.first;\n+\t\t\tconst std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n+\t\t\tCKey key;\n+\t\t\tif (!DecryptKey(vMasterKeyIn, vchCryptedSecret, vchPubKey, key))\n+\t\t\t{\n+\t\t\t\tkeyFail = true;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tkeyPass = true;\n+\t\t\tif (fDecryptionThoroughlyChecked)\n+\t\t\t\tbreak;\n+\t\t}\n+\t\tif (keyPass && keyFail)\n+\t\t{\n+\t\t\tLogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+\t\t\tassert(false);\n+\t\t}\n+\t\tif (keyFail || !keyPass)\n+\t\t\treturn false;\n+\t\tvMasterKey = vMasterKeyIn;\n+\t\tfDecryptionThoroughlyChecked = true;\n+\t}\n+\tNotifyStatusChanged(this);\n+\treturn true;\n }\n \n bool CCryptoKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n@@ -363,142 +345,3 @@ bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n     }\n     return true;\n }\n-\n-bool CCryptoKeyStore::EncryptHDChain(const CKeyingMaterial& vMasterKeyIn)\n-{\n-    // should call EncryptKeys first\n-    if (!IsCrypted())\n-        return false;\n-\n-    if (!cryptedHDChain.IsNull())\n-        return true;\n-\n-    if (cryptedHDChain.IsCrypted())\n-        return true;\n-\n-    // make sure seed matches this chain\n-    if (hdChain.GetID() != hdChain.GetSeedHash())\n-        return false;\n-\n-    std::vector<unsigned char> vchCryptedSeed;\n-    if (!EncryptSecret(vMasterKeyIn, hdChain.GetSeed(), hdChain.GetID(), vchCryptedSeed))\n-        return false;\n-\n-    hdChain.Debug(__func__);\n-    cryptedHDChain = hdChain;\n-    cryptedHDChain.SetCrypted(true);\n-\n-    SecureVector vchSecureCryptedSeed(vchCryptedSeed.begin(), vchCryptedSeed.end());\n-    if (!cryptedHDChain.SetSeed(vchSecureCryptedSeed, false))\n-        return false;\n-\n-    SecureVector vchMnemonic;\n-    SecureVector vchMnemonicPassphrase;\n-\n-    // it's ok to have no mnemonic if wallet was initialized via hdseed\n-    if (hdChain.GetMnemonic(vchMnemonic, vchMnemonicPassphrase)) {\n-        std::vector<unsigned char> vchCryptedMnemonic;\n-        std::vector<unsigned char> vchCryptedMnemonicPassphrase;\n-\n-        if (!vchMnemonic.empty() && !EncryptSecret(vMasterKeyIn, vchMnemonic, hdChain.GetID(), vchCryptedMnemonic))\n-            return false;\n-        if (!vchMnemonicPassphrase.empty() && !EncryptSecret(vMasterKeyIn, vchMnemonicPassphrase, hdChain.GetID(), vchCryptedMnemonicPassphrase))\n-            return false;\n-\n-        SecureVector vchSecureCryptedMnemonic(vchCryptedMnemonic.begin(), vchCryptedMnemonic.end());\n-        SecureVector vchSecureCryptedMnemonicPassphrase(vchCryptedMnemonicPassphrase.begin(), vchCryptedMnemonicPassphrase.end());\n-        if (!cryptedHDChain.SetMnemonic(vchSecureCryptedMnemonic, vchSecureCryptedMnemonicPassphrase, false))\n-            return false;\n-    }\n-\n-    if (!hdChain.SetNull())\n-        return false;\n-\n-    return true;\n-}\n-\n-bool CCryptoKeyStore::DecryptHDChain(CHDChain& hdChainRet) const\n-{\n-    if (!IsCrypted())\n-        return true;\n-\n-    if (cryptedHDChain.IsNull())\n-        return false;\n-\n-    if (!cryptedHDChain.IsCrypted())\n-        return false;\n-\n-    SecureVector vchSecureSeed;\n-    SecureVector vchSecureCryptedSeed = cryptedHDChain.GetSeed();\n-    std::vector<unsigned char> vchCryptedSeed(vchSecureCryptedSeed.begin(), vchSecureCryptedSeed.end());\n-    if (!DecryptSecret(vMasterKey, vchCryptedSeed, cryptedHDChain.GetID(), vchSecureSeed))\n-        return false;\n-\n-    hdChainRet = cryptedHDChain;\n-    if (!hdChainRet.SetSeed(vchSecureSeed, false))\n-        return false;\n-\n-    // hash of decrypted seed must match chain id\n-    if (hdChainRet.GetSeedHash() != cryptedHDChain.GetID())\n-        return false;\n-\n-    SecureVector vchSecureCryptedMnemonic;\n-    SecureVector vchSecureCryptedMnemonicPassphrase;\n-\n-    // it's ok to have no mnemonic if wallet was initialized via hdseed\n-    if (cryptedHDChain.GetMnemonic(vchSecureCryptedMnemonic, vchSecureCryptedMnemonicPassphrase)) {\n-        SecureVector vchSecureMnemonic;\n-        SecureVector vchSecureMnemonicPassphrase;\n-\n-        std::vector<unsigned char> vchCryptedMnemonic(vchSecureCryptedMnemonic.begin(), vchSecureCryptedMnemonic.end());\n-        std::vector<unsigned char> vchCryptedMnemonicPassphrase(vchSecureCryptedMnemonicPassphrase.begin(), vchSecureCryptedMnemonicPassphrase.end());\n-\n-        if (!vchCryptedMnemonic.empty() && !DecryptSecret(vMasterKey, vchCryptedMnemonic, cryptedHDChain.GetID(), vchSecureMnemonic))\n-            return false;\n-        if (!vchCryptedMnemonicPassphrase.empty() && !DecryptSecret(vMasterKey, vchCryptedMnemonicPassphrase, cryptedHDChain.GetID(), vchSecureMnemonicPassphrase))\n-            return false;\n-\n-        if (!hdChainRet.SetMnemonic(vchSecureMnemonic, vchSecureMnemonicPassphrase, false))\n-            return false;\n-    }\n-\n-    hdChainRet.SetCrypted(false);\n-    hdChainRet.Debug(__func__);\n-\n-    return true;\n-}\n-\n-bool CCryptoKeyStore::SetHDChain(const CHDChain& chain)\n-{\n-    if (IsCrypted())\n-        return false;\n-\n-    if (chain.IsCrypted())\n-        return false;\n-\n-    hdChain = chain;\n-    return true;\n-}\n-\n-bool CCryptoKeyStore::SetCryptedHDChain(const CHDChain& chain)\n-{\n-    if (!SetCrypted())\n-        return false;\n-\n-    if (!chain.IsCrypted())\n-        return false;\n-\n-    cryptedHDChain = chain;\n-    return true;\n-}\n-\n-bool CCryptoKeyStore::GetHDChain(CHDChain& hdChainRet) const\n-{\n-    if(IsCrypted()) {\n-        hdChainRet = cryptedHDChain;\n-        return !cryptedHDChain.IsNull();\n-    }\n-\n-    hdChainRet = hdChain;\n-    return !hdChain.IsNull();\n-}"
      },
      {
        "sha": "1a65278d592364b90fad3ab257450c4f1516dfb7",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 71,
        "deletions": 100,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=8ca4ecfe46163d0e7fe87f3128441a3d87636956",
        "patch": "@@ -114,118 +114,89 @@ bool DecryptAES256(const SecureString& sKey, const std::string& sCiphertext, con\n \n \n /** Keystore which keeps the private keys encrypted.\n- * It derives from the basic key store, which is used if no encryption is active.\n- */\n+* It derives from the basic key store, which is used if no encryption is active.\n+*/\n class CCryptoKeyStore : public CBasicKeyStore\n {\n private:\n-    \n-    CHDChain cryptedHDChain;\n-\n-    CKeyingMaterial vMasterKey;\n+\tCryptedKeyMap mapCryptedKeys;\n \n-    //! if fUseCrypto is true, mapKeys must be empty\n-    //! if fUseCrypto is false, vMasterKey must be empty\n-    bool fUseCrypto;\n+\tCKeyingMaterial vMasterKey;\n \n-    //! keeps track of whether Unlock has run a thorough check before\n-    bool fDecryptionThoroughlyChecked;\n+\t//! if fUseCrypto is true, mapKeys must be empty\n+\t//! if fUseCrypto is false, vMasterKey must be empty\n+\tbool fUseCrypto;\n \n-    //! if fOnlyMixingAllowed is true, only mixing should be allowed in unlocked wallet\n-    bool fOnlyMixingAllowed;\n+\t//! keeps track of whether Unlock has run a thorough check before\n+\tbool fDecryptionThoroughlyChecked;\n \n protected:\n-    bool SetCrypted();\n+\tbool SetCrypted();\n \n-    //! will encrypt previously unencrypted keys\n-    bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n+\t//! will encrypt previously unencrypted keys\n+\tbool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n \n-    bool EncryptHDChain(const CKeyingMaterial& vMasterKeyIn);\n-    bool DecryptHDChain(CHDChain& hdChainRet) const;\n-    bool SetHDChain(const CHDChain& chain);\n-    bool SetCryptedHDChain(const CHDChain& chain);\n-\n-    bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool fForMixingOnly = false);\n-\tCryptedKeyMap mapCryptedKeys;\n+\tbool Unlock(const CKeyingMaterial& vMasterKeyIn);\n \n public:\n-    CCryptoKeyStore() : fUseCrypto(false), fDecryptionThoroughlyChecked(false), fOnlyMixingAllowed(false)\n-    {\n-    }\n-\n-    bool IsCrypted() const\n-    {\n-        return fUseCrypto;\n-    }\n-\n-    // This function should be used in a different combinations to determine\n-    // if CCryptoKeyStore is fully locked so that no operations requiring access\n-    // to private keys are possible:\n-    //      IsLocked(true)\n-    // or if CCryptoKeyStore's private keys are available for mixing only:\n-    //      !IsLocked(true) && IsLocked()\n-    // or if they are available for everything:\n-    //      !IsLocked()\n-    bool IsLocked(bool fForMixing = false) const\n-    {\n-        if (!IsCrypted())\n-            return false;\n-        bool result;\n-        {\n-            LOCK(cs_KeyStore);\n-            result = vMasterKey.empty();\n-        }\n-        // fForMixing   fOnlyMixingAllowed  return\n-        // ---------------------------------------\n-        // true         true                result\n-        // true         false               result\n-        // false        true                true\n-        // false        false               result\n-\n-        if(!fForMixing && fOnlyMixingAllowed) return true;\n-\n-        return result;\n-    }\n-\n-    bool Lock(bool fAllowMixing = false);\n-\n-    virtual bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n-    bool HaveKey(const CKeyID &address) const override\n-    {\n-        {\n-            LOCK(cs_KeyStore);\n-            if (!IsCrypted())\n-                return CBasicKeyStore::HaveKey(address);\n-            return mapCryptedKeys.count(address) > 0;\n-        }\n-        return false;\n-    }\n-    bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n-    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n-    void GetKeys(std::set<CKeyID> &setAddress) const override\n-    {\n-        if (!IsCrypted())\n-        {\n-            CBasicKeyStore::GetKeys(setAddress);\n-            return;\n-        }\n-        setAddress.clear();\n-        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n-        while (mi != mapCryptedKeys.end())\n-        {\n-            setAddress.insert((*mi).first);\n-            mi++;\n-        }\n-    }\n-\n-    virtual bool GetHDChain(CHDChain& hdChainRet) const override;\n-\n-    /**\n-     * Wallet status (encrypted, locked) changed.\n-     * Note: Called without locks held.\n-     */\n-    boost::signals2::signal<void (CCryptoKeyStore* wallet)> NotifyStatusChanged;\n+\tCCryptoKeyStore() : fUseCrypto(false), fDecryptionThoroughlyChecked(false)\n+\t{\n+\t}\n+\n+\tbool IsCrypted() const\n+\t{\n+\t\treturn fUseCrypto;\n+\t}\n+\n+\tbool IsLocked() const\n+\t{\n+\t\tif (!IsCrypted())\n+\t\t\treturn false;\n+\t\tbool result;\n+\t\t{\n+\t\t\tLOCK(cs_KeyStore);\n+\t\t\tresult = vMasterKey.empty();\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\tbool Lock();\n+\n+\tvirtual bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+\tbool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n+\tbool HaveKey(const CKeyID &address) const\n+\t{\n+\t\t{\n+\t\t\tLOCK(cs_KeyStore);\n+\t\t\tif (!IsCrypted())\n+\t\t\t\treturn CBasicKeyStore::HaveKey(address);\n+\t\t\treturn mapCryptedKeys.count(address) > 0;\n+\t\t}\n+\t\treturn false;\n+\t}\n+\tbool GetKey(const CKeyID &address, CKey& keyOut) const;\n+\tbool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n+\tvoid GetKeys(std::set<CKeyID> &setAddress) const\n+\t{\n+\t\tif (!IsCrypted())\n+\t\t{\n+\t\t\tCBasicKeyStore::GetKeys(setAddress);\n+\t\t\treturn;\n+\t\t}\n+\t\tsetAddress.clear();\n+\t\tCryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n+\t\twhile (mi != mapCryptedKeys.end())\n+\t\t{\n+\t\t\tsetAddress.insert((*mi).first);\n+\t\t\tmi++;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t* Wallet status (encrypted, locked) changed.\n+\t* Note: Called without locks held.\n+\t*/\n+\tboost::signals2::signal<void(CCryptoKeyStore* wallet)> NotifyStatusChanged;\n };\n \n #endif // SYSCOIN_WALLET_CRYPTER_H"
      },
      {
        "sha": "29d9bdaeeec559009fee7bfdfacb1a445751a0e8",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 89,
        "deletions": 157,
        "changes": 246,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=8ca4ecfe46163d0e7fe87f3128441a3d87636956",
        "patch": "@@ -681,164 +681,96 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n     return CSyscoinSecret(vchSecret).ToString();\n }\n \n-UniValue dumphdinfo(const JSONRPCRequest& request)\n+UniValue dumpwallet(const UniValue& params, bool fHelp)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n-        return NullUniValue;\n-\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n-            \"dumphdinfo\\n\"\n-            \"Returns an object containing sensitive private info about this HD wallet.\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"hdseed\\\": \\\"seed\\\",                    (string) The HD seed (bip32, in hex)\\n\"\n-            \"  \\\"mnemonic\\\": \\\"words\\\",                 (string) The mnemonic for this HD wallet (bip39, english words) \\n\"\n-            \"  \\\"mnemonicpassphrase\\\": \\\"passphrase\\\",  (string) The mnemonic passphrase for this HD wallet (bip39)\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"dumphdinfo\", \"\")\n-            + HelpExampleRpc(\"dumphdinfo\", \"\")\n-        );\n-\n-    LOCK(pwalletMain->cs_wallet);\n-\n-    EnsureWalletIsUnlocked();\n-\n-    // add the base58check encoded extended master if the wallet uses HD\n-    CHDChain hdChainCurrent;\n-    if (pwalletMain->GetHDChain(hdChainCurrent))\n-    {\n-        if (!pwalletMain->GetDecryptedHDChain(hdChainCurrent))\n-            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Cannot decrypt HD seed\");\n-\n-        SecureString ssMnemonic;\n-        SecureString ssMnemonicPassphrase;\n-        hdChainCurrent.GetMnemonic(ssMnemonic, ssMnemonicPassphrase);\n-\n-        UniValue obj(UniValue::VOBJ);\n-        obj.push_back(Pair(\"hdseed\", HexStr(hdChainCurrent.GetSeed())));\n-        obj.push_back(Pair(\"mnemonic\", ssMnemonic.c_str()));\n-        obj.push_back(Pair(\"mnemonicpassphrase\", ssMnemonicPassphrase.c_str()));\n-\n-        return obj;\n-    }\n-\n-    return NullUniValue;\n-}\n-\n-UniValue dumpwallet(const JSONRPCRequest& request)\n-{\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n-        return NullUniValue;\n-    \n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"dumpwallet \\\"filename\\\"\\n\"\n-            \"\\nDumps all wallet keys in a human-readable format.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"filename\\\"    (string, required) The filename\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"dumpwallet\", \"\\\"test\\\"\")\n-            + HelpExampleRpc(\"dumpwallet\", \"\\\"test\\\"\")\n-        );\n-\n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n-\n-    EnsureWalletIsUnlocked();\n-\n-    std::ofstream file;\n-    file.open(request.params[0].get_str().c_str());\n-    if (!file.is_open())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n-\n-    std::map<CTxDestination, int64_t> mapKeyBirth;\n-    std::set<CKeyID> setKeyPool;\n-    pwalletMain->GetKeyBirthTimes(mapKeyBirth);\n-    pwalletMain->GetAllReserveKeys(setKeyPool);\n-\n-    // sort time/key pairs\n-    std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n-    for (const auto& entry : mapKeyBirth) {\n-        if (const CKeyID* keyID = boost::get<CKeyID>(&entry.first)) { // set and test\n-            vKeyBirth.push_back(std::make_pair(entry.second, *keyID));\n-        }\n-    }\n-    mapKeyBirth.clear();\n-    std::sort(vKeyBirth.begin(), vKeyBirth.end());\n-\n-    // produce output\n-    file << strprintf(\"# Wallet dump created by Syscoin Core %s\\n\", CLIENT_BUILD);\n-    file << strprintf(\"# * Created on %s\\n\", EncodeDumpTime(GetTime()));\n-    file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", chainActive.Height(), chainActive.Tip()->GetBlockHash().ToString());\n-    file << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(chainActive.Tip()->GetBlockTime()));\n-    file << \"\\n\";\n-\n-    // add the base58check encoded extended master if the wallet uses HD\n-    CHDChain hdChainCurrent;\n-    if (pwalletMain->GetHDChain(hdChainCurrent))\n-    {\n-\n-        if (!pwalletMain->GetDecryptedHDChain(hdChainCurrent))\n-            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Cannot decrypt HD chain\");\n-\n-        SecureString ssMnemonic;\n-        SecureString ssMnemonicPassphrase;\n-        hdChainCurrent.GetMnemonic(ssMnemonic, ssMnemonicPassphrase);\n-        file << \"# mnemonic: \" << ssMnemonic << \"\\n\";\n-        file << \"# mnemonic passphrase: \" << ssMnemonicPassphrase << \"\\n\\n\";\n-\n-        SecureVector vchSeed = hdChainCurrent.GetSeed();\n-        file << \"# HD seed: \" << HexStr(vchSeed) << \"\\n\\n\";\n-\n-        CExtKey masterKey;\n-        masterKey.SetMaster(&vchSeed[0], vchSeed.size());\n-\n-        CSyscoinExtKey b58extkey;\n-        b58extkey.SetKey(masterKey);\n-\n-        file << \"# extended private masterkey: \" << b58extkey.ToString() << \"\\n\";\n-\n-        CExtPubKey masterPubkey;\n-        masterPubkey = masterKey.Neuter();\n-\n-        CSyscoinExtPubKey b58extpubkey;\n-        b58extpubkey.SetKey(masterPubkey);\n-        file << \"# extended public masterkey: \" << b58extpubkey.ToString() << \"\\n\\n\";\n-\n-        for (size_t i = 0; i < hdChainCurrent.CountAccounts(); ++i)\n-        {\n-            CHDAccount acc;\n-            if(hdChainCurrent.GetAccount(i, acc)) {\n-                file << \"# external chain counter: \" << acc.nExternalChainCounter << \"\\n\";\n-                file << \"# internal chain counter: \" << acc.nInternalChainCounter << \"\\n\\n\";\n-            } else {\n-                file << \"# WARNING: ACCOUNT \" << i << \" IS MISSING!\" << \"\\n\\n\";\n-            }\n-        }\n-    }\n-\n-    for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n-        const CKeyID &keyid = it->second;\n-        std::string strTime = EncodeDumpTime(it->first);\n-        std::string strAddr = CSyscoinAddress(keyid).ToString();\n-        CKey key;\n-        if (pwalletMain->GetKey(keyid, key)) {\n-            file << strprintf(\"%s %s \", CSyscoinSecret(key).ToString(), strTime);\n-            if (pwalletMain->mapAddressBook.count(keyid)) {\n-                file << strprintf(\"label=%s\", EncodeDumpString(pwalletMain->mapAddressBook[keyid].name));\n-            } else if (setKeyPool.count(keyid)) {\n-                file << \"reserve=1\";\n-            } else {\n-                file << \"change=1\";\n-            }\n-            file << strprintf(\" # addr=%s%s\\n\", strAddr, (pwalletMain->mapHdPubKeys.count(keyid) ? \" hdkeypath=\"+pwalletMain->mapHdPubKeys[keyid].GetKeyPath() : \"\"));\n-        }\n-    }\n-    file << \"\\n\";\n-    file << \"# End of dump\\n\";\n-    file.close();\n-    return NullUniValue;\n+\tif (!EnsureWalletIsAvailable(fHelp))\n+\t\treturn NullUniValue;\n+\n+\tif (fHelp || params.size() != 1)\n+\t\tthrow runtime_error(\n+\t\t\t\"dumpwallet \\\"filename\\\"\\n\"\n+\t\t\t\"\\nDumps all wallet keys in a human-readable format.\\n\"\n+\t\t\t\"\\nArguments:\\n\"\n+\t\t\t\"1. \\\"filename\\\"    (string, required) The filename\\n\"\n+\t\t\t\"\\nExamples:\\n\"\n+\t\t\t+ HelpExampleCli(\"dumpwallet\", \"\\\"test\\\"\")\n+\t\t\t+ HelpExampleRpc(\"dumpwallet\", \"\\\"test\\\"\")\n+\t\t);\n+\n+\tLOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+\tEnsureWalletIsUnlocked();\n+\n+\tofstream file;\n+\tfile.open(params[0].get_str().c_str());\n+\tif (!file.is_open())\n+\t\tthrow JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n+\n+\tstd::map<CKeyID, int64_t> mapKeyBirth;\n+\tstd::set<CKeyID> setKeyPool;\n+\tpwalletMain->GetKeyBirthTimes(mapKeyBirth);\n+\tpwalletMain->GetAllReserveKeys(setKeyPool);\n+\n+\t// sort time/key pairs\n+\tstd::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n+\tfor (std::map<CKeyID, int64_t>::const_iterator it = mapKeyBirth.begin(); it != mapKeyBirth.end(); it++) {\n+\t\tvKeyBirth.push_back(std::make_pair(it->second, it->first));\n+\t}\n+\tmapKeyBirth.clear();\n+\tstd::sort(vKeyBirth.begin(), vKeyBirth.end());\n+\n+\t// produce output\n+\tfile << strprintf(\"# Wallet dump created by Syscoin %s\\n\", CLIENT_BUILD);\n+\tfile << strprintf(\"# * Created on %s\\n\", EncodeDumpTime(GetTime()));\n+\tfile << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", chainActive.Height(), chainActive.Tip()->GetBlockHash().ToString());\n+\tfile << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(chainActive.Tip()->GetBlockTime()));\n+\tfile << \"\\n\";\n+\n+\t// add the base58check encoded extended master if the wallet uses HD \n+\tCKeyID masterKeyID = pwalletMain->GetHDChain().masterKeyID;\n+\tif (!masterKeyID.IsNull())\n+\t{\n+\t\tCKey key;\n+\t\tif (pwalletMain->GetKey(masterKeyID, key))\n+\t\t{\n+\t\t\tCExtKey masterKey;\n+\t\t\tmasterKey.SetMaster(key.begin(), key.size());\n+\n+\t\t\tCSyscoinExtKey b58extkey;\n+\t\t\tb58extkey.SetKey(masterKey);\n+\n+\t\t\tfile << \"# extended private masterkey: \" << b58extkey.ToString() << \"\\n\\n\";\n+\t\t}\n+\t}\n+\tfor (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n+\t\tconst CKeyID &keyid = it->second;\n+\t\tstd::string strTime = EncodeDumpTime(it->first);\n+\t\tstd::string strAddr = CSyscoinAddress(keyid).ToString();\n+\t\tCKey key;\n+\t\tif (pwalletMain->GetKey(keyid, key)) {\n+\t\t\tfile << strprintf(\"%s %s \", CSyscoinSecret(key).ToString(), strTime);\n+\t\t\tif (pwalletMain->mapAddressBook.count(keyid)) {\n+\t\t\t\tfile << strprintf(\"label=%s\", EncodeDumpString(pwalletMain->mapAddressBook[keyid].name));\n+\t\t\t}\n+\t\t\telse if (keyid == masterKeyID) {\n+\t\t\t\tfile << \"hdmaster=1\";\n+\t\t\t}\n+\t\t\telse if (setKeyPool.count(keyid)) {\n+\t\t\t\tfile << \"reserve=1\";\n+\t\t\t}\n+\t\t\telse if (pwalletMain->mapKeyMetadata[keyid].hdKeypath == \"m\") {\n+\t\t\t\tfile << \"inactivehdmaster=1\";\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tfile << \"change=1\";\n+\t\t\t}\n+\t\t\tfile << strprintf(\" # addr=%s%s\\n\", strAddr, (pwalletMain->mapKeyMetadata[keyid].hdKeypath.size() > 0 ? \" hdkeypath=\" + pwalletMain->mapKeyMetadata[keyid].hdKeypath : \"\"));\n+\t\t}\n+\t}\n+\tfile << \"\\n\";\n+\tfile << \"# End of dump\\n\";\n+\tfile.close();\n+\treturn NullUniValue;\n }\n \n "
      },
      {
        "sha": "2a4f0b6ed4514314f8034f8421fdaee43db88b8a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 32,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8ca4ecfe46163d0e7fe87f3128441a3d87636956",
        "patch": "@@ -2534,16 +2534,7 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"  \\\"keys_left\\\": xxxx,          (numeric) how many new keys are left since last automatic backup\\n\"\n             \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n             \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"hdchainid\\\": \\\"<hash>\\\",      (string) the ID of the HD chain\\n\"\n-            \"  \\\"hdaccountcount\\\": xxx,      (numeric) how many accounts of the HD chain are in this wallet\\n\"\n-            \"    [\\n\"\n-            \"      {\\n\"\n-            \"      \\\"hdaccountindex\\\": xxx,         (numeric) the index of the account\\n\"\n-            \"      \\\"hdexternalkeyindex\\\": xxxx,    (numeric) current external childkey index\\n\"\n-            \"      \\\"hdinternalkeyindex\\\": xxxx,    (numeric) current internal childkey index\\n\"\n-            \"      }\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n+\t\t\t\"  \\\"hdmasterkeyid\\\": \\\"<hash160>\\\", (string) the Hash160 of the HD master pubkey\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getwalletinfo\", \"\")\n@@ -2553,7 +2544,6 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     CHDChain hdChainCurrent;\n-    bool fHDEnabled = pwalletMain->GetHDChain(hdChainCurrent);\n     UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n     obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));\n@@ -2571,25 +2561,9 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n     if (pwalletMain->IsCrypted())\n         obj.push_back(Pair(\"unlocked_until\", nWalletUnlockTime));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n-    if (fHDEnabled) {\n-        obj.push_back(Pair(\"hdchainid\", hdChainCurrent.GetID().GetHex()));\n-        obj.push_back(Pair(\"hdaccountcount\", (int64_t)hdChainCurrent.CountAccounts()));\n-        UniValue accounts(UniValue::VARR);\n-        for (size_t i = 0; i < hdChainCurrent.CountAccounts(); ++i)\n-        {\n-            CHDAccount acc;\n-            UniValue account(UniValue::VOBJ);\n-            account.push_back(Pair(\"hdaccountindex\", (int64_t)i));\n-            if(hdChainCurrent.GetAccount(i, acc)) {\n-                account.push_back(Pair(\"hdexternalkeyindex\", (int64_t)acc.nExternalChainCounter));\n-                account.push_back(Pair(\"hdinternalkeyindex\", (int64_t)acc.nInternalChainCounter));\n-            } else {\n-                account.push_back(Pair(\"error\", strprintf(\"account %d is missing\", i)));\n-            }\n-            accounts.push_back(account);\n-        }\n-        obj.push_back(Pair(\"hdaccounts\", accounts));\n-    }\n+\tCKeyID masterKeyID = pwalletMain->GetHDChain().masterKeyID;\n+\tif (!masterKeyID.IsNull())\n+\t\tobj.push_back(Pair(\"hdmasterkeyid\", masterKeyID.GetHex()));\n     return obj;\n }\n UniValue generate(const JSONRPCRequest& request)\n@@ -3086,7 +3060,6 @@ extern UniValue importprunedfunds(const JSONRPCRequest& request);\n extern UniValue removeprunedfunds(const JSONRPCRequest& request);\n extern UniValue importmulti(const JSONRPCRequest& request);\n \n-extern UniValue dumphdinfo(const JSONRPCRequest& request);\n extern UniValue importelectrumwallet(const JSONRPCRequest& request);\n \n static const CRPCCommand commands[] =\n@@ -3143,7 +3116,6 @@ static const CRPCCommand commands[] =\n \t{ \"mining\",             \"getauxblock\",                      &getauxblock, true, { \"hash\", \"auxpow\" } },\n     { \"wallet\",             \"keepass\",                  &keepass,                  true,   {} },\n     { \"wallet\",             \"instantsendtoaddress\",     &instantsendtoaddress,     false,  {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\"} },\n-    { \"wallet\",             \"dumphdinfo\",               &dumphdinfo,               true,   {} },\n     { \"wallet\",             \"importelectrumwallet\",     &importelectrumwallet,     true,   {\"filename\", \"index\"} },\n     { \"hidden\",             \"setbip69enabled\",          &setbip69enabled,          true,   {} },\n };"
      },
      {
        "sha": "29402e2cd52a8bd0f4830f1fe00c8bf5a82bcbec",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 435,
        "deletions": 690,
        "changes": 1125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8ca4ecfe46163d0e7fe87f3128441a3d87636956",
        "patch": "@@ -101,259 +101,136 @@ const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n         return NULL;\n     return &(it->second);\n }\n-\n-CPubKey CWallet::GenerateNewKey(uint32_t nAccountIndex, bool fInternal)\n-{\n-    AssertLockHeld(cs_wallet); // mapKeyMetadata\n-    bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n-\n-    CKey secret;\n-\n-    // Create new metadata\n-    int64_t nCreationTime = GetTime();\n-    CKeyMetadata metadata(nCreationTime);\n-\n-    CPubKey pubkey;\n-    // use HD key derivation if HD was enabled during wallet creation\n-    if (IsHDEnabled()) {\n-        DeriveNewChildKey(metadata, secret, nAccountIndex, fInternal);\n-        pubkey = secret.GetPubKey();\n-    } else {\n-        secret.MakeNewKey(fCompressed);\n-\n-        // Compressed public keys were introduced in version 0.6.0\n-        if (fCompressed)\n-            SetMinVersion(FEATURE_COMPRPUBKEY);\n-\n-        pubkey = secret.GetPubKey();\n-        assert(secret.VerifyPubKey(pubkey));\n-\n-        // Create new metadata\n-        mapKeyMetadata[pubkey.GetID()] = metadata;\n-        UpdateTimeFirstKey(nCreationTime);\n-\n-        if (!AddKeyPubKey(secret, pubkey))\n-            throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n-    }\n-    return pubkey;\n-}\n-\n-void CWallet::DeriveNewChildKey(const CKeyMetadata& metadata, CKey& secretRet, uint32_t nAccountIndex, bool fInternal)\n-{\n-    CHDChain hdChainTmp;\n-    if (!GetHDChain(hdChainTmp)) {\n-        throw std::runtime_error(std::string(__func__) + \": GetHDChain failed\");\n-    }\n-\n-    if (!DecryptHDChain(hdChainTmp))\n-        throw std::runtime_error(std::string(__func__) + \": DecryptHDChainSeed failed\");\n-    // make sure seed matches this chain\n-    if (hdChainTmp.GetID() != hdChainTmp.GetSeedHash())\n-        throw std::runtime_error(std::string(__func__) + \": Wrong HD chain!\");\n-\n-    CHDAccount acc;\n-    if (!hdChainTmp.GetAccount(nAccountIndex, acc))\n-        throw std::runtime_error(std::string(__func__) + \": Wrong HD account!\");\n-\n-    // derive child key at next index, skip keys already known to the wallet\n-    CExtKey childKey;\n-    uint32_t nChildIndex = fInternal ? acc.nInternalChainCounter : acc.nExternalChainCounter;\n-    do {\n-        hdChainTmp.DeriveChildExtKey(nAccountIndex, fInternal, nChildIndex, childKey);\n-        // increment childkey index\n-        nChildIndex++;\n-    } while (HaveKey(childKey.key.GetPubKey().GetID()));\n-    secretRet = childKey.key;\n-\n-    CPubKey pubkey = secretRet.GetPubKey();\n-    assert(secretRet.VerifyPubKey(pubkey));\n-\n-    // store metadata\n-    mapKeyMetadata[pubkey.GetID()] = metadata;\n-    UpdateTimeFirstKey(metadata.nCreateTime);\n-\n-    // update the chain model in the database\n-    CHDChain hdChainCurrent;\n-    GetHDChain(hdChainCurrent);\n-\n-    if (fInternal) {\n-        acc.nInternalChainCounter = nChildIndex;\n-    }\n-    else {\n-        acc.nExternalChainCounter = nChildIndex;\n-    }\n-\n-    if (!hdChainCurrent.SetAccount(nAccountIndex, acc))\n-        throw std::runtime_error(std::string(__func__) + \": SetAccount failed\");\n-\n-    if (IsCrypted()) {\n-        if (!SetCryptedHDChain(hdChainCurrent, false))\n-            throw std::runtime_error(std::string(__func__) + \": SetCryptedHDChain failed\");\n-    }\n-    else {\n-        if (!SetHDChain(hdChainCurrent, false))\n-            throw std::runtime_error(std::string(__func__) + \": SetHDChain failed\");\n-    }\n-\n-    if (!AddHDPubKey(childKey.Neuter(), fInternal))\n-        throw std::runtime_error(std::string(__func__) + \": AddHDPubKey failed\");\n-}\n-\n-bool CWallet::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n-{\n-    LOCK(cs_wallet);\n-    std::map<CKeyID, CHDPubKey>::const_iterator mi = mapHdPubKeys.find(address);\n-    if (mi != mapHdPubKeys.end())\n-    {\n-        const CHDPubKey &hdPubKey = (*mi).second;\n-        vchPubKeyOut = hdPubKey.extPubKey.pubkey;\n-        return true;\n-    }\n-    else\n-        return CCryptoKeyStore::GetPubKey(address, vchPubKeyOut);\n-}\n-\n-bool CWallet::GetKey(const CKeyID &address, CKey& keyOut) const\n-{\n-    LOCK(cs_wallet);\n-    std::map<CKeyID, CHDPubKey>::const_iterator mi = mapHdPubKeys.find(address);\n-    if (mi != mapHdPubKeys.end())\n-    {\n-        // if the key has been found in mapHdPubKeys, derive it on the fly\n-        const CHDPubKey &hdPubKey = (*mi).second;\n-        CHDChain hdChainCurrent;\n-        if (!GetHDChain(hdChainCurrent))\n-            throw std::runtime_error(std::string(__func__) + \": GetHDChain failed\");\n-        if (!DecryptHDChain(hdChainCurrent))\n-            throw std::runtime_error(std::string(__func__) + \": DecryptHDChainSeed failed\");\n-        // make sure seed matches this chain\n-        if (hdChainCurrent.GetID() != hdChainCurrent.GetSeedHash())\n-            throw std::runtime_error(std::string(__func__) + \": Wrong HD chain!\");\n-\n-        CExtKey extkey;\n-        hdChainCurrent.DeriveChildExtKey(hdPubKey.nAccountIndex, hdPubKey.nChangeIndex != 0, hdPubKey.extPubKey.nChild, extkey);\n-        keyOut = extkey.key;\n-\n-        return true;\n-    }\n-    else {\n-        return CCryptoKeyStore::GetKey(address, keyOut);\n-    }\n-}\n-\n-bool CWallet::HaveKey(const CKeyID &address) const\n-{\n-    LOCK(cs_wallet);\n-    if (mapHdPubKeys.count(address) > 0)\n-        return true;\n-    return CCryptoKeyStore::HaveKey(address);\n-}\n-\n-bool CWallet::LoadHDPubKey(const CHDPubKey &hdPubKey)\n-{\n-    AssertLockHeld(cs_wallet);\n-\n-    mapHdPubKeys[hdPubKey.extPubKey.pubkey.GetID()] = hdPubKey;\n-    return true;\n-}\n-\n-bool CWallet::AddHDPubKey(const CExtPubKey &extPubKey, bool fInternal)\n-{\n-    AssertLockHeld(cs_wallet);\n-\n-    CHDChain hdChainCurrent;\n-    GetHDChain(hdChainCurrent);\n-\n-    CHDPubKey hdPubKey;\n-    hdPubKey.extPubKey = extPubKey;\n-    hdPubKey.hdchainID = hdChainCurrent.GetID();\n-    hdPubKey.nChangeIndex = fInternal ? 1 : 0;\n-    mapHdPubKeys[extPubKey.pubkey.GetID()] = hdPubKey;\n-\n-    // check if we need to remove from watch-only\n-    CScript script;\n-    script = GetScriptForDestination(extPubKey.pubkey.GetID());\n-    if (HaveWatchOnly(script))\n-        RemoveWatchOnly(script);\n-    script = GetScriptForRawPubKey(extPubKey.pubkey);\n-    if (HaveWatchOnly(script))\n-        RemoveWatchOnly(script);\n-\n-    if (!fFileBacked)\n-        return true;\n-\n-    return CWalletDB(strWalletFile).WriteHDPubKey(hdPubKey, mapKeyMetadata[extPubKey.pubkey.GetID()]);\n+CPubKey CWallet::GenerateNewKey()\n+{\n+\tAssertLockHeld(cs_wallet); // mapKeyMetadata\n+\tbool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n+\n+\tCKey secret;\n+\n+\t// Create new metadata\n+\tint64_t nCreationTime = GetTime();\n+\tCKeyMetadata metadata(nCreationTime);\n+\n+\t// use HD key derivation if HD was enabled during wallet creation\n+\tif (!hdChain.masterKeyID.IsNull()) {\n+\t\t// for now we use a fixed keypath scheme of m/0'/0'/k\n+\t\tCKey key;                      //master key seed (256bit)\n+\t\tCExtKey masterKey;             //hd master key\n+\t\tCExtKey accountKey;            //key at m/0'\n+\t\tCExtKey externalChainChildKey; //key at m/0'/0'\n+\t\tCExtKey childKey;              //key at m/0'/0'/<n>'\n+\n+\t\t\t\t\t\t\t\t\t   // try to get the master key\n+\t\tif (!GetKey(hdChain.masterKeyID, key))\n+\t\t\tthrow std::runtime_error(std::string(__func__) + \": Master key not found\");\n+\n+\t\tmasterKey.SetMaster(key.begin(), key.size());\n+\n+\t\t// derive m/0'\n+\t\t// use hardened derivation (child keys >= 0x80000000 are hardened after bip32)\n+\t\tmasterKey.Derive(accountKey, BIP32_HARDENED_KEY_LIMIT);\n+\n+\t\t// derive m/0'/0'\n+\t\taccountKey.Derive(externalChainChildKey, BIP32_HARDENED_KEY_LIMIT);\n+\n+\t\t// derive child key at next index, skip keys already known to the wallet\n+\t\tdo\n+\t\t{\n+\t\t\t// always derive hardened keys\n+\t\t\t// childIndex | BIP32_HARDENED_KEY_LIMIT = derive childIndex in hardened child-index-range\n+\t\t\t// example: 1 | BIP32_HARDENED_KEY_LIMIT == 0x80000001 == 2147483649\n+\t\t\texternalChainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+\t\t\tmetadata.hdKeypath = \"m/0'/0'/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n+\t\t\tmetadata.hdMasterKeyID = hdChain.masterKeyID;\n+\t\t\t// increment childkey index\n+\t\t\thdChain.nExternalChainCounter++;\n+\t\t} while (HaveKey(childKey.key.GetPubKey().GetID()));\n+\t\tsecret = childKey.key;\n+\n+\t\t// update the chain model in the database\n+\t\tif (!CWalletDB(strWalletFile).WriteHDChain(hdChain))\n+\t\t\tthrow std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n+\t}\n+\telse {\n+\t\tsecret.MakeNewKey(fCompressed);\n+\t}\n+\n+\t// Compressed public keys were introduced in version 0.6.0\n+\tif (fCompressed)\n+\t\tSetMinVersion(FEATURE_COMPRPUBKEY);\n+\n+\tCPubKey pubkey = secret.GetPubKey();\n+\tassert(secret.VerifyPubKey(pubkey));\n+\n+\tmapKeyMetadata[pubkey.GetID()] = metadata;\n+\tif (!nTimeFirstKey || nCreationTime < nTimeFirstKey)\n+\t\tnTimeFirstKey = nCreationTime;\n+\n+\tif (!AddKeyPubKey(secret, pubkey))\n+\t\tthrow std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+\treturn pubkey;\n }\n \n bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n {\n-    AssertLockHeld(cs_wallet); // mapKeyMetadata\n-    if (!CCryptoKeyStore::AddKeyPubKey(secret, pubkey))\n-        return false;\n-\n-    // check if we need to remove from watch-only\n-    CScript script;\n-    script = GetScriptForDestination(pubkey.GetID());\n-    if (HaveWatchOnly(script))\n-        RemoveWatchOnly(script);\n-    script = GetScriptForRawPubKey(pubkey);\n-    if (HaveWatchOnly(script))\n-        RemoveWatchOnly(script);\n-\n-    if (!fFileBacked)\n-        return true;\n-    if (!IsCrypted()) {\n-        return CWalletDB(strWalletFile).WriteKey(pubkey,\n-                                                 secret.GetPrivKey(),\n-                                                 mapKeyMetadata[pubkey.GetID()]);\n-    }\n-    return true;\n+\tAssertLockHeld(cs_wallet); // mapKeyMetadata\n+\tif (!CCryptoKeyStore::AddKeyPubKey(secret, pubkey))\n+\t\treturn false;\n+\n+\t// check if we need to remove from watch-only\n+\tCScript script;\n+\tscript = GetScriptForDestination(pubkey.GetID());\n+\tif (HaveWatchOnly(script))\n+\t\tRemoveWatchOnly(script);\n+\tscript = GetScriptForRawPubKey(pubkey);\n+\tif (HaveWatchOnly(script))\n+\t\tRemoveWatchOnly(script);\n+\n+\tif (!fFileBacked)\n+\t\treturn true;\n+\tif (!IsCrypted()) {\n+\t\treturn CWalletDB(strWalletFile).WriteKey(pubkey,\n+\t\t\tsecret.GetPrivKey(),\n+\t\t\tmapKeyMetadata[pubkey.GetID()]);\n+\t}\n+\treturn true;\n }\n \n bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n-                            const std::vector<unsigned char> &vchCryptedSecret)\n+\tconst vector<unsigned char> &vchCryptedSecret)\n {\n-    if (!CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret))\n-        return false;\n-    if (!fFileBacked)\n-        return true;\n-    {\n-        LOCK(cs_wallet);\n-        if (pwalletdbEncryption)\n-            return pwalletdbEncryption->WriteCryptedKey(vchPubKey,\n-                                                        vchCryptedSecret,\n-                                                        mapKeyMetadata[vchPubKey.GetID()]);\n-        else\n-            return CWalletDB(strWalletFile).WriteCryptedKey(vchPubKey,\n-                                                            vchCryptedSecret,\n-                                                            mapKeyMetadata[vchPubKey.GetID()]);\n-    }\n-    return false;\n+\tif (!CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret))\n+\t\treturn false;\n+\tif (!fFileBacked)\n+\t\treturn true;\n+\t{\n+\t\tLOCK(cs_wallet);\n+\t\tif (pwalletdbEncryption)\n+\t\t\treturn pwalletdbEncryption->WriteCryptedKey(vchPubKey,\n+\t\t\t\tvchCryptedSecret,\n+\t\t\t\tmapKeyMetadata[vchPubKey.GetID()]);\n+\t\telse\n+\t\t\treturn CWalletDB(strWalletFile).WriteCryptedKey(vchPubKey,\n+\t\t\t\tvchCryptedSecret,\n+\t\t\t\tmapKeyMetadata[vchPubKey.GetID()]);\n+\t}\n+\treturn false;\n }\n \n-bool CWallet::LoadKeyMetadata(const CTxDestination& keyID, const CKeyMetadata &meta)\n+bool CWallet::LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &meta)\n {\n-    AssertLockHeld(cs_wallet); // mapKeyMetadata\n-    UpdateTimeFirstKey(meta.nCreateTime);\n-    mapKeyMetadata[keyID] = meta;\n-    return true;\n-}\n+\tAssertLockHeld(cs_wallet); // mapKeyMetadata\n+\tif (meta.nCreateTime && (!nTimeFirstKey || meta.nCreateTime < nTimeFirstKey))\n+\t\tnTimeFirstKey = meta.nCreateTime;\n \n-bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n-{\n-    return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);\n+\tmapKeyMetadata[pubkey.GetID()] = meta;\n+\treturn true;\n }\n \n-void CWallet::UpdateTimeFirstKey(int64_t nCreateTime)\n+bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n-    AssertLockHeld(cs_wallet);\n-    if (nCreateTime <= 1) {\n-        // Cannot determine birthday information, so set the wallet birthday to\n-        // the beginning of time.\n-        nTimeFirstKey = 1;\n-    } else if (!nTimeFirstKey || nCreateTime < nTimeFirstKey) {\n-        nTimeFirstKey = nCreateTime;\n-    }\n+\treturn CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);\n }\n \n bool CWallet::AddCScript(const CScript& redeemScript)\n@@ -448,7 +325,7 @@ bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool fForMixingOnl\n                 return false;\n             if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, vMasterKey))\n                 continue; // try another master key\n-            if (CCryptoKeyStore::Unlock(vMasterKey, fForMixingOnly)) {\n+            if (CCryptoKeyStore::Unlock(vMasterKey)) {\n                 if(nWalletBackups == -2) {\n                     TopUpKeyPool();\n                     LogPrintf(\"Keypool replenished, re-initializing automatic backups.\\n\");\n@@ -751,133 +628,102 @@ void CWallet::AddToSpends(const uint256& wtxid)\n \n bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n {\n-    if (IsCrypted())\n-        return false;\n-\n-    CKeyingMaterial vMasterKey;\n-\n-    vMasterKey.resize(WALLET_CRYPTO_KEY_SIZE);\n-    GetStrongRandBytes(&vMasterKey[0], WALLET_CRYPTO_KEY_SIZE);\n-\n-    CMasterKey kMasterKey;\n-\n-    kMasterKey.vchSalt.resize(WALLET_CRYPTO_SALT_SIZE);\n-    GetStrongRandBytes(&kMasterKey.vchSalt[0], WALLET_CRYPTO_SALT_SIZE);\n-\n-    CCrypter crypter;\n-    int64_t nStartTime = GetTimeMillis();\n-    crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, 25000, kMasterKey.nDerivationMethod);\n-    kMasterKey.nDeriveIterations = 2500000 / ((double)(GetTimeMillis() - nStartTime));\n-\n-    nStartTime = GetTimeMillis();\n-    crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, kMasterKey.nDeriveIterations, kMasterKey.nDerivationMethod);\n-    kMasterKey.nDeriveIterations = (kMasterKey.nDeriveIterations + kMasterKey.nDeriveIterations * 100 / ((double)(GetTimeMillis() - nStartTime))) / 2;\n-\n-    if (kMasterKey.nDeriveIterations < 25000)\n-        kMasterKey.nDeriveIterations = 25000;\n-\n-    LogPrintf(\"Encrypting Wallet with an nDeriveIterations of %i\\n\", kMasterKey.nDeriveIterations);\n-\n-    if (!crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, kMasterKey.nDeriveIterations, kMasterKey.nDerivationMethod))\n-        return false;\n-    if (!crypter.Encrypt(vMasterKey, kMasterKey.vchCryptedKey))\n-        return false;\n-\n-    {\n-        LOCK(cs_wallet);\n-        mapMasterKeys[++nMasterKeyMaxID] = kMasterKey;\n-        if (fFileBacked)\n-        {\n-            assert(!pwalletdbEncryption);\n-            pwalletdbEncryption = new CWalletDB(strWalletFile);\n-            if (!pwalletdbEncryption->TxnBegin()) {\n-                delete pwalletdbEncryption;\n-                pwalletdbEncryption = NULL;\n-                return false;\n-            }\n-            pwalletdbEncryption->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n-        }\n-\n-        // must get current HD chain before EncryptKeys\n-        CHDChain hdChainCurrent;\n-        GetHDChain(hdChainCurrent);\n-\n-        if (!EncryptKeys(vMasterKey))\n-        {\n-            if (fFileBacked) {\n-                pwalletdbEncryption->TxnAbort();\n-                delete pwalletdbEncryption;\n-            }\n-            // We now probably have half of our keys encrypted in memory, and half not...\n-            // die and let the user reload the unencrypted wallet.\n-            assert(false);\n-        }\n-\n-        if (!hdChainCurrent.IsNull()) {\n-            assert(EncryptHDChain(vMasterKey));\n-\n-            CHDChain hdChainCrypted;\n-            assert(GetHDChain(hdChainCrypted));\n-\n-            DBG(\n-                printf(\"EncryptWallet -- current seed: '%s'\\n\", HexStr(hdChainCurrent.GetSeed()).c_str());\n-                printf(\"EncryptWallet -- crypted seed: '%s'\\n\", HexStr(hdChainCrypted.GetSeed()).c_str());\n-            );\n-\n-            // ids should match, seed hashes should not\n-            assert(hdChainCurrent.GetID() == hdChainCrypted.GetID());\n-            assert(hdChainCurrent.GetSeedHash() != hdChainCrypted.GetSeedHash());\n-\n-            assert(SetCryptedHDChain(hdChainCrypted, false));\n-        }\n-\n-        // Encryption was introduced in version 0.4.0\n-        SetMinVersion(FEATURE_WALLETCRYPT, pwalletdbEncryption, true);\n-\n-        if (fFileBacked)\n-        {\n-            if (!pwalletdbEncryption->TxnCommit()) {\n-                delete pwalletdbEncryption;\n-                // We now have keys encrypted in memory, but not on disk...\n-                // die to avoid confusion and let the user reload the unencrypted wallet.\n-                assert(false);\n-            }\n-\n-            delete pwalletdbEncryption;\n-            pwalletdbEncryption = NULL;\n-        }\n-\n-        Lock();\n-        Unlock(strWalletPassphrase);\n-\n-        // if we are not using HD, generate new keypool\n-        if(IsHDEnabled()) {\n-            TopUpKeyPool();\n-        }\n-        else {\n-            NewKeyPool();\n-        }\n-\n-        Lock();\n-\n-        // Need to completely rewrite the wallet file; if we don't, bdb might keep\n-        // bits of the unencrypted private key in slack space in the database file.\n-        CDB::Rewrite(strWalletFile);\n-\n-        // Update KeePass if necessary\n-        if(GetBoolArg(\"-keepass\", false)) {\n-            LogPrintf(\"CWallet::EncryptWallet -- Updating KeePass with new passphrase\");\n-            try {\n-                keePassInt.updatePassphrase(strWalletPassphrase);\n-            } catch (std::exception& e) {\n-                LogPrintf(\"CWallet::EncryptWallet -- could not update passphrase in KeePass: Error: %s\\n\", e.what());\n-            }\n-        }\n-\n-    }\n-    NotifyStatusChanged(this);\n-\n-    return true;\n+\tif (IsCrypted())\n+\t\treturn false;\n+\n+\tCKeyingMaterial vMasterKey;\n+\n+\tvMasterKey.resize(WALLET_CRYPTO_KEY_SIZE);\n+\tGetStrongRandBytes(&vMasterKey[0], WALLET_CRYPTO_KEY_SIZE);\n+\n+\tCMasterKey kMasterKey;\n+\n+\tkMasterKey.vchSalt.resize(WALLET_CRYPTO_SALT_SIZE);\n+\tGetStrongRandBytes(&kMasterKey.vchSalt[0], WALLET_CRYPTO_SALT_SIZE);\n+\n+\tCCrypter crypter;\n+\tint64_t nStartTime = GetTimeMillis();\n+\tcrypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, 25000, kMasterKey.nDerivationMethod);\n+\tkMasterKey.nDeriveIterations = 2500000 / ((double)(GetTimeMillis() - nStartTime));\n+\n+\tnStartTime = GetTimeMillis();\n+\tcrypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, kMasterKey.nDeriveIterations, kMasterKey.nDerivationMethod);\n+\tkMasterKey.nDeriveIterations = (kMasterKey.nDeriveIterations + kMasterKey.nDeriveIterations * 100 / ((double)(GetTimeMillis() - nStartTime))) / 2;\n+\n+\tif (kMasterKey.nDeriveIterations < 25000)\n+\t\tkMasterKey.nDeriveIterations = 25000;\n+\n+\tLogPrintf(\"Encrypting Wallet with an nDeriveIterations of %i\\n\", kMasterKey.nDeriveIterations);\n+\n+\tif (!crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, kMasterKey.nDeriveIterations, kMasterKey.nDerivationMethod))\n+\t\treturn false;\n+\tif (!crypter.Encrypt(vMasterKey, kMasterKey.vchCryptedKey))\n+\t\treturn false;\n+\n+\t{\n+\t\tLOCK(cs_wallet);\n+\t\tmapMasterKeys[++nMasterKeyMaxID] = kMasterKey;\n+\t\tif (fFileBacked)\n+\t\t{\n+\t\t\tassert(!pwalletdbEncryption);\n+\t\t\tpwalletdbEncryption = new CWalletDB(strWalletFile);\n+\t\t\tif (!pwalletdbEncryption->TxnBegin()) {\n+\t\t\t\tdelete pwalletdbEncryption;\n+\t\t\t\tpwalletdbEncryption = NULL;\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tpwalletdbEncryption->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n+\t\t}\n+\n+\t\tif (!EncryptKeys(vMasterKey))\n+\t\t{\n+\t\t\tif (fFileBacked) {\n+\t\t\t\tpwalletdbEncryption->TxnAbort();\n+\t\t\t\tdelete pwalletdbEncryption;\n+\t\t\t}\n+\t\t\t// We now probably have half of our keys encrypted in memory, and half not...\n+\t\t\t// die and let the user reload the unencrypted wallet.\n+\t\t\tassert(false);\n+\t\t}\n+\n+\t\t// Encryption was introduced in version 0.4.0\n+\t\tSetMinVersion(FEATURE_WALLETCRYPT, pwalletdbEncryption, true);\n+\n+\t\tif (fFileBacked)\n+\t\t{\n+\t\t\tif (!pwalletdbEncryption->TxnCommit()) {\n+\t\t\t\tdelete pwalletdbEncryption;\n+\t\t\t\t// We now have keys encrypted in memory, but not on disk...\n+\t\t\t\t// die to avoid confusion and let the user reload the unencrypted wallet.\n+\t\t\t\tassert(false);\n+\t\t\t}\n+\n+\t\t\tdelete pwalletdbEncryption;\n+\t\t\tpwalletdbEncryption = NULL;\n+\t\t}\n+\n+\t\tLock();\n+\t\tUnlock(strWalletPassphrase);\n+\n+\t\t// if we are using HD, replace the HD master key (seed) with a new one\n+\t\tif (!hdChain.masterKeyID.IsNull()) {\n+\t\t\tCKey key;\n+\t\t\tCPubKey masterPubKey = GenerateNewHDMasterKey();\n+\t\t\tif (!SetHDMasterKey(masterPubKey))\n+\t\t\t\treturn false;\n+\t\t}\n+\n+\t\tNewKeyPool();\n+\t\tLock();\n+\n+\t\t// Need to completely rewrite the wallet file; if we don't, bdb might keep\n+\t\t// bits of the unencrypted private key in slack space in the database file.\n+\t\tCDB::Rewrite(strWalletFile);\n+\n+\t}\n+\tNotifyStatusChanged(this);\n+\n+\treturn true;\n }\n \n DBErrors CWallet::ReorderTransactions()\n@@ -1570,105 +1416,6 @@ CAmount CWallet::GetChange(const CTxOut& txout) const\n     return (IsChange(txout) ? txout.nValue : 0);\n }\n \n-void CWallet::GenerateNewHDChain()\n-{\n-    CHDChain newHdChain;\n-\n-    std::string strSeed = GetArg(\"-hdseed\", \"not hex\");\n-\n-    if(IsArgSet(\"-hdseed\") && IsHex(strSeed)) {\n-        std::vector<unsigned char> vchSeed = ParseHex(strSeed);\n-        if (!newHdChain.SetSeed(SecureVector(vchSeed.begin(), vchSeed.end()), true))\n-            throw std::runtime_error(std::string(__func__) + \": SetSeed failed\");\n-    }\n-    else {\n-        if (IsArgSet(\"-hdseed\") && !IsHex(strSeed))\n-            LogPrintf(\"CWallet::GenerateNewHDChain -- Incorrect seed, generating random one instead\\n\");\n-\n-        // NOTE: empty mnemonic means \"generate a new one for me\"\n-        std::string strMnemonic = GetArg(\"-mnemonic\", \"\");\n-        // NOTE: default mnemonic passphrase is an empty string\n-        std::string strMnemonicPassphrase = GetArg(\"-mnemonicpassphrase\", \"\");\n-\n-        SecureVector vchMnemonic(strMnemonic.begin(), strMnemonic.end());\n-        SecureVector vchMnemonicPassphrase(strMnemonicPassphrase.begin(), strMnemonicPassphrase.end());\n-\n-        if (!newHdChain.SetMnemonic(vchMnemonic, vchMnemonicPassphrase, true))\n-            throw std::runtime_error(std::string(__func__) + \": SetMnemonic failed\");\n-    }\n-    newHdChain.Debug(__func__);\n-\n-    if (!SetHDChain(newHdChain, false))\n-        throw std::runtime_error(std::string(__func__) + \": SetHDChain failed\");\n-\n-    // clean up\n-    ForceRemoveArg(\"-hdseed\");\n-    ForceRemoveArg(\"-mnemonic\");\n-    ForceRemoveArg(\"-mnemonicpassphrase\");\n-}\n-\n-bool CWallet::SetHDChain(const CHDChain& chain, bool memonly)\n-{\n-    LOCK(cs_wallet);\n-\n-    if (!CCryptoKeyStore::SetHDChain(chain))\n-        return false;\n-\n-    if (!memonly && !CWalletDB(strWalletFile).WriteHDChain(chain))\n-        throw std::runtime_error(std::string(__func__) + \": WriteHDChain failed\");\n-\n-    return true;\n-}\n-\n-bool CWallet::SetCryptedHDChain(const CHDChain& chain, bool memonly)\n-{\n-    LOCK(cs_wallet);\n-\n-    if (!CCryptoKeyStore::SetCryptedHDChain(chain))\n-        return false;\n-\n-    if (!memonly) {\n-        if (!fFileBacked)\n-            return false;\n-        if (pwalletdbEncryption) {\n-            if (!pwalletdbEncryption->WriteCryptedHDChain(chain))\n-                throw std::runtime_error(std::string(__func__) + \": WriteCryptedHDChain failed\");\n-        } else {\n-            if (!CWalletDB(strWalletFile).WriteCryptedHDChain(chain))\n-                throw std::runtime_error(std::string(__func__) + \": WriteCryptedHDChain failed\");\n-        }\n-    }\n-\n-    return true;\n-}\n-\n-bool CWallet::GetDecryptedHDChain(CHDChain& hdChainRet)\n-{\n-    LOCK(cs_wallet);\n-\n-    CHDChain hdChainTmp;\n-    if (!GetHDChain(hdChainTmp)) {\n-        return false;\n-    }\n-\n-    if (!DecryptHDChain(hdChainTmp))\n-        return false;\n-\n-    // make sure seed matches this chain\n-    if (hdChainTmp.GetID() != hdChainTmp.GetSeedHash())\n-        return false;\n-\n-    hdChainRet = hdChainTmp;\n-\n-    return true;\n-}\n-\n-bool CWallet::IsHDEnabled()\n-{\n-    CHDChain hdChainCurrent;\n-    return GetHDChain(hdChainCurrent);\n-}\n-\n bool CWallet::IsMine(const CTransaction& tx) const\n {\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n@@ -1738,7 +1485,62 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n     }\n     return nChange;\n }\n+CPubKey CWallet::GenerateNewHDMasterKey()\n+{\n+\tCKey key;\n+\tkey.MakeNewKey(true);\n+\n+\tint64_t nCreationTime = GetTime();\n+\tCKeyMetadata metadata(nCreationTime);\n+\n+\t// calculate the pubkey\n+\tCPubKey pubkey = key.GetPubKey();\n+\tassert(key.VerifyPubKey(pubkey));\n \n+\t// set the hd keypath to \"m\" -> Master, refers the masterkeyid to itself\n+\tmetadata.hdKeypath = \"m\";\n+\tmetadata.hdMasterKeyID = pubkey.GetID();\n+\n+\t{\n+\t\tLOCK(cs_wallet);\n+\n+\t\t// mem store the metadata\n+\t\tmapKeyMetadata[pubkey.GetID()] = metadata;\n+\n+\t\t// write the key&metadata to the database\n+\t\tif (!AddKeyPubKey(key, pubkey))\n+\t\t\tthrow std::runtime_error(std::string(__func__) + \": AddKeyPubKey failed\");\n+\t}\n+\n+\treturn pubkey;\n+}\n+\n+bool CWallet::SetHDMasterKey(const CPubKey& pubkey)\n+{\n+\tLOCK(cs_wallet);\n+\n+\t// ensure this wallet.dat can only be opened by clients supporting HD\n+\tSetMinVersion(FEATURE_HD);\n+\n+\t// store the keyid (hash160) together with\n+\t// the child index counter in the database\n+\t// as a hdchain object\n+\tCHDChain newHdChain;\n+\tnewHdChain.masterKeyID = pubkey.GetID();\n+\tSetHDChain(newHdChain, false);\n+\n+\treturn true;\n+}\n+\n+bool CWallet::SetHDChain(const CHDChain& chain, bool memonly)\n+{\n+\tLOCK(cs_wallet);\n+\tif (!memonly && !CWalletDB(strWalletFile).WriteHDChain(chain))\n+\t\tthrow runtime_error(std::string(__func__) + \": writing chain failed\");\n+\n+\thdChain = chain;\n+\treturn true;\n+}\n int64_t CWalletTx::GetTxTime() const\n {\n     int64_t n = nTimeSmart;\n@@ -4090,7 +3892,16 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n     CWalletDB(strWalletFile).ErasePurpose(CSyscoinAddress(address).ToString());\n     return CWalletDB(strWalletFile).EraseName(CSyscoinAddress(address).ToString());\n }\n-\n+bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)\n+ {\n+\tif (fFileBacked)\n+\t\t{\n+\t\tif (!CWalletDB(strWalletFile).WriteDefaultKey(vchPubKey))\n+\t\t\t return false;\n+\t\t}\n+\tvchDefaultKey = vchPubKey;\n+\treturn true;\n+}\n /**\n  * Mark old keypool keys as used,\n  * and generate all new keys \n@@ -4769,10 +4580,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n         strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), DEFAULT_SEND_FREE_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n-    strUsage += HelpMessageOpt(\"-usehd\", _(\"Use hierarchical deterministic key generation (HD) after BIP39/BIP44. Only has effect during wallet creation/first start\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_USE_HD_WALLET));\n-    strUsage += HelpMessageOpt(\"-mnemonic\", _(\"User defined mnemonic for HD wallet (bip39). Only has effect during wallet creation/first start (default: randomly generated)\"));\n-    strUsage += HelpMessageOpt(\"-mnemonicpassphrase\", _(\"User defined mnemonic passphrase for HD wallet (BIP39). Only has effect during wallet creation/first start (default: empty string)\"));\n-    strUsage += HelpMessageOpt(\"-hdseed\", _(\"User defined seed for HD wallet (should be in hex). Only has effect during wallet creation/first start (default: randomly generated)\"));\n+\tstrUsage += HelpMessageOpt(\"-usehd\", _(\"Use hierarchical deterministic key generation (HD) after BIP32. Only has effect during wallet creation/first start\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_USE_HD_WALLET));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), DEFAULT_WALLET_DAT));\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n@@ -4800,231 +4608,168 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n     return strUsage;\n }\n \n-CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n-{\n-    // needed to restore wallet transaction meta data after -zapwallettxes\n-    std::vector<CWalletTx> vWtx;\n-\n-    if (GetBoolArg(\"-zapwallettxes\", false)) {\n-        uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n-\n-        CWallet *tempWallet = new CWallet(walletFile);\n-        DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n-        if (nZapWalletRet != DB_LOAD_OK) {\n-            InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n-            return NULL;\n-        }\n-\n-        delete tempWallet;\n-        tempWallet = NULL;\n-    }\n-\n-    uiInterface.InitMessage(_(\"Loading wallet...\"));\n-\n-    int64_t nStart = GetTimeMillis();\n-    bool fFirstRun = true;\n-    CWallet *walletInstance = new CWallet(walletFile);\n-    DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n-    if (nLoadWalletRet != DB_LOAD_OK)\n-    {\n-        if (nLoadWalletRet == DB_CORRUPT) {\n-            InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n-            return NULL;\n-        }\n-        else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n-        {\n-            InitWarning(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n-                                         \" or address book entries might be missing or incorrect.\"),\n-                walletFile));\n-        }\n-        else if (nLoadWalletRet == DB_TOO_NEW) {\n-            InitError(strprintf(_(\"Error loading %s: Wallet requires newer version of %s\"), walletFile, _(PACKAGE_NAME)));\n-            return NULL;\n-        }\n-        else if (nLoadWalletRet == DB_NEED_REWRITE)\n-        {\n-            InitError(strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)));\n-            return NULL;\n-        }\n-        else {\n-            InitError(strprintf(_(\"Error loading %s\"), walletFile));\n-            return NULL;\n-        }\n-    }\n-\n-    if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n-    {\n-        int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n-        if (nMaxVersion == 0) // the -upgradewallet without argument case\n-        {\n-            LogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n-            nMaxVersion = CLIENT_VERSION;\n-            walletInstance->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n-        }\n-        else\n-            LogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n-        if (nMaxVersion < walletInstance->GetVersion())\n-        {\n-            InitError(_(\"Cannot downgrade wallet\"));\n-            return NULL;\n-        }\n-        walletInstance->SetMaxVersion(nMaxVersion);\n-    }\n-\n-    if (fFirstRun)\n-    {\n-        // Create new keyUser and set as default key\n-        if (GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET) && !walletInstance->IsHDEnabled()) {\n-            if (GetArg(\"-mnemonicpassphrase\", \"\").size() > 256) {\n-                InitError(_(\"Mnemonic passphrase is too long, must be at most 256 characters\"));\n-                return NULL;\n-            }\n-            // generate a new master key\n-            walletInstance->GenerateNewHDChain();\n-\n-            // ensure this wallet.dat can only be opened by clients supporting HD\n-            walletInstance->SetMinVersion(FEATURE_HD);\n-        }\n-\n-\t\t// Top up the keypool\n-        if (!walletInstance->TopUpKeyPool()) {\n-            InitError(_(\"Unable to generate initial keys\") += \"\\n\");\n-            return NULL;\n-        }\n-\n-        walletInstance->SetBestChain(chainActive.GetLocator());\n-\n-        // Try to create wallet backup right after new wallet was created\n-        std::string strBackupWarning;\n-        std::string strBackupError;\n-        if(!AutoBackupWallet(walletInstance, \"\", strBackupWarning, strBackupError)) {\n-            if (!strBackupWarning.empty()) {\n-                InitWarning(strBackupWarning);\n-            }\n-            if (!strBackupError.empty()) {\n-                InitError(strBackupError);\n-                return NULL;\n-            }\n-        }\n-\n-    }\n-    else if (IsArgSet(\"-usehd\")) {\n-        bool useHD = GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET);\n-        if (walletInstance->IsHDEnabled() && !useHD) {\n-            InitError(strprintf(_(\"Error loading %s: You can't disable HD on a already existing HD wallet\"),\n-                                walletInstance->strWalletFile));\n-            return NULL;\n-        }\n-        if (!walletInstance->IsHDEnabled() && useHD) {\n-            InitError(strprintf(_(\"Error loading %s: You can't enable HD on a already existing non-HD wallet\"),\n-                                walletInstance->strWalletFile));\n-            return NULL;\n-        }\n-    }\n-\n-    // Warn user every time he starts non-encrypted HD wallet\n-    if (GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET) && !walletInstance->IsLocked()) {\n-        InitWarning(_(\"Make sure to encrypt your wallet and delete all non-encrypted backups after you verified that wallet works!\"));\n-    }\n-\n-    LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n-\n-    RegisterValidationInterface(walletInstance);\n-\n-    CBlockIndex *pindexRescan = chainActive.Tip();\n-    if (GetBoolArg(\"-rescan\", false))\n-        pindexRescan = chainActive.Genesis();\n-    else\n-    {\n-        CWalletDB walletdb(walletFile);\n-        CBlockLocator locator;\n-        if (walletdb.ReadBestBlock(locator))\n-            pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n-        else\n-            pindexRescan = chainActive.Genesis();\n-    }\n-    if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n-    {\n-        //We can't rescan beyond non-pruned blocks, stop and throw an error\n-        //this might happen if a user uses a old wallet within a pruned node\n-        // or if he ran -disablewallet for a longer time, then decided to re-enable\n-        if (fPruneMode)\n-        {\n-            CBlockIndex *block = chainActive.Tip();\n-            while (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA) && block->pprev->nTx > 0 && pindexRescan != block)\n-                block = block->pprev;\n-\n-            if (pindexRescan != block) {\n-                InitError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\"));\n-                return NULL;\n-            }\n-        }\n-\n-        uiInterface.InitMessage(_(\"Rescanning...\"));\n-        LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n-        nStart = GetTimeMillis();\n-        walletInstance->ScanForWalletTransactions(pindexRescan, true);\n-        LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n-        walletInstance->SetBestChain(chainActive.GetLocator());\n-        CWalletDB::IncrementUpdateCounter();\n-\n-        // Restore wallet transaction metadata after -zapwallettxes=1\n-        if (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n-        {\n-            CWalletDB walletdb(walletFile);\n-\n-            BOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n-            {\n-                uint256 hash = wtxOld.GetHash();\n-                std::map<uint256, CWalletTx>::iterator mi = walletInstance->mapWallet.find(hash);\n-                if (mi != walletInstance->mapWallet.end())\n-                {\n-                    const CWalletTx* copyFrom = &wtxOld;\n-                    CWalletTx* copyTo = &mi->second;\n-                    copyTo->mapValue = copyFrom->mapValue;\n-                    copyTo->vOrderForm = copyFrom->vOrderForm;\n-                    copyTo->nTimeReceived = copyFrom->nTimeReceived;\n-                    copyTo->nTimeSmart = copyFrom->nTimeSmart;\n-                    copyTo->fFromMe = copyFrom->fFromMe;\n-                    copyTo->strFromAccount = copyFrom->strFromAccount;\n-                    copyTo->nOrderPos = copyFrom->nOrderPos;\n-                    walletdb.WriteTx(*copyTo);\n-                }\n-            }\n-        }\n-    }\n-    walletInstance->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n-\n-    {\n-        LOCK(walletInstance->cs_wallet);\n-        LogPrintf(\"setExternalKeyPool.size() = %u\\n\",   walletInstance->KeypoolCountExternalKeys());\n-        LogPrintf(\"setInternalKeyPool.size() = %u\\n\",   walletInstance->KeypoolCountInternalKeys());\n-        LogPrintf(\"mapWallet.size() = %u\\n\",            walletInstance->mapWallet.size());\n-        LogPrintf(\"mapAddressBook.size() = %u\\n\",       walletInstance->mapAddressBook.size());\n-    }\n-\n-    return walletInstance;\n-}\n-\n bool CWallet::InitLoadWallet()\n {\n-    if (GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n-        pwalletMain = NULL;\n-        LogPrintf(\"Wallet disabled!\\n\");\n-        return true;\n-    }\n-\n-    std::string walletFile = GetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n-\n-    CWallet * const pwallet = CreateWalletFromFile(walletFile);\n-    if (!pwallet) {\n-        return false;\n-    }\n-    pwalletMain = pwallet;\n+\tstd::string walletFile = GetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n+\n+\t// needed to restore wallet transaction meta data after -zapwallettxes\n+\tstd::vector<CWalletTx> vWtx;\n+\n+\tif (GetBoolArg(\"-zapwallettxes\", false)) {\n+\t\tuiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n+\n+\t\tCWallet *tempWallet = new CWallet(walletFile);\n+\t\tDBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n+\t\tif (nZapWalletRet != DB_LOAD_OK) {\n+\t\t\treturn InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n+\t\t}\n+\n+\t\tdelete tempWallet;\n+\t\ttempWallet = NULL;\n+\t}\n+\n+\tuiInterface.InitMessage(_(\"Loading wallet...\"));\n+\n+\tint64_t nStart = GetTimeMillis();\n+\tbool fFirstRun = true;\n+\tCWallet *walletInstance = new CWallet(walletFile);\n+\tDBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n+\tif (nLoadWalletRet != DB_LOAD_OK)\n+\t{\n+\t\tif (nLoadWalletRet == DB_CORRUPT)\n+\t\t\treturn InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n+\t\telse if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n+\t\t{\n+\t\t\tInitWarning(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n+\t\t\t\t\" or address book entries might be missing or incorrect.\"),\n+\t\t\t\twalletFile));\n+\t\t}\n+\t\telse if (nLoadWalletRet == DB_TOO_NEW)\n+\t\t\treturn InitError(strprintf(_(\"Error loading %s: Wallet requires newer version of %s\"),\n+\t\t\t\twalletFile, _(PACKAGE_NAME)));\n+\t\telse if (nLoadWalletRet == DB_NEED_REWRITE)\n+\t\t{\n+\t\t\treturn InitError(strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)));\n+\t\t}\n+\t\telse\n+\t\t\treturn InitError(strprintf(_(\"Error loading %s\"), walletFile));\n+\t}\n+\n+\tif (GetBoolArg(\"-upgradewallet\", fFirstRun))\n+\t{\n+\t\tint nMaxVersion = GetArg(\"-upgradewallet\", 0);\n+\t\tif (nMaxVersion == 0) // the -upgradewallet without argument case\n+\t\t{\n+\t\t\tLogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n+\t\t\tnMaxVersion = CLIENT_VERSION;\n+\t\t\twalletInstance->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n+\t\t}\n+\t\telse\n+\t\t\tLogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n+\t\tif (nMaxVersion < walletInstance->GetVersion())\n+\t\t{\n+\t\t\treturn InitError(_(\"Cannot downgrade wallet\"));\n+\t\t}\n+\t\twalletInstance->SetMaxVersion(nMaxVersion);\n+\t}\n+\n+\tif (fFirstRun)\n+\t{\n+\t\t// Create new keyUser and set as default key\n+\t\tif (GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET) && walletInstance->hdChain.masterKeyID.IsNull()) {\n+\t\t\t// generate a new master key\n+\t\t\tCPubKey masterPubKey = walletInstance->GenerateNewHDMasterKey();\n+\t\t\tif (!walletInstance->SetHDMasterKey(masterPubKey))\n+\t\t\t\tthrow std::runtime_error(std::string(__func__) + \": Storing master key failed\");\n+\t\t}\n+\t\tCPubKey newDefaultKey;\n+\t\tif (walletInstance->GetKeyFromPool(newDefaultKey)) {\n+\t\t\twalletInstance->SetDefaultKey(newDefaultKey);\n+\t\t\tif (!walletInstance->SetAddressBook(walletInstance->vchDefaultKey.GetID(), \"\", \"receive\"))\n+\t\t\t\treturn InitError(_(\"Cannot write default address\") += \"\\n\");\n+\t\t}\n+\n+\t\twalletInstance->SetBestChain(chainActive.GetLocator());\n+\t}\n+\telse if (mapArgs.count(\"-usehd\")) {\n+\t\tbool useHD = GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET);\n+\t\tif (!walletInstance->hdChain.masterKeyID.IsNull() && !useHD)\n+\t\t\treturn InitError(strprintf(_(\"Error loading %s: You can't disable HD on a already existing HD wallet\"), walletFile));\n+\t\tif (walletInstance->hdChain.masterKeyID.IsNull() && useHD)\n+\t\t\treturn InitError(strprintf(_(\"Error loading %s: You can't enable HD on a already existing non-HD wallet\"), walletFile));\n+\t}\n+\n+\tLogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n+\n+\tRegisterValidationInterface(walletInstance);\n+\n+\tCBlockIndex *pindexRescan = chainActive.Tip();\n+\tif (GetBoolArg(\"-rescan\", false))\n+\t\tpindexRescan = chainActive.Genesis();\n+\telse\n+\t{\n+\t\tCWalletDB walletdb(walletFile);\n+\t\tCBlockLocator locator;\n+\t\tif (walletdb.ReadBestBlock(locator))\n+\t\t\tpindexRescan = FindForkInGlobalIndex(chainActive, locator);\n+\t\telse\n+\t\t\tpindexRescan = chainActive.Genesis();\n+\t}\n+\tif (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n+\t{\n+\t\t//We can't rescan beyond non-pruned blocks, stop and throw an error\n+\t\t//this might happen if a user uses a old wallet within a pruned node\n+\t\t// or if he ran -disablewallet for a longer time, then decided to re-enable\n+\t\tif (fPruneMode)\n+\t\t{\n+\t\t\tCBlockIndex *block = chainActive.Tip();\n+\t\t\twhile (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA) && block->pprev->nTx > 0 && pindexRescan != block)\n+\t\t\t\tblock = block->pprev;\n+\n+\t\t\tif (pindexRescan != block)\n+\t\t\t\treturn InitError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\"));\n+\t\t}\n+\n+\t\tuiInterface.InitMessage(_(\"Rescanning...\"));\n+\t\tLogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n+\t\tnStart = GetTimeMillis();\n+\t\twalletInstance->ScanForWalletTransactions(pindexRescan, true);\n+\t\tLogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n+\t\twalletInstance->SetBestChain(chainActive.GetLocator());\n+\t\tnWalletDBUpdated++;\n+\n+\t\t// Restore wallet transaction metadata after -zapwallettxes=1\n+\t\tif (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n+\t\t{\n+\t\t\tCWalletDB walletdb(walletFile);\n+\n+\t\t\tBOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n+\t\t\t{\n+\t\t\t\tuint256 hash = wtxOld.GetHash();\n+\t\t\t\tstd::map<uint256, CWalletTx>::iterator mi = walletInstance->mapWallet.find(hash);\n+\t\t\t\tif (mi != walletInstance->mapWallet.end())\n+\t\t\t\t{\n+\t\t\t\t\tconst CWalletTx* copyFrom = &wtxOld;\n+\t\t\t\t\tCWalletTx* copyTo = &mi->second;\n+\t\t\t\t\tcopyTo->mapValue = copyFrom->mapValue;\n+\t\t\t\t\tcopyTo->vOrderForm = copyFrom->vOrderForm;\n+\t\t\t\t\tcopyTo->nTimeReceived = copyFrom->nTimeReceived;\n+\t\t\t\t\tcopyTo->nTimeSmart = copyFrom->nTimeSmart;\n+\t\t\t\t\tcopyTo->fFromMe = copyFrom->fFromMe;\n+\t\t\t\t\tcopyTo->strFromAccount = copyFrom->strFromAccount;\n+\t\t\t\t\tcopyTo->nOrderPos = copyFrom->nOrderPos;\n+\t\t\t\t\twalletdb.WriteTx(*copyTo);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\twalletInstance->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n \n-    return true;\n+\tpwalletMain = walletInstance;\n+\treturn true;\n }\n \n+\n std::atomic<bool> CWallet::fFlushThreadRunning(false);\n \n void CWallet::postInitProcess(boost::thread_group& threadGroup)"
      },
      {
        "sha": "af798f2619cfd89047d2c7edc4679eab3926b74e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 15,
        "deletions": 29,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8ca4ecfe46163d0e7fe87f3128441a3d87636956",
        "patch": "@@ -75,7 +75,6 @@ static const bool DEFAULT_DISABLE_WALLET = false;\n \n extern const char * DEFAULT_WALLET_DAT;\n \n-//! if set, all keys will be derived by using BIP39/BIP44\n static const bool DEFAULT_USE_HD_WALLET = true;\n \n bool AutoBackupWallet (CWallet* wallet, const std::string& strWalletFile_, std::string& strBackupWarningRet, std::string& strBackupErrorRet);\n@@ -91,14 +90,13 @@ class CWalletTx;\n /** (client) version numbers for particular wallet features */\n enum WalletFeature\n {\n-    FEATURE_BASE = 10500, // the earliest version new wallets supports (only useful for getinfo's clientversion output)\n+\tFEATURE_BASE = 10500, // the earliest version new wallets supports (only useful for getinfo's clientversion output)\n \n-    FEATURE_WALLETCRYPT = 40000, // wallet encryption\n-    FEATURE_COMPRPUBKEY = 60000, // compressed public keys\n-    FEATURE_HD = 120200,    // Hierarchical key derivation after BIP32 (HD Wallet), BIP44 (multi-coin), BIP39 (mnemonic)\n-                            // which uses on-the-fly private key derivation\n+\tFEATURE_WALLETCRYPT = 40000, // wallet encryption\n+\tFEATURE_COMPRPUBKEY = 60000, // compressed public keys\n \n-    FEATURE_LATEST = 61000\n+\tFEATURE_HD = 130000, // Hierarchical key derivation after BIP32 (HD Wallet)\n+\tFEATURE_LATEST = FEATURE_COMPRPUBKEY // HD is optional, use FEATURE_COMPRPUBKEY as latest version\n };\n \n enum AvailableCoinsType\n@@ -599,8 +597,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n \n-    /* HD derive new child key (on internal or external chain) */\n-    void DeriveNewChildKey(const CKeyMetadata& metadata, CKey& secretRet, uint32_t nAccountIndex, bool fInternal /*= false*/);\n \n     bool fFileBacked;\n \n@@ -705,12 +701,12 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     std::map<CTxDestination, CAddressBookData> mapAddressBook;\n \n+\tCPubKey vchDefaultKey;\n+\n     std::set<COutPoint> setLockedCoins;\n \n     int64_t nKeysLeftSinceAutoBackup;\n \n-    std::map<CKeyID, CHDPubKey> mapHdPubKeys; //<! memory map of HD extended pubkeys\n-\n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n \n     //! check whether we are allowed to upgrade (or already support) to the named feature\n@@ -764,16 +760,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Generate a new key\n      */\n     CPubKey GenerateNewKey(uint32_t nAccountIndex, bool fInternal /*= false*/);\n-    //! HaveKey implementation that also checks the mapHdPubKeys\n     bool HaveKey(const CKeyID &address) const override;\n-    //! GetPubKey implementation that also checks the mapHdPubKeys\n     bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n     //! GetKey implementation that can derive a HD private key on the fly\n     bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n-    //! Adds a HDPubKey into the wallet(database)\n-    bool AddHDPubKey(const CExtPubKey &extPubKey, bool fInternal);\n-    //! loads a HDPubKey into the wallets memory\n-    bool LoadHDPubKey(const CHDPubKey &hdPubKey);\n     //! Adds a key to the store, and saves it to disk.\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n@@ -958,7 +948,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         AssertLockHeld(cs_wallet); // set{Ex,In}ternalKeyPool\n         return setInternalKeyPool.size() + setExternalKeyPool.size();\n     }\n-\n+\tbool SetDefaultKey(const CPubKey &vchPubKey);\n \n     //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n     bool SetMinVersion(enum WalletFeature, CWalletDB* pwalletdbIn = NULL, bool fExplicit = false);\n@@ -1028,19 +1018,15 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     static bool InitAutoBackup();\n \n     bool BackupWallet(const std::string& strDest);\n+\t/* Set the HD chain model (chain child index counters) */\n+\tbool SetHDChain(const CHDChain& chain, bool memonly);\n+\tconst CHDChain& GetHDChain() { return hdChain; }\n \n-    /**\n-     * HD Wallet Functions\n-     */\n+\t/* Generates a new HD master key (will not be activated) */\n+\tCPubKey GenerateNewHDMasterKey();\n \n-    /* Returns true if HD is enabled */\n-    bool IsHDEnabled();\n-    /* Generates a new HD chain */\n-    void GenerateNewHDChain();\n-    /* Set the HD chain model (chain child index counters) */\n-    bool SetHDChain(const CHDChain& chain, bool memonly);\n-    bool SetCryptedHDChain(const CHDChain& chain, bool memonly);\n-    bool GetDecryptedHDChain(CHDChain& hdChainRet);\n+\t/* Set the current HD master key (will reset the chain child index counters) */\n+\tbool SetHDMasterKey(const CPubKey& key);\n };\n \n /** A key allocated from the key pool. */"
      },
      {
        "sha": "7ddb5157ba15af2b90ce3a848b5630658aac46d6",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 858,
        "deletions": 849,
        "changes": 1707,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=8ca4ecfe46163d0e7fe87f3128441a3d87636956",
        "patch": "@@ -1,6 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Syscoin Core developers\n-// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -16,1006 +15,1016 @@\n #include \"utiltime.h\"\n #include \"wallet/wallet.h\"\n \n-#include <atomic>\n-\n+#include <boost/version.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n+#include <boost/scoped_ptr.hpp>\n #include <boost/thread.hpp>\n-// SYSCOIN\n-#include \"alias.h\"\n-static uint64_t nAccountingEntryNumber = 0;\n \n-static std::atomic<unsigned int> nWalletDBUpdateCounter;\n+using namespace std;\n+\n+static uint64_t nAccountingEntryNumber = 0;\n \n //\n // CWalletDB\n //\n \n-bool CWalletDB::WriteName(const std::string& strAddress, const std::string& strName)\n+bool CWalletDB::WriteName(const string& strAddress, const string& strName)\n {\n-    nWalletDBUpdateCounter++;\n-    return Write(make_pair(std::string(\"name\"), strAddress), strName);\n+\tnWalletDBUpdated++;\n+\treturn Write(make_pair(string(\"name\"), strAddress), strName);\n }\n \n-bool CWalletDB::EraseName(const std::string& strAddress)\n+bool CWalletDB::EraseName(const string& strAddress)\n {\n-    // This should only be used for sending addresses, never for receiving addresses,\n-    // receiving addresses must always have an address book entry if they're not change return.\n-    nWalletDBUpdateCounter++;\n-    return Erase(make_pair(std::string(\"name\"), strAddress));\n+\t// This should only be used for sending addresses, never for receiving addresses,\n+\t// receiving addresses must always have an address book entry if they're not change return.\n+\tnWalletDBUpdated++;\n+\treturn Erase(make_pair(string(\"name\"), strAddress));\n }\n \n-bool CWalletDB::WritePurpose(const std::string& strAddress, const std::string& strPurpose)\n+bool CWalletDB::WritePurpose(const string& strAddress, const string& strPurpose)\n {\n-    nWalletDBUpdateCounter++;\n-    return Write(make_pair(std::string(\"purpose\"), strAddress), strPurpose);\n+\tnWalletDBUpdated++;\n+\treturn Write(make_pair(string(\"purpose\"), strAddress), strPurpose);\n }\n \n-bool CWalletDB::ErasePurpose(const std::string& strPurpose)\n+bool CWalletDB::ErasePurpose(const string& strPurpose)\n {\n-    nWalletDBUpdateCounter++;\n-    return Erase(make_pair(std::string(\"purpose\"), strPurpose));\n+\tnWalletDBUpdated++;\n+\treturn Erase(make_pair(string(\"purpose\"), strPurpose));\n }\n \n bool CWalletDB::WriteTx(const CWalletTx& wtx)\n {\n-    nWalletDBUpdateCounter++;\n-    return Write(std::make_pair(std::string(\"tx\"), wtx.GetHash()), wtx);\n+\tnWalletDBUpdated++;\n+\treturn Write(std::make_pair(std::string(\"tx\"), wtx.GetHash()), wtx);\n }\n \n bool CWalletDB::EraseTx(uint256 hash)\n {\n-    nWalletDBUpdateCounter++;\n-    return Erase(std::make_pair(std::string(\"tx\"), hash));\n+\tnWalletDBUpdated++;\n+\treturn Erase(std::make_pair(std::string(\"tx\"), hash));\n }\n \n bool CWalletDB::WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata& keyMeta)\n {\n-    nWalletDBUpdateCounter++;\n+\tnWalletDBUpdated++;\n \n-    if (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n-               keyMeta, false))\n-        return false;\n+\tif (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n+\t\tkeyMeta, false))\n+\t\treturn false;\n \n-    // hash pubkey/privkey to accelerate wallet load\n-    std::vector<unsigned char> vchKey;\n-    vchKey.reserve(vchPubKey.size() + vchPrivKey.size());\n-    vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-    vchKey.insert(vchKey.end(), vchPrivKey.begin(), vchPrivKey.end());\n+\t// hash pubkey/privkey to accelerate wallet load\n+\tstd::vector<unsigned char> vchKey;\n+\tvchKey.reserve(vchPubKey.size() + vchPrivKey.size());\n+\tvchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+\tvchKey.insert(vchKey.end(), vchPrivKey.begin(), vchPrivKey.end());\n \n-    return Write(std::make_pair(std::string(\"key\"), vchPubKey), std::make_pair(vchPrivKey, Hash(vchKey.begin(), vchKey.end())), false);\n+\treturn Write(std::make_pair(std::string(\"key\"), vchPubKey), std::make_pair(vchPrivKey, Hash(vchKey.begin(), vchKey.end())), false);\n }\n \n bool CWalletDB::WriteCryptedKey(const CPubKey& vchPubKey,\n-                                const std::vector<unsigned char>& vchCryptedSecret,\n-                                const CKeyMetadata &keyMeta)\n+\tconst std::vector<unsigned char>& vchCryptedSecret,\n+\tconst CKeyMetadata &keyMeta)\n {\n-    const bool fEraseUnencryptedKey = true;\n-    nWalletDBUpdateCounter++;\n-\n-    if (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n-            keyMeta))\n-        return false;\n-\n-    if (!Write(std::make_pair(std::string(\"ckey\"), vchPubKey), vchCryptedSecret, false))\n-        return false;\n-    if (fEraseUnencryptedKey)\n-    {\n-        Erase(std::make_pair(std::string(\"key\"), vchPubKey));\n-        Erase(std::make_pair(std::string(\"wkey\"), vchPubKey));\n-    }\n-    return true;\n+\tconst bool fEraseUnencryptedKey = true;\n+\tnWalletDBUpdated++;\n+\n+\tif (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n+\t\tkeyMeta))\n+\t\treturn false;\n+\n+\tif (!Write(std::make_pair(std::string(\"ckey\"), vchPubKey), vchCryptedSecret, false))\n+\t\treturn false;\n+\tif (fEraseUnencryptedKey)\n+\t{\n+\t\tErase(std::make_pair(std::string(\"key\"), vchPubKey));\n+\t\tErase(std::make_pair(std::string(\"wkey\"), vchPubKey));\n+\t}\n+\treturn true;\n }\n \n bool CWalletDB::WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)\n {\n-    nWalletDBUpdateCounter++;\n-    return Write(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n+\tnWalletDBUpdated++;\n+\treturn Write(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n }\n \n bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)\n {\n-    nWalletDBUpdateCounter++;\n-    return Write(std::make_pair(std::string(\"cscript\"), hash), *(const CScriptBase*)(&redeemScript), false);\n+\tnWalletDBUpdated++;\n+\treturn Write(std::make_pair(std::string(\"cscript\"), hash), *(const CScriptBase*)(&redeemScript), false);\n }\n \n-bool CWalletDB::WriteWatchOnly(const CScript &dest, const CKeyMetadata& keyMeta)\n+bool CWalletDB::WriteWatchOnly(const CScript &dest)\n {\n-    nWalletDBUpdateCounter++;\n-    if (!Write(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest)), keyMeta))\n-        return false;\n-    return Write(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)), '1');\n+\tnWalletDBUpdated++;\n+\treturn Write(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)), '1');\n }\n \n bool CWalletDB::EraseWatchOnly(const CScript &dest)\n {\n-    nWalletDBUpdateCounter++;\n-    if (!Erase(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest))))\n-        return false;\n-    return Erase(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)));\n+\tnWalletDBUpdated++;\n+\treturn Erase(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)));\n }\n \n bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)\n {\n-    nWalletDBUpdateCounter++;\n-    Write(std::string(\"bestblock\"), CBlockLocator()); // Write empty block locator so versions that require a merkle branch automatically rescan\n-    return Write(std::string(\"bestblock_nomerkle\"), locator);\n+\tnWalletDBUpdated++;\n+\tWrite(std::string(\"bestblock\"), CBlockLocator()); // Write empty block locator so versions that require a merkle branch automatically rescan\n+\treturn Write(std::string(\"bestblock_nomerkle\"), locator);\n }\n \n bool CWalletDB::ReadBestBlock(CBlockLocator& locator)\n {\n-    if (Read(std::string(\"bestblock\"), locator) && !locator.vHave.empty()) return true;\n-    return Read(std::string(\"bestblock_nomerkle\"), locator);\n+\tif (Read(std::string(\"bestblock\"), locator) && !locator.vHave.empty()) return true;\n+\treturn Read(std::string(\"bestblock_nomerkle\"), locator);\n }\n \n bool CWalletDB::WriteOrderPosNext(int64_t nOrderPosNext)\n {\n-    nWalletDBUpdateCounter++;\n-    return Write(std::string(\"orderposnext\"), nOrderPosNext);\n+\tnWalletDBUpdated++;\n+\treturn Write(std::string(\"orderposnext\"), nOrderPosNext);\n+}\n+\n+bool CWalletDB::WriteDefaultKey(const CPubKey& vchPubKey)\n+{\n+\tnWalletDBUpdated++;\n+\treturn Write(std::string(\"defaultkey\"), vchPubKey);\n }\n \n bool CWalletDB::ReadPool(int64_t nPool, CKeyPool& keypool)\n {\n-    return Read(std::make_pair(std::string(\"pool\"), nPool), keypool);\n+\treturn Read(std::make_pair(std::string(\"pool\"), nPool), keypool);\n }\n \n bool CWalletDB::WritePool(int64_t nPool, const CKeyPool& keypool)\n {\n-    nWalletDBUpdateCounter++;\n-    return Write(std::make_pair(std::string(\"pool\"), nPool), keypool);\n+\tnWalletDBUpdated++;\n+\treturn Write(std::make_pair(std::string(\"pool\"), nPool), keypool);\n }\n \n bool CWalletDB::ErasePool(int64_t nPool)\n {\n-    nWalletDBUpdateCounter++;\n-    return Erase(std::make_pair(std::string(\"pool\"), nPool));\n+\tnWalletDBUpdated++;\n+\treturn Erase(std::make_pair(std::string(\"pool\"), nPool));\n }\n \n bool CWalletDB::WriteMinVersion(int nVersion)\n {\n-    return Write(std::string(\"minversion\"), nVersion);\n+\treturn Write(std::string(\"minversion\"), nVersion);\n }\n \n-bool CWalletDB::ReadAccount(const std::string& strAccount, CAccount& account)\n+bool CWalletDB::ReadAccount(const string& strAccount, CAccount& account)\n {\n-    account.SetNull();\n-    return Read(make_pair(std::string(\"acc\"), strAccount), account);\n+\taccount.SetNull();\n+\treturn Read(make_pair(string(\"acc\"), strAccount), account);\n }\n \n-bool CWalletDB::WriteAccount(const std::string& strAccount, const CAccount& account)\n+bool CWalletDB::WriteAccount(const string& strAccount, const CAccount& account)\n {\n-    return Write(make_pair(std::string(\"acc\"), strAccount), account);\n+\treturn Write(make_pair(string(\"acc\"), strAccount), account);\n }\n \n bool CWalletDB::WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry)\n {\n-    return Write(std::make_pair(std::string(\"acentry\"), std::make_pair(acentry.strAccount, nAccEntryNum)), acentry);\n+\treturn Write(std::make_pair(std::string(\"acentry\"), std::make_pair(acentry.strAccount, nAccEntryNum)), acentry);\n }\n \n bool CWalletDB::WriteAccountingEntry_Backend(const CAccountingEntry& acentry)\n {\n-    return WriteAccountingEntry(++nAccountingEntryNumber, acentry);\n+\treturn WriteAccountingEntry(++nAccountingEntryNumber, acentry);\n }\n \n-CAmount CWalletDB::GetAccountCreditDebit(const std::string& strAccount)\n+CAmount CWalletDB::GetAccountCreditDebit(const string& strAccount)\n {\n-    std::list<CAccountingEntry> entries;\n-    ListAccountCreditDebit(strAccount, entries);\n+\tlist<CAccountingEntry> entries;\n+\tListAccountCreditDebit(strAccount, entries);\n \n-    CAmount nCreditDebit = 0;\n-    BOOST_FOREACH (const CAccountingEntry& entry, entries)\n-        nCreditDebit += entry.nCreditDebit;\n+\tCAmount nCreditDebit = 0;\n+\tBOOST_FOREACH(const CAccountingEntry& entry, entries)\n+\t\tnCreditDebit += entry.nCreditDebit;\n \n-    return nCreditDebit;\n+\treturn nCreditDebit;\n }\n \n-void CWalletDB::ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries)\n+void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountingEntry>& entries)\n {\n-    bool fAllAccounts = (strAccount == \"*\");\n-\n-    Dbc* pcursor = GetCursor();\n-    if (!pcursor)\n-        throw std::runtime_error(std::string(__func__) + \": cannot create DB cursor\");\n-    bool setRange = true;\n-    while (true)\n-    {\n-        // Read next record\n-        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        if (setRange)\n-            ssKey << std::make_pair(std::string(\"acentry\"), std::make_pair((fAllAccounts ? std::string(\"\") : strAccount), uint64_t(0)));\n-        CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-        int ret = ReadAtCursor(pcursor, ssKey, ssValue, setRange);\n-        setRange = false;\n-        if (ret == DB_NOTFOUND)\n-            break;\n-        else if (ret != 0)\n-        {\n-            pcursor->close();\n-            throw std::runtime_error(std::string(__func__) + \": error scanning DB\");\n-        }\n+\tbool fAllAccounts = (strAccount == \"*\");\n+\n+\tDbc* pcursor = GetCursor();\n+\tif (!pcursor)\n+\t\tthrow runtime_error(std::string(__func__) + \": cannot create DB cursor\");\n+\tunsigned int fFlags = DB_SET_RANGE;\n+\twhile (true)\n+\t{\n+\t\t// Read next record\n+\t\tCDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+\t\tif (fFlags == DB_SET_RANGE)\n+\t\t\tssKey << std::make_pair(std::string(\"acentry\"), std::make_pair((fAllAccounts ? string(\"\") : strAccount), uint64_t(0)));\n+\t\tCDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\t\tint ret = ReadAtCursor(pcursor, ssKey, ssValue, fFlags);\n+\t\tfFlags = DB_NEXT;\n+\t\tif (ret == DB_NOTFOUND)\n+\t\t\tbreak;\n+\t\telse if (ret != 0)\n+\t\t{\n+\t\t\tpcursor->close();\n+\t\t\tthrow runtime_error(std::string(__func__) + \": error scanning DB\");\n+\t\t}\n+\n+\t\t// Unserialize\n+\t\tstring strType;\n+\t\tssKey >> strType;\n+\t\tif (strType != \"acentry\")\n+\t\t\tbreak;\n+\t\tCAccountingEntry acentry;\n+\t\tssKey >> acentry.strAccount;\n+\t\tif (!fAllAccounts && acentry.strAccount != strAccount)\n+\t\t\tbreak;\n+\n+\t\tssValue >> acentry;\n+\t\tssKey >> acentry.nEntryNo;\n+\t\tentries.push_back(acentry);\n+\t}\n+\n+\tpcursor->close();\n+}\n \n-        // Unserialize\n-        std::string strType;\n-        ssKey >> strType;\n-        if (strType != \"acentry\")\n-            break;\n-        CAccountingEntry acentry;\n-        ssKey >> acentry.strAccount;\n-        if (!fAllAccounts && acentry.strAccount != strAccount)\n-            break;\n+DBErrors CWalletDB::ReorderTransactions(CWallet* pwallet)\n+{\n+\tLOCK(pwallet->cs_wallet);\n+\t// Old wallets didn't have any defined order for transactions\n+\t// Probably a bad idea to change the output of this\n+\n+\t// First: get all CWalletTx and CAccountingEntry into a sorted-by-time multimap.\n+\ttypedef pair<CWalletTx*, CAccountingEntry*> TxPair;\n+\ttypedef multimap<int64_t, TxPair > TxItems;\n+\tTxItems txByTime;\n+\n+\tfor (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); ++it)\n+\t{\n+\t\tCWalletTx* wtx = &((*it).second);\n+\t\ttxByTime.insert(make_pair(wtx->nTimeReceived, TxPair(wtx, (CAccountingEntry*)0)));\n+\t}\n+\tlist<CAccountingEntry> acentries;\n+\tListAccountCreditDebit(\"\", acentries);\n+\tBOOST_FOREACH(CAccountingEntry& entry, acentries)\n+\t{\n+\t\ttxByTime.insert(make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n+\t}\n+\n+\tint64_t& nOrderPosNext = pwallet->nOrderPosNext;\n+\tnOrderPosNext = 0;\n+\tstd::vector<int64_t> nOrderPosOffsets;\n+\tfor (TxItems::iterator it = txByTime.begin(); it != txByTime.end(); ++it)\n+\t{\n+\t\tCWalletTx *const pwtx = (*it).second.first;\n+\t\tCAccountingEntry *const pacentry = (*it).second.second;\n+\t\tint64_t& nOrderPos = (pwtx != 0) ? pwtx->nOrderPos : pacentry->nOrderPos;\n+\n+\t\tif (nOrderPos == -1)\n+\t\t{\n+\t\t\tnOrderPos = nOrderPosNext++;\n+\t\t\tnOrderPosOffsets.push_back(nOrderPos);\n+\n+\t\t\tif (pwtx)\n+\t\t\t{\n+\t\t\t\tif (!WriteTx(*pwtx))\n+\t\t\t\t\treturn DB_LOAD_FAIL;\n+\t\t\t}\n+\t\t\telse\n+\t\t\t\tif (!WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n+\t\t\t\t\treturn DB_LOAD_FAIL;\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tint64_t nOrderPosOff = 0;\n+\t\t\tBOOST_FOREACH(const int64_t& nOffsetStart, nOrderPosOffsets)\n+\t\t\t{\n+\t\t\t\tif (nOrderPos >= nOffsetStart)\n+\t\t\t\t\t++nOrderPosOff;\n+\t\t\t}\n+\t\t\tnOrderPos += nOrderPosOff;\n+\t\t\tnOrderPosNext = std::max(nOrderPosNext, nOrderPos + 1);\n \n-        ssValue >> acentry;\n-        ssKey >> acentry.nEntryNo;\n-        entries.push_back(acentry);\n-    }\n+\t\t\tif (!nOrderPosOff)\n+\t\t\t\tcontinue;\n \n-    pcursor->close();\n+\t\t\t// Since we're changing the order, write it back\n+\t\t\tif (pwtx)\n+\t\t\t{\n+\t\t\t\tif (!WriteTx(*pwtx))\n+\t\t\t\t\treturn DB_LOAD_FAIL;\n+\t\t\t}\n+\t\t\telse\n+\t\t\t\tif (!WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n+\t\t\t\t\treturn DB_LOAD_FAIL;\n+\t\t}\n+\t}\n+\tWriteOrderPosNext(nOrderPosNext);\n+\n+\treturn DB_LOAD_OK;\n }\n \n class CWalletScanState {\n public:\n-    unsigned int nKeys;\n-    unsigned int nCKeys;\n-    unsigned int nWatchKeys;\n-    unsigned int nKeyMeta;\n-    bool fIsEncrypted;\n-    bool fAnyUnordered;\n-    int nFileVersion;\n-    std::vector<uint256> vWalletUpgrade;\n-\n-    CWalletScanState() {\n-        nKeys = nCKeys = nWatchKeys = nKeyMeta = 0;\n-        fIsEncrypted = false;\n-        fAnyUnordered = false;\n-        nFileVersion = 0;\n-    }\n+\tunsigned int nKeys;\n+\tunsigned int nCKeys;\n+\tunsigned int nKeyMeta;\n+\tbool fIsEncrypted;\n+\tbool fAnyUnordered;\n+\tint nFileVersion;\n+\tvector<uint256> vWalletUpgrade;\n+\n+\tCWalletScanState() {\n+\t\tnKeys = nCKeys = nKeyMeta = 0;\n+\t\tfIsEncrypted = false;\n+\t\tfAnyUnordered = false;\n+\t\tnFileVersion = 0;\n+\t}\n };\n \n bool\n ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr)\n-{\n-    try {\n-        // Unserialize\n-        // Taking advantage of the fact that pair serialization\n-        // is just the two items serialized one after the other\n-        ssKey >> strType;\n-        if (strType == \"name\")\n-        {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            ssValue >> pwallet->mapAddressBook[CSyscoinAddress(strAddress).Get()].name;\n-        }\n-        else if (strType == \"purpose\")\n-        {\n-            std::string strAddress;\n-            ssKey >> strAddress;\n-            ssValue >> pwallet->mapAddressBook[CSyscoinAddress(strAddress).Get()].purpose;\n-        }\n-        else if (strType == \"tx\")\n-        {\n-            uint256 hash;\n-            ssKey >> hash;\n-            CWalletTx wtx;\n-            ssValue >> wtx;\n-            CValidationState state;\n-            if (!(CheckTransaction(*wtx.tx, state) && (wtx.tx->GetHash() == hash) && state.IsValid()))\n+\tCWalletScanState &wss, string& strType, string& strErr)\n+{\n+\ttry {\n+\t\t// Unserialize\n+\t\t// Taking advantage of the fact that pair serialization\n+\t\t// is just the two items serialized one after the other\n+\t\tssKey >> strType;\n+\t\tif (strType == \"name\")\n+\t\t{\n+\t\t\tstring strAddress;\n+\t\t\tssKey >> strAddress;\n+\t\t\tssValue >> pwallet->mapAddressBook[CSyscoinAddress(strAddress).Get()].name;\n+\t\t}\n+\t\telse if (strType == \"purpose\")\n+\t\t{\n+\t\t\tstring strAddress;\n+\t\t\tssKey >> strAddress;\n+\t\t\tssValue >> pwallet->mapAddressBook[CSyscoinAddress(strAddress).Get()].purpose;\n+\t\t}\n+\t\telse if (strType == \"tx\")\n+\t\t{\n+\t\t\tuint256 hash;\n+\t\t\tssKey >> hash;\n+\t\t\tCWalletTx wtx;\n+\t\t\tssValue >> wtx;\n+\t\t\tCValidationState state;\n+\t\t\tif (!(CheckTransaction(wtx, state) && (wtx.GetHash() == hash) && state.IsValid()))\n \t\t\t{\n \t\t\t\t// SYSCOIN\n-\t\t\t\tif (wtx.tx->GetHash() != hash && wtx.tx->nVersion == SYSCOIN_TX_VERSION)\n+\t\t\t\tif (wtx.GetHash() != hash && wtx.nVersion == GetSyscoinTxVersion())\n \t\t\t\t\treturn true;\n \t\t\t\tstrErr = \"Error reading wallet database. CheckTransaction failed, validation state: \" + FormatStateMessage(state);\n \t\t\t\treturn false;\n \t\t\t}\n+\t\t\t// SYSCOIN don't need this\n+\t\t\t// Undo serialize changes in 31600\n+\t\t\t/* if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n+\t\t\t{\n+\t\t\tif (!ssValue.empty())\n+\t\t\t{\n+\t\t\tchar fTmp;\n+\t\t\tchar fUnused;\n+\t\t\tssValue >> fTmp >> fUnused >> wtx.strFromAccount;\n+\t\t\tstrErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d '%s' %s\",\n+\t\t\twtx.fTimeReceivedIsTxTime, fTmp, wtx.strFromAccount, hash.ToString());\n+\t\t\twtx.fTimeReceivedIsTxTime = fTmp;\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\tstrErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n+\t\t\twtx.fTimeReceivedIsTxTime = 0;\n+\t\t\t}\n+\t\t\twss.vWalletUpgrade.push_back(hash);\n+\t\t\t}*/\n+\n+\t\t\tif (wtx.nOrderPos == -1)\n+\t\t\t\twss.fAnyUnordered = true;\n+\n+\t\t\tpwallet->AddToWallet(wtx, true, NULL);\n+\t\t}\n+\t\telse if (strType == \"acentry\")\n+\t\t{\n+\t\t\tstring strAccount;\n+\t\t\tssKey >> strAccount;\n+\t\t\tuint64_t nNumber;\n+\t\t\tssKey >> nNumber;\n+\t\t\tif (nNumber > nAccountingEntryNumber)\n+\t\t\t\tnAccountingEntryNumber = nNumber;\n+\n+\t\t\tif (!wss.fAnyUnordered)\n+\t\t\t{\n+\t\t\t\tCAccountingEntry acentry;\n+\t\t\t\tssValue >> acentry;\n+\t\t\t\tif (acentry.nOrderPos == -1)\n+\t\t\t\t\twss.fAnyUnordered = true;\n+\t\t\t}\n+\t\t}\n+\t\telse if (strType == \"watchs\")\n+\t\t{\n+\t\t\tCScript script;\n+\t\t\tssKey >> *(CScriptBase*)(&script);\n+\t\t\tchar fYes;\n+\t\t\tssValue >> fYes;\n+\t\t\tif (fYes == '1')\n+\t\t\t\tpwallet->LoadWatchOnly(script);\n+\n+\t\t\t// Watch-only addresses have no birthday information for now,\n+\t\t\t// so set the wallet birthday to the beginning of time.\n+\t\t\tpwallet->nTimeFirstKey = 1;\n+\t\t}\n+\t\telse if (strType == \"key\" || strType == \"wkey\")\n+\t\t{\n+\t\t\tCPubKey vchPubKey;\n+\t\t\tssKey >> vchPubKey;\n+\t\t\tif (!vchPubKey.IsValid())\n+\t\t\t{\n+\t\t\t\tstrErr = \"Error reading wallet database: CPubKey corrupt\";\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tCKey key;\n+\t\t\tCPrivKey pkey;\n+\t\t\tuint256 hash;\n+\n+\t\t\tif (strType == \"key\")\n+\t\t\t{\n+\t\t\t\twss.nKeys++;\n+\t\t\t\tssValue >> pkey;\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tCWalletKey wkey;\n+\t\t\t\tssValue >> wkey;\n+\t\t\t\tpkey = wkey.vchPrivKey;\n+\t\t\t}\n+\n+\t\t\t// Old wallets store keys as \"key\" [pubkey] => [privkey]\n+\t\t\t// ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n+\t\t\t// using EC operations as a checksum.\n+\t\t\t// Newer wallets store keys as \"key\"[pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n+\t\t\t// remaining backwards-compatible.\n+\t\t\ttry\n+\t\t\t{\n+\t\t\t\tssValue >> hash;\n+\t\t\t}\n+\t\t\tcatch (...) {}\n \n-            // Undo serialize changes in 31600\n-            if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-            {\n-                if (!ssValue.empty())\n-                {\n-                    char fTmp;\n-                    char fUnused;\n-                    ssValue >> fTmp >> fUnused >> wtx.strFromAccount;\n-                    strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d '%s' %s\",\n-                                       wtx.fTimeReceivedIsTxTime, fTmp, wtx.strFromAccount, hash.ToString());\n-                    wtx.fTimeReceivedIsTxTime = fTmp;\n-                }\n-                else\n-                {\n-                    strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n-                    wtx.fTimeReceivedIsTxTime = 0;\n-                }\n-                wss.vWalletUpgrade.push_back(hash);\n-            }\n-\n-            if (wtx.nOrderPos == -1)\n-                wss.fAnyUnordered = true;\n-\n-            pwallet->LoadToWallet(wtx);\n-        }\n-        else if (strType == \"acentry\")\n-        {\n-            std::string strAccount;\n-            ssKey >> strAccount;\n-            uint64_t nNumber;\n-            ssKey >> nNumber;\n-            if (nNumber > nAccountingEntryNumber)\n-                nAccountingEntryNumber = nNumber;\n-\n-            if (!wss.fAnyUnordered)\n-            {\n-                CAccountingEntry acentry;\n-                ssValue >> acentry;\n-                if (acentry.nOrderPos == -1)\n-                    wss.fAnyUnordered = true;\n-            }\n-        }\n-        else if (strType == \"watchs\")\n-        {\n-            wss.nWatchKeys++;\n-            CScript script;\n-            ssKey >> *(CScriptBase*)(&script);\n-            char fYes;\n-            ssValue >> fYes;\n-            if (fYes == '1')\n-                pwallet->LoadWatchOnly(script);\n-        }\n-        else if (strType == \"key\" || strType == \"wkey\")\n-        {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n-            {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n-            }\n-            CKey key;\n-            CPrivKey pkey;\n-            uint256 hash;\n-\n-            if (strType == \"key\")\n-            {\n-                wss.nKeys++;\n-                ssValue >> pkey;\n-            } else {\n-                CWalletKey wkey;\n-                ssValue >> wkey;\n-                pkey = wkey.vchPrivKey;\n-            }\n-\n-            // Old wallets store keys as \"key\" [pubkey] => [privkey]\n-            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n-            // using EC operations as a checksum.\n-            // Newer wallets store keys as \"key\"[pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n-            // remaining backwards-compatible.\n-            try\n-            {\n-                ssValue >> hash;\n-            }\n-            catch (...) {}\n-\n-            bool fSkipCheck = false;\n-\n-            if (!hash.IsNull())\n-            {\n-                // hash pubkey/privkey to accelerate wallet load\n-                std::vector<unsigned char> vchKey;\n-                vchKey.reserve(vchPubKey.size() + pkey.size());\n-                vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-                vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n-\n-                if (Hash(vchKey.begin(), vchKey.end()) != hash)\n-                {\n-                    strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-                    return false;\n-                }\n-\n-                fSkipCheck = true;\n-            }\n-\n-            if (!key.Load(pkey, vchPubKey, fSkipCheck))\n-            {\n-                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n-                return false;\n-            }\n-            if (!pwallet->LoadKey(key, vchPubKey))\n-            {\n-                strErr = \"Error reading wallet database: LoadKey failed\";\n-                return false;\n-            }\n-        }\n-        else if (strType == \"mkey\")\n-        {\n-            unsigned int nID;\n-            ssKey >> nID;\n-            CMasterKey kMasterKey;\n-            ssValue >> kMasterKey;\n-            if(pwallet->mapMasterKeys.count(nID) != 0)\n-            {\n-                strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n-                return false;\n-            }\n-            pwallet->mapMasterKeys[nID] = kMasterKey;\n-            if (pwallet->nMasterKeyMaxID < nID)\n-                pwallet->nMasterKeyMaxID = nID;\n-        }\n-        else if (strType == \"ckey\")\n-        {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-            if (!vchPubKey.IsValid())\n-            {\n-                strErr = \"Error reading wallet database: CPubKey corrupt\";\n-                return false;\n-            }\n-            std::vector<unsigned char> vchPrivKey;\n-            ssValue >> vchPrivKey;\n-            wss.nCKeys++;\n-\n-            if (!pwallet->LoadCryptedKey(vchPubKey, vchPrivKey))\n-            {\n-                strErr = \"Error reading wallet database: LoadCryptedKey failed\";\n-                return false;\n-            }\n-            wss.fIsEncrypted = true;\n-        }\n-        else if (strType == \"keymeta\" || strType == \"watchmeta\")\n-        {\n-            CTxDestination keyID;\n-            if (strType == \"keymeta\")\n-            {\n-              CPubKey vchPubKey;\n-              ssKey >> vchPubKey;\n-              keyID = vchPubKey.GetID();\n-            }\n-            else if (strType == \"watchmeta\")\n-            {\n-              CScript script;\n-              ssKey >> *(CScriptBase*)(&script);\n-              keyID = CScriptID(script);\n-            }\n-\n-            CKeyMetadata keyMeta;\n-            ssValue >> keyMeta;\n-            wss.nKeyMeta++;\n-\n-            pwallet->LoadKeyMetadata(keyID, keyMeta);\n-        }\n-        else if (strType == \"defaultkey\")\n-        {\n-\t\t\t// We don't want or need the default key, but if there is one set,\n-\t\t\t// we want to make sure that it is valid so that we can detect corruption\n+\t\t\tbool fSkipCheck = false;\n+\n+\t\t\tif (!hash.IsNull())\n+\t\t\t{\n+\t\t\t\t// hash pubkey/privkey to accelerate wallet load\n+\t\t\t\tstd::vector<unsigned char> vchKey;\n+\t\t\t\tvchKey.reserve(vchPubKey.size() + pkey.size());\n+\t\t\t\tvchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+\t\t\t\tvchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n+\n+\t\t\t\tif (Hash(vchKey.begin(), vchKey.end()) != hash)\n+\t\t\t\t{\n+\t\t\t\t\tstrErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\n+\t\t\t\tfSkipCheck = true;\n+\t\t\t}\n+\n+\t\t\tif (!key.Load(pkey, vchPubKey, fSkipCheck))\n+\t\t\t{\n+\t\t\t\tstrErr = \"Error reading wallet database: CPrivKey corrupt\";\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (!pwallet->LoadKey(key, vchPubKey))\n+\t\t\t{\n+\t\t\t\tstrErr = \"Error reading wallet database: LoadKey failed\";\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\telse if (strType == \"mkey\")\n+\t\t{\n+\t\t\tunsigned int nID;\n+\t\t\tssKey >> nID;\n+\t\t\tCMasterKey kMasterKey;\n+\t\t\tssValue >> kMasterKey;\n+\t\t\tif (pwallet->mapMasterKeys.count(nID) != 0)\n+\t\t\t{\n+\t\t\t\tstrErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tpwallet->mapMasterKeys[nID] = kMasterKey;\n+\t\t\tif (pwallet->nMasterKeyMaxID < nID)\n+\t\t\t\tpwallet->nMasterKeyMaxID = nID;\n+\t\t}\n+\t\telse if (strType == \"ckey\")\n+\t\t{\n \t\t\tCPubKey vchPubKey;\n-\t\t\tssValue >> vchPubKey;\n-\t\t\tif (!vchPubKey.IsValid()) {\n-\t\t\t\tstrErr = \"Error reading wallet database: Default Key corrupt\";\n+\t\t\tssKey >> vchPubKey;\n+\t\t\tif (!vchPubKey.IsValid())\n+\t\t\t{\n+\t\t\t\tstrErr = \"Error reading wallet database: CPubKey corrupt\";\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tvector<unsigned char> vchPrivKey;\n+\t\t\tssValue >> vchPrivKey;\n+\t\t\twss.nCKeys++;\n+\n+\t\t\tif (!pwallet->LoadCryptedKey(vchPubKey, vchPrivKey))\n+\t\t\t{\n+\t\t\t\tstrErr = \"Error reading wallet database: LoadCryptedKey failed\";\n \t\t\t\treturn false;\n \t\t\t}\n-        }\n-        else if (strType == \"pool\")\n-        {\n-            int64_t nIndex;\n-            ssKey >> nIndex;\n-            CKeyPool keypool;\n-            ssValue >> keypool;\n-            pwallet->LoadKeyPool(nIndex, keypool);\n-        }\n-        else if (strType == \"version\")\n-        {\n-            ssValue >> wss.nFileVersion;\n-            if (wss.nFileVersion == 10300)\n-                wss.nFileVersion = 300;\n-        }\n-        else if (strType == \"cscript\")\n-        {\n-            uint160 hash;\n-            ssKey >> hash;\n-            CScript script;\n-            ssValue >> *(CScriptBase*)(&script);\n-            if (!pwallet->LoadCScript(script))\n-            {\n-                strErr = \"Error reading wallet database: LoadCScript failed\";\n-                return false;\n-            }\n-        }\n-        else if (strType == \"orderposnext\")\n-        {\n-            ssValue >> pwallet->nOrderPosNext;\n-        }\n-        else if (strType == \"destdata\")\n-        {\n-            std::string strAddress, strKey, strValue;\n-            ssKey >> strAddress;\n-            ssKey >> strKey;\n-            ssValue >> strValue;\n-            if (!pwallet->LoadDestData(CSyscoinAddress(strAddress).Get(), strKey, strValue))\n-            {\n-                strErr = \"Error reading wallet database: LoadDestData failed\";\n-                return false;\n-            }\n-        }\n-        else if (strType == \"hdchain\")\n-        {\n-            CHDChain chain;\n-            ssValue >> chain;\n-            if (!pwallet->SetHDChain(chain, true))\n-            {\n-                strErr = \"Error reading wallet database: SetHDChain failed\";\n-                return false;\n-            }\n-        }\n-        else if (strType == \"chdchain\")\n-        {\n-            CHDChain chain;\n-            ssValue >> chain;\n-            if (!pwallet->SetCryptedHDChain(chain, true))\n-            {\n-                strErr = \"Error reading wallet database: SetHDCryptedChain failed\";\n-                return false;\n-            }\n-        }\n-        else if (strType == \"hdpubkey\")\n-        {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n-\n-            CHDPubKey hdPubKey;\n-            ssValue >> hdPubKey;\n-\n-            if(vchPubKey != hdPubKey.extPubKey.pubkey)\n-            {\n-                strErr = \"Error reading wallet database: CHDPubKey corrupt\";\n-                return false;\n-            }\n-            if (!pwallet->LoadHDPubKey(hdPubKey))\n-            {\n-                strErr = \"Error reading wallet database: LoadHDPubKey failed\";\n-                return false;\n-            }\n-        }\n-    } catch (...)\n-    {\n-        return false;\n-    }\n-    return true;\n-}\n-\n-static bool IsKeyType(std::string strType)\n-{\n-    return (strType== \"key\" || strType == \"wkey\" ||\n-            strType == \"mkey\" || strType == \"ckey\" ||\n-            strType == \"hdchain\" || strType == \"chdchain\");\n+\t\t\twss.fIsEncrypted = true;\n+\t\t}\n+\t\telse if (strType == \"keymeta\")\n+\t\t{\n+\t\t\tCPubKey vchPubKey;\n+\t\t\tssKey >> vchPubKey;\n+\t\t\tCKeyMetadata keyMeta;\n+\t\t\tssValue >> keyMeta;\n+\t\t\twss.nKeyMeta++;\n+\n+\t\t\tpwallet->LoadKeyMetadata(vchPubKey, keyMeta);\n+\n+\t\t\t// find earliest key creation time, as wallet birthday\n+\t\t\tif (!pwallet->nTimeFirstKey ||\n+\t\t\t\t(keyMeta.nCreateTime < pwallet->nTimeFirstKey))\n+\t\t\t\tpwallet->nTimeFirstKey = keyMeta.nCreateTime;\n+\t\t}\n+\t\telse if (strType == \"defaultkey\")\n+\t\t{\n+\t\t\tssValue >> pwallet->vchDefaultKey;\n+\t\t}\n+\t\telse if (strType == \"pool\")\n+\t\t{\n+\t\t\tint64_t nIndex;\n+\t\t\tssKey >> nIndex;\n+\t\t\tCKeyPool keypool;\n+\t\t\tssValue >> keypool;\n+\t\t\tpwallet->setKeyPool.insert(nIndex);\n+\n+\t\t\t// If no metadata exists yet, create a default with the pool key's\n+\t\t\t// creation time. Note that this may be overwritten by actually\n+\t\t\t// stored metadata for that key later, which is fine.\n+\t\t\tCKeyID keyid = keypool.vchPubKey.GetID();\n+\t\t\tif (pwallet->mapKeyMetadata.count(keyid) == 0)\n+\t\t\t\tpwallet->mapKeyMetadata[keyid] = CKeyMetadata(keypool.nTime);\n+\t\t}\n+\t\telse if (strType == \"version\")\n+\t\t{\n+\t\t\tssValue >> wss.nFileVersion;\n+\t\t\tif (wss.nFileVersion == 10300)\n+\t\t\t\twss.nFileVersion = 300;\n+\t\t}\n+\t\telse if (strType == \"cscript\")\n+\t\t{\n+\t\t\tuint160 hash;\n+\t\t\tssKey >> hash;\n+\t\t\tCScript script;\n+\t\t\tssValue >> *(CScriptBase*)(&script);\n+\t\t\tif (!pwallet->LoadCScript(script))\n+\t\t\t{\n+\t\t\t\tstrErr = \"Error reading wallet database: LoadCScript failed\";\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\telse if (strType == \"orderposnext\")\n+\t\t{\n+\t\t\tssValue >> pwallet->nOrderPosNext;\n+\t\t}\n+\t\telse if (strType == \"destdata\")\n+\t\t{\n+\t\t\tstd::string strAddress, strKey, strValue;\n+\t\t\tssKey >> strAddress;\n+\t\t\tssKey >> strKey;\n+\t\t\tssValue >> strValue;\n+\t\t\tif (!pwallet->LoadDestData(CSyscoinAddress(strAddress).Get(), strKey, strValue))\n+\t\t\t{\n+\t\t\t\tstrErr = \"Error reading wallet database: LoadDestData failed\";\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\telse if (strType == \"hdchain\")\n+\t\t{\n+\t\t\tCHDChain chain;\n+\t\t\tssValue >> chain;\n+\t\t\tif (!pwallet->SetHDChain(chain, true))\n+\t\t\t{\n+\t\t\t\tstrErr = \"Error reading wallet database: SetHDChain failed\";\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t}\n+\tcatch (...)\n+\t{\n+\t\treturn false;\n+\t}\n+\treturn true;\n }\n \n-DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n+static bool IsKeyType(string strType)\n {\n-    CWalletScanState wss;\n-    bool fNoncriticalErrors = false;\n-    DBErrors result = DB_LOAD_OK;\n-\n-    LOCK(pwallet->cs_wallet);\n-    try {\n-        int nMinVersion = 0;\n-        if (Read((std::string)\"minversion\", nMinVersion))\n-        {\n-            if (nMinVersion > CLIENT_VERSION)\n-                return DB_TOO_NEW;\n-            pwallet->LoadMinVersion(nMinVersion);\n-        }\n-\n-        // Get cursor\n-        Dbc* pcursor = GetCursor();\n-        if (!pcursor)\n-        {\n-            LogPrintf(\"Error getting wallet database cursor\\n\");\n-            return DB_CORRUPT;\n-        }\n-\n-        while (true)\n-        {\n-            // Read next record\n-            CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-            CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-            int ret = ReadAtCursor(pcursor, ssKey, ssValue);\n-            if (ret == DB_NOTFOUND)\n-                break;\n-            else if (ret != 0)\n-            {\n-                LogPrintf(\"Error reading next record from wallet database\\n\");\n-                return DB_CORRUPT;\n-            }\n-\n-            // Try to be tolerant of single corrupt records:\n-            std::string strType, strErr;\n-            if (!ReadKeyValue(pwallet, ssKey, ssValue, wss, strType, strErr))\n-            {\n-                // losing keys is considered a catastrophic error, anything else\n-                // we assume the user can live with:\n-                if (IsKeyType(strType) || strType == \"defaultkey\")\n-                    result = DB_CORRUPT;\n-                else\n-                {\n-                    // Leave other errors alone, if we try to fix them we might make things worse.\n-                    fNoncriticalErrors = true; // ... but do warn the user there is something wrong.\n-                    if (strType == \"tx\")\n-                        // Rescan if there is a bad transaction record:\n-                        SoftSetBoolArg(\"-rescan\", true);\n-                }\n-            }\n-            if (!strErr.empty())\n-                LogPrintf(\"%s\\n\", strErr);\n-        }\n-        pcursor->close();\n-\n-        // Store initial external keypool size since we mostly use external keys in mixing\n-        pwallet->nKeysLeftSinceAutoBackup = pwallet->KeypoolCountExternalKeys();\n-        LogPrintf(\"nKeysLeftSinceAutoBackup: %d\\n\", pwallet->nKeysLeftSinceAutoBackup);\n-    }\n-    catch (const boost::thread_interrupted&) {\n-        throw;\n-    }\n-    catch (...) {\n-        result = DB_CORRUPT;\n-    }\n-\n-    if (fNoncriticalErrors && result == DB_LOAD_OK)\n-        result = DB_NONCRITICAL_ERROR;\n-\n-    // Any wallet corruption at all: skip any rewriting or\n-    // upgrading, we don't want to make it worse.\n-    if (result != DB_LOAD_OK)\n-        return result;\n-\n-    LogPrintf(\"nFileVersion = %d\\n\", wss.nFileVersion);\n-\n-    LogPrintf(\"Keys: %u plaintext, %u encrypted, %u w/ metadata, %u total\\n\",\n-           wss.nKeys, wss.nCKeys, wss.nKeyMeta, wss.nKeys + wss.nCKeys);\n-\n-    // nTimeFirstKey is only reliable if all keys have metadata\n-    if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta)\n-        pwallet->UpdateTimeFirstKey(1);\n-\n-    BOOST_FOREACH(uint256 hash, wss.vWalletUpgrade)\n-        WriteTx(pwallet->mapWallet[hash]);\n-\n-    // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n-    if (wss.fIsEncrypted && (wss.nFileVersion == 40000 || wss.nFileVersion == 50000))\n-        return DB_NEED_REWRITE;\n-\n-    if (wss.nFileVersion < CLIENT_VERSION) // Update\n-        WriteVersion(CLIENT_VERSION);\n-\n-    if (wss.fAnyUnordered)\n-        result = pwallet->ReorderTransactions();\n-\n-    pwallet->laccentries.clear();\n-    ListAccountCreditDebit(\"*\", pwallet->laccentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, pwallet->laccentries) {\n-        pwallet->wtxOrdered.insert(make_pair(entry.nOrderPos, CWallet::TxPair((CWalletTx*)0, &entry)));\n-    }\n-\n-    return result;\n-}\n-\n-DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx)\n-{\n-    bool fNoncriticalErrors = false;\n-    DBErrors result = DB_LOAD_OK;\n-\n-    try {\n-        LOCK(pwallet->cs_wallet);\n-        int nMinVersion = 0;\n-        if (Read((std::string)\"minversion\", nMinVersion))\n-        {\n-            if (nMinVersion > CLIENT_VERSION)\n-                return DB_TOO_NEW;\n-            pwallet->LoadMinVersion(nMinVersion);\n-        }\n-\n-        // Get cursor\n-        Dbc* pcursor = GetCursor();\n-        if (!pcursor)\n-        {\n-            LogPrintf(\"Error getting wallet database cursor\\n\");\n-            return DB_CORRUPT;\n-        }\n-\n-        while (true)\n-        {\n-            // Read next record\n-            CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-            CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-            int ret = ReadAtCursor(pcursor, ssKey, ssValue);\n-            if (ret == DB_NOTFOUND)\n-                break;\n-            else if (ret != 0)\n-            {\n-                LogPrintf(\"Error reading next record from wallet database\\n\");\n-                return DB_CORRUPT;\n-            }\n-\n-            std::string strType;\n-            ssKey >> strType;\n-            if (strType == \"tx\") {\n-                uint256 hash;\n-                ssKey >> hash;\n-\n-                CWalletTx wtx;\n-                ssValue >> wtx;\n-\n-                vTxHash.push_back(hash);\n-                vWtx.push_back(wtx);\n-            }\n-        }\n-        pcursor->close();\n-    }\n-    catch (const boost::thread_interrupted&) {\n-        throw;\n-    }\n-    catch (...) {\n-        result = DB_CORRUPT;\n-    }\n-\n-    if (fNoncriticalErrors && result == DB_LOAD_OK)\n-        result = DB_NONCRITICAL_ERROR;\n-\n-    return result;\n-}\n-\n-DBErrors CWalletDB::ZapSelectTx(CWallet* pwallet, std::vector<uint256>& vTxHashIn, std::vector<uint256>& vTxHashOut)\n-{\n-    // build list of wallet TXs and hashes\n-    std::vector<uint256> vTxHash;\n-    std::vector<CWalletTx> vWtx;\n-    DBErrors err = FindWalletTx(pwallet, vTxHash, vWtx);\n-    if (err != DB_LOAD_OK) {\n-        return err;\n-    }\n-\n-    std::sort(vTxHash.begin(), vTxHash.end());\n-    std::sort(vTxHashIn.begin(), vTxHashIn.end());\n-\n-    // erase each matching wallet TX\n-    bool delerror = false;\n-    std::vector<uint256>::iterator it = vTxHashIn.begin();\n-    BOOST_FOREACH (uint256 hash, vTxHash) {\n-        while (it < vTxHashIn.end() && (*it) < hash) {\n-            it++;\n-        }\n-        if (it == vTxHashIn.end()) {\n-            break;\n-        }\n-        else if ((*it) == hash) {\n-            pwallet->mapWallet.erase(hash);\n-            if(!EraseTx(hash)) {\n-                LogPrint(\"db\", \"Transaction was found for deletion but returned database error: %s\\n\", hash.GetHex());\n-                delerror = true;\n-            }\n-            vTxHashOut.push_back(hash);\n-        }\n-    }\n-\n-    if (delerror) {\n-        return DB_CORRUPT;\n-    }\n-    return DB_LOAD_OK;\n-}\n-\n-DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, std::vector<CWalletTx>& vWtx)\n-{\n-    // build list of wallet TXs\n-    std::vector<uint256> vTxHash;\n-    DBErrors err = FindWalletTx(pwallet, vTxHash, vWtx);\n-    if (err != DB_LOAD_OK)\n-        return err;\n-\n-    // erase each wallet TX\n-    BOOST_FOREACH (uint256& hash, vTxHash) {\n-        if (!EraseTx(hash))\n-            return DB_CORRUPT;\n-    }\n-\n-    return DB_LOAD_OK;\n-}\n-\n-void ThreadFlushWalletDB()\n-{\n-    // Make this thread recognisable as the wallet flushing thread\n-    RenameThread(\"syscoin-wallet\");\n-\n-    static bool fOneThread;\n-    if (fOneThread)\n-        return;\n-    fOneThread = true;\n-    if (!GetBoolArg(\"-flushwallet\", DEFAULT_FLUSHWALLET))\n-        return;\n-\n-    unsigned int nLastSeen = CWalletDB::GetUpdateCounter();\n-    unsigned int nLastFlushed = CWalletDB::GetUpdateCounter();\n-    int64_t nLastWalletUpdate = GetTime();\n-    while (true)\n-    {\n-        MilliSleep(500);\n-\n-        if (nLastSeen != CWalletDB::GetUpdateCounter())\n-        {\n-            nLastSeen = CWalletDB::GetUpdateCounter();\n-            nLastWalletUpdate = GetTime();\n-        }\n-\n-        if (nLastFlushed != CWalletDB::GetUpdateCounter() && GetTime() - nLastWalletUpdate >= 2)\n-        {\n-            TRY_LOCK(bitdb.cs_db,lockDb);\n-            if (lockDb)\n-            {\n-                // Don't do this if any databases are in use\n-                int nRefCount = 0;\n-                std::map<std::string, int>::iterator mi = bitdb.mapFileUseCount.begin();\n-                while (mi != bitdb.mapFileUseCount.end())\n-                {\n-                    nRefCount += (*mi).second;\n-                    mi++;\n-                }\n-\n-                if (nRefCount == 0)\n-                {\n-                    boost::this_thread::interruption_point();\n-                    const std::string& strFile = pwalletMain->strWalletFile;\n-                    std::map<std::string, int>::iterator _mi = bitdb.mapFileUseCount.find(strFile);\n-                    if (_mi != bitdb.mapFileUseCount.end())\n-                    {\n-                        LogPrint(\"db\", \"Flushing %s\\n\", strFile);\n-                        nLastFlushed = CWalletDB::GetUpdateCounter();\n-                        int64_t nStart = GetTimeMillis();\n-\n-                        // Flush wallet file so it's self contained\n-                        bitdb.CloseDb(strFile);\n-                        bitdb.CheckpointLSN(strFile);\n-\n-                        bitdb.mapFileUseCount.erase(_mi++);\n-                        LogPrint(\"db\", \"Flushed %s %dms\\n\", strFile, GetTimeMillis() - nStart);\n-                    }\n-                }\n-            }\n-        }\n-    }\n+\treturn (strType == \"key\" || strType == \"wkey\" ||\n+\t\tstrType == \"mkey\" || strType == \"ckey\");\n }\n \n-//\n-// Try to (very carefully!) recover wallet file if there is a problem.\n-//\n-bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys)\n+DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n {\n-    // Recovery procedure:\n-    // move wallet file to wallet.timestamp.bak\n-    // Call Salvage with fAggressive=true to\n-    // get as much data as possible.\n-    // Rewrite salvaged data to fresh wallet file\n-    // Set -rescan so any missing transactions will be\n-    // found.\n-    int64_t now = GetTime();\n-    std::string newFilename = strprintf(\"wallet.%d.bak\", now);\n-\n-    int result = dbenv.dbenv->dbrename(NULL, filename.c_str(), NULL,\n-                                       newFilename.c_str(), DB_AUTO_COMMIT);\n-    if (result == 0)\n-        LogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n-    else\n-    {\n-        LogPrintf(\"Failed to rename %s to %s\\n\", filename, newFilename);\n-        return false;\n-    }\n-\n-    std::vector<CDBEnv::KeyValPair> salvagedData;\n-    bool fSuccess = dbenv.Salvage(newFilename, true, salvagedData);\n-    if (salvagedData.empty())\n-    {\n-        LogPrintf(\"Salvage(aggressive) found no records in %s.\\n\", newFilename);\n-        return false;\n-    }\n-    LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n-\n-    std::unique_ptr<Db> pdbCopy(new Db(dbenv.dbenv, 0));\n-    int ret = pdbCopy->open(NULL,               // Txn pointer\n-                            filename.c_str(),   // Filename\n-                            \"main\",             // Logical db name\n-                            DB_BTREE,           // Database type\n-                            DB_CREATE,          // Flags\n-                            0);\n-    if (ret > 0)\n-    {\n-        LogPrintf(\"Cannot create database file %s\\n\", filename);\n-        return false;\n-    }\n-    CWallet dummyWallet;\n-    CWalletScanState wss;\n-\n-    DbTxn* ptxn = dbenv.TxnBegin();\n-    BOOST_FOREACH(CDBEnv::KeyValPair& row, salvagedData)\n-    {\n-        if (fOnlyKeys)\n-        {\n-            CDataStream ssKey(row.first, SER_DISK, CLIENT_VERSION);\n-            CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n-            std::string strType, strErr;\n-            bool fReadOK;\n-            {\n-                // Required in LoadKeyMetadata():\n-                LOCK(dummyWallet.cs_wallet);\n-                fReadOK = ReadKeyValue(&dummyWallet, ssKey, ssValue,\n-                                        wss, strType, strErr);\n-            }\n-            if (!IsKeyType(strType) && strType != \"hdpubkey\")\n-                continue;\n-            if (!fReadOK)\n-            {\n-                LogPrintf(\"WARNING: CWalletDB::Recover skipping %s: %s\\n\", strType, strErr);\n-                continue;\n-            }\n-        }\n-        Dbt datKey(&row.first[0], row.first.size());\n-        Dbt datValue(&row.second[0], row.second.size());\n-        int ret2 = pdbCopy->put(ptxn, &datKey, &datValue, DB_NOOVERWRITE);\n-        if (ret2 > 0)\n-            fSuccess = false;\n-    }\n-    ptxn->commit(0);\n-    pdbCopy->close(0);\n-\n-    return fSuccess;\n+\tpwallet->vchDefaultKey = CPubKey();\n+\tCWalletScanState wss;\n+\tbool fNoncriticalErrors = false;\n+\tDBErrors result = DB_LOAD_OK;\n+\n+\ttry {\n+\t\tLOCK(pwallet->cs_wallet);\n+\t\tint nMinVersion = 0;\n+\t\tif (Read((string)\"minversion\", nMinVersion))\n+\t\t{\n+\t\t\tif (nMinVersion > CLIENT_VERSION)\n+\t\t\t\treturn DB_TOO_NEW;\n+\t\t\tpwallet->LoadMinVersion(nMinVersion);\n+\t\t}\n+\n+\t\t// Get cursor\n+\t\tDbc* pcursor = GetCursor();\n+\t\tif (!pcursor)\n+\t\t{\n+\t\t\tLogPrintf(\"Error getting wallet database cursor\\n\");\n+\t\t\treturn DB_CORRUPT;\n+\t\t}\n+\n+\t\twhile (true)\n+\t\t{\n+\t\t\t// Read next record\n+\t\t\tCDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+\t\t\tCDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\t\t\tint ret = ReadAtCursor(pcursor, ssKey, ssValue);\n+\t\t\tif (ret == DB_NOTFOUND)\n+\t\t\t\tbreak;\n+\t\t\telse if (ret != 0)\n+\t\t\t{\n+\t\t\t\tLogPrintf(\"Error reading next record from wallet database\\n\");\n+\t\t\t\treturn DB_CORRUPT;\n+\t\t\t}\n+\n+\t\t\t// Try to be tolerant of single corrupt records:\n+\t\t\tstring strType, strErr;\n+\t\t\tif (!ReadKeyValue(pwallet, ssKey, ssValue, wss, strType, strErr))\n+\t\t\t{\n+\t\t\t\t// losing keys is considered a catastrophic error, anything else\n+\t\t\t\t// we assume the user can live with:\n+\t\t\t\tif (IsKeyType(strType))\n+\t\t\t\t\tresult = DB_CORRUPT;\n+\t\t\t\telse\n+\t\t\t\t{\n+\t\t\t\t\t// Leave other errors alone, if we try to fix them we might make things worse.\n+\t\t\t\t\tfNoncriticalErrors = true; // ... but do warn the user there is something wrong.\n+\t\t\t\t\tif (strType == \"tx\")\n+\t\t\t\t\t\t// Rescan if there is a bad transaction record:\n+\t\t\t\t\t\tSoftSetBoolArg(\"-rescan\", true);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (!strErr.empty())\n+\t\t\t\tLogPrintf(\"%s\\n\", strErr);\n+\t\t}\n+\t\tpcursor->close();\n+\t}\n+\tcatch (const boost::thread_interrupted&) {\n+\t\tthrow;\n+\t}\n+\tcatch (...) {\n+\t\tresult = DB_CORRUPT;\n+\t}\n+\n+\tif (fNoncriticalErrors && result == DB_LOAD_OK)\n+\t\tresult = DB_NONCRITICAL_ERROR;\n+\n+\t// Any wallet corruption at all: skip any rewriting or\n+\t// upgrading, we don't want to make it worse.\n+\tif (result != DB_LOAD_OK)\n+\t\treturn result;\n+\n+\tLogPrintf(\"nFileVersion = %d\\n\", wss.nFileVersion);\n+\n+\tLogPrintf(\"Keys: %u plaintext, %u encrypted, %u w/ metadata, %u total\\n\",\n+\t\twss.nKeys, wss.nCKeys, wss.nKeyMeta, wss.nKeys + wss.nCKeys);\n+\n+\t// nTimeFirstKey is only reliable if all keys have metadata\n+\tif ((wss.nKeys + wss.nCKeys) != wss.nKeyMeta)\n+\t\tpwallet->nTimeFirstKey = 1; // 0 would be considered 'no value'\n+\n+\tBOOST_FOREACH(uint256 hash, wss.vWalletUpgrade)\n+\t\tWriteTx(pwallet->mapWallet[hash]);\n+\n+\t// Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+\tif (wss.fIsEncrypted && (wss.nFileVersion == 40000 || wss.nFileVersion == 50000))\n+\t\treturn DB_NEED_REWRITE;\n+\n+\tif (wss.nFileVersion < CLIENT_VERSION) // Update\n+\t\tWriteVersion(CLIENT_VERSION);\n+\n+\tif (wss.fAnyUnordered)\n+\t\tresult = ReorderTransactions(pwallet);\n+\n+\tpwallet->laccentries.clear();\n+\tListAccountCreditDebit(\"*\", pwallet->laccentries);\n+\tBOOST_FOREACH(CAccountingEntry& entry, pwallet->laccentries) {\n+\t\tpwallet->wtxOrdered.insert(make_pair(entry.nOrderPos, CWallet::TxPair((CWalletTx*)0, &entry)));\n+\t}\n+\n+\treturn result;\n }\n \n-bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename)\n+DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, vector<uint256>& vTxHash, vector<CWalletTx>& vWtx)\n {\n-    return CWalletDB::Recover(dbenv, filename, false);\n+\tpwallet->vchDefaultKey = CPubKey();\n+\tbool fNoncriticalErrors = false;\n+\tDBErrors result = DB_LOAD_OK;\n+\n+\ttry {\n+\t\tLOCK(pwallet->cs_wallet);\n+\t\tint nMinVersion = 0;\n+\t\tif (Read((string)\"minversion\", nMinVersion))\n+\t\t{\n+\t\t\tif (nMinVersion > CLIENT_VERSION)\n+\t\t\t\treturn DB_TOO_NEW;\n+\t\t\tpwallet->LoadMinVersion(nMinVersion);\n+\t\t}\n+\n+\t\t// Get cursor\n+\t\tDbc* pcursor = GetCursor();\n+\t\tif (!pcursor)\n+\t\t{\n+\t\t\tLogPrintf(\"Error getting wallet database cursor\\n\");\n+\t\t\treturn DB_CORRUPT;\n+\t\t}\n+\n+\t\twhile (true)\n+\t\t{\n+\t\t\t// Read next record\n+\t\t\tCDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+\t\t\tCDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+\t\t\tint ret = ReadAtCursor(pcursor, ssKey, ssValue);\n+\t\t\tif (ret == DB_NOTFOUND)\n+\t\t\t\tbreak;\n+\t\t\telse if (ret != 0)\n+\t\t\t{\n+\t\t\t\tLogPrintf(\"Error reading next record from wallet database\\n\");\n+\t\t\t\treturn DB_CORRUPT;\n+\t\t\t}\n+\n+\t\t\tstring strType;\n+\t\t\tssKey >> strType;\n+\t\t\tif (strType == \"tx\") {\n+\t\t\t\tuint256 hash;\n+\t\t\t\tssKey >> hash;\n+\n+\t\t\t\tCWalletTx wtx;\n+\t\t\t\tssValue >> wtx;\n+\n+\t\t\t\tvTxHash.push_back(hash);\n+\t\t\t\tvWtx.push_back(wtx);\n+\t\t\t}\n+\t\t}\n+\t\tpcursor->close();\n+\t}\n+\tcatch (const boost::thread_interrupted&) {\n+\t\tthrow;\n+\t}\n+\tcatch (...) {\n+\t\tresult = DB_CORRUPT;\n+\t}\n+\n+\tif (fNoncriticalErrors && result == DB_LOAD_OK)\n+\t\tresult = DB_NONCRITICAL_ERROR;\n+\n+\treturn result;\n }\n \n-bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)\n+DBErrors CWalletDB::ZapSelectTx(CWallet* pwallet, vector<uint256>& vTxHashIn, vector<uint256>& vTxHashOut)\n {\n-    nWalletDBUpdateCounter++;\n-    return Write(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)), value);\n+\t// build list of wallet TXs and hashes\n+\tvector<uint256> vTxHash;\n+\tvector<CWalletTx> vWtx;\n+\tDBErrors err = FindWalletTx(pwallet, vTxHash, vWtx);\n+\tif (err != DB_LOAD_OK) {\n+\t\treturn err;\n+\t}\n+\n+\tstd::sort(vTxHash.begin(), vTxHash.end());\n+\tstd::sort(vTxHashIn.begin(), vTxHashIn.end());\n+\n+\t// erase each matching wallet TX\n+\tbool delerror = false;\n+\tvector<uint256>::iterator it = vTxHashIn.begin();\n+\tBOOST_FOREACH(uint256 hash, vTxHash) {\n+\t\twhile (it < vTxHashIn.end() && (*it) < hash) {\n+\t\t\tit++;\n+\t\t}\n+\t\tif (it == vTxHashIn.end()) {\n+\t\t\tbreak;\n+\t\t}\n+\t\telse if ((*it) == hash) {\n+\t\t\tpwallet->mapWallet.erase(hash);\n+\t\t\tif (!EraseTx(hash)) {\n+\t\t\t\tLogPrint(\"db\", \"Transaction was found for deletion but returned database error: %s\\n\", hash.GetHex());\n+\t\t\t\tdelerror = true;\n+\t\t\t}\n+\t\t\tvTxHashOut.push_back(hash);\n+\t\t}\n+\t}\n+\n+\tif (delerror) {\n+\t\treturn DB_CORRUPT;\n+\t}\n+\treturn DB_LOAD_OK;\n }\n \n-bool CWalletDB::EraseDestData(const std::string &address, const std::string &key)\n+DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, vector<CWalletTx>& vWtx)\n {\n-    nWalletDBUpdateCounter++;\n-    return Erase(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)));\n+\t// build list of wallet TXs\n+\tvector<uint256> vTxHash;\n+\tDBErrors err = FindWalletTx(pwallet, vTxHash, vWtx);\n+\tif (err != DB_LOAD_OK)\n+\t\treturn err;\n+\n+\t// erase each wallet TX\n+\tBOOST_FOREACH(uint256& hash, vTxHash) {\n+\t\tif (!EraseTx(hash))\n+\t\t\treturn DB_CORRUPT;\n+\t}\n+\n+\treturn DB_LOAD_OK;\n }\n \n-bool CWalletDB::WriteHDChain(const CHDChain& chain)\n+void ThreadFlushWalletDB(const string& strFile)\n {\n-    nWalletDBUpdateCounter++;\n-    return Write(std::string(\"hdchain\"), chain);\n+\t// Make this thread recognisable as the wallet flushing thread\n+\tRenameThread(\"syscoin-wallet\");\n+\n+\tstatic bool fOneThread;\n+\tif (fOneThread)\n+\t\treturn;\n+\tfOneThread = true;\n+\tif (!GetBoolArg(\"-flushwallet\", DEFAULT_FLUSHWALLET))\n+\t\treturn;\n+\n+\tunsigned int nLastSeen = nWalletDBUpdated;\n+\tunsigned int nLastFlushed = nWalletDBUpdated;\n+\tint64_t nLastWalletUpdate = GetTime();\n+\twhile (true)\n+\t{\n+\t\tMilliSleep(500);\n+\n+\t\tif (nLastSeen != nWalletDBUpdated)\n+\t\t{\n+\t\t\tnLastSeen = nWalletDBUpdated;\n+\t\t\tnLastWalletUpdate = GetTime();\n+\t\t}\n+\n+\t\tif (nLastFlushed != nWalletDBUpdated && GetTime() - nLastWalletUpdate >= 2)\n+\t\t{\n+\t\t\tTRY_LOCK(bitdb.cs_db, lockDb);\n+\t\t\tif (lockDb)\n+\t\t\t{\n+\t\t\t\t// Don't do this if any databases are in use\n+\t\t\t\tint nRefCount = 0;\n+\t\t\t\tmap<string, int>::iterator mi = bitdb.mapFileUseCount.begin();\n+\t\t\t\twhile (mi != bitdb.mapFileUseCount.end())\n+\t\t\t\t{\n+\t\t\t\t\tnRefCount += (*mi).second;\n+\t\t\t\t\tmi++;\n+\t\t\t\t}\n+\n+\t\t\t\tif (nRefCount == 0)\n+\t\t\t\t{\n+\t\t\t\t\tboost::this_thread::interruption_point();\n+\t\t\t\t\tmap<string, int>::iterator mi = bitdb.mapFileUseCount.find(strFile);\n+\t\t\t\t\tif (mi != bitdb.mapFileUseCount.end())\n+\t\t\t\t\t{\n+\t\t\t\t\t\tLogPrint(\"db\", \"Flushing %s\\n\", strFile);\n+\t\t\t\t\t\tnLastFlushed = nWalletDBUpdated;\n+\t\t\t\t\t\tint64_t nStart = GetTimeMillis();\n+\n+\t\t\t\t\t\t// Flush wallet file so it's self contained\n+\t\t\t\t\t\tbitdb.CloseDb(strFile);\n+\t\t\t\t\t\tbitdb.CheckpointLSN(strFile);\n+\n+\t\t\t\t\t\tbitdb.mapFileUseCount.erase(mi++);\n+\t\t\t\t\t\tLogPrint(\"db\", \"Flushed %s %dms\\n\", strFile, GetTimeMillis() - nStart);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n }\n \n-bool CWalletDB::WriteCryptedHDChain(const CHDChain& chain)\n+//\n+// Try to (very carefully!) recover wallet file if there is a problem.\n+//\n+bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys)\n {\n-    nWalletDBUpdateCounter++;\n-\n-    if (!Write(std::string(\"chdchain\"), chain))\n-        return false;\n-\n-    Erase(std::string(\"hdchain\"));\n-\n-    return true;\n+\t// Recovery procedure:\n+\t// move wallet file to wallet.timestamp.bak\n+\t// Call Salvage with fAggressive=true to\n+\t// get as much data as possible.\n+\t// Rewrite salvaged data to fresh wallet file\n+\t// Set -rescan so any missing transactions will be\n+\t// found.\n+\tint64_t now = GetTime();\n+\tstd::string newFilename = strprintf(\"wallet.%d.bak\", now);\n+\n+\tint result = dbenv.dbenv->dbrename(NULL, filename.c_str(), NULL,\n+\t\tnewFilename.c_str(), DB_AUTO_COMMIT);\n+\tif (result == 0)\n+\t\tLogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n+\telse\n+\t{\n+\t\tLogPrintf(\"Failed to rename %s to %s\\n\", filename, newFilename);\n+\t\treturn false;\n+\t}\n+\n+\tstd::vector<CDBEnv::KeyValPair> salvagedData;\n+\tbool fSuccess = dbenv.Salvage(newFilename, true, salvagedData);\n+\tif (salvagedData.empty())\n+\t{\n+\t\tLogPrintf(\"Salvage(aggressive) found no records in %s.\\n\", newFilename);\n+\t\treturn false;\n+\t}\n+\tLogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n+\n+\tboost::scoped_ptr<Db> pdbCopy(new Db(dbenv.dbenv, 0));\n+\tint ret = pdbCopy->open(NULL,               // Txn pointer\n+\t\tfilename.c_str(),   // Filename\n+\t\t\"main\",             // Logical db name\n+\t\tDB_BTREE,           // Database type\n+\t\tDB_CREATE,          // Flags\n+\t\t0);\n+\tif (ret > 0)\n+\t{\n+\t\tLogPrintf(\"Cannot create database file %s\\n\", filename);\n+\t\treturn false;\n+\t}\n+\tCWallet dummyWallet;\n+\tCWalletScanState wss;\n+\n+\tDbTxn* ptxn = dbenv.TxnBegin();\n+\tBOOST_FOREACH(CDBEnv::KeyValPair& row, salvagedData)\n+\t{\n+\t\tif (fOnlyKeys)\n+\t\t{\n+\t\t\tCDataStream ssKey(row.first, SER_DISK, CLIENT_VERSION);\n+\t\t\tCDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n+\t\t\tstring strType, strErr;\n+\t\t\tbool fReadOK;\n+\t\t\t{\n+\t\t\t\t// Required in LoadKeyMetadata():\n+\t\t\t\tLOCK(dummyWallet.cs_wallet);\n+\t\t\t\tfReadOK = ReadKeyValue(&dummyWallet, ssKey, ssValue,\n+\t\t\t\t\twss, strType, strErr);\n+\t\t\t}\n+\t\t\tif (!IsKeyType(strType) && strType != \"hdchain\")\n+\t\t\t\tcontinue;\n+\t\t\tif (!fReadOK)\n+\t\t\t{\n+\t\t\t\tLogPrintf(\"WARNING: CWalletDB::Recover skipping %s: %s\\n\", strType, strErr);\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t}\n+\t\tDbt datKey(&row.first[0], row.first.size());\n+\t\tDbt datValue(&row.second[0], row.second.size());\n+\t\tint ret2 = pdbCopy->put(ptxn, &datKey, &datValue, DB_NOOVERWRITE);\n+\t\tif (ret2 > 0)\n+\t\t\tfSuccess = false;\n+\t}\n+\tptxn->commit(0);\n+\tpdbCopy->close(0);\n+\n+\treturn fSuccess;\n }\n \n-bool CWalletDB::WriteHDPubKey(const CHDPubKey& hdPubKey, const CKeyMetadata& keyMeta)\n+bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename)\n {\n-    nWalletDBUpdateCounter++;\n-\n-    if (!Write(std::make_pair(std::string(\"keymeta\"), hdPubKey.extPubKey.pubkey), keyMeta, false))\n-        return false;\n-\n-    return Write(std::make_pair(std::string(\"hdpubkey\"), hdPubKey.extPubKey.pubkey), hdPubKey, false);\n+\treturn CWalletDB::Recover(dbenv, filename, false);\n }\n \n-void CWalletDB::IncrementUpdateCounter()\n+bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)\n {\n-    nWalletDBUpdateCounter++;\n+\tnWalletDBUpdated++;\n+\treturn Write(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)), value);\n }\n \n-unsigned int CWalletDB::GetUpdateCounter()\n+bool CWalletDB::EraseDestData(const std::string &address, const std::string &key)\n {\n-    return nWalletDBUpdateCounter;\n+\tnWalletDBUpdated++;\n+\treturn Erase(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)));\n }\n+\n+\n+bool CWalletDB::WriteHDChain(const CHDChain& chain)\n+{\n+\tnWalletDBUpdated++;\n+\treturn Write(std::string(\"hdchain\"), chain);\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "db850544630d82b8a335074a781f8d0ca8957ac4",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 125,
        "deletions": 84,
        "changes": 209,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ca4ecfe46163d0e7fe87f3128441a3d87636956/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=8ca4ecfe46163d0e7fe87f3128441a3d87636956",
        "patch": "@@ -7,8 +7,8 @@\n #define SYSCOIN_WALLET_WALLETDB_H\n \n #include \"amount.h\"\n+#include \"primitives/transaction.h\"\n #include \"wallet/db.h\"\n-#include \"hdchain.h\"\n #include \"key.h\"\n \n #include <list>\n@@ -33,117 +33,158 @@ class uint256;\n /** Error statuses for the wallet database */\n enum DBErrors\n {\n-    DB_LOAD_OK,\n-    DB_CORRUPT,\n-    DB_NONCRITICAL_ERROR,\n-    DB_TOO_NEW,\n-    DB_LOAD_FAIL,\n-    DB_NEED_REWRITE\n+\tDB_LOAD_OK,\n+\tDB_CORRUPT,\n+\tDB_NONCRITICAL_ERROR,\n+\tDB_TOO_NEW,\n+\tDB_LOAD_FAIL,\n+\tDB_NEED_REWRITE\n+};\n+\n+/* simple HD chain data model */\n+class CHDChain\n+{\n+public:\n+\tuint32_t nExternalChainCounter;\n+\tCKeyID masterKeyID; //!< master key hash160\n+\n+\tstatic const int CURRENT_VERSION = 1;\n+\tint nVersion;\n+\n+\tCHDChain() { SetNull(); }\n+\tADD_SERIALIZE_METHODS;\n+\ttemplate <typename Stream, typename Operation>\n+\tinline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+\t{\n+\t\tREADWRITE(this->nVersion);\n+\t\tnVersion = this->nVersion;\n+\t\tREADWRITE(nExternalChainCounter);\n+\t\tREADWRITE(masterKeyID);\n+\t}\n+\n+\tvoid SetNull()\n+\t{\n+\t\tnVersion = CHDChain::CURRENT_VERSION;\n+\t\tnExternalChainCounter = 0;\n+\t\tmasterKeyID.SetNull();\n+\t}\n };\n \n class CKeyMetadata\n {\n public:\n-    static const int CURRENT_VERSION=1;\n-    int nVersion;\n-    int64_t nCreateTime; // 0 means unknown\n-\n-    CKeyMetadata()\n-    {\n-        SetNull();\n-    }\n-    CKeyMetadata(int64_t nCreateTime_)\n-    {\n-        SetNull();\n-        nCreateTime = nCreateTime_;\n-    }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(this->nVersion);\n-        READWRITE(nCreateTime);\n-    }\n-\n-    void SetNull()\n-    {\n-        nVersion = CKeyMetadata::CURRENT_VERSION;\n-        nCreateTime = 0;\n-    }\n+\tstatic const int VERSION_BASIC = 1;\n+\tstatic const int VERSION_WITH_HDDATA = 10;\n+\tstatic const int CURRENT_VERSION = VERSION_WITH_HDDATA;\n+\tint nVersion;\n+\tint64_t nCreateTime; // 0 means unknown\n+\tstd::string hdKeypath; //optional HD/bip32 keypath\n+\tCKeyID hdMasterKeyID; //id of the HD masterkey used to derive this key\n+\n+\tCKeyMetadata()\n+\t{\n+\t\tSetNull();\n+\t}\n+\tCKeyMetadata(int64_t nCreateTime_)\n+\t{\n+\t\tSetNull();\n+\t\tnCreateTime = nCreateTime_;\n+\t}\n+\n+\tADD_SERIALIZE_METHODS;\n+\n+\ttemplate <typename Stream, typename Operation>\n+\tinline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+\t\tREADWRITE(this->nVersion);\n+\t\tnVersion = this->nVersion;\n+\t\tREADWRITE(nCreateTime);\n+\t\tif (this->nVersion >= VERSION_WITH_HDDATA)\n+\t\t{\n+\t\t\tREADWRITE(hdKeypath);\n+\t\t\tREADWRITE(hdMasterKeyID);\n+\t\t}\n+\t}\n+\n+\tvoid SetNull()\n+\t{\n+\t\tnVersion = CKeyMetadata::CURRENT_VERSION;\n+\t\tnCreateTime = 0;\n+\t\thdKeypath.clear();\n+\t\thdMasterKeyID.SetNull();\n+\t}\n };\n \n /** Access to the wallet database */\n class CWalletDB : public CDB\n {\n public:\n-    CWalletDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnClose = true) : CDB(strFilename, pszMode, fFlushOnClose)\n-    {\n-    }\n+\tCWalletDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnClose = true) : CDB(strFilename, pszMode, fFlushOnClose)\n+\t{\n+\t}\n+\n+\tbool WriteName(const std::string& strAddress, const std::string& strName);\n+\tbool EraseName(const std::string& strAddress);\n \n-    bool WriteName(const std::string& strAddress, const std::string& strName);\n-    bool EraseName(const std::string& strAddress);\n+\tbool WritePurpose(const std::string& strAddress, const std::string& purpose);\n+\tbool ErasePurpose(const std::string& strAddress);\n \n-    bool WritePurpose(const std::string& strAddress, const std::string& purpose);\n-    bool ErasePurpose(const std::string& strAddress);\n+\tbool WriteTx(const CWalletTx& wtx);\n+\tbool EraseTx(uint256 hash);\n \n-    bool WriteTx(const CWalletTx& wtx);\n-    bool EraseTx(uint256 hash);\n+\tbool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata &keyMeta);\n+\tbool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, const CKeyMetadata &keyMeta);\n+\tbool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey);\n \n-    bool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata &keyMeta);\n-    bool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, const CKeyMetadata &keyMeta);\n-    bool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey);\n+\tbool WriteCScript(const uint160& hash, const CScript& redeemScript);\n \n-    bool WriteCScript(const uint160& hash, const CScript& redeemScript);\n+\tbool WriteWatchOnly(const CScript &script);\n+\tbool EraseWatchOnly(const CScript &script);\n \n-    bool WriteWatchOnly(const CScript &script, const CKeyMetadata &keymeta);\n-    bool EraseWatchOnly(const CScript &script);\n+\tbool WriteBestBlock(const CBlockLocator& locator);\n+\tbool ReadBestBlock(CBlockLocator& locator);\n \n-    bool WriteBestBlock(const CBlockLocator& locator);\n-    bool ReadBestBlock(CBlockLocator& locator);\n+\tbool WriteOrderPosNext(int64_t nOrderPosNext);\n \n-    bool WriteOrderPosNext(int64_t nOrderPosNext);\n+\tbool WriteDefaultKey(const CPubKey& vchPubKey);\n \n-    bool ReadPool(int64_t nPool, CKeyPool& keypool);\n-    bool WritePool(int64_t nPool, const CKeyPool& keypool);\n-    bool ErasePool(int64_t nPool);\n+\tbool ReadPool(int64_t nPool, CKeyPool& keypool);\n+\tbool WritePool(int64_t nPool, const CKeyPool& keypool);\n+\tbool ErasePool(int64_t nPool);\n \n-    bool WriteMinVersion(int nVersion);\n+\tbool WriteMinVersion(int nVersion);\n \n-    /// This writes directly to the database, and will not update the CWallet's cached accounting entries!\n-    /// Use wallet.AddAccountingEntry instead, to write *and* update its caches.\n-    bool WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry);\n-    bool WriteAccountingEntry_Backend(const CAccountingEntry& acentry);\n-    bool ReadAccount(const std::string& strAccount, CAccount& account);\n-    bool WriteAccount(const std::string& strAccount, const CAccount& account);\n+\t/// This writes directly to the database, and will not update the CWallet's cached accounting entries!\n+\t/// Use wallet.AddAccountingEntry instead, to write *and* update its caches.\n+\tbool WriteAccountingEntry_Backend(const CAccountingEntry& acentry);\n+\tbool ReadAccount(const std::string& strAccount, CAccount& account);\n+\tbool WriteAccount(const std::string& strAccount, const CAccount& account);\n \n-    /// Write destination data key,value tuple to database\n-    bool WriteDestData(const std::string &address, const std::string &key, const std::string &value);\n-    /// Erase destination data tuple from wallet database\n-    bool EraseDestData(const std::string &address, const std::string &key);\n+\t/// Write destination data key,value tuple to database\n+\tbool WriteDestData(const std::string &address, const std::string &key, const std::string &value);\n+\t/// Erase destination data tuple from wallet database\n+\tbool EraseDestData(const std::string &address, const std::string &key);\n \n-    CAmount GetAccountCreditDebit(const std::string& strAccount);\n-    void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n+\tCAmount GetAccountCreditDebit(const std::string& strAccount);\n+\tvoid ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n \n-    DBErrors LoadWallet(CWallet* pwallet);\n-    DBErrors FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx);\n-    DBErrors ZapWalletTx(CWallet* pwallet, std::vector<CWalletTx>& vWtx);\n-    DBErrors ZapSelectTx(CWallet* pwallet, std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n-    static bool Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys);\n-    static bool Recover(CDBEnv& dbenv, const std::string& filename);\n+\tDBErrors ReorderTransactions(CWallet* pwallet);\n+\tDBErrors LoadWallet(CWallet* pwallet);\n+\tDBErrors FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx);\n+\tDBErrors ZapWalletTx(CWallet* pwallet, std::vector<CWalletTx>& vWtx);\n+\tDBErrors ZapSelectTx(CWallet* pwallet, std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n+\tstatic bool Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys);\n+\tstatic bool Recover(CDBEnv& dbenv, const std::string& filename);\n \n-    //! write the hdchain model (external chain child index counter)\n-    bool WriteHDChain(const CHDChain& chain);\n-    bool WriteCryptedHDChain(const CHDChain& chain);\n-    bool WriteHDPubKey(const CHDPubKey& hdPubKey, const CKeyMetadata& keyMeta);\n+\t//! write the hdchain model (external chain child index counter)\n+\tbool WriteHDChain(const CHDChain& chain);\n \n-    static void IncrementUpdateCounter();\n-    static unsigned int GetUpdateCounter();\n private:\n-    CWalletDB(const CWalletDB&);\n-    void operator=(const CWalletDB&);\n+\tCWalletDB(const CWalletDB&);\n+\tvoid operator=(const CWalletDB&);\n+\n+\tbool WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry);\n };\n \n-void ThreadFlushWalletDB();\n+void ThreadFlushWalletDB(const std::string& strFile);\n \n-#endif // SYSCOIN_WALLET_WALLETDB_H\n+#endif // SYSCOIN_WALLET_WALLETDB_H\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "70b3b04f18f192936a57547869507880e66502d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGIzYjA0ZjE4ZjE5MjkzNmE1NzU0Nzg2OTUwNzg4MGU2NjUwMmQ2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T00:55:24Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T00:55:24Z"
      },
      "message": "compile",
      "tree": {
        "sha": "9555f3b535b7adc205cdffef2e6f238e1ef56ebb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9555f3b535b7adc205cdffef2e6f238e1ef56ebb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70b3b04f18f192936a57547869507880e66502d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70b3b04f18f192936a57547869507880e66502d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70b3b04f18f192936a57547869507880e66502d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70b3b04f18f192936a57547869507880e66502d6/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ca4ecfe46163d0e7fe87f3128441a3d87636956",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ca4ecfe46163d0e7fe87f3128441a3d87636956",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ca4ecfe46163d0e7fe87f3128441a3d87636956"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "38855a9538cd66d3878e8f06da456901ba1ec8e0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70b3b04f18f192936a57547869507880e66502d6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70b3b04f18f192936a57547869507880e66502d6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=70b3b04f18f192936a57547869507880e66502d6",
        "patch": "@@ -597,6 +597,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n \n+\t/* the HD chain data model (external chain counters) */\n+\tCHDChain hdChain;\n \n     bool fFileBacked;\n "
      }
    ]
  },
  {
    "sha": "b60ae78279d350da3a228a5ed61578d91638773f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjBhZTc4Mjc5ZDM1MGRhM2EyMjhhNWVkNjE1NzhkOTE2Mzg3NzNm",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T00:58:16Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T00:58:16Z"
      },
      "message": "compile",
      "tree": {
        "sha": "c47ba631385a247e2f1407375d51d799b0c767e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c47ba631385a247e2f1407375d51d799b0c767e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b60ae78279d350da3a228a5ed61578d91638773f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b60ae78279d350da3a228a5ed61578d91638773f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b60ae78279d350da3a228a5ed61578d91638773f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b60ae78279d350da3a228a5ed61578d91638773f/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70b3b04f18f192936a57547869507880e66502d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70b3b04f18f192936a57547869507880e66502d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70b3b04f18f192936a57547869507880e66502d6"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 0,
      "deletions": 9
    },
    "files": [
      {
        "sha": "8fcdce17f704df86bd4f76b72284fdf766d20493",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b60ae78279d350da3a228a5ed61578d91638773f/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b60ae78279d350da3a228a5ed61578d91638773f/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=b60ae78279d350da3a228a5ed61578d91638773f",
        "patch": "@@ -142,15 +142,6 @@ bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight,  const CAmou\n                 LogPrint(\"gobject\", \"IsBlockPayeeValid -- Valid superblock at height %d: %s\", nBlockHeight, txNew.ToString());\n                 return true;\n             }\n-\t\t\telse {\n-\t\t\t\t// SYSCOIN\n-\t\t\t\t// payments should not exceed limit\n-\t\t\t\tCAmount nPaymentsLimit = CSuperBlock::GetPaymentsLimit(nBlockHeight);\n-\t\t\t\tif (txNew.GetValueOut() > nPaymentsLimit) {\n-\t\t\t\t\tLogPrintf(\"IsBlockPayeeValid -- Warning: Superblock invalid, payments limit exceeded: payments %lld, limit %lld\\n\", nPaymentsTotalAmount, nPaymentsLimit);\n-\t\t\t\t\treturn\n-\t\t\t\t}\n-\t\t\t}\n \n             LogPrintf(\"IsBlockPayeeValid -- ERROR: Invalid superblock detected at height %d: %s\", nBlockHeight, txNew.ToString());\n             // should NOT allow such superblocks, when superblocks are enabled"
      }
    ]
  },
  {
    "sha": "e19e6ee5d22359492dfab145c061df18f0c3b296",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTllNmVlNWQyMjM1OTQ5MmRmYWIxNDVjMDYxZGYxOGYwYzNiMjk2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T00:58:59Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T00:58:59Z"
      },
      "message": "compile",
      "tree": {
        "sha": "977be0d624dcc7565bc85b9d883001c7089bc260",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/977be0d624dcc7565bc85b9d883001c7089bc260"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e19e6ee5d22359492dfab145c061df18f0c3b296",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e19e6ee5d22359492dfab145c061df18f0c3b296",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e19e6ee5d22359492dfab145c061df18f0c3b296",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e19e6ee5d22359492dfab145c061df18f0c3b296/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b60ae78279d350da3a228a5ed61578d91638773f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b60ae78279d350da3a228a5ed61578d91638773f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b60ae78279d350da3a228a5ed61578d91638773f"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 1,
      "deletions": 10
    },
    "files": [
      {
        "sha": "03be7048b55db5464bab155b4163aeb874303347",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e19e6ee5d22359492dfab145c061df18f0c3b296/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e19e6ee5d22359492dfab145c061df18f0c3b296/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=e19e6ee5d22359492dfab145c061df18f0c3b296",
        "patch": "@@ -394,18 +394,9 @@ void CSuperblockManager::CreateSuperblock(CMutableTransaction& txNewRet, int nBl\n     voutSuperblockRet.clear();\n \n     // CONFIGURE SUPERBLOCK OUTPUTS\n-\tpSuperblock->IsValid(txNewRet, nBlockHeight);\n+\n     // Superblock payments are appended to the end of the coinbase vout vector\n     DBG( std::cout << \"CSuperblockManager::CreateSuperblock Number payments: \" << pSuperblock->CountPayments() << std::endl; );\n-\t// SYSCOIN\n-\t// payments should not exceed limit\n-\tCAmount nPaymentsTotalAmount = pSuperblock->GetPaymentsTotalAmount();\n-\tCAmount nPaymentsLimit = CSuperBlock::GetPaymentsLimit(nBlockHeight);\n-\tif (nPaymentsTotalAmount > nPaymentsLimit) {\n-\t\tLogPrintf(\"CreateSuperblock::IsValid -- Warning: Superblock invalid, payments limit exceeded: payments %lld, limit %lld\\n\", nPaymentsTotalAmount, nPaymentsLimit);\n-\t\treturn\n-\t}\n-\n \n     // TODO: How many payments can we add before things blow up?\n     //       Consider at least following limits:"
      }
    ]
  },
  {
    "sha": "c512b0f4be931891986a13e4ea25dad45dd65621",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTEyYjBmNGJlOTMxODkxOTg2YTEzZTRlYTI1ZGFkNDVkZDY1NjIx",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:00:06Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:00:06Z"
      },
      "message": "compile",
      "tree": {
        "sha": "0e7659cabce857a17635d8ab9e9f85288718ab7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e7659cabce857a17635d8ab9e9f85288718ab7c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c512b0f4be931891986a13e4ea25dad45dd65621",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c512b0f4be931891986a13e4ea25dad45dd65621",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c512b0f4be931891986a13e4ea25dad45dd65621",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c512b0f4be931891986a13e4ea25dad45dd65621/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e19e6ee5d22359492dfab145c061df18f0c3b296",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e19e6ee5d22359492dfab145c061df18f0c3b296",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e19e6ee5d22359492dfab145c061df18f0c3b296"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "29e4376e2e46e1fcfe2da1b862cd7051a67d4550",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c512b0f4be931891986a13e4ea25dad45dd65621/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c512b0f4be931891986a13e4ea25dad45dd65621/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=c512b0f4be931891986a13e4ea25dad45dd65621",
        "patch": "@@ -200,17 +200,18 @@ bool CCryptoKeyStore::SetCrypted()\n     return true;\n }\n \n-bool CCryptoKeyStore::Lock(bool fAllowMixing)\n+bool CCryptoKeyStore::Lock()\n {\n-    if (!SetCrypted())\n-        return false;\n+\tif (!SetCrypted())\n+\t\treturn false;\n \n-    if(!fAllowMixing) {\n-        LOCK(cs_KeyStore);\n-        vMasterKey.clear();\n-    }\n-    NotifyStatusChanged(this);\n-    return true;\n+\t{\n+\t\tLOCK(cs_KeyStore);\n+\t\tvMasterKey.clear();\n+\t}\n+\n+\tNotifyStatusChanged(this);\n+\treturn true;\n }\n \n bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)"
      }
    ]
  },
  {
    "sha": "1f2abb53bdbdc89b65cd7d3e10df7ec7e26df12e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjJhYmI1M2JkYmRjODliNjVjZDdkM2UxMGRmN2VjN2UyNmRmMTJl",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:02:23Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:02:23Z"
      },
      "message": "compile",
      "tree": {
        "sha": "b8e6ca4f9e7057fcd92bcc98afbdd45ce06b601d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8e6ca4f9e7057fcd92bcc98afbdd45ce06b601d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f2abb53bdbdc89b65cd7d3e10df7ec7e26df12e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f2abb53bdbdc89b65cd7d3e10df7ec7e26df12e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f2abb53bdbdc89b65cd7d3e10df7ec7e26df12e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f2abb53bdbdc89b65cd7d3e10df7ec7e26df12e/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c512b0f4be931891986a13e4ea25dad45dd65621",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c512b0f4be931891986a13e4ea25dad45dd65621",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c512b0f4be931891986a13e4ea25dad45dd65621"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2edd3e72f4b326c15e2eaa56d8dd17cc47ef5d85",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f2abb53bdbdc89b65cd7d3e10df7ec7e26df12e/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f2abb53bdbdc89b65cd7d3e10df7ec7e26df12e/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=1f2abb53bdbdc89b65cd7d3e10df7ec7e26df12e",
        "patch": "@@ -259,7 +259,7 @@ bool CCryptoKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n         if (!IsCrypted())\n             return CBasicKeyStore::AddKeyPubKey(key, pubkey);\n \n-        if (IsLocked(true))\n+       if (IsLocked())\n             return false;\n \n         std::vector<unsigned char> vchCryptedSecret;"
      }
    ]
  },
  {
    "sha": "fa85e2e6e227f163be3221ab0681cb0c5f59ee80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTg1ZTJlNmUyMjdmMTYzYmUzMjIxYWIwNjgxY2IwYzVmNTllZTgw",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:05:46Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:05:46Z"
      },
      "message": "compile",
      "tree": {
        "sha": "d461fccb7af0c4a281b4c5295009cb5f302a6b2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d461fccb7af0c4a281b4c5295009cb5f302a6b2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa85e2e6e227f163be3221ab0681cb0c5f59ee80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa85e2e6e227f163be3221ab0681cb0c5f59ee80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa85e2e6e227f163be3221ab0681cb0c5f59ee80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa85e2e6e227f163be3221ab0681cb0c5f59ee80/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f2abb53bdbdc89b65cd7d3e10df7ec7e26df12e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f2abb53bdbdc89b65cd7d3e10df7ec7e26df12e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f2abb53bdbdc89b65cd7d3e10df7ec7e26df12e"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "0194cf92966fbfecb76b8f20c3721d1dcc43840e",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa85e2e6e227f163be3221ab0681cb0c5f59ee80/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa85e2e6e227f163be3221ab0681cb0c5f59ee80/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=fa85e2e6e227f163be3221ab0681cb0c5f59ee80",
        "patch": "@@ -432,14 +432,14 @@ void CSuperblockManager::CreateSuperblock(CMutableTransaction& txNewRet, int nBl\n     DBG( std::cout << \"CSuperblockManager::CreateSuperblock End\" << std::endl; );\n }\n \n-bool CSuperblockManager::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward)\n+bool CSuperblockManager::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount &blockReward)\n {\n     // GET BEST SUPERBLOCK, SHOULD MATCH\n     LOCK(governance.cs);\n \n     CSuperblock_sptr pSuperblock;\n     if(CSuperblockManager::GetBestSuperblock(pSuperblock, nBlockHeight)) {\n-        return pSuperblock->IsValid(txNew, nBlockHeight, nFee, blockReward);\n+        return pSuperblock->IsValid(txNew, nBlockHeight, blockReward);\n     }\n \n     return false;\n@@ -665,7 +665,7 @@ CAmount CSuperblock::GetPaymentsTotalAmount()\n *   - Does this transaction match the superblock?\n */\n \n-bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount& nFee, const CAmount &blockReward)\n+bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount &blockReward)\n {\n     // TODO : LOCK(cs);\n     // No reason for a lock here now since this method only accesses data\n@@ -710,8 +710,8 @@ bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, const CAm\n     // miner should not get more than he would usually get\n     CAmount nBlockValue = txNew.GetValueOut();\n     \n-\tif(nBlockValue > (blockReward + nFee + nPaymentsTotalAmount)) {\n-        LogPrintf(\"CSuperblock::IsValid -- ERROR: Block invalid, block value limit exceeded: block %lld, limit %lld\\n\", nBlockValue, blockReward + nFee + nPaymentsTotalAmount);\n+\tif(nBlockValue > (blockReward + nPaymentsTotalAmount)) {\n+        LogPrintf(\"CSuperblock::IsValid -- ERROR: Block invalid, block value limit exceeded: block %lld, limit %lld\\n\", nBlockValue, blockReward + nPaymentsTotalAmount);\n         return false;\n     }\n "
      }
    ]
  },
  {
    "sha": "7ebb5eb33d7000a47ba69296d201557d76877e91",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWJiNWViMzNkNzAwMGE0N2JhNjkyOTZkMjAxNTU3ZDc2ODc3ZTkx",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:08:56Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:08:56Z"
      },
      "message": "compile",
      "tree": {
        "sha": "d16fb616b992f3fff0fef273da6fb169c594b9e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d16fb616b992f3fff0fef273da6fb169c594b9e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ebb5eb33d7000a47ba69296d201557d76877e91",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ebb5eb33d7000a47ba69296d201557d76877e91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ebb5eb33d7000a47ba69296d201557d76877e91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ebb5eb33d7000a47ba69296d201557d76877e91/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa85e2e6e227f163be3221ab0681cb0c5f59ee80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa85e2e6e227f163be3221ab0681cb0c5f59ee80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa85e2e6e227f163be3221ab0681cb0c5f59ee80"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "7a0ffc7ead30f69aa8ed7ac634fba9bf73b7f090",
        "filename": "src/privatesend-client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ebb5eb33d7000a47ba69296d201557d76877e91/src/privatesend-client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ebb5eb33d7000a47ba69296d201557d76877e91/src/privatesend-client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/privatesend-client.cpp?ref=7ebb5eb33d7000a47ba69296d201557d76877e91",
        "patch": "@@ -688,7 +688,7 @@ bool CPrivateSendClient::DoAutomaticDenominating(CConnman& connman, bool fDryRun\n {\n     if(fMasternodeMode) return false; // no client-side mixing on masternodes\n     if(!fEnablePrivateSend) return false;\n-    if(!pwalletMain || pwalletMain->IsLocked(true)) return false;\n+    if(!pwalletMain || pwalletMain->IsLocked()) return false;\n     if(nState != POOL_STATE_IDLE) return false;\n \n     if(!masternodeSync.IsMasternodeListSynced()) {\n@@ -710,7 +710,7 @@ bool CPrivateSendClient::DoAutomaticDenominating(CConnman& connman, bool fDryRun\n         return false;\n     }\n \n-    if(!fDryRun && pwalletMain->IsLocked(true)) {\n+    if(!fDryRun && pwalletMain->IsLocked()) {\n         strAutoDenomResult = _(\"Wallet is locked.\");\n         return false;\n     }\n@@ -1047,7 +1047,7 @@ bool CPrivateSendClient::PrepareDenominate(int nMinRounds, int nMaxRounds, std::\n         return false;\n     }\n \n-    if (pwalletMain->IsLocked(true)) {\n+    if (pwalletMain->IsLocked()) {\n         strErrorRet = \"Wallet locked, unable to create transaction!\";\n         return false;\n     }"
      },
      {
        "sha": "f297883db3ee8380b65cfc1c92c65fc4b35b1e55",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ebb5eb33d7000a47ba69296d201557d76877e91/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ebb5eb33d7000a47ba69296d201557d76877e91/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=7ebb5eb33d7000a47ba69296d201557d76877e91",
        "patch": "@@ -451,7 +451,7 @@ WalletModel::EncryptionStatus WalletModel::getEncryptionStatus() const\n     {\n         return Unencrypted;\n     }\n-    else if(wallet->IsLocked(true))\n+    else if(wallet->IsLocked())\n     {\n         return Locked;\n     }"
      },
      {
        "sha": "801a342c350a40d270cbb3f681d5d3a25036b1ce",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ebb5eb33d7000a47ba69296d201557d76877e91/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ebb5eb33d7000a47ba69296d201557d76877e91/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7ebb5eb33d7000a47ba69296d201557d76877e91",
        "patch": "@@ -143,7 +143,7 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n     if (request.params.size() > 0)\n         strAccount = AccountFromValue(request.params[0]);\n \n-    if (!pwalletMain->IsLocked(true))\n+    if (!pwalletMain->IsLocked())\n         pwalletMain->TopUpKeyPool();\n \n     // Generate a new key that is added to wallet\n@@ -219,7 +219,7 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (!pwalletMain->IsLocked(true))\n+    if (!pwalletMain->IsLocked())\n         pwalletMain->TopUpKeyPool();\n \n     CReserveKey reservekey(pwalletMain);\n@@ -2184,7 +2184,7 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n     if (request.params.size() >= 3)\n         fForMixingOnly = request.params[2].get_bool();\n \n-    if (fForMixingOnly && !pwalletMain->IsLocked(true) && pwalletMain->IsLocked())\n+    if (fForMixingOnly && !pwalletMain->IsLocked() && pwalletMain->IsLocked())\n         throw JSONRPCError(RPC_WALLET_ALREADY_UNLOCKED, \"Error: Wallet is already unlocked for mixing only.\");\n \n     if (!pwalletMain->IsLocked())"
      },
      {
        "sha": "43d3d8f9d0ff71d7911d2da5ff60fe5d35a1c2d6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ebb5eb33d7000a47ba69296d201557d76877e91/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ebb5eb33d7000a47ba69296d201557d76877e91/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7ebb5eb33d7000a47ba69296d201557d76877e91",
        "patch": "@@ -340,7 +340,7 @@ bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool fForMixingOnl\n \n bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase)\n {\n-    bool fWasLocked = IsLocked(true);\n+    bool fWasLocked = IsLocked();\n     bool bUseKeePass = false;\n \n     SecureString strOldWalletPassphraseFinal;\n@@ -3947,7 +3947,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n     {\n         LOCK(cs_wallet);\n \n-        if (IsLocked(true))\n+        if (IsLocked())\n             return false;\n \n         // Top up key pool\n@@ -4011,7 +4011,7 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fIn\n     {\n         LOCK(cs_wallet);\n \n-        if (!IsLocked(true))\n+        if (!IsLocked())\n             TopUpKeyPool();\n \n         fInternal = fInternal && IsHDEnabled();\n@@ -4075,7 +4075,7 @@ bool CWallet::GetKeyFromPool(CPubKey& result, bool fInternal)\n         ReserveKeyFromKeyPool(nIndex, keypool, fInternal);\n         if (nIndex == -1)\n         {\n-            if (IsLocked(true)) return false;\n+            if (IsLocked()) return false;\n             // TODO: implement keypool for all accouts?\n             result = GenerateNewKey(0, fInternal);\n             return true;\n@@ -4996,7 +4996,7 @@ bool AutoBackupWallet(CWallet* wallet, const std::string& strWalletFile_, std::s\n         // Update nKeysLeftSinceAutoBackup using current external keypool size\n         wallet->nKeysLeftSinceAutoBackup = wallet->KeypoolCountExternalKeys();\n         LogPrintf(\"nKeysLeftSinceAutoBackup: %d\\n\", wallet->nKeysLeftSinceAutoBackup);\n-        if(wallet->IsLocked(true)) {\n+        if(wallet->IsLocked()) {\n             strBackupWarningRet = _(\"Wallet is locked, can't replenish keypool! Automatic backups and mixing are disabled, please unlock your wallet to replenish keypool.\");\n             LogPrintf(\"%s\\n\", strBackupWarningRet);\n             nWalletBackups = -2;"
      }
    ]
  },
  {
    "sha": "fbd12c637de76db1558ce81194bb4455afa07546",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYmQxMmM2MzdkZTc2ZGIxNTU4Y2U4MTE5NGJiNDQ1NWFmYTA3NTQ2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:11:11Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:11:11Z"
      },
      "message": "compile",
      "tree": {
        "sha": "6b4943af9b55cf44afc59a034d899c8225edb460",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b4943af9b55cf44afc59a034d899c8225edb460"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fbd12c637de76db1558ce81194bb4455afa07546",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbd12c637de76db1558ce81194bb4455afa07546",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fbd12c637de76db1558ce81194bb4455afa07546",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbd12c637de76db1558ce81194bb4455afa07546/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ebb5eb33d7000a47ba69296d201557d76877e91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ebb5eb33d7000a47ba69296d201557d76877e91",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ebb5eb33d7000a47ba69296d201557d76877e91"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 52,
      "deletions": 54
    },
    "files": [
      {
        "sha": "1bd2847c2a49aea544827b590630d001c2584459",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbd12c637de76db1558ce81194bb4455afa07546/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbd12c637de76db1558ce81194bb4455afa07546/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fbd12c637de76db1558ce81194bb4455afa07546",
        "patch": "@@ -687,7 +687,7 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n \t\treturn NullUniValue;\n \n \tif (fHelp || params.size() != 1)\n-\t\tthrow runtime_error(\n+\t\tthrow std::runtime_error(\n \t\t\t\"dumpwallet \\\"filename\\\"\\n\"\n \t\t\t\"\\nDumps all wallet keys in a human-readable format.\\n\"\n \t\t\t\"\\nArguments:\\n\"\n@@ -701,7 +701,7 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n \n \tEnsureWalletIsUnlocked();\n \n-\tofstream file;\n+\tstd::ofstream file;\n \tfile.open(params[0].get_str().c_str());\n \tif (!file.is_open())\n \t\tthrow JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");"
      },
      {
        "sha": "169a78d27ab253afe0258f2a61d71a56fc1dad76",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 51,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbd12c637de76db1558ce81194bb4455afa07546/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbd12c637de76db1558ce81194bb4455afa07546/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fbd12c637de76db1558ce81194bb4455afa07546",
        "patch": "@@ -4467,58 +4467,56 @@ class CAffectedKeysVisitor : public boost::static_visitor<void> {\n     void operator()(const CNoDestination &none) {}\n };\n \n-void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const {\n-    AssertLockHeld(cs_wallet); // mapKeyMetadata\n-    mapKeyBirth.clear();\n-\n-    // get birth times for keys with metadata\n-    for (const auto& entry : mapKeyMetadata) {\n-        if (entry.second.nCreateTime) {\n-            mapKeyBirth[entry.first] = entry.second.nCreateTime;\n-        }\n-    }\n-\n-    // map in which we'll infer heights of other keys\n-    CBlockIndex *pindexMax = chainActive[std::max(0, chainActive.Height() - 144)]; // the tip can be reorganized; use a 144-block safety margin\n-    std::map<CKeyID, CBlockIndex*> mapKeyFirstBlock;\n-    std::set<CKeyID> setKeys;\n-    GetKeys(setKeys);\n-    BOOST_FOREACH(const CKeyID &keyid, setKeys) {\n-        if (mapKeyBirth.count(keyid) == 0)\n-            mapKeyFirstBlock[keyid] = pindexMax;\n-    }\n-    setKeys.clear();\n-\n-    // if there are no such keys, we're done\n-    if (mapKeyFirstBlock.empty())\n-        return;\n-\n-    // find first block that affects those keys, if there are any left\n-    std::vector<CKeyID> vAffected;\n-    for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); it++) {\n-        // iterate over all wallet transactions...\n-        const CWalletTx &wtx = (*it).second;\n-        BlockMap::const_iterator blit = mapBlockIndex.find(wtx.hashBlock);\n-        if (blit != mapBlockIndex.end() && chainActive.Contains(blit->second)) {\n-            // ... which are already in a block\n-            int nHeight = blit->second->nHeight;\n-            BOOST_FOREACH(const CTxOut &txout, wtx.tx->vout) {\n-                // iterate over all their outputs\n-                CAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);\n-                BOOST_FOREACH(const CKeyID &keyid, vAffected) {\n-                    // ... and all their affected keys\n-                    std::map<CKeyID, CBlockIndex*>::iterator rit = mapKeyFirstBlock.find(keyid);\n-                    if (rit != mapKeyFirstBlock.end() && nHeight < rit->second->nHeight)\n-                        rit->second = blit->second;\n-                }\n-                vAffected.clear();\n-            }\n-        }\n-    }\n+void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n+\tAssertLockHeld(cs_wallet); // mapKeyMetadata\n+\tmapKeyBirth.clear();\n+\n+\t// get birth times for keys with metadata\n+\tfor (std::map<CKeyID, CKeyMetadata>::const_iterator it = mapKeyMetadata.begin(); it != mapKeyMetadata.end(); it++)\n+\t\tif (it->second.nCreateTime)\n+\t\t\tmapKeyBirth[it->first] = it->second.nCreateTime;\n+\n+\t// map in which we'll infer heights of other keys\n+\tCBlockIndex *pindexMax = chainActive[std::max(0, chainActive.Height() - 144)]; // the tip can be reorganized; use a 144-block safety margin\n+\tstd::map<CKeyID, CBlockIndex*> mapKeyFirstBlock;\n+\tstd::set<CKeyID> setKeys;\n+\tGetKeys(setKeys);\n+\tBOOST_FOREACH(const CKeyID &keyid, setKeys) {\n+\t\tif (mapKeyBirth.count(keyid) == 0)\n+\t\t\tmapKeyFirstBlock[keyid] = pindexMax;\n+\t}\n+\tsetKeys.clear();\n+\n+\t// if there are no such keys, we're done\n+\tif (mapKeyFirstBlock.empty())\n+\t\treturn;\n+\n+\t// find first block that affects those keys, if there are any left\n+\tstd::vector<CKeyID> vAffected;\n+\tfor (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); it++) {\n+\t\t// iterate over all wallet transactions...\n+\t\tconst CWalletTx &wtx = (*it).second;\n+\t\tBlockMap::const_iterator blit = mapBlockIndex.find(wtx.hashBlock);\n+\t\tif (blit != mapBlockIndex.end() && chainActive.Contains(blit->second)) {\n+\t\t\t// ... which are already in a block\n+\t\t\tint nHeight = blit->second->nHeight;\n+\t\t\tBOOST_FOREACH(const CTxOut &txout, wtx.vout) {\n+\t\t\t\t// iterate over all their outputs\n+\t\t\t\tCAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);\n+\t\t\t\tBOOST_FOREACH(const CKeyID &keyid, vAffected) {\n+\t\t\t\t\t// ... and all their affected keys\n+\t\t\t\t\tstd::map<CKeyID, CBlockIndex*>::iterator rit = mapKeyFirstBlock.find(keyid);\n+\t\t\t\t\tif (rit != mapKeyFirstBlock.end() && nHeight < rit->second->nHeight)\n+\t\t\t\t\t\trit->second = blit->second;\n+\t\t\t\t}\n+\t\t\t\tvAffected.clear();\n+\t\t\t}\n+\t\t}\n+\t}\n \n-    // Extract block timestamps for those keys\n-    for (std::map<CKeyID, CBlockIndex*>::const_iterator it = mapKeyFirstBlock.begin(); it != mapKeyFirstBlock.end(); it++)\n-        mapKeyBirth[it->first] = it->second->GetBlockTime() - 7200; // block times can be 2h off\n+\t// Extract block timestamps for those keys\n+\tfor (std::map<CKeyID, CBlockIndex*>::const_iterator it = mapKeyFirstBlock.begin(); it != mapKeyFirstBlock.end(); it++)\n+\t\tmapKeyBirth[it->first] = it->second->GetBlockTime() - 7200; // block times can be 2h off\n }\n \n bool CWallet::AddDestData(const CTxDestination &dest, const std::string &key, const std::string &value)"
      },
      {
        "sha": "9753d7529a32f45c2d007694eb1949cc1a29f121",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbd12c637de76db1558ce81194bb4455afa07546/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbd12c637de76db1558ce81194bb4455afa07546/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fbd12c637de76db1558ce81194bb4455afa07546",
        "patch": "@@ -803,7 +803,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n-    void GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const;\n+    void GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const;\n \n     /** \n      * Increment the next transaction order id"
      }
    ]
  },
  {
    "sha": "c399c053cda659834a527b42af9a116c4fca2b6c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzk5YzA1M2NkYTY1OTgzNGE1MjdiNDJhZjlhMTE2YzRmY2EyYjZj",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:25:30Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:25:30Z"
      },
      "message": "compile",
      "tree": {
        "sha": "7a2971c01d27d24fa77f55e64c199d082c5920c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a2971c01d27d24fa77f55e64c199d082c5920c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c399c053cda659834a527b42af9a116c4fca2b6c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c399c053cda659834a527b42af9a116c4fca2b6c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c399c053cda659834a527b42af9a116c4fca2b6c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c399c053cda659834a527b42af9a116c4fca2b6c/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fbd12c637de76db1558ce81194bb4455afa07546",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbd12c637de76db1558ce81194bb4455afa07546",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fbd12c637de76db1558ce81194bb4455afa07546"
      }
    ],
    "stats": {
      "total": 680,
      "additions": 221,
      "deletions": 459
    },
    "files": [
      {
        "sha": "021d0d4fa751a1688574318b1ec1e05b6fd4465e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 47,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c399c053cda659834a527b42af9a116c4fca2b6c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c399c053cda659834a527b42af9a116c4fca2b6c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c399c053cda659834a527b42af9a116c4fca2b6c",
        "patch": "@@ -2512,59 +2512,53 @@ UniValue settxfee(const JSONRPCRequest& request)\n \n UniValue getwalletinfo(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n-        return NullUniValue;\n+\tif (!EnsureWalletIsAvailable(request.fHelp))\n+\t\treturn NullUniValue;\n \n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n-            \"getwalletinfo\\n\"\n-            \"Returns an object containing various wallet state info.\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"walletversion\\\": xxxxx,     (numeric) the wallet version\\n\"\n-            \"  \\\"balance\\\": xxxxxxx,         (numeric) the total confirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n-            + (!fLiteMode ?\n-            \"  \\\"privatesend_balance\\\": xxxxxx, (numeric) the anonymized syscoin balance of the wallet in \" + CURRENCY_UNIT + \"\\n\" : \"\") +\n-            \"  \\\"unconfirmed_balance\\\": xxx, (numeric) the total unconfirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n-            \"  \\\"immature_balance\\\": xxxxxx, (numeric) the total immature balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n-            \"  \\\"txcount\\\": xxxxxxx,         (numeric) the total number of transactions in the wallet\\n\"\n-            \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\\n\"\n-            \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated (only counts external keys)\\n\"\n-            \"  \\\"keypoolsize_hd_internal\\\": xxxx, (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\\n\"\n-            \"  \\\"keys_left\\\": xxxx,          (numeric) how many new keys are left since last automatic backup\\n\"\n-            \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n+\tif (request.fHelp || request.params.size() != 0)\n+\t\tthrow std::runtime_error(\n+\t\t\t\"getwalletinfo\\n\"\n+\t\t\t\"Returns an object containing various wallet state info.\\n\"\n+\t\t\t\"\\nResult:\\n\"\n+\t\t\t\"{\\n\"\n+\t\t\t\"  \\\"walletversion\\\": xxxxx,       (numeric) the wallet version\\n\"\n+\t\t\t\"  \\\"balance\\\": xxxxxxx,           (numeric) the total confirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+\t\t\t+ (!fLiteMode ?\n+\t\t\t\t\"  \\\"privatesend_balance\\\": xxxxxx, (numeric) the anonymized syscoin balance of the wallet in \" + CURRENCY_UNIT + \"\\n\" : \"\") +\n+\t\t\t\"  \\\"unconfirmed_balance\\\": xxx,   (numeric) the total unconfirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+\t\t\t\"  \\\"immature_balance\\\": xxxxxx,   (numeric) the total immature balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+\t\t\t\"  \\\"txcount\\\": xxxxxxx,           (numeric) the total number of transactions in the wallet\\n\"\n+\t\t\t\"  \\\"keypoololdest\\\": xxxxxx,      (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\\n\"\n+\t\t\t\"  \\\"keypoolsize\\\": xxxx,          (numeric) how many new keys are pre-generated\\n\"\n+\t\t\t\"  \\\"unlocked_until\\\": ttt,        (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n+\t\t\t\"  \\\"paytxfee\\\": x.xxxx,           (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n \t\t\t\"  \\\"hdmasterkeyid\\\": \\\"<hash160>\\\", (string) the Hash160 of the HD master pubkey\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getwalletinfo\", \"\")\n-            + HelpExampleRpc(\"getwalletinfo\", \"\")\n-        );\n-\n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\t\t\t\"}\\n\"\n+\t\t\t\"\\nExamples:\\n\"\n+\t\t\t+ HelpExampleCli(\"getwalletinfo\", \"\")\n+\t\t\t+ HelpExampleRpc(\"getwalletinfo\", \"\")\n+\t\t);\n \n-    CHDChain hdChainCurrent;\n-    UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n-    obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));\n-    if(!fLiteMode)\n-        obj.push_back(Pair(\"privatesend_balance\",       ValueFromAmount(pwalletMain->GetAnonymizedBalance())));\n-    obj.push_back(Pair(\"unconfirmed_balance\", ValueFromAmount(pwalletMain->GetUnconfirmedBalance())));\n-    obj.push_back(Pair(\"immature_balance\",    ValueFromAmount(pwalletMain->GetImmatureBalance())));\n-    obj.push_back(Pair(\"txcount\",       (int)pwalletMain->mapWallet.size()));\n-    obj.push_back(Pair(\"keypoololdest\", pwalletMain->GetOldestKeyPoolTime()));\n-    obj.push_back(Pair(\"keypoolsize\",   (int64_t)pwalletMain->KeypoolCountExternalKeys()));\n-    if (fHDEnabled) {\n-        obj.push_back(Pair(\"keypoolsize_hd_internal\",   (int64_t)(pwalletMain->KeypoolCountInternalKeys())));\n-    }\n-    obj.push_back(Pair(\"keys_left\",     pwalletMain->nKeysLeftSinceAutoBackup));\n-    if (pwalletMain->IsCrypted())\n-        obj.push_back(Pair(\"unlocked_until\", nWalletUnlockTime));\n-    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n+\tLOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+\tUniValue obj(UniValue::VOBJ);\n+\tobj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n+\tobj.push_back(Pair(\"balance\", ValueFromAmount(pwalletMain->GetBalance())));\n+\tif (!fLiteMode)\n+\t\tobj.push_back(Pair(\"privatesend_balance\", ValueFromAmount(pwalletMain->GetAnonymizedBalance())));\n+\tobj.push_back(Pair(\"balance\", ValueFromAmount(pwalletMain->GetBalance())));\n+\tobj.push_back(Pair(\"unconfirmed_balance\", ValueFromAmount(pwalletMain->GetUnconfirmedBalance())));\n+\tobj.push_back(Pair(\"immature_balance\", ValueFromAmount(pwalletMain->GetImmatureBalance())));\n+\tobj.push_back(Pair(\"txcount\", (int)pwalletMain->mapWallet.size()));\n+\tobj.push_back(Pair(\"keypoololdest\", pwalletMain->GetOldestKeyPoolTime()));\n+\tobj.push_back(Pair(\"keypoolsize\", (int)pwalletMain->GetKeyPoolSize()));\n+\tif (pwalletMain->IsCrypted())\n+\t\tobj.push_back(Pair(\"unlocked_until\", nWalletUnlockTime));\n+\tobj.push_back(Pair(\"paytxfee\", ValueFromAmount(payTxFee.GetFeePerK())));\n \tCKeyID masterKeyID = pwalletMain->GetHDChain().masterKeyID;\n \tif (!masterKeyID.IsNull())\n \t\tobj.push_back(Pair(\"hdmasterkeyid\", masterKeyID.GetHex()));\n-    return obj;\n+\treturn obj;\n }\n UniValue generate(const JSONRPCRequest& request)\n {"
      },
      {
        "sha": "2560102536af3419863a79d821bb89064d9029aa",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 175,
        "deletions": 388,
        "changes": 563,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c399c053cda659834a527b42af9a116c4fca2b6c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c399c053cda659834a527b42af9a116c4fca2b6c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c399c053cda659834a527b42af9a116c4fca2b6c",
        "patch": "@@ -3754,97 +3754,82 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n     return nFeeNeeded;\n }\n \n+\n DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n {\n+\tif (!fFileBacked)\n+\t\treturn DB_LOAD_OK;\n \tfFirstRunRet = false;\n-    if (!fFileBacked)\n-        return DB_LOAD_OK;\n-    DBErrors nLoadWalletRet = CWalletDB(strWalletFile,\"cr+\").LoadWallet(this);\n-    if (nLoadWalletRet == DB_NEED_REWRITE)\n-    {\n-        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n-        {\n-            LOCK(cs_wallet);\n-            setInternalKeyPool.clear();\n-            setExternalKeyPool.clear();\n-            nKeysLeftSinceAutoBackup = 0;\n-            // Note: can't top-up keypool here, because wallet is locked.\n-            // User will be prompted to unlock wallet the next operation\n-            // that requires a new key.\n-        }\n-    }\n+\tDBErrors nLoadWalletRet = CWalletDB(strWalletFile, \"cr+\").LoadWallet(this);\n+\tif (nLoadWalletRet == DB_NEED_REWRITE)\n+\t{\n+\t\tif (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n+\t\t{\n+\t\t\tLOCK(cs_wallet);\n+\t\t\tsetKeyPool.clear();\n+\t\t\t// Note: can't top-up keypool here, because wallet is locked.\n+\t\t\t// User will be prompted to unlock wallet the next operation\n+\t\t\t// that requires a new key.\n+\t\t}\n+\t}\n \n-    {\n-        LOCK2(cs_main, cs_wallet);\n-        for (auto& pair : mapWallet) {\n-            for(unsigned int i = 0; i < pair.second.tx->vout.size(); ++i) {\n-                if (IsMine(pair.second.tx->vout[i]) && !IsSpent(pair.first, i)) {\n-                    setWalletUTXO.insert(COutPoint(pair.first, i));\n-                }\n-            }\n-        }\n-    }\n-\tfFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty();\n-\tif (GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET) && IsHDEnabled())\n-\t\tfFirstRunRet = false;\n-    if (nLoadWalletRet != DB_LOAD_OK)\n-        return nLoadWalletRet;\n+\tif (nLoadWalletRet != DB_LOAD_OK)\n+\t\treturn nLoadWalletRet;\n+\tfFirstRunRet = !vchDefaultKey.IsValid();\n \n-    uiInterface.LoadWallet(this);\n+\tuiInterface.LoadWallet(this);\n \n-    return DB_LOAD_OK;\n+\treturn DB_LOAD_OK;\n }\n \n-DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut)\n+\n+DBErrors CWallet::ZapSelectTx(vector<uint256>& vHashIn, vector<uint256>& vHashOut)\n {\n-    if (!fFileBacked)\n-        return DB_LOAD_OK;\n-    DBErrors nZapSelectTxRet = CWalletDB(strWalletFile,\"cr+\").ZapSelectTx(this, vHashIn, vHashOut);\n-    if (nZapSelectTxRet == DB_NEED_REWRITE)\n-    {\n-        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n-        {\n-            LOCK(cs_wallet);\n-            setInternalKeyPool.clear();\n-            setExternalKeyPool.clear();\n-            // Note: can't top-up keypool here, because wallet is locked.\n-            // User will be prompted to unlock wallet the next operation\n-            // that requires a new key.\n-        }\n-    }\n+\tif (!fFileBacked)\n+\t\treturn DB_LOAD_OK;\n+\tDBErrors nZapSelectTxRet = CWalletDB(strWalletFile, \"cr+\").ZapSelectTx(this, vHashIn, vHashOut);\n+\tif (nZapSelectTxRet == DB_NEED_REWRITE)\n+\t{\n+\t\tif (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n+\t\t{\n+\t\t\tLOCK(cs_wallet);\n+\t\t\tsetKeyPool.clear();\n+\t\t\t// Note: can't top-up keypool here, because wallet is locked.\n+\t\t\t// User will be prompted to unlock wallet the next operation\n+\t\t\t// that requires a new key.\n+\t\t}\n+\t}\n \n-    if (nZapSelectTxRet != DB_LOAD_OK)\n-        return nZapSelectTxRet;\n+\tif (nZapSelectTxRet != DB_LOAD_OK)\n+\t\treturn nZapSelectTxRet;\n \n-    MarkDirty();\n+\tMarkDirty();\n \n-    return DB_LOAD_OK;\n+\treturn DB_LOAD_OK;\n \n }\n \n DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n {\n-    if (!fFileBacked)\n-        return DB_LOAD_OK;\n-    DBErrors nZapWalletTxRet = CWalletDB(strWalletFile,\"cr+\").ZapWalletTx(this, vWtx);\n-    if (nZapWalletTxRet == DB_NEED_REWRITE)\n-    {\n-        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n-        {\n-            LOCK(cs_wallet);\n-            setInternalKeyPool.clear();\n-            setExternalKeyPool.clear();\n-            nKeysLeftSinceAutoBackup = 0;\n-            // Note: can't top-up keypool here, because wallet is locked.\n-            // User will be prompted to unlock wallet the next operation\n-            // that requires a new key.\n-        }\n-    }\n+\tif (!fFileBacked)\n+\t\treturn DB_LOAD_OK;\n+\tDBErrors nZapWalletTxRet = CWalletDB(strWalletFile, \"cr+\").ZapWalletTx(this, vWtx);\n+\tif (nZapWalletTxRet == DB_NEED_REWRITE)\n+\t{\n+\t\tif (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n+\t\t{\n+\t\t\tLOCK(cs_wallet);\n+\t\t\tsetKeyPool.clear();\n+\t\t\t// Note: can't top-up keypool here, because wallet is locked.\n+\t\t\t// User will be prompted to unlock wallet the next operation\n+\t\t\t// that requires a new key.\n+\t\t}\n+\t}\n \n-    if (nZapWalletTxRet != DB_LOAD_OK)\n-        return nZapWalletTxRet;\n+\tif (nZapWalletTxRet != DB_LOAD_OK)\n+\t\treturn nZapWalletTxRet;\n \n-    return DB_LOAD_OK;\n+\treturn DB_LOAD_OK;\n }\n \n \n@@ -3903,141 +3888,91 @@ bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)\n \treturn true;\n }\n /**\n- * Mark old keypool keys as used,\n- * and generate all new keys \n- */\n+* Mark old keypool keys as used,\n+* and generate all new keys\n+*/\n bool CWallet::NewKeyPool()\n {\n-    {\n-        LOCK(cs_wallet);\n-        CWalletDB walletdb(strWalletFile);\n-        BOOST_FOREACH(int64_t nIndex, setInternalKeyPool) {\n-            walletdb.ErasePool(nIndex);\n-        }\n-        setInternalKeyPool.clear();\n-        BOOST_FOREACH(int64_t nIndex, setExternalKeyPool) {\n-            walletdb.ErasePool(nIndex);\n-        }\n-        setExternalKeyPool.clear();\n-        privateSendClient.fEnablePrivateSend = false;\n-        nKeysLeftSinceAutoBackup = 0;\n+\t{\n+\t\tLOCK(cs_wallet);\n+\t\tCWalletDB walletdb(strWalletFile);\n+\t\tBOOST_FOREACH(int64_t nIndex, setKeyPool)\n+\t\t\twalletdb.ErasePool(nIndex);\n+\t\tsetKeyPool.clear();\n \n-        if (!TopUpKeyPool())\n-            return false;\n+\t\tif (IsLocked())\n+\t\t\treturn false;\n \n-        LogPrintf(\"CWallet::NewKeyPool rewrote keypool\\n\");\n-    }\n-    return true;\n+\t\tint64_t nKeys = max(GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t)0);\n+\t\tfor (int i = 0; i < nKeys; i++)\n+\t\t{\n+\t\t\tint64_t nIndex = i + 1;\n+\t\t\twalletdb.WritePool(nIndex, CKeyPool(GenerateNewKey()));\n+\t\t\tsetKeyPool.insert(nIndex);\n+\t\t}\n+\t\tLogPrintf(\"CWallet::NewKeyPool wrote %d new keys\\n\", nKeys);\n+\t}\n+\treturn true;\n }\n \n-size_t CWallet::KeypoolCountExternalKeys()\n-{\n-    AssertLockHeld(cs_wallet); // setExternalKeyPool\n-    return setExternalKeyPool.size();\n-}\n \n-size_t CWallet::KeypoolCountInternalKeys()\n-{\n-    AssertLockHeld(cs_wallet); // setInternalKeyPool\n-    return setInternalKeyPool.size();\n-}\n \n bool CWallet::TopUpKeyPool(unsigned int kpSize)\n {\n-    {\n-        LOCK(cs_wallet);\n-\n-        if (IsLocked())\n-            return false;\n+\t{\n+\t\tLOCK(cs_wallet);\n \n-        // Top up key pool\n-        unsigned int nTargetSize;\n-        if (kpSize > 0)\n-            nTargetSize = kpSize;\n-        else\n-            nTargetSize = std::max(GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\t\tif (IsLocked())\n+\t\t\treturn false;\n \n-        // count amount of available keys (internal, external)\n-        // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n-        int64_t amountExternal = setExternalKeyPool.size();\n-        int64_t amountInternal = setInternalKeyPool.size();\n-        int64_t missingExternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - amountExternal, (int64_t) 0);\n-        int64_t missingInternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - amountInternal, (int64_t) 0);\n+\t\tCWalletDB walletdb(strWalletFile);\n \n-        if (!IsHDEnabled())\n-        {\n-            // don't create extra internal keys\n-            missingInternal = 0;\n-        } else {\n-            nTargetSize *= 2;\n-        }\n-        bool fInternal = false;\n-        CWalletDB walletdb(strWalletFile);\n-        for (int64_t i = missingInternal + missingExternal; i--;)\n-        {\n-            int64_t nEnd = 1;\n-            if (i < missingInternal) {\n-                fInternal = true;\n-            }\n-            if (!setInternalKeyPool.empty()) {\n-                nEnd = *(--setInternalKeyPool.end()) + 1;\n-            }\n-            if (!setExternalKeyPool.empty()) {\n-                nEnd = std::max(nEnd, *(--setExternalKeyPool.end()) + 1);\n-            }\n-            // TODO: implement keypools for all accounts?\n-            if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey(0, fInternal), fInternal)))\n-                throw std::runtime_error(std::string(__func__) + \": writing generated key failed\");\n-\n-            if (fInternal) {\n-                setInternalKeyPool.insert(nEnd);\n-            } else {\n-                setExternalKeyPool.insert(nEnd);\n-            }\n-            LogPrintf(\"keypool added key %d, size=%u, internal=%d\\n\", nEnd, setInternalKeyPool.size() + setExternalKeyPool.size(), fInternal);\n+\t\t// Top up key pool\n+\t\tunsigned int nTargetSize;\n+\t\tif (kpSize > 0)\n+\t\t\tnTargetSize = kpSize;\n+\t\telse\n+\t\t\tnTargetSize = max(GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t)0);\n \n-            double dProgress = 100.f * nEnd / (nTargetSize + 1);\n-            std::string strMsg = strprintf(_(\"Loading wallet... (%3.2f %%)\"), dProgress);\n-            uiInterface.InitMessage(strMsg);\n-        }\n-    }\n-    return true;\n+\t\twhile (setKeyPool.size() < (nTargetSize + 1))\n+\t\t{\n+\t\t\tint64_t nEnd = 1;\n+\t\t\tif (!setKeyPool.empty())\n+\t\t\t\tnEnd = *(--setKeyPool.end()) + 1;\n+\t\t\tif (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey())))\n+\t\t\t\tthrow runtime_error(std::string(__func__) + \": writing generated key failed\");\n+\t\t\tsetKeyPool.insert(nEnd);\n+\t\t\tLogPrintf(\"keypool added key %d, size=%u\\n\", nEnd, setKeyPool.size());\n+\t\t}\n+\t}\n+\treturn true;\n }\n \n-void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fInternal)\n+void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool)\n {\n-    nIndex = -1;\n-    keypool.vchPubKey = CPubKey();\n-    {\n-        LOCK(cs_wallet);\n+\tnIndex = -1;\n+\tkeypool.vchPubKey = CPubKey();\n+\t{\n+\t\tLOCK(cs_wallet);\n \n-        if (!IsLocked())\n-            TopUpKeyPool();\n+\t\tif (!IsLocked())\n+\t\t\tTopUpKeyPool();\n \n-        fInternal = fInternal && IsHDEnabled();\n-        std::set<int64_t>& setKeyPool = fInternal ? setInternalKeyPool : setExternalKeyPool;\n+\t\t// Get the oldest key\n+\t\tif (setKeyPool.empty())\n+\t\t\treturn;\n \n-        // Get the oldest key\n-        if(setKeyPool.empty())\n-            return;\n+\t\tCWalletDB walletdb(strWalletFile);\n \n-        CWalletDB walletdb(strWalletFile);\n-\n-        nIndex = *setKeyPool.begin();\n-        setKeyPool.erase(nIndex);\n-        if (!walletdb.ReadPool(nIndex, keypool)) {\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n-        }\n-        if (!HaveKey(keypool.vchPubKey.GetID())) {\n-            throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n-        }\n-        if (keypool.fInternal != fInternal) {\n-            throw std::runtime_error(std::string(__func__) + \": keypool entry misclassified\");\n-        }\n-\n-        assert(keypool.vchPubKey.IsValid());\n-        LogPrintf(\"keypool reserve %d\\n\", nIndex);\n-    }\n+\t\tnIndex = *(setKeyPool.begin());\n+\t\tsetKeyPool.erase(setKeyPool.begin());\n+\t\tif (!walletdb.ReadPool(nIndex, keypool))\n+\t\t\tthrow runtime_error(std::string(__func__) + \": read failed\");\n+\t\tif (!HaveKey(keypool.vchPubKey.GetID()))\n+\t\t\tthrow runtime_error(std::string(__func__) + \": unknown key in key pool\");\n+\t\tassert(keypool.vchPubKey.IsValid());\n+\t\tLogPrintf(\"keypool reserve %d\\n\", nIndex);\n+\t}\n }\n \n void CWallet::KeepKey(int64_t nIndex)\n@@ -4052,69 +3987,54 @@ void CWallet::KeepKey(int64_t nIndex)\n     LogPrintf(\"keypool keep %d\\n\", nIndex);\n }\n \n-void CWallet::ReturnKey(int64_t nIndex, bool fInternal)\n+void CWallet::ReturnKey(int64_t nIndex)\n {\n-    // Return to key pool\n-    {\n-        LOCK(cs_wallet);\n-        if (fInternal) {\n-            setInternalKeyPool.insert(nIndex);\n-        } else {\n-            setExternalKeyPool.insert(nIndex);\n-        }\n-    }\n-    LogPrintf(\"keypool return %d\\n\", nIndex);\n+\t// Return to key pool\n+\t{\n+\t\tLOCK(cs_wallet);\n+\t\tsetKeyPool.insert(nIndex);\n+\t}\n+\tLogPrintf(\"keypool return %d\\n\", nIndex);\n }\n \n-bool CWallet::GetKeyFromPool(CPubKey& result, bool fInternal)\n+\n+bool CWallet::GetKeyFromPool(CPubKey& result)\n {\n-    int64_t nIndex = 0;\n-    CKeyPool keypool;\n-    {\n-        LOCK(cs_wallet);\n-        ReserveKeyFromKeyPool(nIndex, keypool, fInternal);\n-        if (nIndex == -1)\n-        {\n-            if (IsLocked()) return false;\n-            // TODO: implement keypool for all accouts?\n-            result = GenerateNewKey(0, fInternal);\n-            return true;\n-        }\n-        KeepKey(nIndex);\n-        result = keypool.vchPubKey;\n-    }\n-    return true;\n+\tint64_t nIndex = 0;\n+\tCKeyPool keypool;\n+\t{\n+\t\tLOCK(cs_wallet);\n+\t\tReserveKeyFromKeyPool(nIndex, keypool);\n+\t\tif (nIndex == -1)\n+\t\t{\n+\t\t\tif (IsLocked()) return false;\n+\t\t\tresult = GenerateNewKey();\n+\t\t\treturn true;\n+\t\t}\n+\t\tKeepKey(nIndex);\n+\t\tresult = keypool.vchPubKey;\n+\t}\n+\treturn true;\n }\n \n-static int64_t GetOldestKeyInPool(const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n-    CKeyPool keypool;\n-    int64_t nIndex = *(setKeyPool.begin());\n-    if (!walletdb.ReadPool(nIndex, keypool)) {\n-        throw std::runtime_error(std::string(__func__) + \": read oldest key in keypool failed\");\n-    }\n-    assert(keypool.vchPubKey.IsValid());\n-    return keypool.nTime;\n-}\n+\n \n int64_t CWallet::GetOldestKeyPoolTime()\n {\n-    LOCK(cs_wallet);\n-\n-    // if the keypool is empty, return <NOW>\n-    if (setExternalKeyPool.empty() && setInternalKeyPool.empty())\n-        return GetTime();\n+\tLOCK(cs_wallet);\n \n-    CWalletDB walletdb(strWalletFile);\n-    int64_t oldestKey = -1;\n+\t// if the keypool is empty, return <NOW>\n+\tif (setKeyPool.empty())\n+\t\treturn GetTime();\n \n-    // load oldest key from keypool, get time and return\n-    if (!setInternalKeyPool.empty()) {\n-        oldestKey = std::max(GetOldestKeyInPool(setInternalKeyPool, walletdb), oldestKey);\n-    }\n-    if (!setExternalKeyPool.empty()) {\n-        oldestKey = std::max(GetOldestKeyInPool(setExternalKeyPool, walletdb), oldestKey);\n-    }\n-    return oldestKey;\n+\t// load oldest key from keypool, get time and return\n+\tCKeyPool keypool;\n+\tCWalletDB walletdb(strWalletFile);\n+\tint64_t nIndex = *(setKeyPool.begin());\n+\tif (!walletdb.ReadPool(nIndex, keypool))\n+\t\tthrow runtime_error(std::string(__func__) + \": read oldest key in keypool failed\");\n+\tassert(keypool.vchPubKey.IsValid());\n+\treturn keypool.nTime;\n }\n \n std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n@@ -4345,21 +4265,24 @@ static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<in\n     }\n }\n \n-void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n+void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const\n {\n-    setAddress.clear();\n-\n-    CWalletDB walletdb(strWalletFile);\n+\tsetAddress.clear();\n \n-    LOCK2(cs_main, cs_wallet);\n-    LoadReserveKeysToSet(setAddress, setInternalKeyPool, walletdb);\n-    LoadReserveKeysToSet(setAddress, setExternalKeyPool, walletdb);\n+\tCWalletDB walletdb(strWalletFile);\n \n-    BOOST_FOREACH (const CKeyID& keyID, setAddress) {\n-        if (!HaveKey(keyID)) {\n-            throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n-        }\n-    }\n+\tLOCK2(cs_main, cs_wallet);\n+\tBOOST_FOREACH(const int64_t& id, setKeyPool)\n+\t{\n+\t\tCKeyPool keypool;\n+\t\tif (!walletdb.ReadPool(id, keypool))\n+\t\t\tthrow runtime_error(std::string(__func__) + \": read failed\");\n+\t\tassert(keypool.vchPubKey.IsValid());\n+\t\tCKeyID keyID = keypool.vchPubKey.GetID();\n+\t\tif (!HaveKey(keyID))\n+\t\t\tthrow runtime_error(std::string(__func__) + \": unknown key in key pool\");\n+\t\tsetAddress.insert(keyID);\n+\t}\n }\n \n bool CWallet::UpdatedTransaction(const uint256 &hashTx)\n@@ -4881,24 +4804,7 @@ bool CWallet::ParameterInteraction()\n \n bool CWallet::InitAutoBackup()\n {\n-    if (GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET))\n-        return true;\n-\n-    std::string strWarning;\n-    std::string strError;\n-\n-    nWalletBackups = GetArg(\"-createwalletbackups\", 10);\n-    nWalletBackups = std::max(0, std::min(10, nWalletBackups));\n-\n-    std::string strWalletFile = GetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n-\n-    if(!AutoBackupWallet(NULL, strWalletFile, strWarning, strError)) {\n-        if (!strWarning.empty())\n-            InitWarning(strWarning);\n-        if (!strError.empty())\n-            return InitError(strError);\n-    }\n-\n+   \n     return true;\n }\n \n@@ -4946,126 +4852,7 @@ bool CWallet::BackupWallet(const std::string& strDest)\n // either supply \"wallet\" (if already loaded) or \"strWalletFile\" (if wallet wasn't loaded yet)\n bool AutoBackupWallet(CWallet* wallet, const std::string& strWalletFile_, std::string& strBackupWarningRet, std::string& strBackupErrorRet)\n {\n-    namespace fs = boost::filesystem;\n-\n-    strBackupWarningRet = strBackupErrorRet = \"\";\n-    std::string strWalletFile = \"\";\n-\n-    if (nWalletBackups <= 0) {\n-        LogPrintf(\"Automatic wallet backups are disabled!\\n\");\n-        return false;\n-    }\n-\n-    fs::path backupsDir = GetBackupsDir();\n-\n-    if (!fs::exists(backupsDir))\n-    {\n-        // Always create backup folder to not confuse the operating system's file browser\n-        LogPrintf(\"Creating backup folder %s\\n\", backupsDir.string());\n-        if(!fs::create_directories(backupsDir)) {\n-            // smth is wrong, we shouldn't continue until it's resolved\n-            strBackupErrorRet = strprintf(_(\"Wasn't able to create wallet backup folder %s!\"), backupsDir.string());\n-            LogPrintf(\"%s\\n\", strBackupErrorRet);\n-            nWalletBackups = -1;\n-            return false;\n-        }\n-    } else if (!fs::is_directory(backupsDir)) {\n-        // smth is wrong, we shouldn't continue until it's resolved\n-        strBackupErrorRet = strprintf(_(\"%s is not a valid backup folder!\"), backupsDir.string());\n-        LogPrintf(\"%s\\n\", strBackupErrorRet);\n-        nWalletBackups = -1;\n-        return false;\n-    }\n-\n-    // Create backup of the ...\n-    std::string dateTimeStr = DateTimeStrFormat(\".%Y-%m-%d-%H-%M\", GetTime());\n-    if (wallet)\n-    {\n-        // ... opened wallet\n-        LOCK2(cs_main, wallet->cs_wallet);\n-        strWalletFile = wallet->strWalletFile;\n-        fs::path backupFile = backupsDir / (strWalletFile + dateTimeStr);\n-        if(!wallet->BackupWallet(backupFile.string())) {\n-            strBackupWarningRet = strprintf(_(\"Failed to create backup %s!\"), backupFile.string());\n-            LogPrintf(\"%s\\n\", strBackupWarningRet);\n-            nWalletBackups = -1;\n-            return false;\n-        }\n-        // Update nKeysLeftSinceAutoBackup using current external keypool size\n-        wallet->nKeysLeftSinceAutoBackup = wallet->KeypoolCountExternalKeys();\n-        LogPrintf(\"nKeysLeftSinceAutoBackup: %d\\n\", wallet->nKeysLeftSinceAutoBackup);\n-        if(wallet->IsLocked()) {\n-            strBackupWarningRet = _(\"Wallet is locked, can't replenish keypool! Automatic backups and mixing are disabled, please unlock your wallet to replenish keypool.\");\n-            LogPrintf(\"%s\\n\", strBackupWarningRet);\n-            nWalletBackups = -2;\n-            return false;\n-        }\n-    } else {\n-        // ... strWalletFile file\n-        strWalletFile = strWalletFile_;\n-        fs::path sourceFile = GetDataDir() / strWalletFile;\n-        fs::path backupFile = backupsDir / (strWalletFile + dateTimeStr);\n-        sourceFile.make_preferred();\n-        backupFile.make_preferred();\n-        if (fs::exists(backupFile))\n-        {\n-            strBackupWarningRet = _(\"Failed to create backup, file already exists! This could happen if you restarted wallet in less than 60 seconds. You can continue if you are ok with this.\");\n-            LogPrintf(\"%s\\n\", strBackupWarningRet);\n-            return false;\n-        }\n-        if(fs::exists(sourceFile)) {\n-            try {\n-                fs::copy_file(sourceFile, backupFile);\n-                LogPrintf(\"Creating backup of %s -> %s\\n\", sourceFile.string(), backupFile.string());\n-            } catch(fs::filesystem_error &error) {\n-                strBackupWarningRet = strprintf(_(\"Failed to create backup, error: %s\"), error.what());\n-                LogPrintf(\"%s\\n\", strBackupWarningRet);\n-                nWalletBackups = -1;\n-                return false;\n-            }\n-        }\n-    }\n-\n-    // Keep only the last 10 backups, including the new one of course\n-    typedef std::multimap<std::time_t, fs::path> folder_set_t;\n-    folder_set_t folder_set;\n-    fs::directory_iterator end_iter;\n-    backupsDir.make_preferred();\n-    // Build map of backup files for current(!) wallet sorted by last write time\n-    fs::path currentFile;\n-    for (fs::directory_iterator dir_iter(backupsDir); dir_iter != end_iter; ++dir_iter)\n-    {\n-        // Only check regular files\n-        if ( fs::is_regular_file(dir_iter->status()))\n-        {\n-            currentFile = dir_iter->path().filename();\n-            // Only add the backups for the current wallet, e.g. wallet.dat.*\n-            if(dir_iter->path().stem().string() == strWalletFile)\n-            {\n-                folder_set.insert(folder_set_t::value_type(fs::last_write_time(dir_iter->path()), *dir_iter));\n-            }\n-        }\n-    }\n-\n-    // Loop backward through backup files and keep the N newest ones (1 <= N <= 10)\n-    int counter = 0;\n-    BOOST_REVERSE_FOREACH(PAIRTYPE(const std::time_t, fs::path) file, folder_set)\n-    {\n-        counter++;\n-        if (counter > nWalletBackups)\n-        {\n-            // More than nWalletBackups backups: delete oldest one(s)\n-            try {\n-                fs::remove(file.second);\n-                LogPrintf(\"Old backup deleted: %s\\n\", file.second);\n-            } catch(fs::filesystem_error &error) {\n-                strBackupWarningRet = strprintf(_(\"Failed to delete backup, error: %s\"), error.what());\n-                LogPrintf(\"%s\\n\", strBackupWarningRet);\n-                return false;\n-            }\n-        }\n-    }\n-\n+    \n     return true;\n }\n "
      },
      {
        "sha": "5d0883adc4cbb32df3ab7193c5e402a098fc185e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 24,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c399c053cda659834a527b42af9a116c4fca2b6c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c399c053cda659834a527b42af9a116c4fca2b6c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c399c053cda659834a527b42af9a116c4fca2b6c",
        "patch": "@@ -602,8 +602,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     bool fFileBacked;\n \n-    std::set<int64_t> setInternalKeyPool;\n-    std::set<int64_t> setExternalKeyPool;\n \n     int64_t nTimeFirstKey;\n \n@@ -630,21 +628,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     const std::string strWalletFile;\n \n-    void LoadKeyPool(int nIndex, const CKeyPool &keypool)\n-    {\n-        if (keypool.fInternal) {\n-            setInternalKeyPool.insert(nIndex);\n-        } else {\n-            setExternalKeyPool.insert(nIndex);\n-        }\n-\n-        // If no metadata exists yet, create a default with the pool key's\n-        // creation time. Note that this may be overwritten by actually\n-        // stored metadata for that key later, which is fine.\n-        CKeyID keyid = keypool.vchPubKey.GetID();\n-        if (mapKeyMetadata.count(keyid) == 0)\n-            mapKeyMetadata[keyid] = CKeyMetadata(keypool.nTime);\n-    }\n \n     // Map from Key ID (for regular keys) or Script ID (for watch-only keys) to\n     // key metadata.\n@@ -881,8 +864,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     static CAmount GetRequiredFee(unsigned int nTxBytes);\n \n     bool NewKeyPool();\n-    size_t KeypoolCountExternalKeys();\n-    size_t KeypoolCountInternalKeys();\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n     void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fInternal);\n     void KeepKey(int64_t nIndex);\n@@ -945,11 +926,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         mapRequestCount[hash] = 0;\n     };\n     \n-    unsigned int GetKeyPoolSize()\n-    {\n-        AssertLockHeld(cs_wallet); // set{Ex,In}ternalKeyPool\n-        return setInternalKeyPool.size() + setExternalKeyPool.size();\n-    }\n+\tunsigned int GetKeyPoolSize()\n+\t{\n+\t\tAssertLockHeld(cs_wallet); // setKeyPool\n+\t\treturn setKeyPool.size();\n+\t}\n \tbool SetDefaultKey(const CPubKey &vchPubKey);\n \n     //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower"
      }
    ]
  },
  {
    "sha": "cd510977e6a9d53ede1d8ed2f6a0f46bd59a0bcf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDUxMDk3N2U2YTlkNTNlZGUxZDhlZDJmNmEwZjQ2YmQ1OWEwYmNm",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:26:40Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:26:40Z"
      },
      "message": "compile",
      "tree": {
        "sha": "eeffac8315f4cd77f6af164a1686b14cd3f5396d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eeffac8315f4cd77f6af164a1686b14cd3f5396d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd510977e6a9d53ede1d8ed2f6a0f46bd59a0bcf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd510977e6a9d53ede1d8ed2f6a0f46bd59a0bcf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd510977e6a9d53ede1d8ed2f6a0f46bd59a0bcf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd510977e6a9d53ede1d8ed2f6a0f46bd59a0bcf/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c399c053cda659834a527b42af9a116c4fca2b6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c399c053cda659834a527b42af9a116c4fca2b6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c399c053cda659834a527b42af9a116c4fca2b6c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1652bc7e9f21fcb37ccc2beb18dd53f09c69d26e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd510977e6a9d53ede1d8ed2f6a0f46bd59a0bcf/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd510977e6a9d53ede1d8ed2f6a0f46bd59a0bcf/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=cd510977e6a9d53ede1d8ed2f6a0f46bd59a0bcf",
        "patch": "@@ -628,7 +628,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     const std::string strWalletFile;\n \n-\n+\tstd::set<int64_t> setKeyPool;\n     // Map from Key ID (for regular keys) or Script ID (for watch-only keys) to\n     // key metadata.\n     std::map<CTxDestination, CKeyMetadata> mapKeyMetadata;"
      }
    ]
  },
  {
    "sha": "850ab2a4f5e1fac1a12c434bc118993347c78a44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTBhYjJhNGY1ZTFmYWMxYTEyYzQzNGJjMTE4OTkzMzQ3Yzc4YTQ0",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:27:47Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:27:47Z"
      },
      "message": "compile",
      "tree": {
        "sha": "28534090ade30bb4e68e46d691787ee8bb28aa34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28534090ade30bb4e68e46d691787ee8bb28aa34"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/850ab2a4f5e1fac1a12c434bc118993347c78a44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/850ab2a4f5e1fac1a12c434bc118993347c78a44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/850ab2a4f5e1fac1a12c434bc118993347c78a44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/850ab2a4f5e1fac1a12c434bc118993347c78a44/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd510977e6a9d53ede1d8ed2f6a0f46bd59a0bcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd510977e6a9d53ede1d8ed2f6a0f46bd59a0bcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd510977e6a9d53ede1d8ed2f6a0f46bd59a0bcf"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "09966d29ea53c1c35c6ab3e224dc5adc048c00e8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/850ab2a4f5e1fac1a12c434bc118993347c78a44/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/850ab2a4f5e1fac1a12c434bc118993347c78a44/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=850ab2a4f5e1fac1a12c434bc118993347c78a44",
        "patch": "@@ -2109,21 +2109,21 @@ UniValue keypoolrefill(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"keypoolrefill\", \"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\tLOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    // 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n-    unsigned int kpSize = 0;\n-    if (request.params.size() > 0) {\n-        if (request.params[0].get_int() < 0)\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected valid size.\");\n-        kpSize = (unsigned int)request.params[0].get_int();\n-    }\n+\t// 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n+\tunsigned int kpSize = 0;\n+\tif (params.size() > 0) {\n+\t\tif (params[0].get_int() < 0)\n+\t\t\tthrow JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected valid size.\");\n+\t\tkpSize = (unsigned int)params[0].get_int();\n+\t}\n \n-    EnsureWalletIsUnlocked();\n-    pwalletMain->TopUpKeyPool(kpSize);\n+\tEnsureWalletIsUnlocked();\n+\tpwalletMain->TopUpKeyPool(kpSize);\n \n-    if (pwalletMain->GetKeyPoolSize() < (pwalletMain->IsHDEnabled() ? kpSize * 2 : kpSize))\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error refreshing keypool.\");\n+\tif (pwalletMain->GetKeyPoolSize() < kpSize)\n+\t\tthrow JSONRPCError(RPC_WALLET_ERROR, \"Error refreshing keypool.\");\n \n     return NullUniValue;\n }"
      }
    ]
  },
  {
    "sha": "d05d479ed0aa8abf0fffaf5219f3776c1f3786a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDVkNDc5ZWQwYWE4YWJmMGZmZmFmNTIxOWYzNzc2YzFmMzc4NmE5",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:28:45Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:28:45Z"
      },
      "message": "compile",
      "tree": {
        "sha": "d025632a4ca1d49690cbdd7160356ed3319888fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d025632a4ca1d49690cbdd7160356ed3319888fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d05d479ed0aa8abf0fffaf5219f3776c1f3786a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d05d479ed0aa8abf0fffaf5219f3776c1f3786a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d05d479ed0aa8abf0fffaf5219f3776c1f3786a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d05d479ed0aa8abf0fffaf5219f3776c1f3786a9/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "850ab2a4f5e1fac1a12c434bc118993347c78a44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/850ab2a4f5e1fac1a12c434bc118993347c78a44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/850ab2a4f5e1fac1a12c434bc118993347c78a44"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ec960dfb2a52ce4e413b8f3b45448a3ccd27ee7b",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d05d479ed0aa8abf0fffaf5219f3776c1f3786a9/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d05d479ed0aa8abf0fffaf5219f3776c1f3786a9/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=d05d479ed0aa8abf0fffaf5219f3776c1f3786a9",
        "patch": "@@ -774,7 +774,7 @@ bool WalletModel::isWalletEnabled()\n \n bool WalletModel::hdEnabled() const\n {\n-    return wallet->IsHDEnabled();\n+    return true;\n }\n \n int WalletModel::getDefaultConfirmTarget() const"
      },
      {
        "sha": "f5f4147e04af5b951b317e6ba4cccd05521c0913",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d05d479ed0aa8abf0fffaf5219f3776c1f3786a9/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d05d479ed0aa8abf0fffaf5219f3776c1f3786a9/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d05d479ed0aa8abf0fffaf5219f3776c1f3786a9",
        "patch": "@@ -2113,8 +2113,8 @@ UniValue keypoolrefill(const JSONRPCRequest& request)\n \n \t// 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n \tunsigned int kpSize = 0;\n-\tif (params.size() > 0) {\n-\t\tif (params[0].get_int() < 0)\n+\tif (request.params.size() > 0) {\n+\t\tif (request.params[0].get_int() < 0)\n \t\t\tthrow JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected valid size.\");\n \t\tkpSize = (unsigned int)params[0].get_int();\n \t}"
      },
      {
        "sha": "6a0d60886e7a470f31c552022031fddb9634a2c2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d05d479ed0aa8abf0fffaf5219f3776c1f3786a9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d05d479ed0aa8abf0fffaf5219f3776c1f3786a9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d05d479ed0aa8abf0fffaf5219f3776c1f3786a9",
        "patch": "@@ -38,6 +38,7 @@\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n+using namespace std;\n // SYSCOIN services\n #include \"alias.h\"\n "
      }
    ]
  },
  {
    "sha": "fc773990465a4cc8acd07059b7aa1ba4acde3a77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzc3Mzk5MDQ2NWE0Y2M4YWNkMDcwNTliN2FhMWJhNGFjZGUzYTc3",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:33:26Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:33:26Z"
      },
      "message": "compile",
      "tree": {
        "sha": "d971479add27cfd5dbfe4851d21268dd901b2719",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d971479add27cfd5dbfe4851d21268dd901b2719"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc773990465a4cc8acd07059b7aa1ba4acde3a77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc773990465a4cc8acd07059b7aa1ba4acde3a77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc773990465a4cc8acd07059b7aa1ba4acde3a77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc773990465a4cc8acd07059b7aa1ba4acde3a77/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d05d479ed0aa8abf0fffaf5219f3776c1f3786a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d05d479ed0aa8abf0fffaf5219f3776c1f3786a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d05d479ed0aa8abf0fffaf5219f3776c1f3786a9"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 1,
      "deletions": 4
    },
    "files": [
      {
        "sha": "09b0e2a877e5837d5da2779e0abde1131c163aae",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc773990465a4cc8acd07059b7aa1ba4acde3a77/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc773990465a4cc8acd07059b7aa1ba4acde3a77/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fc773990465a4cc8acd07059b7aa1ba4acde3a77",
        "patch": "@@ -2116,7 +2116,7 @@ UniValue keypoolrefill(const JSONRPCRequest& request)\n \tif (request.params.size() > 0) {\n \t\tif (request.params[0].get_int() < 0)\n \t\t\tthrow JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected valid size.\");\n-\t\tkpSize = (unsigned int)params[0].get_int();\n+\t\tkpSize = (unsigned int)request.params[0].get_int();\n \t}\n \n \tEnsureWalletIsUnlocked();\n@@ -2184,9 +2184,6 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n     if (request.params.size() >= 3)\n         fForMixingOnly = request.params[2].get_bool();\n \n-    if (fForMixingOnly && !pwalletMain->IsLocked() && pwalletMain->IsLocked())\n-        throw JSONRPCError(RPC_WALLET_ALREADY_UNLOCKED, \"Error: Wallet is already unlocked for mixing only.\");\n-\n     if (!pwalletMain->IsLocked())\n         throw JSONRPCError(RPC_WALLET_ALREADY_UNLOCKED, \"Error: Wallet is already fully unlocked.\");\n "
      }
    ]
  },
  {
    "sha": "95c55407250376cda0aa913b385758c8ae49f7fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWM1NTQwNzI1MDM3NmNkYTBhYTkxM2IzODU3NThjOGFlNDlmN2Zh",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:42:23Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:42:23Z"
      },
      "message": "compile",
      "tree": {
        "sha": "bcfbea64da4cd54742b2106c9650556d43edb0a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bcfbea64da4cd54742b2106c9650556d43edb0a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95c55407250376cda0aa913b385758c8ae49f7fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95c55407250376cda0aa913b385758c8ae49f7fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95c55407250376cda0aa913b385758c8ae49f7fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95c55407250376cda0aa913b385758c8ae49f7fa/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc773990465a4cc8acd07059b7aa1ba4acde3a77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc773990465a4cc8acd07059b7aa1ba4acde3a77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc773990465a4cc8acd07059b7aa1ba4acde3a77"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 2,
      "deletions": 80
    },
    "files": [
      {
        "sha": "8faeb88498adaafe77b5e168f10a4ca45bd7eb58",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 77,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95c55407250376cda0aa913b385758c8ae49f7fa/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95c55407250376cda0aa913b385758c8ae49f7fa/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=95c55407250376cda0aa913b385758c8ae49f7fa",
        "patch": "@@ -727,83 +727,6 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \treturn true;\n }\n \n-DBErrors CWallet::ReorderTransactions()\n-{\n-    LOCK(cs_wallet);\n-    CWalletDB walletdb(strWalletFile);\n-\n-    // Old wallets didn't have any defined order for transactions\n-    // Probably a bad idea to change the output of this\n-\n-    // First: get all CWalletTx and CAccountingEntry into a sorted-by-time multimap.\n-    typedef std::pair<CWalletTx*, CAccountingEntry*> TxPair;\n-    typedef std::multimap<int64_t, TxPair > TxItems;\n-    TxItems txByTime;\n-\n-    for (std::map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n-    {\n-        CWalletTx* wtx = &((*it).second);\n-        txByTime.insert(std::make_pair(wtx->nTimeReceived, TxPair(wtx, (CAccountingEntry*)0)));\n-    }\n-    std::list<CAccountingEntry> acentries;\n-    walletdb.ListAccountCreditDebit(\"\", acentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n-    {\n-        txByTime.insert(std::make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n-    }\n-\n-    nOrderPosNext = 0;\n-    std::vector<int64_t> nOrderPosOffsets;\n-    for (TxItems::iterator it = txByTime.begin(); it != txByTime.end(); ++it)\n-    {\n-        CWalletTx *const pwtx = (*it).second.first;\n-        CAccountingEntry *const pacentry = (*it).second.second;\n-        int64_t& nOrderPos = (pwtx != 0) ? pwtx->nOrderPos : pacentry->nOrderPos;\n-\n-        if (nOrderPos == -1)\n-        {\n-            nOrderPos = nOrderPosNext++;\n-            nOrderPosOffsets.push_back(nOrderPos);\n-\n-            if (pwtx)\n-            {\n-                if (!walletdb.WriteTx(*pwtx))\n-                    return DB_LOAD_FAIL;\n-            }\n-            else\n-                if (!walletdb.WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n-                    return DB_LOAD_FAIL;\n-        }\n-        else\n-        {\n-            int64_t nOrderPosOff = 0;\n-            BOOST_FOREACH(const int64_t& nOffsetStart, nOrderPosOffsets)\n-            {\n-                if (nOrderPos >= nOffsetStart)\n-                    ++nOrderPosOff;\n-            }\n-            nOrderPos += nOrderPosOff;\n-            nOrderPosNext = std::max(nOrderPosNext, nOrderPos + 1);\n-\n-            if (!nOrderPosOff)\n-                continue;\n-\n-            // Since we're changing the order, write it back\n-            if (pwtx)\n-            {\n-                if (!walletdb.WriteTx(*pwtx))\n-                    return DB_LOAD_FAIL;\n-            }\n-            else\n-                if (!walletdb.WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n-                    return DB_LOAD_FAIL;\n-        }\n-    }\n-    walletdb.WriteOrderPosNext(nOrderPosNext);\n-\n-    return DB_LOAD_OK;\n-}\n-\n int64_t CWallet::IncOrderPosNext(CWalletDB *pwalletdb)\n {\n     AssertLockHeld(cs_wallet); // nOrderPosNext"
      },
      {
        "sha": "c7371cccf2d2eeffb75aa9cec3d8b6ad23ddf2f9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95c55407250376cda0aa913b385758c8ae49f7fa/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95c55407250376cda0aa913b385758c8ae49f7fa/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=95c55407250376cda0aa913b385758c8ae49f7fa",
        "patch": "@@ -744,7 +744,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * keystore implementation\n      * Generate a new key\n      */\n-    CPubKey GenerateNewKey(uint32_t nAccountIndex, bool fInternal /*= false*/);\n+    CPubKey GenerateNewKey();\n     bool HaveKey(const CKeyID &address) const override;\n     bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n     //! GetKey implementation that can derive a HD private key on the fly\n@@ -754,7 +754,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)\n-    bool LoadKeyMetadata(const CTxDestination& pubKey, const CKeyMetadata &metadata);\n+    bool LoadKeyMetadata(const CPubKey& pubKey, const CKeyMetadata &metadata);\n \n     bool LoadMinVersion(int nVersion) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n     void UpdateTimeFirstKey(int64_t nCreateTime);\n@@ -793,7 +793,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * @return next transaction order id\n      */\n     int64_t IncOrderPosNext(CWalletDB *pwalletdb = NULL);\n-    DBErrors ReorderTransactions();\n     bool AccountMove(std::string strFrom, std::string strTo, CAmount nAmount, std::string strComment = \"\");\n     bool GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bForceNew = false);\n "
      }
    ]
  },
  {
    "sha": "f2d41269bb641dcf5370d1b157e179d9623dadcd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmQ0MTI2OWJiNjQxZGNmNTM3MGQxYjE1N2UxNzlkOTYyM2RhZGNk",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:46:41Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:46:41Z"
      },
      "message": "compile",
      "tree": {
        "sha": "713239ea639e55bbd1131eb7032a3668db3f7f5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/713239ea639e55bbd1131eb7032a3668db3f7f5f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2d41269bb641dcf5370d1b157e179d9623dadcd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2d41269bb641dcf5370d1b157e179d9623dadcd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2d41269bb641dcf5370d1b157e179d9623dadcd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2d41269bb641dcf5370d1b157e179d9623dadcd/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95c55407250376cda0aa913b385758c8ae49f7fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95c55407250376cda0aa913b385758c8ae49f7fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95c55407250376cda0aa913b385758c8ae49f7fa"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "da187be947920d14cefc7eee36786d1e1c0eb6e7",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2d41269bb641dcf5370d1b157e179d9623dadcd/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2d41269bb641dcf5370d1b157e179d9623dadcd/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=f2d41269bb641dcf5370d1b157e179d9623dadcd",
        "patch": "@@ -26,7 +26,7 @@\n //\n \n CDBEnv bitdb;\n-\n+unsigned int nWalletDBUpdated;\n void CDBEnv::EnvShutdown()\n {\n     if (!fDbEnvInit)"
      },
      {
        "sha": "ed9d034e66152e4417d51cfe457e9591a90b33c2",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2d41269bb641dcf5370d1b157e179d9623dadcd/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2d41269bb641dcf5370d1b157e179d9623dadcd/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=f2d41269bb641dcf5370d1b157e179d9623dadcd",
        "patch": "@@ -22,7 +22,7 @@\n \n static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;\n static const bool DEFAULT_WALLET_PRIVDB = true;\n-\n+extern unsigned int nWalletDBUpdated;\n class CDBEnv\n {\n private:"
      }
    ]
  },
  {
    "sha": "6ae2126cd2c08245049a19f51d45d3461ffcefbb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YWUyMTI2Y2QyYzA4MjQ1MDQ5YTE5ZjUxZDQ1ZDM0NjFmZmNlZmJi",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:52:12Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:52:12Z"
      },
      "message": "compile",
      "tree": {
        "sha": "38ed1103a5896256962db006d2b7d3afd76ac663",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38ed1103a5896256962db006d2b7d3afd76ac663"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ae2126cd2c08245049a19f51d45d3461ffcefbb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ae2126cd2c08245049a19f51d45d3461ffcefbb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ae2126cd2c08245049a19f51d45d3461ffcefbb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ae2126cd2c08245049a19f51d45d3461ffcefbb/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2d41269bb641dcf5370d1b157e179d9623dadcd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2d41269bb641dcf5370d1b157e179d9623dadcd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2d41269bb641dcf5370d1b157e179d9623dadcd"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 32,
      "deletions": 32
    },
    "files": [
      {
        "sha": "6b2f7d9e90113c2962ca03e5ccc88d9a52d8872a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 30,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ae2126cd2c08245049a19f51d45d3461ffcefbb/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ae2126cd2c08245049a19f51d45d3461ffcefbb/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6ae2126cd2c08245049a19f51d45d3461ffcefbb",
        "patch": "@@ -775,40 +775,40 @@ bool CWallet::AccountMove(std::string strFrom, std::string strTo, CAmount nAmoun\n \n bool CWallet::GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bForceNew)\n {\n-    CWalletDB walletdb(strWalletFile);\n-\n-    CAccount account;\n-    walletdb.ReadAccount(strAccount, account);\n+\tCWalletDB walletdb(strWalletFile);\n \n-    if (!bForceNew) {\n-        if (!account.vchPubKey.IsValid())\n-            bForceNew = true;\n-        else {\n-            // Check if the current key has been used\n-            CScript scriptPubKey = GetScriptForDestination(account.vchPubKey.GetID());\n-            for (std::map<uint256, CWalletTx>::iterator it = mapWallet.begin();\n-                 it != mapWallet.end() && account.vchPubKey.IsValid();\n-                 ++it)\n-                BOOST_FOREACH(const CTxOut& txout, (*it).second.tx->vout)\n-                    if (txout.scriptPubKey == scriptPubKey) {\n-                        bForceNew = true;\n-                        break;\n-                    }\n-        }\n-    }\n+\tCAccount account;\n+\twalletdb.ReadAccount(strAccount, account);\n+\n+\tif (!bForceNew) {\n+\t\tif (!account.vchPubKey.IsValid())\n+\t\t\tbForceNew = true;\n+\t\telse {\n+\t\t\t// Check if the current key has been used\n+\t\t\tCScript scriptPubKey = GetScriptForDestination(account.vchPubKey.GetID());\n+\t\t\tfor (map<uint256, CWalletTx>::iterator it = mapWallet.begin();\n+\t\t\t\tit != mapWallet.end() && account.vchPubKey.IsValid();\n+\t\t\t\t++it)\n+\t\t\t\tBOOST_FOREACH(const CTxOut& txout, (*it).second.vout)\n+\t\t\t\tif (txout.scriptPubKey == scriptPubKey) {\n+\t\t\t\t\tbForceNew = true;\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t}\n+\t}\n \n-    // Generate a new key\n-    if (bForceNew) {\n-        if (!GetKeyFromPool(account.vchPubKey, false))\n-            return false;\n+\t// Generate a new key\n+\tif (bForceNew) {\n+\t\tif (!GetKeyFromPool(account.vchPubKey))\n+\t\t\treturn false;\n \n-        SetAddressBook(account.vchPubKey.GetID(), strAccount, \"receive\");\n-        walletdb.WriteAccount(strAccount, account);\n-    }\n+\t\tSetAddressBook(account.vchPubKey.GetID(), strAccount, \"receive\");\n+\t\twalletdb.WriteAccount(strAccount, account);\n+\t}\n \n-    pubKey = account.vchPubKey;\n+\tpubKey = account.vchPubKey;\n \n-    return true;\n+\treturn true;\n }\n \n void CWallet::MarkDirty()\n@@ -4536,7 +4536,7 @@ bool CWallet::InitLoadWallet()\n \n \t\twalletInstance->SetBestChain(chainActive.GetLocator());\n \t}\n-\telse if (mapArgs.count(\"-usehd\")) {\n+\telse  {\n \t\tbool useHD = GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET);\n \t\tif (!walletInstance->hdChain.masterKeyID.IsNull() && !useHD)\n \t\t\treturn InitError(strprintf(_(\"Error loading %s: You can't disable HD on a already existing HD wallet\"), walletFile));"
      },
      {
        "sha": "2a9c75604eaa62ee5a1cbe942687dc019aca30c2",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ae2126cd2c08245049a19f51d45d3461ffcefbb/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ae2126cd2c08245049a19f51d45d3461ffcefbb/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6ae2126cd2c08245049a19f51d45d3461ffcefbb",
        "patch": "@@ -631,7 +631,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \tstd::set<int64_t> setKeyPool;\n     // Map from Key ID (for regular keys) or Script ID (for watch-only keys) to\n     // key metadata.\n-    std::map<CTxDestination, CKeyMetadata> mapKeyMetadata;\n+    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n@@ -867,7 +867,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fInternal);\n     void KeepKey(int64_t nIndex);\n     void ReturnKey(int64_t nIndex, bool fInternal);\n-    bool GetKeyFromPool(CPubKey &key, bool fInternal /*= false*/);\n+\tbool GetKeyFromPool(CPubKey &key);\n     int64_t GetOldestKeyPoolTime();\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n "
      }
    ]
  },
  {
    "sha": "a0f8f12eaca69160178d6a2e394a1ff2de231baa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMGY4ZjEyZWFjYTY5MTYwMTc4ZDZhMmUzOTRhMWZmMmRlMjMxYmFh",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:54:05Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:54:05Z"
      },
      "message": "compile",
      "tree": {
        "sha": "ea18af1c58ba690d656e9b4c25b3c7ae36cbe997",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea18af1c58ba690d656e9b4c25b3c7ae36cbe997"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0f8f12eaca69160178d6a2e394a1ff2de231baa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0f8f12eaca69160178d6a2e394a1ff2de231baa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0f8f12eaca69160178d6a2e394a1ff2de231baa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0f8f12eaca69160178d6a2e394a1ff2de231baa/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ae2126cd2c08245049a19f51d45d3461ffcefbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ae2126cd2c08245049a19f51d45d3461ffcefbb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ae2126cd2c08245049a19f51d45d3461ffcefbb"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "caa6eff881f85313eb8c09cfb2541e33a1d01b97",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0f8f12eaca69160178d6a2e394a1ff2de231baa/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0f8f12eaca69160178d6a2e394a1ff2de231baa/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=a0f8f12eaca69160178d6a2e394a1ff2de231baa",
        "patch": "@@ -371,7 +371,7 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n     {\n         // Generate a new address to associate with given label\n         CPubKey newKey;\n-        if(!wallet->GetKeyFromPool(newKey, false))\n+        if(!wallet->GetKeyFromPool(newKey))\n         {\n             WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n             if(!ctx.isValid())\n@@ -380,7 +380,7 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n                 editStatus = WALLET_UNLOCK_FAILURE;\n                 return QString();\n             }\n-            if(!wallet->GetKeyFromPool(newKey, false))\n+            if(!wallet->GetKeyFromPool(newKey))\n             {\n                 editStatus = KEY_GENERATION_FAILURE;\n                 return QString();"
      },
      {
        "sha": "dfefe066cc20d34b12322c269d7aa65abd73003c",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0f8f12eaca69160178d6a2e394a1ff2de231baa/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0f8f12eaca69160178d6a2e394a1ff2de231baa/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=a0f8f12eaca69160178d6a2e394a1ff2de231baa",
        "patch": "@@ -647,7 +647,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n     }\n     else {\n         CPubKey newKey;\n-        if (wallet->GetKeyFromPool(newKey, false)) {\n+        if (wallet->GetKeyFromPool(newKey)) {\n             CKeyID keyID = newKey.GetID();\n             wallet->SetAddressBook(keyID, strAccount, \"refund\");\n "
      },
      {
        "sha": "f30647a48e0bbb3334d06c1d114045c9974da705",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0f8f12eaca69160178d6a2e394a1ff2de231baa/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0f8f12eaca69160178d6a2e394a1ff2de231baa/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a0f8f12eaca69160178d6a2e394a1ff2de231baa",
        "patch": "@@ -148,7 +148,7 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n \n     // Generate a new key that is added to wallet\n     CPubKey newKey;\n-    if (!pwalletMain->GetKeyFromPool(newKey, false))\n+    if (!pwalletMain->GetKeyFromPool(newKey))\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n     CKeyID keyID = newKey.GetID();\n "
      },
      {
        "sha": "3b6034c985f8a7edafbf9c2f9aa1ab94ae5a9a30",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0f8f12eaca69160178d6a2e394a1ff2de231baa/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0f8f12eaca69160178d6a2e394a1ff2de231baa/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a0f8f12eaca69160178d6a2e394a1ff2de231baa",
        "patch": "@@ -789,7 +789,7 @@ bool CWallet::GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bFo\n \t\t\tfor (map<uint256, CWalletTx>::iterator it = mapWallet.begin();\n \t\t\t\tit != mapWallet.end() && account.vchPubKey.IsValid();\n \t\t\t\t++it)\n-\t\t\t\tBOOST_FOREACH(const CTxOut& txout, (*it).second.vout)\n+\t\t\t\tBOOST_FOREACH(const CTxOut& txout, (*it).second.tx->vout)\n \t\t\t\tif (txout.scriptPubKey == scriptPubKey) {\n \t\t\t\t\tbForceNew = true;\n \t\t\t\t\tbreak;\n@@ -4347,7 +4347,7 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n \t\tif (blit != mapBlockIndex.end() && chainActive.Contains(blit->second)) {\n \t\t\t// ... which are already in a block\n \t\t\tint nHeight = blit->second->nHeight;\n-\t\t\tBOOST_FOREACH(const CTxOut &txout, wtx.vout) {\n+\t\t\tBOOST_FOREACH(const CTxOut &txout, wtx.tx->vout) {\n \t\t\t\t// iterate over all their outputs\n \t\t\t\tCAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);\n \t\t\t\tBOOST_FOREACH(const CKeyID &keyid, vAffected) {"
      }
    ]
  },
  {
    "sha": "33decdbdc31b8a83ef1202f1c44c01001bd68732",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozM2RlY2RiZGMzMWI4YTgzZWYxMjAyZjFjNDRjMDEwMDFiZDY4NzMy",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:57:47Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T01:57:47Z"
      },
      "message": "compile",
      "tree": {
        "sha": "42995c67497036681609ee4ab976679f6941c067",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42995c67497036681609ee4ab976679f6941c067"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33decdbdc31b8a83ef1202f1c44c01001bd68732",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33decdbdc31b8a83ef1202f1c44c01001bd68732",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33decdbdc31b8a83ef1202f1c44c01001bd68732",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33decdbdc31b8a83ef1202f1c44c01001bd68732/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0f8f12eaca69160178d6a2e394a1ff2de231baa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0f8f12eaca69160178d6a2e394a1ff2de231baa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0f8f12eaca69160178d6a2e394a1ff2de231baa"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 8,
      "deletions": 9
    },
    "files": [
      {
        "sha": "d698e6c29058f6e2d0755d6e992692a7a322032c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33decdbdc31b8a83ef1202f1c44c01001bd68732/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33decdbdc31b8a83ef1202f1c44c01001bd68732/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=33decdbdc31b8a83ef1202f1c44c01001bd68732",
        "patch": "@@ -259,16 +259,15 @@ bool CWallet::LoadCScript(const CScript& redeemScript)\n     return CCryptoKeyStore::AddCScript(redeemScript);\n }\n \n-bool CWallet::AddWatchOnly(const CScript& dest)\n+bool CWallet::AddWatchOnly(const CScript &dest)\n {\n-    if (!CCryptoKeyStore::AddWatchOnly(dest))\n-        return false;\n-    const CKeyMetadata& meta = mapKeyMetadata[CScriptID(dest)];\n-    UpdateTimeFirstKey(meta.nCreateTime);\n-    NotifyWatchonlyChanged(true);\n-    if (!fFileBacked)\n-        return true;\n-    return CWalletDB(strWalletFile).WriteWatchOnly(dest, meta);\n+\tif (!CCryptoKeyStore::AddWatchOnly(dest))\n+\t\treturn false;\n+\tnTimeFirstKey = 1; // No birthday information for watch-only keys.\n+\tNotifyWatchonlyChanged(true);\n+\tif (!fFileBacked)\n+\t\treturn true;\n+\treturn CWalletDB(strWalletFile).WriteWatchOnly(dest);\n }\n \n bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)"
      }
    ]
  },
  {
    "sha": "f6abeaf5ef784bc68b2b3bcf7cf4d6c3c8062528",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmFiZWFmNWVmNzg0YmM2OGIyYjNiY2Y3Y2Y0ZDZjM2M4MDYyNTI4",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:02:48Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:02:48Z"
      },
      "message": "copmpile",
      "tree": {
        "sha": "7a5cc0ed1e09683e979512d7fc9f77d3a08c83eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a5cc0ed1e09683e979512d7fc9f77d3a08c83eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6abeaf5ef784bc68b2b3bcf7cf4d6c3c8062528",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6abeaf5ef784bc68b2b3bcf7cf4d6c3c8062528",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6abeaf5ef784bc68b2b3bcf7cf4d6c3c8062528",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6abeaf5ef784bc68b2b3bcf7cf4d6c3c8062528/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33decdbdc31b8a83ef1202f1c44c01001bd68732",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33decdbdc31b8a83ef1202f1c44c01001bd68732",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33decdbdc31b8a83ef1202f1c44c01001bd68732"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 17,
      "deletions": 30
    },
    "files": [
      {
        "sha": "199ec885aa934cc9ab66f498eba022cbdbe235ec",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 15,
        "deletions": 28,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6abeaf5ef784bc68b2b3bcf7cf4d6c3c8062528/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6abeaf5ef784bc68b2b3bcf7cf4d6c3c8062528/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f6abeaf5ef784bc68b2b3bcf7cf4d6c3c8062528",
        "patch": "@@ -123,36 +123,21 @@ struct CompactTallyItem\n class CKeyPool\n {\n public:\n-    int64_t nTime;\n-    CPubKey vchPubKey;\n-    bool fInternal; // for change outputs\n+\tint64_t nTime;\n+\tCPubKey vchPubKey;\n \n-    CKeyPool();\n-    CKeyPool(const CPubKey& vchPubKeyIn, bool fInternalIn);\n+\tCKeyPool();\n+\tCKeyPool(const CPubKey& vchPubKeyIn);\n \n-    ADD_SERIALIZE_METHODS;\n+\tADD_SERIALIZE_METHODS;\n \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        int nVersion = s.GetVersion();\n-        if (!(s.GetType() & SER_GETHASH))\n-            READWRITE(nVersion);\n-        READWRITE(nTime);\n-        READWRITE(vchPubKey);\n-        if (ser_action.ForRead()) {\n-            try {\n-                READWRITE(fInternal);\n-            }\n-            catch (std::ios_base::failure&) {\n-                /* flag as external address if we can't read the internal boolean\n-                   (this will be the case for any wallet before the HD chain split version) */\n-                fInternal = false;\n-            }\n-        }\n-        else {\n-            READWRITE(fInternal);\n-        }\n-    }\n+\ttemplate <typename Stream, typename Operation>\n+\tinline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+\t\tif (!(nType & SER_GETHASH))\n+\t\t\tREADWRITE(nVersion);\n+\t\tREADWRITE(nTime);\n+\t\tREADWRITE(vchPubKey);\n+\t}\n };\n \n /** Address book data */\n@@ -603,7 +588,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool fFileBacked;\n \n \n-    int64_t nTimeFirstKey;\n+  \n \n     /**\n      * Private version of AddWatchOnly method which does not accept a\n@@ -690,6 +675,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     std::set<COutPoint> setLockedCoins;\n \n+\tint64_t nTimeFirstKey;\n+\n     int64_t nKeysLeftSinceAutoBackup;\n \n     const CWalletTx* GetWalletTx(const uint256& hash) const;"
      },
      {
        "sha": "191c8f8639b5afd445a7cf91bff1472e7b9938dc",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6abeaf5ef784bc68b2b3bcf7cf4d6c3c8062528/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6abeaf5ef784bc68b2b3bcf7cf4d6c3c8062528/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=f6abeaf5ef784bc68b2b3bcf7cf4d6c3c8062528",
        "patch": "@@ -54,7 +54,7 @@ class CHDChain\n \tCHDChain() { SetNull(); }\n \tADD_SERIALIZE_METHODS;\n \ttemplate <typename Stream, typename Operation>\n-\tinline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+\tinline void SerializationOp(Stream& s, Operation ser_action)\n \t{\n \t\tREADWRITE(this->nVersion);\n \t\tnVersion = this->nVersion;\n@@ -94,7 +94,7 @@ class CKeyMetadata\n \tADD_SERIALIZE_METHODS;\n \n \ttemplate <typename Stream, typename Operation>\n-\tinline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+\tinline void SerializationOp(Stream& s, Operation ser_action) {\n \t\tREADWRITE(this->nVersion);\n \t\tnVersion = this->nVersion;\n \t\tREADWRITE(nCreateTime);"
      }
    ]
  },
  {
    "sha": "e37befac36902c55b9c3b048c71a9ee9b6cfe796",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzdiZWZhYzM2OTAyYzU1YjljM2IwNDhjNzFhOWVlOWI2Y2ZlNzk2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:05:28Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:05:28Z"
      },
      "message": "compile",
      "tree": {
        "sha": "49699f4fa59a6f4a4a55209edd9fa5d86bb911bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49699f4fa59a6f4a4a55209edd9fa5d86bb911bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e37befac36902c55b9c3b048c71a9ee9b6cfe796",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e37befac36902c55b9c3b048c71a9ee9b6cfe796",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e37befac36902c55b9c3b048c71a9ee9b6cfe796",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e37befac36902c55b9c3b048c71a9ee9b6cfe796/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6abeaf5ef784bc68b2b3bcf7cf4d6c3c8062528",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6abeaf5ef784bc68b2b3bcf7cf4d6c3c8062528",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6abeaf5ef784bc68b2b3bcf7cf4d6c3c8062528"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 17,
      "deletions": 18
    },
    "files": [
      {
        "sha": "b63faa33464c415bb84e672e0fa25452d3c3b429",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 17,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e37befac36902c55b9c3b048c71a9ee9b6cfe796/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e37befac36902c55b9c3b048c71a9ee9b6cfe796/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e37befac36902c55b9c3b048c71a9ee9b6cfe796",
        "patch": "@@ -51,7 +51,7 @@ bool fSendFreeTransactions = DEFAULT_SEND_FREE_TRANSACTIONS;\n bool bBIP69Enabled = true;\n \n const char * DEFAULT_WALLET_DAT = \"wallet.dat\";\n-\n+const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n /** \n  * Fees smaller than this (in satoshis) are considered zero fee (for transaction creation)\n  * Override with -mintxfee\n@@ -4138,25 +4138,24 @@ std::set<CTxDestination> CWallet::GetAccountAddresses(const std::string& strAcco\n     return result;\n }\n \n-bool CReserveKey::GetReservedKey(CPubKey& pubkey, bool fInternalIn)\n+bool CReserveKey::GetReservedKey(CPubKey& pubkey)\n {\n-    if (nIndex == -1)\n-    {\n-        CKeyPool keypool;\n-        pwallet->ReserveKeyFromKeyPool(nIndex, keypool, fInternalIn);\n-        if (nIndex != -1) {\n-            vchPubKey = keypool.vchPubKey;\n-        }\n-        else {\n-            return false;\n-        }\n-        fInternal = keypool.fInternal;\n-    }\n-    assert(vchPubKey.IsValid());\n-    pubkey = vchPubKey;\n-    return true;\n+\tif (nIndex == -1)\n+\t{\n+\t\tCKeyPool keypool;\n+\t\tpwallet->ReserveKeyFromKeyPool(nIndex, keypool);\n+\t\tif (nIndex != -1)\n+\t\t\tvchPubKey = keypool.vchPubKey;\n+\t\telse {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\tassert(vchPubKey.IsValid());\n+\tpubkey = vchPubKey;\n+\treturn true;\n }\n \n+\n void CReserveKey::KeepKey()\n {\n     if (nIndex != -1) {"
      },
      {
        "sha": "9b083b5c6c2706d98d35922fc0ec6d5ef88bb537",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e37befac36902c55b9c3b048c71a9ee9b6cfe796/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e37befac36902c55b9c3b048c71a9ee9b6cfe796/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e37befac36902c55b9c3b048c71a9ee9b6cfe796",
        "patch": "@@ -851,7 +851,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     bool NewKeyPool();\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n-    void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fInternal);\n+    void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool);\n     void KeepKey(int64_t nIndex);\n     void ReturnKey(int64_t nIndex, bool fInternal);\n \tbool GetKeyFromPool(CPubKey &key);"
      }
    ]
  },
  {
    "sha": "261444d9d063dcccc92bb2e672357f92918727c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjE0NDRkOWQwNjNkY2NjYzkyYmIyZTY3MjM1N2Y5MjkxODcyN2M2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:07:13Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:07:13Z"
      },
      "message": "compile",
      "tree": {
        "sha": "5e746f57e981f28bfee38beaeff114f2551b82ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e746f57e981f28bfee38beaeff114f2551b82ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/261444d9d063dcccc92bb2e672357f92918727c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/261444d9d063dcccc92bb2e672357f92918727c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/261444d9d063dcccc92bb2e672357f92918727c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/261444d9d063dcccc92bb2e672357f92918727c6/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e37befac36902c55b9c3b048c71a9ee9b6cfe796",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e37befac36902c55b9c3b048c71a9ee9b6cfe796",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e37befac36902c55b9c3b048c71a9ee9b6cfe796"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 14,
      "deletions": 14
    },
    "files": [
      {
        "sha": "745d3541f954e365f7e9b154dd07a6785889eeae",
        "filename": "src/alias.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/261444d9d063dcccc92bb2e672357f92918727c6/src/alias.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/261444d9d063dcccc92bb2e672357f92918727c6/src/alias.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alias.cpp?ref=261444d9d063dcccc92bb2e672357f92918727c6",
        "patch": "@@ -1480,7 +1480,7 @@ UniValue syscointxfund(const JSONRPCRequest& request) {\n \telse {\n \t\tCReserveKey reservekey(pwalletMain);\n \t\tCPubKey vchPubKey;\n-\t\treservekey.GetReservedKey(vchPubKey, true);\n+\t\treservekey.GetReservedKey(vchPubKey);\n \t\tCTxOut changeOut(nChange, GetScriptForDestination(vchPubKey.GetID()));\n \t\ttx.vout.push_back(changeOut);\n \t}"
      },
      {
        "sha": "a51e4807b28dfa932884e14041223b5729744417",
        "filename": "src/privatesend-client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/261444d9d063dcccc92bb2e672357f92918727c6/src/privatesend-client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/261444d9d063dcccc92bb2e672357f92918727c6/src/privatesend-client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/privatesend-client.cpp?ref=261444d9d063dcccc92bb2e672357f92918727c6",
        "patch": "@@ -1210,7 +1210,7 @@ bool CPrivateSendClient::MakeCollateralAmounts(const CompactTallyItem& tallyItem\n \n     CScript scriptCollateral;\n     CPubKey vchPubKey;\n-    assert(reservekeyCollateral.GetReservedKey(vchPubKey, false)); // should never fail, as we just unlocked\n+    assert(reservekeyCollateral.GetReservedKey(vchPubKey)); // should never fail, as we just unlocked\n     scriptCollateral = GetScriptForDestination(vchPubKey.GetID());\n \n     vecSend.push_back((CRecipient){scriptCollateral, CPrivateSend::GetMaxCollateralAmount(), false});"
      },
      {
        "sha": "d1f262ce9e69e3c3b989988df27051e0860afbf6",
        "filename": "src/privatesend-util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/261444d9d063dcccc92bb2e672357f92918727c6/src/privatesend-util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/261444d9d063dcccc92bb2e672357f92918727c6/src/privatesend-util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/privatesend-util.cpp?ref=261444d9d063dcccc92bb2e672357f92918727c6",
        "patch": "@@ -6,7 +6,7 @@\n CKeyHolder::CKeyHolder(CWallet* pwallet) :\n     reserveKey(pwallet)\n {\n-    reserveKey.GetReservedKey(pubKey, false);\n+    reserveKey.GetReservedKey(pubKey);\n }\n \n void CKeyHolder::KeepKey()"
      },
      {
        "sha": "bef82855907e9ddce5b720075675ec77094d2753",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/261444d9d063dcccc92bb2e672357f92918727c6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/261444d9d063dcccc92bb2e672357f92918727c6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=261444d9d063dcccc92bb2e672357f92918727c6",
        "patch": "@@ -224,7 +224,7 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n \n     CReserveKey reservekey(pwalletMain);\n     CPubKey vchPubKey;\n-    if (!reservekey.GetReservedKey(vchPubKey, true))\n+    if (!reservekey.GetReservedKey(vchPubKey))\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n \n     reservekey.KeepKey();"
      },
      {
        "sha": "dd3a4fb0fe71c414a28e59424935ab4564845ad5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/261444d9d063dcccc92bb2e672357f92918727c6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/261444d9d063dcccc92bb2e672357f92918727c6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=261444d9d063dcccc92bb2e672357f92918727c6",
        "patch": "@@ -3082,7 +3082,7 @@ bool CWallet::CreateCollateralTransaction(CMutableTransaction& txCollateral, std\n         // make our change address\n         CScript scriptChange;\n         CPubKey vchPubKey;\n-        bool success = reservekey.GetReservedKey(vchPubKey, true);\n+        bool success = reservekey.GetReservedKey(vchPubKey);\n         assert(success); // should never fail, as we just unlocked\n         scriptChange = GetScriptForDestination(vchPubKey.GetID());\n         reservekey.KeepKey();\n@@ -3345,7 +3345,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                             // Reserve a new key pair from key pool\n \t\t\t\t\t\t\tCPubKey vchPubKey;\n \t\t\t\t\t\t\tbool ret;\n-\t\t\t\t\t\t\tret = reservekey.GetReservedKey(vchPubKey, true);\n+\t\t\t\t\t\t\tret = reservekey.GetReservedKey(vchPubKey);\n \t\t\t\t\t\t\tassert(ret); // should never fail, as we just unlocked\n \t\t\t\t\t\t\tscriptChange = GetScriptForDestination(vchPubKey.GetID());\n \t\t\t\t\t\t\t\n@@ -4221,15 +4221,15 @@ bool CWallet::UpdatedTransaction(const uint256 &hashTx)\n     return false;\n }\n \n-void CWallet::GetScriptForMining(std::shared_ptr<CReserveScript> &script)\n+void CWallet::GetScriptForMining(boost::shared_ptr<CReserveScript> &script)\n {\n-\tstd::shared_ptr<CReserveKey> rKey(new CReserveKey(this));\n-    CPubKey pubkey;\n-    if (!rKey->GetReservedKey(pubkey, false))\n-        return;\n+\tboost::shared_ptr<CReserveKey> rKey(new CReserveKey(this));\n+\tCPubKey pubkey;\n+\tif (!rKey->GetReservedKey(pubkey))\n+\t\treturn;\n \n-    script = rKey;\n-    script->reserveScript = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n+\tscript = rKey;\n+\tscript->reserveScript = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n }\n \n void CWallet::LockCoin(const COutPoint& output)"
      },
      {
        "sha": "49d720c6010b2311a92a9b7120c387fbe5fc8a44",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/261444d9d063dcccc92bb2e672357f92918727c6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/261444d9d063dcccc92bb2e672357f92918727c6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=261444d9d063dcccc92bb2e672357f92918727c6",
        "patch": "@@ -1020,7 +1020,7 @@ class CReserveKey : public CReserveScript\n     }\n \n     void ReturnKey();\n-    bool GetReservedKey(CPubKey &pubkey, bool fInternalIn /*= false*/);\n+    bool GetReservedKey(CPubKey &pubkey);\n     void KeepKey();\n     void KeepScript() override { KeepKey(); }\n };"
      }
    ]
  },
  {
    "sha": "2c0170fab887217cdcf86cec4c81dc00325c571d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzAxNzBmYWI4ODcyMTdjZGNmODZjZWM0YzgxZGMwMDMyNWM1NzFk",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:07:59Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:07:59Z"
      },
      "message": "compile",
      "tree": {
        "sha": "9809acdb12e2686f66f20ba9b93cd821be1137ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9809acdb12e2686f66f20ba9b93cd821be1137ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c0170fab887217cdcf86cec4c81dc00325c571d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c0170fab887217cdcf86cec4c81dc00325c571d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c0170fab887217cdcf86cec4c81dc00325c571d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c0170fab887217cdcf86cec4c81dc00325c571d/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "261444d9d063dcccc92bb2e672357f92918727c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/261444d9d063dcccc92bb2e672357f92918727c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/261444d9d063dcccc92bb2e672357f92918727c6"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 5,
      "deletions": 8
    },
    "files": [
      {
        "sha": "64518849caee7f606e869a594317ba5072471fad",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c0170fab887217cdcf86cec4c81dc00325c571d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c0170fab887217cdcf86cec4c81dc00325c571d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2c0170fab887217cdcf86cec4c81dc00325c571d",
        "patch": "@@ -4167,11 +4167,10 @@ void CReserveKey::KeepKey()\n \n void CReserveKey::ReturnKey()\n {\n-    if (nIndex != -1) {\n-        pwallet->ReturnKey(nIndex, fInternal);\n-    }\n-    nIndex = -1;\n-    vchPubKey = CPubKey();\n+\tif (nIndex != -1)\n+\t\tpwallet->ReturnKey(nIndex);\n+\tnIndex = -1;\n+\tvchPubKey = CPubKey();\n }\n \n static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb)\n@@ -4781,14 +4780,12 @@ bool AutoBackupWallet(CWallet* wallet, const std::string& strWalletFile_, std::s\n CKeyPool::CKeyPool()\n {\n     nTime = GetTime();\n-    fInternal = false;\n }\n \n-CKeyPool::CKeyPool(const CPubKey& vchPubKeyIn, bool fInternalIn)\n+CKeyPool::CKeyPool(const CPubKey& vchPubKeyIn)\n {\n     nTime = GetTime();\n     vchPubKey = vchPubKeyIn;\n-    fInternal = fInternalIn;\n }\n \n CWalletKey::CWalletKey(int64_t nExpires)"
      }
    ]
  },
  {
    "sha": "387c4770e3b0979401f38d7d818c67f448fe472d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODdjNDc3MGUzYjA5Nzk0MDFmMzhkN2Q4MThjNjdmNDQ4ZmU0NzJk",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:10:55Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:10:55Z"
      },
      "message": "compile",
      "tree": {
        "sha": "8de2caabfa62a90d75a8efa38aa463803b7d357d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8de2caabfa62a90d75a8efa38aa463803b7d357d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/387c4770e3b0979401f38d7d818c67f448fe472d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/387c4770e3b0979401f38d7d818c67f448fe472d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/387c4770e3b0979401f38d7d818c67f448fe472d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/387c4770e3b0979401f38d7d818c67f448fe472d/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c0170fab887217cdcf86cec4c81dc00325c571d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c0170fab887217cdcf86cec4c81dc00325c571d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c0170fab887217cdcf86cec4c81dc00325c571d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4b26f971fb71ad2d912197bb4bad8bf8507e71bb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/387c4770e3b0979401f38d7d818c67f448fe472d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/387c4770e3b0979401f38d7d818c67f448fe472d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=387c4770e3b0979401f38d7d818c67f448fe472d",
        "patch": "@@ -4220,7 +4220,7 @@ bool CWallet::UpdatedTransaction(const uint256 &hashTx)\n     return false;\n }\n \n-void CWallet::GetScriptForMining(boost::shared_ptr<CReserveScript> &script)\n+void CWallet::GetScriptForMining(std::shared_ptr<CReserveScript> &script)\n {\n \tboost::shared_ptr<CReserveKey> rKey(new CReserveKey(this));\n \tCPubKey pubkey;"
      },
      {
        "sha": "9fa1f6a3c2413c36ed4c14a3881a70d7fa0e9ca7",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/387c4770e3b0979401f38d7d818c67f448fe472d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/387c4770e3b0979401f38d7d818c67f448fe472d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=387c4770e3b0979401f38d7d818c67f448fe472d",
        "patch": "@@ -853,7 +853,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n     void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool);\n     void KeepKey(int64_t nIndex);\n-    void ReturnKey(int64_t nIndex, bool fInternal);\n+    void ReturnKey(int64_t nIndex);\n \tbool GetKeyFromPool(CPubKey &key);\n     int64_t GetOldestKeyPoolTime();\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;"
      }
    ]
  },
  {
    "sha": "af5117b51d5be4f687870e8629cbe8f161be9582",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjUxMTdiNTFkNWJlNGY2ODc4NzBlODYyOWNiZThmMTYxYmU5NTgy",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:12:02Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:12:02Z"
      },
      "message": "compile",
      "tree": {
        "sha": "beaa833a74bfea71ab28b9dc7f101113812bcc5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/beaa833a74bfea71ab28b9dc7f101113812bcc5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af5117b51d5be4f687870e8629cbe8f161be9582",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af5117b51d5be4f687870e8629cbe8f161be9582",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af5117b51d5be4f687870e8629cbe8f161be9582",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af5117b51d5be4f687870e8629cbe8f161be9582/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "387c4770e3b0979401f38d7d818c67f448fe472d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/387c4770e3b0979401f38d7d818c67f448fe472d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/387c4770e3b0979401f38d7d818c67f448fe472d"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 1,
      "deletions": 13
    },
    "files": [
      {
        "sha": "62bc6c8b4434d4e3706ccd9a7aec99cca48d717e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 13,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af5117b51d5be4f687870e8629cbe8f161be9582/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af5117b51d5be4f687870e8629cbe8f161be9582/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=af5117b51d5be4f687870e8629cbe8f161be9582",
        "patch": "@@ -4173,18 +4173,6 @@ void CReserveKey::ReturnKey()\n \tvchPubKey = CPubKey();\n }\n \n-static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb)\n-{\n-    BOOST_FOREACH(const int64_t& id, setKeyPool)\n-    {\n-        CKeyPool keypool;\n-        if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n-        assert(keypool.vchPubKey.IsValid());\n-        CKeyID keyID = keypool.vchPubKey.GetID();\n-        setAddress.insert(keyID);\n-    }\n-}\n \n void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const\n {\n@@ -4222,7 +4210,7 @@ bool CWallet::UpdatedTransaction(const uint256 &hashTx)\n \n void CWallet::GetScriptForMining(std::shared_ptr<CReserveScript> &script)\n {\n-\tboost::shared_ptr<CReserveKey> rKey(new CReserveKey(this));\n+\tstd::shared_ptr<CReserveKey> rKey(new CReserveKey(this));\n \tCPubKey pubkey;\n \tif (!rKey->GetReservedKey(pubkey))\n \t\treturn;"
      }
    ]
  },
  {
    "sha": "5edd5bd7c9ed6626b89a62f0eab32975b2da3584",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWRkNWJkN2M5ZWQ2NjI2Yjg5YTYyZjBlYWIzMjk3NWIyZGEzNTg0",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:15:06Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:15:06Z"
      },
      "message": "compile",
      "tree": {
        "sha": "71846d597b157fde96e2101e5ca4cf82c5e47eba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71846d597b157fde96e2101e5ca4cf82c5e47eba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5edd5bd7c9ed6626b89a62f0eab32975b2da3584",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5edd5bd7c9ed6626b89a62f0eab32975b2da3584",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5edd5bd7c9ed6626b89a62f0eab32975b2da3584",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5edd5bd7c9ed6626b89a62f0eab32975b2da3584/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af5117b51d5be4f687870e8629cbe8f161be9582",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af5117b51d5be4f687870e8629cbe8f161be9582",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af5117b51d5be4f687870e8629cbe8f161be9582"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "1dcf4bf9f77598c07b3aed4ae605485c89e984c9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5edd5bd7c9ed6626b89a62f0eab32975b2da3584/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5edd5bd7c9ed6626b89a62f0eab32975b2da3584/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=5edd5bd7c9ed6626b89a62f0eab32975b2da3584",
        "patch": "@@ -132,8 +132,9 @@ class CKeyPool\n \tADD_SERIALIZE_METHODS;\n \n \ttemplate <typename Stream, typename Operation>\n-\tinline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-\t\tif (!(nType & SER_GETHASH))\n+\tinline void SerializationOp(Stream& s, Operation ser_action) {\n+\t\tint nVersion = s.GetVersion();\n+\t\tif (!(s.GetType() & SER_GETHASH))\n \t\t\tREADWRITE(nVersion);\n \t\tREADWRITE(nTime);\n \t\tREADWRITE(vchPubKey);"
      },
      {
        "sha": "7fa0ccacc1cbbd8b7cc1374a2b77b19e0cea877b",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5edd5bd7c9ed6626b89a62f0eab32975b2da3584/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5edd5bd7c9ed6626b89a62f0eab32975b2da3584/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=5edd5bd7c9ed6626b89a62f0eab32975b2da3584",
        "patch": "@@ -58,7 +58,7 @@ bool CWalletDB::ErasePurpose(const string& strPurpose)\n bool CWalletDB::WriteTx(const CWalletTx& wtx)\n {\n \tnWalletDBUpdated++;\n-\treturn Write(std::make_pair(std::string(\"tx\"), wtx.GetHash()), wtx);\n+\treturn Write(std::make_pair(std::string(\"tx\"), wtx.tx->GetHash()), wtx);\n }\n \n bool CWalletDB::EraseTx(uint256 hash)\n@@ -374,10 +374,10 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \t\t\tCWalletTx wtx;\n \t\t\tssValue >> wtx;\n \t\t\tCValidationState state;\n-\t\t\tif (!(CheckTransaction(wtx, state) && (wtx.GetHash() == hash) && state.IsValid()))\n+\t\t\tif (!(CheckTransaction(wtx->, state) && (wtx.tx->GetHash() == hash) && state.IsValid()))\n \t\t\t{\n \t\t\t\t// SYSCOIN\n-\t\t\t\tif (wtx.GetHash() != hash && wtx.nVersion == GetSyscoinTxVersion())\n+\t\t\t\tif (wtx.tx->GetHash() != hash && wtx.tx->nVersion == GetSyscoinTxVersion())\n \t\t\t\t\treturn true;\n \t\t\t\tstrErr = \"Error reading wallet database. CheckTransaction failed, validation state: \" + FormatStateMessage(state);\n \t\t\t\treturn false;"
      }
    ]
  },
  {
    "sha": "325045946625efebf157d7c9faafe6b38793f109",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjUwNDU5NDY2MjVlZmViZjE1N2Q3YzlmYWFmZTZiMzg3OTNmMTA5",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:16:42Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:16:42Z"
      },
      "message": "compile",
      "tree": {
        "sha": "c65a2d738fdd751c3b53088fe8e35f984c7f09c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c65a2d738fdd751c3b53088fe8e35f984c7f09c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/325045946625efebf157d7c9faafe6b38793f109",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/325045946625efebf157d7c9faafe6b38793f109",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/325045946625efebf157d7c9faafe6b38793f109",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/325045946625efebf157d7c9faafe6b38793f109/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5edd5bd7c9ed6626b89a62f0eab32975b2da3584",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5edd5bd7c9ed6626b89a62f0eab32975b2da3584",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5edd5bd7c9ed6626b89a62f0eab32975b2da3584"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "b3976ed0c0e9a75edca20487f1d71e62e0956828",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/325045946625efebf157d7c9faafe6b38793f109/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/325045946625efebf157d7c9faafe6b38793f109/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=325045946625efebf157d7c9faafe6b38793f109",
        "patch": "@@ -374,10 +374,10 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \t\t\tCWalletTx wtx;\n \t\t\tssValue >> wtx;\n \t\t\tCValidationState state;\n-\t\t\tif (!(CheckTransaction(wtx->, state) && (wtx.tx->GetHash() == hash) && state.IsValid()))\n+\t\t\tif (!(CheckTransaction(*wtx->tx, state) && (wtx.tx->GetHash() == hash) && state.IsValid()))\n \t\t\t{\n \t\t\t\t// SYSCOIN\n-\t\t\t\tif (wtx.tx->GetHash() != hash && wtx.tx->nVersion == GetSyscoinTxVersion())\n+\t\t\t\tif (wtx.tx->GetHash() != hash && wtx.tx->nVersion == SYSCOIN_TX_VERSION)\n \t\t\t\t\treturn true;\n \t\t\t\tstrErr = \"Error reading wallet database. CheckTransaction failed, validation state: \" + FormatStateMessage(state);\n \t\t\t\treturn false;\n@@ -406,7 +406,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \t\t\tif (wtx.nOrderPos == -1)\n \t\t\t\twss.fAnyUnordered = true;\n \n-\t\t\tpwallet->AddToWallet(wtx, true, NULL);\n+\t\t\tpwallet->AddToWallet(wtx, true);\n \t\t}\n \t\telse if (strType == \"acentry\")\n \t\t{"
      }
    ]
  },
  {
    "sha": "adc90d4b106b75f9f9a93ca93a1d295d7fe0be2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGM5MGQ0YjEwNmI3NWY5ZjlhOTNjYTkzYTFkMjk1ZDdmZTBiZTJk",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:19:57Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:19:57Z"
      },
      "message": "compile",
      "tree": {
        "sha": "200cbc2a40a144f20f3db478fcb01ea1c3ae61f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/200cbc2a40a144f20f3db478fcb01ea1c3ae61f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/adc90d4b106b75f9f9a93ca93a1d295d7fe0be2d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adc90d4b106b75f9f9a93ca93a1d295d7fe0be2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/adc90d4b106b75f9f9a93ca93a1d295d7fe0be2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adc90d4b106b75f9f9a93ca93a1d295d7fe0be2d/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "325045946625efebf157d7c9faafe6b38793f109",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/325045946625efebf157d7c9faafe6b38793f109",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/325045946625efebf157d7c9faafe6b38793f109"
      }
    ],
    "stats": {
      "total": 237,
      "additions": 119,
      "deletions": 118
    },
    "files": [
      {
        "sha": "a17916a80cab3ee68ea1c6f741c2bd92bb944e05",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 117,
        "deletions": 116,
        "changes": 233,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adc90d4b106b75f9f9a93ca93a1d295d7fe0be2d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adc90d4b106b75f9f9a93ca93a1d295d7fe0be2d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=adc90d4b106b75f9f9a93ca93a1d295d7fe0be2d",
        "patch": "@@ -4616,99 +4616,99 @@ void CWallet::postInitProcess(boost::thread_group& threadGroup)\n \n bool CWallet::ParameterInteraction()\n {\n-    if (GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET))\n-        return true;\n+\tif (GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET))\n+\t\treturn true;\n \n-    if (GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && SoftSetBoolArg(\"-walletbroadcast\", false)) {\n-        LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n-    }\n+\tif (GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && SoftSetBoolArg(\"-walletbroadcast\", false)) {\n+\t\tLogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n+\t}\n \n-    if (GetBoolArg(\"-salvagewallet\", false) && SoftSetBoolArg(\"-rescan\", true)) {\n-        // Rewrite just private keys: rescan to find transactions\n-        LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n-    }\n+\tif (GetBoolArg(\"-salvagewallet\", false) && SoftSetBoolArg(\"-rescan\", true)) {\n+\t\t// Rewrite just private keys: rescan to find transactions\n+\t\tLogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n+\t}\n \n-    // -zapwallettx implies a rescan\n-    if (GetBoolArg(\"-zapwallettxes\", false) && SoftSetBoolArg(\"-rescan\", true)) {\n-        LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n-    }\n+\t// -zapwallettx implies a rescan\n+\tif (GetBoolArg(\"-zapwallettxes\", false) && SoftSetBoolArg(\"-rescan\", true)) {\n+\t\tLogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n+\t}\n \n-    if (GetBoolArg(\"-sysperms\", false))\n-        return InitError(\"-sysperms is not allowed in combination with enabled wallet functionality\");\n-    if (GetArg(\"-prune\", 0) && GetBoolArg(\"-rescan\", false))\n-        return InitError(_(\"Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.\"));\n+\tif (GetBoolArg(\"-sysperms\", false))\n+\t\treturn InitError(\"-sysperms is not allowed in combination with enabled wallet functionality\");\n+\tif (GetArg(\"-prune\", 0) && GetBoolArg(\"-rescan\", false))\n+\t\treturn InitError(_(\"Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.\"));\n \n-    if (::minRelayTxFee.GetFeePerK() > HIGH_TX_FEE_PER_KB)\n-        InitWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +\n-                    _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n+\tif (::minRelayTxFee.GetFeePerK() > HIGH_TX_FEE_PER_KB)\n+\t\tInitWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +\n+\t\t\t_(\"The wallet will avoid paying less than the minimum relay fee.\"));\n \n-    if (IsArgSet(\"-mintxfee\"))\n-    {\n-        CAmount n = 0;\n-        if (!ParseMoney(GetArg(\"-mintxfee\", \"\"), n) || 0 == n)\n-            return InitError(AmountErrMsg(\"mintxfee\", GetArg(\"-mintxfee\", \"\")));\n-        if (n > HIGH_TX_FEE_PER_KB)\n-            InitWarning(AmountHighWarn(\"-mintxfee\") + \" \" +\n-                        _(\"This is the minimum transaction fee you pay on every transaction.\"));\n-        CWallet::minTxFee = CFeeRate(n);\n-    }\n-    if (IsArgSet(\"-fallbackfee\"))\n-    {\n-        CAmount nFeePerK = 0;\n-        if (!ParseMoney(GetArg(\"-fallbackfee\", \"\"), nFeePerK))\n-            return InitError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), GetArg(\"-fallbackfee\", \"\")));\n-        if (nFeePerK > HIGH_TX_FEE_PER_KB)\n-            InitWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +\n-                        _(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n-        CWallet::fallbackFee = CFeeRate(nFeePerK);\n-    }\n-    if (IsArgSet(\"-paytxfee\"))\n-    {\n-        CAmount nFeePerK = 0;\n-        if (!ParseMoney(GetArg(\"-paytxfee\", \"\"), nFeePerK))\n-            return InitError(AmountErrMsg(\"paytxfee\", GetArg(\"-paytxfee\", \"\")));\n-        if (nFeePerK > HIGH_TX_FEE_PER_KB)\n-            InitWarning(AmountHighWarn(\"-paytxfee\") + \" \" +\n-                        _(\"This is the transaction fee you will pay if you send a transaction.\"));\n-\n-        payTxFee = CFeeRate(nFeePerK, 1000);\n-        if (payTxFee < ::minRelayTxFee)\n-        {\n-            return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n-                                       GetArg(\"-paytxfee\", \"\"), ::minRelayTxFee.ToString()));\n-        }\n-    }\n-    if (IsArgSet(\"-maxtxfee\"))\n-    {\n-        CAmount nMaxFee = 0;\n-        if (!ParseMoney(GetArg(\"-maxtxfee\", \"\"), nMaxFee))\n-            return InitError(AmountErrMsg(\"maxtxfee\", GetArg(\"-maxtxfee\", \"\")));\n-        if (nMaxFee > HIGH_MAX_TX_FEE)\n-            InitWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n-        maxTxFee = nMaxFee;\n-        if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n-        {\n-            return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n-                                       GetArg(\"-maxtxfee\", \"\"), ::minRelayTxFee.ToString()));\n-        }\n-    }\n-    nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n-    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n-    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", DEFAULT_SEND_FREE_TRANSACTIONS);\n+\tif (IsArgSet(\"-mintxfee\"))\n+\t{\n+\t\tCAmount n = 0;\n+\t\tif (!ParseMoney(GetArg(\"-mintxfee\", \"\"), n) || 0 == n)\n+\t\t\treturn InitError(AmountErrMsg(\"mintxfee\", GetArg(\"-mintxfee\", \"\")));\n+\t\tif (n > HIGH_TX_FEE_PER_KB)\n+\t\t\tInitWarning(AmountHighWarn(\"-mintxfee\") + \" \" +\n+\t\t\t\t_(\"This is the minimum transaction fee you pay on every transaction.\"));\n+\t\tCWallet::minTxFee = CFeeRate(n);\n+\t}\n+\tif (IsArgSet(\"-fallbackfee\"))\n+\t{\n+\t\tCAmount nFeePerK = 0;\n+\t\tif (!ParseMoney(GetArg(\"-fallbackfee\", \"\"), nFeePerK))\n+\t\t\treturn InitError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), GetArg(\"-fallbackfee\", \"\")));\n+\t\tif (nFeePerK > HIGH_TX_FEE_PER_KB)\n+\t\t\tInitWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +\n+\t\t\t\t_(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n+\t\tCWallet::fallbackFee = CFeeRate(nFeePerK);\n+\t}\n+\tif (IsArgSet(\"-paytxfee\"))\n+\t{\n+\t\tCAmount nFeePerK = 0;\n+\t\tif (!ParseMoney(GetArg(\"-paytxfee\", \"\"), nFeePerK))\n+\t\t\treturn InitError(AmountErrMsg(\"paytxfee\", GetArg(\"-paytxfee\", \"\")));\n+\t\tif (nFeePerK > HIGH_TX_FEE_PER_KB)\n+\t\t\tInitWarning(AmountHighWarn(\"-paytxfee\") + \" \" +\n+\t\t\t\t_(\"This is the transaction fee you will pay if you send a transaction.\"));\n+\n+\t\tpayTxFee = CFeeRate(nFeePerK, 1000);\n+\t\tif (payTxFee < ::minRelayTxFee)\n+\t\t{\n+\t\t\treturn InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n+\t\t\t\tGetArg(\"-paytxfee\", \"\"), ::minRelayTxFee.ToString()));\n+\t\t}\n+\t}\n+\tif (IsArgSet(\"-maxtxfee\"))\n+\t{\n+\t\tCAmount nMaxFee = 0;\n+\t\tif (!ParseMoney(GetArg(\"-maxtxfee\", \"\"), nMaxFee))\n+\t\t\treturn InitError(AmountErrMsg(\"maxtxfee\", GetArg(\"-maxtxfee\", \"\")));\n+\t\tif (nMaxFee > HIGH_MAX_TX_FEE)\n+\t\t\tInitWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n+\t\tmaxTxFee = nMaxFee;\n+\t\tif (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n+\t\t{\n+\t\t\treturn InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n+\t\t\t\tGetArg(\"-maxtxfee\", \"\"), ::minRelayTxFee.ToString()));\n+\t\t}\n+\t}\n+\tnTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n+\tbSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n+\tfSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", DEFAULT_SEND_FREE_TRANSACTIONS);\n \n-    if (fSendFreeTransactions && GetArg(\"-limitfreerelay\", DEFAULT_LIMITFREERELAY) <= 0)\n-        return InitError(\"Creation of free transactions with their relay disabled is not supported.\");\n+\tif (fSendFreeTransactions && GetArg(\"-limitfreerelay\", DEFAULT_LIMITFREERELAY) <= 0)\n+\t\treturn InitError(\"Creation of free transactions with their relay disabled is not supported.\");\n \n-    if (IsArgSet(\"-walletbackupsdir\")) {\n-        if (!boost::filesystem::is_directory(GetArg(\"-walletbackupsdir\", \"\"))) {\n-            LogPrintf(\"%s: Warning: incorrect parameter -walletbackupsdir, path must exist! Using default path.\\n\", __func__);\n-            InitWarning(\"Warning: incorrect parameter -walletbackupsdir, path must exist! Using default path.\\n\");\n+\tif (IsArgSet(\"-walletbackupsdir\")) {\n+\t\tif (!boost::filesystem::is_directory(GetArg(\"-walletbackupsdir\", \"\"))) {\n+\t\t\tLogPrintf(\"%s: Warning: incorrect parameter -walletbackupsdir, path must exist! Using default path.\\n\", __func__);\n+\t\t\tInitWarning(\"Warning: incorrect parameter -walletbackupsdir, path must exist! Using default path.\\n\");\n \n-            ForceRemoveArg(\"-walletbackupsdir\");\n-        }\n-    }\n+\t\t\tForceRemoveArg(\"-walletbackupsdir\");\n+\t\t}\n+\t}\n \n-    return true;\n+\treturn true;\n }\n \n bool CWallet::InitAutoBackup()\n@@ -4719,42 +4719,43 @@ bool CWallet::InitAutoBackup()\n \n bool CWallet::BackupWallet(const std::string& strDest)\n {\n-    if (!fFileBacked)\n-        return false;\n-    while (true)\n-    {\n-        {\n-            LOCK(bitdb.cs_db);\n-            if (!bitdb.mapFileUseCount.count(strWalletFile) || bitdb.mapFileUseCount[strWalletFile] == 0)\n-            {\n-                // Flush log data to the dat file\n-                bitdb.CloseDb(strWalletFile);\n-                bitdb.CheckpointLSN(strWalletFile);\n-                bitdb.mapFileUseCount.erase(strWalletFile);\n-\n-                // Copy wallet file\n-                boost::filesystem::path pathSrc = GetDataDir() / strWalletFile;\n-                boost::filesystem::path pathDest(strDest);\n-                if (boost::filesystem::is_directory(pathDest))\n-                    pathDest /= strWalletFile;\n-\n-                try {\n+\tif (!fFileBacked)\n+\t\treturn false;\n+\twhile (true)\n+\t{\n+\t\t{\n+\t\t\tLOCK(bitdb.cs_db);\n+\t\t\tif (!bitdb.mapFileUseCount.count(strWalletFile) || bitdb.mapFileUseCount[strWalletFile] == 0)\n+\t\t\t{\n+\t\t\t\t// Flush log data to the dat file\n+\t\t\t\tbitdb.CloseDb(strWalletFile);\n+\t\t\t\tbitdb.CheckpointLSN(strWalletFile);\n+\t\t\t\tbitdb.mapFileUseCount.erase(strWalletFile);\n+\n+\t\t\t\t// Copy wallet file\n+\t\t\t\tboost::filesystem::path pathSrc = GetDataDir() / strWalletFile;\n+\t\t\t\tboost::filesystem::path pathDest(strDest);\n+\t\t\t\tif (boost::filesystem::is_directory(pathDest))\n+\t\t\t\t\tpathDest /= strWalletFile;\n+\n+\t\t\t\ttry {\n #if BOOST_VERSION >= 104000\n-                    boost::filesystem::copy_file(pathSrc, pathDest, boost::filesystem::copy_option::overwrite_if_exists);\n+\t\t\t\t\tboost::filesystem::copy_file(pathSrc, pathDest, boost::filesystem::copy_option::overwrite_if_exists);\n #else\n-                    boost::filesystem::copy_file(pathSrc, pathDest);\n+\t\t\t\t\tboost::filesystem::copy_file(pathSrc, pathDest);\n #endif\n-                    LogPrintf(\"copied %s to %s\\n\", strWalletFile, pathDest.string());\n-                    return true;\n-                } catch (const boost::filesystem::filesystem_error& e) {\n-                    LogPrintf(\"error copying %s to %s - %s\\n\", strWalletFile, pathDest.string(), e.what());\n-                    return false;\n-                }\n-            }\n-        }\n-        MilliSleep(100);\n-    }\n-    return false;\n+\t\t\t\t\tLogPrintf(\"copied %s to %s\\n\", strWalletFile, pathDest.string());\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t\tcatch (const boost::filesystem::filesystem_error& e) {\n+\t\t\t\t\tLogPrintf(\"error copying %s to %s - %s\\n\", strWalletFile, pathDest.string(), e.what());\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tMilliSleep(100);\n+\t}\n+\treturn false;\n }\n \n // This should be called carefully:"
      },
      {
        "sha": "600face5445c65bda4a267dc61a6ae4ad05c00b2",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adc90d4b106b75f9f9a93ca93a1d295d7fe0be2d/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adc90d4b106b75f9f9a93ca93a1d295d7fe0be2d/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=adc90d4b106b75f9f9a93ca93a1d295d7fe0be2d",
        "patch": "@@ -20,7 +20,7 @@\n #include <boost/foreach.hpp>\n #include <boost/scoped_ptr.hpp>\n #include <boost/thread.hpp>\n-\n+#include \"alias.h\"\n using namespace std;\n \n static uint64_t nAccountingEntryNumber = 0;\n@@ -374,7 +374,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \t\t\tCWalletTx wtx;\n \t\t\tssValue >> wtx;\n \t\t\tCValidationState state;\n-\t\t\tif (!(CheckTransaction(*wtx->tx, state) && (wtx.tx->GetHash() == hash) && state.IsValid()))\n+\t\t\tif (!(CheckTransaction(*wtx.tx, state) && (wtx.tx->GetHash() == hash) && state.IsValid()))\n \t\t\t{\n \t\t\t\t// SYSCOIN\n \t\t\t\tif (wtx.tx->GetHash() != hash && wtx.tx->nVersion == SYSCOIN_TX_VERSION)"
      }
    ]
  },
  {
    "sha": "614ac7f4b6014195285abba3149aa19b3450967e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTRhYzdmNGI2MDE0MTk1Mjg1YWJiYTMxNDlhYTE5YjM0NTA5Njdl",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:30:27Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:30:27Z"
      },
      "message": "compile",
      "tree": {
        "sha": "8a44a6c6234954cfb31697e6b8b55d76c4c743aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a44a6c6234954cfb31697e6b8b55d76c4c743aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/614ac7f4b6014195285abba3149aa19b3450967e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614ac7f4b6014195285abba3149aa19b3450967e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/614ac7f4b6014195285abba3149aa19b3450967e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614ac7f4b6014195285abba3149aa19b3450967e/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "adc90d4b106b75f9f9a93ca93a1d295d7fe0be2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adc90d4b106b75f9f9a93ca93a1d295d7fe0be2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/adc90d4b106b75f9f9a93ca93a1d295d7fe0be2d"
      }
    ],
    "stats": {
      "total": 406,
      "additions": 212,
      "deletions": 194
    },
    "files": [
      {
        "sha": "f26324ccde028cb7f4c2a1feec91cbf2d5001b88",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/614ac7f4b6014195285abba3149aa19b3450967e/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/614ac7f4b6014195285abba3149aa19b3450967e/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=614ac7f4b6014195285abba3149aa19b3450967e",
        "patch": "@@ -306,7 +306,8 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     if (pwalletMain->IsMine(*wtx.tx)) {\n-        pwalletMain->AddToWallet(wtx, false);\n+\t\tCWalletDB walletdb(pwalletMain->strWalletFile, \"r+\", false);\n+        pwalletMain->AddToWallet(wtx, false, &walletdb);\n         return NullUniValue;\n     }\n "
      },
      {
        "sha": "f70713774260473f05ce2f8a3d667bf8ea69885d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 208,
        "deletions": 191,
        "changes": 399,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/614ac7f4b6014195285abba3149aa19b3450967e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/614ac7f4b6014195285abba3149aa19b3450967e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=614ac7f4b6014195285abba3149aa19b3450967e",
        "patch": "@@ -822,130 +822,146 @@ void CWallet::MarkDirty()\n     fAnonymizableTallyCachedNonDenom = false;\n }\n \n-bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n+bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb)\n {\n-    LOCK(cs_wallet);\n-\n-    CWalletDB walletdb(strWalletFile, \"r+\", fFlushOnClose);\n-\n-    uint256 hash = wtxIn.GetHash();\n+\tuint256 hash = wtxIn.GetHash();\n \n-    // Inserts only if not already there, returns tx inserted or tx found\n-    std::pair<std::map<uint256, CWalletTx>::iterator, bool> ret = mapWallet.insert(std::make_pair(hash, wtxIn));\n-    CWalletTx& wtx = (*ret.first).second;\n-    wtx.BindWallet(this);\n-    bool fInsertedNew = ret.second;\n-    if (fInsertedNew)\n-    {\n-        wtx.nTimeReceived = GetAdjustedTime();\n-        wtx.nOrderPos = IncOrderPosNext(&walletdb);\n-        wtxOrdered.insert(std::make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n+\tif (fFromLoadWallet)\n+\t{\n+\t\tmapWallet[hash] = wtxIn;\n+\t\tCWalletTx& wtx = mapWallet[hash];\n+\t\twtx.BindWallet(this);\n+\t\twtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n+\t\tAddToSpends(hash);\n+\t\tBOOST_FOREACH(const CTxIn& txin, wtx.vin) {\n+\t\t\tif (mapWallet.count(txin.prevout.hash)) {\n+\t\t\t\tCWalletTx& prevtx = mapWallet[txin.prevout.hash];\n+\t\t\t\tif (prevtx.nIndex == -1 && !prevtx.hashUnset()) {\n+\t\t\t\t\tMarkConflicted(prevtx.hashBlock, wtx.GetHash());\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\telse\n+\t{\n \n-        wtx.nTimeSmart = wtx.nTimeReceived;\n-        if (!wtxIn.hashUnset())\n-        {\n-            if (mapBlockIndex.count(wtxIn.hashBlock))\n-            {\n-                int64_t latestNow = wtx.nTimeReceived;\n-                int64_t latestEntry = 0;\n-                {\n-                    // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n-                    int64_t latestTolerated = latestNow + 300;\n-                    const TxItems & txOrdered = wtxOrdered;\n-                    for (TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n-                    {\n-                        CWalletTx *const pwtx = (*it).second.first;\n-                        if (pwtx == &wtx)\n-                            continue;\n-                        CAccountingEntry *const pacentry = (*it).second.second;\n-                        int64_t nSmartTime;\n-                        if (pwtx)\n-                        {\n-                            nSmartTime = pwtx->nTimeSmart;\n-                            if (!nSmartTime)\n-                                nSmartTime = pwtx->nTimeReceived;\n-                        }\n-                        else\n-                            nSmartTime = pacentry->nTime;\n-                        if (nSmartTime <= latestTolerated)\n-                        {\n-                            latestEntry = nSmartTime;\n-                            if (nSmartTime > latestNow)\n-                                latestNow = nSmartTime;\n-                            break;\n-                        }\n-                    }\n-                }\n+\t\tLOCK(cs_wallet);\n+\t\t// Inserts only if not already there, returns tx inserted or tx found\n+\t\tpair<map<uint256, CWalletTx>::iterator, bool> ret = mapWallet.insert(make_pair(hash, wtxIn));\n+\t\tCWalletTx& wtx = (*ret.first).second;\n+\t\twtx.BindWallet(this);\n+\t\tbool fInsertedNew = ret.second;\n+\t\tif (fInsertedNew)\n+\t\t{\n+\t\t\twtx.nTimeReceived = GetAdjustedTime();\n+\t\t\twtx.nOrderPos = IncOrderPosNext(pwalletdb);\n+\t\t\twtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n \n-                int64_t blocktime = mapBlockIndex[wtxIn.hashBlock]->GetBlockTime();\n-                wtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n-            }\n-            else\n-                LogPrintf(\"AddToWallet(): found %s in block %s not in index\\n\",\n-                         wtxIn.GetHash().ToString(),\n-                         wtxIn.hashBlock.ToString());\n-        }\n-        AddToSpends(hash);\n-        for(unsigned int i = 0; i < wtx.tx->vout.size(); ++i) {\n-            if (IsMine(wtx.tx->vout[i]) && !IsSpent(hash, i)) {\n-                setWalletUTXO.insert(COutPoint(hash, i));\n-            }\n-        }\n-    }\n+\t\t\twtx.nTimeSmart = wtx.nTimeReceived;\n+\t\t\tif (!wtxIn.hashUnset())\n+\t\t\t{\n+\t\t\t\tif (mapBlockIndex.count(wtxIn.hashBlock))\n+\t\t\t\t{\n+\t\t\t\t\tint64_t latestNow = wtx.nTimeReceived;\n+\t\t\t\t\tint64_t latestEntry = 0;\n+\t\t\t\t\t{\n+\t\t\t\t\t\t// Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n+\t\t\t\t\t\tint64_t latestTolerated = latestNow + 300;\n+\t\t\t\t\t\tconst TxItems & txOrdered = wtxOrdered;\n+\t\t\t\t\t\tfor (TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tCWalletTx *const pwtx = (*it).second.first;\n+\t\t\t\t\t\t\tif (pwtx == &wtx)\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\tCAccountingEntry *const pacentry = (*it).second.second;\n+\t\t\t\t\t\t\tint64_t nSmartTime;\n+\t\t\t\t\t\t\tif (pwtx)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tnSmartTime = pwtx->nTimeSmart;\n+\t\t\t\t\t\t\t\tif (!nSmartTime)\n+\t\t\t\t\t\t\t\t\tnSmartTime = pwtx->nTimeReceived;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\telse\n+\t\t\t\t\t\t\t\tnSmartTime = pacentry->nTime;\n+\t\t\t\t\t\t\tif (nSmartTime <= latestTolerated)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tlatestEntry = nSmartTime;\n+\t\t\t\t\t\t\t\tif (nSmartTime > latestNow)\n+\t\t\t\t\t\t\t\t\tlatestNow = nSmartTime;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \n-    bool fUpdated = false;\n-    if (!fInsertedNew)\n-    {\n-        // Merge\n-        if (!wtxIn.hashUnset() && wtxIn.hashBlock != wtx.hashBlock)\n-        {\n-            wtx.hashBlock = wtxIn.hashBlock;\n-            fUpdated = true;\n-        }\n-        // If no longer abandoned, update\n-        if (wtxIn.hashBlock.IsNull() && wtx.isAbandoned())\n-        {\n-            wtx.hashBlock = wtxIn.hashBlock;\n-            fUpdated = true;\n-        }\n-        if (wtxIn.nIndex != -1 && (wtxIn.nIndex != wtx.nIndex))\n-        {\n-            wtx.nIndex = wtxIn.nIndex;\n-            fUpdated = true;\n-        }\n-        if (wtxIn.fFromMe && wtxIn.fFromMe != wtx.fFromMe)\n-        {\n-            wtx.fFromMe = wtxIn.fFromMe;\n-            fUpdated = true;\n-        }\n-    }\n+\t\t\t\t\tint64_t blocktime = mapBlockIndex[wtxIn.hashBlock]->GetBlockTime();\n+\t\t\t\t\twtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n+\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t\tLogPrintf(\"AddToWallet(): found %s in block %s not in index\\n\",\n+\t\t\t\t\t\twtxIn.GetHash().ToString(),\n+\t\t\t\t\t\twtxIn.hashBlock.ToString());\n+\t\t\t}\n+\t\t\tAddToSpends(hash);\n+\t\t\tfor (unsigned int i = 0; i < wtx.tx->vout.size(); ++i) {\n+\t\t\t\tif (IsMine(wtx.tx->vout[i]) && !IsSpent(hash, i)) {\n+\t\t\t\t\tsetWalletUTXO.insert(COutPoint(hash, i));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n \n-    //// debug print\n-    LogPrintf(\"AddToWallet %s  %s%s\\n\", wtxIn.GetHash().ToString(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n+\t\tbool fUpdated = false;\n+\t\tif (!fInsertedNew)\n+\t\t{\n+\t\t\t// Merge\n+\t\t\tif (!wtxIn.hashUnset() && wtxIn.hashBlock != wtx.hashBlock)\n+\t\t\t{\n+\t\t\t\twtx.hashBlock = wtxIn.hashBlock;\n+\t\t\t\tfUpdated = true;\n+\t\t\t}\n+\t\t\t// If no longer abandoned, update\n+\t\t\tif (wtxIn.hashBlock.IsNull() && wtx.isAbandoned())\n+\t\t\t{\n+\t\t\t\twtx.hashBlock = wtxIn.hashBlock;\n+\t\t\t\tfUpdated = true;\n+\t\t\t}\n+\t\t\tif (wtxIn.nIndex != -1 && (wtxIn.nIndex != wtx.nIndex))\n+\t\t\t{\n+\t\t\t\twtx.nIndex = wtxIn.nIndex;\n+\t\t\t\tfUpdated = true;\n+\t\t\t}\n+\t\t\tif (wtxIn.fFromMe && wtxIn.fFromMe != wtx.fFromMe)\n+\t\t\t{\n+\t\t\t\twtx.fFromMe = wtxIn.fFromMe;\n+\t\t\t\tfUpdated = true;\n+\t\t\t}\n+\t\t}\n \n-    // Write to disk\n-    if (fInsertedNew || fUpdated)\n-        if (!walletdb.WriteTx(wtx))\n-            return false;\n+\t\t//// debug print\n+\t\tLogPrintf(\"AddToWallet %s  %s%s\\n\", wtxIn.GetHash().ToString(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n \n-    // Break debit/credit balance caches:\n-    wtx.MarkDirty();\n+\t\t// Write to disk\n+\t\tif (fInsertedNew || fUpdated)\n+\t\t\tif (!walletdb.WriteTx(wtx))\n+\t\t\t\treturn false;\n \n-    // Notify UI of new or updated transaction\n-    NotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n+\t\t// Break debit/credit balance caches:\n+\t\twtx.MarkDirty();\n \n-    // notify an external script when a wallet transaction comes in or is updated\n-    std::string strCmd = GetArg(\"-walletnotify\", \"\");\n+\t\t// Notify UI of new or updated transaction\n+\t\tNotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n \n-    if ( !strCmd.empty())\n-    {\n-        boost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n-        boost::thread t(runCommand, strCmd); // thread runs free\n-    }\n+\t\t// notify an external script when a wallet transaction comes in or is updated\n+\t\tstd::string strCmd = GetArg(\"-walletnotify\", \"\");\n \n-    fAnonymizableTallyCached = false;\n-    fAnonymizableTallyCachedNonDenom = false;\n+\t\tif (!strCmd.empty())\n+\t\t{\n+\t\t\tboost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n+\t\t\tboost::thread t(runCommand, strCmd); // thread runs free\n+\t\t}\n \n+\t\tfAnonymizableTallyCached = false;\n+\t\tfAnonymizableTallyCachedNonDenom = false;\n+\t}\n     return true;\n }\n \n@@ -970,51 +986,47 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n     return true;\n }\n \n-/**\n- * Add a transaction to the wallet, or update it.  pIndex and posInBlock should\n- * be set when the transaction was known to be included in a block.  When\n- * posInBlock = SYNC_TRANSACTION_NOT_IN_BLOCK (-1) , then wallet state is not\n- * updated in AddToWallet, but notifications happen and cached balances are\n- * marked dirty.\n- * If fUpdate is true, existing transactions will be updated.\n- * TODO: One exception to this is that the abandoned state is cleared under the\n- * assumption that any further notification of a transaction that was considered\n- * abandoned is an indication that it is not safe to be considered abandoned.\n- * Abandoned state should probably be more carefuly tracked via different\n- * posInBlock signals or by checking mempool presence when necessary.\n- */\n-bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate)\n+//**\n+*Add a transaction to the wallet, or update it.\n+* pblock is optional, but should be provided if the transaction is known to be in a block.\n+* If fUpdate is true, existing transactions will be updated.\n+* /\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n {\n-    {\n-        AssertLockHeld(cs_wallet);\n-\n-        if (posInBlock != -1) {\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n-                std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n-                while (range.first != range.second) {\n-                    if (range.first->second != tx.GetHash()) {\n-                        LogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), pIndex->GetBlockHash().ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n-                        MarkConflicted(pIndex->GetBlockHash(), range.first->second);\n-                    }\n-                    range.first++;\n-                }\n-            }\n-        }\n+\t{\n+\t\tAssertLockHeld(cs_wallet);\n+\n+\t\tif (pblock) {\n+\t\t\tBOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+\t\t\t\tstd::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n+\t\t\t\twhile (range.first != range.second) {\n+\t\t\t\t\tif (range.first->second != tx.GetHash()) {\n+\t\t\t\t\t\tLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), pblock->GetHash().ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n+\t\t\t\t\t\tMarkConflicted(pblock->GetHash(), range.first->second);\n+\t\t\t\t\t}\n+\t\t\t\t\trange.first++;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n \n-        bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n-        if (fExisted && !fUpdate) return false;\n-        if (fExisted || IsMine(tx) || IsFromMe(tx))\n-        {\n-            CWalletTx wtx(this, MakeTransactionRef(tx));\n+\t\tbool fExisted = mapWallet.count(tx.GetHash()) != 0;\n+\t\tif (fExisted && !fUpdate) return false;\n+\t\tif (fExisted || IsMine(tx) || IsFromMe(tx))\n+\t\t{\n+\t\t\tCWalletTx wtx(this, tx);\n \n-            // Get merkle branch if transaction was found in a block\n-            if (posInBlock != -1)\n-                wtx.SetMerkleBranch(pIndex, posInBlock);\n+\t\t\t// Get merkle branch if transaction was found in a block\n+\t\t\tif (pblock)\n+\t\t\t\twtx.SetMerkleBranch(*pblock);\n \n-            return AddToWallet(wtx, false);\n-        }\n-    }\n-    return false;\n+\t\t\t// Do not flush the wallet here for performance reasons\n+\t\t\t// this is safe, as in case of a crash, we rescan the necessary blocks on startup through our SetBestChain-mechanism\n+\t\t\tCWalletDB walletdb(strWalletFile, \"r+\", false);\n+\n+\t\t\treturn AddToWallet(wtx, false, &walletdb);\n+\t\t}\n+\t}\n+\treturn false;\n }\n \n bool CWallet::AbandonTransaction(const uint256& hashTx)\n@@ -3575,52 +3587,57 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n     }\n     return true;\n }\n-\n /**\n- * Call after CreateTransaction unless you want to abort\n- */\n-bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman,  CValidationState& state, const std::string& strCommand)\n+* Call after CreateTransaction unless you want to abort\n+*/\n+bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n {\n-    {\n-        LOCK2(cs_main, cs_wallet);\n-        LogPrintf(\"CommitTransaction:\\n%s\", wtxNew.tx->ToString());\n-        {\n-            // Take key pair from key pool so it won't be used again\n-            reservekey.KeepKey();\n+\t{\n+\t\tLOCK2(cs_main, cs_wallet);\n+\t\tLogPrintf(\"CommitTransaction:\\n%s\", wtxNew.ToString());\n+\t\t{\n+\t\t\t// This is only to keep the database open to defeat the auto-flush for the\n+\t\t\t// duration of this scope.  This is the only place where this optimization\n+\t\t\t// maybe makes sense; please don't do it anywhere else.\n+\t\t\tCWalletDB* pwalletdb = fFileBacked ? new CWalletDB(strWalletFile, \"r+\") : NULL;\n \n-            // Add tx to wallet, because if it has change it's also ours,\n-            // otherwise just for transaction history.\n-            AddToWallet(wtxNew);\n+\t\t\t// Take key pair from key pool so it won't be used again\n+\t\t\treservekey.KeepKey();\n \n-            // Notify that old coins are spent\n-            std::set<uint256> updated_hahes;\n-            BOOST_FOREACH(const CTxIn& txin, wtxNew.tx->vin)\n-            {\n-                // notify only once\n-                if(updated_hahes.find(txin.prevout.hash) != updated_hahes.end()) continue;\n+\t\t\t// Add tx to wallet, because if it has change it's also ours,\n+\t\t\t// otherwise just for transaction history.\n+\t\t\tAddToWallet(wtxNew, false, pwalletdb);\n \n-                CWalletTx &coin = mapWallet[txin.prevout.hash];\n-                coin.BindWallet(this);\n-                NotifyTransactionChanged(this, txin.prevout.hash, CT_UPDATED);\n-                updated_hahes.insert(txin.prevout.hash);\n-            }\n-        }\n+\t\t\t// Notify that old coins are spent\n+\t\t\tset<CWalletTx*> setCoins;\n+\t\t\tBOOST_FOREACH(const CTxIn& txin, wtxNew.vin)\n+\t\t\t{\n+\t\t\t\tCWalletTx &coin = mapWallet[txin.prevout.hash];\n+\t\t\t\tcoin.BindWallet(this);\n+\t\t\t\tNotifyTransactionChanged(this, coin.GetHash(), CT_UPDATED);\n+\t\t\t}\n \n-        // Track how many getdata requests our transaction gets\n-        mapRequestCount[wtxNew.GetHash()] = 0;\n+\t\t\tif (fFileBacked)\n+\t\t\t\tdelete pwalletdb;\n+\t\t}\n \n-        if (fBroadcastTransactions)\n-        {\n-            // Broadcast\n-            if (!wtxNew.AcceptToMemoryPool(maxTxFee, state)) {\n-                LogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", state.GetRejectReason());\n-                // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n-            } else {\n-                wtxNew.RelayWalletTransaction(connman, strCommand);\n-            }\n-        }\n-    }\n-    return true;\n+\t\t// Track how many getdata requests our transaction gets\n+\t\tmapRequestCount[wtxNew.GetHash()] = 0;\n+\n+\t\tif (fBroadcastTransactions)\n+\t\t{\n+\t\t\tCValidationState state;\n+\t\t\t// Broadcast\n+\t\t\tif (!wtxNew.AcceptToMemoryPool(false, maxTxFee, state)) {\n+\t\t\t\tLogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", state.GetRejectReason());\n+\t\t\t\t// TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\twtxNew.RelayWalletTransaction();\n+\t\t\t}\n+\t\t}\n+\t}\n+\treturn true;\n }\n \n void CWallet::ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries) {"
      },
      {
        "sha": "0f768aebcc9af68f7eb6b712e64b6a63e25e53dc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/614ac7f4b6014195285abba3149aa19b3450967e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/614ac7f4b6014195285abba3149aa19b3450967e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=614ac7f4b6014195285abba3149aa19b3450967e",
        "patch": "@@ -785,7 +785,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bForceNew = false);\n \n     void MarkDirty();\n-    bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n+    bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock) override;\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);"
      },
      {
        "sha": "a0e5e87e0d33b5475a56d898db973f0b58398915",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/614ac7f4b6014195285abba3149aa19b3450967e/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/614ac7f4b6014195285abba3149aa19b3450967e/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=614ac7f4b6014195285abba3149aa19b3450967e",
        "patch": "@@ -406,7 +406,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \t\t\tif (wtx.nOrderPos == -1)\n \t\t\t\twss.fAnyUnordered = true;\n \n-\t\t\tpwallet->AddToWallet(wtx, true);\n+\t\t\tpwallet->AddToWallet(wtx, true, NULL);\n \t\t}\n \t\telse if (strType == \"acentry\")\n \t\t{"
      }
    ]
  },
  {
    "sha": "7dc98a77fd0fa665974c6f982561d5aff25a95ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZGM5OGE3N2ZkMGZhNjY1OTc0YzZmOTgyNTYxZDVhZmYyNWE5NWNh",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:31:44Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:31:44Z"
      },
      "message": "compile",
      "tree": {
        "sha": "14b1ac0bbd74245f3c32cc5c357eaa7351e9d0de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14b1ac0bbd74245f3c32cc5c357eaa7351e9d0de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7dc98a77fd0fa665974c6f982561d5aff25a95ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dc98a77fd0fa665974c6f982561d5aff25a95ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7dc98a77fd0fa665974c6f982561d5aff25a95ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dc98a77fd0fa665974c6f982561d5aff25a95ca/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "614ac7f4b6014195285abba3149aa19b3450967e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614ac7f4b6014195285abba3149aa19b3450967e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/614ac7f4b6014195285abba3149aa19b3450967e"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 2,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f60f6787f985915ed9a655273d38338553470845",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7dc98a77fd0fa665974c6f982561d5aff25a95ca/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7dc98a77fd0fa665974c6f982561d5aff25a95ca/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7dc98a77fd0fa665974c6f982561d5aff25a95ca",
        "patch": "@@ -833,7 +833,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n \t\twtx.BindWallet(this);\n \t\twtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n \t\tAddToSpends(hash);\n-\t\tBOOST_FOREACH(const CTxIn& txin, wtx.vin) {\n+\t\tBOOST_FOREACH(const CTxIn& txin, wtx.tx->vin) {\n \t\t\tif (mapWallet.count(txin.prevout.hash)) {\n \t\t\t\tCWalletTx& prevtx = mapWallet[txin.prevout.hash];\n \t\t\t\tif (prevtx.nIndex == -1 && !prevtx.hashUnset()) {\n@@ -986,11 +986,7 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n     return true;\n }\n \n-//**\n-*Add a transaction to the wallet, or update it.\n-* pblock is optional, but should be provided if the transaction is known to be in a block.\n-* If fUpdate is true, existing transactions will be updated.\n-* /\n+\n bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n {\n \t{"
      }
    ]
  },
  {
    "sha": "323857750f0af75a122e47fc3186dfc4e7c43b0f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjM4NTc3NTBmMGFmNzVhMTIyZTQ3ZmMzMTg2ZGZjNGU3YzQzYjBm",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:33:15Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:33:15Z"
      },
      "message": "compile",
      "tree": {
        "sha": "70b30f579ee52d15d6436dda31d5fe430d8885a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70b30f579ee52d15d6436dda31d5fe430d8885a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/323857750f0af75a122e47fc3186dfc4e7c43b0f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/323857750f0af75a122e47fc3186dfc4e7c43b0f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/323857750f0af75a122e47fc3186dfc4e7c43b0f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/323857750f0af75a122e47fc3186dfc4e7c43b0f/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7dc98a77fd0fa665974c6f982561d5aff25a95ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dc98a77fd0fa665974c6f982561d5aff25a95ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7dc98a77fd0fa665974c6f982561d5aff25a95ca"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "19381aafb4cd4de8e82f4621ba2ae71c2b00debf",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/323857750f0af75a122e47fc3186dfc4e7c43b0f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/323857750f0af75a122e47fc3186dfc4e7c43b0f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=323857750f0af75a122e47fc3186dfc4e7c43b0f",
        "patch": "@@ -941,7 +941,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n \n \t\t// Write to disk\n \t\tif (fInsertedNew || fUpdated)\n-\t\t\tif (!walletdb.WriteTx(wtx))\n+\t\t\tif (!pwalletdb->WriteTx(wtx))\n \t\t\t\treturn false;\n \n \t\t// Break debit/credit balance caches:"
      }
    ]
  },
  {
    "sha": "3f4cc78583d6fd27bdcfe11148ea98fe5abeb4d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjRjYzc4NTgzZDZmZDI3YmRjZmUxMTE0OGVhOThmZTVhYmViNGQx",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:35:00Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:35:00Z"
      },
      "message": "compile",
      "tree": {
        "sha": "69e756b84565ab414e04902af2c6527246bbac97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/69e756b84565ab414e04902af2c6527246bbac97"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f4cc78583d6fd27bdcfe11148ea98fe5abeb4d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f4cc78583d6fd27bdcfe11148ea98fe5abeb4d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f4cc78583d6fd27bdcfe11148ea98fe5abeb4d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f4cc78583d6fd27bdcfe11148ea98fe5abeb4d1/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "323857750f0af75a122e47fc3186dfc4e7c43b0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/323857750f0af75a122e47fc3186dfc4e7c43b0f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/323857750f0af75a122e47fc3186dfc4e7c43b0f"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 35,
      "deletions": 30
    },
    "files": [
      {
        "sha": "d291ebd093a4d74e4bb09019db5724b8a9c73b76",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 29,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f4cc78583d6fd27bdcfe11148ea98fe5abeb4d1/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f4cc78583d6fd27bdcfe11148ea98fe5abeb4d1/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=3f4cc78583d6fd27bdcfe11148ea98fe5abeb4d1",
        "patch": "@@ -1,35 +1,40 @@\n-// Copyright (c) 2012-2017 The Bitcoin Core developers\n+// Copyright (c) 2012-2015 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <wallet/wallet.h>\n+#include \"wallet/wallet.h\"\n+#include \"wallet/walletdb.h\"\n \n-#include <wallet/test/wallet_test_fixture.h>\n+#include \"test/test_syscoin.h\"\n \n #include <stdint.h>\n \n+#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-BOOST_FIXTURE_TEST_SUITE(accounting_tests, WalletTestingSetup)\n+extern CWallet* pwalletMain;\n+\n+BOOST_FIXTURE_TEST_SUITE(accounting_tests, TestingSetup)\n \n static void\n-GetResults(CWallet& wallet, std::map<CAmount, CAccountingEntry>& results)\n+GetResults(CWalletDB& walletdb, std::map<CAmount, CAccountingEntry>& results)\n {\n \tstd::list<CAccountingEntry> aes;\n \n \tresults.clear();\n-\tBOOST_CHECK(wallet.ReorderTransactions() == DB_LOAD_OK);\n-\twallet.ListAccountCreditDebit(\"\", aes);\n-\tfor (CAccountingEntry& ae : aes)\n+\tBOOST_CHECK(walletdb.ReorderTransactions(pwalletMain) == DB_LOAD_OK);\n+\twalletdb.ListAccountCreditDebit(\"\", aes);\n+\tBOOST_FOREACH(CAccountingEntry& ae, aes)\n \t{\n \t\tresults[ae.nOrderPos] = ae;\n \t}\n }\n \n BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n {\n+\tCWalletDB walletdb(pwalletMain->strWalletFile);\n \tstd::vector<CWalletTx*> vpwtx;\n-\tCWalletTx wtx(nullptr /* pwallet */, MakeTransactionRef());\n+\tCWalletTx wtx;\n \tCAccountingEntry ae;\n \tstd::map<CAmount, CAccountingEntry> results;\n \n@@ -40,19 +45,19 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \tae.nTime = 1333333333;\n \tae.strOtherAccount = \"b\";\n \tae.strComment = \"\";\n-\tpwalletMain->AddAccountingEntry(ae);\n+\tpwalletMain->AddAccountingEntry(ae, walletdb);\n \n \twtx.mapValue[\"comment\"] = \"z\";\n-\tpwalletMain->AddToWallet(wtx);\n-\tvpwtx.push_back(&pwalletMain->mapWallet.at(wtx.GetHash()));\n+\tpwalletMain->AddToWallet(wtx, false, &walletdb);\n+\tvpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n \tvpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n \tvpwtx[0]->nOrderPos = -1;\n \n \tae.nTime = 1333333336;\n \tae.strOtherAccount = \"c\";\n-\tpwalletMain->AddAccountingEntry(ae);\n+\tpwalletMain->AddAccountingEntry(ae, walletdb);\n \n-\tGetResults(*pwalletMain, results);\n+\tGetResults(walletdb, results);\n \n \tBOOST_CHECK(pwalletMain->nOrderPosNext == 3);\n \tBOOST_CHECK(2 == results.size());\n@@ -66,9 +71,9 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \tae.nTime = 1333333330;\n \tae.strOtherAccount = \"d\";\n \tae.nOrderPos = pwalletMain->IncOrderPosNext();\n-\tpwalletMain->AddAccountingEntry(ae);\n+\tpwalletMain->AddAccountingEntry(ae, walletdb);\n \n-\tGetResults(*pwalletMain, results);\n+\tGetResults(walletdb, results);\n \n \tBOOST_CHECK(results.size() == 3);\n \tBOOST_CHECK(pwalletMain->nOrderPosNext == 4);\n@@ -81,26 +86,26 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \n \twtx.mapValue[\"comment\"] = \"y\";\n \t{\n-\t\tCMutableTransaction tx(*wtx.tx);\n-\t\t++tx.nLockTime;  // Just to change the hash :)\n-\t\twtx.SetTx(MakeTransactionRef(std::move(tx)));\n+\t\tCMutableTransaction tx(wtx);\n+\t\t--tx.nLockTime;  // Just to change the hash :)\n+\t\t*static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n \t}\n-\tpwalletMain->AddToWallet(wtx);\n-\tvpwtx.push_back(&pwalletMain->mapWallet.at(wtx.GetHash()));\n+\tpwalletMain->AddToWallet(wtx, false, &walletdb);\n+\tvpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n \tvpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n \n \twtx.mapValue[\"comment\"] = \"x\";\n \t{\n-\t\tCMutableTransaction tx(*wtx.tx);\n-\t\t++tx.nLockTime;  // Just to change the hash :)\n-\t\twtx.SetTx(MakeTransactionRef(std::move(tx)));\n+\t\tCMutableTransaction tx(wtx);\n+\t\t--tx.nLockTime;  // Just to change the hash :)\n+\t\t*static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n \t}\n-\tpwalletMain->AddToWallet(wtx);\n-\tvpwtx.push_back(&pwalletMain->mapWallet.at(wtx.GetHash()));\n+\tpwalletMain->AddToWallet(wtx, false, &walletdb);\n+\tvpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n \tvpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n \tvpwtx[2]->nOrderPos = -1;\n \n-\tGetResults(*pwalletMain, results);\n+\tGetResults(walletdb, results);\n \n \tBOOST_CHECK(results.size() == 3);\n \tBOOST_CHECK(pwalletMain->nOrderPosNext == 6);\n@@ -116,9 +121,9 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \tae.nTime = 1333333334;\n \tae.strOtherAccount = \"e\";\n \tae.nOrderPos = -1;\n-\tpwalletMain->AddAccountingEntry(ae);\n+\tpwalletMain->AddAccountingEntry(ae, walletdb);\n \n-\tGetResults(*pwalletMain, results);\n+\tGetResults(walletdb, results);\n \n \tBOOST_CHECK(results.size() == 4);\n \tBOOST_CHECK(pwalletMain->nOrderPosNext == 7);"
      },
      {
        "sha": "92cc8e702eeeb036176788a3a89742613f868d69",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f4cc78583d6fd27bdcfe11148ea98fe5abeb4d1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f4cc78583d6fd27bdcfe11148ea98fe5abeb4d1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3f4cc78583d6fd27bdcfe11148ea98fe5abeb4d1",
        "patch": "@@ -788,7 +788,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock) override;\n-    bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n+\tbool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n     CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;"
      }
    ]
  },
  {
    "sha": "f389ddcebae0cac6ac52b8f501113e10c2182fd9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzg5ZGRjZWJhZTBjYWM2YWM1MmI4ZjUwMTExM2UxMGMyMTgyZmQ5",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:35:39Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:35:39Z"
      },
      "message": "compile",
      "tree": {
        "sha": "456c6be6679fc078c8d9dc16f3085e34b71b5db5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/456c6be6679fc078c8d9dc16f3085e34b71b5db5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f389ddcebae0cac6ac52b8f501113e10c2182fd9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f389ddcebae0cac6ac52b8f501113e10c2182fd9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f389ddcebae0cac6ac52b8f501113e10c2182fd9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f389ddcebae0cac6ac52b8f501113e10c2182fd9/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f4cc78583d6fd27bdcfe11148ea98fe5abeb4d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f4cc78583d6fd27bdcfe11148ea98fe5abeb4d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f4cc78583d6fd27bdcfe11148ea98fe5abeb4d1"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1f2ba0d7b9d35ad636a7c29f6c711a578f6b8017",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f389ddcebae0cac6ac52b8f501113e10c2182fd9/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f389ddcebae0cac6ac52b8f501113e10c2182fd9/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f389ddcebae0cac6ac52b8f501113e10c2182fd9",
        "patch": "@@ -788,7 +788,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock) override;\n-\tbool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n+\tbool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n     CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;"
      }
    ]
  },
  {
    "sha": "31d793fe22e3c2c79ab3587001cfeda7656ee647",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWQ3OTNmZTIyZTNjMmM3OWFiMzU4NzAwMWNmZWRhNzY1NmVlNjQ3",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:39:59Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:39:59Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit f389ddcebae0cac6ac52b8f501113e10c2182fd9.",
      "tree": {
        "sha": "69e756b84565ab414e04902af2c6527246bbac97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/69e756b84565ab414e04902af2c6527246bbac97"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31d793fe22e3c2c79ab3587001cfeda7656ee647",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d793fe22e3c2c79ab3587001cfeda7656ee647",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31d793fe22e3c2c79ab3587001cfeda7656ee647",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d793fe22e3c2c79ab3587001cfeda7656ee647/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f389ddcebae0cac6ac52b8f501113e10c2182fd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f389ddcebae0cac6ac52b8f501113e10c2182fd9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f389ddcebae0cac6ac52b8f501113e10c2182fd9"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "92cc8e702eeeb036176788a3a89742613f868d69",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31d793fe22e3c2c79ab3587001cfeda7656ee647/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31d793fe22e3c2c79ab3587001cfeda7656ee647/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=31d793fe22e3c2c79ab3587001cfeda7656ee647",
        "patch": "@@ -788,7 +788,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock) override;\n-\tbool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n+\tbool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n     CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;"
      }
    ]
  },
  {
    "sha": "f27007c865f95c3c65f7b8e137a59cd9d20a184b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjcwMDdjODY1Zjk1YzNjNjVmN2I4ZTEzN2E1OWNkOWQyMGExODRi",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:01Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:01Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit 3f4cc78583d6fd27bdcfe11148ea98fe5abeb4d1.",
      "tree": {
        "sha": "70b30f579ee52d15d6436dda31d5fe430d8885a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70b30f579ee52d15d6436dda31d5fe430d8885a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f27007c865f95c3c65f7b8e137a59cd9d20a184b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f27007c865f95c3c65f7b8e137a59cd9d20a184b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f27007c865f95c3c65f7b8e137a59cd9d20a184b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f27007c865f95c3c65f7b8e137a59cd9d20a184b/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31d793fe22e3c2c79ab3587001cfeda7656ee647",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d793fe22e3c2c79ab3587001cfeda7656ee647",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31d793fe22e3c2c79ab3587001cfeda7656ee647"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 30,
      "deletions": 35
    },
    "files": [
      {
        "sha": "42c3ab553f73da07b2f5e8218db6f27fdbac98d2",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 34,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f27007c865f95c3c65f7b8e137a59cd9d20a184b/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f27007c865f95c3c65f7b8e137a59cd9d20a184b/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=f27007c865f95c3c65f7b8e137a59cd9d20a184b",
        "patch": "@@ -1,40 +1,35 @@\n-// Copyright (c) 2012-2015 The Syscoin Core developers\n+// Copyright (c) 2012-2017 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"wallet/wallet.h\"\n-#include \"wallet/walletdb.h\"\n+#include <wallet/wallet.h>\n \n-#include \"test/test_syscoin.h\"\n+#include <wallet/test/wallet_test_fixture.h>\n \n #include <stdint.h>\n \n-#include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-extern CWallet* pwalletMain;\n-\n-BOOST_FIXTURE_TEST_SUITE(accounting_tests, TestingSetup)\n+BOOST_FIXTURE_TEST_SUITE(accounting_tests, WalletTestingSetup)\n \n static void\n-GetResults(CWalletDB& walletdb, std::map<CAmount, CAccountingEntry>& results)\n+GetResults(CWallet& wallet, std::map<CAmount, CAccountingEntry>& results)\n {\n \tstd::list<CAccountingEntry> aes;\n \n \tresults.clear();\n-\tBOOST_CHECK(walletdb.ReorderTransactions(pwalletMain) == DB_LOAD_OK);\n-\twalletdb.ListAccountCreditDebit(\"\", aes);\n-\tBOOST_FOREACH(CAccountingEntry& ae, aes)\n+\tBOOST_CHECK(wallet.ReorderTransactions() == DB_LOAD_OK);\n+\twallet.ListAccountCreditDebit(\"\", aes);\n+\tfor (CAccountingEntry& ae : aes)\n \t{\n \t\tresults[ae.nOrderPos] = ae;\n \t}\n }\n \n BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n {\n-\tCWalletDB walletdb(pwalletMain->strWalletFile);\n \tstd::vector<CWalletTx*> vpwtx;\n-\tCWalletTx wtx;\n+\tCWalletTx wtx(nullptr /* pwallet */, MakeTransactionRef());\n \tCAccountingEntry ae;\n \tstd::map<CAmount, CAccountingEntry> results;\n \n@@ -45,19 +40,19 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \tae.nTime = 1333333333;\n \tae.strOtherAccount = \"b\";\n \tae.strComment = \"\";\n-\tpwalletMain->AddAccountingEntry(ae, walletdb);\n+\tpwalletMain->AddAccountingEntry(ae);\n \n \twtx.mapValue[\"comment\"] = \"z\";\n-\tpwalletMain->AddToWallet(wtx, false, &walletdb);\n-\tvpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+\tpwalletMain->AddToWallet(wtx);\n+\tvpwtx.push_back(&pwalletMain->mapWallet.at(wtx.GetHash()));\n \tvpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n \tvpwtx[0]->nOrderPos = -1;\n \n \tae.nTime = 1333333336;\n \tae.strOtherAccount = \"c\";\n-\tpwalletMain->AddAccountingEntry(ae, walletdb);\n+\tpwalletMain->AddAccountingEntry(ae);\n \n-\tGetResults(walletdb, results);\n+\tGetResults(*pwalletMain, results);\n \n \tBOOST_CHECK(pwalletMain->nOrderPosNext == 3);\n \tBOOST_CHECK(2 == results.size());\n@@ -71,9 +66,9 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \tae.nTime = 1333333330;\n \tae.strOtherAccount = \"d\";\n \tae.nOrderPos = pwalletMain->IncOrderPosNext();\n-\tpwalletMain->AddAccountingEntry(ae, walletdb);\n+\tpwalletMain->AddAccountingEntry(ae);\n \n-\tGetResults(walletdb, results);\n+\tGetResults(*pwalletMain, results);\n \n \tBOOST_CHECK(results.size() == 3);\n \tBOOST_CHECK(pwalletMain->nOrderPosNext == 4);\n@@ -86,26 +81,26 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \n \twtx.mapValue[\"comment\"] = \"y\";\n \t{\n-\t\tCMutableTransaction tx(wtx);\n-\t\t--tx.nLockTime;  // Just to change the hash :)\n-\t\t*static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n+\t\tCMutableTransaction tx(*wtx.tx);\n+\t\t++tx.nLockTime;  // Just to change the hash :)\n+\t\twtx.SetTx(MakeTransactionRef(std::move(tx)));\n \t}\n-\tpwalletMain->AddToWallet(wtx, false, &walletdb);\n-\tvpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+\tpwalletMain->AddToWallet(wtx);\n+\tvpwtx.push_back(&pwalletMain->mapWallet.at(wtx.GetHash()));\n \tvpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n \n \twtx.mapValue[\"comment\"] = \"x\";\n \t{\n-\t\tCMutableTransaction tx(wtx);\n-\t\t--tx.nLockTime;  // Just to change the hash :)\n-\t\t*static_cast<CTransaction*>(&wtx) = CTransaction(tx);\n+\t\tCMutableTransaction tx(*wtx.tx);\n+\t\t++tx.nLockTime;  // Just to change the hash :)\n+\t\twtx.SetTx(MakeTransactionRef(std::move(tx)));\n \t}\n-\tpwalletMain->AddToWallet(wtx, false, &walletdb);\n-\tvpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+\tpwalletMain->AddToWallet(wtx);\n+\tvpwtx.push_back(&pwalletMain->mapWallet.at(wtx.GetHash()));\n \tvpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n \tvpwtx[2]->nOrderPos = -1;\n \n-\tGetResults(walletdb, results);\n+\tGetResults(*pwalletMain, results);\n \n \tBOOST_CHECK(results.size() == 3);\n \tBOOST_CHECK(pwalletMain->nOrderPosNext == 6);\n@@ -121,9 +116,9 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \tae.nTime = 1333333334;\n \tae.strOtherAccount = \"e\";\n \tae.nOrderPos = -1;\n-\tpwalletMain->AddAccountingEntry(ae, walletdb);\n+\tpwalletMain->AddAccountingEntry(ae);\n \n-\tGetResults(walletdb, results);\n+\tGetResults(*pwalletMain, results);\n \n \tBOOST_CHECK(results.size() == 4);\n \tBOOST_CHECK(pwalletMain->nOrderPosNext == 7);"
      },
      {
        "sha": "0f768aebcc9af68f7eb6b712e64b6a63e25e53dc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f27007c865f95c3c65f7b8e137a59cd9d20a184b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f27007c865f95c3c65f7b8e137a59cd9d20a184b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f27007c865f95c3c65f7b8e137a59cd9d20a184b",
        "patch": "@@ -788,7 +788,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock) override;\n-\tbool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n+    bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;"
      }
    ]
  },
  {
    "sha": "f2cb0add7b78f549f7c74b222b1bf1e2d039c185",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmNiMGFkZDdiNzhmNTQ5ZjdjNzRiMjIyYjFiZjFlMmQwMzljMTg1",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:03Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:03Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit 323857750f0af75a122e47fc3186dfc4e7c43b0f.",
      "tree": {
        "sha": "14b1ac0bbd74245f3c32cc5c357eaa7351e9d0de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14b1ac0bbd74245f3c32cc5c357eaa7351e9d0de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2cb0add7b78f549f7c74b222b1bf1e2d039c185",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2cb0add7b78f549f7c74b222b1bf1e2d039c185",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2cb0add7b78f549f7c74b222b1bf1e2d039c185",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2cb0add7b78f549f7c74b222b1bf1e2d039c185/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f27007c865f95c3c65f7b8e137a59cd9d20a184b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f27007c865f95c3c65f7b8e137a59cd9d20a184b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f27007c865f95c3c65f7b8e137a59cd9d20a184b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f60f6787f985915ed9a655273d38338553470845",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2cb0add7b78f549f7c74b222b1bf1e2d039c185/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2cb0add7b78f549f7c74b222b1bf1e2d039c185/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f2cb0add7b78f549f7c74b222b1bf1e2d039c185",
        "patch": "@@ -941,7 +941,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n \n \t\t// Write to disk\n \t\tif (fInsertedNew || fUpdated)\n-\t\t\tif (!pwalletdb->WriteTx(wtx))\n+\t\t\tif (!walletdb.WriteTx(wtx))\n \t\t\t\treturn false;\n \n \t\t// Break debit/credit balance caches:"
      }
    ]
  },
  {
    "sha": "72cbd48f0c84059dcf46aa0364dd21e3f5c52add",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmNiZDQ4ZjBjODQwNTlkY2Y0NmFhMDM2NGRkMjFlM2Y1YzUyYWRk",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:04Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:04Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit 7dc98a77fd0fa665974c6f982561d5aff25a95ca.",
      "tree": {
        "sha": "8a44a6c6234954cfb31697e6b8b55d76c4c743aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a44a6c6234954cfb31697e6b8b55d76c4c743aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72cbd48f0c84059dcf46aa0364dd21e3f5c52add",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72cbd48f0c84059dcf46aa0364dd21e3f5c52add",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72cbd48f0c84059dcf46aa0364dd21e3f5c52add",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72cbd48f0c84059dcf46aa0364dd21e3f5c52add/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2cb0add7b78f549f7c74b222b1bf1e2d039c185",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2cb0add7b78f549f7c74b222b1bf1e2d039c185",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2cb0add7b78f549f7c74b222b1bf1e2d039c185"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f70713774260473f05ce2f8a3d667bf8ea69885d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72cbd48f0c84059dcf46aa0364dd21e3f5c52add/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72cbd48f0c84059dcf46aa0364dd21e3f5c52add/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=72cbd48f0c84059dcf46aa0364dd21e3f5c52add",
        "patch": "@@ -833,7 +833,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n \t\twtx.BindWallet(this);\n \t\twtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n \t\tAddToSpends(hash);\n-\t\tBOOST_FOREACH(const CTxIn& txin, wtx.tx->vin) {\n+\t\tBOOST_FOREACH(const CTxIn& txin, wtx.vin) {\n \t\t\tif (mapWallet.count(txin.prevout.hash)) {\n \t\t\t\tCWalletTx& prevtx = mapWallet[txin.prevout.hash];\n \t\t\t\tif (prevtx.nIndex == -1 && !prevtx.hashUnset()) {\n@@ -986,7 +986,11 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n     return true;\n }\n \n-\n+//**\n+*Add a transaction to the wallet, or update it.\n+* pblock is optional, but should be provided if the transaction is known to be in a block.\n+* If fUpdate is true, existing transactions will be updated.\n+* /\n bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n {\n \t{"
      }
    ]
  },
  {
    "sha": "a48fb8bc110d08483923ae846e1724b39fc4d20d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDhmYjhiYzExMGQwODQ4MzkyM2FlODQ2ZTE3MjRiMzlmYzRkMjBk",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:06Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:06Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit 614ac7f4b6014195285abba3149aa19b3450967e.",
      "tree": {
        "sha": "200cbc2a40a144f20f3db478fcb01ea1c3ae61f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/200cbc2a40a144f20f3db478fcb01ea1c3ae61f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a48fb8bc110d08483923ae846e1724b39fc4d20d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a48fb8bc110d08483923ae846e1724b39fc4d20d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a48fb8bc110d08483923ae846e1724b39fc4d20d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a48fb8bc110d08483923ae846e1724b39fc4d20d/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72cbd48f0c84059dcf46aa0364dd21e3f5c52add",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72cbd48f0c84059dcf46aa0364dd21e3f5c52add",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72cbd48f0c84059dcf46aa0364dd21e3f5c52add"
      }
    ],
    "stats": {
      "total": 406,
      "additions": 194,
      "deletions": 212
    },
    "files": [
      {
        "sha": "1bd2847c2a49aea544827b590630d001c2584459",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a48fb8bc110d08483923ae846e1724b39fc4d20d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a48fb8bc110d08483923ae846e1724b39fc4d20d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a48fb8bc110d08483923ae846e1724b39fc4d20d",
        "patch": "@@ -306,8 +306,7 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     if (pwalletMain->IsMine(*wtx.tx)) {\n-\t\tCWalletDB walletdb(pwalletMain->strWalletFile, \"r+\", false);\n-        pwalletMain->AddToWallet(wtx, false, &walletdb);\n+        pwalletMain->AddToWallet(wtx, false);\n         return NullUniValue;\n     }\n "
      },
      {
        "sha": "a17916a80cab3ee68ea1c6f741c2bd92bb944e05",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 191,
        "deletions": 208,
        "changes": 399,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a48fb8bc110d08483923ae846e1724b39fc4d20d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a48fb8bc110d08483923ae846e1724b39fc4d20d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a48fb8bc110d08483923ae846e1724b39fc4d20d",
        "patch": "@@ -822,146 +822,130 @@ void CWallet::MarkDirty()\n     fAnonymizableTallyCachedNonDenom = false;\n }\n \n-bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb)\n+bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n {\n-\tuint256 hash = wtxIn.GetHash();\n+    LOCK(cs_wallet);\n \n-\tif (fFromLoadWallet)\n-\t{\n-\t\tmapWallet[hash] = wtxIn;\n-\t\tCWalletTx& wtx = mapWallet[hash];\n-\t\twtx.BindWallet(this);\n-\t\twtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n-\t\tAddToSpends(hash);\n-\t\tBOOST_FOREACH(const CTxIn& txin, wtx.vin) {\n-\t\t\tif (mapWallet.count(txin.prevout.hash)) {\n-\t\t\t\tCWalletTx& prevtx = mapWallet[txin.prevout.hash];\n-\t\t\t\tif (prevtx.nIndex == -1 && !prevtx.hashUnset()) {\n-\t\t\t\t\tMarkConflicted(prevtx.hashBlock, wtx.GetHash());\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\telse\n-\t{\n+    CWalletDB walletdb(strWalletFile, \"r+\", fFlushOnClose);\n \n-\t\tLOCK(cs_wallet);\n-\t\t// Inserts only if not already there, returns tx inserted or tx found\n-\t\tpair<map<uint256, CWalletTx>::iterator, bool> ret = mapWallet.insert(make_pair(hash, wtxIn));\n-\t\tCWalletTx& wtx = (*ret.first).second;\n-\t\twtx.BindWallet(this);\n-\t\tbool fInsertedNew = ret.second;\n-\t\tif (fInsertedNew)\n-\t\t{\n-\t\t\twtx.nTimeReceived = GetAdjustedTime();\n-\t\t\twtx.nOrderPos = IncOrderPosNext(pwalletdb);\n-\t\t\twtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n+    uint256 hash = wtxIn.GetHash();\n \n-\t\t\twtx.nTimeSmart = wtx.nTimeReceived;\n-\t\t\tif (!wtxIn.hashUnset())\n-\t\t\t{\n-\t\t\t\tif (mapBlockIndex.count(wtxIn.hashBlock))\n-\t\t\t\t{\n-\t\t\t\t\tint64_t latestNow = wtx.nTimeReceived;\n-\t\t\t\t\tint64_t latestEntry = 0;\n-\t\t\t\t\t{\n-\t\t\t\t\t\t// Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n-\t\t\t\t\t\tint64_t latestTolerated = latestNow + 300;\n-\t\t\t\t\t\tconst TxItems & txOrdered = wtxOrdered;\n-\t\t\t\t\t\tfor (TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tCWalletTx *const pwtx = (*it).second.first;\n-\t\t\t\t\t\t\tif (pwtx == &wtx)\n-\t\t\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t\t\tCAccountingEntry *const pacentry = (*it).second.second;\n-\t\t\t\t\t\t\tint64_t nSmartTime;\n-\t\t\t\t\t\t\tif (pwtx)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tnSmartTime = pwtx->nTimeSmart;\n-\t\t\t\t\t\t\t\tif (!nSmartTime)\n-\t\t\t\t\t\t\t\t\tnSmartTime = pwtx->nTimeReceived;\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t\tnSmartTime = pacentry->nTime;\n-\t\t\t\t\t\t\tif (nSmartTime <= latestTolerated)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tlatestEntry = nSmartTime;\n-\t\t\t\t\t\t\t\tif (nSmartTime > latestNow)\n-\t\t\t\t\t\t\t\t\tlatestNow = nSmartTime;\n-\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n+    // Inserts only if not already there, returns tx inserted or tx found\n+    std::pair<std::map<uint256, CWalletTx>::iterator, bool> ret = mapWallet.insert(std::make_pair(hash, wtxIn));\n+    CWalletTx& wtx = (*ret.first).second;\n+    wtx.BindWallet(this);\n+    bool fInsertedNew = ret.second;\n+    if (fInsertedNew)\n+    {\n+        wtx.nTimeReceived = GetAdjustedTime();\n+        wtx.nOrderPos = IncOrderPosNext(&walletdb);\n+        wtxOrdered.insert(std::make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));\n \n-\t\t\t\t\tint64_t blocktime = mapBlockIndex[wtxIn.hashBlock]->GetBlockTime();\n-\t\t\t\t\twtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tLogPrintf(\"AddToWallet(): found %s in block %s not in index\\n\",\n-\t\t\t\t\t\twtxIn.GetHash().ToString(),\n-\t\t\t\t\t\twtxIn.hashBlock.ToString());\n-\t\t\t}\n-\t\t\tAddToSpends(hash);\n-\t\t\tfor (unsigned int i = 0; i < wtx.tx->vout.size(); ++i) {\n-\t\t\t\tif (IsMine(wtx.tx->vout[i]) && !IsSpent(hash, i)) {\n-\t\t\t\t\tsetWalletUTXO.insert(COutPoint(hash, i));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+        wtx.nTimeSmart = wtx.nTimeReceived;\n+        if (!wtxIn.hashUnset())\n+        {\n+            if (mapBlockIndex.count(wtxIn.hashBlock))\n+            {\n+                int64_t latestNow = wtx.nTimeReceived;\n+                int64_t latestEntry = 0;\n+                {\n+                    // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n+                    int64_t latestTolerated = latestNow + 300;\n+                    const TxItems & txOrdered = wtxOrdered;\n+                    for (TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+                    {\n+                        CWalletTx *const pwtx = (*it).second.first;\n+                        if (pwtx == &wtx)\n+                            continue;\n+                        CAccountingEntry *const pacentry = (*it).second.second;\n+                        int64_t nSmartTime;\n+                        if (pwtx)\n+                        {\n+                            nSmartTime = pwtx->nTimeSmart;\n+                            if (!nSmartTime)\n+                                nSmartTime = pwtx->nTimeReceived;\n+                        }\n+                        else\n+                            nSmartTime = pacentry->nTime;\n+                        if (nSmartTime <= latestTolerated)\n+                        {\n+                            latestEntry = nSmartTime;\n+                            if (nSmartTime > latestNow)\n+                                latestNow = nSmartTime;\n+                            break;\n+                        }\n+                    }\n+                }\n \n-\t\tbool fUpdated = false;\n-\t\tif (!fInsertedNew)\n-\t\t{\n-\t\t\t// Merge\n-\t\t\tif (!wtxIn.hashUnset() && wtxIn.hashBlock != wtx.hashBlock)\n-\t\t\t{\n-\t\t\t\twtx.hashBlock = wtxIn.hashBlock;\n-\t\t\t\tfUpdated = true;\n-\t\t\t}\n-\t\t\t// If no longer abandoned, update\n-\t\t\tif (wtxIn.hashBlock.IsNull() && wtx.isAbandoned())\n-\t\t\t{\n-\t\t\t\twtx.hashBlock = wtxIn.hashBlock;\n-\t\t\t\tfUpdated = true;\n-\t\t\t}\n-\t\t\tif (wtxIn.nIndex != -1 && (wtxIn.nIndex != wtx.nIndex))\n-\t\t\t{\n-\t\t\t\twtx.nIndex = wtxIn.nIndex;\n-\t\t\t\tfUpdated = true;\n-\t\t\t}\n-\t\t\tif (wtxIn.fFromMe && wtxIn.fFromMe != wtx.fFromMe)\n-\t\t\t{\n-\t\t\t\twtx.fFromMe = wtxIn.fFromMe;\n-\t\t\t\tfUpdated = true;\n-\t\t\t}\n-\t\t}\n+                int64_t blocktime = mapBlockIndex[wtxIn.hashBlock]->GetBlockTime();\n+                wtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n+            }\n+            else\n+                LogPrintf(\"AddToWallet(): found %s in block %s not in index\\n\",\n+                         wtxIn.GetHash().ToString(),\n+                         wtxIn.hashBlock.ToString());\n+        }\n+        AddToSpends(hash);\n+        for(unsigned int i = 0; i < wtx.tx->vout.size(); ++i) {\n+            if (IsMine(wtx.tx->vout[i]) && !IsSpent(hash, i)) {\n+                setWalletUTXO.insert(COutPoint(hash, i));\n+            }\n+        }\n+    }\n+\n+    bool fUpdated = false;\n+    if (!fInsertedNew)\n+    {\n+        // Merge\n+        if (!wtxIn.hashUnset() && wtxIn.hashBlock != wtx.hashBlock)\n+        {\n+            wtx.hashBlock = wtxIn.hashBlock;\n+            fUpdated = true;\n+        }\n+        // If no longer abandoned, update\n+        if (wtxIn.hashBlock.IsNull() && wtx.isAbandoned())\n+        {\n+            wtx.hashBlock = wtxIn.hashBlock;\n+            fUpdated = true;\n+        }\n+        if (wtxIn.nIndex != -1 && (wtxIn.nIndex != wtx.nIndex))\n+        {\n+            wtx.nIndex = wtxIn.nIndex;\n+            fUpdated = true;\n+        }\n+        if (wtxIn.fFromMe && wtxIn.fFromMe != wtx.fFromMe)\n+        {\n+            wtx.fFromMe = wtxIn.fFromMe;\n+            fUpdated = true;\n+        }\n+    }\n \n-\t\t//// debug print\n-\t\tLogPrintf(\"AddToWallet %s  %s%s\\n\", wtxIn.GetHash().ToString(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n+    //// debug print\n+    LogPrintf(\"AddToWallet %s  %s%s\\n\", wtxIn.GetHash().ToString(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n \n-\t\t// Write to disk\n-\t\tif (fInsertedNew || fUpdated)\n-\t\t\tif (!walletdb.WriteTx(wtx))\n-\t\t\t\treturn false;\n+    // Write to disk\n+    if (fInsertedNew || fUpdated)\n+        if (!walletdb.WriteTx(wtx))\n+            return false;\n \n-\t\t// Break debit/credit balance caches:\n-\t\twtx.MarkDirty();\n+    // Break debit/credit balance caches:\n+    wtx.MarkDirty();\n \n-\t\t// Notify UI of new or updated transaction\n-\t\tNotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n+    // Notify UI of new or updated transaction\n+    NotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n \n-\t\t// notify an external script when a wallet transaction comes in or is updated\n-\t\tstd::string strCmd = GetArg(\"-walletnotify\", \"\");\n+    // notify an external script when a wallet transaction comes in or is updated\n+    std::string strCmd = GetArg(\"-walletnotify\", \"\");\n \n-\t\tif (!strCmd.empty())\n-\t\t{\n-\t\t\tboost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n-\t\t\tboost::thread t(runCommand, strCmd); // thread runs free\n-\t\t}\n+    if ( !strCmd.empty())\n+    {\n+        boost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n+        boost::thread t(runCommand, strCmd); // thread runs free\n+    }\n+\n+    fAnonymizableTallyCached = false;\n+    fAnonymizableTallyCachedNonDenom = false;\n \n-\t\tfAnonymizableTallyCached = false;\n-\t\tfAnonymizableTallyCachedNonDenom = false;\n-\t}\n     return true;\n }\n \n@@ -986,47 +970,51 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n     return true;\n }\n \n-//**\n-*Add a transaction to the wallet, or update it.\n-* pblock is optional, but should be provided if the transaction is known to be in a block.\n-* If fUpdate is true, existing transactions will be updated.\n-* /\n-bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n+/**\n+ * Add a transaction to the wallet, or update it.  pIndex and posInBlock should\n+ * be set when the transaction was known to be included in a block.  When\n+ * posInBlock = SYNC_TRANSACTION_NOT_IN_BLOCK (-1) , then wallet state is not\n+ * updated in AddToWallet, but notifications happen and cached balances are\n+ * marked dirty.\n+ * If fUpdate is true, existing transactions will be updated.\n+ * TODO: One exception to this is that the abandoned state is cleared under the\n+ * assumption that any further notification of a transaction that was considered\n+ * abandoned is an indication that it is not safe to be considered abandoned.\n+ * Abandoned state should probably be more carefuly tracked via different\n+ * posInBlock signals or by checking mempool presence when necessary.\n+ */\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate)\n {\n-\t{\n-\t\tAssertLockHeld(cs_wallet);\n-\n-\t\tif (pblock) {\n-\t\t\tBOOST_FOREACH(const CTxIn& txin, tx.vin) {\n-\t\t\t\tstd::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n-\t\t\t\twhile (range.first != range.second) {\n-\t\t\t\t\tif (range.first->second != tx.GetHash()) {\n-\t\t\t\t\t\tLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), pblock->GetHash().ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n-\t\t\t\t\t\tMarkConflicted(pblock->GetHash(), range.first->second);\n-\t\t\t\t\t}\n-\t\t\t\t\trange.first++;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tbool fExisted = mapWallet.count(tx.GetHash()) != 0;\n-\t\tif (fExisted && !fUpdate) return false;\n-\t\tif (fExisted || IsMine(tx) || IsFromMe(tx))\n-\t\t{\n-\t\t\tCWalletTx wtx(this, tx);\n+    {\n+        AssertLockHeld(cs_wallet);\n+\n+        if (posInBlock != -1) {\n+            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+                std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n+                while (range.first != range.second) {\n+                    if (range.first->second != tx.GetHash()) {\n+                        LogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), pIndex->GetBlockHash().ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n+                        MarkConflicted(pIndex->GetBlockHash(), range.first->second);\n+                    }\n+                    range.first++;\n+                }\n+            }\n+        }\n \n-\t\t\t// Get merkle branch if transaction was found in a block\n-\t\t\tif (pblock)\n-\t\t\t\twtx.SetMerkleBranch(*pblock);\n+        bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n+        if (fExisted && !fUpdate) return false;\n+        if (fExisted || IsMine(tx) || IsFromMe(tx))\n+        {\n+            CWalletTx wtx(this, MakeTransactionRef(tx));\n \n-\t\t\t// Do not flush the wallet here for performance reasons\n-\t\t\t// this is safe, as in case of a crash, we rescan the necessary blocks on startup through our SetBestChain-mechanism\n-\t\t\tCWalletDB walletdb(strWalletFile, \"r+\", false);\n+            // Get merkle branch if transaction was found in a block\n+            if (posInBlock != -1)\n+                wtx.SetMerkleBranch(pIndex, posInBlock);\n \n-\t\t\treturn AddToWallet(wtx, false, &walletdb);\n-\t\t}\n-\t}\n-\treturn false;\n+            return AddToWallet(wtx, false);\n+        }\n+    }\n+    return false;\n }\n \n bool CWallet::AbandonTransaction(const uint256& hashTx)\n@@ -3587,57 +3575,52 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n     }\n     return true;\n }\n+\n /**\n-* Call after CreateTransaction unless you want to abort\n-*/\n-bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n+ * Call after CreateTransaction unless you want to abort\n+ */\n+bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman,  CValidationState& state, const std::string& strCommand)\n {\n-\t{\n-\t\tLOCK2(cs_main, cs_wallet);\n-\t\tLogPrintf(\"CommitTransaction:\\n%s\", wtxNew.ToString());\n-\t\t{\n-\t\t\t// This is only to keep the database open to defeat the auto-flush for the\n-\t\t\t// duration of this scope.  This is the only place where this optimization\n-\t\t\t// maybe makes sense; please don't do it anywhere else.\n-\t\t\tCWalletDB* pwalletdb = fFileBacked ? new CWalletDB(strWalletFile, \"r+\") : NULL;\n-\n-\t\t\t// Take key pair from key pool so it won't be used again\n-\t\t\treservekey.KeepKey();\n+    {\n+        LOCK2(cs_main, cs_wallet);\n+        LogPrintf(\"CommitTransaction:\\n%s\", wtxNew.tx->ToString());\n+        {\n+            // Take key pair from key pool so it won't be used again\n+            reservekey.KeepKey();\n \n-\t\t\t// Add tx to wallet, because if it has change it's also ours,\n-\t\t\t// otherwise just for transaction history.\n-\t\t\tAddToWallet(wtxNew, false, pwalletdb);\n+            // Add tx to wallet, because if it has change it's also ours,\n+            // otherwise just for transaction history.\n+            AddToWallet(wtxNew);\n \n-\t\t\t// Notify that old coins are spent\n-\t\t\tset<CWalletTx*> setCoins;\n-\t\t\tBOOST_FOREACH(const CTxIn& txin, wtxNew.vin)\n-\t\t\t{\n-\t\t\t\tCWalletTx &coin = mapWallet[txin.prevout.hash];\n-\t\t\t\tcoin.BindWallet(this);\n-\t\t\t\tNotifyTransactionChanged(this, coin.GetHash(), CT_UPDATED);\n-\t\t\t}\n+            // Notify that old coins are spent\n+            std::set<uint256> updated_hahes;\n+            BOOST_FOREACH(const CTxIn& txin, wtxNew.tx->vin)\n+            {\n+                // notify only once\n+                if(updated_hahes.find(txin.prevout.hash) != updated_hahes.end()) continue;\n \n-\t\t\tif (fFileBacked)\n-\t\t\t\tdelete pwalletdb;\n-\t\t}\n+                CWalletTx &coin = mapWallet[txin.prevout.hash];\n+                coin.BindWallet(this);\n+                NotifyTransactionChanged(this, txin.prevout.hash, CT_UPDATED);\n+                updated_hahes.insert(txin.prevout.hash);\n+            }\n+        }\n \n-\t\t// Track how many getdata requests our transaction gets\n-\t\tmapRequestCount[wtxNew.GetHash()] = 0;\n+        // Track how many getdata requests our transaction gets\n+        mapRequestCount[wtxNew.GetHash()] = 0;\n \n-\t\tif (fBroadcastTransactions)\n-\t\t{\n-\t\t\tCValidationState state;\n-\t\t\t// Broadcast\n-\t\t\tif (!wtxNew.AcceptToMemoryPool(false, maxTxFee, state)) {\n-\t\t\t\tLogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", state.GetRejectReason());\n-\t\t\t\t// TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\twtxNew.RelayWalletTransaction();\n-\t\t\t}\n-\t\t}\n-\t}\n-\treturn true;\n+        if (fBroadcastTransactions)\n+        {\n+            // Broadcast\n+            if (!wtxNew.AcceptToMemoryPool(maxTxFee, state)) {\n+                LogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", state.GetRejectReason());\n+                // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n+            } else {\n+                wtxNew.RelayWalletTransaction(connman, strCommand);\n+            }\n+        }\n+    }\n+    return true;\n }\n \n void CWallet::ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries) {"
      },
      {
        "sha": "1dcf4bf9f77598c07b3aed4ae605485c89e984c9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a48fb8bc110d08483923ae846e1724b39fc4d20d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a48fb8bc110d08483923ae846e1724b39fc4d20d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a48fb8bc110d08483923ae846e1724b39fc4d20d",
        "patch": "@@ -785,7 +785,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bForceNew = false);\n \n     void MarkDirty();\n-    bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb);\n+    bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock) override;\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);"
      },
      {
        "sha": "600face5445c65bda4a267dc61a6ae4ad05c00b2",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a48fb8bc110d08483923ae846e1724b39fc4d20d/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a48fb8bc110d08483923ae846e1724b39fc4d20d/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=a48fb8bc110d08483923ae846e1724b39fc4d20d",
        "patch": "@@ -406,7 +406,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \t\t\tif (wtx.nOrderPos == -1)\n \t\t\t\twss.fAnyUnordered = true;\n \n-\t\t\tpwallet->AddToWallet(wtx, true, NULL);\n+\t\t\tpwallet->AddToWallet(wtx, true);\n \t\t}\n \t\telse if (strType == \"acentry\")\n \t\t{"
      }
    ]
  },
  {
    "sha": "7adc33a3a4bc9fc08360dd655e41418b164ac283",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YWRjMzNhM2E0YmM5ZmMwODM2MGRkNjU1ZTQxNDE4YjE2NGFjMjgz",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:08Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:08Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit adc90d4b106b75f9f9a93ca93a1d295d7fe0be2d.",
      "tree": {
        "sha": "c65a2d738fdd751c3b53088fe8e35f984c7f09c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c65a2d738fdd751c3b53088fe8e35f984c7f09c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7adc33a3a4bc9fc08360dd655e41418b164ac283",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7adc33a3a4bc9fc08360dd655e41418b164ac283",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7adc33a3a4bc9fc08360dd655e41418b164ac283",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7adc33a3a4bc9fc08360dd655e41418b164ac283/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a48fb8bc110d08483923ae846e1724b39fc4d20d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a48fb8bc110d08483923ae846e1724b39fc4d20d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a48fb8bc110d08483923ae846e1724b39fc4d20d"
      }
    ],
    "stats": {
      "total": 237,
      "additions": 118,
      "deletions": 119
    },
    "files": [
      {
        "sha": "62bc6c8b4434d4e3706ccd9a7aec99cca48d717e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 116,
        "deletions": 117,
        "changes": 233,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7adc33a3a4bc9fc08360dd655e41418b164ac283/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7adc33a3a4bc9fc08360dd655e41418b164ac283/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7adc33a3a4bc9fc08360dd655e41418b164ac283",
        "patch": "@@ -4616,99 +4616,99 @@ void CWallet::postInitProcess(boost::thread_group& threadGroup)\n \n bool CWallet::ParameterInteraction()\n {\n-\tif (GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET))\n-\t\treturn true;\n+    if (GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET))\n+        return true;\n \n-\tif (GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && SoftSetBoolArg(\"-walletbroadcast\", false)) {\n-\t\tLogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n-\t}\n+    if (GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && SoftSetBoolArg(\"-walletbroadcast\", false)) {\n+        LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n+    }\n \n-\tif (GetBoolArg(\"-salvagewallet\", false) && SoftSetBoolArg(\"-rescan\", true)) {\n-\t\t// Rewrite just private keys: rescan to find transactions\n-\t\tLogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n-\t}\n+    if (GetBoolArg(\"-salvagewallet\", false) && SoftSetBoolArg(\"-rescan\", true)) {\n+        // Rewrite just private keys: rescan to find transactions\n+        LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n+    }\n \n-\t// -zapwallettx implies a rescan\n-\tif (GetBoolArg(\"-zapwallettxes\", false) && SoftSetBoolArg(\"-rescan\", true)) {\n-\t\tLogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n-\t}\n+    // -zapwallettx implies a rescan\n+    if (GetBoolArg(\"-zapwallettxes\", false) && SoftSetBoolArg(\"-rescan\", true)) {\n+        LogPrintf(\"%s: parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1\\n\", __func__);\n+    }\n \n-\tif (GetBoolArg(\"-sysperms\", false))\n-\t\treturn InitError(\"-sysperms is not allowed in combination with enabled wallet functionality\");\n-\tif (GetArg(\"-prune\", 0) && GetBoolArg(\"-rescan\", false))\n-\t\treturn InitError(_(\"Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.\"));\n+    if (GetBoolArg(\"-sysperms\", false))\n+        return InitError(\"-sysperms is not allowed in combination with enabled wallet functionality\");\n+    if (GetArg(\"-prune\", 0) && GetBoolArg(\"-rescan\", false))\n+        return InitError(_(\"Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.\"));\n \n-\tif (::minRelayTxFee.GetFeePerK() > HIGH_TX_FEE_PER_KB)\n-\t\tInitWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +\n-\t\t\t_(\"The wallet will avoid paying less than the minimum relay fee.\"));\n+    if (::minRelayTxFee.GetFeePerK() > HIGH_TX_FEE_PER_KB)\n+        InitWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +\n+                    _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n \n-\tif (IsArgSet(\"-mintxfee\"))\n-\t{\n-\t\tCAmount n = 0;\n-\t\tif (!ParseMoney(GetArg(\"-mintxfee\", \"\"), n) || 0 == n)\n-\t\t\treturn InitError(AmountErrMsg(\"mintxfee\", GetArg(\"-mintxfee\", \"\")));\n-\t\tif (n > HIGH_TX_FEE_PER_KB)\n-\t\t\tInitWarning(AmountHighWarn(\"-mintxfee\") + \" \" +\n-\t\t\t\t_(\"This is the minimum transaction fee you pay on every transaction.\"));\n-\t\tCWallet::minTxFee = CFeeRate(n);\n-\t}\n-\tif (IsArgSet(\"-fallbackfee\"))\n-\t{\n-\t\tCAmount nFeePerK = 0;\n-\t\tif (!ParseMoney(GetArg(\"-fallbackfee\", \"\"), nFeePerK))\n-\t\t\treturn InitError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), GetArg(\"-fallbackfee\", \"\")));\n-\t\tif (nFeePerK > HIGH_TX_FEE_PER_KB)\n-\t\t\tInitWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +\n-\t\t\t\t_(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n-\t\tCWallet::fallbackFee = CFeeRate(nFeePerK);\n-\t}\n-\tif (IsArgSet(\"-paytxfee\"))\n-\t{\n-\t\tCAmount nFeePerK = 0;\n-\t\tif (!ParseMoney(GetArg(\"-paytxfee\", \"\"), nFeePerK))\n-\t\t\treturn InitError(AmountErrMsg(\"paytxfee\", GetArg(\"-paytxfee\", \"\")));\n-\t\tif (nFeePerK > HIGH_TX_FEE_PER_KB)\n-\t\t\tInitWarning(AmountHighWarn(\"-paytxfee\") + \" \" +\n-\t\t\t\t_(\"This is the transaction fee you will pay if you send a transaction.\"));\n-\n-\t\tpayTxFee = CFeeRate(nFeePerK, 1000);\n-\t\tif (payTxFee < ::minRelayTxFee)\n-\t\t{\n-\t\t\treturn InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n-\t\t\t\tGetArg(\"-paytxfee\", \"\"), ::minRelayTxFee.ToString()));\n-\t\t}\n-\t}\n-\tif (IsArgSet(\"-maxtxfee\"))\n-\t{\n-\t\tCAmount nMaxFee = 0;\n-\t\tif (!ParseMoney(GetArg(\"-maxtxfee\", \"\"), nMaxFee))\n-\t\t\treturn InitError(AmountErrMsg(\"maxtxfee\", GetArg(\"-maxtxfee\", \"\")));\n-\t\tif (nMaxFee > HIGH_MAX_TX_FEE)\n-\t\t\tInitWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n-\t\tmaxTxFee = nMaxFee;\n-\t\tif (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n-\t\t{\n-\t\t\treturn InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n-\t\t\t\tGetArg(\"-maxtxfee\", \"\"), ::minRelayTxFee.ToString()));\n-\t\t}\n-\t}\n-\tnTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n-\tbSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n-\tfSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", DEFAULT_SEND_FREE_TRANSACTIONS);\n+    if (IsArgSet(\"-mintxfee\"))\n+    {\n+        CAmount n = 0;\n+        if (!ParseMoney(GetArg(\"-mintxfee\", \"\"), n) || 0 == n)\n+            return InitError(AmountErrMsg(\"mintxfee\", GetArg(\"-mintxfee\", \"\")));\n+        if (n > HIGH_TX_FEE_PER_KB)\n+            InitWarning(AmountHighWarn(\"-mintxfee\") + \" \" +\n+                        _(\"This is the minimum transaction fee you pay on every transaction.\"));\n+        CWallet::minTxFee = CFeeRate(n);\n+    }\n+    if (IsArgSet(\"-fallbackfee\"))\n+    {\n+        CAmount nFeePerK = 0;\n+        if (!ParseMoney(GetArg(\"-fallbackfee\", \"\"), nFeePerK))\n+            return InitError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), GetArg(\"-fallbackfee\", \"\")));\n+        if (nFeePerK > HIGH_TX_FEE_PER_KB)\n+            InitWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +\n+                        _(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n+        CWallet::fallbackFee = CFeeRate(nFeePerK);\n+    }\n+    if (IsArgSet(\"-paytxfee\"))\n+    {\n+        CAmount nFeePerK = 0;\n+        if (!ParseMoney(GetArg(\"-paytxfee\", \"\"), nFeePerK))\n+            return InitError(AmountErrMsg(\"paytxfee\", GetArg(\"-paytxfee\", \"\")));\n+        if (nFeePerK > HIGH_TX_FEE_PER_KB)\n+            InitWarning(AmountHighWarn(\"-paytxfee\") + \" \" +\n+                        _(\"This is the transaction fee you will pay if you send a transaction.\"));\n+\n+        payTxFee = CFeeRate(nFeePerK, 1000);\n+        if (payTxFee < ::minRelayTxFee)\n+        {\n+            return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n+                                       GetArg(\"-paytxfee\", \"\"), ::minRelayTxFee.ToString()));\n+        }\n+    }\n+    if (IsArgSet(\"-maxtxfee\"))\n+    {\n+        CAmount nMaxFee = 0;\n+        if (!ParseMoney(GetArg(\"-maxtxfee\", \"\"), nMaxFee))\n+            return InitError(AmountErrMsg(\"maxtxfee\", GetArg(\"-maxtxfee\", \"\")));\n+        if (nMaxFee > HIGH_MAX_TX_FEE)\n+            InitWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n+        maxTxFee = nMaxFee;\n+        if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n+        {\n+            return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n+                                       GetArg(\"-maxtxfee\", \"\"), ::minRelayTxFee.ToString()));\n+        }\n+    }\n+    nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n+    bSpendZeroConfChange = GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n+    fSendFreeTransactions = GetBoolArg(\"-sendfreetransactions\", DEFAULT_SEND_FREE_TRANSACTIONS);\n \n-\tif (fSendFreeTransactions && GetArg(\"-limitfreerelay\", DEFAULT_LIMITFREERELAY) <= 0)\n-\t\treturn InitError(\"Creation of free transactions with their relay disabled is not supported.\");\n+    if (fSendFreeTransactions && GetArg(\"-limitfreerelay\", DEFAULT_LIMITFREERELAY) <= 0)\n+        return InitError(\"Creation of free transactions with their relay disabled is not supported.\");\n \n-\tif (IsArgSet(\"-walletbackupsdir\")) {\n-\t\tif (!boost::filesystem::is_directory(GetArg(\"-walletbackupsdir\", \"\"))) {\n-\t\t\tLogPrintf(\"%s: Warning: incorrect parameter -walletbackupsdir, path must exist! Using default path.\\n\", __func__);\n-\t\t\tInitWarning(\"Warning: incorrect parameter -walletbackupsdir, path must exist! Using default path.\\n\");\n+    if (IsArgSet(\"-walletbackupsdir\")) {\n+        if (!boost::filesystem::is_directory(GetArg(\"-walletbackupsdir\", \"\"))) {\n+            LogPrintf(\"%s: Warning: incorrect parameter -walletbackupsdir, path must exist! Using default path.\\n\", __func__);\n+            InitWarning(\"Warning: incorrect parameter -walletbackupsdir, path must exist! Using default path.\\n\");\n \n-\t\t\tForceRemoveArg(\"-walletbackupsdir\");\n-\t\t}\n-\t}\n+            ForceRemoveArg(\"-walletbackupsdir\");\n+        }\n+    }\n \n-\treturn true;\n+    return true;\n }\n \n bool CWallet::InitAutoBackup()\n@@ -4719,43 +4719,42 @@ bool CWallet::InitAutoBackup()\n \n bool CWallet::BackupWallet(const std::string& strDest)\n {\n-\tif (!fFileBacked)\n-\t\treturn false;\n-\twhile (true)\n-\t{\n-\t\t{\n-\t\t\tLOCK(bitdb.cs_db);\n-\t\t\tif (!bitdb.mapFileUseCount.count(strWalletFile) || bitdb.mapFileUseCount[strWalletFile] == 0)\n-\t\t\t{\n-\t\t\t\t// Flush log data to the dat file\n-\t\t\t\tbitdb.CloseDb(strWalletFile);\n-\t\t\t\tbitdb.CheckpointLSN(strWalletFile);\n-\t\t\t\tbitdb.mapFileUseCount.erase(strWalletFile);\n-\n-\t\t\t\t// Copy wallet file\n-\t\t\t\tboost::filesystem::path pathSrc = GetDataDir() / strWalletFile;\n-\t\t\t\tboost::filesystem::path pathDest(strDest);\n-\t\t\t\tif (boost::filesystem::is_directory(pathDest))\n-\t\t\t\t\tpathDest /= strWalletFile;\n-\n-\t\t\t\ttry {\n+    if (!fFileBacked)\n+        return false;\n+    while (true)\n+    {\n+        {\n+            LOCK(bitdb.cs_db);\n+            if (!bitdb.mapFileUseCount.count(strWalletFile) || bitdb.mapFileUseCount[strWalletFile] == 0)\n+            {\n+                // Flush log data to the dat file\n+                bitdb.CloseDb(strWalletFile);\n+                bitdb.CheckpointLSN(strWalletFile);\n+                bitdb.mapFileUseCount.erase(strWalletFile);\n+\n+                // Copy wallet file\n+                boost::filesystem::path pathSrc = GetDataDir() / strWalletFile;\n+                boost::filesystem::path pathDest(strDest);\n+                if (boost::filesystem::is_directory(pathDest))\n+                    pathDest /= strWalletFile;\n+\n+                try {\n #if BOOST_VERSION >= 104000\n-\t\t\t\t\tboost::filesystem::copy_file(pathSrc, pathDest, boost::filesystem::copy_option::overwrite_if_exists);\n+                    boost::filesystem::copy_file(pathSrc, pathDest, boost::filesystem::copy_option::overwrite_if_exists);\n #else\n-\t\t\t\t\tboost::filesystem::copy_file(pathSrc, pathDest);\n+                    boost::filesystem::copy_file(pathSrc, pathDest);\n #endif\n-\t\t\t\t\tLogPrintf(\"copied %s to %s\\n\", strWalletFile, pathDest.string());\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n-\t\t\t\tcatch (const boost::filesystem::filesystem_error& e) {\n-\t\t\t\t\tLogPrintf(\"error copying %s to %s - %s\\n\", strWalletFile, pathDest.string(), e.what());\n-\t\t\t\t\treturn false;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tMilliSleep(100);\n-\t}\n-\treturn false;\n+                    LogPrintf(\"copied %s to %s\\n\", strWalletFile, pathDest.string());\n+                    return true;\n+                } catch (const boost::filesystem::filesystem_error& e) {\n+                    LogPrintf(\"error copying %s to %s - %s\\n\", strWalletFile, pathDest.string(), e.what());\n+                    return false;\n+                }\n+            }\n+        }\n+        MilliSleep(100);\n+    }\n+    return false;\n }\n \n // This should be called carefully:"
      },
      {
        "sha": "b3976ed0c0e9a75edca20487f1d71e62e0956828",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7adc33a3a4bc9fc08360dd655e41418b164ac283/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7adc33a3a4bc9fc08360dd655e41418b164ac283/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=7adc33a3a4bc9fc08360dd655e41418b164ac283",
        "patch": "@@ -20,7 +20,7 @@\n #include <boost/foreach.hpp>\n #include <boost/scoped_ptr.hpp>\n #include <boost/thread.hpp>\n-#include \"alias.h\"\n+\n using namespace std;\n \n static uint64_t nAccountingEntryNumber = 0;\n@@ -374,7 +374,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \t\t\tCWalletTx wtx;\n \t\t\tssValue >> wtx;\n \t\t\tCValidationState state;\n-\t\t\tif (!(CheckTransaction(*wtx.tx, state) && (wtx.tx->GetHash() == hash) && state.IsValid()))\n+\t\t\tif (!(CheckTransaction(*wtx->tx, state) && (wtx.tx->GetHash() == hash) && state.IsValid()))\n \t\t\t{\n \t\t\t\t// SYSCOIN\n \t\t\t\tif (wtx.tx->GetHash() != hash && wtx.tx->nVersion == SYSCOIN_TX_VERSION)"
      }
    ]
  },
  {
    "sha": "632bbfdbe8a1f379d9878b61ee68c97c70d66dee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzJiYmZkYmU4YTFmMzc5ZDk4NzhiNjFlZTY4Yzk3YzcwZDY2ZGVl",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:10Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:10Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit 325045946625efebf157d7c9faafe6b38793f109.",
      "tree": {
        "sha": "71846d597b157fde96e2101e5ca4cf82c5e47eba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71846d597b157fde96e2101e5ca4cf82c5e47eba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/632bbfdbe8a1f379d9878b61ee68c97c70d66dee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/632bbfdbe8a1f379d9878b61ee68c97c70d66dee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/632bbfdbe8a1f379d9878b61ee68c97c70d66dee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/632bbfdbe8a1f379d9878b61ee68c97c70d66dee/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7adc33a3a4bc9fc08360dd655e41418b164ac283",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7adc33a3a4bc9fc08360dd655e41418b164ac283",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7adc33a3a4bc9fc08360dd655e41418b164ac283"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7fa0ccacc1cbbd8b7cc1374a2b77b19e0cea877b",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/632bbfdbe8a1f379d9878b61ee68c97c70d66dee/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/632bbfdbe8a1f379d9878b61ee68c97c70d66dee/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=632bbfdbe8a1f379d9878b61ee68c97c70d66dee",
        "patch": "@@ -374,10 +374,10 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \t\t\tCWalletTx wtx;\n \t\t\tssValue >> wtx;\n \t\t\tCValidationState state;\n-\t\t\tif (!(CheckTransaction(*wtx->tx, state) && (wtx.tx->GetHash() == hash) && state.IsValid()))\n+\t\t\tif (!(CheckTransaction(wtx->, state) && (wtx.tx->GetHash() == hash) && state.IsValid()))\n \t\t\t{\n \t\t\t\t// SYSCOIN\n-\t\t\t\tif (wtx.tx->GetHash() != hash && wtx.tx->nVersion == SYSCOIN_TX_VERSION)\n+\t\t\t\tif (wtx.tx->GetHash() != hash && wtx.tx->nVersion == GetSyscoinTxVersion())\n \t\t\t\t\treturn true;\n \t\t\t\tstrErr = \"Error reading wallet database. CheckTransaction failed, validation state: \" + FormatStateMessage(state);\n \t\t\t\treturn false;\n@@ -406,7 +406,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \t\t\tif (wtx.nOrderPos == -1)\n \t\t\t\twss.fAnyUnordered = true;\n \n-\t\t\tpwallet->AddToWallet(wtx, true);\n+\t\t\tpwallet->AddToWallet(wtx, true, NULL);\n \t\t}\n \t\telse if (strType == \"acentry\")\n \t\t{"
      }
    ]
  },
  {
    "sha": "fec6ee585a85b5fc5e59a62cde480d09cfb6b2c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWM2ZWU1ODVhODViNWZjNWU1OWE2MmNkZTQ4MGQwOWNmYjZiMmMz",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:12Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:12Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit 5edd5bd7c9ed6626b89a62f0eab32975b2da3584.",
      "tree": {
        "sha": "beaa833a74bfea71ab28b9dc7f101113812bcc5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/beaa833a74bfea71ab28b9dc7f101113812bcc5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fec6ee585a85b5fc5e59a62cde480d09cfb6b2c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fec6ee585a85b5fc5e59a62cde480d09cfb6b2c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fec6ee585a85b5fc5e59a62cde480d09cfb6b2c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fec6ee585a85b5fc5e59a62cde480d09cfb6b2c3/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "632bbfdbe8a1f379d9878b61ee68c97c70d66dee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/632bbfdbe8a1f379d9878b61ee68c97c70d66dee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/632bbfdbe8a1f379d9878b61ee68c97c70d66dee"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "9fa1f6a3c2413c36ed4c14a3881a70d7fa0e9ca7",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fec6ee585a85b5fc5e59a62cde480d09cfb6b2c3/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fec6ee585a85b5fc5e59a62cde480d09cfb6b2c3/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fec6ee585a85b5fc5e59a62cde480d09cfb6b2c3",
        "patch": "@@ -132,9 +132,8 @@ class CKeyPool\n \tADD_SERIALIZE_METHODS;\n \n \ttemplate <typename Stream, typename Operation>\n-\tinline void SerializationOp(Stream& s, Operation ser_action) {\n-\t\tint nVersion = s.GetVersion();\n-\t\tif (!(s.GetType() & SER_GETHASH))\n+\tinline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+\t\tif (!(nType & SER_GETHASH))\n \t\t\tREADWRITE(nVersion);\n \t\tREADWRITE(nTime);\n \t\tREADWRITE(vchPubKey);"
      },
      {
        "sha": "7ddb5157ba15af2b90ce3a848b5630658aac46d6",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fec6ee585a85b5fc5e59a62cde480d09cfb6b2c3/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fec6ee585a85b5fc5e59a62cde480d09cfb6b2c3/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=fec6ee585a85b5fc5e59a62cde480d09cfb6b2c3",
        "patch": "@@ -58,7 +58,7 @@ bool CWalletDB::ErasePurpose(const string& strPurpose)\n bool CWalletDB::WriteTx(const CWalletTx& wtx)\n {\n \tnWalletDBUpdated++;\n-\treturn Write(std::make_pair(std::string(\"tx\"), wtx.tx->GetHash()), wtx);\n+\treturn Write(std::make_pair(std::string(\"tx\"), wtx.GetHash()), wtx);\n }\n \n bool CWalletDB::EraseTx(uint256 hash)\n@@ -374,10 +374,10 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \t\t\tCWalletTx wtx;\n \t\t\tssValue >> wtx;\n \t\t\tCValidationState state;\n-\t\t\tif (!(CheckTransaction(wtx->, state) && (wtx.tx->GetHash() == hash) && state.IsValid()))\n+\t\t\tif (!(CheckTransaction(wtx, state) && (wtx.GetHash() == hash) && state.IsValid()))\n \t\t\t{\n \t\t\t\t// SYSCOIN\n-\t\t\t\tif (wtx.tx->GetHash() != hash && wtx.tx->nVersion == GetSyscoinTxVersion())\n+\t\t\t\tif (wtx.GetHash() != hash && wtx.nVersion == GetSyscoinTxVersion())\n \t\t\t\t\treturn true;\n \t\t\t\tstrErr = \"Error reading wallet database. CheckTransaction failed, validation state: \" + FormatStateMessage(state);\n \t\t\t\treturn false;"
      }
    ]
  },
  {
    "sha": "ae11869d4b2f3e80dc267368c433e2c578c6fc87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTExODY5ZDRiMmYzZTgwZGMyNjczNjhjNDMzZTJjNTc4YzZmYzg3",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:16Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:16Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit af5117b51d5be4f687870e8629cbe8f161be9582.",
      "tree": {
        "sha": "8de2caabfa62a90d75a8efa38aa463803b7d357d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8de2caabfa62a90d75a8efa38aa463803b7d357d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae11869d4b2f3e80dc267368c433e2c578c6fc87",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae11869d4b2f3e80dc267368c433e2c578c6fc87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae11869d4b2f3e80dc267368c433e2c578c6fc87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae11869d4b2f3e80dc267368c433e2c578c6fc87/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fec6ee585a85b5fc5e59a62cde480d09cfb6b2c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fec6ee585a85b5fc5e59a62cde480d09cfb6b2c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fec6ee585a85b5fc5e59a62cde480d09cfb6b2c3"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4b26f971fb71ad2d912197bb4bad8bf8507e71bb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae11869d4b2f3e80dc267368c433e2c578c6fc87/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae11869d4b2f3e80dc267368c433e2c578c6fc87/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ae11869d4b2f3e80dc267368c433e2c578c6fc87",
        "patch": "@@ -4173,6 +4173,18 @@ void CReserveKey::ReturnKey()\n \tvchPubKey = CPubKey();\n }\n \n+static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb)\n+{\n+    BOOST_FOREACH(const int64_t& id, setKeyPool)\n+    {\n+        CKeyPool keypool;\n+        if (!walletdb.ReadPool(id, keypool))\n+            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+        assert(keypool.vchPubKey.IsValid());\n+        CKeyID keyID = keypool.vchPubKey.GetID();\n+        setAddress.insert(keyID);\n+    }\n+}\n \n void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const\n {\n@@ -4210,7 +4222,7 @@ bool CWallet::UpdatedTransaction(const uint256 &hashTx)\n \n void CWallet::GetScriptForMining(std::shared_ptr<CReserveScript> &script)\n {\n-\tstd::shared_ptr<CReserveKey> rKey(new CReserveKey(this));\n+\tboost::shared_ptr<CReserveKey> rKey(new CReserveKey(this));\n \tCPubKey pubkey;\n \tif (!rKey->GetReservedKey(pubkey))\n \t\treturn;"
      }
    ]
  },
  {
    "sha": "8fc4ffbd5dcfb60c3527f34a582cf8372e217041",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZmM0ZmZiZDVkY2ZiNjBjMzUyN2YzNGE1ODJjZjgzNzJlMjE3MDQx",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:18Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:18Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit 387c4770e3b0979401f38d7d818c67f448fe472d.",
      "tree": {
        "sha": "9809acdb12e2686f66f20ba9b93cd821be1137ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9809acdb12e2686f66f20ba9b93cd821be1137ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8fc4ffbd5dcfb60c3527f34a582cf8372e217041",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fc4ffbd5dcfb60c3527f34a582cf8372e217041",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8fc4ffbd5dcfb60c3527f34a582cf8372e217041",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fc4ffbd5dcfb60c3527f34a582cf8372e217041/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae11869d4b2f3e80dc267368c433e2c578c6fc87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae11869d4b2f3e80dc267368c433e2c578c6fc87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae11869d4b2f3e80dc267368c433e2c578c6fc87"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "64518849caee7f606e869a594317ba5072471fad",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fc4ffbd5dcfb60c3527f34a582cf8372e217041/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fc4ffbd5dcfb60c3527f34a582cf8372e217041/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8fc4ffbd5dcfb60c3527f34a582cf8372e217041",
        "patch": "@@ -4220,7 +4220,7 @@ bool CWallet::UpdatedTransaction(const uint256 &hashTx)\n     return false;\n }\n \n-void CWallet::GetScriptForMining(std::shared_ptr<CReserveScript> &script)\n+void CWallet::GetScriptForMining(boost::shared_ptr<CReserveScript> &script)\n {\n \tboost::shared_ptr<CReserveKey> rKey(new CReserveKey(this));\n \tCPubKey pubkey;"
      },
      {
        "sha": "49d720c6010b2311a92a9b7120c387fbe5fc8a44",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fc4ffbd5dcfb60c3527f34a582cf8372e217041/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fc4ffbd5dcfb60c3527f34a582cf8372e217041/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8fc4ffbd5dcfb60c3527f34a582cf8372e217041",
        "patch": "@@ -853,7 +853,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n     void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool);\n     void KeepKey(int64_t nIndex);\n-    void ReturnKey(int64_t nIndex);\n+    void ReturnKey(int64_t nIndex, bool fInternal);\n \tbool GetKeyFromPool(CPubKey &key);\n     int64_t GetOldestKeyPoolTime();\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;"
      }
    ]
  },
  {
    "sha": "73ca0532eca41b862d4d7eb520e8219112189691",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3M2NhMDUzMmVjYTQxYjg2MmQ0ZDdlYjUyMGU4MjE5MTEyMTg5Njkx",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:20Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:20Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit 2c0170fab887217cdcf86cec4c81dc00325c571d.",
      "tree": {
        "sha": "5e746f57e981f28bfee38beaeff114f2551b82ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e746f57e981f28bfee38beaeff114f2551b82ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73ca0532eca41b862d4d7eb520e8219112189691",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73ca0532eca41b862d4d7eb520e8219112189691",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73ca0532eca41b862d4d7eb520e8219112189691",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73ca0532eca41b862d4d7eb520e8219112189691/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fc4ffbd5dcfb60c3527f34a582cf8372e217041",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fc4ffbd5dcfb60c3527f34a582cf8372e217041",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fc4ffbd5dcfb60c3527f34a582cf8372e217041"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 8,
      "deletions": 5
    },
    "files": [
      {
        "sha": "dd3a4fb0fe71c414a28e59424935ab4564845ad5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73ca0532eca41b862d4d7eb520e8219112189691/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73ca0532eca41b862d4d7eb520e8219112189691/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=73ca0532eca41b862d4d7eb520e8219112189691",
        "patch": "@@ -4167,10 +4167,11 @@ void CReserveKey::KeepKey()\n \n void CReserveKey::ReturnKey()\n {\n-\tif (nIndex != -1)\n-\t\tpwallet->ReturnKey(nIndex);\n-\tnIndex = -1;\n-\tvchPubKey = CPubKey();\n+    if (nIndex != -1) {\n+        pwallet->ReturnKey(nIndex, fInternal);\n+    }\n+    nIndex = -1;\n+    vchPubKey = CPubKey();\n }\n \n static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb)\n@@ -4780,12 +4781,14 @@ bool AutoBackupWallet(CWallet* wallet, const std::string& strWalletFile_, std::s\n CKeyPool::CKeyPool()\n {\n     nTime = GetTime();\n+    fInternal = false;\n }\n \n-CKeyPool::CKeyPool(const CPubKey& vchPubKeyIn)\n+CKeyPool::CKeyPool(const CPubKey& vchPubKeyIn, bool fInternalIn)\n {\n     nTime = GetTime();\n     vchPubKey = vchPubKeyIn;\n+    fInternal = fInternalIn;\n }\n \n CWalletKey::CWalletKey(int64_t nExpires)"
      }
    ]
  },
  {
    "sha": "f9329b91d7958f351b1f96c29c8bc3959d078efc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTMyOWI5MWQ3OTU4ZjM1MWIxZjk2YzI5YzhiYzM5NTlkMDc4ZWZj",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:22Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:22Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit 261444d9d063dcccc92bb2e672357f92918727c6.",
      "tree": {
        "sha": "49699f4fa59a6f4a4a55209edd9fa5d86bb911bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49699f4fa59a6f4a4a55209edd9fa5d86bb911bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9329b91d7958f351b1f96c29c8bc3959d078efc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9329b91d7958f351b1f96c29c8bc3959d078efc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9329b91d7958f351b1f96c29c8bc3959d078efc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9329b91d7958f351b1f96c29c8bc3959d078efc/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73ca0532eca41b862d4d7eb520e8219112189691",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73ca0532eca41b862d4d7eb520e8219112189691",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73ca0532eca41b862d4d7eb520e8219112189691"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 14,
      "deletions": 14
    },
    "files": [
      {
        "sha": "1891505d3a1b08627f0a454ea073811c78248965",
        "filename": "src/alias.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9329b91d7958f351b1f96c29c8bc3959d078efc/src/alias.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9329b91d7958f351b1f96c29c8bc3959d078efc/src/alias.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alias.cpp?ref=f9329b91d7958f351b1f96c29c8bc3959d078efc",
        "patch": "@@ -1480,7 +1480,7 @@ UniValue syscointxfund(const JSONRPCRequest& request) {\n \telse {\n \t\tCReserveKey reservekey(pwalletMain);\n \t\tCPubKey vchPubKey;\n-\t\treservekey.GetReservedKey(vchPubKey);\n+\t\treservekey.GetReservedKey(vchPubKey, true);\n \t\tCTxOut changeOut(nChange, GetScriptForDestination(vchPubKey.GetID()));\n \t\ttx.vout.push_back(changeOut);\n \t}"
      },
      {
        "sha": "7a0ffc7ead30f69aa8ed7ac634fba9bf73b7f090",
        "filename": "src/privatesend-client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9329b91d7958f351b1f96c29c8bc3959d078efc/src/privatesend-client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9329b91d7958f351b1f96c29c8bc3959d078efc/src/privatesend-client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/privatesend-client.cpp?ref=f9329b91d7958f351b1f96c29c8bc3959d078efc",
        "patch": "@@ -1210,7 +1210,7 @@ bool CPrivateSendClient::MakeCollateralAmounts(const CompactTallyItem& tallyItem\n \n     CScript scriptCollateral;\n     CPubKey vchPubKey;\n-    assert(reservekeyCollateral.GetReservedKey(vchPubKey)); // should never fail, as we just unlocked\n+    assert(reservekeyCollateral.GetReservedKey(vchPubKey, false)); // should never fail, as we just unlocked\n     scriptCollateral = GetScriptForDestination(vchPubKey.GetID());\n \n     vecSend.push_back((CRecipient){scriptCollateral, CPrivateSend::GetMaxCollateralAmount(), false});"
      },
      {
        "sha": "ed1930c25d2b7bcc8a1d09f0f759f3438f2c0569",
        "filename": "src/privatesend-util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9329b91d7958f351b1f96c29c8bc3959d078efc/src/privatesend-util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9329b91d7958f351b1f96c29c8bc3959d078efc/src/privatesend-util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/privatesend-util.cpp?ref=f9329b91d7958f351b1f96c29c8bc3959d078efc",
        "patch": "@@ -6,7 +6,7 @@\n CKeyHolder::CKeyHolder(CWallet* pwallet) :\n     reserveKey(pwallet)\n {\n-    reserveKey.GetReservedKey(pubKey);\n+    reserveKey.GetReservedKey(pubKey, false);\n }\n \n void CKeyHolder::KeepKey()"
      },
      {
        "sha": "f30647a48e0bbb3334d06c1d114045c9974da705",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9329b91d7958f351b1f96c29c8bc3959d078efc/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9329b91d7958f351b1f96c29c8bc3959d078efc/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f9329b91d7958f351b1f96c29c8bc3959d078efc",
        "patch": "@@ -224,7 +224,7 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n \n     CReserveKey reservekey(pwalletMain);\n     CPubKey vchPubKey;\n-    if (!reservekey.GetReservedKey(vchPubKey))\n+    if (!reservekey.GetReservedKey(vchPubKey, true))\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n \n     reservekey.KeepKey();"
      },
      {
        "sha": "b63faa33464c415bb84e672e0fa25452d3c3b429",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9329b91d7958f351b1f96c29c8bc3959d078efc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9329b91d7958f351b1f96c29c8bc3959d078efc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f9329b91d7958f351b1f96c29c8bc3959d078efc",
        "patch": "@@ -3082,7 +3082,7 @@ bool CWallet::CreateCollateralTransaction(CMutableTransaction& txCollateral, std\n         // make our change address\n         CScript scriptChange;\n         CPubKey vchPubKey;\n-        bool success = reservekey.GetReservedKey(vchPubKey);\n+        bool success = reservekey.GetReservedKey(vchPubKey, true);\n         assert(success); // should never fail, as we just unlocked\n         scriptChange = GetScriptForDestination(vchPubKey.GetID());\n         reservekey.KeepKey();\n@@ -3345,7 +3345,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                             // Reserve a new key pair from key pool\n \t\t\t\t\t\t\tCPubKey vchPubKey;\n \t\t\t\t\t\t\tbool ret;\n-\t\t\t\t\t\t\tret = reservekey.GetReservedKey(vchPubKey);\n+\t\t\t\t\t\t\tret = reservekey.GetReservedKey(vchPubKey, true);\n \t\t\t\t\t\t\tassert(ret); // should never fail, as we just unlocked\n \t\t\t\t\t\t\tscriptChange = GetScriptForDestination(vchPubKey.GetID());\n \t\t\t\t\t\t\t\n@@ -4221,15 +4221,15 @@ bool CWallet::UpdatedTransaction(const uint256 &hashTx)\n     return false;\n }\n \n-void CWallet::GetScriptForMining(boost::shared_ptr<CReserveScript> &script)\n+void CWallet::GetScriptForMining(std::shared_ptr<CReserveScript> &script)\n {\n-\tboost::shared_ptr<CReserveKey> rKey(new CReserveKey(this));\n-\tCPubKey pubkey;\n-\tif (!rKey->GetReservedKey(pubkey))\n-\t\treturn;\n+\tstd::shared_ptr<CReserveKey> rKey(new CReserveKey(this));\n+    CPubKey pubkey;\n+    if (!rKey->GetReservedKey(pubkey, false))\n+        return;\n \n-\tscript = rKey;\n-\tscript->reserveScript = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n+    script = rKey;\n+    script->reserveScript = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n }\n \n void CWallet::LockCoin(const COutPoint& output)"
      },
      {
        "sha": "9b083b5c6c2706d98d35922fc0ec6d5ef88bb537",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9329b91d7958f351b1f96c29c8bc3959d078efc/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9329b91d7958f351b1f96c29c8bc3959d078efc/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f9329b91d7958f351b1f96c29c8bc3959d078efc",
        "patch": "@@ -1020,7 +1020,7 @@ class CReserveKey : public CReserveScript\n     }\n \n     void ReturnKey();\n-    bool GetReservedKey(CPubKey &pubkey);\n+    bool GetReservedKey(CPubKey &pubkey, bool fInternalIn /*= false*/);\n     void KeepKey();\n     void KeepScript() override { KeepKey(); }\n };"
      }
    ]
  },
  {
    "sha": "df08901e457afd757c88b1d4b2671ba74abedca4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjA4OTAxZTQ1N2FmZDc1N2M4OGIxZDRiMjY3MWJhNzRhYmVkY2E0",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:24Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:24Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit e37befac36902c55b9c3b048c71a9ee9b6cfe796.",
      "tree": {
        "sha": "7a5cc0ed1e09683e979512d7fc9f77d3a08c83eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a5cc0ed1e09683e979512d7fc9f77d3a08c83eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df08901e457afd757c88b1d4b2671ba74abedca4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df08901e457afd757c88b1d4b2671ba74abedca4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df08901e457afd757c88b1d4b2671ba74abedca4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df08901e457afd757c88b1d4b2671ba74abedca4/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9329b91d7958f351b1f96c29c8bc3959d078efc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9329b91d7958f351b1f96c29c8bc3959d078efc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9329b91d7958f351b1f96c29c8bc3959d078efc"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 18,
      "deletions": 17
    },
    "files": [
      {
        "sha": "d698e6c29058f6e2d0755d6e992692a7a322032c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 16,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df08901e457afd757c88b1d4b2671ba74abedca4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df08901e457afd757c88b1d4b2671ba74abedca4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=df08901e457afd757c88b1d4b2671ba74abedca4",
        "patch": "@@ -51,7 +51,7 @@ bool fSendFreeTransactions = DEFAULT_SEND_FREE_TRANSACTIONS;\n bool bBIP69Enabled = true;\n \n const char * DEFAULT_WALLET_DAT = \"wallet.dat\";\n-const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n+\n /** \n  * Fees smaller than this (in satoshis) are considered zero fee (for transaction creation)\n  * Override with -mintxfee\n@@ -4138,24 +4138,25 @@ std::set<CTxDestination> CWallet::GetAccountAddresses(const std::string& strAcco\n     return result;\n }\n \n-bool CReserveKey::GetReservedKey(CPubKey& pubkey)\n+bool CReserveKey::GetReservedKey(CPubKey& pubkey, bool fInternalIn)\n {\n-\tif (nIndex == -1)\n-\t{\n-\t\tCKeyPool keypool;\n-\t\tpwallet->ReserveKeyFromKeyPool(nIndex, keypool);\n-\t\tif (nIndex != -1)\n-\t\t\tvchPubKey = keypool.vchPubKey;\n-\t\telse {\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\tassert(vchPubKey.IsValid());\n-\tpubkey = vchPubKey;\n-\treturn true;\n+    if (nIndex == -1)\n+    {\n+        CKeyPool keypool;\n+        pwallet->ReserveKeyFromKeyPool(nIndex, keypool, fInternalIn);\n+        if (nIndex != -1) {\n+            vchPubKey = keypool.vchPubKey;\n+        }\n+        else {\n+            return false;\n+        }\n+        fInternal = keypool.fInternal;\n+    }\n+    assert(vchPubKey.IsValid());\n+    pubkey = vchPubKey;\n+    return true;\n }\n \n-\n void CReserveKey::KeepKey()\n {\n     if (nIndex != -1) {"
      },
      {
        "sha": "199ec885aa934cc9ab66f498eba022cbdbe235ec",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df08901e457afd757c88b1d4b2671ba74abedca4/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df08901e457afd757c88b1d4b2671ba74abedca4/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=df08901e457afd757c88b1d4b2671ba74abedca4",
        "patch": "@@ -851,7 +851,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     bool NewKeyPool();\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n-    void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool);\n+    void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fInternal);\n     void KeepKey(int64_t nIndex);\n     void ReturnKey(int64_t nIndex, bool fInternal);\n \tbool GetKeyFromPool(CPubKey &key);"
      }
    ]
  },
  {
    "sha": "a26798dfcdf413b7ad5cd03428f9774fdebebdca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjY3OThkZmNkZjQxM2I3YWQ1Y2QwMzQyOGY5Nzc0ZmRlYmViZGNh",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:26Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:26Z"
      },
      "message": "Revert \"copmpile\"\n\nThis reverts commit f6abeaf5ef784bc68b2b3bcf7cf4d6c3c8062528.",
      "tree": {
        "sha": "42995c67497036681609ee4ab976679f6941c067",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42995c67497036681609ee4ab976679f6941c067"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a26798dfcdf413b7ad5cd03428f9774fdebebdca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a26798dfcdf413b7ad5cd03428f9774fdebebdca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a26798dfcdf413b7ad5cd03428f9774fdebebdca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a26798dfcdf413b7ad5cd03428f9774fdebebdca/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df08901e457afd757c88b1d4b2671ba74abedca4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df08901e457afd757c88b1d4b2671ba74abedca4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df08901e457afd757c88b1d4b2671ba74abedca4"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 30,
      "deletions": 17
    },
    "files": [
      {
        "sha": "2a9c75604eaa62ee5a1cbe942687dc019aca30c2",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 28,
        "deletions": 15,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a26798dfcdf413b7ad5cd03428f9774fdebebdca/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a26798dfcdf413b7ad5cd03428f9774fdebebdca/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a26798dfcdf413b7ad5cd03428f9774fdebebdca",
        "patch": "@@ -123,21 +123,36 @@ struct CompactTallyItem\n class CKeyPool\n {\n public:\n-\tint64_t nTime;\n-\tCPubKey vchPubKey;\n+    int64_t nTime;\n+    CPubKey vchPubKey;\n+    bool fInternal; // for change outputs\n \n-\tCKeyPool();\n-\tCKeyPool(const CPubKey& vchPubKeyIn);\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool fInternalIn);\n \n-\tADD_SERIALIZE_METHODS;\n+    ADD_SERIALIZE_METHODS;\n \n-\ttemplate <typename Stream, typename Operation>\n-\tinline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-\t\tif (!(nType & SER_GETHASH))\n-\t\t\tREADWRITE(nVersion);\n-\t\tREADWRITE(nTime);\n-\t\tREADWRITE(vchPubKey);\n-\t}\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+        }\n+    }\n };\n \n /** Address book data */\n@@ -588,7 +603,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool fFileBacked;\n \n \n-  \n+    int64_t nTimeFirstKey;\n \n     /**\n      * Private version of AddWatchOnly method which does not accept a\n@@ -675,8 +690,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     std::set<COutPoint> setLockedCoins;\n \n-\tint64_t nTimeFirstKey;\n-\n     int64_t nKeysLeftSinceAutoBackup;\n \n     const CWalletTx* GetWalletTx(const uint256& hash) const;"
      },
      {
        "sha": "db850544630d82b8a335074a781f8d0ca8957ac4",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a26798dfcdf413b7ad5cd03428f9774fdebebdca/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a26798dfcdf413b7ad5cd03428f9774fdebebdca/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=a26798dfcdf413b7ad5cd03428f9774fdebebdca",
        "patch": "@@ -54,7 +54,7 @@ class CHDChain\n \tCHDChain() { SetNull(); }\n \tADD_SERIALIZE_METHODS;\n \ttemplate <typename Stream, typename Operation>\n-\tinline void SerializationOp(Stream& s, Operation ser_action)\n+\tinline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n \t{\n \t\tREADWRITE(this->nVersion);\n \t\tnVersion = this->nVersion;\n@@ -94,7 +94,7 @@ class CKeyMetadata\n \tADD_SERIALIZE_METHODS;\n \n \ttemplate <typename Stream, typename Operation>\n-\tinline void SerializationOp(Stream& s, Operation ser_action) {\n+\tinline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n \t\tREADWRITE(this->nVersion);\n \t\tnVersion = this->nVersion;\n \t\tREADWRITE(nCreateTime);"
      }
    ]
  },
  {
    "sha": "c05312d5106ee963593bc7fb331ea5d5cf2b40d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDUzMTJkNTEwNmVlOTYzNTkzYmM3ZmIzMzFlYTVkNWNmMmI0MGQ1",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:28Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:28Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit 33decdbdc31b8a83ef1202f1c44c01001bd68732.",
      "tree": {
        "sha": "ea18af1c58ba690d656e9b4c25b3c7ae36cbe997",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea18af1c58ba690d656e9b4c25b3c7ae36cbe997"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c05312d5106ee963593bc7fb331ea5d5cf2b40d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c05312d5106ee963593bc7fb331ea5d5cf2b40d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c05312d5106ee963593bc7fb331ea5d5cf2b40d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c05312d5106ee963593bc7fb331ea5d5cf2b40d5/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a26798dfcdf413b7ad5cd03428f9774fdebebdca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a26798dfcdf413b7ad5cd03428f9774fdebebdca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a26798dfcdf413b7ad5cd03428f9774fdebebdca"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 9,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3b6034c985f8a7edafbf9c2f9aa1ab94ae5a9a30",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c05312d5106ee963593bc7fb331ea5d5cf2b40d5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c05312d5106ee963593bc7fb331ea5d5cf2b40d5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c05312d5106ee963593bc7fb331ea5d5cf2b40d5",
        "patch": "@@ -259,15 +259,16 @@ bool CWallet::LoadCScript(const CScript& redeemScript)\n     return CCryptoKeyStore::AddCScript(redeemScript);\n }\n \n-bool CWallet::AddWatchOnly(const CScript &dest)\n+bool CWallet::AddWatchOnly(const CScript& dest)\n {\n-\tif (!CCryptoKeyStore::AddWatchOnly(dest))\n-\t\treturn false;\n-\tnTimeFirstKey = 1; // No birthday information for watch-only keys.\n-\tNotifyWatchonlyChanged(true);\n-\tif (!fFileBacked)\n-\t\treturn true;\n-\treturn CWalletDB(strWalletFile).WriteWatchOnly(dest);\n+    if (!CCryptoKeyStore::AddWatchOnly(dest))\n+        return false;\n+    const CKeyMetadata& meta = mapKeyMetadata[CScriptID(dest)];\n+    UpdateTimeFirstKey(meta.nCreateTime);\n+    NotifyWatchonlyChanged(true);\n+    if (!fFileBacked)\n+        return true;\n+    return CWalletDB(strWalletFile).WriteWatchOnly(dest, meta);\n }\n \n bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)"
      }
    ]
  },
  {
    "sha": "c3ae39bb886d64b6607bf3d7dcbea478afc62fc4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjM2FlMzliYjg4NmQ2NGI2NjA3YmYzZDdkY2JlYTQ3OGFmYzYyZmM0",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:30Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:30Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit a0f8f12eaca69160178d6a2e394a1ff2de231baa.",
      "tree": {
        "sha": "38ed1103a5896256962db006d2b7d3afd76ac663",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38ed1103a5896256962db006d2b7d3afd76ac663"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3ae39bb886d64b6607bf3d7dcbea478afc62fc4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3ae39bb886d64b6607bf3d7dcbea478afc62fc4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3ae39bb886d64b6607bf3d7dcbea478afc62fc4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3ae39bb886d64b6607bf3d7dcbea478afc62fc4/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c05312d5106ee963593bc7fb331ea5d5cf2b40d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c05312d5106ee963593bc7fb331ea5d5cf2b40d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c05312d5106ee963593bc7fb331ea5d5cf2b40d5"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "ace0bb7a3ece6dc547d4b8134c5d6ade98ee07f1",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3ae39bb886d64b6607bf3d7dcbea478afc62fc4/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3ae39bb886d64b6607bf3d7dcbea478afc62fc4/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=c3ae39bb886d64b6607bf3d7dcbea478afc62fc4",
        "patch": "@@ -371,7 +371,7 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n     {\n         // Generate a new address to associate with given label\n         CPubKey newKey;\n-        if(!wallet->GetKeyFromPool(newKey))\n+        if(!wallet->GetKeyFromPool(newKey, false))\n         {\n             WalletModel::UnlockContext ctx(walletModel->requestUnlock());\n             if(!ctx.isValid())\n@@ -380,7 +380,7 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n                 editStatus = WALLET_UNLOCK_FAILURE;\n                 return QString();\n             }\n-            if(!wallet->GetKeyFromPool(newKey))\n+            if(!wallet->GetKeyFromPool(newKey, false))\n             {\n                 editStatus = KEY_GENERATION_FAILURE;\n                 return QString();"
      },
      {
        "sha": "5fd2318eb3cc30d19f8f333ebcf5d73acb6e9ae8",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3ae39bb886d64b6607bf3d7dcbea478afc62fc4/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3ae39bb886d64b6607bf3d7dcbea478afc62fc4/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=c3ae39bb886d64b6607bf3d7dcbea478afc62fc4",
        "patch": "@@ -647,7 +647,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n     }\n     else {\n         CPubKey newKey;\n-        if (wallet->GetKeyFromPool(newKey)) {\n+        if (wallet->GetKeyFromPool(newKey, false)) {\n             CKeyID keyID = newKey.GetID();\n             wallet->SetAddressBook(keyID, strAccount, \"refund\");\n "
      },
      {
        "sha": "09b0e2a877e5837d5da2779e0abde1131c163aae",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3ae39bb886d64b6607bf3d7dcbea478afc62fc4/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3ae39bb886d64b6607bf3d7dcbea478afc62fc4/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c3ae39bb886d64b6607bf3d7dcbea478afc62fc4",
        "patch": "@@ -148,7 +148,7 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n \n     // Generate a new key that is added to wallet\n     CPubKey newKey;\n-    if (!pwalletMain->GetKeyFromPool(newKey))\n+    if (!pwalletMain->GetKeyFromPool(newKey, false))\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n     CKeyID keyID = newKey.GetID();\n "
      },
      {
        "sha": "6b2f7d9e90113c2962ca03e5ccc88d9a52d8872a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3ae39bb886d64b6607bf3d7dcbea478afc62fc4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3ae39bb886d64b6607bf3d7dcbea478afc62fc4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c3ae39bb886d64b6607bf3d7dcbea478afc62fc4",
        "patch": "@@ -789,7 +789,7 @@ bool CWallet::GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bFo\n \t\t\tfor (map<uint256, CWalletTx>::iterator it = mapWallet.begin();\n \t\t\t\tit != mapWallet.end() && account.vchPubKey.IsValid();\n \t\t\t\t++it)\n-\t\t\t\tBOOST_FOREACH(const CTxOut& txout, (*it).second.tx->vout)\n+\t\t\t\tBOOST_FOREACH(const CTxOut& txout, (*it).second.vout)\n \t\t\t\tif (txout.scriptPubKey == scriptPubKey) {\n \t\t\t\t\tbForceNew = true;\n \t\t\t\t\tbreak;\n@@ -4347,7 +4347,7 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n \t\tif (blit != mapBlockIndex.end() && chainActive.Contains(blit->second)) {\n \t\t\t// ... which are already in a block\n \t\t\tint nHeight = blit->second->nHeight;\n-\t\t\tBOOST_FOREACH(const CTxOut &txout, wtx.tx->vout) {\n+\t\t\tBOOST_FOREACH(const CTxOut &txout, wtx.vout) {\n \t\t\t\t// iterate over all their outputs\n \t\t\t\tCAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);\n \t\t\t\tBOOST_FOREACH(const CKeyID &keyid, vAffected) {"
      }
    ]
  },
  {
    "sha": "1bdeae963a588d81ea1d4fbc797e541cd21a99c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYmRlYWU5NjNhNTg4ZDgxZWExZDRmYmM3OTdlNTQxY2QyMWE5OWM2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:32Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:32Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit 6ae2126cd2c08245049a19f51d45d3461ffcefbb.",
      "tree": {
        "sha": "713239ea639e55bbd1131eb7032a3668db3f7f5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/713239ea639e55bbd1131eb7032a3668db3f7f5f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1bdeae963a588d81ea1d4fbc797e541cd21a99c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bdeae963a588d81ea1d4fbc797e541cd21a99c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1bdeae963a588d81ea1d4fbc797e541cd21a99c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bdeae963a588d81ea1d4fbc797e541cd21a99c6/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c3ae39bb886d64b6607bf3d7dcbea478afc62fc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3ae39bb886d64b6607bf3d7dcbea478afc62fc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3ae39bb886d64b6607bf3d7dcbea478afc62fc4"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 32,
      "deletions": 32
    },
    "files": [
      {
        "sha": "8faeb88498adaafe77b5e168f10a4ca45bd7eb58",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 30,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bdeae963a588d81ea1d4fbc797e541cd21a99c6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bdeae963a588d81ea1d4fbc797e541cd21a99c6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1bdeae963a588d81ea1d4fbc797e541cd21a99c6",
        "patch": "@@ -775,40 +775,40 @@ bool CWallet::AccountMove(std::string strFrom, std::string strTo, CAmount nAmoun\n \n bool CWallet::GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bForceNew)\n {\n-\tCWalletDB walletdb(strWalletFile);\n+    CWalletDB walletdb(strWalletFile);\n \n-\tCAccount account;\n-\twalletdb.ReadAccount(strAccount, account);\n-\n-\tif (!bForceNew) {\n-\t\tif (!account.vchPubKey.IsValid())\n-\t\t\tbForceNew = true;\n-\t\telse {\n-\t\t\t// Check if the current key has been used\n-\t\t\tCScript scriptPubKey = GetScriptForDestination(account.vchPubKey.GetID());\n-\t\t\tfor (map<uint256, CWalletTx>::iterator it = mapWallet.begin();\n-\t\t\t\tit != mapWallet.end() && account.vchPubKey.IsValid();\n-\t\t\t\t++it)\n-\t\t\t\tBOOST_FOREACH(const CTxOut& txout, (*it).second.vout)\n-\t\t\t\tif (txout.scriptPubKey == scriptPubKey) {\n-\t\t\t\t\tbForceNew = true;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t}\n-\t}\n+    CAccount account;\n+    walletdb.ReadAccount(strAccount, account);\n \n-\t// Generate a new key\n-\tif (bForceNew) {\n-\t\tif (!GetKeyFromPool(account.vchPubKey))\n-\t\t\treturn false;\n+    if (!bForceNew) {\n+        if (!account.vchPubKey.IsValid())\n+            bForceNew = true;\n+        else {\n+            // Check if the current key has been used\n+            CScript scriptPubKey = GetScriptForDestination(account.vchPubKey.GetID());\n+            for (std::map<uint256, CWalletTx>::iterator it = mapWallet.begin();\n+                 it != mapWallet.end() && account.vchPubKey.IsValid();\n+                 ++it)\n+                BOOST_FOREACH(const CTxOut& txout, (*it).second.tx->vout)\n+                    if (txout.scriptPubKey == scriptPubKey) {\n+                        bForceNew = true;\n+                        break;\n+                    }\n+        }\n+    }\n \n-\t\tSetAddressBook(account.vchPubKey.GetID(), strAccount, \"receive\");\n-\t\twalletdb.WriteAccount(strAccount, account);\n-\t}\n+    // Generate a new key\n+    if (bForceNew) {\n+        if (!GetKeyFromPool(account.vchPubKey, false))\n+            return false;\n \n-\tpubKey = account.vchPubKey;\n+        SetAddressBook(account.vchPubKey.GetID(), strAccount, \"receive\");\n+        walletdb.WriteAccount(strAccount, account);\n+    }\n \n-\treturn true;\n+    pubKey = account.vchPubKey;\n+\n+    return true;\n }\n \n void CWallet::MarkDirty()\n@@ -4536,7 +4536,7 @@ bool CWallet::InitLoadWallet()\n \n \t\twalletInstance->SetBestChain(chainActive.GetLocator());\n \t}\n-\telse  {\n+\telse if (mapArgs.count(\"-usehd\")) {\n \t\tbool useHD = GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET);\n \t\tif (!walletInstance->hdChain.masterKeyID.IsNull() && !useHD)\n \t\t\treturn InitError(strprintf(_(\"Error loading %s: You can't disable HD on a already existing HD wallet\"), walletFile));"
      },
      {
        "sha": "c7371cccf2d2eeffb75aa9cec3d8b6ad23ddf2f9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bdeae963a588d81ea1d4fbc797e541cd21a99c6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bdeae963a588d81ea1d4fbc797e541cd21a99c6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1bdeae963a588d81ea1d4fbc797e541cd21a99c6",
        "patch": "@@ -631,7 +631,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \tstd::set<int64_t> setKeyPool;\n     // Map from Key ID (for regular keys) or Script ID (for watch-only keys) to\n     // key metadata.\n-    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n+    std::map<CTxDestination, CKeyMetadata> mapKeyMetadata;\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n@@ -867,7 +867,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fInternal);\n     void KeepKey(int64_t nIndex);\n     void ReturnKey(int64_t nIndex, bool fInternal);\n-\tbool GetKeyFromPool(CPubKey &key);\n+    bool GetKeyFromPool(CPubKey &key, bool fInternal /*= false*/);\n     int64_t GetOldestKeyPoolTime();\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n "
      }
    ]
  },
  {
    "sha": "02d923af079d567b0987389a490f8502a5f30017",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmQ5MjNhZjA3OWQ1NjdiMDk4NzM4OWE0OTBmODUwMmE1ZjMwMDE3",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:34Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:34Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit f2d41269bb641dcf5370d1b157e179d9623dadcd.",
      "tree": {
        "sha": "bcfbea64da4cd54742b2106c9650556d43edb0a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bcfbea64da4cd54742b2106c9650556d43edb0a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02d923af079d567b0987389a490f8502a5f30017",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d923af079d567b0987389a490f8502a5f30017",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02d923af079d567b0987389a490f8502a5f30017",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d923af079d567b0987389a490f8502a5f30017/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1bdeae963a588d81ea1d4fbc797e541cd21a99c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bdeae963a588d81ea1d4fbc797e541cd21a99c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1bdeae963a588d81ea1d4fbc797e541cd21a99c6"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "04233d19d7c9b1c2429c3fa7612006a1449ffa40",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02d923af079d567b0987389a490f8502a5f30017/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02d923af079d567b0987389a490f8502a5f30017/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=02d923af079d567b0987389a490f8502a5f30017",
        "patch": "@@ -26,7 +26,7 @@\n //\n \n CDBEnv bitdb;\n-unsigned int nWalletDBUpdated;\n+\n void CDBEnv::EnvShutdown()\n {\n     if (!fDbEnvInit)"
      },
      {
        "sha": "e1d3c1d9b399c310974984a9244a379a0748cc78",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02d923af079d567b0987389a490f8502a5f30017/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02d923af079d567b0987389a490f8502a5f30017/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=02d923af079d567b0987389a490f8502a5f30017",
        "patch": "@@ -22,7 +22,7 @@\n \n static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;\n static const bool DEFAULT_WALLET_PRIVDB = true;\n-extern unsigned int nWalletDBUpdated;\n+\n class CDBEnv\n {\n private:"
      }
    ]
  },
  {
    "sha": "f888c366fa71a6367dd46bbb049a2b92103fbf32",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODg4YzM2NmZhNzFhNjM2N2RkNDZiYmIwNDlhMmI5MjEwM2ZiZjMy",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:35Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:35Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit 95c55407250376cda0aa913b385758c8ae49f7fa.",
      "tree": {
        "sha": "d971479add27cfd5dbfe4851d21268dd901b2719",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d971479add27cfd5dbfe4851d21268dd901b2719"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f888c366fa71a6367dd46bbb049a2b92103fbf32",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f888c366fa71a6367dd46bbb049a2b92103fbf32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f888c366fa71a6367dd46bbb049a2b92103fbf32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f888c366fa71a6367dd46bbb049a2b92103fbf32/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02d923af079d567b0987389a490f8502a5f30017",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d923af079d567b0987389a490f8502a5f30017",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02d923af079d567b0987389a490f8502a5f30017"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 80,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6a0d60886e7a470f31c552022031fddb9634a2c2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f888c366fa71a6367dd46bbb049a2b92103fbf32/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f888c366fa71a6367dd46bbb049a2b92103fbf32/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f888c366fa71a6367dd46bbb049a2b92103fbf32",
        "patch": "@@ -727,6 +727,83 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \treturn true;\n }\n \n+DBErrors CWallet::ReorderTransactions()\n+{\n+    LOCK(cs_wallet);\n+    CWalletDB walletdb(strWalletFile);\n+\n+    // Old wallets didn't have any defined order for transactions\n+    // Probably a bad idea to change the output of this\n+\n+    // First: get all CWalletTx and CAccountingEntry into a sorted-by-time multimap.\n+    typedef std::pair<CWalletTx*, CAccountingEntry*> TxPair;\n+    typedef std::multimap<int64_t, TxPair > TxItems;\n+    TxItems txByTime;\n+\n+    for (std::map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+    {\n+        CWalletTx* wtx = &((*it).second);\n+        txByTime.insert(std::make_pair(wtx->nTimeReceived, TxPair(wtx, (CAccountingEntry*)0)));\n+    }\n+    std::list<CAccountingEntry> acentries;\n+    walletdb.ListAccountCreditDebit(\"\", acentries);\n+    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n+    {\n+        txByTime.insert(std::make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n+    }\n+\n+    nOrderPosNext = 0;\n+    std::vector<int64_t> nOrderPosOffsets;\n+    for (TxItems::iterator it = txByTime.begin(); it != txByTime.end(); ++it)\n+    {\n+        CWalletTx *const pwtx = (*it).second.first;\n+        CAccountingEntry *const pacentry = (*it).second.second;\n+        int64_t& nOrderPos = (pwtx != 0) ? pwtx->nOrderPos : pacentry->nOrderPos;\n+\n+        if (nOrderPos == -1)\n+        {\n+            nOrderPos = nOrderPosNext++;\n+            nOrderPosOffsets.push_back(nOrderPos);\n+\n+            if (pwtx)\n+            {\n+                if (!walletdb.WriteTx(*pwtx))\n+                    return DB_LOAD_FAIL;\n+            }\n+            else\n+                if (!walletdb.WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n+                    return DB_LOAD_FAIL;\n+        }\n+        else\n+        {\n+            int64_t nOrderPosOff = 0;\n+            BOOST_FOREACH(const int64_t& nOffsetStart, nOrderPosOffsets)\n+            {\n+                if (nOrderPos >= nOffsetStart)\n+                    ++nOrderPosOff;\n+            }\n+            nOrderPos += nOrderPosOff;\n+            nOrderPosNext = std::max(nOrderPosNext, nOrderPos + 1);\n+\n+            if (!nOrderPosOff)\n+                continue;\n+\n+            // Since we're changing the order, write it back\n+            if (pwtx)\n+            {\n+                if (!walletdb.WriteTx(*pwtx))\n+                    return DB_LOAD_FAIL;\n+            }\n+            else\n+                if (!walletdb.WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n+                    return DB_LOAD_FAIL;\n+        }\n+    }\n+    walletdb.WriteOrderPosNext(nOrderPosNext);\n+\n+    return DB_LOAD_OK;\n+}\n+\n int64_t CWallet::IncOrderPosNext(CWalletDB *pwalletdb)\n {\n     AssertLockHeld(cs_wallet); // nOrderPosNext"
      },
      {
        "sha": "1652bc7e9f21fcb37ccc2beb18dd53f09c69d26e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f888c366fa71a6367dd46bbb049a2b92103fbf32/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f888c366fa71a6367dd46bbb049a2b92103fbf32/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f888c366fa71a6367dd46bbb049a2b92103fbf32",
        "patch": "@@ -744,7 +744,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * keystore implementation\n      * Generate a new key\n      */\n-    CPubKey GenerateNewKey();\n+    CPubKey GenerateNewKey(uint32_t nAccountIndex, bool fInternal /*= false*/);\n     bool HaveKey(const CKeyID &address) const override;\n     bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n     //! GetKey implementation that can derive a HD private key on the fly\n@@ -754,7 +754,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)\n-    bool LoadKeyMetadata(const CPubKey& pubKey, const CKeyMetadata &metadata);\n+    bool LoadKeyMetadata(const CTxDestination& pubKey, const CKeyMetadata &metadata);\n \n     bool LoadMinVersion(int nVersion) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n     void UpdateTimeFirstKey(int64_t nCreateTime);\n@@ -793,6 +793,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * @return next transaction order id\n      */\n     int64_t IncOrderPosNext(CWalletDB *pwalletdb = NULL);\n+    DBErrors ReorderTransactions();\n     bool AccountMove(std::string strFrom, std::string strTo, CAmount nAmount, std::string strComment = \"\");\n     bool GetAccountPubkey(CPubKey &pubKey, std::string strAccount, bool bForceNew = false);\n "
      }
    ]
  },
  {
    "sha": "ef0c87ae71c9262117b1a7b6c9a1b7759f52c82c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjBjODdhZTcxYzkyNjIxMTdiMWE3YjZjOWExYjc3NTlmNTJjODJj",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:37Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:37Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit fc773990465a4cc8acd07059b7aa1ba4acde3a77.",
      "tree": {
        "sha": "d025632a4ca1d49690cbdd7160356ed3319888fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d025632a4ca1d49690cbdd7160356ed3319888fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef0c87ae71c9262117b1a7b6c9a1b7759f52c82c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef0c87ae71c9262117b1a7b6c9a1b7759f52c82c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef0c87ae71c9262117b1a7b6c9a1b7759f52c82c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef0c87ae71c9262117b1a7b6c9a1b7759f52c82c/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f888c366fa71a6367dd46bbb049a2b92103fbf32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f888c366fa71a6367dd46bbb049a2b92103fbf32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f888c366fa71a6367dd46bbb049a2b92103fbf32"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f5f4147e04af5b951b317e6ba4cccd05521c0913",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef0c87ae71c9262117b1a7b6c9a1b7759f52c82c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef0c87ae71c9262117b1a7b6c9a1b7759f52c82c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ef0c87ae71c9262117b1a7b6c9a1b7759f52c82c",
        "patch": "@@ -2116,7 +2116,7 @@ UniValue keypoolrefill(const JSONRPCRequest& request)\n \tif (request.params.size() > 0) {\n \t\tif (request.params[0].get_int() < 0)\n \t\t\tthrow JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected valid size.\");\n-\t\tkpSize = (unsigned int)request.params[0].get_int();\n+\t\tkpSize = (unsigned int)params[0].get_int();\n \t}\n \n \tEnsureWalletIsUnlocked();\n@@ -2184,6 +2184,9 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n     if (request.params.size() >= 3)\n         fForMixingOnly = request.params[2].get_bool();\n \n+    if (fForMixingOnly && !pwalletMain->IsLocked() && pwalletMain->IsLocked())\n+        throw JSONRPCError(RPC_WALLET_ALREADY_UNLOCKED, \"Error: Wallet is already unlocked for mixing only.\");\n+\n     if (!pwalletMain->IsLocked())\n         throw JSONRPCError(RPC_WALLET_ALREADY_UNLOCKED, \"Error: Wallet is already fully unlocked.\");\n "
      }
    ]
  },
  {
    "sha": "a7e6647a263f46aed8ab8e20f744f56e95499418",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2U2NjQ3YTI2M2Y0NmFlZDhhYjhlMjBmNzQ0ZjU2ZTk1NDk5NDE4",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:39Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:39Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit d05d479ed0aa8abf0fffaf5219f3776c1f3786a9.",
      "tree": {
        "sha": "28534090ade30bb4e68e46d691787ee8bb28aa34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28534090ade30bb4e68e46d691787ee8bb28aa34"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7e6647a263f46aed8ab8e20f744f56e95499418",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7e6647a263f46aed8ab8e20f744f56e95499418",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7e6647a263f46aed8ab8e20f744f56e95499418",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7e6647a263f46aed8ab8e20f744f56e95499418/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef0c87ae71c9262117b1a7b6c9a1b7759f52c82c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef0c87ae71c9262117b1a7b6c9a1b7759f52c82c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef0c87ae71c9262117b1a7b6c9a1b7759f52c82c"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "f297883db3ee8380b65cfc1c92c65fc4b35b1e55",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7e6647a263f46aed8ab8e20f744f56e95499418/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7e6647a263f46aed8ab8e20f744f56e95499418/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=a7e6647a263f46aed8ab8e20f744f56e95499418",
        "patch": "@@ -774,7 +774,7 @@ bool WalletModel::isWalletEnabled()\n \n bool WalletModel::hdEnabled() const\n {\n-    return true;\n+    return wallet->IsHDEnabled();\n }\n \n int WalletModel::getDefaultConfirmTarget() const"
      },
      {
        "sha": "09966d29ea53c1c35c6ab3e224dc5adc048c00e8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7e6647a263f46aed8ab8e20f744f56e95499418/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7e6647a263f46aed8ab8e20f744f56e95499418/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a7e6647a263f46aed8ab8e20f744f56e95499418",
        "patch": "@@ -2113,8 +2113,8 @@ UniValue keypoolrefill(const JSONRPCRequest& request)\n \n \t// 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n \tunsigned int kpSize = 0;\n-\tif (request.params.size() > 0) {\n-\t\tif (request.params[0].get_int() < 0)\n+\tif (params.size() > 0) {\n+\t\tif (params[0].get_int() < 0)\n \t\t\tthrow JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected valid size.\");\n \t\tkpSize = (unsigned int)params[0].get_int();\n \t}"
      },
      {
        "sha": "2560102536af3419863a79d821bb89064d9029aa",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7e6647a263f46aed8ab8e20f744f56e95499418/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7e6647a263f46aed8ab8e20f744f56e95499418/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a7e6647a263f46aed8ab8e20f744f56e95499418",
        "patch": "@@ -38,7 +38,6 @@\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n-using namespace std;\n // SYSCOIN services\n #include \"alias.h\"\n "
      }
    ]
  },
  {
    "sha": "d2b4e815c4f2c94ec3e1b8e128ad3056cc0dec34",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmI0ZTgxNWM0ZjJjOTRlYzNlMWI4ZTEyOGFkMzA1NmNjMGRlYzM0",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:41Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:41Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit 850ab2a4f5e1fac1a12c434bc118993347c78a44.",
      "tree": {
        "sha": "eeffac8315f4cd77f6af164a1686b14cd3f5396d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eeffac8315f4cd77f6af164a1686b14cd3f5396d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2b4e815c4f2c94ec3e1b8e128ad3056cc0dec34",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2b4e815c4f2c94ec3e1b8e128ad3056cc0dec34",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2b4e815c4f2c94ec3e1b8e128ad3056cc0dec34",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2b4e815c4f2c94ec3e1b8e128ad3056cc0dec34/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7e6647a263f46aed8ab8e20f744f56e95499418",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7e6647a263f46aed8ab8e20f744f56e95499418",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7e6647a263f46aed8ab8e20f744f56e95499418"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "021d0d4fa751a1688574318b1ec1e05b6fd4465e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2b4e815c4f2c94ec3e1b8e128ad3056cc0dec34/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2b4e815c4f2c94ec3e1b8e128ad3056cc0dec34/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d2b4e815c4f2c94ec3e1b8e128ad3056cc0dec34",
        "patch": "@@ -2109,21 +2109,21 @@ UniValue keypoolrefill(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"keypoolrefill\", \"\")\n         );\n \n-\tLOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-\t// 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n-\tunsigned int kpSize = 0;\n-\tif (params.size() > 0) {\n-\t\tif (params[0].get_int() < 0)\n-\t\t\tthrow JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected valid size.\");\n-\t\tkpSize = (unsigned int)params[0].get_int();\n-\t}\n+    // 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n+    unsigned int kpSize = 0;\n+    if (request.params.size() > 0) {\n+        if (request.params[0].get_int() < 0)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected valid size.\");\n+        kpSize = (unsigned int)request.params[0].get_int();\n+    }\n \n-\tEnsureWalletIsUnlocked();\n-\tpwalletMain->TopUpKeyPool(kpSize);\n+    EnsureWalletIsUnlocked();\n+    pwalletMain->TopUpKeyPool(kpSize);\n \n-\tif (pwalletMain->GetKeyPoolSize() < kpSize)\n-\t\tthrow JSONRPCError(RPC_WALLET_ERROR, \"Error refreshing keypool.\");\n+    if (pwalletMain->GetKeyPoolSize() < (pwalletMain->IsHDEnabled() ? kpSize * 2 : kpSize))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error refreshing keypool.\");\n \n     return NullUniValue;\n }"
      }
    ]
  },
  {
    "sha": "b07a49be2f78f29f403a5dc26abe298d255e01bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDdhNDliZTJmNzhmMjlmNDAzYTVkYzI2YWJlMjk4ZDI1NWUwMWJj",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:43Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:43Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit cd510977e6a9d53ede1d8ed2f6a0f46bd59a0bcf.",
      "tree": {
        "sha": "7a2971c01d27d24fa77f55e64c199d082c5920c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a2971c01d27d24fa77f55e64c199d082c5920c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b07a49be2f78f29f403a5dc26abe298d255e01bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b07a49be2f78f29f403a5dc26abe298d255e01bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b07a49be2f78f29f403a5dc26abe298d255e01bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b07a49be2f78f29f403a5dc26abe298d255e01bc/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2b4e815c4f2c94ec3e1b8e128ad3056cc0dec34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2b4e815c4f2c94ec3e1b8e128ad3056cc0dec34",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2b4e815c4f2c94ec3e1b8e128ad3056cc0dec34"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5d0883adc4cbb32df3ab7193c5e402a098fc185e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b07a49be2f78f29f403a5dc26abe298d255e01bc/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b07a49be2f78f29f403a5dc26abe298d255e01bc/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b07a49be2f78f29f403a5dc26abe298d255e01bc",
        "patch": "@@ -628,7 +628,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     const std::string strWalletFile;\n \n-\tstd::set<int64_t> setKeyPool;\n+\n     // Map from Key ID (for regular keys) or Script ID (for watch-only keys) to\n     // key metadata.\n     std::map<CTxDestination, CKeyMetadata> mapKeyMetadata;"
      }
    ]
  },
  {
    "sha": "3ba786ceb9d5efe349a61af850d227f8253bf4e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmE3ODZjZWI5ZDVlZmUzNDlhNjFhZjg1MGQyMjdmODI1M2JmNGU1",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:45Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:45Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit c399c053cda659834a527b42af9a116c4fca2b6c.",
      "tree": {
        "sha": "6b4943af9b55cf44afc59a034d899c8225edb460",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b4943af9b55cf44afc59a034d899c8225edb460"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ba786ceb9d5efe349a61af850d227f8253bf4e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ba786ceb9d5efe349a61af850d227f8253bf4e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ba786ceb9d5efe349a61af850d227f8253bf4e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ba786ceb9d5efe349a61af850d227f8253bf4e5/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b07a49be2f78f29f403a5dc26abe298d255e01bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b07a49be2f78f29f403a5dc26abe298d255e01bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b07a49be2f78f29f403a5dc26abe298d255e01bc"
      }
    ],
    "stats": {
      "total": 680,
      "additions": 459,
      "deletions": 221
    },
    "files": [
      {
        "sha": "801a342c350a40d270cbb3f681d5d3a25036b1ce",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 41,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba786ceb9d5efe349a61af850d227f8253bf4e5/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba786ceb9d5efe349a61af850d227f8253bf4e5/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3ba786ceb9d5efe349a61af850d227f8253bf4e5",
        "patch": "@@ -2512,53 +2512,59 @@ UniValue settxfee(const JSONRPCRequest& request)\n \n UniValue getwalletinfo(const JSONRPCRequest& request)\n {\n-\tif (!EnsureWalletIsAvailable(request.fHelp))\n-\t\treturn NullUniValue;\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n \n-\tif (request.fHelp || request.params.size() != 0)\n-\t\tthrow std::runtime_error(\n-\t\t\t\"getwalletinfo\\n\"\n-\t\t\t\"Returns an object containing various wallet state info.\\n\"\n-\t\t\t\"\\nResult:\\n\"\n-\t\t\t\"{\\n\"\n-\t\t\t\"  \\\"walletversion\\\": xxxxx,       (numeric) the wallet version\\n\"\n-\t\t\t\"  \\\"balance\\\": xxxxxxx,           (numeric) the total confirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n-\t\t\t+ (!fLiteMode ?\n-\t\t\t\t\"  \\\"privatesend_balance\\\": xxxxxx, (numeric) the anonymized syscoin balance of the wallet in \" + CURRENCY_UNIT + \"\\n\" : \"\") +\n-\t\t\t\"  \\\"unconfirmed_balance\\\": xxx,   (numeric) the total unconfirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n-\t\t\t\"  \\\"immature_balance\\\": xxxxxx,   (numeric) the total immature balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n-\t\t\t\"  \\\"txcount\\\": xxxxxxx,           (numeric) the total number of transactions in the wallet\\n\"\n-\t\t\t\"  \\\"keypoololdest\\\": xxxxxx,      (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\\n\"\n-\t\t\t\"  \\\"keypoolsize\\\": xxxx,          (numeric) how many new keys are pre-generated\\n\"\n-\t\t\t\"  \\\"unlocked_until\\\": ttt,        (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-\t\t\t\"  \\\"paytxfee\\\": x.xxxx,           (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n+    if (request.fHelp || request.params.size() != 0)\n+        throw std::runtime_error(\n+            \"getwalletinfo\\n\"\n+            \"Returns an object containing various wallet state info.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"walletversion\\\": xxxxx,     (numeric) the wallet version\\n\"\n+            \"  \\\"balance\\\": xxxxxxx,         (numeric) the total confirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+            + (!fLiteMode ?\n+            \"  \\\"privatesend_balance\\\": xxxxxx, (numeric) the anonymized syscoin balance of the wallet in \" + CURRENCY_UNIT + \"\\n\" : \"\") +\n+            \"  \\\"unconfirmed_balance\\\": xxx, (numeric) the total unconfirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"immature_balance\\\": xxxxxx, (numeric) the total immature balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"txcount\\\": xxxxxxx,         (numeric) the total number of transactions in the wallet\\n\"\n+            \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\\n\"\n+            \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated (only counts external keys)\\n\"\n+            \"  \\\"keypoolsize_hd_internal\\\": xxxx, (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\\n\"\n+            \"  \\\"keys_left\\\": xxxx,          (numeric) how many new keys are left since last automatic backup\\n\"\n+            \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n+            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n \t\t\t\"  \\\"hdmasterkeyid\\\": \\\"<hash160>\\\", (string) the Hash160 of the HD master pubkey\\n\"\n-\t\t\t\"}\\n\"\n-\t\t\t\"\\nExamples:\\n\"\n-\t\t\t+ HelpExampleCli(\"getwalletinfo\", \"\")\n-\t\t\t+ HelpExampleRpc(\"getwalletinfo\", \"\")\n-\t\t);\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getwalletinfo\", \"\")\n+            + HelpExampleRpc(\"getwalletinfo\", \"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-\tLOCK2(cs_main, pwalletMain->cs_wallet);\n-\n-\tUniValue obj(UniValue::VOBJ);\n-\tobj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n-\tobj.push_back(Pair(\"balance\", ValueFromAmount(pwalletMain->GetBalance())));\n-\tif (!fLiteMode)\n-\t\tobj.push_back(Pair(\"privatesend_balance\", ValueFromAmount(pwalletMain->GetAnonymizedBalance())));\n-\tobj.push_back(Pair(\"balance\", ValueFromAmount(pwalletMain->GetBalance())));\n-\tobj.push_back(Pair(\"unconfirmed_balance\", ValueFromAmount(pwalletMain->GetUnconfirmedBalance())));\n-\tobj.push_back(Pair(\"immature_balance\", ValueFromAmount(pwalletMain->GetImmatureBalance())));\n-\tobj.push_back(Pair(\"txcount\", (int)pwalletMain->mapWallet.size()));\n-\tobj.push_back(Pair(\"keypoololdest\", pwalletMain->GetOldestKeyPoolTime()));\n-\tobj.push_back(Pair(\"keypoolsize\", (int)pwalletMain->GetKeyPoolSize()));\n-\tif (pwalletMain->IsCrypted())\n-\t\tobj.push_back(Pair(\"unlocked_until\", nWalletUnlockTime));\n-\tobj.push_back(Pair(\"paytxfee\", ValueFromAmount(payTxFee.GetFeePerK())));\n+    CHDChain hdChainCurrent;\n+    UniValue obj(UniValue::VOBJ);\n+    obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n+    obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));\n+    if(!fLiteMode)\n+        obj.push_back(Pair(\"privatesend_balance\",       ValueFromAmount(pwalletMain->GetAnonymizedBalance())));\n+    obj.push_back(Pair(\"unconfirmed_balance\", ValueFromAmount(pwalletMain->GetUnconfirmedBalance())));\n+    obj.push_back(Pair(\"immature_balance\",    ValueFromAmount(pwalletMain->GetImmatureBalance())));\n+    obj.push_back(Pair(\"txcount\",       (int)pwalletMain->mapWallet.size()));\n+    obj.push_back(Pair(\"keypoololdest\", pwalletMain->GetOldestKeyPoolTime()));\n+    obj.push_back(Pair(\"keypoolsize\",   (int64_t)pwalletMain->KeypoolCountExternalKeys()));\n+    if (fHDEnabled) {\n+        obj.push_back(Pair(\"keypoolsize_hd_internal\",   (int64_t)(pwalletMain->KeypoolCountInternalKeys())));\n+    }\n+    obj.push_back(Pair(\"keys_left\",     pwalletMain->nKeysLeftSinceAutoBackup));\n+    if (pwalletMain->IsCrypted())\n+        obj.push_back(Pair(\"unlocked_until\", nWalletUnlockTime));\n+    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n \tCKeyID masterKeyID = pwalletMain->GetHDChain().masterKeyID;\n \tif (!masterKeyID.IsNull())\n \t\tobj.push_back(Pair(\"hdmasterkeyid\", masterKeyID.GetHex()));\n-\treturn obj;\n+    return obj;\n }\n UniValue generate(const JSONRPCRequest& request)\n {"
      },
      {
        "sha": "169a78d27ab253afe0258f2a61d71a56fc1dad76",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 388,
        "deletions": 175,
        "changes": 563,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba786ceb9d5efe349a61af850d227f8253bf4e5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba786ceb9d5efe349a61af850d227f8253bf4e5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3ba786ceb9d5efe349a61af850d227f8253bf4e5",
        "patch": "@@ -3754,82 +3754,97 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n     return nFeeNeeded;\n }\n \n-\n DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n {\n-\tif (!fFileBacked)\n-\t\treturn DB_LOAD_OK;\n \tfFirstRunRet = false;\n-\tDBErrors nLoadWalletRet = CWalletDB(strWalletFile, \"cr+\").LoadWallet(this);\n-\tif (nLoadWalletRet == DB_NEED_REWRITE)\n-\t{\n-\t\tif (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n-\t\t{\n-\t\t\tLOCK(cs_wallet);\n-\t\t\tsetKeyPool.clear();\n-\t\t\t// Note: can't top-up keypool here, because wallet is locked.\n-\t\t\t// User will be prompted to unlock wallet the next operation\n-\t\t\t// that requires a new key.\n-\t\t}\n-\t}\n+    if (!fFileBacked)\n+        return DB_LOAD_OK;\n+    DBErrors nLoadWalletRet = CWalletDB(strWalletFile,\"cr+\").LoadWallet(this);\n+    if (nLoadWalletRet == DB_NEED_REWRITE)\n+    {\n+        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n+        {\n+            LOCK(cs_wallet);\n+            setInternalKeyPool.clear();\n+            setExternalKeyPool.clear();\n+            nKeysLeftSinceAutoBackup = 0;\n+            // Note: can't top-up keypool here, because wallet is locked.\n+            // User will be prompted to unlock wallet the next operation\n+            // that requires a new key.\n+        }\n+    }\n \n-\tif (nLoadWalletRet != DB_LOAD_OK)\n-\t\treturn nLoadWalletRet;\n-\tfFirstRunRet = !vchDefaultKey.IsValid();\n+    {\n+        LOCK2(cs_main, cs_wallet);\n+        for (auto& pair : mapWallet) {\n+            for(unsigned int i = 0; i < pair.second.tx->vout.size(); ++i) {\n+                if (IsMine(pair.second.tx->vout[i]) && !IsSpent(pair.first, i)) {\n+                    setWalletUTXO.insert(COutPoint(pair.first, i));\n+                }\n+            }\n+        }\n+    }\n+\tfFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty();\n+\tif (GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET) && IsHDEnabled())\n+\t\tfFirstRunRet = false;\n+    if (nLoadWalletRet != DB_LOAD_OK)\n+        return nLoadWalletRet;\n \n-\tuiInterface.LoadWallet(this);\n+    uiInterface.LoadWallet(this);\n \n-\treturn DB_LOAD_OK;\n+    return DB_LOAD_OK;\n }\n \n-\n-DBErrors CWallet::ZapSelectTx(vector<uint256>& vHashIn, vector<uint256>& vHashOut)\n+DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut)\n {\n-\tif (!fFileBacked)\n-\t\treturn DB_LOAD_OK;\n-\tDBErrors nZapSelectTxRet = CWalletDB(strWalletFile, \"cr+\").ZapSelectTx(this, vHashIn, vHashOut);\n-\tif (nZapSelectTxRet == DB_NEED_REWRITE)\n-\t{\n-\t\tif (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n-\t\t{\n-\t\t\tLOCK(cs_wallet);\n-\t\t\tsetKeyPool.clear();\n-\t\t\t// Note: can't top-up keypool here, because wallet is locked.\n-\t\t\t// User will be prompted to unlock wallet the next operation\n-\t\t\t// that requires a new key.\n-\t\t}\n-\t}\n+    if (!fFileBacked)\n+        return DB_LOAD_OK;\n+    DBErrors nZapSelectTxRet = CWalletDB(strWalletFile,\"cr+\").ZapSelectTx(this, vHashIn, vHashOut);\n+    if (nZapSelectTxRet == DB_NEED_REWRITE)\n+    {\n+        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n+        {\n+            LOCK(cs_wallet);\n+            setInternalKeyPool.clear();\n+            setExternalKeyPool.clear();\n+            // Note: can't top-up keypool here, because wallet is locked.\n+            // User will be prompted to unlock wallet the next operation\n+            // that requires a new key.\n+        }\n+    }\n \n-\tif (nZapSelectTxRet != DB_LOAD_OK)\n-\t\treturn nZapSelectTxRet;\n+    if (nZapSelectTxRet != DB_LOAD_OK)\n+        return nZapSelectTxRet;\n \n-\tMarkDirty();\n+    MarkDirty();\n \n-\treturn DB_LOAD_OK;\n+    return DB_LOAD_OK;\n \n }\n \n DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n {\n-\tif (!fFileBacked)\n-\t\treturn DB_LOAD_OK;\n-\tDBErrors nZapWalletTxRet = CWalletDB(strWalletFile, \"cr+\").ZapWalletTx(this, vWtx);\n-\tif (nZapWalletTxRet == DB_NEED_REWRITE)\n-\t{\n-\t\tif (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n-\t\t{\n-\t\t\tLOCK(cs_wallet);\n-\t\t\tsetKeyPool.clear();\n-\t\t\t// Note: can't top-up keypool here, because wallet is locked.\n-\t\t\t// User will be prompted to unlock wallet the next operation\n-\t\t\t// that requires a new key.\n-\t\t}\n-\t}\n+    if (!fFileBacked)\n+        return DB_LOAD_OK;\n+    DBErrors nZapWalletTxRet = CWalletDB(strWalletFile,\"cr+\").ZapWalletTx(this, vWtx);\n+    if (nZapWalletTxRet == DB_NEED_REWRITE)\n+    {\n+        if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n+        {\n+            LOCK(cs_wallet);\n+            setInternalKeyPool.clear();\n+            setExternalKeyPool.clear();\n+            nKeysLeftSinceAutoBackup = 0;\n+            // Note: can't top-up keypool here, because wallet is locked.\n+            // User will be prompted to unlock wallet the next operation\n+            // that requires a new key.\n+        }\n+    }\n \n-\tif (nZapWalletTxRet != DB_LOAD_OK)\n-\t\treturn nZapWalletTxRet;\n+    if (nZapWalletTxRet != DB_LOAD_OK)\n+        return nZapWalletTxRet;\n \n-\treturn DB_LOAD_OK;\n+    return DB_LOAD_OK;\n }\n \n \n@@ -3888,91 +3903,141 @@ bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)\n \treturn true;\n }\n /**\n-* Mark old keypool keys as used,\n-* and generate all new keys\n-*/\n+ * Mark old keypool keys as used,\n+ * and generate all new keys \n+ */\n bool CWallet::NewKeyPool()\n {\n-\t{\n-\t\tLOCK(cs_wallet);\n-\t\tCWalletDB walletdb(strWalletFile);\n-\t\tBOOST_FOREACH(int64_t nIndex, setKeyPool)\n-\t\t\twalletdb.ErasePool(nIndex);\n-\t\tsetKeyPool.clear();\n+    {\n+        LOCK(cs_wallet);\n+        CWalletDB walletdb(strWalletFile);\n+        BOOST_FOREACH(int64_t nIndex, setInternalKeyPool) {\n+            walletdb.ErasePool(nIndex);\n+        }\n+        setInternalKeyPool.clear();\n+        BOOST_FOREACH(int64_t nIndex, setExternalKeyPool) {\n+            walletdb.ErasePool(nIndex);\n+        }\n+        setExternalKeyPool.clear();\n+        privateSendClient.fEnablePrivateSend = false;\n+        nKeysLeftSinceAutoBackup = 0;\n \n-\t\tif (IsLocked())\n-\t\t\treturn false;\n+        if (!TopUpKeyPool())\n+            return false;\n \n-\t\tint64_t nKeys = max(GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t)0);\n-\t\tfor (int i = 0; i < nKeys; i++)\n-\t\t{\n-\t\t\tint64_t nIndex = i + 1;\n-\t\t\twalletdb.WritePool(nIndex, CKeyPool(GenerateNewKey()));\n-\t\t\tsetKeyPool.insert(nIndex);\n-\t\t}\n-\t\tLogPrintf(\"CWallet::NewKeyPool wrote %d new keys\\n\", nKeys);\n-\t}\n-\treturn true;\n+        LogPrintf(\"CWallet::NewKeyPool rewrote keypool\\n\");\n+    }\n+    return true;\n }\n \n+size_t CWallet::KeypoolCountExternalKeys()\n+{\n+    AssertLockHeld(cs_wallet); // setExternalKeyPool\n+    return setExternalKeyPool.size();\n+}\n \n+size_t CWallet::KeypoolCountInternalKeys()\n+{\n+    AssertLockHeld(cs_wallet); // setInternalKeyPool\n+    return setInternalKeyPool.size();\n+}\n \n bool CWallet::TopUpKeyPool(unsigned int kpSize)\n {\n-\t{\n-\t\tLOCK(cs_wallet);\n+    {\n+        LOCK(cs_wallet);\n \n-\t\tif (IsLocked())\n-\t\t\treturn false;\n+        if (IsLocked())\n+            return false;\n \n-\t\tCWalletDB walletdb(strWalletFile);\n+        // Top up key pool\n+        unsigned int nTargetSize;\n+        if (kpSize > 0)\n+            nTargetSize = kpSize;\n+        else\n+            nTargetSize = std::max(GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n \n-\t\t// Top up key pool\n-\t\tunsigned int nTargetSize;\n-\t\tif (kpSize > 0)\n-\t\t\tnTargetSize = kpSize;\n-\t\telse\n-\t\t\tnTargetSize = max(GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t)0);\n+        // count amount of available keys (internal, external)\n+        // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n+        int64_t amountExternal = setExternalKeyPool.size();\n+        int64_t amountInternal = setInternalKeyPool.size();\n+        int64_t missingExternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - amountExternal, (int64_t) 0);\n+        int64_t missingInternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - amountInternal, (int64_t) 0);\n \n-\t\twhile (setKeyPool.size() < (nTargetSize + 1))\n-\t\t{\n-\t\t\tint64_t nEnd = 1;\n-\t\t\tif (!setKeyPool.empty())\n-\t\t\t\tnEnd = *(--setKeyPool.end()) + 1;\n-\t\t\tif (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey())))\n-\t\t\t\tthrow runtime_error(std::string(__func__) + \": writing generated key failed\");\n-\t\t\tsetKeyPool.insert(nEnd);\n-\t\t\tLogPrintf(\"keypool added key %d, size=%u\\n\", nEnd, setKeyPool.size());\n-\t\t}\n-\t}\n-\treturn true;\n+        if (!IsHDEnabled())\n+        {\n+            // don't create extra internal keys\n+            missingInternal = 0;\n+        } else {\n+            nTargetSize *= 2;\n+        }\n+        bool fInternal = false;\n+        CWalletDB walletdb(strWalletFile);\n+        for (int64_t i = missingInternal + missingExternal; i--;)\n+        {\n+            int64_t nEnd = 1;\n+            if (i < missingInternal) {\n+                fInternal = true;\n+            }\n+            if (!setInternalKeyPool.empty()) {\n+                nEnd = *(--setInternalKeyPool.end()) + 1;\n+            }\n+            if (!setExternalKeyPool.empty()) {\n+                nEnd = std::max(nEnd, *(--setExternalKeyPool.end()) + 1);\n+            }\n+            // TODO: implement keypools for all accounts?\n+            if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey(0, fInternal), fInternal)))\n+                throw std::runtime_error(std::string(__func__) + \": writing generated key failed\");\n+\n+            if (fInternal) {\n+                setInternalKeyPool.insert(nEnd);\n+            } else {\n+                setExternalKeyPool.insert(nEnd);\n+            }\n+            LogPrintf(\"keypool added key %d, size=%u, internal=%d\\n\", nEnd, setInternalKeyPool.size() + setExternalKeyPool.size(), fInternal);\n+\n+            double dProgress = 100.f * nEnd / (nTargetSize + 1);\n+            std::string strMsg = strprintf(_(\"Loading wallet... (%3.2f %%)\"), dProgress);\n+            uiInterface.InitMessage(strMsg);\n+        }\n+    }\n+    return true;\n }\n \n-void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool)\n+void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fInternal)\n {\n-\tnIndex = -1;\n-\tkeypool.vchPubKey = CPubKey();\n-\t{\n-\t\tLOCK(cs_wallet);\n+    nIndex = -1;\n+    keypool.vchPubKey = CPubKey();\n+    {\n+        LOCK(cs_wallet);\n \n-\t\tif (!IsLocked())\n-\t\t\tTopUpKeyPool();\n+        if (!IsLocked())\n+            TopUpKeyPool();\n \n-\t\t// Get the oldest key\n-\t\tif (setKeyPool.empty())\n-\t\t\treturn;\n+        fInternal = fInternal && IsHDEnabled();\n+        std::set<int64_t>& setKeyPool = fInternal ? setInternalKeyPool : setExternalKeyPool;\n \n-\t\tCWalletDB walletdb(strWalletFile);\n+        // Get the oldest key\n+        if(setKeyPool.empty())\n+            return;\n \n-\t\tnIndex = *(setKeyPool.begin());\n-\t\tsetKeyPool.erase(setKeyPool.begin());\n-\t\tif (!walletdb.ReadPool(nIndex, keypool))\n-\t\t\tthrow runtime_error(std::string(__func__) + \": read failed\");\n-\t\tif (!HaveKey(keypool.vchPubKey.GetID()))\n-\t\t\tthrow runtime_error(std::string(__func__) + \": unknown key in key pool\");\n-\t\tassert(keypool.vchPubKey.IsValid());\n-\t\tLogPrintf(\"keypool reserve %d\\n\", nIndex);\n-\t}\n+        CWalletDB walletdb(strWalletFile);\n+\n+        nIndex = *setKeyPool.begin();\n+        setKeyPool.erase(nIndex);\n+        if (!walletdb.ReadPool(nIndex, keypool)) {\n+            throw std::runtime_error(std::string(__func__) + \": read failed\");\n+        }\n+        if (!HaveKey(keypool.vchPubKey.GetID())) {\n+            throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n+        }\n+        if (keypool.fInternal != fInternal) {\n+            throw std::runtime_error(std::string(__func__) + \": keypool entry misclassified\");\n+        }\n+\n+        assert(keypool.vchPubKey.IsValid());\n+        LogPrintf(\"keypool reserve %d\\n\", nIndex);\n+    }\n }\n \n void CWallet::KeepKey(int64_t nIndex)\n@@ -3987,54 +4052,69 @@ void CWallet::KeepKey(int64_t nIndex)\n     LogPrintf(\"keypool keep %d\\n\", nIndex);\n }\n \n-void CWallet::ReturnKey(int64_t nIndex)\n+void CWallet::ReturnKey(int64_t nIndex, bool fInternal)\n {\n-\t// Return to key pool\n-\t{\n-\t\tLOCK(cs_wallet);\n-\t\tsetKeyPool.insert(nIndex);\n-\t}\n-\tLogPrintf(\"keypool return %d\\n\", nIndex);\n+    // Return to key pool\n+    {\n+        LOCK(cs_wallet);\n+        if (fInternal) {\n+            setInternalKeyPool.insert(nIndex);\n+        } else {\n+            setExternalKeyPool.insert(nIndex);\n+        }\n+    }\n+    LogPrintf(\"keypool return %d\\n\", nIndex);\n }\n \n-\n-bool CWallet::GetKeyFromPool(CPubKey& result)\n+bool CWallet::GetKeyFromPool(CPubKey& result, bool fInternal)\n {\n-\tint64_t nIndex = 0;\n-\tCKeyPool keypool;\n-\t{\n-\t\tLOCK(cs_wallet);\n-\t\tReserveKeyFromKeyPool(nIndex, keypool);\n-\t\tif (nIndex == -1)\n-\t\t{\n-\t\t\tif (IsLocked()) return false;\n-\t\t\tresult = GenerateNewKey();\n-\t\t\treturn true;\n-\t\t}\n-\t\tKeepKey(nIndex);\n-\t\tresult = keypool.vchPubKey;\n-\t}\n-\treturn true;\n+    int64_t nIndex = 0;\n+    CKeyPool keypool;\n+    {\n+        LOCK(cs_wallet);\n+        ReserveKeyFromKeyPool(nIndex, keypool, fInternal);\n+        if (nIndex == -1)\n+        {\n+            if (IsLocked()) return false;\n+            // TODO: implement keypool for all accouts?\n+            result = GenerateNewKey(0, fInternal);\n+            return true;\n+        }\n+        KeepKey(nIndex);\n+        result = keypool.vchPubKey;\n+    }\n+    return true;\n }\n \n-\n+static int64_t GetOldestKeyInPool(const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n+    CKeyPool keypool;\n+    int64_t nIndex = *(setKeyPool.begin());\n+    if (!walletdb.ReadPool(nIndex, keypool)) {\n+        throw std::runtime_error(std::string(__func__) + \": read oldest key in keypool failed\");\n+    }\n+    assert(keypool.vchPubKey.IsValid());\n+    return keypool.nTime;\n+}\n \n int64_t CWallet::GetOldestKeyPoolTime()\n {\n-\tLOCK(cs_wallet);\n+    LOCK(cs_wallet);\n+\n+    // if the keypool is empty, return <NOW>\n+    if (setExternalKeyPool.empty() && setInternalKeyPool.empty())\n+        return GetTime();\n \n-\t// if the keypool is empty, return <NOW>\n-\tif (setKeyPool.empty())\n-\t\treturn GetTime();\n+    CWalletDB walletdb(strWalletFile);\n+    int64_t oldestKey = -1;\n \n-\t// load oldest key from keypool, get time and return\n-\tCKeyPool keypool;\n-\tCWalletDB walletdb(strWalletFile);\n-\tint64_t nIndex = *(setKeyPool.begin());\n-\tif (!walletdb.ReadPool(nIndex, keypool))\n-\t\tthrow runtime_error(std::string(__func__) + \": read oldest key in keypool failed\");\n-\tassert(keypool.vchPubKey.IsValid());\n-\treturn keypool.nTime;\n+    // load oldest key from keypool, get time and return\n+    if (!setInternalKeyPool.empty()) {\n+        oldestKey = std::max(GetOldestKeyInPool(setInternalKeyPool, walletdb), oldestKey);\n+    }\n+    if (!setExternalKeyPool.empty()) {\n+        oldestKey = std::max(GetOldestKeyInPool(setExternalKeyPool, walletdb), oldestKey);\n+    }\n+    return oldestKey;\n }\n \n std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n@@ -4265,24 +4345,21 @@ static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<in\n     }\n }\n \n-void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const\n+void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n {\n-\tsetAddress.clear();\n+    setAddress.clear();\n \n-\tCWalletDB walletdb(strWalletFile);\n+    CWalletDB walletdb(strWalletFile);\n \n-\tLOCK2(cs_main, cs_wallet);\n-\tBOOST_FOREACH(const int64_t& id, setKeyPool)\n-\t{\n-\t\tCKeyPool keypool;\n-\t\tif (!walletdb.ReadPool(id, keypool))\n-\t\t\tthrow runtime_error(std::string(__func__) + \": read failed\");\n-\t\tassert(keypool.vchPubKey.IsValid());\n-\t\tCKeyID keyID = keypool.vchPubKey.GetID();\n-\t\tif (!HaveKey(keyID))\n-\t\t\tthrow runtime_error(std::string(__func__) + \": unknown key in key pool\");\n-\t\tsetAddress.insert(keyID);\n-\t}\n+    LOCK2(cs_main, cs_wallet);\n+    LoadReserveKeysToSet(setAddress, setInternalKeyPool, walletdb);\n+    LoadReserveKeysToSet(setAddress, setExternalKeyPool, walletdb);\n+\n+    BOOST_FOREACH (const CKeyID& keyID, setAddress) {\n+        if (!HaveKey(keyID)) {\n+            throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n+        }\n+    }\n }\n \n bool CWallet::UpdatedTransaction(const uint256 &hashTx)\n@@ -4804,7 +4881,24 @@ bool CWallet::ParameterInteraction()\n \n bool CWallet::InitAutoBackup()\n {\n-   \n+    if (GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET))\n+        return true;\n+\n+    std::string strWarning;\n+    std::string strError;\n+\n+    nWalletBackups = GetArg(\"-createwalletbackups\", 10);\n+    nWalletBackups = std::max(0, std::min(10, nWalletBackups));\n+\n+    std::string strWalletFile = GetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n+\n+    if(!AutoBackupWallet(NULL, strWalletFile, strWarning, strError)) {\n+        if (!strWarning.empty())\n+            InitWarning(strWarning);\n+        if (!strError.empty())\n+            return InitError(strError);\n+    }\n+\n     return true;\n }\n \n@@ -4852,7 +4946,126 @@ bool CWallet::BackupWallet(const std::string& strDest)\n // either supply \"wallet\" (if already loaded) or \"strWalletFile\" (if wallet wasn't loaded yet)\n bool AutoBackupWallet(CWallet* wallet, const std::string& strWalletFile_, std::string& strBackupWarningRet, std::string& strBackupErrorRet)\n {\n-    \n+    namespace fs = boost::filesystem;\n+\n+    strBackupWarningRet = strBackupErrorRet = \"\";\n+    std::string strWalletFile = \"\";\n+\n+    if (nWalletBackups <= 0) {\n+        LogPrintf(\"Automatic wallet backups are disabled!\\n\");\n+        return false;\n+    }\n+\n+    fs::path backupsDir = GetBackupsDir();\n+\n+    if (!fs::exists(backupsDir))\n+    {\n+        // Always create backup folder to not confuse the operating system's file browser\n+        LogPrintf(\"Creating backup folder %s\\n\", backupsDir.string());\n+        if(!fs::create_directories(backupsDir)) {\n+            // smth is wrong, we shouldn't continue until it's resolved\n+            strBackupErrorRet = strprintf(_(\"Wasn't able to create wallet backup folder %s!\"), backupsDir.string());\n+            LogPrintf(\"%s\\n\", strBackupErrorRet);\n+            nWalletBackups = -1;\n+            return false;\n+        }\n+    } else if (!fs::is_directory(backupsDir)) {\n+        // smth is wrong, we shouldn't continue until it's resolved\n+        strBackupErrorRet = strprintf(_(\"%s is not a valid backup folder!\"), backupsDir.string());\n+        LogPrintf(\"%s\\n\", strBackupErrorRet);\n+        nWalletBackups = -1;\n+        return false;\n+    }\n+\n+    // Create backup of the ...\n+    std::string dateTimeStr = DateTimeStrFormat(\".%Y-%m-%d-%H-%M\", GetTime());\n+    if (wallet)\n+    {\n+        // ... opened wallet\n+        LOCK2(cs_main, wallet->cs_wallet);\n+        strWalletFile = wallet->strWalletFile;\n+        fs::path backupFile = backupsDir / (strWalletFile + dateTimeStr);\n+        if(!wallet->BackupWallet(backupFile.string())) {\n+            strBackupWarningRet = strprintf(_(\"Failed to create backup %s!\"), backupFile.string());\n+            LogPrintf(\"%s\\n\", strBackupWarningRet);\n+            nWalletBackups = -1;\n+            return false;\n+        }\n+        // Update nKeysLeftSinceAutoBackup using current external keypool size\n+        wallet->nKeysLeftSinceAutoBackup = wallet->KeypoolCountExternalKeys();\n+        LogPrintf(\"nKeysLeftSinceAutoBackup: %d\\n\", wallet->nKeysLeftSinceAutoBackup);\n+        if(wallet->IsLocked()) {\n+            strBackupWarningRet = _(\"Wallet is locked, can't replenish keypool! Automatic backups and mixing are disabled, please unlock your wallet to replenish keypool.\");\n+            LogPrintf(\"%s\\n\", strBackupWarningRet);\n+            nWalletBackups = -2;\n+            return false;\n+        }\n+    } else {\n+        // ... strWalletFile file\n+        strWalletFile = strWalletFile_;\n+        fs::path sourceFile = GetDataDir() / strWalletFile;\n+        fs::path backupFile = backupsDir / (strWalletFile + dateTimeStr);\n+        sourceFile.make_preferred();\n+        backupFile.make_preferred();\n+        if (fs::exists(backupFile))\n+        {\n+            strBackupWarningRet = _(\"Failed to create backup, file already exists! This could happen if you restarted wallet in less than 60 seconds. You can continue if you are ok with this.\");\n+            LogPrintf(\"%s\\n\", strBackupWarningRet);\n+            return false;\n+        }\n+        if(fs::exists(sourceFile)) {\n+            try {\n+                fs::copy_file(sourceFile, backupFile);\n+                LogPrintf(\"Creating backup of %s -> %s\\n\", sourceFile.string(), backupFile.string());\n+            } catch(fs::filesystem_error &error) {\n+                strBackupWarningRet = strprintf(_(\"Failed to create backup, error: %s\"), error.what());\n+                LogPrintf(\"%s\\n\", strBackupWarningRet);\n+                nWalletBackups = -1;\n+                return false;\n+            }\n+        }\n+    }\n+\n+    // Keep only the last 10 backups, including the new one of course\n+    typedef std::multimap<std::time_t, fs::path> folder_set_t;\n+    folder_set_t folder_set;\n+    fs::directory_iterator end_iter;\n+    backupsDir.make_preferred();\n+    // Build map of backup files for current(!) wallet sorted by last write time\n+    fs::path currentFile;\n+    for (fs::directory_iterator dir_iter(backupsDir); dir_iter != end_iter; ++dir_iter)\n+    {\n+        // Only check regular files\n+        if ( fs::is_regular_file(dir_iter->status()))\n+        {\n+            currentFile = dir_iter->path().filename();\n+            // Only add the backups for the current wallet, e.g. wallet.dat.*\n+            if(dir_iter->path().stem().string() == strWalletFile)\n+            {\n+                folder_set.insert(folder_set_t::value_type(fs::last_write_time(dir_iter->path()), *dir_iter));\n+            }\n+        }\n+    }\n+\n+    // Loop backward through backup files and keep the N newest ones (1 <= N <= 10)\n+    int counter = 0;\n+    BOOST_REVERSE_FOREACH(PAIRTYPE(const std::time_t, fs::path) file, folder_set)\n+    {\n+        counter++;\n+        if (counter > nWalletBackups)\n+        {\n+            // More than nWalletBackups backups: delete oldest one(s)\n+            try {\n+                fs::remove(file.second);\n+                LogPrintf(\"Old backup deleted: %s\\n\", file.second);\n+            } catch(fs::filesystem_error &error) {\n+                strBackupWarningRet = strprintf(_(\"Failed to delete backup, error: %s\"), error.what());\n+                LogPrintf(\"%s\\n\", strBackupWarningRet);\n+                return false;\n+            }\n+        }\n+    }\n+\n     return true;\n }\n "
      },
      {
        "sha": "9753d7529a32f45c2d007694eb1949cc1a29f121",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 24,
        "deletions": 5,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ba786ceb9d5efe349a61af850d227f8253bf4e5/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ba786ceb9d5efe349a61af850d227f8253bf4e5/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3ba786ceb9d5efe349a61af850d227f8253bf4e5",
        "patch": "@@ -602,6 +602,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     bool fFileBacked;\n \n+    std::set<int64_t> setInternalKeyPool;\n+    std::set<int64_t> setExternalKeyPool;\n \n     int64_t nTimeFirstKey;\n \n@@ -628,6 +630,21 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     const std::string strWalletFile;\n \n+    void LoadKeyPool(int nIndex, const CKeyPool &keypool)\n+    {\n+        if (keypool.fInternal) {\n+            setInternalKeyPool.insert(nIndex);\n+        } else {\n+            setExternalKeyPool.insert(nIndex);\n+        }\n+\n+        // If no metadata exists yet, create a default with the pool key's\n+        // creation time. Note that this may be overwritten by actually\n+        // stored metadata for that key later, which is fine.\n+        CKeyID keyid = keypool.vchPubKey.GetID();\n+        if (mapKeyMetadata.count(keyid) == 0)\n+            mapKeyMetadata[keyid] = CKeyMetadata(keypool.nTime);\n+    }\n \n     // Map from Key ID (for regular keys) or Script ID (for watch-only keys) to\n     // key metadata.\n@@ -864,6 +881,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     static CAmount GetRequiredFee(unsigned int nTxBytes);\n \n     bool NewKeyPool();\n+    size_t KeypoolCountExternalKeys();\n+    size_t KeypoolCountInternalKeys();\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n     void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fInternal);\n     void KeepKey(int64_t nIndex);\n@@ -926,11 +945,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         mapRequestCount[hash] = 0;\n     };\n     \n-\tunsigned int GetKeyPoolSize()\n-\t{\n-\t\tAssertLockHeld(cs_wallet); // setKeyPool\n-\t\treturn setKeyPool.size();\n-\t}\n+    unsigned int GetKeyPoolSize()\n+    {\n+        AssertLockHeld(cs_wallet); // set{Ex,In}ternalKeyPool\n+        return setInternalKeyPool.size() + setExternalKeyPool.size();\n+    }\n \tbool SetDefaultKey(const CPubKey &vchPubKey);\n \n     //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower"
      }
    ]
  },
  {
    "sha": "9163ab1f49896456946cca51bd6c3cbc45c71997",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTYzYWIxZjQ5ODk2NDU2OTQ2Y2NhNTFiZDZjM2NiYzQ1YzcxOTk3",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:47Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:47Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit fbd12c637de76db1558ce81194bb4455afa07546.",
      "tree": {
        "sha": "d16fb616b992f3fff0fef273da6fb169c594b9e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d16fb616b992f3fff0fef273da6fb169c594b9e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9163ab1f49896456946cca51bd6c3cbc45c71997",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9163ab1f49896456946cca51bd6c3cbc45c71997",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9163ab1f49896456946cca51bd6c3cbc45c71997",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9163ab1f49896456946cca51bd6c3cbc45c71997/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ba786ceb9d5efe349a61af850d227f8253bf4e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ba786ceb9d5efe349a61af850d227f8253bf4e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ba786ceb9d5efe349a61af850d227f8253bf4e5"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 54,
      "deletions": 52
    },
    "files": [
      {
        "sha": "29d9bdaeeec559009fee7bfdfacb1a445751a0e8",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9163ab1f49896456946cca51bd6c3cbc45c71997/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9163ab1f49896456946cca51bd6c3cbc45c71997/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=9163ab1f49896456946cca51bd6c3cbc45c71997",
        "patch": "@@ -687,7 +687,7 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n \t\treturn NullUniValue;\n \n \tif (fHelp || params.size() != 1)\n-\t\tthrow std::runtime_error(\n+\t\tthrow runtime_error(\n \t\t\t\"dumpwallet \\\"filename\\\"\\n\"\n \t\t\t\"\\nDumps all wallet keys in a human-readable format.\\n\"\n \t\t\t\"\\nArguments:\\n\"\n@@ -701,7 +701,7 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n \n \tEnsureWalletIsUnlocked();\n \n-\tstd::ofstream file;\n+\tofstream file;\n \tfile.open(params[0].get_str().c_str());\n \tif (!file.is_open())\n \t\tthrow JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");"
      },
      {
        "sha": "43d3d8f9d0ff71d7911d2da5ff60fe5d35a1c2d6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 49,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9163ab1f49896456946cca51bd6c3cbc45c71997/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9163ab1f49896456946cca51bd6c3cbc45c71997/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9163ab1f49896456946cca51bd6c3cbc45c71997",
        "patch": "@@ -4467,56 +4467,58 @@ class CAffectedKeysVisitor : public boost::static_visitor<void> {\n     void operator()(const CNoDestination &none) {}\n };\n \n-void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n-\tAssertLockHeld(cs_wallet); // mapKeyMetadata\n-\tmapKeyBirth.clear();\n-\n-\t// get birth times for keys with metadata\n-\tfor (std::map<CKeyID, CKeyMetadata>::const_iterator it = mapKeyMetadata.begin(); it != mapKeyMetadata.end(); it++)\n-\t\tif (it->second.nCreateTime)\n-\t\t\tmapKeyBirth[it->first] = it->second.nCreateTime;\n-\n-\t// map in which we'll infer heights of other keys\n-\tCBlockIndex *pindexMax = chainActive[std::max(0, chainActive.Height() - 144)]; // the tip can be reorganized; use a 144-block safety margin\n-\tstd::map<CKeyID, CBlockIndex*> mapKeyFirstBlock;\n-\tstd::set<CKeyID> setKeys;\n-\tGetKeys(setKeys);\n-\tBOOST_FOREACH(const CKeyID &keyid, setKeys) {\n-\t\tif (mapKeyBirth.count(keyid) == 0)\n-\t\t\tmapKeyFirstBlock[keyid] = pindexMax;\n-\t}\n-\tsetKeys.clear();\n-\n-\t// if there are no such keys, we're done\n-\tif (mapKeyFirstBlock.empty())\n-\t\treturn;\n-\n-\t// find first block that affects those keys, if there are any left\n-\tstd::vector<CKeyID> vAffected;\n-\tfor (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); it++) {\n-\t\t// iterate over all wallet transactions...\n-\t\tconst CWalletTx &wtx = (*it).second;\n-\t\tBlockMap::const_iterator blit = mapBlockIndex.find(wtx.hashBlock);\n-\t\tif (blit != mapBlockIndex.end() && chainActive.Contains(blit->second)) {\n-\t\t\t// ... which are already in a block\n-\t\t\tint nHeight = blit->second->nHeight;\n-\t\t\tBOOST_FOREACH(const CTxOut &txout, wtx.vout) {\n-\t\t\t\t// iterate over all their outputs\n-\t\t\t\tCAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);\n-\t\t\t\tBOOST_FOREACH(const CKeyID &keyid, vAffected) {\n-\t\t\t\t\t// ... and all their affected keys\n-\t\t\t\t\tstd::map<CKeyID, CBlockIndex*>::iterator rit = mapKeyFirstBlock.find(keyid);\n-\t\t\t\t\tif (rit != mapKeyFirstBlock.end() && nHeight < rit->second->nHeight)\n-\t\t\t\t\t\trit->second = blit->second;\n-\t\t\t\t}\n-\t\t\t\tvAffected.clear();\n-\t\t\t}\n-\t\t}\n-\t}\n+void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const {\n+    AssertLockHeld(cs_wallet); // mapKeyMetadata\n+    mapKeyBirth.clear();\n+\n+    // get birth times for keys with metadata\n+    for (const auto& entry : mapKeyMetadata) {\n+        if (entry.second.nCreateTime) {\n+            mapKeyBirth[entry.first] = entry.second.nCreateTime;\n+        }\n+    }\n+\n+    // map in which we'll infer heights of other keys\n+    CBlockIndex *pindexMax = chainActive[std::max(0, chainActive.Height() - 144)]; // the tip can be reorganized; use a 144-block safety margin\n+    std::map<CKeyID, CBlockIndex*> mapKeyFirstBlock;\n+    std::set<CKeyID> setKeys;\n+    GetKeys(setKeys);\n+    BOOST_FOREACH(const CKeyID &keyid, setKeys) {\n+        if (mapKeyBirth.count(keyid) == 0)\n+            mapKeyFirstBlock[keyid] = pindexMax;\n+    }\n+    setKeys.clear();\n+\n+    // if there are no such keys, we're done\n+    if (mapKeyFirstBlock.empty())\n+        return;\n+\n+    // find first block that affects those keys, if there are any left\n+    std::vector<CKeyID> vAffected;\n+    for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); it++) {\n+        // iterate over all wallet transactions...\n+        const CWalletTx &wtx = (*it).second;\n+        BlockMap::const_iterator blit = mapBlockIndex.find(wtx.hashBlock);\n+        if (blit != mapBlockIndex.end() && chainActive.Contains(blit->second)) {\n+            // ... which are already in a block\n+            int nHeight = blit->second->nHeight;\n+            BOOST_FOREACH(const CTxOut &txout, wtx.tx->vout) {\n+                // iterate over all their outputs\n+                CAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);\n+                BOOST_FOREACH(const CKeyID &keyid, vAffected) {\n+                    // ... and all their affected keys\n+                    std::map<CKeyID, CBlockIndex*>::iterator rit = mapKeyFirstBlock.find(keyid);\n+                    if (rit != mapKeyFirstBlock.end() && nHeight < rit->second->nHeight)\n+                        rit->second = blit->second;\n+                }\n+                vAffected.clear();\n+            }\n+        }\n+    }\n \n-\t// Extract block timestamps for those keys\n-\tfor (std::map<CKeyID, CBlockIndex*>::const_iterator it = mapKeyFirstBlock.begin(); it != mapKeyFirstBlock.end(); it++)\n-\t\tmapKeyBirth[it->first] = it->second->GetBlockTime() - 7200; // block times can be 2h off\n+    // Extract block timestamps for those keys\n+    for (std::map<CKeyID, CBlockIndex*>::const_iterator it = mapKeyFirstBlock.begin(); it != mapKeyFirstBlock.end(); it++)\n+        mapKeyBirth[it->first] = it->second->GetBlockTime() - 7200; // block times can be 2h off\n }\n \n bool CWallet::AddDestData(const CTxDestination &dest, const std::string &key, const std::string &value)"
      },
      {
        "sha": "38855a9538cd66d3878e8f06da456901ba1ec8e0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9163ab1f49896456946cca51bd6c3cbc45c71997/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9163ab1f49896456946cca51bd6c3cbc45c71997/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9163ab1f49896456946cca51bd6c3cbc45c71997",
        "patch": "@@ -803,7 +803,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n-    void GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const;\n+    void GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const;\n \n     /** \n      * Increment the next transaction order id"
      }
    ]
  },
  {
    "sha": "6050ee34e61b14ae90b1b956ac84d8c2c77d11bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDUwZWUzNGU2MWIxNGFlOTBiMWI5NTZhYzg0ZDhjMmM3N2QxMWJi",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:49Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:49Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit 7ebb5eb33d7000a47ba69296d201557d76877e91.",
      "tree": {
        "sha": "d461fccb7af0c4a281b4c5295009cb5f302a6b2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d461fccb7af0c4a281b4c5295009cb5f302a6b2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6050ee34e61b14ae90b1b956ac84d8c2c77d11bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6050ee34e61b14ae90b1b956ac84d8c2c77d11bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6050ee34e61b14ae90b1b956ac84d8c2c77d11bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6050ee34e61b14ae90b1b956ac84d8c2c77d11bb/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9163ab1f49896456946cca51bd6c3cbc45c71997",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9163ab1f49896456946cca51bd6c3cbc45c71997",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9163ab1f49896456946cca51bd6c3cbc45c71997"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "358c1eaac45167aff4796bc345d37b11db689890",
        "filename": "src/privatesend-client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6050ee34e61b14ae90b1b956ac84d8c2c77d11bb/src/privatesend-client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6050ee34e61b14ae90b1b956ac84d8c2c77d11bb/src/privatesend-client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/privatesend-client.cpp?ref=6050ee34e61b14ae90b1b956ac84d8c2c77d11bb",
        "patch": "@@ -688,7 +688,7 @@ bool CPrivateSendClient::DoAutomaticDenominating(CConnman& connman, bool fDryRun\n {\n     if(fMasternodeMode) return false; // no client-side mixing on masternodes\n     if(!fEnablePrivateSend) return false;\n-    if(!pwalletMain || pwalletMain->IsLocked()) return false;\n+    if(!pwalletMain || pwalletMain->IsLocked(true)) return false;\n     if(nState != POOL_STATE_IDLE) return false;\n \n     if(!masternodeSync.IsMasternodeListSynced()) {\n@@ -710,7 +710,7 @@ bool CPrivateSendClient::DoAutomaticDenominating(CConnman& connman, bool fDryRun\n         return false;\n     }\n \n-    if(!fDryRun && pwalletMain->IsLocked()) {\n+    if(!fDryRun && pwalletMain->IsLocked(true)) {\n         strAutoDenomResult = _(\"Wallet is locked.\");\n         return false;\n     }\n@@ -1047,7 +1047,7 @@ bool CPrivateSendClient::PrepareDenominate(int nMinRounds, int nMaxRounds, std::\n         return false;\n     }\n \n-    if (pwalletMain->IsLocked()) {\n+    if (pwalletMain->IsLocked(true)) {\n         strErrorRet = \"Wallet locked, unable to create transaction!\";\n         return false;\n     }"
      },
      {
        "sha": "411929fe33e51caf13fb4d57b517c9462b4a34f1",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6050ee34e61b14ae90b1b956ac84d8c2c77d11bb/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6050ee34e61b14ae90b1b956ac84d8c2c77d11bb/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=6050ee34e61b14ae90b1b956ac84d8c2c77d11bb",
        "patch": "@@ -451,7 +451,7 @@ WalletModel::EncryptionStatus WalletModel::getEncryptionStatus() const\n     {\n         return Unencrypted;\n     }\n-    else if(wallet->IsLocked())\n+    else if(wallet->IsLocked(true))\n     {\n         return Locked;\n     }"
      },
      {
        "sha": "2a4f0b6ed4514314f8034f8421fdaee43db88b8a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6050ee34e61b14ae90b1b956ac84d8c2c77d11bb/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6050ee34e61b14ae90b1b956ac84d8c2c77d11bb/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6050ee34e61b14ae90b1b956ac84d8c2c77d11bb",
        "patch": "@@ -143,7 +143,7 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n     if (request.params.size() > 0)\n         strAccount = AccountFromValue(request.params[0]);\n \n-    if (!pwalletMain->IsLocked())\n+    if (!pwalletMain->IsLocked(true))\n         pwalletMain->TopUpKeyPool();\n \n     // Generate a new key that is added to wallet\n@@ -219,7 +219,7 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (!pwalletMain->IsLocked())\n+    if (!pwalletMain->IsLocked(true))\n         pwalletMain->TopUpKeyPool();\n \n     CReserveKey reservekey(pwalletMain);\n@@ -2184,7 +2184,7 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n     if (request.params.size() >= 3)\n         fForMixingOnly = request.params[2].get_bool();\n \n-    if (fForMixingOnly && !pwalletMain->IsLocked() && pwalletMain->IsLocked())\n+    if (fForMixingOnly && !pwalletMain->IsLocked(true) && pwalletMain->IsLocked())\n         throw JSONRPCError(RPC_WALLET_ALREADY_UNLOCKED, \"Error: Wallet is already unlocked for mixing only.\");\n \n     if (!pwalletMain->IsLocked())"
      },
      {
        "sha": "29402e2cd52a8bd0f4830f1fe00c8bf5a82bcbec",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6050ee34e61b14ae90b1b956ac84d8c2c77d11bb/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6050ee34e61b14ae90b1b956ac84d8c2c77d11bb/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6050ee34e61b14ae90b1b956ac84d8c2c77d11bb",
        "patch": "@@ -340,7 +340,7 @@ bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool fForMixingOnl\n \n bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase)\n {\n-    bool fWasLocked = IsLocked();\n+    bool fWasLocked = IsLocked(true);\n     bool bUseKeePass = false;\n \n     SecureString strOldWalletPassphraseFinal;\n@@ -3947,7 +3947,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n     {\n         LOCK(cs_wallet);\n \n-        if (IsLocked())\n+        if (IsLocked(true))\n             return false;\n \n         // Top up key pool\n@@ -4011,7 +4011,7 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fIn\n     {\n         LOCK(cs_wallet);\n \n-        if (!IsLocked())\n+        if (!IsLocked(true))\n             TopUpKeyPool();\n \n         fInternal = fInternal && IsHDEnabled();\n@@ -4075,7 +4075,7 @@ bool CWallet::GetKeyFromPool(CPubKey& result, bool fInternal)\n         ReserveKeyFromKeyPool(nIndex, keypool, fInternal);\n         if (nIndex == -1)\n         {\n-            if (IsLocked()) return false;\n+            if (IsLocked(true)) return false;\n             // TODO: implement keypool for all accouts?\n             result = GenerateNewKey(0, fInternal);\n             return true;\n@@ -4996,7 +4996,7 @@ bool AutoBackupWallet(CWallet* wallet, const std::string& strWalletFile_, std::s\n         // Update nKeysLeftSinceAutoBackup using current external keypool size\n         wallet->nKeysLeftSinceAutoBackup = wallet->KeypoolCountExternalKeys();\n         LogPrintf(\"nKeysLeftSinceAutoBackup: %d\\n\", wallet->nKeysLeftSinceAutoBackup);\n-        if(wallet->IsLocked()) {\n+        if(wallet->IsLocked(true)) {\n             strBackupWarningRet = _(\"Wallet is locked, can't replenish keypool! Automatic backups and mixing are disabled, please unlock your wallet to replenish keypool.\");\n             LogPrintf(\"%s\\n\", strBackupWarningRet);\n             nWalletBackups = -2;"
      }
    ]
  },
  {
    "sha": "52062804a4931f6066dc135e7645906080f9270b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjA2MjgwNGE0OTMxZjYwNjZkYzEzNWU3NjQ1OTA2MDgwZjkyNzBi",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:51Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:51Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit fa85e2e6e227f163be3221ab0681cb0c5f59ee80.",
      "tree": {
        "sha": "b8e6ca4f9e7057fcd92bcc98afbdd45ce06b601d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8e6ca4f9e7057fcd92bcc98afbdd45ce06b601d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52062804a4931f6066dc135e7645906080f9270b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52062804a4931f6066dc135e7645906080f9270b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/52062804a4931f6066dc135e7645906080f9270b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52062804a4931f6066dc135e7645906080f9270b/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6050ee34e61b14ae90b1b956ac84d8c2c77d11bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6050ee34e61b14ae90b1b956ac84d8c2c77d11bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6050ee34e61b14ae90b1b956ac84d8c2c77d11bb"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "03be7048b55db5464bab155b4163aeb874303347",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52062804a4931f6066dc135e7645906080f9270b/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52062804a4931f6066dc135e7645906080f9270b/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=52062804a4931f6066dc135e7645906080f9270b",
        "patch": "@@ -432,14 +432,14 @@ void CSuperblockManager::CreateSuperblock(CMutableTransaction& txNewRet, int nBl\n     DBG( std::cout << \"CSuperblockManager::CreateSuperblock End\" << std::endl; );\n }\n \n-bool CSuperblockManager::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount &blockReward)\n+bool CSuperblockManager::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward)\n {\n     // GET BEST SUPERBLOCK, SHOULD MATCH\n     LOCK(governance.cs);\n \n     CSuperblock_sptr pSuperblock;\n     if(CSuperblockManager::GetBestSuperblock(pSuperblock, nBlockHeight)) {\n-        return pSuperblock->IsValid(txNew, nBlockHeight, blockReward);\n+        return pSuperblock->IsValid(txNew, nBlockHeight, nFee, blockReward);\n     }\n \n     return false;\n@@ -665,7 +665,7 @@ CAmount CSuperblock::GetPaymentsTotalAmount()\n *   - Does this transaction match the superblock?\n */\n \n-bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount &blockReward)\n+bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount& nFee, const CAmount &blockReward)\n {\n     // TODO : LOCK(cs);\n     // No reason for a lock here now since this method only accesses data\n@@ -710,8 +710,8 @@ bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, const CAm\n     // miner should not get more than he would usually get\n     CAmount nBlockValue = txNew.GetValueOut();\n     \n-\tif(nBlockValue > (blockReward + nPaymentsTotalAmount)) {\n-        LogPrintf(\"CSuperblock::IsValid -- ERROR: Block invalid, block value limit exceeded: block %lld, limit %lld\\n\", nBlockValue, blockReward + nPaymentsTotalAmount);\n+\tif(nBlockValue > (blockReward + nFee + nPaymentsTotalAmount)) {\n+        LogPrintf(\"CSuperblock::IsValid -- ERROR: Block invalid, block value limit exceeded: block %lld, limit %lld\\n\", nBlockValue, blockReward + nFee + nPaymentsTotalAmount);\n         return false;\n     }\n "
      }
    ]
  },
  {
    "sha": "4b7676ec62f101b9feffc51e6eab5d29c0402595",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Yjc2NzZlYzYyZjEwMWI5ZmVmZmM1MWU2ZWFiNWQyOWMwNDAyNTk1",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:52Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:52Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit 1f2abb53bdbdc89b65cd7d3e10df7ec7e26df12e.",
      "tree": {
        "sha": "0e7659cabce857a17635d8ab9e9f85288718ab7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e7659cabce857a17635d8ab9e9f85288718ab7c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b7676ec62f101b9feffc51e6eab5d29c0402595",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b7676ec62f101b9feffc51e6eab5d29c0402595",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b7676ec62f101b9feffc51e6eab5d29c0402595",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b7676ec62f101b9feffc51e6eab5d29c0402595/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52062804a4931f6066dc135e7645906080f9270b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52062804a4931f6066dc135e7645906080f9270b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52062804a4931f6066dc135e7645906080f9270b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "29e4376e2e46e1fcfe2da1b862cd7051a67d4550",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b7676ec62f101b9feffc51e6eab5d29c0402595/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b7676ec62f101b9feffc51e6eab5d29c0402595/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=4b7676ec62f101b9feffc51e6eab5d29c0402595",
        "patch": "@@ -259,7 +259,7 @@ bool CCryptoKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n         if (!IsCrypted())\n             return CBasicKeyStore::AddKeyPubKey(key, pubkey);\n \n-       if (IsLocked())\n+        if (IsLocked(true))\n             return false;\n \n         std::vector<unsigned char> vchCryptedSecret;"
      }
    ]
  },
  {
    "sha": "b9e0522a01d9d50e06acf7333d8a93a721367f86",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWUwNTIyYTAxZDlkNTBlMDZhY2Y3MzMzZDhhOTNhNzIxMzY3Zjg2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:54Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:54Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit c512b0f4be931891986a13e4ea25dad45dd65621.",
      "tree": {
        "sha": "977be0d624dcc7565bc85b9d883001c7089bc260",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/977be0d624dcc7565bc85b9d883001c7089bc260"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9e0522a01d9d50e06acf7333d8a93a721367f86",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9e0522a01d9d50e06acf7333d8a93a721367f86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9e0522a01d9d50e06acf7333d8a93a721367f86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9e0522a01d9d50e06acf7333d8a93a721367f86/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b7676ec62f101b9feffc51e6eab5d29c0402595",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b7676ec62f101b9feffc51e6eab5d29c0402595",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b7676ec62f101b9feffc51e6eab5d29c0402595"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 9,
      "deletions": 10
    },
    "files": [
      {
        "sha": "a0a0761c8c7cc2b3a74086d79f6f270339dd1ff9",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9e0522a01d9d50e06acf7333d8a93a721367f86/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9e0522a01d9d50e06acf7333d8a93a721367f86/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=b9e0522a01d9d50e06acf7333d8a93a721367f86",
        "patch": "@@ -200,18 +200,17 @@ bool CCryptoKeyStore::SetCrypted()\n     return true;\n }\n \n-bool CCryptoKeyStore::Lock()\n+bool CCryptoKeyStore::Lock(bool fAllowMixing)\n {\n-\tif (!SetCrypted())\n-\t\treturn false;\n-\n-\t{\n-\t\tLOCK(cs_KeyStore);\n-\t\tvMasterKey.clear();\n-\t}\n+    if (!SetCrypted())\n+        return false;\n \n-\tNotifyStatusChanged(this);\n-\treturn true;\n+    if(!fAllowMixing) {\n+        LOCK(cs_KeyStore);\n+        vMasterKey.clear();\n+    }\n+    NotifyStatusChanged(this);\n+    return true;\n }\n \n bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)"
      }
    ]
  },
  {
    "sha": "9b327eb377b2e6f17a44c7cda1c5fff9b3df3642",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjMyN2ViMzc3YjJlNmYxN2E0NGM3Y2RhMWM1ZmZmOWIzZGYzNjQy",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:56Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:56Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit e19e6ee5d22359492dfab145c061df18f0c3b296.",
      "tree": {
        "sha": "c47ba631385a247e2f1407375d51d799b0c767e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c47ba631385a247e2f1407375d51d799b0c767e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b327eb377b2e6f17a44c7cda1c5fff9b3df3642",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b327eb377b2e6f17a44c7cda1c5fff9b3df3642",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b327eb377b2e6f17a44c7cda1c5fff9b3df3642",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b327eb377b2e6f17a44c7cda1c5fff9b3df3642/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9e0522a01d9d50e06acf7333d8a93a721367f86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9e0522a01d9d50e06acf7333d8a93a721367f86",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9e0522a01d9d50e06acf7333d8a93a721367f86"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "919c3b81dbbf23b1f6719315bc20383d514c7b62",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b327eb377b2e6f17a44c7cda1c5fff9b3df3642/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b327eb377b2e6f17a44c7cda1c5fff9b3df3642/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=9b327eb377b2e6f17a44c7cda1c5fff9b3df3642",
        "patch": "@@ -394,9 +394,18 @@ void CSuperblockManager::CreateSuperblock(CMutableTransaction& txNewRet, int nBl\n     voutSuperblockRet.clear();\n \n     // CONFIGURE SUPERBLOCK OUTPUTS\n-\n+\tpSuperblock->IsValid(txNewRet, nBlockHeight);\n     // Superblock payments are appended to the end of the coinbase vout vector\n     DBG( std::cout << \"CSuperblockManager::CreateSuperblock Number payments: \" << pSuperblock->CountPayments() << std::endl; );\n+\t// SYSCOIN\n+\t// payments should not exceed limit\n+\tCAmount nPaymentsTotalAmount = pSuperblock->GetPaymentsTotalAmount();\n+\tCAmount nPaymentsLimit = CSuperBlock::GetPaymentsLimit(nBlockHeight);\n+\tif (nPaymentsTotalAmount > nPaymentsLimit) {\n+\t\tLogPrintf(\"CreateSuperblock::IsValid -- Warning: Superblock invalid, payments limit exceeded: payments %lld, limit %lld\\n\", nPaymentsTotalAmount, nPaymentsLimit);\n+\t\treturn\n+\t}\n+\n \n     // TODO: How many payments can we add before things blow up?\n     //       Consider at least following limits:"
      }
    ]
  },
  {
    "sha": "bae89b7adbde6ea19a1644b9fcc7c810f3638d88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYWU4OWI3YWRiZGU2ZWExOWExNjQ0YjlmY2M3YzgxMGYzNjM4ZDg4",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:57Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:57Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit b60ae78279d350da3a228a5ed61578d91638773f.",
      "tree": {
        "sha": "9555f3b535b7adc205cdffef2e6f238e1ef56ebb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9555f3b535b7adc205cdffef2e6f238e1ef56ebb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bae89b7adbde6ea19a1644b9fcc7c810f3638d88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bae89b7adbde6ea19a1644b9fcc7c810f3638d88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bae89b7adbde6ea19a1644b9fcc7c810f3638d88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bae89b7adbde6ea19a1644b9fcc7c810f3638d88/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b327eb377b2e6f17a44c7cda1c5fff9b3df3642",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b327eb377b2e6f17a44c7cda1c5fff9b3df3642",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b327eb377b2e6f17a44c7cda1c5fff9b3df3642"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f026623fdbfc896fcf2537dcaf75bb1b84c519b6",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bae89b7adbde6ea19a1644b9fcc7c810f3638d88/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bae89b7adbde6ea19a1644b9fcc7c810f3638d88/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=bae89b7adbde6ea19a1644b9fcc7c810f3638d88",
        "patch": "@@ -142,6 +142,15 @@ bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight,  const CAmou\n                 LogPrint(\"gobject\", \"IsBlockPayeeValid -- Valid superblock at height %d: %s\", nBlockHeight, txNew.ToString());\n                 return true;\n             }\n+\t\t\telse {\n+\t\t\t\t// SYSCOIN\n+\t\t\t\t// payments should not exceed limit\n+\t\t\t\tCAmount nPaymentsLimit = CSuperBlock::GetPaymentsLimit(nBlockHeight);\n+\t\t\t\tif (txNew.GetValueOut() > nPaymentsLimit) {\n+\t\t\t\t\tLogPrintf(\"IsBlockPayeeValid -- Warning: Superblock invalid, payments limit exceeded: payments %lld, limit %lld\\n\", nPaymentsTotalAmount, nPaymentsLimit);\n+\t\t\t\t\treturn\n+\t\t\t\t}\n+\t\t\t}\n \n             LogPrintf(\"IsBlockPayeeValid -- ERROR: Invalid superblock detected at height %d: %s\", nBlockHeight, txNew.ToString());\n             // should NOT allow such superblocks, when superblocks are enabled"
      }
    ]
  },
  {
    "sha": "c9c60df97d406d9798ddb7f222ad592104b34ef3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWM2MGRmOTdkNDA2ZDk3OThkZGI3ZjIyMmFkNTkyMTA0YjM0ZWYz",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:59Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:40:59Z"
      },
      "message": "Revert \"compile\"\n\nThis reverts commit 70b3b04f18f192936a57547869507880e66502d6.",
      "tree": {
        "sha": "711eef3efcc4e15aeb62032b75f95b40ef51e505",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/711eef3efcc4e15aeb62032b75f95b40ef51e505"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9c60df97d406d9798ddb7f222ad592104b34ef3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9c60df97d406d9798ddb7f222ad592104b34ef3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9c60df97d406d9798ddb7f222ad592104b34ef3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9c60df97d406d9798ddb7f222ad592104b34ef3/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bae89b7adbde6ea19a1644b9fcc7c810f3638d88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bae89b7adbde6ea19a1644b9fcc7c810f3638d88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bae89b7adbde6ea19a1644b9fcc7c810f3638d88"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "af798f2619cfd89047d2c7edc4679eab3926b74e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9c60df97d406d9798ddb7f222ad592104b34ef3/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9c60df97d406d9798ddb7f222ad592104b34ef3/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c9c60df97d406d9798ddb7f222ad592104b34ef3",
        "patch": "@@ -597,8 +597,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n \n-\t/* the HD chain data model (external chain counters) */\n-\tCHDChain hdChain;\n \n     bool fFileBacked;\n "
      }
    ]
  },
  {
    "sha": "1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjQzYzg3NmI0YmFlN2Q5ZDFiMWU5MGExZDZhZjE0N2VkZDJkODcz",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:41:01Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:41:01Z"
      },
      "message": "Revert \"fix wallet code to remove dash's hd chain stuff\"\n\nThis reverts commit 8ca4ecfe46163d0e7fe87f3128441a3d87636956.",
      "tree": {
        "sha": "2799e06f8501a8f2493bda70edcee63395d1645a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2799e06f8501a8f2493bda70edcee63395d1645a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c9c60df97d406d9798ddb7f222ad592104b34ef3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9c60df97d406d9798ddb7f222ad592104b34ef3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9c60df97d406d9798ddb7f222ad592104b34ef3"
      }
    ],
    "stats": {
      "total": 4192,
      "additions": 2527,
      "deletions": 1665
    },
    "files": [
      {
        "sha": "36cfe2363e0c653d0ed7189f91b446b594d5ca1e",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
        "patch": "@@ -129,6 +129,7 @@ SYSCOIN_CORE_H = \\\n   governance-vote.h \\\n   governance-votedb.h \\\n   flat-database.h \\\n+  hdchain.h \\\n   httprpc.h \\\n   httpserver.h \\\n   indirectmap.h \\\n@@ -386,6 +387,7 @@ libsyscoin_common_a_SOURCES = \\\n   compressor.cpp \\\n   core_read.cpp \\\n   core_write.cpp \\\n+  hdchain.cpp \\\n   key.cpp \\\n   keystore.cpp \\\n   netaddress.cpp \\"
      },
      {
        "sha": "0194cf92966fbfecb76b8f20c3721d1dcc43840e",
        "filename": "src/governance-classes.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 15,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/governance-classes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/governance-classes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/governance-classes.cpp?ref=1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
        "patch": "@@ -394,18 +394,9 @@ void CSuperblockManager::CreateSuperblock(CMutableTransaction& txNewRet, int nBl\n     voutSuperblockRet.clear();\n \n     // CONFIGURE SUPERBLOCK OUTPUTS\n-\tpSuperblock->IsValid(txNewRet, nBlockHeight);\n+\n     // Superblock payments are appended to the end of the coinbase vout vector\n     DBG( std::cout << \"CSuperblockManager::CreateSuperblock Number payments: \" << pSuperblock->CountPayments() << std::endl; );\n-\t// SYSCOIN\n-\t// payments should not exceed limit\n-\tCAmount nPaymentsTotalAmount = pSuperblock->GetPaymentsTotalAmount();\n-\tCAmount nPaymentsLimit = CSuperBlock::GetPaymentsLimit(nBlockHeight);\n-\tif (nPaymentsTotalAmount > nPaymentsLimit) {\n-\t\tLogPrintf(\"CreateSuperblock::IsValid -- Warning: Superblock invalid, payments limit exceeded: payments %lld, limit %lld\\n\", nPaymentsTotalAmount, nPaymentsLimit);\n-\t\treturn\n-\t}\n-\n \n     // TODO: How many payments can we add before things blow up?\n     //       Consider at least following limits:\n@@ -441,14 +432,14 @@ void CSuperblockManager::CreateSuperblock(CMutableTransaction& txNewRet, int nBl\n     DBG( std::cout << \"CSuperblockManager::CreateSuperblock End\" << std::endl; );\n }\n \n-bool CSuperblockManager::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount &nFee, const CAmount &blockReward)\n+bool CSuperblockManager::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount &blockReward)\n {\n     // GET BEST SUPERBLOCK, SHOULD MATCH\n     LOCK(governance.cs);\n \n     CSuperblock_sptr pSuperblock;\n     if(CSuperblockManager::GetBestSuperblock(pSuperblock, nBlockHeight)) {\n-        return pSuperblock->IsValid(txNew, nBlockHeight, nFee, blockReward);\n+        return pSuperblock->IsValid(txNew, nBlockHeight, blockReward);\n     }\n \n     return false;\n@@ -674,7 +665,7 @@ CAmount CSuperblock::GetPaymentsTotalAmount()\n *   - Does this transaction match the superblock?\n */\n \n-bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount& nFee, const CAmount &blockReward)\n+bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, const CAmount &blockReward)\n {\n     // TODO : LOCK(cs);\n     // No reason for a lock here now since this method only accesses data\n@@ -719,8 +710,8 @@ bool CSuperblock::IsValid(const CTransaction& txNew, int nBlockHeight, const CAm\n     // miner should not get more than he would usually get\n     CAmount nBlockValue = txNew.GetValueOut();\n     \n-\tif(nBlockValue > (blockReward + nFee + nPaymentsTotalAmount)) {\n-        LogPrintf(\"CSuperblock::IsValid -- ERROR: Block invalid, block value limit exceeded: block %lld, limit %lld\\n\", nBlockValue, blockReward + nFee + nPaymentsTotalAmount);\n+\tif(nBlockValue > (blockReward + nPaymentsTotalAmount)) {\n+        LogPrintf(\"CSuperblock::IsValid -- ERROR: Block invalid, block value limit exceeded: block %lld, limit %lld\\n\", nBlockValue, blockReward + nPaymentsTotalAmount);\n         return false;\n     }\n "
      },
      {
        "sha": "498e7c8f0334efc94c6b7c581b8d2f3d6561030a",
        "filename": "src/hdchain.cpp",
        "status": "added",
        "additions": 212,
        "deletions": 0,
        "changes": 212,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/hdchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/hdchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hdchain.cpp?ref=1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
        "patch": "@@ -0,0 +1,212 @@\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+\n+#include \"base58.h\"\n+#include \"bip39.h\"\n+#include \"chainparams.h\"\n+#include \"hdchain.h\"\n+#include \"tinyformat.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+bool CHDChain::SetNull()\n+{\n+    LOCK(cs_accounts);\n+    nVersion = CURRENT_VERSION;\n+    id = uint256();\n+    fCrypted = false;\n+    vchSeed.clear();\n+    vchMnemonic.clear();\n+    vchMnemonicPassphrase.clear();\n+    mapAccounts.clear();\n+    // default blank account\n+    mapAccounts.insert(std::pair<uint32_t, CHDAccount>(0, CHDAccount()));\n+    return IsNull();\n+}\n+\n+bool CHDChain::IsNull() const\n+{\n+    return vchSeed.empty() || id == uint256();\n+}\n+\n+void CHDChain::SetCrypted(bool fCryptedIn)\n+{\n+    fCrypted = fCryptedIn;\n+}\n+\n+bool CHDChain::IsCrypted() const\n+{\n+    return fCrypted;\n+}\n+\n+void CHDChain::Debug(const std::string& strName) const\n+{\n+    DBG(\n+        std::cout << __func__ << \": ---\" << strName << \"---\" << std::endl;\n+        if (fCrypted) {\n+            std::cout << \"mnemonic: ***CRYPTED***\" << std::endl;\n+            std::cout << \"mnemonicpassphrase: ***CRYPTED***\" << std::endl;\n+            std::cout << \"seed: ***CRYPTED***\" << std::endl;\n+        } else {\n+            std::cout << \"mnemonic: \" << std::string(vchMnemonic.begin(), vchMnemonic.end()).c_str() << std::endl;\n+            std::cout << \"mnemonicpassphrase: \" << std::string(vchMnemonicPassphrase.begin(), vchMnemonicPassphrase.end()).c_str() << std::endl;\n+            std::cout << \"seed: \" << HexStr(vchSeed).c_str() << std::endl;\n+\n+            CExtKey extkey;\n+            extkey.SetMaster(&vchSeed[0], vchSeed.size());\n+\n+            CSyscoinExtKey b58extkey;\n+            b58extkey.SetKey(extkey);\n+            std::cout << \"extended private masterkey: \" << b58extkey.ToString().c_str() << std::endl;\n+\n+            CExtPubKey extpubkey;\n+            extpubkey = extkey.Neuter();\n+\n+            CSyscoinExtPubKey b58extpubkey;\n+            b58extpubkey.SetKey(extpubkey);\n+            std::cout << \"extended public masterkey: \" << b58extpubkey.ToString().c_str() << std::endl;\n+        }\n+    );\n+}\n+\n+bool CHDChain::SetMnemonic(const SecureVector& vchMnemonic, const SecureVector& vchMnemonicPassphrase, bool fUpdateID)\n+{\n+    return SetMnemonic(SecureString(vchMnemonic.begin(), vchMnemonic.end()), SecureString(vchMnemonicPassphrase.begin(), vchMnemonicPassphrase.end()), fUpdateID);\n+}\n+\n+bool CHDChain::SetMnemonic(const SecureString& ssMnemonic, const SecureString& ssMnemonicPassphrase, bool fUpdateID)\n+{\n+    SecureString ssMnemonicTmp = ssMnemonic;\n+\n+    if (fUpdateID) {\n+        // can't (re)set mnemonic if seed was already set\n+        if (!IsNull())\n+            return false;\n+\n+        // empty mnemonic i.e. \"generate a new one\"\n+        if (ssMnemonic.empty()) {\n+            ssMnemonicTmp = CMnemonic::Generate(256);\n+        }\n+        // NOTE: default mnemonic passphrase is an empty string\n+\n+        // printf(\"mnemonic: %s\\n\", ssMnemonicTmp.c_str());\n+        if (!CMnemonic::Check(ssMnemonicTmp)) {\n+            throw std::runtime_error(std::string(__func__) + \": invalid mnemonic: `\" + std::string(ssMnemonicTmp.c_str()) + \"`\");\n+        }\n+\n+        CMnemonic::ToSeed(ssMnemonicTmp, ssMnemonicPassphrase, vchSeed);\n+        id = GetSeedHash();\n+    }\n+\n+    vchMnemonic = SecureVector(ssMnemonicTmp.begin(), ssMnemonicTmp.end());\n+    vchMnemonicPassphrase = SecureVector(ssMnemonicPassphrase.begin(), ssMnemonicPassphrase.end());\n+\n+    return !IsNull();\n+}\n+\n+bool CHDChain::GetMnemonic(SecureVector& vchMnemonicRet, SecureVector& vchMnemonicPassphraseRet) const\n+{\n+    // mnemonic was not set, fail\n+    if (vchMnemonic.empty())\n+        return false;\n+\n+    vchMnemonicRet = vchMnemonic;\n+    vchMnemonicPassphraseRet = vchMnemonicPassphrase;\n+    return true;\n+}\n+\n+bool CHDChain::GetMnemonic(SecureString& ssMnemonicRet, SecureString& ssMnemonicPassphraseRet) const\n+{\n+    // mnemonic was not set, fail\n+    if (vchMnemonic.empty())\n+        return false;\n+\n+    ssMnemonicRet = SecureString(vchMnemonic.begin(), vchMnemonic.end());\n+    ssMnemonicPassphraseRet = SecureString(vchMnemonicPassphrase.begin(), vchMnemonicPassphrase.end());\n+\n+    return true;\n+}\n+\n+bool CHDChain::SetSeed(const SecureVector& vchSeedIn, bool fUpdateID)\n+{\n+    vchSeed = vchSeedIn;\n+\n+    if (fUpdateID) {\n+        id = GetSeedHash();\n+    }\n+\n+    return !IsNull();\n+}\n+\n+SecureVector CHDChain::GetSeed() const\n+{\n+    return vchSeed;\n+}\n+\n+uint256 CHDChain::GetSeedHash()\n+{\n+    return Hash(vchSeed.begin(), vchSeed.end());\n+}\n+\n+void CHDChain::DeriveChildExtKey(uint32_t nAccountIndex, bool fInternal, uint32_t nChildIndex, CExtKey& extKeyRet)\n+{\n+    // Use BIP44 keypath scheme i.e. m / purpose' / coin_type' / account' / change / address_index\n+    CExtKey masterKey;              //hd master key\n+    CExtKey purposeKey;             //key at m/purpose'\n+    CExtKey cointypeKey;            //key at m/purpose'/coin_type'\n+    CExtKey accountKey;             //key at m/purpose'/coin_type'/account'\n+    CExtKey changeKey;              //key at m/purpose'/coin_type'/account'/change\n+    CExtKey childKey;               //key at m/purpose'/coin_type'/account'/change/address_index\n+\n+    masterKey.SetMaster(&vchSeed[0], vchSeed.size());\n+\n+    // Use hardened derivation for purpose, coin_type and account\n+    // (keys >= 0x80000000 are hardened after bip32)\n+\n+    // derive m/purpose'\n+    masterKey.Derive(purposeKey, 44 | 0x80000000);\n+    // derive m/purpose'/coin_type'\n+    purposeKey.Derive(cointypeKey, Params().ExtCoinType() | 0x80000000);\n+    // derive m/purpose'/coin_type'/account'\n+    cointypeKey.Derive(accountKey, nAccountIndex | 0x80000000);\n+    // derive m/purpose'/coin_type'/account/change\n+    accountKey.Derive(changeKey, fInternal ? 1 : 0);\n+    // derive m/purpose'/coin_type'/account/change/address_index\n+    changeKey.Derive(extKeyRet, nChildIndex);\n+}\n+\n+void CHDChain::AddAccount()\n+{\n+    LOCK(cs_accounts);\n+    mapAccounts.insert(std::pair<uint32_t, CHDAccount>(mapAccounts.size(), CHDAccount()));\n+}\n+\n+bool CHDChain::GetAccount(uint32_t nAccountIndex, CHDAccount& hdAccountRet)\n+{\n+    LOCK(cs_accounts);\n+    if (nAccountIndex > mapAccounts.size() - 1)\n+        return false;\n+    hdAccountRet = mapAccounts[nAccountIndex];\n+    return true;\n+}\n+\n+bool CHDChain::SetAccount(uint32_t nAccountIndex, const CHDAccount& hdAccount)\n+{\n+    LOCK(cs_accounts);\n+    // can only replace existing accounts\n+    if (nAccountIndex > mapAccounts.size() - 1)\n+        return false;\n+    mapAccounts[nAccountIndex] = hdAccount;\n+    return true;\n+}\n+\n+size_t CHDChain::CountAccounts()\n+{\n+    LOCK(cs_accounts);\n+    return mapAccounts.size();\n+}\n+\n+std::string CHDPubKey::GetKeyPath() const\n+{\n+    return strprintf(\"m/44'/%d'/%d'/%d/%d\", Params().ExtCoinType(), nAccountIndex, nChangeIndex, extPubKey.nChild);\n+}"
      },
      {
        "sha": "34e8e33a8cf918fe2569a7e651ff0191f6a55040",
        "filename": "src/hdchain.h",
        "status": "added",
        "additions": 150,
        "deletions": 0,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/hdchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/hdchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hdchain.h?ref=1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
        "patch": "@@ -0,0 +1,150 @@\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+#ifndef SYS_HDCHAIN_H\n+#define SYS_HDCHAIN_H\n+\n+#include \"key.h\"\n+#include \"sync.h\"\n+\n+/* hd account data model */\n+class CHDAccount\n+{\n+public:\n+    uint32_t nExternalChainCounter;\n+    uint32_t nInternalChainCounter;\n+\n+    CHDAccount() : nExternalChainCounter(0), nInternalChainCounter(0) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n+    {\n+        READWRITE(nExternalChainCounter);\n+        READWRITE(nInternalChainCounter);\n+    }\n+};\n+\n+/* simple HD chain data model */\n+class CHDChain\n+{\n+private:\n+    static const int CURRENT_VERSION = 1;\n+    int nVersion;\n+\n+    uint256 id;\n+\n+    bool fCrypted;\n+\n+    SecureVector vchSeed;\n+    SecureVector vchMnemonic;\n+    SecureVector vchMnemonicPassphrase;\n+\n+    std::map<uint32_t, CHDAccount> mapAccounts;\n+    // critical section to protect mapAccounts\n+    mutable CCriticalSection cs_accounts;\n+\n+public:\n+\n+    CHDChain() { SetNull(); }\n+    CHDChain(const CHDChain& other) :\n+        nVersion(other.nVersion),\n+        id(other.id),\n+        fCrypted(other.fCrypted),\n+        vchSeed(other.vchSeed),\n+        vchMnemonic(other.vchMnemonic),\n+        vchMnemonicPassphrase(other.vchMnemonicPassphrase),\n+        mapAccounts(other.mapAccounts)\n+        {}\n+\n+    ADD_SERIALIZE_METHODS;\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n+    {\n+        LOCK(cs_accounts);\n+        READWRITE(this->nVersion);\n+        READWRITE(id);\n+        READWRITE(fCrypted);\n+        READWRITE(vchSeed);\n+        READWRITE(vchMnemonic);\n+        READWRITE(vchMnemonicPassphrase);\n+        READWRITE(mapAccounts);\n+    }\n+\n+    void swap(CHDChain& first, CHDChain& second) // nothrow\n+    {\n+        // enable ADL (not necessary in our case, but good practice)\n+        using std::swap;\n+\n+        // by swapping the members of two classes,\n+        // the two classes are effectively swapped\n+        swap(first.nVersion, second.nVersion);\n+        swap(first.id, second.id);\n+        swap(first.fCrypted, second.fCrypted);\n+        swap(first.vchSeed, second.vchSeed);\n+        swap(first.vchMnemonic, second.vchMnemonic);\n+        swap(first.vchMnemonicPassphrase, second.vchMnemonicPassphrase);\n+        swap(first.mapAccounts, second.mapAccounts);\n+    }\n+    CHDChain& operator=(CHDChain from)\n+    {\n+        swap(*this, from);\n+        return *this;\n+    }\n+\n+    bool SetNull();\n+    bool IsNull() const;\n+\n+    void SetCrypted(bool fCryptedIn);\n+    bool IsCrypted() const;\n+\n+    void Debug(const std::string& strName) const;\n+\n+    bool SetMnemonic(const SecureVector& vchMnemonic, const SecureVector& vchMnemonicPassphrase, bool fUpdateID);\n+    bool SetMnemonic(const SecureString& ssMnemonic, const SecureString& ssMnemonicPassphrase, bool fUpdateID);\n+    bool GetMnemonic(SecureVector& vchMnemonicRet, SecureVector& vchMnemonicPassphraseRet) const;\n+    bool GetMnemonic(SecureString& ssMnemonicRet, SecureString& ssMnemonicPassphraseRet) const;\n+\n+    bool SetSeed(const SecureVector& vchSeedIn, bool fUpdateID);\n+    SecureVector GetSeed() const;\n+\n+    uint256 GetID() const { return id; }\n+\n+    uint256 GetSeedHash();\n+    void DeriveChildExtKey(uint32_t nAccountIndex, bool fInternal, uint32_t nChildIndex, CExtKey& extKeyRet);\n+\n+    void AddAccount();\n+    bool GetAccount(uint32_t nAccountIndex, CHDAccount& hdAccountRet);\n+    bool SetAccount(uint32_t nAccountIndex, const CHDAccount& hdAccount);\n+    size_t CountAccounts();\n+};\n+\n+/* hd pubkey data model */\n+class CHDPubKey\n+{\n+private:\n+    static const int CURRENT_VERSION = 1;\n+    int nVersion;\n+\n+public:\n+    CExtPubKey extPubKey;\n+    uint256 hdchainID;\n+    uint32_t nAccountIndex;\n+    uint32_t nChangeIndex;\n+\n+    CHDPubKey() : nVersion(CHDPubKey::CURRENT_VERSION), nAccountIndex(0), nChangeIndex(0) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action)\n+    {\n+        READWRITE(this->nVersion);\n+        READWRITE(extPubKey);\n+        READWRITE(hdchainID);\n+        READWRITE(nAccountIndex);\n+        READWRITE(nChangeIndex);\n+    }\n+\n+    std::string GetKeyPath() const;\n+};\n+\n+#endif // SYS_HDCHAIN_H"
      },
      {
        "sha": "32b0c5c478321cc58130fe60787995816f5378bd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
        "patch": "@@ -968,6 +968,11 @@ void InitParameterInteraction()\n         LogPrintf(\"%s: parameter interaction: -liquidityprovider=%d -> setting -privatesendmultisession=0\\n\", __func__, nLiqProvTmp);\n     }\n \n+    if (IsArgSet(\"-hdseed\") && IsHex(GetArg(\"-hdseed\", \"not hex\")) && (IsArgSet(\"-mnemonic\") || IsArgSet(\"-mnemonicpassphrase\"))) {\n+        ForceRemoveArg(\"-mnemonic\");\n+        ForceRemoveArg(\"-mnemonicpassphrase\");\n+        LogPrintf(\"%s: parameter interaction: can't use -hdseed and -mnemonic/-mnemonicpassphrase together, will prefer -seed\\n\", __func__);\n+    }\n #endif // ENABLE_WALLET\n \n     // Make sure additional indexes are recalculated correctly in VerifyDB"
      },
      {
        "sha": "25d2cde21307b106ca1ee0387fc069c8d26e7b78",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
        "patch": "@@ -113,3 +113,9 @@ bool CBasicKeyStore::HaveWatchOnly() const\n     LOCK(cs_KeyStore);\n     return (!setWatchOnly.empty());\n }\n+\n+bool CBasicKeyStore::GetHDChain(CHDChain& hdChainRet) const\n+{\n+    hdChainRet = hdChain;\n+    return !hdChain.IsNull();\n+}"
      },
      {
        "sha": "c3f167424e69ddc24d8e065940c68a17afc4fbea",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
        "patch": "@@ -5,6 +5,8 @@\n \n #ifndef SYSCOIN_KEYSTORE_H\n #define SYSCOIN_KEYSTORE_H\n+\n+#include \"hdchain.h\"\n #include \"key.h\"\n #include \"pubkey.h\"\n #include \"script/script.h\"\n@@ -58,6 +60,8 @@ class CBasicKeyStore : public CKeyStore\n     WatchKeyMap mapWatchKeys;\n     ScriptMap mapScripts;\n     WatchOnlySet setWatchOnly;\n+    /* the HD chain data model*/\n+    CHDChain hdChain;\n \n public:\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n@@ -106,6 +110,7 @@ class CBasicKeyStore : public CKeyStore\n     virtual bool HaveWatchOnly(const CScript &dest) const override;\n     virtual bool HaveWatchOnly() const override;\n \n+    virtual bool GetHDChain(CHDChain& hdChainRet) const;\n };\n \n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;"
      },
      {
        "sha": "8fcdce17f704df86bd4f76b72284fdf766d20493",
        "filename": "src/masternode-payments.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/masternode-payments.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/masternode-payments.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternode-payments.cpp?ref=1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
        "patch": "@@ -142,15 +142,6 @@ bool IsBlockPayeeValid(const CTransaction& txNew, int nBlockHeight,  const CAmou\n                 LogPrint(\"gobject\", \"IsBlockPayeeValid -- Valid superblock at height %d: %s\", nBlockHeight, txNew.ToString());\n                 return true;\n             }\n-\t\t\telse {\n-\t\t\t\t// SYSCOIN\n-\t\t\t\t// payments should not exceed limit\n-\t\t\t\tCAmount nPaymentsLimit = CSuperBlock::GetPaymentsLimit(nBlockHeight);\n-\t\t\t\tif (txNew.GetValueOut() > nPaymentsLimit) {\n-\t\t\t\t\tLogPrintf(\"IsBlockPayeeValid -- Warning: Superblock invalid, payments limit exceeded: payments %lld, limit %lld\\n\", nPaymentsTotalAmount, nPaymentsLimit);\n-\t\t\t\t\treturn\n-\t\t\t\t}\n-\t\t\t}\n \n             LogPrintf(\"IsBlockPayeeValid -- ERROR: Invalid superblock detected at height %d: %s\", nBlockHeight, txNew.ToString());\n             // should NOT allow such superblocks, when superblocks are enabled"
      },
      {
        "sha": "d665dff435c489e4fac3bc67a786ebe55cb65330",
        "filename": "src/qt/syscoinstrings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/qt/syscoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/qt/syscoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/syscoinstrings.cpp?ref=1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
        "patch": "@@ -245,7 +245,7 @@ QT_TRANSLATE_NOOP(\"syscoin-core\", \"\"\n QT_TRANSLATE_NOOP(\"syscoin-core\", \"\"\n \"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\"),\n QT_TRANSLATE_NOOP(\"syscoin-core\", \"\"\n-\"Use hierarchical deterministic key generation (HD). Only \"\n+\"Use hierarchical deterministic key generation (HD) after bip39/bip44. Only \"\n \"has effect during wallet creation/first start\"),\n QT_TRANSLATE_NOOP(\"syscoin-core\", \"\"\n \"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: \""
      },
      {
        "sha": "61f4836b20585fce2a732e3ca740661036dc787e",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
        "patch": "@@ -327,8 +327,8 @@ UniValue validateaddress(const JSONRPCRequest& request)\n             \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n             \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n             \"  \\\"timestamp\\\" : timestamp,        (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-\t\t\t\"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n-\t\t\t\"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n+            \"  \\\"hdchainid\\\" : \\\"<hash>\\\"        (string, optional) The ID of the HD chain\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"validateaddress\", \"\\\"XwnLY9Tf7Zsef8gMGL2fhWA9ZmMjt4KPwg\\\"\")\n@@ -388,12 +388,11 @@ UniValue validateaddress(const JSONRPCRequest& request)\n                 ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n             }\n \n-\t\t\tCKeyID keyID;\n-\t\t\tif (pwalletMain && address.GetKeyID(keyID) && pwalletMain->mapKeyMetadata.count(keyID) && !pwalletMain->mapKeyMetadata[keyID].hdKeypath.empty())\n-\t\t\t{\n-\t\t\t\tret.push_back(Pair(\"hdkeypath\", pwalletMain->mapKeyMetadata[keyID].hdKeypath));\n-\t\t\t\tret.push_back(Pair(\"hdmasterkeyid\", pwalletMain->mapKeyMetadata[keyID].hdMasterKeyID.GetHex()));\n-\t\t\t}\n+            CHDChain hdChainCurrent;\n+            if (!keyID.IsNull() && pwalletMain->mapHdPubKeys.count(keyID) && pwalletMain->GetHDChain(hdChainCurrent)) {\n+                ret.push_back(Pair(\"hdkeypath\", pwalletMain->mapHdPubKeys[keyID].GetKeyPath()));\n+                ret.push_back(Pair(\"hdchainid\", hdChainCurrent.GetID().GetHex()));\n+            }\n         }\n #endif\n     }"
      },
      {
        "sha": "ebf6c1bf37d3df4ee4a64804480ee50786787f5d",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 192,
        "deletions": 35,
        "changes": 227,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
        "patch": "@@ -209,46 +209,64 @@ bool CCryptoKeyStore::Lock(bool fAllowMixing)\n         LOCK(cs_KeyStore);\n         vMasterKey.clear();\n     }\n+\n+    fOnlyMixingAllowed = fAllowMixing;\n     NotifyStatusChanged(this);\n     return true;\n }\n \n-bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n+bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn, bool fForMixingOnly)\n {\n-\t{\n-\t\tLOCK(cs_KeyStore);\n-\t\tif (!SetCrypted())\n-\t\t\treturn false;\n-\n-\t\tbool keyPass = false;\n-\t\tbool keyFail = false;\n-\t\tCryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n-\t\tfor (; mi != mapCryptedKeys.end(); ++mi)\n-\t\t{\n-\t\t\tconst CPubKey &vchPubKey = (*mi).second.first;\n-\t\t\tconst std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-\t\t\tCKey key;\n-\t\t\tif (!DecryptKey(vMasterKeyIn, vchCryptedSecret, vchPubKey, key))\n-\t\t\t{\n-\t\t\t\tkeyFail = true;\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t\tkeyPass = true;\n-\t\t\tif (fDecryptionThoroughlyChecked)\n-\t\t\t\tbreak;\n-\t\t}\n-\t\tif (keyPass && keyFail)\n-\t\t{\n-\t\t\tLogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n-\t\t\tassert(false);\n-\t\t}\n-\t\tif (keyFail || !keyPass)\n-\t\t\treturn false;\n-\t\tvMasterKey = vMasterKeyIn;\n-\t\tfDecryptionThoroughlyChecked = true;\n-\t}\n-\tNotifyStatusChanged(this);\n-\treturn true;\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!SetCrypted())\n+            return false;\n+\n+        bool keyPass = false;\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n+        for (; mi != mapCryptedKeys.end(); ++mi)\n+        {\n+            const CPubKey &vchPubKey = (*mi).second.first;\n+            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(vMasterKeyIn, vchCryptedSecret, vchPubKey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (fDecryptionThoroughlyChecked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            assert(false);\n+        }\n+        if (keyFail || (!keyPass && cryptedHDChain.IsNull()))\n+            return false;\n+\n+        vMasterKey = vMasterKeyIn;\n+\n+        if(!cryptedHDChain.IsNull()) {\n+            bool chainPass = false;\n+            // try to decrypt seed and make sure it matches\n+            CHDChain hdChainTmp;\n+            if (DecryptHDChain(hdChainTmp)) {\n+                // make sure seed matches this chain\n+                chainPass = cryptedHDChain.GetID() == hdChainTmp.GetSeedHash();\n+            }\n+            if (!chainPass) {\n+                vMasterKey.clear();\n+                return false;\n+            }\n+        }\n+        fDecryptionThoroughlyChecked = true;\n+    }\n+    fOnlyMixingAllowed = fForMixingOnly;\n+    NotifyStatusChanged(this);\n+    return true;\n }\n \n bool CCryptoKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n@@ -345,3 +363,142 @@ bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n     }\n     return true;\n }\n+\n+bool CCryptoKeyStore::EncryptHDChain(const CKeyingMaterial& vMasterKeyIn)\n+{\n+    // should call EncryptKeys first\n+    if (!IsCrypted())\n+        return false;\n+\n+    if (!cryptedHDChain.IsNull())\n+        return true;\n+\n+    if (cryptedHDChain.IsCrypted())\n+        return true;\n+\n+    // make sure seed matches this chain\n+    if (hdChain.GetID() != hdChain.GetSeedHash())\n+        return false;\n+\n+    std::vector<unsigned char> vchCryptedSeed;\n+    if (!EncryptSecret(vMasterKeyIn, hdChain.GetSeed(), hdChain.GetID(), vchCryptedSeed))\n+        return false;\n+\n+    hdChain.Debug(__func__);\n+    cryptedHDChain = hdChain;\n+    cryptedHDChain.SetCrypted(true);\n+\n+    SecureVector vchSecureCryptedSeed(vchCryptedSeed.begin(), vchCryptedSeed.end());\n+    if (!cryptedHDChain.SetSeed(vchSecureCryptedSeed, false))\n+        return false;\n+\n+    SecureVector vchMnemonic;\n+    SecureVector vchMnemonicPassphrase;\n+\n+    // it's ok to have no mnemonic if wallet was initialized via hdseed\n+    if (hdChain.GetMnemonic(vchMnemonic, vchMnemonicPassphrase)) {\n+        std::vector<unsigned char> vchCryptedMnemonic;\n+        std::vector<unsigned char> vchCryptedMnemonicPassphrase;\n+\n+        if (!vchMnemonic.empty() && !EncryptSecret(vMasterKeyIn, vchMnemonic, hdChain.GetID(), vchCryptedMnemonic))\n+            return false;\n+        if (!vchMnemonicPassphrase.empty() && !EncryptSecret(vMasterKeyIn, vchMnemonicPassphrase, hdChain.GetID(), vchCryptedMnemonicPassphrase))\n+            return false;\n+\n+        SecureVector vchSecureCryptedMnemonic(vchCryptedMnemonic.begin(), vchCryptedMnemonic.end());\n+        SecureVector vchSecureCryptedMnemonicPassphrase(vchCryptedMnemonicPassphrase.begin(), vchCryptedMnemonicPassphrase.end());\n+        if (!cryptedHDChain.SetMnemonic(vchSecureCryptedMnemonic, vchSecureCryptedMnemonicPassphrase, false))\n+            return false;\n+    }\n+\n+    if (!hdChain.SetNull())\n+        return false;\n+\n+    return true;\n+}\n+\n+bool CCryptoKeyStore::DecryptHDChain(CHDChain& hdChainRet) const\n+{\n+    if (!IsCrypted())\n+        return true;\n+\n+    if (cryptedHDChain.IsNull())\n+        return false;\n+\n+    if (!cryptedHDChain.IsCrypted())\n+        return false;\n+\n+    SecureVector vchSecureSeed;\n+    SecureVector vchSecureCryptedSeed = cryptedHDChain.GetSeed();\n+    std::vector<unsigned char> vchCryptedSeed(vchSecureCryptedSeed.begin(), vchSecureCryptedSeed.end());\n+    if (!DecryptSecret(vMasterKey, vchCryptedSeed, cryptedHDChain.GetID(), vchSecureSeed))\n+        return false;\n+\n+    hdChainRet = cryptedHDChain;\n+    if (!hdChainRet.SetSeed(vchSecureSeed, false))\n+        return false;\n+\n+    // hash of decrypted seed must match chain id\n+    if (hdChainRet.GetSeedHash() != cryptedHDChain.GetID())\n+        return false;\n+\n+    SecureVector vchSecureCryptedMnemonic;\n+    SecureVector vchSecureCryptedMnemonicPassphrase;\n+\n+    // it's ok to have no mnemonic if wallet was initialized via hdseed\n+    if (cryptedHDChain.GetMnemonic(vchSecureCryptedMnemonic, vchSecureCryptedMnemonicPassphrase)) {\n+        SecureVector vchSecureMnemonic;\n+        SecureVector vchSecureMnemonicPassphrase;\n+\n+        std::vector<unsigned char> vchCryptedMnemonic(vchSecureCryptedMnemonic.begin(), vchSecureCryptedMnemonic.end());\n+        std::vector<unsigned char> vchCryptedMnemonicPassphrase(vchSecureCryptedMnemonicPassphrase.begin(), vchSecureCryptedMnemonicPassphrase.end());\n+\n+        if (!vchCryptedMnemonic.empty() && !DecryptSecret(vMasterKey, vchCryptedMnemonic, cryptedHDChain.GetID(), vchSecureMnemonic))\n+            return false;\n+        if (!vchCryptedMnemonicPassphrase.empty() && !DecryptSecret(vMasterKey, vchCryptedMnemonicPassphrase, cryptedHDChain.GetID(), vchSecureMnemonicPassphrase))\n+            return false;\n+\n+        if (!hdChainRet.SetMnemonic(vchSecureMnemonic, vchSecureMnemonicPassphrase, false))\n+            return false;\n+    }\n+\n+    hdChainRet.SetCrypted(false);\n+    hdChainRet.Debug(__func__);\n+\n+    return true;\n+}\n+\n+bool CCryptoKeyStore::SetHDChain(const CHDChain& chain)\n+{\n+    if (IsCrypted())\n+        return false;\n+\n+    if (chain.IsCrypted())\n+        return false;\n+\n+    hdChain = chain;\n+    return true;\n+}\n+\n+bool CCryptoKeyStore::SetCryptedHDChain(const CHDChain& chain)\n+{\n+    if (!SetCrypted())\n+        return false;\n+\n+    if (!chain.IsCrypted())\n+        return false;\n+\n+    cryptedHDChain = chain;\n+    return true;\n+}\n+\n+bool CCryptoKeyStore::GetHDChain(CHDChain& hdChainRet) const\n+{\n+    if(IsCrypted()) {\n+        hdChainRet = cryptedHDChain;\n+        return !cryptedHDChain.IsNull();\n+    }\n+\n+    hdChainRet = hdChain;\n+    return !hdChain.IsNull();\n+}"
      },
      {
        "sha": "8e67b6982453d30269922c06d622a8aa5ffa9882",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 100,
        "deletions": 71,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
        "patch": "@@ -114,89 +114,118 @@ bool DecryptAES256(const SecureString& sKey, const std::string& sCiphertext, con\n \n \n /** Keystore which keeps the private keys encrypted.\n-* It derives from the basic key store, which is used if no encryption is active.\n-*/\n+ * It derives from the basic key store, which is used if no encryption is active.\n+ */\n class CCryptoKeyStore : public CBasicKeyStore\n {\n private:\n-\tCryptedKeyMap mapCryptedKeys;\n+    \n+    CHDChain cryptedHDChain;\n+\n+    CKeyingMaterial vMasterKey;\n \n-\tCKeyingMaterial vMasterKey;\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    bool fUseCrypto;\n \n-\t//! if fUseCrypto is true, mapKeys must be empty\n-\t//! if fUseCrypto is false, vMasterKey must be empty\n-\tbool fUseCrypto;\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool fDecryptionThoroughlyChecked;\n \n-\t//! keeps track of whether Unlock has run a thorough check before\n-\tbool fDecryptionThoroughlyChecked;\n+    //! if fOnlyMixingAllowed is true, only mixing should be allowed in unlocked wallet\n+    bool fOnlyMixingAllowed;\n \n protected:\n-\tbool SetCrypted();\n+    bool SetCrypted();\n \n-\t//! will encrypt previously unencrypted keys\n-\tbool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n+    //! will encrypt previously unencrypted keys\n+    bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);\n \n-\tbool Unlock(const CKeyingMaterial& vMasterKeyIn);\n+    bool EncryptHDChain(const CKeyingMaterial& vMasterKeyIn);\n+    bool DecryptHDChain(CHDChain& hdChainRet) const;\n+    bool SetHDChain(const CHDChain& chain);\n+    bool SetCryptedHDChain(const CHDChain& chain);\n+\n+    bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool fForMixingOnly = false);\n+\tCryptedKeyMap mapCryptedKeys;\n \n public:\n-\tCCryptoKeyStore() : fUseCrypto(false), fDecryptionThoroughlyChecked(false)\n-\t{\n-\t}\n-\n-\tbool IsCrypted() const\n-\t{\n-\t\treturn fUseCrypto;\n-\t}\n-\n-\tbool IsLocked() const\n-\t{\n-\t\tif (!IsCrypted())\n-\t\t\treturn false;\n-\t\tbool result;\n-\t\t{\n-\t\t\tLOCK(cs_KeyStore);\n-\t\t\tresult = vMasterKey.empty();\n-\t\t}\n-\t\treturn result;\n-\t}\n-\n-\tbool Lock();\n-\n-\tvirtual bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n-\tbool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n-\tbool HaveKey(const CKeyID &address) const\n-\t{\n-\t\t{\n-\t\t\tLOCK(cs_KeyStore);\n-\t\t\tif (!IsCrypted())\n-\t\t\t\treturn CBasicKeyStore::HaveKey(address);\n-\t\t\treturn mapCryptedKeys.count(address) > 0;\n-\t\t}\n-\t\treturn false;\n-\t}\n-\tbool GetKey(const CKeyID &address, CKey& keyOut) const;\n-\tbool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n-\tvoid GetKeys(std::set<CKeyID> &setAddress) const\n-\t{\n-\t\tif (!IsCrypted())\n-\t\t{\n-\t\t\tCBasicKeyStore::GetKeys(setAddress);\n-\t\t\treturn;\n-\t\t}\n-\t\tsetAddress.clear();\n-\t\tCryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n-\t\twhile (mi != mapCryptedKeys.end())\n-\t\t{\n-\t\t\tsetAddress.insert((*mi).first);\n-\t\t\tmi++;\n-\t\t}\n-\t}\n-\n-\t/**\n-\t* Wallet status (encrypted, locked) changed.\n-\t* Note: Called without locks held.\n-\t*/\n-\tboost::signals2::signal<void(CCryptoKeyStore* wallet)> NotifyStatusChanged;\n+    CCryptoKeyStore() : fUseCrypto(false), fDecryptionThoroughlyChecked(false), fOnlyMixingAllowed(false)\n+    {\n+    }\n+\n+    bool IsCrypted() const\n+    {\n+        return fUseCrypto;\n+    }\n+\n+    // This function should be used in a different combinations to determine\n+    // if CCryptoKeyStore is fully locked so that no operations requiring access\n+    // to private keys are possible:\n+    //      IsLocked(true)\n+    // or if CCryptoKeyStore's private keys are available for mixing only:\n+    //      !IsLocked(true) && IsLocked()\n+    // or if they are available for everything:\n+    //      !IsLocked()\n+    bool IsLocked(bool fForMixing = false) const\n+    {\n+        if (!IsCrypted())\n+            return false;\n+        bool result;\n+        {\n+            LOCK(cs_KeyStore);\n+            result = vMasterKey.empty();\n+        }\n+        // fForMixing   fOnlyMixingAllowed  return\n+        // ---------------------------------------\n+        // true         true                result\n+        // true         false               result\n+        // false        true                true\n+        // false        false               result\n+\n+        if(!fForMixing && fOnlyMixingAllowed) return true;\n+\n+        return result;\n+    }\n+\n+    bool Lock(bool fAllowMixing = false);\n+\n+    virtual bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n+    bool HaveKey(const CKeyID &address) const override\n+    {\n+        {\n+            LOCK(cs_KeyStore);\n+            if (!IsCrypted())\n+                return CBasicKeyStore::HaveKey(address);\n+            return mapCryptedKeys.count(address) > 0;\n+        }\n+        return false;\n+    }\n+    bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n+    void GetKeys(std::set<CKeyID> &setAddress) const override\n+    {\n+        if (!IsCrypted())\n+        {\n+            CBasicKeyStore::GetKeys(setAddress);\n+            return;\n+        }\n+        setAddress.clear();\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n+        while (mi != mapCryptedKeys.end())\n+        {\n+            setAddress.insert((*mi).first);\n+            mi++;\n+        }\n+    }\n+\n+    virtual bool GetHDChain(CHDChain& hdChainRet) const override;\n+\n+    /**\n+     * Wallet status (encrypted, locked) changed.\n+     * Note: Called without locks held.\n+     */\n+    boost::signals2::signal<void (CCryptoKeyStore* wallet)> NotifyStatusChanged;\n };\n \n #endif // SYSCOIN_WALLET_CRYPTER_H"
      },
      {
        "sha": "10ca4ec3da50d080f8b28b1f19faa91cec006117",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 157,
        "deletions": 89,
        "changes": 246,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
        "patch": "@@ -681,96 +681,164 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n     return CSyscoinSecret(vchSecret).ToString();\n }\n \n-UniValue dumpwallet(const UniValue& params, bool fHelp)\n+UniValue dumphdinfo(const JSONRPCRequest& request)\n {\n-\tif (!EnsureWalletIsAvailable(fHelp))\n-\t\treturn NullUniValue;\n-\n-\tif (fHelp || params.size() != 1)\n-\t\tthrow runtime_error(\n-\t\t\t\"dumpwallet \\\"filename\\\"\\n\"\n-\t\t\t\"\\nDumps all wallet keys in a human-readable format.\\n\"\n-\t\t\t\"\\nArguments:\\n\"\n-\t\t\t\"1. \\\"filename\\\"    (string, required) The filename\\n\"\n-\t\t\t\"\\nExamples:\\n\"\n-\t\t\t+ HelpExampleCli(\"dumpwallet\", \"\\\"test\\\"\")\n-\t\t\t+ HelpExampleRpc(\"dumpwallet\", \"\\\"test\\\"\")\n-\t\t);\n-\n-\tLOCK2(cs_main, pwalletMain->cs_wallet);\n-\n-\tEnsureWalletIsUnlocked();\n-\n-\tofstream file;\n-\tfile.open(params[0].get_str().c_str());\n-\tif (!file.is_open())\n-\t\tthrow JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n-\n-\tstd::map<CKeyID, int64_t> mapKeyBirth;\n-\tstd::set<CKeyID> setKeyPool;\n-\tpwalletMain->GetKeyBirthTimes(mapKeyBirth);\n-\tpwalletMain->GetAllReserveKeys(setKeyPool);\n-\n-\t// sort time/key pairs\n-\tstd::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n-\tfor (std::map<CKeyID, int64_t>::const_iterator it = mapKeyBirth.begin(); it != mapKeyBirth.end(); it++) {\n-\t\tvKeyBirth.push_back(std::make_pair(it->second, it->first));\n-\t}\n-\tmapKeyBirth.clear();\n-\tstd::sort(vKeyBirth.begin(), vKeyBirth.end());\n-\n-\t// produce output\n-\tfile << strprintf(\"# Wallet dump created by Syscoin %s\\n\", CLIENT_BUILD);\n-\tfile << strprintf(\"# * Created on %s\\n\", EncodeDumpTime(GetTime()));\n-\tfile << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", chainActive.Height(), chainActive.Tip()->GetBlockHash().ToString());\n-\tfile << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(chainActive.Tip()->GetBlockTime()));\n-\tfile << \"\\n\";\n-\n-\t// add the base58check encoded extended master if the wallet uses HD \n-\tCKeyID masterKeyID = pwalletMain->GetHDChain().masterKeyID;\n-\tif (!masterKeyID.IsNull())\n-\t{\n-\t\tCKey key;\n-\t\tif (pwalletMain->GetKey(masterKeyID, key))\n-\t\t{\n-\t\t\tCExtKey masterKey;\n-\t\t\tmasterKey.SetMaster(key.begin(), key.size());\n-\n-\t\t\tCSyscoinExtKey b58extkey;\n-\t\t\tb58extkey.SetKey(masterKey);\n-\n-\t\t\tfile << \"# extended private masterkey: \" << b58extkey.ToString() << \"\\n\\n\";\n-\t\t}\n-\t}\n-\tfor (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n-\t\tconst CKeyID &keyid = it->second;\n-\t\tstd::string strTime = EncodeDumpTime(it->first);\n-\t\tstd::string strAddr = CSyscoinAddress(keyid).ToString();\n-\t\tCKey key;\n-\t\tif (pwalletMain->GetKey(keyid, key)) {\n-\t\t\tfile << strprintf(\"%s %s \", CSyscoinSecret(key).ToString(), strTime);\n-\t\t\tif (pwalletMain->mapAddressBook.count(keyid)) {\n-\t\t\t\tfile << strprintf(\"label=%s\", EncodeDumpString(pwalletMain->mapAddressBook[keyid].name));\n-\t\t\t}\n-\t\t\telse if (keyid == masterKeyID) {\n-\t\t\t\tfile << \"hdmaster=1\";\n-\t\t\t}\n-\t\t\telse if (setKeyPool.count(keyid)) {\n-\t\t\t\tfile << \"reserve=1\";\n-\t\t\t}\n-\t\t\telse if (pwalletMain->mapKeyMetadata[keyid].hdKeypath == \"m\") {\n-\t\t\t\tfile << \"inactivehdmaster=1\";\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tfile << \"change=1\";\n-\t\t\t}\n-\t\t\tfile << strprintf(\" # addr=%s%s\\n\", strAddr, (pwalletMain->mapKeyMetadata[keyid].hdKeypath.size() > 0 ? \" hdkeypath=\" + pwalletMain->mapKeyMetadata[keyid].hdKeypath : \"\"));\n-\t\t}\n-\t}\n-\tfile << \"\\n\";\n-\tfile << \"# End of dump\\n\";\n-\tfile.close();\n-\treturn NullUniValue;\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() != 0)\n+        throw std::runtime_error(\n+            \"dumphdinfo\\n\"\n+            \"Returns an object containing sensitive private info about this HD wallet.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hdseed\\\": \\\"seed\\\",                    (string) The HD seed (bip32, in hex)\\n\"\n+            \"  \\\"mnemonic\\\": \\\"words\\\",                 (string) The mnemonic for this HD wallet (bip39, english words) \\n\"\n+            \"  \\\"mnemonicpassphrase\\\": \\\"passphrase\\\",  (string) The mnemonic passphrase for this HD wallet (bip39)\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"dumphdinfo\", \"\")\n+            + HelpExampleRpc(\"dumphdinfo\", \"\")\n+        );\n+\n+    LOCK(pwalletMain->cs_wallet);\n+\n+    EnsureWalletIsUnlocked();\n+\n+    // add the base58check encoded extended master if the wallet uses HD\n+    CHDChain hdChainCurrent;\n+    if (pwalletMain->GetHDChain(hdChainCurrent))\n+    {\n+        if (!pwalletMain->GetDecryptedHDChain(hdChainCurrent))\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Cannot decrypt HD seed\");\n+\n+        SecureString ssMnemonic;\n+        SecureString ssMnemonicPassphrase;\n+        hdChainCurrent.GetMnemonic(ssMnemonic, ssMnemonicPassphrase);\n+\n+        UniValue obj(UniValue::VOBJ);\n+        obj.push_back(Pair(\"hdseed\", HexStr(hdChainCurrent.GetSeed())));\n+        obj.push_back(Pair(\"mnemonic\", ssMnemonic.c_str()));\n+        obj.push_back(Pair(\"mnemonicpassphrase\", ssMnemonicPassphrase.c_str()));\n+\n+        return obj;\n+    }\n+\n+    return NullUniValue;\n+}\n+\n+UniValue dumpwallet(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+    \n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"dumpwallet \\\"filename\\\"\\n\"\n+            \"\\nDumps all wallet keys in a human-readable format.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"filename\\\"    (string, required) The filename\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"dumpwallet\", \"\\\"test\\\"\")\n+            + HelpExampleRpc(\"dumpwallet\", \"\\\"test\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    EnsureWalletIsUnlocked();\n+\n+    std::ofstream file;\n+    file.open(request.params[0].get_str().c_str());\n+    if (!file.is_open())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n+\n+    std::map<CTxDestination, int64_t> mapKeyBirth;\n+    std::set<CKeyID> setKeyPool;\n+    pwalletMain->GetKeyBirthTimes(mapKeyBirth);\n+    pwalletMain->GetAllReserveKeys(setKeyPool);\n+\n+    // sort time/key pairs\n+    std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n+    for (const auto& entry : mapKeyBirth) {\n+        if (const CKeyID* keyID = boost::get<CKeyID>(&entry.first)) { // set and test\n+            vKeyBirth.push_back(std::make_pair(entry.second, *keyID));\n+        }\n+    }\n+    mapKeyBirth.clear();\n+    std::sort(vKeyBirth.begin(), vKeyBirth.end());\n+\n+    // produce output\n+    file << strprintf(\"# Wallet dump created by Syscoin Core %s\\n\", CLIENT_BUILD);\n+    file << strprintf(\"# * Created on %s\\n\", EncodeDumpTime(GetTime()));\n+    file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", chainActive.Height(), chainActive.Tip()->GetBlockHash().ToString());\n+    file << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(chainActive.Tip()->GetBlockTime()));\n+    file << \"\\n\";\n+\n+    // add the base58check encoded extended master if the wallet uses HD\n+    CHDChain hdChainCurrent;\n+    if (pwalletMain->GetHDChain(hdChainCurrent))\n+    {\n+\n+        if (!pwalletMain->GetDecryptedHDChain(hdChainCurrent))\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Cannot decrypt HD chain\");\n+\n+        SecureString ssMnemonic;\n+        SecureString ssMnemonicPassphrase;\n+        hdChainCurrent.GetMnemonic(ssMnemonic, ssMnemonicPassphrase);\n+        file << \"# mnemonic: \" << ssMnemonic << \"\\n\";\n+        file << \"# mnemonic passphrase: \" << ssMnemonicPassphrase << \"\\n\\n\";\n+\n+        SecureVector vchSeed = hdChainCurrent.GetSeed();\n+        file << \"# HD seed: \" << HexStr(vchSeed) << \"\\n\\n\";\n+\n+        CExtKey masterKey;\n+        masterKey.SetMaster(&vchSeed[0], vchSeed.size());\n+\n+        CSyscoinExtKey b58extkey;\n+        b58extkey.SetKey(masterKey);\n+\n+        file << \"# extended private masterkey: \" << b58extkey.ToString() << \"\\n\";\n+\n+        CExtPubKey masterPubkey;\n+        masterPubkey = masterKey.Neuter();\n+\n+        CSyscoinExtPubKey b58extpubkey;\n+        b58extpubkey.SetKey(masterPubkey);\n+        file << \"# extended public masterkey: \" << b58extpubkey.ToString() << \"\\n\\n\";\n+\n+        for (size_t i = 0; i < hdChainCurrent.CountAccounts(); ++i)\n+        {\n+            CHDAccount acc;\n+            if(hdChainCurrent.GetAccount(i, acc)) {\n+                file << \"# external chain counter: \" << acc.nExternalChainCounter << \"\\n\";\n+                file << \"# internal chain counter: \" << acc.nInternalChainCounter << \"\\n\\n\";\n+            } else {\n+                file << \"# WARNING: ACCOUNT \" << i << \" IS MISSING!\" << \"\\n\\n\";\n+            }\n+        }\n+    }\n+\n+    for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n+        const CKeyID &keyid = it->second;\n+        std::string strTime = EncodeDumpTime(it->first);\n+        std::string strAddr = CSyscoinAddress(keyid).ToString();\n+        CKey key;\n+        if (pwalletMain->GetKey(keyid, key)) {\n+            file << strprintf(\"%s %s \", CSyscoinSecret(key).ToString(), strTime);\n+            if (pwalletMain->mapAddressBook.count(keyid)) {\n+                file << strprintf(\"label=%s\", EncodeDumpString(pwalletMain->mapAddressBook[keyid].name));\n+            } else if (setKeyPool.count(keyid)) {\n+                file << \"reserve=1\";\n+            } else {\n+                file << \"change=1\";\n+            }\n+            file << strprintf(\" # addr=%s%s\\n\", strAddr, (pwalletMain->mapHdPubKeys.count(keyid) ? \" hdkeypath=\"+pwalletMain->mapHdPubKeys[keyid].GetKeyPath() : \"\"));\n+        }\n+    }\n+    file << \"\\n\";\n+    file << \"# End of dump\\n\";\n+    file.close();\n+    return NullUniValue;\n }\n \n "
      },
      {
        "sha": "92aecff284df949ccbff16d2e527e353a9f12fbe",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 4,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
        "patch": "@@ -2534,7 +2534,16 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"  \\\"keys_left\\\": xxxx,          (numeric) how many new keys are left since last automatic backup\\n\"\n             \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n             \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n-\t\t\t\"  \\\"hdmasterkeyid\\\": \\\"<hash160>\\\", (string) the Hash160 of the HD master pubkey\\n\"\n+            \"  \\\"hdchainid\\\": \\\"<hash>\\\",      (string) the ID of the HD chain\\n\"\n+            \"  \\\"hdaccountcount\\\": xxx,      (numeric) how many accounts of the HD chain are in this wallet\\n\"\n+            \"    [\\n\"\n+            \"      {\\n\"\n+            \"      \\\"hdaccountindex\\\": xxx,         (numeric) the index of the account\\n\"\n+            \"      \\\"hdexternalkeyindex\\\": xxxx,    (numeric) current external childkey index\\n\"\n+            \"      \\\"hdinternalkeyindex\\\": xxxx,    (numeric) current internal childkey index\\n\"\n+            \"      }\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getwalletinfo\", \"\")\n@@ -2544,6 +2553,7 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     CHDChain hdChainCurrent;\n+    bool fHDEnabled = pwalletMain->GetHDChain(hdChainCurrent);\n     UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n     obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));\n@@ -2561,9 +2571,25 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n     if (pwalletMain->IsCrypted())\n         obj.push_back(Pair(\"unlocked_until\", nWalletUnlockTime));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n-\tCKeyID masterKeyID = pwalletMain->GetHDChain().masterKeyID;\n-\tif (!masterKeyID.IsNull())\n-\t\tobj.push_back(Pair(\"hdmasterkeyid\", masterKeyID.GetHex()));\n+    if (fHDEnabled) {\n+        obj.push_back(Pair(\"hdchainid\", hdChainCurrent.GetID().GetHex()));\n+        obj.push_back(Pair(\"hdaccountcount\", (int64_t)hdChainCurrent.CountAccounts()));\n+        UniValue accounts(UniValue::VARR);\n+        for (size_t i = 0; i < hdChainCurrent.CountAccounts(); ++i)\n+        {\n+            CHDAccount acc;\n+            UniValue account(UniValue::VOBJ);\n+            account.push_back(Pair(\"hdaccountindex\", (int64_t)i));\n+            if(hdChainCurrent.GetAccount(i, acc)) {\n+                account.push_back(Pair(\"hdexternalkeyindex\", (int64_t)acc.nExternalChainCounter));\n+                account.push_back(Pair(\"hdinternalkeyindex\", (int64_t)acc.nInternalChainCounter));\n+            } else {\n+                account.push_back(Pair(\"error\", strprintf(\"account %d is missing\", i)));\n+            }\n+            accounts.push_back(account);\n+        }\n+        obj.push_back(Pair(\"hdaccounts\", accounts));\n+    }\n     return obj;\n }\n UniValue generate(const JSONRPCRequest& request)\n@@ -3060,6 +3086,7 @@ extern UniValue importprunedfunds(const JSONRPCRequest& request);\n extern UniValue removeprunedfunds(const JSONRPCRequest& request);\n extern UniValue importmulti(const JSONRPCRequest& request);\n \n+extern UniValue dumphdinfo(const JSONRPCRequest& request);\n extern UniValue importelectrumwallet(const JSONRPCRequest& request);\n \n static const CRPCCommand commands[] =\n@@ -3116,6 +3143,7 @@ static const CRPCCommand commands[] =\n \t{ \"mining\",             \"getauxblock\",                      &getauxblock, true, { \"hash\", \"auxpow\" } },\n     { \"wallet\",             \"keepass\",                  &keepass,                  true,   {} },\n     { \"wallet\",             \"instantsendtoaddress\",     &instantsendtoaddress,     false,  {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\"} },\n+    { \"wallet\",             \"dumphdinfo\",               &dumphdinfo,               true,   {} },\n     { \"wallet\",             \"importelectrumwallet\",     &importelectrumwallet,     true,   {\"filename\", \"index\"} },\n     { \"hidden\",             \"setbip69enabled\",          &setbip69enabled,          true,   {} },\n };"
      },
      {
        "sha": "fc30a12d963d4131c71fdaab1f1b70a68b882f40",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 690,
        "deletions": 435,
        "changes": 1125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
        "patch": "@@ -101,136 +101,259 @@ const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n         return NULL;\n     return &(it->second);\n }\n-CPubKey CWallet::GenerateNewKey()\n-{\n-\tAssertLockHeld(cs_wallet); // mapKeyMetadata\n-\tbool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n-\n-\tCKey secret;\n-\n-\t// Create new metadata\n-\tint64_t nCreationTime = GetTime();\n-\tCKeyMetadata metadata(nCreationTime);\n-\n-\t// use HD key derivation if HD was enabled during wallet creation\n-\tif (!hdChain.masterKeyID.IsNull()) {\n-\t\t// for now we use a fixed keypath scheme of m/0'/0'/k\n-\t\tCKey key;                      //master key seed (256bit)\n-\t\tCExtKey masterKey;             //hd master key\n-\t\tCExtKey accountKey;            //key at m/0'\n-\t\tCExtKey externalChainChildKey; //key at m/0'/0'\n-\t\tCExtKey childKey;              //key at m/0'/0'/<n>'\n-\n-\t\t\t\t\t\t\t\t\t   // try to get the master key\n-\t\tif (!GetKey(hdChain.masterKeyID, key))\n-\t\t\tthrow std::runtime_error(std::string(__func__) + \": Master key not found\");\n-\n-\t\tmasterKey.SetMaster(key.begin(), key.size());\n-\n-\t\t// derive m/0'\n-\t\t// use hardened derivation (child keys >= 0x80000000 are hardened after bip32)\n-\t\tmasterKey.Derive(accountKey, BIP32_HARDENED_KEY_LIMIT);\n-\n-\t\t// derive m/0'/0'\n-\t\taccountKey.Derive(externalChainChildKey, BIP32_HARDENED_KEY_LIMIT);\n-\n-\t\t// derive child key at next index, skip keys already known to the wallet\n-\t\tdo\n-\t\t{\n-\t\t\t// always derive hardened keys\n-\t\t\t// childIndex | BIP32_HARDENED_KEY_LIMIT = derive childIndex in hardened child-index-range\n-\t\t\t// example: 1 | BIP32_HARDENED_KEY_LIMIT == 0x80000001 == 2147483649\n-\t\t\texternalChainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-\t\t\tmetadata.hdKeypath = \"m/0'/0'/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n-\t\t\tmetadata.hdMasterKeyID = hdChain.masterKeyID;\n-\t\t\t// increment childkey index\n-\t\t\thdChain.nExternalChainCounter++;\n-\t\t} while (HaveKey(childKey.key.GetPubKey().GetID()));\n-\t\tsecret = childKey.key;\n-\n-\t\t// update the chain model in the database\n-\t\tif (!CWalletDB(strWalletFile).WriteHDChain(hdChain))\n-\t\t\tthrow std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n-\t}\n-\telse {\n-\t\tsecret.MakeNewKey(fCompressed);\n-\t}\n-\n-\t// Compressed public keys were introduced in version 0.6.0\n-\tif (fCompressed)\n-\t\tSetMinVersion(FEATURE_COMPRPUBKEY);\n-\n-\tCPubKey pubkey = secret.GetPubKey();\n-\tassert(secret.VerifyPubKey(pubkey));\n-\n-\tmapKeyMetadata[pubkey.GetID()] = metadata;\n-\tif (!nTimeFirstKey || nCreationTime < nTimeFirstKey)\n-\t\tnTimeFirstKey = nCreationTime;\n-\n-\tif (!AddKeyPubKey(secret, pubkey))\n-\t\tthrow std::runtime_error(std::string(__func__) + \": AddKey failed\");\n-\treturn pubkey;\n+\n+CPubKey CWallet::GenerateNewKey(uint32_t nAccountIndex, bool fInternal)\n+{\n+    AssertLockHeld(cs_wallet); // mapKeyMetadata\n+    bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n+\n+    CKey secret;\n+\n+    // Create new metadata\n+    int64_t nCreationTime = GetTime();\n+    CKeyMetadata metadata(nCreationTime);\n+\n+    CPubKey pubkey;\n+    // use HD key derivation if HD was enabled during wallet creation\n+    if (IsHDEnabled()) {\n+        DeriveNewChildKey(metadata, secret, nAccountIndex, fInternal);\n+        pubkey = secret.GetPubKey();\n+    } else {\n+        secret.MakeNewKey(fCompressed);\n+\n+        // Compressed public keys were introduced in version 0.6.0\n+        if (fCompressed)\n+            SetMinVersion(FEATURE_COMPRPUBKEY);\n+\n+        pubkey = secret.GetPubKey();\n+        assert(secret.VerifyPubKey(pubkey));\n+\n+        // Create new metadata\n+        mapKeyMetadata[pubkey.GetID()] = metadata;\n+        UpdateTimeFirstKey(nCreationTime);\n+\n+        if (!AddKeyPubKey(secret, pubkey))\n+            throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    }\n+    return pubkey;\n+}\n+\n+void CWallet::DeriveNewChildKey(const CKeyMetadata& metadata, CKey& secretRet, uint32_t nAccountIndex, bool fInternal)\n+{\n+    CHDChain hdChainTmp;\n+    if (!GetHDChain(hdChainTmp)) {\n+        throw std::runtime_error(std::string(__func__) + \": GetHDChain failed\");\n+    }\n+\n+    if (!DecryptHDChain(hdChainTmp))\n+        throw std::runtime_error(std::string(__func__) + \": DecryptHDChainSeed failed\");\n+    // make sure seed matches this chain\n+    if (hdChainTmp.GetID() != hdChainTmp.GetSeedHash())\n+        throw std::runtime_error(std::string(__func__) + \": Wrong HD chain!\");\n+\n+    CHDAccount acc;\n+    if (!hdChainTmp.GetAccount(nAccountIndex, acc))\n+        throw std::runtime_error(std::string(__func__) + \": Wrong HD account!\");\n+\n+    // derive child key at next index, skip keys already known to the wallet\n+    CExtKey childKey;\n+    uint32_t nChildIndex = fInternal ? acc.nInternalChainCounter : acc.nExternalChainCounter;\n+    do {\n+        hdChainTmp.DeriveChildExtKey(nAccountIndex, fInternal, nChildIndex, childKey);\n+        // increment childkey index\n+        nChildIndex++;\n+    } while (HaveKey(childKey.key.GetPubKey().GetID()));\n+    secretRet = childKey.key;\n+\n+    CPubKey pubkey = secretRet.GetPubKey();\n+    assert(secretRet.VerifyPubKey(pubkey));\n+\n+    // store metadata\n+    mapKeyMetadata[pubkey.GetID()] = metadata;\n+    UpdateTimeFirstKey(metadata.nCreateTime);\n+\n+    // update the chain model in the database\n+    CHDChain hdChainCurrent;\n+    GetHDChain(hdChainCurrent);\n+\n+    if (fInternal) {\n+        acc.nInternalChainCounter = nChildIndex;\n+    }\n+    else {\n+        acc.nExternalChainCounter = nChildIndex;\n+    }\n+\n+    if (!hdChainCurrent.SetAccount(nAccountIndex, acc))\n+        throw std::runtime_error(std::string(__func__) + \": SetAccount failed\");\n+\n+    if (IsCrypted()) {\n+        if (!SetCryptedHDChain(hdChainCurrent, false))\n+            throw std::runtime_error(std::string(__func__) + \": SetCryptedHDChain failed\");\n+    }\n+    else {\n+        if (!SetHDChain(hdChainCurrent, false))\n+            throw std::runtime_error(std::string(__func__) + \": SetHDChain failed\");\n+    }\n+\n+    if (!AddHDPubKey(childKey.Neuter(), fInternal))\n+        throw std::runtime_error(std::string(__func__) + \": AddHDPubKey failed\");\n+}\n+\n+bool CWallet::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n+{\n+    LOCK(cs_wallet);\n+    std::map<CKeyID, CHDPubKey>::const_iterator mi = mapHdPubKeys.find(address);\n+    if (mi != mapHdPubKeys.end())\n+    {\n+        const CHDPubKey &hdPubKey = (*mi).second;\n+        vchPubKeyOut = hdPubKey.extPubKey.pubkey;\n+        return true;\n+    }\n+    else\n+        return CCryptoKeyStore::GetPubKey(address, vchPubKeyOut);\n+}\n+\n+bool CWallet::GetKey(const CKeyID &address, CKey& keyOut) const\n+{\n+    LOCK(cs_wallet);\n+    std::map<CKeyID, CHDPubKey>::const_iterator mi = mapHdPubKeys.find(address);\n+    if (mi != mapHdPubKeys.end())\n+    {\n+        // if the key has been found in mapHdPubKeys, derive it on the fly\n+        const CHDPubKey &hdPubKey = (*mi).second;\n+        CHDChain hdChainCurrent;\n+        if (!GetHDChain(hdChainCurrent))\n+            throw std::runtime_error(std::string(__func__) + \": GetHDChain failed\");\n+        if (!DecryptHDChain(hdChainCurrent))\n+            throw std::runtime_error(std::string(__func__) + \": DecryptHDChainSeed failed\");\n+        // make sure seed matches this chain\n+        if (hdChainCurrent.GetID() != hdChainCurrent.GetSeedHash())\n+            throw std::runtime_error(std::string(__func__) + \": Wrong HD chain!\");\n+\n+        CExtKey extkey;\n+        hdChainCurrent.DeriveChildExtKey(hdPubKey.nAccountIndex, hdPubKey.nChangeIndex != 0, hdPubKey.extPubKey.nChild, extkey);\n+        keyOut = extkey.key;\n+\n+        return true;\n+    }\n+    else {\n+        return CCryptoKeyStore::GetKey(address, keyOut);\n+    }\n+}\n+\n+bool CWallet::HaveKey(const CKeyID &address) const\n+{\n+    LOCK(cs_wallet);\n+    if (mapHdPubKeys.count(address) > 0)\n+        return true;\n+    return CCryptoKeyStore::HaveKey(address);\n+}\n+\n+bool CWallet::LoadHDPubKey(const CHDPubKey &hdPubKey)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    mapHdPubKeys[hdPubKey.extPubKey.pubkey.GetID()] = hdPubKey;\n+    return true;\n+}\n+\n+bool CWallet::AddHDPubKey(const CExtPubKey &extPubKey, bool fInternal)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    CHDChain hdChainCurrent;\n+    GetHDChain(hdChainCurrent);\n+\n+    CHDPubKey hdPubKey;\n+    hdPubKey.extPubKey = extPubKey;\n+    hdPubKey.hdchainID = hdChainCurrent.GetID();\n+    hdPubKey.nChangeIndex = fInternal ? 1 : 0;\n+    mapHdPubKeys[extPubKey.pubkey.GetID()] = hdPubKey;\n+\n+    // check if we need to remove from watch-only\n+    CScript script;\n+    script = GetScriptForDestination(extPubKey.pubkey.GetID());\n+    if (HaveWatchOnly(script))\n+        RemoveWatchOnly(script);\n+    script = GetScriptForRawPubKey(extPubKey.pubkey);\n+    if (HaveWatchOnly(script))\n+        RemoveWatchOnly(script);\n+\n+    if (!fFileBacked)\n+        return true;\n+\n+    return CWalletDB(strWalletFile).WriteHDPubKey(hdPubKey, mapKeyMetadata[extPubKey.pubkey.GetID()]);\n }\n \n bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n {\n-\tAssertLockHeld(cs_wallet); // mapKeyMetadata\n-\tif (!CCryptoKeyStore::AddKeyPubKey(secret, pubkey))\n-\t\treturn false;\n-\n-\t// check if we need to remove from watch-only\n-\tCScript script;\n-\tscript = GetScriptForDestination(pubkey.GetID());\n-\tif (HaveWatchOnly(script))\n-\t\tRemoveWatchOnly(script);\n-\tscript = GetScriptForRawPubKey(pubkey);\n-\tif (HaveWatchOnly(script))\n-\t\tRemoveWatchOnly(script);\n-\n-\tif (!fFileBacked)\n-\t\treturn true;\n-\tif (!IsCrypted()) {\n-\t\treturn CWalletDB(strWalletFile).WriteKey(pubkey,\n-\t\t\tsecret.GetPrivKey(),\n-\t\t\tmapKeyMetadata[pubkey.GetID()]);\n-\t}\n-\treturn true;\n+    AssertLockHeld(cs_wallet); // mapKeyMetadata\n+    if (!CCryptoKeyStore::AddKeyPubKey(secret, pubkey))\n+        return false;\n+\n+    // check if we need to remove from watch-only\n+    CScript script;\n+    script = GetScriptForDestination(pubkey.GetID());\n+    if (HaveWatchOnly(script))\n+        RemoveWatchOnly(script);\n+    script = GetScriptForRawPubKey(pubkey);\n+    if (HaveWatchOnly(script))\n+        RemoveWatchOnly(script);\n+\n+    if (!fFileBacked)\n+        return true;\n+    if (!IsCrypted()) {\n+        return CWalletDB(strWalletFile).WriteKey(pubkey,\n+                                                 secret.GetPrivKey(),\n+                                                 mapKeyMetadata[pubkey.GetID()]);\n+    }\n+    return true;\n }\n \n bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n-\tconst vector<unsigned char> &vchCryptedSecret)\n+                            const std::vector<unsigned char> &vchCryptedSecret)\n {\n-\tif (!CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret))\n-\t\treturn false;\n-\tif (!fFileBacked)\n-\t\treturn true;\n-\t{\n-\t\tLOCK(cs_wallet);\n-\t\tif (pwalletdbEncryption)\n-\t\t\treturn pwalletdbEncryption->WriteCryptedKey(vchPubKey,\n-\t\t\t\tvchCryptedSecret,\n-\t\t\t\tmapKeyMetadata[vchPubKey.GetID()]);\n-\t\telse\n-\t\t\treturn CWalletDB(strWalletFile).WriteCryptedKey(vchPubKey,\n-\t\t\t\tvchCryptedSecret,\n-\t\t\t\tmapKeyMetadata[vchPubKey.GetID()]);\n-\t}\n-\treturn false;\n+    if (!CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret))\n+        return false;\n+    if (!fFileBacked)\n+        return true;\n+    {\n+        LOCK(cs_wallet);\n+        if (pwalletdbEncryption)\n+            return pwalletdbEncryption->WriteCryptedKey(vchPubKey,\n+                                                        vchCryptedSecret,\n+                                                        mapKeyMetadata[vchPubKey.GetID()]);\n+        else\n+            return CWalletDB(strWalletFile).WriteCryptedKey(vchPubKey,\n+                                                            vchCryptedSecret,\n+                                                            mapKeyMetadata[vchPubKey.GetID()]);\n+    }\n+    return false;\n }\n \n-bool CWallet::LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &meta)\n+bool CWallet::LoadKeyMetadata(const CTxDestination& keyID, const CKeyMetadata &meta)\n {\n-\tAssertLockHeld(cs_wallet); // mapKeyMetadata\n-\tif (meta.nCreateTime && (!nTimeFirstKey || meta.nCreateTime < nTimeFirstKey))\n-\t\tnTimeFirstKey = meta.nCreateTime;\n-\n-\tmapKeyMetadata[pubkey.GetID()] = meta;\n-\treturn true;\n+    AssertLockHeld(cs_wallet); // mapKeyMetadata\n+    UpdateTimeFirstKey(meta.nCreateTime);\n+    mapKeyMetadata[keyID] = meta;\n+    return true;\n }\n \n bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n-\treturn CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);\n+    return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);\n+}\n+\n+void CWallet::UpdateTimeFirstKey(int64_t nCreateTime)\n+{\n+    AssertLockHeld(cs_wallet);\n+    if (nCreateTime <= 1) {\n+        // Cannot determine birthday information, so set the wallet birthday to\n+        // the beginning of time.\n+        nTimeFirstKey = 1;\n+    } else if (!nTimeFirstKey || nCreateTime < nTimeFirstKey) {\n+        nTimeFirstKey = nCreateTime;\n+    }\n }\n \n bool CWallet::AddCScript(const CScript& redeemScript)\n@@ -325,7 +448,7 @@ bool CWallet::Unlock(const SecureString& strWalletPassphrase, bool fForMixingOnl\n                 return false;\n             if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, vMasterKey))\n                 continue; // try another master key\n-            if (CCryptoKeyStore::Unlock(vMasterKey)) {\n+            if (CCryptoKeyStore::Unlock(vMasterKey, fForMixingOnly)) {\n                 if(nWalletBackups == -2) {\n                     TopUpKeyPool();\n                     LogPrintf(\"Keypool replenished, re-initializing automatic backups.\\n\");\n@@ -628,102 +751,133 @@ void CWallet::AddToSpends(const uint256& wtxid)\n \n bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n {\n-\tif (IsCrypted())\n-\t\treturn false;\n-\n-\tCKeyingMaterial vMasterKey;\n-\n-\tvMasterKey.resize(WALLET_CRYPTO_KEY_SIZE);\n-\tGetStrongRandBytes(&vMasterKey[0], WALLET_CRYPTO_KEY_SIZE);\n-\n-\tCMasterKey kMasterKey;\n-\n-\tkMasterKey.vchSalt.resize(WALLET_CRYPTO_SALT_SIZE);\n-\tGetStrongRandBytes(&kMasterKey.vchSalt[0], WALLET_CRYPTO_SALT_SIZE);\n-\n-\tCCrypter crypter;\n-\tint64_t nStartTime = GetTimeMillis();\n-\tcrypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, 25000, kMasterKey.nDerivationMethod);\n-\tkMasterKey.nDeriveIterations = 2500000 / ((double)(GetTimeMillis() - nStartTime));\n-\n-\tnStartTime = GetTimeMillis();\n-\tcrypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, kMasterKey.nDeriveIterations, kMasterKey.nDerivationMethod);\n-\tkMasterKey.nDeriveIterations = (kMasterKey.nDeriveIterations + kMasterKey.nDeriveIterations * 100 / ((double)(GetTimeMillis() - nStartTime))) / 2;\n-\n-\tif (kMasterKey.nDeriveIterations < 25000)\n-\t\tkMasterKey.nDeriveIterations = 25000;\n-\n-\tLogPrintf(\"Encrypting Wallet with an nDeriveIterations of %i\\n\", kMasterKey.nDeriveIterations);\n-\n-\tif (!crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, kMasterKey.nDeriveIterations, kMasterKey.nDerivationMethod))\n-\t\treturn false;\n-\tif (!crypter.Encrypt(vMasterKey, kMasterKey.vchCryptedKey))\n-\t\treturn false;\n-\n-\t{\n-\t\tLOCK(cs_wallet);\n-\t\tmapMasterKeys[++nMasterKeyMaxID] = kMasterKey;\n-\t\tif (fFileBacked)\n-\t\t{\n-\t\t\tassert(!pwalletdbEncryption);\n-\t\t\tpwalletdbEncryption = new CWalletDB(strWalletFile);\n-\t\t\tif (!pwalletdbEncryption->TxnBegin()) {\n-\t\t\t\tdelete pwalletdbEncryption;\n-\t\t\t\tpwalletdbEncryption = NULL;\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tpwalletdbEncryption->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n-\t\t}\n-\n-\t\tif (!EncryptKeys(vMasterKey))\n-\t\t{\n-\t\t\tif (fFileBacked) {\n-\t\t\t\tpwalletdbEncryption->TxnAbort();\n-\t\t\t\tdelete pwalletdbEncryption;\n-\t\t\t}\n-\t\t\t// We now probably have half of our keys encrypted in memory, and half not...\n-\t\t\t// die and let the user reload the unencrypted wallet.\n-\t\t\tassert(false);\n-\t\t}\n-\n-\t\t// Encryption was introduced in version 0.4.0\n-\t\tSetMinVersion(FEATURE_WALLETCRYPT, pwalletdbEncryption, true);\n-\n-\t\tif (fFileBacked)\n-\t\t{\n-\t\t\tif (!pwalletdbEncryption->TxnCommit()) {\n-\t\t\t\tdelete pwalletdbEncryption;\n-\t\t\t\t// We now have keys encrypted in memory, but not on disk...\n-\t\t\t\t// die to avoid confusion and let the user reload the unencrypted wallet.\n-\t\t\t\tassert(false);\n-\t\t\t}\n-\n-\t\t\tdelete pwalletdbEncryption;\n-\t\t\tpwalletdbEncryption = NULL;\n-\t\t}\n-\n-\t\tLock();\n-\t\tUnlock(strWalletPassphrase);\n-\n-\t\t// if we are using HD, replace the HD master key (seed) with a new one\n-\t\tif (!hdChain.masterKeyID.IsNull()) {\n-\t\t\tCKey key;\n-\t\t\tCPubKey masterPubKey = GenerateNewHDMasterKey();\n-\t\t\tif (!SetHDMasterKey(masterPubKey))\n-\t\t\t\treturn false;\n-\t\t}\n-\n-\t\tNewKeyPool();\n-\t\tLock();\n-\n-\t\t// Need to completely rewrite the wallet file; if we don't, bdb might keep\n-\t\t// bits of the unencrypted private key in slack space in the database file.\n-\t\tCDB::Rewrite(strWalletFile);\n-\n-\t}\n-\tNotifyStatusChanged(this);\n-\n-\treturn true;\n+    if (IsCrypted())\n+        return false;\n+\n+    CKeyingMaterial vMasterKey;\n+\n+    vMasterKey.resize(WALLET_CRYPTO_KEY_SIZE);\n+    GetStrongRandBytes(&vMasterKey[0], WALLET_CRYPTO_KEY_SIZE);\n+\n+    CMasterKey kMasterKey;\n+\n+    kMasterKey.vchSalt.resize(WALLET_CRYPTO_SALT_SIZE);\n+    GetStrongRandBytes(&kMasterKey.vchSalt[0], WALLET_CRYPTO_SALT_SIZE);\n+\n+    CCrypter crypter;\n+    int64_t nStartTime = GetTimeMillis();\n+    crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, 25000, kMasterKey.nDerivationMethod);\n+    kMasterKey.nDeriveIterations = 2500000 / ((double)(GetTimeMillis() - nStartTime));\n+\n+    nStartTime = GetTimeMillis();\n+    crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, kMasterKey.nDeriveIterations, kMasterKey.nDerivationMethod);\n+    kMasterKey.nDeriveIterations = (kMasterKey.nDeriveIterations + kMasterKey.nDeriveIterations * 100 / ((double)(GetTimeMillis() - nStartTime))) / 2;\n+\n+    if (kMasterKey.nDeriveIterations < 25000)\n+        kMasterKey.nDeriveIterations = 25000;\n+\n+    LogPrintf(\"Encrypting Wallet with an nDeriveIterations of %i\\n\", kMasterKey.nDeriveIterations);\n+\n+    if (!crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, kMasterKey.nDeriveIterations, kMasterKey.nDerivationMethod))\n+        return false;\n+    if (!crypter.Encrypt(vMasterKey, kMasterKey.vchCryptedKey))\n+        return false;\n+\n+    {\n+        LOCK(cs_wallet);\n+        mapMasterKeys[++nMasterKeyMaxID] = kMasterKey;\n+        if (fFileBacked)\n+        {\n+            assert(!pwalletdbEncryption);\n+            pwalletdbEncryption = new CWalletDB(strWalletFile);\n+            if (!pwalletdbEncryption->TxnBegin()) {\n+                delete pwalletdbEncryption;\n+                pwalletdbEncryption = NULL;\n+                return false;\n+            }\n+            pwalletdbEncryption->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n+        }\n+\n+        // must get current HD chain before EncryptKeys\n+        CHDChain hdChainCurrent;\n+        GetHDChain(hdChainCurrent);\n+\n+        if (!EncryptKeys(vMasterKey))\n+        {\n+            if (fFileBacked) {\n+                pwalletdbEncryption->TxnAbort();\n+                delete pwalletdbEncryption;\n+            }\n+            // We now probably have half of our keys encrypted in memory, and half not...\n+            // die and let the user reload the unencrypted wallet.\n+            assert(false);\n+        }\n+\n+        if (!hdChainCurrent.IsNull()) {\n+            assert(EncryptHDChain(vMasterKey));\n+\n+            CHDChain hdChainCrypted;\n+            assert(GetHDChain(hdChainCrypted));\n+\n+            DBG(\n+                printf(\"EncryptWallet -- current seed: '%s'\\n\", HexStr(hdChainCurrent.GetSeed()).c_str());\n+                printf(\"EncryptWallet -- crypted seed: '%s'\\n\", HexStr(hdChainCrypted.GetSeed()).c_str());\n+            );\n+\n+            // ids should match, seed hashes should not\n+            assert(hdChainCurrent.GetID() == hdChainCrypted.GetID());\n+            assert(hdChainCurrent.GetSeedHash() != hdChainCrypted.GetSeedHash());\n+\n+            assert(SetCryptedHDChain(hdChainCrypted, false));\n+        }\n+\n+        // Encryption was introduced in version 0.4.0\n+        SetMinVersion(FEATURE_WALLETCRYPT, pwalletdbEncryption, true);\n+\n+        if (fFileBacked)\n+        {\n+            if (!pwalletdbEncryption->TxnCommit()) {\n+                delete pwalletdbEncryption;\n+                // We now have keys encrypted in memory, but not on disk...\n+                // die to avoid confusion and let the user reload the unencrypted wallet.\n+                assert(false);\n+            }\n+\n+            delete pwalletdbEncryption;\n+            pwalletdbEncryption = NULL;\n+        }\n+\n+        Lock();\n+        Unlock(strWalletPassphrase);\n+\n+        // if we are not using HD, generate new keypool\n+        if(IsHDEnabled()) {\n+            TopUpKeyPool();\n+        }\n+        else {\n+            NewKeyPool();\n+        }\n+\n+        Lock();\n+\n+        // Need to completely rewrite the wallet file; if we don't, bdb might keep\n+        // bits of the unencrypted private key in slack space in the database file.\n+        CDB::Rewrite(strWalletFile);\n+\n+        // Update KeePass if necessary\n+        if(GetBoolArg(\"-keepass\", false)) {\n+            LogPrintf(\"CWallet::EncryptWallet -- Updating KeePass with new passphrase\");\n+            try {\n+                keePassInt.updatePassphrase(strWalletPassphrase);\n+            } catch (std::exception& e) {\n+                LogPrintf(\"CWallet::EncryptWallet -- could not update passphrase in KeePass: Error: %s\\n\", e.what());\n+            }\n+        }\n+\n+    }\n+    NotifyStatusChanged(this);\n+\n+    return true;\n }\n \n DBErrors CWallet::ReorderTransactions()\n@@ -1416,6 +1570,105 @@ CAmount CWallet::GetChange(const CTxOut& txout) const\n     return (IsChange(txout) ? txout.nValue : 0);\n }\n \n+void CWallet::GenerateNewHDChain()\n+{\n+    CHDChain newHdChain;\n+\n+    std::string strSeed = GetArg(\"-hdseed\", \"not hex\");\n+\n+    if(IsArgSet(\"-hdseed\") && IsHex(strSeed)) {\n+        std::vector<unsigned char> vchSeed = ParseHex(strSeed);\n+        if (!newHdChain.SetSeed(SecureVector(vchSeed.begin(), vchSeed.end()), true))\n+            throw std::runtime_error(std::string(__func__) + \": SetSeed failed\");\n+    }\n+    else {\n+        if (IsArgSet(\"-hdseed\") && !IsHex(strSeed))\n+            LogPrintf(\"CWallet::GenerateNewHDChain -- Incorrect seed, generating random one instead\\n\");\n+\n+        // NOTE: empty mnemonic means \"generate a new one for me\"\n+        std::string strMnemonic = GetArg(\"-mnemonic\", \"\");\n+        // NOTE: default mnemonic passphrase is an empty string\n+        std::string strMnemonicPassphrase = GetArg(\"-mnemonicpassphrase\", \"\");\n+\n+        SecureVector vchMnemonic(strMnemonic.begin(), strMnemonic.end());\n+        SecureVector vchMnemonicPassphrase(strMnemonicPassphrase.begin(), strMnemonicPassphrase.end());\n+\n+        if (!newHdChain.SetMnemonic(vchMnemonic, vchMnemonicPassphrase, true))\n+            throw std::runtime_error(std::string(__func__) + \": SetMnemonic failed\");\n+    }\n+    newHdChain.Debug(__func__);\n+\n+    if (!SetHDChain(newHdChain, false))\n+        throw std::runtime_error(std::string(__func__) + \": SetHDChain failed\");\n+\n+    // clean up\n+    ForceRemoveArg(\"-hdseed\");\n+    ForceRemoveArg(\"-mnemonic\");\n+    ForceRemoveArg(\"-mnemonicpassphrase\");\n+}\n+\n+bool CWallet::SetHDChain(const CHDChain& chain, bool memonly)\n+{\n+    LOCK(cs_wallet);\n+\n+    if (!CCryptoKeyStore::SetHDChain(chain))\n+        return false;\n+\n+    if (!memonly && !CWalletDB(strWalletFile).WriteHDChain(chain))\n+        throw std::runtime_error(std::string(__func__) + \": WriteHDChain failed\");\n+\n+    return true;\n+}\n+\n+bool CWallet::SetCryptedHDChain(const CHDChain& chain, bool memonly)\n+{\n+    LOCK(cs_wallet);\n+\n+    if (!CCryptoKeyStore::SetCryptedHDChain(chain))\n+        return false;\n+\n+    if (!memonly) {\n+        if (!fFileBacked)\n+            return false;\n+        if (pwalletdbEncryption) {\n+            if (!pwalletdbEncryption->WriteCryptedHDChain(chain))\n+                throw std::runtime_error(std::string(__func__) + \": WriteCryptedHDChain failed\");\n+        } else {\n+            if (!CWalletDB(strWalletFile).WriteCryptedHDChain(chain))\n+                throw std::runtime_error(std::string(__func__) + \": WriteCryptedHDChain failed\");\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool CWallet::GetDecryptedHDChain(CHDChain& hdChainRet)\n+{\n+    LOCK(cs_wallet);\n+\n+    CHDChain hdChainTmp;\n+    if (!GetHDChain(hdChainTmp)) {\n+        return false;\n+    }\n+\n+    if (!DecryptHDChain(hdChainTmp))\n+        return false;\n+\n+    // make sure seed matches this chain\n+    if (hdChainTmp.GetID() != hdChainTmp.GetSeedHash())\n+        return false;\n+\n+    hdChainRet = hdChainTmp;\n+\n+    return true;\n+}\n+\n+bool CWallet::IsHDEnabled()\n+{\n+    CHDChain hdChainCurrent;\n+    return GetHDChain(hdChainCurrent);\n+}\n+\n bool CWallet::IsMine(const CTransaction& tx) const\n {\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n@@ -1485,62 +1738,7 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n     }\n     return nChange;\n }\n-CPubKey CWallet::GenerateNewHDMasterKey()\n-{\n-\tCKey key;\n-\tkey.MakeNewKey(true);\n-\n-\tint64_t nCreationTime = GetTime();\n-\tCKeyMetadata metadata(nCreationTime);\n-\n-\t// calculate the pubkey\n-\tCPubKey pubkey = key.GetPubKey();\n-\tassert(key.VerifyPubKey(pubkey));\n \n-\t// set the hd keypath to \"m\" -> Master, refers the masterkeyid to itself\n-\tmetadata.hdKeypath = \"m\";\n-\tmetadata.hdMasterKeyID = pubkey.GetID();\n-\n-\t{\n-\t\tLOCK(cs_wallet);\n-\n-\t\t// mem store the metadata\n-\t\tmapKeyMetadata[pubkey.GetID()] = metadata;\n-\n-\t\t// write the key&metadata to the database\n-\t\tif (!AddKeyPubKey(key, pubkey))\n-\t\t\tthrow std::runtime_error(std::string(__func__) + \": AddKeyPubKey failed\");\n-\t}\n-\n-\treturn pubkey;\n-}\n-\n-bool CWallet::SetHDMasterKey(const CPubKey& pubkey)\n-{\n-\tLOCK(cs_wallet);\n-\n-\t// ensure this wallet.dat can only be opened by clients supporting HD\n-\tSetMinVersion(FEATURE_HD);\n-\n-\t// store the keyid (hash160) together with\n-\t// the child index counter in the database\n-\t// as a hdchain object\n-\tCHDChain newHdChain;\n-\tnewHdChain.masterKeyID = pubkey.GetID();\n-\tSetHDChain(newHdChain, false);\n-\n-\treturn true;\n-}\n-\n-bool CWallet::SetHDChain(const CHDChain& chain, bool memonly)\n-{\n-\tLOCK(cs_wallet);\n-\tif (!memonly && !CWalletDB(strWalletFile).WriteHDChain(chain))\n-\t\tthrow runtime_error(std::string(__func__) + \": writing chain failed\");\n-\n-\thdChain = chain;\n-\treturn true;\n-}\n int64_t CWalletTx::GetTxTime() const\n {\n     int64_t n = nTimeSmart;\n@@ -3892,16 +4090,7 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n     CWalletDB(strWalletFile).ErasePurpose(CSyscoinAddress(address).ToString());\n     return CWalletDB(strWalletFile).EraseName(CSyscoinAddress(address).ToString());\n }\n-bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)\n- {\n-\tif (fFileBacked)\n-\t\t{\n-\t\tif (!CWalletDB(strWalletFile).WriteDefaultKey(vchPubKey))\n-\t\t\t return false;\n-\t\t}\n-\tvchDefaultKey = vchPubKey;\n-\treturn true;\n-}\n+\n /**\n  * Mark old keypool keys as used,\n  * and generate all new keys \n@@ -4580,7 +4769,10 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n         strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), DEFAULT_SEND_FREE_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n-\tstrUsage += HelpMessageOpt(\"-usehd\", _(\"Use hierarchical deterministic key generation (HD) after BIP32. Only has effect during wallet creation/first start\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_USE_HD_WALLET));\n+    strUsage += HelpMessageOpt(\"-usehd\", _(\"Use hierarchical deterministic key generation (HD) after BIP39/BIP44. Only has effect during wallet creation/first start\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_USE_HD_WALLET));\n+    strUsage += HelpMessageOpt(\"-mnemonic\", _(\"User defined mnemonic for HD wallet (bip39). Only has effect during wallet creation/first start (default: randomly generated)\"));\n+    strUsage += HelpMessageOpt(\"-mnemonicpassphrase\", _(\"User defined mnemonic passphrase for HD wallet (BIP39). Only has effect during wallet creation/first start (default: empty string)\"));\n+    strUsage += HelpMessageOpt(\"-hdseed\", _(\"User defined seed for HD wallet (should be in hex). Only has effect during wallet creation/first start (default: randomly generated)\"));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), DEFAULT_WALLET_DAT));\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n@@ -4608,167 +4800,230 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n     return strUsage;\n }\n \n-bool CWallet::InitLoadWallet()\n+CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n {\n-\tstd::string walletFile = GetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n-\n-\t// needed to restore wallet transaction meta data after -zapwallettxes\n-\tstd::vector<CWalletTx> vWtx;\n-\n-\tif (GetBoolArg(\"-zapwallettxes\", false)) {\n-\t\tuiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n-\n-\t\tCWallet *tempWallet = new CWallet(walletFile);\n-\t\tDBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n-\t\tif (nZapWalletRet != DB_LOAD_OK) {\n-\t\t\treturn InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n-\t\t}\n-\n-\t\tdelete tempWallet;\n-\t\ttempWallet = NULL;\n-\t}\n-\n-\tuiInterface.InitMessage(_(\"Loading wallet...\"));\n-\n-\tint64_t nStart = GetTimeMillis();\n-\tbool fFirstRun = true;\n-\tCWallet *walletInstance = new CWallet(walletFile);\n-\tDBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n-\tif (nLoadWalletRet != DB_LOAD_OK)\n-\t{\n-\t\tif (nLoadWalletRet == DB_CORRUPT)\n-\t\t\treturn InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n-\t\telse if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n-\t\t{\n-\t\t\tInitWarning(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n-\t\t\t\t\" or address book entries might be missing or incorrect.\"),\n-\t\t\t\twalletFile));\n-\t\t}\n-\t\telse if (nLoadWalletRet == DB_TOO_NEW)\n-\t\t\treturn InitError(strprintf(_(\"Error loading %s: Wallet requires newer version of %s\"),\n-\t\t\t\twalletFile, _(PACKAGE_NAME)));\n-\t\telse if (nLoadWalletRet == DB_NEED_REWRITE)\n-\t\t{\n-\t\t\treturn InitError(strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)));\n-\t\t}\n-\t\telse\n-\t\t\treturn InitError(strprintf(_(\"Error loading %s\"), walletFile));\n-\t}\n-\n-\tif (GetBoolArg(\"-upgradewallet\", fFirstRun))\n-\t{\n-\t\tint nMaxVersion = GetArg(\"-upgradewallet\", 0);\n-\t\tif (nMaxVersion == 0) // the -upgradewallet without argument case\n-\t\t{\n-\t\t\tLogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n-\t\t\tnMaxVersion = CLIENT_VERSION;\n-\t\t\twalletInstance->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n-\t\t}\n-\t\telse\n-\t\t\tLogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n-\t\tif (nMaxVersion < walletInstance->GetVersion())\n-\t\t{\n-\t\t\treturn InitError(_(\"Cannot downgrade wallet\"));\n-\t\t}\n-\t\twalletInstance->SetMaxVersion(nMaxVersion);\n-\t}\n-\n-\tif (fFirstRun)\n-\t{\n-\t\t// Create new keyUser and set as default key\n-\t\tif (GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET) && walletInstance->hdChain.masterKeyID.IsNull()) {\n-\t\t\t// generate a new master key\n-\t\t\tCPubKey masterPubKey = walletInstance->GenerateNewHDMasterKey();\n-\t\t\tif (!walletInstance->SetHDMasterKey(masterPubKey))\n-\t\t\t\tthrow std::runtime_error(std::string(__func__) + \": Storing master key failed\");\n-\t\t}\n-\t\tCPubKey newDefaultKey;\n-\t\tif (walletInstance->GetKeyFromPool(newDefaultKey)) {\n-\t\t\twalletInstance->SetDefaultKey(newDefaultKey);\n-\t\t\tif (!walletInstance->SetAddressBook(walletInstance->vchDefaultKey.GetID(), \"\", \"receive\"))\n-\t\t\t\treturn InitError(_(\"Cannot write default address\") += \"\\n\");\n-\t\t}\n-\n-\t\twalletInstance->SetBestChain(chainActive.GetLocator());\n-\t}\n-\telse if (mapArgs.count(\"-usehd\")) {\n-\t\tbool useHD = GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET);\n-\t\tif (!walletInstance->hdChain.masterKeyID.IsNull() && !useHD)\n-\t\t\treturn InitError(strprintf(_(\"Error loading %s: You can't disable HD on a already existing HD wallet\"), walletFile));\n-\t\tif (walletInstance->hdChain.masterKeyID.IsNull() && useHD)\n-\t\t\treturn InitError(strprintf(_(\"Error loading %s: You can't enable HD on a already existing non-HD wallet\"), walletFile));\n-\t}\n-\n-\tLogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n-\n-\tRegisterValidationInterface(walletInstance);\n-\n-\tCBlockIndex *pindexRescan = chainActive.Tip();\n-\tif (GetBoolArg(\"-rescan\", false))\n-\t\tpindexRescan = chainActive.Genesis();\n-\telse\n-\t{\n-\t\tCWalletDB walletdb(walletFile);\n-\t\tCBlockLocator locator;\n-\t\tif (walletdb.ReadBestBlock(locator))\n-\t\t\tpindexRescan = FindForkInGlobalIndex(chainActive, locator);\n-\t\telse\n-\t\t\tpindexRescan = chainActive.Genesis();\n-\t}\n-\tif (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n-\t{\n-\t\t//We can't rescan beyond non-pruned blocks, stop and throw an error\n-\t\t//this might happen if a user uses a old wallet within a pruned node\n-\t\t// or if he ran -disablewallet for a longer time, then decided to re-enable\n-\t\tif (fPruneMode)\n-\t\t{\n-\t\t\tCBlockIndex *block = chainActive.Tip();\n-\t\t\twhile (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA) && block->pprev->nTx > 0 && pindexRescan != block)\n-\t\t\t\tblock = block->pprev;\n-\n-\t\t\tif (pindexRescan != block)\n-\t\t\t\treturn InitError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\"));\n-\t\t}\n-\n-\t\tuiInterface.InitMessage(_(\"Rescanning...\"));\n-\t\tLogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n-\t\tnStart = GetTimeMillis();\n-\t\twalletInstance->ScanForWalletTransactions(pindexRescan, true);\n-\t\tLogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n-\t\twalletInstance->SetBestChain(chainActive.GetLocator());\n-\t\tnWalletDBUpdated++;\n-\n-\t\t// Restore wallet transaction metadata after -zapwallettxes=1\n-\t\tif (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n-\t\t{\n-\t\t\tCWalletDB walletdb(walletFile);\n-\n-\t\t\tBOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n-\t\t\t{\n-\t\t\t\tuint256 hash = wtxOld.GetHash();\n-\t\t\t\tstd::map<uint256, CWalletTx>::iterator mi = walletInstance->mapWallet.find(hash);\n-\t\t\t\tif (mi != walletInstance->mapWallet.end())\n-\t\t\t\t{\n-\t\t\t\t\tconst CWalletTx* copyFrom = &wtxOld;\n-\t\t\t\t\tCWalletTx* copyTo = &mi->second;\n-\t\t\t\t\tcopyTo->mapValue = copyFrom->mapValue;\n-\t\t\t\t\tcopyTo->vOrderForm = copyFrom->vOrderForm;\n-\t\t\t\t\tcopyTo->nTimeReceived = copyFrom->nTimeReceived;\n-\t\t\t\t\tcopyTo->nTimeSmart = copyFrom->nTimeSmart;\n-\t\t\t\t\tcopyTo->fFromMe = copyFrom->fFromMe;\n-\t\t\t\t\tcopyTo->strFromAccount = copyFrom->strFromAccount;\n-\t\t\t\t\tcopyTo->nOrderPos = copyFrom->nOrderPos;\n-\t\t\t\t\twalletdb.WriteTx(*copyTo);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\twalletInstance->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n+    // needed to restore wallet transaction meta data after -zapwallettxes\n+    std::vector<CWalletTx> vWtx;\n \n-\tpwalletMain = walletInstance;\n-\treturn true;\n+    if (GetBoolArg(\"-zapwallettxes\", false)) {\n+        uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n+\n+        CWallet *tempWallet = new CWallet(walletFile);\n+        DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n+        if (nZapWalletRet != DB_LOAD_OK) {\n+            InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n+            return NULL;\n+        }\n+\n+        delete tempWallet;\n+        tempWallet = NULL;\n+    }\n+\n+    uiInterface.InitMessage(_(\"Loading wallet...\"));\n+\n+    int64_t nStart = GetTimeMillis();\n+    bool fFirstRun = true;\n+    CWallet *walletInstance = new CWallet(walletFile);\n+    DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n+    if (nLoadWalletRet != DB_LOAD_OK)\n+    {\n+        if (nLoadWalletRet == DB_CORRUPT) {\n+            InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n+            return NULL;\n+        }\n+        else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n+        {\n+            InitWarning(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n+                                         \" or address book entries might be missing or incorrect.\"),\n+                walletFile));\n+        }\n+        else if (nLoadWalletRet == DB_TOO_NEW) {\n+            InitError(strprintf(_(\"Error loading %s: Wallet requires newer version of %s\"), walletFile, _(PACKAGE_NAME)));\n+            return NULL;\n+        }\n+        else if (nLoadWalletRet == DB_NEED_REWRITE)\n+        {\n+            InitError(strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)));\n+            return NULL;\n+        }\n+        else {\n+            InitError(strprintf(_(\"Error loading %s\"), walletFile));\n+            return NULL;\n+        }\n+    }\n+\n+    if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n+    {\n+        int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n+        if (nMaxVersion == 0) // the -upgradewallet without argument case\n+        {\n+            LogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n+            nMaxVersion = CLIENT_VERSION;\n+            walletInstance->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n+        }\n+        else\n+            LogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n+        if (nMaxVersion < walletInstance->GetVersion())\n+        {\n+            InitError(_(\"Cannot downgrade wallet\"));\n+            return NULL;\n+        }\n+        walletInstance->SetMaxVersion(nMaxVersion);\n+    }\n+\n+    if (fFirstRun)\n+    {\n+        // Create new keyUser and set as default key\n+        if (GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET) && !walletInstance->IsHDEnabled()) {\n+            if (GetArg(\"-mnemonicpassphrase\", \"\").size() > 256) {\n+                InitError(_(\"Mnemonic passphrase is too long, must be at most 256 characters\"));\n+                return NULL;\n+            }\n+            // generate a new master key\n+            walletInstance->GenerateNewHDChain();\n+\n+            // ensure this wallet.dat can only be opened by clients supporting HD\n+            walletInstance->SetMinVersion(FEATURE_HD);\n+        }\n+\n+\t\t// Top up the keypool\n+        if (!walletInstance->TopUpKeyPool()) {\n+            InitError(_(\"Unable to generate initial keys\") += \"\\n\");\n+            return NULL;\n+        }\n+\n+        walletInstance->SetBestChain(chainActive.GetLocator());\n+\n+        // Try to create wallet backup right after new wallet was created\n+        std::string strBackupWarning;\n+        std::string strBackupError;\n+        if(!AutoBackupWallet(walletInstance, \"\", strBackupWarning, strBackupError)) {\n+            if (!strBackupWarning.empty()) {\n+                InitWarning(strBackupWarning);\n+            }\n+            if (!strBackupError.empty()) {\n+                InitError(strBackupError);\n+                return NULL;\n+            }\n+        }\n+\n+    }\n+    else if (IsArgSet(\"-usehd\")) {\n+        bool useHD = GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET);\n+        if (walletInstance->IsHDEnabled() && !useHD) {\n+            InitError(strprintf(_(\"Error loading %s: You can't disable HD on a already existing HD wallet\"),\n+                                walletInstance->strWalletFile));\n+            return NULL;\n+        }\n+        if (!walletInstance->IsHDEnabled() && useHD) {\n+            InitError(strprintf(_(\"Error loading %s: You can't enable HD on a already existing non-HD wallet\"),\n+                                walletInstance->strWalletFile));\n+            return NULL;\n+        }\n+    }\n+\n+    // Warn user every time he starts non-encrypted HD wallet\n+    if (GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET) && !walletInstance->IsLocked()) {\n+        InitWarning(_(\"Make sure to encrypt your wallet and delete all non-encrypted backups after you verified that wallet works!\"));\n+    }\n+\n+    LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n+\n+    RegisterValidationInterface(walletInstance);\n+\n+    CBlockIndex *pindexRescan = chainActive.Tip();\n+    if (GetBoolArg(\"-rescan\", false))\n+        pindexRescan = chainActive.Genesis();\n+    else\n+    {\n+        CWalletDB walletdb(walletFile);\n+        CBlockLocator locator;\n+        if (walletdb.ReadBestBlock(locator))\n+            pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n+        else\n+            pindexRescan = chainActive.Genesis();\n+    }\n+    if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n+    {\n+        //We can't rescan beyond non-pruned blocks, stop and throw an error\n+        //this might happen if a user uses a old wallet within a pruned node\n+        // or if he ran -disablewallet for a longer time, then decided to re-enable\n+        if (fPruneMode)\n+        {\n+            CBlockIndex *block = chainActive.Tip();\n+            while (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA) && block->pprev->nTx > 0 && pindexRescan != block)\n+                block = block->pprev;\n+\n+            if (pindexRescan != block) {\n+                InitError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\"));\n+                return NULL;\n+            }\n+        }\n+\n+        uiInterface.InitMessage(_(\"Rescanning...\"));\n+        LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n+        nStart = GetTimeMillis();\n+        walletInstance->ScanForWalletTransactions(pindexRescan, true);\n+        LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n+        walletInstance->SetBestChain(chainActive.GetLocator());\n+        CWalletDB::IncrementUpdateCounter();\n+\n+        // Restore wallet transaction metadata after -zapwallettxes=1\n+        if (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n+        {\n+            CWalletDB walletdb(walletFile);\n+\n+            BOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n+            {\n+                uint256 hash = wtxOld.GetHash();\n+                std::map<uint256, CWalletTx>::iterator mi = walletInstance->mapWallet.find(hash);\n+                if (mi != walletInstance->mapWallet.end())\n+                {\n+                    const CWalletTx* copyFrom = &wtxOld;\n+                    CWalletTx* copyTo = &mi->second;\n+                    copyTo->mapValue = copyFrom->mapValue;\n+                    copyTo->vOrderForm = copyFrom->vOrderForm;\n+                    copyTo->nTimeReceived = copyFrom->nTimeReceived;\n+                    copyTo->nTimeSmart = copyFrom->nTimeSmart;\n+                    copyTo->fFromMe = copyFrom->fFromMe;\n+                    copyTo->strFromAccount = copyFrom->strFromAccount;\n+                    copyTo->nOrderPos = copyFrom->nOrderPos;\n+                    walletdb.WriteTx(*copyTo);\n+                }\n+            }\n+        }\n+    }\n+    walletInstance->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n+\n+    {\n+        LOCK(walletInstance->cs_wallet);\n+        LogPrintf(\"setExternalKeyPool.size() = %u\\n\",   walletInstance->KeypoolCountExternalKeys());\n+        LogPrintf(\"setInternalKeyPool.size() = %u\\n\",   walletInstance->KeypoolCountInternalKeys());\n+        LogPrintf(\"mapWallet.size() = %u\\n\",            walletInstance->mapWallet.size());\n+        LogPrintf(\"mapAddressBook.size() = %u\\n\",       walletInstance->mapAddressBook.size());\n+    }\n+\n+    return walletInstance;\n }\n \n+bool CWallet::InitLoadWallet()\n+{\n+    if (GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n+        pwalletMain = NULL;\n+        LogPrintf(\"Wallet disabled!\\n\");\n+        return true;\n+    }\n+\n+    std::string walletFile = GetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n+\n+    CWallet * const pwallet = CreateWalletFromFile(walletFile);\n+    if (!pwallet) {\n+        return false;\n+    }\n+    pwalletMain = pwallet;\n+\n+    return true;\n+}\n \n std::atomic<bool> CWallet::fFlushThreadRunning(false);\n "
      },
      {
        "sha": "1e35214070dd2caf11a0e97f88eb3aae45787eff",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 29,
        "deletions": 15,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
        "patch": "@@ -75,6 +75,7 @@ static const bool DEFAULT_DISABLE_WALLET = false;\n \n extern const char * DEFAULT_WALLET_DAT;\n \n+//! if set, all keys will be derived by using BIP39/BIP44\n static const bool DEFAULT_USE_HD_WALLET = true;\n \n bool AutoBackupWallet (CWallet* wallet, const std::string& strWalletFile_, std::string& strBackupWarningRet, std::string& strBackupErrorRet);\n@@ -90,13 +91,14 @@ class CWalletTx;\n /** (client) version numbers for particular wallet features */\n enum WalletFeature\n {\n-\tFEATURE_BASE = 10500, // the earliest version new wallets supports (only useful for getinfo's clientversion output)\n+    FEATURE_BASE = 10500, // the earliest version new wallets supports (only useful for getinfo's clientversion output)\n \n-\tFEATURE_WALLETCRYPT = 40000, // wallet encryption\n-\tFEATURE_COMPRPUBKEY = 60000, // compressed public keys\n+    FEATURE_WALLETCRYPT = 40000, // wallet encryption\n+    FEATURE_COMPRPUBKEY = 60000, // compressed public keys\n+    FEATURE_HD = 120200,    // Hierarchical key derivation after BIP32 (HD Wallet), BIP44 (multi-coin), BIP39 (mnemonic)\n+                            // which uses on-the-fly private key derivation\n \n-\tFEATURE_HD = 130000, // Hierarchical key derivation after BIP32 (HD Wallet)\n-\tFEATURE_LATEST = FEATURE_COMPRPUBKEY // HD is optional, use FEATURE_COMPRPUBKEY as latest version\n+    FEATURE_LATEST = 61000\n };\n \n enum AvailableCoinsType\n@@ -597,6 +599,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n \n+    /* HD derive new child key (on internal or external chain) */\n+    void DeriveNewChildKey(const CKeyMetadata& metadata, CKey& secretRet, uint32_t nAccountIndex, bool fInternal /*= false*/);\n \n     bool fFileBacked;\n \n@@ -701,12 +705,12 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     std::map<CTxDestination, CAddressBookData> mapAddressBook;\n \n-\tCPubKey vchDefaultKey;\n-\n     std::set<COutPoint> setLockedCoins;\n \n     int64_t nKeysLeftSinceAutoBackup;\n \n+    std::map<CKeyID, CHDPubKey> mapHdPubKeys; //<! memory map of HD extended pubkeys\n+\n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n \n     //! check whether we are allowed to upgrade (or already support) to the named feature\n@@ -760,10 +764,16 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Generate a new key\n      */\n     CPubKey GenerateNewKey(uint32_t nAccountIndex, bool fInternal /*= false*/);\n+    //! HaveKey implementation that also checks the mapHdPubKeys\n     bool HaveKey(const CKeyID &address) const override;\n+    //! GetPubKey implementation that also checks the mapHdPubKeys\n     bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n     //! GetKey implementation that can derive a HD private key on the fly\n     bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n+    //! Adds a HDPubKey into the wallet(database)\n+    bool AddHDPubKey(const CExtPubKey &extPubKey, bool fInternal);\n+    //! loads a HDPubKey into the wallets memory\n+    bool LoadHDPubKey(const CHDPubKey &hdPubKey);\n     //! Adds a key to the store, and saves it to disk.\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n@@ -948,7 +958,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         AssertLockHeld(cs_wallet); // set{Ex,In}ternalKeyPool\n         return setInternalKeyPool.size() + setExternalKeyPool.size();\n     }\n-\tbool SetDefaultKey(const CPubKey &vchPubKey);\n+\n \n     //! signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n     bool SetMinVersion(enum WalletFeature, CWalletDB* pwalletdbIn = NULL, bool fExplicit = false);\n@@ -1018,15 +1028,19 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     static bool InitAutoBackup();\n \n     bool BackupWallet(const std::string& strDest);\n-\t/* Set the HD chain model (chain child index counters) */\n-\tbool SetHDChain(const CHDChain& chain, bool memonly);\n-\tconst CHDChain& GetHDChain() { return hdChain; }\n \n-\t/* Generates a new HD master key (will not be activated) */\n-\tCPubKey GenerateNewHDMasterKey();\n+    /**\n+     * HD Wallet Functions\n+     */\n \n-\t/* Set the current HD master key (will reset the chain child index counters) */\n-\tbool SetHDMasterKey(const CPubKey& key);\n+    /* Returns true if HD is enabled */\n+    bool IsHDEnabled();\n+    /* Generates a new HD chain */\n+    void GenerateNewHDChain();\n+    /* Set the HD chain model (chain child index counters) */\n+    bool SetHDChain(const CHDChain& chain, bool memonly);\n+    bool SetCryptedHDChain(const CHDChain& chain, bool memonly);\n+    bool GetDecryptedHDChain(CHDChain& hdChainRet);\n };\n \n /** A key allocated from the key pool. */"
      },
      {
        "sha": "f4be99269d2397fed23b9e94f9f0cabffdaf185f",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 849,
        "deletions": 858,
        "changes": 1707,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
        "patch": "@@ -1,5 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2015 The Syscoin Core developers\n+// Copyright (c) 2014-2017 The Syscoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -15,1016 +16,1006 @@\n #include \"utiltime.h\"\n #include \"wallet/wallet.h\"\n \n-#include <boost/version.hpp>\n+#include <atomic>\n+\n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n-#include <boost/scoped_ptr.hpp>\n #include <boost/thread.hpp>\n-\n-using namespace std;\n-\n+// SYSCOIN\n+#include \"alias.h\"\n static uint64_t nAccountingEntryNumber = 0;\n \n+static std::atomic<unsigned int> nWalletDBUpdateCounter;\n+\n //\n // CWalletDB\n //\n \n-bool CWalletDB::WriteName(const string& strAddress, const string& strName)\n+bool CWalletDB::WriteName(const std::string& strAddress, const std::string& strName)\n {\n-\tnWalletDBUpdated++;\n-\treturn Write(make_pair(string(\"name\"), strAddress), strName);\n+    nWalletDBUpdateCounter++;\n+    return Write(make_pair(std::string(\"name\"), strAddress), strName);\n }\n \n-bool CWalletDB::EraseName(const string& strAddress)\n+bool CWalletDB::EraseName(const std::string& strAddress)\n {\n-\t// This should only be used for sending addresses, never for receiving addresses,\n-\t// receiving addresses must always have an address book entry if they're not change return.\n-\tnWalletDBUpdated++;\n-\treturn Erase(make_pair(string(\"name\"), strAddress));\n+    // This should only be used for sending addresses, never for receiving addresses,\n+    // receiving addresses must always have an address book entry if they're not change return.\n+    nWalletDBUpdateCounter++;\n+    return Erase(make_pair(std::string(\"name\"), strAddress));\n }\n \n-bool CWalletDB::WritePurpose(const string& strAddress, const string& strPurpose)\n+bool CWalletDB::WritePurpose(const std::string& strAddress, const std::string& strPurpose)\n {\n-\tnWalletDBUpdated++;\n-\treturn Write(make_pair(string(\"purpose\"), strAddress), strPurpose);\n+    nWalletDBUpdateCounter++;\n+    return Write(make_pair(std::string(\"purpose\"), strAddress), strPurpose);\n }\n \n-bool CWalletDB::ErasePurpose(const string& strPurpose)\n+bool CWalletDB::ErasePurpose(const std::string& strPurpose)\n {\n-\tnWalletDBUpdated++;\n-\treturn Erase(make_pair(string(\"purpose\"), strPurpose));\n+    nWalletDBUpdateCounter++;\n+    return Erase(make_pair(std::string(\"purpose\"), strPurpose));\n }\n \n bool CWalletDB::WriteTx(const CWalletTx& wtx)\n {\n-\tnWalletDBUpdated++;\n-\treturn Write(std::make_pair(std::string(\"tx\"), wtx.GetHash()), wtx);\n+    nWalletDBUpdateCounter++;\n+    return Write(std::make_pair(std::string(\"tx\"), wtx.GetHash()), wtx);\n }\n \n bool CWalletDB::EraseTx(uint256 hash)\n {\n-\tnWalletDBUpdated++;\n-\treturn Erase(std::make_pair(std::string(\"tx\"), hash));\n+    nWalletDBUpdateCounter++;\n+    return Erase(std::make_pair(std::string(\"tx\"), hash));\n }\n \n bool CWalletDB::WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata& keyMeta)\n {\n-\tnWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n \n-\tif (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n-\t\tkeyMeta, false))\n-\t\treturn false;\n+    if (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n+               keyMeta, false))\n+        return false;\n \n-\t// hash pubkey/privkey to accelerate wallet load\n-\tstd::vector<unsigned char> vchKey;\n-\tvchKey.reserve(vchPubKey.size() + vchPrivKey.size());\n-\tvchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-\tvchKey.insert(vchKey.end(), vchPrivKey.begin(), vchPrivKey.end());\n+    // hash pubkey/privkey to accelerate wallet load\n+    std::vector<unsigned char> vchKey;\n+    vchKey.reserve(vchPubKey.size() + vchPrivKey.size());\n+    vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+    vchKey.insert(vchKey.end(), vchPrivKey.begin(), vchPrivKey.end());\n \n-\treturn Write(std::make_pair(std::string(\"key\"), vchPubKey), std::make_pair(vchPrivKey, Hash(vchKey.begin(), vchKey.end())), false);\n+    return Write(std::make_pair(std::string(\"key\"), vchPubKey), std::make_pair(vchPrivKey, Hash(vchKey.begin(), vchKey.end())), false);\n }\n \n bool CWalletDB::WriteCryptedKey(const CPubKey& vchPubKey,\n-\tconst std::vector<unsigned char>& vchCryptedSecret,\n-\tconst CKeyMetadata &keyMeta)\n+                                const std::vector<unsigned char>& vchCryptedSecret,\n+                                const CKeyMetadata &keyMeta)\n {\n-\tconst bool fEraseUnencryptedKey = true;\n-\tnWalletDBUpdated++;\n-\n-\tif (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n-\t\tkeyMeta))\n-\t\treturn false;\n-\n-\tif (!Write(std::make_pair(std::string(\"ckey\"), vchPubKey), vchCryptedSecret, false))\n-\t\treturn false;\n-\tif (fEraseUnencryptedKey)\n-\t{\n-\t\tErase(std::make_pair(std::string(\"key\"), vchPubKey));\n-\t\tErase(std::make_pair(std::string(\"wkey\"), vchPubKey));\n-\t}\n-\treturn true;\n+    const bool fEraseUnencryptedKey = true;\n+    nWalletDBUpdateCounter++;\n+\n+    if (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n+            keyMeta))\n+        return false;\n+\n+    if (!Write(std::make_pair(std::string(\"ckey\"), vchPubKey), vchCryptedSecret, false))\n+        return false;\n+    if (fEraseUnencryptedKey)\n+    {\n+        Erase(std::make_pair(std::string(\"key\"), vchPubKey));\n+        Erase(std::make_pair(std::string(\"wkey\"), vchPubKey));\n+    }\n+    return true;\n }\n \n bool CWalletDB::WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)\n {\n-\tnWalletDBUpdated++;\n-\treturn Write(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n+    nWalletDBUpdateCounter++;\n+    return Write(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n }\n \n bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)\n {\n-\tnWalletDBUpdated++;\n-\treturn Write(std::make_pair(std::string(\"cscript\"), hash), *(const CScriptBase*)(&redeemScript), false);\n+    nWalletDBUpdateCounter++;\n+    return Write(std::make_pair(std::string(\"cscript\"), hash), *(const CScriptBase*)(&redeemScript), false);\n }\n \n-bool CWalletDB::WriteWatchOnly(const CScript &dest)\n+bool CWalletDB::WriteWatchOnly(const CScript &dest, const CKeyMetadata& keyMeta)\n {\n-\tnWalletDBUpdated++;\n-\treturn Write(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)), '1');\n+    nWalletDBUpdateCounter++;\n+    if (!Write(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest)), keyMeta))\n+        return false;\n+    return Write(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)), '1');\n }\n \n bool CWalletDB::EraseWatchOnly(const CScript &dest)\n {\n-\tnWalletDBUpdated++;\n-\treturn Erase(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)));\n+    nWalletDBUpdateCounter++;\n+    if (!Erase(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest))))\n+        return false;\n+    return Erase(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)));\n }\n \n bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)\n {\n-\tnWalletDBUpdated++;\n-\tWrite(std::string(\"bestblock\"), CBlockLocator()); // Write empty block locator so versions that require a merkle branch automatically rescan\n-\treturn Write(std::string(\"bestblock_nomerkle\"), locator);\n+    nWalletDBUpdateCounter++;\n+    Write(std::string(\"bestblock\"), CBlockLocator()); // Write empty block locator so versions that require a merkle branch automatically rescan\n+    return Write(std::string(\"bestblock_nomerkle\"), locator);\n }\n \n bool CWalletDB::ReadBestBlock(CBlockLocator& locator)\n {\n-\tif (Read(std::string(\"bestblock\"), locator) && !locator.vHave.empty()) return true;\n-\treturn Read(std::string(\"bestblock_nomerkle\"), locator);\n+    if (Read(std::string(\"bestblock\"), locator) && !locator.vHave.empty()) return true;\n+    return Read(std::string(\"bestblock_nomerkle\"), locator);\n }\n \n bool CWalletDB::WriteOrderPosNext(int64_t nOrderPosNext)\n {\n-\tnWalletDBUpdated++;\n-\treturn Write(std::string(\"orderposnext\"), nOrderPosNext);\n-}\n-\n-bool CWalletDB::WriteDefaultKey(const CPubKey& vchPubKey)\n-{\n-\tnWalletDBUpdated++;\n-\treturn Write(std::string(\"defaultkey\"), vchPubKey);\n+    nWalletDBUpdateCounter++;\n+    return Write(std::string(\"orderposnext\"), nOrderPosNext);\n }\n \n bool CWalletDB::ReadPool(int64_t nPool, CKeyPool& keypool)\n {\n-\treturn Read(std::make_pair(std::string(\"pool\"), nPool), keypool);\n+    return Read(std::make_pair(std::string(\"pool\"), nPool), keypool);\n }\n \n bool CWalletDB::WritePool(int64_t nPool, const CKeyPool& keypool)\n {\n-\tnWalletDBUpdated++;\n-\treturn Write(std::make_pair(std::string(\"pool\"), nPool), keypool);\n+    nWalletDBUpdateCounter++;\n+    return Write(std::make_pair(std::string(\"pool\"), nPool), keypool);\n }\n \n bool CWalletDB::ErasePool(int64_t nPool)\n {\n-\tnWalletDBUpdated++;\n-\treturn Erase(std::make_pair(std::string(\"pool\"), nPool));\n+    nWalletDBUpdateCounter++;\n+    return Erase(std::make_pair(std::string(\"pool\"), nPool));\n }\n \n bool CWalletDB::WriteMinVersion(int nVersion)\n {\n-\treturn Write(std::string(\"minversion\"), nVersion);\n+    return Write(std::string(\"minversion\"), nVersion);\n }\n \n-bool CWalletDB::ReadAccount(const string& strAccount, CAccount& account)\n+bool CWalletDB::ReadAccount(const std::string& strAccount, CAccount& account)\n {\n-\taccount.SetNull();\n-\treturn Read(make_pair(string(\"acc\"), strAccount), account);\n+    account.SetNull();\n+    return Read(make_pair(std::string(\"acc\"), strAccount), account);\n }\n \n-bool CWalletDB::WriteAccount(const string& strAccount, const CAccount& account)\n+bool CWalletDB::WriteAccount(const std::string& strAccount, const CAccount& account)\n {\n-\treturn Write(make_pair(string(\"acc\"), strAccount), account);\n+    return Write(make_pair(std::string(\"acc\"), strAccount), account);\n }\n \n bool CWalletDB::WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry)\n {\n-\treturn Write(std::make_pair(std::string(\"acentry\"), std::make_pair(acentry.strAccount, nAccEntryNum)), acentry);\n+    return Write(std::make_pair(std::string(\"acentry\"), std::make_pair(acentry.strAccount, nAccEntryNum)), acentry);\n }\n \n bool CWalletDB::WriteAccountingEntry_Backend(const CAccountingEntry& acentry)\n {\n-\treturn WriteAccountingEntry(++nAccountingEntryNumber, acentry);\n+    return WriteAccountingEntry(++nAccountingEntryNumber, acentry);\n }\n \n-CAmount CWalletDB::GetAccountCreditDebit(const string& strAccount)\n+CAmount CWalletDB::GetAccountCreditDebit(const std::string& strAccount)\n {\n-\tlist<CAccountingEntry> entries;\n-\tListAccountCreditDebit(strAccount, entries);\n+    std::list<CAccountingEntry> entries;\n+    ListAccountCreditDebit(strAccount, entries);\n \n-\tCAmount nCreditDebit = 0;\n-\tBOOST_FOREACH(const CAccountingEntry& entry, entries)\n-\t\tnCreditDebit += entry.nCreditDebit;\n+    CAmount nCreditDebit = 0;\n+    BOOST_FOREACH (const CAccountingEntry& entry, entries)\n+        nCreditDebit += entry.nCreditDebit;\n \n-\treturn nCreditDebit;\n+    return nCreditDebit;\n }\n \n-void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountingEntry>& entries)\n+void CWalletDB::ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries)\n {\n-\tbool fAllAccounts = (strAccount == \"*\");\n-\n-\tDbc* pcursor = GetCursor();\n-\tif (!pcursor)\n-\t\tthrow runtime_error(std::string(__func__) + \": cannot create DB cursor\");\n-\tunsigned int fFlags = DB_SET_RANGE;\n-\twhile (true)\n-\t{\n-\t\t// Read next record\n-\t\tCDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-\t\tif (fFlags == DB_SET_RANGE)\n-\t\t\tssKey << std::make_pair(std::string(\"acentry\"), std::make_pair((fAllAccounts ? string(\"\") : strAccount), uint64_t(0)));\n-\t\tCDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-\t\tint ret = ReadAtCursor(pcursor, ssKey, ssValue, fFlags);\n-\t\tfFlags = DB_NEXT;\n-\t\tif (ret == DB_NOTFOUND)\n-\t\t\tbreak;\n-\t\telse if (ret != 0)\n-\t\t{\n-\t\t\tpcursor->close();\n-\t\t\tthrow runtime_error(std::string(__func__) + \": error scanning DB\");\n-\t\t}\n-\n-\t\t// Unserialize\n-\t\tstring strType;\n-\t\tssKey >> strType;\n-\t\tif (strType != \"acentry\")\n-\t\t\tbreak;\n-\t\tCAccountingEntry acentry;\n-\t\tssKey >> acentry.strAccount;\n-\t\tif (!fAllAccounts && acentry.strAccount != strAccount)\n-\t\t\tbreak;\n-\n-\t\tssValue >> acentry;\n-\t\tssKey >> acentry.nEntryNo;\n-\t\tentries.push_back(acentry);\n-\t}\n-\n-\tpcursor->close();\n-}\n+    bool fAllAccounts = (strAccount == \"*\");\n \n-DBErrors CWalletDB::ReorderTransactions(CWallet* pwallet)\n-{\n-\tLOCK(pwallet->cs_wallet);\n-\t// Old wallets didn't have any defined order for transactions\n-\t// Probably a bad idea to change the output of this\n-\n-\t// First: get all CWalletTx and CAccountingEntry into a sorted-by-time multimap.\n-\ttypedef pair<CWalletTx*, CAccountingEntry*> TxPair;\n-\ttypedef multimap<int64_t, TxPair > TxItems;\n-\tTxItems txByTime;\n-\n-\tfor (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); ++it)\n-\t{\n-\t\tCWalletTx* wtx = &((*it).second);\n-\t\ttxByTime.insert(make_pair(wtx->nTimeReceived, TxPair(wtx, (CAccountingEntry*)0)));\n-\t}\n-\tlist<CAccountingEntry> acentries;\n-\tListAccountCreditDebit(\"\", acentries);\n-\tBOOST_FOREACH(CAccountingEntry& entry, acentries)\n-\t{\n-\t\ttxByTime.insert(make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n-\t}\n-\n-\tint64_t& nOrderPosNext = pwallet->nOrderPosNext;\n-\tnOrderPosNext = 0;\n-\tstd::vector<int64_t> nOrderPosOffsets;\n-\tfor (TxItems::iterator it = txByTime.begin(); it != txByTime.end(); ++it)\n-\t{\n-\t\tCWalletTx *const pwtx = (*it).second.first;\n-\t\tCAccountingEntry *const pacentry = (*it).second.second;\n-\t\tint64_t& nOrderPos = (pwtx != 0) ? pwtx->nOrderPos : pacentry->nOrderPos;\n-\n-\t\tif (nOrderPos == -1)\n-\t\t{\n-\t\t\tnOrderPos = nOrderPosNext++;\n-\t\t\tnOrderPosOffsets.push_back(nOrderPos);\n-\n-\t\t\tif (pwtx)\n-\t\t\t{\n-\t\t\t\tif (!WriteTx(*pwtx))\n-\t\t\t\t\treturn DB_LOAD_FAIL;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t\tif (!WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n-\t\t\t\t\treturn DB_LOAD_FAIL;\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tint64_t nOrderPosOff = 0;\n-\t\t\tBOOST_FOREACH(const int64_t& nOffsetStart, nOrderPosOffsets)\n-\t\t\t{\n-\t\t\t\tif (nOrderPos >= nOffsetStart)\n-\t\t\t\t\t++nOrderPosOff;\n-\t\t\t}\n-\t\t\tnOrderPos += nOrderPosOff;\n-\t\t\tnOrderPosNext = std::max(nOrderPosNext, nOrderPos + 1);\n+    Dbc* pcursor = GetCursor();\n+    if (!pcursor)\n+        throw std::runtime_error(std::string(__func__) + \": cannot create DB cursor\");\n+    bool setRange = true;\n+    while (true)\n+    {\n+        // Read next record\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        if (setRange)\n+            ssKey << std::make_pair(std::string(\"acentry\"), std::make_pair((fAllAccounts ? std::string(\"\") : strAccount), uint64_t(0)));\n+        CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+        int ret = ReadAtCursor(pcursor, ssKey, ssValue, setRange);\n+        setRange = false;\n+        if (ret == DB_NOTFOUND)\n+            break;\n+        else if (ret != 0)\n+        {\n+            pcursor->close();\n+            throw std::runtime_error(std::string(__func__) + \": error scanning DB\");\n+        }\n \n-\t\t\tif (!nOrderPosOff)\n-\t\t\t\tcontinue;\n+        // Unserialize\n+        std::string strType;\n+        ssKey >> strType;\n+        if (strType != \"acentry\")\n+            break;\n+        CAccountingEntry acentry;\n+        ssKey >> acentry.strAccount;\n+        if (!fAllAccounts && acentry.strAccount != strAccount)\n+            break;\n \n-\t\t\t// Since we're changing the order, write it back\n-\t\t\tif (pwtx)\n-\t\t\t{\n-\t\t\t\tif (!WriteTx(*pwtx))\n-\t\t\t\t\treturn DB_LOAD_FAIL;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t\tif (!WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n-\t\t\t\t\treturn DB_LOAD_FAIL;\n-\t\t}\n-\t}\n-\tWriteOrderPosNext(nOrderPosNext);\n-\n-\treturn DB_LOAD_OK;\n+        ssValue >> acentry;\n+        ssKey >> acentry.nEntryNo;\n+        entries.push_back(acentry);\n+    }\n+\n+    pcursor->close();\n }\n \n class CWalletScanState {\n public:\n-\tunsigned int nKeys;\n-\tunsigned int nCKeys;\n-\tunsigned int nKeyMeta;\n-\tbool fIsEncrypted;\n-\tbool fAnyUnordered;\n-\tint nFileVersion;\n-\tvector<uint256> vWalletUpgrade;\n-\n-\tCWalletScanState() {\n-\t\tnKeys = nCKeys = nKeyMeta = 0;\n-\t\tfIsEncrypted = false;\n-\t\tfAnyUnordered = false;\n-\t\tnFileVersion = 0;\n-\t}\n+    unsigned int nKeys;\n+    unsigned int nCKeys;\n+    unsigned int nWatchKeys;\n+    unsigned int nKeyMeta;\n+    bool fIsEncrypted;\n+    bool fAnyUnordered;\n+    int nFileVersion;\n+    std::vector<uint256> vWalletUpgrade;\n+\n+    CWalletScanState() {\n+        nKeys = nCKeys = nWatchKeys = nKeyMeta = 0;\n+        fIsEncrypted = false;\n+        fAnyUnordered = false;\n+        nFileVersion = 0;\n+    }\n };\n \n bool\n ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n-\tCWalletScanState &wss, string& strType, string& strErr)\n-{\n-\ttry {\n-\t\t// Unserialize\n-\t\t// Taking advantage of the fact that pair serialization\n-\t\t// is just the two items serialized one after the other\n-\t\tssKey >> strType;\n-\t\tif (strType == \"name\")\n-\t\t{\n-\t\t\tstring strAddress;\n-\t\t\tssKey >> strAddress;\n-\t\t\tssValue >> pwallet->mapAddressBook[CSyscoinAddress(strAddress).Get()].name;\n-\t\t}\n-\t\telse if (strType == \"purpose\")\n-\t\t{\n-\t\t\tstring strAddress;\n-\t\t\tssKey >> strAddress;\n-\t\t\tssValue >> pwallet->mapAddressBook[CSyscoinAddress(strAddress).Get()].purpose;\n-\t\t}\n-\t\telse if (strType == \"tx\")\n-\t\t{\n-\t\t\tuint256 hash;\n-\t\t\tssKey >> hash;\n-\t\t\tCWalletTx wtx;\n-\t\t\tssValue >> wtx;\n-\t\t\tCValidationState state;\n-\t\t\tif (!(CheckTransaction(wtx, state) && (wtx.GetHash() == hash) && state.IsValid()))\n+             CWalletScanState &wss, std::string& strType, std::string& strErr)\n+{\n+    try {\n+        // Unserialize\n+        // Taking advantage of the fact that pair serialization\n+        // is just the two items serialized one after the other\n+        ssKey >> strType;\n+        if (strType == \"name\")\n+        {\n+            std::string strAddress;\n+            ssKey >> strAddress;\n+            ssValue >> pwallet->mapAddressBook[CSyscoinAddress(strAddress).Get()].name;\n+        }\n+        else if (strType == \"purpose\")\n+        {\n+            std::string strAddress;\n+            ssKey >> strAddress;\n+            ssValue >> pwallet->mapAddressBook[CSyscoinAddress(strAddress).Get()].purpose;\n+        }\n+        else if (strType == \"tx\")\n+        {\n+            uint256 hash;\n+            ssKey >> hash;\n+            CWalletTx wtx;\n+            ssValue >> wtx;\n+            CValidationState state;\n+            if (!(CheckTransaction(*wtx.tx, state) && (wtx.tx->GetHash() == hash) && state.IsValid()))\n \t\t\t{\n \t\t\t\t// SYSCOIN\n-\t\t\t\tif (wtx.GetHash() != hash && wtx.nVersion == GetSyscoinTxVersion())\n+\t\t\t\tif (wtx.tx->GetHash() != hash && wtx.tx->nVersion == SYSCOIN_TX_VERSION)\n \t\t\t\t\treturn true;\n \t\t\t\tstrErr = \"Error reading wallet database. CheckTransaction failed, validation state: \" + FormatStateMessage(state);\n \t\t\t\treturn false;\n \t\t\t}\n-\t\t\t// SYSCOIN don't need this\n-\t\t\t// Undo serialize changes in 31600\n-\t\t\t/* if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-\t\t\t{\n-\t\t\tif (!ssValue.empty())\n-\t\t\t{\n-\t\t\tchar fTmp;\n-\t\t\tchar fUnused;\n-\t\t\tssValue >> fTmp >> fUnused >> wtx.strFromAccount;\n-\t\t\tstrErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d '%s' %s\",\n-\t\t\twtx.fTimeReceivedIsTxTime, fTmp, wtx.strFromAccount, hash.ToString());\n-\t\t\twtx.fTimeReceivedIsTxTime = fTmp;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\tstrErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n-\t\t\twtx.fTimeReceivedIsTxTime = 0;\n-\t\t\t}\n-\t\t\twss.vWalletUpgrade.push_back(hash);\n-\t\t\t}*/\n-\n-\t\t\tif (wtx.nOrderPos == -1)\n-\t\t\t\twss.fAnyUnordered = true;\n-\n-\t\t\tpwallet->AddToWallet(wtx, true, NULL);\n-\t\t}\n-\t\telse if (strType == \"acentry\")\n-\t\t{\n-\t\t\tstring strAccount;\n-\t\t\tssKey >> strAccount;\n-\t\t\tuint64_t nNumber;\n-\t\t\tssKey >> nNumber;\n-\t\t\tif (nNumber > nAccountingEntryNumber)\n-\t\t\t\tnAccountingEntryNumber = nNumber;\n-\n-\t\t\tif (!wss.fAnyUnordered)\n-\t\t\t{\n-\t\t\t\tCAccountingEntry acentry;\n-\t\t\t\tssValue >> acentry;\n-\t\t\t\tif (acentry.nOrderPos == -1)\n-\t\t\t\t\twss.fAnyUnordered = true;\n-\t\t\t}\n-\t\t}\n-\t\telse if (strType == \"watchs\")\n-\t\t{\n-\t\t\tCScript script;\n-\t\t\tssKey >> *(CScriptBase*)(&script);\n-\t\t\tchar fYes;\n-\t\t\tssValue >> fYes;\n-\t\t\tif (fYes == '1')\n-\t\t\t\tpwallet->LoadWatchOnly(script);\n-\n-\t\t\t// Watch-only addresses have no birthday information for now,\n-\t\t\t// so set the wallet birthday to the beginning of time.\n-\t\t\tpwallet->nTimeFirstKey = 1;\n-\t\t}\n-\t\telse if (strType == \"key\" || strType == \"wkey\")\n-\t\t{\n-\t\t\tCPubKey vchPubKey;\n-\t\t\tssKey >> vchPubKey;\n-\t\t\tif (!vchPubKey.IsValid())\n-\t\t\t{\n-\t\t\t\tstrErr = \"Error reading wallet database: CPubKey corrupt\";\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tCKey key;\n-\t\t\tCPrivKey pkey;\n-\t\t\tuint256 hash;\n-\n-\t\t\tif (strType == \"key\")\n-\t\t\t{\n-\t\t\t\twss.nKeys++;\n-\t\t\t\tssValue >> pkey;\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tCWalletKey wkey;\n-\t\t\t\tssValue >> wkey;\n-\t\t\t\tpkey = wkey.vchPrivKey;\n-\t\t\t}\n-\n-\t\t\t// Old wallets store keys as \"key\" [pubkey] => [privkey]\n-\t\t\t// ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n-\t\t\t// using EC operations as a checksum.\n-\t\t\t// Newer wallets store keys as \"key\"[pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n-\t\t\t// remaining backwards-compatible.\n-\t\t\ttry\n-\t\t\t{\n-\t\t\t\tssValue >> hash;\n-\t\t\t}\n-\t\t\tcatch (...) {}\n \n-\t\t\tbool fSkipCheck = false;\n-\n-\t\t\tif (!hash.IsNull())\n-\t\t\t{\n-\t\t\t\t// hash pubkey/privkey to accelerate wallet load\n-\t\t\t\tstd::vector<unsigned char> vchKey;\n-\t\t\t\tvchKey.reserve(vchPubKey.size() + pkey.size());\n-\t\t\t\tvchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-\t\t\t\tvchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n-\n-\t\t\t\tif (Hash(vchKey.begin(), vchKey.end()) != hash)\n-\t\t\t\t{\n-\t\t\t\t\tstrErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n-\t\t\t\t\treturn false;\n-\t\t\t\t}\n-\n-\t\t\t\tfSkipCheck = true;\n-\t\t\t}\n-\n-\t\t\tif (!key.Load(pkey, vchPubKey, fSkipCheck))\n-\t\t\t{\n-\t\t\t\tstrErr = \"Error reading wallet database: CPrivKey corrupt\";\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tif (!pwallet->LoadKey(key, vchPubKey))\n-\t\t\t{\n-\t\t\t\tstrErr = \"Error reading wallet database: LoadKey failed\";\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t\telse if (strType == \"mkey\")\n-\t\t{\n-\t\t\tunsigned int nID;\n-\t\t\tssKey >> nID;\n-\t\t\tCMasterKey kMasterKey;\n-\t\t\tssValue >> kMasterKey;\n-\t\t\tif (pwallet->mapMasterKeys.count(nID) != 0)\n-\t\t\t{\n-\t\t\t\tstrErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tpwallet->mapMasterKeys[nID] = kMasterKey;\n-\t\t\tif (pwallet->nMasterKeyMaxID < nID)\n-\t\t\t\tpwallet->nMasterKeyMaxID = nID;\n-\t\t}\n-\t\telse if (strType == \"ckey\")\n-\t\t{\n+            // Undo serialize changes in 31600\n+            if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n+            {\n+                if (!ssValue.empty())\n+                {\n+                    char fTmp;\n+                    char fUnused;\n+                    ssValue >> fTmp >> fUnused >> wtx.strFromAccount;\n+                    strErr = strprintf(\"LoadWallet() upgrading tx ver=%d %d '%s' %s\",\n+                                       wtx.fTimeReceivedIsTxTime, fTmp, wtx.strFromAccount, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = fTmp;\n+                }\n+                else\n+                {\n+                    strErr = strprintf(\"LoadWallet() repairing tx ver=%d %s\", wtx.fTimeReceivedIsTxTime, hash.ToString());\n+                    wtx.fTimeReceivedIsTxTime = 0;\n+                }\n+                wss.vWalletUpgrade.push_back(hash);\n+            }\n+\n+            if (wtx.nOrderPos == -1)\n+                wss.fAnyUnordered = true;\n+\n+            pwallet->LoadToWallet(wtx);\n+        }\n+        else if (strType == \"acentry\")\n+        {\n+            std::string strAccount;\n+            ssKey >> strAccount;\n+            uint64_t nNumber;\n+            ssKey >> nNumber;\n+            if (nNumber > nAccountingEntryNumber)\n+                nAccountingEntryNumber = nNumber;\n+\n+            if (!wss.fAnyUnordered)\n+            {\n+                CAccountingEntry acentry;\n+                ssValue >> acentry;\n+                if (acentry.nOrderPos == -1)\n+                    wss.fAnyUnordered = true;\n+            }\n+        }\n+        else if (strType == \"watchs\")\n+        {\n+            wss.nWatchKeys++;\n+            CScript script;\n+            ssKey >> *(CScriptBase*)(&script);\n+            char fYes;\n+            ssValue >> fYes;\n+            if (fYes == '1')\n+                pwallet->LoadWatchOnly(script);\n+        }\n+        else if (strType == \"key\" || strType == \"wkey\")\n+        {\n+            CPubKey vchPubKey;\n+            ssKey >> vchPubKey;\n+            if (!vchPubKey.IsValid())\n+            {\n+                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                return false;\n+            }\n+            CKey key;\n+            CPrivKey pkey;\n+            uint256 hash;\n+\n+            if (strType == \"key\")\n+            {\n+                wss.nKeys++;\n+                ssValue >> pkey;\n+            } else {\n+                CWalletKey wkey;\n+                ssValue >> wkey;\n+                pkey = wkey.vchPrivKey;\n+            }\n+\n+            // Old wallets store keys as \"key\" [pubkey] => [privkey]\n+            // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n+            // using EC operations as a checksum.\n+            // Newer wallets store keys as \"key\"[pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while\n+            // remaining backwards-compatible.\n+            try\n+            {\n+                ssValue >> hash;\n+            }\n+            catch (...) {}\n+\n+            bool fSkipCheck = false;\n+\n+            if (!hash.IsNull())\n+            {\n+                // hash pubkey/privkey to accelerate wallet load\n+                std::vector<unsigned char> vchKey;\n+                vchKey.reserve(vchPubKey.size() + pkey.size());\n+                vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+                vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n+\n+                if (Hash(vchKey.begin(), vchKey.end()) != hash)\n+                {\n+                    strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n+                    return false;\n+                }\n+\n+                fSkipCheck = true;\n+            }\n+\n+            if (!key.Load(pkey, vchPubKey, fSkipCheck))\n+            {\n+                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+                return false;\n+            }\n+            if (!pwallet->LoadKey(key, vchPubKey))\n+            {\n+                strErr = \"Error reading wallet database: LoadKey failed\";\n+                return false;\n+            }\n+        }\n+        else if (strType == \"mkey\")\n+        {\n+            unsigned int nID;\n+            ssKey >> nID;\n+            CMasterKey kMasterKey;\n+            ssValue >> kMasterKey;\n+            if(pwallet->mapMasterKeys.count(nID) != 0)\n+            {\n+                strErr = strprintf(\"Error reading wallet database: duplicate CMasterKey id %u\", nID);\n+                return false;\n+            }\n+            pwallet->mapMasterKeys[nID] = kMasterKey;\n+            if (pwallet->nMasterKeyMaxID < nID)\n+                pwallet->nMasterKeyMaxID = nID;\n+        }\n+        else if (strType == \"ckey\")\n+        {\n+            CPubKey vchPubKey;\n+            ssKey >> vchPubKey;\n+            if (!vchPubKey.IsValid())\n+            {\n+                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                return false;\n+            }\n+            std::vector<unsigned char> vchPrivKey;\n+            ssValue >> vchPrivKey;\n+            wss.nCKeys++;\n+\n+            if (!pwallet->LoadCryptedKey(vchPubKey, vchPrivKey))\n+            {\n+                strErr = \"Error reading wallet database: LoadCryptedKey failed\";\n+                return false;\n+            }\n+            wss.fIsEncrypted = true;\n+        }\n+        else if (strType == \"keymeta\" || strType == \"watchmeta\")\n+        {\n+            CTxDestination keyID;\n+            if (strType == \"keymeta\")\n+            {\n+              CPubKey vchPubKey;\n+              ssKey >> vchPubKey;\n+              keyID = vchPubKey.GetID();\n+            }\n+            else if (strType == \"watchmeta\")\n+            {\n+              CScript script;\n+              ssKey >> *(CScriptBase*)(&script);\n+              keyID = CScriptID(script);\n+            }\n+\n+            CKeyMetadata keyMeta;\n+            ssValue >> keyMeta;\n+            wss.nKeyMeta++;\n+\n+            pwallet->LoadKeyMetadata(keyID, keyMeta);\n+        }\n+        else if (strType == \"defaultkey\")\n+        {\n+\t\t\t// We don't want or need the default key, but if there is one set,\n+\t\t\t// we want to make sure that it is valid so that we can detect corruption\n \t\t\tCPubKey vchPubKey;\n-\t\t\tssKey >> vchPubKey;\n-\t\t\tif (!vchPubKey.IsValid())\n-\t\t\t{\n-\t\t\t\tstrErr = \"Error reading wallet database: CPubKey corrupt\";\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tvector<unsigned char> vchPrivKey;\n-\t\t\tssValue >> vchPrivKey;\n-\t\t\twss.nCKeys++;\n-\n-\t\t\tif (!pwallet->LoadCryptedKey(vchPubKey, vchPrivKey))\n-\t\t\t{\n-\t\t\t\tstrErr = \"Error reading wallet database: LoadCryptedKey failed\";\n+\t\t\tssValue >> vchPubKey;\n+\t\t\tif (!vchPubKey.IsValid()) {\n+\t\t\t\tstrErr = \"Error reading wallet database: Default Key corrupt\";\n \t\t\t\treturn false;\n \t\t\t}\n-\t\t\twss.fIsEncrypted = true;\n-\t\t}\n-\t\telse if (strType == \"keymeta\")\n-\t\t{\n-\t\t\tCPubKey vchPubKey;\n-\t\t\tssKey >> vchPubKey;\n-\t\t\tCKeyMetadata keyMeta;\n-\t\t\tssValue >> keyMeta;\n-\t\t\twss.nKeyMeta++;\n-\n-\t\t\tpwallet->LoadKeyMetadata(vchPubKey, keyMeta);\n-\n-\t\t\t// find earliest key creation time, as wallet birthday\n-\t\t\tif (!pwallet->nTimeFirstKey ||\n-\t\t\t\t(keyMeta.nCreateTime < pwallet->nTimeFirstKey))\n-\t\t\t\tpwallet->nTimeFirstKey = keyMeta.nCreateTime;\n-\t\t}\n-\t\telse if (strType == \"defaultkey\")\n-\t\t{\n-\t\t\tssValue >> pwallet->vchDefaultKey;\n-\t\t}\n-\t\telse if (strType == \"pool\")\n-\t\t{\n-\t\t\tint64_t nIndex;\n-\t\t\tssKey >> nIndex;\n-\t\t\tCKeyPool keypool;\n-\t\t\tssValue >> keypool;\n-\t\t\tpwallet->setKeyPool.insert(nIndex);\n-\n-\t\t\t// If no metadata exists yet, create a default with the pool key's\n-\t\t\t// creation time. Note that this may be overwritten by actually\n-\t\t\t// stored metadata for that key later, which is fine.\n-\t\t\tCKeyID keyid = keypool.vchPubKey.GetID();\n-\t\t\tif (pwallet->mapKeyMetadata.count(keyid) == 0)\n-\t\t\t\tpwallet->mapKeyMetadata[keyid] = CKeyMetadata(keypool.nTime);\n-\t\t}\n-\t\telse if (strType == \"version\")\n-\t\t{\n-\t\t\tssValue >> wss.nFileVersion;\n-\t\t\tif (wss.nFileVersion == 10300)\n-\t\t\t\twss.nFileVersion = 300;\n-\t\t}\n-\t\telse if (strType == \"cscript\")\n-\t\t{\n-\t\t\tuint160 hash;\n-\t\t\tssKey >> hash;\n-\t\t\tCScript script;\n-\t\t\tssValue >> *(CScriptBase*)(&script);\n-\t\t\tif (!pwallet->LoadCScript(script))\n-\t\t\t{\n-\t\t\t\tstrErr = \"Error reading wallet database: LoadCScript failed\";\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t\telse if (strType == \"orderposnext\")\n-\t\t{\n-\t\t\tssValue >> pwallet->nOrderPosNext;\n-\t\t}\n-\t\telse if (strType == \"destdata\")\n-\t\t{\n-\t\t\tstd::string strAddress, strKey, strValue;\n-\t\t\tssKey >> strAddress;\n-\t\t\tssKey >> strKey;\n-\t\t\tssValue >> strValue;\n-\t\t\tif (!pwallet->LoadDestData(CSyscoinAddress(strAddress).Get(), strKey, strValue))\n-\t\t\t{\n-\t\t\t\tstrErr = \"Error reading wallet database: LoadDestData failed\";\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t\telse if (strType == \"hdchain\")\n-\t\t{\n-\t\t\tCHDChain chain;\n-\t\t\tssValue >> chain;\n-\t\t\tif (!pwallet->SetHDChain(chain, true))\n-\t\t\t{\n-\t\t\t\tstrErr = \"Error reading wallet database: SetHDChain failed\";\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t}\n-\tcatch (...)\n-\t{\n-\t\treturn false;\n-\t}\n-\treturn true;\n-}\n-\n-static bool IsKeyType(string strType)\n-{\n-\treturn (strType == \"key\" || strType == \"wkey\" ||\n-\t\tstrType == \"mkey\" || strType == \"ckey\");\n+        }\n+        else if (strType == \"pool\")\n+        {\n+            int64_t nIndex;\n+            ssKey >> nIndex;\n+            CKeyPool keypool;\n+            ssValue >> keypool;\n+            pwallet->LoadKeyPool(nIndex, keypool);\n+        }\n+        else if (strType == \"version\")\n+        {\n+            ssValue >> wss.nFileVersion;\n+            if (wss.nFileVersion == 10300)\n+                wss.nFileVersion = 300;\n+        }\n+        else if (strType == \"cscript\")\n+        {\n+            uint160 hash;\n+            ssKey >> hash;\n+            CScript script;\n+            ssValue >> *(CScriptBase*)(&script);\n+            if (!pwallet->LoadCScript(script))\n+            {\n+                strErr = \"Error reading wallet database: LoadCScript failed\";\n+                return false;\n+            }\n+        }\n+        else if (strType == \"orderposnext\")\n+        {\n+            ssValue >> pwallet->nOrderPosNext;\n+        }\n+        else if (strType == \"destdata\")\n+        {\n+            std::string strAddress, strKey, strValue;\n+            ssKey >> strAddress;\n+            ssKey >> strKey;\n+            ssValue >> strValue;\n+            if (!pwallet->LoadDestData(CSyscoinAddress(strAddress).Get(), strKey, strValue))\n+            {\n+                strErr = \"Error reading wallet database: LoadDestData failed\";\n+                return false;\n+            }\n+        }\n+        else if (strType == \"hdchain\")\n+        {\n+            CHDChain chain;\n+            ssValue >> chain;\n+            if (!pwallet->SetHDChain(chain, true))\n+            {\n+                strErr = \"Error reading wallet database: SetHDChain failed\";\n+                return false;\n+            }\n+        }\n+        else if (strType == \"chdchain\")\n+        {\n+            CHDChain chain;\n+            ssValue >> chain;\n+            if (!pwallet->SetCryptedHDChain(chain, true))\n+            {\n+                strErr = \"Error reading wallet database: SetHDCryptedChain failed\";\n+                return false;\n+            }\n+        }\n+        else if (strType == \"hdpubkey\")\n+        {\n+            CPubKey vchPubKey;\n+            ssKey >> vchPubKey;\n+\n+            CHDPubKey hdPubKey;\n+            ssValue >> hdPubKey;\n+\n+            if(vchPubKey != hdPubKey.extPubKey.pubkey)\n+            {\n+                strErr = \"Error reading wallet database: CHDPubKey corrupt\";\n+                return false;\n+            }\n+            if (!pwallet->LoadHDPubKey(hdPubKey))\n+            {\n+                strErr = \"Error reading wallet database: LoadHDPubKey failed\";\n+                return false;\n+            }\n+        }\n+    } catch (...)\n+    {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+static bool IsKeyType(std::string strType)\n+{\n+    return (strType== \"key\" || strType == \"wkey\" ||\n+            strType == \"mkey\" || strType == \"ckey\" ||\n+            strType == \"hdchain\" || strType == \"chdchain\");\n }\n \n DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n {\n-\tpwallet->vchDefaultKey = CPubKey();\n-\tCWalletScanState wss;\n-\tbool fNoncriticalErrors = false;\n-\tDBErrors result = DB_LOAD_OK;\n-\n-\ttry {\n-\t\tLOCK(pwallet->cs_wallet);\n-\t\tint nMinVersion = 0;\n-\t\tif (Read((string)\"minversion\", nMinVersion))\n-\t\t{\n-\t\t\tif (nMinVersion > CLIENT_VERSION)\n-\t\t\t\treturn DB_TOO_NEW;\n-\t\t\tpwallet->LoadMinVersion(nMinVersion);\n-\t\t}\n-\n-\t\t// Get cursor\n-\t\tDbc* pcursor = GetCursor();\n-\t\tif (!pcursor)\n-\t\t{\n-\t\t\tLogPrintf(\"Error getting wallet database cursor\\n\");\n-\t\t\treturn DB_CORRUPT;\n-\t\t}\n-\n-\t\twhile (true)\n-\t\t{\n-\t\t\t// Read next record\n-\t\t\tCDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-\t\t\tCDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-\t\t\tint ret = ReadAtCursor(pcursor, ssKey, ssValue);\n-\t\t\tif (ret == DB_NOTFOUND)\n-\t\t\t\tbreak;\n-\t\t\telse if (ret != 0)\n-\t\t\t{\n-\t\t\t\tLogPrintf(\"Error reading next record from wallet database\\n\");\n-\t\t\t\treturn DB_CORRUPT;\n-\t\t\t}\n-\n-\t\t\t// Try to be tolerant of single corrupt records:\n-\t\t\tstring strType, strErr;\n-\t\t\tif (!ReadKeyValue(pwallet, ssKey, ssValue, wss, strType, strErr))\n-\t\t\t{\n-\t\t\t\t// losing keys is considered a catastrophic error, anything else\n-\t\t\t\t// we assume the user can live with:\n-\t\t\t\tif (IsKeyType(strType))\n-\t\t\t\t\tresult = DB_CORRUPT;\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\t// Leave other errors alone, if we try to fix them we might make things worse.\n-\t\t\t\t\tfNoncriticalErrors = true; // ... but do warn the user there is something wrong.\n-\t\t\t\t\tif (strType == \"tx\")\n-\t\t\t\t\t\t// Rescan if there is a bad transaction record:\n-\t\t\t\t\t\tSoftSetBoolArg(\"-rescan\", true);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (!strErr.empty())\n-\t\t\t\tLogPrintf(\"%s\\n\", strErr);\n-\t\t}\n-\t\tpcursor->close();\n-\t}\n-\tcatch (const boost::thread_interrupted&) {\n-\t\tthrow;\n-\t}\n-\tcatch (...) {\n-\t\tresult = DB_CORRUPT;\n-\t}\n-\n-\tif (fNoncriticalErrors && result == DB_LOAD_OK)\n-\t\tresult = DB_NONCRITICAL_ERROR;\n-\n-\t// Any wallet corruption at all: skip any rewriting or\n-\t// upgrading, we don't want to make it worse.\n-\tif (result != DB_LOAD_OK)\n-\t\treturn result;\n-\n-\tLogPrintf(\"nFileVersion = %d\\n\", wss.nFileVersion);\n-\n-\tLogPrintf(\"Keys: %u plaintext, %u encrypted, %u w/ metadata, %u total\\n\",\n-\t\twss.nKeys, wss.nCKeys, wss.nKeyMeta, wss.nKeys + wss.nCKeys);\n-\n-\t// nTimeFirstKey is only reliable if all keys have metadata\n-\tif ((wss.nKeys + wss.nCKeys) != wss.nKeyMeta)\n-\t\tpwallet->nTimeFirstKey = 1; // 0 would be considered 'no value'\n-\n-\tBOOST_FOREACH(uint256 hash, wss.vWalletUpgrade)\n-\t\tWriteTx(pwallet->mapWallet[hash]);\n-\n-\t// Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n-\tif (wss.fIsEncrypted && (wss.nFileVersion == 40000 || wss.nFileVersion == 50000))\n-\t\treturn DB_NEED_REWRITE;\n-\n-\tif (wss.nFileVersion < CLIENT_VERSION) // Update\n-\t\tWriteVersion(CLIENT_VERSION);\n-\n-\tif (wss.fAnyUnordered)\n-\t\tresult = ReorderTransactions(pwallet);\n-\n-\tpwallet->laccentries.clear();\n-\tListAccountCreditDebit(\"*\", pwallet->laccentries);\n-\tBOOST_FOREACH(CAccountingEntry& entry, pwallet->laccentries) {\n-\t\tpwallet->wtxOrdered.insert(make_pair(entry.nOrderPos, CWallet::TxPair((CWalletTx*)0, &entry)));\n-\t}\n-\n-\treturn result;\n+    CWalletScanState wss;\n+    bool fNoncriticalErrors = false;\n+    DBErrors result = DB_LOAD_OK;\n+\n+    LOCK(pwallet->cs_wallet);\n+    try {\n+        int nMinVersion = 0;\n+        if (Read((std::string)\"minversion\", nMinVersion))\n+        {\n+            if (nMinVersion > CLIENT_VERSION)\n+                return DB_TOO_NEW;\n+            pwallet->LoadMinVersion(nMinVersion);\n+        }\n+\n+        // Get cursor\n+        Dbc* pcursor = GetCursor();\n+        if (!pcursor)\n+        {\n+            LogPrintf(\"Error getting wallet database cursor\\n\");\n+            return DB_CORRUPT;\n+        }\n+\n+        while (true)\n+        {\n+            // Read next record\n+            CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+            CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+            int ret = ReadAtCursor(pcursor, ssKey, ssValue);\n+            if (ret == DB_NOTFOUND)\n+                break;\n+            else if (ret != 0)\n+            {\n+                LogPrintf(\"Error reading next record from wallet database\\n\");\n+                return DB_CORRUPT;\n+            }\n+\n+            // Try to be tolerant of single corrupt records:\n+            std::string strType, strErr;\n+            if (!ReadKeyValue(pwallet, ssKey, ssValue, wss, strType, strErr))\n+            {\n+                // losing keys is considered a catastrophic error, anything else\n+                // we assume the user can live with:\n+                if (IsKeyType(strType) || strType == \"defaultkey\")\n+                    result = DB_CORRUPT;\n+                else\n+                {\n+                    // Leave other errors alone, if we try to fix them we might make things worse.\n+                    fNoncriticalErrors = true; // ... but do warn the user there is something wrong.\n+                    if (strType == \"tx\")\n+                        // Rescan if there is a bad transaction record:\n+                        SoftSetBoolArg(\"-rescan\", true);\n+                }\n+            }\n+            if (!strErr.empty())\n+                LogPrintf(\"%s\\n\", strErr);\n+        }\n+        pcursor->close();\n+\n+        // Store initial external keypool size since we mostly use external keys in mixing\n+        pwallet->nKeysLeftSinceAutoBackup = pwallet->KeypoolCountExternalKeys();\n+        LogPrintf(\"nKeysLeftSinceAutoBackup: %d\\n\", pwallet->nKeysLeftSinceAutoBackup);\n+    }\n+    catch (const boost::thread_interrupted&) {\n+        throw;\n+    }\n+    catch (...) {\n+        result = DB_CORRUPT;\n+    }\n+\n+    if (fNoncriticalErrors && result == DB_LOAD_OK)\n+        result = DB_NONCRITICAL_ERROR;\n+\n+    // Any wallet corruption at all: skip any rewriting or\n+    // upgrading, we don't want to make it worse.\n+    if (result != DB_LOAD_OK)\n+        return result;\n+\n+    LogPrintf(\"nFileVersion = %d\\n\", wss.nFileVersion);\n+\n+    LogPrintf(\"Keys: %u plaintext, %u encrypted, %u w/ metadata, %u total\\n\",\n+           wss.nKeys, wss.nCKeys, wss.nKeyMeta, wss.nKeys + wss.nCKeys);\n+\n+    // nTimeFirstKey is only reliable if all keys have metadata\n+    if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta)\n+        pwallet->UpdateTimeFirstKey(1);\n+\n+    BOOST_FOREACH(uint256 hash, wss.vWalletUpgrade)\n+        WriteTx(pwallet->mapWallet[hash]);\n+\n+    // Rewrite encrypted wallets of versions 0.4.0 and 0.5.0rc:\n+    if (wss.fIsEncrypted && (wss.nFileVersion == 40000 || wss.nFileVersion == 50000))\n+        return DB_NEED_REWRITE;\n+\n+    if (wss.nFileVersion < CLIENT_VERSION) // Update\n+        WriteVersion(CLIENT_VERSION);\n+\n+    if (wss.fAnyUnordered)\n+        result = pwallet->ReorderTransactions();\n+\n+    pwallet->laccentries.clear();\n+    ListAccountCreditDebit(\"*\", pwallet->laccentries);\n+    BOOST_FOREACH(CAccountingEntry& entry, pwallet->laccentries) {\n+        pwallet->wtxOrdered.insert(make_pair(entry.nOrderPos, CWallet::TxPair((CWalletTx*)0, &entry)));\n+    }\n+\n+    return result;\n+}\n+\n+DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx)\n+{\n+    bool fNoncriticalErrors = false;\n+    DBErrors result = DB_LOAD_OK;\n+\n+    try {\n+        LOCK(pwallet->cs_wallet);\n+        int nMinVersion = 0;\n+        if (Read((std::string)\"minversion\", nMinVersion))\n+        {\n+            if (nMinVersion > CLIENT_VERSION)\n+                return DB_TOO_NEW;\n+            pwallet->LoadMinVersion(nMinVersion);\n+        }\n+\n+        // Get cursor\n+        Dbc* pcursor = GetCursor();\n+        if (!pcursor)\n+        {\n+            LogPrintf(\"Error getting wallet database cursor\\n\");\n+            return DB_CORRUPT;\n+        }\n+\n+        while (true)\n+        {\n+            // Read next record\n+            CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+            CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+            int ret = ReadAtCursor(pcursor, ssKey, ssValue);\n+            if (ret == DB_NOTFOUND)\n+                break;\n+            else if (ret != 0)\n+            {\n+                LogPrintf(\"Error reading next record from wallet database\\n\");\n+                return DB_CORRUPT;\n+            }\n+\n+            std::string strType;\n+            ssKey >> strType;\n+            if (strType == \"tx\") {\n+                uint256 hash;\n+                ssKey >> hash;\n+\n+                CWalletTx wtx;\n+                ssValue >> wtx;\n+\n+                vTxHash.push_back(hash);\n+                vWtx.push_back(wtx);\n+            }\n+        }\n+        pcursor->close();\n+    }\n+    catch (const boost::thread_interrupted&) {\n+        throw;\n+    }\n+    catch (...) {\n+        result = DB_CORRUPT;\n+    }\n+\n+    if (fNoncriticalErrors && result == DB_LOAD_OK)\n+        result = DB_NONCRITICAL_ERROR;\n+\n+    return result;\n+}\n+\n+DBErrors CWalletDB::ZapSelectTx(CWallet* pwallet, std::vector<uint256>& vTxHashIn, std::vector<uint256>& vTxHashOut)\n+{\n+    // build list of wallet TXs and hashes\n+    std::vector<uint256> vTxHash;\n+    std::vector<CWalletTx> vWtx;\n+    DBErrors err = FindWalletTx(pwallet, vTxHash, vWtx);\n+    if (err != DB_LOAD_OK) {\n+        return err;\n+    }\n+\n+    std::sort(vTxHash.begin(), vTxHash.end());\n+    std::sort(vTxHashIn.begin(), vTxHashIn.end());\n+\n+    // erase each matching wallet TX\n+    bool delerror = false;\n+    std::vector<uint256>::iterator it = vTxHashIn.begin();\n+    BOOST_FOREACH (uint256 hash, vTxHash) {\n+        while (it < vTxHashIn.end() && (*it) < hash) {\n+            it++;\n+        }\n+        if (it == vTxHashIn.end()) {\n+            break;\n+        }\n+        else if ((*it) == hash) {\n+            pwallet->mapWallet.erase(hash);\n+            if(!EraseTx(hash)) {\n+                LogPrint(\"db\", \"Transaction was found for deletion but returned database error: %s\\n\", hash.GetHex());\n+                delerror = true;\n+            }\n+            vTxHashOut.push_back(hash);\n+        }\n+    }\n+\n+    if (delerror) {\n+        return DB_CORRUPT;\n+    }\n+    return DB_LOAD_OK;\n+}\n+\n+DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, std::vector<CWalletTx>& vWtx)\n+{\n+    // build list of wallet TXs\n+    std::vector<uint256> vTxHash;\n+    DBErrors err = FindWalletTx(pwallet, vTxHash, vWtx);\n+    if (err != DB_LOAD_OK)\n+        return err;\n+\n+    // erase each wallet TX\n+    BOOST_FOREACH (uint256& hash, vTxHash) {\n+        if (!EraseTx(hash))\n+            return DB_CORRUPT;\n+    }\n+\n+    return DB_LOAD_OK;\n+}\n+\n+void ThreadFlushWalletDB()\n+{\n+    // Make this thread recognisable as the wallet flushing thread\n+    RenameThread(\"syscoin-wallet\");\n+\n+    static bool fOneThread;\n+    if (fOneThread)\n+        return;\n+    fOneThread = true;\n+    if (!GetBoolArg(\"-flushwallet\", DEFAULT_FLUSHWALLET))\n+        return;\n+\n+    unsigned int nLastSeen = CWalletDB::GetUpdateCounter();\n+    unsigned int nLastFlushed = CWalletDB::GetUpdateCounter();\n+    int64_t nLastWalletUpdate = GetTime();\n+    while (true)\n+    {\n+        MilliSleep(500);\n+\n+        if (nLastSeen != CWalletDB::GetUpdateCounter())\n+        {\n+            nLastSeen = CWalletDB::GetUpdateCounter();\n+            nLastWalletUpdate = GetTime();\n+        }\n+\n+        if (nLastFlushed != CWalletDB::GetUpdateCounter() && GetTime() - nLastWalletUpdate >= 2)\n+        {\n+            TRY_LOCK(bitdb.cs_db,lockDb);\n+            if (lockDb)\n+            {\n+                // Don't do this if any databases are in use\n+                int nRefCount = 0;\n+                std::map<std::string, int>::iterator mi = bitdb.mapFileUseCount.begin();\n+                while (mi != bitdb.mapFileUseCount.end())\n+                {\n+                    nRefCount += (*mi).second;\n+                    mi++;\n+                }\n+\n+                if (nRefCount == 0)\n+                {\n+                    boost::this_thread::interruption_point();\n+                    const std::string& strFile = pwalletMain->strWalletFile;\n+                    std::map<std::string, int>::iterator _mi = bitdb.mapFileUseCount.find(strFile);\n+                    if (_mi != bitdb.mapFileUseCount.end())\n+                    {\n+                        LogPrint(\"db\", \"Flushing %s\\n\", strFile);\n+                        nLastFlushed = CWalletDB::GetUpdateCounter();\n+                        int64_t nStart = GetTimeMillis();\n+\n+                        // Flush wallet file so it's self contained\n+                        bitdb.CloseDb(strFile);\n+                        bitdb.CheckpointLSN(strFile);\n+\n+                        bitdb.mapFileUseCount.erase(_mi++);\n+                        LogPrint(\"db\", \"Flushed %s %dms\\n\", strFile, GetTimeMillis() - nStart);\n+                    }\n+                }\n+            }\n+        }\n+    }\n }\n \n-DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, vector<uint256>& vTxHash, vector<CWalletTx>& vWtx)\n+//\n+// Try to (very carefully!) recover wallet file if there is a problem.\n+//\n+bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys)\n {\n-\tpwallet->vchDefaultKey = CPubKey();\n-\tbool fNoncriticalErrors = false;\n-\tDBErrors result = DB_LOAD_OK;\n-\n-\ttry {\n-\t\tLOCK(pwallet->cs_wallet);\n-\t\tint nMinVersion = 0;\n-\t\tif (Read((string)\"minversion\", nMinVersion))\n-\t\t{\n-\t\t\tif (nMinVersion > CLIENT_VERSION)\n-\t\t\t\treturn DB_TOO_NEW;\n-\t\t\tpwallet->LoadMinVersion(nMinVersion);\n-\t\t}\n-\n-\t\t// Get cursor\n-\t\tDbc* pcursor = GetCursor();\n-\t\tif (!pcursor)\n-\t\t{\n-\t\t\tLogPrintf(\"Error getting wallet database cursor\\n\");\n-\t\t\treturn DB_CORRUPT;\n-\t\t}\n-\n-\t\twhile (true)\n-\t\t{\n-\t\t\t// Read next record\n-\t\t\tCDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-\t\t\tCDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-\t\t\tint ret = ReadAtCursor(pcursor, ssKey, ssValue);\n-\t\t\tif (ret == DB_NOTFOUND)\n-\t\t\t\tbreak;\n-\t\t\telse if (ret != 0)\n-\t\t\t{\n-\t\t\t\tLogPrintf(\"Error reading next record from wallet database\\n\");\n-\t\t\t\treturn DB_CORRUPT;\n-\t\t\t}\n-\n-\t\t\tstring strType;\n-\t\t\tssKey >> strType;\n-\t\t\tif (strType == \"tx\") {\n-\t\t\t\tuint256 hash;\n-\t\t\t\tssKey >> hash;\n-\n-\t\t\t\tCWalletTx wtx;\n-\t\t\t\tssValue >> wtx;\n-\n-\t\t\t\tvTxHash.push_back(hash);\n-\t\t\t\tvWtx.push_back(wtx);\n-\t\t\t}\n-\t\t}\n-\t\tpcursor->close();\n-\t}\n-\tcatch (const boost::thread_interrupted&) {\n-\t\tthrow;\n-\t}\n-\tcatch (...) {\n-\t\tresult = DB_CORRUPT;\n-\t}\n-\n-\tif (fNoncriticalErrors && result == DB_LOAD_OK)\n-\t\tresult = DB_NONCRITICAL_ERROR;\n-\n-\treturn result;\n+    // Recovery procedure:\n+    // move wallet file to wallet.timestamp.bak\n+    // Call Salvage with fAggressive=true to\n+    // get as much data as possible.\n+    // Rewrite salvaged data to fresh wallet file\n+    // Set -rescan so any missing transactions will be\n+    // found.\n+    int64_t now = GetTime();\n+    std::string newFilename = strprintf(\"wallet.%d.bak\", now);\n+\n+    int result = dbenv.dbenv->dbrename(NULL, filename.c_str(), NULL,\n+                                       newFilename.c_str(), DB_AUTO_COMMIT);\n+    if (result == 0)\n+        LogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n+    else\n+    {\n+        LogPrintf(\"Failed to rename %s to %s\\n\", filename, newFilename);\n+        return false;\n+    }\n+\n+    std::vector<CDBEnv::KeyValPair> salvagedData;\n+    bool fSuccess = dbenv.Salvage(newFilename, true, salvagedData);\n+    if (salvagedData.empty())\n+    {\n+        LogPrintf(\"Salvage(aggressive) found no records in %s.\\n\", newFilename);\n+        return false;\n+    }\n+    LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n+\n+    std::unique_ptr<Db> pdbCopy(new Db(dbenv.dbenv, 0));\n+    int ret = pdbCopy->open(NULL,               // Txn pointer\n+                            filename.c_str(),   // Filename\n+                            \"main\",             // Logical db name\n+                            DB_BTREE,           // Database type\n+                            DB_CREATE,          // Flags\n+                            0);\n+    if (ret > 0)\n+    {\n+        LogPrintf(\"Cannot create database file %s\\n\", filename);\n+        return false;\n+    }\n+    CWallet dummyWallet;\n+    CWalletScanState wss;\n+\n+    DbTxn* ptxn = dbenv.TxnBegin();\n+    BOOST_FOREACH(CDBEnv::KeyValPair& row, salvagedData)\n+    {\n+        if (fOnlyKeys)\n+        {\n+            CDataStream ssKey(row.first, SER_DISK, CLIENT_VERSION);\n+            CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n+            std::string strType, strErr;\n+            bool fReadOK;\n+            {\n+                // Required in LoadKeyMetadata():\n+                LOCK(dummyWallet.cs_wallet);\n+                fReadOK = ReadKeyValue(&dummyWallet, ssKey, ssValue,\n+                                        wss, strType, strErr);\n+            }\n+            if (!IsKeyType(strType) && strType != \"hdpubkey\")\n+                continue;\n+            if (!fReadOK)\n+            {\n+                LogPrintf(\"WARNING: CWalletDB::Recover skipping %s: %s\\n\", strType, strErr);\n+                continue;\n+            }\n+        }\n+        Dbt datKey(&row.first[0], row.first.size());\n+        Dbt datValue(&row.second[0], row.second.size());\n+        int ret2 = pdbCopy->put(ptxn, &datKey, &datValue, DB_NOOVERWRITE);\n+        if (ret2 > 0)\n+            fSuccess = false;\n+    }\n+    ptxn->commit(0);\n+    pdbCopy->close(0);\n+\n+    return fSuccess;\n }\n \n-DBErrors CWalletDB::ZapSelectTx(CWallet* pwallet, vector<uint256>& vTxHashIn, vector<uint256>& vTxHashOut)\n+bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename)\n {\n-\t// build list of wallet TXs and hashes\n-\tvector<uint256> vTxHash;\n-\tvector<CWalletTx> vWtx;\n-\tDBErrors err = FindWalletTx(pwallet, vTxHash, vWtx);\n-\tif (err != DB_LOAD_OK) {\n-\t\treturn err;\n-\t}\n-\n-\tstd::sort(vTxHash.begin(), vTxHash.end());\n-\tstd::sort(vTxHashIn.begin(), vTxHashIn.end());\n-\n-\t// erase each matching wallet TX\n-\tbool delerror = false;\n-\tvector<uint256>::iterator it = vTxHashIn.begin();\n-\tBOOST_FOREACH(uint256 hash, vTxHash) {\n-\t\twhile (it < vTxHashIn.end() && (*it) < hash) {\n-\t\t\tit++;\n-\t\t}\n-\t\tif (it == vTxHashIn.end()) {\n-\t\t\tbreak;\n-\t\t}\n-\t\telse if ((*it) == hash) {\n-\t\t\tpwallet->mapWallet.erase(hash);\n-\t\t\tif (!EraseTx(hash)) {\n-\t\t\t\tLogPrint(\"db\", \"Transaction was found for deletion but returned database error: %s\\n\", hash.GetHex());\n-\t\t\t\tdelerror = true;\n-\t\t\t}\n-\t\t\tvTxHashOut.push_back(hash);\n-\t\t}\n-\t}\n-\n-\tif (delerror) {\n-\t\treturn DB_CORRUPT;\n-\t}\n-\treturn DB_LOAD_OK;\n+    return CWalletDB::Recover(dbenv, filename, false);\n }\n \n-DBErrors CWalletDB::ZapWalletTx(CWallet* pwallet, vector<CWalletTx>& vWtx)\n+bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)\n {\n-\t// build list of wallet TXs\n-\tvector<uint256> vTxHash;\n-\tDBErrors err = FindWalletTx(pwallet, vTxHash, vWtx);\n-\tif (err != DB_LOAD_OK)\n-\t\treturn err;\n-\n-\t// erase each wallet TX\n-\tBOOST_FOREACH(uint256& hash, vTxHash) {\n-\t\tif (!EraseTx(hash))\n-\t\t\treturn DB_CORRUPT;\n-\t}\n-\n-\treturn DB_LOAD_OK;\n+    nWalletDBUpdateCounter++;\n+    return Write(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)), value);\n }\n \n-void ThreadFlushWalletDB(const string& strFile)\n+bool CWalletDB::EraseDestData(const std::string &address, const std::string &key)\n {\n-\t// Make this thread recognisable as the wallet flushing thread\n-\tRenameThread(\"syscoin-wallet\");\n-\n-\tstatic bool fOneThread;\n-\tif (fOneThread)\n-\t\treturn;\n-\tfOneThread = true;\n-\tif (!GetBoolArg(\"-flushwallet\", DEFAULT_FLUSHWALLET))\n-\t\treturn;\n-\n-\tunsigned int nLastSeen = nWalletDBUpdated;\n-\tunsigned int nLastFlushed = nWalletDBUpdated;\n-\tint64_t nLastWalletUpdate = GetTime();\n-\twhile (true)\n-\t{\n-\t\tMilliSleep(500);\n-\n-\t\tif (nLastSeen != nWalletDBUpdated)\n-\t\t{\n-\t\t\tnLastSeen = nWalletDBUpdated;\n-\t\t\tnLastWalletUpdate = GetTime();\n-\t\t}\n-\n-\t\tif (nLastFlushed != nWalletDBUpdated && GetTime() - nLastWalletUpdate >= 2)\n-\t\t{\n-\t\t\tTRY_LOCK(bitdb.cs_db, lockDb);\n-\t\t\tif (lockDb)\n-\t\t\t{\n-\t\t\t\t// Don't do this if any databases are in use\n-\t\t\t\tint nRefCount = 0;\n-\t\t\t\tmap<string, int>::iterator mi = bitdb.mapFileUseCount.begin();\n-\t\t\t\twhile (mi != bitdb.mapFileUseCount.end())\n-\t\t\t\t{\n-\t\t\t\t\tnRefCount += (*mi).second;\n-\t\t\t\t\tmi++;\n-\t\t\t\t}\n-\n-\t\t\t\tif (nRefCount == 0)\n-\t\t\t\t{\n-\t\t\t\t\tboost::this_thread::interruption_point();\n-\t\t\t\t\tmap<string, int>::iterator mi = bitdb.mapFileUseCount.find(strFile);\n-\t\t\t\t\tif (mi != bitdb.mapFileUseCount.end())\n-\t\t\t\t\t{\n-\t\t\t\t\t\tLogPrint(\"db\", \"Flushing %s\\n\", strFile);\n-\t\t\t\t\t\tnLastFlushed = nWalletDBUpdated;\n-\t\t\t\t\t\tint64_t nStart = GetTimeMillis();\n-\n-\t\t\t\t\t\t// Flush wallet file so it's self contained\n-\t\t\t\t\t\tbitdb.CloseDb(strFile);\n-\t\t\t\t\t\tbitdb.CheckpointLSN(strFile);\n-\n-\t\t\t\t\t\tbitdb.mapFileUseCount.erase(mi++);\n-\t\t\t\t\t\tLogPrint(\"db\", \"Flushed %s %dms\\n\", strFile, GetTimeMillis() - nStart);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n+    nWalletDBUpdateCounter++;\n+    return Erase(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)));\n }\n \n-//\n-// Try to (very carefully!) recover wallet file if there is a problem.\n-//\n-bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys)\n+bool CWalletDB::WriteHDChain(const CHDChain& chain)\n {\n-\t// Recovery procedure:\n-\t// move wallet file to wallet.timestamp.bak\n-\t// Call Salvage with fAggressive=true to\n-\t// get as much data as possible.\n-\t// Rewrite salvaged data to fresh wallet file\n-\t// Set -rescan so any missing transactions will be\n-\t// found.\n-\tint64_t now = GetTime();\n-\tstd::string newFilename = strprintf(\"wallet.%d.bak\", now);\n-\n-\tint result = dbenv.dbenv->dbrename(NULL, filename.c_str(), NULL,\n-\t\tnewFilename.c_str(), DB_AUTO_COMMIT);\n-\tif (result == 0)\n-\t\tLogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n-\telse\n-\t{\n-\t\tLogPrintf(\"Failed to rename %s to %s\\n\", filename, newFilename);\n-\t\treturn false;\n-\t}\n-\n-\tstd::vector<CDBEnv::KeyValPair> salvagedData;\n-\tbool fSuccess = dbenv.Salvage(newFilename, true, salvagedData);\n-\tif (salvagedData.empty())\n-\t{\n-\t\tLogPrintf(\"Salvage(aggressive) found no records in %s.\\n\", newFilename);\n-\t\treturn false;\n-\t}\n-\tLogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n-\n-\tboost::scoped_ptr<Db> pdbCopy(new Db(dbenv.dbenv, 0));\n-\tint ret = pdbCopy->open(NULL,               // Txn pointer\n-\t\tfilename.c_str(),   // Filename\n-\t\t\"main\",             // Logical db name\n-\t\tDB_BTREE,           // Database type\n-\t\tDB_CREATE,          // Flags\n-\t\t0);\n-\tif (ret > 0)\n-\t{\n-\t\tLogPrintf(\"Cannot create database file %s\\n\", filename);\n-\t\treturn false;\n-\t}\n-\tCWallet dummyWallet;\n-\tCWalletScanState wss;\n-\n-\tDbTxn* ptxn = dbenv.TxnBegin();\n-\tBOOST_FOREACH(CDBEnv::KeyValPair& row, salvagedData)\n-\t{\n-\t\tif (fOnlyKeys)\n-\t\t{\n-\t\t\tCDataStream ssKey(row.first, SER_DISK, CLIENT_VERSION);\n-\t\t\tCDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n-\t\t\tstring strType, strErr;\n-\t\t\tbool fReadOK;\n-\t\t\t{\n-\t\t\t\t// Required in LoadKeyMetadata():\n-\t\t\t\tLOCK(dummyWallet.cs_wallet);\n-\t\t\t\tfReadOK = ReadKeyValue(&dummyWallet, ssKey, ssValue,\n-\t\t\t\t\twss, strType, strErr);\n-\t\t\t}\n-\t\t\tif (!IsKeyType(strType) && strType != \"hdchain\")\n-\t\t\t\tcontinue;\n-\t\t\tif (!fReadOK)\n-\t\t\t{\n-\t\t\t\tLogPrintf(\"WARNING: CWalletDB::Recover skipping %s: %s\\n\", strType, strErr);\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t}\n-\t\tDbt datKey(&row.first[0], row.first.size());\n-\t\tDbt datValue(&row.second[0], row.second.size());\n-\t\tint ret2 = pdbCopy->put(ptxn, &datKey, &datValue, DB_NOOVERWRITE);\n-\t\tif (ret2 > 0)\n-\t\t\tfSuccess = false;\n-\t}\n-\tptxn->commit(0);\n-\tpdbCopy->close(0);\n-\n-\treturn fSuccess;\n+    nWalletDBUpdateCounter++;\n+    return Write(std::string(\"hdchain\"), chain);\n }\n \n-bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename)\n+bool CWalletDB::WriteCryptedHDChain(const CHDChain& chain)\n {\n-\treturn CWalletDB::Recover(dbenv, filename, false);\n+    nWalletDBUpdateCounter++;\n+\n+    if (!Write(std::string(\"chdchain\"), chain))\n+        return false;\n+\n+    Erase(std::string(\"hdchain\"));\n+\n+    return true;\n }\n \n-bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)\n+bool CWalletDB::WriteHDPubKey(const CHDPubKey& hdPubKey, const CKeyMetadata& keyMeta)\n {\n-\tnWalletDBUpdated++;\n-\treturn Write(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)), value);\n+    nWalletDBUpdateCounter++;\n+\n+    if (!Write(std::make_pair(std::string(\"keymeta\"), hdPubKey.extPubKey.pubkey), keyMeta, false))\n+        return false;\n+\n+    return Write(std::make_pair(std::string(\"hdpubkey\"), hdPubKey.extPubKey.pubkey), hdPubKey, false);\n }\n \n-bool CWalletDB::EraseDestData(const std::string &address, const std::string &key)\n+void CWalletDB::IncrementUpdateCounter()\n {\n-\tnWalletDBUpdated++;\n-\treturn Erase(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)));\n+    nWalletDBUpdateCounter++;\n }\n \n-\n-bool CWalletDB::WriteHDChain(const CHDChain& chain)\n+unsigned int CWalletDB::GetUpdateCounter()\n {\n-\tnWalletDBUpdated++;\n-\treturn Write(std::string(\"hdchain\"), chain);\n-}\n\\ No newline at end of file\n+    return nWalletDBUpdateCounter;\n+}"
      },
      {
        "sha": "f05ddc878e4e63c5c9d052be8083bcc8ab7ef99c",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 84,
        "deletions": 125,
        "changes": 209,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1643c876b4bae7d9d1b1e90a1d6af147edd2d873/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
        "patch": "@@ -7,8 +7,8 @@\n #define SYSCOIN_WALLET_WALLETDB_H\n \n #include \"amount.h\"\n-#include \"primitives/transaction.h\"\n #include \"wallet/db.h\"\n+#include \"hdchain.h\"\n #include \"key.h\"\n \n #include <list>\n@@ -33,158 +33,117 @@ class uint256;\n /** Error statuses for the wallet database */\n enum DBErrors\n {\n-\tDB_LOAD_OK,\n-\tDB_CORRUPT,\n-\tDB_NONCRITICAL_ERROR,\n-\tDB_TOO_NEW,\n-\tDB_LOAD_FAIL,\n-\tDB_NEED_REWRITE\n-};\n-\n-/* simple HD chain data model */\n-class CHDChain\n-{\n-public:\n-\tuint32_t nExternalChainCounter;\n-\tCKeyID masterKeyID; //!< master key hash160\n-\n-\tstatic const int CURRENT_VERSION = 1;\n-\tint nVersion;\n-\n-\tCHDChain() { SetNull(); }\n-\tADD_SERIALIZE_METHODS;\n-\ttemplate <typename Stream, typename Operation>\n-\tinline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n-\t{\n-\t\tREADWRITE(this->nVersion);\n-\t\tnVersion = this->nVersion;\n-\t\tREADWRITE(nExternalChainCounter);\n-\t\tREADWRITE(masterKeyID);\n-\t}\n-\n-\tvoid SetNull()\n-\t{\n-\t\tnVersion = CHDChain::CURRENT_VERSION;\n-\t\tnExternalChainCounter = 0;\n-\t\tmasterKeyID.SetNull();\n-\t}\n+    DB_LOAD_OK,\n+    DB_CORRUPT,\n+    DB_NONCRITICAL_ERROR,\n+    DB_TOO_NEW,\n+    DB_LOAD_FAIL,\n+    DB_NEED_REWRITE\n };\n \n class CKeyMetadata\n {\n public:\n-\tstatic const int VERSION_BASIC = 1;\n-\tstatic const int VERSION_WITH_HDDATA = 10;\n-\tstatic const int CURRENT_VERSION = VERSION_WITH_HDDATA;\n-\tint nVersion;\n-\tint64_t nCreateTime; // 0 means unknown\n-\tstd::string hdKeypath; //optional HD/bip32 keypath\n-\tCKeyID hdMasterKeyID; //id of the HD masterkey used to derive this key\n-\n-\tCKeyMetadata()\n-\t{\n-\t\tSetNull();\n-\t}\n-\tCKeyMetadata(int64_t nCreateTime_)\n-\t{\n-\t\tSetNull();\n-\t\tnCreateTime = nCreateTime_;\n-\t}\n-\n-\tADD_SERIALIZE_METHODS;\n-\n-\ttemplate <typename Stream, typename Operation>\n-\tinline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-\t\tREADWRITE(this->nVersion);\n-\t\tnVersion = this->nVersion;\n-\t\tREADWRITE(nCreateTime);\n-\t\tif (this->nVersion >= VERSION_WITH_HDDATA)\n-\t\t{\n-\t\t\tREADWRITE(hdKeypath);\n-\t\t\tREADWRITE(hdMasterKeyID);\n-\t\t}\n-\t}\n-\n-\tvoid SetNull()\n-\t{\n-\t\tnVersion = CKeyMetadata::CURRENT_VERSION;\n-\t\tnCreateTime = 0;\n-\t\thdKeypath.clear();\n-\t\thdMasterKeyID.SetNull();\n-\t}\n+    static const int CURRENT_VERSION=1;\n+    int nVersion;\n+    int64_t nCreateTime; // 0 means unknown\n+\n+    CKeyMetadata()\n+    {\n+        SetNull();\n+    }\n+    CKeyMetadata(int64_t nCreateTime_)\n+    {\n+        SetNull();\n+        nCreateTime = nCreateTime_;\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(this->nVersion);\n+        READWRITE(nCreateTime);\n+    }\n+\n+    void SetNull()\n+    {\n+        nVersion = CKeyMetadata::CURRENT_VERSION;\n+        nCreateTime = 0;\n+    }\n };\n \n /** Access to the wallet database */\n class CWalletDB : public CDB\n {\n public:\n-\tCWalletDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnClose = true) : CDB(strFilename, pszMode, fFlushOnClose)\n-\t{\n-\t}\n-\n-\tbool WriteName(const std::string& strAddress, const std::string& strName);\n-\tbool EraseName(const std::string& strAddress);\n+    CWalletDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnClose = true) : CDB(strFilename, pszMode, fFlushOnClose)\n+    {\n+    }\n \n-\tbool WritePurpose(const std::string& strAddress, const std::string& purpose);\n-\tbool ErasePurpose(const std::string& strAddress);\n+    bool WriteName(const std::string& strAddress, const std::string& strName);\n+    bool EraseName(const std::string& strAddress);\n \n-\tbool WriteTx(const CWalletTx& wtx);\n-\tbool EraseTx(uint256 hash);\n+    bool WritePurpose(const std::string& strAddress, const std::string& purpose);\n+    bool ErasePurpose(const std::string& strAddress);\n \n-\tbool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata &keyMeta);\n-\tbool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, const CKeyMetadata &keyMeta);\n-\tbool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey);\n+    bool WriteTx(const CWalletTx& wtx);\n+    bool EraseTx(uint256 hash);\n \n-\tbool WriteCScript(const uint160& hash, const CScript& redeemScript);\n+    bool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata &keyMeta);\n+    bool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, const CKeyMetadata &keyMeta);\n+    bool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey);\n \n-\tbool WriteWatchOnly(const CScript &script);\n-\tbool EraseWatchOnly(const CScript &script);\n+    bool WriteCScript(const uint160& hash, const CScript& redeemScript);\n \n-\tbool WriteBestBlock(const CBlockLocator& locator);\n-\tbool ReadBestBlock(CBlockLocator& locator);\n+    bool WriteWatchOnly(const CScript &script, const CKeyMetadata &keymeta);\n+    bool EraseWatchOnly(const CScript &script);\n \n-\tbool WriteOrderPosNext(int64_t nOrderPosNext);\n+    bool WriteBestBlock(const CBlockLocator& locator);\n+    bool ReadBestBlock(CBlockLocator& locator);\n \n-\tbool WriteDefaultKey(const CPubKey& vchPubKey);\n+    bool WriteOrderPosNext(int64_t nOrderPosNext);\n \n-\tbool ReadPool(int64_t nPool, CKeyPool& keypool);\n-\tbool WritePool(int64_t nPool, const CKeyPool& keypool);\n-\tbool ErasePool(int64_t nPool);\n+    bool ReadPool(int64_t nPool, CKeyPool& keypool);\n+    bool WritePool(int64_t nPool, const CKeyPool& keypool);\n+    bool ErasePool(int64_t nPool);\n \n-\tbool WriteMinVersion(int nVersion);\n+    bool WriteMinVersion(int nVersion);\n \n-\t/// This writes directly to the database, and will not update the CWallet's cached accounting entries!\n-\t/// Use wallet.AddAccountingEntry instead, to write *and* update its caches.\n-\tbool WriteAccountingEntry_Backend(const CAccountingEntry& acentry);\n-\tbool ReadAccount(const std::string& strAccount, CAccount& account);\n-\tbool WriteAccount(const std::string& strAccount, const CAccount& account);\n+    /// This writes directly to the database, and will not update the CWallet's cached accounting entries!\n+    /// Use wallet.AddAccountingEntry instead, to write *and* update its caches.\n+    bool WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry);\n+    bool WriteAccountingEntry_Backend(const CAccountingEntry& acentry);\n+    bool ReadAccount(const std::string& strAccount, CAccount& account);\n+    bool WriteAccount(const std::string& strAccount, const CAccount& account);\n \n-\t/// Write destination data key,value tuple to database\n-\tbool WriteDestData(const std::string &address, const std::string &key, const std::string &value);\n-\t/// Erase destination data tuple from wallet database\n-\tbool EraseDestData(const std::string &address, const std::string &key);\n+    /// Write destination data key,value tuple to database\n+    bool WriteDestData(const std::string &address, const std::string &key, const std::string &value);\n+    /// Erase destination data tuple from wallet database\n+    bool EraseDestData(const std::string &address, const std::string &key);\n \n-\tCAmount GetAccountCreditDebit(const std::string& strAccount);\n-\tvoid ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n+    CAmount GetAccountCreditDebit(const std::string& strAccount);\n+    void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n \n-\tDBErrors ReorderTransactions(CWallet* pwallet);\n-\tDBErrors LoadWallet(CWallet* pwallet);\n-\tDBErrors FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx);\n-\tDBErrors ZapWalletTx(CWallet* pwallet, std::vector<CWalletTx>& vWtx);\n-\tDBErrors ZapSelectTx(CWallet* pwallet, std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n-\tstatic bool Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys);\n-\tstatic bool Recover(CDBEnv& dbenv, const std::string& filename);\n+    DBErrors LoadWallet(CWallet* pwallet);\n+    DBErrors FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx);\n+    DBErrors ZapWalletTx(CWallet* pwallet, std::vector<CWalletTx>& vWtx);\n+    DBErrors ZapSelectTx(CWallet* pwallet, std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n+    static bool Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys);\n+    static bool Recover(CDBEnv& dbenv, const std::string& filename);\n \n-\t//! write the hdchain model (external chain child index counter)\n-\tbool WriteHDChain(const CHDChain& chain);\n+    //! write the hdchain model (external chain child index counter)\n+    bool WriteHDChain(const CHDChain& chain);\n+    bool WriteCryptedHDChain(const CHDChain& chain);\n+    bool WriteHDPubKey(const CHDPubKey& hdPubKey, const CKeyMetadata& keyMeta);\n \n+    static void IncrementUpdateCounter();\n+    static unsigned int GetUpdateCounter();\n private:\n-\tCWalletDB(const CWalletDB&);\n-\tvoid operator=(const CWalletDB&);\n-\n-\tbool WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry);\n+    CWalletDB(const CWalletDB&);\n+    void operator=(const CWalletDB&);\n };\n \n-void ThreadFlushWalletDB(const std::string& strFile);\n+void ThreadFlushWalletDB();\n \n-#endif // SYSCOIN_WALLET_WALLETDB_H\n\\ No newline at end of file\n+#endif // SYSCOIN_WALLET_WALLETDB_H"
      }
    ]
  },
  {
    "sha": "c1f4fc18cc0bdb969bf271f6910275b401f95a29",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWY0ZmMxOGNjMGJkYjk2OWJmMjcxZjY5MTAyNzViNDAxZjk1YTI5",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:44:01Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:44:01Z"
      },
      "message": "def hd to false",
      "tree": {
        "sha": "472c8bb0f1e0e10d51bec1b50f69dfcf99b8c023",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/472c8bb0f1e0e10d51bec1b50f69dfcf99b8c023"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1f4fc18cc0bdb969bf271f6910275b401f95a29",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1f4fc18cc0bdb969bf271f6910275b401f95a29",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1f4fc18cc0bdb969bf271f6910275b401f95a29",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1f4fc18cc0bdb969bf271f6910275b401f95a29/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1643c876b4bae7d9d1b1e90a1d6af147edd2d873",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1643c876b4bae7d9d1b1e90a1d6af147edd2d873"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "89d26ef1782a40a8386caa20fc670cb646fa870e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1f4fc18cc0bdb969bf271f6910275b401f95a29/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1f4fc18cc0bdb969bf271f6910275b401f95a29/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c1f4fc18cc0bdb969bf271f6910275b401f95a29",
        "patch": "@@ -76,7 +76,7 @@ static const bool DEFAULT_DISABLE_WALLET = false;\n extern const char * DEFAULT_WALLET_DAT;\n \n //! if set, all keys will be derived by using BIP39/BIP44\n-static const bool DEFAULT_USE_HD_WALLET = true;\n+static const bool DEFAULT_USE_HD_WALLET = false;\n \n bool AutoBackupWallet (CWallet* wallet, const std::string& strWalletFile_, std::string& strBackupWarningRet, std::string& strBackupErrorRet);\n "
      }
    ]
  },
  {
    "sha": "14e7a8d229fbf546a3ea442efe24d1d77cda1542",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGU3YThkMjI5ZmJmNTQ2YTNlYTQ0MmVmZTI0ZDFkNzdjZGExNTQy",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:46:15Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:46:15Z"
      },
      "message": "update test",
      "tree": {
        "sha": "36366e1350dd6538ad6e95706004d28ca6622ce6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36366e1350dd6538ad6e95706004d28ca6622ce6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14e7a8d229fbf546a3ea442efe24d1d77cda1542",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14e7a8d229fbf546a3ea442efe24d1d77cda1542",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14e7a8d229fbf546a3ea442efe24d1d77cda1542",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14e7a8d229fbf546a3ea442efe24d1d77cda1542/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1f4fc18cc0bdb969bf271f6910275b401f95a29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1f4fc18cc0bdb969bf271f6910275b401f95a29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1f4fc18cc0bdb969bf271f6910275b401f95a29"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "68a8d1ba7aca984aa3baeafef805b91f538d43b9",
        "filename": "src/test/test_syscoin_services.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14e7a8d229fbf546a3ea442efe24d1d77cda1542/src/test/test_syscoin_services.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14e7a8d229fbf546a3ea442efe24d1d77cda1542/src/test/test_syscoin_services.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_syscoin_services.cpp?ref=14e7a8d229fbf546a3ea442efe24d1d77cda1542",
        "patch": "@@ -67,10 +67,13 @@ void StartMainNetNodes()\n \tCallRPC(\"mainnet1\", \"mnsync next\", false, false);\n \tCallRPC(\"mainnet1\", \"mnsync next\", false, false);\n \tStartNode(\"mainnet2\", false);\n+\tStopode(\"mainnet2\", false);\n+\tStartNode(\"mainnet2\", false);\n \tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n \tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n \tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n \tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n+\tCallRPC(\"mainnet1\", \"addnode 127.0.0.1:19379 onetry\", false, false);\n }\n void StopMainNetNodes()\n {"
      }
    ]
  },
  {
    "sha": "943ef1af2e984c2e6cd40a6786b73b452bfc40bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDNlZjFhZjJlOTg0YzJlNmNkNDBhNjc4NmI3M2I0NTJiZmM0MGJm",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:50:21Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:50:21Z"
      },
      "message": "update test",
      "tree": {
        "sha": "627b3191162b9cfb5b8d7d56aaa1f5b2362e4985",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/627b3191162b9cfb5b8d7d56aaa1f5b2362e4985"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/943ef1af2e984c2e6cd40a6786b73b452bfc40bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/943ef1af2e984c2e6cd40a6786b73b452bfc40bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/943ef1af2e984c2e6cd40a6786b73b452bfc40bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/943ef1af2e984c2e6cd40a6786b73b452bfc40bf/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14e7a8d229fbf546a3ea442efe24d1d77cda1542",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14e7a8d229fbf546a3ea442efe24d1d77cda1542",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14e7a8d229fbf546a3ea442efe24d1d77cda1542"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2a52fc910a596fab6e1066396fc93c2eedd89551",
        "filename": "src/test/test_syscoin_services.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/943ef1af2e984c2e6cd40a6786b73b452bfc40bf/src/test/test_syscoin_services.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/943ef1af2e984c2e6cd40a6786b73b452bfc40bf/src/test/test_syscoin_services.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_syscoin_services.cpp?ref=943ef1af2e984c2e6cd40a6786b73b452bfc40bf",
        "patch": "@@ -63,16 +63,24 @@ void StartMainNetNodes()\n \tprintf(\"Starting 2 nodes in mainnet setup...\\n\");\n \tStartNode(\"mainnet1\", false);\n \tCallRPC(\"mainnet1\", \"mnsync next\", false, false);\n+\tMillSleep(50);\n \tCallRPC(\"mainnet1\", \"mnsync next\", false, false);\n+\tMillSleep(50);\n \tCallRPC(\"mainnet1\", \"mnsync next\", false, false);\n+\tMillSleep(50);\n \tCallRPC(\"mainnet1\", \"mnsync next\", false, false);\n+\n \tStartNode(\"mainnet2\", false);\n \tStopode(\"mainnet2\", false);\n \tStartNode(\"mainnet2\", false);\n \tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n+\tMillSleep(50);\n \tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n+\tMillSleep(50);\n \tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n+\tMillSleep(50);\n \tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n+\tMillSleep(50);\n \tCallRPC(\"mainnet1\", \"addnode 127.0.0.1:19379 onetry\", false, false);\n }\n void StopMainNetNodes()"
      }
    ]
  },
  {
    "sha": "27963dc251b4d6643b6c1d58dc4e0faaf3a95ec0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzk2M2RjMjUxYjRkNjY0M2I2YzFkNThkYzRlMGZhYWYzYTk1ZWMw",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:51:07Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:51:07Z"
      },
      "message": "compile",
      "tree": {
        "sha": "25857b00bcd0b325afaffe0edbeaf0c055566571",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25857b00bcd0b325afaffe0edbeaf0c055566571"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27963dc251b4d6643b6c1d58dc4e0faaf3a95ec0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27963dc251b4d6643b6c1d58dc4e0faaf3a95ec0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27963dc251b4d6643b6c1d58dc4e0faaf3a95ec0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27963dc251b4d6643b6c1d58dc4e0faaf3a95ec0/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "943ef1af2e984c2e6cd40a6786b73b452bfc40bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/943ef1af2e984c2e6cd40a6786b73b452bfc40bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/943ef1af2e984c2e6cd40a6786b73b452bfc40bf"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "f1bd6107f0a7386e9c7cfeb7e027e34d4c92363a",
        "filename": "src/test/test_syscoin_services.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27963dc251b4d6643b6c1d58dc4e0faaf3a95ec0/src/test/test_syscoin_services.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27963dc251b4d6643b6c1d58dc4e0faaf3a95ec0/src/test/test_syscoin_services.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_syscoin_services.cpp?ref=27963dc251b4d6643b6c1d58dc4e0faaf3a95ec0",
        "patch": "@@ -63,24 +63,24 @@ void StartMainNetNodes()\n \tprintf(\"Starting 2 nodes in mainnet setup...\\n\");\n \tStartNode(\"mainnet1\", false);\n \tCallRPC(\"mainnet1\", \"mnsync next\", false, false);\n-\tMillSleep(50);\n+\tMilliSleep(50);\n \tCallRPC(\"mainnet1\", \"mnsync next\", false, false);\n-\tMillSleep(50);\n+\tMilliSleep(50);\n \tCallRPC(\"mainnet1\", \"mnsync next\", false, false);\n-\tMillSleep(50);\n+\tMilliSleep(50);\n \tCallRPC(\"mainnet1\", \"mnsync next\", false, false);\n \n \tStartNode(\"mainnet2\", false);\n \tStopode(\"mainnet2\", false);\n \tStartNode(\"mainnet2\", false);\n \tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n-\tMillSleep(50);\n+\tMilliSleep(50);\n \tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n-\tMillSleep(50);\n+\tMilliSleep(50);\n \tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n-\tMillSleep(50);\n+\tMilliSleep(50);\n \tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n-\tMillSleep(50);\n+\tMilliSleep(50);\n \tCallRPC(\"mainnet1\", \"addnode 127.0.0.1:19379 onetry\", false, false);\n }\n void StopMainNetNodes()"
      }
    ]
  },
  {
    "sha": "ea62d54872a889a4145055dfd856261309ff8146",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTYyZDU0ODcyYTg4OWE0MTQ1MDU1ZGZkODU2MjYxMzA5ZmY4MTQ2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:52:02Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:52:02Z"
      },
      "message": "compile",
      "tree": {
        "sha": "e7d4f47644b53b1d15e4a12e56d906d3c4d89f1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7d4f47644b53b1d15e4a12e56d906d3c4d89f1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea62d54872a889a4145055dfd856261309ff8146",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea62d54872a889a4145055dfd856261309ff8146",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea62d54872a889a4145055dfd856261309ff8146",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea62d54872a889a4145055dfd856261309ff8146/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27963dc251b4d6643b6c1d58dc4e0faaf3a95ec0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27963dc251b4d6643b6c1d58dc4e0faaf3a95ec0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27963dc251b4d6643b6c1d58dc4e0faaf3a95ec0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "541f2e5ac3e8aca87fe6589420a9703f045f1acf",
        "filename": "src/test/test_syscoin_services.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea62d54872a889a4145055dfd856261309ff8146/src/test/test_syscoin_services.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea62d54872a889a4145055dfd856261309ff8146/src/test/test_syscoin_services.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_syscoin_services.cpp?ref=ea62d54872a889a4145055dfd856261309ff8146",
        "patch": "@@ -71,7 +71,7 @@ void StartMainNetNodes()\n \tCallRPC(\"mainnet1\", \"mnsync next\", false, false);\n \n \tStartNode(\"mainnet2\", false);\n-\tStopode(\"mainnet2\", false);\n+\tStopNode(\"mainnet2\", false);\n \tStartNode(\"mainnet2\", false);\n \tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n \tMilliSleep(50);"
      }
    ]
  },
  {
    "sha": "07ca6b18d5fbea47df4510e9c2835433f557f5e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowN2NhNmIxOGQ1ZmJlYTQ3ZGY0NTEwZTljMjgzNTQzM2Y1NTdmNWU4",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:52:39Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:52:39Z"
      },
      "message": "compile",
      "tree": {
        "sha": "99fe46d844721e899ec10329b7a96dbb145fd8f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99fe46d844721e899ec10329b7a96dbb145fd8f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07ca6b18d5fbea47df4510e9c2835433f557f5e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07ca6b18d5fbea47df4510e9c2835433f557f5e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07ca6b18d5fbea47df4510e9c2835433f557f5e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07ca6b18d5fbea47df4510e9c2835433f557f5e8/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea62d54872a889a4145055dfd856261309ff8146",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea62d54872a889a4145055dfd856261309ff8146",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea62d54872a889a4145055dfd856261309ff8146"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7b8dd7bbdffa20afb2d30cc36add33fa106fd125",
        "filename": "src/test/test_syscoin_services.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07ca6b18d5fbea47df4510e9c2835433f557f5e8/src/test/test_syscoin_services.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07ca6b18d5fbea47df4510e9c2835433f557f5e8/src/test/test_syscoin_services.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_syscoin_services.cpp?ref=07ca6b18d5fbea47df4510e9c2835433f557f5e8",
        "patch": "@@ -71,7 +71,7 @@ void StartMainNetNodes()\n \tCallRPC(\"mainnet1\", \"mnsync next\", false, false);\n \n \tStartNode(\"mainnet2\", false);\n-\tStopNode(\"mainnet2\", false);\n+\tStopNode(\"mainnet2\");\n \tStartNode(\"mainnet2\", false);\n \tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n \tMilliSleep(50);"
      }
    ]
  },
  {
    "sha": "8c7b32238cd6955cbc3c4f067547db0523f2d8e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzdiMzIyMzhjZDY5NTVjYmMzYzRmMDY3NTQ3ZGIwNTIzZjJkOGUy",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:56:51Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:56:51Z"
      },
      "message": "fix snapshot test",
      "tree": {
        "sha": "653a106a99be87593274672d74c085ebf04c693a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/653a106a99be87593274672d74c085ebf04c693a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c7b32238cd6955cbc3c4f067547db0523f2d8e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c7b32238cd6955cbc3c4f067547db0523f2d8e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c7b32238cd6955cbc3c4f067547db0523f2d8e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c7b32238cd6955cbc3c4f067547db0523f2d8e2/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07ca6b18d5fbea47df4510e9c2835433f557f5e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07ca6b18d5fbea47df4510e9c2835433f557f5e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07ca6b18d5fbea47df4510e9c2835433f557f5e8"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 2,
      "deletions": 16
    },
    "files": [
      {
        "sha": "a7fb00597025a51a1d98b255c955d884705f06c2",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c7b32238cd6955cbc3c4f067547db0523f2d8e2/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c7b32238cd6955cbc3c4f067547db0523f2d8e2/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=8c7b32238cd6955cbc3c4f067547db0523f2d8e2",
        "patch": "@@ -171,7 +171,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // Compute regular coinbase transaction.\n \tcoinbaseTx.vout[0].nValue = blockReward + nFees;\n \tcoinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;\n-\tif (!chainparams.MineBlocksOnDemand() && nHeight > 1 && !IsInitialBlockDownload()) {\n+\tif (!chainparams.MineBlocksOnDemand() && nHeight > 1 && !IsInitialBlockDownload() && !fUnitTest) {\n \t\tif (masternodeSync.IsFailed()) {\n \t\t\tthrow std::runtime_error(\"Masternode information has failed to sync, please restart your node!\");\n \t\t}"
      },
      {
        "sha": "2663bd20e4d48addd5a835b9f5590c8288a3abf7",
        "filename": "src/test/test_syscoin_services.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 15,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c7b32238cd6955cbc3c4f067547db0523f2d8e2/src/test/test_syscoin_services.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c7b32238cd6955cbc3c4f067547db0523f2d8e2/src/test/test_syscoin_services.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_syscoin_services.cpp?ref=8c7b32238cd6955cbc3c4f067547db0523f2d8e2",
        "patch": "@@ -62,25 +62,11 @@ void StartMainNetNodes()\n \tStopMainNetNodes();\n \tprintf(\"Starting 2 nodes in mainnet setup...\\n\");\n \tStartNode(\"mainnet1\", false);\n-\tCallRPC(\"mainnet1\", \"mnsync next\", false, false);\n-\tMilliSleep(50);\n-\tCallRPC(\"mainnet1\", \"mnsync next\", false, false);\n-\tMilliSleep(50);\n-\tCallRPC(\"mainnet1\", \"mnsync next\", false, false);\n-\tMilliSleep(50);\n-\tCallRPC(\"mainnet1\", \"mnsync next\", false, false);\n+\tGenerateMainNetBlocks(\"mainnet1\", 2);\n \n \tStartNode(\"mainnet2\", false);\n \tStopNode(\"mainnet2\");\n \tStartNode(\"mainnet2\", false);\n-\tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n-\tMilliSleep(50);\n-\tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n-\tMilliSleep(50);\n-\tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n-\tMilliSleep(50);\n-\tCallRPC(\"mainnet2\", \"mnsync next\", false, false);\n-\tMilliSleep(50);\n \tCallRPC(\"mainnet1\", \"addnode 127.0.0.1:19379 onetry\", false, false);\n }\n void StopMainNetNodes()"
      }
    ]
  },
  {
    "sha": "1d82ba17e110950499c0f37e6632e3db3ace6751",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDgyYmExN2UxMTA5NTA0OTljMGYzN2U2NjMyZTNkYjNhY2U2NzUx",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:57:47Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T02:57:47Z"
      },
      "message": "compile",
      "tree": {
        "sha": "d345aede3d7f368061ed3c0c7fa60d7c91a1e4f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d345aede3d7f368061ed3c0c7fa60d7c91a1e4f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d82ba17e110950499c0f37e6632e3db3ace6751",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d82ba17e110950499c0f37e6632e3db3ace6751",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d82ba17e110950499c0f37e6632e3db3ace6751",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d82ba17e110950499c0f37e6632e3db3ace6751/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c7b32238cd6955cbc3c4f067547db0523f2d8e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c7b32238cd6955cbc3c4f067547db0523f2d8e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c7b32238cd6955cbc3c4f067547db0523f2d8e2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cd072742fbc117055188a513945a43522264e671",
        "filename": "src/test/test_syscoin_services.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d82ba17e110950499c0f37e6632e3db3ace6751/src/test/test_syscoin_services.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d82ba17e110950499c0f37e6632e3db3ace6751/src/test/test_syscoin_services.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_syscoin_services.cpp?ref=1d82ba17e110950499c0f37e6632e3db3ace6751",
        "patch": "@@ -62,7 +62,7 @@ void StartMainNetNodes()\n \tStopMainNetNodes();\n \tprintf(\"Starting 2 nodes in mainnet setup...\\n\");\n \tStartNode(\"mainnet1\", false);\n-\tGenerateMainNetBlocks(\"mainnet1\", 2);\n+\tGenerateMainNetBlocks(2, \"mainnet1\");\n \n \tStartNode(\"mainnet2\", false);\n \tStopNode(\"mainnet2\");"
      }
    ]
  },
  {
    "sha": "7b7e53394bd813de5a9b7502d614a7d962a79cae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjdlNTMzOTRiZDgxM2RlNWE5Yjc1MDJkNjE0YTdkOTYyYTc5Y2Fl",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T03:04:56Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T03:04:56Z"
      },
      "message": "wip test",
      "tree": {
        "sha": "1291fa0d4564aa4cef67e3b2dcae0d331568eca3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1291fa0d4564aa4cef67e3b2dcae0d331568eca3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b7e53394bd813de5a9b7502d614a7d962a79cae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b7e53394bd813de5a9b7502d614a7d962a79cae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b7e53394bd813de5a9b7502d614a7d962a79cae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b7e53394bd813de5a9b7502d614a7d962a79cae/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d82ba17e110950499c0f37e6632e3db3ace6751",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d82ba17e110950499c0f37e6632e3db3ace6751",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d82ba17e110950499c0f37e6632e3db3ace6751"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "630962c7849e8c3298c617b04afc95ccccfcd333",
        "filename": "src/test/test_syscoin_services.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b7e53394bd813de5a9b7502d614a7d962a79cae/src/test/test_syscoin_services.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b7e53394bd813de5a9b7502d614a7d962a79cae/src/test/test_syscoin_services.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_syscoin_services.cpp?ref=7b7e53394bd813de5a9b7502d614a7d962a79cae",
        "patch": "@@ -64,8 +64,7 @@ void StartMainNetNodes()\n \tStartNode(\"mainnet1\", false);\n \tGenerateMainNetBlocks(2, \"mainnet1\");\n \n-\tStartNode(\"mainnet2\", false);\n-\tStopNode(\"mainnet2\");\n+\tMilliSleep(1000);\n \tStartNode(\"mainnet2\", false);\n \tCallRPC(\"mainnet1\", \"addnode 127.0.0.1:19379 onetry\", false, false);\n }"
      }
    ]
  },
  {
    "sha": "3d154912a215bbb7238be4a2be71692f1755f380",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDE1NDkxMmEyMTViYmI3MjM4YmU0YTJiZTcxNjkyZjE3NTVmMzgw",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T04:18:05Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T04:18:05Z"
      },
      "message": "fix test",
      "tree": {
        "sha": "65f1aefc05cd88b402c627a5fa560c41f8f86871",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65f1aefc05cd88b402c627a5fa560c41f8f86871"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d154912a215bbb7238be4a2be71692f1755f380",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d154912a215bbb7238be4a2be71692f1755f380",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d154912a215bbb7238be4a2be71692f1755f380",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d154912a215bbb7238be4a2be71692f1755f380/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b7e53394bd813de5a9b7502d614a7d962a79cae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b7e53394bd813de5a9b7502d614a7d962a79cae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b7e53394bd813de5a9b7502d614a7d962a79cae"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5444011c46ecf5a9b67d44a4e5d487f3938bef7d",
        "filename": "src/test/test_syscoin_services.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d154912a215bbb7238be4a2be71692f1755f380/src/test/test_syscoin_services.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d154912a215bbb7238be4a2be71692f1755f380/src/test/test_syscoin_services.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_syscoin_services.cpp?ref=3d154912a215bbb7238be4a2be71692f1755f380",
        "patch": "@@ -62,9 +62,6 @@ void StartMainNetNodes()\n \tStopMainNetNodes();\n \tprintf(\"Starting 2 nodes in mainnet setup...\\n\");\n \tStartNode(\"mainnet1\", false);\n-\tGenerateMainNetBlocks(2, \"mainnet1\");\n-\n-\tMilliSleep(1000);\n \tStartNode(\"mainnet2\", false);\n \tCallRPC(\"mainnet1\", \"addnode 127.0.0.1:19379 onetry\", false, false);\n }"
      }
    ]
  },
  {
    "sha": "70f2e00296b3ecf1e8d80d87dd00d02a1271a914",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGYyZTAwMjk2YjNlY2YxZThkODBkODdkZDAwZDAyYTEyNzFhOTE0",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T04:50:03Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T04:50:03Z"
      },
      "message": "update snapshot code",
      "tree": {
        "sha": "c47f4ab374db7cf00d1c0b17cd6548feb7e494fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c47f4ab374db7cf00d1c0b17cd6548feb7e494fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70f2e00296b3ecf1e8d80d87dd00d02a1271a914",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70f2e00296b3ecf1e8d80d87dd00d02a1271a914",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70f2e00296b3ecf1e8d80d87dd00d02a1271a914",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70f2e00296b3ecf1e8d80d87dd00d02a1271a914/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d154912a215bbb7238be4a2be71692f1755f380",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d154912a215bbb7238be4a2be71692f1755f380",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d154912a215bbb7238be4a2be71692f1755f380"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1f1966878655ac45eef757c7f00b4bec9db3014d",
        "filename": "src/test/test_syscoin_services.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70f2e00296b3ecf1e8d80d87dd00d02a1271a914/src/test/test_syscoin_services.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70f2e00296b3ecf1e8d80d87dd00d02a1271a914/src/test/test_syscoin_services.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_syscoin_services.cpp?ref=70f2e00296b3ecf1e8d80d87dd00d02a1271a914",
        "patch": "@@ -63,7 +63,6 @@ void StartMainNetNodes()\n \tprintf(\"Starting 2 nodes in mainnet setup...\\n\");\n \tStartNode(\"mainnet1\", false);\n \tStartNode(\"mainnet2\", false);\n-\tCallRPC(\"mainnet1\", \"addnode 127.0.0.1:19379 onetry\", false, false);\n }\n void StopMainNetNodes()\n {"
      }
    ]
  },
  {
    "sha": "8c1ac66eadf583119fc2af4841d382366cc0dc29",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzFhYzY2ZWFkZjU4MzExOWZjMmFmNDg0MWQzODIzNjZjYzBkYzI5",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T04:55:17Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T04:55:17Z"
      },
      "message": "update proto",
      "tree": {
        "sha": "496530610f4aa88c85eba0c428fce56361041f3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/496530610f4aa88c85eba0c428fce56361041f3d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c1ac66eadf583119fc2af4841d382366cc0dc29",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c1ac66eadf583119fc2af4841d382366cc0dc29",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c1ac66eadf583119fc2af4841d382366cc0dc29",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c1ac66eadf583119fc2af4841d382366cc0dc29/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70f2e00296b3ecf1e8d80d87dd00d02a1271a914",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70f2e00296b3ecf1e8d80d87dd00d02a1271a914",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70f2e00296b3ecf1e8d80d87dd00d02a1271a914"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "aec4238877561821cfa1e57dc89f256133e0c51c",
        "filename": "src/masternodeman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c1ac66eadf583119fc2af4841d382366cc0dc29/src/masternodeman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c1ac66eadf583119fc2af4841d382366cc0dc29/src/masternodeman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/masternodeman.h?ref=8c1ac66eadf583119fc2af4841d382366cc0dc29",
        "patch": "@@ -28,7 +28,7 @@ class CMasternodeMan\n \n     static const int LAST_PAID_SCAN_BLOCKS;\n \n-    static const int MIN_POSE_PROTO_VERSION     = 70220;\n+    static const int MIN_POSE_PROTO_VERSION     = 70221;\n     static const int MAX_POSE_CONNECTIONS       = 10;\n     static const int MAX_POSE_RANK              = 10;\n     static const int MAX_POSE_BLOCKS            = 10;"
      },
      {
        "sha": "b0d2872c2e50c13fbfe5761fa9a19b3368e014de",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c1ac66eadf583119fc2af4841d382366cc0dc29/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c1ac66eadf583119fc2af4841d382366cc0dc29/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=8c1ac66eadf583119fc2af4841d382366cc0dc29",
        "patch": "@@ -11,7 +11,7 @@\n  */\n \n \n-static const int PROTOCOL_VERSION = 70220;\n+static const int PROTOCOL_VERSION = 70221;\n \n //! initial proto version, to be increased after version/verack negotiation\n static const int INIT_PROTO_VERSION = 209;\n@@ -20,7 +20,7 @@ static const int INIT_PROTO_VERSION = 209;\n static const int GETHEADERS_VERSION = 70077;\n \n //! disconnect from peers older than this proto version\n-static const int MIN_PEER_PROTO_VERSION = 70220;\n+static const int MIN_PEER_PROTO_VERSION = 70221;\n \n //! nTime field added to CAddress, starting with this version;\n //! if possible, avoid requesting addresses nodes older than this\n@@ -39,9 +39,9 @@ static const int NO_BLOOM_VERSION = 70201;\n static const int SENDHEADERS_VERSION = 70201;\n \n //! DIP0001 was activated in this version\n-static const int DIP0001_PROTOCOL_VERSION = 70220;\n+static const int DIP0001_PROTOCOL_VERSION = 70221;\n \n //! short-id-based block download starts with this version\n-static const int SHORT_IDS_BLOCKS_VERSION = 70220;\n+static const int SHORT_IDS_BLOCKS_VERSION = 70221;\n \n #endif // SYSCOIN_VERSION_H"
      }
    ]
  },
  {
    "sha": "3d0b91469010ca0d62f5880cca73cde2d0d85547",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDBiOTE0NjkwMTBjYTBkNjJmNTg4MGNjYTczY2RlMmQwZDg1NTQ3",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T10:35:46Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T10:35:46Z"
      },
      "message": "update gen",
      "tree": {
        "sha": "7fa3da501e051237c1e5a3514cd93d2e177c34a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fa3da501e051237c1e5a3514cd93d2e177c34a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d0b91469010ca0d62f5880cca73cde2d0d85547",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d0b91469010ca0d62f5880cca73cde2d0d85547",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d0b91469010ca0d62f5880cca73cde2d0d85547",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d0b91469010ca0d62f5880cca73cde2d0d85547/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c1ac66eadf583119fc2af4841d382366cc0dc29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c1ac66eadf583119fc2af4841d382366cc0dc29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c1ac66eadf583119fc2af4841d382366cc0dc29"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a0dbd9025e017a38e306d4ebce56411c0061aa83",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d0b91469010ca0d62f5880cca73cde2d0d85547/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d0b91469010ca0d62f5880cca73cde2d0d85547/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=3d0b91469010ca0d62f5880cca73cde2d0d85547",
        "patch": "@@ -231,12 +231,12 @@ class CMainParams : public CChainParams {\n \t\tnDefaultPort = 8369;\n \t\tnPruneAfterHeight = 1000000;\n \t\tuint256 hash;\n-\t\tgenesis = CreateGenesisBlock(1524507506, 6952321, 0x1e0ffff0, 1, 8.88 * COIN);\n+\t\tgenesis = CreateGenesisBlock(1525170117, 2559938, 0x1e0ffff0, 1, 8.88 * COIN);\n \t\t/*CBlockHeader genesisHeader = genesis.GetBlockHeader();\n \t\tGenerateGenesisBlock(genesisHeader, &hash);*/\n \n \t\tconsensus.hashGenesisBlock = genesis.GetHash();\n-\t\tassert(consensus.hashGenesisBlock == uint256S(\"0x00000cd4b4e6a465c66094bc7d18e828f0b8d56e6afc571fbe9e25e48338d441\"));\n+\t\tassert(consensus.hashGenesisBlock == uint256S(\"0x000006e5c08d6d2414435b294210266753b05a75f90e926dd5e6082306812622\"));\n \t\tassert(genesis.hashMerkleRoot == uint256S(\"0x3fc1815124d408495fb860705d2188d84fcfeb5efc894f26fefc81a5cbdc49e8\"));\n \n \t\tvSeeds.push_back(CDNSSeedData(\"seed1.syscoin.org\", \"seed1.syscoin.org\"));"
      }
    ]
  },
  {
    "sha": "6efe7df3d2c7cc48372a8d14cf91fb8cceb0d5a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZWZlN2RmM2QyYzdjYzQ4MzcyYThkMTRjZjkxZmI4Y2NlYjBkNWE2",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T11:07:49Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T11:07:49Z"
      },
      "message": "update snapshot",
      "tree": {
        "sha": "73c71e252d36bb4c316b0a80a5e9668931d2803b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73c71e252d36bb4c316b0a80a5e9668931d2803b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6efe7df3d2c7cc48372a8d14cf91fb8cceb0d5a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6efe7df3d2c7cc48372a8d14cf91fb8cceb0d5a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6efe7df3d2c7cc48372a8d14cf91fb8cceb0d5a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6efe7df3d2c7cc48372a8d14cf91fb8cceb0d5a6/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d0b91469010ca0d62f5880cca73cde2d0d85547",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d0b91469010ca0d62f5880cca73cde2d0d85547",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d0b91469010ca0d62f5880cca73cde2d0d85547"
      }
    ],
    "stats": {
      "total": 9684,
      "additions": 6693,
      "deletions": 2991
    },
    "files": [
      {
        "sha": "4a43f97ecb8c75a5f925463bb039c91a85716bda",
        "filename": "src/test/data/utxo.json",
        "status": "modified",
        "additions": 6693,
        "deletions": 2991,
        "changes": 9684,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6efe7df3d2c7cc48372a8d14cf91fb8cceb0d5a6/src/test/data/utxo.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6efe7df3d2c7cc48372a8d14cf91fb8cceb0d5a6/src/test/data/utxo.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/utxo.json?ref=6efe7df3d2c7cc48372a8d14cf91fb8cceb0d5a6"
      }
    ]
  },
  {
    "sha": "72f25360f8d91762e8dfae5d645780eae069e412",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmYyNTM2MGY4ZDkxNzYyZThkZmFlNWQ2NDU3ODBlYWUwNjllNDEy",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T11:17:51Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T11:17:51Z"
      },
      "message": "snapshot allocation",
      "tree": {
        "sha": "016106967e18c6f51237116e22b79e7356f9717a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/016106967e18c6f51237116e22b79e7356f9717a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72f25360f8d91762e8dfae5d645780eae069e412",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72f25360f8d91762e8dfae5d645780eae069e412",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72f25360f8d91762e8dfae5d645780eae069e412",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72f25360f8d91762e8dfae5d645780eae069e412/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6efe7df3d2c7cc48372a8d14cf91fb8cceb0d5a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6efe7df3d2c7cc48372a8d14cf91fb8cceb0d5a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6efe7df3d2c7cc48372a8d14cf91fb8cceb0d5a6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f6992283a3e731e3747784d3fab011ff8daf86cf",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72f25360f8d91762e8dfae5d645780eae069e412/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72f25360f8d91762e8dfae5d645780eae069e412/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=72f25360f8d91762e8dfae5d645780eae069e412",
        "patch": "@@ -1517,7 +1517,7 @@ CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams, C\n \t{\n \t\tstd::string chain = ChainNameFromCommandLine();\n \t\t// SYSCOIN 3 snapshot\n-\t\tnTotalRewardWithMasternodes = 532150364 * COIN;\n+\t\tnTotalRewardWithMasternodes = 532210364 * COIN;\n \t\treturn nTotalRewardWithMasternodes;\n \t}\n \tCAmount nSubsidy = 38.5 * COIN;"
      }
    ]
  },
  {
    "sha": "f57cff1d72585c92d05dd81ce4a7b2f3e4041662",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTdjZmYxZDcyNTg1YzkyZDA1ZGQ4MWNlNGE3YjJmM2U0MDQxNjYy",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T11:25:05Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T11:25:05Z"
      },
      "message": "allocate enough for snapshot",
      "tree": {
        "sha": "9ac18428584b711f5bafa0a051f0467f3eb6670a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ac18428584b711f5bafa0a051f0467f3eb6670a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f57cff1d72585c92d05dd81ce4a7b2f3e4041662",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f57cff1d72585c92d05dd81ce4a7b2f3e4041662",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f57cff1d72585c92d05dd81ce4a7b2f3e4041662",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f57cff1d72585c92d05dd81ce4a7b2f3e4041662/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72f25360f8d91762e8dfae5d645780eae069e412",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72f25360f8d91762e8dfae5d645780eae069e412",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72f25360f8d91762e8dfae5d645780eae069e412"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "67bf434cb1c807234df6544d125f7651995f81e6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f57cff1d72585c92d05dd81ce4a7b2f3e4041662/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f57cff1d72585c92d05dd81ce4a7b2f3e4041662/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f57cff1d72585c92d05dd81ce4a7b2f3e4041662",
        "patch": "@@ -1517,7 +1517,7 @@ CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams, C\n \t{\n \t\tstd::string chain = ChainNameFromCommandLine();\n \t\t// SYSCOIN 3 snapshot\n-\t\tnTotalRewardWithMasternodes = 532210364 * COIN;\n+\t\tnTotalRewardWithMasternodes = 533210364 * COIN;\n \t\treturn nTotalRewardWithMasternodes;\n \t}\n \tCAmount nSubsidy = 38.5 * COIN;"
      }
    ]
  },
  {
    "sha": "9df98e396c114e1db75432d8cadaa871c0a19ef0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGY5OGUzOTZjMTE0ZTFkYjc1NDMyZDhjYWRhYTg3MWMwYTE5ZWYw",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T11:39:38Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T11:39:38Z"
      },
      "message": "update test",
      "tree": {
        "sha": "c0b7ff426ce3b72ed5e7537a7ced982372b4c933",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0b7ff426ce3b72ed5e7537a7ced982372b4c933"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9df98e396c114e1db75432d8cadaa871c0a19ef0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9df98e396c114e1db75432d8cadaa871c0a19ef0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9df98e396c114e1db75432d8cadaa871c0a19ef0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9df98e396c114e1db75432d8cadaa871c0a19ef0/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f57cff1d72585c92d05dd81ce4a7b2f3e4041662",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f57cff1d72585c92d05dd81ce4a7b2f3e4041662",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f57cff1d72585c92d05dd81ce4a7b2f3e4041662"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c3c1728ce06fae32ed117bd9ce7549a6832c1b82",
        "filename": "src/test/syscoin_snapshot_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df98e396c114e1db75432d8cadaa871c0a19ef0/src/test/syscoin_snapshot_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df98e396c114e1db75432d8cadaa871c0a19ef0/src/test/syscoin_snapshot_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_snapshot_tests.cpp?ref=9df98e396c114e1db75432d8cadaa871c0a19ef0",
        "patch": "@@ -66,7 +66,7 @@ void GenerateSnapShot(const std::vector<PaymentAmount> &paymentAmounts)\n \t\tGenerateMainNetBlocks(1, \"mainnet1\");\n \t}\n \n-\tstring sendString = \"sendtoaddress \" + newaddress + \" 550000\";\n+\tstring sendString = \"sendtoaddress \" + newaddress + \" 536831.76\";\n \tBOOST_CHECK_THROW(CallRPC(\"mainnet1\", sendString, false), runtime_error);\n \tGenerateMainNetBlocks(1, \"mainnet1\");\n \tGenerateMainNetBlocks(1, \"mainnet2\");"
      }
    ]
  },
  {
    "sha": "6aa0d6888d41f2547c9a32952bd33776b220de25",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YWEwZDY4ODhkNDFmMjU0N2M5YTMyOTUyYmQzMzc3NmIyMjBkZTI1",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T11:42:36Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T11:42:36Z"
      },
      "message": "update allocations",
      "tree": {
        "sha": "39c5810d2be96ad044dc92423b9519f2aaf38cc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39c5810d2be96ad044dc92423b9519f2aaf38cc7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6aa0d6888d41f2547c9a32952bd33776b220de25",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6aa0d6888d41f2547c9a32952bd33776b220de25",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6aa0d6888d41f2547c9a32952bd33776b220de25",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6aa0d6888d41f2547c9a32952bd33776b220de25/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9df98e396c114e1db75432d8cadaa871c0a19ef0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9df98e396c114e1db75432d8cadaa871c0a19ef0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9df98e396c114e1db75432d8cadaa871c0a19ef0"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ba56ee7fbe58d66e8c7db4b42c823d9c76c4c470",
        "filename": "src/test/syscoin_snapshot_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aa0d6888d41f2547c9a32952bd33776b220de25/src/test/syscoin_snapshot_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aa0d6888d41f2547c9a32952bd33776b220de25/src/test/syscoin_snapshot_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/syscoin_snapshot_tests.cpp?ref=6aa0d6888d41f2547c9a32952bd33776b220de25",
        "patch": "@@ -66,7 +66,7 @@ void GenerateSnapShot(const std::vector<PaymentAmount> &paymentAmounts)\n \t\tGenerateMainNetBlocks(1, \"mainnet1\");\n \t}\n \n-\tstring sendString = \"sendtoaddress \" + newaddress + \" 536831.76\";\n+\tstring sendString = \"sendtoaddress \" + newaddress + \" 325000\";\n \tBOOST_CHECK_THROW(CallRPC(\"mainnet1\", sendString, false), runtime_error);\n \tGenerateMainNetBlocks(1, \"mainnet1\");\n \tGenerateMainNetBlocks(1, \"mainnet2\");"
      },
      {
        "sha": "ded701bc0380f954550401425d4d7347c01a6054",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aa0d6888d41f2547c9a32952bd33776b220de25/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aa0d6888d41f2547c9a32952bd33776b220de25/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=6aa0d6888d41f2547c9a32952bd33776b220de25",
        "patch": "@@ -1517,7 +1517,7 @@ CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams, C\n \t{\n \t\tstd::string chain = ChainNameFromCommandLine();\n \t\t// SYSCOIN 3 snapshot\n-\t\tnTotalRewardWithMasternodes = 533210364 * COIN;\n+\t\tnTotalRewardWithMasternodes = 533000000 * COIN;\n \t\treturn nTotalRewardWithMasternodes;\n \t}\n \tCAmount nSubsidy = 38.5 * COIN;"
      }
    ]
  },
  {
    "sha": "171925e2562e663d430a4d8238e0908ea002941a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzE5MjVlMjU2MmU2NjNkNDMwYTRkODIzOGUwOTA4ZWEwMDI5NDFh",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T16:30:39Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T16:30:39Z"
      },
      "message": "seperate balance coin selection from alias outputs",
      "tree": {
        "sha": "a2eba3583df05b9056449abdf2de6206bfe6e19f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2eba3583df05b9056449abdf2de6206bfe6e19f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/171925e2562e663d430a4d8238e0908ea002941a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/171925e2562e663d430a4d8238e0908ea002941a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/171925e2562e663d430a4d8238e0908ea002941a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/171925e2562e663d430a4d8238e0908ea002941a/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6aa0d6888d41f2547c9a32952bd33776b220de25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6aa0d6888d41f2547c9a32952bd33776b220de25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6aa0d6888d41f2547c9a32952bd33776b220de25"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 21,
      "deletions": 17
    },
    "files": [
      {
        "sha": "d757f92b22d46f4079744a33adae6add42643ff6",
        "filename": "src/alias.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/171925e2562e663d430a4d8238e0908ea002941a/src/alias.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/171925e2562e663d430a4d8238e0908ea002941a/src/alias.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alias.cpp?ref=171925e2562e663d430a4d8238e0908ea002941a",
        "patch": "@@ -1133,7 +1133,8 @@ UniValue SyscoinListReceived(bool includeempty=true)\n \t}\n \n \tvector<COutput> vecOutputs;\n-\tpwalletMain->AvailableCoins(vecOutputs, true, NULL, includeempty, ALL_COINS, false, true);\n+\t// include alias balances and alias outputs\n+\tpwalletMain->AvailableCoins(vecOutputs, true, NULL, includeempty, ALL_COINS, false, true, true);\n \tBOOST_FOREACH(const COutput& out, vecOutputs) {\n \t\tCTxDestination address;\n \t\tif (!ExtractDestination(out.tx->tx->vout[out.i].scriptPubKey, address))"
      },
      {
        "sha": "590e4f38c7c7a51a14927d962ac430a98198a7c2",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/171925e2562e663d430a4d8238e0908ea002941a/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/171925e2562e663d430a4d8238e0908ea002941a/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=171925e2562e663d430a4d8238e0908ea002941a",
        "patch": "@@ -77,7 +77,7 @@ CAmount WalletModel::getBalance(const CCoinControl *coinControl) const\n     {\n         CAmount nBalance = 0;\n         std::vector<COutput> vCoins;\n-\t\t// SYSCOIN include sys outputs\n+\t\t// SYSCOIN include sys alias balances\n         wallet->AvailableCoins(vCoins, true, coinControl, false, ALL_COINS, false, true);\n         BOOST_FOREACH(const COutput& out, vCoins)\n             if(out.fSpendable)\n@@ -669,7 +669,7 @@ bool WalletModel::isSpent(const COutPoint& outpoint) const\n void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const\n {\n     std::vector<COutput> vCoins;\n-\t// SYSCOIN include sys outputs\n+\t// SYSCOIN include sys alias balances\n     wallet->AvailableCoins(vCoins, true, NULL, false, ALL_COINS, false, true);\n \n     LOCK2(cs_main, wallet->cs_wallet); // ListLockedCoins, mapWallet"
      },
      {
        "sha": "7e4e2b72e705bf7e7e53c0ef7d1b8d90474db6f1",
        "filename": "src/rpc/masternode.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/171925e2562e663d430a4d8238e0908ea002941a/src/rpc/masternode.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/171925e2562e663d430a4d8238e0908ea002941a/src/rpc/masternode.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/masternode.cpp?ref=171925e2562e663d430a4d8238e0908ea002941a",
        "patch": "@@ -410,7 +410,7 @@ UniValue masternode(const JSONRPCRequest& request)\n \n         // Find possible candidates\n         std::vector<COutput> vPossibleCoins;\n-\t\t// SYSCOIN include sys outputs\n+\t\t// SYSCOIN include sys alias balances\n         pwalletMain->AvailableCoins(vPossibleCoins, true, NULL, false, ONLY_1000, false, true);\n \n         UniValue obj(UniValue::VOBJ);"
      },
      {
        "sha": "a89cf1777315cf254f190ec958765feaf9a394b8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/171925e2562e663d430a4d8238e0908ea002941a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/171925e2562e663d430a4d8238e0908ea002941a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=171925e2562e663d430a4d8238e0908ea002941a",
        "patch": "@@ -2799,8 +2799,8 @@ UniValue listunspent(const JSONRPCRequest& request)\n     std::vector<COutput> vecOutputs;\n     assert(pwalletMain != NULL);\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n-\t// SYSCOIN include sys outputs\n-    pwalletMain->AvailableCoins(vecOutputs, !include_unsafe, NULL, true, ALL_COINS, false, true);\n+\t// SYSCOIN include sys alias balances and sys outputs\n+    pwalletMain->AvailableCoins(vecOutputs, !include_unsafe, NULL, true, ALL_COINS, false, true, true);\n     BOOST_FOREACH(const COutput& out, vecOutputs) {\n         if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n             continue;"
      },
      {
        "sha": "be7322f6c4e85a09eea5247524073b5ea737b38f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 10,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/171925e2562e663d430a4d8238e0908ea002941a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/171925e2562e663d430a4d8238e0908ea002941a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=171925e2562e663d430a4d8238e0908ea002941a",
        "patch": "@@ -2568,7 +2568,7 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n     return nTotal;\n }\n \n-void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed, const CCoinControl *coinControl, bool fIncludeZeroValue, AvailableCoinsType nCoinType, bool fUseInstantSend, bool fIncludeSyscoin) const\n+void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed, const CCoinControl *coinControl, bool fIncludeZeroValue, AvailableCoinsType nCoinType, bool fUseInstantSend, bool fIncludeSyscoinAliasBalances, bool fIncludeSyscoinAliasOutputs) const\n {\n     vCoins.clear();\n \n@@ -2607,7 +2607,7 @@ void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed,\n \n             for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++) {\n \t\t\t\t// SYSCOIN\n-\t\t\t\tif (!fIncludeSyscoin) {\n+\t\t\t\tif (!fIncludeSyscoinAliasBalances || !fIncludeSyscoinAliasOutputs) {\n \t\t\t\t\tif (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs && !coinControl->IsSelected(COutPoint((*it).first, i)))\n \t\t\t\t\t\tcontinue;\n \t\t\t\t\t// SYSCOIN txs are unspendable by wallet unless using coincontrol(and the tx is selected)\n@@ -2618,10 +2618,10 @@ void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed,\n \t\t\t\t\t\t{\n \t\t\t\t\t\t\tint op;\n \t\t\t\t\t\t\tstd::vector<std::vector<unsigned char> > vvchArgs;\n-\t\t\t\t\t\t\tif (IsSyscoinScript(pcoin->tx->vout[i].scriptPubKey, op, vvchArgs))\n+\t\t\t\t\t\t\tif (IsSyscoinScript(pcoin->tx->vout[i].scriptPubKey, op, vvchArgs) && !fIncludeSyscoinAliasOutputs)\n \t\t\t\t\t\t\t\tcontinue;\n \t\t\t\t\t\t\tCSyscoinAddress address = CSyscoinAddress(sysdestination);\n-\t\t\t\t\t\t\tif (DoesAliasExist(address.ToString()))\n+\t\t\t\t\t\t\tif (DoesAliasExist(address.ToString()) && !fIncludeSyscoinAliasBalances)\n \t\t\t\t\t\t\t\tcontinue;\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n@@ -3021,7 +3021,8 @@ bool CWallet::SelectCoinsByDenominations(int nDenom, CAmount nValueMin, CAmount\n     nValueRet = 0;\n \n     std::vector<COutput> vCoins;\n-    AvailableCoins(vCoins, true, NULL, false, ONLY_DENOMINATED);\n+\t// SYSCOIN include syscoin alias balances\n+    AvailableCoins(vCoins, true, NULL, false, ONLY_DENOMINATED, false, true);\n \n     std::random_shuffle(vCoins.rbegin(), vCoins.rend(), GetRandInt);\n \n@@ -3189,7 +3190,8 @@ bool CWallet::SelectCoinsDark(CAmount nValueMin, CAmount nValueMax, std::vector<\n     nValueRet = 0;\n \n     std::vector<COutput> vCoins;\n-    AvailableCoins(vCoins, true, coinControl, false, nPrivateSendRoundsMin < 0 ? ONLY_NONDENOMINATED : ONLY_DENOMINATED);\n+\t// SYSCOIN include syscoin alias balances\n+    AvailableCoins(vCoins, true, coinControl, false, nPrivateSendRoundsMin < 0 ? ONLY_NONDENOMINATED : ONLY_DENOMINATED, false, true);\n \n     //order the array so largest nondenom are first, then denominations, then very small inputs.\n     std::sort(vCoins.rbegin(), vCoins.rend(), CompareByPriority());\n@@ -3222,8 +3224,8 @@ bool CWallet::GetCollateralTxDSIn(CTxDSIn& txdsinRet, CAmount& nValueRet) const\n     LOCK2(cs_main, cs_wallet);\n \n     std::vector<COutput> vCoins;\n-\n-    AvailableCoins(vCoins);\n+\t// SYSCOIN include syscoin alias balances\n+\tAvailableCoins(vCoins, true, NULL, false, ALL_COINS, false, true);\n \n     for (const auto& out : vCoins)\n     {\n@@ -3245,7 +3247,7 @@ bool CWallet::GetMasternodeOutpointAndKeys(COutPoint& outpointRet, CPubKey& pubK\n \n     // Find possible candidates\n     std::vector<COutput> vPossibleCoins;\n-\t// SYSCOIN include sys outputs\n+\t// SYSCOIN include sys alias balances\n     AvailableCoins(vPossibleCoins, true, NULL, false, ONLY_1000, false, true);\n     if(vPossibleCoins.empty()) {\n         LogPrintf(\"CWallet::GetMasternodeOutpointAndKeys -- Could not locate any valid masternode vin\\n\");\n@@ -3327,7 +3329,8 @@ int CWallet::CountInputsWithAmount(CAmount nInputAmount)\n bool CWallet::HasCollateralInputs(bool fOnlyConfirmed) const\n {\n     std::vector<COutput> vCoins;\n-    AvailableCoins(vCoins, fOnlyConfirmed, NULL, false, ONLY_PRIVATESEND_COLLATERAL);\n+\t// SYSCOIN include alias balances\n+    AvailableCoins(vCoins, fOnlyConfirmed, NULL, false, ONLY_PRIVATESEND_COLLATERAL, false, true);\n \n     return !vCoins.empty();\n }"
      },
      {
        "sha": "617378f7f2044b450879cf75f63705a068d90412",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/171925e2562e663d430a4d8238e0908ea002941a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/171925e2562e663d430a4d8238e0908ea002941a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=171925e2562e663d430a4d8238e0908ea002941a",
        "patch": "@@ -719,7 +719,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /**\n      * populate vCoins with vector of available COutputs.\n      */\n-    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL, bool fIncludeZeroValue=false, AvailableCoinsType nCoinType=ALL_COINS, bool fUseInstantSend = false, bool fIncludeSyscoin = false) const;\n+    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL, bool fIncludeZeroValue=false, AvailableCoinsType nCoinType=ALL_COINS, bool fUseInstantSend = false, bool fIncludeSyscoinAliasBalances = false, bool fIncludeSyscoinAliasOutputs = false) const;\n \n     /**\n      * Shuffle and select coins until nTargetValue is reached while avoiding"
      }
    ]
  },
  {
    "sha": "1b5e577a131c08288654b6f243d0c791409d5adc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjVlNTc3YTEzMWMwODI4ODY1NGI2ZjI0M2QwYzc5MTQwOWQ1YWRj",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T18:28:39Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T18:28:39Z"
      },
      "message": "1k blocks to start",
      "tree": {
        "sha": "6d9551b2ab88c5e62c36068a27e18ab1cf062138",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d9551b2ab88c5e62c36068a27e18ab1cf062138"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b5e577a131c08288654b6f243d0c791409d5adc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b5e577a131c08288654b6f243d0c791409d5adc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b5e577a131c08288654b6f243d0c791409d5adc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b5e577a131c08288654b6f243d0c791409d5adc/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "171925e2562e663d430a4d8238e0908ea002941a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/171925e2562e663d430a4d8238e0908ea002941a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/171925e2562e663d430a4d8238e0908ea002941a"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c76264a4c4be4f5fb852ae22037d9a78499397ba",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b5e577a131c08288654b6f243d0c791409d5adc/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b5e577a131c08288654b6f243d0c791409d5adc/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=1b5e577a131c08288654b6f243d0c791409d5adc",
        "patch": "@@ -31,7 +31,7 @@ unsigned int static KimotoGravityWell(const CBlockIndex* pindexLast, const Conse\n     uint64_t PastBlocksMin = pastSecondsMin / params.nPowTargetSpacing;\n     uint64_t PastBlocksMax = pastSecondsMax / params.nPowTargetSpacing;\n \n-    if (BlockLastSolved == NULL || BlockLastSolved->nHeight <= 600 || (uint64_t)BlockLastSolved->nHeight < PastBlocksMin) { return UintToArith256(params.powLimit).GetCompact(); }\n+    if (BlockLastSolved == NULL || BlockLastSolved->nHeight <= 1000 || (uint64_t)BlockLastSolved->nHeight < PastBlocksMin) { return UintToArith256(params.powLimit).GetCompact(); }\n \n     for (unsigned int i = 1; BlockReading && BlockReading->nHeight > 0; i++) {\n         if (PastBlocksMax > 0 && i > PastBlocksMax) { break; }\n@@ -86,8 +86,8 @@ unsigned int static DarkGravityWave(const CBlockIndex* pindexLast, const CBlockH\n     const arith_uint256 bnPowLimit = UintToArith256(params.powLimit);\n \tint64_t nPastBlocks = 24;\n \t\n-    // make sure we have at least 600 blocks, otherwise just return powLimit\n-    if (!pindexLast || pindexLast->nHeight <= 600) {\n+    // make sure we have at least 1000 blocks, otherwise just return powLimit\n+    if (!pindexLast || pindexLast->nHeight <= 1000) {\n \t\treturn UintToArith256(Params(CBaseChainParams::REGTEST).GetConsensus().powLimit).GetCompact();\n     }\n "
      }
    ]
  },
  {
    "sha": "2154eeac3c12066becd728c4591936c387a6564e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTU0ZWVhYzNjMTIwNjZiZWNkNzI4YzQ1OTE5MzZjMzg3YTY1NjRl",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T19:57:38Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2018-05-01T19:57:38Z"
      },
      "message": "update def ports",
      "tree": {
        "sha": "d64ffe8034f562595f5a7ba7056e76aa0c3b87c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d64ffe8034f562595f5a7ba7056e76aa0c3b87c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2154eeac3c12066becd728c4591936c387a6564e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2154eeac3c12066becd728c4591936c387a6564e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2154eeac3c12066becd728c4591936c387a6564e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2154eeac3c12066becd728c4591936c387a6564e/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b5e577a131c08288654b6f243d0c791409d5adc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b5e577a131c08288654b6f243d0c791409d5adc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b5e577a131c08288654b6f243d0c791409d5adc"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "9bf8265213bc0c79aff5c0932a14eac61884bcae",
        "filename": "contrib/debian/examples/syscoin.conf",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2154eeac3c12066becd728c4591936c387a6564e/contrib/debian/examples/syscoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2154eeac3c12066becd728c4591936c387a6564e/contrib/debian/examples/syscoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/examples/syscoin.conf?ref=2154eeac3c12066becd728c4591936c387a6564e",
        "patch": "@@ -89,7 +89,7 @@\n #rpcallowip=2001:db8:85a3:0:0:8a2e:370:7334/96\n \n # Listen for RPC connections on this TCP port:\n-#rpcport=9998\n+#rpcport=8370\n \n # You can use Syscoin or syscoind to send commands to Syscoin/syscoind\n # running on another host using this option:"
      },
      {
        "sha": "3273d8f1ed1f0ad8c3d0e4425f0ab8a0bab81514",
        "filename": "contrib/linearize/example-linearize-testnet.cfg",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2154eeac3c12066becd728c4591936c387a6564e/contrib/linearize/example-linearize-testnet.cfg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2154eeac3c12066becd728c4591936c387a6564e/contrib/linearize/example-linearize-testnet.cfg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/example-linearize-testnet.cfg?ref=2154eeac3c12066becd728c4591936c387a6564e",
        "patch": "@@ -3,7 +3,7 @@\n rpcuser=someuser\n rpcpassword=somepassword\n host=127.0.0.1\n-port=19998\n+port=18370\n \n # bootstrap.dat hashlist settings (linearize-hashes)\n max_height=3130000"
      },
      {
        "sha": "74a1598eef6872c8839b213fbf048d9c1c52c1c8",
        "filename": "contrib/linearize/example-linearize.cfg",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2154eeac3c12066becd728c4591936c387a6564e/contrib/linearize/example-linearize.cfg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2154eeac3c12066becd728c4591936c387a6564e/contrib/linearize/example-linearize.cfg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/example-linearize.cfg?ref=2154eeac3c12066becd728c4591936c387a6564e",
        "patch": "@@ -3,7 +3,7 @@\n rpcuser=someuser\n rpcpassword=somepassword\n host=127.0.0.1\n-port=9998\n+port=8370\n \n # bootstrap.dat hashlist settings (linearize-hashes)\n max_height=3130000"
      },
      {
        "sha": "019a989ccabb8aee6f5e44520ae0ea3b46f68d77",
        "filename": "contrib/linearize/linearize-hashes.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2154eeac3c12066becd728c4591936c387a6564e/contrib/linearize/linearize-hashes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2154eeac3c12066becd728c4591936c387a6564e/contrib/linearize/linearize-hashes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-hashes.py?ref=2154eeac3c12066becd728c4591936c387a6564e",
        "patch": "@@ -96,7 +96,7 @@ def get_block_hashes(settings, max_blocks_per_call=10000):\n \tif 'host' not in settings:\n \t\tsettings['host'] = '127.0.0.1'\n \tif 'port' not in settings:\n-\t\tsettings['port'] = 9998\n+\t\tsettings['port'] = 8370\n \tif 'min_height' not in settings:\n \t\tsettings['min_height'] = 0\n \tif 'max_height' not in settings:"
      },
      {
        "sha": "e56fe39abb9c144a2d4364f624f4545833c85989",
        "filename": "contrib/spendfrom/spendfrom.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2154eeac3c12066becd728c4591936c387a6564e/contrib/spendfrom/spendfrom.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2154eeac3c12066becd728c4591936c387a6564e/contrib/spendfrom/spendfrom.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/spendfrom/spendfrom.py?ref=2154eeac3c12066becd728c4591936c387a6564e",
        "patch": "@@ -67,7 +67,7 @@ def connect_JSON(config):\n     testnet = config.get('testnet', '0')\n     testnet = (int(testnet) > 0)  # 0/1 in config file, convert to True/False\n     if not 'rpcport' in config:\n-        config['rpcport'] = 19998 if testnet else 9998\n+        config['rpcport'] = 18370 if testnet else 8370\n     connect = \"http://%s:%s@127.0.0.1:%s\"%(config['rpcuser'], config['rpcpassword'], config['rpcport'])\n     try:\n         result = ServiceProxy(connect)"
      },
      {
        "sha": "4048fc942cfaef13f8bf898eb1337055bf2d64e8",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2154eeac3c12066becd728c4591936c387a6564e/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2154eeac3c12066becd728c4591936c387a6564e/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=2154eeac3c12066becd728c4591936c387a6564e",
        "patch": "@@ -166,7 +166,7 @@ Threads\n \n - ThreadFlushWalletDB : Close the wallet.dat file if it hasn't been used in 500ms.\n \n-- ThreadRPCServer : Remote procedure call handler, listens on port 9998 for connections and services them.\n+- ThreadRPCServer : Remote procedure call handler, listens on port 8370 for connections and services them.\n \n - SyscoinMiner : Generates coins (if wallet is enabled).\n "
      },
      {
        "sha": "7d99db82b2dc40d442c0fa470f308c5d16fad311",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2154eeac3c12066becd728c4591936c387a6564e/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2154eeac3c12066becd728c4591936c387a6564e/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=2154eeac3c12066becd728c4591936c387a6564e",
        "patch": "@@ -61,7 +61,7 @@ class CBaseDevNetParams : public CBaseChainParams\n public:\n     CBaseDevNetParams(const std::string &dataDir)\n     {\n-        nRPCPort = 19998;\n+        nRPCPort = 18370;\n         strDataDir = dataDir;\n     }\n };"
      }
    ]
  }
]