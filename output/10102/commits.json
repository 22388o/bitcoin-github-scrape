[
  {
    "sha": "3c51b5e3af0cb6165de6bb3b0b723a3eeb8812db",
    "node_id": "C_kwDOABII59oAKDNjNTFiNWUzYWYwY2I2MTY1ZGU2YmIzYjBiNzIzYTNlZWI4ODEyZGI",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-11-29T16:20:20Z"
      },
      "message": "Increase feature_block.py and feature_taproot.py timeouts\n\nNeeded because BlockConnected notifications are a lot slower with the wallet\nrunning in separate process.",
      "tree": {
        "sha": "b0f2f22d983761a4430fe3f4b1a4c006aa59659e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0f2f22d983761a4430fe3f4b1a4c006aa59659e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c51b5e3af0cb6165de6bb3b0b723a3eeb8812db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c51b5e3af0cb6165de6bb3b0b723a3eeb8812db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c51b5e3af0cb6165de6bb3b0b723a3eeb8812db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c51b5e3af0cb6165de6bb3b0b723a3eeb8812db/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "383d350bd5107bfe00e3b90a00cab9a3c1397c72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/383d350bd5107bfe00e3b90a00cab9a3c1397c72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/383d350bd5107bfe00e3b90a00cab9a3c1397c72"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 11,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6a2a97ac7cad3aaa5f9df036e1f04b46692f6907",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c51b5e3af0cb6165de6bb3b0b723a3eeb8812db/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c51b5e3af0cb6165de6bb3b0b723a3eeb8812db/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=3c51b5e3af0cb6165de6bb3b0b723a3eeb8812db",
        "patch": "@@ -86,6 +86,7 @@ def set_test_params(self):\n             '-acceptnonstdtxn=1',  # This is a consensus block test, we don't care about tx policy\n             '-testactivationheight=bip34@2',\n         ]]\n+        self.rpc_timeout = 1920\n \n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n@@ -1292,7 +1293,7 @@ def run_test(self):\n         blocks2 = []\n         for i in range(89, LARGE_REORG_SIZE + 89):\n             blocks2.append(self.next_block(\"alt\" + str(i)))\n-        self.send_blocks(blocks2, False, force_send=True)\n+        self.send_blocks(blocks2, False, force_send=True, timeout=1920)\n \n         # extend alt chain to trigger re-org\n         block = self.next_block(\"alt\" + str(chain1_tip + 1))\n@@ -1301,7 +1302,7 @@ def run_test(self):\n         # ... and re-org back to the first chain\n         self.move_tip(chain1_tip)\n         block = self.next_block(chain1_tip + 1)\n-        self.send_blocks([block], False, force_send=True)\n+        self.send_blocks([block], False, force_send=True, timeout=1920)\n         block = self.next_block(chain1_tip + 2)\n         self.send_blocks([block], True, timeout=2440)\n \n@@ -1317,6 +1318,13 @@ def run_test(self):\n         b_cb34.solve()\n         self.send_blocks([b_cb34], success=False, reject_reason='bad-cb-height', reconnect=True)\n \n+        # Flush the notification queue before shutting down, so the\n+        # FlushBackgroundCallbacks call made during shutdown won't exceed the\n+        # test framework's 60 second shutdown timeout on slow systems, due to\n+        # all the BlockConnected notifications generated during the test.\n+        self.log.info(\"Wait for BlockConnected notifications to be processed before shutdown\")\n+        self.nodes[0].syncwithvalidationinterfacequeue()\n+\n     # Helper methods\n     ################\n "
      },
      {
        "sha": "295f0ab96656b575d899cc0bb515e9556d1e7a1e",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c51b5e3af0cb6165de6bb3b0b723a3eeb8812db/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c51b5e3af0cb6165de6bb3b0b723a3eeb8812db/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=3c51b5e3af0cb6165de6bb3b0b723a3eeb8812db",
        "patch": "@@ -1257,6 +1257,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         # Node 0 has Taproot inactive, Node 1 active.\n         self.extra_args = [[\"-par=1\"], [\"-par=1\"]]\n+        self.rpc_timeout = 120\n         if self.options.previous_release:\n             self.wallet_names = [None, self.default_wallet_name]\n         else:"
      }
    ]
  },
  {
    "sha": "eae99d609c7a08fde35e723967d078904ad1cd05",
    "node_id": "C_kwDOABII59oAKGVhZTk5ZDYwOWM3YTA4ZmRlMzVlNzIzOTY3ZDA3ODkwNGFkMWNkMDU",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-11-29T16:20:20Z"
      },
      "message": "Add capnp serialization code for bitcoin types",
      "tree": {
        "sha": "e7f0e09980330b40acaf3b0e61919a7a66c6b7e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7f0e09980330b40acaf3b0e61919a7a66c6b7e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eae99d609c7a08fde35e723967d078904ad1cd05",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eae99d609c7a08fde35e723967d078904ad1cd05",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eae99d609c7a08fde35e723967d078904ad1cd05",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eae99d609c7a08fde35e723967d078904ad1cd05/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c51b5e3af0cb6165de6bb3b0b723a3eeb8812db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c51b5e3af0cb6165de6bb3b0b723a3eeb8812db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c51b5e3af0cb6165de6bb3b0b723a3eeb8812db"
      }
    ],
    "stats": {
      "total": 437,
      "additions": 436,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9cee2ab6820387eeb05355e4957a5770a83e9df1",
        "filename": "contrib/devtools/circular-dependencies.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eae99d609c7a08fde35e723967d078904ad1cd05/contrib/devtools/circular-dependencies.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eae99d609c7a08fde35e723967d078904ad1cd05/contrib/devtools/circular-dependencies.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/circular-dependencies.py?ref=eae99d609c7a08fde35e723967d078904ad1cd05",
        "patch": "@@ -16,7 +16,7 @@\n # define functions and variables declared in corresponding .h files is\n # incorrect.\n HEADER_MODULE_PATHS = [\n-    'interfaces/'\n+    'ipc/'\n ]\n \n def module_name(path):"
      },
      {
        "sha": "01e2310351c661cf6ed80b72113024fb4abaf0bd",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eae99d609c7a08fde35e723967d078904ad1cd05/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eae99d609c7a08fde35e723967d078904ad1cd05/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=eae99d609c7a08fde35e723967d078904ad1cd05",
        "patch": "@@ -822,6 +822,7 @@ if HARDEN\n endif\n \n libbitcoin_ipc_mpgen_input = \\\n+  ipc/capnp/common.capnp \\\n   ipc/capnp/echo.capnp \\\n   ipc/capnp/init.capnp\n EXTRA_DIST += $(libbitcoin_ipc_mpgen_input)\n@@ -830,6 +831,9 @@ EXTRA_DIST += $(libbitcoin_ipc_mpgen_input)\n if BUILD_MULTIPROCESS\n LIBBITCOIN_IPC=libbitcoin_ipc.a\n libbitcoin_ipc_a_SOURCES = \\\n+  ipc/capnp/common-types.h \\\n+  ipc/capnp/common.cpp \\\n+  ipc/capnp/common.h \\\n   ipc/capnp/context.h \\\n   ipc/capnp/init-types.h \\\n   ipc/capnp/protocol.cpp \\"
      },
      {
        "sha": "cde0a3ed2f93c481040dc646b681f395402ab6e1",
        "filename": "src/ipc/capnp/common-types.h",
        "status": "added",
        "additions": 281,
        "deletions": 0,
        "changes": 281,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eae99d609c7a08fde35e723967d078904ad1cd05/src/ipc/capnp/common-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eae99d609c7a08fde35e723967d078904ad1cd05/src/ipc/capnp/common-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/common-types.h?ref=eae99d609c7a08fde35e723967d078904ad1cd05",
        "patch": "@@ -0,0 +1,281 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_COMMON_TYPES_H\n+#define BITCOIN_IPC_CAPNP_COMMON_TYPES_H\n+\n+#include <chainparams.h>\n+#include <consensus/validation.h>\n+#include <ipc/capnp/common.capnp.proxy.h>\n+#include <mp/proxy-types.h>\n+#include <net_processing.h>\n+#include <netbase.h>\n+#include <util/translation.h>\n+#include <validation.h>\n+#include <wallet/coincontrol.h>\n+\n+namespace ipc {\n+namespace capnp {\n+//! Convert kj::StringPtr to std::string.\n+inline std::string ToString(const kj::StringPtr& str) { return {str.cStr(), str.size()}; }\n+\n+//! Convert kj::ArrayPtr to std::string.\n+inline std::string ToString(const kj::ArrayPtr<const kj::byte>& data)\n+{\n+    return {reinterpret_cast<const char*>(data.begin()), data.size()};\n+}\n+\n+//! Convert array object to kj::ArrayPtr.\n+template <typename Array>\n+inline kj::ArrayPtr<const kj::byte> ToArray(const Array& array)\n+{\n+    return {reinterpret_cast<const kj::byte*>(array.data()), array.size()};\n+}\n+\n+//! Convert base_blob to kj::ArrayPtr.\n+template <typename Blob>\n+inline kj::ArrayPtr<const kj::byte> FromBlob(const Blob& blob)\n+{\n+    return {blob.begin(), blob.size()};\n+}\n+\n+//! Convert kj::ArrayPtr to base_blob\n+template <typename Blob>\n+inline Blob ToBlob(kj::ArrayPtr<const kj::byte> data)\n+{\n+    // TODO: Avoid temp vector.\n+    return Blob(std::vector<unsigned char>(data.begin(), data.begin() + data.size()));\n+}\n+\n+//! Serialize bitcoin value.\n+template <typename T>\n+CDataStream Serialize(const T& value)\n+{\n+    CDataStream stream(SER_NETWORK, CLIENT_VERSION);\n+    value.Serialize(stream);\n+    return stream;\n+}\n+\n+//! Deserialize bitcoin value.\n+template <typename T>\n+T Unserialize(T& value, const kj::ArrayPtr<const kj::byte>& data)\n+{\n+    // Could optimize, it unnecessarily copies the data into a temporary vector.\n+    CDataStream stream({data.begin(), data.end()}, SER_NETWORK, CLIENT_VERSION);\n+    value.Unserialize(stream);\n+    return value;\n+}\n+\n+//! Deserialize bitcoin value.\n+template <typename T>\n+T Unserialize(const kj::ArrayPtr<const kj::byte>& data)\n+{\n+    T value;\n+    Unserialize(value, data);\n+    return value;\n+}\n+\n+template <typename T>\n+using Deserializable = std::is_constructible<T, ::deserialize_type, ::CDataStream&>;\n+\n+template <typename T>\n+struct Unserializable\n+{\n+private:\n+    template <typename C>\n+    static std::true_type test(decltype(std::declval<C>().Unserialize(std::declval<C&>()))*);\n+    template <typename>\n+    static std::false_type test(...);\n+\n+public:\n+    static constexpr bool value = decltype(test<T>(nullptr))::value;\n+};\n+\n+template <typename T>\n+struct Serializable\n+{\n+private:\n+    template <typename C>\n+    static std::true_type test(decltype(std::declval<C>().Serialize(std::declval<C&>()))*);\n+    template <typename>\n+    static std::false_type test(...);\n+\n+public:\n+    static constexpr bool value = decltype(test<T>(nullptr))::value;\n+};\n+} // namespace capnp\n+} // namespace ipc\n+\n+namespace mp {\n+//!@{\n+//! Functions to serialize / deserialize bitcoin objects that don't\n+//! already provide their own serialization.\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const UniValue& univalue,\n+                        ipc::capnp::messages::UniValue::Builder&& builder);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::UniValue::Reader& reader,\n+                       UniValue& univalue);\n+//!@}\n+\n+template <typename LocalType, typename Reader, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<LocalType>,\n+    Priority<2>,\n+    InvokeContext& invoke_context,\n+    Reader&& reader,\n+    ReadDest&& read_dest,\n+    decltype(CustomReadMessage(invoke_context, reader.get(), std::declval<LocalType&>()))* enable = nullptr)\n+{\n+    return read_dest.update([&](auto& value) { CustomReadMessage(invoke_context, reader.get(), value); });\n+}\n+\n+template <typename Accessor, typename LocalType, typename ServerContext, typename Fn, typename... Args>\n+auto CustomPassField(TypeList<LocalType>, ServerContext& server_context, Fn&& fn, Args&&... args)\n+    -> decltype(CustomPassMessage(server_context,\n+                                  Accessor::get(server_context.call_context.getParams()),\n+                                  Accessor::init(server_context.call_context.getResults()),\n+                                  nullptr))\n+{\n+    CustomPassMessage(server_context, Accessor::get(server_context.call_context.getParams()),\n+                      Accessor::init(server_context.call_context.getResults()),\n+                      [&](LocalType param) { fn.invoke(server_context, std::forward<Args>(args)..., param); });\n+}\n+\n+template <typename LocalType, typename Input, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<LocalType>,\n+    Priority<1>,\n+    InvokeContext& invoke_context,\n+    Input&& input,\n+    ReadDest&& read_dest,\n+    typename std::enable_if<ipc::capnp::Deserializable<LocalType>::value>::type* enable = nullptr)\n+{\n+    assert(input.has());\n+    auto data = input.get();\n+    // Note: stream copy here is unnecessary, and can be avoided in the future\n+    // when `VectorReader` from #12254 is added.\n+    CDataStream stream({data.begin(), data.end()}, SER_NETWORK, CLIENT_VERSION);\n+    return read_dest.construct(deserialize, stream);\n+}\n+\n+template <typename LocalType, typename Input, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<LocalType>,\n+    Priority<1>,\n+    InvokeContext& invoke_context,\n+    Input&& input,\n+    ReadDest&& read_dest,\n+    // FIXME instead of always preferring Deserialize implementation over Unserialize should prefer Deserializing when\n+    // emplacing, unserialize when updating\n+    typename std::enable_if<ipc::capnp::Unserializable<LocalType>::value &&\n+                            !ipc::capnp::Deserializable<LocalType>::value>::type* enable = nullptr)\n+{\n+    return read_dest.update([&](auto& value) {\n+        if (!input.has()) return;\n+        auto data = input.get();\n+        // Note: stream copy here is unnecessary, and can be avoided in the future\n+        // when `VectorReader` from #12254 is added.\n+        CDataStream stream({data.begin(), data.end()}, SER_NETWORK, CLIENT_VERSION);\n+        value.Unserialize(stream);\n+    });\n+}\n+\n+template <typename Input, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<std::chrono::microseconds>, Priority<1>, InvokeContext& invoke_context, Input&& input, ReadDest&& read_dest)\n+{\n+    return read_dest.construct(input.get());\n+}\n+\n+template <typename Value, typename Output>\n+void CustomBuildField(TypeList<std::chrono::microseconds>, Priority<1>, InvokeContext& invoke_context, Value&& value, Output&& output)\n+{\n+    output.set(value.count());\n+}\n+\n+template <typename Input, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<SecureString>, Priority<1>, InvokeContext& invoke_context, Input&& input, ReadDest&& read_dest)\n+{\n+    auto data = input.get();\n+    // Copy input into SecureString. Caller needs to be responsible for calling\n+    // memory_cleanse on the input.\n+    return read_dest.construct(CharCast(data.begin()), data.size());\n+}\n+\n+template <typename Value, typename Output>\n+void CustomBuildField(TypeList<SecureString>, Priority<1>, InvokeContext& invoke_context, Value&& str, Output&& output)\n+{\n+    auto result = output.init(str.size());\n+    // Copy SecureString into output. Caller needs to be responsible for calling\n+    // memory_cleanse later on the output after it is sent.\n+    memcpy(result.begin(), str.data(), str.size());\n+}\n+\n+template <typename LocalType, typename Value, typename Output>\n+void CustomBuildField(\n+    TypeList<LocalType>,\n+    Priority<2>,\n+    InvokeContext& invoke_context,\n+    Value&& value,\n+    Output&& output,\n+    typename std::enable_if<std::is_same<decltype(output.init(value.size())), ::capnp::Data::Builder>::value>::type*\n+        enable_output = nullptr,\n+    decltype(memcpy(output.init(value.size()).begin(), value.data(), value.size()))* enable_value = nullptr)\n+{\n+    auto result = output.init(value.size());\n+    memcpy(result.begin(), value.data(), value.size());\n+}\n+\n+template <typename LocalType, typename Value, typename Output>\n+void CustomBuildField(TypeList<LocalType>,\n+                      Priority<2>,\n+                      InvokeContext& invoke_context,\n+                      Value&& value,\n+                      Output&& output,\n+                      decltype(CustomBuildMessage(invoke_context, value, output.init()))* enable = nullptr)\n+{\n+    CustomBuildMessage(invoke_context, value, output.init());\n+}\n+\n+template <typename LocalType, typename Value, typename Output>\n+void CustomBuildField(\n+    TypeList<LocalType>,\n+    Priority<1>,\n+    InvokeContext& invoke_context,\n+    Value&& value,\n+    Output&& output,\n+    typename std::enable_if<ipc::capnp::Serializable<\n+        typename std::remove_cv<typename std::remove_reference<Value>::type>::type>::value>::type* enable = nullptr)\n+{\n+    CDataStream stream(SER_NETWORK, CLIENT_VERSION);\n+    value.Serialize(stream);\n+    auto result = output.init(stream.size());\n+    memcpy(result.begin(), stream.data(), stream.size());\n+}\n+\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+auto CustomPassField(TypeList<>, ServerContext& server_context, const Fn& fn, Args&&... args) ->\n+    typename std::enable_if<std::is_same<decltype(Accessor::get(server_context.call_context.getParams())),\n+                                         ipc::capnp::messages::GlobalArgs::Reader>::value>::type\n+{\n+    ipc::capnp::ReadGlobalArgs(server_context, Accessor::get(server_context.call_context.getParams()));\n+    return fn.invoke(server_context, std::forward<Args>(args)...);\n+}\n+\n+template <typename Output>\n+void CustomBuildField(\n+    TypeList<>,\n+    Priority<1>,\n+    InvokeContext& invoke_context,\n+    Output&& output,\n+    typename std::enable_if<std::is_same<decltype(output.init()),\n+                                         ipc::capnp::messages::GlobalArgs::Builder>::value>::type* enable = nullptr)\n+{\n+    ipc::capnp::BuildGlobalArgs(invoke_context, output.init());\n+}\n+} // namespace mp\n+\n+#endif // BITCOIN_IPC_CAPNP_COMMON_TYPES_H"
      },
      {
        "sha": "117a92db605383f9999f80bd11fcf386911328dd",
        "filename": "src/ipc/capnp/common.capnp",
        "status": "added",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eae99d609c7a08fde35e723967d078904ad1cd05/src/ipc/capnp/common.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eae99d609c7a08fde35e723967d078904ad1cd05/src/ipc/capnp/common.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/common.capnp?ref=eae99d609c7a08fde35e723967d078904ad1cd05",
        "patch": "@@ -0,0 +1,49 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0xcd2c6232cb484a28;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"ipc/capnp/common.h\");\n+$Proxy.includeTypes(\"ipc/capnp/common-types.h\");\n+\n+struct UniValue {\n+    # The current version of UniValue included in bitcoin doesn't support\n+    # round-trip serialization of raw values. After it gets updated, and\n+    # https://github.com/jgarzik/univalue/pull/31 is merged, this struct\n+    # can go away and UniValues can just be serialized as text using\n+    # UniValue::read() and UniValue::write() methods.\n+\n+    type @0 :Int32;\n+    value @1 :Text;\n+}\n+\n+struct Settings $Proxy.wrap(\"util::Settings\") {\n+   forcedSettings @0 :List(Pair(Text, UniValue)) $Proxy.name(\"forced_settings\");\n+   commandLineOptions @1 :List(Pair(Text, List(UniValue))) $Proxy.name(\"command_line_options\");\n+   rwSettings @2 :List(Pair(Text, UniValue)) $Proxy.name(\"rw_settings\");\n+   roConfig @3 :List(Pair(Text, List(Pair(Text, List(UniValue))))) $Proxy.name(\"ro_config\");\n+}\n+\n+struct GlobalArgs $Proxy.count(0) {\n+   settings @0 :Settings;\n+}\n+\n+struct BilingualStr $Proxy.wrap(\"bilingual_str\") {\n+    original @0 :Text;\n+    translated @1 :Text;\n+}\n+\n+struct Pair(Key, Value) {\n+    key @0 :Key;\n+    value @1 :Value;\n+}\n+\n+struct PairStr64 {\n+    key @0 :Text;\n+    value @1 :UInt64;\n+}"
      },
      {
        "sha": "2b8e94423f173d54cff9744c5742a22467b6a4dd",
        "filename": "src/ipc/capnp/common.cpp",
        "status": "added",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eae99d609c7a08fde35e723967d078904ad1cd05/src/ipc/capnp/common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eae99d609c7a08fde35e723967d078904ad1cd05/src/ipc/capnp/common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/common.cpp?ref=eae99d609c7a08fde35e723967d078904ad1cd05",
        "patch": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <capnp/blob.h>\n+#include <capnp/common.h>\n+#include <capnp/list.h>\n+#include <ipc/capnp/common-types.h>\n+#include <ipc/capnp/common.capnp.h>\n+#include <ipc/capnp/common.capnp.proxy-types.h>\n+#include <ipc/capnp/common.h>\n+#include <ipc/capnp/context.h>\n+#include <mp/proxy-io.h>\n+#include <mp/proxy-types.h>\n+#include <mp/util.h>\n+#include <sync.h>\n+#include <univalue.h>\n+#include <util/settings.h>\n+#include <util/system.h>\n+\n+#include <functional>\n+#include <map>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace mp {\n+void CustomBuildMessage(InvokeContext& invoke_context, const UniValue& univalue,\n+                        ipc::capnp::messages::UniValue::Builder&& builder)\n+{\n+    builder.setType(univalue.getType());\n+    if (univalue.getType() == UniValue::VARR || univalue.getType() == UniValue::VOBJ) {\n+        builder.setValue(univalue.write());\n+    } else {\n+        builder.setValue(univalue.getValStr());\n+    }\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context, const ipc::capnp::messages::UniValue::Reader& reader,\n+                       UniValue& univalue)\n+{\n+    if (reader.getType() == UniValue::VARR || reader.getType() == UniValue::VOBJ) {\n+        if (!univalue.read(ipc::capnp::ToString(reader.getValue()))) {\n+            throw std::runtime_error(\"Could not parse UniValue\");\n+        }\n+    } else {\n+        univalue = UniValue(UniValue::VType(reader.getType()), ipc::capnp::ToString(reader.getValue()));\n+    }\n+}\n+} // namespace mp\n+\n+namespace ipc {\n+namespace capnp {\n+void BuildGlobalArgs(mp::InvokeContext& invoke_context, messages::GlobalArgs::Builder&& builder)\n+{\n+    gArgs.LockSettings([&](const util::Settings& settings) {\n+        mp::BuildField(mp::TypeList<util::Settings>(), invoke_context,\n+                       mp::Make<mp::ValueField>(builder.initSettings()), settings);\n+    });\n+}\n+\n+void ReadGlobalArgs(mp::InvokeContext& invoke_context, const messages::GlobalArgs::Reader& reader)\n+{\n+    gArgs.LockSettings([&](util::Settings& settings) {\n+        mp::ReadField(mp::TypeList<util::Settings>(), invoke_context, mp::Make<mp::ValueField>(reader.getSettings()),\n+                      mp::ReadDestValue(settings));\n+    });\n+    SelectParams(gArgs.GetChainName());\n+}\n+} // namespace capnp\n+} // namespace ipc"
      },
      {
        "sha": "fcb9d886aec8f8fd0e818294517390b55b90b8e5",
        "filename": "src/ipc/capnp/common.h",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eae99d609c7a08fde35e723967d078904ad1cd05/src/ipc/capnp/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eae99d609c7a08fde35e723967d078904ad1cd05/src/ipc/capnp/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/common.h?ref=eae99d609c7a08fde35e723967d078904ad1cd05",
        "patch": "@@ -0,0 +1,29 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_COMMON_H\n+#define BITCOIN_IPC_CAPNP_COMMON_H\n+\n+#include <ipc/capnp/common.capnp.h>\n+#include <util/system.h>\n+\n+#include <string>\n+\n+class RPCTimerInterface;\n+\n+namespace mp {\n+struct InvokeContext;\n+} // namespace mp\n+\n+namespace ipc {\n+namespace capnp {\n+//! GlobalArgs client-side argument handling. Builds message from ::gArgs variable.\n+void BuildGlobalArgs(mp::InvokeContext& invoke_context, messages::GlobalArgs::Builder&& builder);\n+\n+//! GlobalArgs server-side argument handling. Reads message into ::gArgs variable.\n+void ReadGlobalArgs(mp::InvokeContext& invoke_context, const messages::GlobalArgs::Reader& reader);\n+} // namespace capnp\n+} // namespace ipc\n+\n+#endif // BITCOIN_IPC_CAPNP_COMMON_H"
      }
    ]
  },
  {
    "sha": "0a2a04655abf572005b7fefb474f47dce0480d32",
    "node_id": "C_kwDOABII59oAKDBhMmEwNDY1NWFiZjU3MjAwNWI3ZmVmYjQ3NGY0N2RjZTA0ODBkMzI",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-11-29T16:20:20Z"
      },
      "message": "Add capnp wrapper for Handler interface",
      "tree": {
        "sha": "bd7c068832d50245b4a985057c7caa0643b5eaf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd7c068832d50245b4a985057c7caa0643b5eaf3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a2a04655abf572005b7fefb474f47dce0480d32",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a2a04655abf572005b7fefb474f47dce0480d32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a2a04655abf572005b7fefb474f47dce0480d32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a2a04655abf572005b7fefb474f47dce0480d32/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eae99d609c7a08fde35e723967d078904ad1cd05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eae99d609c7a08fde35e723967d078904ad1cd05",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eae99d609c7a08fde35e723967d078904ad1cd05"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "108c998b02fab44ce5cbb3d24aab8b3a7ec778a4",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a2a04655abf572005b7fefb474f47dce0480d32/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a2a04655abf572005b7fefb474f47dce0480d32/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=0a2a04655abf572005b7fefb474f47dce0480d32",
        "patch": "@@ -824,6 +824,7 @@ endif\n libbitcoin_ipc_mpgen_input = \\\n   ipc/capnp/common.capnp \\\n   ipc/capnp/echo.capnp \\\n+  ipc/capnp/handler.capnp \\\n   ipc/capnp/init.capnp\n EXTRA_DIST += $(libbitcoin_ipc_mpgen_input)\n %.capnp:"
      },
      {
        "sha": "3c1fadbac894e88513c1d9347526c9ca4806b98e",
        "filename": "src/ipc/capnp/handler.capnp",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a2a04655abf572005b7fefb474f47dce0480d32/src/ipc/capnp/handler.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a2a04655abf572005b7fefb474f47dce0480d32/src/ipc/capnp/handler.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/handler.capnp?ref=0a2a04655abf572005b7fefb474f47dce0480d32",
        "patch": "@@ -0,0 +1,16 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0xebd8f46e2f369076;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"interfaces/handler.h\");\n+\n+interface Handler $Proxy.wrap(\"interfaces::Handler\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    disconnect @1 (context :Proxy.Context) -> ();\n+}"
      }
    ]
  },
  {
    "sha": "97221fe8696bbb664c7b2e34a9f65f620ba37ff7",
    "node_id": "C_kwDOABII59oAKDk3MjIxZmU4Njk2YmJiNjY0YzdiMmUzNGE5ZjY1ZjYyMGJhMzdmZjc",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-11-29T16:20:20Z"
      },
      "message": "Add capnp wrapper for Chain interface",
      "tree": {
        "sha": "07912a0d978e2eb79143a1b2454a85cb1643742c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07912a0d978e2eb79143a1b2454a85cb1643742c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97221fe8696bbb664c7b2e34a9f65f620ba37ff7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97221fe8696bbb664c7b2e34a9f65f620ba37ff7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97221fe8696bbb664c7b2e34a9f65f620ba37ff7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97221fe8696bbb664c7b2e34a9f65f620ba37ff7/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a2a04655abf572005b7fefb474f47dce0480d32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a2a04655abf572005b7fefb474f47dce0480d32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a2a04655abf572005b7fefb474f47dce0480d32"
      }
    ],
    "stats": {
      "total": 386,
      "additions": 385,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f456dd616bc8e9093a85d8a01a1359eeb77ef82d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97221fe8696bbb664c7b2e34a9f65f620ba37ff7/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97221fe8696bbb664c7b2e34a9f65f620ba37ff7/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=97221fe8696bbb664c7b2e34a9f65f620ba37ff7",
        "patch": "@@ -308,6 +308,7 @@ obj/build.h: FORCE\n libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h\n \n ipc/capnp/libbitcoin_ipc_a-ipc.$(OBJEXT): $(libbitcoin_ipc_mpgen_input:=.h)\n+ipc/capnp/libbitcoin_ipc_a-chain.$(OBJEXT): $(libbitcoin_ipc_mpgen_input:=.h)\n \n # server: shared between bitcoind and bitcoin-qt\n # Contains code accessing mempool and chain state that is meant to be separated\n@@ -822,6 +823,7 @@ if HARDEN\n endif\n \n libbitcoin_ipc_mpgen_input = \\\n+  ipc/capnp/chain.capnp \\\n   ipc/capnp/common.capnp \\\n   ipc/capnp/echo.capnp \\\n   ipc/capnp/handler.capnp \\\n@@ -832,6 +834,8 @@ EXTRA_DIST += $(libbitcoin_ipc_mpgen_input)\n if BUILD_MULTIPROCESS\n LIBBITCOIN_IPC=libbitcoin_ipc.a\n libbitcoin_ipc_a_SOURCES = \\\n+  ipc/capnp/chain-types.h \\\n+  ipc/capnp/chain.cpp \\\n   ipc/capnp/common-types.h \\\n   ipc/capnp/common.cpp \\\n   ipc/capnp/common.h \\"
      },
      {
        "sha": "ecd18b197959359dace819c30cb1c31b8697a427",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97221fe8696bbb664c7b2e34a9f65f620ba37ff7/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97221fe8696bbb664c7b2e34a9f65f620ba37ff7/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=97221fe8696bbb664c7b2e34a9f65f620ba37ff7",
        "patch": "@@ -305,7 +305,8 @@ class ChainClient\n     //! Load saved state.\n     virtual bool load() = 0;\n \n-    //! Start client execution and provide a scheduler.\n+    //! Start client execution and provide a scheduler. (Scheduler is\n+    //! ignored if client is out-of-process).\n     virtual void start(CScheduler& scheduler) = 0;\n \n     //! Save state to disk."
      },
      {
        "sha": "ce71c6798d7ddf7f0879aae3d31a1b24d4573255",
        "filename": "src/ipc/capnp/chain-types.h",
        "status": "added",
        "additions": 73,
        "deletions": 0,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97221fe8696bbb664c7b2e34a9f65f620ba37ff7/src/ipc/capnp/chain-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97221fe8696bbb664c7b2e34a9f65f620ba37ff7/src/ipc/capnp/chain-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/chain-types.h?ref=97221fe8696bbb664c7b2e34a9f65f620ba37ff7",
        "patch": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_CHAIN_TYPES_H\n+#define BITCOIN_IPC_CAPNP_CHAIN_TYPES_H\n+\n+#include <ipc/capnp/chain.capnp.proxy.h>\n+#include <ipc/capnp/common.capnp.proxy-types.h>\n+#include <ipc/capnp/handler.capnp.proxy-types.h>\n+#include <rpc/server.h>\n+\n+#include <any>\n+\n+//! Specialization of handleRpc needed because it takes a CRPCCommand& reference\n+//! argument, so a manual cleanup callback is needed to free the passed\n+//! CRPCCommand struct and proxy ActorCallback object.\n+template <>\n+struct mp::ProxyServerMethodTraits<ipc::capnp::messages::Chain::HandleRpcParams>\n+{\n+    using Context = ServerContext<ipc::capnp::messages::Chain,\n+                                  ipc::capnp::messages::Chain::HandleRpcParams,\n+                                  ipc::capnp::messages::Chain::HandleRpcResults>;\n+    static ::capnp::Void invoke(Context& context);\n+};\n+\n+//! Specialization of start method needed to provide CScheduler& reference\n+//! argument.\n+template <>\n+struct mp::ProxyServerMethodTraits<ipc::capnp::messages::ChainClient::StartParams>\n+{\n+    using ChainContext = ServerContext<ipc::capnp::messages::ChainClient,\n+                                       ipc::capnp::messages::ChainClient::StartParams,\n+                                       ipc::capnp::messages::ChainClient::StartResults>;\n+    static void invoke(ChainContext& context);\n+};\n+\n+namespace mp {\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const interfaces::FoundBlock& dest,\n+                        ipc::capnp::messages::FoundBlockParam::Builder&& builder);\n+void CustomPassMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::FoundBlockParam::Reader& reader,\n+                       ipc::capnp::messages::FoundBlockResult::Builder&& builder,\n+                       std::function<void(const interfaces::FoundBlock&)>&& fn);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::FoundBlockResult::Reader& reader,\n+                       const interfaces::FoundBlock& dest);\n+\n+\n+//! CScheduler& server-side argument handling. Skips argument so it can\n+//! be handled by ProxyServerCustom code.\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+void CustomPassField(TypeList<CScheduler&>, ServerContext& server_context, const Fn& fn, Args&&... args)\n+{\n+    fn.invoke(server_context, std::forward<Args>(args)...);\n+}\n+\n+//! CRPCCommand& server-side argument handling. Skips argument so it can\n+//! be handled by ProxyServerCustom code.\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+void CustomPassField(TypeList<const CRPCCommand&>, ServerContext& server_context, const Fn& fn, Args&&... args)\n+{\n+    fn.invoke(server_context, std::forward<Args>(args)...);\n+}\n+\n+//! Override to avoid assert failures that would happen trying to serialize\n+//! spent coins. Probably it would be best for Coin serialization code not\n+//! to assert, but avoiding serialization in this case is harmless.\n+bool CustomHasValue(InvokeContext& invoke_context, const Coin& coin);\n+} // namespace mp\n+\n+#endif // BITCOIN_IPC_CAPNP_CHAIN_TYPES_H"
      },
      {
        "sha": "83545bbb0cf2be9bd6e5fd6c32b8afbf3c70df51",
        "filename": "src/ipc/capnp/chain.capnp",
        "status": "added",
        "additions": 162,
        "deletions": 0,
        "changes": 162,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97221fe8696bbb664c7b2e34a9f65f620ba37ff7/src/ipc/capnp/chain.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97221fe8696bbb664c7b2e34a9f65f620ba37ff7/src/ipc/capnp/chain.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/chain.capnp?ref=97221fe8696bbb664c7b2e34a9f65f620ba37ff7",
        "patch": "@@ -0,0 +1,162 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0x94f21a4864bd2c65;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"interfaces/chain.h\");\n+$Proxy.include(\"rpc/server.h\");\n+$Proxy.includeTypes(\"ipc/capnp/chain-types.h\");\n+\n+using Common = import \"common.capnp\";\n+using Handler = import \"handler.capnp\";\n+\n+interface Chain $Proxy.wrap(\"interfaces::Chain\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    getHeight @1 (context :Proxy.Context) -> (result :Int32, hasResult :Bool);\n+    getBlockHash @2 (context :Proxy.Context, height :Int32) -> (result :Data);\n+    haveBlockOnDisk @3 (context :Proxy.Context, height :Int32) -> (result :Bool);\n+    getTipLocator @4 (context :Proxy.Context) -> (result :Data);\n+    findLocatorFork @5 (context :Proxy.Context, locator :Data) -> (result :Int32, hasResult :Bool);\n+    checkFinalTx @6 (context :Proxy.Context, tx :Data) -> (result :Bool);\n+    findBlock @7 (context :Proxy.Context, hash :Data, block :FoundBlockParam) -> (block :FoundBlockResult, result :Bool);\n+    findFirstBlockWithTimeAndHeight @8 (context :Proxy.Context, minTime :Int64, minHeight :Int32, block :FoundBlockParam) -> (block :FoundBlockResult, result :Bool);\n+    findAncestorByHeight @9 (context :Proxy.Context, blockHash :Data, ancestorHeight :Int32, ancestor :FoundBlockParam) -> (ancestor :FoundBlockResult, result :Bool);\n+    findAncestorByHash @10 (context :Proxy.Context, blockHash :Data, ancestorHash :Data, ancestor :FoundBlockParam) -> (ancestor :FoundBlockResult, result :Bool);\n+    findCommonAncestor @11 (context :Proxy.Context, blockHash1 :Data, blockHash2 :Data, ancestor :FoundBlockParam, block1 :FoundBlockParam, block2 :FoundBlockParam) -> (ancestor :FoundBlockResult, block1 :FoundBlockResult, block2 :FoundBlockResult, result :Bool);\n+    findCoins @12 (context :Proxy.Context, coins :List(Common.Pair(Data, Data))) -> (coins :List(Common.Pair(Data, Data)));\n+    guessVerificationProgress @13 (context :Proxy.Context, blockHash :Data) -> (result :Float64);\n+    hasBlocks @14 (context :Proxy.Context, blockHash :Data, minHeight :Int32, maxHeight: Int32, hasMaxHeight :Bool) -> (result :Bool);\n+    isRBFOptIn @15 (context :Proxy.Context, tx :Data) -> (result :Int32);\n+    isInMempool @16 (context :Proxy.Context, tx :Data) -> (result :Bool);\n+    hasDescendantsInMempool @17 (context :Proxy.Context, txid :Data) -> (result :Bool);\n+    broadcastTransaction @18 (context :Proxy.Context, tx: Data, maxTxFee :Int64, relay :Bool) -> (error: Text, result :Bool);\n+    getTransactionAncestry @19 (context :Proxy.Context, txid :Data) -> (ancestors :UInt64, descendants :UInt64, ancestorsize :UInt64, ancestorfees :Int64);\n+    getPackageLimits @20 (context :Proxy.Context) -> (ancestors :UInt64, descendants :UInt64);\n+    checkChainLimits @21 (context :Proxy.Context, tx :Data) -> (result :Bool);\n+    estimateSmartFee @22 (context :Proxy.Context, numBlocks :Int32, conservative :Bool, wantCalc :Bool) -> (calc :FeeCalculation, result :Data);\n+    estimateMaxBlocks @23 (context :Proxy.Context) -> (result :UInt32);\n+    mempoolMinFee @24 (context :Proxy.Context) -> (result :Data);\n+    relayMinFee @25 (context :Proxy.Context) -> (result :Data);\n+    relayIncrementalFee @26 (context :Proxy.Context) -> (result :Data);\n+    relayDustFee @27 (context :Proxy.Context) -> (result :Data);\n+    havePruned @28 (context :Proxy.Context) -> (result :Bool);\n+    isReadyToBroadcast @29 (context :Proxy.Context) -> (result :Bool);\n+    isInitialBlockDownload @30 (context :Proxy.Context) -> (result :Bool);\n+    shutdownRequested @31 (context :Proxy.Context) -> (result :Bool);\n+    getAdjustedTime @32 (context :Proxy.Context) -> (result :Int64);\n+    initMessage @33 (context :Proxy.Context, message :Text) -> ();\n+    initWarning @34 (context :Proxy.Context, message :Common.BilingualStr) -> ();\n+    initError @35 (context :Proxy.Context, message :Common.BilingualStr) -> ();\n+    showProgress @36 (context :Proxy.Context, title :Text, progress :Int32, resumePossible :Bool) -> ();\n+    handleNotifications @37 (context :Proxy.Context, notifications :ChainNotifications) -> (result :Handler.Handler);\n+    waitForNotificationsIfTipChanged @38 (context :Proxy.Context, oldTip :Data) -> ();\n+    handleRpc @39 (context :Proxy.Context, command :RPCCommand) -> (result :Handler.Handler);\n+    rpcEnableDeprecated @40 (context :Proxy.Context, method :Text) -> (result :Bool);\n+    rpcRunLater @41 (context :Proxy.Context, name :Text, fn: RunLaterCallback, seconds: Int64) -> ();\n+    rpcSerializationFlags @42 (context :Proxy.Context) -> (result :Int32);\n+    getSetting @43 (context :Proxy.Context, name :Text) -> (result :Common.UniValue);\n+    getSettingsList @44 (context :Proxy.Context, name :Text) -> (result :List(Common.UniValue));\n+    getRwSetting @45 (context :Proxy.Context, name :Text) -> (result :Common.UniValue);\n+    updateRwSetting @46 (context :Proxy.Context, name :Text, value :Common.UniValue, write :Bool) -> (result :Bool);\n+    requestMempoolTransactions @47 (context :Proxy.Context, notifications :ChainNotifications) -> ();\n+}\n+\n+interface ChainNotifications $Proxy.wrap(\"interfaces::Chain::Notifications\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    transactionAddedToMempool @1 (context :Proxy.Context, tx :Data, mempoolSequence :UInt64) -> ();\n+    transactionRemovedFromMempool @2 (context :Proxy.Context, tx :Data, reason :Int32, mempoolSequence :UInt64) -> ();\n+    blockConnected @3 (context :Proxy.Context, block :Data, height :Int32) -> ();\n+    blockDisconnected @4 (context :Proxy.Context, block :Data, height :Int32) -> ();\n+    updatedBlockTip @5 (context :Proxy.Context) -> ();\n+    chainStateFlushed @6 (context :Proxy.Context, locator :Data) -> ();\n+}\n+\n+interface ChainClient $Proxy.wrap(\"interfaces::ChainClient\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    registerRpcs @1 (context :Proxy.Context) -> ();\n+    verify @2 (context :Proxy.Context) -> (result :Bool);\n+    load @3 (context :Proxy.Context) -> (result :Bool);\n+    start @4 (context :Proxy.Context, scheduler :Void) -> ();\n+    flush @5 (context :Proxy.Context) -> ();\n+    stop @6 (context :Proxy.Context) -> ();\n+    setMockTime @7 (context :Proxy.Context, time :Int64) -> ();\n+}\n+\n+struct FeeCalculation $Proxy.wrap(\"FeeCalculation\") {\n+    est @0 :EstimationResult;\n+    reason @1 :Int32;\n+    desiredTarget @2 :Int32;\n+    returnedTarget @3 :Int32;\n+}\n+\n+struct EstimationResult $Proxy.wrap(\"EstimationResult\")\n+{\n+    pass @0 :EstimatorBucket;\n+    fail @1 :EstimatorBucket;\n+    decay @2 :Float64;\n+    scale @3 :UInt32;\n+}\n+\n+struct EstimatorBucket $Proxy.wrap(\"EstimatorBucket\")\n+{\n+    start @0 :Float64;\n+    end @1 :Float64;\n+    withinTarget @2 :Float64;\n+    totalConfirmed @3 :Float64;\n+    inMempool @4 :Float64;\n+    leftMempool @5 :Float64;\n+}\n+\n+struct RPCCommand $Proxy.wrap(\"CRPCCommand\") {\n+   category @0 :Text;\n+   name @1 :Text;\n+   actor @2 :ActorCallback;\n+   argNames @3 :List(Text);\n+   uniqueId @4 :Int64 $Proxy.name(\"unique_id\");\n+}\n+\n+interface ActorCallback $Proxy.wrap(\"ProxyCallback<CRPCCommand::Actor>\") {\n+    call @0 (context :Proxy.Context, request :JSONRPCRequest, response :Common.UniValue, lastCallback :Bool) -> (error :Text $Proxy.exception(\"std::exception\"), rpcError :Common.UniValue $Proxy.exception(\"UniValue\"), response :Common.UniValue, result: Bool);\n+}\n+\n+struct JSONRPCRequest $Proxy.wrap(\"JSONRPCRequest\") {\n+    id @0 :Common.UniValue;\n+    method @1 :Text $Proxy.name(\"strMethod\");\n+    params @2 :Common.UniValue;\n+    mode @3 :Int32;\n+    uri @4 :Text $Proxy.name(\"URI\");\n+    authUser @5 :Text;\n+}\n+\n+interface RunLaterCallback $Proxy.wrap(\"ProxyCallback<std::function<void()>>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+struct FoundBlockParam {\n+    wantHash @0 :Bool;\n+    wantHeight @1 :Bool;\n+    wantTime @2 :Bool;\n+    wantMaxTime @3 :Bool;\n+    wantMtpTime @4 :Bool;\n+    wantInActiveChain @5 :Bool;\n+    nextBlock @6: FoundBlockParam;\n+    wantData @7 :Bool;\n+}\n+\n+struct FoundBlockResult {\n+    hash @0 :Data;\n+    height @1 :Int32;\n+    time @2 :Int64;\n+    maxTime @3 :Int64;\n+    mtpTime @4 :Int64;\n+    inActiveChain @5 :Int64;\n+    nextBlock @6: FoundBlockResult;\n+    data @7 :Data;\n+    found @8 :Bool;\n+}"
      },
      {
        "sha": "a5d36d597708e09fc2c2b6b6ffb13fde4a8946e0",
        "filename": "src/ipc/capnp/chain.cpp",
        "status": "added",
        "additions": 144,
        "deletions": 0,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97221fe8696bbb664c7b2e34a9f65f620ba37ff7/src/ipc/capnp/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97221fe8696bbb664c7b2e34a9f65f620ba37ff7/src/ipc/capnp/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/chain.cpp?ref=97221fe8696bbb664c7b2e34a9f65f620ba37ff7",
        "patch": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <capnp/blob.h>\n+#include <capnp/capability.h>\n+#include <capnp/list.h>\n+#include <coins.h>\n+#include <interfaces/chain.h>\n+#include <interfaces/handler.h>\n+#include <interfaces/ipc.h>\n+#include <ipc/capnp/chain-types.h>\n+#include <ipc/capnp/chain.capnp.h>\n+#include <ipc/capnp/chain.capnp.proxy.h>\n+#include <ipc/capnp/common-types.h>\n+#include <ipc/capnp/context.h>\n+#include <ipc/capnp/handler.capnp.proxy.h>\n+#include <mp/proxy-io.h>\n+#include <mp/proxy-types.h>\n+#include <mp/util.h>\n+#include <primitives/block.h>\n+#include <rpc/server.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <functional>\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+namespace mp {\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const interfaces::FoundBlock& dest,\n+                        ipc::capnp::messages::FoundBlockParam::Builder&& builder)\n+{\n+    if (dest.m_hash) builder.setWantHash(true);\n+    if (dest.m_height) builder.setWantHeight(true);\n+    if (dest.m_time) builder.setWantTime(true);\n+    if (dest.m_max_time) builder.setWantMaxTime(true);\n+    if (dest.m_mtp_time) builder.setWantMtpTime(true);\n+    if (dest.m_in_active_chain) builder.setWantInActiveChain(true);\n+    if (dest.m_next_block) CustomBuildMessage(invoke_context, *dest.m_next_block, builder.initNextBlock());\n+    if (dest.m_data) builder.setWantData(true);\n+}\n+\n+void FindBlock(const std::function<void()>& find,\n+               const ipc::capnp::messages::FoundBlockParam::Reader& reader,\n+               ipc::capnp::messages::FoundBlockResult::Builder&& builder,\n+               interfaces::FoundBlock& found_block)\n+{\n+    uint256 hash;\n+    int height = -1;\n+    int64_t time = -1;\n+    int64_t max_time = -1;\n+    int64_t mtp_time = -1;\n+    bool in_active_chain = -1;\n+    CBlock data;\n+    if (reader.getWantHash()) found_block.hash(hash);\n+    if (reader.getWantHeight()) found_block.height(height);\n+    if (reader.getWantTime()) found_block.time(time);\n+    if (reader.getWantMaxTime()) found_block.maxTime(max_time);\n+    if (reader.getWantMtpTime()) found_block.mtpTime(mtp_time);\n+    if (reader.getWantInActiveChain()) found_block.inActiveChain(in_active_chain);\n+    if (reader.getWantData()) found_block.data(data);\n+    if (reader.hasNextBlock()) {\n+        interfaces::FoundBlock next_block;\n+        found_block.nextBlock(next_block);\n+        FindBlock(find, reader.getNextBlock(), builder.initNextBlock(), next_block);\n+    } else {\n+        find();\n+    }\n+    if (!found_block.found) return;\n+    if (reader.getWantHash()) builder.setHash(ipc::capnp::ToArray(ipc::capnp::Serialize(hash)));\n+    if (reader.getWantHeight()) builder.setHeight(height);\n+    if (reader.getWantTime()) builder.setTime(time);\n+    if (reader.getWantMaxTime()) builder.setMaxTime(max_time);\n+    if (reader.getWantMtpTime()) builder.setMtpTime(mtp_time);\n+    if (reader.getWantInActiveChain()) builder.setInActiveChain(in_active_chain);\n+    if (reader.getWantData()) builder.setData(ipc::capnp::ToArray(ipc::capnp::Serialize(data)));\n+    builder.setFound(true);\n+}\n+\n+void CustomPassMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::FoundBlockParam::Reader& reader,\n+                       ipc::capnp::messages::FoundBlockResult::Builder&& builder,\n+                       std::function<void(const interfaces::FoundBlock&)>&& fn)\n+{\n+    interfaces::FoundBlock found_block;\n+    FindBlock([&] { fn(found_block); }, reader, std::move(builder), found_block);\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::FoundBlockResult::Reader& reader,\n+                       const interfaces::FoundBlock& dest)\n+{\n+    if (!reader.getFound()) return;\n+    if (dest.m_hash) *dest.m_hash = ipc::capnp::Unserialize<uint256>(reader.getHash());\n+    if (dest.m_height) *dest.m_height = reader.getHeight();\n+    if (dest.m_time) *dest.m_time = reader.getTime();\n+    if (dest.m_max_time) *dest.m_max_time = reader.getMaxTime();\n+    if (dest.m_mtp_time) *dest.m_mtp_time = reader.getMtpTime();\n+    if (dest.m_in_active_chain) *dest.m_in_active_chain = reader.getInActiveChain();\n+    if (dest.m_next_block) CustomReadMessage(invoke_context, reader.getNextBlock(), *dest.m_next_block);\n+    if (dest.m_data) *dest.m_data = ipc::capnp::Unserialize<CBlock>(reader.getData());\n+}\n+\n+::capnp::Void ProxyServerMethodTraits<ipc::capnp::messages::Chain::HandleRpcParams>::invoke(\n+    Context& context)\n+{\n+    auto params = context.call_context.getParams();\n+    auto command = params.getCommand();\n+\n+    CRPCCommand::Actor actor;\n+    ReadField(TypeList<decltype(actor)>(), context, Make<ValueField>(command.getActor()), ReadDestValue(actor));\n+    std::vector<std::string> args;\n+    ReadField(TypeList<decltype(args)>(), context, Make<ValueField>(command.getArgNames()), ReadDestValue(args));\n+\n+    auto rpc_command = std::make_unique<CRPCCommand>(command.getCategory(), command.getName(), std::move(actor),\n+                                               std::move(args), command.getUniqueId());\n+    auto handler = context.proxy_server.m_impl->handleRpc(*rpc_command);\n+    auto results = context.call_context.getResults();\n+    auto result = kj::heap<ProxyServer<ipc::capnp::messages::Handler>>(std::shared_ptr<interfaces::Handler>(handler.release()), *context.proxy_server.m_context.connection);\n+    result->m_context.cleanup.emplace_back([rpc_command = rpc_command.release()] { delete rpc_command; });\n+    results.setResult(kj::mv(result));\n+    return {};\n+}\n+\n+void ProxyServerMethodTraits<ipc::capnp::messages::ChainClient::StartParams>::invoke(ChainContext& context)\n+{\n+    // This method is never called because ChainClient::Start is overridden by\n+    // WalletClient::Start. The custom implementation is needed just because\n+    // the CScheduler& argument this is supposed to pass is not serializable.\n+    assert(0);\n+}\n+\n+bool CustomHasValue(InvokeContext& invoke_context, const Coin& coin)\n+{\n+    // Spent coins cannot be serialized due to an assert in Coin::Serialize.\n+    return !coin.IsSpent();\n+}\n+} // namespace mp"
      }
    ]
  },
  {
    "sha": "73aab3dc4414016f1db2e464b0395d50df23055b",
    "node_id": "C_kwDOABII59oAKDczYWFiM2RjNDQxNDAxNmYxZGIyZTQ2NGIwMzk1ZDUwZGYyMzA1NWI",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-11-29T16:20:20Z"
      },
      "message": "Add capnp wrapper for Wallet interface",
      "tree": {
        "sha": "0997575b7f72730390018defca6b66f5d5603485",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0997575b7f72730390018defca6b66f5d5603485"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73aab3dc4414016f1db2e464b0395d50df23055b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73aab3dc4414016f1db2e464b0395d50df23055b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73aab3dc4414016f1db2e464b0395d50df23055b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73aab3dc4414016f1db2e464b0395d50df23055b/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97221fe8696bbb664c7b2e34a9f65f620ba37ff7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97221fe8696bbb664c7b2e34a9f65f620ba37ff7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97221fe8696bbb664c7b2e34a9f65f620ba37ff7"
      }
    ],
    "stats": {
      "total": 505,
      "additions": 504,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3ab1c938d18ed8ee0331cd828f1e48a4c1746937",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73aab3dc4414016f1db2e464b0395d50df23055b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73aab3dc4414016f1db2e464b0395d50df23055b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=73aab3dc4414016f1db2e464b0395d50df23055b",
        "patch": "@@ -827,7 +827,8 @@ libbitcoin_ipc_mpgen_input = \\\n   ipc/capnp/common.capnp \\\n   ipc/capnp/echo.capnp \\\n   ipc/capnp/handler.capnp \\\n-  ipc/capnp/init.capnp\n+  ipc/capnp/init.capnp \\\n+  ipc/capnp/wallet.capnp\n EXTRA_DIST += $(libbitcoin_ipc_mpgen_input)\n %.capnp:\n \n@@ -843,6 +844,9 @@ libbitcoin_ipc_a_SOURCES = \\\n   ipc/capnp/init-types.h \\\n   ipc/capnp/protocol.cpp \\\n   ipc/capnp/protocol.h \\\n+  ipc/capnp/wallet-types.h \\\n+  ipc/capnp/wallet.cpp \\\n+  ipc/capnp/wallet.h \\\n   ipc/context.h \\\n   ipc/exception.h \\\n   ipc/interfaces.cpp \\"
      },
      {
        "sha": "92ad8461a492bb40d2670d14d0ac217e5173cc17",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73aab3dc4414016f1db2e464b0395d50df23055b/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73aab3dc4414016f1db2e464b0395d50df23055b/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=73aab3dc4414016f1db2e464b0395d50df23055b",
        "patch": "@@ -346,6 +346,8 @@ struct WalletAddress\n     std::string name;\n     std::string purpose;\n \n+    WalletAddress() = default;\n+\n     WalletAddress(CTxDestination dest, isminetype is_mine, std::string name, std::string purpose)\n         : dest(std::move(dest)), is_mine(is_mine), name(std::move(name)), purpose(std::move(purpose))\n     {"
      },
      {
        "sha": "75a467230b7c02efe18392a450fef2b89ae0240f",
        "filename": "src/ipc/capnp/chain-types.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73aab3dc4414016f1db2e464b0395d50df23055b/src/ipc/capnp/chain-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73aab3dc4414016f1db2e464b0395d50df23055b/src/ipc/capnp/chain-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/chain-types.h?ref=73aab3dc4414016f1db2e464b0395d50df23055b",
        "patch": "@@ -8,6 +8,7 @@\n #include <ipc/capnp/chain.capnp.proxy.h>\n #include <ipc/capnp/common.capnp.proxy-types.h>\n #include <ipc/capnp/handler.capnp.proxy-types.h>\n+#include <ipc/capnp/wallet.capnp.proxy.h>\n #include <rpc/server.h>\n \n #include <any>\n@@ -33,6 +34,10 @@ struct mp::ProxyServerMethodTraits<ipc::capnp::messages::ChainClient::StartParam\n                                        ipc::capnp::messages::ChainClient::StartParams,\n                                        ipc::capnp::messages::ChainClient::StartResults>;\n     static void invoke(ChainContext& context);\n+    using WalletContext = ServerContext<ipc::capnp::messages::WalletClient,\n+                                        ipc::capnp::messages::ChainClient::StartParams,\n+                                        ipc::capnp::messages::ChainClient::StartResults>;\n+    static void invoke(WalletContext& context);\n };\n \n namespace mp {"
      },
      {
        "sha": "25026e0d66bc4c1ae7daa13dd989aeeaee3de9ec",
        "filename": "src/ipc/capnp/wallet-types.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73aab3dc4414016f1db2e464b0395d50df23055b/src/ipc/capnp/wallet-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73aab3dc4414016f1db2e464b0395d50df23055b/src/ipc/capnp/wallet-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/wallet-types.h?ref=73aab3dc4414016f1db2e464b0395d50df23055b",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_WALLET_TYPES_H\n+#define BITCOIN_IPC_CAPNP_WALLET_TYPES_H\n+\n+#include <ipc/capnp/chain.capnp.proxy-types.h>\n+#include <ipc/capnp/common.capnp.proxy-types.h>\n+#include <ipc/capnp/wallet.capnp.proxy.h>\n+#include <scheduler.h>\n+#include <wallet/wallet.h>\n+\n+class CCoinControl;\n+class CKey;\n+\n+namespace mp {\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const CTxDestination& dest,\n+                        ipc::capnp::messages::TxDestination::Builder&& builder);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::TxDestination::Reader& reader,\n+                       CTxDestination& dest);\n+void CustomBuildMessage(InvokeContext& invoke_context, const CKey& key, ipc::capnp::messages::Key::Builder&& builder);\n+void CustomReadMessage(InvokeContext& invoke_context, const ipc::capnp::messages::Key::Reader& reader, CKey& key);\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const CCoinControl& coin_control,\n+                        ipc::capnp::messages::CoinControl::Builder&& builder);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::CoinControl::Reader& reader,\n+                       CCoinControl& coin_control);\n+\n+template <typename Reader, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<PKHash>, Priority<1>, InvokeContext& invoke_context, Reader&& reader, ReadDest&& read_dest)\n+{\n+    return read_dest.construct(ipc::capnp::ToBlob<uint160>(reader.get()));\n+}\n+} // namespace mp\n+\n+#endif // BITCOIN_IPC_CAPNP_WALLET_TYPES_H"
      },
      {
        "sha": "0b7d2e0a13992a7d605ce3c259b3ce3ea6f70fe2",
        "filename": "src/ipc/capnp/wallet.capnp",
        "status": "added",
        "additions": 231,
        "deletions": 0,
        "changes": 231,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73aab3dc4414016f1db2e464b0395d50df23055b/src/ipc/capnp/wallet.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73aab3dc4414016f1db2e464b0395d50df23055b/src/ipc/capnp/wallet.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/wallet.capnp?ref=73aab3dc4414016f1db2e464b0395d50df23055b",
        "patch": "@@ -0,0 +1,231 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0xe234cce74feea00c;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"ipc/capnp/wallet.h\");\n+$Proxy.includeTypes(\"ipc/capnp/wallet-types.h\");\n+\n+using Chain = import \"chain.capnp\";\n+using Common = import \"common.capnp\";\n+using Handler = import \"handler.capnp\";\n+\n+interface Wallet $Proxy.wrap(\"interfaces::Wallet\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    encryptWallet @1 (context :Proxy.Context, walletPassphrase :Data) -> (result :Bool);\n+    isCrypted @2 (context :Proxy.Context) -> (result :Bool);\n+    lock @3 (context :Proxy.Context) -> (result :Bool);\n+    unlock @4 (context :Proxy.Context, walletPassphrase :Data) -> (result :Bool);\n+    isLocked @5 (context :Proxy.Context) -> (result :Bool);\n+    changeWalletPassphrase @6 (context :Proxy.Context, oldWalletPassphrase :Data, newWalletPassphrase :Data) -> (result :Bool);\n+    abortRescan @7 (context :Proxy.Context) -> ();\n+    backupWallet @8 (context :Proxy.Context, filename :Text) -> (result :Bool);\n+    getWalletName @9 (context :Proxy.Context) -> (result :Text);\n+    getNewDestination @10 (context :Proxy.Context, outputType :Int32, label :Text) -> (dest :TxDestination, result :Bool);\n+    getPubKey @11 (context :Proxy.Context, script :Data, address :Data) -> (pubKey :Data, result :Bool);\n+    signMessage @12 (context :Proxy.Context, message :Text, pkhash :Data) -> (signature :Text, result :Int32);\n+    isSpendable @13 (context :Proxy.Context, dest :TxDestination) -> (result :Bool);\n+    haveWatchOnly @14 (context :Proxy.Context) -> (result :Bool);\n+    setAddressBook @15 (context :Proxy.Context, dest :TxDestination, name :Text, purpose :Text) -> (result :Bool);\n+    delAddressBook @16 (context :Proxy.Context, dest :TxDestination) -> (result :Bool);\n+    getAddress @17 (context :Proxy.Context, dest :TxDestination, wantName :Bool, wantIsMine :Bool, wantPurpose :Bool) -> (name :Text, isMine :Int32, purpose :Text, result :Bool);\n+    getAddresses @18 (context :Proxy.Context) -> (result :List(WalletAddress));\n+    getAddressReceiveRequests @19 (context :Proxy.Context) -> (result :List(Data));\n+    setAddressReceiveRequest @20 (context :Proxy.Context, dest :TxDestination, id :Data, value :Data) -> (result :Bool);\n+    displayAddress @21 (context :Proxy.Context, dest :TxDestination) -> (result :Bool);\n+    lockCoin @22 (context :Proxy.Context, output :Data, writeToDb :Bool) -> (result :Bool);\n+    unlockCoin @23 (context :Proxy.Context, output :Data) -> (result :Bool);\n+    isLockedCoin @24 (context :Proxy.Context, output :Data) -> (result :Bool);\n+    listLockedCoins @25 (context :Proxy.Context) -> (outputs :List(Data));\n+    createTransaction @26 (context :Proxy.Context, recipients :List(Recipient), coinControl :CoinControl, sign :Bool, changePos :Int32) -> (changePos :Int32, fee :Int64, failReason :Common.BilingualStr, result :Data);\n+    commitTransaction @27 (context :Proxy.Context, tx :Data, valueMap :List(Common.Pair(Text, Text)), orderForm :List(Common.Pair(Text, Text))) -> ();\n+    transactionCanBeAbandoned @28 (context :Proxy.Context, txid :Data) -> (result :Bool);\n+    abandonTransaction @29 (context :Proxy.Context, txid :Data) -> (result :Bool);\n+    transactionCanBeBumped @30 (context :Proxy.Context, txid :Data) -> (result :Bool);\n+    createBumpTransaction @31 (context :Proxy.Context, txid :Data, coinControl :CoinControl) -> (errors :List(Common.BilingualStr), oldFee :Int64, newFee :Int64, mtx :Data, result :Bool);\n+    signBumpTransaction @32 (context :Proxy.Context, mtx :Data) -> (mtx :Data, result :Bool);\n+    commitBumpTransaction @33 (context :Proxy.Context, txid :Data, mtx :Data) -> (errors :List(Common.BilingualStr), bumpedTxid :Data, result :Bool);\n+    getTx @34 (context :Proxy.Context, txid :Data) -> (result :Data);\n+    getWalletTx @35 (context :Proxy.Context, txid :Data) -> (result :WalletTx);\n+    getWalletTxs @36 (context :Proxy.Context) -> (result :List(WalletTx));\n+    tryGetTxStatus @37 (context :Proxy.Context, txid :Data) -> (txStatus :WalletTxStatus, numBlocks :Int32, blockTime :Int64, result :Bool);\n+    getWalletTxDetails @38 (context :Proxy.Context, txid :Data) -> (txStatus :WalletTxStatus, orderForm :List(Common.Pair(Text, Text)), inMempool :Bool, numBlocks :Int32, result :WalletTx);\n+    getBalances @39 (context :Proxy.Context) -> (result :WalletBalances);\n+    fillPSBT @40 (context :Proxy.Context, sighashType :Int32, sign :Bool, bip32derivs :Bool, wantNSigned :Bool) -> (nSigned: UInt64, psbt :Data, complete :Bool, result :Int32);\n+    tryGetBalances @41 (context :Proxy.Context) -> (balances :WalletBalances, blockHash :Data, result :Bool);\n+    getBalance @42 (context :Proxy.Context) -> (result :Int64);\n+    getAvailableBalance @43 (context :Proxy.Context, coinControl :CoinControl) -> (result :Int64);\n+    txinIsMine @44 (context :Proxy.Context, txin :Data) -> (result :Int32);\n+    txoutIsMine @45 (context :Proxy.Context, txout :Data) -> (result :Int32);\n+    getDebit @46 (context :Proxy.Context, txin :Data, filter :UInt32) -> (result :Int64);\n+    getCredit @47 (context :Proxy.Context, txout :Data, filter :UInt32) -> (result :Int64);\n+    listCoins @48 (context :Proxy.Context) -> (result :List(Common.Pair(TxDestination, List(Common.Pair(Data, WalletTxOut)))));\n+    getCoins @49 (context :Proxy.Context, outputs :List(Data)) -> (result :List(WalletTxOut));\n+    getRequiredFee @50 (context :Proxy.Context, txBytes :UInt32) -> (result :Int64);\n+    getMinimumFee @51 (context :Proxy.Context, txBytes :UInt32, coinControl :CoinControl, wantReturnedTarget :Bool, wantReason :Bool) -> (returnedTarget :Int32, reason :Int32, result :Int64);\n+    getConfirmTarget @52 (context :Proxy.Context) -> (result :UInt32);\n+    hdEnabled @53 (context :Proxy.Context) -> (result :Bool);\n+    canGetAddresses @54 (context :Proxy.Context) -> (result :Bool);\n+    privateKeysDisabled @55 (context :Proxy.Context) -> (result :Bool);\n+    hasExternalSigner @56 (context :Proxy.Context) -> (result :Bool);\n+    getDefaultAddressType @57 (context :Proxy.Context) -> (result :Int32);\n+    getDefaultMaxTxFee @58 (context :Proxy.Context) -> (result :Int64);\n+    remove @59 (context :Proxy.Context) -> ();\n+    isLegacy @60 (context :Proxy.Context) -> (result :Bool);\n+    handleUnload @61 (context :Proxy.Context, callback :UnloadWalletCallback) -> (result :Handler.Handler);\n+    handleShowProgress @62 (context :Proxy.Context, callback :ShowWalletProgressCallback) -> (result :Handler.Handler);\n+    handleStatusChanged @63 (context :Proxy.Context, callback :StatusChangedCallback) -> (result :Handler.Handler);\n+    handleAddressBookChanged @64 (context :Proxy.Context, callback :AddressBookChangedCallback) -> (result :Handler.Handler);\n+    handleTransactionChanged @65 (context :Proxy.Context, callback :TransactionChangedCallback) -> (result :Handler.Handler);\n+    handleWatchOnlyChanged @66 (context :Proxy.Context, callback :WatchOnlyChangedCallback) -> (result :Handler.Handler);\n+    handleCanGetAddressesChanged @67 (context :Proxy.Context, callback :CanGetAddressesChangedCallback) -> (result :Handler.Handler);\n+}\n+\n+interface UnloadWalletCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::UnloadFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface ShowWalletProgressCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::ShowProgressFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, title :Text, progress :Int32) -> ();\n+}\n+\n+interface StatusChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::StatusChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface AddressBookChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::AddressBookChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, address :TxDestination, label :Text, isMine :Bool, purpose :Text, status :Int32) -> ();\n+}\n+\n+interface TransactionChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::TransactionChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, txid :Data, status :Int32) -> ();\n+}\n+\n+interface WatchOnlyChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::WatchOnlyChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, haveWatchOnly :Bool) -> ();\n+}\n+\n+interface CanGetAddressesChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::CanGetAddressesChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface WalletClient extends(Chain.ChainClient) $Proxy.wrap(\"interfaces::WalletClient\") {\n+    createWallet @0 (context :Proxy.Context, name :Text, passphrase :Text, flags :UInt64) -> (error :Common.BilingualStr, warning :List(Common.BilingualStr), result :Wallet);\n+    loadWallet @1 (context :Proxy.Context, name :Text) -> (error :Common.BilingualStr, warning :List(Common.BilingualStr), result :Wallet);\n+    getWalletDir @2 (context :Proxy.Context) -> (result :Text);\n+    listWalletDir @3 (context :Proxy.Context) -> (result :List(Text));\n+    getWallets @4 (context :Proxy.Context) -> (result :List(Wallet));\n+    handleLoadWallet @5 (context :Proxy.Context, callback :LoadWalletCallback) -> (result :Handler.Handler);\n+}\n+\n+interface LoadWalletCallback $Proxy.wrap(\"ProxyCallback<interfaces::WalletClient::LoadWalletFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, wallet :Wallet) -> ();\n+}\n+\n+struct Key {\n+    secret @0 :Data;\n+    isCompressed @1 :Bool;\n+}\n+\n+struct TxDestination {\n+    pkHash @0 :Data;\n+    scriptHash @1 :Data;\n+    witnessV0ScriptHash @2 :Data;\n+    witnessV0KeyHash @3 :Data;\n+    witnessUnknown @4 :WitnessUnknown;\n+}\n+\n+struct WitnessUnknown $Proxy.wrap(\"WitnessUnknown\")\n+{\n+    version @0 :UInt32;\n+    length @1 :UInt32;\n+    program @2 :Data;\n+}\n+\n+struct WalletAddress $Proxy.wrap(\"interfaces::WalletAddress\") {\n+    dest @0 :TxDestination;\n+    isMine @1 :Int32 $Proxy.name(\"is_mine\");\n+    name @2 :Text;\n+    purpose @3 :Text;\n+}\n+\n+struct Recipient $Proxy.wrap(\"CRecipient\") {\n+    scriptPubKey @0 :Data;\n+    amount @1 :Int64 $Proxy.name(\"nAmount\");\n+    subtractFeeFromAmount @2 :Bool $Proxy.name(\"fSubtractFeeFromAmount\");\n+}\n+\n+struct CoinControl {\n+    destChange @0 :TxDestination;\n+    hasChangeType @1 :Bool;\n+    changeType @2 :Int32;\n+    allowOtherInputs @3 :Bool;\n+    allowWatchOnly @4 :Bool;\n+    overrideFeeRate @5 :Bool;\n+    hasFeeRate @6 :Bool;\n+    feeRate @7 :Data;\n+    hasConfirmTarget @8 :Bool;\n+    confirmTarget @9 :Int32;\n+    hasSignalRbf @10 :Bool;\n+    signalRbf @11 :Bool;\n+    feeMode @12 :Int32;\n+    minDepth @13 :Int32;\n+    setSelected @14 :List(Data);\n+}\n+\n+struct WalletTx $Proxy.wrap(\"interfaces::WalletTx\") {\n+    tx @0 :Data;\n+    txinIsMine @1 :List(Int32) $Proxy.name(\"txin_is_mine\");\n+    txoutIsMine @2 :List(Int32) $Proxy.name(\"txout_is_mine\");\n+    txoutAddress @3 :List(TxDestination) $Proxy.name(\"txout_address\");\n+    txoutAddressIsMine @4 :List(Int32) $Proxy.name(\"txout_address_is_mine\");\n+    credit @5 :Int64;\n+    debit @6 :Int64;\n+    change @7 :Int64;\n+    time @8 :Int64;\n+    valueMap @9 :List(Common.Pair(Text, Text)) $Proxy.name(\"value_map\");\n+    isCoinbase @10 :Bool $Proxy.name(\"is_coinbase\");\n+}\n+\n+struct WalletTxOut $Proxy.wrap(\"interfaces::WalletTxOut\") {\n+    txout @0 :Data;\n+    time @1 :Int64;\n+    depthInMainChain @2 :Int32 $Proxy.name(\"depth_in_main_chain\");\n+    isSpent @3 :Bool $Proxy.name(\"is_spent\");\n+}\n+\n+struct WalletTxStatus $Proxy.wrap(\"interfaces::WalletTxStatus\") {\n+    blockHeight @0 :Int32 $Proxy.name(\"block_height\");\n+    blocksToMaturity @1 :Int32 $Proxy.name(\"blocks_to_maturity\");\n+    depthInMainChain @2 :Int32 $Proxy.name(\"depth_in_main_chain\");\n+    timeReceived @3 :UInt32 $Proxy.name(\"time_received\");\n+    lockTime @4 :UInt32 $Proxy.name(\"lock_time\");\n+    isFinal @5 :Bool $Proxy.name(\"is_final\");\n+    isTrusted @6 :Bool $Proxy.name(\"is_trusted\");\n+    isAbandoned @7 :Bool $Proxy.name(\"is_abandoned\");\n+    isCoinbase @8 :Bool $Proxy.name(\"is_coinbase\");\n+    isInMainChain @9 :Bool $Proxy.name(\"is_in_main_chain\");\n+}\n+\n+struct WalletBalances $Proxy.wrap(\"interfaces::WalletBalances\") {\n+    balance @0 :Int64;\n+    unconfirmedBalance @1 :Int64 $Proxy.name(\"unconfirmed_balance\");\n+    immatureBalance @2 :Int64 $Proxy.name(\"immature_balance\");\n+    haveWatchOnly @3 :Bool $Proxy.name(\"have_watch_only\");\n+    watchOnlyBalance @4 :Int64 $Proxy.name(\"watch_only_balance\");\n+    unconfirmedWatchOnlyBalance @5 :Int64 $Proxy.name(\"unconfirmed_watch_only_balance\");\n+    immatureWatchOnlyBalance @6 :Int64 $Proxy.name(\"immature_watch_only_balance\");\n+}"
      },
      {
        "sha": "941cc4c06267a16f4c5450757e13313367215c48",
        "filename": "src/ipc/capnp/wallet.cpp",
        "status": "added",
        "additions": 174,
        "deletions": 0,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73aab3dc4414016f1db2e464b0395d50df23055b/src/ipc/capnp/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73aab3dc4414016f1db2e464b0395d50df23055b/src/ipc/capnp/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/wallet.cpp?ref=73aab3dc4414016f1db2e464b0395d50df23055b",
        "patch": "@@ -0,0 +1,174 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <capnp/blob.h>\n+#include <capnp/list.h>\n+#include <interfaces/wallet.h>\n+#include <ipc/capnp/chain-types.h>\n+#include <ipc/capnp/chain.capnp.h>\n+#include <ipc/capnp/common-types.h>\n+#include <ipc/capnp/wallet-types.h>\n+#include <ipc/capnp/wallet.capnp.h>\n+#include <ipc/capnp/wallet.capnp.proxy-types.h>\n+#include <ipc/capnp/wallet.capnp.proxy.h>\n+#include <ipc/capnp/wallet.h>\n+#include <key.h>\n+#include <mp/proxy-io.h>\n+#include <mp/proxy-types.h>\n+#include <mp/proxy.h>\n+#include <mp/util.h>\n+#include <outputtype.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <scheduler.h>\n+#include <script/standard.h>\n+#include <streams.h>\n+#include <uint256.h>\n+#include <util/threadnames.h>\n+#include <wallet/coincontrol.h>\n+#include <wallet/context.h>\n+\n+#include <cstdint>\n+#include <future>\n+#include <memory>\n+#include <optional>\n+#include <string.h>\n+#include <system_error>\n+#include <variant>\n+#include <vector>\n+\n+namespace mp {\n+void ProxyServerCustom<ipc::capnp::messages::WalletClient, interfaces::WalletClient>::invokeDestroy()\n+{\n+    if (m_scheduler) {\n+        m_scheduler->stop();\n+        m_result.get();\n+        m_scheduler.reset();\n+    }\n+    ProxyServerBase::invokeDestroy();\n+}\n+\n+void ProxyServerMethodTraits<ipc::capnp::messages::ChainClient::StartParams>::invoke(WalletContext& context)\n+{\n+    if (!context.proxy_server.m_scheduler) {\n+        context.proxy_server.m_scheduler = std::make_unique<CScheduler>();\n+        CScheduler* scheduler = context.proxy_server.m_scheduler.get();\n+        context.proxy_server.m_result = std::async([scheduler]() {\n+            util::ThreadRename(\"schedqueue\");\n+            scheduler->serviceQueue();\n+        });\n+    }\n+    context.proxy_server.m_impl->start(*context.proxy_server.m_scheduler);\n+}\n+\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const CTxDestination& dest,\n+                        ipc::capnp::messages::TxDestination::Builder&& builder)\n+{\n+    if (const PKHash* pkHash = std::get_if<PKHash>(&dest)) {\n+        builder.setPkHash(ipc::capnp::ToArray(*pkHash));\n+    } else if (const ScriptHash* scriptHash = std::get_if<ScriptHash>(&dest)) {\n+        builder.setScriptHash(ipc::capnp::ToArray(*scriptHash));\n+    } else if (const WitnessV0ScriptHash* witnessV0ScriptHash = std::get_if<WitnessV0ScriptHash>(&dest)) {\n+        builder.setWitnessV0ScriptHash(ipc::capnp::ToArray(*witnessV0ScriptHash));\n+    } else if (const WitnessV0KeyHash* witnessV0KeyHash = std::get_if<WitnessV0KeyHash>(&dest)) {\n+        builder.setWitnessV0KeyHash(ipc::capnp::ToArray(*witnessV0KeyHash));\n+    } else if (const WitnessUnknown* witnessUnknown = std::get_if<WitnessUnknown>(&dest)) {\n+        BuildField(TypeList<WitnessUnknown>(), invoke_context, Make<ValueField>(builder.initWitnessUnknown()),\n+                   *witnessUnknown);\n+    }\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::TxDestination::Reader& reader,\n+                       CTxDestination& dest)\n+{\n+    if (reader.hasPkHash()) {\n+        dest = PKHash(ipc::capnp::ToBlob<uint160>(reader.getPkHash()));\n+    } else if (reader.hasScriptHash()) {\n+        dest = ScriptHash(ipc::capnp::ToBlob<uint160>(reader.getScriptHash()));\n+    } else if (reader.hasWitnessV0ScriptHash()) {\n+        dest = WitnessV0ScriptHash(ipc::capnp::ToBlob<uint256>(reader.getWitnessV0ScriptHash()));\n+    } else if (reader.hasWitnessV0KeyHash()) {\n+        dest = WitnessV0KeyHash(ipc::capnp::ToBlob<uint160>(reader.getWitnessV0KeyHash()));\n+    } else if (reader.hasWitnessUnknown()) {\n+        ReadField(TypeList<WitnessUnknown>(), invoke_context, Make<ValueField>(reader.getWitnessUnknown()),\n+                  ReadDestValue(std::get<WitnessUnknown>(dest)));\n+    }\n+}\n+\n+void CustomBuildMessage(InvokeContext& invoke_context, const CKey& key, ipc::capnp::messages::Key::Builder&& builder)\n+{\n+    builder.setSecret(ipc::capnp::FromBlob(key));\n+    builder.setIsCompressed(key.IsCompressed());\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context, const ipc::capnp::messages::Key::Reader& reader, CKey& key)\n+{\n+    auto secret = reader.getSecret();\n+    key.Set(secret.begin(), secret.end(), reader.getIsCompressed());\n+}\n+\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const CCoinControl& coin_control,\n+                        ipc::capnp::messages::CoinControl::Builder&& builder)\n+{\n+    CustomBuildMessage(invoke_context, coin_control.destChange, builder.initDestChange());\n+    if (coin_control.m_change_type) {\n+        builder.setHasChangeType(true);\n+        builder.setChangeType(static_cast<int>(*coin_control.m_change_type));\n+    }\n+    builder.setAllowOtherInputs(coin_control.fAllowOtherInputs);\n+    builder.setAllowWatchOnly(coin_control.fAllowWatchOnly);\n+    builder.setOverrideFeeRate(coin_control.fOverrideFeeRate);\n+    if (coin_control.m_feerate) {\n+        builder.setFeeRate(ipc::capnp::ToArray(ipc::capnp::Serialize(*coin_control.m_feerate)));\n+    }\n+    if (coin_control.m_confirm_target) {\n+        builder.setHasConfirmTarget(true);\n+        builder.setConfirmTarget(*coin_control.m_confirm_target);\n+    }\n+    if (coin_control.m_signal_bip125_rbf) {\n+        builder.setHasSignalRbf(true);\n+        builder.setSignalRbf(*coin_control.m_signal_bip125_rbf);\n+    }\n+    builder.setFeeMode(int32_t(coin_control.m_fee_mode));\n+    builder.setMinDepth(coin_control.m_min_depth);\n+    std::vector<COutPoint> selected;\n+    coin_control.ListSelected(selected);\n+    auto builder_selected = builder.initSetSelected(selected.size());\n+    size_t i = 0;\n+    for (const COutPoint& output : selected) {\n+        builder_selected.set(i, ipc::capnp::ToArray(ipc::capnp::Serialize(output)));\n+        ++i;\n+    }\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::CoinControl::Reader& reader,\n+                       CCoinControl& coin_control)\n+{\n+    CustomReadMessage(invoke_context, reader.getDestChange(), coin_control.destChange);\n+    if (reader.getHasChangeType()) {\n+        coin_control.m_change_type = OutputType(reader.getChangeType());\n+    }\n+    coin_control.fAllowOtherInputs = reader.getAllowOtherInputs();\n+    coin_control.fAllowWatchOnly = reader.getAllowWatchOnly();\n+    coin_control.fOverrideFeeRate = reader.getOverrideFeeRate();\n+    if (reader.hasFeeRate()) {\n+        coin_control.m_feerate = ipc::capnp::Unserialize<CFeeRate>(reader.getFeeRate());\n+    }\n+    if (reader.getHasConfirmTarget()) {\n+        coin_control.m_confirm_target = reader.getConfirmTarget();\n+    }\n+    if (reader.getHasSignalRbf()) {\n+        coin_control.m_signal_bip125_rbf = reader.getSignalRbf();\n+    }\n+    coin_control.m_fee_mode = FeeEstimateMode(reader.getFeeMode());\n+    coin_control.m_min_depth = reader.getMinDepth();\n+    for (const auto output : reader.getSetSelected()) {\n+        coin_control.Select(ipc::capnp::Unserialize<COutPoint>(output));\n+    }\n+}\n+} // namespace mp"
      },
      {
        "sha": "6c161933cd480746e3f30d1b4e1a9a6098a48f4f",
        "filename": "src/ipc/capnp/wallet.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73aab3dc4414016f1db2e464b0395d50df23055b/src/ipc/capnp/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73aab3dc4414016f1db2e464b0395d50df23055b/src/ipc/capnp/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/wallet.h?ref=73aab3dc4414016f1db2e464b0395d50df23055b",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_WALLET_H\n+#define BITCOIN_IPC_CAPNP_WALLET_H\n+\n+#include <interfaces/wallet.h>\n+#include <ipc/capnp/chain.capnp.proxy.h>\n+#include <ipc/capnp/wallet.capnp.h>\n+#include <mp/proxy.h>\n+\n+#include <future>\n+#include <memory>\n+\n+class CScheduler;\n+namespace interfaces {\n+class WalletClient;\n+} // namespace interfaces\n+namespace ipc {\n+namespace capnp {\n+namespace messages {\n+struct WalletClient;\n+} // namespace messages\n+} // namespace capnp\n+} // namespace ipc\n+\n+//! Specialization of WalletClient proxy server needed hold a CSCheduler instance.\n+template <>\n+struct mp::ProxyServerCustom<ipc::capnp::messages::WalletClient, interfaces::WalletClient>\n+    : public mp::ProxyServerBase<ipc::capnp::messages::WalletClient, interfaces::WalletClient>\n+{\n+public:\n+    using ProxyServerBase::ProxyServerBase;\n+    void invokeDestroy();\n+\n+    std::unique_ptr<CScheduler> m_scheduler;\n+    std::future<void> m_result;\n+};\n+\n+#endif // BITCOIN_IPC_CAPNP_WALLET_H"
      },
      {
        "sha": "450bb968f165f91980725768fa794f31ca11e9ae",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73aab3dc4414016f1db2e464b0395d50df23055b/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73aab3dc4414016f1db2e464b0395d50df23055b/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=73aab3dc4414016f1db2e464b0395d50df23055b",
        "patch": "@@ -60,6 +60,9 @@ class CCoinControl\n     int m_max_depth = DEFAULT_MAX_DEPTH;\n     //! SigningProvider that has pubkeys and scripts to do spend size estimation for external inputs\n     FlatSigningProvider m_external_provider;\n+    // Note: If you add fields to this struct, you should also update the IPC\n+    // serialization code (in ipc/capnp/wallet-types.cpp and\n+    // ipc/capnp/wallet.capnp).\n \n     CCoinControl();\n "
      },
      {
        "sha": "eb40102c30474bf96340565a260bd2e36cff2795",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73aab3dc4414016f1db2e464b0395d50df23055b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73aab3dc4414016f1db2e464b0395d50df23055b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=73aab3dc4414016f1db2e464b0395d50df23055b",
        "patch": "@@ -219,6 +219,8 @@ struct CRecipient\n     CScript scriptPubKey;\n     CAmount nAmount;\n     bool fSubtractFeeFromAmount;\n+    // Note: If you add fields to this struct, you should also update the IPC\n+    // serialization code (in ipc/capnp/wallet.capnp).\n };\n \n class WalletRescanReserver; //forward declarations for ScanForWalletTransactions/RescanFromTime"
      }
    ]
  },
  {
    "sha": "671afc9b4e2bdd46efcefda3fa8daf3725907587",
    "node_id": "C_kwDOABII59oAKDY3MWFmYzliNGUyYmRkNDZlZmNlZmRhM2ZhOGRhZjM3MjU5MDc1ODc",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-11-29T16:20:20Z"
      },
      "message": "Add capnp wrapper for Node interface",
      "tree": {
        "sha": "6a3fa0a8d1c40474622fb455b6b1e81ad64857d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a3fa0a8d1c40474622fb455b6b1e81ad64857d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/671afc9b4e2bdd46efcefda3fa8daf3725907587",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/671afc9b4e2bdd46efcefda3fa8daf3725907587",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/671afc9b4e2bdd46efcefda3fa8daf3725907587",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/671afc9b4e2bdd46efcefda3fa8daf3725907587/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73aab3dc4414016f1db2e464b0395d50df23055b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73aab3dc4414016f1db2e464b0395d50df23055b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73aab3dc4414016f1db2e464b0395d50df23055b"
      }
    ],
    "stats": {
      "total": 527,
      "additions": 527,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a0af5d94919d71ab30ece6929e44a01117cec8aa",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/671afc9b4e2bdd46efcefda3fa8daf3725907587/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/671afc9b4e2bdd46efcefda3fa8daf3725907587/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=671afc9b4e2bdd46efcefda3fa8daf3725907587",
        "patch": "@@ -828,6 +828,7 @@ libbitcoin_ipc_mpgen_input = \\\n   ipc/capnp/echo.capnp \\\n   ipc/capnp/handler.capnp \\\n   ipc/capnp/init.capnp \\\n+  ipc/capnp/node.capnp \\\n   ipc/capnp/wallet.capnp\n EXTRA_DIST += $(libbitcoin_ipc_mpgen_input)\n %.capnp:\n@@ -842,6 +843,9 @@ libbitcoin_ipc_a_SOURCES = \\\n   ipc/capnp/common.h \\\n   ipc/capnp/context.h \\\n   ipc/capnp/init-types.h \\\n+  ipc/capnp/node-types.h \\\n+  ipc/capnp/node.cpp \\\n+  ipc/capnp/node.h \\\n   ipc/capnp/protocol.cpp \\\n   ipc/capnp/protocol.h \\\n   ipc/capnp/wallet-types.h \\"
      },
      {
        "sha": "f181ffd09e311133b3260a4987cc0449cd424e6a",
        "filename": "src/ipc/capnp/common-types.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/671afc9b4e2bdd46efcefda3fa8daf3725907587/src/ipc/capnp/common-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/671afc9b4e2bdd46efcefda3fa8daf3725907587/src/ipc/capnp/common-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/common-types.h?ref=671afc9b4e2bdd46efcefda3fa8daf3725907587",
        "patch": "@@ -8,8 +8,10 @@\n #include <chainparams.h>\n #include <consensus/validation.h>\n #include <ipc/capnp/common.capnp.proxy.h>\n+#include <ipc/capnp/node.capnp.h>\n #include <mp/proxy-types.h>\n #include <net_processing.h>\n+#include <net_types.h>\n #include <netbase.h>\n #include <util/translation.h>\n #include <validation.h>\n@@ -117,6 +119,15 @@ void CustomBuildMessage(InvokeContext& invoke_context,\n void CustomReadMessage(InvokeContext& invoke_context,\n                        const ipc::capnp::messages::UniValue::Reader& reader,\n                        UniValue& univalue);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const capnp::Data::Reader& reader,\n+                       CSubNet& subnet);\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const banmap_t& banmap,\n+                        ipc::capnp::messages::Banmap::Builder&& builder);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::Banmap::Reader& reader,\n+                       banmap_t& banmap);\n //!@}\n \n template <typename LocalType, typename Reader, typename ReadDest>"
      },
      {
        "sha": "ec65719c27bf29898b59252a6ef0dcbb9a1bdcea",
        "filename": "src/ipc/capnp/node-types.h",
        "status": "added",
        "additions": 115,
        "deletions": 0,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/671afc9b4e2bdd46efcefda3fa8daf3725907587/src/ipc/capnp/node-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/671afc9b4e2bdd46efcefda3fa8daf3725907587/src/ipc/capnp/node-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/node-types.h?ref=671afc9b4e2bdd46efcefda3fa8daf3725907587",
        "patch": "@@ -0,0 +1,115 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_NODE_TYPES_H\n+#define BITCOIN_IPC_CAPNP_NODE_TYPES_H\n+\n+#include <ipc/capnp/common.capnp.proxy-types.h>\n+#include <ipc/capnp/context.h>\n+#include <ipc/capnp/node.capnp.proxy.h>\n+#include <ipc/capnp/wallet.capnp.proxy-types.h>\n+\n+class CNodeStats;\n+struct CNodeStateStats;\n+\n+//! Specialization of rpcSetTimerInterfaceIfUnset needed because it takes a\n+//! RPCTimerInterface* argument, which requires custom code to provide a\n+//! compatible timer.\n+template <>\n+struct mp::ProxyServerMethodTraits<ipc::capnp::messages::Node::RpcSetTimerInterfaceIfUnsetParams>\n+{\n+    using Context = ServerContext<ipc::capnp::messages::Node,\n+                                  ipc::capnp::messages::Node::RpcSetTimerInterfaceIfUnsetParams,\n+                                  ipc::capnp::messages::Node::RpcSetTimerInterfaceIfUnsetResults>;\n+    static void invoke(Context& context);\n+};\n+\n+//! Specialization of rpcUnsetTimerInterface needed because it takes a\n+//! RPCTimerInterface* argument, which requires custom code to provide a\n+//! compatible timer.\n+template <>\n+struct mp::ProxyServerMethodTraits<ipc::capnp::messages::Node::RpcUnsetTimerInterfaceParams>\n+{\n+    using Context = ServerContext<ipc::capnp::messages::Node,\n+                                  ipc::capnp::messages::Node::RpcUnsetTimerInterfaceParams,\n+                                  ipc::capnp::messages::Node::RpcUnsetTimerInterfaceResults>;\n+    static void invoke(Context& context);\n+};\n+\n+namespace mp {\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+void CustomPassField(TypeList<int, const char* const*>, ServerContext& server_context, const Fn& fn, Args&&... args)\n+{\n+    const auto& params = server_context.call_context.getParams();\n+    const auto& value = Accessor::get(params);\n+    std::vector<const char*> argv(value.size());\n+    size_t i = 0;\n+    for (const auto arg : value) {\n+        argv[i] = arg.cStr();\n+        ++i;\n+    }\n+    return fn.invoke(server_context, std::forward<Args>(args)..., argv.size(), argv.data());\n+}\n+\n+template <typename Output>\n+void CustomBuildField(TypeList<int, const char* const*>,\n+                      Priority<1>,\n+                      InvokeContext& invoke_context,\n+                      int argc,\n+                      const char* const* argv,\n+                      Output&& output)\n+{\n+    auto args = output.init(argc);\n+    for (int i = 0; i < argc; ++i) {\n+        args.set(i, argv[i]);\n+    }\n+}\n+\n+template <typename InvokeContext>\n+static inline ::capnp::Void BuildPrimitive(InvokeContext& invoke_context, RPCTimerInterface*, TypeList<::capnp::Void>)\n+{\n+    return {};\n+}\n+\n+//! RPCTimerInterface* server-side argument handling. Skips argument so it can\n+//! be handled by ProxyServerCustom code.\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+void CustomPassField(TypeList<RPCTimerInterface*>, ServerContext& server_context, const Fn& fn, Args&&... args)\n+{\n+    fn.invoke(server_context, std::forward<Args>(args)...);\n+}\n+\n+template <typename Value, typename Output>\n+void CustomBuildField(TypeList<std::tuple<CNodeStats, bool, CNodeStateStats>>,\n+                      Priority<1>,\n+                      InvokeContext& invoke_context,\n+                      Value&& stats,\n+                      Output&& output)\n+{\n+    // FIXME should pass message_builder instead of builder below to avoid\n+    // calling output.set twice Need ValueBuilder class analogous to\n+    // ValueReader for this\n+    BuildField(TypeList<CNodeStats>(), invoke_context, output, std::get<0>(stats));\n+    if (std::get<1>(stats)) {\n+        auto message_builder = output.init();\n+        using Accessor = ProxyStruct<ipc::capnp::messages::NodeStats>::StateStatsAccessor;\n+        StructField<Accessor, ipc::capnp::messages::NodeStats::Builder> field_output{message_builder};\n+        BuildField(TypeList<CNodeStateStats>(), invoke_context, field_output, std::get<2>(stats));\n+    }\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       ipc::capnp::messages::NodeStats::Reader const& reader,\n+                       std::tuple<CNodeStats, bool, CNodeStateStats>& node_stats);\n+\n+template <typename Value, typename Output>\n+void CustomBuildField(TypeList<CSubNet>, Priority<1>, InvokeContext& invoke_context, Value&& subnet, Output&& output)\n+{\n+    std::string subnet_str = subnet.ToString();\n+    auto result = output.init(subnet_str.size());\n+    memcpy(result.begin(), subnet_str.data(), subnet_str.size());\n+}\n+} // namespace mp\n+\n+#endif // BITCOIN_IPC_CAPNP_NODE_TYPES_H"
      },
      {
        "sha": "be40eae4305b92bc6fe429c47ed0e75c20e23444",
        "filename": "src/ipc/capnp/node.capnp",
        "status": "added",
        "additions": 200,
        "deletions": 0,
        "changes": 200,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/671afc9b4e2bdd46efcefda3fa8daf3725907587/src/ipc/capnp/node.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/671afc9b4e2bdd46efcefda3fa8daf3725907587/src/ipc/capnp/node.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/node.capnp?ref=671afc9b4e2bdd46efcefda3fa8daf3725907587",
        "patch": "@@ -0,0 +1,200 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0x92546c47dc734b2e;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"ipc/capnp/node.h\");\n+$Proxy.includeTypes(\"ipc/capnp/node-types.h\");\n+\n+using Common = import \"common.capnp\";\n+using Handler = import \"handler.capnp\";\n+using Wallet = import \"wallet.capnp\";\n+\n+interface Node $Proxy.wrap(\"interfaces::Node\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    initLogging @1 (context :Proxy.Context) -> ();\n+    initParameterInteraction @2 (context :Proxy.Context) -> ();\n+    getWarnings @3 (context :Proxy.Context) -> (result :Common.BilingualStr);\n+    getLogCategories @4 (context :Proxy.Context) -> (result :UInt32);\n+    baseInitialize @5 (context :Proxy.Context, globalArgs :Common.GlobalArgs) -> (error :Text $Proxy.exception(\"std::exception\"), result :Bool);\n+    appInitMain @6 (context :Proxy.Context) -> (tipInfo :BlockAndHeaderTipInfo, error :Text $Proxy.exception(\"std::exception\"), result :Bool);\n+    appShutdown @7 (context :Proxy.Context) -> ();\n+    startShutdown @8 (context :Proxy.Context) -> ();\n+    shutdownRequested @9 (context :Proxy.Context) -> (result :Bool);\n+    mapPort @10 (context :Proxy.Context, useUPnP :Bool, useNatPnP :Bool) -> ();\n+    getProxy @11 (context :Proxy.Context, net :Int32) -> (proxyInfo :ProxyType, result :Bool);\n+    getNodeCount @12 (context :Proxy.Context, flags :Int32) -> (result :UInt64);\n+    getNodesStats @13 (context :Proxy.Context) -> (stats :List(NodeStats), result :Bool);\n+    getBanned @14 (context :Proxy.Context) -> (banmap :Banmap, result :Bool);\n+    ban @15 (context :Proxy.Context, netAddr :Data, banTimeOffset :Int64) -> (result :Bool);\n+    unban @16 (context :Proxy.Context, ip :Data) -> (result :Bool);\n+    disconnectByAddress @17 (context :Proxy.Context, address :Data) -> (result :Bool);\n+    disconnectById @18 (context :Proxy.Context, id :Int64) -> (result :Bool);\n+    listExternalSigners @19 (context :Proxy.Context) -> (result :List(ExternalSigner));\n+    getTotalBytesRecv @20 (context :Proxy.Context) -> (result :Int64);\n+    getTotalBytesSent @21 (context :Proxy.Context) -> (result :Int64);\n+    getMempoolSize @22 (context :Proxy.Context) -> (result :UInt64);\n+    getMempoolDynamicUsage @23 (context :Proxy.Context) -> (result :UInt64);\n+    getHeaderTip @24 (context :Proxy.Context) -> (height :Int32, blockTime :Int64, result :Bool);\n+    getNumBlocks @25 (context :Proxy.Context) -> (result :Int32);\n+    getBestBlockHash @26 (context :Proxy.Context) -> (result :Data);\n+    getLastBlockTime @27 (context :Proxy.Context) -> (result :Int64);\n+    getVerificationProgress @28 (context :Proxy.Context) -> (result :Float64);\n+    isInitialBlockDownload @29 (context :Proxy.Context) -> (result :Bool);\n+    getReindex @30 (context :Proxy.Context) -> (result :Bool);\n+    getImporting @31 (context :Proxy.Context) -> (result :Bool);\n+    setNetworkActive @32 (context :Proxy.Context, active :Bool) -> ();\n+    getNetworkActive @33 (context :Proxy.Context) -> (result :Bool);\n+    getDustRelayFee @34 (context :Proxy.Context) -> (result :Data);\n+    executeRpc @35 (context :Proxy.Context, command :Text, params :Common.UniValue, uri :Text) -> (error :Text $Proxy.exception(\"std::exception\"), rpcError :Common.UniValue $Proxy.exception(\"UniValue\"), result :Common.UniValue);\n+    listRpcCommands @36 (context :Proxy.Context) -> (result :List(Text));\n+    rpcSetTimerInterfaceIfUnset @37 (context :Proxy.Context, iface :Void) -> ();\n+    rpcUnsetTimerInterface @38 (context :Proxy.Context, iface :Void) -> ();\n+    getUnspentOutput @39 (context :Proxy.Context, output :Data) -> (coin :Data, result :Bool);\n+    broadcastTransaction @40 (context :Proxy.Context, tx: Data, maxTxFee :Int64) -> (error: Text, result :Int32);\n+    customWalletClient @41 (context :Proxy.Context) -> (result :Wallet.WalletClient) $Proxy.name(\"walletClient\");\n+    handleInitMessage @42 (context :Proxy.Context, callback :InitMessageCallback) -> (result :Handler.Handler);\n+    handleMessageBox @43 (context :Proxy.Context, callback :MessageBoxCallback) -> (result :Handler.Handler);\n+    handleQuestion @44 (context :Proxy.Context, callback :QuestionCallback) -> (result :Handler.Handler);\n+    handleShowProgress @45 (context :Proxy.Context, callback :ShowNodeProgressCallback) -> (result :Handler.Handler);\n+    handleInitWallet @46 (context :Proxy.Context, callback :InitWalletCallback) -> (result :Handler.Handler);\n+    handleNotifyNumConnectionsChanged @47 (context :Proxy.Context, callback :NotifyNumConnectionsChangedCallback) -> (result :Handler.Handler);\n+    handleNotifyNetworkActiveChanged @48 (context :Proxy.Context, callback :NotifyNetworkActiveChangedCallback) -> (result :Handler.Handler);\n+    handleNotifyAlertChanged @49 (context :Proxy.Context, callback :NotifyAlertChangedCallback) -> (result :Handler.Handler);\n+    handleBannedListChanged @50 (context :Proxy.Context, callback :BannedListChangedCallback) -> (result :Handler.Handler);\n+    handleNotifyBlockTip @51 (context :Proxy.Context, callback :NotifyBlockTipCallback) -> (result :Handler.Handler);\n+    handleNotifyHeaderTip @52 (context :Proxy.Context, callback :NotifyHeaderTipCallback) -> (result :Handler.Handler);\n+}\n+\n+interface ExternalSigner $Proxy.wrap(\"interfaces::ExternalSigner\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    getName @1 (context :Proxy.Context) -> (result :Text);\n+}\n+\n+interface InitMessageCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::InitMessageFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, message :Text) -> ();\n+}\n+\n+interface MessageBoxCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::MessageBoxFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, message :Common.BilingualStr, caption :Text, style :UInt32) -> (result :Bool);\n+}\n+\n+interface QuestionCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::QuestionFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, message :Common.BilingualStr, nonInteractiveMessage :Text, caption :Text, style :UInt32) -> (result :Bool);\n+}\n+\n+interface ShowNodeProgressCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::ShowProgressFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, title :Text, progress :Int32, resumePossible :Bool) -> ();\n+}\n+\n+interface InitWalletCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::InitWalletFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface NotifyNumConnectionsChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::NotifyNumConnectionsChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, newNumConnections :Int32) -> ();\n+}\n+\n+interface NotifyNetworkActiveChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::NotifyNetworkActiveChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, networkActive :Bool) -> ();\n+}\n+\n+interface NotifyAlertChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::NotifyAlertChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface BannedListChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::BannedListChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface NotifyBlockTipCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::NotifyBlockTipFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, syncState: Int32, tip: BlockTip, verificationProgress :Float64) -> ();\n+}\n+\n+interface NotifyHeaderTipCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::NotifyHeaderTipFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, syncState: Int32, tip: BlockTip, verificationProgress :Float64) -> ();\n+}\n+\n+struct ProxyType $Proxy.wrap(\"proxyType\") {\n+    proxy @0 :Data;\n+    randomizeCredentials @1 :Bool $Proxy.name(\"randomize_credentials\");\n+}\n+\n+struct NodeStats $Proxy.wrap(\"CNodeStats\") {\n+    nodeid @0 :Int64 $Proxy.name(\"nodeid\");\n+    services @1 :UInt64 $Proxy.name(\"nServices\");\n+    relayTxes @2 :Bool $Proxy.name(\"fRelayTxes\");\n+    lastSend @3 :Int64 $Proxy.name(\"nLastSend\");\n+    lastRecv @4 :Int64 $Proxy.name(\"nLastRecv\");\n+    lastTXTime @5 :Int64 $Proxy.name(\"nLastTXTime\");\n+    lastBlockTime @6 :Int64 $Proxy.name(\"nLastBlockTime\");\n+    timeConnected @7 :Int64 $Proxy.name(\"nTimeConnected\");\n+    timeOffset @8 :Int64 $Proxy.name(\"nTimeOffset\");\n+    addrName @9 :Text $Proxy.name(\"m_addr_name\");\n+    version @10 :Int32 $Proxy.name(\"nVersion\");\n+    cleanSubVer @11 :Text $Proxy.name(\"cleanSubVer\");\n+    inbound @12 :Bool $Proxy.name(\"fInbound\");\n+    bip152HighbandwidthTo @13 :Bool $Proxy.name(\"m_bip152_highbandwidth_to\");\n+    bip152HighbandwidthFrom @14 :Bool $Proxy.name(\"m_bip152_highbandwidth_from\");\n+    startingHeight @15 :Int32 $Proxy.name(\"m_starting_height\");\n+    sendBytes @16 :UInt64 $Proxy.name(\"nSendBytes\");\n+    sendBytesPerMsgCmd @17 :List(Common.PairStr64) $Proxy.name(\"mapSendBytesPerMsgCmd\");\n+    recvBytes @18 :UInt64 $Proxy.name(\"nRecvBytes\");\n+    recvBytesPerMsgCmd @19 :List(Common.PairStr64) $Proxy.name(\"mapRecvBytesPerMsgCmd\");\n+    permissionFlags @20 :Int32 $Proxy.name(\"m_permissionFlags\");\n+    pingTime @21 :Int64 $Proxy.name(\"m_last_ping_time\");\n+    minPingTime @22 :Int64 $Proxy.name(\"m_min_ping_time\");\n+    minFeeFilter @23 :Int64 $Proxy.name(\"minFeeFilter\");\n+    addrLocal @24 :Text $Proxy.name(\"addrLocal\");\n+    addr @25 :Data $Proxy.name(\"addr\");\n+    addrBind @26 :Data $Proxy.name(\"addrBind\");\n+    network @27 :Int32 $Proxy.name(\"m_network\");\n+    mappedAs @28 :UInt32 $Proxy.name(\"m_mapped_as\");\n+    connType @29 :Int32 $Proxy.name(\"m_conn_type\");\n+    stateStats @30 :NodeStateStats $Proxy.skip;\n+}\n+\n+struct NodeStateStats $Proxy.wrap(\"CNodeStateStats\") {\n+    syncHeight @0 :Int32 $Proxy.name(\"nSyncHeight\");\n+    commonHeight @1 :Int32 $Proxy.name(\"nCommonHeight\");\n+    startingHeight @2 :Int32 $Proxy.name(\"m_starting_height\");\n+    pingWait @3 :Int64 $Proxy.name(\"m_ping_wait\");\n+    heightInFlight @4 :List(Int32) $Proxy.name(\"vHeightInFlight\");\n+    addressesProcessed @5 :UInt64 $Proxy.name(\"m_addr_processed\");\n+    addressesRateLimited @6 :UInt64 $Proxy.name(\"m_addr_rate_limited\");\n+    addressRelayEnabled @7 :Bool $Proxy.name(\"m_addr_relay_enabled\");\n+}\n+\n+struct Banmap {\n+    json @0 :Text;\n+}\n+\n+struct BlockTip $Proxy.wrap(\"interfaces::BlockTip\") {\n+    blockHeight @0 :Int32 $Proxy.name(\"block_height\");\n+    blockTime @1 :Int64 $Proxy.name(\"block_time\");\n+    blockHash @2 :Data $Proxy.name(\"block_hash\");\n+}\n+\n+struct BlockAndHeaderTipInfo $Proxy.wrap(\"interfaces::BlockAndHeaderTipInfo\") {\n+    blockHeight @0 :Int32 $Proxy.name(\"block_height\");\n+    blockTime @1 :Int64 $Proxy.name(\"block_time\");\n+    headerHeight @2 :Int32 $Proxy.name(\"header_height\");\n+    headerTime @3 :Int64 $Proxy.name(\"header_time\");\n+    verificationProgress @4 :Float64 $Proxy.name(\"verification_progress\");\n+}"
      },
      {
        "sha": "d18fc226a2dd2493d47fc53f4abf2692370c0aa5",
        "filename": "src/ipc/capnp/node.cpp",
        "status": "added",
        "additions": 135,
        "deletions": 0,
        "changes": 135,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/671afc9b4e2bdd46efcefda3fa8daf3725907587/src/ipc/capnp/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/671afc9b4e2bdd46efcefda3fa8daf3725907587/src/ipc/capnp/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/node.cpp?ref=671afc9b4e2bdd46efcefda3fa8daf3725907587",
        "patch": "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <capnp/list.h>\n+#include <interfaces/node.h>\n+#include <interfaces/wallet.h>\n+#include <ipc/capnp/context.h>\n+#include <ipc/capnp/node-types.h>\n+#include <ipc/capnp/node.capnp.h>\n+#include <ipc/capnp/node.capnp.proxy-types.h>\n+#include <ipc/capnp/node.capnp.proxy.h>\n+#include <ipc/capnp/node.h>\n+#include <kj/async-io.h>\n+#include <kj/async-prelude.h>\n+#include <kj/async.h>\n+#include <kj/memory.h>\n+#include <kj/time.h>\n+#include <kj/timer.h>\n+#include <kj/units.h>\n+#include <mp/proxy-io.h>\n+#include <mp/proxy-types.h>\n+#include <mp/util.h>\n+#include <rpc/server.h>\n+#include <sys/types.h>\n+\n+#include <cstdint>\n+#include <functional>\n+#include <memory>\n+#include <tuple>\n+#include <utility>\n+\n+class CNodeStats;\n+struct CNodeStateStats;\n+\n+namespace ipc {\n+namespace capnp {\n+class RpcTimer : public ::RPCTimerBase\n+{\n+public:\n+    RpcTimer(mp::EventLoop& loop, std::function<void(void)>& fn, int64_t millis)\n+        : m_fn(fn), m_promise(loop.m_io_context.provider->getTimer()\n+                                  .afterDelay(millis * kj::MILLISECONDS)\n+                                  .then([this]() { m_fn(); })\n+                                  .eagerlyEvaluate(nullptr))\n+    {\n+    }\n+    ~RpcTimer() noexcept override {}\n+\n+    std::function<void(void)> m_fn;\n+    kj::Promise<void> m_promise;\n+};\n+\n+class RpcTimerInterface : public ::RPCTimerInterface\n+{\n+public:\n+    RpcTimerInterface(mp::EventLoop& loop) : m_loop(loop) {}\n+    const char* Name() override { return \"Cap'n Proto\"; }\n+    RPCTimerBase* NewTimer(std::function<void(void)>& fn, int64_t millis) override\n+    {\n+        RPCTimerBase* result;\n+        m_loop.sync([&] { result = new RpcTimer(m_loop, fn, millis); });\n+        return result;\n+    }\n+    mp::EventLoop& m_loop;\n+};\n+} // namespace capnp\n+} // namespace ipc\n+\n+namespace mp {\n+void ProxyServerMethodTraits<ipc::capnp::messages::Node::RpcSetTimerInterfaceIfUnsetParams>::invoke(Context& context)\n+{\n+    if (!context.proxy_server.m_timer_interface) {\n+        auto timer = std::make_unique<ipc::capnp::RpcTimerInterface>(context.proxy_server.m_context.connection->m_loop);\n+        context.proxy_server.m_timer_interface = std::move(timer);\n+    }\n+    context.proxy_server.m_impl->rpcSetTimerInterfaceIfUnset(context.proxy_server.m_timer_interface.get());\n+}\n+\n+void ProxyServerMethodTraits<ipc::capnp::messages::Node::RpcUnsetTimerInterfaceParams>::invoke(Context& context)\n+{\n+    context.proxy_server.m_impl->rpcUnsetTimerInterface(context.proxy_server.m_timer_interface.get());\n+    context.proxy_server.m_timer_interface.reset();\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       ipc::capnp::messages::NodeStats::Reader const& reader,\n+                       std::tuple<CNodeStats, bool, CNodeStateStats>& node_stats)\n+{\n+    CNodeStats& node = std::get<0>(node_stats);\n+    ReadField(TypeList<CNodeStats>(), invoke_context, Make<ValueField>(reader), ReadDestValue(node));\n+    if ((std::get<1>(node_stats) = reader.hasStateStats())) {\n+        CNodeStateStats& state = std::get<2>(node_stats);\n+        ReadField(TypeList<CNodeStateStats>(), invoke_context, Make<ValueField>(reader.getStateStats()),\n+                  ReadDestValue(state));\n+    }\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const capnp::Data::Reader& reader,\n+                       CSubNet& subnet)\n+{\n+    std::string subnet_str = ipc::capnp::ToString(reader);\n+    if (!LookupSubNet(subnet_str, subnet)) {\n+        throw std::runtime_error(\n+            strprintf(\"Cannot parse banned address or subnet: %s\", subnet_str));\n+    }\n+}\n+\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const banmap_t& banmap,\n+                        ipc::capnp::messages::Banmap::Builder&& builder)\n+{\n+    builder.setJson(BanMapToJson(banmap).write());\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::Banmap::Reader& reader,\n+                       banmap_t& banmap)\n+{\n+    UniValue banmap_json;\n+    if (!banmap_json.read(ipc::capnp::ToString(reader.getJson()))) {\n+        throw std::runtime_error(\"Could not parse banmap json\");\n+    }\n+    BanMapFromJson(banmap_json, banmap);\n+}\n+\n+interfaces::WalletClient& ProxyClientCustom<ipc::capnp::messages::Node, interfaces::Node>::walletClient()\n+{\n+    if (!m_wallet_client) {\n+        m_wallet_client = self().customWalletClient();\n+    }\n+    return *m_wallet_client;\n+}\n+} // namespace mp"
      },
      {
        "sha": "65c87113018e7dbe13b7a4d8ca42f370555e5764",
        "filename": "src/ipc/capnp/node.h",
        "status": "added",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/671afc9b4e2bdd46efcefda3fa8daf3725907587/src/ipc/capnp/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/671afc9b4e2bdd46efcefda3fa8daf3725907587/src/ipc/capnp/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/node.h?ref=671afc9b4e2bdd46efcefda3fa8daf3725907587",
        "patch": "@@ -0,0 +1,54 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_NODE_H\n+#define BITCOIN_IPC_CAPNP_NODE_H\n+\n+#include <interfaces/node.h>\n+#include <interfaces/wallet.h>\n+#include <ipc/capnp/node.capnp.h>\n+#include <mp/proxy.h>\n+#include <rpc/server.h>\n+#include <scheduler.h>\n+\n+#include <memory>\n+#include <string>\n+\n+class RPCTimerInterface;\n+\n+//! Specialization of Node proxy server needed to add m_timer_interface\n+//! member used by rpcSetTimerInterfaceIfUnset and rpcUnsetTimerInterface\n+//! methods.\n+template <>\n+struct mp::ProxyServerCustom<ipc::capnp::messages::Node, interfaces::Node>\n+    : public mp::ProxyServerBase<ipc::capnp::messages::Node, interfaces::Node>\n+{\n+public:\n+    using ProxyServerBase::ProxyServerBase;\n+    std::unique_ptr<RPCTimerInterface> m_timer_interface;\n+};\n+\n+//! Specialization of Node client to manage memory of WalletClient& reference\n+//! returned by walletClient().\n+template <>\n+class mp::ProxyClientCustom<ipc::capnp::messages::Node, interfaces::Node>\n+    : public mp::ProxyClientBase<ipc::capnp::messages::Node, interfaces::Node>\n+{\n+public:\n+    using ProxyClientBase::ProxyClientBase;\n+    interfaces::WalletClient& walletClient() override;\n+\n+private:\n+    std::unique_ptr<interfaces::WalletClient> m_wallet_client;\n+};\n+\n+//! Specialization of Node::walletClient client code to manage memory of\n+//! WalletClient& reference returned by walletClient().\n+template <>\n+struct mp::ProxyClientMethodTraits<ipc::capnp::messages::Node::CustomWalletClientParams>\n+    : public FunctionTraits<std::unique_ptr<interfaces::WalletClient> (interfaces::Node::*const)()>\n+{\n+};\n+\n+#endif // BITCOIN_IPC_CAPNP_NODE_H"
      },
      {
        "sha": "c7bc174cf1c05726f25add5ced4f34ea0d20b603",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/671afc9b4e2bdd46efcefda3fa8daf3725907587/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/671afc9b4e2bdd46efcefda3fa8daf3725907587/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=671afc9b4e2bdd46efcefda3fa8daf3725907587",
        "patch": "@@ -272,6 +272,9 @@ class CNodeStats\n     Network m_network;\n     uint32_t m_mapped_as;\n     ConnectionType m_conn_type;\n+    // Note: If you add fields to this class, you should also consider updating\n+    // the CNode::copyStats() method, the getpeerinfo RPC (in rpc/net.cpp), and\n+    // the IPC serialization (in ipc/capnp/node.capnp).\n };\n \n "
      },
      {
        "sha": "62742aa691cc91158b2b9fffef46064047431419",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/671afc9b4e2bdd46efcefda3fa8daf3725907587/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/671afc9b4e2bdd46efcefda3fa8daf3725907587/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=671afc9b4e2bdd46efcefda3fa8daf3725907587",
        "patch": "@@ -32,6 +32,9 @@ struct CNodeStateStats {\n     uint64_t m_addr_processed = 0;\n     uint64_t m_addr_rate_limited = 0;\n     bool m_addr_relay_enabled{false};\n+    // Note: If you add fields to this struct, you should also consider updating\n+    // the getpeerinfo RPC (in rpc/net.cpp), and the IPC serialization code (in\n+    // ipc/capnp/node.cpp and ipc/capnp/node.capnp).\n };\n \n class PeerManager : public CValidationInterface, public NetEventsInterface"
      },
      {
        "sha": "f13edd96967c6bfd4498714573a05e507e0caa47",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/671afc9b4e2bdd46efcefda3fa8daf3725907587/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/671afc9b4e2bdd46efcefda3fa8daf3725907587/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=671afc9b4e2bdd46efcefda3fa8daf3725907587",
        "patch": "@@ -55,6 +55,8 @@ class proxyType\n \n     CService proxy;\n     bool randomize_credentials;\n+    // Note: If you add fields to this class, you should also update the IPC\n+    // serialization code (in ipc/capnp/node.capnp).\n };\n \n /** Credentials for proxy authentication */"
      }
    ]
  },
  {
    "sha": "a5df514889d76ea1f63b5e15565f42fc6c318885",
    "node_id": "C_kwDOABII59oAKGE1ZGY1MTQ4ODlkNzZlYTFmNjNiNWUxNTU2NWY0MmZjNmMzMTg4ODU",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-11-29T16:20:20Z"
      },
      "message": "Make bitcoin-gui spawn a bitcoin-node process\n\nSpawn node subprocess instead of running node code internally",
      "tree": {
        "sha": "d0a55c2ec333820beae76ca8180306aaea91133e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0a55c2ec333820beae76ca8180306aaea91133e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5df514889d76ea1f63b5e15565f42fc6c318885",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5df514889d76ea1f63b5e15565f42fc6c318885",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5df514889d76ea1f63b5e15565f42fc6c318885",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5df514889d76ea1f63b5e15565f42fc6c318885/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "671afc9b4e2bdd46efcefda3fa8daf3725907587",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/671afc9b4e2bdd46efcefda3fa8daf3725907587",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/671afc9b4e2bdd46efcefda3fa8daf3725907587"
      }
    ],
    "stats": {
      "total": 123,
      "additions": 104,
      "deletions": 19
    },
    "files": [
      {
        "sha": "df7f625e767cfc506b875d88477eaf6e6ae886f9",
        "filename": "src/init/bitcoin-gui.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 16,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5df514889d76ea1f63b5e15565f42fc6c318885/src/init/bitcoin-gui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5df514889d76ea1f63b5e15565f42fc6c318885/src/init/bitcoin-gui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-gui.cpp?ref=a5df514889d76ea1f63b5e15565f42fc6c318885",
        "patch": "@@ -2,17 +2,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <interfaces/chain.h>\n-#include <interfaces/echo.h>\n #include <interfaces/init.h>\n #include <interfaces/ipc.h>\n-#include <interfaces/node.h>\n-#include <interfaces/wallet.h>\n-#include <node/context.h>\n-#include <util/system.h>\n \n #include <memory>\n \n+namespace ipc {\n+namespace capnp {\n+void SetupNodeClient(ipc::Context& context);\n+} // namespace capnp\n+} // namespace ipc\n+\n namespace init {\n namespace {\n const char* EXE_NAME = \"bitcoin-gui\";\n@@ -22,18 +22,9 @@ class BitcoinGuiInit : public interfaces::Init\n public:\n     BitcoinGuiInit(const char* arg0) : m_ipc(interfaces::MakeIpc(EXE_NAME, arg0, *this))\n     {\n-        m_node.args = &gArgs;\n-        m_node.init = this;\n-    }\n-    std::unique_ptr<interfaces::Node> makeNode() override { return interfaces::MakeNode(m_node); }\n-    std::unique_ptr<interfaces::Chain> makeChain() override { return interfaces::MakeChain(m_node); }\n-    std::unique_ptr<interfaces::WalletClient> makeWalletClient(interfaces::Chain& chain) override\n-    {\n-        return MakeWalletClient(chain, *Assert(m_node.args));\n+        ipc::capnp::SetupNodeClient(m_ipc->context());\n     }\n-    std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }\n     interfaces::Ipc* ipc() override { return m_ipc.get(); }\n-    NodeContext m_node;\n     std::unique_ptr<interfaces::Ipc> m_ipc;\n };\n } // namespace"
      },
      {
        "sha": "8b57aa81b4eeeeec826c195fb8b2f213d99e08d2",
        "filename": "src/init/bitcoin-node.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 3,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5df514889d76ea1f63b5e15565f42fc6c318885/src/init/bitcoin-node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5df514889d76ea1f63b5e15565f42fc6c318885/src/init/bitcoin-node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-node.cpp?ref=a5df514889d76ea1f63b5e15565f42fc6c318885",
        "patch": "@@ -2,16 +2,29 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <chainparams.h>\n+#include <init.h>\n #include <interfaces/chain.h>\n #include <interfaces/echo.h>\n #include <interfaces/init.h>\n #include <interfaces/ipc.h>\n #include <interfaces/node.h>\n #include <interfaces/wallet.h>\n+#include <ipc/context.h>\n #include <node/context.h>\n #include <util/system.h>\n \n+#include <functional>\n #include <memory>\n+#include <string>\n+#include <utility>\n+\n+namespace ipc {\n+namespace capnp {\n+void SetupNodeServer(ipc::Context& context);\n+std::string GlobalArgsNetwork();\n+} // namespace capnp\n+} // namespace ipc\n \n namespace init {\n namespace {\n@@ -26,6 +39,14 @@ class BitcoinNodeInit : public interfaces::Init\n     {\n         m_node.args = &gArgs;\n         m_node.init = this;\n+        // Extra initialization code that runs when a bitcoin-node process is\n+        // spawned by a bitcoin-gui process, after the ArgsManager configuration\n+        // is transferred from the parent process to the child process.\n+        m_ipc->context().init_process = [this] {\n+            InitLogging(*Assert(m_node.args));\n+            InitParameterInteraction(*Assert(m_node.args));\n+        };\n+        ipc::capnp::SetupNodeServer(m_ipc->context());\n     }\n     std::unique_ptr<interfaces::Node> makeNode() override { return interfaces::MakeNode(m_node); }\n     std::unique_ptr<interfaces::Chain> makeChain() override { return interfaces::MakeChain(m_node); }\n@@ -45,9 +66,9 @@ namespace interfaces {\n std::unique_ptr<Init> MakeNodeInit(NodeContext& node, int argc, char* argv[], int& exit_status)\n {\n     auto init = std::make_unique<init::BitcoinNodeInit>(node, argc > 0 ? argv[0] : \"\");\n-    // Check if bitcoin-node is being invoked as an IPC server. If so, then\n-    // bypass normal execution and just respond to requests over the IPC\n-    // channel and return null.\n+    // Check if bitcoin-node is being invoked as an IPC server by the gui. If\n+    // so, then bypass normal execution and just respond to requests over the\n+    // IPC channel and return null.\n     if (init->m_ipc->startSpawnedProcess(argc, argv, exit_status)) {\n         return nullptr;\n     }"
      },
      {
        "sha": "c13d949a20c57cf38d7d52cb288a1bb3722aadb1",
        "filename": "src/ipc/capnp/common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5df514889d76ea1f63b5e15565f42fc6c318885/src/ipc/capnp/common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5df514889d76ea1f63b5e15565f42fc6c318885/src/ipc/capnp/common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/common.cpp?ref=a5df514889d76ea1f63b5e15565f42fc6c318885",
        "patch": "@@ -67,6 +67,8 @@ void ReadGlobalArgs(mp::InvokeContext& invoke_context, const messages::GlobalArg\n                       mp::ReadDestValue(settings));\n     });\n     SelectParams(gArgs.GetChainName());\n+    Context& ipc_context = *static_cast<Context*>(invoke_context.connection.m_loop.m_context);\n+    ipc_context.init_process();\n }\n } // namespace capnp\n } // namespace ipc"
      },
      {
        "sha": "2676b1eef7e3e994f3d847584b9bddbc05803ced",
        "filename": "src/ipc/capnp/context.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5df514889d76ea1f63b5e15565f42fc6c318885/src/ipc/capnp/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5df514889d76ea1f63b5e15565f42fc6c318885/src/ipc/capnp/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/context.h?ref=a5df514889d76ea1f63b5e15565f42fc6c318885",
        "patch": "@@ -5,8 +5,16 @@\n #ifndef BITCOIN_IPC_CAPNP_CONTEXT_H\n #define BITCOIN_IPC_CAPNP_CONTEXT_H\n \n+#include <ipc/capnp/node.capnp.h>\n #include <ipc/context.h>\n \n+namespace interfaces {\n+class Node;\n+} // namespace interfaces\n+namespace mp {\n+struct InvokeContext;\n+} // namespace mp\n+\n namespace ipc {\n namespace capnp {\n //! Cap'n Proto context struct. Generally the parent ipc::Context struct should\n@@ -16,6 +24,12 @@ namespace capnp {\n //! function and object types to capnp hooks.\n struct Context : ipc::Context\n {\n+    using MakeNodeClient = std::unique_ptr<interfaces::Node>(mp::InvokeContext& context,\n+                                                             messages::Node::Client&& client);\n+    using MakeNodeServer = kj::Own<messages::Node::Server>(mp::InvokeContext& context,\n+                                                           std::shared_ptr<interfaces::Node> impl);\n+    MakeNodeClient* make_node_client = nullptr;\n+    MakeNodeServer* make_node_server = nullptr;\n };\n } // namespace capnp\n } // namespace ipc"
      },
      {
        "sha": "f757a42df8263cc5bf9273dce81fda786a444e4a",
        "filename": "src/ipc/capnp/init-types.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5df514889d76ea1f63b5e15565f42fc6c318885/src/ipc/capnp/init-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5df514889d76ea1f63b5e15565f42fc6c318885/src/ipc/capnp/init-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/init-types.h?ref=a5df514889d76ea1f63b5e15565f42fc6c318885",
        "patch": "@@ -6,5 +6,6 @@\n #define BITCOIN_IPC_CAPNP_INIT_TYPES_H\n \n #include <ipc/capnp/echo.capnp.proxy-types.h>\n+#include <ipc/capnp/node.capnp.proxy-types.h>\n \n #endif // BITCOIN_IPC_CAPNP_INIT_TYPES_H"
      },
      {
        "sha": "3a6ae7711a0ae25b04bd8fcb51e1b1b645f078af",
        "filename": "src/ipc/capnp/init.capnp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5df514889d76ea1f63b5e15565f42fc6c318885/src/ipc/capnp/init.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5df514889d76ea1f63b5e15565f42fc6c318885/src/ipc/capnp/init.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/init.capnp?ref=a5df514889d76ea1f63b5e15565f42fc6c318885",
        "patch": "@@ -10,11 +10,14 @@ $Cxx.namespace(\"ipc::capnp::messages\");\n using Proxy = import \"/mp/proxy.capnp\";\n $Proxy.include(\"interfaces/echo.h\");\n $Proxy.include(\"interfaces/init.h\");\n+$Proxy.include(\"interfaces/node.h\");\n $Proxy.includeTypes(\"ipc/capnp/init-types.h\");\n \n using Echo = import \"echo.capnp\";\n+using Node = import \"node.capnp\";\n \n interface Init $Proxy.wrap(\"interfaces::Init\") {\n     construct @0 (threadMap: Proxy.ThreadMap) -> (threadMap :Proxy.ThreadMap);\n     makeEcho @1 (context :Proxy.Context) -> (result :Echo.Echo);\n+    makeNode @2 (context :Proxy.Context) -> (result :Node.Node);\n }"
      },
      {
        "sha": "151820b51187e883fb5592ecd3e42a869c728c68",
        "filename": "src/ipc/capnp/node-types.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5df514889d76ea1f63b5e15565f42fc6c318885/src/ipc/capnp/node-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5df514889d76ea1f63b5e15565f42fc6c318885/src/ipc/capnp/node-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/node-types.h?ref=a5df514889d76ea1f63b5e15565f42fc6c318885",
        "patch": "@@ -38,6 +38,30 @@ struct mp::ProxyServerMethodTraits<ipc::capnp::messages::Node::RpcUnsetTimerInte\n };\n \n namespace mp {\n+//! Specialization of MakeProxyClient for Node to that constructs a client\n+//! object through a function pointer so client object code relying on\n+//! net_processing types doesn't need to get linked into the bitcoin-wallet\n+//! executable.\n+template <>\n+inline std::unique_ptr<interfaces::Node> CustomMakeProxyClient<ipc::capnp::messages::Node, interfaces::Node>(\n+    InvokeContext& context, ipc::capnp::messages::Node::Client&& client)\n+{\n+    ipc::capnp::Context& ipc_context = *static_cast<ipc::capnp::Context*>(context.connection.m_loop.m_context);\n+    return ipc_context.make_node_client(context, kj::mv(client));\n+}\n+\n+//! Specialization of MakeProxyServer for Node to that constructs a server\n+//! object through a function pointer so server object code relying on\n+//! net_processing types doesn't need to get linked into the bitcoin-wallet\n+//! executable.\n+template <>\n+inline kj::Own<ipc::capnp::messages::Node::Server> CustomMakeProxyServer<ipc::capnp::messages::Node, interfaces::Node>(\n+    InvokeContext& context, std::shared_ptr<interfaces::Node>&& impl)\n+{\n+    ipc::capnp::Context& ipc_context = *static_cast<ipc::capnp::Context*>(context.connection.m_loop.m_context);\n+    return ipc_context.make_node_server(context, std::move(impl));\n+}\n+\n template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n void CustomPassField(TypeList<int, const char* const*>, ServerContext& server_context, const Fn& fn, Args&&... args)\n {"
      },
      {
        "sha": "a32125009c90fff11e9cea32c2f1f6f870af95ce",
        "filename": "src/ipc/capnp/node.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5df514889d76ea1f63b5e15565f42fc6c318885/src/ipc/capnp/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5df514889d76ea1f63b5e15565f42fc6c318885/src/ipc/capnp/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/node.cpp?ref=a5df514889d76ea1f63b5e15565f42fc6c318885",
        "patch": "@@ -35,6 +35,16 @@ struct CNodeStateStats;\n \n namespace ipc {\n namespace capnp {\n+void SetupNodeClient(ipc::Context& context)\n+{\n+    static_cast<Context&>(context).make_node_client = mp::MakeProxyClient<messages::Node, interfaces::Node>;\n+}\n+\n+void SetupNodeServer(ipc::Context& context)\n+{\n+    static_cast<Context&>(context).make_node_server = mp::MakeProxyServer<messages::Node, interfaces::Node>;\n+}\n+\n class RpcTimer : public ::RPCTimerBase\n {\n public:"
      },
      {
        "sha": "b382c25e737784fcc23cc636b7b4993cd0f423d1",
        "filename": "src/ipc/context.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5df514889d76ea1f63b5e15565f42fc6c318885/src/ipc/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5df514889d76ea1f63b5e15565f42fc6c318885/src/ipc/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/context.h?ref=a5df514889d76ea1f63b5e15565f42fc6c318885",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_IPC_CONTEXT_H\n #define BITCOIN_IPC_CONTEXT_H\n \n+#include <functional>\n+\n namespace ipc {\n //! Context struct used to give IPC protocol implementations or implementation\n //! hooks access to application state, in case they need to run extra code that\n@@ -13,6 +15,9 @@ namespace ipc {\n //! with shared objects that are created or destroyed remotely.\n struct Context\n {\n+    //! Callback to initialize spawned process after receiving ArgsManager\n+    //! configuration from parent.\n+    std::function<void()> init_process;\n };\n } // namespace ipc\n "
      },
      {
        "sha": "a1dec003bc0b362b0004d053084d39328345c23f",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5df514889d76ea1f63b5e15565f42fc6c318885/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5df514889d76ea1f63b5e15565f42fc6c318885/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=a5df514889d76ea1f63b5e15565f42fc6c318885",
        "patch": "@@ -10,8 +10,10 @@\n \n #include <chainparams.h>\n #include <init.h>\n+#include <init/common.h>\n #include <interfaces/handler.h>\n #include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <interfaces/node.h>\n #include <node/ui_interface.h>\n #include <noui.h>\n@@ -281,6 +283,18 @@ void BitcoinApplication::createNode(interfaces::Init& init)\n {\n     assert(!m_node);\n     m_node = init.makeNode();\n+    if (!m_node) {\n+        // If node is not part of current process, need to initialize logging.\n+        if (!init::StartLogging(gArgs)) {\n+            throw std::runtime_error(\"StartLogging failed\");\n+        }\n+\n+        // If node is not part of current process, spawn new bitcoin-node\n+        // process.\n+        auto node_init = init.ipc()->spawnProcess(\"bitcoin-node\");\n+        m_node = node_init->makeNode();\n+        init.ipc()->addCleanup(*m_node, [node_init = node_init.release()] { delete node_init; });\n+    }\n     if (optionsModel) optionsModel->setNode(*m_node);\n     if (m_splash) m_splash->setNode(*m_node);\n }"
      }
    ]
  },
  {
    "sha": "e45957225cbc5c12f431b2e78cbbe2a45289573f",
    "node_id": "C_kwDOABII59oAKGU0NTk1NzIyNWNiYzVjMTJmNDMxYjJlNzhjYmJlMmE0NTI4OTU3M2Y",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-11-29T16:20:20Z"
      },
      "message": "Make bitcoin-node spawn a bitcoin-wallet process\n\nSpawn wallet subprocess instead of running wallet code internally",
      "tree": {
        "sha": "5ac5aed4c484028a523af9f4680877f306af8438",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ac5aed4c484028a523af9f4680877f306af8438"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e45957225cbc5c12f431b2e78cbbe2a45289573f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e45957225cbc5c12f431b2e78cbbe2a45289573f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e45957225cbc5c12f431b2e78cbbe2a45289573f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e45957225cbc5c12f431b2e78cbbe2a45289573f/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5df514889d76ea1f63b5e15565f42fc6c318885",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5df514889d76ea1f63b5e15565f42fc6c318885",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5df514889d76ea1f63b5e15565f42fc6c318885"
      }
    ],
    "stats": {
      "total": 186,
      "additions": 171,
      "deletions": 15
    },
    "files": [
      {
        "sha": "ca56cd1a1e434da8d2e8d614fce4bcedbc7cc503",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e45957225cbc5c12f431b2e78cbbe2a45289573f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e45957225cbc5c12f431b2e78cbbe2a45289573f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=e45957225cbc5c12f431b2e78cbbe2a45289573f",
        "patch": "@@ -347,7 +347,6 @@ libbitcoin_server_a_SOURCES = \\\n   node/minisketchwrapper.cpp \\\n   node/psbt.cpp \\\n   node/transaction.cpp \\\n-  node/ui_interface.cpp \\\n   noui.cpp \\\n   policy/fees.cpp \\\n   policy/packages.cpp \\\n@@ -549,6 +548,7 @@ libbitcoin_common_a_SOURCES = \\\n   netaddress.cpp \\\n   netbase.cpp \\\n   net_permissions.cpp \\\n+  node/ui_interface.cpp \\\n   outputtype.cpp \\\n   policy/feerate.cpp \\\n   policy/policy.cpp \\\n@@ -663,7 +663,7 @@ bitcoin_node_SOURCES = $(bitcoin_daemon_sources) init/bitcoin-node.cpp\n bitcoin_node_CPPFLAGS = $(bitcoin_bin_cppflags)\n bitcoin_node_CXXFLAGS = $(bitcoin_bin_cxxflags)\n bitcoin_node_LDFLAGS = $(bitcoin_bin_ldflags)\n-bitcoin_node_LDADD = $(LIBBITCOIN_SERVER) $(bitcoin_bin_ldadd) $(LIBBITCOIN_IPC) $(LIBMULTIPROCESS_LIBS)\n+bitcoin_node_LDADD = $(LIBBITCOIN_SERVER) $(bitcoin_bin_ldadd) $(LIBBITCOIN_IPC) $(LIBMULTIPROCESS_LIBS) $(LIBBITCOIN_WALLET)\n \n # bitcoin-cli binary #\n bitcoin_cli_SOURCES = bitcoin-cli.cpp\n@@ -707,22 +707,22 @@ bitcoin_tx_LDADD += $(BOOST_LIBS)\n \n # bitcoin-wallet binary #\n bitcoin_wallet_SOURCES = bitcoin-wallet.cpp\n+if BUILD_MULTIPROCESS\n+bitcoin_wallet_SOURCES += init/bitcoin-wallet-ipc.cpp\n+else\n bitcoin_wallet_SOURCES += init/bitcoin-wallet.cpp\n+endif\n bitcoin_wallet_CPPFLAGS = $(bitcoin_bin_cppflags)\n bitcoin_wallet_CXXFLAGS = $(bitcoin_bin_cxxflags)\n bitcoin_wallet_LDFLAGS = $(bitcoin_bin_ldflags)\n bitcoin_wallet_LDADD = \\\n   $(LIBBITCOIN_WALLET_TOOL) \\\n-  $(LIBBITCOIN_WALLET) \\\n+  $(bitcoin_bin_ldadd) \\\n+  $(LIBBITCOIN_IPC) \\\n   $(LIBBITCOIN_COMMON) \\\n-  $(LIBBITCOIN_UTIL) \\\n-  $(LIBUNIVALUE) \\\n-  $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\\n-  $(LIBSECP256K1) \\\n-  $(BOOST_LIBS) \\\n-  $(BDB_LIBS) \\\n-  $(SQLITE_LIBS)\n+  $(LIBBITCOIN_UTIL) \\\n+  $(LIBMULTIPROCESS_LIBS)\n \n if TARGET_WINDOWS\n bitcoin_wallet_SOURCES += bitcoin-wallet-res.rc\n@@ -843,6 +843,7 @@ libbitcoin_ipc_a_SOURCES = \\\n   ipc/capnp/common.h \\\n   ipc/capnp/context.h \\\n   ipc/capnp/init-types.h \\\n+  ipc/capnp/init.cpp \\\n   ipc/capnp/node-types.h \\\n   ipc/capnp/node.cpp \\\n   ipc/capnp/node.h \\"
      },
      {
        "sha": "d52621f96e3382ec8acb9652e87778f0e627d606",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e45957225cbc5c12f431b2e78cbbe2a45289573f/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e45957225cbc5c12f431b2e78cbbe2a45289573f/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=e45957225cbc5c12f431b2e78cbbe2a45289573f",
        "patch": "@@ -18,7 +18,7 @@\n #include <functional>\n \n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n-UrlDecodeFn* const URL_DECODE = nullptr;\n+UrlDecodeFn* const URL_DECODE = urlDecode;\n \n static void SetupWalletToolArgs(ArgsManager& argsman)\n {"
      },
      {
        "sha": "24a56a1a664aa39ece003040606a4e341701e0f5",
        "filename": "src/init/bitcoin-node.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e45957225cbc5c12f431b2e78cbbe2a45289573f/src/init/bitcoin-node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e45957225cbc5c12f431b2e78cbbe2a45289573f/src/init/bitcoin-node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-node.cpp?ref=e45957225cbc5c12f431b2e78cbbe2a45289573f",
        "patch": "@@ -50,10 +50,6 @@ class BitcoinNodeInit : public interfaces::Init\n     }\n     std::unique_ptr<interfaces::Node> makeNode() override { return interfaces::MakeNode(m_node); }\n     std::unique_ptr<interfaces::Chain> makeChain() override { return interfaces::MakeChain(m_node); }\n-    std::unique_ptr<interfaces::WalletClient> makeWalletClient(interfaces::Chain& chain) override\n-    {\n-        return MakeWalletClient(chain, *Assert(m_node.args));\n-    }\n     std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }\n     interfaces::Ipc* ipc() override { return m_ipc.get(); }\n     NodeContext& m_node;"
      },
      {
        "sha": "f5c13cd1c4173cddfb8989a90e2f1820b2c582d6",
        "filename": "src/init/bitcoin-wallet-ipc.cpp",
        "status": "added",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e45957225cbc5c12f431b2e78cbbe2a45289573f/src/init/bitcoin-wallet-ipc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e45957225cbc5c12f431b2e78cbbe2a45289573f/src/init/bitcoin-wallet-ipc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-wallet-ipc.cpp?ref=e45957225cbc5c12f431b2e78cbbe2a45289573f",
        "patch": "@@ -0,0 +1,84 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <fs.h>\n+#include <init/common.h>\n+#include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n+#include <interfaces/wallet.h>\n+#include <ipc/context.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+\n+#include <algorithm>\n+#include <functional>\n+#include <memory>\n+#include <stdexcept>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+namespace interfaces {\n+class Chain;\n+} // namespace interfaces\n+\n+namespace ipc {\n+namespace capnp {\n+std::string GlobalArgsNetwork();\n+} // namespace capnp\n+} // namespace ipc\n+\n+namespace init {\n+namespace {\n+const char* EXE_NAME = \"bitcoin-wallet\";\n+\n+class BitcoinWalletInit : public interfaces::Init\n+{\n+public:\n+    BitcoinWalletInit(const char* arg0) : m_ipc(interfaces::MakeIpc(EXE_NAME, arg0, *this))\n+    {\n+        // Extra initialization code that runs when a bitcoin-wallet process is\n+        // spawned by a bitcoin-node process, after the ArgsManager\n+        // configuration is transferred from the parent process to the child\n+        // process.\n+        m_ipc->context().init_process = [] {\n+            init::SetGlobals();\n+            if (!init::SanityChecks()) {\n+                throw std::runtime_error(\"Initial sanity checks failure\");\n+            }\n+            init::SetLoggingOptions(gArgs);\n+            init::SetLoggingCategories(gArgs);\n+            if (!init::StartLogging(gArgs)) {\n+                throw std::runtime_error(\"Logging start failure\");\n+            }\n+        };\n+    }\n+    std::unique_ptr<interfaces::WalletClient> makeWalletClient(interfaces::Chain& chain) override\n+    {\n+        return MakeWalletClient(chain, gArgs);\n+    }\n+    interfaces::Ipc* ipc() override { return m_ipc.get(); }\n+    std::unique_ptr<interfaces::Ipc> m_ipc;\n+};\n+} // namespace\n+} // namespace init\n+\n+namespace interfaces {\n+std::unique_ptr<Init> MakeWalletInit(int argc, char* argv[], int& exit_status)\n+{\n+    auto init = std::make_unique<init::BitcoinWalletInit>(argc > 0 ? argv[0] : \"\");\n+    // Check if bitcoin-wallet is being invoked as an IPC server. If so, then\n+    // bypass normal execution and just respond to requests over the IPC\n+    // channel and finally return null.\n+    if (init->m_ipc->startSpawnedProcess(argc, argv, exit_status)) {\n+        return nullptr;\n+    }\n+    return init;\n+}\n+} // namespace interfaces"
      },
      {
        "sha": "8c444add4b35d8af7b604c245a8c9920bb150c59",
        "filename": "src/ipc/capnp/init-types.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e45957225cbc5c12f431b2e78cbbe2a45289573f/src/ipc/capnp/init-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e45957225cbc5c12f431b2e78cbbe2a45289573f/src/ipc/capnp/init-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/init-types.h?ref=e45957225cbc5c12f431b2e78cbbe2a45289573f",
        "patch": "@@ -5,7 +5,31 @@\n #ifndef BITCOIN_IPC_CAPNP_INIT_TYPES_H\n #define BITCOIN_IPC_CAPNP_INIT_TYPES_H\n \n+#include <ipc/capnp/chain.capnp.proxy-types.h>\n #include <ipc/capnp/echo.capnp.proxy-types.h>\n+#include <ipc/capnp/init.capnp.proxy.h>\n #include <ipc/capnp/node.capnp.proxy-types.h>\n \n+namespace mp {\n+//! Specialization of makeWalletClient needed because it takes a Chain& reference\n+//! argument, not a unique_ptr<Chain> argument, so a manual cleanup\n+//! callback is needed to clean up the ProxyServer<messages::Chain> proxy object.\n+template <>\n+struct ProxyServerMethodTraits<ipc::capnp::messages::Init::MakeWalletClientParams>\n+{\n+    using Context = ServerContext<ipc::capnp::messages::Init,\n+                                  ipc::capnp::messages::Init::MakeWalletClientParams,\n+                                  ipc::capnp::messages::Init::MakeWalletClientResults>;\n+    static capnp::Void invoke(Context& context);\n+};\n+\n+//! Chain& server-side argument handling. Skips argument so it can\n+//! be handled by ProxyServerCustom code.\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+void CustomPassField(TypeList<interfaces::Chain&>, ServerContext& server_context, const Fn& fn, Args&&... args)\n+{\n+    fn.invoke(server_context, std::forward<Args>(args)...);\n+}\n+} // namespace mp\n+\n #endif // BITCOIN_IPC_CAPNP_INIT_TYPES_H"
      },
      {
        "sha": "e2fa768db654cbc7fa870a173cc2c11a07e2324c",
        "filename": "src/ipc/capnp/init.capnp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e45957225cbc5c12f431b2e78cbbe2a45289573f/src/ipc/capnp/init.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e45957225cbc5c12f431b2e78cbbe2a45289573f/src/ipc/capnp/init.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/init.capnp?ref=e45957225cbc5c12f431b2e78cbbe2a45289573f",
        "patch": "@@ -8,16 +8,22 @@ using Cxx = import \"/capnp/c++.capnp\";\n $Cxx.namespace(\"ipc::capnp::messages\");\n \n using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"interfaces/chain.h\");\n $Proxy.include(\"interfaces/echo.h\");\n $Proxy.include(\"interfaces/init.h\");\n $Proxy.include(\"interfaces/node.h\");\n $Proxy.includeTypes(\"ipc/capnp/init-types.h\");\n \n+using Chain = import \"chain.capnp\";\n+using Common = import \"common.capnp\";\n using Echo = import \"echo.capnp\";\n using Node = import \"node.capnp\";\n+using Wallet = import \"wallet.capnp\";\n \n interface Init $Proxy.wrap(\"interfaces::Init\") {\n     construct @0 (threadMap: Proxy.ThreadMap) -> (threadMap :Proxy.ThreadMap);\n     makeEcho @1 (context :Proxy.Context) -> (result :Echo.Echo);\n     makeNode @2 (context :Proxy.Context) -> (result :Node.Node);\n+    makeChain @3 (context :Proxy.Context) -> (result :Chain.Chain);\n+    makeWalletClient @4 (context :Proxy.Context, globalArgs :Common.GlobalArgs, chain :Chain.Chain) -> (result :Wallet.WalletClient);\n }"
      },
      {
        "sha": "47f2bcc9f1050741a80878cd81a9a62932e269f6",
        "filename": "src/ipc/capnp/init.cpp",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e45957225cbc5c12f431b2e78cbbe2a45289573f/src/ipc/capnp/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e45957225cbc5c12f431b2e78cbbe2a45289573f/src/ipc/capnp/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/init.cpp?ref=e45957225cbc5c12f431b2e78cbbe2a45289573f",
        "patch": "@@ -0,0 +1,36 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <capnp/capability.h>\n+#include <interfaces/chain.h>\n+#include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n+#include <interfaces/wallet.h>\n+#include <ipc/capnp/chain.capnp.h>\n+#include <ipc/capnp/chain.capnp.proxy.h>\n+#include <ipc/capnp/context.h>\n+#include <ipc/capnp/init-types.h>\n+#include <ipc/capnp/init.capnp.h>\n+#include <ipc/capnp/init.capnp.proxy.h>\n+#include <mp/proxy-io.h>\n+\n+#include <memory>\n+#include <utility>\n+\n+namespace mp {\n+template <typename Interface> struct ProxyClient;\n+\n+::capnp::Void ProxyServerMethodTraits<ipc::capnp::messages::Init::MakeWalletClientParams>::invoke(Context& context)\n+{\n+    auto params = context.call_context.getParams();\n+    auto chain = std::make_unique<ProxyClient<ipc::capnp::messages::Chain>>(\n+        params.getChain(), context.proxy_server.m_context.connection, /* destroy_connection= */ false);\n+    auto wallet_client = context.proxy_server.m_impl->makeWalletClient(*chain);\n+    auto results = context.call_context.getResults();\n+    auto result = kj::heap<ProxyServer<ipc::capnp::messages::WalletClient>>(std::shared_ptr<interfaces::WalletClient>(wallet_client.release()), *context.proxy_server.m_context.connection);\n+    result->m_context.cleanup.emplace_back([chain = chain.release()] { delete chain; });\n+    results.setResult(kj::mv(result));\n+    return {};\n+}\n+} // namespace mp"
      },
      {
        "sha": "5209e72e74ff1bb10aca6cdc989b70aac5507083",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e45957225cbc5c12f431b2e78cbbe2a45289573f/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e45957225cbc5c12f431b2e78cbbe2a45289573f/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=e45957225cbc5c12f431b2e78cbbe2a45289573f",
        "patch": "@@ -6,6 +6,7 @@\n #include <init.h>\n #include <interfaces/chain.h>\n #include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <interfaces/wallet.h>\n #include <net.h>\n #include <node/context.h>\n@@ -131,6 +132,13 @@ void WalletInit::Construct(NodeContext& node) const\n         return;\n     }\n     auto wallet_client = node.init->makeWalletClient(*node.chain);\n+    if (!wallet_client) {\n+        // If the current process doesn't have wallet support linked in, spawn\n+        // a new wallet process.\n+        auto init = node.init->ipc()->spawnProcess(\"bitcoin-wallet\");\n+        wallet_client = init->makeWalletClient(*node.chain);\n+        node.init->ipc()->addCleanup(*wallet_client, [init = init.release()] { delete init; });\n+    }\n     node.wallet_client = wallet_client.get();\n     node.chain_clients.emplace_back(std::move(wallet_client));\n }"
      },
      {
        "sha": "11f6cbaf8ae10a71d4df140cd07c31f257ad800b",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e45957225cbc5c12f431b2e78cbbe2a45289573f/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e45957225cbc5c12f431b2e78cbbe2a45289573f/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=e45957225cbc5c12f431b2e78cbbe2a45289573f",
        "patch": "@@ -115,6 +115,7 @@ def test_args_log(self):\n                     'secret-torpassword',\n                 ]):\n             self.start_node(0, extra_args=[\n+                '-debugexclude=ipc',\n                 '-addnode=some.node',\n                 '-rpcauth=alice:f7efda5c189b999524f151318c0c86$d5b51b3beffbc0',\n                 '-rpcbind=127.1.1.1',"
      }
    ]
  },
  {
    "sha": "e47c133dfc4e1b8ecec908bcb1bb535f12659205",
    "node_id": "C_kwDOABII59oAKGU0N2MxMzNkZmM0ZTFiOGVjZWM5MDhiY2IxYmI1MzVmMTI2NTkyMDU",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-30T23:35:04Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-11-29T16:20:20Z"
      },
      "message": "multiprocess: Add debug.log .wallet/.gui suffixes\n\nAdd .wallet/.gui suffixes to log files created by bitcoin-gui and\nbitcoin-wallet processes so they don't clash with bitcoin-node log file.",
      "tree": {
        "sha": "eef463e36516ca222185b3d99ecf3feefa347de9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eef463e36516ca222185b3d99ecf3feefa347de9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e47c133dfc4e1b8ecec908bcb1bb535f12659205",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e47c133dfc4e1b8ecec908bcb1bb535f12659205",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e47c133dfc4e1b8ecec908bcb1bb535f12659205",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e47c133dfc4e1b8ecec908bcb1bb535f12659205/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e45957225cbc5c12f431b2e78cbbe2a45289573f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e45957225cbc5c12f431b2e78cbbe2a45289573f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e45957225cbc5c12f431b2e78cbbe2a45289573f"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 58,
      "deletions": 34
    },
    "files": [
      {
        "sha": "04b5b778be3d476b35d1b08c832722eb20654cbf",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -13,6 +13,7 @@\n #include <init.h>\n #include <interfaces/chain.h>\n #include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <node/context.h>\n #include <node/ui_interface.h>\n #include <noui.h>\n@@ -174,7 +175,8 @@ static bool AppInit(NodeContext& node, int argc, char* argv[])\n         // -server defaults to true for bitcoind but not for the GUI so do this here\n         args.SoftSetBoolArg(\"-server\", true);\n         // Set this early so that parameter interactions go to console\n-        InitLogging(args);\n+        interfaces::Ipc* ipc = node.init->ipc();\n+        InitLogging(args, ipc ? ipc->logSuffix() : nullptr);\n         InitParameterInteraction(args);\n         if (!AppInitBasicSetup(args)) {\n             // InitError will have been called with detailed error, which ends up on console"
      },
      {
        "sha": "fbd976cd03f6828aec0823c96a2d7d7a84acdf8c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -713,9 +713,9 @@ void InitParameterInteraction(ArgsManager& args)\n  * Note that this is called very early in the process lifetime, so you should be\n  * careful about what global state you rely on here.\n  */\n-void InitLogging(const ArgsManager& args)\n+void InitLogging(const ArgsManager& args, const char* log_suffix)\n {\n-    init::SetLoggingOptions(args);\n+    init::SetLoggingOptions(args, log_suffix);\n     init::LogPackageVersion();\n }\n "
      },
      {
        "sha": "14fbe857c3b49a61e0efc0374fd0a34603adcb97",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -25,7 +25,7 @@ struct BlockAndHeaderTipInfo;\n void Interrupt(NodeContext& node);\n void Shutdown(NodeContext& node);\n //!Initialize the logging infrastructure\n-void InitLogging(const ArgsManager& args);\n+void InitLogging(const ArgsManager& args, const char* log_suffix);\n //!Parameter interaction: change current parameters depending on various rules\n void InitParameterInteraction(ArgsManager& args);\n "
      },
      {
        "sha": "705d0ce108c001b912f1196d23250085a4c1886d",
        "filename": "src/init/bitcoin-gui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/init/bitcoin-gui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/init/bitcoin-gui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-gui.cpp?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -20,7 +20,7 @@ const char* EXE_NAME = \"bitcoin-gui\";\n class BitcoinGuiInit : public interfaces::Init\n {\n public:\n-    BitcoinGuiInit(const char* arg0) : m_ipc(interfaces::MakeIpc(EXE_NAME, arg0, *this))\n+    BitcoinGuiInit(const char* arg0) : m_ipc(interfaces::MakeIpc(EXE_NAME, \".gui\", arg0, *this))\n     {\n         ipc::capnp::SetupNodeClient(m_ipc->context());\n     }"
      },
      {
        "sha": "4f7e6f839533951e218cf5b524e00661dea27262",
        "filename": "src/init/bitcoin-node.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/init/bitcoin-node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/init/bitcoin-node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-node.cpp?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -34,16 +34,15 @@ class BitcoinNodeInit : public interfaces::Init\n {\n public:\n     BitcoinNodeInit(NodeContext& node, const char* arg0)\n-        : m_node(node),\n-          m_ipc(interfaces::MakeIpc(EXE_NAME, arg0, *this))\n+        : m_node(node), m_ipc(interfaces::MakeIpc(EXE_NAME, \"\", arg0, *this))\n     {\n         m_node.args = &gArgs;\n         m_node.init = this;\n         // Extra initialization code that runs when a bitcoin-node process is\n         // spawned by a bitcoin-gui process, after the ArgsManager configuration\n         // is transferred from the parent process to the child process.\n         m_ipc->context().init_process = [this] {\n-            InitLogging(*Assert(m_node.args));\n+            InitLogging(*Assert(m_node.args), m_ipc->logSuffix());\n             InitParameterInteraction(*Assert(m_node.args));\n         };\n         ipc::capnp::SetupNodeServer(m_ipc->context());"
      },
      {
        "sha": "ded48e990892ff0cdd7ae3c8f323c5ba76557272",
        "filename": "src/init/bitcoin-wallet-ipc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/init/bitcoin-wallet-ipc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/init/bitcoin-wallet-ipc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-wallet-ipc.cpp?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -41,18 +41,18 @@ const char* EXE_NAME = \"bitcoin-wallet\";\n class BitcoinWalletInit : public interfaces::Init\n {\n public:\n-    BitcoinWalletInit(const char* arg0) : m_ipc(interfaces::MakeIpc(EXE_NAME, arg0, *this))\n+    BitcoinWalletInit(const char* arg0) : m_ipc(interfaces::MakeIpc(EXE_NAME, \".wallet\", arg0, *this))\n     {\n         // Extra initialization code that runs when a bitcoin-wallet process is\n         // spawned by a bitcoin-node process, after the ArgsManager\n         // configuration is transferred from the parent process to the child\n         // process.\n-        m_ipc->context().init_process = [] {\n+        m_ipc->context().init_process = [this] {\n             init::SetGlobals();\n             if (!init::SanityChecks()) {\n                 throw std::runtime_error(\"Initial sanity checks failure\");\n             }\n-            init::SetLoggingOptions(gArgs);\n+            init::SetLoggingOptions(gArgs, m_ipc->logSuffix());\n             init::SetLoggingCategories(gArgs);\n             if (!init::StartLogging(gArgs)) {\n                 throw std::runtime_error(\"Logging start failure\");"
      },
      {
        "sha": "04547e90672cb624f6cf2036d74ae928ab946a72",
        "filename": "src/init/common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/init/common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/init/common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/common.cpp?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -78,10 +78,11 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n }\n \n-void SetLoggingOptions(const ArgsManager& args)\n+void SetLoggingOptions(const ArgsManager& args, const char* log_suffix)\n {\n     LogInstance().m_print_to_file = !args.IsArgNegated(\"-debuglogfile\");\n     LogInstance().m_file_path = AbsPathForConfigVal(fs::PathFromString(args.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE)));\n+    if (log_suffix && LogInstance().m_file_path != \"/dev/null\") LogInstance().m_file_path += log_suffix;\n     LogInstance().m_print_to_console = args.GetBoolArg(\"-printtoconsole\", !args.GetBoolArg(\"-daemon\", false));\n     LogInstance().m_log_timestamps = args.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n     LogInstance().m_log_time_micros = args.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);"
      },
      {
        "sha": "a10b8330afa08b4be7d82a88863282c5a6dee55e",
        "filename": "src/init/common.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/init/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/init/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/common.h?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -19,7 +19,7 @@ void UnsetGlobals();\n  */\n bool SanityChecks();\n void AddLoggingArgs(ArgsManager& args);\n-void SetLoggingOptions(const ArgsManager& args);\n+void SetLoggingOptions(const ArgsManager& args, const char* log_suffix);\n void SetLoggingCategories(const ArgsManager& args);\n bool StartLogging(const ArgsManager& args);\n void LogPackageVersion();"
      },
      {
        "sha": "f8638f5cb667eeed6284137a228a3e90f38074c6",
        "filename": "src/interfaces/ipc.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/interfaces/ipc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/interfaces/ipc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/ipc.h?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -65,14 +65,17 @@ class Ipc\n     //! IPC context struct accessor (see struct definition for more description).\n     virtual ipc::Context& context() = 0;\n \n+    //! Suffix for debug.log to avoid output clashes from different processes.\n+    virtual const char* logSuffix() = 0;\n+\n protected:\n     //! Internal implementation of public addCleanup method (above) as a\n     //! type-erased virtual function, since template functions can't be virtual.\n     virtual void addCleanup(std::type_index type, void* iface, std::function<void()> cleanup) = 0;\n };\n \n //! Return implementation of Ipc interface.\n-std::unique_ptr<Ipc> MakeIpc(const char* exe_name, const char* process_argv0, Init& init);\n+std::unique_ptr<Ipc> MakeIpc(const char* exe_name, const char* log_suffix, const char* process_argv0, Init& init);\n } // namespace interfaces\n \n #endif // BITCOIN_INTERFACES_IPC_H"
      },
      {
        "sha": "16135b21ad671b8e688c1fffb5baa187125f17d4",
        "filename": "src/ipc/interfaces.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/ipc/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/ipc/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/interfaces.cpp?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -28,8 +28,8 @@ namespace {\n class IpcImpl : public interfaces::Ipc\n {\n public:\n-    IpcImpl(const char* exe_name, const char* process_argv0, interfaces::Init& init)\n-        : m_exe_name(exe_name), m_process_argv0(process_argv0), m_init(init),\n+    IpcImpl(const char* exe_name, const char* log_suffix, const char* process_argv0, interfaces::Init& init)\n+        : m_exe_name(exe_name), m_log_suffix(log_suffix), m_process_argv0(process_argv0), m_init(init),\n           m_protocol(ipc::capnp::MakeCapnpProtocol()), m_process(ipc::MakeProcess())\n     {\n     }\n@@ -61,7 +61,9 @@ class IpcImpl : public interfaces::Ipc\n         m_protocol->addCleanup(type, iface, std::move(cleanup));\n     }\n     Context& context() override { return m_protocol->context(); }\n+    const char* logSuffix() override { return m_log_suffix; }\n     const char* m_exe_name;\n+    const char* m_log_suffix;\n     const char* m_process_argv0;\n     interfaces::Init& m_init;\n     std::unique_ptr<Protocol> m_protocol;\n@@ -71,8 +73,8 @@ class IpcImpl : public interfaces::Ipc\n } // namespace ipc\n \n namespace interfaces {\n-std::unique_ptr<Ipc> MakeIpc(const char* exe_name, const char* process_argv0, Init& init)\n+std::unique_ptr<Ipc> MakeIpc(const char* exe_name, const char* log_suffix, const char* process_argv0, Init& init)\n {\n-    return std::make_unique<ipc::IpcImpl>(exe_name, process_argv0, init);\n+    return std::make_unique<ipc::IpcImpl>(exe_name, log_suffix, process_argv0, init);\n }\n } // namespace interfaces"
      },
      {
        "sha": "91b99647f09e9442db78b5632b3d40abe3f33fe2",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -11,6 +11,8 @@\n #include <init.h>\n #include <interfaces/chain.h>\n #include <interfaces/handler.h>\n+#include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <interfaces/node.h>\n #include <interfaces/wallet.h>\n #include <mapport.h>\n@@ -84,7 +86,11 @@ class NodeImpl : public Node\n     ChainstateManager& chainman() { return *Assert(m_context->chainman); }\n public:\n     explicit NodeImpl(NodeContext& context) { setContext(&context); }\n-    void initLogging() override { InitLogging(*Assert(m_context->args)); }\n+    void initLogging() override\n+    {\n+        interfaces::Ipc* ipc = m_context->init->ipc();\n+        InitLogging(*Assert(m_context->args), ipc ? ipc->logSuffix() : nullptr);\n+    }\n     void initParameterInteraction() override { InitParameterInteraction(*Assert(m_context->args)); }\n     bilingual_str getWarnings() override { return GetWarnings(true); }\n     uint32_t getLogCategories() override { return LogInstance().GetCategoryMask(); }"
      },
      {
        "sha": "f865f00aa7c8eeea6dbb2810ed9e024a357c4dea",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -317,13 +317,14 @@ void BitcoinApplication::startThread()\n     connect(this, &BitcoinApplication::requestedShutdown, &m_executor.value(), &InitExecutor::shutdown);\n }\n \n-void BitcoinApplication::parameterSetup()\n+void BitcoinApplication::parameterSetup(interfaces::Init& init)\n {\n     // Default printtoconsole to false for the GUI. GUI programs should not\n     // print to the console unnecessarily.\n     gArgs.SoftSetBoolArg(\"-printtoconsole\", false);\n \n-    InitLogging(gArgs);\n+    interfaces::Ipc* ipc = init.ipc();\n+    InitLogging(gArgs, ipc ? ipc->logSuffix() : nullptr);\n     InitParameterInteraction(gArgs);\n }\n \n@@ -624,7 +625,7 @@ int GuiMain(int argc, char* argv[])\n     // Install qDebug() message handler to route to debug.log\n     qInstallMessageHandler(DebugMessageHandler);\n     // Allow parameter interaction before we create the options model\n-    app.parameterSetup();\n+    app.parameterSetup(*init);\n     GUIUtil::LogQtInfo();\n     // Load GUI settings from QSettings\n     app.createOptionsModel(gArgs.GetBoolArg(\"-resetguisettings\", false));"
      },
      {
        "sha": "bcc61817a4e393077910d5e7274c5b65f8729158",
        "filename": "src/qt/bitcoin.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/qt/bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/qt/bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.h?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -45,7 +45,7 @@ class BitcoinApplication: public QApplication\n     void createPaymentServer();\n #endif\n     /// parameter interaction/setup based on rules\n-    void parameterSetup();\n+    void parameterSetup(interfaces::Init& init);\n     /// Create options model\n     void createOptionsModel(bool resetSettings);\n     /// Initialize prune setting"
      },
      {
        "sha": "81f6711b831591c5231517d08572d5cba9ca31b9",
        "filename": "src/qt/test/apptests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/qt/test/apptests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/qt/test/apptests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.cpp?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -56,7 +56,7 @@ void TestRpcCommand(RPCConsole* console)\n } // namespace\n \n //! Entry point for BitcoinApplication tests.\n-void AppTests::appTests()\n+void AppTests::appTests(interfaces::Init& init)\n {\n #ifdef Q_OS_MAC\n     if (QApplication::platformName() == \"minimal\") {\n@@ -76,7 +76,7 @@ void AppTests::appTests()\n     }());\n \n     qRegisterMetaType<interfaces::BlockAndHeaderTipInfo>(\"interfaces::BlockAndHeaderTipInfo\");\n-    m_app.parameterSetup();\n+    m_app.parameterSetup(init);\n     m_app.createOptionsModel(true /* reset settings */);\n     QScopedPointer<const NetworkStyle> style(NetworkStyle::instantiate(Params().NetworkIDString()));\n     m_app.setupPlatformStyle();"
      },
      {
        "sha": "deab018ccbd9e6beb2d012fa135ff4fdd58838ee",
        "filename": "src/qt/test/apptests.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/qt/test/apptests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/qt/test/apptests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.h?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -14,14 +14,18 @@ class BitcoinApplication;\n class BitcoinGUI;\n class RPCConsole;\n \n+namespace interfaces {\n+class Init;\n+} // namespace interfaces\n+\n class AppTests : public QObject\n {\n     Q_OBJECT\n public:\n     explicit AppTests(BitcoinApplication& app) : m_app(app) {}\n \n private Q_SLOTS:\n-    void appTests();\n+    void appTests(interfaces::Init& init);\n     void guiTests(BitcoinGUI* window);\n     void consoleTests(RPCConsole* console);\n "
      },
      {
        "sha": "fa8e849363ae57e1218a813ef32cec294303cc99",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -104,7 +104,7 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::ve\n     SelectParams(chainName);\n     SeedInsecureRand();\n     if (G_TEST_LOG_FUN) LogInstance().PushBackCallback(G_TEST_LOG_FUN);\n-    InitLogging(*m_node.args);\n+    InitLogging(*m_node.args, /* log_suffix= */ nullptr);\n     AppInitParameterInteraction(*m_node.args);\n     LogInstance().StartLogging();\n     SHA256AutoDetect();"
      },
      {
        "sha": "eac93a61064f7bb0581493aed98558e12e1e7343",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -95,6 +95,10 @@ def read_logs(tmp_dir):\n             break\n         files.append((\"node%d\" % i, logfile))\n \n+        wallet_logfile = \"{}/node{}/regtest/debug.log.wallet\".format(tmp_dir, i)\n+        if os.path.isfile(wallet_logfile):\n+            files.append((\"wall%d\" % i, wallet_logfile))\n+\n     return heapq.merge(*[get_log_events(source, f) for source, f in files])\n \n "
      },
      {
        "sha": "2e9a6bbe1d11618d661ad8029ddd826a849437ce",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -381,11 +381,13 @@ def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n         wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)\n \n     @contextlib.contextmanager\n-    def assert_debug_log(self, expected_msgs, unexpected_msgs=None, timeout=2):\n+    def assert_debug_log(self, expected_msgs, unexpected_msgs=None, timeout=2, wallet=False):\n         if unexpected_msgs is None:\n             unexpected_msgs = []\n         time_end = time.time() + timeout * self.timeout_factor\n         debug_log = os.path.join(self.datadir, self.chain, 'debug.log')\n+        if wallet and os.path.exists(debug_log + \".wallet\"):\n+            debug_log += \".wallet\"\n         with open(debug_log, encoding='utf-8') as dl:\n             dl.seek(0, 2)\n             prev_size = dl.tell()"
      },
      {
        "sha": "a62eb70ec6d4e9b63a0b0252515abe812e8b9030",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -206,7 +206,7 @@ def run_test(self):\n         assert result['ismine']\n \n         self.log.info('Check that wallet is flushed')\n-        with self.nodes[0].assert_debug_log(['Flushing wallet.dat'], timeout=20):\n+        with self.nodes[0].assert_debug_log(['Flushing wallet.dat'], timeout=20, wallet=True):\n             self.nodes[0].getnewaddress()\n \n         # Make sure that dumpwallet doesn't have a lock order issue when there is an unconfirmed tx and it is reloaded"
      },
      {
        "sha": "e73fcf00e1828020790e233e3f20c96721aa1b9f",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -125,7 +125,7 @@ def run_test(self):\n         self.nodes[0].sendtoaddress(addr_aps, 1.0)\n         self.nodes[0].sendtoaddress(addr_aps, 1.0)\n         self.generate(self.nodes[0], 1)\n-        with self.nodes[3].assert_debug_log([f'Fee non-grouped = {tx4_ungrouped_fee}, grouped = {tx4_grouped_fee}, using grouped']):\n+        with self.nodes[3].assert_debug_log([f'Fee non-grouped = {tx4_ungrouped_fee}, grouped = {tx4_grouped_fee}, using grouped'], wallet=True):\n             txid4 = self.nodes[3].sendtoaddress(self.nodes[0].getnewaddress(), 0.1)\n         tx4 = self.nodes[3].getrawtransaction(txid4, True)\n         # tx4 should have 2 inputs and 2 outputs although one output would\n@@ -136,7 +136,7 @@ def run_test(self):\n         addr_aps2 = self.nodes[3].getnewaddress()\n         [self.nodes[0].sendtoaddress(addr_aps2, 1.0) for _ in range(5)]\n         self.generate(self.nodes[0], 1)\n-        with self.nodes[3].assert_debug_log([f'Fee non-grouped = {tx5_6_ungrouped_fee}, grouped = {tx5_6_grouped_fee}, using non-grouped']):\n+        with self.nodes[3].assert_debug_log([f'Fee non-grouped = {tx5_6_ungrouped_fee}, grouped = {tx5_6_grouped_fee}, using non-grouped'], wallet=True):\n             txid5 = self.nodes[3].sendtoaddress(self.nodes[0].getnewaddress(), 2.95)\n         tx5 = self.nodes[3].getrawtransaction(txid5, True)\n         # tx5 should have 3 inputs (1.0, 1.0, 1.0) and 2 outputs\n@@ -149,7 +149,7 @@ def run_test(self):\n         addr_aps3 = self.nodes[4].getnewaddress()\n         [self.nodes[0].sendtoaddress(addr_aps3, 1.0) for _ in range(5)]\n         self.generate(self.nodes[0], 1)\n-        with self.nodes[4].assert_debug_log([f'Fee non-grouped = {tx5_6_ungrouped_fee}, grouped = {tx5_6_grouped_fee}, using grouped']):\n+        with self.nodes[4].assert_debug_log([f'Fee non-grouped = {tx5_6_ungrouped_fee}, grouped = {tx5_6_grouped_fee}, using grouped'], wallet=True):\n             txid6 = self.nodes[4].sendtoaddress(self.nodes[0].getnewaddress(), 2.95)\n         tx6 = self.nodes[4].getrawtransaction(txid6, True)\n         # tx6 should have 5 inputs and 2 outputs"
      },
      {
        "sha": "20bf9767cf9e40de82fc903476034d70df7d7bb5",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -130,7 +130,7 @@ def wallet_file(name):\n         os.mkdir(wallet_dir('no_access'))\n         os.chmod(wallet_dir('no_access'), 0)\n         try:\n-            with self.nodes[0].assert_debug_log(expected_msgs=['Error scanning']):\n+            with self.nodes[0].assert_debug_log(expected_msgs=['Error scanning'], wallet=True):\n                 walletlist = self.nodes[0].listwalletdir()['wallets']\n         finally:\n             # Need to ensure access is restored for cleanup"
      },
      {
        "sha": "eebfdc2f1c97defd7165d104e61010eb42e204df",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e47c133dfc4e1b8ecec908bcb1bb535f12659205/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e47c133dfc4e1b8ecec908bcb1bb535f12659205/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "patch": "@@ -66,7 +66,7 @@ def run_test(self):\n         self.log.info(\"Bump time & check that transaction is rebroadcast\")\n         # Transaction should be rebroadcast approximately 24 hours in the future,\n         # but can range from 12-36. So bump 36 hours to be sure.\n-        with node.assert_debug_log(['ResendWalletTransactions: resubmit 1 unconfirmed transactions']):\n+        with node.assert_debug_log(['ResendWalletTransactions: resubmit 1 unconfirmed transactions'], wallet=True):\n             node.setmocktime(now + 36 * 60 * 60)\n             # Tell scheduler to call MaybeResendWalletTxn now.\n             node.mockscheduler(1)"
      }
    ]
  },
  {
    "sha": "2fa4bbe19ae49125cee87ffa265557e529c13766",
    "node_id": "C_kwDOABII59oAKDJmYTRiYmUxOWFlNDkxMjVjZWU4N2ZmYTI2NTU1N2U1MjljMTM3NjY",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-11-29T16:20:20Z"
      },
      "message": "doc: Multiprocess misc doc and comment updates",
      "tree": {
        "sha": "62bf9a929136797e8a5be7ec10fc6bfc78df566a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62bf9a929136797e8a5be7ec10fc6bfc78df566a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fa4bbe19ae49125cee87ffa265557e529c13766",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fa4bbe19ae49125cee87ffa265557e529c13766",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fa4bbe19ae49125cee87ffa265557e529c13766",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fa4bbe19ae49125cee87ffa265557e529c13766/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e47c133dfc4e1b8ecec908bcb1bb535f12659205",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e47c133dfc4e1b8ecec908bcb1bb535f12659205"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 12,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e03c0a6f6790c6e6e6918115a298c57b3699a893",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fa4bbe19ae49125cee87ffa265557e529c13766/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fa4bbe19ae49125cee87ffa265557e529c13766/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=2fa4bbe19ae49125cee87ffa265557e529c13766",
        "patch": "@@ -82,7 +82,7 @@ These dependencies represent the packages required to get a barebones installati\n To install, run the following from your terminal:\n \n ``` bash\n-brew install automake libtool boost pkg-config libevent\n+brew install automake libtool boost pkg-config libevent capnp\n ```\n \n ### 4. Clone Bitcoin repository"
      },
      {
        "sha": "86b5d3b57942474efecf0d0d872fd92539bf5206",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fa4bbe19ae49125cee87ffa265557e529c13766/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fa4bbe19ae49125cee87ffa265557e529c13766/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=2fa4bbe19ae49125cee87ffa265557e529c13766",
        "patch": "@@ -115,7 +115,7 @@ To build without GUI pass `--without-gui`.\n \n To build with Qt 5 you need the following:\n \n-    sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools\n+    sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libcapnp-dev capnproto\n \n Additionally, to support Wayland protocol for modern desktop environments:\n "
      },
      {
        "sha": "98fe9d6e13e10586587ad9beaf3756350edcfa94",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fa4bbe19ae49125cee87ffa265557e529c13766/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fa4bbe19ae49125cee87ffa265557e529c13766/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=2fa4bbe19ae49125cee87ffa265557e529c13766",
        "patch": "@@ -7,6 +7,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | --- | --- | --- | --- | --- | --- |\n | Berkeley DB | [4.8.30](https://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n | Boost | [1.71.0](https://www.boost.org/users/download/) | [1.64.0](https://github.com/bitcoin/bitcoin/pull/22320) | No |  |  |\n+| Cap'n Proto | [0.6.1](https://capnproto.org/install.html) | 0.5.3 | Yes |  |  |\n | Clang<sup>[ \\* ](#note1)</sup> |  | [7.0](https://releases.llvm.org/download.html) (C++17 & std::filesystem support) |  |  |  |\n | Expat | [2.2.7](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |"
      },
      {
        "sha": "6338d2ca5ce88b8619af825f7655758934ccfd6b",
        "filename": "doc/multiprocess.md",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fa4bbe19ae49125cee87ffa265557e529c13766/doc/multiprocess.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fa4bbe19ae49125cee87ffa265557e529c13766/doc/multiprocess.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/multiprocess.md?ref=2fa4bbe19ae49125cee87ffa265557e529c13766",
        "patch": "@@ -2,12 +2,10 @@\n \n On unix systems, the `--enable-multiprocess` build option can be passed to `./configure` to build new `bitcoin-node`, `bitcoin-wallet`, and `bitcoin-gui` executables alongside existing `bitcoind` and `bitcoin-qt` executables.\n \n-`bitcoin-node` is a drop-in replacement for `bitcoind`, and `bitcoin-gui` is a drop-in replacement for `bitcoin-qt`, and there are no differences in use or external behavior between the new and old executables. But internally (after [#10102](https://github.com/bitcoin/bitcoin/pull/10102)), `bitcoin-gui` will spawn a `bitcoin-node` process to run P2P and RPC code, communicating with it across a socket pair, and `bitcoin-node` will spawn `bitcoin-wallet` to run wallet code, also communicating over a socket pair. This will let node, wallet, and GUI code run in separate address spaces for better isolation, and allow future improvements like being able to start and stop components independently on different machines and environments.\n+`bitcoin-node` is a drop-in replacement for `bitcoind`, and `bitcoin-gui` is a drop-in replacement for `bitcoin-qt`, and there are no differences in use or external behavior between the new and old executables. But internally `bitcoin-gui` will spawn a `bitcoin-node` process to run P2P and RPC code, communicating with it across a socket pair, and `bitcoin-node` will spawn `bitcoin-wallet` to run wallet code, also communicating over a socket pair. This lets node, wallet, and GUI code run in separate address spaces for better isolation, and allow future improvements like being able to start and stop components independently on different machines and environments.\n \n ## Next steps\n \n-Specific next steps after [#10102](https://github.com/bitcoin/bitcoin/pull/10102) will be:\n-\n - [ ] Adding `-ipcbind` and `-ipcconnect` options to `bitcoin-node`, `bitcoin-wallet`, and `bitcoin-gui` executables so they can listen and connect to TCP ports and unix socket paths. This will allow separate processes to be started and stopped any time and connect to each other.\n - [ ] Adding `-server` and `-rpcbind` options to the `bitcoin-wallet` executable so wallet processes can handle RPC requests directly without going through the node.\n - [ ] Supporting windows, not just unix systems. The existing socket code is already cross-platform, so the only windows-specific code that needs to be written is code spawning a process and passing a socket descriptor. This can be implemented with `CreateProcess` and `WSADuplicateSocket`. Example: https://memset.wordpress.com/2010/10/13/win32-api-passing-socket-with-ipc-method/.\n@@ -34,6 +32,12 @@ The configure script will pick up settings and library locations from the depend\n \n Alternately, you can install [Cap'n Proto](https://capnproto.org/) and [libmultiprocess](https://github.com/chaincodelabs/libmultiprocess) packages on your system, and just run `./configure --enable-multiprocess` without using the depends system. The configure script will be able to locate the installed packages via [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config/). See [Installation](https://github.com/chaincodelabs/libmultiprocess#installation) section of the libmultiprocess readme for install steps. See [build-unix.md](build-unix.md) and [build-osx.md](build-osx.md) for information about installing dependencies in general.\n \n+## Known issues\n+\n+- Unexpected socket disconnects aren't handled cleanly many places. Interface calls that used to never throw can now throw exceptions if a socket is disconnected (typically because a process on the other side of the connection has crashed or been killed), leading to errors.\n+\n+- Internally spawned bitcoin-node and bitcoin-wallet processes don't currently install signal handlers and so won't shut down cleanly if terminated with [CTRL-C](https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-595353238). Shutting down with `bitcoin-cli stop` should still shut down cleanly, and is a suggested alternative.\n+\n ## IPC implementation details\n \n Cross process Node, Wallet, and Chain interfaces are defined in"
      },
      {
        "sha": "fabebee791382b83d1e172ca507d0de69af1fa6a",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fa4bbe19ae49125cee87ffa265557e529c13766/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fa4bbe19ae49125cee87ffa265557e529c13766/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=2fa4bbe19ae49125cee87ffa265557e529c13766",
        "patch": "@@ -307,6 +307,8 @@ obj/build.h: FORCE\n \t  \"$(abs_top_srcdir)\"\n libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h\n \n+# Explicitly list dependencies on generated headers as described\n+# https://www.gnu.org/software/automake/manual/html_node/Built-Sources-Example.html#Recording-Dependencies-manually\n ipc/capnp/libbitcoin_ipc_a-ipc.$(OBJEXT): $(libbitcoin_ipc_mpgen_input:=.h)\n ipc/capnp/libbitcoin_ipc_a-chain.$(OBJEXT): $(libbitcoin_ipc_mpgen_input:=.h)\n "
      }
    ]
  },
  {
    "sha": "eef402d2913fdb9f13af73f9fbc789611cf60360",
    "node_id": "C_kwDOABII59oAKGVlZjQwMmQyOTEzZmRiOWYxM2FmNzNmOWZiYzc4OTYxMWNmNjAzNjA",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-11-29T16:20:20Z"
      },
      "message": "combine_logs: Handle multiprocess wallet log files",
      "tree": {
        "sha": "a4252a2551b91a880550eb3f1e98024b6c1f2b7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4252a2551b91a880550eb3f1e98024b6c1f2b7c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eef402d2913fdb9f13af73f9fbc789611cf60360",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eef402d2913fdb9f13af73f9fbc789611cf60360",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eef402d2913fdb9f13af73f9fbc789611cf60360",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eef402d2913fdb9f13af73f9fbc789611cf60360/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fa4bbe19ae49125cee87ffa265557e529c13766",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fa4bbe19ae49125cee87ffa265557e529c13766",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fa4bbe19ae49125cee87ffa265557e529c13766"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7cef77859304ad88e00ef47bacb2cdff7393f2ba",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eef402d2913fdb9f13af73f9fbc789611cf60360/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eef402d2913fdb9f13af73f9fbc789611cf60360/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=eef402d2913fdb9f13af73f9fbc789611cf60360",
        "patch": "@@ -62,6 +62,10 @@ def main():\n         colors[\"node1\"] = \"\\033[0;32m\"  # GREEN\n         colors[\"node2\"] = \"\\033[0;31m\"  # RED\n         colors[\"node3\"] = \"\\033[0;33m\"  # YELLOW\n+        colors[\"wall0\"] = \"\\033[0;34;1m\"  # BLUE\n+        colors[\"wall1\"] = \"\\033[0;32;1m\"  # GREEN\n+        colors[\"wall2\"] = \"\\033[0;31;1m\"  # RED\n+        colors[\"wall3\"] = \"\\033[0;33;1m\"  # YELLOW\n         colors[\"reset\"] = \"\\033[0m\"  # Reset font color\n \n     log_events = read_logs(testdir)"
      }
    ]
  }
]