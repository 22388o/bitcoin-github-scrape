jonasschnelli,2017-03-28T07:38:14Z,"Oh. Nice.\nI expected much more code to achieve this.\n\nConceptually I think this goes into the right direction, though, I'm not sure if this could end up being only a temporary in-between step that may end up being replaced.\nBecause, it may be more effective to split the Qt/d part completely and let them communicate over the p2p protocol (SPV and eventually RPC). More effective because it w",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-289688689,289688689,
ryanofsky,2017-03-28T09:58:15Z,"> Would the performance be impractical if we would try to use the existing RPC API?\n\nReason this is currently using capnp is not performance but convenience. Capnp provides a high level API that supports bidirectional, synchronous, and asynchronous calls out of the box and allows me to easily explore implementation choices in bitcoin-qt without having to worry about low level protocol details,",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-289721777,289721777,
gmaxwell,2017-03-28T17:23:18Z,"I'm really uncomfortable with using capn proto, but fine enough for some example testing stuff!\n\nI'm a fan of this general approach (ignoring the use of capn proto) and I think we should have done something like it a long time ago.",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-289842646,289842646,
dcousens,2017-03-28T22:39:49Z,"strong concept ACK, but if is feasible, would prefer usage of the existing RPC instead of capn'proto",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-289927205,289927205,
laanwj,2017-03-29T06:53:25Z,"Concept ACK, nice.\n\n> I'm really uncomfortable with using capn proto, but fine enough for some example testing stuff!\n\nPlease, let's not turn this into a discussion of serialization and RPC frameworks. To be honest that's been one of the things that's putting me off of doing work like this. If you want to suggest what framework to use, please make a thorough investigation of what method wo",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-289999980,289999980,
ryanofsky,2017-04-07T20:51:14Z,"Updated and rebased 0ca73bc13c3457cd5c3244abfa9fa586d9137117 -> 5e28c2fcc2757479d29ca83cd3256584ab908e48 ([pr/ipc.1](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.1) -> [pr/ipc.3](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.3)) to avoid a conflict. Main addition is an expanded [src/ipc/README.md](https://github.com/ryanofsky/bitcoin/tree/pr/ipc/src/ipc/README.md) file.\n\nAgain it ",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-292648484,292648484,
ryanofsky,2017-04-10T22:25:37Z,"Updated 5e28c2fcc2757479d29ca83cd3256584ab908e48 -> dda375662d060ce42b5113247301e0289584e14d ([pr/ipc.3](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.3) -> [pr/ipc.4](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.4))\n\nThis implements two suggestions from @JeremyRubin:\n\n* It includes a small commit demonstrating what it looks like to add a single new method to the API:\n[`dda3",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-293096821,293096821,
ryanofsky,2017-04-14T05:44:28Z,"@laanwj pointed out in IRC (https://botbot.me/freenode/bitcoin-core-dev/msg/83983170/) that this change could help make the GUI more responsive by preventing Qt event processing from getting blocked, which currently happens in the monolithic `bitcoin-qt` when the main GUI thread makes a call to a slow libbitcoin function, or waits a long time for a `cs_main` or `cs_wallet` lock.\n\nAt the time i",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294094610,294094610,
laanwj,2017-04-14T08:00:38Z,"@ryanofsky Yes, integrating the IPC event loop and Qt event loop would help responsiveness.\nThough I remember there were some issues in some cases with recursively calling into the Qt event loop (e.g. things need to be reentrant, deleteLater stuff runs earlier than expected, to keep in mind).",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294111566,294111566,
sipa,2017-04-17T12:23:13Z,"@ryanofsky I'm not familiar with Qt or capnproto, but I don't understand what the move to a different process has to do with making things less blocking. Any changes in architecture that would result in less blocks should equally be possible within the same process.\n\n",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294474620,294474620,
sipa,2017-04-17T12:29:23Z,"> This change will not add any new command line or GUI options allowing bitcoin-qt to connect to bitcoinds other than the one it spawns internally. Adding these features and supporting new public APIs might be things we want to do in the future, but they would involve downsides and complications that I'm trying to avoid here.\n\nI don't understand the goal here. On itself, there seems little ben",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294475317,294475317,
ryanofsky,2017-04-17T14:15:47Z,"> Any changes in architecture that would result in less blocks should equally be possible within the same process.\n\nLet's say there are 50 places where bitcoin-qt calls a libbitcoin function. That means there are 50 places to update if you want bitcoin-qt handle to events while the function calls are executing. WIth the IPC framework, there is only one place you have to update instead of 50 pl",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294493467,294493467,
sipa,2017-04-17T18:48:29Z,"> > I think it would be awesome if bitcoin-qt could be started and stopped independently to control a bitcoind process in the background,\n>\n> This is trivial once bitcoin-qt is controlling bitcoind across a socket. I'm just implementing the socket part first, without introducing new UI features for now.\n\nOk, that's what I was missing. It wasn't clear to me that this was a just first step t",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-294557349,294557349,
ryanofsky,2017-04-27T18:01:04Z,"As of 8f78f085976bcb0f9093f0b1b4c3c65110ec44aa ([pr/ipc.7](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.7)), this change is much more complete & functional. You can also now monitor the IPC traffic going back and forth between `bitcoin-qt` and `bitcoind` by setting the `IPC_DEBUG` environment variable (`export IPC_DEBUG=1`)\n",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-297792312,297792312,
ryanofsky,2018-08-21T19:33:34Z,"Updated 85b23296891032875cbda7a3c70c3422ce04da15 -> 84af92e496f00608dff749e7b1372964cb20df42 ([pr/ipc.46](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.46) -> [pr/ipc.47](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.47)) with various cleanups and fixes for macos.\nUpdated 84af92e496f00608dff749e7b1372964cb20df42 -> ca294aa8c036bf62d808450a4555a0806ff7227b ([pr/ipc.47](https://github.",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-414794955,414794955,
Sjors,2018-08-26T10:26:32Z,"Compile errors are gone now.\n\nThe `multiprocess=yes/no` line in `./configure` only showed up for me after running `./autogen.sh` again. This was without using the `--enable-multiprocess` argument.\n\nThe documentation suggests multiprocess isn't on by default, but it is:\n\n```\n./configure --disable-bench --disable-zmq --with-miniupnpc=no --with-incompatible-bdb --with-qrencode\n....\n",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-416028413,416028413,
ryanofsky,2018-08-27T14:50:29Z,"@Sjors, this is great! Thanks so much for testing this.\n\n> The documentation suggests multiprocess isn't on by default, but it is:\n\nSince `--enable-multiprocess` configure option only builds new executables and has no effect on existing ones, the default value is `auto` rather than `no`. This seems like the most convenient behavior, but I coudl change it or try to document it better.\n\n",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-416252818,416252818,
Sjors,2018-08-28T11:00:37Z,"> I think default test mode should use bitcoind but travis should be configured to test other binaries, too.\n\nThat makes sense, we shouldn't force developers / users to compile the other binaries.\n\n> Writing to a common log file would be another option, but it would require some kind of locking and syncing, so I don't think the complexity would be worth it.\n\nMultiple log files seems fi",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-416543491,416543491,
ryanofsky,2018-09-05T14:53:39Z,"> The bitcoin-gui executable is ignoring testnet=1 in bitcoin.conf\n\nThis is fixed now. It was caused by a bad rebase of this PR, which neglected to call `SetupServerArgs` in the gui process after it was introduced in #13190.\n\nUpdated 8d3df50476fa2f96cf2910238e5a2b3f8380b6e1 -> 5ce9a948c8ec47762d0a23d1cf7f2ce57386052b ([pr/ipc.54](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.54) -> [",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-418760970,418760970,
ryanofsky,2018-09-06T18:57:00Z,"> createwallet ""test"" froze the app for me\n\nThis is fixed in pr/ipc.56",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-419204728,419204728,
fingera,2018-09-21T07:30:05Z,"help\ngcc 7.3.0:\n```\n  CXX      interfaces/capnp/libbitcoin_util_a-messages.o\nIn file included from ../../src/interfaces/capnp/proxy.h:6:0,\n                 from ../../src/interfaces/capnp/messages.h:5,\n                 from ./interfaces/capnp/messages.capnp.proxy.h:6,\n                 from ../../src/interfaces/capnp/messages-impl.h:9,\n                 from ../../src/interfaces/capn",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-423441197,423441197,
ryanofsky,2018-09-26T20:56:31Z,"Thanks for the report @fingera. The gcc compile errors should be fixed now (I've been testing with clang more than gcc recently).\n\n---\n\nUpdated 5ce9a948c8ec47762d0a23d1cf7f2ce57386052b -> f896f063007aa3889caf9d14724357117eca78c1 ([pr/ipc.55](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.55) -> [pr/ipc.56](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.56)) to fix `createwallet` ",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-424866963,424866963,
DrahtBot,2018-09-27T21:14:01Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23565](https://github.com/bitcoin/bitcoin/pull/23565) (doc: rewrite dependencies.md by fanquake)\n* [#23497](https://git",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-425245284,425245284,
Sjors,2018-09-28T10:29:50Z,"After upgrading to Mojave I'm having compile issues (as of ededfe8800fd2647851d4d42dd765cfcd8d69cde): \n```sh\nIn file included from interfaces/capnp/proxy-codegen.cpp:4:\nIn file included from /usr/local/Cellar/capnp/0.7.0/include/capnp/blob.h:28:\n/usr/local/Cellar/capnp/0.7.0/include/kj/common.h:36:4: error: ""This code requires C++14. Either your compiler does not support it or it is not en",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-425394087,425394087,
Sjors,2018-10-09T07:16:15Z,"Compile works again for me. I do still get the `syscall` deprecated in macOS 10.12 warning I mentioned earlier. Some of the tests also throw a [compiler warning](https://gist.github.com/Sjors/fed61c30c76c746c8b0b12a51e92eeb0).\n\nrpc `help`, and `testnet=1` in `bitcoin.conf`, command override in settings screen work for me now.\n\n`createwallet` in the gui console crashes the gui. The node and",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-428086112,428086112,
ryanofsky,2018-10-09T07:54:36Z,"Thanks for testing! I will test the createwallet method, fix git ignores, and clean up the disconnect handling so leftover processes won't stick around if one crashes.\n\nOn location of `bitcoin-gui`, all three executables are intentionally built in the same directory to make spawning processes simple. When `bitcoin-gui` launches `bitcoin-node`, it always looks for a `bitcoin-node` executable in",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-428096364,428096364,
ryanofsky,2018-11-01T21:14:35Z,"re: https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-428086112\n> Don't forget to update .gitignore\n\nUpdated now.\n\n\nre: https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-428086112, https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-416028413 \n> I do still get the syscall deprecated in macOS 10.12 warning\n\nShould be fixed now. Worked around using `pthread",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-435189673,435189673,
ismail120572,2018-11-02T00:00:38Z,Pull request,https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-435226828,435226828,
jb55,2019-05-26T01:09:05Z,"codegen seems broken for me: (gcc 7.4.0). I get random errors of these kind:\n\nerr1\n```\n  CXX      wallet/libbitcoin_wallet_tool_a-wallettool.o\n  GEN      interfaces/capnp/test/foo.capnp.c++\n*** Uncaught exception ***\nkj/filesystem.c++:315: failed: expected parts.size() > 0; can't use "".."" to break out of starting directory\nstack: 7ffbcf3c71a0 7ffbcf3c9829 4098e3 7ffbcf55904d 7ffbcf",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-495959606,495959606,
ryanofsky,2019-05-27T07:41:36Z,"re: https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-495959606\n\n@jb55 this looks like it's caused by changes between capnproto 0.7.0 and 0.6.1: https://github.com/capnproto/capnproto/issues/772. I don't think it should be too be hard to add compatibility with 0.7.0, but I haven't tried it yet myself.",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-496113026,496113026,
ryanofsky,2019-05-28T14:15:12Z,"re: https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-495959606\n\n@jb55 Will try to update this PR shortly, but I posted build fixes for capnp 0.7.0 in 792963e32ceb081971935cf1aa10f88f9d3f3a1a ([ipc-work.276](https://github.com/ryanofsky/bitcoin/commits/ipc-work.276))",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-496535417,496535417,
jgarzik,2020-01-10T21:30:41Z,concept ACK ,https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-573213164,573213164,
practicalswift,2020-01-12T09:39:55Z,"Very strong concept ACK!\n\nHas this PR reached a level where it could be assigned a milestone? :)",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-573397932,573397932,
Sjors,2020-02-28T13:27:04Z,"Can you clarify if the stuff in `src/interfaces/capnp/*.{h,cpp}` is automatically generated or manual? If automatic, I would prefer to leave it out of the repo and have `make` produce them. Other than those files, I like how this PR is looking a lot leaner than it used to. The first 5 non-base commits can be separate PRs, leaving only 3.\n\nSeparating libmultiprocess into its own project also se",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-592511915,592511915,
ryanofsky,2020-03-02T19:08:45Z,"> Can you clarify if the stuff in `src/interfaces/capnp/*.{h,cpp}` is automatically generated or manual?\n\nThis is manual code, but it needs to be better documented and have boilerplate removed. It's all dealing with lifetime and serialization issues for specific classes and structs that were difficult to share between processes for one reason or another. There's a lot of boilerplate because I ",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-593566300,593566300,
hebasto,2020-03-05T09:35:49Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-595125863,595125863,
hebasto,2020-03-05T11:26:20Z,"Testing on Linux Mint 19.3:\n\nan attempt to shutdown `bitcoin-node` using `Ctrl+C` causes an error:\n```\n$ ./src/bitcoin-node -testnet\n...\n2020-03-05T11:21:53Z [init] Shutdown: In progress...\n2020-03-05T11:21:53Z [addcon] addcon thread exit\nterminate called after throwing an instance of 'std::logic_error'\n  what():  clientInvoke call made after disconnect\nAborted (core dumped)\n",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-595180635,595180635,
ryanofsky,2020-03-05T17:33:39Z,"re: https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-595180635\n\n> Testing on Linux Mint 19.3:\n> \n> an attempt to shutdown `bitcoin-node` using `Ctrl+C` causes an error:\n\nI can add a ""Known Issues"" section to the [doc](https://github.com/ryanofsky/bitcoin/tree/pr/ipc/doc/multiprocess.md) and mention this. This PR isn't adding signal handlers to spawned `bitcoin-node` and `bitc",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-595353238,595353238,
JeremyRubin,2020-05-01T20:07:57Z,"Now that #17905 is merged this seems to be the fourth step in the multiprocess transformation.\n\nWhat things need to happen in your view for this to proceed? From my view this seems like the step where we need to decide to use capnproto or not, and if not, what sort of replacement library. Personally I think using capnproto is a decent idea, as it's a well maintained project, and can save us fr",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-622544686,622544686,
jb55,2020-05-01T20:13:46Z,"when it was last mentioned on IRC, the idea was to merge it as experimental with capnproto, with plans to eventually replace it when that makes sense.",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-622547262,622547262,
Sjors,2020-06-02T14:16:26Z,"The test suite passes, but I get quite a few warnings when building on macOS 10.15.4 : https://gist.github.com/Sjors/b7b2dc026a39741b019f15e98751cf57#file-make-1-log\n\nWhen launching `src/bitcoin-gui` I get an error message: `Error: Error reading configuration file:`. It trips over unknown setting names, even for a different network (e.g. `-signer` which is for an unmerged PR).  `src/qt/bitcoin",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-637572032,637572032,
hebasto,2020-06-02T14:33:38Z,"@Sjors \nsee also https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-595180635, https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-595353238",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-637582520,637582520,
ryanofsky,2020-06-02T15:08:16Z,"Thanks, I'll look into the settings bug, and adding a sigint handler since multiple people reported this\n\n---\n\nRebased fd810d2ae759091dadf39d1d6af3bf267e66bbfd -> 5f8b1d3bca82490872fddcb6ff6e1b6ecf4a66e5 ([`pr/ipc.111`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.111) -> [`pr/ipc.112`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.112), [compare](https://github.com/ryanofsky/",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-637604238,637604238,
jgarzik,2020-09-13T20:29:29Z,"Thanks for continuing to work on this.  Cloning and building to test now.\n\nMulti-process isolation boundaries have been needed for... 10 years or so. ",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-691721122,691721122,
ryanofsky,2020-09-13T20:43:30Z,"> Thanks for continuing to work on this. Cloning and building to test now.\n\nThanks! Some instructions are at https://github.com/ryanofsky/bitcoin/blob/pr/ipc/doc/multiprocess.md#installation in case that's helpful. \n\n---\n\nRebased fa6f80a699aa2f9f001090cd60bf0a02d545f8cb -> 9bb2b0fc428877b5af7e472ca492b09ecdb72394 ([`pr/ipc.125`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.125) ",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-691722739,691722739,
promag,2020-10-23T21:45:08Z,"Outstanding work and effort! Not sure if it was mentioned, but while testing I've noticed it takes way longer to load big wallets. But this is something we could improve in different ways, not in the context of this PR.\n\nConcept ACK.\n\n",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-715604162,715604162,
ryanofsky,2020-12-11T18:19:49Z,"Rebased 8f155d7afc41760a36972ae353a76d876cf4445f -> e3b965e13216acc111bf0241fb14e55c63612a10 ([`pr/ipc.133`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.133) -> [`pr/ipc.134`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.134), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipc.133-rebase..pr/ipc.134)) on top of #19160 pr/ipc-echo.19\nRebased e3b965e13216acc111bf0241fb14e",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-743349730,743349730,
electorr,2021-03-04T11:16:28Z,"NACK\nThis is using a library produced by an outside entity that\naddresses a specific use case of bitcoin.\nGood intentions and all, bait-and-switch is a thing.\n20 years into the future we have a company having control \nof a part of the bitcoin code which does not get the same level\nof audit as the bitcoin code itself but neither as external libraries\nwhich are not targeted at bitcoin ",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-790538884,790538884,
ryanofsky,2021-03-04T14:39:03Z,"re: https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-790538884\n\nConcerns about external libraries (including zmq) are legitimate and this is a reason multiprocess support is optional and will always be optional. Just like you can build versions of bitcoin without GUI or wallet support, and just like we distribute separate `bitcoin-qt` and `bitcoind` binaries so you can choose whether",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-790664616,790664616,
ariard,2021-03-26T14:40:30Z,"I've been following the instructions in `doc/multiprocess.md`, especially the ones in ##Installation\n\n```\ncd <BITCOIN_SOURCE_DIRECTORY>\nmake -C depends NO_QT=1 MULTIPROCESS=1\n./configure --prefix=$PWD/depends/x86_64-pc-linux-gnu\nmake\nsrc/bitcoin-node -regtest -printtoconsole -debug=ipc\nBITCOIND=bitcoin-node test/functional/test_runner.py\n```\n\nBut I'm hitting linker failures l",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-808272413,808272413,
ryanofsky,2021-03-26T18:01:59Z,"re: https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-808272413\n\nThanks for the bug report. So far I'm not able to reproduce the problem. Just checking out the current PR and following the instructions builds successfully for me (and also seems to be working on CI).\n\nIt's possible there are old build outputs on your system and using `git-clean` could help. Otherwise it'd be great ",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-808415410,808415410,
achow101,2021-03-29T19:45:02Z,"Tried to run `bitcoin-gui` and hit an assert:\n\n    bitcoin-gui: logging.cpp:274: void BCLog::Logger::LogPrintStr(const string&, const string&, const string&, int): Assertion `m_fileout != nullptr' failed.\n\n***\n\nI am not really a fan of overloading `bitcoin-wallet` to serve as the wallet process. Currently (in master) it is used solely as the wallet tool. It seems really weird to me tha",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-809662747,809662747,
ryanofsky,2021-03-29T22:23:07Z,"Thanks for checking this!\n\n> Tried to run `bitcoin-gui` and hit an assert:\n\nI'll look into this some more, but feel free to post an issue https://github.com/chaincodelabs/libmultiprocess/issues/new just because it's easier to dig into bugs outside this long PR thread. I wonder if you are using a bitcoin.conf file or have log options defined that could be relevant to this.\n\n> I am not r",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-809752196,809752196,
ryanofsky,2021-04-08T02:47:33Z,"re: https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-809662747\n\n> Tried to run `bitcoin-gui` and hit an assert:\n> \n> ```\n> bitcoin-gui: logging.cpp:274: void BCLog::Logger::LogPrintStr(const string&, const string&, const string&, int): Assertion `m_fileout != nullptr' failed.\n> ```\n\nThanks, reproduced and fixed this now. I missed it because I'd had been testing ahead of t",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-815405696,815405696,
ryanofsky,2021-04-30T13:46:10Z,"Base pr #19160 was merged, and I split up the big commit into smaller commits, so I think this is definitely in a reviewable state now, even though there still are some small remaining things I would like to clean up where there are todos in the comments.\n\n---\n\nRebased 6e7a814da00c9f8ecaf7c57921515e61e0a037b6 -> 68fe5860cc786962b1de94295aac41574b46159c ([`pr/ipc.148`](https://github.com/ry",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-830106573,830106573,
ryanofsky,2021-07-09T17:17:11Z,"Rebased 1326c4a9a443e4169822eab569be68e53c58de36 -> 3f2ca2a484a7f040c41d2e29e8bb9e615050694e ([`pr/ipc.156`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.156) -> [`pr/ipc.157`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.157), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipc.156-rebase..pr/ipc.157)) on top of #22218 pr/ipc-ctx.2 with comment improvements that were discu",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-877336363,877336363,
ryanofsky,2021-10-06T03:40:22Z,"Rebased a56f8ebeb93e6016b2719644a1212c5a34a44396 -> 884d3e1dfa0d46472cd26093142331e51fb9f2ae ([`pr/ipc.160`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.160) -> [`pr/ipc.161`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.161), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipc.160-rebase..pr/ipc.161)) due to conflicts with #12677, #23065, #22818, #23060, #17211, and #2295",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-935367772,935367772,
ryanofsky,2021-10-25T19:20:12Z,"Rebased 884d3e1dfa0d46472cd26093142331e51fb9f2ae -> b9b40ae00e6eef8487e197aff2a9a4a0d07bee12 ([`pr/ipc.161`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.161) -> [`pr/ipc.162`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc.162), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipc.161-rebase..pr/ipc.162)) due to conflict with #22937\nRebased b9b40ae00e6eef8487e197aff2a9a4a0d",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-951233376,951233376,
DrahtBot,2021-11-30T21:43:11Z,"<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-983046903,983046903,
laanwj,2017-03-29T08:29:01Z,"Yep I guess most of these calls should be turned into async calls and not wait on a response synchronously blocking the GUI. Not necessarily in the first iteration of this, of course.",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108618386,108618386,src/qt/walletmodel.cpp
laanwj,2017-03-29T08:31:06Z,"Pretty nice. So the IPC endpoint exposes multiple ""objects"". It can also expose multiple instances of one class? (e.g. for multiwallet?).",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108618794,108618794,src/ipc/messages.capnp
laanwj,2017-03-29T08:37:27Z,Should it pass through parameters? Most of the parameters to `bitcoin-qt` will actually be for the daemon. Or will you provide parameters in a later stage through IPC?,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108620012,108620012,src/ipc/client.cpp
laanwj,2017-03-29T08:52:59Z,"The thread group is completely remote in the case of IPC, isn't it? I guess this entire function should be done differently when IPC is used. E.g. send a `shutdown` command to the core, then have the `shutdownResult` event come from remote as response when done.",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108623210,108623210,src/qt/bitcoin.cpp
laanwj,2017-03-29T08:56:29Z,"How would you handle `uiInterface` in this model, e.g. signals from the server to the client?",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108623907,108623907,src/qt/bitcoin.cpp
ryanofsky,2017-03-29T09:35:21Z,"> Should it pass through parameters? Most of the parameters to bitcoin-qt will actually be for the daemon. Or will you provide parameters in a later stage through IPC?\n\nThe change I'm working on now (not yet pushed) provides the parameters over IPC. It adds an `ipc::Node::parseParameters` method in `client.h` which calls `ParseParameters()` in bitcoind.\n\n```diff\n+    //! Set command line",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108631852,108631852,src/ipc/client.cpp
ryanofsky,2017-03-29T09:59:11Z,"> It can also expose multiple instances of one class?\n\nYes, the `ipc::Node::wallet()` method right now returns an `ipc::Wallet` interface wrapping pwalletMain, but it could support multiwallet by just adding an argument that indicates a different wallet object to return.",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108636959,108636959,src/ipc/messages.capnp
ryanofsky,2017-03-29T10:02:14Z,"> The thread group is completely remote in the case of IPC, isn't it?\n\nYes the change I'm working on now adds `threadGroup` and `scheduler` members to `NodeServer` in `ipc/server.cpp`, removing the current instances in `BitcoinCore`.",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108637607,108637607,src/qt/bitcoin.cpp
ryanofsky,2017-03-29T10:16:22Z,"> How would you handle uiInterface in this model, e.g. signals from the server to the client?\n\nThis line needs to change to `ipcNode.handleInitMessage(InitMessage)`. If you look at the `ipc::Node::handleInitMessage` implementation, it takes a std::function argument, creates a capnp `InitMessageCallback::Server` object that can invoke it, and sends a reference to that object over the IPC channe",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108640254,108640254,src/qt/bitcoin.cpp
ryanofsky,2017-03-29T10:35:58Z,"> Yep I guess most of these calls should be turned into async calls and not wait on a response synchronously blocking the GUI. Not necessarily in the first iteration of this, of course.\n\nAnother alternative in some of these cases is to consolidate many low level calls into fewer calls of a higher level interface.",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108643836,108643836,src/qt/walletmodel.cpp
laanwj,2017-03-29T10:58:28Z,"I think that's not optional but a required element of making this asynchronous, otherwise there'd be a lot of roundtrips.\n\nEdit: Though ofcourse one of the things cap'n'proto advertises with is that there is 'zero roundtrip overhead', because of the promise pipelining, but we don't want to depend too strongly on that.",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108647650,108647650,src/qt/walletmodel.cpp
laanwj,2017-03-29T11:00:13Z,Cool. I like this auto-generated IPC stuff. Saves writing a lot of boilerplate.,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108647949,108647949,src/ipc/messages.capnp
laanwj,2017-03-29T11:04:37Z,So the server then effectively calls an object on the client when the notification happens? No polling/waiting involved? That's great.,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108648613,108648613,src/qt/bitcoin.cpp
laanwj,2017-03-29T11:12:56Z,This locking (either of cs_main or wallet->cs_wallet) makes no sense when a remote core is used.,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108649962,108649962,src/qt/walletmodel.cpp
ryanofsky,2017-03-29T13:06:38Z,"> So the server then effectively calls an object on the client when the notification happens? No polling/waiting involved? That's great.\n\nYes, though to be clear, there is still polling/waiting happening under the hood. It just gets handled by the capnp event loop, which waits for incoming IPC messages and dispatches to `InitMessageCallback::Server::call` and other server methods. The change I",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108670193,108670193,src/qt/bitcoin.cpp
laanwj,2017-03-29T13:08:25Z,"FYI this is quite similar to how fd handles are passed in for the P2P and RPC port in my cloudabi port: https://github.com/laanwj/bitcoin/blob/2017_03_cabi_fs/src/httpserver.cpp#L357 https://github.com/laanwj/bitcoin/blob/2017_03_cabi_fs/src/init.cpp#L1356\n\nIt's a bit of a shame that argument parsing doesn't work here yet so this needs to use manual parsing using C functions :/",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108670537,108670537,src/ipc/server.cpp
ryanofsky,2017-03-29T13:09:53Z,"> This locking (either of cs_main or wallet->cs_wallet) makes no sense when a remote core is used.\n\nYeah, the point of the FIXME_IMPLEMENT_IPC macro is really just to segfault and indicate places in the code which need to be updated to support IPC. Many of them are pretty nonsensical.",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108670851,108670851,src/qt/walletmodel.cpp
ryanofsky,2017-03-29T13:13:13Z,"> It's a bit of a shame that argument parsing doesn't work here yet so this needs to use manual parsing using C functions :/\n\nI think I could change this to at least use GetArg like you are doing in your cloudabi code.",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r108671594,108671594,src/ipc/server.cpp
laanwj,2017-03-31T04:19:04Z,"Right, ideally bitcoin-qt would need only a very small subset of the bitcoind code.",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r109085466,109085466,src/ipc/client.cpp
laanwj,2017-03-31T04:23:28Z,"Yes, I understand that, but one of the problems with existing proposals for using RPC to communicate to the server had no way to handle asynchonous notifications, so needed to e.g. poll for new transactions every few seconds. This protocol clearly does support true bidirectional communication.\n\nAs for the capnp event loop, as most of the responses and notifications from the server involve upda",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r109085760,109085760,src/qt/bitcoin.cpp
ryanofsky,2017-04-06T23:34:25Z,"> As for the capnp event loop, as most of the responses and notifications from the server involve updating the UI, couldn't we integrate that into Qt's event loop? \n\nIt should be possible to integrate the qt and capnp event loops (http://stackoverflow.com/questions/33131595/what-is-a-good-way-to-integrate-3rd-party-asynchronous-apis-with-capn-proto-rpc), but for now `StartClient` is just spawn",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r110290288,110290288,src/qt/bitcoin.cpp
Sjors,2018-08-11T12:05:19Z,For MacOS it's `brew install capnp` ,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r209425169,209425169,doc/build-unix.md
practicalswift,2018-09-02T18:27:24Z,Typo found by `codespell`: bookeeping,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r214549056,214549056,src/interfaces/README.md
practicalswift,2018-09-02T18:28:32Z,Typo found by `codespell`: destuction,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r214549080,214549080,src/interfaces/capnp/init.cpp
practicalswift,2018-09-02T18:29:13Z,Typo found by `codespell`: “dont” should be “don’t” or “do not” :-),https://github.com/bitcoin/bitcoin/pull/10102#discussion_r214549093,214549093,src/interfaces/capnp/init.cpp
practicalswift,2018-09-02T18:30:30Z,Typo found by `codespell`: halfs should be halves :-),https://github.com/bitcoin/bitcoin/pull/10102#discussion_r214549127,214549127,src/interfaces/capnp/util.h
practicalswift,2018-09-03T18:00:33Z,Typo found by `codespell`: paramters,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r214741787,214741787,src/interfaces/capnp/FIXME
practicalswift,2018-09-03T18:02:09Z,Typo found by `codespell`: avaiable,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r214741922,214741922,src/interfaces/capnp/proxy-impl.h
practicalswift,2018-09-04T07:38:55Z,Couldn't `loop_ptr` potentially be a dead pointer here?,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r214813508,214813508,src/interfaces/capnp/init.cpp
ryanofsky,2018-09-04T14:58:28Z,Fixed,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r214949434,214949434,src/interfaces/README.md
ryanofsky,2018-09-04T14:59:18Z,Fixed,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r214949796,214949796,src/interfaces/capnp/FIXME
ryanofsky,2018-09-04T15:00:16Z,Fixed,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r214950179,214950179,src/interfaces/capnp/init.cpp
ryanofsky,2018-09-04T15:00:25Z,Fixed,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r214950248,214950248,src/interfaces/capnp/init.cpp
ryanofsky,2018-09-04T15:18:54Z,Fixed,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r214957918,214957918,src/interfaces/capnp/util.h
ryanofsky,2018-09-04T15:20:11Z,"> Couldn't loop_ptr potentially be a dead pointer here?\n\nGood catch. It could happen if socket was immediately disconnected. Moved onDisconnect handler down to fix this.",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r214958407,214958407,src/interfaces/capnp/init.cpp
leishman,2018-09-05T20:38:31Z,`chainParams` unused?,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r215417703,215417703,src/wallet/wallet.cpp
leishman,2018-09-05T20:42:21Z,perhaps change `int` to `size_t` to prevent comparison of integers with different sign warning?,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r215418823,215418823,src/rpc/rawtransaction.cpp
ryanofsky,2018-09-05T20:57:04Z,"> chainParams unused?\n\nWill fix, but this is part of the base PR #10973 (cb0c6b42a096980152a467b98f3c1250f62d4e7e), so it would be better to comment on that PR.",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r215423173,215423173,src/wallet/wallet.cpp
ryanofsky,2018-09-05T20:58:49Z,"> perhaps change int to size_t to prevent comparison of integers with different sign warning?\n\nWill fix, but this change is part of the base PR #10973 (249bf5006184f81d77d40ee0ede0924c628bf33e), so it would be better to comment on that PR.",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r215423702,215423702,src/rpc/rawtransaction.cpp
leishman,2018-09-05T21:01:23Z,Ah sorry. Will leave any new comments there.,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r215424411,215424411,src/wallet/wallet.cpp
practicalswift,2018-11-02T15:54:09Z,Remove trailing `;` :-),https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230423211,230423211,src/interfaces/init.h
practicalswift,2018-11-02T15:54:15Z,Remove trailing `;` :-),https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230423257,230423257,src/interfaces/init.h
practicalswift,2018-11-02T15:55:04Z,`exe_path` is not a parameter? :-),https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230423611,230423611,src/interfaces/init.h
practicalswift,2018-11-02T15:56:41Z,Make this implicit conversion explicit since it changes signedness?,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230424211,230424211,src/wallet/wallet.cpp
practicalswift,2018-11-02T15:58:17Z,Should be `explicit`? :-),https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230424730,230424730,src/interfaces/node.cpp
practicalswift,2018-11-02T16:00:02Z,"Make `explicit`?\n\nApplies throughout this PR :-)",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230425311,230425311,src/interfaces/base.h
practicalswift,2018-11-02T16:04:48Z,Always true?,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230426764,230426764,src/interfaces/capnp/proxy-codegen.cpp
practicalswift,2018-11-02T16:04:58Z,Always true?,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230426823,230426823,src/interfaces/capnp/proxy-codegen.cpp
practicalswift,2018-11-02T16:05:48Z,`ByteCast` not used?,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230427113,230427113,src/interfaces/capnp/proxy-impl.h
practicalswift,2018-11-02T16:05:55Z,Same here.,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230427137,230427137,src/interfaces/capnp/proxy-impl.h
practicalswift,2018-11-02T16:06:25Z,Not used?,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230427284,230427284,src/interfaces/node.cpp
practicalswift,2018-11-02T16:07:03Z,Not used?,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230427503,230427503,src/interfaces/capnp/proxy.cpp
practicalswift,2018-11-02T16:07:22Z,Not used?,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230427589,230427589,src/interfaces/capnp/test/foo.cpp
practicalswift,2018-11-02T16:07:34Z,Not used?,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230427653,230427653,src/interfaces/capnp/proxy.cpp
practicalswift,2018-11-02T16:07:55Z,Missing spaces around `=`,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230427795,230427795,src/init.h
practicalswift,2018-11-02T16:08:19Z,Missing copyright header,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230427926,230427926,src/interfaces/base.cpp
practicalswift,2018-11-02T16:08:33Z,Missing copyright header.,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230427994,230427994,src/interfaces/base.h
practicalswift,2018-11-02T16:08:43Z,Missing copyright header.,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230428044,230428044,src/interfaces/capnp/ipc.cpp
practicalswift,2018-11-02T16:09:08Z,Missing whitespace before `{`.,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230428192,230428192,src/interfaces/capnp/ipc.cpp
practicalswift,2018-11-02T16:10:25Z,Typo: pipelining,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230428604,230428604,src/interfaces/capnp/proxy-impl.h
practicalswift,2018-11-04T21:23:52Z,The optional `block_height` could be uninitialized here?,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230605926,230605926,src/wallet/wallet.cpp
practicalswift,2018-11-04T21:24:04Z,Same here?,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230605933,230605933,src/wallet/wallet.cpp
ryanofsky,2018-11-12T19:27:29Z,"re: https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230427653\n\n> Not used?\n\nNo, it's a overridden method called through the base class by the kj library.",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r232783285,232783285,src/interfaces/capnp/proxy.cpp
ryanofsky,2018-11-12T19:27:36Z,"re: https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230427503\n\n> Not used?\n\nNo, it's called by generated code.",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r232783326,232783326,src/interfaces/capnp/proxy.cpp
ryanofsky,2018-11-12T19:27:41Z,"re: https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230427589\n\n> Not used?\n\nNo, it's called by generated code.",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r232783356,232783356,src/interfaces/capnp/test/foo.cpp
ryanofsky,2018-11-12T19:28:04Z,"re: https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230426764\n\n> Always true?\n\nhas_result is false for any method that doesn't have an output named result, which is true for any method that returns void.\n\n",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r232783467,232783467,src/interfaces/capnp/proxy-codegen.cpp
ryanofsky,2018-11-12T19:28:08Z,"re: https://github.com/bitcoin/bitcoin/pull/10102#discussion_r230426823\n\n> Always true?\n\nNo, see previous comment.",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r232783489,232783489,src/interfaces/capnp/proxy-codegen.cpp
practicalswift,2019-01-24T09:02:50Z,Shadows variable `params` in outer scope?,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r250513986,250513986,src/interfaces/capnp/proxy-impl.h
practicalswift,2019-01-24T09:03:01Z,Same here?,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r250514057,250514057,src/interfaces/capnp/proxy-impl.h
practicalswift,2019-01-24T09:04:49Z,Should be `explicit`? Applies to all single parameter constructors in this PR :-),https://github.com/bitcoin/bitcoin/pull/10102#discussion_r250514589,250514589,src/interfaces/capnp/util.h
practicalswift,2019-01-25T08:47:58Z,Are `arg1` and `arg2` guaranteed to be valid here? Could have been moved from on the call on the line before?,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r250904863,250904863,src/interfaces/capnp/proxy-impl.h
MarcoFalke,2020-06-02T13:36:57Z,"in commit b737e5397af4cedde1aec47f5b4e87c2521efdd0\n\nOut of scope for this pr, but I am wondering if it wouldn't be easier to compile an increased rpc timeout factor into the test config file. This way, all tests are updated when compiled with ipc and it would avoid having to update them manually and individually.",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r433880214,433880214,test/functional/feature_block.py
ryanofsky,2020-06-02T19:28:00Z,"> in commit [b737e53](https://github.com/bitcoin/bitcoin/commit/b737e5397af4cedde1aec47f5b4e87c2521efdd0)\n> \n> Out of scope for this pr, but I am wondering if it wouldn't be easier to compile an increased rpc timeout factor into the test config file. This way, all tests are updated when compiled with ipc and it would avoid having to update them manually and individually.\n\nThat's a good ide",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r434125730,434125730,test/functional/feature_block.py
fanquake,2021-03-12T00:28:11Z,Please [use `std::make_unique` in new code](https://github.com/bitcoin/bitcoin/blob/master/src/util/memory.h#L13).,https://github.com/bitcoin/bitcoin/pull/10102#discussion_r592825932,592825932,src/init/bitcoin-gui.cpp
ryanofsky,2021-07-12T15:49:50Z,"In commit ""Make bitcoin-gui spawn a bitcoin-node process"" (2516d397d54b021e37d6e7628655fe7c54d2fb06):\n\nre: https://github.com/bitcoin/bitcoin/commit/2516d397d54b021e37d6e7628655fe7c54d2fb06#r53368428\n\n> IIUC, it's going to be call at the first invocation on the server from the client as it's dependent on the whole `serverInvoke()`/`MakeServerField()`/etc call chain ? Sometimes it's hard to",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r668050651,668050651,src/init/bitcoin-node.cpp
MarcoFalke,2021-08-18T05:56:02Z,"When you are re-introducing this, it might be good to cleanup the complexity in this method or maybe just use the existing json serialization?",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r690922929,690922929,src/netaddress.h
ryanofsky,2021-08-31T16:06:18Z,"re: https://github.com/bitcoin/bitcoin/pull/10102#discussion_r690922929\n\n> When you are re-introducing this, it might be good to cleanup the complexity in this method or maybe just use the existing json serialization?\n\nThanks, exposed json functions in #22848, and now using it in this PR",https://github.com/bitcoin/bitcoin/pull/10102#discussion_r699472210,699472210,src/netaddress.h
