wodry,2019-11-12 05:47:04,"I find it scary, that a bug like this can be introduced. I am wondering if there are not any tools that check the code for references to uninitialized variables?",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552744617,552744617,
DrahtBot,2019-11-12 06:54:04,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552760632,552760632,
promag,2019-11-12 08:33:04,Fixes what? Both are already initialized..,https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552789063,552789063,
laanwj,2019-11-12 09:07:01,"> Fixes what? Both are already initialized..\n\nIt's used for the computation of `BIP9WarningHeight`, and by that time it isn't initialized (I missed it first, too!).\n\n> I find it scary, that a bug like this can be introduced. I am wondering if there are not any tools that check the code for references to uninitialized variables?\n\nThe tests are being run in various sanitizers, and valgri",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552800966,552800966,
practicalswift,2019-11-12 09:09:33,"@promag It looks like `consensus.nMinerConfirmationWindow` was indeed being read uninitialised on L74 prior to the change suggested by this PR?\n\n```\nconsensus.MinBIP9WarningHeight = consensus.SegwitHeight + consensus.nMinerConfirmationWindow;\n```\n\nThis code was introduced in fdb3e8f8b27e3b0b2f88c32915975c6e4c299b1e in PR #16713 which was merged in to `master` on September 27, 2019.\n",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552801890,552801890,
practicalswift,2019-11-12 09:13:52,"@bitcoinVBR \n\nThanks **a lot** for reporting this! What an excellent first time contribution! Hope to see more great contributions from you.\n\nSorry about the initial misunderstanding in your original PR #17433 :)",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552803568,552803568,
laanwj,2019-11-12 09:15:10,"> Really fascinating that this 1.) wasn't caught automatically by our static and dynamic analysis, \n\nPort to rust when? :smile: ",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552804092,552804092,
promag,2019-11-12 09:15:29,Oh!,https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552804215,552804215,
practicalswift,2019-11-12 10:55:37,"Worth noting is that the read of `nMinerConfirmationWindow` takes place on mainnet and testnet but not on regtest:\n\n```\n$ grep -E '(nMinerConfirmationWindow|CBaseChainParams|MinBIP9WarningHeight)' \\n      src/chainparams.cpp | grep -A2 "" = *CBaseChainParams""\n        strNetworkID = CBaseChainParams::MAIN;\n        consensus.MinBIP9WarningHeight = consensus.SegwitHeight + consensus.nMiner",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552843096,552843096,
theStack,2019-11-12 12:05:07,"ACK https://github.com/bitcoin/bitcoin/pull/17449/commits/6fcd798b42569130f85328133e2124476fb2a42a\nReally surprising that apparently no compiler spit out a warning about this uninitialized access...",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552865658,552865658,
laanwj,2019-11-12 12:16:56,"> Worth noting is that the read of nMinerConfirmationWindow takes place on mainnet and testnet but not on regtest:\n\nGood catch. If there is no unit test that instantiates the main / testnet chain, that'd explain why sanitizer CI checks don't notice it. But it seems that quite a few do, for example:\n```\npow_tests.cpp:    const auto consensus = CreateChainParams(CBaseChainParams::MAIN)->GetC",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552869374,552869374,
practicalswift,2019-11-12 12:37:36,"@laanwj I think there might be a more subtle issue here too - note that `MinBIPWarningHeight` appears to have the correct value (`481824 + 2016 == 483840`) when reaching `Condition(‚Ä¶)` on mainnet: https://github.com/bitcoin/bitcoin/pull/16713#issuecomment-533516173.\n\nI think we might be chasing two issues here where the uninitialised read is the first one :)",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552875765,552875765,
MarcoFalke,2019-11-12 12:48:34,"> Good catch. If there is no unit test that instantiates the main / testnet chain, that'd explain why sanitizer CI checks don't notice it. But it seems that quite a few do, for example:\n\nWe have functional tests that run on the testnet chain. So this should have been caught by a sanitizer (assuming one was enabled)",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552879261,552879261,
MarcoFalke,2019-11-12 13:19:40,I don't think we have the memory sanitizer enabled anywhere,https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552889851,552889851,
ghost,2019-11-12 13:39:10,"> @bitcoinVBR\n> \n> Thanks **a lot** for reporting this! What an excellent first time contribution! Hope to see more great contributions from you.\n> \n> Sorry about the initial misunderstanding in your original PR #17433 :)\n\nThanks! I'm happy to help. I actually only found this bug because of my work on BitcoinV. I'll continue to keep an eye out for anything fishy.",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552896986,552896986,
practicalswift,2019-11-12 13:51:19,"Compiler writers get a lot of heat for exploiting UB to the fullest for optimisation purposes, but in this case it seems like we got really lucky -- they ""fixed"" our code (assuming Clang `-O2`) üòâ \n\nLook at the Clang `-O2` case where we get the `483840` (`481824 + 2016 == 483840`) we intended (!) :)\n\n```\n$ clang++-8 -O0 -o repro repro.cpp && ./repro\nconsensus.MinBIP9WarningHeight[1] == ",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552901592,552901592,
practicalswift,2019-11-12 13:56:16,"@jonatack The output you posted from the testing of PR #16713 in https://github.com/bitcoin/bitcoin/pull/16713#issuecomment-533516173 ...\n\n```\n2019-09-20T11:26:36Z SegwitHeight 481824\n2019-09-20T11:26:36Z nMinerConfirmationWindow 2016\n2019-09-20T11:26:36Z MinBIPWarningHeight 483840\n2019-09-20T11:26:36Z pindex->nHeight 164836\n2019-09-20T11:26:36Z pindex->nVersion 1\n2019-09-20T11:26:",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552903574,552903574,
MarcoFalke,2019-11-12 14:16:33,"@practicalswift I tried gcc 9.2.1 and it happened to optimize out the bug for me as well. Though running the same binary in valgrind still jells at me, so I can't make any sense out of that.",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552911607,552911607,
practicalswift,2019-11-12 14:24:30,@MarcoFalke What is the output of `./repro` for binaries compiled at the different optimisation levels?,https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552914988,552914988,
jonatack,2019-11-12 14:41:09,"> could it be the case that you happened to test with Clang with the project default optimisation level `-O2`? :) If so, could you retry using GCC (any optimisation level), or Clang with `-O0` or `-O1` and see if you get the same results?\n\nIt was with gcc version 8.3.0 (Debian 8.3.0-6) with no optimisation flags.\n",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552922038,552922038,
MarcoFalke,2019-11-12 14:49:48,"> It was with gcc version 8.3.0 (Debian 8.3.0-6) with no optimisation flags.\n\nThe default is O2 for Bitcoin Core",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552925733,552925733,
jnewbery,2019-11-12 15:07:54,"I'd prefer to just hard code the `MinBIP9WarningHeight`, eg:\n\n```c++\n        consensus.MinBIP9WarningHeight = 483840; // segwit activation height + miner confirmation window\n```\n\nHard-coding the value means that even if the member initializations are moved around again, `nMinerConfirmationWindow` will not be accessed before initialization.\n\n`MinBIP9WarningHeight` is currently the o",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552933652,552933652,
MarcoFalke,2019-11-12 15:24:36,"I was about to suggest that the members should be marked `const`, so that initialization and initialization order is enforced by the compiler. Though, I believe that makes the code less readable as C++ does not have named parameters that can be passed into a constructor.",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552941410,552941410,
MarcoFalke,2019-11-12 16:12:04,@bitcoinVBR Could you please adjust the patch as suggested by @jnewbery and then squash your commits according to https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits,https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552963531,552963531,
JayMedyaa,2019-11-12 22:44:56,Has been fixed.,https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-553151954,553151954,
jnewbery,2019-11-13 00:22:56,utACK edb6b768a,https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-553179643,553179643,
promag,2019-11-13 00:29:38,"ACK edb6b768a4185a4aaa6281ee50a6538f7426cb1e, commit description could be cleaned up though.",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-553181184,553181184,
MarcoFalke,2019-11-13 00:56:36,"ACK edb6b768a4185a4aaa6281ee50a6538f7426cb1e, used python3 to do the addition locally üìç\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK edb6b768a4185a4aaa6281ee50a6538f7426cb1e, used python3 to do the addition locally üìç\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUg",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-553187629,553187629,
practicalswift,2019-11-14 09:32:58,"ACK edb6b768a4185a4aaa6281ee50a6538f7426cb1e, used `clang++ -O2` on the previous version^W^W^W^W^W^W`bc` to verify the addition locally üèì ",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-553804038,553804038,
Sjors,2019-11-14 12:03:07,Code review ACK  edb6b76. Nit: commit description has duplicate text.,https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-553857978,553857978,
practicalswift,2019-11-14 13:10:31,"FWIW, Valgrind warns about this when running a `bitcoind` binary compiled from current `master` using GCC with `-O0`:\n\n```\n==19043== Thread 25 b-msghand:\n==19043== Conditional jump or move depends on uninitialised value(s)\n==19043==    at 0x49E12D: WarningBitsConditionChecker::Condition(CBlockIndex const*, Consensus::Params const&) const (validation.cpp:1815)\n==19043==    by 0x541AED: ",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-553880939,553880939,
promag,2019-11-14 13:45:23,@practicalswift he said how above https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-552896986,https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-553894143,553894143,
practicalswift,2019-11-14 14:43:06,"@promag Yes, I understood that it was found in the context of @bitcoinVBR's work on a fork, but I didn't get how it was found. More specifically if it was caught by manual source code review, static analysis or dynamic analysis :)",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-553917894,553917894,
ghost,2019-11-14 15:29:37,"I was updating BitcoinV to add the variable block reward feature based  on Bitcoin v0.19.0 and my eye noticed the variable used before being initialized. \n\nAre there any bounty rewards for these finds?\n\n17yVfEbGZqX1Ce4qTmv4QD29DfeohPq2zi\n\nThanks,\nBitcoinV \n\nSent from my iPhone\n\n> On Nov 14, 2019, at 7:13 AM, practicalswift <notifications@github.com> wrote:\n> \n> Ôªø\n> FWIW",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-553938913,553938913,
practicalswift,2019-11-14 16:21:41,"> Are there any bounty rewards for these finds?\n\nThe Bitcoin Core project does not have any official bounty program AFAIK, but the is nothing stopping individuals from donating to other individuals who they think have done valuable security research.\n\n(Aside: My personal view is that we could do a much better job recognising good security research: especially the non-glamorous kind of low-",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-553963358,553963358,
laanwj,2019-11-15 09:13:37,"Maybe you can get funding for such a thing from one of the exchanges or companies in the space, that's always how developer funding has worked, but the 'bitcoin core' project is a loose name for people contributing to an open source project, and does not manage funds, and should not manage funds, and will never have an ""official incentive structure"".",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-554277468,554277468,
practicalswift,2019-11-15 10:12:23,"> [‚Ä¶] the 'bitcoin core' project is a loose name for people contributing to an open source project, and does not manage funds, and should not manage funds, and will never have an ""official incentive structure"".\n\nAgree 100% if we are talking monetary reward.\n\nNote that incentive structure does not necessarily imply monetary reward: giving proper credit and treating researchers nicely goes a",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-554299565,554299565,
laanwj,2019-11-15 10:38:27,"As all contributors to the release, they've been added to the authors list in 0.19.0.1 (as NullFunctor, as that's the name on their git mail address, @bitcoinVBR: if you want to be credited under a different name let me know) and this PR has been added to the changelog. \n\nThis is not a security issue so I'm not sure why you bring that up. It doesn't matter either, bugs are bugs. All people tha",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-554308389,554308389,
fanquake,2019-11-15 13:41:18,Backported to 0.19 in https://github.com/bitcoin/bitcoin/commit/6ec0dc195dc6db2c949acdf3c54a2c3b22c23f65.,https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-554362476,554362476,
Sjors,2019-11-15 14:18:52,ACK on the rebase 6ec0dc1.,https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-554376155,554376155,
ajtowns,2019-11-26 16:06:37,"> ```\n> consensus.MinBIP9WarningHeight = consensus.SegwitHeight + consensus.nMinerConfirmationWindow;\n> ```\n> Really fascinating that this 1.) wasn't caught automatically by our static and dynamic analysis,\n\nLooks like `-Werror=uninitialized` is able to catch this, but only if the initialisation is done in a `Consensus::Params` constructor via a member initializer list rather than a code",https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-558699361,558699361,
practicalswift,2019-11-26 16:20:20,@ajtowns Worth mentioning from a dynamic analysis perspective is that both Valgrind and MemorySanitizer (`-fsanitize=memory`) catch this too :),https://github.com/bitcoin/bitcoin/pull/17449#issuecomment-558705486,558705486,
