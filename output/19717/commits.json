[
  {
    "sha": "fa93bc14c7411a108dd024d391344fabf0f76369",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTkzYmMxNGM3NDExYTEwOGRkMDI0ZDM5MTM0NGZhYmYwZjc2MzY5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-14T08:15:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-14T10:37:06Z"
      },
      "message": "rpc: Remove unused return type from appendCommand",
      "tree": {
        "sha": "bb0d068e9dedd4bc9d11e7a6a3874589c316c64f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb0d068e9dedd4bc9d11e7a6a3874589c316c64f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa93bc14c7411a108dd024d391344fabf0f76369",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhUdAwAhqrBx4RpWVHRTx/3Z7oB4uZA5J7swpKzq+wFqDAgCbDC1P4H5TMrje6U\naR/yKqdMIjzzUM9xO6xo0HWAtd3AKgkBOnUPQyxsEvGW2cvTfdl1ognwri0UrQaI\ntHK9Kkr7W4/vLnqhyGulv9QLXoXcCT7kG64sEbB18PJyJUIwCyfxMfkMsBf+C1tX\naxShKJcVD/rbOKdNY+g4i4LkG2hm+ILV4ofFUKm43XfJ90Z7irkTr1dt1y0y88Fy\nB+QHUXTYZ3vs/KWX8r/xKvf8WA6jNHrNN2lqDj0pXabG869b0mTpprTk9SUW0XL6\nb2v5pIVL6UJFpa8eHASdEwGPq594T9Ir3sVyk/DFyD1MhwFShlKHqdI7lOvrx5SF\nyU1ihZrB9G72cMlFSVitVROI2ziK8cb+Ie1MKQzY77TmzmKqyPkF8d+efHwRc/W8\nSS78MaCBEgxyUl47zspxD5xYCevhApm2E/0eATAZxZmf7WkdpacIMxF6xifHocOq\nn74pU/g/\n=CDLu\n-----END PGP SIGNATURE-----",
        "payload": "tree bb0d068e9dedd4bc9d11e7a6a3874589c316c64f\nparent 4d4bd5ed7474fac735ae6e0647a87b490e6ff1fa\nauthor MarcoFalke <falke.marco@gmail.com> 1597392930 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1597401426 +0200\n\nrpc: Remove unused return type from appendCommand\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa93bc14c7411a108dd024d391344fabf0f76369",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa93bc14c7411a108dd024d391344fabf0f76369",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa93bc14c7411a108dd024d391344fabf0f76369/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d4bd5ed7474fac735ae6e0647a87b490e6ff1fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d4bd5ed7474fac735ae6e0647a87b490e6ff1fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d4bd5ed7474fac735ae6e0647a87b490e6ff1fa"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 4,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f32d9abac61be7a92ba81ef939ceae2b8d8d0e14",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa93bc14c7411a108dd024d391344fabf0f76369/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa93bc14c7411a108dd024d391344fabf0f76369/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=fa93bc14c7411a108dd024d391344fabf0f76369",
        "patch": "@@ -261,13 +261,11 @@ CRPCTable::CRPCTable()\n     }\n }\n \n-bool CRPCTable::appendCommand(const std::string& name, const CRPCCommand* pcmd)\n+void CRPCTable::appendCommand(const std::string& name, const CRPCCommand* pcmd)\n {\n-    if (IsRPCRunning())\n-        return false;\n+    CHECK_NONFATAL(!IsRPCRunning()); // Only add commands before rpc is running\n \n     mapCommands[name].push_back(pcmd);\n-    return true;\n }\n \n bool CRPCTable::removeCommand(const std::string& name, const CRPCCommand* pcmd)"
      },
      {
        "sha": "b2358ac5b24022ff252bd50b5ee9942808fd6086",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa93bc14c7411a108dd024d391344fabf0f76369/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa93bc14c7411a108dd024d391344fabf0f76369/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=fa93bc14c7411a108dd024d391344fabf0f76369",
        "patch": "@@ -160,7 +160,7 @@ class CRPCTable\n     /**\n      * Appends a CRPCCommand to the dispatch table.\n      *\n-     * Returns false if RPC server is already running (dump concurrency protection).\n+     * Precondition: RPC server is not running\n      *\n      * Commands with different method names but the same unique_id will\n      * be considered aliases, and only the first registered method name will\n@@ -169,7 +169,7 @@ class CRPCTable\n      * between calls based on method name, and aliased commands can also\n      * register different names, types, and numbers of parameters.\n      */\n-    bool appendCommand(const std::string& name, const CRPCCommand* pcmd);\n+    void appendCommand(const std::string& name, const CRPCCommand* pcmd);\n     bool removeCommand(const std::string& name, const CRPCCommand* pcmd);\n };\n "
      }
    ]
  },
  {
    "sha": "faaa46dc204d6d714f71dbc6f0bf02215dba0f0f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWFhNDZkYzIwNGQ2ZDcxNGY3MWRiYzZmMGJmMDIyMTVkYmEwZjBm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-14T09:27:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-14T10:37:19Z"
      },
      "message": "rpc: Assert that RPCArg names are equal to CRPCCommand ones (mining)",
      "tree": {
        "sha": "d7a53af57e258b110e7acaec9a9e9d42f6320c37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7a53af57e258b110e7acaec9a9e9d42f6320c37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faaa46dc204d6d714f71dbc6f0bf02215dba0f0f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUh47Qv/StpFPJQHP/raEMPKDpcK1s5ew4GSn7VgqRLObppStoHzgpum3tgOGX9I\nngazsGhOeYqDLt4H1AwZv+01e3VZ7eMjLtZzPhM/ifsw7nYhAk/WOI3jKgkUwYNd\nJF71Xr/yLUGIG5cSbkROpEhnSFpFJmLEZ0EsPqRo6fsWSFHo/61AwIwZL6aLz5s/\n1pJwCqvtHwBJVp4FDySQeMybIulVgnZluLnAL7kR/Yc0Ok7Spn9krvJZHnoGLf6s\nEUAzBoUeAisdxR1kbKQKFfcVSq9vexKWsu5S/8LtOOC0fIXZX77xmRqX7Vqy6b8L\n5G8OTdKtcwO1r0ARqoT5noh11eaQHKhxnSq6yoh9S2gguo1TN4n/1Yky1k9E3c11\ngZOHJGpFsiHDo8UWCeWVhtKeavuTwk+LO6FnpDFlD1GYTMf3y12PXB6HXp601XOk\n6I1z9pNu2RhWJMWDAC+SdSlYCo9KY7gC/MuxR16X7sQNZYC5O9ke0ZRL2zyBW9Ci\nhMx59SV9\n=4zGz\n-----END PGP SIGNATURE-----",
        "payload": "tree d7a53af57e258b110e7acaec9a9e9d42f6320c37\nparent fa93bc14c7411a108dd024d391344fabf0f76369\nauthor MarcoFalke <falke.marco@gmail.com> 1597397264 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1597401439 +0200\n\nrpc: Assert that RPCArg names are equal to CRPCCommand ones (mining)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaa46dc204d6d714f71dbc6f0bf02215dba0f0f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faaa46dc204d6d714f71dbc6f0bf02215dba0f0f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaa46dc204d6d714f71dbc6f0bf02215dba0f0f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa93bc14c7411a108dd024d391344fabf0f76369",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa93bc14c7411a108dd024d391344fabf0f76369",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa93bc14c7411a108dd024d391344fabf0f76369"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 74,
      "deletions": 51
    },
    "files": [
      {
        "sha": "021c437fba8aae2644d9d02dd78d206d635f5b14",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 50,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaa46dc204d6d714f71dbc6f0bf02215dba0f0f/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaa46dc204d6d714f71dbc6f0bf02215dba0f0f/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=faaa46dc204d6d714f71dbc6f0bf02215dba0f0f",
        "patch": "@@ -81,9 +81,9 @@ static UniValue GetNetworkHashPS(int lookup, int height) {\n     return workDiff.getdouble() / timeDiff;\n }\n \n-static UniValue getnetworkhashps(const JSONRPCRequest& request)\n+static RPCHelpMan getnetworkhashps()\n {\n-            RPCHelpMan{\"getnetworkhashps\",\n+    return RPCHelpMan{\"getnetworkhashps\",\n                 \"\\nReturns the estimated network hashes per second based on the last n blocks.\\n\"\n                 \"Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\\n\"\n                 \"Pass in [height] to estimate the network speed at the time when a certain block was found.\\n\",\n@@ -97,10 +97,12 @@ static UniValue getnetworkhashps(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getnetworkhashps\", \"\")\n             + HelpExampleRpc(\"getnetworkhashps\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     LOCK(cs_main);\n     return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1);\n+},\n+    };\n }\n \n static bool GenerateBlock(ChainstateManager& chainman, CBlock& block, uint64_t& max_tries, unsigned int& extra_nonce, uint256& block_hash)\n@@ -200,9 +202,9 @@ static bool getScriptFromDescriptor(const std::string& descriptor, CScript& scri\n     }\n }\n \n-static UniValue generatetodescriptor(const JSONRPCRequest& request)\n+static RPCHelpMan generatetodescriptor()\n {\n-    RPCHelpMan{\n+    return RPCHelpMan{\n         \"generatetodescriptor\",\n         \"\\nMine blocks immediately to a specified descriptor (before the RPC call returns)\\n\",\n         {\n@@ -218,9 +220,8 @@ static UniValue generatetodescriptor(const JSONRPCRequest& request)\n         },\n         RPCExamples{\n             \"\\nGenerate 11 blocks to mydesc\\n\" + HelpExampleCli(\"generatetodescriptor\", \"11 \\\"mydesc\\\"\")},\n-    }\n-        .Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     const int num_blocks{request.params[0].get_int()};\n     const uint64_t max_tries{request.params[2].isNull() ? DEFAULT_MAX_TRIES : request.params[2].get_int()};\n \n@@ -234,22 +235,25 @@ static UniValue generatetodescriptor(const JSONRPCRequest& request)\n     ChainstateManager& chainman = EnsureChainman(request.context);\n \n     return generateBlocks(chainman, mempool, coinbase_script, num_blocks, max_tries);\n+},\n+    };\n }\n \n-static UniValue generate(const JSONRPCRequest& request)\n+static RPCHelpMan generate()\n {\n-    const std::string help_str{\"generate ( nblocks maxtries ) has been replaced by the -generate cli option. Refer to -help for more information.\"};\n+    return RPCHelpMan{\"generate\", \"has been replaced by the -generate cli option. Refer to -help for more information.\", {}, {}, RPCExamples{\"\"}, [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue {\n \n     if (request.fHelp) {\n-        throw std::runtime_error(help_str);\n+        throw std::runtime_error(self.ToString());\n     } else {\n-        throw JSONRPCError(RPC_METHOD_NOT_FOUND, help_str);\n+        throw JSONRPCError(RPC_METHOD_NOT_FOUND, self.ToString());\n     }\n+    }};\n }\n \n-static UniValue generatetoaddress(const JSONRPCRequest& request)\n+static RPCHelpMan generatetoaddress()\n {\n-            RPCHelpMan{\"generatetoaddress\",\n+    return RPCHelpMan{\"generatetoaddress\",\n                 \"\\nMine blocks immediately to a specified address (before the RPC call returns)\\n\",\n                 {\n                     {\"nblocks\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"How many blocks are generated immediately.\"},\n@@ -267,8 +271,8 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n             + \"If you are using the \" PACKAGE_NAME \" wallet, you can get a new address to send the newly generated bitcoin to with:\\n\"\n             + HelpExampleCli(\"getnewaddress\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     const int num_blocks{request.params[0].get_int()};\n     const uint64_t max_tries{request.params[2].isNull() ? DEFAULT_MAX_TRIES : request.params[2].get_int()};\n \n@@ -283,11 +287,13 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n     CScript coinbase_script = GetScriptForDestination(destination);\n \n     return generateBlocks(chainman, mempool, coinbase_script, num_blocks, max_tries);\n+},\n+    };\n }\n \n-static UniValue generateblock(const JSONRPCRequest& request)\n+static RPCHelpMan generateblock()\n {\n-    RPCHelpMan{\"generateblock\",\n+    return RPCHelpMan{\"generateblock\",\n         \"\\nMine a block with a set of ordered transactions immediately to a specified address or descriptor (before the RPC call returns)\\n\",\n         {\n             {\"output\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address or descriptor to send the newly generated bitcoin to.\"},\n@@ -309,8 +315,8 @@ static UniValue generateblock(const JSONRPCRequest& request)\n             \"\\nGenerate a block to myaddress, with txs rawtx and mempool_txid\\n\"\n             + HelpExampleCli(\"generateblock\", R\"(\"myaddress\" '[\"rawtx\", \"mempool_txid\"]')\")\n         },\n-    }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     const auto address_or_descriptor = request.params[0].get_str();\n     CScript coinbase_script;\n     std::string error;\n@@ -390,11 +396,13 @@ static UniValue generateblock(const JSONRPCRequest& request)\n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"hash\", block_hash.GetHex());\n     return obj;\n+},\n+    };\n }\n \n-static UniValue getmininginfo(const JSONRPCRequest& request)\n+static RPCHelpMan getmininginfo()\n {\n-            RPCHelpMan{\"getmininginfo\",\n+    return RPCHelpMan{\"getmininginfo\",\n                 \"\\nReturns a json object containing mining-related information.\",\n                 {},\n                 RPCResult{\n@@ -413,8 +421,8 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getmininginfo\", \"\")\n             + HelpExampleRpc(\"getmininginfo\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     LOCK(cs_main);\n     const CTxMemPool& mempool = EnsureMemPool(request.context);\n \n@@ -423,18 +431,20 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n     if (BlockAssembler::m_last_block_weight) obj.pushKV(\"currentblockweight\", *BlockAssembler::m_last_block_weight);\n     if (BlockAssembler::m_last_block_num_txs) obj.pushKV(\"currentblocktx\", *BlockAssembler::m_last_block_num_txs);\n     obj.pushKV(\"difficulty\",       (double)GetDifficulty(::ChainActive().Tip()));\n-    obj.pushKV(\"networkhashps\",    getnetworkhashps(request));\n+    obj.pushKV(\"networkhashps\",    getnetworkhashps().HandleRequest(request));\n     obj.pushKV(\"pooledtx\",         (uint64_t)mempool.size());\n     obj.pushKV(\"chain\",            Params().NetworkIDString());\n     obj.pushKV(\"warnings\",         GetWarnings(false).original);\n     return obj;\n+},\n+    };\n }\n \n \n // NOTE: Unlike wallet RPC (which use BTC values), mining RPCs follow GBT (BIP 22) in using satoshi amounts\n-static UniValue prioritisetransaction(const JSONRPCRequest& request)\n+static RPCHelpMan prioritisetransaction()\n {\n-            RPCHelpMan{\"prioritisetransaction\",\n+    return RPCHelpMan{\"prioritisetransaction\",\n                 \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id.\"},\n@@ -451,8 +461,8 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n                     HelpExampleCli(\"prioritisetransaction\", \"\\\"txid\\\" 0.0 10000\")\n             + HelpExampleRpc(\"prioritisetransaction\", \"\\\"txid\\\", 0.0, 10000\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     LOCK(cs_main);\n \n     uint256 hash(ParseHashV(request.params[0], \"txid\"));\n@@ -464,6 +474,8 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n \n     EnsureMemPool(request.context).PrioritiseTransaction(hash, nAmount);\n     return true;\n+},\n+    };\n }\n \n \n@@ -495,9 +507,9 @@ static std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n     return s;\n }\n \n-static UniValue getblocktemplate(const JSONRPCRequest& request)\n+static RPCHelpMan getblocktemplate()\n {\n-            RPCHelpMan{\"getblocktemplate\",\n+    return RPCHelpMan{\"getblocktemplate\",\n                 \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n                 \"It returns data needed to construct a block to work on.\\n\"\n                 \"For full specification, see BIPs 22, 23, 9, and 145:\\n\"\n@@ -579,8 +591,8 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblocktemplate\", \"'{\\\"rules\\\": [\\\"segwit\\\"]}'\")\n             + HelpExampleRpc(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     LOCK(cs_main);\n \n     std::string strMode = \"template\";\n@@ -888,6 +900,8 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     }\n \n     return result;\n+},\n+    };\n }\n \n class submitblock_StateCatcher final : public CValidationInterface\n@@ -908,10 +922,10 @@ class submitblock_StateCatcher final : public CValidationInterface\n     }\n };\n \n-static UniValue submitblock(const JSONRPCRequest& request)\n+static RPCHelpMan submitblock()\n {\n     // We allow 2 arguments for compliance with BIP22. Argument 2 is ignored.\n-            RPCHelpMan{\"submitblock\",\n+    return RPCHelpMan{\"submitblock\",\n                 \"\\nAttempts to submit new block to network.\\n\"\n                 \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\",\n                 {\n@@ -923,8 +937,8 @@ static UniValue submitblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"submitblock\", \"\\\"mydata\\\"\")\n             + HelpExampleRpc(\"submitblock\", \"\\\"mydata\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CBlock> blockptr = std::make_shared<CBlock>();\n     CBlock& block = *blockptr;\n     if (!DecodeHexBlk(block, request.params[0].get_str())) {\n@@ -969,11 +983,13 @@ static UniValue submitblock(const JSONRPCRequest& request)\n         return \"inconclusive\";\n     }\n     return BIP22ValidationResult(sc->state);\n+},\n+    };\n }\n \n-static UniValue submitheader(const JSONRPCRequest& request)\n+static RPCHelpMan submitheader()\n {\n-            RPCHelpMan{\"submitheader\",\n+    return RPCHelpMan{\"submitheader\",\n                 \"\\nDecode the given hexdata as a header and submit it as a candidate chain tip if valid.\"\n                 \"\\nThrows when the header is invalid.\\n\",\n                 {\n@@ -985,8 +1001,8 @@ static UniValue submitheader(const JSONRPCRequest& request)\n                     HelpExampleCli(\"submitheader\", \"\\\"aabbcc\\\"\") +\n                     HelpExampleRpc(\"submitheader\", \"\\\"aabbcc\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     CBlockHeader h;\n     if (!DecodeHexBlockHeader(h, request.params[0].get_str())) {\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block header decode failed\");\n@@ -1005,11 +1021,13 @@ static UniValue submitheader(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_VERIFY_ERROR, state.ToString());\n     }\n     throw JSONRPCError(RPC_VERIFY_ERROR, state.GetRejectReason());\n+},\n+    };\n }\n \n-static UniValue estimatesmartfee(const JSONRPCRequest& request)\n+static RPCHelpMan estimatesmartfee()\n {\n-            RPCHelpMan{\"estimatesmartfee\",\n+    return RPCHelpMan{\"estimatesmartfee\",\n                 \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n                 \"confirmation within conf_target blocks if possible and return the number of blocks\\n\"\n                 \"for which the estimate is valid. Uses virtual transaction size as defined\\n\"\n@@ -1043,8 +1061,8 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"estimatesmartfee\", \"6\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VSTR});\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n@@ -1070,11 +1088,13 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n     }\n     result.pushKV(\"blocks\", feeCalc.returnedTarget);\n     return result;\n+},\n+    };\n }\n \n-static UniValue estimaterawfee(const JSONRPCRequest& request)\n+static RPCHelpMan estimaterawfee()\n {\n-            RPCHelpMan{\"estimaterawfee\",\n+    return RPCHelpMan{\"estimaterawfee\",\n                 \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n                 \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n                 \"         implementation of fee estimation. The parameters it can be called with\\n\"\n@@ -1126,8 +1146,8 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM}, true);\n     RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n     unsigned int max_target = ::feeEstimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n@@ -1186,6 +1206,8 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n         result.pushKV(StringForFeeEstimateHorizon(horizon), horizon_result);\n     }\n     return result;\n+},\n+    };\n }\n \n void RegisterMiningRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "e55f2e6d1208479a34a0dfa8acdf5ddda53f83ec",
        "filename": "test/functional/rpc_generate.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaa46dc204d6d714f71dbc6f0bf02215dba0f0f/test/functional/rpc_generate.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaa46dc204d6d714f71dbc6f0bf02215dba0f0f/test/functional/rpc_generate.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_generate.py?ref=faaa46dc204d6d714f71dbc6f0bf02215dba0f0f",
        "patch": "@@ -17,7 +17,8 @@ def set_test_params(self):\n \n     def run_test(self):\n         message = (\n-            \"generate ( nblocks maxtries ) has been replaced by the -generate \"\n+            \"generate\\n\"\n+            \"has been replaced by the -generate \"\n             \"cli option. Refer to -help for more information.\"\n         )\n "
      }
    ]
  },
  {
    "sha": "fa32c1d5ec25bc53bf989a8ae68e688593d2859d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTMyYzFkNWVjMjViYzUzYmY5ODlhOGFlNjhlNjg4NTkzZDI4NTlk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-14T09:30:55Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-14T10:37:51Z"
      },
      "message": "rpc: Assert that RPCArg names are equal to CRPCCommand ones (zmq)",
      "tree": {
        "sha": "54141185729852f7fb3b2e9ffc2ef093c09b9fbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54141185729852f7fb3b2e9ffc2ef093c09b9fbd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa32c1d5ec25bc53bf989a8ae68e688593d2859d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhp8gwAl9aVUX4wVV+rW+1K2vmbwRZb6g3SJdDuUTwnX+KKFjYTsTIsI2xoaELo\n6CKYyPIjfiapT42hHZ0VDWIaCpdJNFOJ6wOAaoE1aERXQEOP4J5eL80sglbkIAZI\nkh58iW9LP4Bp1FdN/smEgB9GS7GRQgsZeuNTJp8XCNVPt6RNgeQKJvu+QYoNSzA9\nLL1Xj3pkFXewnooxTDyi2weqeeZpSIrG0zUsp7bwgmzLQuIN0cIi/H0NLuJ6Uihf\nSPzlgXHEmthysz3CQV1KqRmmRpemYSLPkyCePHTSAO48eIeZfx8Sw7mYQ8uEs7Zx\nSAlryCbByaZJu5ca5N+neqLqxIhp04ppJbBo4Q8Xsq1g/5s4DDDanD+cs/psQbSs\nY5+DcaKmVpXMjv4Y9phfpSGZb6Ew5l13+XX1gp+RSqDp4zW64cv/aggJuoeTLXye\nv9c+tUMUhjK30Q8au3EvUdx6ipfgtKO3U/Q5oaFPTL9Bzj1p10ds09J/bUPgtoOb\nQkvlVh4I\n=SNGa\n-----END PGP SIGNATURE-----",
        "payload": "tree 54141185729852f7fb3b2e9ffc2ef093c09b9fbd\nparent faaa46dc204d6d714f71dbc6f0bf02215dba0f0f\nauthor MarcoFalke <falke.marco@gmail.com> 1597397455 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1597401471 +0200\n\nrpc: Assert that RPCArg names are equal to CRPCCommand ones (zmq)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa32c1d5ec25bc53bf989a8ae68e688593d2859d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa32c1d5ec25bc53bf989a8ae68e688593d2859d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa32c1d5ec25bc53bf989a8ae68e688593d2859d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faaa46dc204d6d714f71dbc6f0bf02215dba0f0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaa46dc204d6d714f71dbc6f0bf02215dba0f0f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faaa46dc204d6d714f71dbc6f0bf02215dba0f0f"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1dd751b4935148f118e40da37575f14f06663e7a",
        "filename": "src/zmq/zmqrpc.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa32c1d5ec25bc53bf989a8ae68e688593d2859d/src/zmq/zmqrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa32c1d5ec25bc53bf989a8ae68e688593d2859d/src/zmq/zmqrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqrpc.cpp?ref=fa32c1d5ec25bc53bf989a8ae68e688593d2859d",
        "patch": "@@ -13,9 +13,9 @@\n \n namespace {\n \n-UniValue getzmqnotifications(const JSONRPCRequest& request)\n+static RPCHelpMan getzmqnotifications()\n {\n-            RPCHelpMan{\"getzmqnotifications\",\n+    return RPCHelpMan{\"getzmqnotifications\",\n                 \"\\nReturns information about the active ZeroMQ notifications.\\n\",\n                 {},\n                 RPCResult{\n@@ -33,8 +33,8 @@ UniValue getzmqnotifications(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getzmqnotifications\", \"\")\n             + HelpExampleRpc(\"getzmqnotifications\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     UniValue result(UniValue::VARR);\n     if (g_zmq_notification_interface != nullptr) {\n         for (const auto* n : g_zmq_notification_interface->GetActiveNotifiers()) {\n@@ -47,6 +47,8 @@ UniValue getzmqnotifications(const JSONRPCRequest& request)\n     }\n \n     return result;\n+},\n+    };\n }\n \n const CRPCCommand commands[] ="
      }
    ]
  },
  {
    "sha": "fa3d9ce3254882c545d700990fe8e9a678f31eed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTNkOWNlMzI1NDg4MmM1NDVkNzAwOTkwZmU4ZTlhNjc4ZjMxZWVk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-14T09:22:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-14T10:38:03Z"
      },
      "message": "rpc: Assert that RPCArg names are equal to CRPCCommand ones (rpcdump)",
      "tree": {
        "sha": "f9438df9581423fe923eb8cec95ee9cf51a2c904",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9438df9581423fe923eb8cec95ee9cf51a2c904"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa3d9ce3254882c545d700990fe8e9a678f31eed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg0oQwAjggFvxJUitv4gCau+VKdwowro3/4uVoMaGKfgl/KRDQQObW9W7eoTXsO\nEforLQIVLY7VSqdT4YlR/5wKEvXRTyD6jSJJbCgYonHEGMm6B8cnR6AvffITQ4xa\nTxFrzOcmVJXYDx8BvuCdatjtyruJ46BOuFhME26dNajl9lDaYoPqug9A2BV6wGzM\nHsr/WPTPx0YehQr+t7Oe9WNTrt29IRU26aSBuRY/NG0Jlo7rowBSgtSNj4cY11F/\n4ERuHYJI1DHliZyMIWoBHWXeIgViQMi2PXRwF0nd9uu7y/9pBwgANG2+fyeDpx5X\n2xSqg4ulT3d9ueZ+wptJxpJ3qKNbdbsuQOT6TQy1ipV0dIGw+RAVzdgEmgsqwmgW\nC690K6OrcWhOK6YnxtwAzM9BmzIrWVAR2IqVVyG6V9yWWzoduBwL3Z5q+QAX9jp8\nVEIjH8gSs2PCaXwec03U/mmvCBU4Ti/m5sy3UAnqsGqNKYExmZrVBOaLmWGCRaKe\n+jciY3yk\n=OPLw\n-----END PGP SIGNATURE-----",
        "payload": "tree f9438df9581423fe923eb8cec95ee9cf51a2c904\nparent fa32c1d5ec25bc53bf989a8ae68e688593d2859d\nauthor MarcoFalke <falke.marco@gmail.com> 1597396925 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1597401483 +0200\n\nrpc: Assert that RPCArg names are equal to CRPCCommand ones (rpcdump)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3d9ce3254882c545d700990fe8e9a678f31eed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3d9ce3254882c545d700990fe8e9a678f31eed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3d9ce3254882c545d700990fe8e9a678f31eed/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa32c1d5ec25bc53bf989a8ae68e688593d2859d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa32c1d5ec25bc53bf989a8ae68e688593d2859d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa32c1d5ec25bc53bf989a8ae68e688593d2859d"
      }
    ],
    "stats": {
      "total": 144,
      "additions": 83,
      "deletions": 61
    },
    "files": [
      {
        "sha": "9e36a09780b4c117464266bb390ad71fc6c672df",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 44,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3d9ce3254882c545d700990fe8e9a678f31eed/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3d9ce3254882c545d700990fe8e9a678f31eed/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fa3d9ce3254882c545d700990fe8e9a678f31eed",
        "patch": "@@ -90,9 +90,9 @@ static void RescanWallet(CWallet& wallet, const WalletRescanReserver& reserver,\n     }\n }\n \n-UniValue importprivkey(const JSONRPCRequest& request)\n+RPCHelpMan importprivkey()\n {\n-            RPCHelpMan{\"importprivkey\",\n+    return RPCHelpMan{\"importprivkey\",\n                 \"\\nAdds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.\\n\"\n                 \"Hint: use importmulti to import more than one private key.\\n\"\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n@@ -116,8 +116,8 @@ UniValue importprivkey(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"importprivkey\", \"\\\"mykey\\\", \\\"testing\\\", false\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -189,11 +189,13 @@ UniValue importprivkey(const JSONRPCRequest& request)\n     }\n \n     return NullUniValue;\n+},\n+    };\n }\n \n-UniValue abortrescan(const JSONRPCRequest& request)\n+RPCHelpMan abortrescan()\n {\n-            RPCHelpMan{\"abortrescan\",\n+    return RPCHelpMan{\"abortrescan\",\n                 \"\\nStops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.\\n\"\n                 \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n                 {},\n@@ -206,20 +208,22 @@ UniValue abortrescan(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"abortrescan\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n     if (!pwallet->IsScanning() || pwallet->IsAbortingRescan()) return false;\n     pwallet->AbortRescan();\n     return true;\n+},\n+    };\n }\n \n-UniValue importaddress(const JSONRPCRequest& request)\n+RPCHelpMan importaddress()\n {\n-            RPCHelpMan{\"importaddress\",\n+    return RPCHelpMan{\"importaddress\",\n                 \"\\nAdds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n             \"may report that the imported address exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n@@ -243,8 +247,8 @@ UniValue importaddress(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"importaddress\", \"\\\"myaddress\\\", \\\"testing\\\", false\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -315,20 +319,22 @@ UniValue importaddress(const JSONRPCRequest& request)\n     }\n \n     return NullUniValue;\n+},\n+    };\n }\n \n-UniValue importprunedfunds(const JSONRPCRequest& request)\n+RPCHelpMan importprunedfunds()\n {\n-            RPCHelpMan{\"importprunedfunds\",\n+    return RPCHelpMan{\"importprunedfunds\",\n                 \"\\nImports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\\n\",\n                 {\n                     {\"rawtransaction\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A raw transaction in hex funding an already-existing address in wallet\"},\n                     {\"txoutproof\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex output from gettxoutproof that contains the transaction\"},\n                 },\n                 RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\"\"},\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -371,11 +377,13 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     }\n \n     throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No addresses in wallet correspond to included transaction\");\n+},\n+    };\n }\n \n-UniValue removeprunedfunds(const JSONRPCRequest& request)\n+RPCHelpMan removeprunedfunds()\n {\n-            RPCHelpMan{\"removeprunedfunds\",\n+    return RPCHelpMan{\"removeprunedfunds\",\n                 \"\\nDeletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex-encoded id of the transaction you are deleting\"},\n@@ -386,8 +394,8 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"removeprunedfunds\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -408,11 +416,13 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n     }\n \n     return NullUniValue;\n+},\n+    };\n }\n \n-UniValue importpubkey(const JSONRPCRequest& request)\n+RPCHelpMan importpubkey()\n {\n-            RPCHelpMan{\"importpubkey\",\n+    return RPCHelpMan{\"importpubkey\",\n                 \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n                 \"Hint: use importmulti to import more than one public key.\\n\"\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n@@ -432,8 +442,8 @@ UniValue importpubkey(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"importpubkey\", \"\\\"mypubkey\\\", \\\"testing\\\", false\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -492,12 +502,14 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     }\n \n     return NullUniValue;\n+},\n+    };\n }\n \n \n-UniValue importwallet(const JSONRPCRequest& request)\n+RPCHelpMan importwallet()\n {\n-            RPCHelpMan{\"importwallet\",\n+    return RPCHelpMan{\"importwallet\",\n                 \"\\nImports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.\\n\"\n                 \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n                 {\n@@ -512,8 +524,8 @@ UniValue importwallet(const JSONRPCRequest& request)\n             \"\\nImport using the json rpc call\\n\"\n             + HelpExampleRpc(\"importwallet\", \"\\\"test\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -649,11 +661,13 @@ UniValue importwallet(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding some keys/scripts to wallet\");\n \n     return NullUniValue;\n+},\n+    };\n }\n \n-UniValue dumpprivkey(const JSONRPCRequest& request)\n+RPCHelpMan dumpprivkey()\n {\n-            RPCHelpMan{\"dumpprivkey\",\n+    return RPCHelpMan{\"dumpprivkey\",\n                 \"\\nReveals the private key corresponding to 'address'.\\n\"\n                 \"Then the importprivkey can be used with this output\\n\",\n                 {\n@@ -667,8 +681,8 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n             + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\"\")\n             + HelpExampleRpc(\"dumpprivkey\", \"\\\"myaddress\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     const CWallet* const pwallet = wallet.get();\n@@ -693,12 +707,14 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key for address \" + strAddress + \" is not known\");\n     }\n     return EncodeSecret(vchSecret);\n+},\n+    };\n }\n \n \n-UniValue dumpwallet(const JSONRPCRequest& request)\n+RPCHelpMan dumpwallet()\n {\n-            RPCHelpMan{\"dumpwallet\",\n+    return RPCHelpMan{\"dumpwallet\",\n                 \"\\nDumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.\\n\"\n                 \"Imported scripts are included in the dumpfile, but corresponding BIP173 addresses, etc. may not be added automatically by importwallet.\\n\"\n                 \"Note that if your wallet contains keys which are not derived from your HD seed (e.g. imported keys), these are not covered by\\n\"\n@@ -716,8 +732,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n                     HelpExampleCli(\"dumpwallet\", \"\\\"test\\\"\")\n             + HelpExampleRpc(\"dumpwallet\", \"\\\"test\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n@@ -829,6 +845,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     reply.pushKV(\"filename\", filepath.string());\n \n     return reply;\n+},\n+    };\n }\n \n struct ImportData\n@@ -1239,9 +1257,9 @@ static int64_t GetImportTimestamp(const UniValue& data, int64_t now)\n     throw JSONRPCError(RPC_TYPE_ERROR, \"Missing required timestamp field for key\");\n }\n \n-UniValue importmulti(const JSONRPCRequest& mainRequest)\n+RPCHelpMan importmulti()\n {\n-            RPCHelpMan{\"importmulti\",\n+    return RPCHelpMan{\"importmulti\",\n                 \"\\nImport addresses/scripts (with private or public keys, redeem script (P2SH)), optionally rescanning the blockchain from the earliest creation time of the imported scripts. Requires a new wallet backup.\\n\"\n                 \"If an address/script is imported without all of the private keys required to spend from that address, it will be watchonly. The 'watchonly' option must be set to true in this case or a warning will be returned.\\n\"\n                 \"Conversely, if all the private keys are provided and the address/script is spendable, the watchonly option must be set to false, or a warning will be returned.\\n\"\n@@ -1314,8 +1332,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                                           \"{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my 2nd address>\\\" }, \\\"label\\\": \\\"example 2\\\", \\\"timestamp\\\": 1455191480 }]'\") +\n                     HelpExampleCli(\"importmulti\", \"'[{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my address>\\\" }, \\\"timestamp\\\":1455191478 }]' '{ \\\"rescan\\\": false}'\")\n                 },\n-            }.Check(mainRequest);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& mainRequest) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(mainRequest);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -1423,6 +1441,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     }\n \n     return response;\n+},\n+    };\n }\n \n static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n@@ -1564,9 +1584,9 @@ static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue&\n     return result;\n }\n \n-UniValue importdescriptors(const JSONRPCRequest& main_request)\n+RPCHelpMan importdescriptors()\n {\n-            RPCHelpMan{\"importdescriptors\",\n+    return RPCHelpMan{\"importdescriptors\",\n                 \"\\nImport descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.\\n\"\n             \"\\nNote: This call can take over an hour to complete if using an early timestamp; during that time, other rpc calls\\n\"\n             \"may report that the imported keys, addresses or scripts exist but related transactions are still missing.\\n\",\n@@ -1615,8 +1635,8 @@ UniValue importdescriptors(const JSONRPCRequest& main_request)\n                                           \"{ \\\"desc\\\": \\\"<my desccriptor 2>\\\", \\\"label\\\": \\\"example 2\\\", \\\"timestamp\\\": 1455191480 }]'\") +\n                     HelpExampleCli(\"importdescriptors\", \"'[{ \\\"desc\\\": \\\"<my descriptor>\\\", \\\"timestamp\\\":1455191478, \\\"active\\\": true, \\\"range\\\": [0,100], \\\"label\\\": \\\"<my bech32 wallet>\\\" }]'\")\n                 },\n-            }.Check(main_request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& main_request) -> UniValue\n+{\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(main_request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n@@ -1713,4 +1733,6 @@ UniValue importdescriptors(const JSONRPCRequest& main_request)\n     }\n \n     return response;\n+},\n+    };\n }"
      },
      {
        "sha": "23068488c4c9ef8d41bd5a6042f17206f17e22d6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3d9ce3254882c545d700990fe8e9a678f31eed/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3d9ce3254882c545d700990fe8e9a678f31eed/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa3d9ce3254882c545d700990fe8e9a678f31eed",
        "patch": "@@ -4133,17 +4133,17 @@ static UniValue upgradewallet(const JSONRPCRequest& request)\n     return error.original;\n }\n \n-UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp\n-UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n-UniValue importprivkey(const JSONRPCRequest& request);\n-UniValue importaddress(const JSONRPCRequest& request);\n-UniValue importpubkey(const JSONRPCRequest& request);\n-UniValue dumpwallet(const JSONRPCRequest& request);\n-UniValue importwallet(const JSONRPCRequest& request);\n-UniValue importprunedfunds(const JSONRPCRequest& request);\n-UniValue removeprunedfunds(const JSONRPCRequest& request);\n-UniValue importmulti(const JSONRPCRequest& request);\n-UniValue importdescriptors(const JSONRPCRequest& request);\n+RPCHelpMan abortrescan();\n+RPCHelpMan dumpprivkey();\n+RPCHelpMan importprivkey();\n+RPCHelpMan importaddress();\n+RPCHelpMan importpubkey();\n+RPCHelpMan dumpwallet();\n+RPCHelpMan importwallet();\n+RPCHelpMan importprunedfunds();\n+RPCHelpMan removeprunedfunds();\n+RPCHelpMan importmulti();\n+RPCHelpMan importdescriptors();\n \n Span<const CRPCCommand> GetWalletRPCCommands()\n {"
      },
      {
        "sha": "c46e90d64bc7d9d975b51e67201edadc2c713839",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3d9ce3254882c545d700990fe8e9a678f31eed/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3d9ce3254882c545d700990fe8e9a678f31eed/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=fa3d9ce3254882c545d700990fe8e9a678f31eed",
        "patch": "@@ -24,9 +24,9 @@\n #include <boost/test/unit_test.hpp>\n #include <univalue.h>\n \n-extern UniValue importmulti(const JSONRPCRequest& request);\n-extern UniValue dumpwallet(const JSONRPCRequest& request);\n-extern UniValue importwallet(const JSONRPCRequest& request);\n+RPCHelpMan importmulti();\n+RPCHelpMan dumpwallet();\n+RPCHelpMan importwallet();\n \n // Ensure that fee levels defined in the wallet are at least as high\n // as the default levels for node policy.\n@@ -219,7 +219,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n         request.params.setArray();\n         request.params.push_back(keys);\n \n-        UniValue response = importmulti(request);\n+        UniValue response = importmulti().HandleRequest(request);\n         BOOST_CHECK_EQUAL(response.write(),\n             strprintf(\"[{\\\"success\\\":false,\\\"error\\\":{\\\"code\\\":-1,\\\"message\\\":\\\"Rescan failed for key with creation \"\n                       \"timestamp %d. There was an error reading a block from time %d, which is after or within %d \"\n@@ -274,7 +274,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         request.params.setArray();\n         request.params.push_back(backup_file);\n \n-        ::dumpwallet(request);\n+        ::dumpwallet().HandleRequest(request);\n         RemoveWallet(wallet);\n     }\n \n@@ -291,7 +291,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         request.params.push_back(backup_file);\n         AddWallet(wallet);\n         wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n-        ::importwallet(request);\n+        ::importwallet().HandleRequest(request);\n         RemoveWallet(wallet);\n \n         BOOST_CHECK_EQUAL(wallet->mapWallet.size(), 3U);"
      }
    ]
  }
]