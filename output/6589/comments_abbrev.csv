sipa,2015-08-25T20:48:00Z,"Concept ACK, I think this is useful.\n",https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-134735692,134735692,
jonasschnelli,2015-08-26T12:06:36Z,Thanks @sipa for reviewing!\nFixed nits. Added `bytessent_per_cmd` and `bytesrecv_per_cmd` to `getpeersinfo` help.\n,https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-134969277,134969277,
sipa,2015-08-26T16:40:48Z,"I haven't checked the code for this, but we should make sure this only\naccounts for incoming messages of a known type. Otherwise you introduce a\nmemory DoS attack by allowing the sender to construct an arbitrarily-sized\nmap.\n",https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-135101920,135101920,
jonasschnelli,2015-08-26T16:50:53Z,@sipa: good point! Will address it soon.\n,https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-135105928,135105928,
theuni,2015-08-26T18:47:25Z,"These maps will need locking\n\nEdit: I take that back. It looks like the cs_vNodes in CopyNodeStats is enough. Might want to make CNode::mapSendBytesPerCmd / CNode::mapRecvBytesPerCmd private though, so nobody's tempted to use them directly.\n",https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-135136527,135136527,
jonasschnelli,2015-08-27T07:09:47Z,@theuni: Right. I was aware of the locking and did come to the conclusion that both new maps are protected by `cs_vSend` and `cs_vRecvMsg`.\n\nMoved the maps to the private section.\n,https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-135317058,135317058,
jonasschnelli,2015-08-27T13:21:56Z,Added memory DOS prevention by filtering valid commands.\n,https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-135426326,135426326,
jgarzik,2015-10-01T09:48:31Z,ut ACK - this actually recreates a change I wrote a long time ago (first version of getpeerinfo did this)\n,https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-144680622,144680622,
dcousens,2015-10-04T23:30:42Z,concept ACK\n\n**edit**: is it worth persisting this to storage?\n,https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-145401325,145401325,
jonasschnelli,2015-12-03T16:12:49Z,"IMO\n`for (unsigned int i = 0; i < sizeof(logAllowIncommingCmds)/sizeof(logAllowIncommingCmds[0]); i++)` is fine until we switch over to C++11.\n\n@dcousens: not sure if disk persistence would make sense here. I'd like to extend this up to the GUI layer to have a better network/bandwidth graph that could also generate and show data when it's not opened, though, this PR does not include time based ",https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-161694521,161694521,
jonasschnelli,2015-12-04T08:08:10Z,Passed Travis now.\nWould be nice if someone can test this.\n,https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-161904689,161904689,
laanwj,2015-12-04T09:05:51Z,Going to test this\n,https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-161913252,161913252,
jonasschnelli,2015-12-04T09:32:09Z,@laanwj: I like your map.find approach.\nImplemented (squash-me commit) and renamed POSIX reserved `*_t` type.\n,https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-161919414,161919414,
laanwj,2015-12-04T09:38:04Z,"Minimally-tested ACK, I like this functionality a lot\n",https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-161920388,161920388,
laanwj,2015-12-04T09:39:20Z,"Speaking of which, why is `verack` accounted for 0 bytes? I guess we don't include the message header in the size? I think it should.\n\n```\n    ""bytessent_per_cmd"": {\n      ""addr"": 31,\n      ""getheaders"": 997,\n      ""inv"": 9043,\n      ""ping"": 16,\n      ""verack"": 0,\n      ""version"": 115\n    },\n```\n",https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-161920605,161920605,
jonasschnelli,2015-12-04T09:41:00Z,"Correct. Right now only the message size counts... so your right. This needs to be fixed, otherwise we are not really counting net bytes. Working on it.\n",https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-161920906,161920906,
laanwj,2015-12-04T09:41:26Z,"It's a fixed number per packet, so should be straightforward enough :)\n",https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-161920995,161920995,
jonasschnelli,2015-12-04T09:58:49Z,Added the header size to the bytes addition. Squashed to one commit.\n,https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-161926079,161926079,
jonasschnelli,2015-12-04T10:12:46Z,"Implemented @laanwj  idea. Added a category `""*unknown*""` to aggregate bytes of received command that are not known. This could help identifying misbehaving nodes.\n",https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-161928872,161928872,
jonasschnelli,2015-12-04T10:40:31Z,Added a commit that hides 0 entries in `getpeerinfo`.\n,https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-161933912,161933912,
laanwj,2015-12-04T11:51:56Z,"@jonasschnelli This currently runs into an assert, as mapRecvBytesPerCmd[NET_COMMAND_OTHER] doesn't exist\n",https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-161949539,161949539,
jonasschnelli,2015-12-04T12:20:34Z,"> @jonasschnelli This currently runs into an assert, as mapRecvBytesPerCmd[NET_COMMAND_OTHER] doesn't exist\n\nJust fixed this over a force push. I forgot to initialize the map entry.\n",https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-161954096,161954096,
laanwj,2015-12-05T08:17:35Z,"Small conceptual nit: In contrast to client-server protocols in a P2P protocol there are no 'commands', just 'messages' (there is no hierarchy and both sides use the same language).\nThe distinction seems only a technicality, but some confusion stems from this - for example when people propose new add messages which have a mandatory response, thinking of it as a command/response protocol. \nI know",https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-162160391,162160391,
laanwj,2015-12-05T08:21:33Z,This works great though.\nACK after adding the two missing message types.\n,https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-162160516,162160516,
jonasschnelli,2015-12-05T12:32:36Z,"Pushed two commits:\n-> Add ""merkleblock"" and ""notfound"" to the list of accepted commands for logging.\n-> Reword the variables, comments and help-text to reflect ""message command""'s instead of just just ""command"".\n",https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-162177872,162177872,
paveljanik,2015-12-05T12:46:54Z,"@jonasschnelli To be consistent, please also change `recvPerCmd`.\n",https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-162178817,162178817,
jonasschnelli,2015-12-05T12:48:24Z,@paveljanik: Thanks of the review! Change and force pushed the last commit.\n,https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-162179254,162179254,
paveljanik,2015-12-05T12:52:53Z,"ACK\nThis is very useful, thanks for it!\n",https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-162181261,162181261,
GIJensen,2015-12-05T18:35:08Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-162233133,162233133,
jonasschnelli,2015-12-07T08:07:11Z,Fixed minor code style issues (three unnecessary spaces).\n,https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-162443641,162443641,
laanwj,2015-12-07T12:29:12Z,Will merge after squash and travis OK\n,https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-162511151,162511151,
jonasschnelli,2015-12-07T12:33:23Z,Squashed.\n,https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-162511798,162511798,
rebroad,2016-10-16T06:38:17Z,"Is anyone using this functionality? If so, can uses be documented somewhere?\n",https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-254030519,254030519,
MarcoFalke,2016-10-16T09:19:12Z,@rebroad I think the goal was to find out what msg consumes the most bytes.\n,https://github.com/bitcoin/bitcoin/pull/6589#issuecomment-254036298,254036298,
sipa,2015-08-25T20:44:26Z,Any reason not to use const std::string& ?\n,https://github.com/bitcoin/bitcoin/pull/6589#discussion_r37916997,37916997,src/net.cpp
sipa,2015-08-25T20:45:13Z,"I don't care about following the original variable naming style, but if you do, the prefix for maps is map\* not m*.\n",https://github.com/bitcoin/bitcoin/pull/6589#discussion_r37917102,37917102,src/net.cpp
sipa,2015-08-25T20:47:09Z,Spaces around the operator?\n,https://github.com/bitcoin/bitcoin/pull/6589#discussion_r37917291,37917291,src/net.cpp
jonasschnelli,2015-08-26T12:00:06Z,"`CNode::BeginMessage()` also uses `const char*` (https://github.com/bitcoin/bitcoin/blob/master/src/net.h#L499). `EndMessage()` is always called over `PushMessage(const char* pszCommand, const T1& a1, ...)`. Not sure if it would make sense to cast/transform to a `std::string`.\n",https://github.com/bitcoin/bitcoin/pull/6589#discussion_r37973359,37973359,src/net.cpp
sipa,2015-08-26T19:06:31Z,ok\n,https://github.com/bitcoin/bitcoin/pull/6589#discussion_r38022017,38022017,src/net.cpp
sdaftuar,2015-09-10T13:57:20Z,"Since this is a map lookup, can we just initialize the map once with entries for each valid string, and then do a find() here?\n",https://github.com/bitcoin/bitcoin/pull/6589#discussion_r39162377,39162377,src/net.cpp
jonasschnelli,2015-09-10T13:59:15Z,Yes. Would be possible. I somehow searched for a solution that doesn't require initialization. Do you think the `map.find()` would be faster or just less code?\n,https://github.com/bitcoin/bitcoin/pull/6589#discussion_r39162607,39162607,src/net.cpp
sdaftuar,2015-09-10T14:05:36Z,"Mostly I was thinking less code/easier to read (though it would be faster too, since we have to do a find() anyway).\n",https://github.com/bitcoin/bitcoin/pull/6589#discussion_r39163305,39163305,src/net.cpp
laanwj,2015-12-03T13:25:25Z,"C++11 to the rescue:\n\n``` c++\nconst static std::set<std::string> logAllowIncommingCmds = {\n    ""version"", ""verack"", ""addr"", ""inv"", ""getdata"",\n    ""getblocks"", ""getheaders"", ""tx"", ""headers"", ""block"",\n    ""getaddr"", ""mempool"", ""ping"", ""pong"", ""alert"",\n    ""filterload"", ""filteradd"", ""filterclear"", ""reject""\n};\n```\n\n```\n    if (logAllowIncomingCmds.count(command))\n        mapRecvBytesPerCm",https://github.com/bitcoin/bitcoin/pull/6589#discussion_r46550136,46550136,src/net.cpp
laanwj,2015-12-04T09:05:32Z,"Right, I agree with @sipa that I prefer std::string, but yes for that to have any effect whatsoever that'd require switching that entire call chain to `std::string` and that is out of the scope of this pull.\n",https://github.com/bitcoin/bitcoin/pull/6589#discussion_r46661243,46661243,src/net.cpp
laanwj,2015-12-04T09:10:28Z,"I've thought of - what I think is an even better solution - as it doesn't require recourse to anything besides the map itself: prepopulate the `mapRecvBytesPerCmd`. At initialization:\n\n```\n    for (unsigned int i = 0; i < sizeof(logAllowIncomingCmds)/sizeof(logAllowIncomingCmds[0]); i++)\n        mapRecvBytesPerCmd[logAllowIncomingCmds[i]] = 0;\n```\n\nThen only increase if the item exists, e.g",https://github.com/bitcoin/bitcoin/pull/6589#discussion_r46661594,46661594,src/net.cpp
laanwj,2015-12-04T09:12:14Z,Nit: don't use `_t` for the type name.\n- I've learned recently (think I heard it from @gmaxwell) that this is reserved by the C standard for system types\n- We don't use this convention for any of our own types\n\nWhat about just `CommandSizeMap`?\n,https://github.com/bitcoin/bitcoin/pull/6589#discussion_r46661726,46661726,src/net.h
laanwj,2015-12-04T09:37:13Z,If we want we could hide the entries with `i.second==0` here.\n,https://github.com/bitcoin/bitcoin/pull/6589#discussion_r46663746,46663746,src/rpcnet.cpp
jonasschnelli,2015-12-04T09:48:41Z,"I also though about that, but I think the null entries are better instead of hiding. It result in more controllable parsing.\n",https://github.com/bitcoin/bitcoin/pull/6589#discussion_r46664648,46664648,src/rpcnet.cpp
laanwj,2015-12-04T10:12:39Z,Why would this result in more controllable parsing? The zeros don't mean anything. The only reason those entries are there in the first place is our 'ignore unknown command' implementation detail.\n,https://github.com/bitcoin/bitcoin/pull/6589#discussion_r46666609,46666609,src/rpcnet.cpp
laanwj,2015-12-04T10:13:43Z,"Otherwise, to be consistent, if you really want an overview of all possible messages, we want zero entries for `mapSendBytesPerCmd` too (this will require an array of all messages we can potentially send).\n",https://github.com/bitcoin/bitcoin/pull/6589#discussion_r46666691,46666691,src/rpcnet.cpp
jonasschnelli,2015-12-04T10:14:35Z,I though if someone writes a statistics fronted that uses the RPC as data-source it would complicate things (a little bit) because you don't have a full list of available commands at the beginning. But no strong opinion. I think the drawback right now is a relatively big response.\n,https://github.com/bitcoin/bitcoin/pull/6589#discussion_r46666750,46666750,src/rpcnet.cpp
laanwj,2015-12-04T10:16:05Z,"or\n\n```\nmapCmdSize::iterator i = mapRecvBytesPerCmd.find(msg.hdr.pchCommand);\nif (i == mapRecvBytesPerCmd.end())\n    i = mapRecvBytesPerCmd.find(""*other*"");\ni->second += msg.hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n```\n\n:-)\n(make sure `*other*` is prepopulated as `0`)\n",https://github.com/bitcoin/bitcoin/pull/6589#discussion_r46666860,46666860,src/net.cpp
laanwj,2015-12-04T10:19:01Z,"OK i agree. If you want to know eg. the set of commands that is not considered `*other*`. OK I don't care deeply about this, fine to leave it as-is, but I expect more people to comment on this. Empty rows just look unnecessary, and it's repeated for every peer.\n",https://github.com/bitcoin/bitcoin/pull/6589#discussion_r46667112,46667112,src/rpcnet.cpp
laanwj,2015-12-05T08:03:27Z,"I noticed some `*other*` in the stats from normal Bitcoin Core client, so I checked all uses of PushMessage:\nThese need to be added: `, ""merkleblock"", ""notfound""`\n",https://github.com/bitcoin/bitcoin/pull/6589#discussion_r46755685,46755685,src/net.cpp
paveljanik,2015-12-05T12:39:00Z,"On the other hand, we are already changing `EndMessage()` here, so it could be done in one step, together.\n",https://github.com/bitcoin/bitcoin/pull/6589#discussion_r46757860,46757860,src/net.cpp
jonasschnelli,2015-12-05T12:42:44Z,"I think it's to invasive for a little logging feature. It would basically require to change all `PushMessage(...)` then `BeginMessage()` and `EndMessage()` function. An either conversion of CMessageHeader (that it accepts `std::string`) or some conversions to c-strings in the mentioned functions.\nIMO, it's not worth changing this.\n",https://github.com/bitcoin/bitcoin/pull/6589#discussion_r46757877,46757877,src/net.cpp
paveljanik,2015-12-05T12:48:41Z,Agreed.\n,https://github.com/bitcoin/bitcoin/pull/6589#discussion_r46757918,46757918,src/net.cpp
MarcoFalke,2015-12-05T14:26:42Z,"Nit: Not sure if ""message command"" is a proper word? What about ""message type"" or even just ""message""?\n",https://github.com/bitcoin/bitcoin/pull/6589#discussion_r46758816,46758816,src/rpcnet.cpp
GIJensen,2015-12-05T21:40:43Z,"nit: I believe these should read ""BOOST_FOREACH(const mapMsgSize..."" (No space between ""("" and ""const"")\n",https://github.com/bitcoin/bitcoin/pull/6589#discussion_r46763388,46763388,src/rpcnet.cpp
paveljanik,2015-12-05T21:43:57Z,Space after `uint64_t`\n,https://github.com/bitcoin/bitcoin/pull/6589#discussion_r46763425,46763425,src/net.h
laanwj,2015-12-07T12:08:42Z,"My vote goes for ""Message type"" too\n",https://github.com/bitcoin/bitcoin/pull/6589#discussion_r46813987,46813987,src/rpcnet.cpp
jonasschnelli,2015-12-07T12:26:37Z,"Agreed. Changed to ""message type"" (amend force push last commit).\n",https://github.com/bitcoin/bitcoin/pull/6589#discussion_r46815259,46815259,src/rpcnet.cpp
rebroad,2016-10-16T06:33:16Z,why not put ssSend.size() into a variable and use that?\n,https://github.com/bitcoin/bitcoin/pull/6589#discussion_r83546178,83546178,src/net.cpp
