TheBlueMatt,2011-06-27T00:58:01Z,Forum thread: http://forum.bitcoin.org/index.php?topic=8728.0\n,https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1444706,1444706,
TheBlueMatt,2011-06-27T01:05:48Z,Changed topupkeypool to keypoolrefill at tcatm's suggestion\n,https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1444717,1444717,
TheBlueMatt,2011-06-27T01:46:30Z,A note for users of the previous version - Ill write a converter tomorrow that will try to convert the old encrypted wallets to this new format.\n,https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1444808,1444808,
TheBlueMatt,2011-06-27T21:34:40Z,"TODO List:\n~~Anything marked with //TODO~~\n~~s/password/passphrase/~~\n~~write better text for first encryption ie ""DONT LOSE THIS PASSWORD"" and such~~\n~~An option to decrypt the wallet?~~ (Decided against this one as noone seemed to care if it got implemented, if others here disagree, please respond)\n~~Figure out why walletphassphrase is lagging (top up keypool?)~~\n",https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1450631,1450631,
gavinandresen,2011-06-28T01:57:07Z,"Looks OK, I like the feature set, I haven't had a chance to compile and test it.\n",https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1451837,1451837,
jgarzik,2011-06-28T19:40:18Z,"Looks OK at first glance.  Will give it an in-depth look and test RSN.\n\nOne nit:  mlock() can definitely fail based variable conditions such as ulimit.  The code never checks for mlock failure, and seems to assume you may munlock even if mlock failed.\n",https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1458400,1458400,
TheBlueMatt,2011-06-28T20:22:53Z,"If it fails, it should continue, yes we are potentially not as secure, but we should stop just because we cant mlock().  ~~Also, since munlock() is called implicitly when we deallocate, its unnecessary, I pulled it out.~~\nOh got Im stupid, sorry, readded that.\n",https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1458731,1458731,
gmaxwell,2011-06-30T18:50:41Z,"I spent a couple days beating the hell out of this implementation and Matt has quickly fixed all the bugs I've encountered.\n\nIn particular I've now sent thousands of transactions and thousands of getaddresses in an abusive testing rig which is constantly unlocking/locking/password changing/account moving, etc. and not lost any coin. I've basically run out of obvious automated testing at this poi",https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1477082,1477082,
joric,2011-07-04T08:31:29Z,"Just tried to build 499334e on win32 using mingw, works fine, except a couple of things.\n1) In crypter.cpp you have to move headers.h to the very top otherwise you'll get a whole bunch of ""Cannot convert from 'const wchar_t *' to '_TCHAR *'"" (more precisely, wx.h should be included before windows.h).\n2) Cancel button in the encryption dialog does not work as expected (buggy wxGetPasswordFromUser",https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1496369,1496369,
joric,2011-07-04T09:14:41Z,Just figured out if you're trying to read encrypted wallet with official client (0.3.24rc1 in my case) wallet gets destroyed and not readable by anything. It's not very nice.\n,https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1496616,1496616,
TheBlueMatt,2011-07-04T10:51:01Z,"If you try to read it with the old client, the client won't (shouldn't) touch it and just complain that it is ""Unable to read wallet.dat"".  However, if you reopen it with this client, it should open fine.\nAlso, thanks for the mingw heads-up, I suppose I must've changed the header order at some point after I tested on mingw...\nOh well, should be fixed now.\n",https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1497101,1497101,
joric,2011-07-04T11:22:13Z,"Well, not really. Official 0.3.23 says basically the same as 0.3.24rc1: EXCEPTION: St13runtime_error ReserveKeyFromKeyPool() : unknown key in key pool (...)bitcoin.exe in AppInit(), EXCEPTION: St13runtime_error ReserveKeyFromKeyPool() : unknown key in key pool (...)bitcoin.exe in CMyApp::OnUnhandledException(), Runtime error!\n\nAfter that wallet.dat becomes completely inaccesible, 499334e says ""E",https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1497239,1497239,
TheBlueMatt,2011-07-04T12:27:15Z,"Ah, shit you are totally right, and here I was thinking the client was smarter than that...Ill make sure a fix goes into 0.3.24 so at least people can downgrade to that safely.\nOh, forgot to mention, I changed master key format last night, so wallet encrypted with this previously will not load.\n",https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1497587,1497587,
TheBlueMatt,2011-07-04T12:30:34Z,See #378\n,https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1497597,1497597,
graingert,2011-07-05T08:13:01Z,would it be possible to encrypt the wallet with a null/default pass-phrase by default rather than leaving the wallet unencrypted?\n,https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1502192,1502192,
TheBlueMatt,2011-07-05T11:33:39Z,"null/default passphrase is 100% identical to no encryption, if an attacker gets the wallet, they can still just dump it in their .bitcoin folder and send coins, its better to be backward compatible if users dont encrypt than just break that too for nothing.\n",https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1503031,1503031,
sipa,2011-07-09T15:32:35Z,"I am not sure the mlock() wrappers are correct. ((void *)(((size_t)(a)) & ((size_t)(((PAGESIZE)<<1)-1)))) seems to throw away the high bits of the address, instead of the low ones.\n\nI suggest using:\n\n```\nmlock((void*)((size_t)a & ~(PAGESIZE - 1)), ((((size_t)a + b - 1) | (PAGESIZE - 1)) + 1) - ((size_t)a & ~(PAGESIZE - 1)));\n```\n\nHere is a test program:\n\n```\n#include <stdio.h>\n#include",https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1538830,1538830,
sipa,2011-07-09T15:36:13Z,Apart from the above comment: ACK.\n,https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1538841,1538841,
TheBlueMatt,2011-07-12T23:24:15Z,"re gavin's comment\n""This needs a comment explaining what it is for-- ""This class writes an addrIncoming entry that causes pre-0.4 clients to crash on startup if reading a private-key-encrypted wallet.""""\ndone.\n",https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1558767,1558767,
gavinandresen,2011-07-13T01:34:25Z,"ACK, looks ready-for-prime-time to me.\n",https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1559342,1559342,
groffer,2011-07-16T02:29:34Z,Unit tests?\n,https://github.com/bitcoin/bitcoin/pull/352#issuecomment-1585661,1585661,
NickyYangYang,2018-07-16T03:38:32Z,Why the unencrypted master key is stored in memory? Why not unencrypted private keyï¼Ÿ,https://github.com/bitcoin/bitcoin/pull/352#issuecomment-405142877,405142877,
