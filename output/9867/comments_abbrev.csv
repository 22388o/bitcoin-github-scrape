paveljanik,2017-02-26T20:48:53Z,ACK https://github.com/bitcoin/bitcoin/pull/9867/commits/d9b6b874c955cdd0e174b8f1e9582773e15c7cd9,https://github.com/bitcoin/bitcoin/pull/9867#issuecomment-282586222,282586222,
TheBlueMatt,2017-02-26T21:43:08Z,"Concept ACK for general sanity, though I'm pretty sure there is no reason we should go out of our way to support libcs that are deliberately broken.",https://github.com/bitcoin/bitcoin/pull/9867#issuecomment-282590191,282590191,
laanwj,2017-02-27T06:26:14Z,"> Concept ACK for general sanity, though I'm pretty sure there is no reason we should go out of our way to support libcs that are deliberately broken.\n\nSomewhat tend to agree, though there is something to be said for deprecating unsafe functions that have caused so much pain since the 80's. They do the same with system calls, trying to keep the API (anda attack surface) as minimalist as possib",https://github.com/bitcoin/bitcoin/pull/9867#issuecomment-282638450,282638450,
laanwj,2017-02-27T06:49:20Z,"Force-pushed into two commits:\n- uint256: replace use of sprintf with per-digit hex conversion\n- test: Replace remaining sprintf with snprintf",https://github.com/bitcoin/bitcoin/pull/9867#issuecomment-282641522,282641522,
laanwj,2017-02-27T09:04:34Z,"There you go, a one-liner now.\n",https://github.com/bitcoin/bitcoin/pull/9867#issuecomment-282664024,282664024,
JeremyRubin,2017-02-27T09:19:34Z,utACK 19cafc6,https://github.com/bitcoin/bitcoin/pull/9867#issuecomment-282667179,282667179,
practicalswift,2017-02-27T22:17:30Z,utACK 19cafc6,https://github.com/bitcoin/bitcoin/pull/9867#issuecomment-282874637,282874637,
sipa,2017-02-27T23:23:59Z,utACK,https://github.com/bitcoin/bitcoin/pull/9867#issuecomment-282890504,282890504,
kallewoof,2017-02-28T00:10:10Z,utACK 19cafc6,https://github.com/bitcoin/bitcoin/pull/9867#issuecomment-282899400,282899400,
JeremyRubin,2017-02-26T21:43:03Z,"This is a little bit sketchy. Could it not safely be 2 here, not 3?",https://github.com/bitcoin/bitcoin/pull/9867#discussion_r103117787,103117787,src/uint256.cpp
kallewoof,2017-02-27T03:50:44Z,NUL term needs a 3rd byte.,https://github.com/bitcoin/bitcoin/pull/9867#discussion_r103133252,103133252,src/uint256.cpp
dcousens,2017-02-27T03:58:17Z,"For others http://www.cplusplus.com/reference/cstdio/snprintf/\n\n> A terminating null character is automatically appended after the content written.\n\nHence,  2 hex characters + 1 null character.",https://github.com/bitcoin/bitcoin/pull/9867#discussion_r103133656,103133656,src/uint256.cpp
gmaxwell,2017-02-27T04:13:43Z,"It's correct, and it's also why snprintf isn't an especially safe function call. (replaces one class of issue with another more subtle one)",https://github.com/bitcoin/bitcoin/pull/9867#discussion_r103134422,103134422,src/uint256.cpp
laanwj,2017-02-27T06:22:42Z,"> It's correct, and it's also why snprintf isn't an especially safe function call. (replaces one class of issue with another more subtle one)\n\nIndeed, that's why we never use it. The go-to function we have for this is ""strprintf"". However, it's kind of high overhead for formatting two hex characters. Especially as this function is called a lot.\n\nI'll just replace this with use of `HexDigit",https://github.com/bitcoin/bitcoin/pull/9867#discussion_r103142029,103142029,src/uint256.cpp
dcousens,2017-02-27T06:51:01Z,why not `size_t`?,https://github.com/bitcoin/bitcoin/pull/9867#discussion_r103144316,103144316,src/uint256.cpp
dcousens,2017-02-27T06:53:57Z,**edit**: fail,https://github.com/bitcoin/bitcoin/pull/9867#discussion_r103144564,103144564,src/uint256.cpp
laanwj,2017-02-27T06:54:00Z,"Meh. For loop counters it's generally enough to use a 32-bit type. Especially if you know you're only going to count to 64, ever.",https://github.com/bitcoin/bitcoin/pull/9867#discussion_r103144570,103144570,src/uint256.cpp
laanwj,2017-02-27T06:54:35Z,But incorrect.,https://github.com/bitcoin/bitcoin/pull/9867#discussion_r103144646,103144646,src/uint256.cpp
laanwj,2017-02-27T08:34:18Z,"Possibly we could even use HexStr here with a reverse_iterator, though I don't know how to do that for a C-style array. All the variations I can think of are much worse than just replicating this functionality here.\nEdit: found it out, it's simple!",https://github.com/bitcoin/bitcoin/pull/9867#discussion_r103155265,103155265,src/uint256.cpp
JeremyRubin,2017-02-27T08:51:14Z,"nit: maybe emplace rather than push (potentially saves an initialization)\n@dcousens can you not delete your feedback? I had to dig in my emails to see that I wasn't repeating your feedback.",https://github.com/bitcoin/bitcoin/pull/9867#discussion_r103157839,103157839,src/uint256.cpp
laanwj,2017-02-27T08:56:25Z,Do you really think there's anything to be gained by emplacing a char? I'd say something has to be really wrong for that to make a difference.,https://github.com/bitcoin/bitcoin/pull/9867#discussion_r103158745,103158745,src/uint256.cpp
laanwj,2017-02-27T08:58:37Z,"Anyhow I have a better solution based on reverse_iterator coming, so no need to discuss this further.",https://github.com/bitcoin/bitcoin/pull/9867#discussion_r103159137,103159137,src/uint256.cpp
sipa,2017-02-27T09:02:42Z,"I'm pretty sure that the copy constructor and move constructor for a char are the same, so emplace wouldn't make a difference.",https://github.com/bitcoin/bitcoin/pull/9867#discussion_r103159853,103159853,src/uint256.cpp
JeremyRubin,2017-02-27T09:09:35Z,"```c++\n#include ""stdio.h""\n#include <iterator>\nint main() {\n    char a[2] = {'a', 'b'};\n    auto start = std::reverse_iterator<char *>(&a[2]);\n    auto end = std::reverse_iterator<char *>(&a[0]);\n    while (start != end)\n        printf(""%c"", *(start++));\n}\n```\nOutputs:\n> ba",https://github.com/bitcoin/bitcoin/pull/9867#discussion_r103161067,103161067,src/uint256.cpp
laanwj,2017-02-27T09:14:04Z,"Yes, thanks, I'm aware, see the new version of this patch.",https://github.com/bitcoin/bitcoin/pull/9867#discussion_r103161872,103161872,src/uint256.cpp
JeremyRubin,2017-02-27T09:15:46Z,"ha -- and here I was thinking you coded it after I commented and I was like ""wow, @laanwj is a god amongst men in code response times"" ;)",https://github.com/bitcoin/bitcoin/pull/9867#discussion_r103162189,103162189,src/uint256.cpp
laanwj,2017-02-27T09:35:57Z,"Yes, I implemented it in minus 3 minutes! Truly godlike :-)",https://github.com/bitcoin/bitcoin/pull/9867#discussion_r103165923,103165923,src/uint256.cpp
dcousens,2017-02-27T10:36:14Z,"@JeremyRubin I made a woefully incorrect suggestion in regards to the bitmasking.\n\n``` cpp\nretval.push_back(hex_chars[value & 0xf0]);\nretval.push_back(hex_chars[value & 0x0f]);\n```",https://github.com/bitcoin/bitcoin/pull/9867#discussion_r103177377,103177377,src/uint256.cpp
laanwj,2017-02-27T11:28:24Z,@dcousens no worries we all have our [dumb moments](https://github.com/bitcoin/bitcoin/pull/9871#issuecomment-282645504).,https://github.com/bitcoin/bitcoin/pull/9867#discussion_r103186426,103186426,src/uint256.cpp
