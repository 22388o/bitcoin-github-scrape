[
  {
    "sha": "bf7d6e31b1062ab5f90e14e83c56309f499fa2e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjdkNmUzMWIxMDYyYWI1ZjkwZTE0ZTgzYzU2MzA5ZjQ5OWZhMmU5",
    "commit": {
      "author": {
        "name": "Elliott Jin",
        "email": "elliott.jin@gmail.com",
        "date": "2020-10-09T15:50:44Z"
      },
      "committer": {
        "name": "Elliott Jin",
        "email": "elliott.jin@gmail.com",
        "date": "2020-10-09T15:50:44Z"
      },
      "message": "RPC: getblock: tx fee calculation for verbosity 2 via Undo data\n\nCo-authored-by: Felix Weis <mail@felixweis.com>",
      "tree": {
        "sha": "194625396c4479845f2e7b0617d44f278a733f47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/194625396c4479845f2e7b0617d44f278a733f47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf7d6e31b1062ab5f90e14e83c56309f499fa2e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf7d6e31b1062ab5f90e14e83c56309f499fa2e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf7d6e31b1062ab5f90e14e83c56309f499fa2e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf7d6e31b1062ab5f90e14e83c56309f499fa2e9/comments",
    "author": {
      "login": "robot-dreams",
      "id": 4276679,
      "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robot-dreams",
      "html_url": "https://github.com/robot-dreams",
      "followers_url": "https://api.github.com/users/robot-dreams/followers",
      "following_url": "https://api.github.com/users/robot-dreams/following{/other_user}",
      "gists_url": "https://api.github.com/users/robot-dreams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robot-dreams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
      "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
      "repos_url": "https://api.github.com/users/robot-dreams/repos",
      "events_url": "https://api.github.com/users/robot-dreams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "robot-dreams",
      "id": 4276679,
      "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robot-dreams",
      "html_url": "https://github.com/robot-dreams",
      "followers_url": "https://api.github.com/users/robot-dreams/followers",
      "following_url": "https://api.github.com/users/robot-dreams/following{/other_user}",
      "gists_url": "https://api.github.com/users/robot-dreams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robot-dreams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
      "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
      "repos_url": "https://api.github.com/users/robot-dreams/repos",
      "events_url": "https://api.github.com/users/robot-dreams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cce151317909ab8eb56d3e5da522f43c7d7db077",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cce151317909ab8eb56d3e5da522f43c7d7db077",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cce151317909ab8eb56d3e5da522f43c7d7db077"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 41,
      "deletions": 11
    },
    "files": [
      {
        "sha": "e98fea3c0a93ce9495cfd6cfc3d6a2552ce25f3e",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf7d6e31b1062ab5f90e14e83c56309f499fa2e9/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf7d6e31b1062ab5f90e14e83c56309f499fa2e9/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=bf7d6e31b1062ab5f90e14e83c56309f499fa2e9",
        "patch": "@@ -18,6 +18,7 @@ class CTransaction;\n struct CMutableTransaction;\n class uint256;\n class UniValue;\n+class CTxUndo;\n \n // core_read.cpp\n CScript ParseScript(const std::string& s);\n@@ -45,6 +46,6 @@ std::string EncodeHexTx(const CTransaction& tx, const int serializeFlags = 0);\n std::string SighashToStr(unsigned char sighash_type);\n void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n void ScriptToUniv(const CScript& script, UniValue& out, bool include_address);\n-void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex = true, int serialize_flags = 0);\n+void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex = true, int serialize_flags = 0, const CTxUndo* txundo = nullptr);\n \n #endif // BITCOIN_CORE_IO_H"
      },
      {
        "sha": "675864200b9e3bcfbc33b5bd63f4cb5c0e73757d",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 4,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf7d6e31b1062ab5f90e14e83c56309f499fa2e9/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf7d6e31b1062ab5f90e14e83c56309f499fa2e9/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=bf7d6e31b1062ab5f90e14e83c56309f499fa2e9",
        "patch": "@@ -11,7 +11,9 @@\n #include <script/standard.h>\n #include <serialize.h>\n #include <streams.h>\n+#include <undo.h>\n #include <univalue.h>\n+#include <util/check.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n \n@@ -177,7 +179,7 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n     out.pushKV(\"addresses\", a);\n }\n \n-void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex, int serialize_flags)\n+void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex, int serialize_flags, const CTxUndo* txundo)\n {\n     entry.pushKV(\"txid\", tx.GetHash().GetHex());\n     entry.pushKV(\"hash\", tx.GetWitnessHash().GetHex());\n@@ -189,13 +191,20 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry,\n     entry.pushKV(\"weight\", GetTransactionWeight(tx));\n     entry.pushKV(\"locktime\", (int64_t)tx.nLockTime);\n \n-    UniValue vin(UniValue::VARR);\n+    UniValue vin{UniValue::VARR};\n+\n+    // If available, use Undo data to calculate the fee. Note that txundo == nullptr\n+    // for coinbase transactions and for transactions where undo data is unavailable.\n+    const bool calculate_fee = txundo != nullptr;\n+    CAmount amt_total_in = 0;\n+    CAmount amt_total_out = 0;\n+\n     for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         const CTxIn& txin = tx.vin[i];\n         UniValue in(UniValue::VOBJ);\n-        if (tx.IsCoinBase())\n+        if (tx.IsCoinBase()) {\n             in.pushKV(\"coinbase\", HexStr(txin.scriptSig));\n-        else {\n+        } else {\n             in.pushKV(\"txid\", txin.prevout.hash.GetHex());\n             in.pushKV(\"vout\", (int64_t)txin.prevout.n);\n             UniValue o(UniValue::VOBJ);\n@@ -210,6 +219,10 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry,\n             }\n             in.pushKV(\"txinwitness\", txinwitness);\n         }\n+        if (calculate_fee) {\n+            const CTxOut& prev_txout = txundo->vprevout[i].out;\n+            amt_total_in += prev_txout.nValue;\n+        }\n         in.pushKV(\"sequence\", (int64_t)txin.nSequence);\n         vin.push_back(in);\n     }\n@@ -228,9 +241,19 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry,\n         ScriptPubKeyToUniv(txout.scriptPubKey, o, true);\n         out.pushKV(\"scriptPubKey\", o);\n         vout.push_back(out);\n+\n+        if (calculate_fee) {\n+            amt_total_out += txout.nValue;\n+        }\n     }\n     entry.pushKV(\"vout\", vout);\n \n+    if (calculate_fee) {\n+        const CAmount fee = amt_total_in - amt_total_out;\n+        CHECK_NONFATAL(MoneyRange(fee));\n+        entry.pushKV(\"fee\", ValueFromAmount(fee));\n+    }\n+\n     if (!hashBlock.IsNull())\n         entry.pushKV(\"blockhash\", hashBlock.GetHex());\n "
      },
      {
        "sha": "7aba0eb729ab4f4d01a8ac936c59fc1f8d558488",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf7d6e31b1062ab5f90e14e83c56309f499fa2e9/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf7d6e31b1062ab5f90e14e83c56309f499fa2e9/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=bf7d6e31b1062ab5f90e14e83c56309f499fa2e9",
        "patch": "@@ -162,16 +162,21 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIn\n     result.pushKV(\"versionHex\", strprintf(\"%08x\", block.nVersion));\n     result.pushKV(\"merkleroot\", block.hashMerkleRoot.GetHex());\n     UniValue txs(UniValue::VARR);\n-    for(const auto& tx : block.vtx)\n-    {\n-        if(txDetails)\n-        {\n+    if (txDetails) {\n+        CBlockUndo blockUndo;\n+        const bool have_undo = !IsBlockPruned(blockindex) && UndoReadFromDisk(blockUndo, blockindex);\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const CTransactionRef& tx = block.vtx.at(i);\n+            // coinbase transaction (i == 0) doesn't have undo data\n+            const CTxUndo* txundo = (have_undo && i) ? &blockUndo.vtxundo.at(i - 1) : nullptr;\n             UniValue objTx(UniValue::VOBJ);\n-            TxToUniv(*tx, uint256(), objTx, true, RPCSerializationFlags());\n+            TxToUniv(*tx, uint256(), objTx, true, RPCSerializationFlags(), txundo);\n             txs.push_back(objTx);\n         }\n-        else\n+    } else {\n+        for (const CTransactionRef& tx : block.vtx) {\n             txs.push_back(tx->GetHash().GetHex());\n+        }\n     }\n     result.pushKV(\"tx\", txs);\n     result.pushKV(\"time\", block.GetBlockTime());\n@@ -926,6 +931,7 @@ static RPCHelpMan getblock()\n                         {RPCResult::Type::OBJ, \"\", \"\",\n                         {\n                             {RPCResult::Type::ELISION, \"\", \"The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result\"},\n+                            {RPCResult::Type::NUM, \"fee\", \"The transaction fee in \" + CURRENCY_UNIT + \", omitted if block undo data is not available\"},\n                         }},\n                     }},\n                     {RPCResult::Type::ELISION, \"\", \"Same output as verbosity = 1\"},"
      }
    ]
  },
  {
    "sha": "66d012ad7f9381bacfc9b8388fa2ebf82cb86c9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmQwMTJhZDdmOTM4MWJhY2ZjOWI4Mzg4ZmEyZWJmODJjYjg2Yzll",
    "commit": {
      "author": {
        "name": "Elliott Jin",
        "email": "elliott.jin@gmail.com",
        "date": "2020-10-09T15:50:49Z"
      },
      "committer": {
        "name": "Elliott Jin",
        "email": "elliott.jin@gmail.com",
        "date": "2020-10-09T15:50:49Z"
      },
      "message": "test: RPC: getblock fee calculations",
      "tree": {
        "sha": "2cb7cf9618960bfcac96a5c24f81d8ef80abeb04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2cb7cf9618960bfcac96a5c24f81d8ef80abeb04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66d012ad7f9381bacfc9b8388fa2ebf82cb86c9e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66d012ad7f9381bacfc9b8388fa2ebf82cb86c9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66d012ad7f9381bacfc9b8388fa2ebf82cb86c9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66d012ad7f9381bacfc9b8388fa2ebf82cb86c9e/comments",
    "author": {
      "login": "robot-dreams",
      "id": 4276679,
      "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robot-dreams",
      "html_url": "https://github.com/robot-dreams",
      "followers_url": "https://api.github.com/users/robot-dreams/followers",
      "following_url": "https://api.github.com/users/robot-dreams/following{/other_user}",
      "gists_url": "https://api.github.com/users/robot-dreams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robot-dreams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
      "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
      "repos_url": "https://api.github.com/users/robot-dreams/repos",
      "events_url": "https://api.github.com/users/robot-dreams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "robot-dreams",
      "id": 4276679,
      "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robot-dreams",
      "html_url": "https://github.com/robot-dreams",
      "followers_url": "https://api.github.com/users/robot-dreams/followers",
      "following_url": "https://api.github.com/users/robot-dreams/following{/other_user}",
      "gists_url": "https://api.github.com/users/robot-dreams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robot-dreams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
      "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
      "repos_url": "https://api.github.com/users/robot-dreams/repos",
      "events_url": "https://api.github.com/users/robot-dreams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf7d6e31b1062ab5f90e14e83c56309f499fa2e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf7d6e31b1062ab5f90e14e83c56309f499fa2e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf7d6e31b1062ab5f90e14e83c56309f499fa2e9"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 44,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e993225947922767348497c0315c4ac0b6a9647c",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66d012ad7f9381bacfc9b8388fa2ebf82cb86c9e/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66d012ad7f9381bacfc9b8388fa2ebf82cb86c9e/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=66d012ad7f9381bacfc9b8388fa2ebf82cb86c9e",
        "patch": "@@ -20,6 +20,7 @@\n \n from decimal import Decimal\n import http.client\n+import os\n import subprocess\n \n from test_framework.blocktools import (\n@@ -42,7 +43,9 @@\n     assert_raises_rpc_error,\n     assert_is_hex_string,\n     assert_is_hash_string,\n+    get_datadir_path,\n )\n+from test_framework.wallet import MiniWallet\n \n \n class BlockchainTest(BitcoinTestFramework):\n@@ -63,6 +66,7 @@ def run_test(self):\n         self._test_getnetworkhashps()\n         self._test_stopatheight()\n         self._test_waitforblockheight()\n+        self._test_getblock()\n         assert self.nodes[0].verifychain(4, 0)\n \n     def mine_chain(self):\n@@ -352,6 +356,46 @@ def assert_waitforheight(height, timeout=2):\n         assert_waitforheight(current_height)\n         assert_waitforheight(current_height + 1)\n \n+    def _test_getblock(self):\n+        node = self.nodes[0]\n+\n+        miniwallet = MiniWallet(node)\n+        miniwallet.generate(5)\n+        node.generate(100)\n+\n+        fee_per_byte = Decimal('0.00000010')\n+        fee_per_kb = 1000 * fee_per_byte\n+\n+        miniwallet.send_self_transfer(fee_rate=fee_per_kb, from_node=node)\n+        blockhash = node.generate(1)[0]\n+\n+        self.log.info(\"Test that getblock with verbosity 1 doesn't include fee\")\n+        block = node.getblock(blockhash, 1)\n+        assert 'fee' not in block['tx'][1]\n+\n+        self.log.info('Test that getblock with verbosity 2 includes expected fee')\n+        block = node.getblock(blockhash, 2)\n+        tx = block['tx'][1]\n+        assert 'fee' in tx\n+        assert_equal(tx['fee'], tx['vsize'] * fee_per_byte)\n+\n+        self.log.info(\"Test that getblock with verbosity 2 still works with pruned Undo data\")\n+        datadir = get_datadir_path(self.options.tmpdir, 0)\n+\n+        def move_block_file(old, new):\n+            old_path = os.path.join(datadir, self.chain, 'blocks', old)\n+            new_path = os.path.join(datadir, self.chain, 'blocks', new)\n+            os.rename(old_path, new_path)\n+\n+        # Move instead of deleting so we can restore chain state afterwards\n+        move_block_file('rev00000.dat', 'rev_wrong')\n+\n+        block = node.getblock(blockhash, 2)\n+        assert 'fee' not in block['tx'][1]\n+\n+        # Restore chain state\n+        move_block_file('rev_wrong', 'rev00000.dat')\n+\n \n if __name__ == '__main__':\n     BlockchainTest().main()"
      }
    ]
  }
]