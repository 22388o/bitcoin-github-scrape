robot-visions,2020-04-26 08:54:48,"The documentation for `getblock` refers to the tx format of `getrawtransaction`.  Any thoughts on what would be a reasonable approach here?\n\n- Also update `getrawtransaction` (and the documentation) to include a fee if possible (this might be slow since the cost of loading undo data is no longer amortized over many transactions in a block)\n- Update the `getblock` documentation to mention tha",https://github.com/bitcoin/bitcoin/pull/18772#issuecomment-619512534,619512534,
MarcoFalke,2020-04-26 11:51:03,"Please add the right co-author to your commit, if your work is based on someone else's work",https://github.com/bitcoin/bitcoin/pull/18772#issuecomment-619536994,619536994,
robot-visions,2020-04-26 17:50:28,"Updated, thanks!  I didn't know about `Co-authored-by` feature before.",https://github.com/bitcoin/bitcoin/pull/18772#issuecomment-619594112,619594112,
DrahtBot,2020-04-30 18:13:59,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20406 (util: Avoid invalid integer negation in FormatMoney and ValueFromAmount by practicalswift)\n\nIf you consider this",https://github.com/bitcoin/bitcoin/pull/18772#issuecomment-622017678,622017678,
brakmic,2020-05-01 10:44:27,"ACK 732554a8a64ad5c9d49505272d225626566898de\n\nBuilt, run and tested on macOS Catalina 10.15.4\n\n",https://github.com/bitcoin/bitcoin/pull/18772#issuecomment-622339679,622339679,
luke-jr,2020-05-10 17:03:51,Proposed update: https://github.com/bitcoin/bitcoin/compare/master...luke-jr:getblock_fees-0.20,https://github.com/bitcoin/bitcoin/pull/18772#issuecomment-626358397,626358397,
robot-visions,2020-05-10 19:01:43,"Thanks for the review and the update @luke-jr !  I'm happy to go with your proposed update (we can close this PR).\n\nQuick notes:\n- I didn't include the verbosity 3 changes because I wanted to move things over incrementally\n- In your updates it might still be necessary to introduce some way to prevent the fuzz tests from failing (it was causing an integer overflow when adding a large value ",https://github.com/bitcoin/bitcoin/pull/18772#issuecomment-626373459,626373459,
luke-jr,2020-05-14 02:35:15,"We don't need to close this PR, you're doing fine.\n\nIf you want to adopt my branch as-is, you can just checkout yours, `git reset --hard 0b46eb7ac63`, and re-push it here.",https://github.com/bitcoin/bitcoin/pull/18772#issuecomment-628349825,628349825,
troygiorshev,2020-09-30 16:47:29,"Approach ACK.\n\nReviewed changes, ran tests.  Need to manually test further. ðŸ’» \n\nI agree with the previous review comments.\n\nFeel free to add a commit at the beginning cleaning up the code around your changes!\nFor example:\n* Fixing the strange lack of braces around the body of the `if` [here in core_write.cpp](https://github.com/robot-visions/bitcoin/blob/1298f0fca79803f3bc91c052f90",https://github.com/bitcoin/bitcoin/pull/18772#issuecomment-701511380,701511380,
Emzy,2020-10-01 10:34:51,"I get following error:\n```\n$ bitcoin-cli getblock ""$(bitcoin-cli getblockhash 650684)"" 2\nerror code: -1\nerror message:\ncore_write.cpp:251 (TxToUniv)\nInternal bug detected: 'MoneyRange(fee)'\nYou may report this issue here: https://github.com/bitcoin/bitcoin/issues\n```\nA block with only a Coinbase transaction works, for example 650026.",https://github.com/bitcoin/bitcoin/pull/18772#issuecomment-702045431,702045431,
Emzy,2020-10-02 12:54:32,"> I get following error:\n> \n> ```\n> $ bitcoin-cli getblock ""$(bitcoin-cli getblockhash 650684)"" 2\n> error code: -1\n> error message:\n> core_write.cpp:251 (TxToUniv)\n> Internal bug detected: 'MoneyRange(fee)'\n> You may report this issue here: https://github.com/bitcoin/bitcoin/issues\n> ```\n> \n> A block with only a Coinbase transaction works, for example 650026.\n\n8a7229e2e5c",https://github.com/bitcoin/bitcoin/pull/18772#issuecomment-702717475,702717475,
jnewbery,2020-10-09 09:49:31,"utACK dd4ec0704c66c23d207bb7394823469a1b59b060\n\nSince the first commit is very different from the version in 16083, you should feel free to set yourself as the commit author and add felix as a co-author (or just add yourself as co-author).\n\nAlso feel free to set the review comments above as 'resolved' if you think they're addressed. I went through and resolved my own review comments, but d",https://github.com/bitcoin/bitcoin/pull/18772#issuecomment-706084886,706084886,
luke-jr,2020-11-08 17:37:17,tACK 66d012ad7f9381bacfc9b8388fa2ebf82cb86c9e,https://github.com/bitcoin/bitcoin/pull/18772#issuecomment-723641914,723641914,
fjahr,2020-12-23 17:16:47,"tACK 66d012ad7f9381bacfc9b8388fa2ebf82cb86c9e\n\nChanges since last review were a small refactoring of the functional test using MiniWallet and some improvements on comments/docs. ",https://github.com/bitcoin/bitcoin/pull/18772#issuecomment-750394828,750394828,
luke-jr,2020-05-10 15:34:10,Why did you revert these back to the old variable name style? (I had changed them to `amt_total_in`/`amt_total_out` in my rebase...),https://github.com/bitcoin/bitcoin/pull/18772#discussion_r422661107,422661107,src/core_write.cpp
luke-jr,2020-05-10 15:35:16,This seems unnecessary.,https://github.com/bitcoin/bitcoin/pull/18772#discussion_r422661199,422661199,src/core_write.cpp
luke-jr,2020-05-10 15:36:15,"This won't work right... `nTotalOut` would just be missing part of its amount, and the result calculated later will still be wrong.",https://github.com/bitcoin/bitcoin/pull/18772#discussion_r422661336,422661336,src/core_write.cpp
luke-jr,2020-05-10 15:37:00,`CHECK_NONFATAL` in RPC code,https://github.com/bitcoin/bitcoin/pull/18772#discussion_r422661411,422661411,src/core_write.cpp
luke-jr,2020-05-10 15:37:29,`fees`,https://github.com/bitcoin/bitcoin/pull/18772#discussion_r422661449,422661449,src/core_write.cpp
luke-jr,2020-05-10 15:40:34,`have_undo`,https://github.com/bitcoin/bitcoin/pull/18772#discussion_r422661827,422661827,src/rpc/blockchain.cpp
luke-jr,2020-05-10 15:40:50,`.at(i)`,https://github.com/bitcoin/bitcoin/pull/18772#discussion_r422661862,422661862,src/rpc/blockchain.cpp
robot-visions,2020-05-10 18:55:08,"Yeah, I agree it seems unnecessary.  I added this in order to fix a failing fuzz test.",https://github.com/bitcoin/bitcoin/pull/18772#discussion_r422684708,422684708,src/core_write.cpp
robot-visions,2020-05-10 18:55:42,No particular reason; I'd be happy with either way.,https://github.com/bitcoin/bitcoin/pull/18772#discussion_r422684773,422684773,src/core_write.cpp
luke-jr,2020-06-10 00:08:31,"`txid` is unused.\n\n(Feel free to update from my branch again)",https://github.com/bitcoin/bitcoin/pull/18772#discussion_r437789086,437789086,test/functional/rpc_getblock_fee.py
luke-jr,2020-06-14 20:55:01,"The fuzzer can trigger undefined behaviour here with an overflow, which causes CI to fail even though it's harmless. Not sure what the solution should be - seems like overkill to actually prevent.",https://github.com/bitcoin/bitcoin/pull/18772#discussion_r439866641,439866641,src/core_write.cpp
practicalswift,2020-06-15 14:54:00,"@luke-jr Functions are assumed to be robust as long as they are fed with inputs fulfilling their documented preconditions, so I think the only robust alternative to preventing it is to make the implicit precondition explicit by documenting it. However, in this case it seems easy to just use `MoneyRange(â€¦)` and be done with it, no? :)",https://github.com/bitcoin/bitcoin/pull/18772#discussion_r440235335,440235335,src/core_write.cpp
jnewbery,2020-09-25 13:29:44,Just `txundo` is fine for the var name. Our style isn't to prefix variable names with the type.,https://github.com/bitcoin/bitcoin/pull/18772#discussion_r494988059,494988059,src/rpc/blockchain.cpp
jnewbery,2020-09-25 13:43:33,"I think auto should only be used when it's immediately obvious from looking at the code what the type is, and when not using auto would be annoyingly verbose. Here, you'd need to look at the definition of a `CBlock` to determine that `tx` is a `CTransactionRef` object, and you're not saving my characters by not typing `CTransactionRef`, so I'd recommend avoiding auto.",https://github.com/bitcoin/bitcoin/pull/18772#discussion_r494996867,494996867,src/rpc/blockchain.cpp
jnewbery,2020-09-25 13:43:51,Join with line above,https://github.com/bitcoin/bitcoin/pull/18772#discussion_r494997052,494997052,test/functional/rpc_getblock_fee.py
jnewbery,2020-09-25 13:45:03,"Use double quotes to avoid having to escape the quote inside the log:\n\n```suggestion\n        self.log.info(""Ensure that getblock with verbosity 1 doesn't include fee"")\n```\n\nSame in the log below.",https://github.com/bitcoin/bitcoin/pull/18772#discussion_r494997865,494997865,test/functional/rpc_getblock_fee.py
jnewbery,2020-09-25 14:00:05,It seems strange to me to have code in the produce that exists only to work around shortcomings in the fuzz tests. Which fuzz test fails if you don't do this? (the only fuzz tester that calls `TxToUniv()` doesn't provide a `txundo` param).,https://github.com/bitcoin/bitcoin/pull/18772#discussion_r495007723,495007723,src/core_write.cpp
MarcoFalke,2020-09-28 18:17:52,"Agree with @jnewbery . It is impossible to hit this condition in production, so an assert or just nothing at all might be more appropriate.",https://github.com/bitcoin/bitcoin/pull/18772#discussion_r496144902,496144902,src/core_write.cpp
practicalswift,2020-09-28 18:59:51,I suggest stating the pre-condition in the form of an assertion or documentation. Then it is the fuzzer's responsibility the fulfil all explicitly stated pre-conditions.,https://github.com/bitcoin/bitcoin/pull/18772#discussion_r496167710,496167710,src/core_write.cpp
fjahr,2020-09-29 20:28:33,maybe call this `prev_txout` or so,https://github.com/bitcoin/bitcoin/pull/18772#discussion_r497024259,497024259,src/core_write.cpp
fjahr,2020-09-29 20:29:04,"nit\n```suggestion\n        const CAmount fee = amt_total_in - amt_total_out;\n```",https://github.com/bitcoin/bitcoin/pull/18772#discussion_r497024539,497024539,src/core_write.cpp
fjahr,2020-09-29 20:35:31,"I think you should use `GetUndoChecked` here and the RPC should fail if the details are requested but the undo data can not be found. Otherwise, the users can not trust that they get the fees in the response and they will have no way to know why they weren't included, it will just seem random to them.\n\nBTW, I am unsure in which cases we are missing the undo data. Is that only in the case of da",https://github.com/bitcoin/bitcoin/pull/18772#discussion_r497028881,497028881,src/rpc/blockchain.cpp
fjahr,2020-09-29 20:52:15,You don't need to do this to have coins to spend. This is done for you automatically by default (see docs on `setup_clean_chain`) and this uses fewer resources by loading the chain from cache.,https://github.com/bitcoin/bitcoin/pull/18772#discussion_r497046067,497046067,test/functional/rpc_getblock_fee.py
fjahr,2020-09-29 21:14:53,I think `rpc_blockchain.py` is the natural place for these tests. A new file is not necessary for such a specific and small test IMO.,https://github.com/bitcoin/bitcoin/pull/18772#discussion_r497063838,497063838,test/functional/rpc_getblock_fee.py
glozow,2020-09-30 17:15:53,"nit: I think we also usually do double quotes? `""""""`",https://github.com/bitcoin/bitcoin/pull/18772#discussion_r497674965,497674965,test/functional/rpc_getblock_fee.py
robot-dreams,2020-10-01 21:36:22,"Great idea!\n\nYes, according to https://github.com/bitcoin/bitcoin/blob/1b313cacc99a1b372238f9036abed5491f9d28f7/src/validation.h#L370 it looks like block and undo data are always deleted together.\n\nI definitely might be missing something, but from a quick search I couldn't find any other reason we'd delete `rev` but not `blk` files.",https://github.com/bitcoin/bitcoin/pull/18772#discussion_r498525344,498525344,src/rpc/blockchain.cpp
sipa,2020-10-01 21:38:48,"I think it's not unreasonable to delete undo data while keeping block data (that means you could still serve it to other syncing nodes, and rescan, but can't reorg out of it). That just was never implemented.",https://github.com/bitcoin/bitcoin/pull/18772#discussion_r498526377,498526377,src/rpc/blockchain.cpp
robot-dreams,2020-10-02 04:29:29,"OK, you both make some great points. I can think of three approaches at the moment:\n\n- Use `GetUndoChecked` which means if someone deletes undo data in the future, they'll cause this RPC to fail\n- Silently leave out the fee if block data is present but undo data is missing\n- Add some verbose documentation that says ""we'll include the fee if we have the data needed to efficiently calculate ",https://github.com/bitcoin/bitcoin/pull/18772#discussion_r498614355,498614355,src/rpc/blockchain.cpp
fjahr,2020-10-02 21:55:36,"As @sipa says it's not implemented and I think there is no one working on something like that (Side-note: I will look into that now :) ). So I would say the first option would still be my first choice if we could have a test that would reliably fail when the change comes. But that seems unrealistic, at least if it is implemented the way I envision it now and generally it would be poking around in ",https://github.com/bitcoin/bitcoin/pull/18772#discussion_r499066443,499066443,src/rpc/blockchain.cpp
fjahr,2020-10-04 15:58:02,nit: could be const,https://github.com/bitcoin/bitcoin/pull/18772#discussion_r499261276,499261276,src/core_write.cpp
fjahr,2020-10-04 16:26:47,"Hm, I think since with the currently available version of pruning the block wouldn't be found anyway this would be slightly better and also more precise:\n```suggestion\n                            {RPCResult::Type::NUM, ""fee"", ""The transaction fee in "" + CURRENCY_UNIT + "", omitted if efficient calculation isn't possible (due to block undo data being unavailable)""},\n```",https://github.com/bitcoin/bitcoin/pull/18772#discussion_r499263865,499263865,src/rpc/blockchain.cpp
fjahr,2020-10-04 16:28:24,"I think it's slightly better to be a bit more precise here. There may be other reason (in the future) why there is no undo data.\n```suggestion\n    // for coinbase transactions and for transactions where undo data is unavailable.\n```",https://github.com/bitcoin/bitcoin/pull/18772#discussion_r499264006,499264006,src/core_write.cpp
jnewbery,2020-10-05 08:33:59,"I think either leaving it like it is now, or returning an error when the undo file is not available but the block file is (since that's currently an unexpected condition) are both fine.",https://github.com/bitcoin/bitcoin/pull/18772#discussion_r499429396,499429396,src/rpc/blockchain.cpp
jnewbery,2020-10-05 08:37:05,"I think this would be fine as just ""omitted if block undo data is not available"". I don't think users would care about or understand what you mean by 'efficient calculation'.",https://github.com/bitcoin/bitcoin/pull/18772#discussion_r499431094,499431094,src/rpc/blockchain.cpp
jnewbery,2020-10-05 08:39:27,Did you look at using miniwallet.py to manually create the transactions? That would avoid a dependency on a compiled wallet to test this functionality.,https://github.com/bitcoin/bitcoin/pull/18772#discussion_r499432395,499432395,test/functional/rpc_blockchain.py
jnewbery,2020-10-05 08:40:13,"Unless you're setting amounts/fee explicitly, this feels brittle (i.e. this test would break if an unrelated change was made in how the wallet code sets fees).",https://github.com/bitcoin/bitcoin/pull/18772#discussion_r499432813,499432813,test/functional/rpc_blockchain.py
MarcoFalke,2020-12-24 14:05:41,no need for this check. The next line would already fail with `KeyError`,https://github.com/bitcoin/bitcoin/pull/18772#discussion_r548539410,548539410,test/functional/rpc_blockchain.py
MarcoFalke,2020-12-24 14:06:41,no need for the import `node.datadir` should suffice,https://github.com/bitcoin/bitcoin/pull/18772#discussion_r548539687,548539687,test/functional/rpc_blockchain.py
