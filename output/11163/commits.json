[
  {
    "sha": "43c49116be4f2b50531161bdab46a4d4788d0074",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0M2M0OTExNmJlNGYyYjUwNTMxMTYxYmRhYjQ2YTRkNDc4OGQwMDc0",
    "commit": {
      "author": {
        "name": "Dan Raviv",
        "email": "dan@soundradix.com",
        "date": "2017-08-26T16:04:22Z"
      },
      "committer": {
        "name": "Dan Raviv",
        "email": "dan@soundradix.com",
        "date": "2017-08-26T16:08:41Z"
      },
      "message": "Remove redundant explicitly defined CTxMemPoolEntry copy ctor\n\nCTxMemPoolEntry has an explicitly defined copy ctor which has the same functionality as the implicit default copy ctor which would have been generated otherwise.\n\nBesides being redundant, it violates the rule of three (see https://en.wikipedia.org/wiki/Rule_of_three_(C%2B%2B_programming) ).\nThe rule of three doesn't -really- cause a resource management issue here, but the reason for that is exactly that there is no need for an explicit copy ctor in the first place since no resources are being managed.",
      "tree": {
        "sha": "f55435f39054715997ffab0d153bb62832b5cec2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f55435f39054715997ffab0d153bb62832b5cec2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/43c49116be4f2b50531161bdab46a4d4788d0074",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43c49116be4f2b50531161bdab46a4d4788d0074",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/43c49116be4f2b50531161bdab46a4d4788d0074",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43c49116be4f2b50531161bdab46a4d4788d0074/comments",
    "author": {
      "login": "danra",
      "id": 84245,
      "node_id": "MDQ6VXNlcjg0MjQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/84245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danra",
      "html_url": "https://github.com/danra",
      "followers_url": "https://api.github.com/users/danra/followers",
      "following_url": "https://api.github.com/users/danra/following{/other_user}",
      "gists_url": "https://api.github.com/users/danra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danra/subscriptions",
      "organizations_url": "https://api.github.com/users/danra/orgs",
      "repos_url": "https://api.github.com/users/danra/repos",
      "events_url": "https://api.github.com/users/danra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danra/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "danra",
      "id": 84245,
      "node_id": "MDQ6VXNlcjg0MjQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/84245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danra",
      "html_url": "https://github.com/danra",
      "followers_url": "https://api.github.com/users/danra/followers",
      "following_url": "https://api.github.com/users/danra/following{/other_user}",
      "gists_url": "https://api.github.com/users/danra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danra/subscriptions",
      "organizations_url": "https://api.github.com/users/danra/orgs",
      "repos_url": "https://api.github.com/users/danra/repos",
      "events_url": "https://api.github.com/users/danra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danra/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7fd49d01dc2ea444ba4d81d0cfa17486b03c8515",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fd49d01dc2ea444ba4d81d0cfa17486b03c8515",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fd49d01dc2ea444ba4d81d0cfa17486b03c8515"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 0,
      "deletions": 7
    },
    "files": [
      {
        "sha": "f68d677646e2c30954564fd1b51ddb7f2550ab1c",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43c49116be4f2b50531161bdab46a4d4788d0074/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43c49116be4f2b50531161bdab46a4d4788d0074/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=43c49116be4f2b50531161bdab46a4d4788d0074",
        "patch": "@@ -39,11 +39,6 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFe\n     nSigOpCostWithAncestors = sigOpCost;\n }\n \n-CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n-{\n-    *this = other;\n-}\n-\n void CTxMemPoolEntry::UpdateFeeDelta(int64_t newFeeDelta)\n {\n     nModFeesWithDescendants += newFeeDelta - feeDelta;"
      },
      {
        "sha": "65586a6e6e8ea2beed0f208ec5bd099a02609974",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43c49116be4f2b50531161bdab46a4d4788d0074/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43c49116be4f2b50531161bdab46a4d4788d0074/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=43c49116be4f2b50531161bdab46a4d4788d0074",
        "patch": "@@ -95,8 +95,6 @@ class CTxMemPoolEntry\n                     bool spendsCoinbase,\n                     int64_t nSigOpsCost, LockPoints lp);\n \n-    CTxMemPoolEntry(const CTxMemPoolEntry& other);\n-\n     const CTransaction& GetTx() const { return *this->tx; }\n     CTransactionRef GetSharedTx() const { return this->tx; }\n     const CAmount& GetFee() const { return nFee; }"
      }
    ]
  }
]