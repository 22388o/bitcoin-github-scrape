[
  {
    "sha": "fa0d36f712c50cce82b275e5f5dbb8ed9601a443",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTBkMzZmNzEyYzUwY2NlODJiMjc1ZTVmNWRiYjhlZDk2MDFhNDQz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-06T15:40:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-09T17:37:06Z"
      },
      "message": "rpc: Include rpc/util.h where needed for RPCHelpMan\n\nJust a preparatory commit to add the header to the includes and run\nclang-format to sort the include lists.\n\nSplitting this up into a separate commit makes future scripted-diffs\neasier.",
      "tree": {
        "sha": "ebbea0ca254d633bca652f6b7ac6cd3fd12cf1a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ebbea0ca254d633bca652f6b7ac6cd3fd12cf1a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa0d36f712c50cce82b275e5f5dbb8ed9601a443",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJb5cXCAAoJEM4rdWl+aaVId24MAKjco6EZ/fvwwcxYGff9TWk1\n1w2qwLqmyGQwtCwAX54cVqbT51xsaxqkj6SYKDw2CjZyxTnYlrrKJNJFmxPvokxY\ngNFA+rF0yZiK0WYVv3SVhyp8T4PMSJ50p3272aSYBjJiB5vcGTwg92oIFDV23XlQ\nADZEvhqAxs4xmg67NC29DYBg8gp4uN4YZ/K+LURmzTfEYtVtyeq6WHZn30TYCw42\nidORzhlQOixXfVbySh0poEYH2LyQuF6rBGztpFSN2X4PUJMVUXRtACqgMt3A24xM\no4SY/eoWadMjlyfmiR2cIoYsFrh50S5c1YzyS0GjxBrvq1oKjxgIaBONA3nND9fJ\n9INDfHfVDGAwCgC6U47L9+tGjpolYDod0H7i2dCEdpK6clZXmj/eYLM2KJCEUYCL\n7J44Gsl01SI/SadOvorm+8O5yUZWOds+uwe6omSt4hR1fmcBlUnJx4S6KI3w5WPv\no9O69grsf58gb87QA89RSeNMNLHcPQH6m1PjLRRZUQ==\n=RPNl\n-----END PGP SIGNATURE-----",
        "payload": "tree ebbea0ca254d633bca652f6b7ac6cd3fd12cf1a3\nparent cbf00939b5e813937fb21466aa3e229ca81cb6ba\nauthor MarcoFalke <falke.marco@gmail.com> 1541518850 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1541785026 -0500\n\nrpc: Include rpc/util.h where needed for RPCHelpMan\n\nJust a preparatory commit to add the header to the includes and run\nclang-format to sort the include lists.\n\nSplitting this up into a separate commit makes future scripted-diffs\neasier.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0d36f712c50cce82b275e5f5dbb8ed9601a443",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0d36f712c50cce82b275e5f5dbb8ed9601a443",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0d36f712c50cce82b275e5f5dbb8ed9601a443/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbf00939b5e813937fb21466aa3e229ca81cb6ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbf00939b5e813937fb21466aa3e229ca81cb6ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbf00939b5e813937fb21466aa3e229ca81cb6ba"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 19,
      "deletions": 13
    },
    "files": [
      {
        "sha": "a61857ca7d087360d4604585c3ecb0941caba768",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0d36f712c50cce82b275e5f5dbb8ed9601a443/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0d36f712c50cce82b275e5f5dbb8ed9601a443/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa0d36f712c50cce82b275e5f5dbb8ed9601a443",
        "patch": "@@ -12,23 +12,24 @@\n #include <checkpoints.h>\n #include <coins.h>\n #include <consensus/validation.h>\n-#include <validation.h>\n #include <core_io.h>\n+#include <hash.h>\n #include <index/txindex.h>\n #include <key_io.h>\n #include <policy/feerate.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n #include <rpc/server.h>\n+#include <rpc/util.h>\n #include <script/descriptor.h>\n #include <streams.h>\n #include <sync.h>\n #include <txdb.h>\n #include <txmempool.h>\n-#include <util/system.h>\n #include <util/strencodings.h>\n-#include <hash.h>\n+#include <util/system.h>\n+#include <validation.h>\n #include <validationinterface.h>\n #include <versionbitsinfo.h>\n #include <warnings.h>"
      },
      {
        "sha": "8751991fc43a9d7027c824ac79b283f666978035",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0d36f712c50cce82b275e5f5dbb8ed9601a443/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0d36f712c50cce82b275e5f5dbb8ed9601a443/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fa0d36f712c50cce82b275e5f5dbb8ed9601a443",
        "patch": "@@ -18,10 +18,11 @@\n #include <rpc/blockchain.h>\n #include <rpc/mining.h>\n #include <rpc/server.h>\n+#include <rpc/util.h>\n #include <shutdown.h>\n #include <txmempool.h>\n-#include <util/system.h>\n #include <util/strencodings.h>\n+#include <util/system.h>\n #include <validation.h>\n #include <validationinterface.h>\n #include <versionbitsinfo.h>"
      },
      {
        "sha": "ab049a27f8af630f04fe44a2ad459e7964690230",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0d36f712c50cce82b275e5f5dbb8ed9601a443/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0d36f712c50cce82b275e5f5dbb8ed9601a443/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fa0d36f712c50cce82b275e5f5dbb8ed9601a443",
        "patch": "@@ -7,17 +7,18 @@\n #include <chainparams.h>\n #include <clientversion.h>\n #include <core_io.h>\n-#include <validation.h>\n #include <net.h>\n #include <net_processing.h>\n #include <netbase.h>\n #include <policy/policy.h>\n #include <rpc/protocol.h>\n+#include <rpc/util.h>\n #include <sync.h>\n #include <timedata.h>\n #include <ui_interface.h>\n-#include <util/system.h>\n #include <util/strencodings.h>\n+#include <util/system.h>\n+#include <validation.h>\n #include <version.h>\n #include <warnings.h>\n "
      },
      {
        "sha": "a8c6a4086b809cb63d2352a189bbb40d1599a54a",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0d36f712c50cce82b275e5f5dbb8ed9601a443/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0d36f712c50cce82b275e5f5dbb8ed9601a443/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa0d36f712c50cce82b275e5f5dbb8ed9601a443",
        "patch": "@@ -10,10 +10,8 @@\n #include <core_io.h>\n #include <index/txindex.h>\n #include <init.h>\n-#include <keystore.h>\n-#include <validation.h>\n-#include <validationinterface.h>\n #include <key_io.h>\n+#include <keystore.h>\n #include <merkleblock.h>\n #include <net.h>\n #include <policy/policy.h>\n@@ -29,6 +27,8 @@\n #include <txmempool.h>\n #include <uint256.h>\n #include <util/strencodings.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n \n #include <future>\n #include <stdint.h>"
      },
      {
        "sha": "9d2c6ca0a6d227f293f1bdf887d7b4e1d87bbe8f",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0d36f712c50cce82b275e5f5dbb8ed9601a443/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0d36f712c50cce82b275e5f5dbb8ed9601a443/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=fa0d36f712c50cce82b275e5f5dbb8ed9601a443",
        "patch": "@@ -8,11 +8,12 @@\n #include <fs.h>\n #include <key_io.h>\n #include <random.h>\n+#include <rpc/util.h>\n #include <shutdown.h>\n #include <sync.h>\n #include <ui_interface.h>\n-#include <util/system.h>\n #include <util/strencodings.h>\n+#include <util/system.h>\n \n #include <boost/bind.hpp>\n #include <boost/signals2/signal.hpp>"
      },
      {
        "sha": "9f289b034ca6cc9f404f0bdcd2f6176e94274080",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0d36f712c50cce82b275e5f5dbb8ed9601a443/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0d36f712c50cce82b275e5f5dbb8ed9601a443/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fa0d36f712c50cce82b275e5f5dbb8ed9601a443",
        "patch": "@@ -3,18 +3,19 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chain.h>\n+#include <core_io.h>\n #include <interfaces/chain.h>\n #include <key_io.h>\n+#include <merkleblock.h>\n #include <rpc/server.h>\n-#include <validation.h>\n+#include <rpc/util.h>\n #include <script/script.h>\n #include <script/standard.h>\n #include <sync.h>\n #include <util/system.h>\n #include <util/time.h>\n+#include <validation.h>\n #include <wallet/wallet.h>\n-#include <merkleblock.h>\n-#include <core_io.h>\n \n #include <wallet/rpcwallet.h>\n "
      },
      {
        "sha": "66b491427d6bd6656d0d7f8cfd7079ebc1d1466e",
        "filename": "src/zmq/zmqrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0d36f712c50cce82b275e5f5dbb8ed9601a443/src/zmq/zmqrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0d36f712c50cce82b275e5f5dbb8ed9601a443/src/zmq/zmqrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqrpc.cpp?ref=fa0d36f712c50cce82b275e5f5dbb8ed9601a443",
        "patch": "@@ -5,6 +5,7 @@\n #include <zmq/zmqrpc.h>\n \n #include <rpc/server.h>\n+#include <rpc/util.h>\n #include <zmq/zmqabstractnotifier.h>\n #include <zmq/zmqnotificationinterface.h>\n "
      }
    ]
  },
  {
    "sha": "fa483e13b387f244c1c72d4dbd709e669335618e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQ4M2UxM2IzODdmMjQ0YzFjNzJkNGRiZDcwOWU2NjkzMzU2MThl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-23T19:22:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-12T16:11:17Z"
      },
      "message": "rpc: Add RPCHelpMan for machine-generated help",
      "tree": {
        "sha": "b488e095c893d0f7da0eb5e2744750e7a1e99dcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b488e095c893d0f7da0eb5e2744750e7a1e99dcc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa483e13b387f244c1c72d4dbd709e669335618e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJb6aYlAAoJEM4rdWl+aaVIquMMALL8uJRig51zwMgtQZ4/MxWr\n42d/YVfWEOl06vTvtDT28+2UeCAnAcPPkMqnbc87AQ1cxA70BWVLcPdhrTZQFeH/\nUPryqVOF8iFy4YmZHHNNKja0YWrYTB3prpnD0N8UrrERIpXx4n+y+lm35glRiwdN\nvYkr6qJPoDhJfToQACvMFtdoholQC/n9jNRvDelGBGco6Yb9uutWCAq1pzwdfxtg\npnk9knWDt2R3KyXWuiqDdUWOXB5qU3JUIU+R7F14U5KF8Dk5YVUvW7YsRptleXzD\nhKTjNtD4Cpg1YvGu+931+RfgUhKXCCuPFMt8otsdaefO+iaBjB8AxtdrQGtd11Gl\n/hAkrUtNgL6pqsGprekUfOcWI65q21AZSQrJRKM6q/o7Q50wdmQfrHaOqbHj2pvQ\npTykPSwwqRBV/mUYR3SIUUyWBIlnAsBWGErxUHIugLvNpw8wVgZnfAsmMgexokk3\nBkdx/t6B/p2QaioN0DySPsauqKgQZwTBaeI6lwWhRw==\n=KP7n\n-----END PGP SIGNATURE-----",
        "payload": "tree b488e095c893d0f7da0eb5e2744750e7a1e99dcc\nparent fa0d36f712c50cce82b275e5f5dbb8ed9601a443\nauthor MarcoFalke <falke.marco@gmail.com> 1540322548 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1542039077 -0500\n\nrpc: Add RPCHelpMan for machine-generated help\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa483e13b387f244c1c72d4dbd709e669335618e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa483e13b387f244c1c72d4dbd709e669335618e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa483e13b387f244c1c72d4dbd709e669335618e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa0d36f712c50cce82b275e5f5dbb8ed9601a443",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0d36f712c50cce82b275e5f5dbb8ed9601a443",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0d36f712c50cce82b275e5f5dbb8ed9601a443"
      }
    ],
    "stats": {
      "total": 337,
      "additions": 327,
      "deletions": 10
    },
    "files": [
      {
        "sha": "950f0181ad43154d70bf381389ea6d7f72c7f1f9",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 6,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa483e13b387f244c1c72d4dbd709e669335618e/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa483e13b387f244c1c72d4dbd709e669335618e/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa483e13b387f244c1c72d4dbd709e669335618e",
        "patch": "@@ -206,7 +206,16 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n {\n     if (request.fHelp || (request.params.size() != 1 && request.params.size() != 2))\n         throw std::runtime_error(\n-            \"gettxoutproof [\\\"txid\\\",...] ( blockhash )\\n\"\n+            RPCHelpMan{\"gettxoutproof\",\n+                {\n+                    {\"txids\", RPCArg::Type::ARR,\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, false},\n+                        },\n+                        false},\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, true},\n+                }}\n+                .ToString() +\n             \"\\nReturns a hex-encoded proof that \\\"txid\\\" was included in a block.\\n\"\n             \"\\nNOTE: By default this function only works sometimes. This is when there is an\\n\"\n             \"unspent output in the utxo for this transaction. To make it always work,\\n\"\n@@ -673,10 +682,17 @@ static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::\n \n static UniValue combinerawtransaction(const JSONRPCRequest& request)\n {\n-\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"combinerawtransaction [\\\"hexstring\\\",...]\\n\"\n+            RPCHelpMan{\"combinerawtransaction\",\n+                {\n+                    {\"txs\", RPCArg::Type::ARR,\n+                        {\n+                            {\"hexstring\", RPCArg::Type::STR_HEX, false},\n+                        },\n+                        false},\n+                }}\n+                .ToString() +\n             \"\\nCombine multiple partially signed transactions into one transaction.\\n\"\n             \"The combined transaction may be another partially signed transaction or a \\n\"\n             \"fully signed transaction.\"\n@@ -899,7 +915,30 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            RPCHelpMan{\"signrawtransactionwithkey\",\n+                {\n+                    {\"hexstring\", RPCArg::Type::STR, false},\n+                    {\"privkyes\", RPCArg::Type::ARR,\n+                        {\n+                            {\"privatekey\", RPCArg::Type::STR_HEX, false},\n+                        },\n+                        false},\n+                    {\"prevtxs\", RPCArg::Type::ARR,\n+                        {\n+                            {\"\", RPCArg::Type::OBJ,\n+                                {\n+                                    {\"txid\", RPCArg::Type::STR_HEX, false},\n+                                    {\"vout\", RPCArg::Type::NUM, false},\n+                                    {\"scriptPubKey\", RPCArg::Type::STR_HEX, false},\n+                                    {\"redeemScript\", RPCArg::Type::STR_HEX, false},\n+                                    {\"amount\", RPCArg::Type::AMOUNT, false},\n+                                },\n+                                true},\n+                        },\n+                        true},\n+                    {\"sighashtype\", RPCArg::Type::STR, true},\n+                }}\n+                .ToString() +\n             \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n             \"The second argument is an array of base58-encoded private\\n\"\n             \"keys that will be the only keys used to sign the transaction.\\n\"\n@@ -1454,7 +1493,15 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"combinepsbt [\\\"psbt\\\",...]\\n\"\n+            RPCHelpMan{\"combinepsbt\",\n+                {\n+                    {\"txs\", RPCArg::Type::ARR,\n+                        {\n+                            {\"psbt\", RPCArg::Type::STR_HEX, false},\n+                        },\n+                        false},\n+                }}\n+                .ToString() +\n             \"\\nCombine multiple partially signed Bitcoin transactions into one transaction.\\n\"\n             \"Implements the Combiner role.\\n\"\n             \"\\nArguments:\\n\"\n@@ -1570,7 +1617,37 @@ UniValue createpsbt(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n         throw std::runtime_error(\n-                            \"createpsbt [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] [{\\\"address\\\":amount},{\\\"data\\\":\\\"hex\\\"},...] ( locktime ) ( replaceable )\\n\"\n+            RPCHelpMan{\"createpsbt\",\n+                {\n+                    {\"inputs\", RPCArg::Type::ARR,\n+                        {\n+                            {\"\", RPCArg::Type::OBJ,\n+                                {\n+                                    {\"txid\", RPCArg::Type::STR_HEX, false},\n+                                    {\"vout\", RPCArg::Type::NUM, false},\n+                                    {\"sequence\", RPCArg::Type::NUM, true},\n+                                },\n+                                false},\n+                        },\n+                        false},\n+                    {\"outputs\", RPCArg::Type::ARR,\n+                        {\n+                            {\"\", RPCArg::Type::OBJ,\n+                                {\n+                                    {\"address\", RPCArg::Type::AMOUNT, false},\n+                                },\n+                                true},\n+                            {\"\", RPCArg::Type::OBJ,\n+                                {\n+                                    {\"data\", RPCArg::Type::STR_HEX, false},\n+                                },\n+                                true},\n+                        },\n+                        false},\n+                    {\"locktime\", RPCArg::Type::NUM, true},\n+                    {\"replaceable\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n                             \"\\nCreates a transaction in the Partially Signed Transaction format.\\n\"\n                             \"Implements the Creator role.\\n\"\n                             \"\\nArguments:\\n\""
      },
      {
        "sha": "6f2450708add9737fb938807700c255595d6d579",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 92,
        "deletions": 0,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa483e13b387f244c1c72d4dbd709e669335618e/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa483e13b387f244c1c72d4dbd709e669335618e/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=fa483e13b387f244c1c72d4dbd709e669335618e",
        "patch": "@@ -128,3 +128,95 @@ UniValue DescribeAddress(const CTxDestination& dest)\n {\n     return boost::apply_visitor(DescribeAddressVisitor(), dest);\n }\n+\n+std::string RPCHelpMan::ToString() const\n+{\n+    std::string ret;\n+\n+    ret += m_name;\n+    bool is_optional{false};\n+    for (const auto& arg : m_args) {\n+        ret += \" \";\n+        if (arg.m_optional) {\n+            if (!is_optional) ret += \"( \";\n+            is_optional = true;\n+        } else {\n+            // Currently we still support unnamed arguments, so any argument following an optional argument must also be optional\n+            // If support for positional arguments is deprecated in the future, remove this line\n+            assert(!is_optional);\n+        }\n+        ret += arg.ToString();\n+    }\n+    if (is_optional) ret += \" )\";\n+    ret += \"\\n\";\n+\n+    return ret;\n+}\n+\n+std::string RPCArg::ToStringObj() const\n+{\n+    std::string res = \"\\\"\" + m_name + \"\\\":\";\n+    switch (m_type) {\n+    case Type::STR:\n+        return res + \"\\\"str\\\"\";\n+    case Type::STR_HEX:\n+        return res + \"\\\"hex\\\"\";\n+    case Type::NUM:\n+        return res + \"n\";\n+    case Type::AMOUNT:\n+        return res + \"amount\";\n+    case Type::BOOL:\n+        return res + \"bool\";\n+    case Type::ARR:\n+        res += \"[\";\n+        for (const auto& i : m_inner) {\n+            res += i.ToString() + \",\";\n+        }\n+        return res + \"...]\";\n+    case Type::OBJ:\n+    case Type::OBJ_USER_KEYS:\n+        // Currently unused, so avoid writing dead code\n+        assert(false);\n+\n+        // no default case, so the compiler can warn about missing cases\n+    }\n+    assert(false);\n+}\n+\n+std::string RPCArg::ToString() const\n+{\n+    switch (m_type) {\n+    case Type::STR_HEX:\n+    case Type::STR: {\n+        return \"\\\"\" + m_name + \"\\\"\";\n+    }\n+    case Type::NUM:\n+    case Type::AMOUNT:\n+    case Type::BOOL: {\n+        return m_name;\n+    }\n+    case Type::OBJ:\n+    case Type::OBJ_USER_KEYS: {\n+        std::string res;\n+        for (size_t i = 0; i < m_inner.size();) {\n+            res += m_inner[i].ToStringObj();\n+            if (++i < m_inner.size()) res += \",\";\n+        }\n+        if (m_type == Type::OBJ) {\n+            return \"{\" + res + \"}\";\n+        } else {\n+            return \"{\" + res + \",...}\";\n+        }\n+    }\n+    case Type::ARR: {\n+        std::string res;\n+        for (const auto& i : m_inner) {\n+            res += i.ToString() + \",\";\n+        }\n+        return \"[\" + res + \"...]\";\n+    }\n+\n+        // no default case, so the compiler can warn about missing cases\n+    }\n+    assert(false);\n+}"
      },
      {
        "sha": "55ae2fa3632b597be1f38887fb0c7ba8351337dd",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa483e13b387f244c1c72d4dbd709e669335618e/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa483e13b387f244c1c72d4dbd709e669335618e/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=fa483e13b387f244c1c72d4dbd709e669335618e",
        "patch": "@@ -30,4 +30,53 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n UniValue DescribeAddress(const CTxDestination& dest);\n \n+struct RPCArg {\n+    enum class Type {\n+        OBJ,\n+        ARR,\n+        STR,\n+        NUM,\n+        BOOL,\n+        OBJ_USER_KEYS, //!< Special type where the user must set the keys e.g. to define multiple addresses; as opposed to e.g. an options object where the keys are predefined\n+        AMOUNT,        //!< Special type representing a floating point amount (can be either NUM or STR)\n+        STR_HEX,       //!< Special type that is a STR with only hex chars\n+    };\n+    const std::string m_name; //!< The name of the arg (can be empty for inner args)\n+    const Type m_type;\n+    const std::vector<RPCArg> m_inner; //!< Only used for arrays or dicts\n+    const bool m_optional;\n+\n+    RPCArg(const std::string& name, const Type& type, const bool optional)\n+        : m_name{name}, m_type{type}, m_optional{optional}\n+    {\n+        assert(type != Type::ARR && type != Type::OBJ);\n+    }\n+\n+    RPCArg(const std::string& name, const Type& type, const std::vector<RPCArg>& inner, const bool optional)\n+        : m_name{name}, m_type{type}, m_inner{inner}, m_optional{optional}\n+    {\n+        assert(type == Type::ARR || type == Type::OBJ);\n+    }\n+\n+    std::string ToString() const;\n+\n+private:\n+    std::string ToStringObj() const;\n+};\n+\n+class RPCHelpMan\n+{\n+public:\n+    RPCHelpMan(const std::string& name, const std::vector<RPCArg>& args)\n+        : m_name{name}, m_args{args}\n+    {\n+    }\n+\n+    std::string ToString() const;\n+\n+private:\n+    const std::string m_name;\n+    const std::vector<RPCArg> m_args;\n+};\n+\n #endif // BITCOIN_RPC_UTIL_H"
      },
      {
        "sha": "8261c48c77cf1e8c198adea4342acc8b306ab57b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 103,
        "deletions": 4,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa483e13b387f244c1c72d4dbd709e669335618e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa483e13b387f244c1c72d4dbd709e669335618e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa483e13b387f244c1c72d4dbd709e669335618e",
        "patch": "@@ -2075,7 +2075,21 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"lockunspent unlock ([{\\\"txid\\\":\\\"txid\\\",\\\"vout\\\":n},...])\\n\"\n+            RPCHelpMan{\"lockunspent\",\n+                {\n+                    {\"unlock\", RPCArg::Type::BOOL, false},\n+                    {\"transactions\", RPCArg::Type::ARR,\n+                        {\n+                            {\"\", RPCArg::Type::OBJ,\n+                                {\n+                                    {\"txid\", RPCArg::Type::STR_HEX, false},\n+                                    {\"vout\", RPCArg::Type::NUM, false},\n+                                },\n+                                true},\n+                        },\n+                        true},\n+                }}\n+                .ToString() +\n             \"\\nUpdates list of temporarily unspendable outputs.\\n\"\n             \"Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\\n\"\n             \"If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.\\n\"\n@@ -2620,7 +2634,26 @@ static UniValue listunspent(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 5)\n         throw std::runtime_error(\n-            \"listunspent ( minconf maxconf  [\\\"addresses\\\",...] [include_unsafe] [query_options])\\n\"\n+            RPCHelpMan{\"listunspent\",\n+                {\n+                    {\"minconf\", RPCArg::Type::NUM, true},\n+                    {\"maxconf\", RPCArg::Type::NUM, true},\n+                    {\"addresses\", RPCArg::Type::ARR,\n+                        {\n+                            {\"address\", RPCArg::Type::STR_HEX, true},\n+                        },\n+                        true},\n+                    {\"include_unsafe\", RPCArg::Type::BOOL, true},\n+                    {\"query_options\", RPCArg::Type::OBJ,\n+                        {\n+                            {\"minimumAmount\", RPCArg::Type::AMOUNT, true},\n+                            {\"maximumAmount\", RPCArg::Type::AMOUNT, true},\n+                            {\"maximumCount\", RPCArg::Type::NUM, true},\n+                            {\"minimumSumAmount\", RPCArg::Type::AMOUNT, true},\n+                        },\n+                        true},\n+                }}\n+                .ToString() +\n             \"\\nReturns array of unspent transaction outputs\\n\"\n             \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n             \"Optionally filter to only include txouts paid to specified addresses.\\n\"\n@@ -2995,7 +3028,25 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"signrawtransactionwithwallet \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            RPCHelpMan{\"signrawtransactionwithwallet\",\n+                {\n+                    {\"hexstring\", RPCArg::Type::STR, false},\n+                    {\"prevtxs\", RPCArg::Type::ARR,\n+                        {\n+                            {\"\", RPCArg::Type::OBJ,\n+                                {\n+                                    {\"txid\", RPCArg::Type::STR_HEX, false},\n+                                    {\"vout\", RPCArg::Type::NUM, false},\n+                                    {\"scriptPubKey\", RPCArg::Type::STR_HEX, false},\n+                                    {\"redeemScript\", RPCArg::Type::STR_HEX, false},\n+                                    {\"amount\", RPCArg::Type::AMOUNT, false},\n+                                },\n+                                false},\n+                        },\n+                        true},\n+                    {\"sighashtype\", RPCArg::Type::STR, true},\n+                }}\n+                .ToString() +\n             \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n             \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n             \"this transaction depends on but may not yet be in the block chain.\\n\"\n@@ -3896,7 +3947,55 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n         throw std::runtime_error(\n-                            \"walletcreatefundedpsbt [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] [{\\\"address\\\":amount},{\\\"data\\\":\\\"hex\\\"},...] ( locktime ) ( replaceable ) ( options bip32derivs )\\n\"\n+            RPCHelpMan{\"walletcreatefundedpsbt\",\n+                {\n+                    {\"inputs\", RPCArg::Type::ARR,\n+                        {\n+                            {\"\", RPCArg::Type::OBJ,\n+                                {\n+                                    {\"txid\", RPCArg::Type::STR_HEX, false},\n+                                    {\"vout\", RPCArg::Type::NUM, false},\n+                                    {\"sequence\", RPCArg::Type::NUM, false},\n+                                },\n+                                false},\n+                        },\n+                        false},\n+                    {\"outputs\", RPCArg::Type::ARR,\n+                        {\n+                            {\"\", RPCArg::Type::OBJ,\n+                                {\n+                                    {\"address\", RPCArg::Type::AMOUNT, true},\n+                                },\n+                                true},\n+                            {\"\", RPCArg::Type::OBJ,\n+                                {\n+                                    {\"data\", RPCArg::Type::STR_HEX, true},\n+                                },\n+                                true},\n+                        },\n+                        false},\n+                    {\"locktime\", RPCArg::Type::NUM, true},\n+                    {\"options\", RPCArg::Type::OBJ,\n+                        {\n+                            {\"changeAddress\", RPCArg::Type::STR_HEX, true},\n+                            {\"changePosition\", RPCArg::Type::NUM, true},\n+                            {\"change_type\", RPCArg::Type::STR, true},\n+                            {\"includeWatching\", RPCArg::Type::BOOL, true},\n+                            {\"lockUnspents\", RPCArg::Type::BOOL, true},\n+                            {\"feeRate\", RPCArg::Type::NUM, true},\n+                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR,\n+                                {\n+                                    {\"int\", RPCArg::Type::NUM, true},\n+                                },\n+                                true},\n+                            {\"replaceable\", RPCArg::Type::BOOL, true},\n+                            {\"conf_target\", RPCArg::Type::NUM, true},\n+                            {\"estimate_mode\", RPCArg::Type::STR, true},\n+                        },\n+                        true},\n+                    {\"bip32derivs\", RPCArg::Type::BOOL, true},\n+                }}\n+                .ToString() +\n                             \"\\nCreates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough\\n\"\n                             \"Implements the Creator and Updater roles.\\n\"\n                             \"\\nArguments:\\n\""
      }
    ]
  }
]