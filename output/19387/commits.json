[
  {
    "sha": "62733fee874bfe7e833e71380eb8efd6a3126fbd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjczM2ZlZTg3NGJmZTdlODMzZTcxMzgwZWI4ZWZkNmEzMTI2ZmJk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2020-06-26T17:21:13Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2020-06-29T17:51:24Z"
      },
      "message": "span: (almost) match std::span's constructor behavior\n\nc++20's draft of std::span no longer includes move constructors.",
      "tree": {
        "sha": "124769a7c0627dd97b166ba7f32d80248f5ebfef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/124769a7c0627dd97b166ba7f32d80248f5ebfef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62733fee874bfe7e833e71380eb8efd6a3126fbd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62733fee874bfe7e833e71380eb8efd6a3126fbd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/62733fee874bfe7e833e71380eb8efd6a3126fbd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62733fee874bfe7e833e71380eb8efd6a3126fbd/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f32f7e907a5eb73e880c567c699569081608ed7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f32f7e907a5eb73e880c567c699569081608ed7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f32f7e907a5eb73e880c567c699569081608ed7a"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 21,
      "deletions": 2
    },
    "files": [
      {
        "sha": "78c30fa55376d36f38d222d1102ff32bab676fe5",
        "filename": "src/span.h",
        "status": "modified",
        "additions": 21,
        "deletions": 2,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62733fee874bfe7e833e71380eb8efd6a3126fbd/src/span.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62733fee874bfe7e833e71380eb8efd6a3126fbd/src/span.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/span.h?ref=62733fee874bfe7e833e71380eb8efd6a3126fbd",
        "patch": "@@ -28,6 +28,14 @@ class Span\n     C* m_data;\n     std::size_t m_size;\n \n+    template <class T>\n+    struct is_Span_int : public std::false_type {};\n+    template <class T>\n+    struct is_Span_int<Span<T>> : public std::true_type {};\n+    template <class T>\n+    struct is_Span : public is_Span_int<typename std::remove_cv<T>::type>{};\n+\n+\n public:\n     constexpr Span() noexcept : m_data(nullptr), m_size(0) {}\n \n@@ -78,8 +86,19 @@ class Span\n      * To prevent surprises, only Spans for constant value types are supported when passing in temporaries.\n      * Note that this restriction does not exist when converting arrays or other Spans (see above).\n      */\n-    template <typename V, typename std::enable_if<(std::is_const<C>::value || std::is_lvalue_reference<V>::value) && std::is_convertible<typename std::remove_pointer<decltype(std::declval<V&>().data())>::type (*)[], C (*)[]>::value && std::is_convertible<decltype(std::declval<V&>().size()), std::size_t>::value, int>::type = 0>\n-    constexpr Span(V&& v) noexcept : m_data(v.data()), m_size(v.size()) {}\n+    template <typename V>\n+    constexpr Span(V& other,\n+        typename std::enable_if<!is_Span<V>::value &&\n+                                std::is_convertible<typename std::remove_pointer<decltype(std::declval<V&>().data())>::type (*)[], C (*)[]>::value &&\n+                                std::is_convertible<decltype(std::declval<V&>().size()), std::size_t>::value, std::nullptr_t>::type = nullptr)\n+        : m_data(other.data()), m_size(other.size()){}\n+\n+    template <typename V>\n+    constexpr Span(const V& other,\n+        typename std::enable_if<!is_Span<V>::value &&\n+                                std::is_convertible<typename std::remove_pointer<decltype(std::declval<const V&>().data())>::type (*)[], C (*)[]>::value &&\n+                                std::is_convertible<decltype(std::declval<const V&>().size()), std::size_t>::value, std::nullptr_t>::type = nullptr)\n+        : m_data(other.data()), m_size(other.size()){}\n \n     constexpr C* data() const noexcept { return m_data; }\n     constexpr C* begin() const noexcept { return m_data; }"
      }
    ]
  },
  {
    "sha": "1d58cc7cb040a70f768b632f294db4e0797d3a34",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDU4Y2M3Y2IwNDBhNzBmNzY4YjYzMmYyOTRkYjRlMDc5N2QzYTM0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2020-06-25T21:25:31Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2020-06-29T19:15:34Z"
      },
      "message": "span: add lifetimebound attribute\n\nSee http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0936r0.pdf for\nreference.\n\nThis helps to guard against dangling references caused by construction from\ntemporaries such as:\n\n    Span<const int> sp(std::vector<int>{1,2,3});",
      "tree": {
        "sha": "1bd97392c39ccfffa509613f6b133b9df58b0dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bd97392c39ccfffa509613f6b133b9df58b0dce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d58cc7cb040a70f768b632f294db4e0797d3a34",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d58cc7cb040a70f768b632f294db4e0797d3a34",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d58cc7cb040a70f768b632f294db4e0797d3a34",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d58cc7cb040a70f768b632f294db4e0797d3a34/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "62733fee874bfe7e833e71380eb8efd6a3126fbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62733fee874bfe7e833e71380eb8efd6a3126fbd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62733fee874bfe7e833e71380eb8efd6a3126fbd"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 14,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d5d7ebccc47e3943aa8df0e1f0c3a3bd388e7a3b",
        "filename": "src/span.h",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d58cc7cb040a70f768b632f294db4e0797d3a34/src/span.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d58cc7cb040a70f768b632f294db4e0797d3a34/src/span.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/span.h?ref=1d58cc7cb040a70f768b632f294db4e0797d3a34",
        "patch": "@@ -18,6 +18,16 @@\n #define ASSERT_IF_DEBUG(x)\n #endif\n \n+#if defined(__clang__)\n+#if __has_attribute(lifetimebound)\n+#define SPAN_ATTR_LIFETIMEBOUND [[clang::lifetimebound]]\n+#else\n+#define SPAN_ATTR_LIFETIMEBOUND\n+#endif\n+#else\n+#define SPAN_ATTR_LIFETIMEBOUND\n+#endif\n+\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n@@ -87,14 +97,14 @@ class Span\n      * Note that this restriction does not exist when converting arrays or other Spans (see above).\n      */\n     template <typename V>\n-    constexpr Span(V& other,\n+    constexpr Span(V& other SPAN_ATTR_LIFETIMEBOUND,\n         typename std::enable_if<!is_Span<V>::value &&\n                                 std::is_convertible<typename std::remove_pointer<decltype(std::declval<V&>().data())>::type (*)[], C (*)[]>::value &&\n                                 std::is_convertible<decltype(std::declval<V&>().size()), std::size_t>::value, std::nullptr_t>::type = nullptr)\n         : m_data(other.data()), m_size(other.size()){}\n \n     template <typename V>\n-    constexpr Span(const V& other,\n+    constexpr Span(const V& other SPAN_ATTR_LIFETIMEBOUND,\n         typename std::enable_if<!is_Span<V>::value &&\n                                 std::is_convertible<typename std::remove_pointer<decltype(std::declval<const V&>().data())>::type (*)[], C (*)[]>::value &&\n                                 std::is_convertible<decltype(std::declval<const V&>().size()), std::size_t>::value, std::nullptr_t>::type = nullptr)\n@@ -154,9 +164,9 @@ class Span\n /** MakeSpan for arrays: */\n template <typename A, int N> Span<A> constexpr MakeSpan(A (&a)[N]) { return Span<A>(a, N); }\n /** MakeSpan for temporaries / rvalue references, only supporting const output. */\n-template <typename V> constexpr auto MakeSpan(V&& v) -> typename std::enable_if<!std::is_lvalue_reference<V>::value, Span<const typename std::remove_pointer<decltype(v.data())>::type>>::type { return std::forward<V>(v); }\n+template <typename V> constexpr auto MakeSpan(V&& v SPAN_ATTR_LIFETIMEBOUND) -> typename std::enable_if<!std::is_lvalue_reference<V>::value, Span<const typename std::remove_pointer<decltype(v.data())>::type>>::type { return std::forward<V>(v); }\n /** MakeSpan for (lvalue) references, supporting mutable output. */\n-template <typename V> constexpr auto MakeSpan(V& v) -> Span<typename std::remove_pointer<decltype(v.data())>::type> { return v; }\n+template <typename V> constexpr auto MakeSpan(V& v SPAN_ATTR_LIFETIMEBOUND) -> Span<typename std::remove_pointer<decltype(v.data())>::type> { return v; }\n \n /** Pop the last element off a span, and return a reference to that element. */\n template <typename T>"
      }
    ]
  },
  {
    "sha": "e3e7446305329ce96e9cf5f5161658eb2e1ea888",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplM2U3NDQ2MzA1MzI5Y2U5NmU5Y2Y1ZjUxNjE2NThlYjJlMWVhODg4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2020-07-08T16:52:14Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2020-07-08T17:31:56Z"
      },
      "message": "Add lifetimebound to attributes for general-purpose usage\n\nCo-authored-by: practicalswift <practicalswift@users.noreply.github.com>",
      "tree": {
        "sha": "c0900eade42e5240f87b8ccfb4ea7671e5fd292c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0900eade42e5240f87b8ccfb4ea7671e5fd292c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3e7446305329ce96e9cf5f5161658eb2e1ea888",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3e7446305329ce96e9cf5f5161658eb2e1ea888",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3e7446305329ce96e9cf5f5161658eb2e1ea888",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3e7446305329ce96e9cf5f5161658eb2e1ea888/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d58cc7cb040a70f768b632f294db4e0797d3a34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d58cc7cb040a70f768b632f294db4e0797d3a34",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d58cc7cb040a70f768b632f294db4e0797d3a34"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9d5c1d44a04c53843ae2a84f5e52f87ea220fbac",
        "filename": "src/attributes.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3e7446305329ce96e9cf5f5161658eb2e1ea888/src/attributes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3e7446305329ce96e9cf5f5161658eb2e1ea888/src/attributes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/attributes.h?ref=e3e7446305329ce96e9cf5f5161658eb2e1ea888",
        "patch": "@@ -19,4 +19,14 @@\n #  endif\n #endif\n \n+#if defined(__clang__)\n+#  if __has_attribute(lifetimebound)\n+#    define LIFETIMEBOUND [[clang::lifetimebound]]\n+#  else\n+#    define LIFETIMEBOUND\n+#  endif\n+#else\n+#  define LIFETIMEBOUND\n+#endif\n+\n #endif // BITCOIN_ATTRIBUTES_H"
      }
    ]
  }
]