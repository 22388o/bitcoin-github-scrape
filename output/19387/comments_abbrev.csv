sipa,2020-06-26 22:07:39,"ACK apart from nit above.\n\nI've tested this by rebasing #13062 and #19326 on top, and compiling with Clang 10; no warnings. Adding an obvious `Span<const int> bad{std::vector<int>{}};` does produce a warning.\n\nIt does seem that no warning is produced when `MakeSpan` is used in between, and I can't get that fixed. I think that's fine, but it'd be nice to improve upon.",https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-650424816,650424816,
practicalswift,2020-06-28 13:02:43,"Concept ACK: `[[clang::lifetimebound]]` is great! :)\n\nI think this will be useful also outside of `src/span.{cpp,h}`. What about adding it to `src/attributes.h` as `LIFETIMEBOUND`?\n\n```patch\ndiff --git a/src/attributes.h b/src/attributes.h\nindex 45099bd8b..9d5c1d44a 100644\n--- a/src/attributes.h\n+++ b/src/attributes.h\n@@ -19,4 +19,14 @@\n #  endif\n #endif\n \n+#if defined(__",https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-650752959,650752959,
jonatack,2020-06-28 13:29:10,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-650758345,650758345,
theuni,2020-06-29 17:57:32,"Updated and squashed.\n\n@practicalswift I'd rather wait to add it there until there's a use for it, if that's ok. By the time we have it to use somewhere else, it may not be clang-only anymore.\n\n~~I did change it to use ```__has_cpp_attribute``` to match our existing attribute check, though.~~\n\nEdit: whoops, ```__has_cpp_attribute``` doesn't actually work here! Back to ```__has_attribut",https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-651271913,651271913,
theuni,2020-06-29 19:22:23,"Sorry for the pushing/rebasing noise, done now.\n\n> It does seem that no warning is produced when MakeSpan is used in between, and I can't get that fixed. I think that's fine, but it'd be nice to improve upon.\n\n@sipa It turns out that this warning _does_ work for MakeSpan, but only in c++17 mode and above:\n\n```\n$ clang++ spantest.cpp -o spantest -std=c++17\n```\n> spantest.cpp:10:26",https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-651311305,651311305,
sipa,2020-07-01 04:27:59,"> so they should just magically work when we switch to c++17.\n\nI like magic.\n\nACK 1d58cc7cb040a70f768b632f294db4e0797d3a34",https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-652182571,652182571,
MarcoFalke,2020-07-01 12:25:19,"Instead of magic, I'd rather remove them and add the corresponding constructors from c++20 when we switched to c++17\n\nsecond-commit-only review ACK 1d58cc7cb040a70f768b632f294db4e0797d3a34",https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-652387479,652387479,
sipa,2020-07-01 23:30:28,"@MarcoFalke Well, no reason why we can't have both. The attribute as argument to `MakeSpan` makes sense - even if the compiler doesn't do anything useful with it - as it documents behavior to the user as well. And perhaps clang 123091137.4 will support it even in C++11 mode - who knows.",https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-652694694,652694694,
sipa,2020-07-02 00:19:39,"There are a lot more cases in the codebase where a data type stores a reference or pointer to another object provided to the constructor exist. For example:\n\n* In `src/stream.h`: `OverrideStream`, `CVectorReader`, `BitStreamReader`, `BitStreamWriter`\n* In `src/script/sign.h`: `MutableTransactionSignatureCreator` (#19426).\n* In `src/script/interpreter.h`: `GenericTransactionSignatureChecker",https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-652708587,652708587,
jonatack,2020-07-04 22:48:07,"Upgraded to Clang 11 and now see the -Wdangling warning mentioned in the PR description.\n```\nwallet/rpcwallet.cpp:42:22: warning: temporary whose address is used as value of local variable\n'a_bad_vec' will be destroyed at the end of the full-expression [-Wdangling]\nSpan<const int> a_bad_vec(std::vector<int>{1,2,3});\n                     ^~~~~~~~~~~~~~~~~~~~~~~\n1 warning generated.\n``",https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-653820241,653820241,
sipa,2020-07-08 17:46:12,ACK e3e7446305329ce96e9cf5f5161658eb2e1ea888,https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-655663351,655663351,
sipa,2020-07-08 17:46:33,"Sorry, I misclicked.",https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-655663535,655663535,
sipa,2020-07-14 19:34:35,"Mostly a reminder for myself: `WithParams`, `ParamsStream`, and `ParamsWrapper` in https://github.com/bitcoin/bitcoin/pull/19503 could also use `LIFETIMEBOUND`.",https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-658372256,658372256,
sipa,2020-07-30 21:04:18,Anyone else feel like reviewing this?,https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-666698565,666698565,
JeremyRubin,2020-07-30 23:29:22,"I'm curious how this plays with c++17, if/when we switch to std::span will we be able to keep the annotation somehow?",https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-666772359,666772359,
sipa,2020-07-30 23:31:37,"@JeremyRubin We can keep annotations on our own functions, but at least MakeSpan won't be needed anymore. On `std::span` we can't put our own annotations of course, but presumably the stdlib that ships with c++20 supporting clang will have this annotation built-in for its span type.\n\n(span is c++20, not c++17)",https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-666773110,666773110,
JeremyRubin,2020-07-30 23:32:37,ok can revisit in 10 years ;),https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-666773414,666773414,
ajtowns,2020-09-22 14:33:43,ACK e3e7446305329ce96e9cf5f5161658eb2e1ea888 (drive by; only a quick skim of code and some basic sanity checks),https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-696762043,696762043,
MarcoFalke,2020-11-25 14:18:08,"review ACK e3e7446305329ce96e9cf5f5161658eb2e1ea888 ðŸ”—\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nreview ACK e3e7446305329ce96e9cf5f5161658eb2e1ea888 ðŸ”—\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi3Mgv+Lgqd8NfB61HB1uzfd9S9SLQ0uPmWfMMNwBxu",https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-733734185,733734185,
sipa,2020-06-26 18:43:32,Nit: `declval<const V&>`. Not that I expect size() to differ between const and non-const objects...,https://github.com/bitcoin/bitcoin/pull/19387#discussion_r446350929,446350929,src/span.h
theuni,2020-06-29 17:55:38,"Fixed, thanks.",https://github.com/bitcoin/bitcoin/pull/19387#discussion_r447150654,447150654,src/span.h
MarcoFalke,2020-07-01 20:14:24,"```suggestion\n#define ATTR_LIFETIMEBOUND [[clang::lifetimebound]]\n```\n\nCan this be named a bit more generic, so that it can be used in other places such as #19426 ?",https://github.com/bitcoin/bitcoin/pull/19387#discussion_r448592690,448592690,src/span.h
theuni,2020-07-07 18:25:45,"I namespaced it to avoid colliding with a more general define. As ```span.h``` is designed to be an abstraction, I'd really prefer to keep it an island and not require that it include another header.\n\nSince @sipa was quick to point out a few places where this could already be useful, how about going with @practicalswift's [idea](https://github.com/bitcoin/bitcoin/pull/19387#issuecomment-650752",https://github.com/bitcoin/bitcoin/pull/19387#discussion_r451060526,451060526,src/span.h
sipa,2020-07-07 19:55:06,@theuni Not sure how to weigh code duplication vs. a dependency on attributes.h. I'm fine with either.,https://github.com/bitcoin/bitcoin/pull/19387#discussion_r451107215,451107215,src/span.h
jonatack,2020-07-09 10:45:01,"Build warning (in clang 11.0, but not gcc 9.3)\n```\nIn file included from validation.cpp:6:\nIn file included from ./validation.h:23:\nIn file included from ./txdb.h:10:\nIn file included from ./dbwrapper.h:12:\nIn file included from ./util/system.h:17:\n./attributes.h:30:7: warning: extra tokens at end of #endif directive [-Wextra-tokens]\n#endif#if defined(__clang__)\n      ^\n      /",https://github.com/bitcoin/bitcoin/pull/19387#discussion_r452128751,452128751,src/attributes.h
theuni,2020-07-09 16:44:43,"I don't understand what this is complaining about. Looks like some subtle whitespace thing, but it's all fine as far as I can tell. Why wouldn't it warn about the block above as well?",https://github.com/bitcoin/bitcoin/pull/19387#discussion_r452352278,452352278,src/attributes.h
jonatack,2020-07-09 16:47:58,Same. Maybe that version of clang is buggy if no one else got it.,https://github.com/bitcoin/bitcoin/pull/19387#discussion_r452354258,452354258,src/attributes.h
theuni,2020-07-09 16:59:19,"I can't hit this with clang 10.\n\nDoes it spew a million warnings for our includes? That would make sense, at least. But if this is the only one there must be a reason.\n\nIf this is a real clang bug, feel free to bisect and report upstream since you're building from git, so we don't hit this when 11 is released :)",https://github.com/bitcoin/bitcoin/pull/19387#discussion_r452360910,452360910,src/attributes.h
jonatack,2020-07-09 17:38:58,"Installed the new clang nightly updates to this version, built, and the warning is gone. (Yay!)\n```\n$ clang --version\nDebian clang version 11.0.0-++20200709111134+dc4a6f5db4f-1~exp1~20200709091753.3347\n\n$ uname -a\nLinux 5.7.0-1-amd64 #1 SMP Debian 5.7.6-1 (2020-06-24) x86_64 GNU/Linux\n```",https://github.com/bitcoin/bitcoin/pull/19387#discussion_r452383431,452383431,src/attributes.h
