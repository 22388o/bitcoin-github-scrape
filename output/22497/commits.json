[
  {
    "sha": "d4b67c8ebc2bb7488bcaaccc3a801cdef1cf1678",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNGI2N2M4ZWJjMmJiNzQ4OGJjYWFjY2MzYTgwMWNkZWYxY2YxNjc4",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-07-19T12:13:35Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-07-19T12:33:21Z"
      },
      "message": "scripted-diff: remove ResetI2PPorts() (revert e0a2b390c14)\n\n`CAddrMan::ResetI2PPorts()` was temporary. Remove it:\n* it has partially achieved its goal: probably ran on about half of the\n  I2P nodes\n* it is hackish, deemed risky and two bugs where found in it\n  https://github.com/bitcoin/bitcoin/issues/22467\n  https://github.com/bitcoin/bitcoin/issues/22470\n\n-BEGIN VERIFY SCRIPT-\ngit show e0a2b390c144e123e2fc8a289fdff36815476964 |git apply -R\n-END VERIFY SCRIPT-\n\nFixes https://github.com/bitcoin/bitcoin/issues/22467\nFixes https://github.com/bitcoin/bitcoin/issues/22470",
      "tree": {
        "sha": "1f2609c8d00e6c2bc36bb6dcacf85a8d16b01e31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f2609c8d00e6c2bc36bb6dcacf85a8d16b01e31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4b67c8ebc2bb7488bcaaccc3a801cdef1cf1678",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmD1cTUACgkQVN8G9ktV\ny796yB/9HQQ4Wwc8CumAFgkaMYZnOjVSIvY3Zs0EAqctB4He4Cc1CmaiL1UIjToz\nroGrCvgCyNR2XGt4CFl2/nqu2pSB65wh0O/odoKOe9mTy/9QirPHbLPimJm4CPLI\nEmMDxHHX6Arv92lnYI592uN83dAAA/WCOlpomVaY9a/IUg6Qrfbcvrwe5NeQrJxq\nkaN7argHZI1IVbyDHBuQfWdIngbYtQ/5u8a+mjhC0AEr4m4AeaOuEOYgPJ/DNfhk\nS9urnEGGvvFqjrhaUMYMVpRvaZq6VMM1zOuTd4PHLaR2jCEc+Mh+cpr2Y9LSPT7P\njKHL2WZ73KVrafJSmi8jRE4glDALY1PFyKLXTr/eji4hs6bY9jqgPovc1PsuIfTS\nXjQ8jLTjc12uXZFUYOXDB6/Vl2C/J446hN1ubhDrHsFxGCIF+D630xIQurfcO0s3\nk2jcr8fc7WRj+TZM0gIgBn5wgzLXemwAbVk7HqPcggydipgtrtwbJfh5moWWFciX\nU+ijsKPcdJBv11Fbbf7Ah1+WszmOOUG3ZuwYdvcpT/BAEIaNPFbQTCVUmzPyeOUw\n/ph4E5LsZrUrdIScjo+0WlwRmqEbrivMrYCkYMZjZRZ7a17mTcIXQ8Qv6+qYpt0Z\nURj0Ua+F79I+wwK8f/8/LjOmZs4dgENOvU638etZhm21II8pS1reSTLAsVr9ZYx7\nG/MFlSobCvh2r7ajAdjFpd3tJXLhH3QCI6rb6EIOv5VwLNtcv6NBemmqxd04hSTz\nQ10OO5aLMCsFUaJqsto1lAkS8cSFU8GpQFE2zXmyVAKAobsOL4iDzfQfEs5fi4Qn\nFu20GvBTBlnXQ/ml0+N7vsuHHbXtkuZoF+A78WfP39NlSGULoI5ORKKw/L/544UV\nUVmBSO+sxs980VRBjzua+HFl2CV5VriY11pDv3Jji4/KB6+9of2YWNFmXnVAssUC\n48IGcE8gkYkQIS57BWHDksGPnMVMJhN0y97eAQgqxiOWZSGFy+apeXPjnzabRbuu\ngxsCG/vlVlIh0LPkiKI3lwE+HGxL7GxY2GW0kcL1UyuaR0EHOrDkZ3T578+lXrzG\necdrIdivWu4SwG74uAlkcPdJ45DTzzo8SPZC83AIsNeHCHN8tg0XH81sCjS5zdk/\n/3+AenThHWvc8okh5DN3FBZ1wiAK+1z2eLCtZV0pknGOBVASa4cJlNvc4r3VJWUO\n16GpInilYav+aUFQu9+J5SB7y4bu8cwx4Jq9boT5J++bD7xQh3HTOGc19QSSO+Xe\neBkkhV0HtbWWBD57q1JCGGaBSpYk7Bfvm7n858pP0m2XqqMh5jjEP4ly0+0UTTud\nQ6APcHmlgs/enKBAsWr5nB4XTA89bQ==\n=sDE6\n-----END PGP SIGNATURE-----",
        "payload": "tree 1f2609c8d00e6c2bc36bb6dcacf85a8d16b01e31\nparent d3474b8df2f973e9b9142c0b64505a8a78bcb292\nauthor Vasil Dimov <vd@FreeBSD.org> 1626696815 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1626698001 +0200\n\nscripted-diff: remove ResetI2PPorts() (revert e0a2b390c14)\n\n`CAddrMan::ResetI2PPorts()` was temporary. Remove it:\n* it has partially achieved its goal: probably ran on about half of the\n  I2P nodes\n* it is hackish, deemed risky and two bugs where found in it\n  https://github.com/bitcoin/bitcoin/issues/22467\n  https://github.com/bitcoin/bitcoin/issues/22470\n\n-BEGIN VERIFY SCRIPT-\ngit show e0a2b390c144e123e2fc8a289fdff36815476964 |git apply -R\n-END VERIFY SCRIPT-\n\nFixes https://github.com/bitcoin/bitcoin/issues/22467\nFixes https://github.com/bitcoin/bitcoin/issues/22470\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4b67c8ebc2bb7488bcaaccc3a801cdef1cf1678",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4b67c8ebc2bb7488bcaaccc3a801cdef1cf1678",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4b67c8ebc2bb7488bcaaccc3a801cdef1cf1678/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3474b8df2f973e9b9142c0b64505a8a78bcb292",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3474b8df2f973e9b9142c0b64505a8a78bcb292",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3474b8df2f973e9b9142c0b64505a8a78bcb292"
      }
    ],
    "stats": {
      "total": 225,
      "additions": 0,
      "deletions": 225
    },
    "files": [
      {
        "sha": "8192b4eba666c6d20eff9de1ce1f1ffd0dd4b0ff",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 98,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b67c8ebc2bb7488bcaaccc3a801cdef1cf1678/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b67c8ebc2bb7488bcaaccc3a801cdef1cf1678/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=d4b67c8ebc2bb7488bcaaccc3a801cdef1cf1678",
        "patch": "@@ -6,7 +6,6 @@\n #include <addrman.h>\n \n #include <hash.h>\n-#include <i2p.h>\n #include <logging.h>\n #include <netaddress.h>\n #include <serialize.h>\n@@ -732,100 +731,3 @@ std::vector<bool> CAddrMan::DecodeAsmap(fs::path path)\n     }\n     return bits;\n }\n-\n-void CAddrMan::ResetI2PPorts()\n-{\n-    for (int bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; ++bucket) {\n-        for (int i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n-            const auto id = vvNew[bucket][i];\n-            if (id == -1) {\n-                continue;\n-            }\n-            auto it = mapInfo.find(id);\n-            if (it == mapInfo.end()) {\n-                return;\n-            }\n-            auto& addr_info = it->second;\n-            if (!addr_info.IsI2P() || addr_info.GetPort() == I2P_SAM31_PORT) {\n-                continue;\n-            }\n-\n-            auto addr_info_newport = addr_info;\n-            // The below changes addr_info_newport.GetKey(), which is used in finding a\n-            // bucket and a position within that bucket. So a re-bucketing may be necessary.\n-            addr_info_newport.port = I2P_SAM31_PORT;\n-\n-            // Reposition entries of vvNew within the same bucket because we don't know the source\n-            // address which led to the decision to store the entry in vvNew[bucket] so we can't\n-            // re-evaluate that decision, but even if we could, CAddrInfo::GetNewBucket() does not\n-            // use CAddrInfo::GetKey() so it would end up in the same bucket as before the port\n-            // change.\n-            const auto i_target = addr_info_newport.GetBucketPosition(nKey, true, bucket);\n-\n-            if (i_target == i) { // No need to re-position.\n-                addr_info = addr_info_newport;\n-                continue;\n-            }\n-\n-            // Reposition from i to i_target, removing the entry from i_target (if any).\n-            ClearNew(bucket, i_target);\n-            vvNew[bucket][i_target] = id;\n-            vvNew[bucket][i] = -1;\n-            addr_info = addr_info_newport;\n-        }\n-    }\n-\n-    for (int bucket = 0; bucket < ADDRMAN_TRIED_BUCKET_COUNT; ++bucket) {\n-        for (int i = 0; i < ADDRMAN_BUCKET_SIZE; ++i) {\n-            const auto id = vvTried[bucket][i];\n-            if (id == -1) {\n-                continue;\n-            }\n-            auto it = mapInfo.find(id);\n-            if (it == mapInfo.end()) {\n-                return;\n-            }\n-            auto& addr_info = it->second;\n-            if (!addr_info.IsI2P() || addr_info.GetPort() == I2P_SAM31_PORT) {\n-                continue;\n-            }\n-\n-            auto addr_info_newport = addr_info;\n-            // The below changes addr_info_newport.GetKey(), which is used in finding a\n-            // bucket and a position within that bucket. So a re-bucketing may be necessary.\n-            addr_info_newport.port = I2P_SAM31_PORT;\n-\n-            const auto bucket_target = addr_info_newport.GetTriedBucket(nKey, m_asmap);\n-            const auto i_target = addr_info_newport.GetBucketPosition(nKey, false, bucket_target);\n-\n-            if (bucket_target == bucket && i_target == i) { // No need to re-position.\n-                addr_info = addr_info_newport;\n-                continue;\n-            }\n-\n-            // Reposition from (bucket, i) to (bucket_target, i_target). If the latter is\n-            // occupied, then move the entry from there to vvNew.\n-\n-            const auto old_target_id = vvTried[bucket_target][i_target];\n-            if (old_target_id != -1) {\n-                CAddrInfo& old_target_info = mapInfo[old_target_id];\n-\n-                old_target_info.fInTried = false;\n-                vvTried[bucket_target][i_target] = -1;\n-                --nTried;\n-\n-                const auto new_bucket = old_target_info.GetNewBucket(nKey, m_asmap);\n-                const auto new_bucket_i = old_target_info.GetBucketPosition(nKey, true, new_bucket);\n-                ClearNew(new_bucket, new_bucket_i);\n-\n-                old_target_info.nRefCount = 1;\n-                vvNew[new_bucket][new_bucket_i] = old_target_id;\n-                ++nNew;\n-            }\n-\n-            vvTried[bucket_target][i_target] = id;\n-            vvTried[bucket][i] = -1;\n-            addr_info = addr_info_newport;\n-        }\n-    }\n-}"
      },
      {
        "sha": "c2f425f2fa8f343eee138e2208e378005c138159",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b67c8ebc2bb7488bcaaccc3a801cdef1cf1678/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b67c8ebc2bb7488bcaaccc3a801cdef1cf1678/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=d4b67c8ebc2bb7488bcaaccc3a801cdef1cf1678",
        "patch": "@@ -452,8 +452,6 @@ class CAddrMan\n \n         RemoveInvalid();\n \n-        ResetI2PPorts();\n-\n         Check();\n     }\n \n@@ -769,14 +767,6 @@ class CAddrMan\n     //! Remove invalid addresses.\n     void RemoveInvalid() EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n-    /**\n-     * Reset the ports of I2P peers to 0.\n-     * This is needed as a temporary measure because now we enforce port 0 and\n-     * only connect to I2P hosts if the port is 0, but in the early days some\n-     * I2P addresses with port 8333 were rumoured and persisted into addrmans.\n-     */\n-    void ResetI2PPorts() EXCLUSIVE_LOCKS_REQUIRED(cs);\n-\n     friend class CAddrManTest;\n };\n "
      },
      {
        "sha": "1103292c1a8738e6d111d8fc49ea8c840498de75",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 117,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b67c8ebc2bb7488bcaaccc3a801cdef1cf1678/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b67c8ebc2bb7488bcaaccc3a801cdef1cf1678/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=d4b67c8ebc2bb7488bcaaccc3a801cdef1cf1678",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #include <addrman.h>\n-#include <i2p.h>\n #include <test/data/asmap.raw.h>\n #include <test/util/setup_common.h>\n #include <util/asmap.h>\n@@ -967,121 +966,5 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n }\n \n-BOOST_AUTO_TEST_CASE(reset_i2p_ports)\n-{\n-    CAddrManTest addrman1;\n-    CAddrManTest addrman2;\n-    const uint32_t good_time{static_cast<uint32_t>(GetAdjustedTime())};\n-    constexpr uint16_t port = 8333;\n-\n-    // Has its port changed, will be re-positioned within the same bucket in vvNew.\n-    const CAddress i2p_new1{\n-        ResolveService(\"72l3ucjkuscrbiiepoehuwqgknyzgo7zuix5ty4puwrkyhtmnsga.b32.i2p\", port),\n-        NODE_NONE,\n-        good_time};\n-\n-    // Has its port changed, will not be re-positioned in vvNew because ports 0 and 10075 result in\n-    // the same bucket position.\n-    const CAddress i2p_new2{\n-        ResolveService(\"gehtac45oaghz54ypyopim64mql7oad2bqclla74l6tfeolzmodq.b32.i2p\", 10075),\n-        NODE_NONE,\n-        good_time};\n-\n-    // Remains unchanged, port is already as it should be.\n-    const CAddress i2p_new3{\n-        ResolveService(\"c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p\",\n-                       I2P_SAM31_PORT),\n-        NODE_NONE,\n-        good_time};\n-\n-    // Has its port changed, re-positioning in vvNew will cause i2p_new3 to be evicted.\n-    const CAddress i2p_new4{\n-        ResolveService(\"c4cbbkn46qxftwja53pxiykntegfyfjqtnzbm6iv6r5mungmqgmq.b32.i2p\", port),\n-        NODE_NONE,\n-        good_time};\n-\n-    // Remains unchanged.\n-    const CAddress ipv4_new{ResolveService(\"1.2.3.4\", port), NODE_NONE, good_time};\n-\n-    // Has its port changed, will be re-positioned in vvTried.\n-    const CAddress i2p_tried1{\n-        ResolveService(\"h3r6bkn46qxftwja53pxiykntegfyfjqtnzbm6iv6r5mungmqgmq.b32.i2p\", port),\n-        NODE_NONE,\n-        good_time};\n-\n-    // Has its port changed, will not be re-positioned in vvTried because ports 0 and 10537\n-    // result in the same position (bucket, i).\n-    const CAddress i2p_tried2{\n-        ResolveService(\"pjs7or2ctvteeo5tu4bwyrtydeuhqhvdprtujn4daxr75jpebjxa.b32.i2p\", 10537),\n-        NODE_NONE,\n-        good_time};\n-\n-    // Remains unchanged, port is already as it should be.\n-    const CAddress i2p_tried3{\n-        ResolveService(\"hnbbyjpxx54623l555sta7pocy3se4sdgmuebi5k6reesz5rjp6q.b32.i2p\",\n-                       I2P_SAM31_PORT),\n-        NODE_NONE,\n-        good_time};\n-\n-    // Has its port changed, re-positioning in vvTried will cause i2p_tried3 to be moved to vvNew.\n-    const CAddress i2p_tried4{\n-        ResolveService(\"hna37nqr3ahkqv62cuqfwgtneekvvpnuc4i4f6yo7tpoqjswvcwa.b32.i2p\", port),\n-        NODE_NONE,\n-        good_time};\n-\n-    // Remains unchanged.\n-    const CAddress ipv4_tried{ResolveService(\"2.3.4.5\", port), NODE_NONE, good_time};\n-\n-    const CNetAddr source;\n-\n-    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n-\n-    addrman1.Add(i2p_new1, source);\n-    addrman1.Add(i2p_new2, source);\n-    addrman1.Add(i2p_new3, source);\n-    addrman1.Add(i2p_new4, source);\n-    addrman1.Add(ipv4_new, source);\n-\n-    addrman1.Add(i2p_tried1, source);\n-    addrman1.Good(i2p_tried1);\n-    addrman1.Add(i2p_tried2, source);\n-    addrman1.Good(i2p_tried2);\n-    addrman1.Add(i2p_tried3, source);\n-    addrman1.Good(i2p_tried3);\n-    addrman1.Add(i2p_tried4, source);\n-    addrman1.Good(i2p_tried4);\n-    addrman1.Add(ipv4_tried, source);\n-    addrman1.Good(ipv4_tried);\n-\n-    stream << addrman1;\n-    stream >> addrman2;\n-\n-    const size_t max_addresses{0};\n-    const size_t max_pct{0};\n-\n-    auto addresses = addrman2.GetAddr(max_addresses, max_pct, NET_I2P);\n-    BOOST_REQUIRE_EQUAL(addresses.size(), 7UL);\n-    std::sort(addresses.begin(), addresses.end()); // Just some deterministic order.\n-    BOOST_CHECK_EQUAL(addresses[0].ToStringIP(), i2p_new4.ToStringIP());\n-    BOOST_CHECK_EQUAL(addresses[0].GetPort(), I2P_SAM31_PORT);\n-    BOOST_CHECK_EQUAL(addresses[1].ToStringIP(), i2p_new2.ToStringIP());\n-    BOOST_CHECK_EQUAL(addresses[1].GetPort(), I2P_SAM31_PORT);\n-    BOOST_CHECK_EQUAL(addresses[2].ToStringIP(), i2p_tried4.ToStringIP());\n-    BOOST_CHECK_EQUAL(addresses[2].GetPort(), I2P_SAM31_PORT);\n-    BOOST_CHECK_EQUAL(addresses[3].ToStringIP(), i2p_tried3.ToStringIP());\n-    BOOST_CHECK_EQUAL(addresses[3].GetPort(), I2P_SAM31_PORT);\n-    BOOST_CHECK_EQUAL(addresses[4].ToStringIP(), i2p_tried1.ToStringIP());\n-    BOOST_CHECK_EQUAL(addresses[4].GetPort(), I2P_SAM31_PORT);\n-    BOOST_CHECK_EQUAL(addresses[5].ToStringIP(), i2p_tried2.ToStringIP());\n-    BOOST_CHECK_EQUAL(addresses[5].GetPort(), I2P_SAM31_PORT);\n-    BOOST_CHECK_EQUAL(addresses[6].ToStringIP(), i2p_new1.ToStringIP());\n-    BOOST_CHECK_EQUAL(addresses[6].GetPort(), I2P_SAM31_PORT);\n-\n-    addresses = addrman2.GetAddr(max_addresses, max_pct, NET_IPV4);\n-    BOOST_REQUIRE_EQUAL(addresses.size(), 2UL);\n-    std::sort(addresses.begin(), addresses.end()); // Just some deterministic order.\n-    BOOST_CHECK_EQUAL(addresses[0].ToStringIPPort(), ipv4_new.ToStringIPPort());\n-    BOOST_CHECK_EQUAL(addresses[1].ToStringIPPort(), ipv4_tried.ToStringIPPort());\n-}\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]