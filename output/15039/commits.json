[
  {
    "sha": "453803adc9325b83fc0532a8328d455e8bdf4de6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTM4MDNhZGM5MzI1YjgzZmMwNTMyYTgzMjhkNDU1ZThiZGY0ZGU2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-26T20:25:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-26T23:25:52Z"
      },
      "message": "[test] wallet_txn_clone: Correctly clone txin sequence",
      "tree": {
        "sha": "333856e5659010b280c6ed0ba7d9980e8134a159",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/333856e5659010b280c6ed0ba7d9980e8134a159"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/453803adc9325b83fc0532a8328d455e8bdf4de6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/453803adc9325b83fc0532a8328d455e8bdf4de6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/453803adc9325b83fc0532a8328d455e8bdf4de6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/453803adc9325b83fc0532a8328d455e8bdf4de6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18857b4c4034af54e7ad3cbd78ff6f87f4f22567",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18857b4c4034af54e7ad3cbd78ff6f87f4f22567",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18857b4c4034af54e7ad3cbd78ff6f87f4f22567"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1c2e0a9cb74826110c9ce4eea4b5787e91935848",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/453803adc9325b83fc0532a8328d455e8bdf4de6/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/453803adc9325b83fc0532a8328d455e8bdf4de6/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=453803adc9325b83fc0532a8328d455e8bdf4de6",
        "patch": "@@ -65,7 +65,7 @@ def run_test(self):\n \n         # Construct a clone of tx1, to be malleated\n         rawtx1 = self.nodes[0].getrawtransaction(txid1, 1)\n-        clone_inputs = [{\"txid\": rawtx1[\"vin\"][0][\"txid\"], \"vout\": rawtx1[\"vin\"][0][\"vout\"]}]\n+        clone_inputs = [{\"txid\": rawtx1[\"vin\"][0][\"txid\"], \"vout\": rawtx1[\"vin\"][0][\"vout\"], \"sequence\": rawtx1[\"vin\"][0][\"sequence\"]}]\n         clone_outputs = {rawtx1[\"vout\"][0][\"scriptPubKey\"][\"addresses\"][0]: rawtx1[\"vout\"][0][\"value\"],\n                          rawtx1[\"vout\"][1][\"scriptPubKey\"][\"addresses\"][0]: rawtx1[\"vout\"][1][\"value\"]}\n         clone_locktime = rawtx1[\"locktime\"]"
      }
    ]
  },
  {
    "sha": "fa48baf23eb2ec5e9b71e3e07c24432fc1fed39c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQ4YmFmMjNlYjJlYzVlOWI3MWUzZTA3YzI0NDMyZmMxZmVkMzlj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-23T18:08:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-27T12:03:10Z"
      },
      "message": "wallet: Avoid leaking locktime fingerprint when anti-fee-sniping",
      "tree": {
        "sha": "69d8bc2a6adbef49a486b9f7ea62a09278ec7450",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/69d8bc2a6adbef49a486b9f7ea62a09278ec7450"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa48baf23eb2ec5e9b71e3e07c24432fc1fed39c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcJL9+AAoJEM4rdWl+aaVIizQL+wROL7DueEOY5b0L6OfOkOGe\nKiLchVil93yoiYRwrbkmI5sdB6wvE7occ8rSdRC8pBuq4F/+eVQau8ETW6gUXZLL\nxoeUMgd+ynoA74O5dJG7M5MA/bgZqJx/8+7tDVBPpt1WDm0h0Ia00MgJPXLEntik\nCKwc3AEoor3GqP4rcDfUE0W5dFhTzuYvF60xoXOX1cq/+4wsIb59LARenfnUkexQ\neucNXyrxuZdfpGKZMqHL5dPfM61MrYc7B5LrasQtODLYJq9QwBOqc9oYOJN8nQm0\n3PelWn5V07JnszaKIvSEIw0u29TYPWXE629a2mu+KaUKWaLBpF+htEzLLHqWm57k\n74ZBBEY/hRS2QFxbSrCyrK3PfY9b1OZHEw45dvcJY8kvsY+rt7MBdLX2dc0hJB1K\nlo2+FDYg0hu9mCcb/XYgn63ltlxWzRqd7kW2DPC6rRSOCXD7yqrJiVjXZnETVeIw\nW6Mj1ZqyTan5hCkuKNZogg9EcCOHmJpdX2lzXpQIGQ==\n=EAxB\n-----END PGP SIGNATURE-----",
        "payload": "tree 69d8bc2a6adbef49a486b9f7ea62a09278ec7450\nparent 453803adc9325b83fc0532a8328d455e8bdf4de6\nauthor MarcoFalke <falke.marco@gmail.com> 1545588537 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1545912190 +0100\n\nwallet: Avoid leaking locktime fingerprint when anti-fee-sniping\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa48baf23eb2ec5e9b71e3e07c24432fc1fed39c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa48baf23eb2ec5e9b71e3e07c24432fc1fed39c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa48baf23eb2ec5e9b71e3e07c24432fc1fed39c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "453803adc9325b83fc0532a8328d455e8bdf4de6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/453803adc9325b83fc0532a8328d455e8bdf4de6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/453803adc9325b83fc0532a8328d455e8bdf4de6"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 96,
      "deletions": 30
    },
    "files": [
      {
        "sha": "536429aeac98198a498f73eaee5ea1340b6a1f1f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 30,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa48baf23eb2ec5e9b71e3e07c24432fc1fed39c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa48baf23eb2ec5e9b71e3e07c24432fc1fed39c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fa48baf23eb2ec5e9b71e3e07c24432fc1fed39c",
        "patch": "@@ -2516,6 +2516,65 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n     return true;\n }\n \n+static bool IsCurrentForAntiFeeSniping(interfaces::Chain::Lock& locked_chain)\n+{\n+    if (IsInitialBlockDownload()) {\n+        return false;\n+    }\n+    constexpr int64_t MAX_ANTI_FEE_SNIPING_TIP_AGE = 8 * 60 * 60; // in seconds\n+    if (chainActive.Tip()->GetBlockTime() < (GetTime() - MAX_ANTI_FEE_SNIPING_TIP_AGE)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+/**\n+ * Return a height-based locktime for new transactions (uses the height of the\n+ * current chain tip unless we are not synced with the current chain\n+ */\n+static uint32_t GetLocktimeForNewTransaction(interfaces::Chain::Lock& locked_chain)\n+{\n+    uint32_t locktime;\n+    // Discourage fee sniping.\n+    //\n+    // For a large miner the value of the transactions in the best block and\n+    // the mempool can exceed the cost of deliberately attempting to mine two\n+    // blocks to orphan the current best block. By setting nLockTime such that\n+    // only the next block can include the transaction, we discourage this\n+    // practice as the height restricted and limited blocksize gives miners\n+    // considering fee sniping fewer options for pulling off this attack.\n+    //\n+    // A simple way to think about this is from the wallet's point of view we\n+    // always want the blockchain to move forward. By setting nLockTime this\n+    // way we're basically making the statement that we only want this\n+    // transaction to appear in the next block; we don't want to potentially\n+    // encourage reorgs by allowing transactions to appear at lower heights\n+    // than the next block in forks of the best chain.\n+    //\n+    // Of course, the subsidy is high enough, and transaction volume low\n+    // enough, that fee sniping isn't a problem yet, but by implementing a fix\n+    // now we ensure code won't be written that makes assumptions about\n+    // nLockTime that preclude a fix later.\n+    if (IsCurrentForAntiFeeSniping(locked_chain)) {\n+        locktime = chainActive.Height();\n+\n+        // Secondly occasionally randomly pick a nLockTime even further back, so\n+        // that transactions that are delayed after signing for whatever reason,\n+        // e.g. high-latency mix networks and some CoinJoin implementations, have\n+        // better privacy.\n+        if (GetRandInt(10) == 0)\n+            locktime = std::max(0, (int)locktime - GetRandInt(100));\n+    } else {\n+        // If our chain is lagging behind, we can't discourage fee sniping nor help\n+        // the privacy of high-latency transactions. To avoid leaking a potentially\n+        // unique \"nLockTime fingerprint\", set nLockTime to a constant.\n+        locktime = 0;\n+    }\n+    assert(locktime <= (unsigned int)chainActive.Height());\n+    assert(locktime < LOCKTIME_THRESHOLD);\n+    return locktime;\n+}\n+\n OutputType CWallet::TransactionChangeType(OutputType change_type, const std::vector<CRecipient>& vecSend)\n {\n     // If -changetype is specified, always use that change type.\n@@ -2570,37 +2629,8 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n \n     CMutableTransaction txNew;\n \n-    // Discourage fee sniping.\n-    //\n-    // For a large miner the value of the transactions in the best block and\n-    // the mempool can exceed the cost of deliberately attempting to mine two\n-    // blocks to orphan the current best block. By setting nLockTime such that\n-    // only the next block can include the transaction, we discourage this\n-    // practice as the height restricted and limited blocksize gives miners\n-    // considering fee sniping fewer options for pulling off this attack.\n-    //\n-    // A simple way to think about this is from the wallet's point of view we\n-    // always want the blockchain to move forward. By setting nLockTime this\n-    // way we're basically making the statement that we only want this\n-    // transaction to appear in the next block; we don't want to potentially\n-    // encourage reorgs by allowing transactions to appear at lower heights\n-    // than the next block in forks of the best chain.\n-    //\n-    // Of course, the subsidy is high enough, and transaction volume low\n-    // enough, that fee sniping isn't a problem yet, but by implementing a fix\n-    // now we ensure code won't be written that makes assumptions about\n-    // nLockTime that preclude a fix later.\n-    txNew.nLockTime = chainActive.Height();\n-\n-    // Secondly occasionally randomly pick a nLockTime even further back, so\n-    // that transactions that are delayed after signing for whatever reason,\n-    // e.g. high-latency mix networks and some CoinJoin implementations, have\n-    // better privacy.\n-    if (GetRandInt(10) == 0)\n-        txNew.nLockTime = std::max(0, (int)txNew.nLockTime - GetRandInt(100));\n+    txNew.nLockTime = GetLocktimeForNewTransaction(locked_chain);\n \n-    assert(txNew.nLockTime <= (unsigned int)chainActive.Height());\n-    assert(txNew.nLockTime < LOCKTIME_THRESHOLD);\n     FeeCalculation feeCalc;\n     CAmount nFeeNeeded;\n     int nBytes;"
      },
      {
        "sha": "8c6f6706e76c30f74fbbbe59bdc273a0e14649aa",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa48baf23eb2ec5e9b71e3e07c24432fc1fed39c/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa48baf23eb2ec5e9b71e3e07c24432fc1fed39c/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=fa48baf23eb2ec5e9b71e3e07c24432fc1fed39c",
        "patch": "@@ -174,6 +174,7 @@\n     'wallet_fallbackfee.py',\n     'feature_minchainwork.py',\n     'rpc_getblockstats.py',\n+    'wallet_create_tx.py',\n     'p2p_fingerprint.py',\n     'feature_uacomment.py',\n     'wallet_coinbase_category.py',"
      },
      {
        "sha": "27dc0fb279c997b990ca4f7e8559666826245e6f",
        "filename": "test/functional/wallet_create_tx.py",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa48baf23eb2ec5e9b71e3e07c24432fc1fed39c/test/functional/wallet_create_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa48baf23eb2ec5e9b71e3e07c24432fc1fed39c/test/functional/wallet_create_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_create_tx.py?ref=fa48baf23eb2ec5e9b71e3e07c24432fc1fed39c",
        "patch": "@@ -0,0 +1,35 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+)\n+\n+\n+class CreateTxWalletTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info('Check that we have some (old) blocks and that anti-fee-sniping is disabled')\n+        assert_equal(self.nodes[0].getblockchaininfo()['blocks'], 200)\n+        txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n+        tx = self.nodes[0].decoderawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        assert_equal(tx['locktime'], 0)\n+\n+        self.log.info('Check that anti-fee-sniping is enabled when we mine a recent block')\n+        self.nodes[0].generate(1)\n+        txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n+        tx = self.nodes[0].decoderawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        assert 0 < tx['locktime'] <= 201\n+\n+\n+if __name__ == '__main__':\n+    CreateTxWalletTest().main()"
      }
    ]
  }
]