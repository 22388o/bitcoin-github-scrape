[
  {
    "sha": "81d2c312c346483cf644d94394e14a165c7950fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MWQyYzMxMmMzNDY0ODNjZjY0NGQ5NDM5NGUxNGExNjVjNzk1MGZi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-06-12T00:10:25Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-10-15T19:43:00Z"
      },
      "message": "Remove unnecessary cs_mains in denialofservice_tests\n\n9fdf05d70cac4a62d1aeeb4299e2c3a9a866f8af resolved some lock\ninversion warnings in denialofservice_tests, but left in a number\nof cs_main locks that are unnecessary (introducing lock inversion\nwarnings in future changes).",
      "tree": {
        "sha": "3dc8f7d66a607478b9fc6d291f94196690b12fce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3dc8f7d66a607478b9fc6d291f94196690b12fce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81d2c312c346483cf644d94394e14a165c7950fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81d2c312c346483cf644d94394e14a165c7950fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81d2c312c346483cf644d94394e14a165c7950fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81d2c312c346483cf644d94394e14a165c7950fb/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3af5b5c13f7334f1874f77c4d1e9052fc705e22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3af5b5c13f7334f1874f77c4d1e9052fc705e22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3af5b5c13f7334f1874f77c4d1e9052fc705e22"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "db29b7e961426db0df64437594b2a62f8937f0a7",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81d2c312c346483cf644d94394e14a165c7950fb/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81d2c312c346483cf644d94394e14a165c7950fb/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=81d2c312c346483cf644d94394e14a165c7950fb",
        "patch": "@@ -98,11 +98,11 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n \n     // Test starts here\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1)); // should result in getheaders\n     }\n     {\n-        LOCK2(cs_main, dummyNode1.cs_vSend);\n+        LOCK(dummyNode1.cs_vSend);\n         BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n         dummyNode1.vSendMsg.clear();\n     }\n@@ -111,17 +111,17 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     // Wait 21 minutes\n     SetMockTime(nStartTime+21*60);\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1)); // should result in getheaders\n     }\n     {\n-        LOCK2(cs_main, dummyNode1.cs_vSend);\n+        LOCK(dummyNode1.cs_vSend);\n         BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n     }\n     // Wait 3 more minutes\n     SetMockTime(nStartTime+24*60);\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1)); // should result in disconnect\n     }\n     BOOST_CHECK(dummyNode1.fDisconnect == true);\n@@ -235,7 +235,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n         Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n     }\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n     BOOST_CHECK(banman->IsBanned(addr1));\n@@ -252,7 +252,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n         Misbehaving(dummyNode2.GetId(), 50);\n     }\n     {\n-        LOCK2(cs_main, dummyNode2.cs_sendProcessing);\n+        LOCK(dummyNode2.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n     }\n     BOOST_CHECK(!banman->IsBanned(addr2)); // 2 not banned yet...\n@@ -262,7 +262,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n         Misbehaving(dummyNode2.GetId(), 50);\n     }\n     {\n-        LOCK2(cs_main, dummyNode2.cs_sendProcessing);\n+        LOCK(dummyNode2.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode2));\n     }\n     BOOST_CHECK(banman->IsBanned(addr2));\n@@ -291,7 +291,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n         Misbehaving(dummyNode1.GetId(), 100);\n     }\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n     BOOST_CHECK(!banman->IsBanned(addr1));\n@@ -300,7 +300,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n         Misbehaving(dummyNode1.GetId(), 10);\n     }\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n     BOOST_CHECK(!banman->IsBanned(addr1));\n@@ -309,7 +309,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n         Misbehaving(dummyNode1.GetId(), 1);\n     }\n     {\n-        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        LOCK(dummyNode1.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n     BOOST_CHECK(banman->IsBanned(addr1));\n@@ -341,7 +341,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n         Misbehaving(dummyNode.GetId(), 100);\n     }\n     {\n-        LOCK2(cs_main, dummyNode.cs_sendProcessing);\n+        LOCK(dummyNode.cs_sendProcessing);\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode));\n     }\n     BOOST_CHECK(banman->IsBanned(addr));"
      }
    ]
  },
  {
    "sha": "c98e4d39f0e03652ffdca2cba515ee59ea16935d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOThlNGQzOWYwZTAzNjUyZmZkY2EyY2JhNTE1ZWU1OWVhMTY5MzVk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-10-16T00:57:04Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-10-16T01:42:07Z"
      },
      "message": "Return the AcceptBlock CValidationState directly in ProcessNewBlock\n\nIn practice this means that CheckBlock+ContextualCheckBlock are\ncalled with a passed-in CValidationState before we move onto\nconnecting the best chain. This makes conceptual sense as these\ncalls represent the DoS checks on a block (ie PoW and malleability)\nwhich the caller almost certainly wants to know about right away\nand shouldn't have to wait on a callback for.\n\nFurther, as other validationinterface clients shouldn't care about\nsomeone submitting bogus malleated blocks to PNB, the BlockChecked\ncallback is no longer called in response to a malleated block (ie\nit really does now mean \"block has been checked as a part of\nconnecting it\").\n\nThis also makes it much, much easier to move the best chain\nactivation logic to a background thread as it implies that if PNB\nreturns with a IsValid() CValidationState we don't need to care\nabout trying to process (non-malleated) copies of the block from\nother peers.",
      "tree": {
        "sha": "a91dec663a7a9834955a35a2e5f79026abc4e0e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a91dec663a7a9834955a35a2e5f79026abc4e0e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c98e4d39f0e03652ffdca2cba515ee59ea16935d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c98e4d39f0e03652ffdca2cba515ee59ea16935d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c98e4d39f0e03652ffdca2cba515ee59ea16935d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c98e4d39f0e03652ffdca2cba515ee59ea16935d/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "81d2c312c346483cf644d94394e14a165c7950fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81d2c312c346483cf644d94394e14a165c7950fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/81d2c312c346483cf644d94394e14a165c7950fb"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 87,
      "deletions": 39
    },
    "files": [
      {
        "sha": "53f349dccd9dff0c95de0f2418430848abba6100",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 7,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c98e4d39f0e03652ffdca2cba515ee59ea16935d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c98e4d39f0e03652ffdca2cba515ee59ea16935d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c98e4d39f0e03652ffdca2cba515ee59ea16935d",
        "patch": "@@ -1228,7 +1228,7 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n  * Handle invalid block rejection and consequent peer banning, maintain which\n  * peers announce compact blocks.\n  */\n-void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationState& state) {\n+static void BlockChecked(const CBlock& block, const CValidationState& state, CConnman* connman) {\n     LOCK(cs_main);\n \n     const uint256 hash(block.GetHash());\n@@ -1257,6 +1257,10 @@ void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationSta\n         mapBlockSource.erase(it);\n }\n \n+void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationState& state) {\n+    ::BlockChecked(block, state, connman);\n+}\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // Messages\n@@ -2790,10 +2794,14 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n+            if (fNewBlock && dos_state.IsValid()) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n+                if (!dos_state.IsValid()) {\n+                    BlockChecked(*pblock, dos_state, connman);\n+                }\n                 LOCK(cs_main);\n                 mapBlockSource.erase(pblock->GetHash());\n             }\n@@ -2879,10 +2887,14 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // disk-space attacks), but this should be safe due to the\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n-            if (fNewBlock) {\n+            CValidationState dos_state;\n+            ProcessNewBlock(chainparams, pblock, dos_state, /*fForceProcessing=*/true, &fNewBlock);\n+            if (fNewBlock && dos_state.IsValid()) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n+                if (!dos_state.IsValid()) {\n+                    BlockChecked(*pblock, dos_state, connman);\n+                }\n                 LOCK(cs_main);\n                 mapBlockSource.erase(pblock->GetHash());\n             }\n@@ -2941,10 +2953,14 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         }\n         bool fNewBlock = false;\n-        ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n-        if (fNewBlock) {\n+        CValidationState dos_state;\n+        ProcessNewBlock(chainparams, pblock, dos_state, forceProcessing, &fNewBlock);\n+        if (fNewBlock && dos_state.IsValid()) {\n             pfrom->nLastBlockTime = GetTime();\n         } else {\n+            if (!dos_state.IsValid()) {\n+                BlockChecked(*pblock, dos_state, connman);\n+            }\n             LOCK(cs_main);\n             mapBlockSource.erase(pblock->GetHash());\n         }"
      },
      {
        "sha": "6f46b91fd8d8807d65133ec8251c2c65a1ab59d4",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c98e4d39f0e03652ffdca2cba515ee59ea16935d/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c98e4d39f0e03652ffdca2cba515ee59ea16935d/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=c98e4d39f0e03652ffdca2cba515ee59ea16935d",
        "patch": "@@ -132,7 +132,8 @@ static UniValue generateBlocks(const CScript& coinbase_script, int nGenerate, ui\n             continue;\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        if (!ProcessNewBlock(Params(), shared_pblock, true, nullptr))\n+        CValidationState state;\n+        if (!ProcessNewBlock(Params(), shared_pblock, state, true, nullptr) || !state.IsValid())\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n@@ -733,11 +734,15 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     bool new_block;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool accepted = ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n+    CValidationState dos_state;\n+    bool accepted = ProcessNewBlock(Params(), blockptr, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n     UnregisterValidationInterface(&sc);\n     if (!new_block && accepted) {\n         return \"duplicate\";\n     }\n+    if (!dos_state.IsValid()) {\n+        return BIP22ValidationResult(dos_state);\n+    }\n     if (!sc.found) {\n         return \"inconclusive\";\n     }"
      },
      {
        "sha": "c2f27d9dd0dd164f4a52dbeed0f382543681057b",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c98e4d39f0e03652ffdca2cba515ee59ea16935d/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c98e4d39f0e03652ffdca2cba515ee59ea16935d/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=c98e4d39f0e03652ffdca2cba515ee59ea16935d",
        "patch": "@@ -176,7 +176,9 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n     uint256 chainA_last_header = last_header;\n     for (size_t i = 0; i < 2; i++) {\n         const auto& block = chainA[i];\n-        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+        CValidationState dos_state;\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n+        BOOST_REQUIRE(dos_state.IsValid());\n \n         const CBlockIndex* block_index;\n         {\n@@ -192,7 +194,9 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n     uint256 chainB_last_header = last_header;\n     for (size_t i = 0; i < 3; i++) {\n         const auto& block = chainB[i];\n-        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+        CValidationState dos_state;\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n+        BOOST_REQUIRE(dos_state.IsValid());\n \n         const CBlockIndex* block_index;\n         {\n@@ -219,10 +223,12 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n     }\n \n     // Reorg back to chain A.\n-     for (size_t i = 2; i < 4; i++) {\n-         const auto& block = chainA[i];\n-        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n-     }\n+    for (size_t i = 2; i < 4; i++) {\n+        const auto& block = chainA[i];\n+        CValidationState dos_state;\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, dos_state, true, nullptr));\n+        BOOST_REQUIRE(dos_state.IsValid());\n+    }\n \n      // Check that chain A and B blocks can be retrieved.\n      chainA_last_header = last_header;"
      },
      {
        "sha": "04ba69b30207529197d1c94a9268d0953cb474d5",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c98e4d39f0e03652ffdca2cba515ee59ea16935d/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c98e4d39f0e03652ffdca2cba515ee59ea16935d/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=c98e4d39f0e03652ffdca2cba515ee59ea16935d",
        "patch": "@@ -7,6 +7,7 @@\n #include <consensus/consensus.h>\n #include <consensus/merkle.h>\n #include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n #include <miner.h>\n #include <policy/policy.h>\n #include <script/standard.h>\n@@ -247,7 +248,9 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n             pblock->nNonce = blockinfo[i].nonce;\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        BOOST_CHECK(ProcessNewBlock(chainparams, shared_pblock, true, nullptr));\n+        CValidationState dos_state;\n+        BOOST_CHECK(ProcessNewBlock(chainparams, shared_pblock, dos_state, true, nullptr));\n+        BOOST_CHECK(dos_state.IsValid());\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n "
      },
      {
        "sha": "3c8de13a1d9f4fb5aa669cad59814d958a230153",
        "filename": "src/test/setup_common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c98e4d39f0e03652ffdca2cba515ee59ea16935d/src/test/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c98e4d39f0e03652ffdca2cba515ee59ea16935d/src/test/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/setup_common.cpp?ref=c98e4d39f0e03652ffdca2cba515ee59ea16935d",
        "patch": "@@ -164,7 +164,8 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n-    ProcessNewBlock(chainparams, shared_pblock, true, nullptr);\n+    CValidationState dos_state;\n+    ProcessNewBlock(chainparams, shared_pblock, dos_state, true, nullptr);\n \n     CBlock result = block;\n     return result;"
      },
      {
        "sha": "ee473cf412968316592af10fc22ba0b415b4b7c2",
        "filename": "src/test/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c98e4d39f0e03652ffdca2cba515ee59ea16935d/src/test/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c98e4d39f0e03652ffdca2cba515ee59ea16935d/src/test/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util.cpp?ref=c98e4d39f0e03652ffdca2cba515ee59ea16935d",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <chainparams.h>\n #include <consensus/merkle.h>\n+#include <consensus/validation.h>\n #include <key_io.h>\n #include <miner.h>\n #include <outputtype.h>\n@@ -61,8 +62,10 @@ CTxIn MineBlock(const CScript& coinbase_scriptPubKey)\n         assert(block->nNonce);\n     }\n \n-    bool processed{ProcessNewBlock(Params(), block, true, nullptr)};\n+    CValidationState dos_state;\n+    bool processed{ProcessNewBlock(Params(), block, dos_state, true, nullptr)};\n     assert(processed);\n+    assert(dos_state.IsValid());\n \n     return CTxIn{block->vtx[0]->GetHash(), 0};\n }"
      },
      {
        "sha": "eb81e873edbc9cfe93931b0bf39fd4ccd576ddec",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c98e4d39f0e03652ffdca2cba515ee59ea16935d/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c98e4d39f0e03652ffdca2cba515ee59ea16935d/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=c98e4d39f0e03652ffdca2cba515ee59ea16935d",
        "patch": "@@ -159,7 +159,8 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK(ProcessNewBlockHeaders(headers, state, Params()));\n \n     // Connect the genesis block and drain any outstanding events\n-    BOOST_CHECK(ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), true, &ignored));\n+    CValidationState dos_state;\n+    BOOST_CHECK(ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), dos_state, true, &ignored));\n     SyncWithValidationInterfaceQueue();\n \n     // subscribe to events (this subscriber will validate event ordering)\n@@ -181,14 +182,17 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n             FastRandomContext insecure;\n             for (int i = 0; i < 1000; i++) {\n                 auto block = blocks[insecure.randrange(blocks.size() - 1)];\n-                ProcessNewBlock(Params(), block, true, &ignored);\n+                CValidationState dos_state;\n+                ProcessNewBlock(Params(), block, dos_state, true, &ignored);\n             }\n \n             // to make sure that eventually we process the full chain - do it here\n             for (auto block : blocks) {\n                 if (block->vtx.size() == 1) {\n-                    bool processed = ProcessNewBlock(Params(), block, true, &ignored);\n+                    CValidationState dos_state;\n+                    bool processed = ProcessNewBlock(Params(), block, dos_state, true, &ignored);\n                     assert(processed);\n+                    assert(dos_state.IsValid());\n                 }\n             }\n         });\n@@ -228,7 +232,8 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n {\n     bool ignored;\n     auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool {\n-        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+        CValidationState dos_state;\n+        return ProcessNewBlock(Params(), block, dos_state, /* fForceProcessing */ true, /* fNewBlock */ &ignored) && dos_state.IsValid();\n     };\n \n     // Process all mined blocks"
      },
      {
        "sha": "d4e76cb50602f943c2dbc73dc7fff1d4396ac0dc",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c98e4d39f0e03652ffdca2cba515ee59ea16935d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c98e4d39f0e03652ffdca2cba515ee59ea16935d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c98e4d39f0e03652ffdca2cba515ee59ea16935d",
        "patch": "@@ -3747,37 +3747,35 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, CValidationState& dos_state, bool fForceProcessing, bool *fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n \n     {\n         CBlockIndex *pindex = nullptr;\n         if (fNewBlock) *fNewBlock = false;\n-        CValidationState state;\n \n         // CheckBlock() does not support multi-threaded block validation because CBlock::fChecked can cause data race.\n         // Therefore, the following critical section must include the CheckBlock() call as well.\n         LOCK(cs_main);\n \n         // Ensure that CheckBlock() passes before calling AcceptBlock, as\n         // belt-and-suspenders.\n-        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+        bool ret = CheckBlock(*pblock, dos_state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = ::ChainstateActive().AcceptBlock(pblock, dos_state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n         if (!ret) {\n-            GetMainSignals().BlockChecked(*pblock, state);\n-            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(state));\n+            return error(\"%s: AcceptBlock FAILED (%s)\", __func__, FormatStateMessage(dos_state));\n         }\n     }\n \n     NotifyHeaderTip();\n \n-    CValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!::ChainstateActive().ActivateBestChain(state, chainparams, pblock))\n-        return error(\"%s: ActivateBestChain failed (%s)\", __func__, FormatStateMessage(state));\n+    CValidationState dummy_state; // Only used to report errors, not invalidity - ignore it\n+    if (!::ChainstateActive().ActivateBestChain(dummy_state, chainparams, pblock))\n+        return error(\"%s: ActivateBestChain failed (%s)\", __func__, FormatStateMessage(dummy_state));\n \n     return true;\n }"
      },
      {
        "sha": "e90b7245414e77231c39de0658c5d0d0d27bf355",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 19,
        "deletions": 8,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c98e4d39f0e03652ffdca2cba515ee59ea16935d/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c98e4d39f0e03652ffdca2cba515ee59ea16935d/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=c98e4d39f0e03652ffdca2cba515ee59ea16935d",
        "patch": "@@ -196,22 +196,33 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory mutation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked). There is, of course, no guarantee that any given block which\n+ * is not a part of the eventual best chain will ever be checked.\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If the block pblock is built on is in our header tree, and pblock is a\n+ * candidate for accepting to disk (either because it is a candidate for the\n+ * best chain soon, or fForceProcessing is set), but pblock has been mutated,\n+ * state is guaranteed to be some non-IsValid() state.\n  *\n- * May not be called in a\n- * validationinterface callback.\n+ * If fForceProcessing is set (or fNewBlock returns true), and state.IsValid(),\n+ * barring pruning and a desire to re-download a pruned block, there should\n+ * never be any reason to re-ProcessNewBlock any block with the same hash.\n+ *\n+ * May not be called in a validationinterface callback.\n  *\n  * @param[in]   pblock  The block we want to process.\n+ * @param[out]  state This may be set to an Error state if any error occurred processing them\n  * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n  * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n  * @returns     If the block was processed, independently of block validity\n  */\n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, CValidationState& state, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n \n /**\n  * Process incoming block headers."
      }
    ]
  },
  {
    "sha": "c16e139246f215965bb572da1a11382b4f61d957",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTZlMTM5MjQ2ZjIxNTk2NWJiNTcyZGExYTExMzgyYjRmNjFkOTU3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-10-16T00:57:13Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-10-16T01:43:25Z"
      },
      "message": "Use dos_state to check for malleation instead of CBlockIndex state",
      "tree": {
        "sha": "6e6a70dfc17a12d5e5bd7417161c41c62cf0ce3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e6a70dfc17a12d5e5bd7417161c41c62cf0ce3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c16e139246f215965bb572da1a11382b4f61d957",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c16e139246f215965bb572da1a11382b4f61d957",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c16e139246f215965bb572da1a11382b4f61d957",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c16e139246f215965bb572da1a11382b4f61d957/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c98e4d39f0e03652ffdca2cba515ee59ea16935d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c98e4d39f0e03652ffdca2cba515ee59ea16935d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c98e4d39f0e03652ffdca2cba515ee59ea16935d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9ad2855cb45fa987fe07330b15be9860ab2fa6fa",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c16e139246f215965bb572da1a11382b4f61d957/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c16e139246f215965bb572da1a11382b4f61d957/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c16e139246f215965bb572da1a11382b4f61d957",
        "patch": "@@ -2805,8 +2805,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 LOCK(cs_main);\n                 mapBlockSource.erase(pblock->GetHash());\n             }\n-            LOCK(cs_main); // hold cs_main for CBlockIndex::IsValid()\n-            if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n+            if (dos_state.IsValid()) {\n+                LOCK(cs_main);\n                 // Clear download state for this block, which is in\n                 // process from some other peer.  We do this after calling\n                 // ProcessNewBlock so that a malleated cmpctblock announcement"
      }
    ]
  },
  {
    "sha": "2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWMxMjFmMDlkOGY3MTE3ZmM5YThmODMwYTcyNDJmOWEzNjAyYjc4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-10-08T01:52:33Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-10-16T01:43:25Z"
      },
      "message": "Clarify comment in BlockChecked in net_processing a touch.",
      "tree": {
        "sha": "48f1800d029f0458f5644b2591bf8ac85ef15d0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48f1800d029f0458f5644b2591bf8ac85ef15d0b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ec121f09d8f7117fc9a8f830a7242f9a3602b78/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c16e139246f215965bb572da1a11382b4f61d957",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c16e139246f215965bb572da1a11382b4f61d957",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c16e139246f215965bb572da1a11382b4f61d957"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d36e916ef2d2cbe1489ff4da071c54af1762af9c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ec121f09d8f7117fc9a8f830a7242f9a3602b78/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ec121f09d8f7117fc9a8f830a7242f9a3602b78/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2ec121f09d8f7117fc9a8f830a7242f9a3602b78",
        "patch": "@@ -1227,6 +1227,9 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n /**\n  * Handle invalid block rejection and consequent peer banning, maintain which\n  * peers announce compact blocks.\n+ * Called both in case of cursory DoS checks failing (implying the peer is likely\n+ * sending us bogus data) and after full validation of the block fails (which may\n+ * be OK if it was sent over compact blocks).\n  */\n static void BlockChecked(const CBlock& block, const CValidationState& state, CConnman* connman) {\n     LOCK(cs_main);"
      }
    ]
  }
]