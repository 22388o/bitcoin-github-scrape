DrahtBot,2019-06-25 00:13:27,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17140](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17140.html) (test: Fix bug in blockfilter_index_tests. b",https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-505227446,505227446,
instagibbs,2019-10-08 15:30:57,looks like it doesn't compile anymore,https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-539569710,539569710,
TheBlueMatt,2019-10-08 20:10:46,"Right, just an issue triggered by the rebase-on-master testing. Rebased so should work now.",https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-539682213,539682213,
jnewbery,2019-10-08 20:39:17,Concept ACK. Will review when the build is fixed.,https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-539694672,539694672,
TheBlueMatt,2019-10-08 23:03:07,Built is fixed :),https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-539739866,539739866,
fjahr,2019-10-16 00:06:21,"tested ACK eabc9a192765df5b66fd4cdc65c4b645a39391cf\n\nReviewed code and ran tests + modified tests to try failure scenarios. While beyond the scope of this PR, something to note is that all the tests that were changed only tested the happy path. Something to improve in follow-ups, maybe after #16323.",https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-542454201,542454201,
etscrivner,2019-10-16 03:04:16,"tested ACK 2ec121f09d8f7117fc9a8f830a7242f9a3602b78.\n\nCompiled and ran all of the tests. Ran a testnet node with this code for ~1 day without issue. Currently running one with the updated commits from today (will post if any issues).",https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-542489708,542489708,
adamjonas,2019-10-16 18:06:22,tested ACK 2ec121f. Compiled and ran unit and functional tests.,https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-542823603,542823603,
DrahtBot,2019-10-17 13:01:03,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-543163576,543163576,
TheBlueMatt,2019-11-12 21:43:33,"Oops cause I didn’t comment, this kind of trivial refactor is probably detrimental in the death-by-1000-cuts model without #16323 and #16324, which seem to be too scary to get any review, so would recommend against running with it without reviving those (which are, of course, up for grabs if someone thinks they can make progress with it).\n\n>> On Nov 12, 2019, at 15:19, Matt Corallo <notification",https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-553129424,553129424,
jnewbery,2019-11-12 22:16:01,"It's very difficult for reviewers to understand the motivation and direction for this sequence of PRs, and consequently to help you move them forward toward merge. The OP for this PR states ""It's just two rather-nice (IMO) cleanups."", but your final comment here is ""would recommend against running with it without reviving those [other PRs]"". Those comments seem to me to be in direct contraction wi",https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-553142036,553142036,
TheBlueMatt,2019-11-12 23:18:51,"Right, but nice cleanups don’t always need to be merged, and do, by themselves, carry other weight. See the regular stream of “if this gets merged, X, Y, and Z will conflict” from Drahtbot (which is awesome). If they have a goal towards enabling other work, that’s great, but by themselves, unless they make it less likely some issue crops up in the future (which I kinda doubt for these changes), th",https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-553162734,553162734,
ryanofsky,2019-11-13 16:57:02,"Marking up for grabs\n\nhttp://www.erisian.com.au/bitcoin-core-dev/log-2019-11-12.html#l-455\n\n> \<jnewbery> #16279 seems to have already had a lot of review. I liked everything except the last commit in that one, so I might grab those",https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-553492988,553492988,
TheBlueMatt,2019-11-13 18:26:39,"See above discussion. I don’t think that tag makes sense here.\n\n> On Nov 13, 2019, at 11:57, Russell Yanofsky <notifications@github.com> wrote:\n> \n> ﻿\n> Marking up for grabs\n> \n> http://www.erisian.com.au/bitcoin-core-dev/log-2019-11-12.html#l-455\n> \n> <jnewbery> #16279 seems to have already had a lot of review. I liked everything except the last commit in that one, so I might grab those\",https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-553537364,553537364,
jnewbery,2019-11-14 17:18:28,Rebased in #17479,https://github.com/bitcoin/bitcoin/pull/16279#issuecomment-553988906,553988906,
promag,2019-06-25 07:04:59,Does it make sense to have a `ProcessAndNotifyNewBlock` to wrap this repeated code?,https://github.com/bitcoin/bitcoin/pull/16279#discussion_r297034762,297034762,src/net_processing.cpp
TheBlueMatt,2019-06-25 22:38:45,"I'd prefer to just wait and clean it up in a later PR, given I want to move towards doing this in the background anyway.",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r297421989,297421989,src/net_processing.cpp
ryanofsky,2019-06-28 20:25:43,"In commit ""Return the AcceptBlock CValidationState directly in ProcessNewBlock"" (dd07ec726c5ade950435876d39741d52a33471ce)\n\nWhy is this saying ""possibly get feedback""? If you check CValidationState and wait for BlockChecked, are there still cases where there wouldn't be feedback? If so, it'd be good to give some hint of when or why this would happen. If not, I'd suggest changing ""If you want t",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298737297,298737297,src/validation.h
ryanofsky,2019-06-28 20:35:31,"In commit ""Return the AcceptBlock CValidationState directly in ProcessNewBlock"" (dd07ec726c5ade950435876d39741d52a33471ce)\n\nCould you clarify what malleated means here, or what case this is talking about? When is a block connected but also non valid?",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298739909,298739909,src/validation.h
ryanofsky,2019-06-28 20:45:12,"In commit ""Return the AcceptBlock CValidationState directly in ProcessNewBlock"" (dd07ec726c5ade950435876d39741d52a33471ce)\n\nI don't understand what this is saying. Is it just saying it would be wasteful to call with fForceProcessing set in this case, or something more? Would the recommendation be to call with fForceProcessing unset instead, or try to avoid calls entirely? Probably it would be ",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298742380,298742380,src/validation.h
ryanofsky,2019-06-28 21:10:37,"Why is mapBlockSource.erase call needed here? In not valid case, this should already happen in explicit BlockChecked call. In valid case, I assume it happens in BlockChecked validation callback?\n\nThis logic is messy and repetitive and seems like it could be simplified by moving more of it out of here into the BlockChecked() function, or breaking BlockChecked up into reusable parts.",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298748875,298748875,src/net_processing.cpp
ryanofsky,2019-06-28 21:14:55,"re: https://github.com/bitcoin/bitcoin/pull/16279#discussion_r297034762\n\nIn commit ""Return the AcceptBlock CValidationState directly in ProcessNewBlock"" (dd07ec726c5ade950435876d39741d52a33471ce)\n\n> I'd prefer to just wait and clean it up in a later PR, given I want to move towards doing this in the background anyway\n\nSeems to me deduplicating this code now would only simplify the late",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r298749945,298749945,src/net_processing.cpp
TheBlueMatt,2019-07-02 02:22:21,"Right, but in the full branch I first clean up some cruft, and then merge the now-identical code instead of the currently-partially-identical code. Easier to just leave it as-is.",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r299281017,299281017,src/net_processing.cpp
TheBlueMatt,2019-07-02 02:27:26,"Maybe the confusion was the use of the old term ""malleated"" instead of the ""mutated"" term used in ValidationInvalidReason. I changed references to mutated.",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r299281755,299281755,src/validation.h
TheBlueMatt,2019-07-02 02:28:58,"This is saying something very specific - if fForceProcessing is set (but deliberately not saying anything about *when* you should set it, as that is a rather complicated topic), unless your goal is to re-download a block, you *never* need to call ProcessNewBlock again with the block. That is to say, ""this copy of the block is good, no need to try to find an alternate source"", hence the somewhat ve",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r299281962,299281962,src/validation.h
TheBlueMatt,2019-07-02 02:30:59,"This PR removes the (now redundant) BlockChecked call in case a block is completely bogus (ie !dos_state.IsValid()), so, no.",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r299282275,299282275,src/net_processing.cpp
instagibbs,2019-10-07 14:54:32,`s/has been mutation/has been mutated/`,https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332066318,332066318,src/validation.h
instagibbs,2019-10-07 14:55:09,"what does ""connects"" mean here? If it's not valid how does it connect?",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332066711,332066711,src/validation.h
instagibbs,2019-10-07 14:56:42,move the parenthetical `barring pruning and a desire...` to after the last condition that needs to be satisfied `state.IsValid()` to have this part flow better.,https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332067642,332067642,src/validation.h
instagibbs,2019-10-07 15:23:09,let's rename it to `dos_state` for clarity since it seems all callers(aside from dummy usage) calls it that.,https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332082822,332082822,src/validation.cpp
instagibbs,2019-10-07 15:26:19,unrelated to PR but can `state` still be valid here?,https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332084670,332084670,src/validation.cpp
instagibbs,2019-10-07 15:39:34,"Suggested enhancement to comment:\n\n""This is called after cursory DoS checks fail, and after full validation of the block in question.""",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332091929,332091929,src/net_processing.cpp
TheBlueMatt,2019-10-08 01:48:46,"But the ""barring pruning..."" bit applies *both* to fForceProcessing and fNewBlock being set to true upon return? I think that would change the meaning.",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332306747,332306747,src/validation.h
TheBlueMatt,2019-10-08 01:50:45,"Done. Also fixed an issue where the FormatStateMessage in ActivateBestChain failure prints the state state, not the dummy_state state.",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332307066,332307066,src/validation.cpp
TheBlueMatt,2019-10-08 01:50:46,"Good point, clarified it a bunch, though its pretty subtle. I hope its a bit better now.",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r332307068,332307068,src/validation.h
jnewbery,2019-10-09 16:03:13,"I think you're right that we can't get rid of this `mapBlockSource.erase()` call, but not for the reason you say. We still need to call it if the block is valid, but this isn't the first time we've received it (ie `fNewBlock` is returned as true). I think this logic would be easier to follow if structured as follows, with comments:\n\n```c++\n        ProcessNewBlock(chainparams, pblock, dos_sta",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r333100579,333100579,src/net_processing.cpp
jnewbery,2019-10-09 16:36:12,"This seems like a behaviour change. If `ConnectBlock()` fails for this block, then `pindex->nStatus` will be updated with `BLOCK_FAILED_VALID`. Previously, that would prevent this branch from being executed, but now we're only looking at the return `CValidationState` from `CheckBlock()` and `AcceptBlock()`.\n\nIf this is an intentional behaviour change, can you pull it out into a separate commit",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r333115791,333115791,src/net_processing.cpp
jnewbery,2019-10-09 16:39:28,I don't think `|| !state.IsValid()` is necessary. `ProcessNewBlock()` cannot return true if state is invalid.,https://github.com/bitcoin/bitcoin/pull/16279#discussion_r333117201,333117201,src/rpc/mining.cpp
jkczyz,2019-10-14 22:38:00,"It's a little difficult to parse this sentence. It may be easier to understand if written a little more succinctly as:\n\n```\nIf the block that pblock is built on is in our header tree, and pblock is a\ncandidate for accepting to disk (either because it is a candidate for the\nbest chain or fForceProcessing is set) but has been mutated, then state is\nguaranteed to be non-IsValid().\n```\",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334689003,334689003,src/validation.h
jkczyz,2019-10-14 22:57:23,Consider turning this into an `if-else` or `if` guard.,https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334693379,334693379,src/validation.cpp
TheBlueMatt,2019-10-15 00:15:29,"Hmm, yea, thats a bit cleaner, however, after #16323, which this was refactored out of, the original goes back to being cleaner, so would prefer to just leave it (also cause its fewer LoC changed).",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334708611,334708611,src/net_processing.cpp
TheBlueMatt,2019-10-15 00:28:41,"Don't think it matters either way (though also don't think it was *intentional* per se). It's not so much an important change as it is an accidental tweak thats probably a bit better but shouldn't matter. Once we get the block we have to mark it as received, but we cannot do that if the block is malleated. If the block is invalid, we don't care too much - essentially anyone who sends us the block ",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334710935,334710935,src/net_processing.cpp
TheBlueMatt,2019-10-15 00:29:35,"Might very well be #16323 bleeding in, but hopefully that is required soon :).",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334711101,334711101,src/rpc/mining.cpp
jkczyz,2019-10-15 00:53:00,"I'm also having a tough time parsing this sentence. I'm reading it as:\n\n`If <X>, barring <Y>, if <Z>, there should never ...`\n\n The `if <Z>` part is throwing me off. Should there be an 'and' or an 'or' before it?",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334714648,334714648,src/validation.h
jkczyz,2019-10-15 01:09:54,"Consider the less verbose version:\n\n```c++\nreturn BIP22ValidationResult(dos_state.IsValid() ? sc.state : dos_state);\n```\n\nOr use a guard clause to be consistent with the previous `if`:\n\n```c++\nif (!dos_state.IsValid()) {\n    return BIP22ValidationResult(dos_state);\n}\n\nreturn BIP22ValidationResult(sc.state);\n```",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334717294,334717294,src/rpc/mining.cpp
jkczyz,2019-10-15 04:23:31,Nit: Alignment,https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334747204,334747204,src/validation.h
jkczyz,2019-10-15 04:28:55,"Actually, you can remove the duplicate check on `dos_state.IsValid()` like so:\n\n```c++\nif (!dos_state.IsValid()) {\n    return BIP22ValidationResult(dos_state);\n}\n\nif (!sc.found) {\n    return ""inconclusive"";\n}\n\nreturn BIP22ValidationResult(sc.state);\n```",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334748011,334748011,src/rpc/mining.cpp
TheBlueMatt,2019-10-15 19:32:35,"Note that it doesn't have to be a candidate for the best chain, as it can meet the ""more or same work"" criteria, hence the word ""soon"". I took the drop of ""due to"", but am not a huge fan of dropping the redundant subject after the parenthetical (as then you have to re-read skipping the parenthetical).",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335137336,335137336,src/validation.h
TheBlueMatt,2019-10-15 19:36:03,Hmm? Note that ret may get set to false in the if (ret) {} conditional above.,https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335138656,335138656,src/validation.cpp
TheBlueMatt,2019-10-15 19:40:04,"Hmm, maybe I misunderstood what @instagibbs was suggesting. Took the changes.",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335140193,335140193,src/validation.h
instagibbs,2019-10-15 19:49:38,I can't remember what my suggestion meant but the new text reads much better,https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335144100,335144100,src/validation.h
jnewbery,2019-10-15 19:57:12,Much better. Can you do something similar here: https://github.com/bitcoin/bitcoin/pull/16279#discussion_r333100579 please :),https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335147140,335147140,src/rpc/mining.cpp
jnewbery,2019-10-15 20:19:08,"If it doesn't matter either way, can you leave it unchanged? Trying to pick through what exactly `MarkBlockAsReceived()` is doing and whether changing whether it's called or not is adding quite a lot of burden to review.",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335156453,335156453,src/net_processing.cpp
jkczyz,2019-10-15 20:28:45,"Ah, missed that. Not sure if `CheckBlock(...) && ::ChainstateActive().AcceptBlock(...)` is any better, but feel free to leave it as is.",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335160718,335160718,src/validation.cpp
TheBlueMatt,2019-10-15 20:31:33,"IMO, this is much cleaner, even if the behavior proper doesn't matter. a) reaching into validation to figure out what happened after calling PNB is...a massive layer violation, this should be returned, not figured out by side-effects, b) it means one chunk of cs_main less (even if its only in the uncommon case), and c) it matters a lot for #16323.",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335161983,335161983,src/net_processing.cpp
jnewbery,2019-10-15 20:41:18,"ok, if it does matter, can you separate into its own commit, with a commit log saying _why_ it matters a lot :)",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335166425,335166425,src/net_processing.cpp
jkczyz,2019-10-15 21:26:42,"The commit message mentions this in an offhand sort of way. But it seems like this (i.e. removing the event notification) and the way callers handle the secondary return are the primary changes introduced in this commit. The commit log could better reflect this rather than describing the implementation mechanics (i.e. the 'how').\n\nYou could argue that removing the event notification should be ",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335185457,335185457,src/validation.cpp
jkczyz,2019-10-15 21:43:58,"Unrelated to this commit, the error here may be from either `CheckBlock` or `AcceptBlock`. Related to this commit, the returned `CValidationState` could also be from either rather than just `AcceptBlock` but the commit summary mentions only the latter.\n\nI think this reflects a need for better naming / code organization rather than the need to make the commit message more verbose, however.",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335191536,335191536,src/validation.cpp
fjahr,2019-10-15 23:02:43,I missed it too :) Maybe consider not reusing the `ret` variable but giving the return of `AcceptBlock` a different name. `check_ret` and `accept_ret` for example.,https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335214564,335214564,src/validation.cpp
fjahr,2019-10-15 23:09:42,"This one could also be named `dos_state`, I think?",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335216141,335216141,src/rpc/mining.cpp
amitiuttarwar,2019-10-15 23:36:24,"but since this commit is touching this code, might be worth updating error message to ""AcceptBlock or CheckBlock FAILED..."" to be more accurate? ",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335222308,335222308,src/validation.cpp
TheBlueMatt,2019-10-16 01:38:39,"Historically, CheckBlock was only called as a part of AcceptBlock, and I think we'd like to eventually go back there. See #9765 and the bitcoin-dev mail titled ""Vulnerability relating to 64-byte transactions in Bitcoin Core 0.13 branch"". (sorry, lots and lots of context to this code.....)",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335245622,335245622,src/validation.cpp
TheBlueMatt,2019-10-16 01:44:15,Clarified the commit message to make it more clear. Not gonna bother splitting as it really is the same idea - we return the dos_state instead of passing it back via a callback.,https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335246487,335246487,src/validation.cpp
TheBlueMatt,2019-10-16 03:10:44,"Two different definitions of ""matter"", I suppose. Anyway, I pulled it out on its own.",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335261392,335261392,src/net_processing.cpp
TheBlueMatt,2019-10-16 03:11:31,"Ugh, github's review tools have gone to shit. I responded at https://github.com/bitcoin/bitcoin/pull/16279#discussion_r334708611",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335261531,335261531,src/rpc/mining.cpp
jonatack,2019-10-16 16:53:57,Tests that clarify and assert the points in this discussion would be reassuring.,https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335592877,335592877,src/net_processing.cpp
ariard,2019-10-17 00:51:36,"Is second alternative of comment right ? ""after full validation of the block fails"" in fact it's called in ConnectTip also when block is valid. Also comment should said what function is doing ""Punish peer if sending bogus data unless it's under BIP152 relaxation or eventually promote peer to announce blocks via compact blocks"" ",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335770164,335770164,src/net_processing.cpp
ariard,2019-10-17 01:31:52,I lean to agree that's a minor change. I'm not even sure there is a difference between the 2 checks as BLOCK_VALID_TRANSACTION is set in `ReceivedBlockTransactions` itself called at the end of `AcceptBlock` after all checks modifying state to invalid. Even it's lower the bar and increase the number of bogus blocks we download we're going to ban peer through the `BlockChecked` callback. So if banha,https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335776612,335776612,src/net_processing.cpp
ariard,2019-10-17 01:46:45,Could you clarify the reasons? I think it's due a lock conflict with `cs_main` but maybe you're anticipating on the introduction of `cs_peerstate`,https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335778910,335778910,src/validation.h
ariard,2019-10-17 02:03:59,"""The installed `BlockChecked` method will be called for *any* block completing validation. It may not be called for the provided pblock as this one not being part of the best chain. But if `BlockChecked` is called for it and its `CValidationState` is invalid, the invalidity reason will be different than the `CValidationState got back from `ProcessNewBlock`"". Just a verbose attempt to underscores c",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335781934,335781934,src/validation.h
ariard,2019-10-17 02:12:34,"The whole comment could be clearer by defining what we mean by processed. Like ""A processed block is one saved to disk and submit as candidate to be part of the best chain."" We can also add ""passed the cursory mutation/Dos checks"" if I'm correct will always return failed (non-processed) if block fail them. So both concepts are a bit mangled, as processed presume these preliminary checks as success",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335783223,335783223,src/validation.h
ariard,2019-10-17 02:24:39,"nit: slight behavior change as now we return error on weak validity check, but would say it's now more accurate as `BlockChecked` wasn't giving state of the block we wait for. ",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r335785185,335785185,src/rpc/mining.cpp
TheBlueMatt,2019-10-17 17:42:24,"The existing comment already says that.\n""Handle invalid block rejection and consequent peer banning"".",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r336138643,336138643,src/net_processing.cpp
TheBlueMatt,2019-10-17 17:43:04,"There really is no material difference in behavior here. Its much *cleaner* code, but the behavior is the same. Hence the two different definitions of ""matter"".",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r336138940,336138940,src/net_processing.cpp
TheBlueMatt,2019-10-17 17:44:10,"Ehh, getblocktemplate is a mess already. TBH who really cares since no one actually uses it except to get a block template and submit a block. No one uses the return value.",https://github.com/bitcoin/bitcoin/pull/16279#discussion_r336139454,336139454,src/rpc/mining.cpp
