[
  {
    "sha": "bf8c09d427e8ec7fa7893da792c8d24294cee2ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjhjMDlkNDI3ZThlYzdmYTc4OTNkYTc5MmM4ZDI0Mjk0Y2VlMmVj",
    "commit": {
      "author": {
        "name": "Adam Stein",
        "email": "adaminsky@gmail.com",
        "date": "2020-09-05T07:30:31Z"
      },
      "committer": {
        "name": "Adam Stein",
        "email": "adaminsky@gmail.com",
        "date": "2020-09-05T22:53:48Z"
      },
      "message": "Clean up messages.py repr methods\n\nSome of the repr methods return actual executable code which could be\nused to recreate the exact object and some of them just represent the\ninteral state of the object being printed. For the objects which do not\nhave a repr string that is a valid constructor call, I use angle\nbrackets to show that it is the internal state of the object being\nprinted and not a valid way to construct the object. This commit also\nchanges the `%` style formatting to use `.format` Python formatting and\nprefixes all printed hex with \"0x\".",
      "tree": {
        "sha": "2e3465bd00cded09e90672a4500066d855463a22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e3465bd00cded09e90672a4500066d855463a22"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf8c09d427e8ec7fa7893da792c8d24294cee2ec",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEDsrbHLeGpqA7fkjDTba/7wCOX8AFAl9UFv0ACgkQTba/7wCO\nX8DdFw//d+RmP0lw0vQRwmVr//2hgR6wRPfs3TwUgl2bBCoU2E01QjAwxbXcr5wR\nM9d/ijj/iWMAOmVWJfiaKF25xEfYEsYVqx0pJI/qIJueTklEaMgOQdp0JC1yebKY\ncqX6HKm6a/UlZQO+9xH8BcFJMP/pzQ1a+Waqq73ZyjansjwICrFGChqYIwD6hy1P\nC7pjL5QcMDxAa78W9gQ4dxQ/AeX4d/SWrKHh2dzNrc7eO/Uhis5KjaZdvGml1dal\nFqISv40vzpJUK5LV3ZcKt9KBGcrbtgFFRYh50oG1j1L3DyjpMiYLSmHN0xSF0Jlz\nfh+JvtUePHGfcz3oJObMbdDjIQGkUKCVV8bGraajYAY1Tqav0ervVMnlhrPpXh33\neTBsKXqcQyowVZPCihlTXOwMVQ02OxxMd0X4r60Jmg4uk66Oh/y4EdoZHi7rPEPs\nunyidVXP1H04dG03OLfzcTjy2T72UcFRHm92yyc1aEtC6l5m3K/Row02T1lI+5k3\nyfVyouJCeDHlw5a8vcd7561NTDt7Nw+x+yeqU9G0zDrGhBnCZvLDgZDesXmahggN\n7ViSM+Mq16DON5YPWnUyDP6LTsIFy3DJmnIBr1q6OoEgC16461jRFqqQxS7tRJZu\nbjzYXqp4Z4LrX+lHrjp+WmYAHOqEkSLV+qk+warvbGdVJ31szww=\n=OoNe\n-----END PGP SIGNATURE-----",
        "payload": "tree 2e3465bd00cded09e90672a4500066d855463a22\nparent 23d3ae7accfc690298b1b0bac9615155f485c5ad\nauthor Adam Stein <adaminsky@gmail.com> 1599291031 -0700\ncommitter Adam Stein <adaminsky@gmail.com> 1599346428 -0700\n\nClean up messages.py repr methods\n\nSome of the repr methods return actual executable code which could be\nused to recreate the exact object and some of them just represent the\ninteral state of the object being printed. For the objects which do not\nhave a repr string that is a valid constructor call, I use angle\nbrackets to show that it is the internal state of the object being\nprinted and not a valid way to construct the object. This commit also\nchanges the `%` style formatting to use `.format` Python formatting and\nprefixes all printed hex with \"0x\".\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf8c09d427e8ec7fa7893da792c8d24294cee2ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf8c09d427e8ec7fa7893da792c8d24294cee2ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf8c09d427e8ec7fa7893da792c8d24294cee2ec/comments",
    "author": {
      "login": "adaminsky",
      "id": 29065991,
      "node_id": "MDQ6VXNlcjI5MDY1OTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/29065991?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adaminsky",
      "html_url": "https://github.com/adaminsky",
      "followers_url": "https://api.github.com/users/adaminsky/followers",
      "following_url": "https://api.github.com/users/adaminsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/adaminsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adaminsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adaminsky/subscriptions",
      "organizations_url": "https://api.github.com/users/adaminsky/orgs",
      "repos_url": "https://api.github.com/users/adaminsky/repos",
      "events_url": "https://api.github.com/users/adaminsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adaminsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "adaminsky",
      "id": 29065991,
      "node_id": "MDQ6VXNlcjI5MDY1OTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/29065991?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adaminsky",
      "html_url": "https://github.com/adaminsky",
      "followers_url": "https://api.github.com/users/adaminsky/followers",
      "following_url": "https://api.github.com/users/adaminsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/adaminsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adaminsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adaminsky/subscriptions",
      "organizations_url": "https://api.github.com/users/adaminsky/orgs",
      "repos_url": "https://api.github.com/users/adaminsky/repos",
      "events_url": "https://api.github.com/users/adaminsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adaminsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23d3ae7accfc690298b1b0bac9615155f485c5ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23d3ae7accfc690298b1b0bac9615155f485c5ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23d3ae7accfc690298b1b0bac9615155f485c5ad"
      }
    ],
    "stats": {
      "total": 157,
      "additions": 85,
      "deletions": 72
    },
    "files": [
      {
        "sha": "ed78ef474b216ccde2cb97881ea82b1af6e583c6",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 85,
        "deletions": 72,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf8c09d427e8ec7fa7893da792c8d24294cee2ec/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf8c09d427e8ec7fa7893da792c8d24294cee2ec/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=bf8c09d427e8ec7fa7893da792c8d24294cee2ec",
        "patch": "@@ -231,8 +231,8 @@ def serialize(self, *, with_time=True):\n         return r\n \n     def __repr__(self):\n-        return \"CAddress(nServices=%i ip=%s port=%i)\" % (self.nServices,\n-                                                         self.ip, self.port)\n+        return \"<CAddress nServices:{} ip:{} port:{}>\"\\\n+                .format(self.nServices, self.ip, self.port)\n \n \n class CInv:\n@@ -264,8 +264,8 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"CInv(type=%s hash=%064x)\" \\\n-            % (self.typemap[self.type], self.hash)\n+        return \"CInv(t={}, h={:#064x})\"\\\n+            .format(self.type, self.hash)\n \n     def __eq__(self, other):\n         return isinstance(other, CInv) and self.hash == other.hash and self.type == other.type\n@@ -289,8 +289,8 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"CBlockLocator(nVersion=%i vHave=%s)\" \\\n-            % (self.nVersion, repr(self.vHave))\n+        return \"<CBlockLocator nVersion:{} vHave:[{}]>\"\\\n+                .format(self.nVersion, ', '.join('{:#064x}'.format(h) for h in self.vHave))\n \n \n class COutPoint:\n@@ -311,7 +311,7 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"COutPoint(hash=%064x n=%i)\" % (self.hash, self.n)\n+        return \"COutPoint(hash={:#064x}, n={})\".format(self.hash, self.n)\n \n \n class CTxIn:\n@@ -339,9 +339,9 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"CTxIn(prevout=%s scriptSig=%s nSequence=%i)\" \\\n-            % (repr(self.prevout), self.scriptSig.hex(),\n-               self.nSequence)\n+        return \"CTxIn(outpoint={!r}, scriptSig={}, nSequence=0x{})\"\\\n+            .format(self.prevout, self.scriptSig.hex(),\n+                    self.nSequence)\n \n \n class CTxOut:\n@@ -362,9 +362,9 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"CTxOut(nValue=%i.%08i scriptPubKey=%s)\" \\\n-            % (self.nValue // COIN, self.nValue % COIN,\n-               self.scriptPubKey.hex())\n+        return \"CTxOut(nValue={}.{:08d}, scriptPubKey=0x{})\"\\\n+            .format(self.nValue // COIN, self.nValue % COIN,\n+                    self.scriptPubKey.hex())\n \n \n class CScriptWitness:\n@@ -375,8 +375,8 @@ def __init__(self):\n         self.stack = []\n \n     def __repr__(self):\n-        return \"CScriptWitness(%s)\" % \\\n-               (\",\".join([x.hex() for x in self.stack]))\n+        return \"<CScriptWitness stack:[{}]>\"\\\n+               .format(\", \".join([(\"0x\" + x.hex()) for x in self.stack]))\n \n     def is_null(self):\n         if self.stack:\n@@ -423,8 +423,8 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"CTxWitness(%s)\" % \\\n-               (';'.join([repr(x) for x in self.vtxinwit]))\n+        return \"<CTxWitness vtxinwit:[{}]>\"\\\n+               .format(', '.join([repr(x) for x in self.vtxinwit]))\n \n     def is_null(self):\n         for x in self.vtxinwit:\n@@ -538,8 +538,8 @@ def is_valid(self):\n         return True\n \n     def __repr__(self):\n-        return \"CTransaction(nVersion=%i vin=%s vout=%s wit=%s nLockTime=%i)\" \\\n-            % (self.nVersion, repr(self.vin), repr(self.vout), repr(self.wit), self.nLockTime)\n+        return \"<CTransaction nVersion:{} vin:{!r} vout:{!r} wit:{!r} nLockTime:{}>\"\\\n+            .format(self.nVersion, self.vin, self.vout, self.wit, self.nLockTime)\n \n \n class CBlockHeader:\n@@ -608,9 +608,10 @@ def rehash(self):\n         return self.sha256\n \n     def __repr__(self):\n-        return \"CBlockHeader(nVersion=%i hashPrevBlock=%064x hashMerkleRoot=%064x nTime=%s nBits=%08x nNonce=%08x)\" \\\n-            % (self.nVersion, self.hashPrevBlock, self.hashMerkleRoot,\n-               time.ctime(self.nTime), self.nBits, self.nNonce)\n+        return \"<BlockHeader nVersion:{} hashPrevBlock:{:#064x} \" \\\n+               \"hashMerkleRoot:{:#064x} nTime:'{}' nBits:{:#08x} nNonce:{:#08x}>\" \\\n+            .format(self.nVersion, self.hashPrevBlock, self.hashMerkleRoot,\n+                    time.ctime(self.nTime), self.nBits, self.nNonce)\n \n BLOCK_HEADER_SIZE = len(CBlockHeader().serialize())\n assert_equal(BLOCK_HEADER_SIZE, 80)\n@@ -684,15 +685,15 @@ def solve(self):\n             self.rehash()\n \n     def __repr__(self):\n-        return \"CBlock(nVersion=%i hashPrevBlock=%064x hashMerkleRoot=%064x nTime=%s nBits=%08x nNonce=%08x vtx=%s)\" \\\n-            % (self.nVersion, self.hashPrevBlock, self.hashMerkleRoot,\n-               time.ctime(self.nTime), self.nBits, self.nNonce, repr(self.vtx))\n+        return \"<CBlock nVersion:{} hashPrevBlock:{:#064x} hashMerkleRoot:{:#064x} nTime:'{}' nBits:{:#08x} nNonce:{:#08x} vtx:{!r}>\"\\\n+            .format(self.nVersion, self.hashPrevBlock, self.hashMerkleRoot,\n+                    time.ctime(self.nTime), self.nBits, self.nNonce, self.vtx)\n \n \n class PrefilledTransaction:\n     __slots__ = (\"index\", \"tx\")\n \n-    def __init__(self, index=0, tx = None):\n+    def __init__(self, index=0, tx=None):\n         self.index = index\n         self.tx = tx\n \n@@ -717,7 +718,7 @@ def serialize_with_witness(self):\n         return self.serialize(with_witness=True)\n \n     def __repr__(self):\n-        return \"PrefilledTransaction(index=%d, tx=%s)\" % (self.index, repr(self.tx))\n+        return \"PrefilledTransaction(index={}, tx={!r})\".format(self.index, self.tx)\n \n \n # This is what we send on the wire, in a cmpctblock message.\n@@ -760,7 +761,7 @@ def serialize(self, with_witness=False):\n         return r\n \n     def __repr__(self):\n-        return \"P2PHeaderAndShortIDs(header=%s, nonce=%d, shortids_length=%d, shortids=%s, prefilled_txn_length=%d, prefilledtxn=%s\" % (repr(self.header), self.nonce, self.shortids_length, repr(self.shortids), self.prefilled_txn_length, repr(self.prefilled_txn))\n+        return \"<P2PHeaderAndShortIDs header:{!r} nonce:{} shortids_length:{} shortids:{!r} prefilled_txn_length:{} prefilledtxn:{!r}>\".format(self.header, self.nonce, self.shortids_length, self.shortids, self.prefilled_txn_length, self.prefilled_txn)\n \n \n # P2P version of the above that will use witness serialization (for compact\n@@ -782,7 +783,7 @@ def calculate_shortid(k0, k1, tx_hash):\n class HeaderAndShortIDs:\n     __slots__ = (\"header\", \"nonce\", \"prefilled_txn\", \"shortids\", \"use_witness\")\n \n-    def __init__(self, p2pheaders_and_shortids = None):\n+    def __init__(self, p2pheaders_and_shortids=None):\n         self.header = CBlockHeader()\n         self.nonce = 0\n         self.shortids = []\n@@ -841,13 +842,14 @@ def initialize_from_block(self, block, nonce=0, prefill_list=None, use_witness=F\n                 self.shortids.append(calculate_shortid(k0, k1, tx_hash))\n \n     def __repr__(self):\n-        return \"HeaderAndShortIDs(header=%s, nonce=%d, shortids=%s, prefilledtxn=%s\" % (repr(self.header), self.nonce, repr(self.shortids), repr(self.prefilled_txn))\n+        return \"<HeaderAndShortIDs header:{!r} nonce:{} shortids:{!r} prefilledtxn:{!r}>\"\\\n+                .format(self.header, self.nonce, self.shortids, self.prefilled_txn)\n \n \n class BlockTransactionsRequest:\n     __slots__ = (\"blockhash\", \"indexes\")\n \n-    def __init__(self, blockhash=0, indexes = None):\n+    def __init__(self, blockhash=0, indexes=None):\n         self.blockhash = blockhash\n         self.indexes = indexes if indexes is not None else []\n \n@@ -882,13 +884,14 @@ def to_absolute(self):\n         return absolute_indexes\n \n     def __repr__(self):\n-        return \"BlockTransactionsRequest(hash=%064x indexes=%s)\" % (self.blockhash, repr(self.indexes))\n+        return \"BlockTransactionsRequest(blockhash={:#064x}, indexes={!r})\"\\\n+                .format(self.blockhash, self.indexes)\n \n \n class BlockTransactions:\n     __slots__ = (\"blockhash\", \"transactions\")\n \n-    def __init__(self, blockhash=0, transactions = None):\n+    def __init__(self, blockhash=0, transactions=None):\n         self.blockhash = blockhash\n         self.transactions = transactions if transactions is not None else []\n \n@@ -906,7 +909,8 @@ def serialize(self, with_witness=True):\n         return r\n \n     def __repr__(self):\n-        return \"BlockTransactions(hash=%064x transactions=%s)\" % (self.blockhash, repr(self.transactions))\n+        return \"BlockTransactions(blockhash={:#064x}, transactions={!r})\"\\\n+                .format(self.blockhash, self.transactions)\n \n \n class CPartialMerkleTree:\n@@ -936,7 +940,10 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"CPartialMerkleTree(nTransactions=%d, vHash=%s, vBits=%s)\" % (self.nTransactions, repr(self.vHash), repr(self.vBits))\n+        return \"<CPartialMerkleTree nTransactions:{} vHash:[{}] vBits:{!r}>\"\\\n+                .format(self.nTransactions,\n+                        (', '.join('{:#064x}'.format(h) for h in self.vHash)),\n+                        self.vBits)\n \n \n class CMerkleBlock:\n@@ -957,7 +964,7 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"CMerkleBlock(header=%s, txn=%s)\" % (repr(self.header), repr(self.txn))\n+        return \"<MerkleBlock header:{!r} txn:{!r}>\".format(self.header, self.txn)\n \n \n # Objects that correspond to messages on the wire\n@@ -1014,10 +1021,11 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return 'msg_version(nVersion=%i nServices=%i nTime=%s addrTo=%s addrFrom=%s nNonce=0x%016X strSubVer=%s nStartingHeight=%i nRelay=%i)' \\\n-            % (self.nVersion, self.nServices, time.ctime(self.nTime),\n-               repr(self.addrTo), repr(self.addrFrom), self.nNonce,\n-               self.strSubVer, self.nStartingHeight, self.nRelay)\n+        return \"<msg_version nVersion:{} nServices:{} nTime:'{}' addrTo:{!r} \"\\\n+                \"addrFrom:{!r} nNonce:{:#016x} strSubVer:{} nStartingHeight:{} nRelay:{}>\"\\\n+                .format(self.nVersion, self.nServices, time.ctime(self.nTime),\n+                        self.addrTo, self.addrFrom, self.nNonce,\n+                        self.strSubVer, self.nStartingHeight, self.nRelay)\n \n \n class msg_verack:\n@@ -1051,7 +1059,7 @@ def serialize(self):\n         return ser_vector(self.addrs)\n \n     def __repr__(self):\n-        return \"msg_addr(addrs=%s)\" % (repr(self.addrs))\n+        return \"<msg_addr addrs:{!r}>\".format(self.addrs)\n \n \n class msg_inv:\n@@ -1071,7 +1079,7 @@ def serialize(self):\n         return ser_vector(self.inv)\n \n     def __repr__(self):\n-        return \"msg_inv(inv=%s)\" % (repr(self.inv))\n+        return \"msg_inv(inv={!r})\".format(self.inv)\n \n \n class msg_getdata:\n@@ -1088,7 +1096,7 @@ def serialize(self):\n         return ser_vector(self.inv)\n \n     def __repr__(self):\n-        return \"msg_getdata(inv=%s)\" % (repr(self.inv))\n+        return \"msg_getdata(inv={!r})\".format(self.inv)\n \n \n class msg_getblocks:\n@@ -1111,8 +1119,8 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"msg_getblocks(locator=%s hashstop=%064x)\" \\\n-            % (repr(self.locator), self.hashstop)\n+        return \"<msg_getblocks locator:{!r} hashstop:{:#064x}>\"\\\n+            .format(self.locator, self.hashstop)\n \n \n class msg_tx:\n@@ -1129,7 +1137,7 @@ def serialize(self):\n         return self.tx.serialize_with_witness()\n \n     def __repr__(self):\n-        return \"msg_tx(tx=%s)\" % (repr(self.tx))\n+        return \"msg_tx(tx={!r})\".format(self.tx)\n \n class msg_wtxidrelay:\n     __slots__ = ()\n@@ -1172,7 +1180,7 @@ def serialize(self):\n         return self.block.serialize()\n \n     def __repr__(self):\n-        return \"msg_block(block=%s)\" % (repr(self.block))\n+        return \"msg_block(block={!r})\".format(self.block)\n \n \n # for cases where a user needs tighter control over what is sent over the wire\n@@ -1188,7 +1196,8 @@ def serialize(self):\n         return self.data\n \n     def __repr__(self):\n-        return \"msg_generic()\"\n+        return \"msg_generic(msgtype={}, data={!r})\"\\\n+                .format(self.msgtype, self.data)\n \n \n class msg_no_witness_block(msg_block):\n@@ -1230,7 +1239,7 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"msg_ping(nonce=%08x)\" % self.nonce\n+        return \"msg_ping(nonce={:#016x})\".format(self.nonce)\n \n \n class msg_pong:\n@@ -1249,7 +1258,7 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"msg_pong(nonce=%08x)\" % self.nonce\n+        return \"msg_pong(nonce={:#016x})\".format(self.nonce)\n \n \n class msg_mempool:\n@@ -1283,7 +1292,7 @@ def serialize(self):\n         return ser_vector(self.vec)\n \n     def __repr__(self):\n-        return \"msg_notfound(vec=%s)\" % (repr(self.vec))\n+        return \"msg_notfound(vec={!r})\".format(self.vec)\n \n \n class msg_sendheaders:\n@@ -1327,8 +1336,8 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"msg_getheaders(locator=%s, stop=%064x)\" \\\n-            % (repr(self.locator), self.hashstop)\n+        return \"<msg_getheaders locator:{!r} stop:{:#064x}>\"\\\n+            .format(self.locator, self.hashstop)\n \n \n # headers message has\n@@ -1351,7 +1360,7 @@ def serialize(self):\n         return ser_vector(blocks)\n \n     def __repr__(self):\n-        return \"msg_headers(headers=%s)\" % repr(self.headers)\n+        return \"msg_headers(headers={!r})\".format(self.headers)\n \n \n class msg_merkleblock:\n@@ -1371,7 +1380,7 @@ def serialize(self):\n         return self.merkleblock.serialize()\n \n     def __repr__(self):\n-        return \"msg_merkleblock(merkleblock=%s)\" % (repr(self.merkleblock))\n+        return \"msg_merkleblock(merkleblock={!r})\".format(self.merkleblock)\n \n \n class msg_filterload:\n@@ -1399,8 +1408,8 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"msg_filterload(data={}, nHashFuncs={}, nTweak={}, nFlags={})\".format(\n-            self.data, self.nHashFuncs, self.nTweak, self.nFlags)\n+        return \"msg_filterload(data={}, nHashFuncs={}, nTweak={}, nFlags={})\"\\\n+                .format(self.data, self.nHashFuncs, self.nTweak, self.nFlags)\n \n \n class msg_filteradd:\n@@ -1455,7 +1464,7 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"msg_feefilter(feerate=%08x)\" % self.feerate\n+        return \"msg_feefilter(feerate={:#016x})\".format(self.feerate)\n \n \n class msg_sendcmpct:\n@@ -1477,7 +1486,8 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"msg_sendcmpct(announce=%s, version=%lu)\" % (self.announce, self.version)\n+        return \"<msg_sendcmpct announce:{} version:{}>\"\\\n+                .format(self.announce, self.version)\n \n \n class msg_cmpctblock:\n@@ -1497,7 +1507,8 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"msg_cmpctblock(HeaderAndShortIDs=%s)\" % repr(self.header_and_shortids)\n+        return \"msg_cmpctblock(header_and_shortids={!r})\"\\\n+                .format(self.header_and_shortids)\n \n \n class msg_getblocktxn:\n@@ -1517,7 +1528,8 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"msg_getblocktxn(block_txn_request=%s)\" % (repr(self.block_txn_request))\n+        return \"msg_getblocktxn(block_txn_request={!r})\"\\\n+                .format(self.block_txn_request)\n \n \n class msg_blocktxn:\n@@ -1536,7 +1548,7 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"msg_blocktxn(block_transactions=%s)\" % (repr(self.block_transactions))\n+        return \"<msg_blocktxn block_transactions:{!r}>\".format(self.block_transactions)\n \n \n class msg_no_witness_blocktxn(msg_blocktxn):\n@@ -1568,8 +1580,8 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"msg_getcfilters(filter_type={:#x}, start_height={}, stop_hash={:x})\".format(\n-            self.filter_type, self.start_height, self.stop_hash)\n+        return \"msg_getcfilters(filter_type={:#02x}, start_height={}, stop_hash={:#064x})\"\\\n+            .format(self.filter_type, self.start_height, self.stop_hash)\n \n class msg_cfilter:\n     __slots__ = (\"filter_type\", \"block_hash\", \"filter_data\")\n@@ -1593,8 +1605,8 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"msg_cfilter(filter_type={:#x}, block_hash={:x})\".format(\n-            self.filter_type, self.block_hash)\n+        return \"msg_cfilter(filter_type={:#02x}, block_hash={:#064x}, filter_data={})\"\\\n+            .format(self.filter_type, self.block_hash, self.filter_data)\n \n class msg_getcfheaders:\n     __slots__ = (\"filter_type\", \"start_height\", \"stop_hash\")\n@@ -1618,7 +1630,7 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"msg_getcfheaders(filter_type={:#x}, start_height={}, stop_hash={:x})\".format(\n+        return \"msg_getcfheaders(filter_type={:#02x}, start_height={}, stop_hash={:#064x})\".format(\n             self.filter_type, self.start_height, self.stop_hash)\n \n class msg_cfheaders:\n@@ -1646,8 +1658,9 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"msg_cfheaders(filter_type={:#x}, stop_hash={:x})\".format(\n-            self.filter_type, self.stop_hash)\n+        return \"msg_cfheaders(filter_type={:#02x}, stop_hash={:#064x}, prev_header={:#064x}, hashes=[{}])\".format(\n+            self.filter_type, self.stop_hash, self.prev_header,\n+            ', '.join('{:#064x}'.format(h) for h in self.hashes))\n \n class msg_getcfcheckpt:\n     __slots__ = (\"filter_type\", \"stop_hash\")\n@@ -1668,7 +1681,7 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"msg_getcfcheckpt(filter_type={:#x}, stop_hash={:x})\".format(\n+        return \"msg_getcfcheckpt(filter_type={:#02x}, stop_hash={:#064x})\".format(\n             self.filter_type, self.stop_hash)\n \n class msg_cfcheckpt:\n@@ -1693,5 +1706,5 @@ def serialize(self):\n         return r\n \n     def __repr__(self):\n-        return \"msg_cfcheckpt(filter_type={:#x}, stop_hash={:x})\".format(\n-            self.filter_type, self.stop_hash)\n+        return \"msg_cfcheckpt(filter_type={:#02x}, stop_hash={:#064x}, headers=[{}])\".format(\n+                self.filter_type, self.stop_hash, ', '.join('{:#064x}'.format(h) for h in self.headers))"
      }
    ]
  }
]