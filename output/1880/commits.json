[
  {
    "sha": "66b02c93e69cfeaec6e7fa19a03bfb2649025a56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmIwMmM5M2U2OWNmZWFlYzZlN2ZhMTlhMDNiZmIyNjQ5MDI1YTU2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-09-13T12:33:52Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-10-19T23:54:10Z"
      },
      "message": "Move external block import to separate thread",
      "tree": {
        "sha": "414db7d5088d03e29963974fce490567e25e8649",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/414db7d5088d03e29963974fce490567e25e8649"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66b02c93e69cfeaec6e7fa19a03bfb2649025a56",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66b02c93e69cfeaec6e7fa19a03bfb2649025a56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66b02c93e69cfeaec6e7fa19a03bfb2649025a56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66b02c93e69cfeaec6e7fa19a03bfb2649025a56/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "485d667748b776a1932e3e14dc1b9dfe2ba841d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/485d667748b776a1932e3e14dc1b9dfe2ba841d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/485d667748b776a1932e3e14dc1b9dfe2ba841d0"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 70,
      "deletions": 27
    },
    "files": [
      {
        "sha": "92c752a8f5783d24ccc444c40ae7a19d56b9c94a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 19,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66b02c93e69cfeaec6e7fa19a03bfb2649025a56/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66b02c93e69cfeaec6e7fa19a03bfb2649025a56/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=66b02c93e69cfeaec6e7fa19a03bfb2649025a56",
        "patch": "@@ -776,29 +776,13 @@ bool AppInit2()\n \n     // ********************************************************* Step 9: import blocks\n \n+    std::vector<boost::filesystem::path> *vPath = new std::vector<boost::filesystem::path>();\n     if (mapArgs.count(\"-loadblock\"))\n     {\n-        uiInterface.InitMessage(_(\"Importing blockchain data file.\"));\n-\n         BOOST_FOREACH(string strFile, mapMultiArgs[\"-loadblock\"])\n-        {\n-            FILE *file = fopen(strFile.c_str(), \"rb\");\n-            if (file)\n-                LoadExternalBlockFile(file);\n-        }\n-    }\n-\n-    filesystem::path pathBootstrap = GetDataDir() / \"bootstrap.dat\";\n-    if (filesystem::exists(pathBootstrap)) {\n-        uiInterface.InitMessage(_(\"Importing bootstrap blockchain data file.\"));\n-\n-        FILE *file = fopen(pathBootstrap.string().c_str(), \"rb\");\n-        if (file) {\n-            filesystem::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n-            LoadExternalBlockFile(file);\n-            RenameOver(pathBootstrap, pathBootstrapOld);\n-        }\n+            vPath->push_back(strFile);\n     }\n+    NewThread(ThreadImport, vPath);\n \n     // ********************************************************* Step 10: load peers\n "
      },
      {
        "sha": "a5179b65275bfd0b0bf5bc9bbe194863683fcb8a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 5,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66b02c93e69cfeaec6e7fa19a03bfb2649025a56/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66b02c93e69cfeaec6e7fa19a03bfb2649025a56/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=66b02c93e69cfeaec6e7fa19a03bfb2649025a56",
        "patch": "@@ -38,6 +38,7 @@ CBigNum bnBestInvalidWork = 0;\n uint256 hashBestChain = 0;\n CBlockIndex* pindexBest = NULL;\n int64 nTimeBestReceived = 0;\n+bool fImporting = false;\n \n CMedianFilter<int> cPeerBlockCounts(5, 0); // Amount of blocks that other nodes claim to have\n \n@@ -2251,7 +2252,6 @@ bool LoadExternalBlockFile(FILE* fileIn)\n \n     int nLoaded = 0;\n     {\n-        LOCK(cs_main);\n         try {\n             CAutoFile blkdat(fileIn, SER_DISK, CLIENT_VERSION);\n             unsigned int nPos = 0;\n@@ -2288,6 +2288,7 @@ bool LoadExternalBlockFile(FILE* fileIn)\n                 {\n                     CBlock block;\n                     blkdat >> block;\n+                    LOCK(cs_main);\n                     if (ProcessBlock(NULL,&block))\n                     {\n                         nLoaded++;\n@@ -2305,6 +2306,54 @@ bool LoadExternalBlockFile(FILE* fileIn)\n     return nLoaded > 0;\n }\n \n+struct CImportingNow\n+{\n+    CImportingNow() {\n+        assert(fImporting == false);\n+        fImporting = true;\n+    }\n+\n+    ~CImportingNow() {\n+        assert(fImporting == true);\n+        fImporting = false;\n+    }\n+};\n+\n+void ThreadImport(void *data) {\n+    std::vector<boost::filesystem::path> *vFiles = reinterpret_cast<std::vector<boost::filesystem::path>*>(data);\n+\n+    RenameThread(\"bitcoin-loadblk\");\n+\n+    CImportingNow imp;\n+    vnThreadsRunning[THREAD_IMPORT]++;\n+\n+    // -loadblock=\n+    uiInterface.InitMessage(_(\"Starting block import...\"));\n+    BOOST_FOREACH(boost::filesystem::path &path, *vFiles) {\n+        FILE *file = fopen(path.string().c_str(), \"rb\");\n+        if (file)\n+            LoadExternalBlockFile(file);\n+    }\n+\n+    // hardcoded $DATADIR/bootstrap.dat\n+    filesystem::path pathBootstrap = GetDataDir() / \"bootstrap.dat\";\n+    if (filesystem::exists(pathBootstrap)) {\n+        uiInterface.InitMessage(_(\"Importing bootstrap blockchain data file.\"));\n+\n+        FILE *file = fopen(pathBootstrap.string().c_str(), \"rb\");\n+        if (file) {\n+            filesystem::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n+            LoadExternalBlockFile(file);\n+            RenameOver(pathBootstrap, pathBootstrapOld);\n+        }\n+    }\n+\n+    delete vFiles;\n+\n+    vnThreadsRunning[THREAD_IMPORT]--;\n+}\n+\n+\n \n \n \n@@ -2512,7 +2561,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n         // Ask the first connected node for block updates\n         static int nAskedForBlocks = 0;\n-        if (!pfrom->fClient && !pfrom->fOneShot &&\n+        if (!pfrom->fClient && !pfrom->fOneShot && !fImporting &&\n             (pfrom->nStartingHeight > (nBestHeight - 144)) &&\n             (pfrom->nVersion < NOBLKS_VERSION_START ||\n              pfrom->nVersion >= NOBLKS_VERSION_END) &&\n@@ -2649,9 +2698,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             if (fDebug)\n                 printf(\"  got inventory: %s  %s\\n\", inv.ToString().c_str(), fAlreadyHave ? \"have\" : \"new\");\n \n-            if (!fAlreadyHave)\n-                pfrom->AskFor(inv);\n-            else if (inv.type == MSG_BLOCK && mapOrphanBlocks.count(inv.hash)) {\n+            if (!fAlreadyHave) {\n+                if (!fImporting)\n+                    pfrom->AskFor(inv);\n+            } else if (inv.type == MSG_BLOCK && mapOrphanBlocks.count(inv.hash)) {\n                 pfrom->PushGetBlocks(pindexBest, GetOrphanRoot(mapOrphanBlocks[inv.hash]));\n             } else if (nInv == nLastBlock) {\n                 // In case we are on a very long side-chain, it is possible that we already have"
      },
      {
        "sha": "ea71baf902ed7e5b0253d4cda0417740c2421355",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66b02c93e69cfeaec6e7fa19a03bfb2649025a56/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66b02c93e69cfeaec6e7fa19a03bfb2649025a56/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=66b02c93e69cfeaec6e7fa19a03bfb2649025a56",
        "patch": "@@ -68,6 +68,7 @@ extern int64 nTimeBestReceived;\n extern CCriticalSection cs_setpwalletRegistered;\n extern std::set<CWallet*> setpwalletRegistered;\n extern unsigned char pchMessageStart[4];\n+extern bool fImporting;\n \n // Settings\n extern int64 nTransactionFee;\n@@ -92,7 +93,7 @@ void PrintBlockTree();\n CBlockIndex* FindBlockByHeight(int nHeight);\n bool ProcessMessages(CNode* pfrom);\n bool SendMessages(CNode* pto, bool fSendTrickle);\n-bool LoadExternalBlockFile(FILE* fileIn);\n+void ThreadImport(void *parg);\n void GenerateBitcoins(bool fGenerate, CWallet* pwallet);\n CBlock* CreateNewBlock(CReserveKey& reservekey);\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);"
      },
      {
        "sha": "5e1564f9ca7c592c7a7acb2049a119b3ac0a0d73",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66b02c93e69cfeaec6e7fa19a03bfb2649025a56/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66b02c93e69cfeaec6e7fa19a03bfb2649025a56/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=66b02c93e69cfeaec6e7fa19a03bfb2649025a56",
        "patch": "@@ -106,6 +106,7 @@ enum threadId\n     THREAD_ADDEDCONNECTIONS,\n     THREAD_DUMPADDRESS,\n     THREAD_RPCHANDLER,\n+    THREAD_IMPORT,\n \n     THREAD_MAX\n };"
      },
      {
        "sha": "0d269ea210876d91ce563e0e07b8e79092e893cb",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66b02c93e69cfeaec6e7fa19a03bfb2649025a56/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66b02c93e69cfeaec6e7fa19a03bfb2649025a56/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=66b02c93e69cfeaec6e7fa19a03bfb2649025a56",
        "patch": "@@ -473,7 +473,7 @@ void BitcoinGUI::setNumConnections(int count)\n void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n {\n     // don't show / hide progress bar and its label if we have no connection to the network\n-    if (!clientModel || clientModel->getNumConnections() == 0)\n+    if (!clientModel || (clientModel->getNumConnections() == 0 && !clientModel->isImporting()))\n     {\n         progressBarLabel->setVisible(false);\n         progressBar->setVisible(false);\n@@ -491,7 +491,7 @@ void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n \n         if (strStatusBarWarnings.isEmpty())\n         {\n-            progressBarLabel->setText(tr(\"Synchronizing with network...\"));\n+            progressBarLabel->setText(tr(clientModel->isImporting() ? \"Importing blocks...\" : \"Synchronizing with network...\"));\n             progressBarLabel->setVisible(true);\n             progressBar->setFormat(tr(\"~%n block(s) remaining\", \"\", nRemainingBlocks));\n             progressBar->setMaximum(nTotalBlocks);"
      },
      {
        "sha": "990b364a94329ee95c902f4c8d930ee884cd3466",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66b02c93e69cfeaec6e7fa19a03bfb2649025a56/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66b02c93e69cfeaec6e7fa19a03bfb2649025a56/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=66b02c93e69cfeaec6e7fa19a03bfb2649025a56",
        "patch": "@@ -103,6 +103,11 @@ bool ClientModel::inInitialBlockDownload() const\n     return IsInitialBlockDownload();\n }\n \n+bool ClientModel::isImporting() const\n+{\n+    return fImporting;\n+}\n+\n int ClientModel::getNumBlocksOfPeers() const\n {\n     return GetNumBlocksOfPeers();"
      },
      {
        "sha": "926390a07a6c9f3707a484c6d15dbee40b3028e4",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66b02c93e69cfeaec6e7fa19a03bfb2649025a56/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66b02c93e69cfeaec6e7fa19a03bfb2649025a56/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=66b02c93e69cfeaec6e7fa19a03bfb2649025a56",
        "patch": "@@ -33,6 +33,8 @@ class ClientModel : public QObject\n     bool isTestNet() const;\n     //! Return true if core is doing initial block download\n     bool inInitialBlockDownload() const;\n+    //! Return true if core is importing blocks\n+    bool isImporting() const;\n     //! Return conservative estimate of total number of blocks, or 0 if unknown\n     int getNumBlocksOfPeers() const;\n     //! Return warnings to be displayed in status bar"
      }
    ]
  }
]