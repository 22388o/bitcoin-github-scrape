[
  {
    "sha": "eeeed51f58402f3afbd72dfc0f6d0a3de720c297",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWVlZDUxZjU4NDAyZjNhZmJkNzJkZmMwZjZkMGEzZGU3MjBjMjk3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-31T11:36:22Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-31T11:36:22Z"
      },
      "message": "test: pep-8 wallet_hd",
      "tree": {
        "sha": "53b75ad11a03511947b1fab0718c0a11b1de7ab9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53b75ad11a03511947b1fab0718c0a11b1de7ab9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eeeed51f58402f3afbd72dfc0f6d0a3de720c297",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeeed51f58402f3afbd72dfc0f6d0a3de720c297",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eeeed51f58402f3afbd72dfc0f6d0a3de720c297",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeeed51f58402f3afbd72dfc0f6d0a3de720c297/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dec067f5a019fbeea0403efcfc501238a114d095",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec067f5a019fbeea0403efcfc501238a114d095",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dec067f5a019fbeea0403efcfc501238a114d095"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 30,
      "deletions": 20
    },
    "files": [
      {
        "sha": "714876f7a226a4cc5448b490ddac6e309646d502",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 30,
        "deletions": 20,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeeed51f58402f3afbd72dfc0f6d0a3de720c297/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeeed51f58402f3afbd72dfc0f6d0a3de720c297/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=eeeed51f58402f3afbd72dfc0f6d0a3de720c297",
        "patch": "@@ -11,7 +11,7 @@\n from test_framework.util import (\n     assert_equal,\n     connect_nodes,\n-    assert_raises_rpc_error\n+    assert_raises_rpc_error,\n )\n \n \n@@ -32,11 +32,11 @@ def run_test(self):\n \n         # create an internal key\n         change_addr = self.nodes[1].getrawchangeaddress()\n-        change_addrV= self.nodes[1].getaddressinfo(change_addr)\n+        change_addrV = self.nodes[1].getaddressinfo(change_addr)\n         if self.options.descriptors:\n             assert_equal(change_addrV[\"hdkeypath\"], \"m/84'/1'/0'/1/0\")\n         else:\n-            assert_equal(change_addrV[\"hdkeypath\"], \"m/0'/1'/0'\") #first internal child key\n+            assert_equal(change_addrV[\"hdkeypath\"], \"m/0'/1'/0'\")  #first internal child key\n \n         # Import a non-HD private key in the HD wallet\n         non_hd_add = 'bcrt1qmevj8zfx0wdvp05cqwkmr6mxkfx60yezwjksmt'\n@@ -58,7 +58,7 @@ def run_test(self):\n             if self.options.descriptors:\n                 assert_equal(hd_info[\"hdkeypath\"], \"m/84'/1'/0'/0/\" + str(i))\n             else:\n-                assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n+                assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/\" + str(i) + \"'\")\n             assert_equal(hd_info[\"hdmasterfingerprint\"], hd_fingerprint)\n             self.nodes[0].sendtoaddress(hd_add, 1)\n             self.nodes[0].generate(1)\n@@ -67,11 +67,11 @@ def run_test(self):\n \n         # create an internal key (again)\n         change_addr = self.nodes[1].getrawchangeaddress()\n-        change_addrV= self.nodes[1].getaddressinfo(change_addr)\n+        change_addrV = self.nodes[1].getaddressinfo(change_addr)\n         if self.options.descriptors:\n             assert_equal(change_addrV[\"hdkeypath\"], \"m/84'/1'/0'/1/1\")\n         else:\n-            assert_equal(change_addrV[\"hdkeypath\"], \"m/0'/1'/1'\") #second internal child key\n+            assert_equal(change_addrV[\"hdkeypath\"], \"m/0'/1'/1'\")  #second internal child key\n \n         self.sync_all()\n         assert_equal(self.nodes[1].getbalance(), NUM_HD_ADDS + 1)\n@@ -82,7 +82,10 @@ def run_test(self):\n         # otherwise node1 would auto-recover all funds in flag the keypool keys as used\n         shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"blocks\"))\n         shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"chainstate\"))\n-        shutil.copyfile(os.path.join(self.nodes[1].datadir, \"hd.bak\"), os.path.join(self.nodes[1].datadir, self.chain, 'wallets', \"wallet.dat\"))\n+        shutil.copyfile(\n+            os.path.join(self.nodes[1].datadir, \"hd.bak\"),\n+            os.path.join(self.nodes[1].datadir, self.chain, 'wallets', \"wallet.dat\"),\n+        )\n         self.start_node(1)\n \n         # Assert that derivation is deterministic\n@@ -93,7 +96,7 @@ def run_test(self):\n             if self.options.descriptors:\n                 assert_equal(hd_info_2[\"hdkeypath\"], \"m/84'/1'/0'/0/\" + str(i))\n             else:\n-                assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n+                assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\" + str(i) + \"'\")\n             assert_equal(hd_info_2[\"hdmasterfingerprint\"], hd_fingerprint)\n         assert_equal(hd_add, hd_add_2)\n         connect_nodes(self.nodes[0], 1)\n@@ -108,7 +111,10 @@ def run_test(self):\n         self.stop_node(1)\n         shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"blocks\"))\n         shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"chainstate\"))\n-        shutil.copyfile(os.path.join(self.nodes[1].datadir, \"hd.bak\"), os.path.join(self.nodes[1].datadir, self.chain, \"wallets\", \"wallet.dat\"))\n+        shutil.copyfile(\n+            os.path.join(self.nodes[1].datadir, \"hd.bak\"),\n+            os.path.join(self.nodes[1].datadir, self.chain, \"wallets\", \"wallet.dat\"),\n+        )\n         self.start_node(1, extra_args=self.extra_args[1])\n         connect_nodes(self.nodes[0], 1)\n         self.sync_all()\n@@ -142,8 +148,9 @@ def run_test(self):\n             new_masterkeyid = self.nodes[1].getwalletinfo()['hdseedid']\n             assert orig_masterkeyid != new_masterkeyid\n             addr = self.nodes[1].getnewaddress()\n-            assert_equal(self.nodes[1].getaddressinfo(addr)['hdkeypath'], 'm/0\\'/0\\'/0\\'') # Make sure the new address is the first from the keypool\n-            self.nodes[1].keypoolrefill(1) # Fill keypool with 1 key\n+            # Make sure the new address is the first from the keypool\n+            assert_equal(self.nodes[1].getaddressinfo(addr)['hdkeypath'], 'm/0\\'/0\\'/0\\'')\n+            self.nodes[1].keypoolrefill(1)  # Fill keypool with 1 key\n \n             # Set a new HD seed on node 1 without flushing the keypool\n             new_seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n@@ -153,13 +160,15 @@ def run_test(self):\n             assert orig_masterkeyid != new_masterkeyid\n             addr = self.nodes[1].getnewaddress()\n             assert_equal(orig_masterkeyid, self.nodes[1].getaddressinfo(addr)['hdseedid'])\n-            assert_equal(self.nodes[1].getaddressinfo(addr)['hdkeypath'], 'm/0\\'/0\\'/1\\'') # Make sure the new address continues previous keypool\n+            # Make sure the new address continues previous keypool\n+            assert_equal(self.nodes[1].getaddressinfo(addr)['hdkeypath'], 'm/0\\'/0\\'/1\\'')\n \n             # Check that the next address is from the new seed\n             self.nodes[1].keypoolrefill(1)\n             next_addr = self.nodes[1].getnewaddress()\n             assert_equal(new_masterkeyid, self.nodes[1].getaddressinfo(next_addr)['hdseedid'])\n-            assert_equal(self.nodes[1].getaddressinfo(next_addr)['hdkeypath'], 'm/0\\'/0\\'/0\\'') # Make sure the new address is not from previous keypool\n+            # Make sure the new address is not from previous keypool\n+            assert_equal(self.nodes[1].getaddressinfo(next_addr)['hdkeypath'], 'm/0\\'/0\\'/0\\'')\n             assert next_addr != addr\n \n             # Sethdseed parameter validity\n@@ -185,13 +194,13 @@ def run_test(self):\n \n             self.nodes[1].createwallet(wallet_name='restore', blank=True)\n             restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n-            restore_rpc.sethdseed(True, seed) # Set to be the same seed as origin_rpc\n-            restore_rpc.sethdseed(True) # Rotate to a new seed, making original `seed` inactive\n+            restore_rpc.sethdseed(True, seed)  # Set to be the same seed as origin_rpc\n+            restore_rpc.sethdseed(True)  # Rotate to a new seed, making original `seed` inactive\n \n             self.nodes[1].createwallet(wallet_name='restore2', blank=True)\n             restore2_rpc = self.nodes[1].get_wallet_rpc('restore2')\n-            restore2_rpc.sethdseed(True, seed) # Set to be the same seed as origin_rpc\n-            restore2_rpc.sethdseed(True) # Rotate to a new seed, making original `seed` inactive\n+            restore2_rpc.sethdseed(True, seed)  # Set to be the same seed as origin_rpc\n+            restore2_rpc.sethdseed(True)  # Rotate to a new seed, making original `seed` inactive\n \n             # Check persistence of inactive seed by reloading restore. restore2 is still loaded to test the case where the wallet is not reloaded\n             restore_rpc.unloadwallet()\n@@ -201,8 +210,8 @@ def run_test(self):\n             # Empty origin keypool and get an address that is beyond the initial keypool\n             origin_rpc.getnewaddress()\n             origin_rpc.getnewaddress()\n-            last_addr = origin_rpc.getnewaddress() # Last address of initial keypool\n-            addr = origin_rpc.getnewaddress() # First address beyond initial keypool\n+            last_addr = origin_rpc.getnewaddress()  # Last address of initial keypool\n+            addr = origin_rpc.getnewaddress()  # First address beyond initial keypool\n \n             # Check that the restored seed has last_addr but does not have addr\n             info = restore_rpc.getaddressinfo(last_addr)\n@@ -266,5 +275,6 @@ def run_test(self):\n             info = restore2_rpc.getaddressinfo(addr)\n             assert_equal(info['ismine'], False)\n \n+\n if __name__ == '__main__':\n-    WalletHDTest().main ()\n+    WalletHDTest().main()"
      }
    ]
  },
  {
    "sha": "fa7d3a88900a800c9eca81b238337d07825a3320",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTdkM2E4ODkwMGE4MDBjOWVjYTgxYjIzODMzN2QwNzgyNWEzMzIw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-31T11:50:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-31T11:51:44Z"
      },
      "message": "test: Add missing sync_blocks to wallet_hd",
      "tree": {
        "sha": "99240934fdb22cbf6d1c6897c23061bf207e7cd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99240934fdb22cbf6d1c6897c23061bf207e7cd2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa7d3a88900a800c9eca81b238337d07825a3320",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUj/nAv/W7I78k5FVBsL/Aqwy7Z6pwuFy5fk5ZmPekq/h2ex7mr9oop2e1cM6wkO\nmc1KGs3qeLlxmliCXWaGON5o273pVD+jjwCsmVJV1b1LDvpxEuLZSn1s2HiFTZ4g\nl9UToTXfnLKBrtKwmU96Ce1/+klmnujiklAtBt356iTHm+q/uYm1ssXekZuhgF4I\n1RlWQKEvXhqU1WBBHbqxCgo38mHBZ4BTsEsBpQQV04zXL5BH5JdX8vEYDcLzXLfH\nVSFoHN/JTUvrsn+gn0h2g7Kd0Y5FUexN421/oAL9MlW/N8rqCYhw3qNC03/ohnjd\nl2Fyp62M3zBq2L91KLUDGvBp71M+0G/ROeJra92O1pdF21tEeLLKS08OvGlqhyzs\n7xdQ4uZNbVI2sc8mYEk7kXz6t85aDtiw6835Lz0X46neA1U8spyZ0E4Zj3qHa7LR\n8PIRdV6/3Sh6dfP18he3Tvqfp7x5Y2h4y2HZ5IA0msNfCfBeIigH9Z9VStcf6ezS\nvQS4Euiu\n=I86M\n-----END PGP SIGNATURE-----",
        "payload": "tree 99240934fdb22cbf6d1c6897c23061bf207e7cd2\nparent eeeed51f58402f3afbd72dfc0f6d0a3de720c297\nauthor MarcoFalke <falke.marco@gmail.com> 1590925819 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1590925904 -0400\n\ntest: Add missing sync_blocks to wallet_hd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7d3a88900a800c9eca81b238337d07825a3320",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7d3a88900a800c9eca81b238337d07825a3320",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7d3a88900a800c9eca81b238337d07825a3320/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eeeed51f58402f3afbd72dfc0f6d0a3de720c297",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeeed51f58402f3afbd72dfc0f6d0a3de720c297",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eeeed51f58402f3afbd72dfc0f6d0a3de720c297"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c441b75652d5f24b1190699635ce9084d1858f73",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7d3a88900a800c9eca81b238337d07825a3320/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7d3a88900a800c9eca81b238337d07825a3320/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=fa7d3a88900a800c9eca81b238337d07825a3320",
        "patch": "@@ -231,6 +231,7 @@ def run_test(self):\n             txid = self.nodes[0].sendtoaddress(addr, 1)\n             origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n             self.nodes[0].generate(1)\n+            self.sync_blocks()\n             origin_rpc.gettransaction(txid)\n             assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, txid)\n             out_of_kp_txid = txid\n@@ -241,6 +242,7 @@ def run_test(self):\n             txid = self.nodes[0].sendtoaddress(last_addr, 1)\n             origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n             self.nodes[0].generate(1)\n+            self.sync_blocks()\n             origin_rpc.gettransaction(txid)\n             restore_rpc.gettransaction(txid)\n             assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, out_of_kp_txid)"
      }
    ]
  }
]