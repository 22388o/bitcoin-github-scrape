practicalswift,2019-11-05 20:58:07,"Wow! That was quick! :)\n\nStrong Concept ACK\n\nThanks for taking the time to get rid of those once and for all :)",https://github.com/bitcoin/bitcoin/pull/17385#issuecomment-550016801,550016801,
laanwj,2019-11-05 21:39:37,"Test failure in `util_tests/util_ChainMerge` explained:\n- This test passes `-notestnet=1` and `-noregtest=1` to the argument parser.\n- Somehow, this ends up as `InterpretBool(""1testnet=1"")`\n- `atoi` returns `1` in this case (evaluating to `true`) because it stops parsing at the first non-digit, our `ParseInt64` fails however and returns `false`.\nThis causes the test to exit with a differen",https://github.com/bitcoin/bitcoin/pull/17385#issuecomment-550033222,550033222,
ryanofsky,2019-11-05 21:51:02,"> **Do we really support `-notestnet=1` and `-noregtest=1`?** I've never seen this syntax.\n\nI'll take a look at this. We could make `-notestnet` and `testnet=0` style options into errors, though this PR is probably not the best place to do it, and maybe there is some use case if you have a configuration file that normally sets testnet, but you want to override it on the command line and use th",https://github.com/bitcoin/bitcoin/pull/17385#issuecomment-550037985,550037985,
laanwj,2019-11-05 21:54:10,"We ideally need a way to signal parse errors from `GetArg` functions, there's a similar situation in `ArgsManager::GetArg(int64)`. Maybe they could return Optional. Out of scope for this PR anyhow, it only needs to do the sane thing here.\n\n> some use case if you have a configuration file that normally sets testnet, but you want to override it on the command line and use the settings on regtest",https://github.com/bitcoin/bitcoin/pull/17385#issuecomment-550039255,550039255,
Empact,2019-11-05 22:35:09,Concept ACK https://github.com/bitcoin/bitcoin/pull/17385/commits/88e83075406493304c3e33c9c1b6a451322ce634,https://github.com/bitcoin/bitcoin/pull/17385#issuecomment-550054169,550054169,
ryanofsky,2019-11-05 22:44:57,"Discussion seems somewhat offtopic here, maybe discuss argument parsing behavior more in #16545.\n\n> We ideally need a way to signal parse errors from `GetArg` functions, there's a similar situation in `ArgsManager::GetArg(int64)`. Maybe they could return Optional. Out of scope for this PR anyhow, it only needs to do the sane thing here.\n\nI could be wrong but I think it would actually be le",https://github.com/bitcoin/bitcoin/pull/17385#issuecomment-550057323,550057323,
laanwj,2019-11-05 22:56:13,"> I think it would be best to save both d78e7be and afb5809 for another PR and not include them here. \n\nI'm fine with adding a release not if you think this is a significant user-facing change, and add a test for these two little functions, but I'd really prefer not to keep either the current behavior or code.",https://github.com/bitcoin/bitcoin/pull/17385#issuecomment-550060888,550060888,
DrahtBot,2019-11-05 23:19:36,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17050](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17050.html) (tests: Add fuzzing harnesses for functions ",https://github.com/bitcoin/bitcoin/pull/17385#issuecomment-550067918,550067918,
ryanofsky,2019-11-06 00:22:32,"> I'm fine with adding a release not if you think this is a significant user-facing change, but I'd really prefer not to keep either the current behavior or code.\n\nMy thinking is that there probably shouldn't be user-facing changes in a PR that's supposed to be a refactor, and that this PR is substantial enough with 17 commits, that pulling out 2 of them to a dedicated PR wouldn't make it wors",https://github.com/bitcoin/bitcoin/pull/17385#issuecomment-550084451,550084451,
laanwj,2019-11-06 00:33:47,"> My thinking is that there probably shouldn't be user-facing changes in a PR that's supposed to be a refactor, and that this PR is substantial enough with 17 commits, that pulling out 2 of them to a dedicated PR wouldn't make it worse off.\n\nMany of the changes in this PR make a subtle difference in the case of invalid input, due to adding strict parse error checking (I mention this in the OP)",https://github.com/bitcoin/bitcoin/pull/17385#issuecomment-550087031,550087031,
ryanofsky,2019-11-06 04:41:26,"I'll review this tomorrow. I think all the commits here that remove uses of C functions to parse strings which are supposed to have a rigid format (numbers in filenames, test strings, descriptors, database properties) are great, and it's great to clean up this code and avoid misusing these C functions.\n\nBut while I'll need to review the PR more carefully to be sure, I think the few changes her",https://github.com/bitcoin/bitcoin/pull/17385#issuecomment-550140652,550140652,
laanwj,2019-11-06 09:06:55,"Closing this until the arguments manager has a way to report errors to the user. I agree that needs to be done. It'd be fairly easy to add error return value to the ArgParse functions for bool and int, however there are so many call sitesâ€¦ and they all assume fast and loose error handling (ie none).\n\n> I could be wrong but I think it would actually be less work, and friendlier to both users an",https://github.com/bitcoin/bitcoin/pull/17385#issuecomment-550215193,550215193,
laanwj,2019-11-06 18:55:35,"Thanks for the review, have reopened and will address your comments.",https://github.com/bitcoin/bitcoin/pull/17385#issuecomment-550450877,550450877,
laanwj,2019-11-07 10:32:22,"Sorry for messing around with this again, but I realized something. Before doing this it is important to have our own, controlled, implementation of `Parse[U]Int(32|64)` that does not call out to libc's locale-dependent functions `strtol`/`strtoll` (these might still accept other kinds of numbers according to locale, for example). Starting here is like building a house on a foundation of jelly.\n",https://github.com/bitcoin/bitcoin/pull/17385#issuecomment-551020697,551020697,
ryanofsky,2019-11-07 16:18:25,"> Before doing this it is important to have our own, controlled, implementation of `Parse[U]Int(32|64)` that does not call out to libc's locale-dependent functions `strtol`/`strtoll` (these might still accept other kinds of numbers according to locale, for example).\n\nAgree this would make the change safer and easier to reason about. I don't think strictly speaking most of the commits actually ",https://github.com/bitcoin/bitcoin/pull/17385#issuecomment-551151064,551151064,
DrahtBot,2019-11-08 23:28:34,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/17385#issuecomment-552030672,552030672,
ryanofsky,2019-11-06 17:32:04,"In commit ""refactor: Replace use of stoul in dbwrapper.cpp"" (df211cb3f02e1eb05eb6289af1688afd96660ca7)\n\nShould probably add log print here similar to above:\n\n```c++\nLogPrint(BCLog::LEVELDB, ""Failed to parse approximate-memory-usage property\n"");\n```\n\nThere is also some risk here that this change could make `DynamicMemoryUsage` now return 0 in cases where it returned nonzero before ",https://github.com/bitcoin/bitcoin/pull/17385#discussion_r343229928,343229928,src/dbwrapper.cpp
ryanofsky,2019-11-06 17:42:55,"In commit ""refactor: Replace use of atoi in CleanupBlockRevFiles"" (f47450e1dcbd4e88efd8e69924da9d20930b399c)\n\nNote: The behavior change here makes this code slightly more robust than before. Now if there are extra files like `blkABC` they will just be deleted and not throw off the count of expected block files that are supposed to be kept. Throwing off the count would cause files we actually w",https://github.com/bitcoin/bitcoin/pull/17385#discussion_r343234969,343234969,src/init.cpp
ryanofsky,2019-11-06 17:47:13,"In commit ""refactor: Replace ad-hoc validity check and atoi in rpcconsole"" (5cdaf4ad65b578c86ee21f9b7a7a48473a2ca735)\n\nSlight change of behavior here with looser parsing since this now accepts `+` or `-` signed values. But this seems fine and doesn't need additional documentation (though it could be mentioned in the commit message) since there is immediate feedback in case of an error.",https://github.com/bitcoin/bitcoin/pull/17385#discussion_r343237060,343237060,src/qt/rpcconsole.cpp
ryanofsky,2019-11-06 17:48:34,"In commit ""util: Add error handling to sequence id in bitcoin-tx"" (f7f2472d16be78bf9c2a7c85e5d40b3b78ef214a)\n\nSlight change of behavior here with stricter parsing. But this seems fine and doesn't need additional documentation (though it could be mentioned in the commit message) since there is immediate feedback in case of an error.",https://github.com/bitcoin/bitcoin/pull/17385#discussion_r343237708,343237708,src/bitcoin-tx.cpp
ryanofsky,2019-11-06 17:52:50,"In commit ""refactor: Replace use of strtol in rest.cpp"" (a8f7502d21d8bbe0934c0c8674cb262d2e913c33)\n\nSlight change of behavior here with stricter parsing: trailing characters no longer allowed for example. But this seems fine and doesn't need additional documentation (though it could be mentioned in the commit message) since there is immediate feedback in case of an error.",https://github.com/bitcoin/bitcoin/pull/17385#discussion_r343239688,343239688,src/rest.cpp
ryanofsky,2019-11-06 17:59:26,"In commit ""refactor: Replace use of atoi in torcontrol"" (a8ded10262c16778aaa87db0d8ba407e55ea0100)\n\nNote: this change looks like an improvement assuming 3 character torcontrol status code is not allowed to contain whitespace or non-digit characters, which seems reasonable but I haven't verified this. Error handling seems consistent with other handling done this function of just ignoring lines ",https://github.com/bitcoin/bitcoin/pull/17385#discussion_r343242913,343242913,src/torcontrol.cpp
ryanofsky,2019-11-06 18:04:51,"In commit ""refactor: Replace use of atoi64 in core_read"" (e4aa1f77b16c248488cc88b661bed69168c0f9e5)\n\nParsing here seems a little looser than before, because `ParseScript` will now accept signed numbers beginning with `+`, while it previously only accepted numbers beginning with `-`. I'm assuming this is reasonable behavior. `ParseScript` appears to only actually be called in tests and by `bitc",https://github.com/bitcoin/bitcoin/pull/17385#discussion_r343245427,343245427,src/core_read.cpp
ryanofsky,2019-11-06 18:07:44,"In commit ""refactor: Replace use of atoi64 in rpc/mining.cpp"" (b7315cb5114477ede6ebb4e4c2303537dcb647b4)\n\nSlight change of behavior here with stricter parsing. For example no whitespace or trailing characters allowed anymore. But this seems fine and doesn't need additional documentation (though it could be mentioned in the commit message) since there is immediate feedback in case of an error.",https://github.com/bitcoin/bitcoin/pull/17385#discussion_r343246724,343246724,src/rpc/mining.cpp
ryanofsky,2019-11-06 18:12:48,"In commit ""refactor: Replace use of atoi64 in moneystr.cpp"" (2fcdd169cfcb1c0fcfb9d8a31fd9459d39a2dfa8)\n\nI might be missing something looking at this code, but it seems like a possible bug if empty string would have been parse successfully as `0` before but now it will fail to parse. Otherwise behavior seems unchanged since `strWhole` can only contain digit characters.",https://github.com/bitcoin/bitcoin/pull/17385#discussion_r343248984,343248984,src/util/moneystr.cpp
ryanofsky,2019-11-06 18:17:59,"In commit ""refactor: Replace use of atoi64 in wallet ReadOrderPos"" (87a3f13dfeff735aadb1091183f5269c9ab1a118)\n\nNote: Slightly stricter parsing is done here (no whitespace or trailing characters allowed) but this should be fine since string just comes from calling `i64tostr`. Could potentially log or return an error though if parsing fails, since it would be an indication of corruption.",https://github.com/bitcoin/bitcoin/pull/17385#discussion_r343251172,343251172,src/wallet/wallet.h
ryanofsky,2019-11-06 18:20:48,"In commit ""refactor: Replace use of atoi64 in timesmart unserialize"" (f4218c26bbbcfc74ae23db9f9a9294447a8e9a6a)\n\nNote: Slightly stricter parsing is done here (no whitespace or trailing characters allowed) but this should be fine since string just comes from calling `strprintf(""%u"")`. Could potentially log or return an error though if parsing fails, since it would be an indication of corruption",https://github.com/bitcoin/bitcoin/pull/17385#discussion_r343252598,343252598,src/wallet/wallet.h
laanwj,2019-11-06 19:12:17,"`ParseIntXX` accepts signed numbers beginning with `+`? whoops, I don't think this was intentional. Thanks for catching this, I think that needs to be documented.\n\nAgree it's not really problematic in this specific case, but will re-add the ""starts with digit or -"" check just in case.",https://github.com/bitcoin/bitcoin/pull/17385#discussion_r343276495,343276495,src/core_read.cpp
laanwj,2019-11-06 19:14:46,Seems we need a test for ParseMoney that exercises that!,https://github.com/bitcoin/bitcoin/pull/17385#discussion_r343277660,343277660,src/util/moneystr.cpp
laanwj,2019-11-06 19:16:33,"I thought about `assert(0)` here, but then reconsidered, because it's not important enough to crash the program. Will add a one-time log message.",https://github.com/bitcoin/bitcoin/pull/17385#discussion_r343278522,343278522,src/dbwrapper.cpp
laanwj,2019-11-06 19:17:14,Silently ignoring the issue isn't nice (it makes things hard to debug). I'll add a log message here.,https://github.com/bitcoin/bitcoin/pull/17385#discussion_r343278864,343278864,src/torcontrol.cpp
