[
  {
    "sha": "930deb9b2c5a8234d430f0a739c97e1fc961ffad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzBkZWI5YjJjNWE4MjM0ZDQzMGYwYTczOWM5N2UxZmM5NjFmZmFk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-18T20:36:39Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-22T18:46:18Z"
      },
      "message": "[tests] skipped tests should clean up after themselves",
      "tree": {
        "sha": "70110241c9c82f3bec8c144d37febf6c37410e8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70110241c9c82f3bec8c144d37febf6c37410e8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/930deb9b2c5a8234d430f0a739c97e1fc961ffad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/930deb9b2c5a8234d430f0a739c97e1fc961ffad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/930deb9b2c5a8234d430f0a739c97e1fc961ffad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/930deb9b2c5a8234d430f0a739c97e1fc961ffad/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4775167cb4b15e6a37290d27009386efb1e5e97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4775167cb4b15e6a37290d27009386efb1e5e97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4775167cb4b15e6a37290d27009386efb1e5e97"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 37,
      "deletions": 25
    },
    "files": [
      {
        "sha": "d8ab4e6f988454c6e07b7824a5c13487f574a43b",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/930deb9b2c5a8234d430f0a739c97e1fc961ffad/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/930deb9b2c5a8234d430f0a739c97e1fc961ffad/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=930deb9b2c5a8234d430f0a739c97e1fc961ffad",
        "patch": "@@ -7,7 +7,7 @@\n import socket\n import sys\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinTestFramework, SkipTest\n from test_framework.util import *\n from test_framework.netutil import *\n \n@@ -56,24 +56,21 @@ def run_allowip_test(self, allow_ips, rpchost, rpcport):\n     def run_test(self):\n         # due to OS-specific network stats queries, this test works only on Linux\n         if not sys.platform.startswith('linux'):\n-            self.log.warning(\"This test can only be run on linux. Skipping test.\")\n-            sys.exit(self.TEST_EXIT_SKIPPED)\n+            raise SkipTest(\"This test can only be run on linux.\")\n         # find the first non-loopback interface for testing\n         non_loopback_ip = None\n         for name,ip in all_interfaces():\n             if ip != '127.0.0.1':\n                 non_loopback_ip = ip\n                 break\n         if non_loopback_ip is None:\n-            self.log.warning(\"This test requires at least one non-loopback IPv4 interface. Skipping test.\")\n-            sys.exit(self.TEST_EXIT_SKIPPED)\n+            raise SkipTest(\"This test requires at least one non-loopback IPv4 interface.\")\n         try:\n             s = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)\n             s.connect((\"::1\",1))\n             s.close\n         except OSError:\n-            self.log.warning(\"This test requires IPv6 support. Skipping test.\")\n-            sys.exit(self.TEST_EXIT_SKIPPED)\n+            raise SkipTest(\"This test requires IPv6 support.\")\n \n         self.log.info(\"Using interface %s for testing\" % non_loopback_ip)\n "
      },
      {
        "sha": "45fa5358cb0eaa9e0fbbe9df0c6333be1c1a126a",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 30,
        "deletions": 12,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/930deb9b2c5a8234d430f0a739c97e1fc961ffad/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/930deb9b2c5a8234d430f0a739c97e1fc961ffad/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=930deb9b2c5a8234d430f0a739c97e1fc961ffad",
        "patch": "@@ -5,6 +5,7 @@\n \"\"\"Base class for RPC testing.\"\"\"\n \n from collections import deque\n+from enum import Enum\n import logging\n import optparse\n import os\n@@ -41,6 +42,15 @@\n )\n from .authproxy import JSONRPCException\n \n+class TestStatus(Enum):\n+    PASSED = 1\n+    FAILED = 2\n+    SKIPPED = 3\n+\n+TEST_EXIT_PASSED = 0\n+TEST_EXIT_FAILED = 1\n+TEST_EXIT_SKIPPED = 77\n+\n class BitcoinTestFramework(object):\n     \"\"\"Base class for a bitcoin test script.\n \n@@ -57,11 +67,6 @@ class BitcoinTestFramework(object):\n     This class also contains various public and private helper methods.\"\"\"\n \n     # Methods to override in subclass test scripts.\n-\n-    TEST_EXIT_PASSED = 0\n-    TEST_EXIT_FAILED = 1\n-    TEST_EXIT_SKIPPED = 77\n-\n     def __init__(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n@@ -139,15 +144,18 @@ def main(self):\n             self.options.tmpdir = tempfile.mkdtemp(prefix=\"test\")\n         self._start_logging()\n \n-        success = False\n+        success = TestStatus.FAILED\n \n         try:\n             self.setup_chain()\n             self.setup_network()\n             self.run_test()\n-            success = True\n+            success = TestStatus.PASSED\n         except JSONRPCException as e:\n             self.log.exception(\"JSONRPC error\")\n+        except SkipTest as e:\n+            self.log.warning(\"Test Skipped: %s\" % e.message)\n+            success = TestStatus.SKIPPED\n         except AssertionError as e:\n             self.log.exception(\"Assertion failed\")\n         except KeyError as e:\n@@ -159,11 +167,12 @@ def main(self):\n \n         if not self.options.noshutdown:\n             self.log.info(\"Stopping nodes\")\n-            self.stop_nodes()\n+            if self.nodes:\n+                self.stop_nodes()\n         else:\n             self.log.info(\"Note: bitcoinds were not stopped and may still be running\")\n \n-        if not self.options.nocleanup and not self.options.noshutdown and success:\n+        if not self.options.nocleanup and not self.options.noshutdown and success != TestStatus.FAILED:\n             self.log.info(\"Cleaning up\")\n             shutil.rmtree(self.options.tmpdir)\n         else:\n@@ -183,13 +192,17 @@ def main(self):\n                     except OSError:\n                         print(\"Opening file %s failed.\" % fn)\n                         traceback.print_exc()\n-        if success:\n+\n+        if success == TestStatus.PASSED:\n             self.log.info(\"Tests successful\")\n-            sys.exit(self.TEST_EXIT_PASSED)\n+            sys.exit(TEST_EXIT_PASSED)\n+        elif success == TestStatus.SKIPPED:\n+            self.log.info(\"Test skipped\")\n+            sys.exit(TEST_EXIT_SKIPPED)\n         else:\n             self.log.error(\"Test failed. Test logging available at %s/test_framework.log\", self.options.tmpdir)\n             logging.shutdown()\n-            sys.exit(self.TEST_EXIT_FAILED)\n+            sys.exit(TEST_EXIT_FAILED)\n \n     # Public helper methods. These can be accessed by the subclass test scripts.\n \n@@ -346,6 +359,11 @@ def _initialize_chain_clean(self, test_dir, num_nodes):\n # 2 binaries: 1 test binary, 1 ref binary\n # n>2 binaries: 1 test binary, n-1 ref binaries\n \n+class SkipTest(Exception):\n+    \"\"\"This exception is raised to skip a test\"\"\"\n+    def __init__(self, message):\n+        self.message = message\n+\n class ComparisonTestFramework(BitcoinTestFramework):\n \n     def __init__(self):"
      },
      {
        "sha": "f4d86f1b4668b9295fc145559b6890b20623b0aa",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/930deb9b2c5a8234d430f0a739c97e1fc961ffad/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/930deb9b2c5a8234d430f0a739c97e1fc961ffad/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=930deb9b2c5a8234d430f0a739c97e1fc961ffad",
        "patch": "@@ -6,9 +6,8 @@\n import configparser\n import os\n import struct\n-import sys\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinTestFramework, SkipTest\n from test_framework.util import *\n \n class ZMQTest (BitcoinTestFramework):\n@@ -24,8 +23,7 @@ def setup_nodes(self):\n         try:\n             import zmq\n         except ImportError:\n-            self.log.warning(\"python3-zmq module not available. Skipping zmq tests!\")\n-            sys.exit(self.TEST_EXIT_SKIPPED)\n+            raise SkipTest(\"python3-zmq module not available.\")\n \n         # Check that bitcoin has been built with ZMQ enabled\n         config = configparser.ConfigParser()\n@@ -34,8 +32,7 @@ def setup_nodes(self):\n         config.read_file(open(self.options.configfile))\n \n         if not config[\"components\"].getboolean(\"ENABLE_ZMQ\"):\n-            self.log.warning(\"bitcoind has not been built with zmq enabled. Skipping zmq tests!\")\n-            sys.exit(self.TEST_EXIT_SKIPPED)\n+            raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n \n         self.zmqContext = zmq.Context()\n         self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)"
      }
    ]
  }
]