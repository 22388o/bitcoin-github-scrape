[
  {
    "sha": "b3489576c28e8e38f1321c1090f7342b75f485c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzQ4OTU3NmMyOGU4ZTM4ZjEzMjFjMTA5MGY3MzQyYjc1ZjQ4NWMw",
    "commit": {
      "author": {
        "name": "Marko Bencun",
        "email": "marko.bencun@monetas.net",
        "date": "2017-06-01T11:58:16Z"
      },
      "committer": {
        "name": "Marko Bencun",
        "email": "marko.bencun@monetas.net",
        "date": "2017-06-10T14:17:02Z"
      },
      "message": "remove the PAIRTYPE macro\n\nReplace all BOOST_FOREACH and Q_FOREACH loops using it with range\nbased loops.",
      "tree": {
        "sha": "e6704d45948a096d8979e77bf52a992916e672b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6704d45948a096d8979e77bf52a992916e672b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3489576c28e8e38f1321c1090f7342b75f485c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3489576c28e8e38f1321c1090f7342b75f485c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3489576c28e8e38f1321c1090f7342b75f485c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3489576c28e8e38f1321c1090f7342b75f485c0/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "76f268b9bd1b69eb7784c5324abbb67f3e395b97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76f268b9bd1b69eb7784c5324abbb67f3e395b97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76f268b9bd1b69eb7784c5324abbb67f3e395b97"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 30,
      "deletions": 33
    },
    "files": [
      {
        "sha": "2b8fb800758043694a1f79ec92b1f85c680f44e8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3489576c28e8e38f1321c1090f7342b75f485c0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3489576c28e8e38f1321c1090f7342b75f485c0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b3489576c28e8e38f1321c1090f7342b75f485c0",
        "patch": "@@ -611,7 +611,7 @@ void CleanupBlockRevFiles()\n     // keeping a separate counter.  Once we hit a gap (or if 0 doesn't exist)\n     // start removing block files.\n     int nContigCounter = 0;\n-    BOOST_FOREACH(const PAIRTYPE(std::string, fs::path)& item, mapBlockFiles) {\n+    for (const auto& item : mapBlockFiles) {\n         if (atoi(item.first) == nContigCounter) {\n             nContigCounter++;\n             continue;"
      },
      {
        "sha": "deba8e36e98ea9eafc189d78ad3822eabffcbf9f",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3489576c28e8e38f1321c1090f7342b75f485c0/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3489576c28e8e38f1321c1090f7342b75f485c0/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=b3489576c28e8e38f1321c1090f7342b75f485c0",
        "patch": "@@ -81,7 +81,7 @@ class AddressTablePriv\n         cachedAddressTable.clear();\n         {\n             LOCK(wallet->cs_wallet);\n-            BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, wallet->mapAddressBook)\n+            for (const auto& item : wallet->mapAddressBook)\n             {\n                 const CBitcoinAddress& address = item.first;\n                 bool fMine = IsMine(*wallet, address.Get());"
      },
      {
        "sha": "2f4d90e02d3784654d00063cbd1d6c21541e18cb",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3489576c28e8e38f1321c1090f7342b75f485c0/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3489576c28e8e38f1321c1090f7342b75f485c0/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=b3489576c28e8e38f1321c1090f7342b75f485c0",
        "patch": "@@ -626,7 +626,7 @@ void CoinControlDialog::updateView()\n     std::map<QString, std::vector<COutput> > mapCoins;\n     model->listCoins(mapCoins);\n \n-    BOOST_FOREACH(const PAIRTYPE(QString, std::vector<COutput>)& coins, mapCoins) {\n+    for (const auto& coins : mapCoins) {\n         CCoinControlWidgetItem *itemWalletAddress = new CCoinControlWidgetItem();\n         itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n         QString sWalletAddress = coins.first;"
      },
      {
        "sha": "c884041784433ee7e2be5ef2299022fe0445eef9",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3489576c28e8e38f1321c1090f7342b75f485c0/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3489576c28e8e38f1321c1090f7342b75f485c0/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=b3489576c28e8e38f1321c1090f7342b75f485c0",
        "patch": "@@ -555,7 +555,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n     QList<std::pair<CScript, CAmount> > sendingTos = request.getPayTo();\n     QStringList addresses;\n \n-    Q_FOREACH(const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n+    for (const auto& sendingTo : sendingTos) {\n         // Extract and check destination addresses\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest)) {"
      },
      {
        "sha": "643446940a2eb45af124acee95a6d58d6a5513c8",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3489576c28e8e38f1321c1090f7342b75f485c0/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3489576c28e8e38f1321c1090f7342b75f485c0/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=b3489576c28e8e38f1321c1090f7342b75f485c0",
        "patch": "@@ -196,7 +196,7 @@ void PaymentServerTests::paymentServerTests()\n     QVERIFY(r.paymentRequest.IsInitialized());\n     // Extract address and amount from the request\n     QList<std::pair<CScript, CAmount> > sendingTos = r.paymentRequest.getPayTo();\n-    Q_FOREACH (const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n+    for (const auto& sendingTo : sendingTos) {\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest))\n             QCOMPARE(PaymentServer::verifyAmount(sendingTo.second), false);"
      },
      {
        "sha": "7d93172fc94ab0c8aa436d4dc59c322e30a8b023",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3489576c28e8e38f1321c1090f7342b75f485c0/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3489576c28e8e38f1321c1090f7342b75f485c0/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=b3489576c28e8e38f1321c1090f7342b75f485c0",
        "patch": "@@ -245,14 +245,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     strHTML += \"<b>\" + tr(\"Output index\") + \":</b> \" + QString::number(rec->getOutputIndex()) + \"<br>\";\n \n     // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n-    Q_FOREACH (const PAIRTYPE(std::string, std::string)& r, wtx.vOrderForm)\n+    for (const auto& r : wtx.vOrderForm)\n         if (r.first == \"Message\")\n             strHTML += \"<br><b>\" + tr(\"Message\") + \":</b><br>\" + GUIUtil::HtmlEscape(r.second, true) + \"<br>\";\n \n     //\n     // PaymentRequest info:\n     //\n-    Q_FOREACH (const PAIRTYPE(std::string, std::string)& r, wtx.vOrderForm)\n+    for (const auto& r : wtx.vOrderForm)\n     {\n         if (r.first == \"PaymentRequest\")\n         {"
      },
      {
        "sha": "0739d690ffb230456c12cb9353ee71cacaf4127d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3489576c28e8e38f1321c1090f7342b75f485c0/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3489576c28e8e38f1321c1090f7342b75f485c0/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=b3489576c28e8e38f1321c1090f7342b75f485c0",
        "patch": "@@ -1261,7 +1261,7 @@ UniValue getchaintips(const JSONRPCRequest& request)\n     std::set<const CBlockIndex*> setOrphans;\n     std::set<const CBlockIndex*> setPrevs;\n \n-    BOOST_FOREACH(const PAIRTYPE(const uint256, CBlockIndex*)& item, mapBlockIndex)\n+    for (const auto& item : mapBlockIndex)\n     {\n         if (!chainActive.Contains(item.second)) {\n             setOrphans.insert(item.second);"
      },
      {
        "sha": "cbe738c1151c90a0090fa2adb3e16fa53abae187",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3489576c28e8e38f1321c1090f7342b75f485c0/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3489576c28e8e38f1321c1090f7342b75f485c0/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=b3489576c28e8e38f1321c1090f7342b75f485c0",
        "patch": "@@ -474,7 +474,7 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n     UniValue localAddresses(UniValue::VARR);\n     {\n         LOCK(cs_mapLocalHost);\n-        BOOST_FOREACH(const PAIRTYPE(CNetAddr, LocalServiceInfo) &item, mapLocalHost)\n+        for (const auto& item : mapLocalHost)\n         {\n             UniValue rec(UniValue::VOBJ);\n             rec.push_back(Pair(\"address\", item.first.ToString()));"
      },
      {
        "sha": "ae6204d27b45fc57e7594e366a0723f48c96b41c",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3489576c28e8e38f1321c1090f7342b75f485c0/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3489576c28e8e38f1321c1090f7342b75f485c0/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=b3489576c28e8e38f1321c1090f7342b75f485c0",
        "patch": "@@ -186,7 +186,7 @@ std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest&\n     jreq.fHelp = true;\n     jreq.params = UniValue();\n \n-    BOOST_FOREACH(const PAIRTYPE(std::string, const CRPCCommand*)& command, vCommands)\n+    for (const auto& command : vCommands)\n     {\n         const CRPCCommand *pcmd = command.second;\n         std::string strMethod = pcmd->name;"
      },
      {
        "sha": "b066df9fad1bd208539849bbebef33df0c482030",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3489576c28e8e38f1321c1090f7342b75f485c0/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3489576c28e8e38f1321c1090f7342b75f485c0/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=b3489576c28e8e38f1321c1090f7342b75f485c0",
        "patch": "@@ -94,7 +94,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::v\n \n     // Scan templates\n     const CScript& script1 = scriptPubKey;\n-    BOOST_FOREACH(const PAIRTYPE(txnouttype, CScript)& tplate, mTemplates)\n+    for (const auto& tplate : mTemplates)\n     {\n         const CScript& script2 = tplate.second;\n         vSolutionsRet.clear();"
      },
      {
        "sha": "08dc69b3aa08ab5918ac95974df0a78addc70ce6",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3489576c28e8e38f1321c1090f7342b75f485c0/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3489576c28e8e38f1321c1090f7342b75f485c0/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=b3489576c28e8e38f1321c1090f7342b75f485c0",
        "patch": "@@ -77,7 +77,7 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n {\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n-    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n+    for (const auto& i : s2) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n         }\n@@ -87,7 +87,7 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n     LogPrintf(\"Current lock order is:\\n\");\n-    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n+    for (const auto& i : s1) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n         }\n@@ -108,7 +108,7 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n \n     (*lockstack).push_back(std::make_pair(c, locklocation));\n \n-    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, (*lockstack)) {\n+    for (const auto& i : *lockstack) {\n         if (i.first == c)\n             break;\n \n@@ -142,14 +142,14 @@ void LeaveCritical()\n std::string LocksHeld()\n {\n     std::string result;\n-    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, *lockstack)\n+    for (const auto& i : *lockstack)\n         result += i.second.ToString() + std::string(\"\\n\");\n     return result;\n }\n \n void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n {\n-    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, *lockstack)\n+    for (const auto& i : *lockstack)\n         if (i.first == cs)\n             return;\n     fprintf(stderr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());"
      },
      {
        "sha": "8b37fe12e08893924f31fe8b4faf65e6854b5223",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3489576c28e8e38f1321c1090f7342b75f485c0/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3489576c28e8e38f1321c1090f7342b75f485c0/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=b3489576c28e8e38f1321c1090f7342b75f485c0",
        "patch": "@@ -19,9 +19,6 @@\n #define UEND(a)             ((unsigned char*)&((&(a))[1]))\n #define ARRAYLEN(array)     (sizeof(array)/sizeof((array)[0]))\n \n-/** This is needed because the foreach macro can't get over the comma in pair<t1, t2> */\n-#define PAIRTYPE(t1, t2)    std::pair<t1, t2>\n-\n /** Used by SanitizeString() */\n enum SafeChars\n {"
      },
      {
        "sha": "c0a73e68299be149ad00e9081cd68a354ec74458",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3489576c28e8e38f1321c1090f7342b75f485c0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3489576c28e8e38f1321c1090f7342b75f485c0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b3489576c28e8e38f1321c1090f7342b75f485c0",
        "patch": "@@ -3330,13 +3330,13 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     // Calculate nChainWork\n     std::vector<std::pair<int, CBlockIndex*> > vSortedByHeight;\n     vSortedByHeight.reserve(mapBlockIndex.size());\n-    BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n+    for (const auto& item : mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n-    BOOST_FOREACH(const PAIRTYPE(int, CBlockIndex*)& item, vSortedByHeight)\n+    for (const auto& item : vSortedByHeight)\n     {\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n@@ -3385,7 +3385,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     // Check presence of blk files\n     LogPrintf(\"Checking all blk files are present...\\n\");\n     std::set<int> setBlkDataFiles;\n-    BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n+    for (const auto& item : mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n         if (pindex->nStatus & BLOCK_HAVE_DATA) {"
      },
      {
        "sha": "e76f2afa7b8f79cddbe38092897a11d09c52e725",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3489576c28e8e38f1321c1090f7342b75f485c0/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3489576c28e8e38f1321c1090f7342b75f485c0/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b3489576c28e8e38f1321c1090f7342b75f485c0",
        "patch": "@@ -95,7 +95,7 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n     }\n     entry.push_back(Pair(\"bip125-replaceable\", rbfStatus));\n \n-    BOOST_FOREACH(const PAIRTYPE(std::string, std::string)& item, wtx.mapValue)\n+    for (const auto& item : wtx.mapValue)\n         entry.push_back(Pair(item.first, item.second));\n }\n \n@@ -1672,7 +1672,7 @@ UniValue listaccounts(const JSONRPCRequest& request)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n \n     UniValue ret(UniValue::VOBJ);\n-    BOOST_FOREACH(const PAIRTYPE(std::string, CAmount)& accountBalance, mapAccountBalances) {\n+    for (const auto& accountBalance : mapAccountBalances) {\n         ret.push_back(Pair(accountBalance.first, ValueFromAmount(accountBalance.second)));\n     }\n     return ret;"
      },
      {
        "sha": "7605f41e7289e484985d3563ac4e91bba82237ef",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3489576c28e8e38f1321c1090f7342b75f485c0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3489576c28e8e38f1321c1090f7342b75f485c0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b3489576c28e8e38f1321c1090f7342b75f485c0",
        "patch": "@@ -804,7 +804,7 @@ void CWallet::MarkDirty()\n {\n     {\n         LOCK(cs_wallet);\n-        BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+        for (auto& item : mapWallet)\n             item.second.MarkDirty();\n     }\n }\n@@ -1525,7 +1525,7 @@ void CWallet::ReacceptWalletTransactions()\n     std::map<int64_t, CWalletTx*> mapSorted;\n \n     // Sort pending wallet transactions based on their initial wallet insertion order\n-    BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+    for (auto& item : mapWallet)\n     {\n         const uint256& wtxid = item.first;\n         CWalletTx& wtx = item.second;\n@@ -1539,9 +1539,9 @@ void CWallet::ReacceptWalletTransactions()\n     }\n \n     // Try to add wallet transactions to memory pool\n-    BOOST_FOREACH(PAIRTYPE(const int64_t, CWalletTx*)& item, mapSorted)\n+    for (const auto& item : mapSorted)\n     {\n-        CWalletTx& wtx = *(item.second);\n+        CWalletTx& wtx = *item.second;\n \n         LOCK(mempool.cs);\n         CValidationState state;\n@@ -1796,15 +1796,15 @@ std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime, CCon\n     LOCK(cs_wallet);\n     // Sort them in chronological order\n     std::multimap<unsigned int, CWalletTx*> mapSorted;\n-    BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+    for (auto& item : mapWallet)\n     {\n         CWalletTx& wtx = item.second;\n         // Don't rebroadcast if newer than nTime:\n         if (wtx.nTimeReceived > nTime)\n             continue;\n         mapSorted.insert(std::make_pair(wtx.nTimeReceived, &wtx));\n     }\n-    BOOST_FOREACH(PAIRTYPE(const unsigned int, CWalletTx*)& item, mapSorted)\n+    for (const auto& item : mapSorted)\n     {\n         CWalletTx& wtx = *item.second;\n         if (wtx.RelayWalletTransaction(connman))\n@@ -3006,7 +3006,7 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n \n         // Delete destdata tuples associated with address\n         std::string strAddress = CBitcoinAddress(address).ToString();\n-        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, mapAddressBook[address].destdata)\n+        for (const auto& item : mapAddressBook[address].destdata)\n         {\n             CWalletDB(*dbw).EraseDestData(strAddress, item.first);\n         }\n@@ -3301,7 +3301,7 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n         {\n             bool any_mine = false;\n             // group all input addresses with each other\n-            BOOST_FOREACH(CTxIn txin, pcoin->tx->vin)\n+            for (CTxIn txin : pcoin->tx->vin)\n             {\n                 CTxDestination address;\n                 if(!IsMine(txin)) /* If this input isn't mine, ignore it */\n@@ -3384,7 +3384,7 @@ std::set<CTxDestination> CWallet::GetAccountAddresses(const std::string& strAcco\n {\n     LOCK(cs_wallet);\n     std::set<CTxDestination> result;\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, mapAddressBook)\n+    for (const auto& item : mapAddressBook)\n     {\n         const CTxDestination& address = item.first;\n         const std::string& strName = item.second.name;"
      }
    ]
  }
]