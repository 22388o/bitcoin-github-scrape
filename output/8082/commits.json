[
  {
    "sha": "4d8993b3469915d8c9ba4cd3b918f16782edf0de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDg5OTNiMzQ2OTkxNWQ4YzliYTRjZDNiOTE4ZjE2NzgyZWRmMGRl",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-05-21T09:45:32Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-05-31T15:35:45Z"
      },
      "message": "Defer inserting into maprelay until just before relaying.\n\nThis reduces the rate of not founds by better matching the far\n end expectations, it also improves privacy by removing the\n ability to use getdata to probe for a node having a txn before\n it has been relayed.",
      "tree": {
        "sha": "5456eaf96d2af1e346f77af0e52d91c710709b12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5456eaf96d2af1e346f77af0e52d91c710709b12"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d8993b3469915d8c9ba4cd3b918f16782edf0de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d8993b3469915d8c9ba4cd3b918f16782edf0de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d8993b3469915d8c9ba4cd3b918f16782edf0de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d8993b3469915d8c9ba4cd3b918f16782edf0de/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "862fd24b40b478f815dcb5df4f705cae2c0a1cf9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/862fd24b40b478f815dcb5df4f705cae2c0a1cf9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/862fd24b40b478f815dcb5df4f705cae2c0a1cf9"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 30,
      "deletions": 31
    },
    "files": [
      {
        "sha": "f9b8ab37e3f6d08039db8a013347c0d45b4ea4b7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 13,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d8993b3469915d8c9ba4cd3b918f16782edf0de/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d8993b3469915d8c9ba4cd3b918f16782edf0de/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4d8993b3469915d8c9ba4cd3b918f16782edf0de",
        "patch": "@@ -80,6 +80,10 @@ uint64_t nPruneTarget = 0;\n int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;\n bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;\n \n+std::map<uint256, CTransaction> mapRelay;\n+std::deque<std::pair<int64_t, uint256> > vRelayExpiration;\n+CCriticalSection cs_mapRelay;\n+\n CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n \n@@ -4501,27 +4505,28 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n             }\n             else if (inv.IsKnownType())\n             {\n+                CTransaction tx;\n                 // Send stream from relay memory\n-                bool pushed = false;\n+                bool push = false;\n                 {\n                     LOCK(cs_mapRelay);\n                     map<uint256, CTransaction>::iterator mi = mapRelay.find(inv.hash);\n                     if (mi != mapRelay.end()) {\n-                        pfrom->PushMessage(inv.GetCommand(), (*mi).second);\n-                        pushed = true;\n+                        tx = (*mi).second;\n+                        push = true;\n                     }\n                 }\n-                if (!pushed && inv.type == MSG_TX) {\n-                    CTransaction tx;\n+                if (!push && inv.type == MSG_TX) {\n                     int64_t txtime;\n                     // To protect privacy, do not answer getdata using the mempool when\n                     // that TX couldn't have been INVed in reply to a MEMPOOL request.\n                     if (mempool.lookup(inv.hash, tx, txtime) && txtime <= pfrom->timeLastMempoolReq) {\n-                        pfrom->PushMessage(NetMsgType::TX, tx);\n-                        pushed = true;\n+                        push = true;\n                     }\n                 }\n-                if (!pushed) {\n+                if (push) {\n+                    pfrom->PushMessage(inv.GetCommand(), tx);\n+                } else {\n                     vNotFound.push_back(inv);\n                 }\n             }\n@@ -5958,14 +5963,26 @@ bool SendMessages(CNode* pto)\n                     if (filterrate && feeRate.GetFeePerK() < filterrate) {\n                         continue;\n                     }\n-                    if (pto->pfilter) {\n-                        CTransaction tx;\n-                        if (!mempool.lookup(hash, tx)) continue;\n-                        if (!pto->pfilter->IsRelevantAndUpdate(tx)) continue;\n-                    }\n+                    CTransaction tx;\n+                    if (!mempool.lookup(hash, tx)) continue;\n+                    if (pto->pfilter && !pto->pfilter->IsRelevantAndUpdate(tx)) continue;\n                     // Send\n                     vInv.push_back(CInv(MSG_TX, hash));\n                     nRelayedTransactions++;\n+                    {\n+                        LOCK(cs_mapRelay);\n+                        // Expire old relay messages\n+                        while (!vRelayExpiration.empty() && vRelayExpiration.front().first < GetTime())\n+                        {\n+                            mapRelay.erase(vRelayExpiration.front().second);\n+                            vRelayExpiration.pop_front();\n+                        }\n+\n+                        auto ret = mapRelay.insert(std::make_pair(hash, tx));\n+                        if (ret.second) {\n+                            vRelayExpiration.push_back(std::make_pair(GetTime() + 15 * 60, hash));\n+                        }\n+                    }\n                     if (vInv.size() == MAX_INV_SZ) {\n                         pto->PushMessage(NetMsgType::INV, vInv);\n                         vInv.clear();"
      },
      {
        "sha": "c09e3aedb6b76614c347d6e0e0e2b61dc27d0142",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d8993b3469915d8c9ba4cd3b918f16782edf0de/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d8993b3469915d8c9ba4cd3b918f16782edf0de/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4d8993b3469915d8c9ba4cd3b918f16782edf0de",
        "patch": "@@ -90,9 +90,6 @@ std::string strSubVersion;\n \n std::vector<CNode*> vNodes;\n CCriticalSection cs_vNodes;\n-std::map<uint256, CTransaction> mapRelay;\n-std::deque<std::pair<int64_t, uint256> > vRelayExpiration;\n-CCriticalSection cs_mapRelay;\n limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n \n static std::deque<std::string> vOneShots;\n@@ -2081,18 +2078,6 @@ instance_of_cnetcleanup;\n void RelayTransaction(const CTransaction& tx)\n {\n     CInv inv(MSG_TX, tx.GetHash());\n-    {\n-        LOCK(cs_mapRelay);\n-        // Expire old relay messages\n-        while (!vRelayExpiration.empty() && vRelayExpiration.front().first < GetTime())\n-        {\n-            mapRelay.erase(vRelayExpiration.front().second);\n-            vRelayExpiration.pop_front();\n-        }\n-\n-        mapRelay.insert(std::make_pair(inv.hash, tx));\n-        vRelayExpiration.push_back(std::make_pair(GetTime() + 15 * 60, inv.hash));\n-    }\n     LOCK(cs_vNodes);\n     BOOST_FOREACH(CNode* pnode, vNodes)\n     {"
      },
      {
        "sha": "403653e8c83a3fd2359f4c1db78f6c085fafb599",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d8993b3469915d8c9ba4cd3b918f16782edf0de/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d8993b3469915d8c9ba4cd3b918f16782edf0de/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=4d8993b3469915d8c9ba4cd3b918f16782edf0de",
        "patch": "@@ -162,9 +162,6 @@ extern int nMaxConnections;\n \n extern std::vector<CNode*> vNodes;\n extern CCriticalSection cs_vNodes;\n-extern std::map<uint256, CTransaction> mapRelay;\n-extern std::deque<std::pair<int64_t, uint256> > vRelayExpiration;\n-extern CCriticalSection cs_mapRelay;\n extern limitedmap<uint256, int64_t> mapAlreadyAskedFor;\n \n extern std::vector<std::string> vAddedNodes;"
      }
    ]
  }
]