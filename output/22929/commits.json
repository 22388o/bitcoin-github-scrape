[
  {
    "sha": "456e350926adde5dabdbc85fc0f017fb29bdadb3",
    "node_id": "C_kwDOABII59oAKDQ1NmUzNTA5MjZhZGRlNWRhYmRiYzg1ZmMwZjAxN2ZiMjliZGFkYjM",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-05T07:45:45Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-05T07:50:38Z"
      },
      "message": "wallet: resolve ambiguity of two ScriptPubKey managers providing same script",
      "tree": {
        "sha": "f0fc56857c3ada5f2dc08f680567fe7b94a23604",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0fc56857c3ada5f2dc08f680567fe7b94a23604"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/456e350926adde5dabdbc85fc0f017fb29bdadb3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/456e350926adde5dabdbc85fc0f017fb29bdadb3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/456e350926adde5dabdbc85fc0f017fb29bdadb3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/456e350926adde5dabdbc85fc0f017fb29bdadb3/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69a66dcd0dacda54d813a61e9d4f61085c2268b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69a66dcd0dacda54d813a61e9d4f61085c2268b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69a66dcd0dacda54d813a61e9d4f61085c2268b2"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 17,
      "deletions": 28
    },
    "files": [
      {
        "sha": "1a872323beb0b1cb9e1f218f1f5271199eaf984f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/456e350926adde5dabdbc85fc0f017fb29bdadb3/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/456e350926adde5dabdbc85fc0f017fb29bdadb3/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=456e350926adde5dabdbc85fc0f017fb29bdadb3",
        "patch": "@@ -3982,8 +3982,12 @@ RPCHelpMan getaddressinfo()\n         ret.pushKV(\"solvable\", false);\n     }\n \n+    const auto& spk_mans = pwallet->GetScriptPubKeyMans(scriptPubKey);\n+    // In most cases there is only one matching ScriptPubKey manager and we can't resolve ambiguity in a better way\n+    ScriptPubKeyMan* spk_man{nullptr};\n+    if (spk_mans.size()) spk_man = *spk_mans.begin();\n \n-    DescriptorScriptPubKeyMan* desc_spk_man = dynamic_cast<DescriptorScriptPubKeyMan*>(pwallet->GetScriptPubKeyMan(scriptPubKey));\n+    DescriptorScriptPubKeyMan* desc_spk_man = dynamic_cast<DescriptorScriptPubKeyMan*>(spk_man);\n     if (desc_spk_man) {\n         std::string desc_str;\n         if (desc_spk_man->GetDescriptorString(desc_str, /* priv */ false)) {\n@@ -3998,7 +4002,6 @@ RPCHelpMan getaddressinfo()\n \n     ret.pushKV(\"ischange\", ScriptIsChange(*pwallet, scriptPubKey));\n \n-    ScriptPubKeyMan* spk_man = pwallet->GetScriptPubKeyMan(scriptPubKey);\n     if (spk_man) {\n         if (const std::unique_ptr<CKeyMetadata> meta = spk_man->GetMetadata(dest)) {\n             ret.pushKV(\"timestamp\", meta->nCreateTime);"
      },
      {
        "sha": "a58f09b95356098a418dde0e26ace913e82f98f0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 21,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/456e350926adde5dabdbc85fc0f017fb29bdadb3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/456e350926adde5dabdbc85fc0f017fb29bdadb3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=456e350926adde5dabdbc85fc0f017fb29bdadb3",
        "patch": "@@ -2253,16 +2253,15 @@ void ReserveDestination::ReturnDestination()\n bool CWallet::DisplayAddress(const CTxDestination& dest)\n {\n     CScript scriptPubKey = GetScriptForDestination(dest);\n-    const auto spk_man = GetScriptPubKeyMan(scriptPubKey);\n-    if (spk_man == nullptr) {\n-        return false;\n-    }\n-    auto signer_spk_man = dynamic_cast<ExternalSignerScriptPubKeyMan*>(spk_man);\n-    if (signer_spk_man == nullptr) {\n-        return false;\n+    for (const auto& spk_man : GetScriptPubKeyMans(scriptPubKey)) {\n+        auto signer_spk_man = dynamic_cast<ExternalSignerScriptPubKeyMan *>(spk_man);\n+        if (signer_spk_man == nullptr) {\n+            continue;\n+        }\n+        ExternalSigner signer = ExternalSignerScriptPubKeyMan::GetExternalSigner();\n+        return signer_spk_man->DisplayAddress(scriptPubKey, signer);\n     }\n-    ExternalSigner signer = ExternalSignerScriptPubKeyMan::GetExternalSigner();\n-    return signer_spk_man->DisplayAddress(scriptPubKey, signer);\n+    return false;\n }\n \n bool CWallet::LockCoin(const COutPoint& output, WalletBatch* batch)\n@@ -3035,9 +3034,10 @@ ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const OutputType& type, bool intern\n     return it->second;\n }\n \n-std::set<ScriptPubKeyMan*> CWallet::GetScriptPubKeyMans(const CScript& script, SignatureData& sigdata) const\n+std::set<ScriptPubKeyMan*> CWallet::GetScriptPubKeyMans(const CScript& script) const\n {\n     std::set<ScriptPubKeyMan*> spk_mans;\n+    SignatureData sigdata;\n     for (const auto& spk_man_pair : m_spk_managers) {\n         if (spk_man_pair.second->CanProvide(script, sigdata)) {\n             spk_mans.insert(spk_man_pair.second.get());\n@@ -3046,17 +3046,6 @@ std::set<ScriptPubKeyMan*> CWallet::GetScriptPubKeyMans(const CScript& script, S\n     return spk_mans;\n }\n \n-ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const CScript& script) const\n-{\n-    SignatureData sigdata;\n-    for (const auto& spk_man_pair : m_spk_managers) {\n-        if (spk_man_pair.second->CanProvide(script, sigdata)) {\n-            return spk_man_pair.second.get();\n-        }\n-    }\n-    return nullptr;\n-}\n-\n ScriptPubKeyMan* CWallet::GetScriptPubKeyMan(const uint256& id) const\n {\n     if (m_spk_managers.count(id) > 0) {"
      },
      {
        "sha": "ff6229b9193e0212353f3a11551f899876b5430e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/456e350926adde5dabdbc85fc0f017fb29bdadb3/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/456e350926adde5dabdbc85fc0f017fb29bdadb3/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=456e350926adde5dabdbc85fc0f017fb29bdadb3",
        "patch": "@@ -805,14 +805,11 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     //! Get the ScriptPubKeyMan for the given OutputType and internal/external chain.\n     ScriptPubKeyMan* GetScriptPubKeyMan(const OutputType& type, bool internal) const;\n \n-    //! Get the ScriptPubKeyMan for a script\n-    ScriptPubKeyMan* GetScriptPubKeyMan(const CScript& script) const;\n+    //! Get all the ScriptPubKeyMans for a script\n+    std::set<ScriptPubKeyMan*> GetScriptPubKeyMans(const CScript& script) const;\n     //! Get the ScriptPubKeyMan by id\n     ScriptPubKeyMan* GetScriptPubKeyMan(const uint256& id) const;\n \n-    //! Get all of the ScriptPubKeyMans for a script given additional information in sigdata (populated by e.g. a psbt)\n-    std::set<ScriptPubKeyMan*> GetScriptPubKeyMans(const CScript& script, SignatureData& sigdata) const;\n-\n     //! Get the SigningProvider for a script\n     std::unique_ptr<SigningProvider> GetSolvingProvider(const CScript& script) const;\n     std::unique_ptr<SigningProvider> GetSolvingProvider(const CScript& script, SignatureData& sigdata) const;"
      }
    ]
  },
  {
    "sha": "03840c20640685295a65ed8c82456e877f668b9b",
    "node_id": "C_kwDOABII59oAKDAzODQwYzIwNjQwNjg1Mjk1YTY1ZWQ4YzgyNDU2ZTg3N2Y2NjhiOWI",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-09-08T07:58:53Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-06T06:23:53Z"
      },
      "message": "Add CWallet::IsInternalScriptPubKeyMan",
      "tree": {
        "sha": "fba69ae3292f898d2c8c5aecb1dc85ac8320f6c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fba69ae3292f898d2c8c5aecb1dc85ac8320f6c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03840c20640685295a65ed8c82456e877f668b9b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03840c20640685295a65ed8c82456e877f668b9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03840c20640685295a65ed8c82456e877f668b9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03840c20640685295a65ed8c82456e877f668b9b/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "456e350926adde5dabdbc85fc0f017fb29bdadb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/456e350926adde5dabdbc85fc0f017fb29bdadb3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/456e350926adde5dabdbc85fc0f017fb29bdadb3"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 33,
      "deletions": 5
    },
    "files": [
      {
        "sha": "16cd2d0e3cf7913deef7093d6ac5d655fd2cb051",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03840c20640685295a65ed8c82456e877f668b9b/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03840c20640685295a65ed8c82456e877f668b9b/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=03840c20640685295a65ed8c82456e877f668b9b",
        "patch": "@@ -1819,11 +1819,10 @@ RPCHelpMan listdescriptors()\n         }\n         spk.pushKV(\"desc\", descriptor);\n         spk.pushKV(\"timestamp\", wallet_descriptor.creation_time);\n-        const bool active = active_spk_mans.count(desc_spk_man) != 0;\n-        spk.pushKV(\"active\", active);\n-        const auto& type = wallet_descriptor.descriptor->GetOutputType();\n-        if (active && type) {\n-            spk.pushKV(\"internal\", wallet->GetScriptPubKeyMan(*type, true) == desc_spk_man);\n+        spk.pushKV(\"active\", active_spk_mans.count(desc_spk_man) != 0);\n+        const auto internal = wallet->IsInternalScriptPubKeyMan(desc_spk_man);\n+        if (internal.has_value()) {\n+            spk.pushKV(\"internal\", *internal);\n         }\n         if (wallet_descriptor.descriptor->IsRange()) {\n             UniValue range(UniValue::VARR);"
      },
      {
        "sha": "c67a8f77da1c09ac01099279946d62853b86b72d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03840c20640685295a65ed8c82456e877f668b9b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03840c20640685295a65ed8c82456e877f668b9b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=03840c20640685295a65ed8c82456e877f668b9b",
        "patch": "@@ -3265,6 +3265,30 @@ DescriptorScriptPubKeyMan* CWallet::GetDescriptorScriptPubKeyMan(const WalletDes\n     return nullptr;\n }\n \n+std::optional<bool> CWallet::IsInternalScriptPubKeyMan(ScriptPubKeyMan* spk_man) const\n+{\n+    // Legacy script pubkey man can't be either external or internal\n+    if (IsLegacy()) {\n+        return std::nullopt;\n+    }\n+\n+    // only active ScriptPubKeyMan can be internal\n+    if (!GetActiveScriptPubKeyMans().count(spk_man)) {\n+        return std::nullopt;\n+    }\n+\n+    const auto desc_spk_man = dynamic_cast<DescriptorScriptPubKeyMan*>(spk_man);\n+    if (!desc_spk_man) {\n+        throw std::runtime_error(std::string(__func__) + \": unexpected ScriptPubKeyMan type.\");\n+    }\n+\n+    LOCK(desc_spk_man->cs_desc_man);\n+    const auto& type = desc_spk_man->GetWalletDescriptor().descriptor->GetOutputType();\n+    assert(type.has_value());\n+\n+    return GetScriptPubKeyMan(*type, /* internal= */ true) == desc_spk_man;\n+}\n+\n ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label, bool internal)\n {\n     AssertLockHeld(cs_wallet);"
      },
      {
        "sha": "27cd3ab230b579e0da3760e38ddfe06022cc6e8a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03840c20640685295a65ed8c82456e877f668b9b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03840c20640685295a65ed8c82456e877f668b9b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=03840c20640685295a65ed8c82456e877f668b9b",
        "patch": "@@ -875,6 +875,11 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     //! Return the DescriptorScriptPubKeyMan for a WalletDescriptor if it is already in the wallet\n     DescriptorScriptPubKeyMan* GetDescriptorScriptPubKeyMan(const WalletDescriptor& desc) const;\n \n+    //! Returns whether the provided ScriptPubKeyMan is internal\n+    //! @param[in] spk_man The ScriptPubKeyMan to test\n+    //! @return contains value only for active DescriptorScriptPubKeyMan, otherwise undefined\n+    std::optional<bool> IsInternalScriptPubKeyMan(ScriptPubKeyMan* spk_man) const;\n+\n     //! Add a descriptor to the wallet, return a ScriptPubKeyMan & associated output type\n     ScriptPubKeyMan* AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label, bool internal) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n };"
      }
    ]
  },
  {
    "sha": "c1b99c088c54eb101c0a28a67237965576ccf5ad",
    "node_id": "C_kwDOABII59oAKGMxYjk5YzA4OGM1NGViMTAxYzBhMjhhNjcyMzc5NjU1NzZjY2Y1YWQ",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-09-08T08:00:18Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-06T06:23:53Z"
      },
      "message": "Return used destinations from ScriptPubKeyMan::MarkUnusedAddresses",
      "tree": {
        "sha": "87a3baa67d999e9dc400bb92791b9d75099de0a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87a3baa67d999e9dc400bb92791b9d75099de0a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1b99c088c54eb101c0a28a67237965576ccf5ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1b99c088c54eb101c0a28a67237965576ccf5ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1b99c088c54eb101c0a28a67237965576ccf5ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1b99c088c54eb101c0a28a67237965576ccf5ad/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03840c20640685295a65ed8c82456e877f668b9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03840c20640685295a65ed8c82456e877f668b9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03840c20640685295a65ed8c82456e877f668b9b"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 53,
      "deletions": 11
    },
    "files": [
      {
        "sha": "2894ff7c614bf139dad61f9f7845b8ad5b80fbc1",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 5,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1b99c088c54eb101c0a28a67237965576ccf5ad/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1b99c088c54eb101c0a28a67237965576ccf5ad/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=c1b99c088c54eb101c0a28a67237965576ccf5ad",
        "patch": "@@ -354,15 +354,22 @@ bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t i\n     return true;\n }\n \n-void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+std::vector<WalletDestination> LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n {\n     LOCK(cs_KeyStore);\n+    std::vector<WalletDestination> result;\n     // extract addresses and check if they match with an unused keypool key\n     for (const auto& keyid : GetAffectedKeys(script, *this)) {\n         std::map<CKeyID, int64_t>::const_iterator mi = m_pool_key_to_index.find(keyid);\n         if (mi != m_pool_key_to_index.end()) {\n             WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool keys up to this key as used\\n\", __func__);\n-            MarkReserveKeysAsUsed(mi->second);\n+            for (const auto& keypool : MarkReserveKeysAsUsed(mi->second)) {\n+                // derive all possible destinations as any of them could have been used\n+                for (const auto& type : LEGACY_OUTPUT_TYPES) {\n+                    const auto& dest = GetDestinationForKey(keypool.vchPubKey, type);\n+                    result.push_back({dest, keypool.fInternal});\n+                }\n+            }\n \n             if (!TopUp()) {\n                 WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n@@ -384,6 +391,8 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n             }\n         }\n     }\n+\n+    return result;\n }\n \n void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n@@ -1427,14 +1436,15 @@ void LegacyScriptPubKeyMan::LearnAllRelatedScripts(const CPubKey& key)\n     LearnRelatedScripts(key, OutputType::P2SH_SEGWIT);\n }\n \n-void LegacyScriptPubKeyMan::MarkReserveKeysAsUsed(int64_t keypool_id)\n+std::vector<CKeyPool> LegacyScriptPubKeyMan::MarkReserveKeysAsUsed(int64_t keypool_id)\n {\n     AssertLockHeld(cs_KeyStore);\n     bool internal = setInternalKeyPool.count(keypool_id);\n     if (!internal) assert(setExternalKeyPool.count(keypool_id) || set_pre_split_keypool.count(keypool_id));\n     std::set<int64_t> *setKeyPool = internal ? &setInternalKeyPool : (set_pre_split_keypool.empty() ? &setExternalKeyPool : &set_pre_split_keypool);\n     auto it = setKeyPool->begin();\n \n+    std::vector<CKeyPool> result;\n     WalletBatch batch(m_storage.GetDatabase());\n     while (it != std::end(*setKeyPool)) {\n         const int64_t& index = *(it);\n@@ -1448,7 +1458,10 @@ void LegacyScriptPubKeyMan::MarkReserveKeysAsUsed(int64_t keypool_id)\n         batch.ErasePool(index);\n         WalletLogPrintf(\"keypool index %d removed\\n\", index);\n         it = setKeyPool->erase(it);\n+        result.push_back(std::move(keypool));\n     }\n+\n+    return result;\n }\n \n std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider)\n@@ -1820,19 +1833,32 @@ bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n     return true;\n }\n \n-void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+std::vector<WalletDestination> DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n {\n     LOCK(cs_desc_man);\n+    std::vector<WalletDestination> result;\n     if (IsMine(script)) {\n         int32_t index = m_map_script_pub_keys[script];\n         if (index >= m_wallet_descriptor.next_index) {\n             WalletLogPrintf(\"%s: Detected a used keypool item at index %d, mark all keypool items up to this item as used\\n\", __func__, index);\n-            m_wallet_descriptor.next_index = index + 1;\n+            auto out_keys = std::make_unique<FlatSigningProvider>();\n+            std::vector<CScript> scripts_temp;\n+            while (index >= m_wallet_descriptor.next_index) {\n+                if (!m_wallet_descriptor.descriptor->ExpandFromCache(m_wallet_descriptor.next_index, m_wallet_descriptor.cache, scripts_temp, *out_keys)) {\n+                    throw std::runtime_error(std::string(__func__) + \": Unable to expand descriptor from cache\");\n+                }\n+                CTxDestination dest;\n+                ExtractDestination(scripts_temp[0], dest);\n+                result.push_back({dest, std::nullopt});\n+                m_wallet_descriptor.next_index++;\n+            }\n         }\n         if (!TopUp()) {\n             WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n         }\n     }\n+\n+    return result;\n }\n \n void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)"
      },
      {
        "sha": "10def20d79997abec3721866d885a1d649eaa685",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 22,
        "deletions": 6,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1b99c088c54eb101c0a28a67237965576ccf5ad/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1b99c088c54eb101c0a28a67237965576ccf5ad/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=c1b99c088c54eb101c0a28a67237965576ccf5ad",
        "patch": "@@ -148,6 +148,12 @@ class CKeyPool\n     }\n };\n \n+struct WalletDestination\n+{\n+    CTxDestination dest;\n+    std::optional<bool> internal;\n+};\n+\n /*\n  * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n  * It contains the scripts and keys related to the scriptPubKeys it manages.\n@@ -180,8 +186,14 @@ class ScriptPubKeyMan\n       */\n     virtual bool TopUp(unsigned int size = 0) { return false; }\n \n-    //! Mark unused addresses as being used\n-    virtual void MarkUnusedAddresses(const CScript& script) {}\n+    /** Mark unused addresses as being used\n+     * Affects all keys up to and including the one determined by provided script.\n+     *\n+     * @param script determines the last key to mark as used\n+     *\n+     * @return All of the addresses affected\n+     */\n+    virtual std::vector<WalletDestination> MarkUnusedAddresses(const CScript& script) { return {}; }\n \n     /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n       * Returns false if already setup or setup fails, true if setup is successful\n@@ -356,7 +368,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     bool TopUp(unsigned int size = 0) override;\n \n-    void MarkUnusedAddresses(const CScript& script) override;\n+    std::vector<WalletDestination> MarkUnusedAddresses(const CScript& script) override;\n \n     //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n     void UpgradeKeyMetadata();\n@@ -481,9 +493,13 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     void LearnAllRelatedScripts(const CPubKey& key);\n \n     /**\n-     * Marks all keys in the keypool up to and including reserve_key as used.\n+     * Marks all keys in the keypool up to and including the provided key as used.\n+     *\n+     * @param keypool_id determines the last key to mark as used\n+     *\n+     * @return All affected keys\n      */\n-    void MarkReserveKeysAsUsed(int64_t keypool_id) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    std::vector<CKeyPool> MarkReserveKeysAsUsed(int64_t keypool_id) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n     const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n \n     std::set<CKeyID> GetKeys() const override;\n@@ -563,7 +579,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     // (with or without private keys), the \"keypool\" is a single xpub.\n     bool TopUp(unsigned int size = 0) override;\n \n-    void MarkUnusedAddresses(const CScript& script) override;\n+    std::vector<WalletDestination> MarkUnusedAddresses(const CScript& script) override;\n \n     bool IsHDEnabled() const override;\n "
      }
    ]
  },
  {
    "sha": "9f3a622b1cea37e452560f2f82d8e82d3b48a73a",
    "node_id": "C_kwDOABII59oAKDlmM2E2MjJiMWNlYTM3ZTQ1MjU2MGYyZjgyZDhlODJkM2I0OGE3M2E",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-09-09T06:31:47Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-06T08:01:48Z"
      },
      "message": "Automatically add labels to detected receiving addresses",
      "tree": {
        "sha": "b8baef26ffba8298f823525f009b2eecc307a0dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8baef26ffba8298f823525f009b2eecc307a0dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f3a622b1cea37e452560f2f82d8e82d3b48a73a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f3a622b1cea37e452560f2f82d8e82d3b48a73a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f3a622b1cea37e452560f2f82d8e82d3b48a73a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f3a622b1cea37e452560f2f82d8e82d3b48a73a/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1b99c088c54eb101c0a28a67237965576ccf5ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1b99c088c54eb101c0a28a67237965576ccf5ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1b99c088c54eb101c0a28a67237965576ccf5ad"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 17,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0418cf4c9b60a23e6134c9333cac585fd69b01e0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 2,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f3a622b1cea37e452560f2f82d8e82d3b48a73a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f3a622b1cea37e452560f2f82d8e82d3b48a73a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9f3a622b1cea37e452560f2f82d8e82d3b48a73a",
        "patch": "@@ -1062,8 +1062,23 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Co\n \n             // loop though all outputs\n             for (const CTxOut& txout: tx.vout) {\n-                for (const auto& spk_man_pair : m_spk_managers) {\n-                    spk_man_pair.second->MarkUnusedAddresses(txout.scriptPubKey);\n+                for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n+                    for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n+                        // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n+                        if (!dest.internal.has_value()) {\n+                            dest.internal = IsInternalScriptPubKeyMan(spk_man);\n+                        }\n+\n+                        // skip if can't determine whether it's a receiving address or not\n+                        if (!dest.internal.has_value()) continue;\n+\n+                        // If this is a receiving address and it's not in the address book yet\n+                        // (e.g. it wasn't generated on this node or we're restoring from backup)\n+                        // add it to the address book for proper transaction accounting\n+                        if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n+                            SetAddressBook(dest.dest, \"\", \"receive\");\n+                        }\n+                    }\n                 }\n             }\n "
      }
    ]
  },
  {
    "sha": "d04566415e16ae685af066384f346dff522c068f",
    "node_id": "C_kwDOABII59oAKGQwNDU2NjQxNWUxNmFlNjg1YWYwNjYzODRmMzQ2ZGZmNTIyYzA2OGY",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-09-09T06:32:13Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-06T08:01:53Z"
      },
      "message": "Add to spends only transcations from me",
      "tree": {
        "sha": "81418490811d235d0dc64a8a0cb06e6d033695a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81418490811d235d0dc64a8a0cb06e6d033695a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d04566415e16ae685af066384f346dff522c068f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d04566415e16ae685af066384f346dff522c068f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d04566415e16ae685af066384f346dff522c068f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d04566415e16ae685af066384f346dff522c068f/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f3a622b1cea37e452560f2f82d8e82d3b48a73a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f3a622b1cea37e452560f2f82d8e82d3b48a73a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f3a622b1cea37e452560f2f82d8e82d3b48a73a"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 18,
      "deletions": 11
    },
    "files": [
      {
        "sha": "29d0ad7d4c1b5b31d65417fa33a91bafd70b2784",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 10,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d04566415e16ae685af066384f346dff522c068f/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d04566415e16ae685af066384f346dff522c068f/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=d04566415e16ae685af066384f346dff522c068f",
        "patch": "@@ -800,30 +800,35 @@ BOOST_FIXTURE_TEST_CASE(ZapSelectTx, TestChain100Setup)\n     context.args = &gArgs;\n     context.chain = m_node.chain.get();\n     auto wallet = TestLoadWallet(context);\n-    CKey key;\n-    key.MakeNewKey(true);\n-    AddKey(*wallet, key);\n+    AddKey(*wallet, coinbaseKey);\n \n-    std::string error;\n+    // rescan to ensure coinbase transactions from test fixture are picked up by the wallet\n+    {\n+        WalletRescanReserver reserver(*wallet);\n+        reserver.reserve();\n+        wallet->ScanForWalletTransactions(m_node.chain->getBlockHash(0), 0, /* max height= */ {}, reserver, /* update= */ true);\n+    }\n+    // create one more block to get the first block coinbase to maturity\n     m_coinbase_txns.push_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n-    auto block_tx = TestSimpleSpend(*m_coinbase_txns[0], 0, coinbaseKey, GetScriptForRawPubKey(key.GetPubKey()));\n-    CreateAndProcessBlock({block_tx}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n+    // spend first coinbase tx\n+    auto spend_tx = TestSimpleSpend(*m_coinbase_txns[0], 0, coinbaseKey, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n+    CreateAndProcessBlock({spend_tx}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n \n     SyncWithValidationInterfaceQueue();\n \n     {\n-        auto block_hash = block_tx.GetHash();\n+        auto spend_tx_hash = spend_tx.GetHash();\n         auto prev_hash = m_coinbase_txns[0]->GetHash();\n \n         LOCK(wallet->cs_wallet);\n         BOOST_CHECK(wallet->HasWalletSpend(prev_hash));\n-        BOOST_CHECK_EQUAL(wallet->mapWallet.count(block_hash), 1u);\n+        BOOST_CHECK_EQUAL(wallet->mapWallet.count(spend_tx_hash), 1u);\n \n-        std::vector<uint256> vHashIn{ block_hash }, vHashOut;\n+        std::vector<uint256> vHashIn{spend_tx_hash}, vHashOut;\n         BOOST_CHECK_EQUAL(wallet->ZapSelectTx(vHashIn, vHashOut), DBErrors::LOAD_OK);\n \n         BOOST_CHECK(!wallet->HasWalletSpend(prev_hash));\n-        BOOST_CHECK_EQUAL(wallet->mapWallet.count(block_hash), 0u);\n+        BOOST_CHECK_EQUAL(wallet->mapWallet.count(spend_tx_hash), 0u);\n     }\n \n     TestUnloadWallet(std::move(wallet));"
      },
      {
        "sha": "339af292e7b3b07adcd6c0c675817c2236c659f7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d04566415e16ae685af066384f346dff522c068f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d04566415e16ae685af066384f346dff522c068f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d04566415e16ae685af066384f346dff522c068f",
        "patch": "@@ -915,7 +915,9 @@ CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmatio\n         wtx.nOrderPos = IncOrderPosNext(&batch);\n         wtx.m_it_wtxOrdered = wtxOrdered.insert(std::make_pair(wtx.nOrderPos, &wtx));\n         wtx.nTimeSmart = ComputeTimeSmart(wtx, rescanning_old_block);\n-        AddToSpends(hash, &batch);\n+        if (IsFromMe(*tx.get())) {\n+            AddToSpends(hash);\n+        }\n     }\n \n     if (!fInsertedNew)"
      }
    ]
  },
  {
    "sha": "3d71d16d1eb4173c70d4c294559fc2365e189856",
    "node_id": "C_kwDOABII59oAKDNkNzFkMTZkMWViNDE3M2M3MGQ0YzI5NDU1OWZjMjM2NWUxODk4NTY",
    "commit": {
      "author": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-09-09T07:33:56Z"
      },
      "committer": {
        "name": "S3RK",
        "email": "1466284+S3RK@users.noreply.github.com",
        "date": "2021-10-06T08:01:53Z"
      },
      "message": "test: listtranscations with externally generated addresses",
      "tree": {
        "sha": "7d59b7f2f20608dd9fcdd3961072919348a57145",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d59b7f2f20608dd9fcdd3961072919348a57145"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d71d16d1eb4173c70d4c294559fc2365e189856",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d71d16d1eb4173c70d4c294559fc2365e189856",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d71d16d1eb4173c70d4c294559fc2365e189856",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d71d16d1eb4173c70d4c294559fc2365e189856/comments",
    "author": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "S3RK",
      "id": 1466284,
      "node_id": "MDQ6VXNlcjE0NjYyODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1466284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/S3RK",
      "html_url": "https://github.com/S3RK",
      "followers_url": "https://api.github.com/users/S3RK/followers",
      "following_url": "https://api.github.com/users/S3RK/following{/other_user}",
      "gists_url": "https://api.github.com/users/S3RK/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/S3RK/subscriptions",
      "organizations_url": "https://api.github.com/users/S3RK/orgs",
      "repos_url": "https://api.github.com/users/S3RK/repos",
      "events_url": "https://api.github.com/users/S3RK/events{/privacy}",
      "received_events_url": "https://api.github.com/users/S3RK/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d04566415e16ae685af066384f346dff522c068f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d04566415e16ae685af066384f346dff522c068f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d04566415e16ae685af066384f346dff522c068f"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 64,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f55785d5ff46165dc3364ac7322ca6a880fd91ca",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 64,
        "deletions": 2,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d71d16d1eb4173c70d4c294559fc2365e189856/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d71d16d1eb4173c70d4c294559fc2365e189856/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=3d71d16d1eb4173c70d4c294559fc2365e189856",
        "patch": "@@ -3,6 +3,10 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the listtransactions API.\"\"\"\n+\n+import shutil\n+import os\n+\n from decimal import Decimal\n \n from test_framework.messages import (\n@@ -17,7 +21,7 @@\n \n class ListTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n-        self.num_nodes = 2\n+        self.num_nodes = 3\n         # This test isn't testing txn relay/timing, so set whitelist on the\n         # peers for instant txn relay. This speeds up the test run time 2-3x.\n         self.extra_args = [[\"-whitelist=noban@127.0.0.1\"]] * self.num_nodes\n@@ -104,7 +108,7 @@ def run_test(self):\n                                 {\"txid\": txid, \"label\": \"watchonly\"})\n \n         self.run_rbf_opt_in_test()\n-\n+        self.run_externally_generated_address_test()\n \n     def run_rbf_opt_in_test(self):\n         \"\"\"Test the opt-in-rbf flag for sent and received transactions.\"\"\"\n@@ -210,5 +214,63 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         assert_equal(self.nodes[0].gettransaction(txid_3b)[\"bip125-replaceable\"], \"no\")\n         assert_equal(self.nodes[0].gettransaction(txid_4)[\"bip125-replaceable\"], \"unknown\")\n \n+    def run_externally_generated_address_test(self):\n+        \"\"\"Test behavior when receiving address is not in the address book.\"\"\"\n+\n+        self.log.info(\"Setup the same wallet on two nodes\")\n+        # refill keypool otherwise the second node wouldn't recognize addresses generated on the first nodes\n+        self.nodes[0].keypoolrefill(1000)\n+        self.stop_nodes()\n+        wallet0 = os.path.join(self.nodes[0].datadir, self.chain, self.default_wallet_name, \"wallet.dat\")\n+        wallet2 = os.path.join(self.nodes[2].datadir, self.chain, self.default_wallet_name, \"wallet.dat\")\n+        shutil.copyfile(wallet0, wallet2)\n+        self.start_nodes()\n+        # reconnect nodes\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(1, 2)\n+        self.connect_nodes(2, 0)\n+\n+        addr1 = self.nodes[0].getnewaddress(\"pizza1\", 'legacy')\n+        addr2 = self.nodes[0].getnewaddress(\"pizza2\", 'p2sh-segwit')\n+        addr3 = self.nodes[0].getnewaddress(\"pizza3\", 'bech32')\n+\n+        self.log.info(\"Send to externally generated addresses\")\n+        # send to an address beyond the next to be generated to test the keypool gap\n+        self.nodes[1].sendtoaddress(addr3, \"0.001\")\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+\n+        # send to an address that is already marked as used due to the keypool gap mechanics\n+        self.nodes[1].sendtoaddress(addr2, \"0.001\")\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+\n+        # send to self transaction\n+        self.nodes[0].sendtoaddress(addr1, \"0.001\")\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        self.log.info(\"Verify listtransactions is the same regardless of where the address was generated\")\n+        transactions0 = self.nodes[0].listtransactions()\n+        transactions2 = self.nodes[2].listtransactions()\n+\n+        # normalize results: remove fields that normally could differ and sort\n+        def normalize_list(txs):\n+            for tx in txs:\n+                tx.pop('label', None)\n+                tx.pop('time', None)\n+                tx.pop('timereceived', None)\n+            txs.sort(key=lambda x: x['txid'])\n+\n+        normalize_list(transactions0)\n+        normalize_list(transactions2)\n+        assert_equal(transactions0, transactions2)\n+\n+        self.log.info(\"Verify labels are persistent on the node generated the addresses\")\n+        assert_equal(['pizza1'], self.nodes[0].getaddressinfo(addr1)['labels'])\n+        assert_equal(['pizza2'], self.nodes[0].getaddressinfo(addr2)['labels'])\n+        assert_equal(['pizza3'], self.nodes[0].getaddressinfo(addr3)['labels'])\n+\n+\n if __name__ == '__main__':\n     ListTransactionsTest().main()"
      }
    ]
  }
]