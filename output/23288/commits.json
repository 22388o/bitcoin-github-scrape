[
  {
    "sha": "a5595b1320d0ebd2c60833286799ee42108a7c01",
    "node_id": "C_kwDOABII59oAKGE1NTk1YjEzMjBkMGViZDJjNjA4MzMyODY3OTllZTQyMTA4YTdjMDE",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-12T22:50:47Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-15T18:49:45Z"
      },
      "message": "tests: Remove global vCoins and testWallet from coinselector_tests\n\nTo avoid issues with test data leaking across tests cases, the global\nvCoins and testWallet are removed from coinselector_tests and all of the\nrelevant functions reworked to not need them.",
      "tree": {
        "sha": "3ce450b640c2c581a4770b7bb759ffdb474fc041",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ce450b640c2c581a4770b7bb759ffdb474fc041"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5595b1320d0ebd2c60833286799ee42108a7c01",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5595b1320d0ebd2c60833286799ee42108a7c01",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5595b1320d0ebd2c60833286799ee42108a7c01",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5595b1320d0ebd2c60833286799ee42108a7c01/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02ccf1086ea02635d59282e5dd2b3eeb35484753",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02ccf1086ea02635d59282e5dd2b3eeb35484753",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02ccf1086ea02635d59282e5dd2b3eeb35484753"
      }
    ],
    "stats": {
      "total": 397,
      "additions": 196,
      "deletions": 201
    },
    "files": [
      {
        "sha": "6b4c2a2725f0a8ebdb5de2fe10601f4f9a7755db",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 196,
        "deletions": 201,
        "changes": 397,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5595b1320d0ebd2c60833286799ee42108a7c01/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5595b1320d0ebd2c60833286799ee42108a7c01/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=a5595b1320d0ebd2c60833286799ee42108a7c01",
        "patch": "@@ -28,19 +28,9 @@ BOOST_FIXTURE_TEST_SUITE(coinselector_tests, WalletTestingSetup)\n \n typedef std::set<CInputCoin> CoinSet;\n \n-static std::vector<COutput> vCoins;\n-static NodeContext testNode;\n-static auto testChain = interfaces::MakeChain(testNode);\n-static CWallet testWallet(testChain.get(), \"\", CreateDummyWalletDatabase());\n-static CAmount balance = 0;\n-\n-CoinEligibilityFilter filter_standard(1, 6, 0);\n-CoinEligibilityFilter filter_confirmed(1, 1, 0);\n-CoinEligibilityFilter filter_standard_extra(6, 6, 0);\n-CoinSelectionParams coin_selection_params(/* change_output_size= */ 0,\n-                                          /* change_spend_size= */ 0, /* effective_feerate= */ CFeeRate(0),\n-                                          /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n-                                          /* tx_noinputs_size= */ 0, /* avoid_partial= */ false);\n+static const CoinEligibilityFilter filter_standard(1, 6, 0);\n+static const CoinEligibilityFilter filter_confirmed(1, 1, 0);\n+static const CoinEligibilityFilter filter_standard_extra(6, 6, 0);\n \n static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n {\n@@ -62,9 +52,8 @@ static void add_coin(const CAmount& nValue, int nInput, CoinSet& set, CAmount fe\n     set.insert(coin);\n }\n \n-static void add_coin(CWallet& wallet, const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0, bool spendable = false)\n+static void add_coin(std::vector<COutput>& coins, CWallet& wallet, const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0, bool spendable = false)\n {\n-    balance += nValue;\n     static int nextLockTime = 0;\n     CMutableTransaction tx;\n     tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n@@ -89,17 +78,7 @@ static void add_coin(CWallet& wallet, const CAmount& nValue, int nAge = 6*24, bo\n         wtx->m_is_cache_empty = false;\n     }\n     COutput output(wallet, *wtx, nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n-    vCoins.push_back(output);\n-}\n-static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0, bool spendable = false)\n-{\n-    add_coin(testWallet, nValue, nAge, fIsFromMe, nInput, spendable);\n-}\n-\n-static void empty_wallet(void)\n-{\n-    vCoins.clear();\n-    balance = 0;\n+    coins.push_back(output);\n }\n \n static bool equal_sets(CoinSet a, CoinSet b)\n@@ -142,20 +121,20 @@ inline std::vector<OutputGroup>& GroupCoins(const std::vector<COutput>& coins)\n     return static_groups;\n }\n \n-inline std::vector<OutputGroup>& KnapsackGroupOutputs(const CoinEligibilityFilter& filter)\n+inline std::vector<OutputGroup>& KnapsackGroupOutputs(const std::vector<COutput>& coins, CWallet& wallet, const CoinEligibilityFilter& filter)\n {\n+    CoinSelectionParams coin_selection_params(/* change_output_size= */ 0,\n+                                              /* change_spend_size= */ 0, /* effective_feerate= */ CFeeRate(0),\n+                                              /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n+                                              /* tx_noinputs_size= */ 0, /* avoid_partial= */ false);\n     static std::vector<OutputGroup> static_groups;\n-    static_groups = GroupOutputs(testWallet, vCoins, coin_selection_params, filter, /* positive_only */false);\n+    static_groups = GroupOutputs(wallet, coins, coin_selection_params, filter, /* positive_only */false);\n     return static_groups;\n }\n \n // Branch and bound coin selection tests\n BOOST_AUTO_TEST_CASE(bnb_search_test)\n {\n-\n-    LOCK(testWallet.cs_wallet);\n-    testWallet.SetupLegacyScriptPubKeyMan();\n-\n     // Setup\n     std::vector<CInputCoin> utxo_pool;\n     CoinSet selection;\n@@ -288,276 +267,290 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n                                                   /* change_spend_size= */ 0, /* effective_feerate= */ CFeeRate(3000),\n                                                   /* long_term_feerate= */ CFeeRate(1000), /* discard_feerate= */ CFeeRate(1000),\n                                                   /* tx_noinputs_size= */ 0, /* avoid_partial= */ false);\n-    CoinSet setCoinsRet;\n-    CAmount nValueRet;\n-    empty_wallet();\n-    add_coin(1);\n-    vCoins.at(0).nInputBytes = 40; // Make sure that it has a negative effective value. The next check should assert if this somehow got through. Otherwise it will fail\n-    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(vCoins), 1 * CENT, coin_selection_params_bnb.m_cost_of_change, setCoinsRet, nValueRet));\n-\n-    // Test fees subtracted from output:\n-    empty_wallet();\n-    add_coin(1 * CENT);\n-    vCoins.at(0).nInputBytes = 40;\n-    coin_selection_params_bnb.m_subtract_fee_outputs = true;\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(vCoins), 1 * CENT, coin_selection_params_bnb.m_cost_of_change, setCoinsRet, nValueRet));\n-    BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);\n-\n-    // Make sure that can use BnB when there are preset inputs\n-    empty_wallet();\n     {\n         std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n         wallet->LoadWallet();\n         wallet->SetupLegacyScriptPubKeyMan();\n         LOCK(wallet->cs_wallet);\n-        add_coin(*wallet, 5 * CENT, 6 * 24, false, 0, true);\n-        add_coin(*wallet, 3 * CENT, 6 * 24, false, 0, true);\n-        add_coin(*wallet, 2 * CENT, 6 * 24, false, 0, true);\n+\n+        std::vector<COutput> coins;\n+        CoinSet setCoinsRet;\n+        CAmount nValueRet;\n+\n+        add_coin(coins, *wallet, 1);\n+        coins.at(0).nInputBytes = 40; // Make sure that it has a negative effective value. The next check should assert if this somehow got through. Otherwise it will fail\n+        BOOST_CHECK(!SelectCoinsBnB(GroupCoins(coins), 1 * CENT, coin_selection_params_bnb.m_cost_of_change, setCoinsRet, nValueRet));\n+\n+        // Test fees subtracted from output:\n+        coins.clear();\n+        add_coin(coins, *wallet, 1 * CENT);\n+        coins.at(0).nInputBytes = 40;\n+        coin_selection_params_bnb.m_subtract_fee_outputs = true;\n+        BOOST_CHECK(SelectCoinsBnB(GroupCoins(coins), 1 * CENT, coin_selection_params_bnb.m_cost_of_change, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);\n+    }\n+\n+    {\n+        std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+        wallet->LoadWallet();\n+        wallet->SetupLegacyScriptPubKeyMan();\n+        LOCK(wallet->cs_wallet);\n+\n+        std::vector<COutput> coins;\n+        CoinSet setCoinsRet;\n+        CAmount nValueRet;\n+\n+        add_coin(coins, *wallet, 5 * CENT, 6 * 24, false, 0, true);\n+        add_coin(coins, *wallet, 3 * CENT, 6 * 24, false, 0, true);\n+        add_coin(coins, *wallet, 2 * CENT, 6 * 24, false, 0, true);\n         CCoinControl coin_control;\n         coin_control.fAllowOtherInputs = true;\n-        coin_control.Select(COutPoint(vCoins.at(0).tx->GetHash(), vCoins.at(0).i));\n+        coin_control.Select(COutPoint(coins.at(0).tx->GetHash(), coins.at(0).i));\n         coin_selection_params_bnb.m_effective_feerate = CFeeRate(0);\n-        BOOST_CHECK(SelectCoins(*wallet, vCoins, 10 * CENT, setCoinsRet, nValueRet, coin_control, coin_selection_params_bnb));\n+        BOOST_CHECK(SelectCoins(*wallet, coins, 10 * CENT, setCoinsRet, nValueRet, coin_control, coin_selection_params_bnb));\n     }\n }\n \n BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n {\n+    std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+    wallet->LoadWallet();\n+    wallet->SetupLegacyScriptPubKeyMan();\n+    LOCK(wallet->cs_wallet);\n+\n     CoinSet setCoinsRet, setCoinsRet2;\n     CAmount nValueRet;\n-\n-    LOCK(testWallet.cs_wallet);\n-    testWallet.SetupLegacyScriptPubKeyMan();\n+    std::vector<COutput> coins;\n \n     // test multiple times to allow for differences in the shuffle order\n     for (int i = 0; i < RUN_TESTS; i++)\n     {\n-        empty_wallet();\n+        coins.clear();\n \n         // with an empty wallet we can't even pay one cent\n-        BOOST_CHECK(!KnapsackSolver(1 * CENT, KnapsackGroupOutputs(filter_standard), setCoinsRet, nValueRet));\n+        BOOST_CHECK(!KnapsackSolver(1 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_standard), setCoinsRet, nValueRet));\n \n-        add_coin(1*CENT, 4);        // add a new 1 cent coin\n+        add_coin(coins, *wallet, 1*CENT, 4);        // add a new 1 cent coin\n \n         // with a new 1 cent coin, we still can't find a mature 1 cent\n-        BOOST_CHECK(!KnapsackSolver(1 * CENT, KnapsackGroupOutputs(filter_standard), setCoinsRet, nValueRet));\n+        BOOST_CHECK(!KnapsackSolver(1 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_standard), setCoinsRet, nValueRet));\n \n         // but we can find a new 1 cent\n-        BOOST_CHECK(KnapsackSolver(1 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(KnapsackSolver(1 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);\n \n-        add_coin(2*CENT);           // add a mature 2 cent coin\n+        add_coin(coins, *wallet, 2*CENT);           // add a mature 2 cent coin\n \n         // we can't make 3 cents of mature coins\n-        BOOST_CHECK(!KnapsackSolver(3 * CENT, KnapsackGroupOutputs(filter_standard), setCoinsRet, nValueRet));\n+        BOOST_CHECK(!KnapsackSolver(3 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_standard), setCoinsRet, nValueRet));\n \n         // we can make 3 cents of new coins\n-        BOOST_CHECK(KnapsackSolver(3 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(KnapsackSolver(3 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 3 * CENT);\n \n-        add_coin(5*CENT);           // add a mature 5 cent coin,\n-        add_coin(10*CENT, 3, true); // a new 10 cent coin sent from one of our own addresses\n-        add_coin(20*CENT);          // and a mature 20 cent coin\n+        add_coin(coins, *wallet, 5*CENT);           // add a mature 5 cent coin,\n+        add_coin(coins, *wallet, 10*CENT, 3, true); // a new 10 cent coin sent from one of our own addresses\n+        add_coin(coins, *wallet, 20*CENT);          // and a mature 20 cent coin\n \n         // now we have new: 1+10=11 (of which 10 was self-sent), and mature: 2+5+20=27.  total = 38\n \n         // we can't make 38 cents only if we disallow new coins:\n-        BOOST_CHECK(!KnapsackSolver(38 * CENT, KnapsackGroupOutputs(filter_standard), setCoinsRet, nValueRet));\n+        BOOST_CHECK(!KnapsackSolver(38 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_standard), setCoinsRet, nValueRet));\n         // we can't even make 37 cents if we don't allow new coins even if they're from us\n-        BOOST_CHECK(!KnapsackSolver(38 * CENT, KnapsackGroupOutputs(filter_standard_extra), setCoinsRet, nValueRet));\n+        BOOST_CHECK(!KnapsackSolver(38 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_standard_extra), setCoinsRet, nValueRet));\n         // but we can make 37 cents if we accept new coins from ourself\n-        BOOST_CHECK(KnapsackSolver(37 * CENT, KnapsackGroupOutputs(filter_standard), setCoinsRet, nValueRet));\n+        BOOST_CHECK(KnapsackSolver(37 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_standard), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 37 * CENT);\n         // and we can make 38 cents if we accept all new coins\n-        BOOST_CHECK(KnapsackSolver(38 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(KnapsackSolver(38 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 38 * CENT);\n \n         // try making 34 cents from 1,2,5,10,20 - we can't do it exactly\n-        BOOST_CHECK(KnapsackSolver(34 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(KnapsackSolver(34 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 35 * CENT);       // but 35 cents is closest\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);     // the best should be 20+10+5.  it's incredibly unlikely the 1 or 2 got included (but possible)\n \n         // when we try making 7 cents, the smaller coins (1,2,5) are enough.  We should see just 2+5\n-        BOOST_CHECK(KnapsackSolver(7 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(KnapsackSolver(7 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 7 * CENT);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n         // when we try making 8 cents, the smaller coins (1,2,5) are exactly enough.\n-        BOOST_CHECK(KnapsackSolver(8 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(KnapsackSolver(8 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK(nValueRet == 8 * CENT);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n         // when we try making 9 cents, no subset of smaller coins is enough, and we get the next bigger coin (10)\n-        BOOST_CHECK(KnapsackSolver(9 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(KnapsackSolver(9 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 10 * CENT);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n         // now clear out the wallet and start again to test choosing between subsets of smaller coins and the next biggest coin\n-        empty_wallet();\n+        coins.clear();\n \n-        add_coin( 6*CENT);\n-        add_coin( 7*CENT);\n-        add_coin( 8*CENT);\n-        add_coin(20*CENT);\n-        add_coin(30*CENT); // now we have 6+7+8+20+30 = 71 cents total\n+        add_coin(coins, *wallet,  6*CENT);\n+        add_coin(coins, *wallet,  7*CENT);\n+        add_coin(coins, *wallet,  8*CENT);\n+        add_coin(coins, *wallet, 20*CENT);\n+        add_coin(coins, *wallet, 30*CENT); // now we have 6+7+8+20+30 = 71 cents total\n \n         // check that we have 71 and not 72\n-        BOOST_CHECK(KnapsackSolver(71 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK(!KnapsackSolver(72 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(KnapsackSolver(71 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(!KnapsackSolver(72 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n \n         // now try making 16 cents.  the best smaller coins can do is 6+7+8 = 21; not as good at the next biggest coin, 20\n-        BOOST_CHECK(KnapsackSolver(16 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(KnapsackSolver(16 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 20 * CENT); // we should get 20 in one coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n-        add_coin( 5*CENT); // now we have 5+6+7+8+20+30 = 75 cents total\n+        add_coin(coins, *wallet,  5*CENT); // now we have 5+6+7+8+20+30 = 75 cents total\n \n         // now if we try making 16 cents again, the smaller coins can make 5+6+7 = 18 cents, better than the next biggest coin, 20\n-        BOOST_CHECK(KnapsackSolver(16 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(KnapsackSolver(16 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 18 * CENT); // we should get 18 in 3 coins\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n-        add_coin( 18*CENT); // now we have 5+6+7+8+18+20+30\n+        add_coin(coins, *wallet,  18*CENT); // now we have 5+6+7+8+18+20+30\n \n         // and now if we try making 16 cents again, the smaller coins can make 5+6+7 = 18 cents, the same as the next biggest coin, 18\n-        BOOST_CHECK(KnapsackSolver(16 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(KnapsackSolver(16 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 18 * CENT);  // we should get 18 in 1 coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U); // because in the event of a tie, the biggest coin wins\n \n         // now try making 11 cents.  we should get 5+6\n-        BOOST_CHECK(KnapsackSolver(11 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(KnapsackSolver(11 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 11 * CENT);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n         // check that the smallest bigger coin is used\n-        add_coin( 1*COIN);\n-        add_coin( 2*COIN);\n-        add_coin( 3*COIN);\n-        add_coin( 4*COIN); // now we have 5+6+7+8+18+20+30+100+200+300+400 = 1094 cents\n-        BOOST_CHECK(KnapsackSolver(95 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        add_coin(coins, *wallet,  1*COIN);\n+        add_coin(coins, *wallet,  2*COIN);\n+        add_coin(coins, *wallet,  3*COIN);\n+        add_coin(coins, *wallet,  4*COIN); // now we have 5+6+7+8+18+20+30+100+200+300+400 = 1094 cents\n+        BOOST_CHECK(KnapsackSolver(95 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * COIN);  // we should get 1 BTC in 1 coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n-        BOOST_CHECK(KnapsackSolver(195 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(KnapsackSolver(195 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 2 * COIN);  // we should get 2 BTC in 1 coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n         // empty the wallet and start again, now with fractions of a cent, to test small change avoidance\n \n-        empty_wallet();\n-        add_coin(MIN_CHANGE * 1 / 10);\n-        add_coin(MIN_CHANGE * 2 / 10);\n-        add_coin(MIN_CHANGE * 3 / 10);\n-        add_coin(MIN_CHANGE * 4 / 10);\n-        add_coin(MIN_CHANGE * 5 / 10);\n+        coins.clear();\n+        add_coin(coins, *wallet, MIN_CHANGE * 1 / 10);\n+        add_coin(coins, *wallet, MIN_CHANGE * 2 / 10);\n+        add_coin(coins, *wallet, MIN_CHANGE * 3 / 10);\n+        add_coin(coins, *wallet, MIN_CHANGE * 4 / 10);\n+        add_coin(coins, *wallet, MIN_CHANGE * 5 / 10);\n \n         // try making 1 * MIN_CHANGE from the 1.5 * MIN_CHANGE\n         // we'll get change smaller than MIN_CHANGE whatever happens, so can expect MIN_CHANGE exactly\n-        BOOST_CHECK(KnapsackSolver(MIN_CHANGE, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(KnapsackSolver(MIN_CHANGE, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);\n \n         // but if we add a bigger coin, small change is avoided\n-        add_coin(1111*MIN_CHANGE);\n+        add_coin(coins, *wallet, 1111*MIN_CHANGE);\n \n         // try making 1 from 0.1 + 0.2 + 0.3 + 0.4 + 0.5 + 1111 = 1112.5\n-        BOOST_CHECK(KnapsackSolver(1 * MIN_CHANGE, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(KnapsackSolver(1 * MIN_CHANGE, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n \n         // if we add more small coins:\n-        add_coin(MIN_CHANGE * 6 / 10);\n-        add_coin(MIN_CHANGE * 7 / 10);\n+        add_coin(coins, *wallet, MIN_CHANGE * 6 / 10);\n+        add_coin(coins, *wallet, MIN_CHANGE * 7 / 10);\n \n         // and try again to make 1.0 * MIN_CHANGE\n-        BOOST_CHECK(KnapsackSolver(1 * MIN_CHANGE, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(KnapsackSolver(1 * MIN_CHANGE, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n \n         // run the 'mtgox' test (see https://blockexplorer.com/tx/29a3efd3ef04f9153d47a990bd7b048a4b2d213daaa5fb8ed670fb85f13bdbcf)\n         // they tried to consolidate 10 50k coins into one 500k coin, and ended up with 50k in change\n-        empty_wallet();\n+        coins.clear();\n         for (int j = 0; j < 20; j++)\n-            add_coin(50000 * COIN);\n+            add_coin(coins, *wallet, 50000 * COIN);\n \n-        BOOST_CHECK(KnapsackSolver(500000 * COIN, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(KnapsackSolver(500000 * COIN, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 500000 * COIN); // we should get the exact amount\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 10U); // in ten coins\n \n         // if there's not enough in the smaller coins to make at least 1 * MIN_CHANGE change (0.5+0.6+0.7 < 1.0+1.0),\n         // we need to try finding an exact subset anyway\n \n         // sometimes it will fail, and so we use the next biggest coin:\n-        empty_wallet();\n-        add_coin(MIN_CHANGE * 5 / 10);\n-        add_coin(MIN_CHANGE * 6 / 10);\n-        add_coin(MIN_CHANGE * 7 / 10);\n-        add_coin(1111 * MIN_CHANGE);\n-        BOOST_CHECK(KnapsackSolver(1 * MIN_CHANGE, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        coins.clear();\n+        add_coin(coins, *wallet, MIN_CHANGE * 5 / 10);\n+        add_coin(coins, *wallet, MIN_CHANGE * 6 / 10);\n+        add_coin(coins, *wallet, MIN_CHANGE * 7 / 10);\n+        add_coin(coins, *wallet, 1111 * MIN_CHANGE);\n+        BOOST_CHECK(KnapsackSolver(1 * MIN_CHANGE, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1111 * MIN_CHANGE); // we get the bigger coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n         // but sometimes it's possible, and we use an exact subset (0.4 + 0.6 = 1.0)\n-        empty_wallet();\n-        add_coin(MIN_CHANGE * 4 / 10);\n-        add_coin(MIN_CHANGE * 6 / 10);\n-        add_coin(MIN_CHANGE * 8 / 10);\n-        add_coin(1111 * MIN_CHANGE);\n-        BOOST_CHECK(KnapsackSolver(MIN_CHANGE, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        coins.clear();\n+        add_coin(coins, *wallet, MIN_CHANGE * 4 / 10);\n+        add_coin(coins, *wallet, MIN_CHANGE * 6 / 10);\n+        add_coin(coins, *wallet, MIN_CHANGE * 8 / 10);\n+        add_coin(coins, *wallet, 1111 * MIN_CHANGE);\n+        BOOST_CHECK(KnapsackSolver(MIN_CHANGE, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);   // we should get the exact amount\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U); // in two coins 0.4+0.6\n \n         // test avoiding small change\n-        empty_wallet();\n-        add_coin(MIN_CHANGE * 5 / 100);\n-        add_coin(MIN_CHANGE * 1);\n-        add_coin(MIN_CHANGE * 100);\n+        coins.clear();\n+        add_coin(coins, *wallet, MIN_CHANGE * 5 / 100);\n+        add_coin(coins, *wallet, MIN_CHANGE * 1);\n+        add_coin(coins, *wallet, MIN_CHANGE * 100);\n \n         // trying to make 100.01 from these three coins\n-        BOOST_CHECK(KnapsackSolver(MIN_CHANGE * 10001 / 100, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(KnapsackSolver(MIN_CHANGE * 10001 / 100, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE * 10105 / 100); // we should get all coins\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n         // but if we try to make 99.9, we should take the bigger of the two small coins to avoid small change\n-        BOOST_CHECK(KnapsackSolver(MIN_CHANGE * 9990 / 100, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(KnapsackSolver(MIN_CHANGE * 9990 / 100, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 101 * MIN_CHANGE);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n-      }\n-\n-      // test with many inputs\n-      for (CAmount amt=1500; amt < COIN; amt*=10) {\n-           empty_wallet();\n-           // Create 676 inputs (=  (old MAX_STANDARD_TX_SIZE == 100000)  / 148 bytes per input)\n-           for (uint16_t j = 0; j < 676; j++)\n-               add_coin(amt);\n-\n-           // We only create the wallet once to save time, but we still run the coin selection RUN_TESTS times.\n-           for (int i = 0; i < RUN_TESTS; i++) {\n-             BOOST_CHECK(KnapsackSolver(2000, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n-\n-             if (amt - 2000 < MIN_CHANGE) {\n-                 // needs more than one input:\n-                 uint16_t returnSize = std::ceil((2000.0 + MIN_CHANGE)/amt);\n-                 CAmount returnValue = amt * returnSize;\n-                 BOOST_CHECK_EQUAL(nValueRet, returnValue);\n-                 BOOST_CHECK_EQUAL(setCoinsRet.size(), returnSize);\n-             } else {\n-                 // one input is sufficient:\n-                 BOOST_CHECK_EQUAL(nValueRet, amt);\n-                 BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n-             }\n-           }\n-      }\n-\n-      // test randomness\n-      {\n-          empty_wallet();\n-          for (int i2 = 0; i2 < 100; i2++)\n-              add_coin(COIN);\n-\n-          // Again, we only create the wallet once to save time, but we still run the coin selection RUN_TESTS times.\n-          for (int i = 0; i < RUN_TESTS; i++) {\n+    }\n+\n+    // test with many inputs\n+    for (CAmount amt=1500; amt < COIN; amt*=10) {\n+        coins.clear();\n+        // Create 676 inputs (=  (old MAX_STANDARD_TX_SIZE == 100000)  / 148 bytes per input)\n+        for (uint16_t j = 0; j < 676; j++)\n+            add_coin(coins, *wallet, amt);\n+\n+        // We only create the wallet once to save time, but we still run the coin selection RUN_TESTS times.\n+        for (int i = 0; i < RUN_TESTS; i++) {\n+            BOOST_CHECK(KnapsackSolver(2000, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n+\n+            if (amt - 2000 < MIN_CHANGE) {\n+                // needs more than one input:\n+                uint16_t returnSize = std::ceil((2000.0 + MIN_CHANGE)/amt);\n+                CAmount returnValue = amt * returnSize;\n+                BOOST_CHECK_EQUAL(nValueRet, returnValue);\n+                BOOST_CHECK_EQUAL(setCoinsRet.size(), returnSize);\n+            } else {\n+                // one input is sufficient:\n+                BOOST_CHECK_EQUAL(nValueRet, amt);\n+                BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n+            }\n+        }\n+    }\n+\n+    // test randomness\n+    {\n+        coins.clear();\n+        for (int i2 = 0; i2 < 100; i2++)\n+            add_coin(coins, *wallet, COIN);\n+\n+        // Again, we only create the wallet once to save time, but we still run the coin selection RUN_TESTS times.\n+        for (int i = 0; i < RUN_TESTS; i++) {\n             // picking 50 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(KnapsackSolver(50 * COIN, GroupCoins(vCoins), setCoinsRet, nValueRet));\n-            BOOST_CHECK(KnapsackSolver(50 * COIN, GroupCoins(vCoins), setCoinsRet2, nValueRet));\n+            BOOST_CHECK(KnapsackSolver(50 * COIN, GroupCoins(coins), setCoinsRet, nValueRet));\n+            BOOST_CHECK(KnapsackSolver(50 * COIN, GroupCoins(coins), setCoinsRet2, nValueRet));\n             BOOST_CHECK(!equal_sets(setCoinsRet, setCoinsRet2));\n \n             int fails = 0;\n@@ -567,66 +560,65 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n                 // When choosing 1 from 100 identical coins, 1% of the time, this test will choose the same coin twice\n                 // which will cause it to fail.\n                 // To avoid that issue, run the test RANDOM_REPEATS times and only complain if all of them fail\n-                BOOST_CHECK(KnapsackSolver(COIN, GroupCoins(vCoins), setCoinsRet, nValueRet));\n-                BOOST_CHECK(KnapsackSolver(COIN, GroupCoins(vCoins), setCoinsRet2, nValueRet));\n+                BOOST_CHECK(KnapsackSolver(COIN, GroupCoins(coins), setCoinsRet, nValueRet));\n+                BOOST_CHECK(KnapsackSolver(COIN, GroupCoins(coins), setCoinsRet2, nValueRet));\n                 if (equal_sets(setCoinsRet, setCoinsRet2))\n                     fails++;\n             }\n             BOOST_CHECK_NE(fails, RANDOM_REPEATS);\n-          }\n-\n-          // add 75 cents in small change.  not enough to make 90 cents,\n-          // then try making 90 cents.  there are multiple competing \"smallest bigger\" coins,\n-          // one of which should be picked at random\n-          add_coin(5 * CENT);\n-          add_coin(10 * CENT);\n-          add_coin(15 * CENT);\n-          add_coin(20 * CENT);\n-          add_coin(25 * CENT);\n-\n-          for (int i = 0; i < RUN_TESTS; i++) {\n+        }\n+\n+        // add 75 cents in small change.  not enough to make 90 cents,\n+        // then try making 90 cents.  there are multiple competing \"smallest bigger\" coins,\n+        // one of which should be picked at random\n+        add_coin(coins, *wallet, 5 * CENT);\n+        add_coin(coins, *wallet, 10 * CENT);\n+        add_coin(coins, *wallet, 15 * CENT);\n+        add_coin(coins, *wallet, 20 * CENT);\n+        add_coin(coins, *wallet, 25 * CENT);\n+\n+        for (int i = 0; i < RUN_TESTS; i++) {\n             int fails = 0;\n             for (int j = 0; j < RANDOM_REPEATS; j++)\n             {\n-                BOOST_CHECK(KnapsackSolver(90*CENT, GroupCoins(vCoins), setCoinsRet, nValueRet));\n-                BOOST_CHECK(KnapsackSolver(90*CENT, GroupCoins(vCoins), setCoinsRet2, nValueRet));\n+                BOOST_CHECK(KnapsackSolver(90*CENT, GroupCoins(coins), setCoinsRet, nValueRet));\n+                BOOST_CHECK(KnapsackSolver(90*CENT, GroupCoins(coins), setCoinsRet2, nValueRet));\n                 if (equal_sets(setCoinsRet, setCoinsRet2))\n                     fails++;\n             }\n             BOOST_CHECK_NE(fails, RANDOM_REPEATS);\n-          }\n-      }\n-\n-    empty_wallet();\n+        }\n+    }\n }\n \n BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n {\n+    std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+    wallet->LoadWallet();\n+    wallet->SetupLegacyScriptPubKeyMan();\n+    LOCK(wallet->cs_wallet);\n+\n     CoinSet setCoinsRet;\n     CAmount nValueRet;\n-\n-    LOCK(testWallet.cs_wallet);\n-    testWallet.SetupLegacyScriptPubKeyMan();\n-\n-    empty_wallet();\n+    std::vector<COutput> coins;\n \n     // Test vValue sort order\n     for (int i = 0; i < 1000; i++)\n-        add_coin(1000 * COIN);\n-    add_coin(3 * COIN);\n+        add_coin(coins, *wallet, 1000 * COIN);\n+    add_coin(coins, *wallet, 3 * COIN);\n \n-    BOOST_CHECK(KnapsackSolver(1003 * COIN, KnapsackGroupOutputs(filter_standard), setCoinsRet, nValueRet));\n+    BOOST_CHECK(KnapsackSolver(1003 * COIN, KnapsackGroupOutputs(coins, *wallet, filter_standard), setCoinsRet, nValueRet));\n     BOOST_CHECK_EQUAL(nValueRet, 1003 * COIN);\n     BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n-\n-    empty_wallet();\n }\n \n // Tests that with the ideal conditions, the coin selector will always be able to find a solution that can pay the target value\n BOOST_AUTO_TEST_CASE(SelectCoins_test)\n {\n-    LOCK(testWallet.cs_wallet);\n-    testWallet.SetupLegacyScriptPubKeyMan();\n+    std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+    wallet->LoadWallet();\n+    wallet->SetupLegacyScriptPubKeyMan();\n+    LOCK(wallet->cs_wallet);\n \n     // Random generator stuff\n     std::default_random_engine generator;\n@@ -636,12 +628,15 @@ BOOST_AUTO_TEST_CASE(SelectCoins_test)\n     // Run this test 100 times\n     for (int i = 0; i < 100; ++i)\n     {\n-        empty_wallet();\n+        std::vector<COutput> coins;\n+        CAmount balance{0};\n \n         // Make a wallet with 1000 exponentially distributed random inputs\n         for (int j = 0; j < 1000; ++j)\n         {\n-            add_coin((CAmount)(distribution(generator)*10000000));\n+            CAmount val = distribution(generator)*10000000;\n+            add_coin(coins, *wallet, val);\n+            balance += val;\n         }\n \n         // Generate a random fee rate in the range of 100 - 400\n@@ -658,7 +653,7 @@ BOOST_AUTO_TEST_CASE(SelectCoins_test)\n         CoinSet out_set;\n         CAmount out_value = 0;\n         CCoinControl cc;\n-        BOOST_CHECK(SelectCoins(testWallet, vCoins, target, out_set, out_value, cc, cs_params));\n+        BOOST_CHECK(SelectCoins(*wallet, coins, target, out_set, out_value, cc, cs_params));\n         BOOST_CHECK_GE(out_value, target);\n     }\n }"
      }
    ]
  },
  {
    "sha": "5e54aa9b90c5d4d472be47a7fca969c5e7b92e88",
    "node_id": "C_kwDOABII59oAKDVlNTRhYTliOTBjNWQ0ZDQ3MmJlNDdhN2ZjYTk2OWM1ZTdiOTJlODg",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-13T18:09:27Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-15T18:49:45Z"
      },
      "message": "bench: remove global testWallet from CoinSelection benchmark",
      "tree": {
        "sha": "c22bde04193949d000761a6d002d74398f74a739",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c22bde04193949d000761a6d002d74398f74a739"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e54aa9b90c5d4d472be47a7fca969c5e7b92e88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e54aa9b90c5d4d472be47a7fca969c5e7b92e88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e54aa9b90c5d4d472be47a7fca969c5e7b92e88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e54aa9b90c5d4d472be47a7fca969c5e7b92e88/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5595b1320d0ebd2c60833286799ee42108a7c01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5595b1320d0ebd2c60833286799ee42108a7c01",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5595b1320d0ebd2c60833286799ee42108a7c01"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 2,
      "deletions": 8
    },
    "files": [
      {
        "sha": "4286b9031e85ecf82c274d105837e72685242944",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e54aa9b90c5d4d472be47a7fca969c5e7b92e88/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e54aa9b90c5d4d472be47a7fca969c5e7b92e88/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=5e54aa9b90c5d4d472be47a7fca969c5e7b92e88",
        "patch": "@@ -65,21 +65,16 @@ static void CoinSelection(benchmark::Bench& bench)\n }\n \n typedef std::set<CInputCoin> CoinSet;\n-static NodeContext testNode;\n-static auto testChain = interfaces::MakeChain(testNode);\n-static CWallet testWallet(testChain.get(), \"\", CreateDummyWalletDatabase());\n-std::vector<std::unique_ptr<CWalletTx>> wtxn;\n \n // Copied from src/wallet/test/coinselector_tests.cpp\n static void add_coin(const CAmount& nValue, int nInput, std::vector<OutputGroup>& set)\n {\n     CMutableTransaction tx;\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n-    std::unique_ptr<CWalletTx> wtx = std::make_unique<CWalletTx>(MakeTransactionRef(std::move(tx)));\n+    CInputCoin coin(MakeTransactionRef(tx), nInput);\n     set.emplace_back();\n-    set.back().Insert(COutput(testWallet, *wtx, nInput, 0, true, true, true).GetInputCoin(), 0, true, 0, 0, false);\n-    wtxn.emplace_back(std::move(wtx));\n+    set.back().Insert(coin, 0, true, 0, 0, false);\n }\n // Copied from src/wallet/test/coinselector_tests.cpp\n static CAmount make_hard_case(int utxos, std::vector<OutputGroup>& utxo_pool)\n@@ -97,7 +92,6 @@ static CAmount make_hard_case(int utxos, std::vector<OutputGroup>& utxo_pool)\n static void BnBExhaustion(benchmark::Bench& bench)\n {\n     // Setup\n-    testWallet.SetupLegacyScriptPubKeyMan();\n     std::vector<OutputGroup> utxo_pool;\n     CoinSet selection;\n     CAmount value_ret = 0;"
      }
    ]
  },
  {
    "sha": "9bf02438727e1052c69d906252fc2a451c923409",
    "node_id": "C_kwDOABII59oAKDliZjAyNDM4NzI3ZTEwNTJjNjlkOTA2MjUyZmMyYTQ1MWM5MjM0MDk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-12T18:25:38Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-15T19:23:07Z"
      },
      "message": "bench: Use DescriptorScriptPubKeyMan for wallet things\n\nFor wallet related benchmarks that need a ScriptPubKeyMan for operation,\nuse a DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "8795e5b63b4cf94945fc472e6182ccaa447781e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8795e5b63b4cf94945fc472e6182ccaa447781e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bf02438727e1052c69d906252fc2a451c923409",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bf02438727e1052c69d906252fc2a451c923409",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bf02438727e1052c69d906252fc2a451c923409",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bf02438727e1052c69d906252fc2a451c923409/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e54aa9b90c5d4d472be47a7fca969c5e7b92e88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e54aa9b90c5d4d472be47a7fca969c5e7b92e88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e54aa9b90c5d4d472be47a7fca969c5e7b92e88"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 8,
      "deletions": 21
    },
    "files": [
      {
        "sha": "fd5145950bea72469fae594bf912c5bd2e4a8057",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bf02438727e1052c69d906252fc2a451c923409/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bf02438727e1052c69d906252fc2a451c923409/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=9bf02438727e1052c69d906252fc2a451c923409",
        "patch": "@@ -33,7 +33,6 @@ static void CoinSelection(benchmark::Bench& bench)\n     NodeContext node;\n     auto chain = interfaces::MakeChain(node);\n     CWallet wallet(chain.get(), \"\", CreateDummyWalletDatabase());\n-    wallet.SetupLegacyScriptPubKeyMan();\n     std::vector<std::unique_ptr<CWalletTx>> wtxs;\n     LOCK(wallet.cs_wallet);\n "
      },
      {
        "sha": "166ed1604264fe8e5802894c9541efa11ed46a02",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bf02438727e1052c69d906252fc2a451c923409/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bf02438727e1052c69d906252fc2a451c923409/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=9bf02438727e1052c69d906252fc2a451c923409",
        "patch": "@@ -14,21 +14,22 @@\n \n #include <optional>\n \n-static void WalletBalance(benchmark::Bench& bench, const bool set_dirty, const bool add_watchonly, const bool add_mine)\n+static void WalletBalance(benchmark::Bench& bench, const bool set_dirty, const bool add_mine)\n {\n     const auto test_setup = MakeNoLogFileContext<const TestingSetup>();\n \n     const auto& ADDRESS_WATCHONLY = ADDRESS_BCRT1_UNSPENDABLE;\n \n     CWallet wallet{test_setup->m_node.chain.get(), \"\", CreateMockWalletDatabase()};\n     {\n-        wallet.SetupLegacyScriptPubKeyMan();\n+        LOCK(wallet.cs_wallet);\n+        wallet.SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+        wallet.SetupDescriptorScriptPubKeyMans();\n         if (wallet.LoadWallet() != DBErrors::LOAD_OK) assert(false);\n     }\n     auto handler = test_setup->m_node.chain->handleNotifications({&wallet, [](CWallet*) {}});\n \n     const std::optional<std::string> address_mine{add_mine ? std::optional<std::string>{getnewaddress(wallet)} : std::nullopt};\n-    if (add_watchonly) importaddress(wallet, ADDRESS_WATCHONLY);\n \n     for (int i = 0; i < 100; ++i) {\n         generatetoaddress(test_setup->m_node, address_mine.value_or(ADDRESS_WATCHONLY));\n@@ -42,14 +43,13 @@ static void WalletBalance(benchmark::Bench& bench, const bool set_dirty, const b\n         if (set_dirty) wallet.MarkDirty();\n         bal = GetBalance(wallet);\n         if (add_mine) assert(bal.m_mine_trusted > 0);\n-        if (add_watchonly) assert(bal.m_watchonly_trusted > 0);\n     });\n }\n \n-static void WalletBalanceDirty(benchmark::Bench& bench) { WalletBalance(bench, /* set_dirty */ true, /* add_watchonly */ true, /* add_mine */ true); }\n-static void WalletBalanceClean(benchmark::Bench& bench) { WalletBalance(bench, /* set_dirty */ false, /* add_watchonly */ true, /* add_mine */ true); }\n-static void WalletBalanceMine(benchmark::Bench& bench) { WalletBalance(bench, /* set_dirty */ false, /* add_watchonly */ false, /* add_mine */ true); }\n-static void WalletBalanceWatch(benchmark::Bench& bench) { WalletBalance(bench, /* set_dirty */ false, /* add_watchonly */ true, /* add_mine */ false); }\n+static void WalletBalanceDirty(benchmark::Bench& bench) { WalletBalance(bench, /* set_dirty */ true, /* add_mine */ true); }\n+static void WalletBalanceClean(benchmark::Bench& bench) { WalletBalance(bench, /* set_dirty */ false, /* add_mine */ true); }\n+static void WalletBalanceMine(benchmark::Bench& bench) { WalletBalance(bench, /* set_dirty */ false, /* add_mine */ true); }\n+static void WalletBalanceWatch(benchmark::Bench& bench) { WalletBalance(bench, /* set_dirty */ false, /* add_mine */ false); }\n \n BENCHMARK(WalletBalanceDirty);\n BENCHMARK(WalletBalanceClean);"
      },
      {
        "sha": "76c1bf93a5cbc10949c76763ab248ac98d9c5a84",
        "filename": "src/test/util/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bf02438727e1052c69d906252fc2a451c923409/src/test/util/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bf02438727e1052c69d906252fc2a451c923409/src/test/util/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/wallet.cpp?ref=9bf02438727e1052c69d906252fc2a451c923409",
        "patch": "@@ -25,16 +25,4 @@ std::string getnewaddress(CWallet& w)\n     return EncodeDestination(dest);\n }\n \n-void importaddress(CWallet& wallet, const std::string& address)\n-{\n-    auto spk_man = wallet.GetLegacyScriptPubKeyMan();\n-    LOCK2(wallet.cs_wallet, spk_man->cs_KeyStore);\n-    const auto dest = DecodeDestination(address);\n-    assert(IsValidDestination(dest));\n-    const auto script = GetScriptForDestination(dest);\n-    wallet.MarkDirty();\n-    assert(!spk_man->HaveWatchOnly(script));\n-    if (!spk_man->AddWatchOnly(script, 0 /* nCreateTime */)) assert(false);\n-    wallet.SetAddressBook(dest, /* label */ \"\", \"receive\");\n-}\n #endif // ENABLE_WALLET"
      }
    ]
  },
  {
    "sha": "811319fea4295bfff05c23c0dcab1e24c85e8544",
    "node_id": "C_kwDOABII59oAKDgxMTMxOWZlYTQyOTViZmZmMDVjMjNjMGRjYWIxZTI0Yzg1ZTg1NDQ",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-12T20:12:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-15T19:23:21Z"
      },
      "message": "tests, gui: Use DescriptorScriptPubKeyMan in GUI tests",
      "tree": {
        "sha": "25b9bd66228465d1e66a074d8a4ad43d09ad0790",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25b9bd66228465d1e66a074d8a4ad43d09ad0790"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/811319fea4295bfff05c23c0dcab1e24c85e8544",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/811319fea4295bfff05c23c0dcab1e24c85e8544",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/811319fea4295bfff05c23c0dcab1e24c85e8544",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/811319fea4295bfff05c23c0dcab1e24c85e8544/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bf02438727e1052c69d906252fc2a451c923409",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bf02438727e1052c69d906252fc2a451c923409",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bf02438727e1052c69d906252fc2a451c923409"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 18,
      "deletions": 5
    },
    "files": [
      {
        "sha": "729957699aab8e5db9653430a548112ba5bcea4f",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/811319fea4295bfff05c23c0dcab1e24c85e8544/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/811319fea4295bfff05c23c0dcab1e24c85e8544/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=811319fea4295bfff05c23c0dcab1e24c85e8544",
        "patch": "@@ -64,8 +64,12 @@ void TestAddAddressesToSendBook(interfaces::Node& node)\n     test.m_node.wallet_client = wallet_client.get();\n     node.setContext(&test.m_node);\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), \"\", CreateMockWalletDatabase());\n-    wallet->SetupLegacyScriptPubKeyMan();\n     wallet->LoadWallet();\n+    wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+    {\n+        LOCK(wallet->cs_wallet);\n+        wallet->SetupDescriptorScriptPubKeyMans();\n+    }\n \n     auto build_address = [&wallet]() {\n         CKey key;"
      },
      {
        "sha": "c74c8f25b36c57e085746b1f96393ff4d31c5e4b",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/811319fea4295bfff05c23c0dcab1e24c85e8544/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/811319fea4295bfff05c23c0dcab1e24c85e8544/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=811319fea4295bfff05c23c0dcab1e24c85e8544",
        "patch": "@@ -143,11 +143,20 @@ void TestGUI(interfaces::Node& node)\n     node.setContext(&test.m_node);\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), \"\", CreateMockWalletDatabase());\n     wallet->LoadWallet();\n+    wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n     {\n-        auto spk_man = wallet->GetOrCreateLegacyScriptPubKeyMan();\n-        LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);\n-        wallet->SetAddressBook(GetDestinationForKey(test.coinbaseKey.GetPubKey(), wallet->m_default_address_type), \"\", \"receive\");\n-        spk_man->AddKeyPubKey(test.coinbaseKey, test.coinbaseKey.GetPubKey());\n+        LOCK(wallet->cs_wallet);\n+        wallet->SetupDescriptorScriptPubKeyMans();\n+\n+        // Add the coinbase key\n+        FlatSigningProvider provider;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(\"combo(\" + EncodeSecret(test.coinbaseKey) + \")\", provider, error, /* require_checksum=*/ false);\n+        assert(desc);\n+        WalletDescriptor w_desc(std::move(desc), 0, 0, 1, 1);\n+        if (!wallet->AddWalletDescriptor(w_desc, provider, \"\", false)) assert(false);\n+        CTxDestination dest = GetDestinationForKey(test.coinbaseKey.GetPubKey(), wallet->m_default_address_type);\n+        wallet->SetAddressBook(dest, \"\", \"receive\");\n         wallet->SetLastBlockProcessed(105, node.context()->chainman->ActiveChain().Tip()->GetBlockHash());\n     }\n     {"
      }
    ]
  },
  {
    "sha": "4b1588c6bd96743b333cc291e19a9fc76dc8cdf1",
    "node_id": "C_kwDOABII59oAKDRiMTU4OGM2YmQ5Njc0M2IzMzNjYzI5MWUxOWE5ZmM3NmRjOGNkZjE",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-13T00:43:12Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-15T19:23:35Z"
      },
      "message": "tests: Use DescriptorScriptPubKeyMan in coinselector_tests",
      "tree": {
        "sha": "edc5bf5cd51235ab473740793d86d67cabd0e45c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edc5bf5cd51235ab473740793d86d67cabd0e45c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b1588c6bd96743b333cc291e19a9fc76dc8cdf1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b1588c6bd96743b333cc291e19a9fc76dc8cdf1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b1588c6bd96743b333cc291e19a9fc76dc8cdf1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b1588c6bd96743b333cc291e19a9fc76dc8cdf1/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "811319fea4295bfff05c23c0dcab1e24c85e8544",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/811319fea4295bfff05c23c0dcab1e24c85e8544",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/811319fea4295bfff05c23c0dcab1e24c85e8544"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 10,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e880e13845868eb67e7efd3eb50ddbc6f35b7f72",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b1588c6bd96743b333cc291e19a9fc76dc8cdf1/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b1588c6bd96743b333cc291e19a9fc76dc8cdf1/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=4b1588c6bd96743b333cc291e19a9fc76dc8cdf1",
        "patch": "@@ -270,8 +270,9 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     {\n         std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n         wallet->LoadWallet();\n-        wallet->SetupLegacyScriptPubKeyMan();\n         LOCK(wallet->cs_wallet);\n+        wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+        wallet->SetupDescriptorScriptPubKeyMans();\n \n         std::vector<COutput> coins;\n         CoinSet setCoinsRet;\n@@ -293,8 +294,9 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     {\n         std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n         wallet->LoadWallet();\n-        wallet->SetupLegacyScriptPubKeyMan();\n         LOCK(wallet->cs_wallet);\n+        wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+        wallet->SetupDescriptorScriptPubKeyMans();\n \n         std::vector<COutput> coins;\n         CoinSet setCoinsRet;\n@@ -315,8 +317,9 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n {\n     std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n     wallet->LoadWallet();\n-    wallet->SetupLegacyScriptPubKeyMan();\n     LOCK(wallet->cs_wallet);\n+    wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+    wallet->SetupDescriptorScriptPubKeyMans();\n \n     CoinSet setCoinsRet, setCoinsRet2;\n     CAmount nValueRet;\n@@ -595,8 +598,9 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n {\n     std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n     wallet->LoadWallet();\n-    wallet->SetupLegacyScriptPubKeyMan();\n     LOCK(wallet->cs_wallet);\n+    wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+    wallet->SetupDescriptorScriptPubKeyMans();\n \n     CoinSet setCoinsRet;\n     CAmount nValueRet;\n@@ -617,8 +621,9 @@ BOOST_AUTO_TEST_CASE(SelectCoins_test)\n {\n     std::unique_ptr<CWallet> wallet = std::make_unique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n     wallet->LoadWallet();\n-    wallet->SetupLegacyScriptPubKeyMan();\n     LOCK(wallet->cs_wallet);\n+    wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+    wallet->SetupDescriptorScriptPubKeyMans();\n \n     // Random generator stuff\n     std::default_random_engine generator;"
      }
    ]
  },
  {
    "sha": "dcd6eeb64adb2b532f5003cbb86ba65b3c08a87b",
    "node_id": "C_kwDOABII59oAKGRjZDZlZWI2NGFkYjJiNTMyZjUwMDNjYmI4NmJhNjViM2MwOGE4N2I",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-13T00:43:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-15T21:01:51Z"
      },
      "message": "tests: Use descriptors in psbt_wallet_tests",
      "tree": {
        "sha": "ff95cdca017e601759c339adf1fb9130f3174169",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff95cdca017e601759c339adf1fb9130f3174169"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dcd6eeb64adb2b532f5003cbb86ba65b3c08a87b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcd6eeb64adb2b532f5003cbb86ba65b3c08a87b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dcd6eeb64adb2b532f5003cbb86ba65b3c08a87b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcd6eeb64adb2b532f5003cbb86ba65b3c08a87b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b1588c6bd96743b333cc291e19a9fc76dc8cdf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b1588c6bd96743b333cc291e19a9fc76dc8cdf1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b1588c6bd96743b333cc291e19a9fc76dc8cdf1"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 19,
      "deletions": 24
    },
    "files": [
      {
        "sha": "120a20749ed16248e0ce8765f8fa28ca12bcda1f",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 24,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcd6eeb64adb2b532f5003cbb86ba65b3c08a87b/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcd6eeb64adb2b532f5003cbb86ba65b3c08a87b/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=dcd6eeb64adb2b532f5003cbb86ba65b3c08a87b",
        "patch": "@@ -13,10 +13,21 @@\n \n BOOST_FIXTURE_TEST_SUITE(psbt_wallet_tests, WalletTestingSetup)\n \n+static void import_descriptor(CWallet& wallet, const std::string& descriptor)\n+{\n+    LOCK(wallet.cs_wallet);\n+    FlatSigningProvider provider;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(descriptor, provider, error, /* require_checksum=*/ false);\n+    assert(desc);\n+    WalletDescriptor w_desc(std::move(desc), 0, 0, 10, 0);\n+    wallet.AddWalletDescriptor(w_desc, provider, \"\", false);\n+}\n+\n BOOST_AUTO_TEST_CASE(psbt_updater_test)\n {\n-    auto spk_man = m_wallet.GetOrCreateLegacyScriptPubKeyMan();\n-    LOCK2(m_wallet.cs_wallet, spk_man->cs_KeyStore);\n+    LOCK(m_wallet.cs_wallet);\n+    m_wallet.SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n \n     // Create prevtxs and add to wallet\n     CDataStream s_prev_tx1(ParseHex(\"0200000000010158e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd7501000000171600145f275f436b09a8cc9a2eb2a2f528485c68a56323feffffff02d8231f1b0100000017a914aed962d6654f9a2b36608eb9d64d2b260db4f1118700c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88702483045022100a22edcc6e5bc511af4cc4ae0de0fcd75c7e04d8c1c3a8aa9d820ed4b967384ec02200642963597b9b1bc22c75e9f3e117284a962188bf5e8a74c895089046a20ad770121035509a48eb623e10aace8bfd0212fdb8a8e5af3c94b0b133b95e114cab89e4f7965000000\"), SER_NETWORK, PROTOCOL_VERSION);\n@@ -29,27 +40,10 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n     s_prev_tx2 >> prev_tx2;\n     m_wallet.mapWallet.emplace(std::piecewise_construct, std::forward_as_tuple(prev_tx2->GetHash()), std::forward_as_tuple(prev_tx2));\n \n-    // Add scripts\n-    CScript rs1;\n-    CDataStream s_rs1(ParseHex(\"475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae\"), SER_NETWORK, PROTOCOL_VERSION);\n-    s_rs1 >> rs1;\n-    spk_man->AddCScript(rs1);\n-\n-    CScript rs2;\n-    CDataStream s_rs2(ParseHex(\"2200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903\"), SER_NETWORK, PROTOCOL_VERSION);\n-    s_rs2 >> rs2;\n-    spk_man->AddCScript(rs2);\n-\n-    CScript ws1;\n-    CDataStream s_ws1(ParseHex(\"47522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae\"), SER_NETWORK, PROTOCOL_VERSION);\n-    s_ws1 >> ws1;\n-    spk_man->AddCScript(ws1);\n-\n-    // Add hd seed\n-    CKey key = DecodeSecret(\"5KSSJQ7UNfFGwVgpCZDSHm5rVNhMFcFtvWM3zQ8mW4qNDEN7LFd\"); // Mainnet and uncompressed form of cUkG8i1RFfWGWy5ziR11zJ5V4U4W3viSFCfyJmZnvQaUsd1xuF3T\n-    CPubKey master_pub_key = spk_man->DeriveNewSeed(key);\n-    spk_man->SetHDSeed(master_pub_key);\n-    spk_man->NewKeyPool();\n+    // Import descriptors for keys and scripts\n+    import_descriptor(m_wallet, \"sh(multi(2,xprv9s21ZrQH143K2LE7W4Xf3jATf9jECxSb7wj91ZnmY4qEJrS66Qru9RFqq8xbkgT32ya6HqYJweFdJUEDf5Q6JFV7jMiUws7kQfe6Tv4RbfN/0h/0h/0h,xprv9s21ZrQH143K2LE7W4Xf3jATf9jECxSb7wj91ZnmY4qEJrS66Qru9RFqq8xbkgT32ya6HqYJweFdJUEDf5Q6JFV7jMiUws7kQfe6Tv4RbfN/0h/0h/1h))\");\n+    import_descriptor(m_wallet, \"sh(wsh(multi(2,xprv9s21ZrQH143K2LE7W4Xf3jATf9jECxSb7wj91ZnmY4qEJrS66Qru9RFqq8xbkgT32ya6HqYJweFdJUEDf5Q6JFV7jMiUws7kQfe6Tv4RbfN/0h/0h/2h,xprv9s21ZrQH143K2LE7W4Xf3jATf9jECxSb7wj91ZnmY4qEJrS66Qru9RFqq8xbkgT32ya6HqYJweFdJUEDf5Q6JFV7jMiUws7kQfe6Tv4RbfN/0h/0h/3h)))\");\n+    import_descriptor(m_wallet, \"wpkh(xprv9s21ZrQH143K2LE7W4Xf3jATf9jECxSb7wj91ZnmY4qEJrS66Qru9RFqq8xbkgT32ya6HqYJweFdJUEDf5Q6JFV7jMiUws7kQfe6Tv4RbfN/0h/0h/*h)\");\n \n     // Call FillPSBT\n     PartiallySignedTransaction psbtx;\n@@ -71,7 +65,8 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n \n     // Try to sign the mutated input\n     SignatureData sigdata;\n-    BOOST_CHECK(spk_man->FillPSBT(psbtx, PrecomputePSBTData(psbtx), SIGHASH_ALL, true, true) != TransactionError::OK);\n+    BOOST_CHECK(m_wallet.FillPSBT(psbtx, complete, SIGHASH_ALL, true, true) != TransactionError::OK);\n+    //BOOST_CHECK(spk_man->FillPSBT(psbtx, PrecomputePSBTData(psbtx), SIGHASH_ALL, true, true) != TransactionError::OK);\n }\n \n BOOST_AUTO_TEST_CASE(parse_hd_keypath)"
      }
    ]
  },
  {
    "sha": "99516285b7cf2664563712d95d95f54e1985c0c2",
    "node_id": "C_kwDOABII59oAKDk5NTE2Mjg1YjdjZjI2NjQ1NjM3MTJkOTVkOTVmNTRlMTk4NWMwYzI",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-13T02:07:18Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-15T21:01:51Z"
      },
      "message": "tests: Use legacy change type in subtract fee from outputs test\n\nThe subtract fee from outputs assumes that the leftover input amount\nwill be dropped to fees. However this only happens if that amount is\nless than the cost of change. In the event that it is higher than the\ncost of change, the leftover amount will actually become a change\noutput. To avoid this scenario, force a change type which has a high\ncost of change.",
      "tree": {
        "sha": "2aeecbdf4d2739735a04ad70bc0dd21c43ca82c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2aeecbdf4d2739735a04ad70bc0dd21c43ca82c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99516285b7cf2664563712d95d95f54e1985c0c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99516285b7cf2664563712d95d95f54e1985c0c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99516285b7cf2664563712d95d95f54e1985c0c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99516285b7cf2664563712d95d95f54e1985c0c2/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dcd6eeb64adb2b532f5003cbb86ba65b3c08a87b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcd6eeb64adb2b532f5003cbb86ba65b3c08a87b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcd6eeb64adb2b532f5003cbb86ba65b3c08a87b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d88d8eabdb9f847e0d23f0edfacda442b6016cdb",
        "filename": "src/wallet/test/spend_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99516285b7cf2664563712d95d95f54e1985c0c2/src/wallet/test/spend_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99516285b7cf2664563712d95d95f54e1985c0c2/src/wallet/test/spend_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/spend_tests.cpp?ref=99516285b7cf2664563712d95d95f54e1985c0c2",
        "patch": "@@ -33,6 +33,8 @@ BOOST_FIXTURE_TEST_CASE(SubtractFee, TestChain100Setup)\n         CCoinControl coin_control;\n         coin_control.m_feerate.emplace(10000);\n         coin_control.fOverrideFeeRate = true;\n+        // We need to use a change type with high cost of change so that the leftover amount will be dropped to fee instead of added as a change output\n+        coin_control.m_change_type = OutputType::LEGACY;\n         FeeCalculation fee_calc;\n         BOOST_CHECK(CreateTransaction(*wallet, {recipient}, tx, fee, change_pos, error, coin_control, fee_calc));\n         BOOST_CHECK_EQUAL(tx->vout.size(), 1);"
      }
    ]
  },
  {
    "sha": "2d2edc1248a2e49636409b07448676e5bfe44956",
    "node_id": "C_kwDOABII59oAKDJkMmVkYzEyNDhhMmU0OTYzNjQwOWIwNzQ0ODY3NmU1YmZlNDQ5NTY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-13T00:54:33Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-15T21:01:51Z"
      },
      "message": "tests: Use Descriptor wallets for generic wallet tests\n\nFor the generic wallet tests, make DescriptorScriptPubKeyMans. There are\nstill some wallet tests that test legacy wallet things. Those remain\nunchanged.",
      "tree": {
        "sha": "a413dfe308f87b8a389f1364e064ae438b16d4c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a413dfe308f87b8a389f1364e064ae438b16d4c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d2edc1248a2e49636409b07448676e5bfe44956",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d2edc1248a2e49636409b07448676e5bfe44956",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d2edc1248a2e49636409b07448676e5bfe44956",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d2edc1248a2e49636409b07448676e5bfe44956/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99516285b7cf2664563712d95d95f54e1985c0c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99516285b7cf2664563712d95d95f54e1985c0c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99516285b7cf2664563712d95d95f54e1985c0c2"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 49,
      "deletions": 17
    },
    "files": [
      {
        "sha": "2990fc8f8db74c5c01f3a37bf0e6d09407fd5110",
        "filename": "src/wallet/test/util.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d2edc1248a2e49636409b07448676e5bfe44956/src/wallet/test/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d2edc1248a2e49636409b07448676e5bfe44956/src/wallet/test/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/util.cpp?ref=2d2edc1248a2e49636409b07448676e5bfe44956",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <chain.h>\n #include <key.h>\n+#include <key_io.h>\n #include <test/util/setup_common.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n@@ -23,9 +24,16 @@ std::unique_ptr<CWallet> CreateSyncedWallet(interfaces::Chain& chain, CChain& cc\n     }\n     wallet->LoadWallet();\n     {\n-        auto spk_man = wallet->GetOrCreateLegacyScriptPubKeyMan();\n-        LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);\n-        spk_man->AddKeyPubKey(key, key.GetPubKey());\n+        LOCK(wallet->cs_wallet);\n+        wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+        wallet->SetupDescriptorScriptPubKeyMans();\n+\n+        FlatSigningProvider provider;\n+        std::string error;\n+        std::unique_ptr<Descriptor> desc = Parse(\"combo(\" + EncodeSecret(key) + \")\", provider, error, /* require_checksum=*/ false);\n+        assert(desc);\n+        WalletDescriptor w_desc(std::move(desc), 0, 0, 1, 1);\n+        if (!wallet->AddWalletDescriptor(w_desc, provider, \"\", false)) assert(false);\n     }\n     WalletRescanReserver reserver(*wallet);\n     reserver.reserve();"
      },
      {
        "sha": "0965128ade9212cf7e776762d60f2e140836bfb4",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 14,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d2edc1248a2e49636409b07448676e5bfe44956/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d2edc1248a2e49636409b07448676e5bfe44956/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=2d2edc1248a2e49636409b07448676e5bfe44956",
        "patch": "@@ -11,6 +11,7 @@\n #include <vector>\n \n #include <interfaces/chain.h>\n+#include <key_io.h>\n #include <node/blockstorage.h>\n #include <node/context.h>\n #include <policy/policy.h>\n@@ -43,6 +44,7 @@ BOOST_FIXTURE_TEST_SUITE(wallet_tests, WalletTestingSetup)\n static std::shared_ptr<CWallet> TestLoadWallet(WalletContext& context)\n {\n     DatabaseOptions options;\n+    options.create_flags = WALLET_FLAG_DESCRIPTORS;\n     DatabaseStatus status;\n     bilingual_str error;\n     std::vector<bilingual_str> warnings;\n@@ -77,9 +79,13 @@ static CMutableTransaction TestSimpleSpend(const CTransaction& from, uint32_t in\n \n static void AddKey(CWallet& wallet, const CKey& key)\n {\n-    auto spk_man = wallet.GetOrCreateLegacyScriptPubKeyMan();\n-    LOCK2(wallet.cs_wallet, spk_man->cs_KeyStore);\n-    spk_man->AddKeyPubKey(key, key.GetPubKey());\n+    LOCK(wallet.cs_wallet);\n+    FlatSigningProvider provider;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(\"combo(\" + EncodeSecret(key) + \")\", provider, error, /* require_checksum=*/ false);\n+    assert(desc);\n+    WalletDescriptor w_desc(std::move(desc), 0, 0, 1, 1);\n+    if (!wallet.AddWalletDescriptor(w_desc, provider, \"\", false)) assert(false);\n }\n \n BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n@@ -95,6 +101,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n+            wallet.SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n             wallet.SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         }\n         AddKey(wallet, coinbaseKey);\n@@ -114,6 +121,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n+            wallet.SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n             wallet.SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         }\n         AddKey(wallet, coinbaseKey);\n@@ -140,6 +148,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n+            wallet.SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n             wallet.SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         }\n         AddKey(wallet, coinbaseKey);\n@@ -165,6 +174,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n+            wallet.SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n             wallet.SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         }\n         AddKey(wallet, coinbaseKey);\n@@ -320,10 +330,12 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n {\n     CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n-    auto spk_man = wallet.GetOrCreateLegacyScriptPubKeyMan();\n     CWalletTx wtx(m_coinbase_txns.back());\n \n-    LOCK2(wallet.cs_wallet, spk_man->cs_KeyStore);\n+    LOCK(wallet.cs_wallet);\n+    wallet.SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+    wallet.SetupDescriptorScriptPubKeyMans();\n+\n     wallet.SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n \n     CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash(), 0);\n@@ -336,7 +348,7 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n     // Invalidate the cached value, add the key, and make sure a new immature\n     // credit amount is calculated.\n     wtx.MarkDirty();\n-    BOOST_CHECK(spk_man->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey()));\n+    AddKey(wallet, coinbaseKey);\n     BOOST_CHECK_EQUAL(CachedTxGetImmatureCredit(wallet, wtx), 50*COIN);\n }\n \n@@ -593,14 +605,26 @@ BOOST_FIXTURE_TEST_CASE(ListCoinsTest, ListCoinsTestingSetup)\n \n BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n {\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n-    wallet->SetupLegacyScriptPubKeyMan();\n-    wallet->SetMinVersion(FEATURE_LATEST);\n-    wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n-    BOOST_CHECK(!wallet->TopUpKeyPool(1000));\n-    CTxDestination dest;\n-    bilingual_str error;\n-    BOOST_CHECK(!wallet->GetNewDestination(OutputType::BECH32, \"\", dest, error));\n+    {\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n+        wallet->SetupLegacyScriptPubKeyMan();\n+        wallet->SetMinVersion(FEATURE_LATEST);\n+        wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n+        BOOST_CHECK(!wallet->TopUpKeyPool(1000));\n+        CTxDestination dest;\n+        bilingual_str error;\n+        BOOST_CHECK(!wallet->GetNewDestination(OutputType::BECH32, \"\", dest, error));\n+    }\n+    {\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n+        LOCK(wallet->cs_wallet);\n+        wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+        wallet->SetMinVersion(FEATURE_LATEST);\n+        wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n+        CTxDestination dest;\n+        bilingual_str error;\n+        BOOST_CHECK(!wallet->GetNewDestination(OutputType::BECH32, \"\", dest, error));\n+    }\n }\n \n // Explicit calculation which is used to test the wallet constant"
      }
    ]
  }
]