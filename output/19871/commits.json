[
  {
    "sha": "ac71fe936da290adf5a3155fe8db5f78b485f1f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzcxZmU5MzZkYTI5MGFkZjVhMzE1NWZlOGRiNWY3OGI0ODVmMWYx",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-09-04T13:34:26Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-09-07T14:48:21Z"
      },
      "message": "[doc] Clarify scope of eviction protection of outbound block-relay peers\n\nBlock-relay-only peers were introduced by #15759. According to its\nauthor, it was intented to make them only immune to outbound peer\nrotation-based eviction and not from all eviction as modified comment\nleans to think of.\n\nClearly indicate that outbound block-relay peers aren't protected\nfrom eviction by the bad/lagging chain logic.",
      "tree": {
        "sha": "9859d1e2bf383df2699baa3add309f065b3afe11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9859d1e2bf383df2699baa3add309f065b3afe11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac71fe936da290adf5a3155fe8db5f78b485f1f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac71fe936da290adf5a3155fe8db5f78b485f1f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac71fe936da290adf5a3155fe8db5f78b485f1f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac71fe936da290adf5a3155fe8db5f78b485f1f1/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "a0a422c34cfd6514d0cc445bd784d3ee1a2d1749",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0a422c34cfd6514d0cc445bd784d3ee1a2d1749",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0a422c34cfd6514d0cc445bd784d3ee1a2d1749"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6762a94a6f99611917b32fdbad3fd3110b2cb20b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac71fe936da290adf5a3155fe8db5f78b485f1f1/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac71fe936da290adf5a3155fe8db5f78b485f1f1/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ac71fe936da290adf5a3155fe8db5f78b485f1f1",
        "patch": "@@ -2018,11 +2018,12 @@ static void ProcessHeadersMessage(CNode& pfrom, CConnman& connman, ChainstateMan\n             }\n         }\n \n+        // If this is an outbound full-relay peer, check to see if we should protect\n+        // it from the bad/lagging chain logic.\n+        // Note that outbound block-relay peers are excluded from this protection, and\n+        // thus always subject to eviction under the bad/lagging chain logic.\n+        // See ChainSyncTimeoutState.\n         if (!pfrom.fDisconnect && pfrom.IsFullOutboundConn() && nodestate->pindexBestKnownBlock != nullptr) {\n-            // If this is an outbound full-relay peer, check to see if we should protect\n-            // it from the bad/lagging chain logic.\n-            // Note that block-relay-only peers are already implicitly protected, so we\n-            // only consider setting m_protect for the full-relay peers.\n             if (g_outbound_peers_with_protect_from_disconnect < MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT && nodestate->pindexBestKnownBlock->nChainWork >= ::ChainActive().Tip()->nChainWork && !nodestate->m_chain_sync.m_protect) {\n                 LogPrint(BCLog::NET, \"Protecting outbound peer=%d from eviction\\n\", pfrom.GetId());\n                 nodestate->m_chain_sync.m_protect = true;"
      }
    ]
  },
  {
    "sha": "d76925478efd35e6fd835370639f2139b28381e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzY5MjU0NzhlZmQzNWU2ZmQ4MzUzNzA2MzlmMjEzOWIyODM4MWU0",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-09-04T18:33:00Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-09-10T13:51:03Z"
      },
      "message": "[doc] Clarify semantic of peer's m_protect w.r.t to outbound eviction logics\n\nThe field m_protect is used to protect from eviction both by bad/lagging\nchain and extra outbound peers logics. Outbound block-relay peers are\nalways excluded from this protection.",
      "tree": {
        "sha": "aa395e9f2ce171a1c51af15659f4a9c4f579c6a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa395e9f2ce171a1c51af15659f4a9c4f579c6a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d76925478efd35e6fd835370639f2139b28381e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d76925478efd35e6fd835370639f2139b28381e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d76925478efd35e6fd835370639f2139b28381e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d76925478efd35e6fd835370639f2139b28381e4/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "ac71fe936da290adf5a3155fe8db5f78b485f1f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac71fe936da290adf5a3155fe8db5f78b485f1f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac71fe936da290adf5a3155fe8db5f78b485f1f1"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 14,
      "deletions": 4
    },
    "files": [
      {
        "sha": "37eed95b602b1825c221a369dacf909d40c05b3f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d76925478efd35e6fd835370639f2139b28381e4/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d76925478efd35e6fd835370639f2139b28381e4/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d76925478efd35e6fd835370639f2139b28381e4",
        "patch": "@@ -321,10 +321,17 @@ struct CNodeState {\n      */\n     bool fSupportsDesiredCmpctVersion;\n \n-    /** State used to enforce CHAIN_SYNC_TIMEOUT\n-      * Only in effect for outbound, non-manual, full-relay connections, with\n-      * m_protect == false\n-      * Algorithm: if a peer's best known block has less work than our tip,\n+    /** State used to enforce CHAIN_SYNC_TIMEOUT and EXTRA_PEER_CHECK_INTERVAL logic.\n+      *\n+      * Both are only in effect for outbound, non-manual, non-protected connections.\n+      * Any peer protected (m_protect = true) is not chosen for eviction. A peer is\n+      * marked as protected if all of these are true:\n+      *   - its connection type is IsBlockOnlyConn() == false\n+      *   - it gave us a valid connecting header\n+      *   - we haven't reached MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT yet\n+      *   - it has a better chain than we have\n+      *\n+      * CHAIN_SYNC_TIMEOUT: if a peer's best known block has less work than our tip,\n       * set a timeout CHAIN_SYNC_TIMEOUT seconds in the future:\n       *   - If at timeout their best known block now has more work than our tip\n       *     when the timeout was set, then either reset the timeout or clear it\n@@ -334,6 +341,9 @@ struct CNodeState {\n       *     and set a shorter timeout, HEADERS_RESPONSE_TIME seconds in future.\n       *     If their best known block is still behind when that new timeout is\n       *     reached, disconnect.\n+      *\n+      * EXTRA_PEER_CHECK_INTERVAL: after each interval, if we have too many outbound peers,\n+      * drop the outbound one that least recently announced us a new block.\n       */\n     struct ChainSyncTimeoutState {\n         //! A timeout used for checking whether our peer has sufficiently synced"
      }
    ]
  }
]