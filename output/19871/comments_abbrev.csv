ariard,2020-09-04 18:42:35,Updated at 6ce273b. I guess we could split up `m_protect` or clarify `ChainSyncTimeout` name but I don't want to interfere with actual refactoring of `CNodeState` (#19398). It would be easier to reorganize structures after completion of this project.,https://github.com/bitcoin/bitcoin/pull/19871#issuecomment-687317729,687317729,
ariard,2020-09-08 14:35:55,"Thanks @naumenkogs, took your last suggestion at b55f979",https://github.com/bitcoin/bitcoin/pull/19871#issuecomment-688920099,688920099,
naumenkogs,2020-09-09 10:52:38,ACK b55f9790194746ce0180fc9fc5e085bdb118432c,https://github.com/bitcoin/bitcoin/pull/19871#issuecomment-689484439,689484439,
ariard,2020-09-10 13:56:07,"Updated at d769254, with last @jonatack suggestions.",https://github.com/bitcoin/bitcoin/pull/19871#issuecomment-690305619,690305619,
naumenkogs,2020-09-10 14:03:02,ACK d76925478efd35e6fd835370639f2139b28381e4,https://github.com/bitcoin/bitcoin/pull/19871#issuecomment-690310733,690310733,
jonatack,2020-09-10 14:22:29,"ACK d76925478efd35e6fd835370639f2139b28381e4\n\nThanks for updating @ariard.",https://github.com/bitcoin/bitcoin/pull/19871#issuecomment-690322923,690322923,
sdaftuar,2020-09-04 15:21:53,"How about:\n\n```\n// Note that outbound block-relay peers are excluded from this protection, and thus always subject to eviction under the bad/lagging chain logic.\n```",https://github.com/bitcoin/bitcoin/pull/19871#discussion_r483686130,483686130,src/net_processing.cpp
sdaftuar,2020-09-04 15:24:52,"Also, you may want to consider adding a comment that explains how `m_protect` is used by stale-tip-based eviction as well.  In particular, the stale-tip -> extra full outbound peer logic could cause an existing full outbound to be evicted, but peers with `m_protect` set will not be chosen for eviction.",https://github.com/bitcoin/bitcoin/pull/19871#discussion_r483687757,483687757,src/net_processing.cpp
ariard,2020-09-04 18:38:33,Thanks for the suggestion. Also added a commit on scope of m_protect w.r.t to both eviction logics.,https://github.com/bitcoin/bitcoin/pull/19871#discussion_r483789959,483789959,src/net_processing.cpp
naumenkogs,2020-09-07 09:25:57,"This code is in the conditional `&& pfrom.IsFullOutboundConn()`.\n\nWhy comments about `block-relay-only` connections belong inside a block related to `full conns`?",https://github.com/bitcoin/bitcoin/pull/19871#discussion_r484308509,484308509,src/net_processing.cpp
naumenkogs,2020-09-07 09:27:23,"I would probably prefer to have a good big comment *before* the following line:\n```\n         if (!pfrom.fDisconnect && pfrom.IsFullOutboundConn() && nodestate->pindexBestKnownBlock != nullptr) {\n```",https://github.com/bitcoin/bitcoin/pull/19871#discussion_r484309396,484309396,src/net_processing.cpp
ariard,2020-09-07 14:49:24,Moved comment above with new referral to ChainSyncTimeout.,https://github.com/bitcoin/bitcoin/pull/19871#discussion_r484475819,484475819,src/net_processing.cpp
naumenkogs,2020-09-08 07:14:09,"`* drop to the outbound one that least recently announced us a new block.` -> \n`* drop the outbound one that least recently announced us a new block.` (""to"" does not belong here)",https://github.com/bitcoin/bitcoin/pull/19871#discussion_r484699656,484699656,src/net_processing.cpp
naumenkogs,2020-09-08 07:17:28,"`and not having reached yet MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT` makes it sound like *the peer* is not having reached, not us. I suggest this:\n\nA peer is marked as protected if\n      - it gave us a valid connecting header\n      - it has a better chain than we have\n      - we haven't reached MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT yet",https://github.com/bitcoin/bitcoin/pull/19871#discussion_r484701461,484701461,src/net_processing.cpp
jonatack,2020-09-09 13:04:10,"b55f9790 suggestions\n```diff\n-    /** State used to enforce CHAIN_SYNC_TIMEOUT and EXTRA_PEER_CHECK_INTERVAL logics.\n+    /** State used to enforce CHAIN_SYNC_TIMEOUT and EXTRA_PEER_CHECK_INTERVAL logic.\n       *\n       * Both are only in effect for outbound, non-manual, non-protected connections.\n       * Any peer protected (m_protect = true) is not chosen for eviction. A peer is\n- ",https://github.com/bitcoin/bitcoin/pull/19871#discussion_r485593886,485593886,src/net_processing.cpp
ariard,2020-09-09 14:26:46,"Thanks, I'm going to leave it as it is. It's a bit confusing saying that something is ""marked as protected if it is not already marked as protected"".\n\nNote, actually CHAIN_SYNC_TIMEOUT and EXTRA_PEER_CHECK_INTERVAL are two different logics, thus the plural.",https://github.com/bitcoin/bitcoin/pull/19871#discussion_r485655554,485655554,src/net_processing.cpp
jonatack,2020-09-09 14:31:59,"I'm aware. Logic is most often used as an uncountable noun, but it's not an issue.\n\nWhile rewriting this, I think it would be good to clarify that the list of conditions is ""if all of these"" and not ""if any of these"".\n\nThe reordering suggestion is to follow the order of the actual checks.\n\nI verified that the proposed documentation corresponds to the code.",https://github.com/bitcoin/bitcoin/pull/19871#discussion_r485659666,485659666,src/net_processing.cpp
ariard,2020-09-10 13:57:14,"Thanks for the noun suggestion. Took it, also the re-ordering. But not the ""it is not already marked as protected"" it's a tautology IMO (it would false future triggering of protection if we don't due to g_outbound_peers_with_protect_from_disconnect is incremented in same conditional, but technically the state transition is defined without)",https://github.com/bitcoin/bitcoin/pull/19871#discussion_r486364880,486364880,src/net_processing.cpp
naumenkogs,2020-09-10 14:05:47,"I think this explanation actually belongs to the declaration of `m_protect` better, but I don't care enough to ask for this... Consider this if you gonna update it. ",https://github.com/bitcoin/bitcoin/pull/19871#discussion_r486371560,486371560,src/net_processing.cpp
amitiuttarwar,2021-02-12 22:21:49,"I don't think this is quite right? \n\nthe relevant part of the check in `ProcessHeadersMessage` checks `nodestate->pindexBestKnownBlock->nChainWork >= ::ChainActive().Tip()->nChainWork`, aka would set `m_protect` to true if they have the same chain tip as we do. \n\nI think saying the peer ""has a better chain"" is misleading, because then I'd expect a long-running node to usually not have prot",https://github.com/bitcoin/bitcoin/pull/19871#discussion_r575550089,575550089,src/net_processing.cpp
