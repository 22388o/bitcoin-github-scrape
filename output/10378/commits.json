[
  {
    "sha": "dbfde31fcb0632fa285c5a217f4f3cf773b78d9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmZkZTMxZmNiMDYzMmZhMjg1YzVhMjE3ZjRmM2NmNzczYjc4ZDlj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-05-09T22:24:16Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-05-09T22:24:16Z"
      },
      "message": "Rename TxConfirmStats to CTxConfirmStats to achieve class naming consistency",
      "tree": {
        "sha": "c85a43bccdd50495d33b868024182d1d5e19222b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c85a43bccdd50495d33b868024182d1d5e19222b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbfde31fcb0632fa285c5a217f4f3cf773b78d9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbfde31fcb0632fa285c5a217f4f3cf773b78d9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbfde31fcb0632fa285c5a217f4f3cf773b78d9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbfde31fcb0632fa285c5a217f4f3cf773b78d9c/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "776ba233e939fe41a74c6b2632b93a0679a32c71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/776ba233e939fe41a74c6b2632b93a0679a32c71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/776ba233e939fe41a74c6b2632b93a0679a32c71"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "009d656a19b21d5a45188f08596aa297cfaddb02",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbfde31fcb0632fa285c5a217f4f3cf773b78d9c/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbfde31fcb0632fa285c5a217f4f3cf773b78d9c/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=dbfde31fcb0632fa285c5a217f4f3cf773b78d9c",
        "patch": "@@ -22,7 +22,7 @@\n  * The tracking of unconfirmed (mempool) transactions is completely independent of the\n  * historical tracking of transactions that have been confirmed in a block.\n  */\n-class TxConfirmStats\n+class CTxConfirmStats\n {\n private:\n     //Define the buckets we will group transactions into\n@@ -62,13 +62,13 @@ class TxConfirmStats\n \n public:\n     /**\n-     * Create new TxConfirmStats. This is called by BlockPolicyEstimator's\n+     * Create new CTxConfirmStats. This is called by BlockPolicyEstimator's\n      * constructor with default values.\n      * @param defaultBuckets contains the upper limits for the bucket boundaries\n      * @param maxConfirms max number of confirms to track\n      * @param decay how much to decay the historical moving average per block\n      */\n-    TxConfirmStats(const std::vector<double>& defaultBuckets, unsigned int maxConfirms, double decay);\n+    CTxConfirmStats(const std::vector<double>& defaultBuckets, unsigned int maxConfirms, double decay);\n \n     /** Clear the state of the curBlock variables to start counting for the new block */\n     void ClearCurrent(unsigned int nBlockHeight);\n@@ -120,8 +120,8 @@ class TxConfirmStats\n };\n \n \n-TxConfirmStats::TxConfirmStats(const std::vector<double>& defaultBuckets,\n-                               unsigned int maxConfirms, double _decay)\n+CTxConfirmStats::CTxConfirmStats(const std::vector<double>& defaultBuckets,\n+                                 unsigned int maxConfirms, double _decay)\n {\n     decay = _decay;\n     for (unsigned int i = 0; i < defaultBuckets.size(); i++) {\n@@ -145,7 +145,7 @@ TxConfirmStats::TxConfirmStats(const std::vector<double>& defaultBuckets,\n }\n \n // Zero out the data for the current block\n-void TxConfirmStats::ClearCurrent(unsigned int nBlockHeight)\n+void CTxConfirmStats::ClearCurrent(unsigned int nBlockHeight)\n {\n     for (unsigned int j = 0; j < buckets.size(); j++) {\n         oldUnconfTxs[j] += unconfTxs[nBlockHeight%unconfTxs.size()][j];\n@@ -158,7 +158,7 @@ void TxConfirmStats::ClearCurrent(unsigned int nBlockHeight)\n }\n \n \n-void TxConfirmStats::Record(int blocksToConfirm, double val)\n+void CTxConfirmStats::Record(int blocksToConfirm, double val)\n {\n     // blocksToConfirm is 1-based\n     if (blocksToConfirm < 1)\n@@ -171,7 +171,7 @@ void TxConfirmStats::Record(int blocksToConfirm, double val)\n     curBlockVal[bucketindex] += val;\n }\n \n-void TxConfirmStats::UpdateMovingAverages()\n+void CTxConfirmStats::UpdateMovingAverages()\n {\n     for (unsigned int j = 0; j < buckets.size(); j++) {\n         for (unsigned int i = 0; i < confAvg.size(); i++)\n@@ -182,9 +182,9 @@ void TxConfirmStats::UpdateMovingAverages()\n }\n \n // returns -1 on error conditions\n-double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n-                                         double successBreakPoint, bool requireGreater,\n-                                         unsigned int nBlockHeight) const\n+double CTxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n+                                          double successBreakPoint, bool requireGreater,\n+                                          unsigned int nBlockHeight) const\n {\n     // Counters for a bucket (or range of buckets)\n     double nConf = 0; // Number of tx's confirmed within the confTarget\n@@ -280,7 +280,7 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n     return median;\n }\n \n-void TxConfirmStats::Write(CAutoFile& fileout) const\n+void CTxConfirmStats::Write(CAutoFile& fileout) const\n {\n     fileout << decay;\n     fileout << buckets;\n@@ -289,7 +289,7 @@ void TxConfirmStats::Write(CAutoFile& fileout) const\n     fileout << confAvg;\n }\n \n-void TxConfirmStats::Read(CAutoFile& filein)\n+void CTxConfirmStats::Read(CAutoFile& filein)\n {\n     // Read data file into temporary variables and do some very basic sanity checking\n     std::vector<double> fileBuckets;\n@@ -352,15 +352,15 @@ void TxConfirmStats::Read(CAutoFile& filein)\n              numBuckets, maxConfirms);\n }\n \n-unsigned int TxConfirmStats::NewTx(unsigned int nBlockHeight, double val)\n+unsigned int CTxConfirmStats::NewTx(unsigned int nBlockHeight, double val)\n {\n     unsigned int bucketindex = bucketMap.lower_bound(val)->second;\n     unsigned int blockIndex = nBlockHeight % unconfTxs.size();\n     unconfTxs[blockIndex][bucketindex]++;\n     return bucketindex;\n }\n \n-void TxConfirmStats::removeTx(unsigned int entryHeight, unsigned int nBestSeenHeight, unsigned int bucketindex)\n+void CTxConfirmStats::removeTx(unsigned int entryHeight, unsigned int nBestSeenHeight, unsigned int bucketindex)\n {\n     //nBestSeenHeight is not updated yet for the new block\n     int blocksAgo = nBestSeenHeight - entryHeight;\n@@ -418,7 +418,7 @@ CBlockPolicyEstimator::CBlockPolicyEstimator()\n         vfeelist.push_back(bucketBoundary);\n     }\n     vfeelist.push_back(INF_FEERATE);\n-    feeStats = new TxConfirmStats(vfeelist, MAX_BLOCK_CONFIRMS, DEFAULT_DECAY);\n+    feeStats = new CTxConfirmStats(vfeelist, MAX_BLOCK_CONFIRMS, DEFAULT_DECAY);\n }\n \n CBlockPolicyEstimator::~CBlockPolicyEstimator()\n@@ -603,7 +603,7 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n         filein >> nFileBestSeenHeight;\n         feeStats->Read(filein);\n         nBestSeenHeight = nFileBestSeenHeight;\n-        // if nVersionThatWrote < 139900 then another TxConfirmStats (for priority) follows but can be ignored.\n+        // if nVersionThatWrote < 139900 then another CTxConfirmStats (for priority) follows but can be ignored.\n     }\n     catch (const std::exception&) {\n         LogPrintf(\"CBlockPolicyEstimator::Read(): unable to read policy estimator data (non-fatal)\\n\");"
      },
      {
        "sha": "266083c9a4432711390a6af16c7a3a46efe4df39",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbfde31fcb0632fa285c5a217f4f3cf773b78d9c/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbfde31fcb0632fa285c5a217f4f3cf773b78d9c/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=dbfde31fcb0632fa285c5a217f4f3cf773b78d9c",
        "patch": "@@ -19,7 +19,7 @@ class CAutoFile;\n class CFeeRate;\n class CTxMemPoolEntry;\n class CTxMemPool;\n-class TxConfirmStats;\n+class CTxConfirmStats;\n \n /** \\class CBlockPolicyEstimator\n  * The BlockPolicyEstimator is used for estimating the feerate needed\n@@ -141,7 +141,7 @@ class CBlockPolicyEstimator\n     std::map<uint256, TxStatsInfo> mapMemPoolTxs;\n \n     /** Classes to track historical data on transaction confirmations */\n-    TxConfirmStats* feeStats;\n+    CTxConfirmStats* feeStats;\n \n     unsigned int trackedTxs;\n     unsigned int untrackedTxs;"
      }
    ]
  }
]