petertodd,2014-11-12T14:53:54Z,"NACK\n\nThis will definitely break things, and I don't see a need given how easy the SIGHASH flags are to remember. All the standard ones can be interpreted by thinking in terms of upper and lower nibbles:\n\nUpper nibble == 0:\n\n```\n01 - ALL\n02 - NONE\n03 - SINGLE\n```\n\nUpper nibble == 8:\n\n```\n81 - ANYONECANPAY | ALL\n82 - ANYONECANPAY | NONE\n83 - ANYONECANPAY | SINGLE\n```\n\nThat's it.",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-62729694,62729694,
laanwj,2014-11-12T15:36:21Z,"@petertodd That's not really fair. Why was this an open issue, if this is not desirable?\n\nWhere is the risk of breakage? It doesn't affect consensus code. Do people rely on the exact format of the dumped script format?\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-62737045,62737045,
petertodd,2014-11-12T15:45:59Z,"@laanwj They sure do! Granted, maybe we don't want that, in which case we should delibrately break it. (make a note in the release notes please)\n\n> Why was this an open issue, if this is not desirable?\n\nWell, I'm telling people why I think it's not desirable. If I'm outnumbered on this, then I'll at least ask if we could drop the 'SIGHASH_' prefix on this; having the full string is kinda long ",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-62738788,62738788,
laanwj,2014-11-12T16:19:55Z,"@petertodd Yes, let's see what the others think here. I generally like it when people solve an actual open issue :)\n\nAgree on dropping the `SIGHASH_` prefix and adding mention to `doc/release-notes.md`.\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-62745039,62745039,
mruddy,2014-11-12T17:06:51Z,"@petertodd @laanwj thanks for the feedback.\n\nI have removed the ""SIGHASH_"" from the text due to your feedback that it was too verbose. I was back and forth on that before I pushed it up, so I'm happy for your opinions.\n\nI can see @petertodd's concern about this being a breaking change for people scripted against it. It's something to weigh. I don't know that adding more flags is the answer. Fr",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-62753538,62753538,
mruddy,2014-11-12T18:02:45Z,Added some release notes.\n,https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-62762686,62762686,
petertodd,2014-11-12T18:06:03Z,@mruddy Mind squashing those commits?\n,https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-62763203,62763203,
mruddy,2014-11-12T18:23:37Z,"sure thing, done\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-62765917,62765917,
sipa,2014-11-12T19:16:01Z,"I don't think we should be adding this to the existing 'asm' output, but perhaps an alternate decoding that goes into lower level detail.\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-62775953,62775953,
mruddy,2014-11-12T22:09:51Z,"ok, thanks. if nobody pops up and says that they want this within a day or so, i'll go ahead and close this. it probably fits better somewhere else.\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-62804217,62804217,
laanwj,2014-11-13T08:15:19Z,@sipa What if the 'asm' format grew a way to specify comments?\n,https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-62855535,62855535,
laanwj,2014-11-13T08:50:31Z,"@gmaxwell can you comment here? You created #3166, so maybe you can illuminate how it should work\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-62859542,62859542,
gmaxwell,2014-11-13T21:24:27Z,"Hm. I don't have a strong opinion about how it would work.  I would have normally assumed some annotation on the asm output, or an additional lower level asm view.\n\nMy goal was mostly that it would be clearly indicated in some manner stronger than squnting at bytes. In particular, squinting fails when you only barely know there is something you need to squint at. An expliact flag list would be m",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-62968669,62968669,
mruddy,2014-11-18T13:12:25Z,"Closing because there doesn't seem to be much demand for this fix with the possibility that it breaks things scripted against the ""asm"" output value.\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-63468597,63468597,
petertodd,2014-11-18T18:27:51Z,"@mruddy Actually, I was just asking around, and it looks like people are getting the message and not depending on the asm output format as much as before. As an example Counterparty switched to using python-bitcoinlib for that on my advice.\n\nMaybe we should reopen this for v0.11 and simultaneously drop the 'OP_' prefix from the opcode names in the asm output? That'd likely break the remaining st",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-63519743,63519743,
mruddy,2014-11-19T16:01:23Z,"@petertodd sure, re-opened. I have not gone through and made the ""OP_"" prefix changes yet. I figure that I'll have to do a bunch of reference checking to see what all I'm impacting, and then update or make some unit tests when I do that. So, more changes to come for that.\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-63662911,63662911,
petertodd,2014-11-20T19:38:12Z,"@mruddy Great, thanks!\n\nFWIW a ""OP_"" prefix dropping change should definitely be in a separate commit so it can be debated separately. Also, if changing stuff like that _doesn't_ break any tests, keep in mind it's a sign that maybe depending on the exact format of the asm output is a bad idea. :)\n\n(yeah, the more I think about this, the more I think my original objection was wrong...)\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-63866111,63866111,
mruddy,2014-11-28T22:36:56Z,"@petertodd sorry for my delayed response... i just made #5392 for the ""OP_"" prefix changes. also, i rebased this request's commit so that it'll merge into the upstream once again.\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-64932517,64932517,
mruddy,2014-12-11T11:39:19Z,"Eh, not important enough to keep open and keep re-basing the commit.\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-66607385,66607385,
laanwj,2014-12-11T11:52:38Z,"I still think this makes sense, but after 0.10 obviously.\nIf this is closed unfixed with ""don't bother"" then so should #3166.\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-66608745,66608745,
sipa,2014-12-12T14:03:12Z,I really don't like a script show function to make assumptions about the data inside it. It feels like a layer violation.\n,https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-66775798,66775798,
laanwj,2014-12-12T14:16:57Z,"@sipa you could argue that, but in practice that's what disassemblers do, given incomplete semantic information they have to make guesses. As long as the information is only shown in what is an informative comment for the user, I don't think it hurts.\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-66777370,66777370,
mruddy,2014-12-12T16:20:02Z,"@laanwj ready for review. i added a couple more test cases, and re-squashed the commit after re-basing to the latest upstream.\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-66794900,66794900,
mruddy,2014-12-13T13:12:48Z,"While doing more testing, I found that I was able to make some OP_RETURN data look like a signature and cause an erroneous decode.\nI added some handling for that and did a little re-factoring at the same time.\nI also changed the parentheses to square brackets for consistency with an existing error case that would output square brackets.\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-66875909,66875909,
mruddy,2014-12-21T00:22:40Z,Tightened up a couple more cases and added unit tests.\n,https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-67755293,67755293,
mruddy,2014-12-21T11:40:37Z,@Diapolo thanks for the review. I've addressed your three comments in the latest updated commit.\n,https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-67767756,67767756,
laanwj,2015-03-26T12:33:10Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-86490525,86490525,
mruddy,2015-07-02T14:17:51Z,"Rebased, incorporated latest feedback about the function signature, and decided to actually replace the sighash byte on signatures when the decode occurs instead of just appending the decode after the sighash byte.\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-118047801,118047801,
mruddy,2015-07-04T18:04:47Z,"@jtimon your two feedback items are incorporated into this latest commit, thanks!\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-118538766,118538766,
jgarzik,2015-07-23T18:29:28Z,"Leaning towards closing (with the associated comment/act on the related issue).  Generally agree w/ the comment that this seems like a layering violation.\n\nThe intent is understandable, but it seems like the script show function is not the right place.\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-124199761,124199761,
mruddy,2015-07-23T18:49:31Z,"Yes, it should probably be closed. The more I worked on these changes, the less I liked them. I suppose I'll wait a day and close it unless someone objects.\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-124208990,124208990,
jtimon,2015-07-24T02:03:47Z,"I agree the intent is good, and it can be done, just in script/standard rather than script/script.\nIf closing this PR and reopening another one that does the same in another file is clearer, let's do that.\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-124291380,124291380,
jgarzik,2015-07-24T05:51:55Z,TxToUniv() dumps both script hex and script asm.\n\nI wonder if an optional argument to script.ToString() would suffice?\n\nPrinting out the flags somewhere is certainly useful.  bitcoin-tx utility and RPC both call TxToUnix() when dumping the script verbosely.\n,https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-124337349,124337349,
mruddy,2015-07-24T19:10:03Z,"I don't see how an optional argument to CScript::ToString would solve the layering concern.\n\nThat is caused by the script object needing to know if a piece of itself is a signature with a valid hash type. Right now, that logic is in the interpreter.\n\nI spent some time looking at the layering.\n\nI think IsValidSignatureEncoding could be moved over to script/bitcoinconsensus.cpp since it is ent",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-124644540,124644540,
jtimon,2015-07-24T20:44:46Z,"> I think IsValidSignatureEncoding could be moved over to script/bitcoinconsensus.cpp since it is entirely consensus-critical since BIP66.\n\nIt is in script/interpreter, so it's already part of libconsensus, see: https://github.com/bitcoin/bitcoin/blob/master/src/Makefile.am#L365\n\n> Since the sig hash type is not part of consensus...\n> Then, CheckSignatureEncoding could also go to script/stand",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-124716805,124716805,
mruddy,2015-07-25T11:50:05Z,"> It is in script/interpreter, so it's already part of libconsensus, see: https://github.com/bitcoin/bitcoin/blob/master/src/Makefile.am#L365\n\nThat's true. I was just thinking that determining whether a signature is validly encoded is generic enough that it could be useful without including the interpreter. Personal preference, I guess.\n\n> The sighash types and CheckSignatureEncoding are defin",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-124836659,124836659,
sipa,2015-07-25T12:07:17Z,"STRICTENC is indeed not technically consensus-critical, but it is part of\nthe interpreter (as we want it for evaluation of standardness), which\nconsensus-critical code depends on. I don't see how you can disconnect it\nfrom the interpreter.\n\nIn general I prefer to have the basic data type definitions (script/script,\nCScript) to have as little dependencies and functionality as possible, as\nth",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-124838423,124838423,
jtimon,2015-07-25T21:45:56Z,"> Oh, you mean move ValueString and mapSigHashTypes over to script/standard and add the CScript as an argument to ValueString? Yes, that may make sense. \n\nYes. I like this PR, but the code should just be in script/standard instead of script/script or script/interpreter, it's only that.\n\n> And, if we move the sighash stuff from interpreter over to standard, then it'll all be in the same place.\",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-124900908,124900908,
mruddy,2015-07-26T13:38:25Z,"@jtimon OK, I just rebased and made the layering changes that I think we were talking about. I didn't squish them into one commit so that you could easily diff.\n\nI did look at what @sipa was talking about. I see he added a FormatScript in core_write.cpp that I could probably build off of instead (never saw it before because it's only referenced by tests). He might be onto something. At quick gla",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-124988112,124988112,
jtimon,2015-07-26T19:47:06Z,"Now it's actually worse because you're putting the whole script/standard inside libconsensus.\nIn fact, that's what is giving you errors on travis https://travis-ci.org/bitcoin/bitcoin/jobs/72684953#L2093\n because you haven't adapted makefile.am to include script/standard in libconsensus.\n\nBut you're very close, you can just move the rest of CScript::ToString to the new function in script/stand",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-125032804,125032804,
jtimon,2015-07-26T21:41:16Z,"To try to be clearer: if you need to ""de-encapsulate"" anything from CScript - by creating a new child class that uses the protected arguments, by creating new getters or even by making a private/protected public - to be able to move CScript::ToString up, I'm totally fine with that.\nI'm happy with any solution that ends up with equal or less code in libconsensus (https://github.com/bitcoin/bitcoin",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-125042661,125042661,
mruddy,2015-07-28T01:41:20Z,"@jtimon that's a lot of useful input, thanks! I took that and actually refactored these changes twice.\n\nI put each of the two ways into the last two commits.\n\nThe first commit refactored into a couple of formatter classes. It worked, but the second/next idea seemed a little cleaner.\n\nThe second commit does away with the formatter class idea of the previous commit and just moves CScript::ToSt",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-125402368,125402368,
mruddy,2015-07-28T10:53:51Z,... or not. I see the travis windows builds failed because primitives/transaction.cpp is still part of libconsensus and references the ScriptToAsmStr for ToString'ing CTxIn and CTxOut objects. Guess I'll have to move those around too.\n,https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-125554891,125554891,
jtimon,2015-07-28T11:54:14Z,"You are welcomed. I'm fine with putting new things in core_io as @sipa suggested, just not in libconsensus. `CTransaction::ToString` now calls `ScriptToAsmStr` so instead of putting script/standard in libconsensus, now you're putting core_io instead. The important thing is this: independently of where you chose to put the new code outside of libconsensus, you cannot include that new code from libc",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-125573015,125573015,
jtimon,2015-07-28T12:00:11Z,"Another possibility is to leave the new code in libconsensus like you had at the beginning (not my preference), but it still couldn't be in script/script since you need script/interpreter and that would cause a circular dependency. So even leaving the new code in libconsensus, you always need to rename CScript::ToString and move it our of script/script.\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-125574569,125574569,
mruddy,2015-07-28T23:48:10Z,"It turns out that resolving that last dependency was pretty easy.\nI simply stopped using that script assembly formatting in the CTxIn and CTxOut ToString methods.\nThose ToString's were only called by very low value debug and log print statements and the formatted scripts were being truncated immediately too. So, converting to hex instead in those cases isn't losing much, if anything at all, in m",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-125783778,125783778,
jtimon,2015-07-29T10:00:12Z,"This looks like a reasonable solution.\nApart from the latest little nits, consensus-safe-review ACK (I also slightly reviewed the new functions, but didn't look much at the tests).\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-125902603,125902603,
mruddy,2015-07-29T12:46:24Z,"@jtimon You are correct about those latest nits. I made the updates and squashed+rebased everything back down to the one latest commit. I also updated the release notes description at the same time. Should be all good now. Thanks for the help, it was good working with you on this!\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-125939292,125939292,
jtimon,2015-07-29T12:55:30Z,"Thanks to you for your patience when improving this. Everything looks good, re-utACK.\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-125940814,125940814,
sipa,2015-07-30T11:47:09Z,"Untested ACK, but the tests look convincing.\n",https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-126286128,126286128,
mruddy,2015-07-31T00:18:52Z,@sipa nit addressed. I also added a new test case just to cover a specific low probability case related to the nit to make sure it was covered.\n,https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-126527658,126527658,
jgarzik,2015-09-15T17:27:11Z,ut ACK - looks ready to merge\n,https://github.com/bitcoin/bitcoin/pull/5264#issuecomment-140473295,140473295,
laanwj,2014-11-12T16:18:01Z,Any special reason to use SCRIPT_VERIFY_STRICTENC instead of SCRIPT_VERIFY_DERSIG here?\n,https://github.com/bitcoin/bitcoin/pull/5264#discussion_r20229478,20229478,src/script/script.cpp
mruddy,2014-11-12T16:58:33Z,"the reason why i went with SCRIPT_VERIFY_STRICTENC was because in CheckSignatureEncoding, SCRIPT_VERIFY_STRICTENC will get us some checking through IsDefinedHashtypeSignature as well in order to make sure that the hash type is one of the defined types. if it's not a defined hash type, then no decode gets appended to the hex encoding of the signature.\n",https://github.com/bitcoin/bitcoin/pull/5264#discussion_r20232467,20232467,src/script/script.cpp
laanwj,2014-12-11T17:27:55Z,"Indexing a std::map with [x] adds an entry with the default value for the type (in this case, an empty string), if the key doesn't exist in the map. This is not thread-safe, and makes it possible to consume some memory by providing unknown `sigHashTypes`.\n- please make `mapSigHashTypes` const\n- use `.find(x)` instead of `[x]` to find the value\n",https://github.com/bitcoin/bitcoin/pull/5264#discussion_r21692475,21692475,src/script/script.cpp
mruddy,2014-12-12T13:31:21Z,"Thanks for the code review. Guarding that lookup with CheckSignatureEncoding I believe prevents that case, but you're right, I did not realize or intend for the [] operator to act that way. So, it'll be safer to make the change that you propose in-case someone changes CheckSignatureEncoding to act differently in the future. I'll get that done today and re-squash the commit.\n",https://github.com/bitcoin/bitcoin/pull/5264#discussion_r21743852,21743852,src/script/script.cpp
Diapolo,2014-12-21T01:26:21Z,"Pleaso don't remove that line, it is here to separate the own header (script.h) from other core headers.\n",https://github.com/bitcoin/bitcoin/pull/5264#discussion_r22145143,22145143,src/script/script.cpp
Diapolo,2014-12-21T01:27:45Z,"Just asking, but isn't this strictly a signed/unsigned comparison as .size() returns a size_t?\n",https://github.com/bitcoin/bitcoin/pull/5264#discussion_r22145152,22145152,src/script/script.cpp
Diapolo,2014-12-21T01:28:49Z,Nit: Can you place this after a newline below the standard C/C++ headers?\n,https://github.com/bitcoin/bitcoin/pull/5264#discussion_r22145161,22145161,src/script/script.h
laanwj,2015-03-26T12:37:04Z,"I don't like exposing `valtype` externally, the type name is too general.  Would prefer to change the function signature to just\n\n``` c++\nbool CheckSignatureEncoding(const vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror) {\n```\n",https://github.com/bitcoin/bitcoin/pull/5264#discussion_r27208491,27208491,src/script/interpreter.cpp
jtimon,2015-07-04T13:22:17Z,why remove std:: ?\n,https://github.com/bitcoin/bitcoin/pull/5264#discussion_r33887454,33887454,src/script/script.cpp
jtimon,2015-07-04T13:25:44Z,"Is this actually used in the .h ? If not, why not move it to the cpp or wherever it is used?\n",https://github.com/bitcoin/bitcoin/pull/5264#discussion_r33887472,33887472,src/script/script.h
mruddy,2015-07-04T17:02:40Z,"Just for consistency within the file. That method was the only one using the prefix in that file because of the ""using namespace std"" up on line 12. That's all I was thinking when I did that.\n",https://github.com/bitcoin/bitcoin/pull/5264#discussion_r33888698,33888698,src/script/script.cpp
mruddy,2015-07-04T17:12:26Z,"You might be right. I'll double check. I might have needed it at one point and then moved things around. If it's only needed in the cpp, I'll move it.\n",https://github.com/bitcoin/bitcoin/pull/5264#discussion_r33888774,33888774,src/script/script.h
jtimon,2015-07-04T17:23:51Z,"We're doing the opposite in other places. That doesn't mean we should do it here. If you were touching the lines anyway I wouldn't have said anything, but increasing the diff only for consistency doesn't seem very interesting in my opinion. Anyway, feel free to ignore, just a small nit.\n",https://github.com/bitcoin/bitcoin/pull/5264#discussion_r33888850,33888850,src/script/script.cpp
mruddy,2015-07-04T17:31:29Z,"I agree with you, I'm going to put the prefixes back to reduce the diff in the next commit. Thanks for the info and for reviewing these changes.\n",https://github.com/bitcoin/bitcoin/pull/5264#discussion_r33888910,33888910,src/script/script.cpp
jtimon,2015-07-04T23:39:35Z,"Oh, I hadn't noticed the circular dependence...maybe an additional moveonly commit would solve that?\nmhmm, moving CheckSignatureEncoding and the flags from interpreter to script would be an option. Maybe move the flags to consensus/consensus instead?\nAnother option is not having anything depending on the flags in script/script: CScript methods can be turned into functions taking a CScript as par",https://github.com/bitcoin/bitcoin/pull/5264#discussion_r33890683,33890683,src/script/script.cpp
laanwj,2015-07-20T17:03:43Z,"Yes, script should probably not depend on the interpreter.\nI think we should move the disassembly logic out of the core/consensus data structure to separate utility functions.\nE.g. also IsPayToPublicKeyHash() doesn't belong in CScript itself, it belongs at a higher level.\n",https://github.com/bitcoin/bitcoin/pull/5264#discussion_r35017741,35017741,src/script/script.cpp
jtimon,2015-07-21T17:51:52Z,"Would it be enough to move the opcode constants from script/interpreter to script/script in this PR to avoid this new include?\nI haven't tried to compile that but I think that should be enough.\n\nAbout IsPayToPublicKeyHash, do you mean ValueString shouldn't be a method of CScript ?\nOtherwise, since CScript::ValueString uses IsPayToPublicKeyHash, it has to be in the same level or below, but not ",https://github.com/bitcoin/bitcoin/pull/5264#discussion_r35132318,35132318,src/script/script.cpp
jtimon,2015-07-29T09:57:43Z,"This is not necessary anymore, right?\n",https://github.com/bitcoin/bitcoin/pull/5264#discussion_r35743957,35743957,src/primitives/transaction.cpp
jtimon,2015-07-29T09:58:24Z,This is core_io now.\n,https://github.com/bitcoin/bitcoin/pull/5264#discussion_r35743999,35743999,src/bitcoin-tx.cpp
jtimon,2015-07-29T09:58:38Z,This is core_io now.\n,https://github.com/bitcoin/bitcoin/pull/5264#discussion_r35744011,35744011,src/test/script_tests.cpp
sipa,2015-07-30T11:45:59Z,"Nit: the !script.IsUnspendable() check can move here, I believe.\n",https://github.com/bitcoin/bitcoin/pull/5264#discussion_r35862370,35862370,src/core_write.cpp
arielgabizon,2018-04-18T12:33:53Z,was there a reason `HexStr` wasn't used here before?,https://github.com/bitcoin/bitcoin/pull/5264#discussion_r182409096,182409096,src/primitives/transaction.cpp
mruddy,2018-04-18T13:04:01Z,"It was just more verbose (someone's personal preference, I guess), see what was removed `CScript::ToString`: https://github.com/bitcoin/bitcoin/commit/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e#diff-f7ca24fb80ddba0f291cb66344ca6fcb",https://github.com/bitcoin/bitcoin/pull/5264#discussion_r182417714,182417714,src/primitives/transaction.cpp
