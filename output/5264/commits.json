[
  {
    "sha": "af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjMyMDhiZmE2OTY3ZDZiMzVhZWNmMGJhMzVkOWQ2YmYwZjgzMTdl",
    "commit": {
      "author": {
        "name": "mruddy",
        "email": "mruddy@users.noreply.github.com",
        "date": "2015-07-30T23:56:00Z"
      },
      "committer": {
        "name": "mruddy",
        "email": "mruddy@users.noreply.github.com",
        "date": "2015-07-30T23:56:00Z"
      },
      "message": "Resolve issue 3166.\nThese changes decode valid SIGHASH types on signatures in assembly (asm) representations of scriptSig scripts.\nThis squashed commit incorporates substantial helpful feedback from jtimon, laanwj, and sipa.",
      "tree": {
        "sha": "f61b271e4446dae05172096c63d9320f4dbcaf2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f61b271e4446dae05172096c63d9320f4dbcaf2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/comments",
    "author": {
      "login": "mruddy",
      "id": 6440430,
      "node_id": "MDQ6VXNlcjY0NDA0MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mruddy",
      "html_url": "https://github.com/mruddy",
      "followers_url": "https://api.github.com/users/mruddy/followers",
      "following_url": "https://api.github.com/users/mruddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mruddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mruddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
      "organizations_url": "https://api.github.com/users/mruddy/orgs",
      "repos_url": "https://api.github.com/users/mruddy/repos",
      "events_url": "https://api.github.com/users/mruddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mruddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mruddy",
      "id": 6440430,
      "node_id": "MDQ6VXNlcjY0NDA0MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mruddy",
      "html_url": "https://github.com/mruddy",
      "followers_url": "https://api.github.com/users/mruddy/followers",
      "following_url": "https://api.github.com/users/mruddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mruddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mruddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
      "organizations_url": "https://api.github.com/users/mruddy/orgs",
      "repos_url": "https://api.github.com/users/mruddy/repos",
      "events_url": "https://api.github.com/users/mruddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mruddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "675d2feffa84a6ffeabac32aeed37f6a7f74bee3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/675d2feffa84a6ffeabac32aeed37f6a7f74bee3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/675d2feffa84a6ffeabac32aeed37f6a7f74bee3"
      }
    ],
    "stats": {
      "total": 255,
      "additions": 206,
      "deletions": 49
    },
    "files": [
      {
        "sha": "85f9bd9a2fbfdfc4d2a1648ef09830b7adb80137",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e",
        "patch": "@@ -37,6 +37,33 @@ git merge commit are mentioned.\n \n ### RPC and REST\n \n+Asm representations of scriptSig signatures now contain SIGHASH type decodes\n+----------------------------------------------------------------------------\n+\n+The `asm` property of each scriptSig now contains the decoded signature hash\n+type for each signature that provides a valid defined hash type.\n+\n+The following items contain assembly representations of scriptSig signatures\n+and are affected by this change:\n+\n+- RPC `getrawtransaction`\n+- RPC `decoderawtransaction`\n+- REST `/rest/tx/` (JSON format)\n+- REST `/rest/block/` (JSON format when including extended tx details)\n+- `bitcoin-tx -json`\n+\n+For example, the `scriptSig.asm` property of a transaction input that\n+previously showed an assembly representation of:\n+\n+    304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c509001\n+\n+now shows as:\n+\n+    304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c5090[ALL]\n+\n+Note that the output of the RPC `decodescript` did not change because it is\n+configured specifically to process scriptPubKey and not scriptSig scripts.\n+\n ### Configuration and command-line options\n \n ### Block and transaction handling"
      },
      {
        "sha": "4bca62338046950ea2f712e8d15034d906f13603",
        "filename": "qa/rpc-tests/decodescript.py",
        "status": "modified",
        "additions": 71,
        "deletions": 1,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/qa/rpc-tests/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/qa/rpc-tests/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/decodescript.py?ref=af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e",
        "patch": "@@ -5,6 +5,9 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n+from test_framework.mininode import *\n+from binascii import hexlify, unhexlify\n+from cStringIO import StringIO\n \n class DecodeScriptTest(BitcoinTestFramework):\n     \"\"\"Tests decoding scripts via RPC command \"decodescript\".\"\"\"\n@@ -107,10 +110,77 @@ def decodescript_script_pub_key(self):\n         rpc_result = self.nodes[0].decodescript('63' + push_public_key + 'ad670320a107b17568' + push_public_key + 'ac')\n         assert_equal('OP_IF ' + public_key + ' OP_CHECKSIGVERIFY OP_ELSE 500000 OP_NOP2 OP_DROP OP_ENDIF ' + public_key + ' OP_CHECKSIG', rpc_result['asm'])\n \n+    def decoderawtransaction_asm_sighashtype(self):\n+        \"\"\"Tests decoding scripts via RPC command \"decoderawtransaction\".\n+\n+        This test is in with the \"decodescript\" tests because they are testing the same \"asm\" script decodes.\n+        \"\"\"\n+\n+        # this test case uses a random plain vanilla mainnet transaction with a single P2PKH input and output\n+        tx = '0100000001696a20784a2c70143f634e95227dbdfdf0ecd51647052e70854512235f5986ca010000008a47304402207174775824bec6c2700023309a168231ec80b82c6069282f5133e6f11cbb04460220570edc55c7c5da2ca687ebd0372d3546ebc3f810516a002350cac72dfe192dfb014104d3f898e6487787910a690410b7a917ef198905c27fb9d3b0a42da12aceae0544fc7088d239d9a48f2828a15a09e84043001f27cc80d162cb95404e1210161536ffffffff0100e1f505000000001976a914eb6c6e0cdb2d256a32d97b8df1fc75d1920d9bca88ac00000000'\n+        rpc_result = self.nodes[0].decoderawtransaction(tx)\n+        assert_equal('304402207174775824bec6c2700023309a168231ec80b82c6069282f5133e6f11cbb04460220570edc55c7c5da2ca687ebd0372d3546ebc3f810516a002350cac72dfe192dfb[ALL] 04d3f898e6487787910a690410b7a917ef198905c27fb9d3b0a42da12aceae0544fc7088d239d9a48f2828a15a09e84043001f27cc80d162cb95404e1210161536', rpc_result['vin'][0]['scriptSig']['asm'])\n+\n+        # this test case uses a mainnet transaction that has a P2SH input and both P2PKH and P2SH outputs.\n+        # it's from James D'Angelo's awesome introductory videos about multisig: https://www.youtube.com/watch?v=zIbUSaZBJgU and https://www.youtube.com/watch?v=OSA1pwlaypc\n+        # verify that we have not altered scriptPubKey decoding.\n+        tx = '01000000018d1f5635abd06e2c7e2ddf58dc85b3de111e4ad6e0ab51bb0dcf5e84126d927300000000fdfe0000483045022100ae3b4e589dfc9d48cb82d41008dc5fa6a86f94d5c54f9935531924602730ab8002202f88cf464414c4ed9fa11b773c5ee944f66e9b05cc1e51d97abc22ce098937ea01483045022100b44883be035600e9328a01b66c7d8439b74db64187e76b99a68f7893b701d5380220225bf286493e4c4adcf928c40f785422572eb232f84a0b83b0dea823c3a19c75014c695221020743d44be989540d27b1b4bbbcfd17721c337cb6bc9af20eb8a32520b393532f2102c0120a1dda9e51a938d39ddd9fe0ebc45ea97e1d27a7cbd671d5431416d3dd87210213820eb3d5f509d7438c9eeecb4157b2f595105e7cd564b3cdbb9ead3da41eed53aeffffffff02611e0000000000001976a914dc863734a218bfe83ef770ee9d41a27f824a6e5688acee2a02000000000017a9142a5edea39971049a540474c6a99edf0aa4074c588700000000'\n+        rpc_result = self.nodes[0].decoderawtransaction(tx)\n+        assert_equal('8e3730608c3b0bb5df54f09076e196bc292a8e39a78e73b44b6ba08c78f5cbb0', rpc_result['txid'])\n+        assert_equal('0 3045022100ae3b4e589dfc9d48cb82d41008dc5fa6a86f94d5c54f9935531924602730ab8002202f88cf464414c4ed9fa11b773c5ee944f66e9b05cc1e51d97abc22ce098937ea[ALL] 3045022100b44883be035600e9328a01b66c7d8439b74db64187e76b99a68f7893b701d5380220225bf286493e4c4adcf928c40f785422572eb232f84a0b83b0dea823c3a19c75[ALL] 5221020743d44be989540d27b1b4bbbcfd17721c337cb6bc9af20eb8a32520b393532f2102c0120a1dda9e51a938d39ddd9fe0ebc45ea97e1d27a7cbd671d5431416d3dd87210213820eb3d5f509d7438c9eeecb4157b2f595105e7cd564b3cdbb9ead3da41eed53ae', rpc_result['vin'][0]['scriptSig']['asm'])\n+        assert_equal('OP_DUP OP_HASH160 dc863734a218bfe83ef770ee9d41a27f824a6e56 OP_EQUALVERIFY OP_CHECKSIG', rpc_result['vout'][0]['scriptPubKey']['asm'])\n+        assert_equal('OP_HASH160 2a5edea39971049a540474c6a99edf0aa4074c58 OP_EQUAL', rpc_result['vout'][1]['scriptPubKey']['asm'])\n+        txSave = CTransaction()\n+        txSave.deserialize(StringIO(unhexlify(tx)))\n+\n+        # make sure that a specifically crafted op_return value will not pass all the IsDERSignature checks and then get decoded as a sighash type\n+        tx = '01000000015ded05872fdbda629c7d3d02b194763ce3b9b1535ea884e3c8e765d42e316724020000006b48304502204c10d4064885c42638cbff3585915b322de33762598321145ba033fc796971e2022100bb153ad3baa8b757e30a2175bd32852d2e1cb9080f84d7e32fcdfd667934ef1b012103163c0ff73511ea1743fb5b98384a2ff09dd06949488028fd819f4d83f56264efffffffff0200000000000000000b6a0930060201000201000180380100000000001976a9141cabd296e753837c086da7a45a6c2fe0d49d7b7b88ac00000000'\n+        rpc_result = self.nodes[0].decoderawtransaction(tx)\n+        assert_equal('OP_RETURN 300602010002010001', rpc_result['vout'][0]['scriptPubKey']['asm'])\n+\n+        # verify that we have not altered scriptPubKey processing even of a specially crafted P2PKH pubkeyhash and P2SH redeem script hash that is made to pass the der signature checks\n+        tx = '01000000018d1f5635abd06e2c7e2ddf58dc85b3de111e4ad6e0ab51bb0dcf5e84126d927300000000fdfe0000483045022100ae3b4e589dfc9d48cb82d41008dc5fa6a86f94d5c54f9935531924602730ab8002202f88cf464414c4ed9fa11b773c5ee944f66e9b05cc1e51d97abc22ce098937ea01483045022100b44883be035600e9328a01b66c7d8439b74db64187e76b99a68f7893b701d5380220225bf286493e4c4adcf928c40f785422572eb232f84a0b83b0dea823c3a19c75014c695221020743d44be989540d27b1b4bbbcfd17721c337cb6bc9af20eb8a32520b393532f2102c0120a1dda9e51a938d39ddd9fe0ebc45ea97e1d27a7cbd671d5431416d3dd87210213820eb3d5f509d7438c9eeecb4157b2f595105e7cd564b3cdbb9ead3da41eed53aeffffffff02611e0000000000001976a914301102070101010101010102060101010101010188acee2a02000000000017a91430110207010101010101010206010101010101018700000000'\n+        rpc_result = self.nodes[0].decoderawtransaction(tx)\n+        assert_equal('OP_DUP OP_HASH160 3011020701010101010101020601010101010101 OP_EQUALVERIFY OP_CHECKSIG', rpc_result['vout'][0]['scriptPubKey']['asm'])\n+        assert_equal('OP_HASH160 3011020701010101010101020601010101010101 OP_EQUAL', rpc_result['vout'][1]['scriptPubKey']['asm'])\n+\n+        # some more full transaction tests of varying specific scriptSigs. used instead of\n+        # tests in decodescript_script_sig because the decodescript RPC is specifically\n+        # for working on scriptPubKeys (argh!).\n+        push_signature = hexlify(txSave.vin[0].scriptSig)[2:(0x48*2+4)]\n+        signature = push_signature[2:]\n+        der_signature = signature[:-2]\n+        signature_sighash_decoded = der_signature + '[ALL]'\n+        signature_2 = der_signature + '82'\n+        push_signature_2 = '48' + signature_2\n+        signature_2_sighash_decoded = der_signature + '[NONE|ANYONECANPAY]'\n+\n+        # 1) P2PK scriptSig\n+        txSave.vin[0].scriptSig = unhexlify(push_signature)\n+        rpc_result = self.nodes[0].decoderawtransaction(hexlify(txSave.serialize()))\n+        assert_equal(signature_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n+\n+        # make sure that the sighash decodes come out correctly for a more complex / lesser used case.\n+        txSave.vin[0].scriptSig = unhexlify(push_signature_2)\n+        rpc_result = self.nodes[0].decoderawtransaction(hexlify(txSave.serialize()))\n+        assert_equal(signature_2_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n+\n+        # 2) multisig scriptSig\n+        txSave.vin[0].scriptSig = unhexlify('00' + push_signature + push_signature_2)\n+        rpc_result = self.nodes[0].decoderawtransaction(hexlify(txSave.serialize()))\n+        assert_equal('0 ' + signature_sighash_decoded + ' ' + signature_2_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n+\n+        # 3) test a scriptSig that contains more than push operations.\n+        # in fact, it contains an OP_RETURN with data specially crafted to cause improper decode if the code does not catch it.\n+        txSave.vin[0].scriptSig = unhexlify('6a143011020701010101010101020601010101010101')\n+        rpc_result = self.nodes[0].decoderawtransaction(hexlify(txSave.serialize()))\n+        print(hexlify('636174'))\n+        assert_equal('OP_RETURN 3011020701010101010101020601010101010101', rpc_result['vin'][0]['scriptSig']['asm'])\n+\n     def run_test(self):\n         self.decodescript_script_sig()\n         self.decodescript_script_pub_key()\n+        self.decoderawtransaction_asm_sighashtype()\n \n if __name__ == '__main__':\n     DecodeScriptTest().main()\n-"
      },
      {
        "sha": "f43df4f3317d7fb2f2f747fd40e3210c14641185",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e",
        "patch": "@@ -387,8 +387,8 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n                 CCoinsModifier coins = view.ModifyCoins(txid);\n                 if (coins->IsAvailable(nOut) && coins->vout[nOut].scriptPubKey != scriptPubKey) {\n                     string err(\"Previous output scriptPubKey mismatch:\\n\");\n-                    err = err + coins->vout[nOut].scriptPubKey.ToString() + \"\\nvs:\\n\"+\n-                        scriptPubKey.ToString();\n+                    err = err + ScriptToAsmStr(coins->vout[nOut].scriptPubKey) + \"\\nvs:\\n\"+\n+                        ScriptToAsmStr(scriptPubKey);\n                     throw runtime_error(err);\n                 }\n                 if ((unsigned int)nOut >= coins->vout.size())"
      },
      {
        "sha": "ba5b4e6487c9e16914ed573eb6b5c0dab559f449",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e",
        "patch": "@@ -16,6 +16,7 @@ class UniValue;\n \n // core_read.cpp\n extern CScript ParseScript(const std::string& s);\n+extern std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode = false);\n extern bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx);\n extern bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n extern uint256 ParseHashUV(const UniValue& v, const std::string& strName);\n@@ -25,8 +26,7 @@ extern std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::strin\n // core_write.cpp\n extern std::string FormatScript(const CScript& script);\n extern std::string EncodeHexTx(const CTransaction& tx);\n-extern void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n-                        UniValue& out, bool fIncludeHex);\n+extern void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n extern void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry);\n \n #endif // BITCOIN_CORE_IO_H"
      },
      {
        "sha": "2ad42baddf33b17f5267a1568c714e3a25298679",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 2,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e",
        "patch": "@@ -15,6 +15,7 @@\n #include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n \n+#include <boost/assign/list_of.hpp>\n #include <boost/foreach.hpp>\n \n using namespace std;\n@@ -54,6 +55,67 @@ string FormatScript(const CScript& script)\n     return ret.substr(0, ret.size() - 1);\n }\n \n+const map<unsigned char, string> mapSigHashTypes =\n+    boost::assign::map_list_of\n+    (static_cast<unsigned char>(SIGHASH_ALL), string(\"ALL\"))\n+    (static_cast<unsigned char>(SIGHASH_ALL|SIGHASH_ANYONECANPAY), string(\"ALL|ANYONECANPAY\"))\n+    (static_cast<unsigned char>(SIGHASH_NONE), string(\"NONE\"))\n+    (static_cast<unsigned char>(SIGHASH_NONE|SIGHASH_ANYONECANPAY), string(\"NONE|ANYONECANPAY\"))\n+    (static_cast<unsigned char>(SIGHASH_SINGLE), string(\"SINGLE\"))\n+    (static_cast<unsigned char>(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY), string(\"SINGLE|ANYONECANPAY\"))\n+    ;\n+\n+/**\n+ * Create the assembly string representation of a CScript object.\n+ * @param[in] script    CScript object to convert into the asm string representation.\n+ * @param[in] fAttemptSighashDecode    Whether to attempt to decode sighash types on data within the script that matches the format\n+ *                                     of a signature. Only pass true for scripts you believe could contain signatures. For example,\n+ *                                     pass false, or omit the this argument (defaults to false), for scriptPubKeys.\n+ */\n+string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n+{\n+    string str;\n+    opcodetype opcode;\n+    vector<unsigned char> vch;\n+    CScript::const_iterator pc = script.begin();\n+    while (pc < script.end()) {\n+        if (!str.empty()) {\n+            str += \" \";\n+        }\n+        if (!script.GetOp(pc, opcode, vch)) {\n+            str += \"[error]\";\n+            return str;\n+        }\n+        if (0 <= opcode && opcode <= OP_PUSHDATA4) {\n+            if (vch.size() <= static_cast<vector<unsigned char>::size_type>(4)) {\n+                str += strprintf(\"%d\", CScriptNum(vch, false).getint());\n+            } else {\n+                // the IsUnspendable check makes sure not to try to decode OP_RETURN data that may match the format of a signature\n+                if (fAttemptSighashDecode && !script.IsUnspendable()) {\n+                    string strSigHashDecode;\n+                    // goal: only attempt to decode a defined sighash type from data that looks like a signature within a scriptSig.\n+                    // this won't decode correctly formatted public keys in Pubkey or Multisig scripts due to\n+                    // the restrictions on the pubkey formats (see IsCompressedOrUncompressedPubKey) being incongruous with the\n+                    // checks in CheckSignatureEncoding.\n+                    if (CheckSignatureEncoding(vch, SCRIPT_VERIFY_STRICTENC, NULL)) {\n+                        const unsigned char chSigHashType = vch.back();\n+                        if (mapSigHashTypes.count(chSigHashType)) {\n+                            strSigHashDecode = \"[\" + mapSigHashTypes.find(chSigHashType)->second + \"]\";\n+                            vch.pop_back(); // remove the sighash type byte. it will be replaced by the decode.\n+                        }\n+                    }\n+                    str += HexStr(vch) + strSigHashDecode;\n+                } else {\n+                    str += HexStr(vch);\n+                }\n+            }\n+        } else {\n+            str += GetOpName(opcode);\n+        }\n+    }\n+    return str;\n+}\n+\n string EncodeHexTx(const CTransaction& tx)\n {\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n@@ -68,7 +130,7 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n     vector<CTxDestination> addresses;\n     int nRequired;\n \n-    out.pushKV(\"asm\", scriptPubKey.ToString());\n+    out.pushKV(\"asm\", ScriptToAsmStr(scriptPubKey));\n     if (fIncludeHex)\n         out.pushKV(\"hex\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n \n@@ -101,7 +163,7 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry)\n             in.pushKV(\"txid\", txin.prevout.hash.GetHex());\n             in.pushKV(\"vout\", (int64_t)txin.prevout.n);\n             UniValue o(UniValue::VOBJ);\n-            o.pushKV(\"asm\", txin.scriptSig.ToString());\n+            o.pushKV(\"asm\", ScriptToAsmStr(txin.scriptSig, true));\n             o.pushKV(\"hex\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n             in.pushKV(\"scriptSig\", o);\n         }"
      },
      {
        "sha": "46d3cbbe2e8ab1ba8bcf139cd58e207d08233e63",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e",
        "patch": "@@ -36,7 +36,7 @@ std::string CTxIn::ToString() const\n     if (prevout.IsNull())\n         str += strprintf(\", coinbase %s\", HexStr(scriptSig));\n     else\n-        str += strprintf(\", scriptSig=%s\", scriptSig.ToString().substr(0,24));\n+        str += strprintf(\", scriptSig=%s\", HexStr(scriptSig).substr(0, 24));\n     if (nSequence != std::numeric_limits<unsigned int>::max())\n         str += strprintf(\", nSequence=%u\", nSequence);\n     str += \")\";\n@@ -56,7 +56,7 @@ uint256 CTxOut::GetHash() const\n \n std::string CTxOut::ToString() const\n {\n-    return strprintf(\"CTxOut(nValue=%d.%08d, scriptPubKey=%s)\", nValue / COIN, nValue % COIN, scriptPubKey.ToString().substr(0,30));\n+    return strprintf(\"CTxOut(nValue=%d.%08d, scriptPubKey=%s)\", nValue / COIN, nValue % COIN, HexStr(scriptPubKey).substr(0, 30));\n }\n \n CMutableTransaction::CMutableTransaction() : nVersion(CTransaction::CURRENT_VERSION), nLockTime(0) {}"
      },
      {
        "sha": "6bb14f2b44586415933d4595b0bf113d1bc667fb",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e",
        "patch": "@@ -41,7 +41,7 @@ void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fInclud\n     vector<CTxDestination> addresses;\n     int nRequired;\n \n-    out.push_back(Pair(\"asm\", scriptPubKey.ToString()));\n+    out.push_back(Pair(\"asm\", ScriptToAsmStr(scriptPubKey)));\n     if (fIncludeHex)\n         out.push_back(Pair(\"hex\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n \n@@ -73,7 +73,7 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n             in.push_back(Pair(\"txid\", txin.prevout.hash.GetHex()));\n             in.push_back(Pair(\"vout\", (int64_t)txin.prevout.n));\n             UniValue o(UniValue::VOBJ);\n-            o.push_back(Pair(\"asm\", txin.scriptSig.ToString()));\n+            o.push_back(Pair(\"asm\", ScriptToAsmStr(txin.scriptSig, true)));\n             o.push_back(Pair(\"hex\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n             in.push_back(Pair(\"scriptSig\", o));\n         }\n@@ -665,8 +665,8 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n                 CCoinsModifier coins = view.ModifyCoins(txid);\n                 if (coins->IsAvailable(nOut) && coins->vout[nOut].scriptPubKey != scriptPubKey) {\n                     string err(\"Previous output scriptPubKey mismatch:\\n\");\n-                    err = err + coins->vout[nOut].scriptPubKey.ToString() + \"\\nvs:\\n\"+\n-                        scriptPubKey.ToString();\n+                    err = err + ScriptToAsmStr(coins->vout[nOut].scriptPubKey) + \"\\nvs:\\n\"+\n+                        ScriptToAsmStr(scriptPubKey);\n                     throw JSONRPCError(RPC_DESERIALIZATION_ERROR, err);\n                 }\n                 if ((unsigned int)nOut >= coins->vout.size())"
      },
      {
        "sha": "03af78bce511ac7e72412fd844c751229ca146b7",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e",
        "patch": "@@ -188,7 +188,7 @@ bool static IsDefinedHashtypeSignature(const valtype &vchSig) {\n     return true;\n }\n \n-bool static CheckSignatureEncoding(const valtype &vchSig, unsigned int flags, ScriptError* serror) {\n+bool CheckSignatureEncoding(const vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror) {\n     // Empty signature. Not strictly DER encoded, but allowed to provide a\n     // compact way to provide an invalid signature for use with CHECK(MULTI)SIG\n     if (vchSig.size() == 0) {"
      },
      {
        "sha": "213e8c765163a86e9a12f2a2162c1455bb3df60b",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e",
        "patch": "@@ -83,6 +83,8 @@ enum\n     SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9),\n };\n \n+bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n+\n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n \n class BaseSignatureChecker"
      },
      {
        "sha": "58dbade0e244a6ba882014767dc6cad8267ec88f",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 33,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e",
        "patch": "@@ -8,16 +8,6 @@\n #include \"tinyformat.h\"\n #include \"utilstrencodings.h\"\n \n-namespace {\n-inline std::string ValueString(const std::vector<unsigned char>& vch)\n-{\n-    if (vch.size() <= 4)\n-        return strprintf(\"%d\", CScriptNum(vch, false).getint());\n-    else\n-        return HexStr(vch);\n-}\n-} // anon namespace\n-\n using namespace std;\n \n const char* GetOpName(opcodetype opcode)\n@@ -237,26 +227,3 @@ bool CScript::IsPushOnly() const\n     }\n     return true;\n }\n-\n-std::string CScript::ToString() const\n-{\n-    std::string str;\n-    opcodetype opcode;\n-    std::vector<unsigned char> vch;\n-    const_iterator pc = begin();\n-    while (pc < end())\n-    {\n-        if (!str.empty())\n-            str += \" \";\n-        if (!GetOp(pc, opcode, vch))\n-        {\n-            str += \"[error]\";\n-            return str;\n-        }\n-        if (0 <= opcode && opcode <= OP_PUSHDATA4)\n-            str += ValueString(vch);\n-        else\n-            str += GetOpName(opcode);\n-    }\n-    return str;\n-}"
      },
      {
        "sha": "f0725bbbf63a6c1acf58821824f1cec2cade75bf",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e",
        "patch": "@@ -601,7 +601,6 @@ class CScript : public std::vector<unsigned char>\n         return (size() > 0 && *begin() == OP_RETURN);\n     }\n \n-    std::string ToString() const;\n     void clear()\n     {\n         // The default std::vector::clear() does not release memory."
      },
      {
        "sha": "225da0801a1e4abf67ae1ebb7eb57ee109b5542e",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 1,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=af3208bfa6967d6b35aecf0ba35d9d6bf0f8317e",
        "patch": "@@ -840,7 +840,7 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n     BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n-}    \n+}\n \n BOOST_AUTO_TEST_CASE(script_combineSigs)\n {\n@@ -983,4 +983,34 @@ BOOST_AUTO_TEST_CASE(script_IsPushOnly_on_invalid_scripts)\n     BOOST_CHECK(!CScript(direct, direct+sizeof(direct)).IsPushOnly());\n }\n \n+BOOST_AUTO_TEST_CASE(script_GetScriptAsm)\n+{\n+    BOOST_CHECK_EQUAL(\"OP_NOP2\", ScriptToAsmStr(CScript() << OP_NOP2, true));\n+    BOOST_CHECK_EQUAL(\"OP_NOP2\", ScriptToAsmStr(CScript() << OP_CHECKLOCKTIMEVERIFY, true));\n+    BOOST_CHECK_EQUAL(\"OP_NOP2\", ScriptToAsmStr(CScript() << OP_NOP2));\n+    BOOST_CHECK_EQUAL(\"OP_NOP2\", ScriptToAsmStr(CScript() << OP_CHECKLOCKTIMEVERIFY));\n+\n+    string derSig(\"304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c5090\");\n+    string pubKey(\"03b0da749730dc9b4b1f4a14d6902877a92541f5368778853d9c4a0cb7802dcfb2\");\n+    vector<unsigned char> vchPubKey = ToByteVector(ParseHex(pubKey));\n+\n+    BOOST_CHECK_EQUAL(derSig + \"00 \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"00\")) << vchPubKey, true));\n+    BOOST_CHECK_EQUAL(derSig + \"80 \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"80\")) << vchPubKey, true));\n+    BOOST_CHECK_EQUAL(derSig + \"[ALL] \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"01\")) << vchPubKey, true));\n+    BOOST_CHECK_EQUAL(derSig + \"[NONE] \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"02\")) << vchPubKey, true));\n+    BOOST_CHECK_EQUAL(derSig + \"[SINGLE] \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"03\")) << vchPubKey, true));\n+    BOOST_CHECK_EQUAL(derSig + \"[ALL|ANYONECANPAY] \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"81\")) << vchPubKey, true));\n+    BOOST_CHECK_EQUAL(derSig + \"[NONE|ANYONECANPAY] \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"82\")) << vchPubKey, true));\n+    BOOST_CHECK_EQUAL(derSig + \"[SINGLE|ANYONECANPAY] \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"83\")) << vchPubKey, true));\n+\n+    BOOST_CHECK_EQUAL(derSig + \"00 \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"00\")) << vchPubKey));\n+    BOOST_CHECK_EQUAL(derSig + \"80 \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"80\")) << vchPubKey));\n+    BOOST_CHECK_EQUAL(derSig + \"01 \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"01\")) << vchPubKey));\n+    BOOST_CHECK_EQUAL(derSig + \"02 \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"02\")) << vchPubKey));\n+    BOOST_CHECK_EQUAL(derSig + \"03 \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"03\")) << vchPubKey));\n+    BOOST_CHECK_EQUAL(derSig + \"81 \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"81\")) << vchPubKey));\n+    BOOST_CHECK_EQUAL(derSig + \"82 \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"82\")) << vchPubKey));\n+    BOOST_CHECK_EQUAL(derSig + \"83 \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"83\")) << vchPubKey));\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]