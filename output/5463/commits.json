[
  {
    "sha": "8db8a91cb66340010e77ea905c190c15fc3e85c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGI4YTkxY2I2NjM0MDAxMGU3N2VhOTA1YzE5MGMxNWZjM2U4NWM4",
    "commit": {
      "author": {
        "name": "Adam Weiss",
        "email": "adam@signal11.com",
        "date": "2014-12-11T20:43:24Z"
      },
      "committer": {
        "name": "Adam Weiss",
        "email": "adam@signal11.com",
        "date": "2014-12-11T20:43:24Z"
      },
      "message": "Steady state block download timeouts\n\nOnce we're BLOCK_DOWNLOAD_WINDOW (1024) blocks from a peer's tip,\nstalled peer detection for IBD finishes.  Add a 2x block interval (20m)\ndownload timeout that will only trigger when we're at this stage and\nanother peer is not transferring any blocks (a heuristic for whether or\nnot we're in a busy download state where we're starved for bandwidth).\nIn the event of a timeout trigger, re-request blocks elsewhere and apply\na small ban penalty.\n\nThis prevents lame or malicious peers from stalling synchronization\neither during the final synchronization stage or during steady state\nblock relays.",
      "tree": {
        "sha": "5752bc42942efdf216703c974060d99be2f716eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5752bc42942efdf216703c974060d99be2f716eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8db8a91cb66340010e77ea905c190c15fc3e85c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8db8a91cb66340010e77ea905c190c15fc3e85c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8db8a91cb66340010e77ea905c190c15fc3e85c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8db8a91cb66340010e77ea905c190c15fc3e85c8/comments",
    "author": {
      "login": "ajweiss",
      "id": 430315,
      "node_id": "MDQ6VXNlcjQzMDMxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/430315?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajweiss",
      "html_url": "https://github.com/ajweiss",
      "followers_url": "https://api.github.com/users/ajweiss/followers",
      "following_url": "https://api.github.com/users/ajweiss/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajweiss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajweiss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajweiss/subscriptions",
      "organizations_url": "https://api.github.com/users/ajweiss/orgs",
      "repos_url": "https://api.github.com/users/ajweiss/repos",
      "events_url": "https://api.github.com/users/ajweiss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajweiss/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajweiss",
      "id": 430315,
      "node_id": "MDQ6VXNlcjQzMDMxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/430315?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajweiss",
      "html_url": "https://github.com/ajweiss",
      "followers_url": "https://api.github.com/users/ajweiss/followers",
      "following_url": "https://api.github.com/users/ajweiss/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajweiss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajweiss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajweiss/subscriptions",
      "organizations_url": "https://api.github.com/users/ajweiss/orgs",
      "repos_url": "https://api.github.com/users/ajweiss/repos",
      "events_url": "https://api.github.com/users/ajweiss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajweiss/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bb29a3e13f78f534d96b71048a128843f3bab85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bb29a3e13f78f534d96b71048a128843f3bab85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bb29a3e13f78f534d96b71048a128843f3bab85"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 28,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c2d793cb3dc2fe2b25b335c53ac2ee97dfd1a5a6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 1,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8db8a91cb66340010e77ea905c190c15fc3e85c8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8db8a91cb66340010e77ea905c190c15fc3e85c8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8db8a91cb66340010e77ea905c190c15fc3e85c8",
        "patch": "@@ -336,6 +336,24 @@ void MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, CBlockIndex *pindex\n     mapBlocksInFlight[hash] = std::make_pair(nodeid, it);\n }\n \n+// Requires cs_main.\n+bool IsBlockTransferTimedOut(const uint256& hash, NodeId newnode) {\n+    // 20 minutes ~ 2 blocks - maybe this should be configurable for slow nodes\n+    int64_t nTimeout = GetTimeMicros() - Params().TargetSpacing() * 2 * 1000000;\n+\n+    map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n+    if (itInFlight->second.second->nTime < nTimeout &&\n+        itInFlight->second.first != newnode)\n+    {\n+        LogPrintf(\"Peer=%d failed to transfer block %s in twice the expected block interval, requesting elsewhere...\\n\",\n+                  itInFlight->second.first, hash.ToString());\n+        Misbehaving(itInFlight->second.first, 10);\n+        return true;\n+    }\n+\n+    return false;\n+}\n+\n /** Check whether the last unknown block a peer advertized is not yet known. */\n void ProcessBlockAvailability(NodeId nodeid) {\n     CNodeState *state = State(nodeid);\n@@ -445,8 +463,17 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBl\n             if (pindex->nStatus & BLOCK_HAVE_DATA) {\n                 if (pindex->nChainTx)\n                     state->pindexLastCommonBlock = pindex;\n-            } else if (mapBlocksInFlight.count(pindex->GetBlockHash()) == 0) {\n+            } else if (mapBlocksInFlight.count(pindex->GetBlockHash()) == 0 ||\n+                       (nMaxHeight == state->pindexBestKnownBlock->nHeight &&\n+                       state->nBlocksInFlight == 0 &&\n+                       IsBlockTransferTimedOut(pindex->GetBlockHash(), nodeid))) {\n                 // The block is not already downloaded, and not yet in flight.\n+                // Or even if the block is in flight, is:\n+                //  a) The download window extended beyond the tip, disabling stall detection? (window end == peer tip)\n+                //  b) This peer likely fast and bored? (nBlocksInFlight == 0)\n+                //  c) The transfer from someone else taking an unreasonable amount of time? (timed out)\n+                // Otherwise stated: A good candidate to request again here, regardless of\n+                // the fact that it's already in flight.\n                 if (pindex->nHeight > nWindowEnd) {\n                     // We reached the end of the window.\n                     if (vBlocks.size() == 0 && waitingfor != nodeid) {"
      }
    ]
  }
]