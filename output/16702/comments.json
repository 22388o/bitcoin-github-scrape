[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524480139",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524480139",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 524480139,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDQ4MDEzOQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-23T22:21:10Z",
    "updated_at": "2020-01-26T23:02:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17812](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17812.html) (config, test: asmap functional tests and feature refinements by jonatack)\n* [#17809](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17809.html) (rpc: Auto-format RPCResult by MarcoFalke)\n* [#17804](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17804.html) (doc: Misc RPC help fixes by MarcoFalke)\n* [#17428](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17428.html) (p2p: Try to preserve outbound block-relay-only connections during restart by hebasto)\n* [#17399](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17399.html) (validation: Templatize ValidationState instead of subclassing by jkczyz)\n* [#17383](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17383.html) (Refactor: Move consts to their correct translation units by jnewbery)\n* [#16748](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16748.html) ([WIP] Add support for addrv2 (BIP155) by dongcarl)\n* [#16673](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16673.html) (Relog configuration args on debug.log rotation by LarryRuane)\n* [#16115](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16115.html) (On bitcoind startup, write config args to debug.log by LarryRuane)\n* [#10102](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/10102.html) ([experimental] Multiprocess bitcoin by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524480139/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524497855",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524497855",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 524497855,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDQ5Nzg1NQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-24T00:15:14Z",
    "updated_at": "2019-08-24T00:15:14Z",
    "author_association": "MEMBER",
    "body": "FWIW, the asmap generated from https://dev.maxmind.com/geoip/geoip2/geolite2/ is 988387 bytes in size.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524497855/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524498652",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524498652",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 524498652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDQ5ODY1Mg==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-24T00:22:45Z",
    "updated_at": "2019-08-24T00:22:45Z",
    "author_association": "MEMBER",
    "body": "Encoding the map as bool[] array in the source code will add to the executable 4 bytes per bit in the map, that's a bit excessive. You should probably encode it as a encode it as a uint8_t[] instead (with 8 bits per array element).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524498652/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524522538",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524522538",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 524522538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDUyMjUzOA==",
    "user": {
      "login": "wiz",
      "id": 232186,
      "node_id": "MDQ6VXNlcjIzMjE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232186?u=9873a162b49f59b1c2a9fd19ea513019fa060454&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wiz",
      "html_url": "https://github.com/wiz",
      "followers_url": "https://api.github.com/users/wiz/followers",
      "following_url": "https://api.github.com/users/wiz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wiz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wiz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wiz/subscriptions",
      "organizations_url": "https://api.github.com/users/wiz/orgs",
      "repos_url": "https://api.github.com/users/wiz/repos",
      "events_url": "https://api.github.com/users/wiz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wiz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-24T05:39:04Z",
    "updated_at": "2019-08-24T05:39:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "@sipa Would you mind providing the python script used to generate the asmap? I think Bitcoiners like @TheBlueMatt and myself who maintain their own BGP full table view of the Internet would like to generate their own asmap instead of trusting maxmind, or at least verify it.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524522538/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524522713",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524522713",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 524522713,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDUyMjcxMw==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-24T05:42:56Z",
    "updated_at": "2019-08-24T05:42:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524522713/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524534484",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524534484",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 524534484,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDUzNDQ4NA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-24T09:06:20Z",
    "updated_at": "2019-08-24T09:06:20Z",
    "author_association": "MEMBER",
    "body": "@wiz The script is here: https://gist.github.com/sipa/b90070570597b950f29a6297772a7636 though we need more tooling to convert from common dump formats,  sanity check, ... I'll publish some when they're a bit cleaned up and usable.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524534484/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524542883",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524542883",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 524542883,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDU0Mjg4Mw==",
    "user": {
      "login": "wiz",
      "id": 232186,
      "node_id": "MDQ6VXNlcjIzMjE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232186?u=9873a162b49f59b1c2a9fd19ea513019fa060454&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wiz",
      "html_url": "https://github.com/wiz",
      "followers_url": "https://api.github.com/users/wiz/followers",
      "following_url": "https://api.github.com/users/wiz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wiz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wiz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wiz/subscriptions",
      "organizations_url": "https://api.github.com/users/wiz/orgs",
      "repos_url": "https://api.github.com/users/wiz/repos",
      "events_url": "https://api.github.com/users/wiz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wiz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-24T11:27:30Z",
    "updated_at": "2019-08-24T11:27:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the script, it helps a lot with my own implementation and I also wanted to point out a few potential attack vectors to circumvent the asmap protection:\r\n\r\n1) Private ASN ranges\r\n\r\nThere are several ASN ranges which can be used as originating ASNs without registration or verification and could be used to circumvent the asmap protection. For example I could announce one /24 from 65000, one /24 from 65001, and so on, all behind my actual ASN, in order to launch  an Erebus attack. I propose that we map any IP blocks originating from the following invalid ASNs to the next-valid ASN upstream of it:\r\n\r\n```                                                                            \r\n0                       # Reserved RFC7607                                     \r\n23456                   # AS_TRANS RFC6793                                     \r\n64496-64511             # Reserved for use in docs and code RFC5398            \r\n64512-65534             # Reserved for Private Use RFC6996                     \r\n65535                   # Reserved RFC7300                                     \r\n65536-65551             # Reserved for use in docs and code RFC5398            \r\n65552-131071            # Reserved                                             \r\n4200000000-4294967294   # Reserved for Private Use RFC6996                     \r\n4294967295              # Reserved RFC7300                                     \r\n```\r\n\r\n2) Multiple originating ASNs\r\n\r\nThere are actually around 50 routing prefixes on the Internet that legitimately have multiple originating ASNs, so it's not always a strict 1:1 mapping. For example, a valid use case could be an ISP that aggregates multiple customer /29 or /30 prefixes into a single /24 announcement (since /24 is the smallest globally routable prefix size that would be generally accepted) and my router indicates *all* of the multiple originating ASNs in curly braces like this:\r\n```\r\n141.145.0.0/19 {AS7160,43898} \r\n144.21.0.0 {AS7160,AS43894}\r\n158.13.154.0/24 {AS367,AS1479,AS1504,AS1526,AS1541}\r\n160.34.0.0/20 {AS4192,AS7160}\r\n160.34.16.0/20 {AS7160,AS43898} \r\n```\r\nOf course this could be used to circumvent the asmap protection as well, so for this case I also propose we instead identify the upstream aggregating ASN as the originating ASN. For my implementation I'm simply going to use a regex to strip out the curly braces aggregation to ignore it.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524542883/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524561108",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524561108",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 524561108,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDU2MTEwOA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-24T15:52:04Z",
    "updated_at": "2019-08-25T12:18:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@wiz Very good points!\r\n\r\n> 1. Private ASN ranges\r\n\r\nBesides using private ASN ranges another obvious attack vector would be to make use of non-reserved but unused or unallocated AS-numbers as a faux downstream for a specific attacker controlled prefix:\r\n\r\nAssume that `AS54321` is a non-private but unused or unallocated ASN.\r\n\r\nAn attacker `AS666` with upstream transit provider `AS123` could fake having `AS54321` as a downstream transit customer with the network `200.201.202.0/24`.\r\n\r\nThe global view would hence be:\r\n* `200.201.202.0/24`: `AS123 AS666 AS54321`\r\n\r\nTraffic to `200.201.202.0/24` would end up in the hands of `AS666` who get a free extra slot our ASN lottery :-) This could obviously be repeated with `N` additional prefixes to get `N` extra slots.\r\n\r\nAssuming that `AS54321` is not in active use by any organisation no one will complain about this behaviour. (In contrast to \"prefix hijacking\" where the hijacked network will notice that their traffic is routed in a strange way and complain.) \r\n\r\nHow can we guard against this attack?\r\n\r\n#### To guard against an attacker making use of non-IANA allocated ASNs as faux specific attacker controlled prefix:\r\n\r\nInstead of blacklisting known reserved AS numbers, we could be stricter and apply a whitelisting approach: allow only AS number ranges that have been been allocated to the five Regional Internet Registries (AFRINIC, APNIC, ARIN, LACNIC and RIPE) by IANA. That data is available in machine readable form.\r\n\r\n#### To guard against an attacker making use of IANA allocated but RIR unallocated ASNs as faux downstream for a specific attacker controlled prefix:\r\n\r\nI believe all five RIR:s provide machine readable lists of the individual ASNs they have assigned to organisations.\r\n\r\n(Note that this data comes with the country code for the organisation that has been assigned the AS-number. That could be handy if we some time in the future would like to implement logic for avoiding country or region based netsplits. If incorporated in the `asmap` data we could say not only what ASN a peer belongs to but also the region (based on which RIR that handed out the ASN) and also which country the organisation announcing the peers prefix belongs to. This would be a good approximation for the actual country/region of the peer.)\r\n\r\n#### To guard against an attacker making use of IANA allocated _and_ RIR allocated ASNs as faux downstreams for a specific attacker controlled prefix:\r\n\r\nThis is harder to guard against.\r\n\r\nPerhaps we could require that a prefix-to-ASN mapping has been stable over say `N` months before being included in the `asmap`. That would make the described attack harder to carry out without being noticed.\r\n\r\nAnother approach would be to analyse a full routing table when creating the `asmap` and reason about the ASNs that are in the path to the announcing origin AS. Could be tricky to distinguish between tier-1:s and attackers :-\\",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524561108/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524568966",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524568966",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 524568966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDU2ODk2Ng==",
    "user": {
      "login": "wiz",
      "id": 232186,
      "node_id": "MDQ6VXNlcjIzMjE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/232186?u=9873a162b49f59b1c2a9fd19ea513019fa060454&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wiz",
      "html_url": "https://github.com/wiz",
      "followers_url": "https://api.github.com/users/wiz/followers",
      "following_url": "https://api.github.com/users/wiz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wiz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wiz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wiz/subscriptions",
      "organizations_url": "https://api.github.com/users/wiz/orgs",
      "repos_url": "https://api.github.com/users/wiz/repos",
      "events_url": "https://api.github.com/users/wiz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wiz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-24T17:47:37Z",
    "updated_at": "2019-08-24T17:47:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, the AS map mitigation may be flawed. How about requiring everyone to also have a few Tor peers, presumably bypassing the network partition attack?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524568966/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524573216",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524573216",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 524573216,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDU3MzIxNg==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-24T18:56:26Z",
    "updated_at": "2019-08-24T18:56:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Indeed. ASN mappings are *not* a foolproof solution, but they're better than just using /16s (after all, there are lots of unused /16s you could announce if you wanted to). Ultimately some monitoring and building up filtering lists over time as we observe malicious behavior may improve things, but, indeed, ensuring redundant connectivity is the only ultimate solution. Once #15759 lands, I'd really like to propose a default of 2 additional blocksonly Tor connections if Tor support is enabled (see-also https://twitter.com/TheBlueMatt/status/1160620919775211520, in which someone suggested their ISP was censoring Bitcoin P2P traffic, and only after setting bitcoind to Tor-only did it manage to connect).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524573216/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524573795",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524573795",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 524573795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDU3Mzc5NQ==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-24T19:06:33Z",
    "updated_at": "2019-08-24T19:06:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "One thing we can play with after we build an initial table is to look at the paths, instead of looking only at the last ASN in the path. eg if, from many vantage points on the internet, a given IP block always passes from AS 1 to AS 2, we could consider it as a part of AS 1 (given it appears to only have one provider - AS 1). In order to avoid Western bias we'd need to do it across geographic regions and from many vantage points (eg maybe contact a Tier 1 and get their full routing table view, not just the selected routes), but once we get the infrastructure in place, further filtering can be played with.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524573795/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/533710818",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-533710818",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 533710818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMzcxMDgxOA==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-20T21:13:33Z",
    "updated_at": "2019-09-20T21:13:33Z",
    "author_association": "MEMBER",
    "body": "Do we need to know the actual ASNs, or isn't it enough to just differentiate between distinct ASNs without necessarily knowing their numbers?\r\n\r\nRe Tor: Tor is centralised, so does it actually protect from partitioning at all?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/533710818/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/533796151",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-533796151",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 533796151,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMzc5NjE1MQ==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-21T12:59:13Z",
    "updated_at": "2019-09-21T12:59:13Z",
    "author_association": "MEMBER",
    "body": "@luke-jr there is no particular requirement in knowing the actual AS numbers, at least in a simplified .\r\nDo you see a way to optimize it by not using ASNs?\r\n\r\nAlso, I suggest to not have Tor discussion here. It seems there are couple more relevant PRs now.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/533796151/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/533798722",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-533798722",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 533798722,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMzc5ODcyMg==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-21T13:38:14Z",
    "updated_at": "2019-09-21T13:38:14Z",
    "author_association": "MEMBER",
    "body": "I haven't looked at the actual implementation, but it seems obvious that if we don't need to know the AS numbers, then not using them can make the asmap file even smaller (unless it already is omitting them).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/533798722/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/533798805",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-533798805",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 533798805,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMzc5ODgwNQ==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-21T13:39:24Z",
    "updated_at": "2019-09-21T13:39:24Z",
    "author_association": "MEMBER",
    "body": "(But if we tie the address database to known-AS asmap data, it may become more difficult to remove the specific AS numbers later...)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/533798805/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548736168",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-548736168",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 548736168,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODczNjE2OA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-01T10:11:53Z",
    "updated_at": "2019-11-01T10:12:39Z",
    "author_association": "MEMBER",
    "body": "Concept ACK (adding 0.20 milestone optimistically)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548736168/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558359839",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-558359839",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 558359839,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODM1OTgzOQ==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-25T22:02:05Z",
    "updated_at": "2019-11-25T22:02:05Z",
    "author_association": "MEMBER",
    "body": "Rebased and cleaned up commits. Should be ready for review.\r\nI would also suggest taking a look at the related [issue](https://github.com/bitcoin/bitcoin/issues/16599), which has more high-level discussion on the consequences of this change.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558359839/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559570540",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-559570540",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 559570540,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTU3MDU0MA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-28T17:40:04Z",
    "updated_at": "2019-11-28T17:40:04Z",
    "author_association": "MEMBER",
    "body": "@naumenkogs Nice -- good timing. I'd like to host this PR for the PR review club session on Wednesday, December 11th. Would you be available to join in/co-host/participate?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559570540/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559722751",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-559722751",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 559722751,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTcyMjc1MQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-29T09:29:30Z",
    "updated_at": "2019-11-29T09:29:30Z",
    "author_association": "MEMBER",
    "body": "Review meeting on this PR is up: https://bitcoincore.reviews/16702.html... could @fanquake or someone add a `review club` label here?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559722751/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562322811",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-562322811",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 562322811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MjMyMjgxMQ==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-05T21:19:15Z",
    "updated_at": "2019-12-05T21:19:15Z",
    "author_association": "MEMBER",
    "body": "@Sjors \r\n>Do we need to reconsider the number of buckets and their size?\r\n\r\nThis is a sensitive topic: [Ethan's Eclipse paper](https://www.usenix.org/node/190891) suggests more buckets, [Erebus](https://erebus-attack.comp.nus.edu.sg/) suggests less buckets...\r\nSo I would keep this discussion out of the PR.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562322811/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564557409",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-564557409",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 564557409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDU1NzQwOQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-11T14:06:28Z",
    "updated_at": "2019-12-11T14:06:28Z",
    "author_association": "MEMBER",
    "body": "meta: if you want to be credited correctly, please change your gitconfig user.name to something other than \"User\" and `git commit --amend --reset-author` your commits:\r\n```bash\r\n$ git show --pretty=full 4128c9c8124e4627cc45f6df2b7017a89296fc5a\r\ncommit 4128c9c8124e4627cc45f6df2b7017a89296fc5a (pull/16702/head)\r\nAuthor:     User <\u2026@\u2026>\r\nCommit:     User <\u2026@\u2026>\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564557409/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564681862",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-564681862",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 564681862,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDY4MTg2Mg==",
    "user": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-11T18:52:02Z",
    "updated_at": "2019-12-11T18:52:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "As requested I'm expanding on my comments from PR review club.\r\n\r\nI can\u00a0see the case for merging this but it does make addrman\u2019s behavior more complex.\r\n\r\n**Complexity costs to discovering and fixing bugs:**\r\nHaving outgoing connection logic depend on asmap makes reasoning about connection behavior harder.\r\n\r\nFor instance consider a bug causing outgoing connections are being made to IP addresses in the same group. This would fairly easy to detect in the current logic, you would just look at the log files and see outgoing connections to the same /16. Under the new logic you would need to read and understand which IPs belonged to which ASNs and then use that logic to understand the logs. \r\n\r\n@jnewbery brought up that better logging in this PR could make reduce the impact on debugging. I agree and II would suggest adding the following log statement when determining the group of an IP:\r\n`IP 1.2.3.4 from ASN 444 in group 56`\r\n\r\nThat being said, it may still be the case that if the bug exists in the group logic it may not show up in the log files.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564681862/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564685093",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-564685093",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 564685093,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDY4NTA5Mw==",
    "user": {
      "login": "pinheadmz",
      "id": 2084648,
      "node_id": "MDQ6VXNlcjIwODQ2NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2084648?u=8b3acfaf5f6b5d51d1a3ee1a427e4489e9874bb1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinheadmz",
      "html_url": "https://github.com/pinheadmz",
      "followers_url": "https://api.github.com/users/pinheadmz/followers",
      "following_url": "https://api.github.com/users/pinheadmz/following{/other_user}",
      "gists_url": "https://api.github.com/users/pinheadmz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
      "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
      "repos_url": "https://api.github.com/users/pinheadmz/repos",
      "events_url": "https://api.github.com/users/pinheadmz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-11T19:00:18Z",
    "updated_at": "2019-12-11T19:00:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "One thought I had during PR review club was that it might be interesting to see each peer's ASN in `rpc getpeerinfo` where possible.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564685093/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564735414",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-564735414",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 564735414,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDczNTQxNA==",
    "user": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?u=fc2e6f106f98731d49e9787f9cbfe86a17447c23&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-11T21:13:45Z",
    "updated_at": "2019-12-11T21:13:45Z",
    "author_association": "MEMBER",
    "body": "4b6543941 isn't compiling for me. I'm getting two errors in `test/addrman_tests.cpp` based on changes to `GetTriedBucket` and `GetNewBucket`.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564735414/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/565860818",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-565860818",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 565860818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NTg2MDgxOA==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-15T23:58:52Z",
    "updated_at": "2019-12-15T23:58:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK\r\n\r\nAlso built, ran automated tests, did some manual testing, light code review on 4b65439415a17bcb6f99bb1996c5ce01c70d08b6.\r\n\r\nI have two thoughts:\r\n- Should we include an implementation of the encoding code here as well, to make sure that anyone who wants to use it has a reference implementation that is reviewed properly? Otherwise, I think there should be at least some more documentation.\r\n- Should there be some detection on possibly malicious asmap files? I.e. would it be possible that the user ends up with a file that maps all IPs to one ASN and thus ends up with only one bucket, making it easier to eclipse attack? Should we warn about that? Maybe we should fall back to /16 below a certain number?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/565860818/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/568788806",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-568788806",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 568788806,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODc4ODgwNg==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-24T18:30:48Z",
    "updated_at": "2019-12-24T18:30:48Z",
    "author_association": "MEMBER",
    "body": "@pinheadmz added a ``critical_as`` field to a getpeerinfo RPC call response. I had to do some refactoring for this.\r\n\r\nI couldn't find a good way to test it with functional or unit tests really, because it's hard to avoid triggering ``GetNetClass() == NET_UNROUTABLE/NET_LOCAL``. And triggering this prevents returning an asmap. I'd be glad if someone suggests a good way to test it.\r\nI tested this behavior by running a node.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/568788806/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/568798241",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-568798241",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 568798241,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODc5ODI0MQ==",
    "user": {
      "login": "pinheadmz",
      "id": 2084648,
      "node_id": "MDQ6VXNlcjIwODQ2NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2084648?u=8b3acfaf5f6b5d51d1a3ee1a427e4489e9874bb1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinheadmz",
      "html_url": "https://github.com/pinheadmz",
      "followers_url": "https://api.github.com/users/pinheadmz/followers",
      "following_url": "https://api.github.com/users/pinheadmz/following{/other_user}",
      "gists_url": "https://api.github.com/users/pinheadmz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
      "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
      "repos_url": "https://api.github.com/users/pinheadmz/repos",
      "events_url": "https://api.github.com/users/pinheadmz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-24T20:13:40Z",
    "updated_at": "2019-12-24T20:13:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@naumenkogs very cool seeing the ASN number in the RPC call.\r\nTested on testnet at ca7916a3c3024c7af2b3df1069ab1a4f9cee2ca6 with the `demo.map` file from https://github.com/sipa/asmap\r\n\r\nWas able to confirm the returned data against `whois` and https://bgpview.io/asn/14061#prefixes-v4:\r\n\r\nRPC output:\r\n```\r\n    \"addr\": \"188.166.99.121:18333\",\r\n    \"critical_as\": 14061,\r\n```\r\n\r\nWHOIS:\r\n```\r\ninetnum:        188.166.0.0 - 188.166.127.255\r\nnetname:        EU-DIGITALOCEAN-NL1\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/568798241/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/568816576",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-568816576",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 568816576,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODgxNjU3Ng==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-25T01:10:33Z",
    "updated_at": "2019-12-25T01:10:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "What is a \"critical AS\"? :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/568816576/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/568816872",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-568816872",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 568816872,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODgxNjg3Mg==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-25T01:14:36Z",
    "updated_at": "2019-12-25T01:44:15Z",
    "author_association": "MEMBER",
    "body": "@practicalswift see \"Rationale\" [here](https://github.com/sipa/asmap/pull/1/files#diff-c3143a8bcea90615d22bc72dbd1e647e). Basically, it doesn't have to be the actual AS of the node, but it better be the bottleneck-AS on BGP path to that node.\r\n\r\nDo you think it also needs further clarification in the Bitcoin Core source code? I couldn't generalize it better. It's like whatever asmap tells us \u2014\u00a0except it's should be *some* heuristic used for diversification.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/568816872/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/568819170",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-568819170",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 568819170,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODgxOTE3MA==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-25T01:40:59Z",
    "updated_at": "2019-12-25T01:42:24Z",
    "author_association": "MEMBER",
    "body": "Okay I'm less happy with the last tiny logging commit 1619fe1 2 reasons:\r\n- Every time ``GetNewBucket(...)`` is called, we call ``GetCriticalAS()`` twice: in ``GetGroup``and separately just for logging. It's obviously suboptimal, but I can't see a clean way to do it better. The method is also very cheap.\r\n- Right now ``GetTriedBucket()`` is always called only when we're assigning a bucket to a node, so logging there makes sense. If at some point in future we will be calling this method just for info \u2014\u00a0logging wouldn't make sense. It is possible to move logging to where the method is used, but it would require copy-pasting logging 3 times. Should we leave it for the future case I explained?\r\n\r\nSo basically I don't have a clean way to do these 2 things better, but I'm open to suggestions :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/568819170/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/568905561",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-568905561",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 568905561,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODkwNTU2MQ==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-25T14:35:52Z",
    "updated_at": "2019-12-25T14:36:23Z",
    "author_association": "MEMBER",
    "body": "@jonatack \r\n>I have not yet seen one of the new \"IP %s with critical AS%i belongs to new|tried bucket %i.\\n\" extra logging messages.\r\n\r\nThis is because you're not specifying ``-debug=net``.\r\n\r\n>Would it be helpful to include the AS number in the debug log peer here?\r\n\r\nEh, I don't know. I don't think it's particularly useful in this context.\r\nIn some cases it might even not represent the part of the actual BGP path (consider a multi-homed node). AS info is also less useful without bucket info. But even with buckets, there are much more buckets than connections, so this to me seems more like a debug info. That's why I'm leaving it in ``-debug=net``\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/568905561/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/568934891",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-568934891",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 568934891,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODkzNDg5MQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-25T22:17:15Z",
    "updated_at": "2019-12-25T22:59:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "@naumenkogs \r\n\r\nAh, is \"critical AS\" for a prefix simply the non-stub AS-number closest to the originating AS-number in an AS path? (BTW, I assume \"critical AS\" is a made up term? I haven't encountered it before :))\r\n\r\nIn a single-homed/stub then the \"critical AS\" is typically its upstream/transit provider of the originating AS, and in a multi-homed setup the \"critical AS\" is typically the originating AS itself?\r\n\r\nConsider the following:\r\n\r\n```\r\n10.11.12.0/24: AS382 AS492 AS520\r\n10.11.12.0/24: AS942 AS492 AS520\r\n20.22.24.0/24: AS882 AS482 AS720\r\n20.22.24.0/24: AS102 AS201 AS720\r\n```\r\n\r\nIn the first example `AS492` is the non-stub AS-number closest to `AS520` which is the AS-number originating `10.11.12.0/24`.  \r\n\r\nIn the second example the network originating `20.22.24.0/24` (`AS720`) is a non-stub itself.\r\n\r\nWhich gives us \"critical AS-numbers\" (or \"non-stub originating AS-numbers\"):\r\n\r\n```\r\n10.11.12.0/24 AS492\r\n20.22.24.0/24 AS720\r\n```\r\n\r\nIs my understanding correct? :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/568934891/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/569118497",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-569118497",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 569118497,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2OTExODQ5Nw==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-26T19:17:42Z",
    "updated_at": "2019-12-26T19:17:42Z",
    "author_association": "MEMBER",
    "body": "@practicalswift the exact algorithm of deciding what is critical is out of this PR \u2014\u00a0it is in the asmap construction. For the PR, what matters is that it is some AS by which we want to diversify. And yeah, I made up the term.\r\n\r\nYes, your examples are correct, according to [my PR](https://github.com/sipa/asmap/pull/1/files#diff-c3143a8bcea90615d22bc72dbd1e647e) to the asmap lib.\r\n\r\nI'm not that sure about your definitions, because consider this case:\r\n```\r\n33.22.24.0/24: AS882 AS111 AS482 AS720\r\n33.22.24.0/24: AS102 AS111 AS201 AS720\r\n```\r\n\r\nIn [my PR](https://github.com/sipa/asmap/pull/1/files#diff-c3143a8bcea90615d22bc72dbd1e647e) it would be AS720, although one might think that the answer is AS111. This is debatable I guess. We can discuss it in that repo.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/569118497/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/569364200",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-569364200",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 569364200,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2OTM2NDIwMA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-27T23:38:10Z",
    "updated_at": "2019-12-27T23:39:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@naumenkogs Thanks for clarifying!\r\n\r\nI don't want to bikeshed but it is something about the \"critical\" in \"critical AS\" that confused me at least :)\r\n\r\nI guess what we want to say that it is an AS number that we group by, but it is not necessarily the originating AS number for the prefix in question as one would assume (if we called it only \"AS\").\r\n\r\nCan we find a more neutral name? Perhaps \"AS group\", \"effective AS\", \"assumed AS\" or even \"faux AS\"? :)\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/569364200/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/569668026",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-569668026",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 569668026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2OTY2ODAyNg==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-30T12:39:05Z",
    "updated_at": "2019-12-30T12:39:05Z",
    "author_association": "MEMBER",
    "body": "@naumenkogs as per https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361300447, in #17812 I added feature functional tests and absolute asmap paths, separated asmap found/parsing checks, added a test which the separation enables, plus a handful of minor suggestions found while doing this. The changes are separate to aid picking and choosing; I don't mind squashing down a bit if needed. Feel free to pull in commits, use nit changes, or leave it for after this PR is merged.\r\n\r\nI also reviewed the unit tests and bucketing in more depth and have questions which I'll post here or ask you on IRC.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/569668026/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572454703",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-572454703",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 572454703,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MjQ1NDcwMw==",
    "user": {
      "login": "muoitranduc",
      "id": 3724433,
      "node_id": "MDQ6VXNlcjM3MjQ0MzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3724433?u=8ebbe84ff1d8ee83931403091f09d4701ab2673f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muoitranduc",
      "html_url": "https://github.com/muoitranduc",
      "followers_url": "https://api.github.com/users/muoitranduc/followers",
      "following_url": "https://api.github.com/users/muoitranduc/following{/other_user}",
      "gists_url": "https://api.github.com/users/muoitranduc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muoitranduc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muoitranduc/subscriptions",
      "organizations_url": "https://api.github.com/users/muoitranduc/orgs",
      "repos_url": "https://api.github.com/users/muoitranduc/repos",
      "events_url": "https://api.github.com/users/muoitranduc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muoitranduc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-09T08:47:06Z",
    "updated_at": "2020-01-09T08:47:06Z",
    "author_association": "NONE",
    "body": "@naumenkogs Can you elaborate more on the idea of having a critial AS for a prefix? \r\nIsn't that this critical AS only presents the most common suffix AS on the propagated AS paths observed by RIPE collectors only? In other words, the traffic from a node (which is not at the same location with any RIPE collectors) to the prefix may *not* traverse the critical AS.\r\nIf you want a simple prefix-to-asn mapping, why do you need the AS paths? ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572454703/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572511420",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-572511420",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 572511420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MjUxMTQyMA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-09T11:04:00Z",
    "updated_at": "2020-01-09T11:05:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "@naumenkogs What do you think of using the term \"mapped AS\" instead of \"critical AS\"? That would be consistent with the \"AS map\" terminology already in use and would not imply any specific method for the generation of the AS map file.\r\n\r\nSo instead of introducing two separate terms \"AS map\" and \"critical AS\" we only introduce \"AS map\"/\"mapped AS\". I think that would be less confusing for newcomers :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572511420/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/573173860",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-573173860",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 573173860,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MzE3Mzg2MA==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-10T19:30:01Z",
    "updated_at": "2020-01-15T04:27:14Z",
    "author_association": "MEMBER",
    "body": "@practicalswift I liked the \"mapped_as\" so I used it instead. ~~\"Critical\" is still used in 2 places (comments basically) as a synonym, to make understanding easier. Let me know if you have concerns about that.~~\r\n\r\n@muoitranduc Yes, you are correct. The first element of the most common suffix basically. This is for users which don't want to make their own asmap (probably the majority, because we cannot force everyone make their own asmap).\r\nJust a good approximation, because we will aggregate paths from at least 25 RIPE collectors (and maybe other places as well). In a lot of cases, it will map to the last hop (actual owning ASN).\r\nAt the high-level, I believe looking at the common suffix is also more robust to attacks like Erebus. It's *not worse*, because it's this mapping is a super-mapping over actual-asn-mapping (the former takes the latter into account AND does more). At a high level, it not only prevents you from connecting to 8/8 Amazon nodes, but also from 8/8 nodes having Amazon as a critical part of the route.\r\nIf you want to discuss this design more from the research prospective \u2014\u00a0maybe we can exchange couple emails first, and then publish the summary here shortly after?\r\n\r\nMeta: This PR already has 100 comments so it's a bit difficult to navigate through everything. Let's try to be more precise and focus on the most important issues with this PR, because as you know fixing nits might be everlasting. Thank you @jonatack for addressing some of them in a separate PR.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/573173860/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/574650208",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-574650208",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 574650208,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDY1MDIwOA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-15T13:02:23Z",
    "updated_at": "2020-01-15T13:04:48Z",
    "author_association": "MEMBER",
    "body": "I think reading the `asmap` happens too late in the initialization process, unless there's a strong reason to do it like this that I'm missing.\r\nWhen reading it before loading the block index and doing initial verification, there would be much faster feedback on invalid `-asmap` command line arguments. It's a bit silly to spin up the entire node just to it shut down again.\r\nCould be changed in a later PR (maybe #17812) anyhow.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/574650208/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/574652570",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-574652570",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 574652570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDY1MjU3MA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-15T13:09:34Z",
    "updated_at": "2020-01-15T13:12:37Z",
    "author_association": "MEMBER",
    "body": "code review and light testing (both IPv4 and IPv6) ACK 50f655e4d50a3b8b39fc01a4aaab3d2aeb05e6be",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/574652570/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/574858220",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-574858220",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 574858220,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NDg1ODIyMA==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-15T21:12:23Z",
    "updated_at": "2020-01-15T21:12:23Z",
    "author_association": "MEMBER",
    "body": "For what it's worth I think reviewing @sipa's asmap format is prerequisite to signing off on this PR (since the data this PR is dependent on is encoded using the former). I've reviewed that code (and added some commentary: https://github.com/sipa/asmap/pull/2), and will now be starting on this code.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/574858220/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/577836435",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-577836435",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 577836435,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzgzNjQzNQ==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-23T19:27:11Z",
    "updated_at": "2020-01-23T19:27:11Z",
    "author_association": "MEMBER",
    "body": "I think no more pending critical comments, everything unaddressed will be easier to get through via a follow-up, so let's get this merged? Looking for acks :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/577836435/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/577857263",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-577857263",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 577857263,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3Nzg1NzI2Mw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-23T20:17:02Z",
    "updated_at": "2020-01-23T20:17:02Z",
    "author_association": "MEMBER",
    "body": "re-ACK 3c1bc40205a3fcab606e70b0e3c13d68b2860e34\r\nonly change is `std::vector<bool> &m_asmap`",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/577857263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578736859",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-578736859",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 578736859,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3ODczNjg1OQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-27T13:03:54Z",
    "updated_at": "2020-01-27T13:03:54Z",
    "author_association": "MEMBER",
    "body": "> I think reading the `asmap` happens too late in the initialization process, unless there's a strong reason to do it like this that I'm missing.\r\n> When reading it before loading the block index and doing initial verification, there would be much faster feedback on invalid `-asmap` command line arguments. It's a bit silly to spin up the entire node just to it shut down again.\r\n> Could be changed in a later PR (maybe #17812) anyhow.\r\n\r\nI can confirm that moving the asmap init.cpp code from the end of `Step 12: start node` to the end of the `Step 6: network initialization` section speeds up the feature_asmap.py tests in #17812 from 60 seconds down to 5, while they continue to function as expected... by dramatically speeding up the 2 tests that use `assert_start_raises_init_error`. Updating #17812.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578736859/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579578691",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-579578691",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 579578691,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTU3ODY5MQ==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-29T03:45:41Z",
    "updated_at": "2020-01-29T03:45:41Z",
    "author_association": "MEMBER",
    "body": "Is the plan to actually generate the asmap files from GeoIP's GeoLite database?\r\n\r\nHas anyone reviewed [their EULA](https://www.maxmind.com/en/geolite2/eula) which presumably controls asmaps derived from their database?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579578691/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579741244",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-579741244",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 579741244,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTc0MTI0NA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-29T12:50:17Z",
    "updated_at": "2020-01-29T12:50:17Z",
    "author_association": "MEMBER",
    "body": "I think how the particular asmap database is generated is an important discussion *if* and *when* it's going to be shipped with bitcoin core itself. This PR just adds a feature to load and interpret one, independent of where it comes from.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579741244/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579937920",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-579937920",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 579937920,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTkzNzkyMA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-29T20:11:25Z",
    "updated_at": "2020-01-29T20:11:25Z",
    "author_association": "MEMBER",
    "body": "@luke-jr https://github.com/sipa/asmap/pull/1 adds tooling to build asmap files from RIPE's dumps.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579937920/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579990279",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-579990279",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 579990279,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTk5MDI3OQ==",
    "user": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?u=a1574ca2038ff1dfaa9a7764c59ea5ff4f305b5d&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-29T22:25:37Z",
    "updated_at": "2020-01-29T22:27:03Z",
    "author_association": "MEMBER",
    "body": "For the sake of documentation, this apparently introduced an appveyor test failure #18020, fixed in #18022.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579990279/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580007581",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-580007581",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16702",
    "id": 580007581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDAwNzU4MQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-29T23:15:21Z",
    "updated_at": "2020-01-29T23:15:21Z",
    "author_association": "MEMBER",
    "body": "Sorry for the late review. I've opened #18023 with things that I think can be improved here.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580007581/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317276226",
    "pull_request_review_id": 279188467,
    "id": 317276226,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzI3NjIyNg==",
    "diff_hunk": "@@ -304,8 +336,14 @@ class CAddrMan\n \n         unsigned char nVersion = 1;\n         s << nVersion;\n-        s << ((unsigned char)32);\n+        s << ((unsigned char)36);\n         s << nKey;\n+        unsigned long long asmap_version = 0;\n+        if (m_asmap.size() != 0) {\n+            std::hash<std::vector<bool>> hasher;\n+            asmap_version = hasher(m_asmap);",
    "path": "src/addrman.h",
    "position": null,
    "original_position": 81,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "c8fdb2fe3efbf72d963c623bc316a3a9456cf4eb",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: You might want to make it the same length in bits an all architectures:\r\n\r\n```suggestion\r\n            const uint64_t asmap_version{hasher(m_asmap)};\r\n            s << asmap_version;\r\n```",
    "created_at": "2019-08-23T19:40:27Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317276226",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317276226"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317276226"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317276226/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 344,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317276773",
    "pull_request_review_id": 279188467,
    "id": 317276773,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzI3Njc3Mw==",
    "diff_hunk": "@@ -5,6 +5,8 @@\n #include <test/setup_common.h>\n #include <string>\n #include <boost/test/unit_test.hpp>\n+#include <util/asmap.h>\n+#include <test/data/asmap.json.h>",
    "path": "src/test/addrman_tests.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "c8fdb2fe3efbf72d963c623bc316a3a9456cf4eb",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This doesn't look like json. Also, this file is 21 MB, a bit too much for the git repo.\r\n\r\nYou might be better off adding a makefile rule `%.bin.h: %.bin` (similar to `%.json.h: %.json`).",
    "created_at": "2019-08-23T19:42:19Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317276773",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317276773"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317276773"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317276773/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 9,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317281198",
    "pull_request_review_id": 279195084,
    "id": 317281198,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzI4MTE5OA==",
    "diff_hunk": "@@ -5,6 +5,8 @@\n #include <test/setup_common.h>\n #include <string>\n #include <boost/test/unit_test.hpp>\n+#include <util/asmap.h>\n+#include <test/data/asmap.json.h>",
    "path": "src/test/addrman_tests.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "c8fdb2fe3efbf72d963c623bc316a3a9456cf4eb",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "For a big file that needs processing, maybe add a `contrib` script that fetches it (checking  the sha256 hash) and does its (determinstic) thing. And then just add the result to the repo.",
    "created_at": "2019-08-23T19:56:38Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317281198",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317281198"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317281198"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317281198/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 9,
    "side": "RIGHT",
    "in_reply_to_id": 317276773
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317288685",
    "pull_request_review_id": 279205133,
    "id": 317288685,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzI4ODY4NQ==",
    "diff_hunk": "@@ -5,6 +5,8 @@\n #include <test/setup_common.h>\n #include <string>\n #include <boost/test/unit_test.hpp>\n+#include <util/asmap.h>\n+#include <test/data/asmap.json.h>",
    "path": "src/test/addrman_tests.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "c8fdb2fe3efbf72d963c623bc316a3a9456cf4eb",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Right, I'll do both things.",
    "created_at": "2019-08-23T20:21:36Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317288685",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317288685"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317288685"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317288685/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 9,
    "side": "RIGHT",
    "in_reply_to_id": 317276773
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317328392",
    "pull_request_review_id": 279255830,
    "id": 317328392,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzMyODM5Mg==",
    "diff_hunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+\n+int DecodeBits(std::vector<bool> stream, int* bitpos, int minval, const int bit_sizes[], int bit_sizes_n)\n+{\n+    int val = minval;\n+    bool bit;\n+    for (int pos = 0; pos < bit_sizes_n; pos++) {\n+        int bit_size = bit_sizes[pos];\n+        if (pos + 1 < bit_sizes_n) {\n+            bit = stream.at(*bitpos);\n+            *bitpos = *bitpos + 1;\n+        } else {\n+            bit = 0;\n+        }\n+        if (bit) {\n+            val += (1 << bit_size);\n+        } else {\n+            for (int b = 0; b < bit_size; b++) {\n+                bit = stream.at(*bitpos);\n+                *bitpos = *bitpos + 1;\n+                val += bit << (bit_size - 1 - b);\n+            }\n+            return val;\n+        }\n+    }\n+    return -1;\n+}\n+\n+const int TYPE_BIT_SIZES[] = {0, 0, 1};\n+int DecodeType(std::vector<bool> stream, int* bitpos)\n+{\n+    return DecodeBits(stream, bitpos, 0, TYPE_BIT_SIZES, 3);\n+}\n+\n+const int ASN_BIT_SIZES[] = {15, 16, 17, 18, 19, 20, 21, 22, 23, 24};\n+int DecodeASN(std::vector<bool> stream, int* bitpos)\n+{\n+    return DecodeBits(stream, bitpos, 1, ASN_BIT_SIZES, 10);\n+}\n+\n+const int MATCH_BIT_SIZES[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+int DecodeMatch(std::vector<bool> stream, int* bitpos)\n+{\n+    return DecodeBits(stream, bitpos, 2, MATCH_BIT_SIZES, 8);\n+}\n+\n+const int JUMP_BIT_SIZES[] = {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30};\n+int DecodeJump(std::vector<bool> stream, int* bitpos) {\n+    return DecodeBits(stream, bitpos, 17, JUMP_BIT_SIZES, 26);\n+}\n+\n+int BitLength(int target)\n+{\n+    int result = 0;\n+    while (target > 0) {\n+        target = target / 2;\n+        result++;\n+    }\n+    return result;\n+}\n+\n+int Interpret(std::vector<bool> asmap, unsigned long long num, int bits)",
    "path": "src/util/asmap.cpp",
    "position": null,
    "original_position": 67,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "c8fdb2fe3efbf72d963c623bc316a3a9456cf4eb",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Don't pass the map by value; it's copying the entire megabyte bitmap on every call.",
    "created_at": "2019-08-23T23:15:47Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317328392",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317328392"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317328392"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317328392/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 67,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317328472",
    "pull_request_review_id": 279255830,
    "id": 317328472,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzMyODQ3Mg==",
    "diff_hunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+\n+int DecodeBits(std::vector<bool> stream, int* bitpos, int minval, const int bit_sizes[], int bit_sizes_n)",
    "path": "src/util/asmap.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "c8fdb2fe3efbf72d963c623bc316a3a9456cf4eb",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Don't pass the entire map by value.",
    "created_at": "2019-08-23T23:16:26Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317328472",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317328472"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317328472"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317328472/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 8,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317328716",
    "pull_request_review_id": 279255830,
    "id": 317328716,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzMyODcxNg==",
    "diff_hunk": "@@ -0,0 +1,5 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+int Interpret(std::vector<bool> asmap, unsigned long long num, int bits);",
    "path": "src/util/asmap.h",
    "position": null,
    "original_position": 5,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "c8fdb2fe3efbf72d963c623bc316a3a9456cf4eb",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "An unsigned long long is generally not enough to represent an IPv6 address. Maybe you want to pass the IP address also as an `std::vector<bool>`, and have the caller convert the IP address to a bitmap?",
    "created_at": "2019-08-23T23:18:09Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317328716",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317328716"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317328716"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317328716/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 5,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317328977",
    "pull_request_review_id": 279255830,
    "id": 317328977,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzMyODk3Nw==",
    "diff_hunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+\n+int DecodeBits(std::vector<bool> stream, int* bitpos, int minval, const int bit_sizes[], int bit_sizes_n)",
    "path": "src/util/asmap.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "c8fdb2fe3efbf72d963c623bc316a3a9456cf4eb",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "A more C++ish way to do this would be to pass a `std::vector<bool>::const_iterator& it` (for the beginning of the value, updated to be after the value afterwards) and a `const std::vector<bool>::const_iterator& end` (for the end of the area).",
    "created_at": "2019-08-23T23:19:58Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317328977",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317328977"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317328977"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317328977/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 8,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317334544",
    "pull_request_review_id": 279263258,
    "id": 317334544,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzMzNDU0NA==",
    "diff_hunk": "@@ -304,8 +336,14 @@ class CAddrMan\n \n         unsigned char nVersion = 1;\n         s << nVersion;\n-        s << ((unsigned char)32);\n+        s << ((unsigned char)36);\n         s << nKey;\n+        unsigned long long asmap_version = 0;\n+        if (m_asmap.size() != 0) {\n+            std::hash<std::vector<bool>> hasher;\n+            asmap_version = hasher(m_asmap);",
    "path": "src/addrman.h",
    "position": null,
    "original_position": 81,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "c8fdb2fe3efbf72d963c623bc316a3a9456cf4eb",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think using std::hash is the right choice here, as it has no well-defined semantics (even updating your c++ stdlib could change the function). You can use `SerializeHash(m_asmap)` instead.",
    "created_at": "2019-08-24T00:08:17Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317334544",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317334544"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317334544"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317334544/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 344,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317796962",
    "pull_request_review_id": 279835662,
    "id": 317796962,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzc5Njk2Mg==",
    "diff_hunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+\n+int DecodeBits(const std::vector<bool> &stream, int* bitpos, int minval, const int bit_sizes[], int bit_sizes_n)",
    "path": "src/util/asmap.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "229da7eb00622a25a948a2f554883f605ffea57a",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is still a very C-like way of passing arguments. I suggest:\r\n* Instead of a vector reference and pointer to int position, pass a start (reference to) const_iterator, and an end const_iterator.\r\n* Instead of a pointer to an array of bit sizes and a length, pass a const reference to a vector of bit sizes.",
    "created_at": "2019-08-26T21:01:14Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317796962",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317796962"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317796962"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317796962/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 8,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317797182",
    "pull_request_review_id": 279835662,
    "id": 317797182,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzc5NzE4Mg==",
    "diff_hunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+\n+int DecodeBits(const std::vector<bool> &stream, int* bitpos, int minval, const int bit_sizes[], int bit_sizes_n)\n+{\n+    int val = minval;\n+    bool bit;\n+    for (int pos = 0; pos < bit_sizes_n; pos++) {\n+        int bit_size = bit_sizes[pos];\n+        if (pos + 1 < bit_sizes_n) {\n+            bit = stream.at(*bitpos);\n+            *bitpos = *bitpos + 1;\n+        } else {\n+            bit = 0;\n+        }\n+        if (bit) {\n+            val += (1 << bit_size);\n+        } else {\n+            for (int b = 0; b < bit_size; b++) {\n+                bit = stream.at(*bitpos);\n+                *bitpos = *bitpos + 1;\n+                val += bit << (bit_size - 1 - b);\n+            }\n+            return val;\n+        }\n+    }\n+    return -1;\n+}\n+\n+const int TYPE_BIT_SIZES[] = {0, 0, 1};\n+int DecodeType(const std::vector<bool> &stream, int* bitpos)",
    "path": "src/util/asmap.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "229da7eb00622a25a948a2f554883f605ffea57a",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Similarly for these you can pass a start and end iterator to the bits in the vector.",
    "created_at": "2019-08-26T21:01:48Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317797182",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317797182"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317797182"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317797182/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 35,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317797688",
    "pull_request_review_id": 279835662,
    "id": 317797688,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzc5NzY4OA==",
    "diff_hunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+\n+int DecodeBits(const std::vector<bool> &stream, int* bitpos, int minval, const int bit_sizes[], int bit_sizes_n)",
    "path": "src/util/asmap.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "229da7eb00622a25a948a2f554883f605ffea57a",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You probably want to use `uint32_t` as return type here and the functions calling it, as `int` doesn't have a well defined range.",
    "created_at": "2019-08-26T21:03:12Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317797688",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317797688"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317797688"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317797688/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 8,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317798246",
    "pull_request_review_id": 279835662,
    "id": 317798246,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzc5ODI0Ng==",
    "diff_hunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+\n+int DecodeBits(const std::vector<bool> &stream, int* bitpos, int minval, const int bit_sizes[], int bit_sizes_n)",
    "path": "src/util/asmap.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "229da7eb00622a25a948a2f554883f605ffea57a",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Most of the functions and global constants in this file can be in an anonymous namespace (which makes them not pollute the global namespace, and allows some optimizations).",
    "created_at": "2019-08-26T21:04:42Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317798246",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317798246"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317798246"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317798246/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 8,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317798736",
    "pull_request_review_id": 279835662,
    "id": 317798736,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzc5ODczNg==",
    "diff_hunk": "@@ -0,0 +1,103 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+\n+int DecodeBits(const std::vector<bool> &stream, int* bitpos, int minval, const int bit_sizes[], int bit_sizes_n)\n+{\n+    int val = minval;\n+    bool bit;\n+    for (int pos = 0; pos < bit_sizes_n; pos++) {\n+        int bit_size = bit_sizes[pos];\n+        if (pos + 1 < bit_sizes_n) {\n+            bit = stream.at(*bitpos);\n+            *bitpos = *bitpos + 1;\n+        } else {\n+            bit = 0;\n+        }\n+        if (bit) {\n+            val += (1 << bit_size);\n+        } else {\n+            for (int b = 0; b < bit_size; b++) {\n+                bit = stream.at(*bitpos);\n+                *bitpos = *bitpos + 1;\n+                val += bit << (bit_size - 1 - b);\n+            }\n+            return val;\n+        }\n+    }\n+    return -1;\n+}\n+\n+const int TYPE_BIT_SIZES[] = {0, 0, 1};\n+int DecodeType(const std::vector<bool> &stream, int* bitpos)\n+{\n+    return DecodeBits(stream, bitpos, 0, TYPE_BIT_SIZES, 3);\n+}\n+\n+const int ASN_BIT_SIZES[] = {15, 16, 17, 18, 19, 20, 21, 22, 23, 24};\n+int DecodeASN(const std::vector<bool> &stream, int* bitpos)\n+{\n+    return DecodeBits(stream, bitpos, 1, ASN_BIT_SIZES, 10);\n+}\n+\n+const int MATCH_BIT_SIZES[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+int DecodeMatch(const std::vector<bool> &stream, int* bitpos)\n+{\n+    return DecodeBits(stream, bitpos, 2, MATCH_BIT_SIZES, 8);\n+}\n+\n+const int JUMP_BIT_SIZES[] = {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30};\n+int DecodeJump(const std::vector<bool> &stream, int* bitpos) {\n+    return DecodeBits(stream, bitpos, 17, JUMP_BIT_SIZES, 26);\n+}\n+\n+int BitLength(int target)",
    "path": "src/util/asmap.cpp",
    "position": null,
    "original_position": 57,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "229da7eb00622a25a948a2f554883f605ffea57a",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You can use src/crypto/common.h's `CountBits` for this (which uses the efficient `__builtin_clz` if it exists).",
    "created_at": "2019-08-26T21:05:53Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317798736",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317798736"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317798736"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317798736/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 57,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318238276",
    "pull_request_review_id": 280398196,
    "id": 318238276,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODIzODI3Ng==",
    "diff_hunk": "@@ -0,0 +1,5 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+",
    "path": "src/util/asmap.h",
    "position": 4,
    "original_position": 4,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "0921912adb68078fa47c7552758b4af3f88828e2",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\nsrc/util/asmap.h seems to be missing the expected include guard:\r\n  #ifndef BITCOIN_UTIL_ASMAP_H\r\n  #define BITCOIN_UTIL_ASMAP_H\r\n  ...\r\n  #endif // BITCOIN_UTIL_ASMAP_H",
    "created_at": "2019-08-27T18:43:59Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318238276",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318238276"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318238276"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318238276/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 4,
    "original_line": 4,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318245688",
    "pull_request_review_id": 280407630,
    "id": 318245688,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODI0NTY4OA==",
    "diff_hunk": "@@ -0,0 +1,5 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+",
    "path": "src/util/asmap.h",
    "position": 4,
    "original_position": 4,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "0921912adb68078fa47c7552758b4af3f88828e2",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Will do. What is it actually used for?",
    "created_at": "2019-08-27T19:01:00Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318245688",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318245688"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318245688"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318245688/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 4,
    "original_line": 4,
    "side": "RIGHT",
    "in_reply_to_id": 318238276
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318253311",
    "pull_request_review_id": 280417242,
    "id": 318253311,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODI1MzMxMQ==",
    "diff_hunk": "@@ -0,0 +1,5 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+",
    "path": "src/util/asmap.h",
    "position": 4,
    "original_position": 4,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "0921912adb68078fa47c7552758b4af3f88828e2",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think compilers will spit out warnings if symbols are declared more than once. This will happen with this header, if it is (indirectly) included twice.",
    "created_at": "2019-08-27T19:19:39Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318253311",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318253311"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318253311"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318253311/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 4,
    "original_line": 4,
    "side": "RIGHT",
    "in_reply_to_id": 318238276
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318465087",
    "pull_request_review_id": 280680935,
    "id": 318465087,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODQ2NTA4Nw==",
    "diff_hunk": "@@ -429,6 +435,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify p2p connection timeout in seconds. This option determines the amount of time a peer may be inactive before the connection to it is dropped. (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-torpassword=<pass>\", \"Tor control port password (default: empty)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-asmap=<file>\", \"Specify asn mapping, relative to the -datadir path (only useable from configuration file, not command line)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "d688a65773f7e1fabf749a185186515a5523b202",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why isn't it usable from the command line?",
    "created_at": "2019-08-28T08:52:20Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318465087",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318465087"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318465087"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318465087/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 438,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318475859",
    "pull_request_review_id": 280680935,
    "id": 318475859,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODQ3NTg1OQ==",
    "diff_hunk": "@@ -304,8 +337,13 @@ class CAddrMan\n \n         unsigned char nVersion = 1;",
    "path": "src/addrman.h",
    "position": null,
    "original_position": 74,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "d688a65773f7e1fabf749a185186515a5523b202",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Bump `nVersion` if `-asmap` is set? ",
    "created_at": "2019-08-28T09:15:52Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318475859",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318475859"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318475859"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318475859/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 338,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318600401",
    "pull_request_review_id": 280855040,
    "id": 318600401,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODYwMDQwMQ==",
    "diff_hunk": "@@ -429,6 +435,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify p2p connection timeout in seconds. This option determines the amount of time a peer may be inactive before the connection to it is dropped. (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-torpassword=<pass>\", \"Tor control port password (default: empty)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-asmap=<file>\", \"Specify asn mapping, relative to the -datadir path (only useable from configuration file, not command line)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "d688a65773f7e1fabf749a185186515a5523b202",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "no real reason, will allow command line ",
    "created_at": "2019-08-28T14:05:33Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318600401",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318600401"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318600401"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318600401/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 438,
    "side": "RIGHT",
    "in_reply_to_id": 318465087
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318636426",
    "pull_request_review_id": 280902010,
    "id": 318636426,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODYzNjQyNg==",
    "diff_hunk": "@@ -0,0 +1,5 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+",
    "path": "src/util/asmap.h",
    "position": 4,
    "original_position": 4,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "0921912adb68078fa47c7552758b4af3f88828e2",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "See https://en.wikipedia.org/wiki/Include_guard",
    "created_at": "2019-08-28T15:08:53Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318636426",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318636426"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318636426"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318636426/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 4,
    "original_line": 4,
    "side": "RIGHT",
    "in_reply_to_id": 318238276
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318654442",
    "pull_request_review_id": 280925217,
    "id": 318654442,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODY1NDQ0Mg==",
    "diff_hunk": "@@ -304,8 +337,13 @@ class CAddrMan\n \n         unsigned char nVersion = 1;",
    "path": "src/addrman.h",
    "position": null,
    "original_position": 74,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "d688a65773f7e1fabf749a185186515a5523b202",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I hesitated to do this because I don't have a good sense of when the version number should be used for in this context.\r\nIn my implementation nKeySize tells you whether hash is present or not. Perhaps you're right and nVersion is a better way to track whether asmap is present.\r\n\r\nOpinions from other reviewers?",
    "created_at": "2019-08-28T15:42:06Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318654442",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318654442"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318654442"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318654442/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 338,
    "side": "RIGHT",
    "in_reply_to_id": 318475859
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318656660",
    "pull_request_review_id": 280927900,
    "id": 318656660,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODY1NjY2MA==",
    "diff_hunk": "@@ -304,8 +337,13 @@ class CAddrMan\n \n         unsigned char nVersion = 1;",
    "path": "src/addrman.h",
    "position": null,
    "original_position": 74,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "d688a65773f7e1fabf749a185186515a5523b202",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I would say `nVersion` says something about backwards compatibility, but at first glance it doesn't look like the current version rejects a higher `nVersion`. In any case I prefer directly checking the version over implicit checks that will confuse future devs.",
    "created_at": "2019-08-28T15:46:07Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318656660",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318656660"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318656660"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318656660/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 338,
    "side": "RIGHT",
    "in_reply_to_id": 318475859
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318679687",
    "pull_request_review_id": 280957005,
    "id": 318679687,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODY3OTY4Nw==",
    "diff_hunk": "@@ -304,8 +337,13 @@ class CAddrMan\n \n         unsigned char nVersion = 1;",
    "path": "src/addrman.h",
    "position": null,
    "original_position": 74,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "d688a65773f7e1fabf749a185186515a5523b202",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If you feed addrman serialized by my current implementation to the pre-PR code, ```keySize != 32``` will fail.",
    "created_at": "2019-08-28T16:34:10Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318679687",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318679687"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318679687"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318679687/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 338,
    "side": "RIGHT",
    "in_reply_to_id": 318475859
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318722425",
    "pull_request_review_id": 281011720,
    "id": 318722425,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODcyMjQyNQ==",
    "diff_hunk": "@@ -470,6 +471,25 @@ std::vector<unsigned char> CNetAddr::GetGroup() const\n     else\n         nBits = 32;\n \n+    // Ignore nBits, use 128 bits to obtain ASN\n+    if (asmap.size() != 0 && (nClass == NET_IPV4 || nClass == NET_IPV6)) {\n+        nClass = NET_IPV6;\n+        std::vector<bool> ip_bits(128);\n+        for (int8_t byte_i = 0; byte_i < 16; ++byte_i) {\n+            uint8_t cur_byte = GetByte(byte_i);\n+            for (uint8_t bit_i = 0; bit_i < 8; ++bit_i) {\n+                ip_bits[byte_i * 8 + bit_i] = (cur_byte >> bit_i) & 1;",
    "path": "src/netaddress.cpp",
    "position": null,
    "original_position": 28,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "7450dab5764d52f4bb73a16f7ae97578b7dba00f",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think you're swapping bit order here. The high bits from the IP's bytes should go first.",
    "created_at": "2019-08-28T18:12:01Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318722425",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318722425"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318722425"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318722425/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 481,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356507305",
    "pull_request_review_id": 330426658,
    "id": 356507305,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NjUwNzMwNQ==",
    "diff_hunk": "@@ -268,6 +275,46 @@ class CAddrMan\n     void SetServices_(const CService &addr, ServiceFlags nServices) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n public:\n+    // Compressed IP->ASN mapping, loaded from a file when a node starts.\n+    // Should be always empty if no file was provided.\n+    // This mapping is then used for bucketing nodes in Addrman.\n+    //\n+    // If asmap is provided, nodes will be bucketed by\n+    // AS they belong to, in order to make impossible for a node\n+    // to connect to several nodes hosted in a single AS.\n+    // This is done in response to Erebus attack, but also to generally\n+    // diversify the connections every node creates,\n+    // especially useful when a large fraction of nodes\n+    // operate under a couple of cloud providers.\n+    //\n+    // If a new asmap was provided, the exsiting records",
    "path": "src/addrman.h",
    "position": null,
    "original_position": 62,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: s/exsiting/existing/",
    "created_at": "2019-12-11T10:10:33Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356507305",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356507305"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356507305"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356507305/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 290,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356614688",
    "pull_request_review_id": 330559968,
    "id": 356614688,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NjYxNDY4OA==",
    "diff_hunk": "@@ -268,6 +275,46 @@ class CAddrMan\n     void SetServices_(const CService &addr, ServiceFlags nServices) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n public:\n+    // Compressed IP->ASN mapping, loaded from a file when a node starts.\n+    // Should be always empty if no file was provided.\n+    // This mapping is then used for bucketing nodes in Addrman.\n+    //\n+    // If asmap is provided, nodes will be bucketed by\n+    // AS they belong to, in order to make impossible for a node\n+    // to connect to several nodes hosted in a single AS.\n+    // This is done in response to Erebus attack, but also to generally\n+    // diversify the connections every node creates,\n+    // especially useful when a large fraction of nodes\n+    // operate under a couple of cloud providers.\n+    //\n+    // If a new asmap was provided, the exsiting records\n+    // would be re-bucketed accordingly.\n+    std::vector<bool> m_asmap;\n+\n+    static std::vector<bool> DecodeAsmap(fs::path path)",
    "path": "src/addrman.h",
    "position": null,
    "original_position": 66,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "would generally prefer for the implementation of this function to in the `cpp` instead of the header, is there a specific reason to put it here?",
    "created_at": "2019-12-11T14:02:14Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356614688",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356614688"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356614688"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356614688/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 294,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356722432",
    "pull_request_review_id": 330426658,
    "id": 356722432,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NjcyMjQzMg==",
    "diff_hunk": "@@ -525,6 +526,7 @@ libbitcoin_util_a_SOURCES = \\\n   util/time.cpp \\\n   util/url.cpp \\\n   util/validation.cpp \\\n+  util/asmap.cpp \\",
    "path": "src/Makefile.am",
    "position": null,
    "original_position": 12,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Any reason this is placed last instead of in alphabetical order?",
    "created_at": "2019-12-11T17:05:43Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356722432",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356722432"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356722432"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356722432/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 529,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356740713",
    "pull_request_review_id": 330426658,
    "id": 356740713,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Njc0MDcxMw==",
    "diff_hunk": "@@ -302,7 +349,7 @@ class CAddrMan\n     {\n         LOCK(cs);\n \n-        unsigned char nVersion = 1;\n+        unsigned char nVersion = 2;",
    "path": "src/addrman.h",
    "position": 82,
    "original_position": 98,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could add code documentation here? Is this the same as line 320 above: `version byte (currently 1)`?",
    "created_at": "2019-12-11T17:43:15Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356740713",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356740713"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356740713"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356740713/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 332,
    "original_line": 332,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356742334",
    "pull_request_review_id": 330426658,
    "id": 356742334,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Njc0MjMzNA==",
    "diff_hunk": "@@ -417,20 +460,48 @@ class CAddrMan\n         }\n         nTried -= nLost;\n \n-        // Deserialize positions in the new table (if possible).\n+        // Store positions in the new table buckets to apply later (if possible).\n+        std::map<int, int> entryToBucket; // Represents which entry belonged to which bucket when serializing\n+\n         for (int bucket = 0; bucket < nUBuckets; bucket++) {\n             int nSize = 0;\n             s >> nSize;\n             for (int n = 0; n < nSize; n++) {\n                 int nIndex = 0;\n                 s >> nIndex;\n                 if (nIndex >= 0 && nIndex < nNew) {\n-                    CAddrInfo &info = mapInfo[nIndex];\n-                    int nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n-                    if (nVersion == 1 && nUBuckets == ADDRMAN_NEW_BUCKET_COUNT && vvNew[bucket][nUBucketPos] == -1 && info.nRefCount < ADDRMAN_NEW_BUCKETS_PER_ADDRESS) {\n-                        info.nRefCount++;\n-                        vvNew[bucket][nUBucketPos] = nIndex;\n-                    }\n+                    entryToBucket[nIndex] = bucket;\n+                }\n+            }\n+        }\n+\n+        uint256 supplied_asmap_version;\n+        if (m_asmap.size() != 0) {\n+            supplied_asmap_version = SerializeHash(m_asmap);\n+        }\n+        uint256 serialized_asmap_version;\n+        if (nVersion > 1) {\n+            s >> serialized_asmap_version;\n+        }\n+\n+        for (int n = 0; n < nNew; n++) {\n+            CAddrInfo &info = mapInfo[n];\n+            int bucket = entryToBucket[n];\n+            int nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n+            // Bucketing has not changed, using existing bucket positions for the new table",
    "path": "src/addrman.h",
    "position": null,
    "original_position": 189,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I could be misunderstanding; should this comment be 2 lines lower if it refers to the first part of the conditional?",
    "created_at": "2019-12-11T17:46:47Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356742334",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356742334"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356742334"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356742334/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 491,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356744971",
    "pull_request_review_id": 330426658,
    "id": 356744971,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Njc0NDk3MQ==",
    "diff_hunk": "@@ -426,6 +432,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify p2p connection timeout in seconds. This option determines the amount of time a peer may be inactive before the connection to it is dropped. (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-torpassword=<pass>\", \"Tor control port password (default: empty)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-asmap=<file>\", \"Specify asn mapping, relative to the -datadir path\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "suggestion: add the default\r\n```diff\r\nANY, OptionsCategory::CONNECTION);\r\n-    gArgs.AddArg(\"-asmap=<file>\", \"Specify asn mapping, relative to the -datadir path\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\r\n+    gArgs.AddArg(\"-asmap=<file>\", strprintf(\"Specify asn mapping, relative to the -datadir path (default: %u)\", DEFAULT_ASMAP_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\r\n```",
    "created_at": "2019-12-11T17:52:26Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356744971",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356744971"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356744971"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356744971/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 435,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356779224",
    "pull_request_review_id": 330772088,
    "id": 356779224,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Njc3OTIyNA==",
    "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+#include <crypto/common.h>\n+\n+namespace {\n+\n+uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, uint8_t minval, const std::vector<uint8_t> &bit_sizes)\n+{\n+    uint32_t val = minval;\n+    bool bit;\n+    for (std::vector<uint8_t>::const_iterator bit_sizes_it = bit_sizes.begin();\n+        bit_sizes_it != bit_sizes.end(); ++bit_sizes_it) {\n+        if (bit_sizes_it + 1 != bit_sizes.end()) {\n+            bit = *bitpos;\n+            bitpos++;\n+        } else {\n+            bit = 0;\n+        }\n+        if (bit) {\n+            val += (1 << *bit_sizes_it);\n+        } else {\n+            for (int b = 0; b < *bit_sizes_it; b++) {\n+                bit = *bitpos;\n+                bitpos++;\n+                val += bit << (*bit_sizes_it - 1 - b);\n+            }\n+            return val;\n+        }\n+    }\n+    return -1;\n+}\n+\n+const std::vector<uint8_t> TYPE_BIT_SIZES{0, 0, 1};\n+uint32_t DecodeType(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 0, TYPE_BIT_SIZES);\n+}\n+\n+const std::vector<uint8_t> ASN_BIT_SIZES{15, 16, 17, 18, 19, 20, 21, 22, 23, 24};\n+uint32_t DecodeASN(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 1, ASN_BIT_SIZES);\n+}\n+\n+\n+const std::vector<uint8_t> MATCH_BIT_SIZES{1, 2, 3, 4, 5, 6, 7, 8};\n+uint32_t DecodeMatch(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 2, MATCH_BIT_SIZES);\n+}\n+\n+\n+const std::vector<uint8_t> JUMP_BIT_SIZES{5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30};\n+uint32_t DecodeJump(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 17, JUMP_BIT_SIZES);\n+}\n+\n+}\n+\n+uint32_t Interpret(const std::vector<bool> &asmap, const std::vector<bool> &ip)\n+{\n+    std::vector<bool>::const_iterator pos = asmap.begin();\n+    uint8_t bits = ip.size();\n+    uint8_t default_asn = 0;\n+    uint32_t opcode, jump, match, matchlen;\n+    while (1) {",
    "path": "src/util/asmap.cpp",
    "position": 71,
    "original_position": 71,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What is the argument that a corrupted asmap file can't cause an infinite loop here? I could be reading this wrong but it seems like an op_code 1 that jumps to itself it will never exit.",
    "created_at": "2019-12-11T19:05:15Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356779224",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356779224"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356779224"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356779224/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 71,
    "original_line": 71,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356782592",
    "pull_request_review_id": 330776440,
    "id": 356782592,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Njc4MjU5Mg==",
    "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+#include <crypto/common.h>\n+\n+namespace {\n+\n+uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, uint8_t minval, const std::vector<uint8_t> &bit_sizes)\n+{\n+    uint32_t val = minval;\n+    bool bit;\n+    for (std::vector<uint8_t>::const_iterator bit_sizes_it = bit_sizes.begin();\n+        bit_sizes_it != bit_sizes.end(); ++bit_sizes_it) {\n+        if (bit_sizes_it + 1 != bit_sizes.end()) {\n+            bit = *bitpos;\n+            bitpos++;\n+        } else {\n+            bit = 0;\n+        }\n+        if (bit) {\n+            val += (1 << *bit_sizes_it);\n+        } else {\n+            for (int b = 0; b < *bit_sizes_it; b++) {\n+                bit = *bitpos;\n+                bitpos++;\n+                val += bit << (*bit_sizes_it - 1 - b);\n+            }\n+            return val;\n+        }\n+    }\n+    return -1;\n+}\n+\n+const std::vector<uint8_t> TYPE_BIT_SIZES{0, 0, 1};\n+uint32_t DecodeType(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 0, TYPE_BIT_SIZES);\n+}\n+\n+const std::vector<uint8_t> ASN_BIT_SIZES{15, 16, 17, 18, 19, 20, 21, 22, 23, 24};\n+uint32_t DecodeASN(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 1, ASN_BIT_SIZES);\n+}\n+\n+\n+const std::vector<uint8_t> MATCH_BIT_SIZES{1, 2, 3, 4, 5, 6, 7, 8};\n+uint32_t DecodeMatch(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 2, MATCH_BIT_SIZES);\n+}\n+\n+\n+const std::vector<uint8_t> JUMP_BIT_SIZES{5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30};\n+uint32_t DecodeJump(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 17, JUMP_BIT_SIZES);\n+}\n+\n+}\n+\n+uint32_t Interpret(const std::vector<bool> &asmap, const std::vector<bool> &ip)\n+{\n+    std::vector<bool>::const_iterator pos = asmap.begin();\n+    uint8_t bits = ip.size();\n+    uint8_t default_asn = 0;\n+    uint32_t opcode, jump, match, matchlen;\n+    while (1) {",
    "path": "src/util/asmap.cpp",
    "position": 71,
    "original_position": 71,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "DecodeType increments `pos` itself. The jump is relative to the end of the jump instruction.",
    "created_at": "2019-12-11T19:12:20Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356782592",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356782592"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356782592"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356782592/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 71,
    "original_line": 71,
    "side": "RIGHT",
    "in_reply_to_id": 356779224
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356784516",
    "pull_request_review_id": 330778917,
    "id": 356784516,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Njc4NDUxNg==",
    "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+#include <crypto/common.h>\n+\n+namespace {\n+\n+uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, uint8_t minval, const std::vector<uint8_t> &bit_sizes)\n+{\n+    uint32_t val = minval;\n+    bool bit;\n+    for (std::vector<uint8_t>::const_iterator bit_sizes_it = bit_sizes.begin();\n+        bit_sizes_it != bit_sizes.end(); ++bit_sizes_it) {\n+        if (bit_sizes_it + 1 != bit_sizes.end()) {\n+            bit = *bitpos;\n+            bitpos++;\n+        } else {\n+            bit = 0;\n+        }\n+        if (bit) {\n+            val += (1 << *bit_sizes_it);\n+        } else {\n+            for (int b = 0; b < *bit_sizes_it; b++) {\n+                bit = *bitpos;\n+                bitpos++;\n+                val += bit << (*bit_sizes_it - 1 - b);\n+            }\n+            return val;\n+        }\n+    }\n+    return -1;",
    "path": "src/util/asmap.cpp",
    "position": 34,
    "original_position": 34,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "1. What happens when you return `-1` and the type is  `uint32_t`? Does it return `(2^32)-1`?\r\n\r\n2. It doesn't seem like anything checks for `-1` to catch this error. \r\n\r\n3. If the call stack was `DecodeJump-->DecodeBits` and `DecodeBits` returns `-1` then the next operation would be `pos += jump;` where `jump=-1`. Does this then integer overflow `pos`?\r\n\r\n",
    "created_at": "2019-12-11T19:16:16Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356784516",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356784516"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356784516"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356784516/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 34,
    "original_line": 34,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356785710",
    "pull_request_review_id": 330780400,
    "id": 356785710,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Njc4NTcxMA==",
    "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+#include <crypto/common.h>\n+\n+namespace {\n+\n+uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, uint8_t minval, const std::vector<uint8_t> &bit_sizes)\n+{\n+    uint32_t val = minval;\n+    bool bit;\n+    for (std::vector<uint8_t>::const_iterator bit_sizes_it = bit_sizes.begin();\n+        bit_sizes_it != bit_sizes.end(); ++bit_sizes_it) {\n+        if (bit_sizes_it + 1 != bit_sizes.end()) {\n+            bit = *bitpos;\n+            bitpos++;\n+        } else {\n+            bit = 0;\n+        }\n+        if (bit) {\n+            val += (1 << *bit_sizes_it);\n+        } else {\n+            for (int b = 0; b < *bit_sizes_it; b++) {\n+                bit = *bitpos;\n+                bitpos++;\n+                val += bit << (*bit_sizes_it - 1 - b);\n+            }\n+            return val;\n+        }\n+    }\n+    return -1;\n+}\n+\n+const std::vector<uint8_t> TYPE_BIT_SIZES{0, 0, 1};\n+uint32_t DecodeType(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 0, TYPE_BIT_SIZES);\n+}\n+\n+const std::vector<uint8_t> ASN_BIT_SIZES{15, 16, 17, 18, 19, 20, 21, 22, 23, 24};\n+uint32_t DecodeASN(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 1, ASN_BIT_SIZES);\n+}\n+\n+\n+const std::vector<uint8_t> MATCH_BIT_SIZES{1, 2, 3, 4, 5, 6, 7, 8};\n+uint32_t DecodeMatch(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 2, MATCH_BIT_SIZES);\n+}\n+\n+\n+const std::vector<uint8_t> JUMP_BIT_SIZES{5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30};\n+uint32_t DecodeJump(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 17, JUMP_BIT_SIZES);\n+}\n+\n+}\n+\n+uint32_t Interpret(const std::vector<bool> &asmap, const std::vector<bool> &ip)\n+{\n+    std::vector<bool>::const_iterator pos = asmap.begin();\n+    uint8_t bits = ip.size();\n+    uint8_t default_asn = 0;\n+    uint32_t opcode, jump, match, matchlen;\n+    while (1) {\n+        assert(pos != asmap.end());\n+        opcode = DecodeType(pos);\n+        if (opcode == 0) {\n+            return DecodeASN(pos);\n+        } else if (opcode == 1) {\n+            jump = DecodeJump(pos);\n+            if (ip[ip.size() - bits]) {\n+                pos += jump;\n+            }\n+            bits--;\n+        } else if (opcode == 2) {\n+            match = DecodeMatch(pos);\n+            matchlen = CountBits(match) - 1;\n+            for (uint32_t bit = 0; bit < matchlen; bit++) {\n+                if ((ip[ip.size() - bits]) != ((match >> (matchlen - 1 - bit)) & 1)) {\n+                    return default_asn;\n+                }\n+                bits--;\n+            }\n+        } else if (opcode == 3) {\n+            default_asn = DecodeASN(pos);\n+        } else {\n+            assert(0);",
    "path": "src/util/asmap.cpp",
    "position": 94,
    "original_position": 94,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It might make sense to log how we ended up here since it seems like something real bad must've happened. Is there any way to recover or is this case so bad that should the Bitcoin node should immediately stop?",
    "created_at": "2019-12-11T19:18:36Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356785710",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356785710"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356785710"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356785710/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 94,
    "original_line": 94,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356786391",
    "pull_request_review_id": 330781251,
    "id": 356786391,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Njc4NjM5MQ==",
    "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+#include <crypto/common.h>\n+\n+namespace {\n+\n+uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, uint8_t minval, const std::vector<uint8_t> &bit_sizes)\n+{\n+    uint32_t val = minval;\n+    bool bit;\n+    for (std::vector<uint8_t>::const_iterator bit_sizes_it = bit_sizes.begin();\n+        bit_sizes_it != bit_sizes.end(); ++bit_sizes_it) {\n+        if (bit_sizes_it + 1 != bit_sizes.end()) {\n+            bit = *bitpos;\n+            bitpos++;\n+        } else {\n+            bit = 0;\n+        }\n+        if (bit) {\n+            val += (1 << *bit_sizes_it);\n+        } else {\n+            for (int b = 0; b < *bit_sizes_it; b++) {\n+                bit = *bitpos;\n+                bitpos++;\n+                val += bit << (*bit_sizes_it - 1 - b);\n+            }\n+            return val;\n+        }\n+    }\n+    return -1;\n+}\n+\n+const std::vector<uint8_t> TYPE_BIT_SIZES{0, 0, 1};\n+uint32_t DecodeType(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 0, TYPE_BIT_SIZES);\n+}\n+\n+const std::vector<uint8_t> ASN_BIT_SIZES{15, 16, 17, 18, 19, 20, 21, 22, 23, 24};\n+uint32_t DecodeASN(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 1, ASN_BIT_SIZES);\n+}\n+\n+\n+const std::vector<uint8_t> MATCH_BIT_SIZES{1, 2, 3, 4, 5, 6, 7, 8};\n+uint32_t DecodeMatch(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 2, MATCH_BIT_SIZES);\n+}\n+\n+\n+const std::vector<uint8_t> JUMP_BIT_SIZES{5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30};\n+uint32_t DecodeJump(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 17, JUMP_BIT_SIZES);\n+}\n+\n+}\n+\n+uint32_t Interpret(const std::vector<bool> &asmap, const std::vector<bool> &ip)\n+{\n+    std::vector<bool>::const_iterator pos = asmap.begin();\n+    uint8_t bits = ip.size();\n+    uint8_t default_asn = 0;\n+    uint32_t opcode, jump, match, matchlen;\n+    while (1) {\n+        assert(pos != asmap.end());\n+        opcode = DecodeType(pos);\n+        if (opcode == 0) {",
    "path": "src/util/asmap.cpp",
    "position": 74,
    "original_position": 74,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I would suggest using an enum or some constant to help document the intent of these values",
    "created_at": "2019-12-11T19:19:59Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356786391",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356786391"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356786391"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356786391/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 74,
    "original_line": 74,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356790248",
    "pull_request_review_id": 330786137,
    "id": 356790248,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Njc5MDI0OA==",
    "diff_hunk": "@@ -470,6 +471,27 @@ std::vector<unsigned char> CNetAddr::GetGroup() const\n     else\n         nBits = 32;\n \n+    // If asmap is supplied and the address is IPv4/IPv6,\n+    // ignore nBits and use 32/128 bits to obtain ASN from asmap.\n+    // ASN is then returned to be used for bucketing.\n+    if (asmap.size() != 0 && (nClass == NET_IPV4 || nClass == NET_IPV6)) {\n+        nClass = NET_IPV6;\n+        std::vector<bool> ip_bits(128);\n+        for (int8_t byte_i = 0; byte_i < 16; ++byte_i) {\n+            uint8_t cur_byte = GetByte(15 - byte_i);\n+            for (uint8_t bit_i = 0; bit_i < 8; ++bit_i) {\n+                ip_bits[byte_i * 8 + bit_i] = (cur_byte >> (7 - bit_i)) & 1;\n+            }\n+        }\n+\n+        uint32_t asn = Interpret(asmap, ip_bits);\n+        vchRet.push_back(nClass);\n+        for (int i = 0; i < 4; i++) {\n+            vchRet.push_back(asn >> (8 * i) & 0xFF);",
    "path": "src/netaddress.cpp",
    "position": null,
    "original_position": 37,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'd add parens here to make the order of operations more explicit to a reader\r\n`(asn >> (8 * i)) & 0xFF`",
    "created_at": "2019-12-11T19:27:50Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356790248",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356790248"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356790248"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356790248/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 490,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356811171",
    "pull_request_review_id": 330813034,
    "id": 356811171,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NjgxMTE3MQ==",
    "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+#include <crypto/common.h>\n+\n+namespace {\n+\n+uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, uint8_t minval, const std::vector<uint8_t> &bit_sizes)\n+{\n+    uint32_t val = minval;\n+    bool bit;\n+    for (std::vector<uint8_t>::const_iterator bit_sizes_it = bit_sizes.begin();\n+        bit_sizes_it != bit_sizes.end(); ++bit_sizes_it) {\n+        if (bit_sizes_it + 1 != bit_sizes.end()) {\n+            bit = *bitpos;\n+            bitpos++;\n+        } else {\n+            bit = 0;\n+        }\n+        if (bit) {\n+            val += (1 << *bit_sizes_it);\n+        } else {\n+            for (int b = 0; b < *bit_sizes_it; b++) {\n+                bit = *bitpos;\n+                bitpos++;\n+                val += bit << (*bit_sizes_it - 1 - b);\n+            }\n+            return val;\n+        }\n+    }\n+    return -1;\n+}\n+\n+const std::vector<uint8_t> TYPE_BIT_SIZES{0, 0, 1};\n+uint32_t DecodeType(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 0, TYPE_BIT_SIZES);\n+}\n+\n+const std::vector<uint8_t> ASN_BIT_SIZES{15, 16, 17, 18, 19, 20, 21, 22, 23, 24};\n+uint32_t DecodeASN(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 1, ASN_BIT_SIZES);\n+}\n+\n+\n+const std::vector<uint8_t> MATCH_BIT_SIZES{1, 2, 3, 4, 5, 6, 7, 8};\n+uint32_t DecodeMatch(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 2, MATCH_BIT_SIZES);\n+}\n+\n+\n+const std::vector<uint8_t> JUMP_BIT_SIZES{5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30};\n+uint32_t DecodeJump(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 17, JUMP_BIT_SIZES);\n+}\n+\n+}\n+\n+uint32_t Interpret(const std::vector<bool> &asmap, const std::vector<bool> &ip)\n+{\n+    std::vector<bool>::const_iterator pos = asmap.begin();\n+    uint8_t bits = ip.size();\n+    uint8_t default_asn = 0;\n+    uint32_t opcode, jump, match, matchlen;\n+    while (1) {",
    "path": "src/util/asmap.cpp",
    "position": 71,
    "original_position": 71,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "That makes sense. I guess you'd need to exploit an integer overflow.",
    "created_at": "2019-12-11T20:13:26Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356811171",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356811171"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356811171"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356811171/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 71,
    "original_line": 71,
    "side": "RIGHT",
    "in_reply_to_id": 356779224
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356832913",
    "pull_request_review_id": 330841850,
    "id": 356832913,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NjgzMjkxMw==",
    "diff_hunk": "@@ -1807,6 +1814,21 @@ bool AppInitMain(NodeContext& node)\n         return false;\n     }\n \n+    // set asmap if supplied\n+    if (gArgs.IsArgSet(\"-asmap\")) {\n+        const fs::path asmap_path = GetDataDir() / gArgs.GetArg(\"-asmap\", DEFAULT_ASMAP_FILENAME);\n+        std::vector<bool> asmap = CAddrMan::DecodeAsmap(asmap_path);\n+        if (asmap.size() == 0) {\n+            InitError(strprintf(_(\"Could not parse specified asmap: '%s'\").translated, asmap_path));",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 38,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Further to https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356739537, would suggest here `\"Could not find or parse specified asmap: '%s'\"`.\r\n\r\nRationale: the most frequent cause is likely to be an incorrect path or filename, not an unparseable file, and this error message will be output in both cases.",
    "created_at": "2019-12-11T21:05:04Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356832913",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356832913"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356832913"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356832913/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1822,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356839948",
    "pull_request_review_id": 330850237,
    "id": 356839948,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NjgzOTk0OA==",
    "diff_hunk": "@@ -1807,6 +1814,21 @@ bool AppInitMain(NodeContext& node)\n         return false;\n     }\n \n+    // set asmap if supplied\n+    if (gArgs.IsArgSet(\"-asmap\")) {\n+        const fs::path asmap_path = GetDataDir() / gArgs.GetArg(\"-asmap\", DEFAULT_ASMAP_FILENAME);",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This appears to be a bug. Passing `-asmap` with no file specified returns:\r\n`Error: Could not parse specified asmap: '\"/home/jon/.bitcoin\"'`\r\n\r\nIt seems it should error by looking for the default file defined in [line 104](https://github.com/bitcoin/bitcoin/pull/16702/files#diff-c865a8939105e6350a50af02766291b7R104) above:\r\n`Error: Could not parse specified asmap: '\"/home/jon/.bitcoin/ip_asn.map\"'`\r\n",
    "created_at": "2019-12-11T21:20:22Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356839948",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356839948"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356839948"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356839948/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1819,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356884878",
    "pull_request_review_id": 330905261,
    "id": 356884878,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Njg4NDg3OA==",
    "diff_hunk": "@@ -1807,6 +1814,21 @@ bool AppInitMain(NodeContext& node)\n         return false;\n     }\n \n+    // set asmap if supplied\n+    if (gArgs.IsArgSet(\"-asmap\")) {\n+        const fs::path asmap_path = GetDataDir() / gArgs.GetArg(\"-asmap\", DEFAULT_ASMAP_FILENAME);",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think what you want here is:\r\n```diff\r\n-        const fs::path asmap_path = GetDataDir() / gArgs.GetArg(\"-asmap\", DEFAULT_ASMAP_FILENAME);\r\n+        std::string asmap_file = gArgs.GetArg(\"-asmap\", \"\");\r\n+        if (asmap_file.empty()) {\r\n+            asmap_file = DEFAULT_ASMAP_FILENAME;\r\n+        }\r\n+        const fs::path asmap_path = GetDataDir() / asmap_file;\r\n```\r\nThis provides the behavior of defaulting to `DEFAULT_ASMAP_FILENAME` if the user passes `-asmap` without a filename.",
    "created_at": "2019-12-11T23:10:57Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356884878",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356884878"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356884878"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356884878/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1819,
    "side": "RIGHT",
    "in_reply_to_id": 356839948
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356885944",
    "pull_request_review_id": 330906541,
    "id": 356885944,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Njg4NTk0NA==",
    "diff_hunk": "@@ -1807,6 +1814,21 @@ bool AppInitMain(NodeContext& node)\n         return false;\n     }\n \n+    // set asmap if supplied\n+    if (gArgs.IsArgSet(\"-asmap\")) {\n+        const fs::path asmap_path = GetDataDir() / gArgs.GetArg(\"-asmap\", DEFAULT_ASMAP_FILENAME);",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Weird. You're handling a special case when somebody passes -asmap=\"\".\r\nWhat if somebody passes -asmap=\" \" or asmap=\"/\"? These are conditions, which are equally possible in users stupidity. If a user don't want asmap, they ignore the flag.\r\nI don't think protecting against a specific case of empty string is reasonable. Other opinions?",
    "created_at": "2019-12-11T23:14:24Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356885944",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356885944"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356885944"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356885944/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1819,
    "side": "RIGHT",
    "in_reply_to_id": 356839948
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356886932",
    "pull_request_review_id": 330907717,
    "id": 356886932,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Njg4NjkzMg==",
    "diff_hunk": "@@ -268,6 +275,46 @@ class CAddrMan\n     void SetServices_(const CService &addr, ServiceFlags nServices) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n public:\n+    // Compressed IP->ASN mapping, loaded from a file when a node starts.\n+    // Should be always empty if no file was provided.\n+    // This mapping is then used for bucketing nodes in Addrman.\n+    //\n+    // If asmap is provided, nodes will be bucketed by\n+    // AS they belong to, in order to make impossible for a node\n+    // to connect to several nodes hosted in a single AS.\n+    // This is done in response to Erebus attack, but also to generally\n+    // diversify the connections every node creates,\n+    // especially useful when a large fraction of nodes\n+    // operate under a couple of cloud providers.\n+    //\n+    // If a new asmap was provided, the exsiting records\n+    // would be re-bucketed accordingly.\n+    std::vector<bool> m_asmap;\n+\n+    static std::vector<bool> DecodeAsmap(fs::path path)\n+    {\n+        std::vector<bool> bits;\n+        FILE *filestr = fsbridge::fopen(path, \"rb\");\n+        CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n+        if (file.IsNull()) {\n+            LogPrintf(\"Failed to open asmap file from disk.\\n\");\n+            return bits;\n+        }\n+        fseek(filestr, 0, SEEK_END);\n+        int length = ftell(filestr);\n+        LogPrintf(\"Opened asmap file (%d bytes) from disk.\\n\", length);",
    "path": "src/addrman.h",
    "position": null,
    "original_position": 77,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Suggest to provide feedback on which filename was opened:\r\n```diff\r\n-        LogPrintf(\"Opened asmap file (%d bytes) from disk.\\n\", length);\r\n+        LogPrintf(\"Opened asmap file %s (%d bytes) from disk.\\n\", path, length);\r\n```\r\nTested examples of output:\r\n```\r\nOpened asmap file \"/home/jon/.bitcoin/ip_asn.map\" (932999 bytes) from disk.\r\nOpened asmap file \"/home/jon/.bitcoin/../projects/bitcoin/asmap/demo.map\" (932999 bytes) from disk.\r\n```",
    "created_at": "2019-12-11T23:17:40Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356886932",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356886932"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356886932"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/356886932/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 305,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357139904",
    "pull_request_review_id": 331222888,
    "id": 357139904,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzEzOTkwNA==",
    "diff_hunk": "@@ -1807,6 +1814,21 @@ bool AppInitMain(NodeContext& node)\n         return false;\n     }\n \n+    // set asmap if supplied\n+    if (gArgs.IsArgSet(\"-asmap\")) {\n+        const fs::path asmap_path = GetDataDir() / gArgs.GetArg(\"-asmap\", DEFAULT_ASMAP_FILENAME);",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If I understand the intended interface in this PR:\r\n\r\n1) `bitcoind`: use /16 bucketing\r\n2) `bitcoind -asmap`: use default asmap file in the datadir\r\n3) `bitcoind -asmap=<path-to-file>`: use specifed asmap\r\n\r\nMy suggestion handles case 2.\r\n\r\nI could be confused, but I don't see in what case `DEFAULT_ASMAP_FILENAME` would be used otherwise. AFAICT, behind the `if (gArgs.IsArgSet(\"-asmap\"))` conditional, `DEFAULT_ASMAP_FILENAME` in `gArgs.GetArg(\"-asmap\", DEFAULT_ASMAP_FILENAME)` will never be called.\r\n\r\n\r\n",
    "created_at": "2019-12-12T13:20:10Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r357139904",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357139904"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r357139904"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357139904/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1819,
    "side": "RIGHT",
    "in_reply_to_id": 356839948
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358009483",
    "pull_request_review_id": 332290599,
    "id": 358009483,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODAwOTQ4Mw==",
    "diff_hunk": "@@ -1807,6 +1814,21 @@ bool AppInitMain(NodeContext& node)\n         return false;\n     }\n \n+    // set asmap if supplied\n+    if (gArgs.IsArgSet(\"-asmap\")) {\n+        const fs::path asmap_path = GetDataDir() / gArgs.GetArg(\"-asmap\", DEFAULT_ASMAP_FILENAME);",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Edit: tested with different scenarios and @jonatack s code works as described. It loosely follows the same pattern as `-prune` which uses similar behavior of the three cases, so I would say it is consistent as well.\r\n\r\nWith current code starting `bitcoind -asmap` (with no default file present):\r\n```\r\n  2019-12-15T21:40:36Z Opened asmap file (864 bytes) from disk.\r\n  2019-12-15T21:40:36Z\r\n\r\n  ************************\r\n  EXCEPTION: NSt3__18ios_base7failureE\r\n  CAutoFile::read: fread failed: unspecified iostream_category error bitcoin in AppInit()\r\n\r\n  ************************\r\n  EXCEPTION: NSt3__18ios_base7failureE\r\n  CAutoFile::read: fread failed: unspecified iostream_category error bitcoin in AppInit()\r\n```\r\n\r\nWith change:\r\n```\r\n2019-12-15T21:59:13Z Failed to open asmap file from disk.\r\n2019-12-15T21:59:13Z Error: Could not parse specified asmap: '\"/path/to/testnet3/ip_asn.map\"'\r\nError: Could not parse specified asmap: '\"/path/to/testnet3/ip_asn.map\"'\r\n```",
    "created_at": "2019-12-15T22:04:08Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r358009483",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358009483"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r358009483"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358009483/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1819,
    "side": "RIGHT",
    "in_reply_to_id": 356839948
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358011994",
    "pull_request_review_id": 332292941,
    "id": 358011994,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODAxMTk5NA==",
    "diff_hunk": "@@ -1807,6 +1814,21 @@ bool AppInitMain(NodeContext& node)\n         return false;\n     }\n \n+    // set asmap if supplied\n+    if (gArgs.IsArgSet(\"-asmap\")) {\n+        const fs::path asmap_path = GetDataDir() / gArgs.GetArg(\"-asmap\", DEFAULT_ASMAP_FILENAME);",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@fjahr that version would ignore any user-specified file, e.g. case 3.",
    "created_at": "2019-12-15T22:42:26Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r358011994",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358011994"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r358011994"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358011994/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1819,
    "side": "RIGHT",
    "in_reply_to_id": 356839948
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358012079",
    "pull_request_review_id": 332293036,
    "id": 358012079,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODAxMjA3OQ==",
    "diff_hunk": "@@ -1807,6 +1814,21 @@ bool AppInitMain(NodeContext& node)\n         return false;\n     }\n \n+    // set asmap if supplied\n+    if (gArgs.IsArgSet(\"-asmap\")) {\n+        const fs::path asmap_path = GetDataDir() / gArgs.GetArg(\"-asmap\", DEFAULT_ASMAP_FILENAME);",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@jonatack yeah, I am just revising my answer as I am doing more testing, commented prematurely",
    "created_at": "2019-12-15T22:43:40Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r358012079",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358012079"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r358012079"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358012079/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1819,
    "side": "RIGHT",
    "in_reply_to_id": 356839948
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359493452",
    "pull_request_review_id": 334165742,
    "id": 359493452,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTQ5MzQ1Mg==",
    "diff_hunk": "@@ -525,6 +526,7 @@ libbitcoin_util_a_SOURCES = \\\n   util/time.cpp \\\n   util/url.cpp \\\n   util/validation.cpp \\\n+  util/asmap.cpp \\",
    "path": "src/Makefile.am",
    "position": null,
    "original_position": 12,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It was already messed up before me... But alright, will put my file in a proper place.",
    "created_at": "2019-12-18T18:12:24Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r359493452",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359493452"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r359493452"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359493452/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 529,
    "side": "RIGHT",
    "in_reply_to_id": 356722432
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359517964",
    "pull_request_review_id": 334197209,
    "id": 359517964,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTUxNzk2NA==",
    "diff_hunk": "@@ -1807,6 +1814,21 @@ bool AppInitMain(NodeContext& node)\n         return false;\n     }\n \n+    // set asmap if supplied\n+    if (gArgs.IsArgSet(\"-asmap\")) {\n+        const fs::path asmap_path = GetDataDir() / gArgs.GetArg(\"-asmap\", DEFAULT_ASMAP_FILENAME);",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 35,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I didn't think about `-asmap` call without a parameter as \"use existing\". But yeah, perhaps it makes sense. Especially since both of you share that intuition. Will apply your suggested change.",
    "created_at": "2019-12-18T19:06:43Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r359517964",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359517964"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r359517964"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359517964/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1819,
    "side": "RIGHT",
    "in_reply_to_id": 356839948
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359531853",
    "pull_request_review_id": 334215198,
    "id": 359531853,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTUzMTg1Mw==",
    "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+#include <crypto/common.h>\n+\n+namespace {\n+\n+uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, uint8_t minval, const std::vector<uint8_t> &bit_sizes)\n+{\n+    uint32_t val = minval;\n+    bool bit;\n+    for (std::vector<uint8_t>::const_iterator bit_sizes_it = bit_sizes.begin();\n+        bit_sizes_it != bit_sizes.end(); ++bit_sizes_it) {\n+        if (bit_sizes_it + 1 != bit_sizes.end()) {\n+            bit = *bitpos;\n+            bitpos++;\n+        } else {\n+            bit = 0;\n+        }\n+        if (bit) {\n+            val += (1 << *bit_sizes_it);\n+        } else {\n+            for (int b = 0; b < *bit_sizes_it; b++) {\n+                bit = *bitpos;\n+                bitpos++;\n+                val += bit << (*bit_sizes_it - 1 - b);\n+            }\n+            return val;\n+        }\n+    }\n+    return -1;",
    "path": "src/util/asmap.cpp",
    "position": 34,
    "original_position": 34,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm thinking this should probably be ``assert(0)`` \u2014\u00a0the file is corrupted\r\n@sipa ?",
    "created_at": "2019-12-18T19:37:48Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r359531853",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359531853"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r359531853"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359531853/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 34,
    "original_line": 34,
    "side": "RIGHT",
    "in_reply_to_id": 356784516
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359536948",
    "pull_request_review_id": 334221935,
    "id": 359536948,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTUzNjk0OA==",
    "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+#include <crypto/common.h>\n+\n+namespace {\n+\n+uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, uint8_t minval, const std::vector<uint8_t> &bit_sizes)\n+{\n+    uint32_t val = minval;\n+    bool bit;\n+    for (std::vector<uint8_t>::const_iterator bit_sizes_it = bit_sizes.begin();\n+        bit_sizes_it != bit_sizes.end(); ++bit_sizes_it) {\n+        if (bit_sizes_it + 1 != bit_sizes.end()) {\n+            bit = *bitpos;\n+            bitpos++;\n+        } else {\n+            bit = 0;\n+        }\n+        if (bit) {\n+            val += (1 << *bit_sizes_it);\n+        } else {\n+            for (int b = 0; b < *bit_sizes_it; b++) {\n+                bit = *bitpos;\n+                bitpos++;\n+                val += bit << (*bit_sizes_it - 1 - b);\n+            }\n+            return val;\n+        }\n+    }\n+    return -1;",
    "path": "src/util/asmap.cpp",
    "position": 34,
    "original_position": 34,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Your opinion in other util related issues would be also useful.",
    "created_at": "2019-12-18T19:49:45Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r359536948",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359536948"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r359536948"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359536948/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 34,
    "original_line": 34,
    "side": "RIGHT",
    "in_reply_to_id": 356784516
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361219517",
    "pull_request_review_id": 336266777,
    "id": 361219517,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTIxOTUxNw==",
    "diff_hunk": "@@ -1807,6 +1814,25 @@ bool AppInitMain(NodeContext& node)\n         return false;\n     }\n \n+    // Read asmap file if configured\n+    if (gArgs.IsArgSet(\"-asmap\")) {\n+        std::string asmap_file = gArgs.GetArg(\"-asmap\", \"\");\n+        if (asmap_file.empty()) {\n+            asmap_file = DEFAULT_ASMAP_FILENAME;\n+        }\n+        const fs::path asmap_path = GetDataDir() / asmap_file;",
    "path": "src/init.cpp",
    "position": 39,
    "original_position": 39,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "ca7916a3c3024c7af2b3df1069ab1a4f9cee2ca6",
    "user": {
      "login": "pinheadmz",
      "id": 2084648,
      "node_id": "MDQ6VXNlcjIwODQ2NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinheadmz",
      "html_url": "https://github.com/pinheadmz",
      "followers_url": "https://api.github.com/users/pinheadmz/followers",
      "following_url": "https://api.github.com/users/pinheadmz/following{/other_user}",
      "gists_url": "https://api.github.com/users/pinheadmz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
      "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
      "repos_url": "https://api.github.com/users/pinheadmz/repos",
      "events_url": "https://api.github.com/users/pinheadmz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This implies that the asmap file will always be in the default data directory. Should it allow for absolute paths as well? For example, I ended up with this error on my first naive run of this branch:\r\n\r\n```\r\n$ bitcoind -testnet -asmap=/Users/matthewzipkin/Desktop/work/asmap/demo.map\r\n...\r\nError: Could not find or parse specified asmap:\r\n'\"/Users/matthewzipkin/Library/Application Support/Bitcoin/testnet3/Users/matthewzipkin/Desktop/work/asmap/demo.map\"'\r\n```\r\n\r\n\r\n",
    "created_at": "2019-12-24T20:02:18Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361219517",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361219517"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361219517"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361219517/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1823,
    "original_line": 1823,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361221499",
    "pull_request_review_id": 336268759,
    "id": 361221499,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTIyMTQ5OQ==",
    "diff_hunk": "@@ -1807,6 +1814,25 @@ bool AppInitMain(NodeContext& node)\n         return false;\n     }\n \n+    // Read asmap file if configured\n+    if (gArgs.IsArgSet(\"-asmap\")) {\n+        std::string asmap_file = gArgs.GetArg(\"-asmap\", \"\");\n+        if (asmap_file.empty()) {\n+            asmap_file = DEFAULT_ASMAP_FILENAME;\n+        }\n+        const fs::path asmap_path = GetDataDir() / asmap_file;",
    "path": "src/init.cpp",
    "position": 39,
    "original_position": 39,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "ca7916a3c3024c7af2b3df1069ab1a4f9cee2ca6",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "At this point I'm not even sure what should be the right behaviour here. summoning @jonatack.",
    "created_at": "2019-12-24T20:27:41Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361221499",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361221499"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361221499"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361221499/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1823,
    "original_line": 1823,
    "side": "RIGHT",
    "in_reply_to_id": 361219517
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361300447",
    "pull_request_review_id": 336351305,
    "id": 361300447,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTMwMDQ0Nw==",
    "diff_hunk": "@@ -1807,6 +1814,25 @@ bool AppInitMain(NodeContext& node)\n         return false;\n     }\n \n+    // Read asmap file if configured\n+    if (gArgs.IsArgSet(\"-asmap\")) {\n+        std::string asmap_file = gArgs.GetArg(\"-asmap\", \"\");\n+        if (asmap_file.empty()) {\n+            asmap_file = DEFAULT_ASMAP_FILENAME;\n+        }\n+        const fs::path asmap_path = GetDataDir() / asmap_file;",
    "path": "src/init.cpp",
    "position": 39,
    "original_position": 39,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "ca7916a3c3024c7af2b3df1069ab1a4f9cee2ca6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@pinheadmz @naumenkogs Yes, the PR as authored specifies a relative path and I tested it as such:\r\n```\r\ngArgs.AddArg(\"-asmap=<file>\", \"Specify asn mapping, relative to the -datadir path\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\r\n```\r\nI agree allowing for absolute paths would be handy. Will perhaps propose a pair of commits to do this and add tests for expected behavior as per https://github.com/bitcoin/bitcoin/pull/16702#discussion_r357139904 for relative and absolute paths, that can be pulled in or proposed separately, per @naumenkogs' preference, so he doesn't have to bother with it.",
    "created_at": "2019-12-25T11:11:16Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361300447",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361300447"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361300447"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361300447/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1823,
    "original_line": 1823,
    "side": "RIGHT",
    "in_reply_to_id": 361219517
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361302621",
    "pull_request_review_id": 336353654,
    "id": 361302621,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTMwMjYyMQ==",
    "diff_hunk": "@@ -82,7 +82,7 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"    \\\"id\\\": n,                   (numeric) Peer index\\n\"\n             \"    \\\"addr\\\":\\\"host:port\\\",      (string) The IP address and port of the peer\\n\"\n             \"    \\\"addrbind\\\":\\\"ip:port\\\",    (string) Bind address of the connection to the peer\\n\"\n-            \"    \\\"addrlocal\\\":\\\"ip:port\\\",   (string) Local address as reported by the peer\\n\"",
    "path": "src/rpc/net.cpp",
    "position": 3,
    "original_position": 4,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "1619fe188b278b82e9e147ee2de69abc4642c510",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Was this line inadvertently removed? `addrlocal` is still present in the output, line 152 `obj.pushKV(\"addrlocal\", stats.addrLocal)`)",
    "created_at": "2019-12-25T11:35:10Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361302621",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361302621"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361302621"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361302621/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 85,
    "original_line": 85,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361307953",
    "pull_request_review_id": 336353654,
    "id": 361307953,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTMwNzk1Mw==",
    "diff_hunk": "@@ -426,6 +432,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify p2p connection timeout in seconds. This option determines the amount of time a peer may be inactive before the connection to it is dropped. (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-torpassword=<pass>\", \"Tor control port password (default: empty)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-asmap=<file>\", \"Specify asn mapping, relative to the -datadir path\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "1619fe188b278b82e9e147ee2de69abc4642c510",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "suggestion to aid in grepping the bitcoind help for \"peers\" or \"connections\":\r\n```diff\r\n-    \"Specify asn mapping...\"\r\n+    \"Specify asn mapping for connections to peers...\"\r\n```\r\n",
    "created_at": "2019-12-25T12:34:25Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361307953",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361307953"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361307953"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361307953/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 435,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361311141",
    "pull_request_review_id": 336362597,
    "id": 361311141,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTMxMTE0MQ==",
    "diff_hunk": "@@ -82,7 +82,7 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"    \\\"id\\\": n,                   (numeric) Peer index\\n\"\n             \"    \\\"addr\\\":\\\"host:port\\\",      (string) The IP address and port of the peer\\n\"\n             \"    \\\"addrbind\\\":\\\"ip:port\\\",    (string) Bind address of the connection to the peer\\n\"\n-            \"    \\\"addrlocal\\\":\\\"ip:port\\\",   (string) Local address as reported by the peer\\n\"",
    "path": "src/rpc/net.cpp",
    "position": 3,
    "original_position": 4,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "1619fe188b278b82e9e147ee2de69abc4642c510",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "this was an accident, thanks!",
    "created_at": "2019-12-25T13:11:05Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361311141",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361311141"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361311141"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361311141/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 85,
    "original_line": 85,
    "side": "LEFT",
    "in_reply_to_id": 361302621
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361324834",
    "pull_request_review_id": 336376130,
    "id": 361324834,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTMyNDgzNA==",
    "diff_hunk": "@@ -7,20 +7,27 @@\n \n #include <hash.h>\n #include <serialize.h>\n+#include <logging.h>\n \n-int CAddrInfo::GetTriedBucket(const uint256& nKey) const\n+int CAddrInfo::GetTriedBucket(const uint256& nKey, const std::vector<bool> &asmap) const\n {\n     uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetKey()).GetCheapHash();\n-    uint64_t hash2 = (CHashWriter(SER_GETHASH, 0) << nKey << GetGroup() << (hash1 % ADDRMAN_TRIED_BUCKETS_PER_GROUP)).GetCheapHash();\n-    return hash2 % ADDRMAN_TRIED_BUCKET_COUNT;\n+    uint64_t hash2 = (CHashWriter(SER_GETHASH, 0) << nKey << GetGroup(asmap) << (hash1 % ADDRMAN_TRIED_BUCKETS_PER_GROUP)).GetCheapHash();\n+    int tried_bucket = hash2 % ADDRMAN_TRIED_BUCKET_COUNT;\n+    uint32_t critical_as = GetCriticalAS(asmap);\n+    LogPrint(BCLog::NET, \"IP %s with critical AS%i belongs to tried bucket %i.\\n\", ToStringIP(), critical_as, tried_bucket);\n+    return tried_bucket;\n }\n \n-int CAddrInfo::GetNewBucket(const uint256& nKey, const CNetAddr& src) const\n+int CAddrInfo::GetNewBucket(const uint256& nKey, const CNetAddr& src, const std::vector<bool> &asmap) const\n {\n-    std::vector<unsigned char> vchSourceGroupKey = src.GetGroup();\n-    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetGroup() << vchSourceGroupKey).GetCheapHash();\n+    std::vector<unsigned char> vchSourceGroupKey = src.GetGroup(asmap);\n+    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetGroup(asmap) << vchSourceGroupKey).GetCheapHash();\n     uint64_t hash2 = (CHashWriter(SER_GETHASH, 0) << nKey << vchSourceGroupKey << (hash1 % ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP)).GetCheapHash();\n-    return hash2 % ADDRMAN_NEW_BUCKET_COUNT;\n+    int new_bucket = hash2 % ADDRMAN_NEW_BUCKET_COUNT;\n+    uint32_t critical_as = GetCriticalAS(asmap);\n+    LogPrint(BCLog::NET, \"IP %s with critical AS%i belongs to new bucket %i.\\n\", ToStringIP(), critical_as, new_bucket);",
    "path": "src/addrman.cpp",
    "position": null,
    "original_position": 30,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "cc0a921b3e286a9c8f72be8e30a3711e0e808ca6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Okay I'm less happy with the last tiny logging commit [1619fe1](https://github.com/bitcoin/bitcoin/commit/1619fe188b278b82e9e147ee2de69abc4642c510) 2 reasons:\r\n\r\nAgreed, refactoring this post-merge as a follow-up may be worthwhile.\r\n \r\n> This is because you're not specifying `-debug=net`.\r\n\r\nThanks! I overlooked the `LogPrint(BCLog::NET)`.\r\n\r\nnit: perhaps add a space between \"AS\" and the value in GetTriedBucket and GetNewBucket\r\n```\r\n2019-12-25T15:48:12Z IP 87.166.109.213 with critical AS3320 belongs to new bucket 238.\r\n2019-12-25T15:48:12Z IP 84.44.193.228 with critical AS8422 belongs to new bucket 238.\r\n2019-12-25T15:48:12Z IP 64.225.33.255 with critical AS200 belongs to new bucket 219.\r\n2019-12-25T15:48:12Z IP 186.52.76.207 with critical AS6057 belongs to new bucket 301.\r\n2019-12-25T15:48:12Z IP 186.4.77.132 with critical AS27964 belongs to new bucket 361.\r\n2019-12-25T15:48:12Z IP 109.195.227.7 with critical AS57378 belongs to new bucket 808.\r\n```",
    "created_at": "2019-12-25T16:10:39Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361324834",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361324834"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361324834"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361324834/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 29,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361668704",
    "pull_request_review_id": 336776660,
    "id": 361668704,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTY2ODcwNA==",
    "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+#include <crypto/common.h>\n+\n+namespace {\n+\n+uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, uint8_t minval, const std::vector<uint8_t> &bit_sizes)\n+{\n+    uint32_t val = minval;\n+    bool bit;\n+    for (std::vector<uint8_t>::const_iterator bit_sizes_it = bit_sizes.begin();\n+        bit_sizes_it != bit_sizes.end(); ++bit_sizes_it) {\n+        if (bit_sizes_it + 1 != bit_sizes.end()) {\n+            bit = *bitpos;\n+            bitpos++;\n+        } else {\n+            bit = 0;\n+        }\n+        if (bit) {\n+            val += (1 << *bit_sizes_it);\n+        } else {\n+            for (int b = 0; b < *bit_sizes_it; b++) {\n+                bit = *bitpos;\n+                bitpos++;\n+                val += bit << (*bit_sizes_it - 1 - b);\n+            }\n+            return val;\n+        }\n+    }\n+    return -1;",
    "path": "src/util/asmap.cpp",
    "position": 34,
    "original_position": 34,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Feel free to tag me in other util related issues, happy to give a look and add my two cents.",
    "created_at": "2019-12-27T13:57:06Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361668704",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361668704"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361668704"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361668704/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 34,
    "original_line": 34,
    "side": "RIGHT",
    "in_reply_to_id": 356784516
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361972806",
    "pull_request_review_id": 337088493,
    "id": 361972806,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTk3MjgwNg==",
    "diff_hunk": "@@ -1807,6 +1814,25 @@ bool AppInitMain(NodeContext& node)\n         return false;\n     }\n \n+    // Read asmap file if configured\n+    if (gArgs.IsArgSet(\"-asmap\")) {\n+        std::string asmap_file = gArgs.GetArg(\"-asmap\", \"\");\n+        if (asmap_file.empty()) {\n+            asmap_file = DEFAULT_ASMAP_FILENAME;\n+        }\n+        const fs::path asmap_path = GetDataDir() / asmap_file;",
    "path": "src/init.cpp",
    "position": 39,
    "original_position": 39,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "ca7916a3c3024c7af2b3df1069ab1a4f9cee2ca6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done in #17812 ",
    "created_at": "2019-12-30T12:19:39Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361972806",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361972806"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361972806"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361972806/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1823,
    "original_line": 1823,
    "side": "RIGHT",
    "in_reply_to_id": 361219517
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366587100",
    "pull_request_review_id": 342857422,
    "id": 366587100,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4NzEwMA==",
    "diff_hunk": "@@ -1807,6 +1814,25 @@ bool AppInitMain(NodeContext& node)\n         return false;\n     }\n \n+    // Read asmap file if configured\n+    if (gArgs.IsArgSet(\"-asmap\")) {\n+        std::string asmap_file = gArgs.GetArg(\"-asmap\", \"\");\n+        if (asmap_file.empty()) {\n+            asmap_file = DEFAULT_ASMAP_FILENAME;\n+        }\n+        const fs::path asmap_path = GetDataDir() / asmap_file;",
    "path": "src/init.cpp",
    "position": 39,
    "original_position": 39,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "ca7916a3c3024c7af2b3df1069ab1a4f9cee2ca6",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Agree this should accept an absolute path. We should either pull @jonatack's change in to this PR or follow up shortly after this merges.",
    "created_at": "2020-01-14T21:41:23Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r366587100",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366587100"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r366587100"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366587100/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1823,
    "original_line": 1823,
    "side": "RIGHT",
    "in_reply_to_id": 361219517
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366843099",
    "pull_request_review_id": 343175787,
    "id": 366843099,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg0MzA5OQ==",
    "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+#include <crypto/common.h>\n+\n+namespace {\n+\n+uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, uint8_t minval, const std::vector<uint8_t> &bit_sizes)\n+{\n+    uint32_t val = minval;\n+    bool bit;\n+    for (std::vector<uint8_t>::const_iterator bit_sizes_it = bit_sizes.begin();\n+        bit_sizes_it != bit_sizes.end(); ++bit_sizes_it) {\n+        if (bit_sizes_it + 1 != bit_sizes.end()) {\n+            bit = *bitpos;\n+            bitpos++;\n+        } else {\n+            bit = 0;\n+        }\n+        if (bit) {\n+            val += (1 << *bit_sizes_it);\n+        } else {\n+            for (int b = 0; b < *bit_sizes_it; b++) {\n+                bit = *bitpos;\n+                bitpos++;\n+                val += bit << (*bit_sizes_it - 1 - b);\n+            }\n+            return val;\n+        }\n+    }\n+    return -1;",
    "path": "src/util/asmap.cpp",
    "position": 34,
    "original_position": 34,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I do not think it is even possible to reach this. The\r\n```c++\r\nif (bit_sizes_it + 1 != bit_sizes.end()) {\r\n    \u2026\r\n} else {\r\n    bit = 0;\r\n}\r\nif (bit) {\r\n    \u2026\r\n} else {\r\n    \u2026\r\n    return val;\r\n}\r\n```\r\nguarantees that the one-to-last bit size will always return a value.\r\n(so yes, replacing with `assert(0)` would make sense)",
    "created_at": "2020-01-15T12:12:01Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r366843099",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366843099"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r366843099"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366843099/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 34,
    "original_line": 34,
    "side": "RIGHT",
    "in_reply_to_id": 356784516
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366914380",
    "pull_request_review_id": 343269908,
    "id": 366914380,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkxNDM4MA==",
    "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+#include <crypto/common.h>\n+\n+namespace {\n+\n+uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, uint8_t minval, const std::vector<uint8_t> &bit_sizes)\n+{\n+    uint32_t val = minval;\n+    bool bit;\n+    for (std::vector<uint8_t>::const_iterator bit_sizes_it = bit_sizes.begin();\n+        bit_sizes_it != bit_sizes.end(); ++bit_sizes_it) {\n+        if (bit_sizes_it + 1 != bit_sizes.end()) {\n+            bit = *bitpos;\n+            bitpos++;\n+        } else {\n+            bit = 0;\n+        }\n+        if (bit) {\n+            val += (1 << *bit_sizes_it);\n+        } else {\n+            for (int b = 0; b < *bit_sizes_it; b++) {\n+                bit = *bitpos;\n+                bitpos++;\n+                val += bit << (*bit_sizes_it - 1 - b);\n+            }\n+            return val;\n+        }\n+    }\n+    return -1;",
    "path": "src/util/asmap.cpp",
    "position": 34,
    "original_position": 34,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`assert(0)` seems safer than `-1`.\r\n\r\nI agree that it is unlikely this branch will be hit.  If `bit_sizes` has a length of zero it short circuits the for loop and would hit that line however so far all the calls to `DecodeBits` hardcode a parameter with values that have length > 0.",
    "created_at": "2020-01-15T14:46:07Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r366914380",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366914380"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r366914380"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366914380/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 34,
    "original_line": 34,
    "side": "RIGHT",
    "in_reply_to_id": 356784516
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366924340",
    "pull_request_review_id": 343283557,
    "id": 366924340,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkyNDM0MA==",
    "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+#include <crypto/common.h>\n+\n+namespace {\n+\n+uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, uint8_t minval, const std::vector<uint8_t> &bit_sizes)\n+{\n+    uint32_t val = minval;\n+    bool bit;\n+    for (std::vector<uint8_t>::const_iterator bit_sizes_it = bit_sizes.begin();\n+        bit_sizes_it != bit_sizes.end(); ++bit_sizes_it) {\n+        if (bit_sizes_it + 1 != bit_sizes.end()) {\n+            bit = *bitpos;\n+            bitpos++;\n+        } else {\n+            bit = 0;\n+        }\n+        if (bit) {\n+            val += (1 << *bit_sizes_it);\n+        } else {\n+            for (int b = 0; b < *bit_sizes_it; b++) {\n+                bit = *bitpos;\n+                bitpos++;\n+                val += bit << (*bit_sizes_it - 1 - b);\n+            }\n+            return val;\n+        }\n+    }\n+    return -1;",
    "path": "src/util/asmap.cpp",
    "position": 34,
    "original_position": 34,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Or refactor the function, moving the second for loop outside of the first, so that the unreachable code is no longer there:\r\n```c++\r\nuint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, uint8_t minval, const std::vector<uint8_t> &bit_sizes)                                                        \r\n{\r\n    assert(bit_sizes.len() >= 1);\r\n    uint32_t val = minval;\r\n    bool bit;\r\n    std::vector<uint8_t>::const_iterator bit_sizes_it = bit_sizes.begin();\r\n    for (; (bit_sizes_it + 1) != bit_sizes.end(); ++bit_sizes_it) {\r\n        bit = *bitpos;\r\n        ++bitpos;\r\n        if (bit) {\r\n            val += (1 << *bit_sizes_it);\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    for (int b = 0; b < *bit_sizes_it; ++b) {\r\n        bit = *bitpos;\r\n        ++bitpos;\r\n        val += bit << (*bit_sizes_it - 1 - b);\r\n    }\r\n    return val;\r\n}\r\n```",
    "created_at": "2020-01-15T15:03:17Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r366924340",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366924340"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r366924340"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/366924340/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 34,
    "original_line": 34,
    "side": "RIGHT",
    "in_reply_to_id": 356784516
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367123754",
    "pull_request_review_id": 342857422,
    "id": 367123754,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMzc1NA==",
    "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+#include <crypto/common.h>\n+\n+namespace {\n+\n+uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, uint8_t minval, const std::vector<uint8_t> &bit_sizes)\n+{\n+    uint32_t val = minval;\n+    bool bit;\n+    for (std::vector<uint8_t>::const_iterator bit_sizes_it = bit_sizes.begin();\n+        bit_sizes_it != bit_sizes.end(); ++bit_sizes_it) {\n+        if (bit_sizes_it + 1 != bit_sizes.end()) {\n+            bit = *bitpos;\n+            bitpos++;\n+        } else {\n+            bit = 0;\n+        }\n+        if (bit) {\n+            val += (1 << *bit_sizes_it);\n+        } else {\n+            for (int b = 0; b < *bit_sizes_it; b++) {\n+                bit = *bitpos;\n+                bitpos++;\n+                val += bit << (*bit_sizes_it - 1 - b);\n+            }\n+            return val;\n+        }\n+    }\n+    return -1;\n+}\n+\n+const std::vector<uint8_t> TYPE_BIT_SIZES{0, 0, 1};\n+uint32_t DecodeType(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 0, TYPE_BIT_SIZES);\n+}\n+\n+const std::vector<uint8_t> ASN_BIT_SIZES{15, 16, 17, 18, 19, 20, 21, 22, 23, 24};\n+uint32_t DecodeASN(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 1, ASN_BIT_SIZES);\n+}\n+\n+\n+const std::vector<uint8_t> MATCH_BIT_SIZES{1, 2, 3, 4, 5, 6, 7, 8};\n+uint32_t DecodeMatch(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 2, MATCH_BIT_SIZES);\n+}\n+\n+\n+const std::vector<uint8_t> JUMP_BIT_SIZES{5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30};\n+uint32_t DecodeJump(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 17, JUMP_BIT_SIZES);\n+}\n+\n+}\n+\n+uint32_t Interpret(const std::vector<bool> &asmap, const std::vector<bool> &ip)\n+{\n+    std::vector<bool>::const_iterator pos = asmap.begin();\n+    uint8_t bits = ip.size();\n+    uint8_t default_asn = 0;\n+    uint32_t opcode, jump, match, matchlen;\n+    while (1) {\n+        assert(pos != asmap.end());\n+        opcode = DecodeType(pos);\n+        if (opcode == 0) {",
    "path": "src/util/asmap.cpp",
    "position": 74,
    "original_position": 74,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Agree with @EthanHeilman. I know we're trying to avoid nits but this seems like basic hygiene. ",
    "created_at": "2020-01-15T21:45:48Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367123754",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367123754"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367123754"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367123754/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 74,
    "original_line": 74,
    "side": "RIGHT",
    "in_reply_to_id": 356786391
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367128731",
    "pull_request_review_id": 342857422,
    "id": 367128731,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyODczMQ==",
    "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+#include <crypto/common.h>\n+\n+namespace {\n+\n+uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, uint8_t minval, const std::vector<uint8_t> &bit_sizes)\n+{\n+    uint32_t val = minval;\n+    bool bit;\n+    for (std::vector<uint8_t>::const_iterator bit_sizes_it = bit_sizes.begin();\n+        bit_sizes_it != bit_sizes.end(); ++bit_sizes_it) {\n+        if (bit_sizes_it + 1 != bit_sizes.end()) {\n+            bit = *bitpos;\n+            bitpos++;\n+        } else {\n+            bit = 0;\n+        }\n+        if (bit) {\n+            val += (1 << *bit_sizes_it);\n+        } else {\n+            for (int b = 0; b < *bit_sizes_it; b++) {\n+                bit = *bitpos;\n+                bitpos++;\n+                val += bit << (*bit_sizes_it - 1 - b);\n+            }\n+            return val;\n+        }\n+    }\n+    return -1;\n+}\n+\n+const std::vector<uint8_t> TYPE_BIT_SIZES{0, 0, 1};\n+uint32_t DecodeType(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 0, TYPE_BIT_SIZES);\n+}\n+\n+const std::vector<uint8_t> ASN_BIT_SIZES{15, 16, 17, 18, 19, 20, 21, 22, 23, 24};\n+uint32_t DecodeASN(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 1, ASN_BIT_SIZES);\n+}\n+\n+\n+const std::vector<uint8_t> MATCH_BIT_SIZES{1, 2, 3, 4, 5, 6, 7, 8};\n+uint32_t DecodeMatch(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 2, MATCH_BIT_SIZES);\n+}\n+\n+\n+const std::vector<uint8_t> JUMP_BIT_SIZES{5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30};\n+uint32_t DecodeJump(std::vector<bool>::const_iterator& bitpos)\n+{\n+    return DecodeBits(bitpos, 17, JUMP_BIT_SIZES);\n+}\n+\n+}\n+\n+uint32_t Interpret(const std::vector<bool> &asmap, const std::vector<bool> &ip)\n+{\n+    std::vector<bool>::const_iterator pos = asmap.begin();\n+    uint8_t bits = ip.size();\n+    uint8_t default_asn = 0;\n+    uint32_t opcode, jump, match, matchlen;\n+    while (1) {\n+        assert(pos != asmap.end());\n+        opcode = DecodeType(pos);\n+        if (opcode == 0) {\n+            return DecodeASN(pos);\n+        } else if (opcode == 1) {\n+            jump = DecodeJump(pos);\n+            if (ip[ip.size() - bits]) {\n+                pos += jump;\n+            }\n+            bits--;\n+        } else if (opcode == 2) {\n+            match = DecodeMatch(pos);\n+            matchlen = CountBits(match) - 1;\n+            for (uint32_t bit = 0; bit < matchlen; bit++) {\n+                if ((ip[ip.size() - bits]) != ((match >> (matchlen - 1 - bit)) & 1)) {\n+                    return default_asn;\n+                }\n+                bits--;\n+            }\n+        } else if (opcode == 3) {\n+            default_asn = DecodeASN(pos);\n+        } else {\n+            assert(0);",
    "path": "src/util/asmap.cpp",
    "position": 94,
    "original_position": 94,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm sort of inclined to say we should log really loudly and then fall back to IP-based bucketing since crashing based on asmap failure seems pretty drastic - especially since this is called not just at startup but throughout runtime. If we crash, a problem with this code could then potentially cause widespread outage.",
    "created_at": "2020-01-15T21:57:28Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367128731",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367128731"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367128731"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367128731/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 94,
    "original_line": 94,
    "side": "RIGHT",
    "in_reply_to_id": 356785710
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367525343",
    "pull_request_review_id": 342857422,
    "id": 367525343,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyNTM0Mw==",
    "diff_hunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <assert.h>\n+#include <crypto/common.h>\n+\n+namespace {\n+\n+uint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, uint8_t minval, const std::vector<uint8_t> &bit_sizes)\n+{\n+    uint32_t val = minval;\n+    bool bit;\n+    for (std::vector<uint8_t>::const_iterator bit_sizes_it = bit_sizes.begin();\n+        bit_sizes_it != bit_sizes.end(); ++bit_sizes_it) {\n+        if (bit_sizes_it + 1 != bit_sizes.end()) {\n+            bit = *bitpos;\n+            bitpos++;\n+        } else {\n+            bit = 0;\n+        }\n+        if (bit) {\n+            val += (1 << *bit_sizes_it);\n+        } else {\n+            for (int b = 0; b < *bit_sizes_it; b++) {\n+                bit = *bitpos;\n+                bitpos++;\n+                val += bit << (*bit_sizes_it - 1 - b);\n+            }\n+            return val;\n+        }\n+    }\n+    return -1;",
    "path": "src/util/asmap.cpp",
    "position": 34,
    "original_position": 34,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "4128c9c8124e4627cc45f6df2b7017a89296fc5a",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This code is a great candidate for unittesting - I'm inclined to say that you should use @laanwj's code here but it's somewhat difficult to verify that it will behave in exactly the same way sipa's original code does. Happy to add some tests in a follow-up PR.",
    "created_at": "2020-01-16T16:38:03Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367525343",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367525343"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367525343"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367525343/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 34,
    "original_line": 34,
    "side": "RIGHT",
    "in_reply_to_id": 356784516
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367588410",
    "pull_request_review_id": 342857422,
    "id": 367588410,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4ODQxMA==",
    "diff_hunk": "@@ -5,20 +5,27 @@\n #include <test/util/setup_common.h>\n #include <string>\n #include <boost/test/unit_test.hpp>\n+#include <util/asmap.h>\n+#include <test/data/asmap.raw.h>\n \n #include <hash.h>\n #include <netbase.h>\n #include <random.h>\n \n class CAddrManTest : public CAddrMan\n {\n+private:\n+    bool deterministic;",
    "path": "src/test/addrman_tests.cpp",
    "position": 14,
    "original_position": 14,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "ec45646de9e62b3d42c85716bfeb06d8f2b507dc",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: convention would say `m_deterministic = ...`, then you don't have to do awkward naming to avoid shadowing below",
    "created_at": "2020-01-16T18:48:40Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367588410",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367588410"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367588410"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367588410/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 18,
    "original_line": 18,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367669408",
    "pull_request_review_id": 342857422,
    "id": 367669408,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY2OTQwOA==",
    "diff_hunk": "@@ -520,14 +567,226 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n         CAddrInfo infoj = CAddrInfo(\n             CAddress(ResolveService(\"250.1.1.1\"), NODE_NONE),\n             ResolveIP(\"250.\" + std::to_string(p) + \".1.1\"));\n-        int bucket = infoj.GetNewBucket(nKey1);\n+        int bucket = infoj.GetNewBucket(nKey1, asmap);\n         buckets.insert(bucket);\n     }\n-    // Test: IP addresses in the different source groups should map to more\n+    // Test: IP addresses in the different source groups should map to MORE\n     //  than 64 buckets.\n     BOOST_CHECK(buckets.size() > 64);\n }\n \n+// The following three test cases use asmap.raw\n+// We use an artificial minimal mock mapping\n+// 250.0.0.0/8 AS1000\n+// 101.1.0.0/16 AS1\n+// 101.2.0.0/16 AS2\n+// 101.3.0.0/16 AS3\n+// 101.4.0.0/16 AS4\n+// 101.5.0.0/16 AS5\n+// 101.6.0.0/16 AS6\n+// 101.7.0.0/16 AS7\n+// 101.8.0.0/16 AS8\n+BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)\n+{\n+    CAddrManTest addrman;\n+\n+    CAddress addr1 = CAddress(ResolveService(\"250.1.1.1\", 8333), NODE_NONE);\n+    CAddress addr2 = CAddress(ResolveService(\"250.1.1.1\", 9999), NODE_NONE);\n+\n+    CNetAddr source1 = ResolveIP(\"250.1.1.1\");\n+\n+\n+    CAddrInfo info1 = CAddrInfo(addr1, source1);\n+\n+    uint256 nKey1 = (uint256)(CHashWriter(SER_GETHASH, 0) << 1).GetHash();\n+    uint256 nKey2 = (uint256)(CHashWriter(SER_GETHASH, 0) << 2).GetHash();\n+\n+    std::vector<bool> asmap = FromBytes(asmap_raw, sizeof(asmap_raw) * 8);\n+\n+    BOOST_CHECK_EQUAL(info1.GetTriedBucket(nKey1, asmap), 236);\n+\n+    // Test: Make sure key actually randomizes bucket placement. A fail on\n+    //  this test could be a security issue.\n+    BOOST_CHECK(info1.GetTriedBucket(nKey1, asmap) != info1.GetTriedBucket(nKey2, asmap));\n+\n+    // Test: Two addresses with same IP but different ports can map to\n+    //  different buckets because they have different keys.\n+    CAddrInfo info2 = CAddrInfo(addr2, source1);\n+\n+    BOOST_CHECK(info1.GetKey() != info2.GetKey());\n+    BOOST_CHECK(info1.GetTriedBucket(nKey1, asmap) != info2.GetTriedBucket(nKey1, asmap));\n+\n+    std::set<int> buckets;\n+    for (int j = 0; j < 255; j++) {\n+        CAddrInfo infoj = CAddrInfo(\n+            CAddress(ResolveService(\"101.\" + std::to_string(j) + \".1.1\"), NODE_NONE),\n+            ResolveIP(\"101.\" + std::to_string(j) + \".1.1\"));\n+        int bucket = infoj.GetTriedBucket(nKey1, asmap);\n+        buckets.insert(bucket);\n+    }\n+    // Test: IP addresses in the different /16 prefix MAY map to more than\n+    // 8 buckets.\n+    BOOST_CHECK(buckets.size() > 8);\n+\n+    buckets.clear();\n+    for (int j = 0; j < 255; j++) {\n+        CAddrInfo infoj = CAddrInfo(\n+            CAddress(ResolveService(\"250.\" + std::to_string(j) + \".1.1\"), NODE_NONE),\n+            ResolveIP(\"250.\" + std::to_string(j) + \".1.1\"));\n+        int bucket = infoj.GetTriedBucket(nKey1, asmap);\n+        buckets.insert(bucket);\n+    }\n+    // Test: IP addresses in the different /16 prefix MAY NOT map to more than\n+    // 8 buckets.\n+    BOOST_CHECK(buckets.size() == 8);\n+}\n+\n+BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)",
    "path": "src/test/addrman_tests.cpp",
    "position": 280,
    "original_position": 280,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "ec45646de9e62b3d42c85716bfeb06d8f2b507dc",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "A lot of commonalities between this test case and the last. I know this is nitty stuff but you could save a lot of code (and thus review effort) by consolidating it into a function that takes a function parameter that returns `info.Get{Tried,New}Bucket(...)`. Again not a blocker, just would be easier review without having to read through something that's kind of the same but not.\r\n\r\nAnd these tests are basically duplicates of the existing tests with a null asmap (`caddrinfo.*_legacy`), so it seems like there's a lot of code duplication that could be removed here. Might make a good follow-up PR I guess.",
    "created_at": "2020-01-16T21:52:24Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367669408",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367669408"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367669408"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367669408/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 644,
    "original_line": 644,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367673186",
    "pull_request_review_id": 342857422,
    "id": 367673186,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY3MzE4Ng==",
    "diff_hunk": "@@ -520,14 +567,226 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n         CAddrInfo infoj = CAddrInfo(\n             CAddress(ResolveService(\"250.1.1.1\"), NODE_NONE),\n             ResolveIP(\"250.\" + std::to_string(p) + \".1.1\"));\n-        int bucket = infoj.GetNewBucket(nKey1);\n+        int bucket = infoj.GetNewBucket(nKey1, asmap);\n         buckets.insert(bucket);\n     }\n-    // Test: IP addresses in the different source groups should map to more\n+    // Test: IP addresses in the different source groups should map to MORE\n     //  than 64 buckets.\n     BOOST_CHECK(buckets.size() > 64);\n }\n \n+// The following three test cases use asmap.raw\n+// We use an artificial minimal mock mapping\n+// 250.0.0.0/8 AS1000\n+// 101.1.0.0/16 AS1\n+// 101.2.0.0/16 AS2\n+// 101.3.0.0/16 AS3\n+// 101.4.0.0/16 AS4\n+// 101.5.0.0/16 AS5\n+// 101.6.0.0/16 AS6\n+// 101.7.0.0/16 AS7\n+// 101.8.0.0/16 AS8\n+BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)\n+{\n+    CAddrManTest addrman;\n+\n+    CAddress addr1 = CAddress(ResolveService(\"250.1.1.1\", 8333), NODE_NONE);\n+    CAddress addr2 = CAddress(ResolveService(\"250.1.1.1\", 9999), NODE_NONE);\n+\n+    CNetAddr source1 = ResolveIP(\"250.1.1.1\");\n+\n+\n+    CAddrInfo info1 = CAddrInfo(addr1, source1);\n+\n+    uint256 nKey1 = (uint256)(CHashWriter(SER_GETHASH, 0) << 1).GetHash();\n+    uint256 nKey2 = (uint256)(CHashWriter(SER_GETHASH, 0) << 2).GetHash();\n+\n+    std::vector<bool> asmap = FromBytes(asmap_raw, sizeof(asmap_raw) * 8);\n+\n+    BOOST_CHECK_EQUAL(info1.GetTriedBucket(nKey1, asmap), 236);\n+\n+    // Test: Make sure key actually randomizes bucket placement. A fail on\n+    //  this test could be a security issue.\n+    BOOST_CHECK(info1.GetTriedBucket(nKey1, asmap) != info1.GetTriedBucket(nKey2, asmap));\n+\n+    // Test: Two addresses with same IP but different ports can map to\n+    //  different buckets because they have different keys.\n+    CAddrInfo info2 = CAddrInfo(addr2, source1);\n+\n+    BOOST_CHECK(info1.GetKey() != info2.GetKey());\n+    BOOST_CHECK(info1.GetTriedBucket(nKey1, asmap) != info2.GetTriedBucket(nKey1, asmap));\n+\n+    std::set<int> buckets;\n+    for (int j = 0; j < 255; j++) {\n+        CAddrInfo infoj = CAddrInfo(\n+            CAddress(ResolveService(\"101.\" + std::to_string(j) + \".1.1\"), NODE_NONE),\n+            ResolveIP(\"101.\" + std::to_string(j) + \".1.1\"));\n+        int bucket = infoj.GetTriedBucket(nKey1, asmap);\n+        buckets.insert(bucket);\n+    }\n+    // Test: IP addresses in the different /16 prefix MAY map to more than\n+    // 8 buckets.\n+    BOOST_CHECK(buckets.size() > 8);\n+\n+    buckets.clear();\n+    for (int j = 0; j < 255; j++) {\n+        CAddrInfo infoj = CAddrInfo(\n+            CAddress(ResolveService(\"250.\" + std::to_string(j) + \".1.1\"), NODE_NONE),\n+            ResolveIP(\"250.\" + std::to_string(j) + \".1.1\"));\n+        int bucket = infoj.GetTriedBucket(nKey1, asmap);\n+        buckets.insert(bucket);\n+    }\n+    // Test: IP addresses in the different /16 prefix MAY NOT map to more than\n+    // 8 buckets.\n+    BOOST_CHECK(buckets.size() == 8);\n+}\n+\n+BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n+{\n+    CAddrManTest addrman;\n+\n+    CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8333), NODE_NONE);\n+    CAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", 9999), NODE_NONE);\n+\n+    CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n+\n+    CAddrInfo info1 = CAddrInfo(addr1, source1);\n+\n+    uint256 nKey1 = (uint256)(CHashWriter(SER_GETHASH, 0) << 1).GetHash();\n+    uint256 nKey2 = (uint256)(CHashWriter(SER_GETHASH, 0) << 2).GetHash();\n+\n+    std::vector<bool> asmap = FromBytes(asmap_raw, sizeof(asmap_raw) * 8);\n+\n+    // Test: Make sure the buckets are what we expect\n+    BOOST_CHECK_EQUAL(info1.GetNewBucket(nKey1, asmap), 795);\n+    BOOST_CHECK_EQUAL(info1.GetNewBucket(nKey1, source1, asmap), 795);\n+\n+    // Test: Make sure key actually randomizes bucket placement. A fail on\n+    //  this test could be a security issue.\n+    BOOST_CHECK(info1.GetNewBucket(nKey1, asmap) != info1.GetNewBucket(nKey2, asmap));\n+\n+    // Test: Ports should not affect bucket placement in the addr\n+    CAddrInfo info2 = CAddrInfo(addr2, source1);\n+    BOOST_CHECK(info1.GetKey() != info2.GetKey());\n+    BOOST_CHECK_EQUAL(info1.GetNewBucket(nKey1, asmap), info2.GetNewBucket(nKey1, asmap));\n+\n+    std::set<int> buckets;\n+    for (int i = 0; i < 255; i++) {\n+        CAddrInfo infoi = CAddrInfo(\n+            CAddress(ResolveService(\"250.1.1.\" + std::to_string(i)), NODE_NONE),\n+            ResolveIP(\"250.1.1.\" + std::to_string(i)));\n+        int bucket = infoi.GetNewBucket(nKey1, asmap);\n+        buckets.insert(bucket);\n+    }\n+    // Test: IP addresses in the same /16 prefix\n+    // usually map to the same bucket.\n+    BOOST_CHECK_EQUAL(buckets.size(), 1U);\n+\n+    buckets.clear();\n+    for (int j = 0; j < 4 * 255; j++) {\n+        CAddrInfo infoj = CAddrInfo(CAddress(\n+                                        ResolveService(\n+                                            std::to_string(250 + (j / 255)) + \".\" + std::to_string(j % 256) + \".1.1\"), NODE_NONE),\n+            ResolveIP(\"251.4.1.1\"));\n+        int bucket = infoj.GetNewBucket(nKey1, asmap);\n+        buckets.insert(bucket);\n+    }\n+    // Test: IP addresses in the same source /16 prefix should not map to more\n+    // than 64 buckets.\n+    BOOST_CHECK(buckets.size() <= 64);\n+\n+    buckets.clear();\n+    for (int p = 0; p < 255; p++) {\n+        CAddrInfo infoj = CAddrInfo(\n+            CAddress(ResolveService(\"250.1.1.1\"), NODE_NONE),\n+            ResolveIP(\"101.\" + std::to_string(p) + \".1.1\"));\n+        int bucket = infoj.GetNewBucket(nKey1, asmap);\n+        buckets.insert(bucket);\n+    }\n+    // Test: IP addresses in the different source /16 prefixes usually map to MORE\n+    // than 1 bucket.\n+    BOOST_CHECK(buckets.size() > 1);\n+\n+    buckets.clear();\n+    for (int p = 0; p < 255; p++) {\n+        CAddrInfo infoj = CAddrInfo(\n+            CAddress(ResolveService(\"250.1.1.1\"), NODE_NONE),\n+            ResolveIP(\"250.\" + std::to_string(p) + \".1.1\"));\n+        int bucket = infoj.GetNewBucket(nKey1, asmap);\n+        buckets.insert(bucket);\n+    }\n+    // Test: IP addresses in the different source /16 prefixes sometimes map to NO MORE\n+    // than 1 bucket.\n+    BOOST_CHECK(buckets.size() == 1);\n+\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_serialization)",
    "path": "src/test/addrman_tests.cpp",
    "position": 360,
    "original_position": 360,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "ec45646de9e62b3d42c85716bfeb06d8f2b507dc",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks for testing this!",
    "created_at": "2020-01-16T22:01:45Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367673186",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367673186"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367673186"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367673186/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 724,
    "original_line": 724,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367682495",
    "pull_request_review_id": 342857422,
    "id": 367682495,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY4MjQ5NQ==",
    "diff_hunk": "@@ -285,23 +285,23 @@ BOOST_AUTO_TEST_CASE(subnet_test)\n \n BOOST_AUTO_TEST_CASE(netbase_getgroup)\n {\n-\n-    BOOST_CHECK(ResolveIP(\"127.0.0.1\").GetGroup() == std::vector<unsigned char>({0})); // Local -> !Routable()\n-    BOOST_CHECK(ResolveIP(\"257.0.0.1\").GetGroup() == std::vector<unsigned char>({0})); // !Valid -> !Routable()\n-    BOOST_CHECK(ResolveIP(\"10.0.0.1\").GetGroup() == std::vector<unsigned char>({0})); // RFC1918 -> !Routable()\n-    BOOST_CHECK(ResolveIP(\"169.254.1.1\").GetGroup() == std::vector<unsigned char>({0})); // RFC3927 -> !Routable()\n-    BOOST_CHECK(ResolveIP(\"1.2.3.4\").GetGroup() == std::vector<unsigned char>({(unsigned char)NET_IPV4, 1, 2})); // IPv4\n-    BOOST_CHECK(ResolveIP(\"::FFFF:0:102:304\").GetGroup() == std::vector<unsigned char>({(unsigned char)NET_IPV4, 1, 2})); // RFC6145\n-    BOOST_CHECK(ResolveIP(\"64:FF9B::102:304\").GetGroup() == std::vector<unsigned char>({(unsigned char)NET_IPV4, 1, 2})); // RFC6052\n-    BOOST_CHECK(ResolveIP(\"2002:102:304:9999:9999:9999:9999:9999\").GetGroup() == std::vector<unsigned char>({(unsigned char)NET_IPV4, 1, 2})); // RFC3964\n-    BOOST_CHECK(ResolveIP(\"2001:0:9999:9999:9999:9999:FEFD:FCFB\").GetGroup() == std::vector<unsigned char>({(unsigned char)NET_IPV4, 1, 2})); // RFC4380\n-    BOOST_CHECK(ResolveIP(\"FD87:D87E:EB43:edb1:8e4:3588:e546:35ca\").GetGroup() == std::vector<unsigned char>({(unsigned char)NET_ONION, 239})); // Tor\n-    BOOST_CHECK(ResolveIP(\"2001:470:abcd:9999:9999:9999:9999:9999\").GetGroup() == std::vector<unsigned char>({(unsigned char)NET_IPV6, 32, 1, 4, 112, 175})); //he.net\n-    BOOST_CHECK(ResolveIP(\"2001:2001:9999:9999:9999:9999:9999:9999\").GetGroup() == std::vector<unsigned char>({(unsigned char)NET_IPV6, 32, 1, 32, 1})); //IPv6\n+    std::vector<bool> asmap; // use /16\n+    BOOST_CHECK(ResolveIP(\"127.0.0.1\").GetGroup(asmap) == std::vector<unsigned char>({0})); // Local -> !Routable()\n+    BOOST_CHECK(ResolveIP(\"257.0.0.1\").GetGroup(asmap) == std::vector<unsigned char>({0})); // !Valid -> !Routable()\n+    BOOST_CHECK(ResolveIP(\"10.0.0.1\").GetGroup(asmap) == std::vector<unsigned char>({0})); // RFC1918 -> !Routable()\n+    BOOST_CHECK(ResolveIP(\"169.254.1.1\").GetGroup(asmap) == std::vector<unsigned char>({0})); // RFC3927 -> !Routable()\n+    BOOST_CHECK(ResolveIP(\"1.2.3.4\").GetGroup(asmap) == std::vector<unsigned char>({(unsigned char)NET_IPV4, 1, 2})); // IPv4\n+    BOOST_CHECK(ResolveIP(\"::FFFF:0:102:304\").GetGroup(asmap) == std::vector<unsigned char>({(unsigned char)NET_IPV4, 1, 2})); // RFC6145\n+    BOOST_CHECK(ResolveIP(\"64:FF9B::102:304\").GetGroup(asmap) == std::vector<unsigned char>({(unsigned char)NET_IPV4, 1, 2})); // RFC6052\n+    BOOST_CHECK(ResolveIP(\"2002:102:304:9999:9999:9999:9999:9999\").GetGroup(asmap) == std::vector<unsigned char>({(unsigned char)NET_IPV4, 1, 2})); // RFC3964\n+    BOOST_CHECK(ResolveIP(\"2001:0:9999:9999:9999:9999:FEFD:FCFB\").GetGroup(asmap) == std::vector<unsigned char>({(unsigned char)NET_IPV4, 1, 2})); // RFC4380\n+    BOOST_CHECK(ResolveIP(\"FD87:D87E:EB43:edb1:8e4:3588:e546:35ca\").GetGroup(asmap) == std::vector<unsigned char>({(unsigned char)NET_ONION, 239})); // Tor\n+    BOOST_CHECK(ResolveIP(\"2001:470:abcd:9999:9999:9999:9999:9999\").GetGroup(asmap) == std::vector<unsigned char>({(unsigned char)NET_IPV6, 32, 1, 4, 112, 175})); //he.net\n+    BOOST_CHECK(ResolveIP(\"2001:2001:9999:9999:9999:9999:9999:9999\").GetGroup(asmap) == std::vector<unsigned char>({(unsigned char)NET_IPV6, 32, 1, 32, 1})); //IPv6",
    "path": "src/test/netbase_tests.cpp",
    "position": 29,
    "original_position": 29,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "ec45646de9e62b3d42c85716bfeb06d8f2b507dc",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If you wanted better (albeit incidental) coverage of the ASN parsing stuff, you could use asmap.raw to verify that IPs are mapped properly. Can be done in a follow-up.",
    "created_at": "2020-01-16T22:26:33Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367682495",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367682495"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367682495"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367682495/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 300,
    "original_line": 300,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367682958",
    "pull_request_review_id": 342857422,
    "id": 367682958,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY4Mjk1OA==",
    "diff_hunk": "@@ -493,12 +493,13 @@ void CNode::SetAddrLocal(const CService& addrLocalIn) {\n \n #undef X\n #define X(name) stats.name = name\n-void CNode::copyStats(CNodeStats &stats)\n+void CNode::copyStats(CNodeStats &stats, std::vector<bool> m_asmap)",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "3d639e78721dc3b55a90a60744a4773ab32d6108",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should this be taking `std::vector<bool>&` instead? That's potentially a pretty large vector to be copying.",
    "created_at": "2020-01-16T22:27:55Z",
    "updated_at": "2020-01-23T19:23:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367682958",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367682958"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367682958"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367682958/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 496,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371240923",
    "pull_request_review_id": 348662818,
    "id": 371240923,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI0MDkyMw==",
    "diff_hunk": "@@ -83,6 +83,7 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"    \\\"addr\\\":\\\"host:port\\\",      (string) The IP address and port of the peer\\n\"\n             \"    \\\"addrbind\\\":\\\"ip:port\\\",    (string) Bind address of the connection to the peer\\n\"\n             \"    \\\"addrlocal\\\":\\\"ip:port\\\",   (string) Local address as reported by the peer\\n\"\n+            \"    \\\"mapped_as\\\":\\\"mapped_as\\\", (string) The AS in the BGP route to the peer used for diversifying peer selection\\n\"",
    "path": "src/rpc/net.cpp",
    "position": 4,
    "original_position": 4,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The `mapped_as` value is currently returned as an integer.",
    "created_at": "2020-01-27T13:33:15Z",
    "updated_at": "2020-01-27T13:41:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r371240923",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371240923"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r371240923"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371240923/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 86,
    "original_line": 86,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371245383",
    "pull_request_review_id": 348668895,
    "id": 371245383,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI0NTM4Mw==",
    "diff_hunk": "@@ -83,6 +83,7 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"    \\\"addr\\\":\\\"host:port\\\",      (string) The IP address and port of the peer\\n\"\n             \"    \\\"addrbind\\\":\\\"ip:port\\\",    (string) Bind address of the connection to the peer\\n\"\n             \"    \\\"addrlocal\\\":\\\"ip:port\\\",   (string) Local address as reported by the peer\\n\"\n+            \"    \\\"mapped_as\\\":\\\"mapped_as\\\", (string) The AS in the BGP route to the peer used for diversifying peer selection\\n\"",
    "path": "src/rpc/net.cpp",
    "position": 4,
    "original_position": 4,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Will address this in #17812.",
    "created_at": "2020-01-27T13:42:55Z",
    "updated_at": "2020-01-27T13:42:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r371245383",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371245383"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r371245383"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371245383/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 86,
    "original_line": 86,
    "side": "RIGHT",
    "in_reply_to_id": 371240923
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372364364",
    "pull_request_review_id": 350082321,
    "id": 372364364,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2NDM2NA==",
    "diff_hunk": "@@ -83,6 +83,7 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"    \\\"addr\\\":\\\"host:port\\\",      (string) The IP address and port of the peer\\n\"\n             \"    \\\"addrbind\\\":\\\"ip:port\\\",    (string) Bind address of the connection to the peer\\n\"\n             \"    \\\"addrlocal\\\":\\\"ip:port\\\",   (string) Local address as reported by the peer\\n\"\n+            \"    \\\"mapped_as\\\":\\\"mapped_as\\\", (string) The AS in the BGP route to the peer used for diversifying peer selection\\n\"",
    "path": "src/rpc/net.cpp",
    "position": 4,
    "original_position": 4,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Doesn't returning it as an integer make sense, as it is an integer? So I think we should change the documentation.",
    "created_at": "2020-01-29T12:52:50Z",
    "updated_at": "2020-01-29T12:52:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r372364364",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372364364"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r372364364"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372364364/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 86,
    "original_line": 86,
    "side": "RIGHT",
    "in_reply_to_id": 371240923
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372370081",
    "pull_request_review_id": 350089704,
    "id": 372370081,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3MDA4MQ==",
    "diff_hunk": "@@ -83,6 +83,7 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"    \\\"addr\\\":\\\"host:port\\\",      (string) The IP address and port of the peer\\n\"\n             \"    \\\"addrbind\\\":\\\"ip:port\\\",    (string) Bind address of the connection to the peer\\n\"\n             \"    \\\"addrlocal\\\":\\\"ip:port\\\",   (string) Local address as reported by the peer\\n\"\n+            \"    \\\"mapped_as\\\":\\\"mapped_as\\\", (string) The AS in the BGP route to the peer used for diversifying peer selection\\n\"",
    "path": "src/rpc/net.cpp",
    "position": 4,
    "original_position": 4,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Doesn't returning it as an integer make sense, as it is an integer? So I think we should change the documentation.\r\n\r\nThanks! Agreed.",
    "created_at": "2020-01-29T13:05:37Z",
    "updated_at": "2020-01-29T13:05:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r372370081",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372370081"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r372370081"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372370081/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 86,
    "original_line": 86,
    "side": "RIGHT",
    "in_reply_to_id": 371240923
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/515608294",
    "pull_request_review_id": 521214179,
    "id": 515608294,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYwODI5NA==",
    "diff_hunk": "@@ -417,20 +440,48 @@ class CAddrMan\n         }\n         nTried -= nLost;\n \n-        // Deserialize positions in the new table (if possible).\n+        // Store positions in the new table buckets to apply later (if possible).\n+        std::map<int, int> entryToBucket; // Represents which entry belonged to which bucket when serializing\n+\n         for (int bucket = 0; bucket < nUBuckets; bucket++) {\n             int nSize = 0;\n             s >> nSize;\n             for (int n = 0; n < nSize; n++) {\n                 int nIndex = 0;\n                 s >> nIndex;\n                 if (nIndex >= 0 && nIndex < nNew) {\n-                    CAddrInfo &info = mapInfo[nIndex];\n-                    int nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n-                    if (nVersion == 1 && nUBuckets == ADDRMAN_NEW_BUCKET_COUNT && vvNew[bucket][nUBucketPos] == -1 && info.nRefCount < ADDRMAN_NEW_BUCKETS_PER_ADDRESS) {\n-                        info.nRefCount++;\n-                        vvNew[bucket][nUBucketPos] = nIndex;\n-                    }\n+                    entryToBucket[nIndex] = bucket;\n+                }\n+            }\n+        }\n+\n+        uint256 supplied_asmap_version;\n+        if (m_asmap.size() != 0) {\n+            supplied_asmap_version = SerializeHash(m_asmap);\n+        }\n+        uint256 serialized_asmap_version;\n+        if (nVersion > 1) {\n+            s >> serialized_asmap_version;\n+        }\n+\n+        for (int n = 0; n < nNew; n++) {\n+            CAddrInfo &info = mapInfo[n];\n+            int bucket = entryToBucket[n];\n+            int nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n+            if (nVersion == 2 && nUBuckets == ADDRMAN_NEW_BUCKET_COUNT && vvNew[bucket][nUBucketPos] == -1 &&",
    "path": "src/addrman.h",
    "position": 173,
    "original_position": 173,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why is this `nVersion == 2` check required? This means that anyone upgrading to v0.20 will have a lot of their new table data lost, even if they're not using an asmap. Without this check, we'd still make sure not to place entries in the wrong new table because of the asmap version check.\r\n\r\nOn code readability/style, it'd make a lot more sense to extract this check to above the loop and comment it:\r\n\r\n```c++\r\n// New table positions can only be retained if the file is the right format and\r\n// was constructed with the same asmap.\r\nconst bool compatible_file = nUBuckets == ADDRMAN_NEW_BUCKET_COUNT && serialized_asmap_version == supplied_asmap_version\r\n```",
    "created_at": "2020-11-01T11:13:55Z",
    "updated_at": "2020-11-01T11:13:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r515608294",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/515608294"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r515608294"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/515608294/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 471,
    "original_line": 471,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/515633011",
    "pull_request_review_id": 521232771,
    "id": 515633011,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzMzAxMQ==",
    "diff_hunk": "@@ -417,20 +440,48 @@ class CAddrMan\n         }\n         nTried -= nLost;\n \n-        // Deserialize positions in the new table (if possible).\n+        // Store positions in the new table buckets to apply later (if possible).\n+        std::map<int, int> entryToBucket; // Represents which entry belonged to which bucket when serializing\n+\n         for (int bucket = 0; bucket < nUBuckets; bucket++) {\n             int nSize = 0;\n             s >> nSize;\n             for (int n = 0; n < nSize; n++) {\n                 int nIndex = 0;\n                 s >> nIndex;\n                 if (nIndex >= 0 && nIndex < nNew) {\n-                    CAddrInfo &info = mapInfo[nIndex];\n-                    int nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n-                    if (nVersion == 1 && nUBuckets == ADDRMAN_NEW_BUCKET_COUNT && vvNew[bucket][nUBucketPos] == -1 && info.nRefCount < ADDRMAN_NEW_BUCKETS_PER_ADDRESS) {\n-                        info.nRefCount++;\n-                        vvNew[bucket][nUBucketPos] = nIndex;\n-                    }\n+                    entryToBucket[nIndex] = bucket;\n+                }\n+            }\n+        }\n+\n+        uint256 supplied_asmap_version;\n+        if (m_asmap.size() != 0) {\n+            supplied_asmap_version = SerializeHash(m_asmap);\n+        }\n+        uint256 serialized_asmap_version;\n+        if (nVersion > 1) {\n+            s >> serialized_asmap_version;\n+        }\n+\n+        for (int n = 0; n < nNew; n++) {\n+            CAddrInfo &info = mapInfo[n];\n+            int bucket = entryToBucket[n];\n+            int nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n+            if (nVersion == 2 && nUBuckets == ADDRMAN_NEW_BUCKET_COUNT && vvNew[bucket][nUBucketPos] == -1 &&",
    "path": "src/addrman.h",
    "position": 173,
    "original_position": 173,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "More generally, what's the plan for updating the asmap? Presumably it's something that could change fairly frequently (i.e. at least as often as we release major versions of Bitcoin Core). If that's the case and the asmap is changed every major version, are we happy with the idea that people's new tables will lose data at every major upgrade?",
    "created_at": "2020-11-01T15:06:25Z",
    "updated_at": "2020-11-01T15:06:26Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r515633011",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/515633011"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r515633011"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/515633011/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 471,
    "original_line": 471,
    "side": "RIGHT",
    "in_reply_to_id": 515608294
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530338668",
    "pull_request_review_id": 538447789,
    "id": 530338668,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMzODY2OA==",
    "diff_hunk": "@@ -417,20 +440,48 @@ class CAddrMan\n         }\n         nTried -= nLost;\n \n-        // Deserialize positions in the new table (if possible).\n+        // Store positions in the new table buckets to apply later (if possible).\n+        std::map<int, int> entryToBucket; // Represents which entry belonged to which bucket when serializing\n+\n         for (int bucket = 0; bucket < nUBuckets; bucket++) {\n             int nSize = 0;\n             s >> nSize;\n             for (int n = 0; n < nSize; n++) {\n                 int nIndex = 0;\n                 s >> nIndex;\n                 if (nIndex >= 0 && nIndex < nNew) {\n-                    CAddrInfo &info = mapInfo[nIndex];\n-                    int nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n-                    if (nVersion == 1 && nUBuckets == ADDRMAN_NEW_BUCKET_COUNT && vvNew[bucket][nUBucketPos] == -1 && info.nRefCount < ADDRMAN_NEW_BUCKETS_PER_ADDRESS) {\n-                        info.nRefCount++;\n-                        vvNew[bucket][nUBucketPos] = nIndex;\n-                    }\n+                    entryToBucket[nIndex] = bucket;\n+                }\n+            }\n+        }\n+\n+        uint256 supplied_asmap_version;\n+        if (m_asmap.size() != 0) {\n+            supplied_asmap_version = SerializeHash(m_asmap);\n+        }\n+        uint256 serialized_asmap_version;\n+        if (nVersion > 1) {\n+            s >> serialized_asmap_version;\n+        }\n+\n+        for (int n = 0; n < nNew; n++) {\n+            CAddrInfo &info = mapInfo[n];\n+            int bucket = entryToBucket[n];\n+            int nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n+            if (nVersion == 2 && nUBuckets == ADDRMAN_NEW_BUCKET_COUNT && vvNew[bucket][nUBucketPos] == -1 &&",
    "path": "src/addrman.h",
    "position": 173,
    "original_position": 173,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": ">This means that anyone upgrading to v0.20 will have a lot of their new table data lost, even if they're not using an asmap. \r\n\r\nYou are right, I think this was a mistake. I was probably thinking about downgrading `nVersion` (say a file from 0.22 with `nVersion=3` now downgraded to 0.21), so the check should be `nVersion <= 2`.\r\nI agree with your comment suggestion, but why you separate those two other checks? It still makes sure that \"file is in the right format\".",
    "created_at": "2020-11-25T12:31:34Z",
    "updated_at": "2020-11-25T12:32:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r530338668",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530338668"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r530338668"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530338668/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 471,
    "original_line": 471,
    "side": "RIGHT",
    "in_reply_to_id": 515608294
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530342479",
    "pull_request_review_id": 538452508,
    "id": 530342479,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0MjQ3OQ==",
    "diff_hunk": "@@ -417,20 +440,48 @@ class CAddrMan\n         }\n         nTried -= nLost;\n \n-        // Deserialize positions in the new table (if possible).\n+        // Store positions in the new table buckets to apply later (if possible).\n+        std::map<int, int> entryToBucket; // Represents which entry belonged to which bucket when serializing\n+\n         for (int bucket = 0; bucket < nUBuckets; bucket++) {\n             int nSize = 0;\n             s >> nSize;\n             for (int n = 0; n < nSize; n++) {\n                 int nIndex = 0;\n                 s >> nIndex;\n                 if (nIndex >= 0 && nIndex < nNew) {\n-                    CAddrInfo &info = mapInfo[nIndex];\n-                    int nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n-                    if (nVersion == 1 && nUBuckets == ADDRMAN_NEW_BUCKET_COUNT && vvNew[bucket][nUBucketPos] == -1 && info.nRefCount < ADDRMAN_NEW_BUCKETS_PER_ADDRESS) {\n-                        info.nRefCount++;\n-                        vvNew[bucket][nUBucketPos] = nIndex;\n-                    }\n+                    entryToBucket[nIndex] = bucket;\n+                }\n+            }\n+        }\n+\n+        uint256 supplied_asmap_version;\n+        if (m_asmap.size() != 0) {\n+            supplied_asmap_version = SerializeHash(m_asmap);\n+        }\n+        uint256 serialized_asmap_version;\n+        if (nVersion > 1) {\n+            s >> serialized_asmap_version;\n+        }\n+\n+        for (int n = 0; n < nNew; n++) {\n+            CAddrInfo &info = mapInfo[n];\n+            int bucket = entryToBucket[n];\n+            int nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n+            if (nVersion == 2 && nUBuckets == ADDRMAN_NEW_BUCKET_COUNT && vvNew[bucket][nUBucketPos] == -1 &&",
    "path": "src/addrman.h",
    "position": 173,
    "original_position": 173,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": ">More generally, what's the plan for updating the asmap?\r\n\r\nTBD\r\n\r\n>If that's the case and the asmap is changed every major version, are we happy with the idea that people's new tables will lose data at every major upgrade?\r\n\r\nDepends on the answer to the previous question at least :)\r\nNote that what's lost is just the position of records in the table, and presumably a few of records from buckets with high collisions? So I wouldn't be *very* worried (in the context of my previous message as well).\r\nIt's not like we're loosing many ADDR records here.",
    "created_at": "2020-11-25T12:37:59Z",
    "updated_at": "2020-11-25T12:38:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r530342479",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530342479"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r530342479"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530342479/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 471,
    "original_line": 471,
    "side": "RIGHT",
    "in_reply_to_id": 515608294
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530398394",
    "pull_request_review_id": 538526203,
    "id": 530398394,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5ODM5NA==",
    "diff_hunk": "@@ -417,20 +440,48 @@ class CAddrMan\n         }\n         nTried -= nLost;\n \n-        // Deserialize positions in the new table (if possible).\n+        // Store positions in the new table buckets to apply later (if possible).\n+        std::map<int, int> entryToBucket; // Represents which entry belonged to which bucket when serializing\n+\n         for (int bucket = 0; bucket < nUBuckets; bucket++) {\n             int nSize = 0;\n             s >> nSize;\n             for (int n = 0; n < nSize; n++) {\n                 int nIndex = 0;\n                 s >> nIndex;\n                 if (nIndex >= 0 && nIndex < nNew) {\n-                    CAddrInfo &info = mapInfo[nIndex];\n-                    int nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n-                    if (nVersion == 1 && nUBuckets == ADDRMAN_NEW_BUCKET_COUNT && vvNew[bucket][nUBucketPos] == -1 && info.nRefCount < ADDRMAN_NEW_BUCKETS_PER_ADDRESS) {\n-                        info.nRefCount++;\n-                        vvNew[bucket][nUBucketPos] = nIndex;\n-                    }\n+                    entryToBucket[nIndex] = bucket;\n+                }\n+            }\n+        }\n+\n+        uint256 supplied_asmap_version;\n+        if (m_asmap.size() != 0) {\n+            supplied_asmap_version = SerializeHash(m_asmap);\n+        }\n+        uint256 serialized_asmap_version;\n+        if (nVersion > 1) {\n+            s >> serialized_asmap_version;\n+        }\n+\n+        for (int n = 0; n < nNew; n++) {\n+            CAddrInfo &info = mapInfo[n];\n+            int bucket = entryToBucket[n];\n+            int nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n+            if (nVersion == 2 && nUBuckets == ADDRMAN_NEW_BUCKET_COUNT && vvNew[bucket][nUBucketPos] == -1 &&",
    "path": "src/addrman.h",
    "position": 173,
    "original_position": 173,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> what's lost is just the position of records in the table, and presumably a few of records from buckets with high collisions\r\n\r\nA new address can appear in up to 8 different buckets if it's been gossipped to us from different peers. If it gets rebucketed during file load, it'll only be placed in 1 bucket (or 0, if there's a collision). That seems undesirable.",
    "created_at": "2020-11-25T14:06:36Z",
    "updated_at": "2020-11-25T14:06:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r530398394",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530398394"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r530398394"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530398394/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 471,
    "original_line": 471,
    "side": "RIGHT",
    "in_reply_to_id": 515608294
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530919261",
    "pull_request_review_id": 539176215,
    "id": 530919261,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkxOTI2MQ==",
    "diff_hunk": "@@ -417,20 +440,48 @@ class CAddrMan\n         }\n         nTried -= nLost;\n \n-        // Deserialize positions in the new table (if possible).\n+        // Store positions in the new table buckets to apply later (if possible).\n+        std::map<int, int> entryToBucket; // Represents which entry belonged to which bucket when serializing\n+\n         for (int bucket = 0; bucket < nUBuckets; bucket++) {\n             int nSize = 0;\n             s >> nSize;\n             for (int n = 0; n < nSize; n++) {\n                 int nIndex = 0;\n                 s >> nIndex;\n                 if (nIndex >= 0 && nIndex < nNew) {\n-                    CAddrInfo &info = mapInfo[nIndex];\n-                    int nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n-                    if (nVersion == 1 && nUBuckets == ADDRMAN_NEW_BUCKET_COUNT && vvNew[bucket][nUBucketPos] == -1 && info.nRefCount < ADDRMAN_NEW_BUCKETS_PER_ADDRESS) {\n-                        info.nRefCount++;\n-                        vvNew[bucket][nUBucketPos] = nIndex;\n-                    }\n+                    entryToBucket[nIndex] = bucket;\n+                }\n+            }\n+        }\n+\n+        uint256 supplied_asmap_version;\n+        if (m_asmap.size() != 0) {\n+            supplied_asmap_version = SerializeHash(m_asmap);\n+        }\n+        uint256 serialized_asmap_version;\n+        if (nVersion > 1) {\n+            s >> serialized_asmap_version;\n+        }\n+\n+        for (int n = 0; n < nNew; n++) {\n+            CAddrInfo &info = mapInfo[n];\n+            int bucket = entryToBucket[n];\n+            int nUBucketPos = info.GetBucketPosition(nKey, true, bucket);\n+            if (nVersion == 2 && nUBuckets == ADDRMAN_NEW_BUCKET_COUNT && vvNew[bucket][nUBucketPos] == -1 &&",
    "path": "src/addrman.h",
    "position": 173,
    "original_position": 173,
    "commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "original_commit_id": "3c1bc40205a3fcab606e70b0e3c13d68b2860e34",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You are right.",
    "created_at": "2020-11-26T10:16:26Z",
    "updated_at": "2020-11-26T10:16:26Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r530919261",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530919261"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16702#discussion_r530919261"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16702"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530919261/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 471,
    "original_line": 471,
    "side": "RIGHT",
    "in_reply_to_id": 515608294
  }
]