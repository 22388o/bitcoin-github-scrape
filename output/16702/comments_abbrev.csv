DrahtBot,2019-08-23 22:21:10,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17812](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17812.html) (config, test: asmap functional tests and fe",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524480139,524480139,
sipa,2019-08-24 00:15:14,"FWIW, the asmap generated from https://dev.maxmind.com/geoip/geoip2/geolite2/ is 988387 bytes in size.",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524497855,524497855,
sipa,2019-08-24 00:22:45,"Encoding the map as bool[] array in the source code will add to the executable 4 bytes per bit in the map, that's a bit excessive. You should probably encode it as a encode it as a uint8_t[] instead (with 8 bits per array element).",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524498652,524498652,
wiz,2019-08-24 05:39:04,"@sipa Would you mind providing the python script used to generate the asmap? I think Bitcoiners like @TheBlueMatt and myself who maintain their own BGP full table view of the Internet would like to generate their own asmap instead of trusting maxmind, or at least verify it.",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524522538,524522538,
practicalswift,2019-08-24 05:42:56,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524522713,524522713,
sipa,2019-08-24 09:06:20,"@wiz The script is here: https://gist.github.com/sipa/b90070570597b950f29a6297772a7636 though we need more tooling to convert from common dump formats,  sanity check, ... I'll publish some when they're a bit cleaned up and usable.\n",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524534484,524534484,
wiz,2019-08-24 11:27:30,"Thanks for the script, it helps a lot with my own implementation and I also wanted to point out a few potential attack vectors to circumvent the asmap protection:\n\n1) Private ASN ranges\n\nThere are several ASN ranges which can be used as originating ASNs without registration or verification and could be used to circumvent the asmap protection. For example I could announce one /24 from 65000",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524542883,524542883,
practicalswift,2019-08-24 15:52:04,"@wiz Very good points!\n\n> 1. Private ASN ranges\n\nBesides using private ASN ranges another obvious attack vector would be to make use of non-reserved but unused or unallocated AS-numbers as a faux downstream for a specific attacker controlled prefix:\n\nAssume that `AS54321` is a non-private but unused or unallocated ASN.\n\nAn attacker `AS666` with upstream transit provider `AS123` cou",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524561108,524561108,
wiz,2019-08-24 17:47:37,"Yeah, the AS map mitigation may be flawed. How about requiring everyone to also have a few Tor peers, presumably bypassing the network partition attack?",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524568966,524568966,
TheBlueMatt,2019-08-24 18:56:26,"Indeed. ASN mappings are *not* a foolproof solution, but they're better than just using /16s (after all, there are lots of unused /16s you could announce if you wanted to). Ultimately some monitoring and building up filtering lists over time as we observe malicious behavior may improve things, but, indeed, ensuring redundant connectivity is the only ultimate solution. Once #15759 lands, I'd really",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524573216,524573216,
TheBlueMatt,2019-08-24 19:06:33,"One thing we can play with after we build an initial table is to look at the paths, instead of looking only at the last ASN in the path. eg if, from many vantage points on the internet, a given IP block always passes from AS 1 to AS 2, we could consider it as a part of AS 1 (given it appears to only have one provider - AS 1). In order to avoid Western bias we'd need to do it across geographic regi",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-524573795,524573795,
luke-jr,2019-09-20 21:13:33,"Do we need to know the actual ASNs, or isn't it enough to just differentiate between distinct ASNs without necessarily knowing their numbers?\n\nRe Tor: Tor is centralised, so does it actually protect from partitioning at all?",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-533710818,533710818,
naumenkogs,2019-09-21 12:59:13,"@luke-jr there is no particular requirement in knowing the actual AS numbers, at least in a simplified .\nDo you see a way to optimize it by not using ASNs?\n\nAlso, I suggest to not have Tor discussion here. It seems there are couple more relevant PRs now.",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-533796151,533796151,
luke-jr,2019-09-21 13:38:14,"I haven't looked at the actual implementation, but it seems obvious that if we don't need to know the AS numbers, then not using them can make the asmap file even smaller (unless it already is omitting them).",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-533798722,533798722,
luke-jr,2019-09-21 13:39:24,"(But if we tie the address database to known-AS asmap data, it may become more difficult to remove the specific AS numbers later...)",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-533798805,533798805,
laanwj,2019-11-01 10:11:53,Concept ACK (adding 0.20 milestone optimistically),https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-548736168,548736168,
naumenkogs,2019-11-25 22:02:05,"Rebased and cleaned up commits. Should be ready for review.\nI would also suggest taking a look at the related [issue](https://github.com/bitcoin/bitcoin/issues/16599), which has more high-level discussion on the consequences of this change.",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-558359839,558359839,
jonatack,2019-11-28 17:40:04,"@naumenkogs Nice -- good timing. I'd like to host this PR for the PR review club session on Wednesday, December 11th. Would you be available to join in/co-host/participate?",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-559570540,559570540,
jonatack,2019-11-29 09:29:30,Review meeting on this PR is up: https://bitcoincore.reviews/16702.html... could @fanquake or someone add a `review club` label here?,https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-559722751,559722751,
naumenkogs,2019-12-05 21:19:15,"@Sjors \n>Do we need to reconsider the number of buckets and their size?\n\nThis is a sensitive topic: [Ethan's Eclipse paper](https://www.usenix.org/node/190891) suggests more buckets, [Erebus](https://erebus-attack.comp.nus.edu.sg/) suggests less buckets...\nSo I would keep this discussion out of the PR.",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-562322811,562322811,
laanwj,2019-12-11 14:06:28,"meta: if you want to be credited correctly, please change your gitconfig user.name to something other than ""User"" and `git commit --amend --reset-author` your commits:\n```bash\n$ git show --pretty=full 4128c9c8124e4627cc45f6df2b7017a89296fc5a\ncommit 4128c9c8124e4627cc45f6df2b7017a89296fc5a (pull/16702/head)\nAuthor:     User <…@…>\nCommit:     User <…@…>\n```",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-564557409,564557409,
EthanHeilman,2019-12-11 18:52:02,"As requested I'm expanding on my comments from PR review club.\n\nI can see the case for merging this but it does make addrman’s behavior more complex.\n\n**Complexity costs to discovering and fixing bugs:**\nHaving outgoing connection logic depend on asmap makes reasoning about connection behavior harder.\n\nFor instance consider a bug causing outgoing connections are being made to IP addr",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-564681862,564681862,
pinheadmz,2019-12-11 19:00:18,One thought I had during PR review club was that it might be interesting to see each peer's ASN in `rpc getpeerinfo` where possible.,https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-564685093,564685093,
adamjonas,2019-12-11 21:13:45,4b6543941 isn't compiling for me. I'm getting two errors in `test/addrman_tests.cpp` based on changes to `GetTriedBucket` and `GetNewBucket`.,https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-564735414,564735414,
fjahr,2019-12-15 23:58:52,"Concept ACK\n\nAlso built, ran automated tests, did some manual testing, light code review on 4b65439415a17bcb6f99bb1996c5ce01c70d08b6.\n\nI have two thoughts:\n- Should we include an implementation of the encoding code here as well, to make sure that anyone who wants to use it has a reference implementation that is reviewed properly? Otherwise, I think there should be at least some more docu",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-565860818,565860818,
naumenkogs,2019-12-24 18:30:48,"@pinheadmz added a ``critical_as`` field to a getpeerinfo RPC call response. I had to do some refactoring for this.\n\nI couldn't find a good way to test it with functional or unit tests really, because it's hard to avoid triggering ``GetNetClass() == NET_UNROUTABLE/NET_LOCAL``. And triggering this prevents returning an asmap. I'd be glad if someone suggests a good way to test it.\nI tested thi",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-568788806,568788806,
pinheadmz,2019-12-24 20:13:40,"@naumenkogs very cool seeing the ASN number in the RPC call.\nTested on testnet at ca7916a3c3024c7af2b3df1069ab1a4f9cee2ca6 with the `demo.map` file from https://github.com/sipa/asmap\n\nWas able to confirm the returned data against `whois` and https://bgpview.io/asn/14061#prefixes-v4:\n\nRPC output:\n```\n    ""addr"": ""188.166.99.121:18333"",\n    ""critical_as"": 14061,\n```\n\nWHOIS:\n`",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-568798241,568798241,
practicalswift,2019-12-25 01:10:33,"What is a ""critical AS""? :)",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-568816576,568816576,
naumenkogs,2019-12-25 01:14:36,"@practicalswift see ""Rationale"" [here](https://github.com/sipa/asmap/pull/1/files#diff-c3143a8bcea90615d22bc72dbd1e647e). Basically, it doesn't have to be the actual AS of the node, but it better be the bottleneck-AS on BGP path to that node.\n\nDo you think it also needs further clarification in the Bitcoin Core source code? I couldn't generalize it better. It's like whatever asmap tells us — e",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-568816872,568816872,
naumenkogs,2019-12-25 01:40:59,"Okay I'm less happy with the last tiny logging commit 1619fe1 2 reasons:\n- Every time ``GetNewBucket(...)`` is called, we call ``GetCriticalAS()`` twice: in ``GetGroup``and separately just for logging. It's obviously suboptimal, but I can't see a clean way to do it better. The method is also very cheap.\n- Right now ``GetTriedBucket()`` is always called only when we're assigning a bucket to a n",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-568819170,568819170,
naumenkogs,2019-12-25 14:35:52,"@jonatack \n>I have not yet seen one of the new ""IP %s with critical AS%i belongs to new|tried bucket %i.\n"" extra logging messages.\n\nThis is because you're not specifying ``-debug=net``.\n\n>Would it be helpful to include the AS number in the debug log peer here?\n\nEh, I don't know. I don't think it's particularly useful in this context.\nIn some cases it might even not represent the p",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-568905561,568905561,
practicalswift,2019-12-25 22:17:15,"@naumenkogs \n\nAh, is ""critical AS"" for a prefix simply the non-stub AS-number closest to the originating AS-number in an AS path? (BTW, I assume ""critical AS"" is a made up term? I haven't encountered it before :))\n\nIn a single-homed/stub then the ""critical AS"" is typically its upstream/transit provider of the originating AS, and in a multi-homed setup the ""critical AS"" is typically the ori",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-568934891,568934891,
naumenkogs,2019-12-26 19:17:42,"@practicalswift the exact algorithm of deciding what is critical is out of this PR — it is in the asmap construction. For the PR, what matters is that it is some AS by which we want to diversify. And yeah, I made up the term.\n\nYes, your examples are correct, according to [my PR](https://github.com/sipa/asmap/pull/1/files#diff-c3143a8bcea90615d22bc72dbd1e647e) to the asmap lib.\n\nI'm not tha",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-569118497,569118497,
practicalswift,2019-12-27 23:38:10,"@naumenkogs Thanks for clarifying!\n\nI don't want to bikeshed but it is something about the ""critical"" in ""critical AS"" that confused me at least :)\n\nI guess what we want to say that it is an AS number that we group by, but it is not necessarily the originating AS number for the prefix in question as one would assume (if we called it only ""AS"").\n\nCan we find a more neutral name? Perhaps",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-569364200,569364200,
jonatack,2019-12-30 12:39:05,"@naumenkogs as per https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361300447, in #17812 I added feature functional tests and absolute asmap paths, separated asmap found/parsing checks, added a test which the separation enables, plus a handful of minor suggestions found while doing this. The changes are separate to aid picking and choosing; I don't mind squashing down a bit if needed. Fee",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-569668026,569668026,
muoitranduc,2020-01-09 08:47:06,"@naumenkogs Can you elaborate more on the idea of having a critial AS for a prefix? \nIsn't that this critical AS only presents the most common suffix AS on the propagated AS paths observed by RIPE collectors only? In other words, the traffic from a node (which is not at the same location with any RIPE collectors) to the prefix may *not* traverse the critical AS.\nIf you want a simple prefix-to-",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-572454703,572454703,
practicalswift,2020-01-09 11:04:00,"@naumenkogs What do you think of using the term ""mapped AS"" instead of ""critical AS""? That would be consistent with the ""AS map"" terminology already in use and would not imply any specific method for the generation of the AS map file.\n\nSo instead of introducing two separate terms ""AS map"" and ""critical AS"" we only introduce ""AS map""/""mapped AS"". I think that would be less confusing for newcome",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-572511420,572511420,
naumenkogs,2020-01-10 19:30:01,"@practicalswift I liked the ""mapped_as"" so I used it instead. ~~""Critical"" is still used in 2 places (comments basically) as a synonym, to make understanding easier. Let me know if you have concerns about that.~~\n\n@muoitranduc Yes, you are correct. The first element of the most common suffix basically. This is for users which don't want to make their own asmap (probably the majority, because w",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-573173860,573173860,
laanwj,2020-01-15 13:02:23,"I think reading the `asmap` happens too late in the initialization process, unless there's a strong reason to do it like this that I'm missing.\nWhen reading it before loading the block index and doing initial verification, there would be much faster feedback on invalid `-asmap` command line arguments. It's a bit silly to spin up the entire node just to it shut down again.\nCould be changed in a",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-574650208,574650208,
laanwj,2020-01-15 13:09:34,code review and light testing (both IPv4 and IPv6) ACK 50f655e4d50a3b8b39fc01a4aaab3d2aeb05e6be,https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-574652570,574652570,
jamesob,2020-01-15 21:12:23,"For what it's worth I think reviewing @sipa's asmap format is prerequisite to signing off on this PR (since the data this PR is dependent on is encoded using the former). I've reviewed that code (and added some commentary: https://github.com/sipa/asmap/pull/2), and will now be starting on this code.",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-574858220,574858220,
naumenkogs,2020-01-23 19:27:11,"I think no more pending critical comments, everything unaddressed will be easier to get through via a follow-up, so let's get this merged? Looking for acks :)",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-577836435,577836435,
laanwj,2020-01-23 20:17:02,"re-ACK 3c1bc40205a3fcab606e70b0e3c13d68b2860e34\nonly change is `std::vector<bool> &m_asmap`",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-577857263,577857263,
jonatack,2020-01-27 13:03:54,"> I think reading the `asmap` happens too late in the initialization process, unless there's a strong reason to do it like this that I'm missing.\n> When reading it before loading the block index and doing initial verification, there would be much faster feedback on invalid `-asmap` command line arguments. It's a bit silly to spin up the entire node just to it shut down again.\n> Could be change",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-578736859,578736859,
luke-jr,2020-01-29 03:45:41,"Is the plan to actually generate the asmap files from GeoIP's GeoLite database?\n\nHas anyone reviewed [their EULA](https://www.maxmind.com/en/geolite2/eula) which presumably controls asmaps derived from their database?",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-579578691,579578691,
laanwj,2020-01-29 12:50:17,"I think how the particular asmap database is generated is an important discussion *if* and *when* it's going to be shipped with bitcoin core itself. This PR just adds a feature to load and interpret one, independent of where it comes from.",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-579741244,579741244,
sipa,2020-01-29 20:11:25,@luke-jr https://github.com/sipa/asmap/pull/1 adds tooling to build asmap files from RIPE's dumps.,https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-579937920,579937920,
Empact,2020-01-29 22:25:37,"For the sake of documentation, this apparently introduced an appveyor test failure #18020, fixed in #18022.",https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-579990279,579990279,
sipa,2020-01-29 23:15:21,Sorry for the late review. I've opened #18023 with things that I think can be improved here.,https://github.com/bitcoin/bitcoin/pull/16702#issuecomment-580007581,580007581,
MarcoFalke,2019-08-23 19:40:27,"nit: You might want to make it the same length in bits an all architectures:\n\n```suggestion\n            const uint64_t asmap_version{hasher(m_asmap)};\n            s << asmap_version;\n```",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317276226,317276226,src/addrman.h
MarcoFalke,2019-08-23 19:42:19,"This doesn't look like json. Also, this file is 21 MB, a bit too much for the git repo.\n\nYou might be better off adding a makefile rule `%.bin.h: %.bin` (similar to `%.json.h: %.json`).",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317276773,317276773,src/test/addrman_tests.cpp
Sjors,2019-08-23 19:56:38,"For a big file that needs processing, maybe add a `contrib` script that fetches it (checking  the sha256 hash) and does its (determinstic) thing. And then just add the result to the repo.",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317281198,317281198,src/test/addrman_tests.cpp
naumenkogs,2019-08-23 20:21:36,"Right, I'll do both things.",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317288685,317288685,src/test/addrman_tests.cpp
sipa,2019-08-23 23:15:47,Don't pass the map by value; it's copying the entire megabyte bitmap on every call.,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317328392,317328392,src/util/asmap.cpp
sipa,2019-08-23 23:16:26,Don't pass the entire map by value.,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317328472,317328472,src/util/asmap.cpp
sipa,2019-08-23 23:18:09,"An unsigned long long is generally not enough to represent an IPv6 address. Maybe you want to pass the IP address also as an `std::vector<bool>`, and have the caller convert the IP address to a bitmap?",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317328716,317328716,src/util/asmap.h
sipa,2019-08-23 23:19:58,"A more C++ish way to do this would be to pass a `std::vector<bool>::const_iterator& it` (for the beginning of the value, updated to be after the value afterwards) and a `const std::vector<bool>::const_iterator& end` (for the end of the area).",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317328977,317328977,src/util/asmap.cpp
sipa,2019-08-24 00:08:17,"I don't think using std::hash is the right choice here, as it has no well-defined semantics (even updating your c++ stdlib could change the function). You can use `SerializeHash(m_asmap)` instead.",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317334544,317334544,src/addrman.h
sipa,2019-08-26 21:01:14,"This is still a very C-like way of passing arguments. I suggest:\n* Instead of a vector reference and pointer to int position, pass a start (reference to) const_iterator, and an end const_iterator.\n* Instead of a pointer to an array of bit sizes and a length, pass a const reference to a vector of bit sizes.",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317796962,317796962,src/util/asmap.cpp
sipa,2019-08-26 21:01:48,Similarly for these you can pass a start and end iterator to the bits in the vector.,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317797182,317797182,src/util/asmap.cpp
sipa,2019-08-26 21:03:12,"You probably want to use `uint32_t` as return type here and the functions calling it, as `int` doesn't have a well defined range.",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317797688,317797688,src/util/asmap.cpp
sipa,2019-08-26 21:04:42,"Most of the functions and global constants in this file can be in an anonymous namespace (which makes them not pollute the global namespace, and allows some optimizations).",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317798246,317798246,src/util/asmap.cpp
sipa,2019-08-26 21:05:53,You can use src/crypto/common.h's `CountBits` for this (which uses the efficient `__builtin_clz` if it exists).,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r317798736,317798736,src/util/asmap.cpp
MarcoFalke,2019-08-27 18:43:59,"```\nsrc/util/asmap.h seems to be missing the expected include guard:\n  #ifndef BITCOIN_UTIL_ASMAP_H\n  #define BITCOIN_UTIL_ASMAP_H\n  ...\n  #endif // BITCOIN_UTIL_ASMAP_H",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318238276,318238276,src/util/asmap.h
naumenkogs,2019-08-27 19:01:00,Will do. What is it actually used for?,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318245688,318245688,src/util/asmap.h
MarcoFalke,2019-08-27 19:19:39,"I think compilers will spit out warnings if symbols are declared more than once. This will happen with this header, if it is (indirectly) included twice.",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318253311,318253311,src/util/asmap.h
Sjors,2019-08-28 08:52:20,Why isn't it usable from the command line?,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318465087,318465087,src/init.cpp
Sjors,2019-08-28 09:15:52,Bump `nVersion` if `-asmap` is set? ,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318475859,318475859,src/addrman.h
naumenkogs,2019-08-28 14:05:33,"no real reason, will allow command line ",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318600401,318600401,src/init.cpp
sipa,2019-08-28 15:08:53,See https://en.wikipedia.org/wiki/Include_guard,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318636426,318636426,src/util/asmap.h
naumenkogs,2019-08-28 15:42:06,"I hesitated to do this because I don't have a good sense of when the version number should be used for in this context.\nIn my implementation nKeySize tells you whether hash is present or not. Perhaps you're right and nVersion is a better way to track whether asmap is present.\n\nOpinions from other reviewers?",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318654442,318654442,src/addrman.h
Sjors,2019-08-28 15:46:07,"I would say `nVersion` says something about backwards compatibility, but at first glance it doesn't look like the current version rejects a higher `nVersion`. In any case I prefer directly checking the version over implicit checks that will confuse future devs.",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318656660,318656660,src/addrman.h
naumenkogs,2019-08-28 16:34:10,"If you feed addrman serialized by my current implementation to the pre-PR code, ```keySize != 32``` will fail.",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318679687,318679687,src/addrman.h
sipa,2019-08-28 18:12:01,I think you're swapping bit order here. The high bits from the IP's bytes should go first.,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r318722425,318722425,src/netaddress.cpp
jonatack,2019-12-11 10:10:33,nit: s/exsiting/existing/,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356507305,356507305,src/addrman.h
laanwj,2019-12-11 14:02:14,"would generally prefer for the implementation of this function to in the `cpp` instead of the header, is there a specific reason to put it here?",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356614688,356614688,src/addrman.h
jonatack,2019-12-11 17:05:43,Any reason this is placed last instead of in alphabetical order?,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356722432,356722432,src/Makefile.am
jonatack,2019-12-11 17:43:15,Could add code documentation here? Is this the same as line 320 above: `version byte (currently 1)`?,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356740713,356740713,src/addrman.h
jonatack,2019-12-11 17:46:47,I could be misunderstanding; should this comment be 2 lines lower if it refers to the first part of the conditional?,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356742334,356742334,src/addrman.h
jonatack,2019-12-11 17:52:26,"suggestion: add the default\n```diff\nANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(""-asmap=<file>"", ""Specify asn mapping, relative to the -datadir path"", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(""-asmap=<file>"", strprintf(""Specify asn mapping, relative to the -datadir path (default: %u)"", DEFAULT_ASMAP_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory:",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356744971,356744971,src/init.cpp
EthanHeilman,2019-12-11 19:05:15,What is the argument that a corrupted asmap file can't cause an infinite loop here? I could be reading this wrong but it seems like an op_code 1 that jumps to itself it will never exit.,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356779224,356779224,src/util/asmap.cpp
sipa,2019-12-11 19:12:20,DecodeType increments `pos` itself. The jump is relative to the end of the jump instruction.,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356782592,356782592,src/util/asmap.cpp
EthanHeilman,2019-12-11 19:16:16,"1. What happens when you return `-1` and the type is  `uint32_t`? Does it return `(2^32)-1`?\n\n2. It doesn't seem like anything checks for `-1` to catch this error. \n\n3. If the call stack was `DecodeJump-->DecodeBits` and `DecodeBits` returns `-1` then the next operation would be `pos += jump;` where `jump=-1`. Does this then integer overflow `pos`?\n\n",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356784516,356784516,src/util/asmap.cpp
EthanHeilman,2019-12-11 19:18:36,It might make sense to log how we ended up here since it seems like something real bad must've happened. Is there any way to recover or is this case so bad that should the Bitcoin node should immediately stop?,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356785710,356785710,src/util/asmap.cpp
EthanHeilman,2019-12-11 19:19:59,I would suggest using an enum or some constant to help document the intent of these values,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356786391,356786391,src/util/asmap.cpp
EthanHeilman,2019-12-11 19:27:50,"I'd add parens here to make the order of operations more explicit to a reader\n`(asn >> (8 * i)) & 0xFF`",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356790248,356790248,src/netaddress.cpp
EthanHeilman,2019-12-11 20:13:26,That makes sense. I guess you'd need to exploit an integer overflow.,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356811171,356811171,src/util/asmap.cpp
jonatack,2019-12-11 21:05:04,"Further to https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356739537, would suggest here `""Could not find or parse specified asmap: '%s'""`.\n\nRationale: the most frequent cause is likely to be an incorrect path or filename, not an unparseable file, and this error message will be output in both cases.",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356832913,356832913,src/init.cpp
jonatack,2019-12-11 21:20:22,"This appears to be a bug. Passing `-asmap` with no file specified returns:\n`Error: Could not parse specified asmap: '""/home/jon/.bitcoin""'`\n\nIt seems it should error by looking for the default file defined in [line 104](https://github.com/bitcoin/bitcoin/pull/16702/files#diff-c865a8939105e6350a50af02766291b7R104) above:\n`Error: Could not parse specified asmap: '""/home/jon/.bitcoin/ip_asn.m",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356839948,356839948,src/init.cpp
jonatack,2019-12-11 23:10:57,"I think what you want here is:\n```diff\n-        const fs::path asmap_path = GetDataDir() / gArgs.GetArg(""-asmap"", DEFAULT_ASMAP_FILENAME);\n+        std::string asmap_file = gArgs.GetArg(""-asmap"", """");\n+        if (asmap_file.empty()) {\n+            asmap_file = DEFAULT_ASMAP_FILENAME;\n+        }\n+        const fs::path asmap_path = GetDataDir() / asmap_file;\n```\nThis provides the",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356884878,356884878,src/init.cpp
naumenkogs,2019-12-11 23:14:24,"Weird. You're handling a special case when somebody passes -asmap="""".\nWhat if somebody passes -asmap="" "" or asmap=""/""? These are conditions, which are equally possible in users stupidity. If a user don't want asmap, they ignore the flag.\nI don't think protecting against a specific case of empty string is reasonable. Other opinions?",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356885944,356885944,src/init.cpp
jonatack,2019-12-11 23:17:40,"Suggest to provide feedback on which filename was opened:\n```diff\n-        LogPrintf(""Opened asmap file (%d bytes) from disk.\n"", length);\n+        LogPrintf(""Opened asmap file %s (%d bytes) from disk.\n"", path, length);\n```\nTested examples of output:\n```\nOpened asmap file ""/home/jon/.bitcoin/ip_asn.map"" (932999 bytes) from disk.\nOpened asmap file ""/home/jon/.bitcoin/../projects/bi",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r356886932,356886932,src/addrman.h
jonatack,2019-12-12 13:20:10,"If I understand the intended interface in this PR:\n\n1) `bitcoind`: use /16 bucketing\n2) `bitcoind -asmap`: use default asmap file in the datadir\n3) `bitcoind -asmap=<path-to-file>`: use specifed asmap\n\nMy suggestion handles case 2.\n\nI could be confused, but I don't see in what case `DEFAULT_ASMAP_FILENAME` would be used otherwise. AFAICT, behind the `if (gArgs.IsArgSet(""-asmap""))` ",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r357139904,357139904,src/init.cpp
fjahr,2019-12-15 22:04:08,"Edit: tested with different scenarios and @jonatack s code works as described. It loosely follows the same pattern as `-prune` which uses similar behavior of the three cases, so I would say it is consistent as well.\n\nWith current code starting `bitcoind -asmap` (with no default file present):\n```\n  2019-12-15T21:40:36Z Opened asmap file (864 bytes) from disk.\n  2019-12-15T21:40:36Z\n\n",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r358009483,358009483,src/init.cpp
jonatack,2019-12-15 22:42:26,"@fjahr that version would ignore any user-specified file, e.g. case 3.",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r358011994,358011994,src/init.cpp
fjahr,2019-12-15 22:43:40,"@jonatack yeah, I am just revising my answer as I am doing more testing, commented prematurely",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r358012079,358012079,src/init.cpp
naumenkogs,2019-12-18 18:12:24,"It was already messed up before me... But alright, will put my file in a proper place.",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r359493452,359493452,src/Makefile.am
naumenkogs,2019-12-18 19:06:43,"I didn't think about `-asmap` call without a parameter as ""use existing"". But yeah, perhaps it makes sense. Especially since both of you share that intuition. Will apply your suggested change.",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r359517964,359517964,src/init.cpp
naumenkogs,2019-12-18 19:37:48,"I'm thinking this should probably be ``assert(0)`` — the file is corrupted\n@sipa ?",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r359531853,359531853,src/util/asmap.cpp
naumenkogs,2019-12-18 19:49:45,Your opinion in other util related issues would be also useful.,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r359536948,359536948,src/util/asmap.cpp
pinheadmz,2019-12-24 20:02:18,"This implies that the asmap file will always be in the default data directory. Should it allow for absolute paths as well? For example, I ended up with this error on my first naive run of this branch:\n\n```\n$ bitcoind -testnet -asmap=/Users/matthewzipkin/Desktop/work/asmap/demo.map\n...\nError: Could not find or parse specified asmap:\n'""/Users/matthewzipkin/Library/Application Support/Bit",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361219517,361219517,src/init.cpp
naumenkogs,2019-12-24 20:27:41,At this point I'm not even sure what should be the right behaviour here. summoning @jonatack.,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361221499,361221499,src/init.cpp
jonatack,2019-12-25 11:11:16,"@pinheadmz @naumenkogs Yes, the PR as authored specifies a relative path and I tested it as such:\n```\ngArgs.AddArg(""-asmap=<file>"", ""Specify asn mapping, relative to the -datadir path"", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n```\nI agree allowing for absolute paths would be handy. Will perhaps propose a pair of commits to do this and add tests for expected behavior as per htt",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361300447,361300447,src/init.cpp
jonatack,2019-12-25 11:35:10,"Was this line inadvertently removed? `addrlocal` is still present in the output, line 152 `obj.pushKV(""addrlocal"", stats.addrLocal)`)",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361302621,361302621,src/rpc/net.cpp
jonatack,2019-12-25 12:34:25,"suggestion to aid in grepping the bitcoind help for ""peers"" or ""connections"":\n```diff\n-    ""Specify asn mapping...""\n+    ""Specify asn mapping for connections to peers...""\n```\n",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361307953,361307953,src/init.cpp
naumenkogs,2019-12-25 13:11:05,"this was an accident, thanks!",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361311141,361311141,src/rpc/net.cpp
jonatack,2019-12-25 16:10:39,"> Okay I'm less happy with the last tiny logging commit [1619fe1](https://github.com/bitcoin/bitcoin/commit/1619fe188b278b82e9e147ee2de69abc4642c510) 2 reasons:\n\nAgreed, refactoring this post-merge as a follow-up may be worthwhile.\n \n> This is because you're not specifying `-debug=net`.\n\nThanks! I overlooked the `LogPrint(BCLog::NET)`.\n\nnit: perhaps add a space between ""AS"" and the",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361324834,361324834,src/addrman.cpp
EthanHeilman,2019-12-27 13:57:06,"Feel free to tag me in other util related issues, happy to give a look and add my two cents.",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361668704,361668704,src/util/asmap.cpp
jonatack,2019-12-30 12:19:39,done in #17812 ,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r361972806,361972806,src/init.cpp
jamesob,2020-01-14 21:41:23,Agree this should accept an absolute path. We should either pull @jonatack's change in to this PR or follow up shortly after this merges.,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r366587100,366587100,src/init.cpp
laanwj,2020-01-15 12:12:01,"I do not think it is even possible to reach this. The\n```c++\nif (bit_sizes_it + 1 != bit_sizes.end()) {\n    …\n} else {\n    bit = 0;\n}\nif (bit) {\n    …\n} else {\n    …\n    return val;\n}\n```\nguarantees that the one-to-last bit size will always return a value.\n(so yes, replacing with `assert(0)` would make sense)",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r366843099,366843099,src/util/asmap.cpp
EthanHeilman,2020-01-15 14:46:07,"`assert(0)` seems safer than `-1`.\n\nI agree that it is unlikely this branch will be hit.  If `bit_sizes` has a length of zero it short circuits the for loop and would hit that line however so far all the calls to `DecodeBits` hardcode a parameter with values that have length > 0.",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r366914380,366914380,src/util/asmap.cpp
laanwj,2020-01-15 15:03:17,"Or refactor the function, moving the second for loop outside of the first, so that the unreachable code is no longer there:\n```c++\nuint32_t DecodeBits(std::vector<bool>::const_iterator& bitpos, uint8_t minval, const std::vector<uint8_t> &bit_sizes)                                                        \n{\n    assert(bit_sizes.len() >= 1);\n    uint32_t val = minval;\n    bool bit;\n    ",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r366924340,366924340,src/util/asmap.cpp
jamesob,2020-01-15 21:45:48,Agree with @EthanHeilman. I know we're trying to avoid nits but this seems like basic hygiene. ,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367123754,367123754,src/util/asmap.cpp
jamesob,2020-01-15 21:57:28,"I'm sort of inclined to say we should log really loudly and then fall back to IP-based bucketing since crashing based on asmap failure seems pretty drastic - especially since this is called not just at startup but throughout runtime. If we crash, a problem with this code could then potentially cause widespread outage.",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367128731,367128731,src/util/asmap.cpp
jamesob,2020-01-16 16:38:03,This code is a great candidate for unittesting - I'm inclined to say that you should use @laanwj's code here but it's somewhat difficult to verify that it will behave in exactly the same way sipa's original code does. Happy to add some tests in a follow-up PR.,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367525343,367525343,src/util/asmap.cpp
jamesob,2020-01-16 18:48:40,"nit: convention would say `m_deterministic = ...`, then you don't have to do awkward naming to avoid shadowing below",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367588410,367588410,src/test/addrman_tests.cpp
jamesob,2020-01-16 21:52:24,"A lot of commonalities between this test case and the last. I know this is nitty stuff but you could save a lot of code (and thus review effort) by consolidating it into a function that takes a function parameter that returns `info.Get{Tried,New}Bucket(...)`. Again not a blocker, just would be easier review without having to read through something that's kind of the same but not.\n\nAnd these te",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367669408,367669408,src/test/addrman_tests.cpp
jamesob,2020-01-16 22:01:45,Thanks for testing this!,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367673186,367673186,src/test/addrman_tests.cpp
jamesob,2020-01-16 22:26:33,"If you wanted better (albeit incidental) coverage of the ASN parsing stuff, you could use asmap.raw to verify that IPs are mapped properly. Can be done in a follow-up.",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367682495,367682495,src/test/netbase_tests.cpp
jamesob,2020-01-16 22:27:55,Should this be taking `std::vector<bool>&` instead? That's potentially a pretty large vector to be copying.,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r367682958,367682958,src/net.cpp
jonatack,2020-01-27 13:33:15,The `mapped_as` value is currently returned as an integer.,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r371240923,371240923,src/rpc/net.cpp
jonatack,2020-01-27 13:42:55,Will address this in #17812.,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r371245383,371245383,src/rpc/net.cpp
laanwj,2020-01-29 12:52:50,"Doesn't returning it as an integer make sense, as it is an integer? So I think we should change the documentation.",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r372364364,372364364,src/rpc/net.cpp
jonatack,2020-01-29 13:05:37,"> Doesn't returning it as an integer make sense, as it is an integer? So I think we should change the documentation.\n\nThanks! Agreed.",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r372370081,372370081,src/rpc/net.cpp
jnewbery,2020-11-01 11:13:55,"Why is this `nVersion == 2` check required? This means that anyone upgrading to v0.20 will have a lot of their new table data lost, even if they're not using an asmap. Without this check, we'd still make sure not to place entries in the wrong new table because of the asmap version check.\n\nOn code readability/style, it'd make a lot more sense to extract this check to above the loop and comment ",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r515608294,515608294,src/addrman.h
jnewbery,2020-11-01 15:06:25,"More generally, what's the plan for updating the asmap? Presumably it's something that could change fairly frequently (i.e. at least as often as we release major versions of Bitcoin Core). If that's the case and the asmap is changed every major version, are we happy with the idea that people's new tables will lose data at every major upgrade?",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r515633011,515633011,src/addrman.h
naumenkogs,2020-11-25 12:31:34,">This means that anyone upgrading to v0.20 will have a lot of their new table data lost, even if they're not using an asmap. \n\nYou are right, I think this was a mistake. I was probably thinking about downgrading `nVersion` (say a file from 0.22 with `nVersion=3` now downgraded to 0.21), so the check should be `nVersion <= 2`.\nI agree with your comment suggestion, but why you separate those t",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r530338668,530338668,src/addrman.h
naumenkogs,2020-11-25 12:37:59,">More generally, what's the plan for updating the asmap?\n\nTBD\n\n>If that's the case and the asmap is changed every major version, are we happy with the idea that people's new tables will lose data at every major upgrade?\n\nDepends on the answer to the previous question at least :)\nNote that what's lost is just the position of records in the table, and presumably a few of records from b",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r530342479,530342479,src/addrman.h
jnewbery,2020-11-25 14:06:36,"> what's lost is just the position of records in the table, and presumably a few of records from buckets with high collisions\n\nA new address can appear in up to 8 different buckets if it's been gossipped to us from different peers. If it gets rebucketed during file load, it'll only be placed in 1 bucket (or 0, if there's a collision). That seems undesirable.",https://github.com/bitcoin/bitcoin/pull/16702#discussion_r530398394,530398394,src/addrman.h
naumenkogs,2020-11-26 10:16:26,You are right.,https://github.com/bitcoin/bitcoin/pull/16702#discussion_r530919261,530919261,src/addrman.h
