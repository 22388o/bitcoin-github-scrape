[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/587740372",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#issuecomment-587740372",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18176",
    "id": 587740372,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4Nzc0MDM3Mg==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-18T19:51:48Z",
    "updated_at": "2020-02-18T19:51:48Z",
    "author_association": "MEMBER",
    "body": "ACK 0730ac98c61f895893d40cb0fdff4cd7339a11b0",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/587740372/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/587882514",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#issuecomment-587882514",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18176",
    "id": 587882514,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4Nzg4MjUxNA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-18T21:30:05Z",
    "updated_at": "2020-03-09T22:25:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/587882514/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/588323310",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#issuecomment-588323310",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18176",
    "id": 588323310,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4ODMyMzMxMA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-19T16:52:58Z",
    "updated_at": "2020-02-19T16:52:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MarcoFalke Added `CScriptNum` fuzzer too. Moved common functions to `fuzz.h`. Please re-review :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/588323310/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596651902",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#issuecomment-596651902",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18176",
    "id": 596651902,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjY1MTkwMg==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-09T16:58:45Z",
    "updated_at": "2020-03-09T16:58:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MarcoFalke Thanks for reviewing. All feedback addressed. Please re-review :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596651902/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596734966",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#issuecomment-596734966",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18176",
    "id": 596734966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5NjczNDk2Ng==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-09T19:25:28Z",
    "updated_at": "2020-03-09T19:25:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased again :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596734966/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596876979",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#issuecomment-596876979",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18176",
    "id": 596876979,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5Njg3Njk3OQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-10T03:01:15Z",
    "updated_at": "2020-03-10T03:01:15Z",
    "author_association": "MEMBER",
    "body": "ACK e37f53648e3acc6aea75adafec4de2bdbd8cb293 \ud83e\udd82\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK e37f53648e3acc6aea75adafec4de2bdbd8cb293 \ud83e\udd82\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUiTxwv/fFqtr5Cy14W/HZr4I58Tpz3S86mobLUDaulSWhFpMz8b38ilBC5ltwIH\r\nrOznRDmgl46dP3YPMU07vCM2LS39DZyQH8uLTbECZw1aP5/x+XHb7me4aN/Ws1hB\r\ntvD5zKvFcFnw+wbmkStYqDMaNKH2vFOSJKhWckcRouaB+fwZLNMzps1CH7tqixVg\r\nYo6i/PfETRSK9FveNFzbhSvhpGozLuFkqr0p5XyVWG42DxyOfe61VJP+e5RtlUFb\r\nQUPiEZnm2UFgy3DFhPGw0y2Gz81kDvW5H3RD+nKxg2FmXeBuQlNpos/naAqq1pQ1\r\nWsNtbwzJw5mrvxWvtALFFzvkBOv1W7kjes987ojGLQscMCtb1N/ZTb81sUSRzkW/\r\nL5AkNgnyP8d6WFvzuztTgLt7ZxM/0hTJtIO3x1qC/VySZKR2Enhh/DrOACKQ8u0s\r\nx3uTHh0e4qcOMz/6gKlMO2Boq48EUmUTNOSNY/95XY+0A5J7c6v6NuFIvhHq8Jfj\r\n1N+3Xt0G\r\n=AMUq\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `de3f5a712c02cb66b6ad6e76c0ec5a38c880d09962e085e811ec889daf153c65  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e892940108de3f5a712c02cb66b6ad6e76c0ec5a38c880d09962e085e811ec889daf153c65f010d9d202833a4a1814d76dd3f03fb99db808fff01045402923a1e9b81cfda7912eac985c2c08f1045e6702f1f0088618730ab64c0d8b0083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff0107d7f3303c7fa7f39a5488f64f6018d7f08f1045e6702f1f008bca925e1859d2e260083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff010ae6b3fd474696d658726103f6683455908f1045e6702f1f0088fb1663f816c98ba0083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010ec523c2ef22bd5d5cdc61a7bb80bdc0908f1045e6702f1f0085515caa24d82d8550083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6d)\r\n\r\n</details>\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596876979/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389316359",
    "pull_request_review_id": 370792112,
    "id": 389316359,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNjM1OQ==",
    "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <limits>\n+#include <vector>\n+\n+namespace {\n+bool IsValidAddition(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} - rhs) || (rhs < 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} - rhs);\n+}\n+\n+bool IsValidSubtraction(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} + rhs) || (rhs < 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} + rhs);\n+}\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CScriptNum script_num = ConsumeScriptNum(fuzzed_data_provider);\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 26)) {\n+        case 0:\n+            (void)(script_num == fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 1:\n+            (void)(script_num != fuzzed_data_provider.ConsumeIntegral<int64_t>());",
    "path": "src/test/fuzz/scriptnum_ops.cpp",
    "position": null,
    "original_position": 37,
    "commit_id": "e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "original_commit_id": "f137f64cde1c74237b9b2c5fcb0d9c88e50db60f",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Can combine case 0 and 1?\r\n\r\n```cpp\r\nconst auto int = fuzzed_data_provider.ConsumeIntegral<int64_t>()\r\n(script_num == int) != (script_num != int)\r\n```",
    "created_at": "2020-03-07T22:19:08Z",
    "updated_at": "2020-03-09T20:40:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389316359",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389316359"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389316359"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389316359/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 37,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389316389",
    "pull_request_review_id": 370792112,
    "id": 389316389,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNjM4OQ==",
    "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <limits>\n+#include <vector>\n+\n+namespace {\n+bool IsValidAddition(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} - rhs) || (rhs < 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} - rhs);\n+}\n+\n+bool IsValidSubtraction(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} + rhs) || (rhs < 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} + rhs);\n+}\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CScriptNum script_num = ConsumeScriptNum(fuzzed_data_provider);\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 26)) {\n+        case 0:\n+            (void)(script_num == fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 1:\n+            (void)(script_num != fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 2:\n+            (void)(script_num <= fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 3:\n+            (void)(script_num < fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 4:\n+            (void)(script_num >= fuzzed_data_provider.ConsumeIntegral<int64_t>());",
    "path": "src/test/fuzz/scriptnum_ops.cpp",
    "position": null,
    "original_position": 46,
    "commit_id": "e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "original_commit_id": "f137f64cde1c74237b9b2c5fcb0d9c88e50db60f",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same here:\r\n\r\n```cpp\r\n(s_n < int) != (s_n >= int)",
    "created_at": "2020-03-07T22:19:59Z",
    "updated_at": "2020-03-09T20:40:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389316389",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389316389"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389316389"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389316389/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 46,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389316417",
    "pull_request_review_id": 370792112,
    "id": 389316417,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNjQxNw==",
    "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <limits>\n+#include <vector>\n+\n+namespace {\n+bool IsValidAddition(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} - rhs) || (rhs < 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} - rhs);\n+}\n+\n+bool IsValidSubtraction(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} + rhs) || (rhs < 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} + rhs);\n+}\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CScriptNum script_num = ConsumeScriptNum(fuzzed_data_provider);\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 26)) {\n+        case 0:\n+            (void)(script_num == fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 1:\n+            (void)(script_num != fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 2:\n+            (void)(script_num <= fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 3:\n+            (void)(script_num < fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 4:\n+            (void)(script_num >= fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 5:\n+            (void)(script_num > fuzzed_data_provider.ConsumeIntegral<int64_t>());",
    "path": "src/test/fuzz/scriptnum_ops.cpp",
    "position": null,
    "original_position": 49,
    "commit_id": "e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "original_commit_id": "f137f64cde1c74237b9b2c5fcb0d9c88e50db60f",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same here:\r\n\r\n```cpp\r\n(s_n > int ) != (s_n <= int)",
    "created_at": "2020-03-07T22:20:24Z",
    "updated_at": "2020-03-09T20:40:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389316417",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389316417"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389316417"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389316417/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 49,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389316438",
    "pull_request_review_id": 370792112,
    "id": 389316438,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNjQzOA==",
    "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <limits>\n+#include <vector>\n+\n+namespace {\n+bool IsValidAddition(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} - rhs) || (rhs < 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} - rhs);\n+}\n+\n+bool IsValidSubtraction(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} + rhs) || (rhs < 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} + rhs);\n+}\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CScriptNum script_num = ConsumeScriptNum(fuzzed_data_provider);\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 26)) {\n+        case 0:\n+            (void)(script_num == fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 1:\n+            (void)(script_num != fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 2:\n+            (void)(script_num <= fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 3:\n+            (void)(script_num < fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 4:\n+            (void)(script_num >= fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 5:\n+            (void)(script_num > fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 6:\n+            (void)(script_num == ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 7:\n+            (void)(script_num != ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 8:\n+            (void)(script_num <= ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 9:\n+            (void)(script_num < ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 10:\n+            (void)(script_num >= ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 11:\n+            (void)(script_num > ConsumeScriptNum(fuzzed_data_provider));",
    "path": "src/test/fuzz/scriptnum_ops.cpp",
    "position": null,
    "original_position": 67,
    "commit_id": "e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "original_commit_id": "f137f64cde1c74237b9b2c5fcb0d9c88e50db60f",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same for all of these",
    "created_at": "2020-03-07T22:20:46Z",
    "updated_at": "2020-03-09T20:40:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389316438",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389316438"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389316438"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389316438/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 67,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389316534",
    "pull_request_review_id": 370792112,
    "id": 389316534,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNjUzNA==",
    "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <limits>\n+#include <vector>\n+\n+namespace {\n+bool IsValidAddition(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} - rhs) || (rhs < 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} - rhs);\n+}\n+\n+bool IsValidSubtraction(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} + rhs) || (rhs < 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} + rhs);\n+}\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CScriptNum script_num = ConsumeScriptNum(fuzzed_data_provider);\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 26)) {\n+        case 0:\n+            (void)(script_num == fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 1:\n+            (void)(script_num != fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 2:\n+            (void)(script_num <= fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 3:\n+            (void)(script_num < fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 4:\n+            (void)(script_num >= fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 5:\n+            (void)(script_num > fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 6:\n+            (void)(script_num == ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 7:\n+            (void)(script_num != ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 8:\n+            (void)(script_num <= ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 9:\n+            (void)(script_num < ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 10:\n+            (void)(script_num >= ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 11:\n+            (void)(script_num > ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 12:\n+            script_num = script_num + fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            break;\n+        case 13:\n+            script_num = script_num - fuzzed_data_provider.ConsumeIntegral<int64_t>();",
    "path": "src/test/fuzz/scriptnum_ops.cpp",
    "position": null,
    "original_position": 73,
    "commit_id": "e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "original_commit_id": "f137f64cde1c74237b9b2c5fcb0d9c88e50db60f",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could combine these?\r\n\r\n```cpp\r\n(script_num - int ) + int == script_num\r\n(script_num + int ) - int == script_num",
    "created_at": "2020-03-07T22:22:43Z",
    "updated_at": "2020-03-09T20:40:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389316534",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389316534"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389316534"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389316534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 73,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389316558",
    "pull_request_review_id": 370792112,
    "id": 389316558,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNjU1OA==",
    "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <limits>\n+#include <vector>\n+\n+namespace {\n+bool IsValidAddition(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} - rhs) || (rhs < 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} - rhs);\n+}\n+\n+bool IsValidSubtraction(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} + rhs) || (rhs < 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} + rhs);\n+}\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CScriptNum script_num = ConsumeScriptNum(fuzzed_data_provider);\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 26)) {\n+        case 0:\n+            (void)(script_num == fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 1:\n+            (void)(script_num != fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 2:\n+            (void)(script_num <= fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 3:\n+            (void)(script_num < fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 4:\n+            (void)(script_num >= fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 5:\n+            (void)(script_num > fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 6:\n+            (void)(script_num == ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 7:\n+            (void)(script_num != ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 8:\n+            (void)(script_num <= ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 9:\n+            (void)(script_num < ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 10:\n+            (void)(script_num >= ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 11:\n+            (void)(script_num > ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 12:\n+            script_num = script_num + fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            break;\n+        case 13:\n+            script_num = script_num - fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            break;\n+        case 14:\n+            script_num = script_num + ConsumeScriptNum(fuzzed_data_provider);\n+            break;\n+        case 15:\n+            script_num = script_num - ConsumeScriptNum(fuzzed_data_provider);",
    "path": "src/test/fuzz/scriptnum_ops.cpp",
    "position": null,
    "original_position": 79,
    "commit_id": "e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "original_commit_id": "f137f64cde1c74237b9b2c5fcb0d9c88e50db60f",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same here and below?",
    "created_at": "2020-03-07T22:23:03Z",
    "updated_at": "2020-03-09T20:40:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389316558",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389316558"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389316558"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389316558/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 79,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389825552",
    "pull_request_review_id": 371359017,
    "id": 389825552,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgyNTU1Mg==",
    "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <limits>\n+#include <vector>\n+\n+namespace {\n+bool IsValidAddition(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} - rhs) || (rhs < 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} - rhs);\n+}\n+\n+bool IsValidSubtraction(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} + rhs) || (rhs < 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} + rhs);\n+}\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CScriptNum script_num = ConsumeScriptNum(fuzzed_data_provider);\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 26)) {\n+        case 0:\n+            (void)(script_num == fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 1:\n+            (void)(script_num != fuzzed_data_provider.ConsumeIntegral<int64_t>());",
    "path": "src/test/fuzz/scriptnum_ops.cpp",
    "position": null,
    "original_position": 37,
    "commit_id": "e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "original_commit_id": "f137f64cde1c74237b9b2c5fcb0d9c88e50db60f",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed!",
    "created_at": "2020-03-09T16:57:17Z",
    "updated_at": "2020-03-09T20:40:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389825552",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389825552"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389825552"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389825552/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 37,
    "side": "RIGHT",
    "in_reply_to_id": 389316359
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389825611",
    "pull_request_review_id": 371359087,
    "id": 389825611,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgyNTYxMQ==",
    "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <limits>\n+#include <vector>\n+\n+namespace {\n+bool IsValidAddition(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} - rhs) || (rhs < 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} - rhs);\n+}\n+\n+bool IsValidSubtraction(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} + rhs) || (rhs < 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} + rhs);\n+}\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CScriptNum script_num = ConsumeScriptNum(fuzzed_data_provider);\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 26)) {\n+        case 0:\n+            (void)(script_num == fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 1:\n+            (void)(script_num != fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 2:\n+            (void)(script_num <= fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 3:\n+            (void)(script_num < fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 4:\n+            (void)(script_num >= fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 5:\n+            (void)(script_num > fuzzed_data_provider.ConsumeIntegral<int64_t>());",
    "path": "src/test/fuzz/scriptnum_ops.cpp",
    "position": null,
    "original_position": 49,
    "commit_id": "e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "original_commit_id": "f137f64cde1c74237b9b2c5fcb0d9c88e50db60f",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed!",
    "created_at": "2020-03-09T16:57:23Z",
    "updated_at": "2020-03-09T20:40:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389825611",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389825611"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389825611"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389825611/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 49,
    "side": "RIGHT",
    "in_reply_to_id": 389316417
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389825711",
    "pull_request_review_id": 371359181,
    "id": 389825711,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgyNTcxMQ==",
    "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <limits>\n+#include <vector>\n+\n+namespace {\n+bool IsValidAddition(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} - rhs) || (rhs < 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} - rhs);\n+}\n+\n+bool IsValidSubtraction(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} + rhs) || (rhs < 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} + rhs);\n+}\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CScriptNum script_num = ConsumeScriptNum(fuzzed_data_provider);\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 26)) {\n+        case 0:\n+            (void)(script_num == fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 1:\n+            (void)(script_num != fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 2:\n+            (void)(script_num <= fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 3:\n+            (void)(script_num < fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 4:\n+            (void)(script_num >= fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 5:\n+            (void)(script_num > fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 6:\n+            (void)(script_num == ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 7:\n+            (void)(script_num != ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 8:\n+            (void)(script_num <= ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 9:\n+            (void)(script_num < ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 10:\n+            (void)(script_num >= ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 11:\n+            (void)(script_num > ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 12:\n+            script_num = script_num + fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            break;\n+        case 13:\n+            script_num = script_num - fuzzed_data_provider.ConsumeIntegral<int64_t>();",
    "path": "src/test/fuzz/scriptnum_ops.cpp",
    "position": null,
    "original_position": 73,
    "commit_id": "e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "original_commit_id": "f137f64cde1c74237b9b2c5fcb0d9c88e50db60f",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed!",
    "created_at": "2020-03-09T16:57:30Z",
    "updated_at": "2020-03-09T20:40:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389825711",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389825711"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389825711"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389825711/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 73,
    "side": "RIGHT",
    "in_reply_to_id": 389316534
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389825897",
    "pull_request_review_id": 371359433,
    "id": 389825897,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgyNTg5Nw==",
    "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <limits>\n+#include <vector>\n+\n+namespace {\n+bool IsValidAddition(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} - rhs) || (rhs < 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} - rhs);\n+}\n+\n+bool IsValidSubtraction(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} + rhs) || (rhs < 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} + rhs);\n+}\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CScriptNum script_num = ConsumeScriptNum(fuzzed_data_provider);\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 26)) {\n+        case 0:\n+            (void)(script_num == fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 1:\n+            (void)(script_num != fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 2:\n+            (void)(script_num <= fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 3:\n+            (void)(script_num < fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 4:\n+            (void)(script_num >= fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 5:\n+            (void)(script_num > fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 6:\n+            (void)(script_num == ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 7:\n+            (void)(script_num != ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 8:\n+            (void)(script_num <= ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 9:\n+            (void)(script_num < ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 10:\n+            (void)(script_num >= ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 11:\n+            (void)(script_num > ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 12:\n+            script_num = script_num + fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            break;\n+        case 13:\n+            script_num = script_num - fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            break;\n+        case 14:\n+            script_num = script_num + ConsumeScriptNum(fuzzed_data_provider);\n+            break;\n+        case 15:\n+            script_num = script_num - ConsumeScriptNum(fuzzed_data_provider);",
    "path": "src/test/fuzz/scriptnum_ops.cpp",
    "position": null,
    "original_position": 79,
    "commit_id": "e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "original_commit_id": "f137f64cde1c74237b9b2c5fcb0d9c88e50db60f",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed!",
    "created_at": "2020-03-09T16:57:49Z",
    "updated_at": "2020-03-09T20:40:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389825897",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389825897"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389825897"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389825897/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 79,
    "side": "RIGHT",
    "in_reply_to_id": 389316558
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389826034",
    "pull_request_review_id": 371359601,
    "id": 389826034,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgyNjAzNA==",
    "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <limits>\n+#include <vector>\n+\n+namespace {\n+bool IsValidAddition(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} - rhs) || (rhs < 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} - rhs);\n+}\n+\n+bool IsValidSubtraction(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} + rhs) || (rhs < 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} + rhs);\n+}\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CScriptNum script_num = ConsumeScriptNum(fuzzed_data_provider);\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 26)) {\n+        case 0:\n+            (void)(script_num == fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 1:\n+            (void)(script_num != fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 2:\n+            (void)(script_num <= fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 3:\n+            (void)(script_num < fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 4:\n+            (void)(script_num >= fuzzed_data_provider.ConsumeIntegral<int64_t>());",
    "path": "src/test/fuzz/scriptnum_ops.cpp",
    "position": null,
    "original_position": 46,
    "commit_id": "e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "original_commit_id": "f137f64cde1c74237b9b2c5fcb0d9c88e50db60f",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed!",
    "created_at": "2020-03-09T16:58:01Z",
    "updated_at": "2020-03-09T20:40:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389826034",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389826034"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389826034"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389826034/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 46,
    "side": "RIGHT",
    "in_reply_to_id": 389316389
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389826191",
    "pull_request_review_id": 371359809,
    "id": 389826191,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgyNjE5MQ==",
    "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <limits>\n+#include <vector>\n+\n+namespace {\n+bool IsValidAddition(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} - rhs) || (rhs < 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} - rhs);\n+}\n+\n+bool IsValidSubtraction(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} + rhs) || (rhs < 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} + rhs);\n+}\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CScriptNum script_num = ConsumeScriptNum(fuzzed_data_provider);\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 26)) {\n+        case 0:\n+            (void)(script_num == fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 1:\n+            (void)(script_num != fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 2:\n+            (void)(script_num <= fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 3:\n+            (void)(script_num < fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 4:\n+            (void)(script_num >= fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 5:\n+            (void)(script_num > fuzzed_data_provider.ConsumeIntegral<int64_t>());\n+            break;\n+        case 6:\n+            (void)(script_num == ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 7:\n+            (void)(script_num != ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 8:\n+            (void)(script_num <= ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 9:\n+            (void)(script_num < ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 10:\n+            (void)(script_num >= ConsumeScriptNum(fuzzed_data_provider));\n+            break;\n+        case 11:\n+            (void)(script_num > ConsumeScriptNum(fuzzed_data_provider));",
    "path": "src/test/fuzz/scriptnum_ops.cpp",
    "position": null,
    "original_position": 67,
    "commit_id": "e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "original_commit_id": "f137f64cde1c74237b9b2c5fcb0d9c88e50db60f",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed!",
    "created_at": "2020-03-09T16:58:16Z",
    "updated_at": "2020-03-09T20:40:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389826191",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389826191"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389826191"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389826191/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 67,
    "side": "RIGHT",
    "in_reply_to_id": 389316438
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389932248",
    "pull_request_review_id": 371492157,
    "id": 389932248,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzMjI0OA==",
    "diff_hunk": "@@ -0,0 +1,165 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <limits>\n+#include <vector>\n+\n+namespace {\n+bool IsValidAddition(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} - rhs) || (rhs < 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} - rhs);\n+}\n+\n+bool IsValidSubtraction(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} + rhs) || (rhs < 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} + rhs);\n+}\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CScriptNum script_num = ConsumeScriptNum(fuzzed_data_provider);\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 18)) {\n+        case 0: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            assert((script_num == i) != (script_num != i));\n+            break;\n+        }\n+        case 1: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            assert((script_num <= i) != script_num > i);\n+            break;\n+        }\n+        case 2: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            assert((script_num >= i) != (script_num < i));",
    "path": "src/test/fuzz/scriptnum_ops.cpp",
    "position": 37,
    "original_position": 45,
    "commit_id": "e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "original_commit_id": "4532649328ad5056f9ae2bf99f3aba2212bdc785",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "in commit 4532649328ad5056f9ae2bf99f3aba2212bdc785:\r\n\r\nAny reason those are separate cases for the fuzzer to find? They can all be executed in the same case:\r\n\r\n```cpp\r\n             assert((script_num == i) != (script_num != i));\r\n             assert((script_num <= i) != script_num > i);\r\n             assert((script_num >= i) != (script_num < i));",
    "created_at": "2020-03-09T20:08:12Z",
    "updated_at": "2020-03-09T20:40:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389932248",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389932248"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389932248"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389932248/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 37,
    "original_line": 37,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389932341",
    "pull_request_review_id": 371492157,
    "id": 389932341,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzMjM0MQ==",
    "diff_hunk": "@@ -0,0 +1,165 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <limits>\n+#include <vector>\n+\n+namespace {\n+bool IsValidAddition(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} - rhs) || (rhs < 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} - rhs);\n+}\n+\n+bool IsValidSubtraction(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} + rhs) || (rhs < 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} + rhs);\n+}\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CScriptNum script_num = ConsumeScriptNum(fuzzed_data_provider);\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 18)) {\n+        case 0: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            assert((script_num == i) != (script_num != i));\n+            break;\n+        }\n+        case 1: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            assert((script_num <= i) != script_num > i);\n+            break;\n+        }\n+        case 2: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            assert((script_num >= i) != (script_num < i));\n+            break;\n+        }\n+        case 3: {\n+            const CScriptNum sn = ConsumeScriptNum(fuzzed_data_provider);\n+            assert((script_num == sn) != (script_num != sn));\n+            break;\n+        }\n+        case 4: {\n+            const CScriptNum sn = ConsumeScriptNum(fuzzed_data_provider);\n+            assert((script_num <= sn) != (script_num > sn));\n+            break;\n+        }\n+        case 5: {\n+            const CScriptNum sn = ConsumeScriptNum(fuzzed_data_provider);\n+            assert((script_num >= sn) != (script_num < sn));",
    "path": "src/test/fuzz/scriptnum_ops.cpp",
    "position": null,
    "original_position": 60,
    "commit_id": "e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "original_commit_id": "4532649328ad5056f9ae2bf99f3aba2212bdc785",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same here",
    "created_at": "2020-03-09T20:08:22Z",
    "updated_at": "2020-03-09T20:40:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389932341",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389932341"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389932341"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389932341/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 60,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389933947",
    "pull_request_review_id": 371492157,
    "id": 389933947,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzMzk0Nw==",
    "diff_hunk": "@@ -0,0 +1,165 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <limits>\n+#include <vector>\n+\n+namespace {\n+bool IsValidAddition(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} - rhs) || (rhs < 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} - rhs);\n+}\n+\n+bool IsValidSubtraction(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} + rhs) || (rhs < 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} + rhs);\n+}\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CScriptNum script_num = ConsumeScriptNum(fuzzed_data_provider);\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 18)) {\n+        case 0: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            assert((script_num == i) != (script_num != i));\n+            break;\n+        }\n+        case 1: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            assert((script_num <= i) != script_num > i);\n+            break;\n+        }\n+        case 2: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            assert((script_num >= i) != (script_num < i));\n+            break;\n+        }\n+        case 3: {\n+            const CScriptNum sn = ConsumeScriptNum(fuzzed_data_provider);\n+            assert((script_num == sn) != (script_num != sn));\n+            break;\n+        }\n+        case 4: {\n+            const CScriptNum sn = ConsumeScriptNum(fuzzed_data_provider);\n+            assert((script_num <= sn) != (script_num > sn));\n+            break;\n+        }\n+        case 5: {\n+            const CScriptNum sn = ConsumeScriptNum(fuzzed_data_provider);\n+            assert((script_num >= sn) != (script_num < sn));\n+            break;\n+        }\n+        case 6: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            // Avoid signed integer overflow:\n+            // script/script.h:264:93: runtime error: signed integer overflow: -2261405121394637306 + -9223372036854775802 cannot be represented in type 'long'\n+            if (IsValidAddition(script_num, CScriptNum{i})) {\n+                assert((script_num + i) - i == script_num);\n+            }\n+            // Avoid signed integer overflow:\n+            // script/script.h:265:93: runtime error: signed integer overflow: 9223371895120855039 - -9223372036854710486 cannot be represented in type 'long'\n+            if (IsValidSubtraction(script_num, CScriptNum{i})) {\n+                assert((script_num - i) + i == script_num);\n+            }\n+            break;\n+        }\n+        case 7: {\n+            const CScriptNum sn = ConsumeScriptNum(fuzzed_data_provider);\n+            // Avoid signed integer overflow:\n+            // script/script.h:264:93: runtime error: signed integer overflow: -9223126527765971126 + -9223372036854756825 cannot be represented in type 'long'\n+            if (IsValidAddition(script_num, sn)) {\n+                assert((script_num + sn) - sn == script_num);",
    "path": "src/test/fuzz/scriptnum_ops.cpp",
    "position": null,
    "original_position": 82,
    "commit_id": "e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "original_commit_id": "4532649328ad5056f9ae2bf99f3aba2212bdc785",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same here",
    "created_at": "2020-03-09T20:11:26Z",
    "updated_at": "2020-03-09T20:40:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389933947",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389933947"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389933947"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389933947/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 82,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389934739",
    "pull_request_review_id": 371492157,
    "id": 389934739,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzNDczOQ==",
    "diff_hunk": "@@ -0,0 +1,165 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <limits>\n+#include <vector>\n+\n+namespace {\n+bool IsValidAddition(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} - rhs) || (rhs < 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} - rhs);\n+}\n+\n+bool IsValidSubtraction(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} + rhs) || (rhs < 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} + rhs);\n+}\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CScriptNum script_num = ConsumeScriptNum(fuzzed_data_provider);\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 18)) {\n+        case 0: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            assert((script_num == i) != (script_num != i));\n+            break;\n+        }\n+        case 1: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            assert((script_num <= i) != script_num > i);\n+            break;\n+        }\n+        case 2: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            assert((script_num >= i) != (script_num < i));\n+            break;\n+        }\n+        case 3: {\n+            const CScriptNum sn = ConsumeScriptNum(fuzzed_data_provider);\n+            assert((script_num == sn) != (script_num != sn));\n+            break;\n+        }\n+        case 4: {\n+            const CScriptNum sn = ConsumeScriptNum(fuzzed_data_provider);\n+            assert((script_num <= sn) != (script_num > sn));\n+            break;\n+        }\n+        case 5: {\n+            const CScriptNum sn = ConsumeScriptNum(fuzzed_data_provider);\n+            assert((script_num >= sn) != (script_num < sn));\n+            break;\n+        }\n+        case 6: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            // Avoid signed integer overflow:\n+            // script/script.h:264:93: runtime error: signed integer overflow: -2261405121394637306 + -9223372036854775802 cannot be represented in type 'long'\n+            if (IsValidAddition(script_num, CScriptNum{i})) {\n+                assert((script_num + i) - i == script_num);\n+            }\n+            // Avoid signed integer overflow:\n+            // script/script.h:265:93: runtime error: signed integer overflow: 9223371895120855039 - -9223372036854710486 cannot be represented in type 'long'\n+            if (IsValidSubtraction(script_num, CScriptNum{i})) {\n+                assert((script_num - i) + i == script_num);\n+            }\n+            break;\n+        }\n+        case 7: {\n+            const CScriptNum sn = ConsumeScriptNum(fuzzed_data_provider);\n+            // Avoid signed integer overflow:\n+            // script/script.h:264:93: runtime error: signed integer overflow: -9223126527765971126 + -9223372036854756825 cannot be represented in type 'long'\n+            if (IsValidAddition(script_num, sn)) {\n+                assert((script_num + sn) - sn == script_num);\n+            }\n+            // Avoid signed integer overflow:\n+            // script/script.h:265:93: runtime error: signed integer overflow: 6052837899185946624 - -9223372036854775808 cannot be represented in type 'long'\n+            if (IsValidSubtraction(script_num, sn)) {\n+                assert((script_num - sn) + sn == script_num);\n+            }\n+            break;\n+        }\n+        case 8: {\n+            const CScriptNum random_script_num = ConsumeScriptNum(fuzzed_data_provider);\n+            if (!IsValidAddition(script_num, random_script_num)) {\n+                // Avoid assertion failure:\n+                // ./script/script.h:292: CScriptNum &CScriptNum::operator+=(const int64_t &): Assertion `rhs == 0 || (rhs > 0 && m_value <= std::numeric_limits<int64_t>::max() - rhs) || (rhs < 0 && m_value >= std::numeric_limits<int64_t>::min() - rhs)' failed.\n+                break;\n+            }\n+            script_num += random_script_num;\n+            break;\n+        }\n+        case 9: {\n+            const CScriptNum random_script_num = ConsumeScriptNum(fuzzed_data_provider);\n+            if (!IsValidSubtraction(script_num, random_script_num)) {\n+                // Avoid assertion failure:\n+                // ./script/script.h:300: CScriptNum &CScriptNum::operator-=(const int64_t &): Assertion `rhs == 0 || (rhs > 0 && m_value >= std::numeric_limits<int64_t>::min() + rhs) || (rhs < 0 && m_value <= std::numeric_limits<int64_t>::max() + rhs)' failed.\n+                break;\n+            }\n+            script_num -= random_script_num;\n+            break;\n+        }\n+        case 10:\n+            script_num = script_num & fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            break;\n+        case 11:\n+            script_num = script_num & ConsumeScriptNum(fuzzed_data_provider);\n+            break;\n+        case 12:\n+            script_num &= ConsumeScriptNum(fuzzed_data_provider);\n+            break;\n+        case 13:\n+            if (script_num == CScriptNum{std::numeric_limits<int64_t>::min()}) {\n+                // Avoid assertion failure:\n+                // ./script/script.h:279: CScriptNum CScriptNum::operator-() const: Assertion `m_value != std::numeric_limits<int64_t>::min()' failed.\n+                break;\n+            }\n+            script_num = -script_num;\n+            break;\n+        case 14:\n+            script_num = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            break;\n+        case 15: {\n+            const int64_t random_integer = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            if (!IsValidAddition(script_num, CScriptNum{random_integer})) {\n+                // Avoid assertion failure:\n+                // ./script/script.h:292: CScriptNum &CScriptNum::operator+=(const int64_t &): Assertion `rhs == 0 || (rhs > 0 && m_value <= std::numeric_limits<int64_t>::max() - rhs) || (rhs < 0 && m_value >= std::numeric_limits<int64_t>::min() - rhs)' failed.\n+                break;\n+            }\n+            script_num += random_integer;\n+            break;\n+        }\n+        case 16: {\n+            const int64_t random_integer = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            if (!IsValidSubtraction(script_num, CScriptNum{random_integer})) {\n+                // Avoid assertion failure:\n+                // ./script/script.h:300: CScriptNum &CScriptNum::operator-=(const int64_t &): Assertion `rhs == 0 || (rhs > 0 && m_value >= std::numeric_limits<int64_t>::min() + rhs) || (rhs < 0 && m_value <= std::numeric_limits<int64_t>::max() + rhs)' failed.\n+                break;\n+            }\n+            script_num -= random_integer;\n+            break;\n+        }\n+        case 17:\n+            script_num &= fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            break;\n+        case 18: {\n+            // Avoid negation failure:\n+            // script/script.h:332:35: runtime error: negation of -9223372036854775808 cannot be represented in type 'int64_t' (aka 'long'); cast to an unsigned type to negate this value to itself\n+            if (script_num == CScriptNum{std::numeric_limits<int64_t>::min()}) {\n+                break;\n+            }\n+            (void)script_num.getvch();",
    "path": "src/test/fuzz/scriptnum_ops.cpp",
    "position": null,
    "original_position": 160,
    "commit_id": "e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "original_commit_id": "4532649328ad5056f9ae2bf99f3aba2212bdc785",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Also in commit 4532649:\r\n\r\nNo input is consumed from the fuzzer, so this doesn't need to be special cased and can be executed unconditionally?",
    "created_at": "2020-03-09T20:13:02Z",
    "updated_at": "2020-03-09T20:40:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389934739",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389934739"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389934739"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389934739/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 160,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389948687",
    "pull_request_review_id": 371513106,
    "id": 389948687,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk0ODY4Nw==",
    "diff_hunk": "@@ -0,0 +1,165 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <limits>\n+#include <vector>\n+\n+namespace {\n+bool IsValidAddition(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} - rhs) || (rhs < 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} - rhs);\n+}\n+\n+bool IsValidSubtraction(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} + rhs) || (rhs < 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} + rhs);\n+}\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CScriptNum script_num = ConsumeScriptNum(fuzzed_data_provider);\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 18)) {\n+        case 0: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            assert((script_num == i) != (script_num != i));\n+            break;\n+        }\n+        case 1: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            assert((script_num <= i) != script_num > i);\n+            break;\n+        }\n+        case 2: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            assert((script_num >= i) != (script_num < i));",
    "path": "src/test/fuzz/scriptnum_ops.cpp",
    "position": 37,
    "original_position": 45,
    "commit_id": "e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "original_commit_id": "4532649328ad5056f9ae2bf99f3aba2212bdc785",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh, of course. Now fixed. Thanks!",
    "created_at": "2020-03-09T20:40:36Z",
    "updated_at": "2020-03-09T20:40:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389948687",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389948687"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389948687"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389948687/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 37,
    "original_line": 37,
    "side": "RIGHT",
    "in_reply_to_id": 389932248
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389948796",
    "pull_request_review_id": 371513232,
    "id": 389948796,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk0ODc5Ng==",
    "diff_hunk": "@@ -0,0 +1,165 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <limits>\n+#include <vector>\n+\n+namespace {\n+bool IsValidAddition(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} - rhs) || (rhs < 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} - rhs);\n+}\n+\n+bool IsValidSubtraction(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} + rhs) || (rhs < 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} + rhs);\n+}\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CScriptNum script_num = ConsumeScriptNum(fuzzed_data_provider);\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 18)) {\n+        case 0: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            assert((script_num == i) != (script_num != i));\n+            break;\n+        }\n+        case 1: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            assert((script_num <= i) != script_num > i);\n+            break;\n+        }\n+        case 2: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            assert((script_num >= i) != (script_num < i));\n+            break;\n+        }\n+        case 3: {\n+            const CScriptNum sn = ConsumeScriptNum(fuzzed_data_provider);\n+            assert((script_num == sn) != (script_num != sn));\n+            break;\n+        }\n+        case 4: {\n+            const CScriptNum sn = ConsumeScriptNum(fuzzed_data_provider);\n+            assert((script_num <= sn) != (script_num > sn));\n+            break;\n+        }\n+        case 5: {\n+            const CScriptNum sn = ConsumeScriptNum(fuzzed_data_provider);\n+            assert((script_num >= sn) != (script_num < sn));\n+            break;\n+        }\n+        case 6: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            // Avoid signed integer overflow:\n+            // script/script.h:264:93: runtime error: signed integer overflow: -2261405121394637306 + -9223372036854775802 cannot be represented in type 'long'\n+            if (IsValidAddition(script_num, CScriptNum{i})) {\n+                assert((script_num + i) - i == script_num);\n+            }\n+            // Avoid signed integer overflow:\n+            // script/script.h:265:93: runtime error: signed integer overflow: 9223371895120855039 - -9223372036854710486 cannot be represented in type 'long'\n+            if (IsValidSubtraction(script_num, CScriptNum{i})) {\n+                assert((script_num - i) + i == script_num);\n+            }\n+            break;\n+        }\n+        case 7: {\n+            const CScriptNum sn = ConsumeScriptNum(fuzzed_data_provider);\n+            // Avoid signed integer overflow:\n+            // script/script.h:264:93: runtime error: signed integer overflow: -9223126527765971126 + -9223372036854756825 cannot be represented in type 'long'\n+            if (IsValidAddition(script_num, sn)) {\n+                assert((script_num + sn) - sn == script_num);\n+            }\n+            // Avoid signed integer overflow:\n+            // script/script.h:265:93: runtime error: signed integer overflow: 6052837899185946624 - -9223372036854775808 cannot be represented in type 'long'\n+            if (IsValidSubtraction(script_num, sn)) {\n+                assert((script_num - sn) + sn == script_num);\n+            }\n+            break;\n+        }\n+        case 8: {\n+            const CScriptNum random_script_num = ConsumeScriptNum(fuzzed_data_provider);\n+            if (!IsValidAddition(script_num, random_script_num)) {\n+                // Avoid assertion failure:\n+                // ./script/script.h:292: CScriptNum &CScriptNum::operator+=(const int64_t &): Assertion `rhs == 0 || (rhs > 0 && m_value <= std::numeric_limits<int64_t>::max() - rhs) || (rhs < 0 && m_value >= std::numeric_limits<int64_t>::min() - rhs)' failed.\n+                break;\n+            }\n+            script_num += random_script_num;\n+            break;\n+        }\n+        case 9: {\n+            const CScriptNum random_script_num = ConsumeScriptNum(fuzzed_data_provider);\n+            if (!IsValidSubtraction(script_num, random_script_num)) {\n+                // Avoid assertion failure:\n+                // ./script/script.h:300: CScriptNum &CScriptNum::operator-=(const int64_t &): Assertion `rhs == 0 || (rhs > 0 && m_value >= std::numeric_limits<int64_t>::min() + rhs) || (rhs < 0 && m_value <= std::numeric_limits<int64_t>::max() + rhs)' failed.\n+                break;\n+            }\n+            script_num -= random_script_num;\n+            break;\n+        }\n+        case 10:\n+            script_num = script_num & fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            break;\n+        case 11:\n+            script_num = script_num & ConsumeScriptNum(fuzzed_data_provider);\n+            break;\n+        case 12:\n+            script_num &= ConsumeScriptNum(fuzzed_data_provider);\n+            break;\n+        case 13:\n+            if (script_num == CScriptNum{std::numeric_limits<int64_t>::min()}) {\n+                // Avoid assertion failure:\n+                // ./script/script.h:279: CScriptNum CScriptNum::operator-() const: Assertion `m_value != std::numeric_limits<int64_t>::min()' failed.\n+                break;\n+            }\n+            script_num = -script_num;\n+            break;\n+        case 14:\n+            script_num = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            break;\n+        case 15: {\n+            const int64_t random_integer = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            if (!IsValidAddition(script_num, CScriptNum{random_integer})) {\n+                // Avoid assertion failure:\n+                // ./script/script.h:292: CScriptNum &CScriptNum::operator+=(const int64_t &): Assertion `rhs == 0 || (rhs > 0 && m_value <= std::numeric_limits<int64_t>::max() - rhs) || (rhs < 0 && m_value >= std::numeric_limits<int64_t>::min() - rhs)' failed.\n+                break;\n+            }\n+            script_num += random_integer;\n+            break;\n+        }\n+        case 16: {\n+            const int64_t random_integer = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            if (!IsValidSubtraction(script_num, CScriptNum{random_integer})) {\n+                // Avoid assertion failure:\n+                // ./script/script.h:300: CScriptNum &CScriptNum::operator-=(const int64_t &): Assertion `rhs == 0 || (rhs > 0 && m_value >= std::numeric_limits<int64_t>::min() + rhs) || (rhs < 0 && m_value <= std::numeric_limits<int64_t>::max() + rhs)' failed.\n+                break;\n+            }\n+            script_num -= random_integer;\n+            break;\n+        }\n+        case 17:\n+            script_num &= fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            break;\n+        case 18: {\n+            // Avoid negation failure:\n+            // script/script.h:332:35: runtime error: negation of -9223372036854775808 cannot be represented in type 'int64_t' (aka 'long'); cast to an unsigned type to negate this value to itself\n+            if (script_num == CScriptNum{std::numeric_limits<int64_t>::min()}) {\n+                break;\n+            }\n+            (void)script_num.getvch();",
    "path": "src/test/fuzz/scriptnum_ops.cpp",
    "position": null,
    "original_position": 160,
    "commit_id": "e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "original_commit_id": "4532649328ad5056f9ae2bf99f3aba2212bdc785",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "True! Fixed.",
    "created_at": "2020-03-09T20:40:47Z",
    "updated_at": "2020-03-09T20:40:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389948796",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389948796"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18176#discussion_r389948796"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18176"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/389948796/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 160,
    "side": "RIGHT",
    "in_reply_to_id": 389934739
  }
]