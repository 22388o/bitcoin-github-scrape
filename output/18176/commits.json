[
  {
    "sha": "eb7c50ca1f4eafed4bb9a20d3012776545a6a433",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjdjNTBjYTFmNGVhZmVkNGJiOWEyMGQzMDEyNzc2NTQ1YTZhNDMz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-02-19T16:42:42Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-09T19:24:50Z"
      },
      "message": "tests: Add common Consume* fuzzing functions",
      "tree": {
        "sha": "7f348c32720b22ca51c5ed0fa0ee809150513adb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f348c32720b22ca51c5ed0fa0ee809150513adb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb7c50ca1f4eafed4bb9a20d3012776545a6a433",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb7c50ca1f4eafed4bb9a20d3012776545a6a433",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb7c50ca1f4eafed4bb9a20d3012776545a6a433",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb7c50ca1f4eafed4bb9a20d3012776545a6a433/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5518eeec2727d40e1105901a8751bf584ab69402",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5518eeec2727d40e1105901a8751bf584ab69402",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5518eeec2727d40e1105901a8751bf584ab69402"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a2b7d804eae77bd3bbfda76f739b937ce8c67216",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb7c50ca1f4eafed4bb9a20d3012776545a6a433/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb7c50ca1f4eafed4bb9a20d3012776545a6a433/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=eb7c50ca1f4eafed4bb9a20d3012776545a6a433",
        "patch": "@@ -7,9 +7,11 @@\n \n #include <attributes.h>\n #include <optional.h>\n+#include <script/script.h>\n #include <serialize.h>\n #include <streams.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n #include <version.h>\n \n #include <cstdint>\n@@ -36,4 +38,20 @@ NODISCARD inline Optional<T> ConsumeDeserializable(FuzzedDataProvider& fuzzed_da\n     return obj;\n }\n \n+NODISCARD inline opcodetype ConsumeOpcodeType(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    return static_cast<opcodetype>(fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(0, MAX_OPCODE));\n+}\n+\n+NODISCARD inline CScript ConsumeScript(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    const std::vector<uint8_t> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    return {b.begin(), b.end()};\n+}\n+\n+NODISCARD inline CScriptNum ConsumeScriptNum(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    return CScriptNum{fuzzed_data_provider.ConsumeIntegral<int64_t>()};\n+}\n+\n #endif // BITCOIN_TEST_FUZZ_UTIL_H"
      }
    ]
  },
  {
    "sha": "65a52a002475056183ea8ee1a42b78aec7d68583",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWE1MmEwMDI0NzUwNTYxODNlYThlZTFhNDJiNzhhZWM3ZDY4NTgz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-02-18T16:41:16Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-09T19:24:50Z"
      },
      "message": "tests: Add fuzzing harness for CScript operations",
      "tree": {
        "sha": "4fca148892ecdc5ee13938794b621870ab344188",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4fca148892ecdc5ee13938794b621870ab344188"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65a52a002475056183ea8ee1a42b78aec7d68583",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65a52a002475056183ea8ee1a42b78aec7d68583",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65a52a002475056183ea8ee1a42b78aec7d68583",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65a52a002475056183ea8ee1a42b78aec7d68583/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb7c50ca1f4eafed4bb9a20d3012776545a6a433",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb7c50ca1f4eafed4bb9a20d3012776545a6a433",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb7c50ca1f4eafed4bb9a20d3012776545a6a433"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 74,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e11e214e4084d404128e91bd587f5885400f1719",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65a52a002475056183ea8ee1a42b78aec7d68583/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65a52a002475056183ea8ee1a42b78aec7d68583/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=65a52a002475056183ea8ee1a42b78aec7d68583",
        "patch": "@@ -61,6 +61,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/script \\\n   test/fuzz/script_deserialize \\\n   test/fuzz/script_flags \\\n+  test/fuzz/script_ops \\\n   test/fuzz/service_deserialize \\\n   test/fuzz/spanparsing \\\n   test/fuzz/strprintf \\\n@@ -590,6 +591,12 @@ test_fuzz_script_flags_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_script_flags_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_script_flags_SOURCES = $(FUZZ_SUITE) test/fuzz/script_flags.cpp\n \n+test_fuzz_script_ops_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_script_ops_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_script_ops_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_script_ops_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_script_ops_SOURCES = $(FUZZ_SUITE) test/fuzz/script_ops.cpp\n+\n test_fuzz_service_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSERVICE_DESERIALIZE=1\n test_fuzz_service_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_service_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "0cd129ba7a4108a57c0256a0ab18fe79e80c8f84",
        "filename": "src/test/fuzz/script_ops.cpp",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65a52a002475056183ea8ee1a42b78aec7d68583/src/test/fuzz/script_ops.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65a52a002475056183ea8ee1a42b78aec7d68583/src/test/fuzz/script_ops.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_ops.cpp?ref=65a52a002475056183ea8ee1a42b78aec7d68583",
        "patch": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CScript script = ConsumeScript(fuzzed_data_provider);\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 7)) {\n+        case 0:\n+            script += ConsumeScript(fuzzed_data_provider);\n+            break;\n+        case 1:\n+            script = script + ConsumeScript(fuzzed_data_provider);\n+            break;\n+        case 2:\n+            script << fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            break;\n+        case 3:\n+            script << ConsumeOpcodeType(fuzzed_data_provider);\n+            break;\n+        case 4:\n+            script << ConsumeScriptNum(fuzzed_data_provider);\n+            break;\n+        case 5:\n+            script << ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            break;\n+        case 6:\n+            script.clear();\n+            break;\n+        case 7: {\n+            (void)script.GetSigOpCount(false);\n+            (void)script.GetSigOpCount(true);\n+            (void)script.GetSigOpCount(script);\n+            (void)script.HasValidOps();\n+            (void)script.IsPayToScriptHash();\n+            (void)script.IsPayToWitnessScriptHash();\n+            (void)script.IsPushOnly();\n+            (void)script.IsUnspendable();\n+            {\n+                CScript::const_iterator pc = script.begin();\n+                opcodetype opcode;\n+                (void)script.GetOp(pc, opcode);\n+                std::vector<uint8_t> data;\n+                (void)script.GetOp(pc, opcode, data);\n+                (void)script.IsPushOnly(pc);\n+            }\n+            {\n+                int version;\n+                std::vector<uint8_t> program;\n+                (void)script.IsWitnessProgram(version, program);\n+            }\n+            break;\n+        }\n+        }\n+    }\n+}"
      }
    ]
  },
  {
    "sha": "e7ddbd98937412b2e8b7a3dfacdcacfcbb1d9148",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplN2RkYmQ5ODkzNzQxMmIyZThiN2EzZGZhY2RjYWNmY2JiMWQ5MTQ4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-02-19T15:18:13Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-09T20:39:48Z"
      },
      "message": "tests: Add fuzzing harness for CScriptNum operations",
      "tree": {
        "sha": "87deb25ddf0995be14324e56046279aff281144a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87deb25ddf0995be14324e56046279aff281144a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7ddbd98937412b2e8b7a3dfacdcacfcbb1d9148",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7ddbd98937412b2e8b7a3dfacdcacfcbb1d9148",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7ddbd98937412b2e8b7a3dfacdcacfcbb1d9148",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7ddbd98937412b2e8b7a3dfacdcacfcbb1d9148/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65a52a002475056183ea8ee1a42b78aec7d68583",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65a52a002475056183ea8ee1a42b78aec7d68583",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65a52a002475056183ea8ee1a42b78aec7d68583"
      }
    ],
    "stats": {
      "total": 144,
      "additions": 144,
      "deletions": 0
    },
    "files": [
      {
        "sha": "669ebcbc485a3d5ecc90f3db5340f80513da2a03",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7ddbd98937412b2e8b7a3dfacdcacfcbb1d9148/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7ddbd98937412b2e8b7a3dfacdcacfcbb1d9148/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=e7ddbd98937412b2e8b7a3dfacdcacfcbb1d9148",
        "patch": "@@ -62,6 +62,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/script_deserialize \\\n   test/fuzz/script_flags \\\n   test/fuzz/script_ops \\\n+  test/fuzz/scriptnum_ops \\\n   test/fuzz/service_deserialize \\\n   test/fuzz/spanparsing \\\n   test/fuzz/strprintf \\\n@@ -597,6 +598,12 @@ test_fuzz_script_ops_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_script_ops_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_script_ops_SOURCES = $(FUZZ_SUITE) test/fuzz/script_ops.cpp\n \n+test_fuzz_scriptnum_ops_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_scriptnum_ops_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_scriptnum_ops_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_scriptnum_ops_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_scriptnum_ops_SOURCES = $(FUZZ_SUITE) test/fuzz/scriptnum_ops.cpp\n+\n test_fuzz_service_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSERVICE_DESERIALIZE=1\n test_fuzz_service_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_service_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "db44bb9e19ac4d5750d06dc8afc36e236afd7884",
        "filename": "src/test/fuzz/scriptnum_ops.cpp",
        "status": "added",
        "additions": 137,
        "deletions": 0,
        "changes": 137,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7ddbd98937412b2e8b7a3dfacdcacfcbb1d9148/src/test/fuzz/scriptnum_ops.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7ddbd98937412b2e8b7a3dfacdcacfcbb1d9148/src/test/fuzz/scriptnum_ops.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/scriptnum_ops.cpp?ref=e7ddbd98937412b2e8b7a3dfacdcacfcbb1d9148",
        "patch": "@@ -0,0 +1,137 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <limits>\n+#include <vector>\n+\n+namespace {\n+bool IsValidAddition(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} - rhs) || (rhs < 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} - rhs);\n+}\n+\n+bool IsValidSubtraction(const CScriptNum& lhs, const CScriptNum& rhs)\n+{\n+    return rhs == 0 || (rhs > 0 && lhs >= CScriptNum{std::numeric_limits<int64_t>::min()} + rhs) || (rhs < 0 && lhs <= CScriptNum{std::numeric_limits<int64_t>::max()} + rhs);\n+}\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CScriptNum script_num = ConsumeScriptNum(fuzzed_data_provider);\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 11)) {\n+        case 0: {\n+            const int64_t i = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            assert((script_num == i) != (script_num != i));\n+            assert((script_num <= i) != script_num > i);\n+            assert((script_num >= i) != (script_num < i));\n+            // Avoid signed integer overflow:\n+            // script/script.h:264:93: runtime error: signed integer overflow: -2261405121394637306 + -9223372036854775802 cannot be represented in type 'long'\n+            if (IsValidAddition(script_num, CScriptNum{i})) {\n+                assert((script_num + i) - i == script_num);\n+            }\n+            // Avoid signed integer overflow:\n+            // script/script.h:265:93: runtime error: signed integer overflow: 9223371895120855039 - -9223372036854710486 cannot be represented in type 'long'\n+            if (IsValidSubtraction(script_num, CScriptNum{i})) {\n+                assert((script_num - i) + i == script_num);\n+            }\n+            break;\n+        }\n+        case 1: {\n+            const CScriptNum random_script_num = ConsumeScriptNum(fuzzed_data_provider);\n+            assert((script_num == random_script_num) != (script_num != random_script_num));\n+            assert((script_num <= random_script_num) != (script_num > random_script_num));\n+            assert((script_num >= random_script_num) != (script_num < random_script_num));\n+            // Avoid signed integer overflow:\n+            // script/script.h:264:93: runtime error: signed integer overflow: -9223126527765971126 + -9223372036854756825 cannot be represented in type 'long'\n+            if (IsValidAddition(script_num, random_script_num)) {\n+                assert((script_num + random_script_num) - random_script_num == script_num);\n+            }\n+            // Avoid signed integer overflow:\n+            // script/script.h:265:93: runtime error: signed integer overflow: 6052837899185946624 - -9223372036854775808 cannot be represented in type 'long'\n+            if (IsValidSubtraction(script_num, random_script_num)) {\n+                assert((script_num - random_script_num) + random_script_num == script_num);\n+            }\n+            break;\n+        }\n+        case 2: {\n+            const CScriptNum random_script_num = ConsumeScriptNum(fuzzed_data_provider);\n+            if (!IsValidAddition(script_num, random_script_num)) {\n+                // Avoid assertion failure:\n+                // ./script/script.h:292: CScriptNum &CScriptNum::operator+=(const int64_t &): Assertion `rhs == 0 || (rhs > 0 && m_value <= std::numeric_limits<int64_t>::max() - rhs) || (rhs < 0 && m_value >= std::numeric_limits<int64_t>::min() - rhs)' failed.\n+                break;\n+            }\n+            script_num += random_script_num;\n+            break;\n+        }\n+        case 3: {\n+            const CScriptNum random_script_num = ConsumeScriptNum(fuzzed_data_provider);\n+            if (!IsValidSubtraction(script_num, random_script_num)) {\n+                // Avoid assertion failure:\n+                // ./script/script.h:300: CScriptNum &CScriptNum::operator-=(const int64_t &): Assertion `rhs == 0 || (rhs > 0 && m_value >= std::numeric_limits<int64_t>::min() + rhs) || (rhs < 0 && m_value <= std::numeric_limits<int64_t>::max() + rhs)' failed.\n+                break;\n+            }\n+            script_num -= random_script_num;\n+            break;\n+        }\n+        case 4:\n+            script_num = script_num & fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            break;\n+        case 5:\n+            script_num = script_num & ConsumeScriptNum(fuzzed_data_provider);\n+            break;\n+        case 6:\n+            script_num &= ConsumeScriptNum(fuzzed_data_provider);\n+            break;\n+        case 7:\n+            if (script_num == CScriptNum{std::numeric_limits<int64_t>::min()}) {\n+                // Avoid assertion failure:\n+                // ./script/script.h:279: CScriptNum CScriptNum::operator-() const: Assertion `m_value != std::numeric_limits<int64_t>::min()' failed.\n+                break;\n+            }\n+            script_num = -script_num;\n+            break;\n+        case 8:\n+            script_num = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            break;\n+        case 9: {\n+            const int64_t random_integer = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            if (!IsValidAddition(script_num, CScriptNum{random_integer})) {\n+                // Avoid assertion failure:\n+                // ./script/script.h:292: CScriptNum &CScriptNum::operator+=(const int64_t &): Assertion `rhs == 0 || (rhs > 0 && m_value <= std::numeric_limits<int64_t>::max() - rhs) || (rhs < 0 && m_value >= std::numeric_limits<int64_t>::min() - rhs)' failed.\n+                break;\n+            }\n+            script_num += random_integer;\n+            break;\n+        }\n+        case 10: {\n+            const int64_t random_integer = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            if (!IsValidSubtraction(script_num, CScriptNum{random_integer})) {\n+                // Avoid assertion failure:\n+                // ./script/script.h:300: CScriptNum &CScriptNum::operator-=(const int64_t &): Assertion `rhs == 0 || (rhs > 0 && m_value >= std::numeric_limits<int64_t>::min() + rhs) || (rhs < 0 && m_value <= std::numeric_limits<int64_t>::max() + rhs)' failed.\n+                break;\n+            }\n+            script_num -= random_integer;\n+            break;\n+        }\n+        case 11:\n+            script_num &= fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+            break;\n+        }\n+        // Avoid negation failure:\n+        // script/script.h:332:35: runtime error: negation of -9223372036854775808 cannot be represented in type 'int64_t' (aka 'long'); cast to an unsigned type to negate this value to itself\n+        if (script_num != CScriptNum{std::numeric_limits<int64_t>::min()}) {\n+            (void)script_num.getvch();\n+        }\n+    }\n+}"
      }
    ]
  },
  {
    "sha": "e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzdmNTM2NDhlM2FjYzZhZWE3NWFkYWZlYzRkZTJiZGJkOGNiMjkz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-02-26T20:04:23Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-09T20:39:48Z"
      },
      "message": "Make lifetime correctness easier to see (avoid reference lifetime extension)",
      "tree": {
        "sha": "3936b31a4ab111274c7e25971b956741738260f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3936b31a4ab111274c7e25971b956741738260f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e37f53648e3acc6aea75adafec4de2bdbd8cb293",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e37f53648e3acc6aea75adafec4de2bdbd8cb293",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e37f53648e3acc6aea75adafec4de2bdbd8cb293/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7ddbd98937412b2e8b7a3dfacdcacfcbb1d9148",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7ddbd98937412b2e8b7a3dfacdcacfcbb1d9148",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7ddbd98937412b2e8b7a3dfacdcacfcbb1d9148"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d1112f8e621267e732421209c11dfae6ab5ee746",
        "filename": "src/test/fuzz/bloom_filter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e37f53648e3acc6aea75adafec4de2bdbd8cb293/src/test/fuzz/bloom_filter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e37f53648e3acc6aea75adafec4de2bdbd8cb293/src/test/fuzz/bloom_filter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/bloom_filter.cpp?ref=e37f53648e3acc6aea75adafec4de2bdbd8cb293",
        "patch": "@@ -27,7 +27,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     while (fuzzed_data_provider.remaining_bytes() > 0) {\n         switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 6)) {\n         case 0: {\n-            const std::vector<unsigned char>& b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            const std::vector<unsigned char> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n             (void)bloom_filter.contains(b);\n             bloom_filter.insert(b);\n             const bool present = bloom_filter.contains(b);"
      },
      {
        "sha": "3b37321977262e5d1424d1ec93a5ae0297f842f8",
        "filename": "src/test/fuzz/rolling_bloom_filter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e37f53648e3acc6aea75adafec4de2bdbd8cb293/src/test/fuzz/rolling_bloom_filter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e37f53648e3acc6aea75adafec4de2bdbd8cb293/src/test/fuzz/rolling_bloom_filter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/rolling_bloom_filter.cpp?ref=e37f53648e3acc6aea75adafec4de2bdbd8cb293",
        "patch": "@@ -24,7 +24,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     while (fuzzed_data_provider.remaining_bytes() > 0) {\n         switch (fuzzed_data_provider.ConsumeIntegralInRange(0, 2)) {\n         case 0: {\n-            const std::vector<unsigned char>& b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            const std::vector<unsigned char> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n             (void)rolling_bloom_filter.contains(b);\n             rolling_bloom_filter.insert(b);\n             const bool present = rolling_bloom_filter.contains(b);"
      },
      {
        "sha": "2f4aa9ad2baf523a93503073412fa54624fe35c3",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e37f53648e3acc6aea75adafec4de2bdbd8cb293/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e37f53648e3acc6aea75adafec4de2bdbd8cb293/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=e37f53648e3acc6aea75adafec4de2bdbd8cb293",
        "patch": "@@ -27,7 +27,7 @@ NODISCARD inline std::vector<uint8_t> ConsumeRandomLengthByteVector(FuzzedDataPr\n template <typename T>\n NODISCARD inline Optional<T> ConsumeDeserializable(FuzzedDataProvider& fuzzed_data_provider, size_t max_length = 4096) noexcept\n {\n-    const std::vector<uint8_t>& buffer = ConsumeRandomLengthByteVector(fuzzed_data_provider, max_length);\n+    const std::vector<uint8_t> buffer = ConsumeRandomLengthByteVector(fuzzed_data_provider, max_length);\n     CDataStream ds{buffer, SER_NETWORK, INIT_PROTO_VERSION};\n     T obj;\n     try {"
      }
    ]
  }
]