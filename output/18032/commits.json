[
  {
    "sha": "19a354b11f85a3c6c81ff83bf702bf7a40cf5046",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOWEzNTRiMTFmODVhM2M2YzgxZmY4M2JmNzAyYmY3YTQwY2Y1MDQ2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-03-25T21:00:00Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-01-31T04:55:36Z"
      },
      "message": "Output a descriptor in createmultisig and addmultisigaddress",
      "tree": {
        "sha": "92498c0bc6745e0eb18f2b41cbc5f7f0256f737a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92498c0bc6745e0eb18f2b41cbc5f7f0256f737a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19a354b11f85a3c6c81ff83bf702bf7a40cf5046",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19a354b11f85a3c6c81ff83bf702bf7a40cf5046",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19a354b11f85a3c6c81ff83bf702bf7a40cf5046",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19a354b11f85a3c6c81ff83bf702bf7a40cf5046/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e1bf71064ccb98d0684753e844c80d6da421287",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e1bf71064ccb98d0684753e844c80d6da421287",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e1bf71064ccb98d0684753e844c80d6da421287"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 33,
      "deletions": 1
    },
    "files": [
      {
        "sha": "181ff77e5080abce1c4f3fb2116afdf8649590e2",
        "filename": "doc/descriptors.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19a354b11f85a3c6c81ff83bf702bf7a40cf5046/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19a354b11f85a3c6c81ff83bf702bf7a40cf5046/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=19a354b11f85a3c6c81ff83bf702bf7a40cf5046",
        "patch": "@@ -17,6 +17,7 @@ Supporting RPCs are:\n   (`regtest` only, since v0.19).\n - `utxoupdatepsbt` takes as input descriptors to add information to the psbt\n   (since v0.19).\n+- `createmultisig` and `addmultisigaddress` return descriptors as well (since v0.20)\n \n This document describes the language. For the specifics on usage, see the RPC\n documentation for the functions mentioned above."
      },
      {
        "sha": "f360cb752503b6cf328d5746b66019f21667f402",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19a354b11f85a3c6c81ff83bf702bf7a40cf5046/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19a354b11f85a3c6c81ff83bf702bf7a40cf5046/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=19a354b11f85a3c6c81ff83bf702bf7a40cf5046",
        "patch": "@@ -83,6 +83,7 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n             \"{\\n\"\n             \"  \\\"address\\\":\\\"multisigaddress\\\",  (string) The value of the new multisig address.\\n\"\n             \"  \\\"redeemScript\\\":\\\"script\\\"       (string) The string value of the hex-encoded redemption script.\\n\"\n+            \"  \\\"descriptor\\\":\\\"descriptor\\\"     (string) The descriptor for this multisig\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n@@ -119,9 +120,13 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     CScript inner;\n     const CTxDestination dest = AddAndGetMultisigDestination(required, pubkeys, output_type, keystore, inner);\n \n+    // Make the descriptor\n+    std::unique_ptr<Descriptor> descriptor = InferDescriptor(GetScriptForDestination(dest), keystore);\n+\n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"address\", EncodeDestination(dest));\n     result.pushKV(\"redeemScript\", HexStr(inner.begin(), inner.end()));\n+    result.pushKV(\"descriptor\", descriptor->ToString());\n \n     return result;\n }"
      },
      {
        "sha": "36f1110f2a6dcb8299a2391877a160f148b08dd7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19a354b11f85a3c6c81ff83bf702bf7a40cf5046/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19a354b11f85a3c6c81ff83bf702bf7a40cf5046/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=19a354b11f85a3c6c81ff83bf702bf7a40cf5046",
        "patch": "@@ -974,6 +974,7 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n             \"{\\n\"\n             \"  \\\"address\\\":\\\"multisigaddress\\\",    (string) The value of the new multisig address.\\n\"\n             \"  \\\"redeemScript\\\":\\\"script\\\"         (string) The string value of the hex-encoded redemption script.\\n\"\n+            \"  \\\"descriptor\\\":\\\"descriptor\\\"     (string) The descriptor for this multisig\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n@@ -1018,9 +1019,13 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n     CTxDestination dest = AddAndGetMultisigDestination(required, pubkeys, output_type, spk_man, inner);\n     pwallet->SetAddressBook(dest, label, \"send\");\n \n+    // Make the descriptor\n+    std::unique_ptr<Descriptor> descriptor = InferDescriptor(GetScriptForDestination(dest), spk_man);\n+\n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"address\", EncodeDestination(dest));\n     result.pushKV(\"redeemScript\", HexStr(inner.begin(), inner.end()));\n+    result.pushKV(\"descriptor\", descriptor->ToString());\n     return result;\n }\n "
      },
      {
        "sha": "a9837161777ffd8dfc3ada008cfa7e1e5a405d64",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19a354b11f85a3c6c81ff83bf702bf7a40cf5046/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19a354b11f85a3c6c81ff83bf702bf7a40cf5046/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=19a354b11f85a3c6c81ff83bf702bf7a40cf5046",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test multisig RPCs\"\"\"\n \n-from test_framework.descriptors import descsum_create\n+from test_framework.descriptors import descsum_create, drop_origins\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_raises_rpc_error,\n@@ -116,16 +116,28 @@ def checkbalances(self):\n     def do_multisig(self):\n         node0, node1, node2 = self.nodes\n \n+        # Construct the expected descriptor\n+        desc = 'multi({},{})'.format(self.nsigs, ','.join(self.pub))\n+        if self.output_type == 'legacy':\n+            desc = 'sh({})'.format(desc)\n+        elif self.output_type == 'p2sh-segwit':\n+            desc = 'sh(wsh({}))'.format(desc)\n+        elif self.output_type == 'bech32':\n+            desc = 'wsh({})'.format(desc)\n+        desc = descsum_create(desc)\n+\n         msig = node2.createmultisig(self.nsigs, self.pub, self.output_type)\n         madd = msig[\"address\"]\n         mredeem = msig[\"redeemScript\"]\n+        assert_equal(desc, msig['descriptor'])\n         if self.output_type == 'bech32':\n             assert madd[0:4] == \"bcrt\"  # actually a bech32 address\n \n         # compare against addmultisigaddress\n         msigw = node1.addmultisigaddress(self.nsigs, self.pub, None, self.output_type)\n         maddw = msigw[\"address\"]\n         mredeemw = msigw[\"redeemScript\"]\n+        assert_equal(desc, drop_origins(msigw['descriptor']))\n         # addmultisigiaddress and createmultisig work the same\n         assert maddw == madd\n         assert mredeemw == mredeem"
      },
      {
        "sha": "46b405749bda0b1383bd8e1f78e08c05d1d76fb5",
        "filename": "test/functional/test_framework/descriptors.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19a354b11f85a3c6c81ff83bf702bf7a40cf5046/test/functional/test_framework/descriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19a354b11f85a3c6c81ff83bf702bf7a40cf5046/test/functional/test_framework/descriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/descriptors.py?ref=19a354b11f85a3c6c81ff83bf702bf7a40cf5046",
        "patch": "@@ -4,6 +4,8 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Utility functions related to output descriptors\"\"\"\n \n+import re\n+\n INPUT_CHARSET = \"0123456789()[],'/*abcdefgh@:$%{}IJKLMNOPQRSTUVWXYZ&+-.;<=>?!^_|~ijklmnopqrstuvwxyzABCDEFGH`#\\\"\\\\ \"\n CHECKSUM_CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n GENERATOR = [0xf5dee51989, 0xa9fdca3312, 0x1bab10e32d, 0x3706b1677a, 0x644d626ffd]\n@@ -53,3 +55,10 @@ def descsum_check(s, require=True):\n         return False\n     symbols = descsum_expand(s[:-9]) + [CHECKSUM_CHARSET.find(x) for x in s[-8:]]\n     return descsum_polymod(symbols) == 1\n+\n+def drop_origins(s):\n+    '''Drop the key origins from a descriptor'''\n+    desc = re.sub(r'\\[.+?\\]', '', s)\n+    if '#' in s:\n+        desc = desc[:desc.index('#')]\n+    return descsum_create(desc)"
      }
    ]
  }
]