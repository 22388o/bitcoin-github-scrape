sipa,2015-03-17T09:53:39Z,"There is no need for a reject code, as this can never trigger for peer-to-peer initiated transactions, so it can never result in a reject message.\n\nIf you really need a reject code, add a REJECT_LOCAL or something, reserved for conditions that can only trigger locally (and mark it is an implementation detail, not related to BIP 61.\n",https://github.com/bitcoin/bitcoin/pull/5913#issuecomment-82251598,82251598,
shaulkf,2015-03-17T13:02:38Z,"@sipa I believe there should be a code, in case RPC users want to catch the error without having to match the text. Any convention for numbering or could I choose any arbitrary code? (0x60 perhaps)\n",https://github.com/bitcoin/bitcoin/pull/5913#issuecomment-82333121,82333121,
sipa,2015-03-17T13:14:55Z,"Well you can't pick anything that could potentially be later used in the P2P protocol, which why I would prefer no actual code. If there really is a need for RPC error codes separately from what the peer to peer protocol does, perhaps there should just be two codes. In general, I think it's not possible to predict all possible reason for rejecting things, and not really viable to have codes for ev",https://github.com/bitcoin/bitcoin/pull/5913#issuecomment-82339788,82339788,
shaulkf,2015-03-17T13:42:38Z,"I'm not sure what you mean by adding REJECT_LOCAL, should I create an error code which will be overloaded for any local error? How about REJECT_LOCAL = 0x00.\n",https://github.com/bitcoin/bitcoin/pull/5913#issuecomment-82357830,82357830,
laanwj,2015-03-18T08:11:47Z,You could use reject codes > 0x100 for local-only conditions. These cannot be passed over the P2P network.\n,https://github.com/bitcoin/bitcoin/pull/5913#issuecomment-82812237,82812237,
shaulkf,2015-03-18T18:49:07Z,"@laanwj Is it okay to change reject message codes to `unsigned int` for this purpose? If not, please advise is we can assign a dedicated 2 byte code (e.g. 0x00 or 0xFF) for all REJECT_LOCAL errors. I prefer the first solution as RPC users can catch errors with explicit error codes.\n",https://github.com/bitcoin/bitcoin/pull/5913#issuecomment-83118660,83118660,
laanwj,2015-03-24T16:41:47Z,"@shaulkf Changing the internal type is fine with me, otherwise I wouldn't have suggested it. But be careful that you don't accidentally change the type that is sent in the protocol.\n",https://github.com/bitcoin/bitcoin/pull/5913#issuecomment-85592300,85592300,
laanwj,2015-04-08T07:07:27Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/5913#issuecomment-90826040,90826040,
luke-jr,2015-06-24T05:00:56Z,"Needs rebase. I suggest leaving the const reject message codes (now in consensus/validation.h) as unsigned char, changing CValidationState as you already do, and putting the local codes in main.h (for now).\n",https://github.com/bitcoin/bitcoin/pull/5913#issuecomment-114727985,114727985,
luke-jr,2015-06-24T05:27:36Z,"Also:\n\n```\nmain.cpp: In function ‘void InvalidBlockFound(CBlockIndex*, const CValidationState&)’:\nmain.cpp:1369:56: warning: narrowing conversion of ‘(& state)->CValidationState::GetRejectCode()’ from ‘unsigned int’ to ‘unsigned char’ inside { } is ill-formed in C++11 [-Wnarrowing]\n             CBlockReject reject = {state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_",https://github.com/bitcoin/bitcoin/pull/5913#issuecomment-114731721,114731721,
paveljanik,2015-06-26T21:59:15Z,Needs rebase.\nI'd prefer to have something in really soon. RPC returns no clean error message and it is boring to look up the actual error in the debug log.\n,https://github.com/bitcoin/bitcoin/pull/5913#issuecomment-115901683,115901683,
shaulkf,2015-06-26T22:51:27Z,Rebased and changed according to @luke-jr's recommendation\n,https://github.com/bitcoin/bitcoin/pull/5913#issuecomment-115911372,115911372,
shaulkf,2015-06-30T17:20:12Z,"Thanks @paveljanik, pushed a fix and rebased, this is a remnant from a change I ended up reverting. I agree regarding `Invalid` and `DoS` but this should be in a separate PR as it requires reordering the arguments.\n",https://github.com/bitcoin/bitcoin/pull/5913#issuecomment-117266582,117266582,
luke-jr,2015-07-02T06:12:21Z,@shaulkf Please fix the warning.\n,https://github.com/bitcoin/bitcoin/pull/5913#issuecomment-117921798,117921798,
paveljanik,2015-07-02T06:33:32Z,"Something like this needed?\n\n```\ndiff --git a/src/main.cpp b/src/main.cpp\nindex f67f1fd..5229f6f 100644\n--- a/src/main.cpp\n+++ b/src/main.cpp\n@@ -182,7 +182,7 @@ namespace {\n namespace {\n\n struct CBlockReject {\n-    unsigned char chRejectCode;\n+    unsigned int chRejectCode;\n     string strRejectReason;\n     uint256 hashBlock;\n };\n```\n",https://github.com/bitcoin/bitcoin/pull/5913#issuecomment-117923869,117923869,
luke-jr,2015-07-02T06:36:37Z,"Not sure, that might change the protocol. Maybe:\n\n``` C++\nCBlockReject reject = {(unsigned char)state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), pindex->GetBlockHash()};\n```\n",https://github.com/bitcoin/bitcoin/pull/5913#issuecomment-117924143,117924143,
paveljanik,2015-07-02T06:42:03Z,Right.\n,https://github.com/bitcoin/bitcoin/pull/5913#issuecomment-117925932,117925932,
laanwj,2015-08-05T16:40:54Z,Need this for #6519\n,https://github.com/bitcoin/bitcoin/pull/5913#issuecomment-128065957,128065957,
sipa,2015-08-05T16:51:33Z,utACK.\n\nMaybe this also needs an assert before sending out a reject message that the chRejectCode is in the right range.\n,https://github.com/bitcoin/bitcoin/pull/5913#issuecomment-128068450,128068450,
laanwj,2015-08-05T16:53:19Z,"Yes, good point. I'll add it during merge.\n",https://github.com/bitcoin/bitcoin/pull/5913#issuecomment-128068848,128068848,
Diapolo,2015-08-06T06:45:26Z,Nit: Spelling error `trasactions`.\nSee https://github.com/theuni/bitcoin/pull/48\n\n@theuni Will there be a Trivial pull before 0.11?\n,https://github.com/bitcoin/bitcoin/pull/5913#discussion_r36385292,36385292,src/main.h
