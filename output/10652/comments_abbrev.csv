TheBlueMatt,2017-06-22T19:56:16Z,Ping @theuni.,https://github.com/bitcoin/bitcoin/pull/10652#issuecomment-310485429,310485429,
TheBlueMatt,2017-06-28T21:28:13Z,"Rebased on a rebased version of the updated #10179 and filled in more text for the ""	MarkBlockAsReceived on NewPoWValidBlock at receive."" commit message which helps provide a bit more context for this PR:\n\n""Note that this also helps with future per-CNodeState locks, as those\nwill require no two CNodeState locks to be held at the same time\n(for lockorder reasons), and this prevents us from ",https://github.com/bitcoin/bitcoin/pull/10652#issuecomment-311797355,311797355,
TheBlueMatt,2017-07-07T21:28:06Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10652#issuecomment-313797410,313797410,
TheBlueMatt,2017-07-11T15:16:07Z,"Rebased to remove the useless old commits, but no changes. Still would be nice to see thtis for 0.15, but not a huge deal if it misses.",https://github.com/bitcoin/bitcoin/pull/10652#issuecomment-314477522,314477522,
morcos,2017-07-11T17:27:20Z,"utACK ca66c4a\n\n\n",https://github.com/bitcoin/bitcoin/pull/10652#issuecomment-314515205,314515205,
TheBlueMatt,2017-07-18T21:30:41Z,This should likely be un-tagged 0.15. Its not a critical enough bugfix to merit merging at this late stage.,https://github.com/bitcoin/bitcoin/pull/10652#issuecomment-316203904,316203904,
TheBlueMatt,2017-08-14T19:05:16Z,"Closing as I believe I'm taking a different approach to beter network parallelization, however the commits here are still part of #10984, where they will remain.",https://github.com/bitcoin/bitcoin/pull/10652#issuecomment-322279937,322279937,
jonasschnelli,2017-06-28T20:24:52Z,Wouldn't this discard the rvalue reference && (move schematic)? ,https://github.com/bitcoin/bitcoin/pull/10652#discussion_r124646951,124646951,src/net.cpp
TheBlueMatt,2017-06-28T21:07:32Z,"I mean it does, but I'm not too worried about requiring move for a callable type (places where we std::move a lambda into this will still get the benifit of calling std::function(Callable&&)). The real concern here, of course, is that it introduces a performance penalty, but its not huge (an extra function call and few if's on top of the callback function call) and we're already calling this with ",https://github.com/bitcoin/bitcoin/pull/10652#discussion_r124656961,124656961,src/net.cpp
TheBlueMatt,2017-06-28T21:19:30Z,Moved this commit to #10697.,https://github.com/bitcoin/bitcoin/pull/10652#discussion_r124659622,124659622,src/net.cpp
theuni,2017-07-06T21:56:19Z,I think this wants fInitialDownload as a param so that it's always evaluated in its receiving context rather than having subscribers potentially coming to different conclusions.,https://github.com/bitcoin/bitcoin/pull/10652#discussion_r126026442,126026442,src/validation.cpp
theuni,2017-07-06T21:58:33Z,Probably makes sense for MarkBlockAsNotInFlight() to return whether it removed something for the peer? I think that would take care of the TODO as well.,https://github.com/bitcoin/bitcoin/pull/10652#discussion_r126026861,126026861,src/net_processing.cpp
TheBlueMatt,2017-07-07T21:21:33Z,"Hmm? I'm not sure I caught your point - we never get here if we already have the block on disk, and the new uses of it in net_processing need to know that we got here for any ProcessNewBlock call they make.",https://github.com/bitcoin/bitcoin/pull/10652#discussion_r126248140,126248140,src/validation.cpp
TheBlueMatt,2017-07-07T21:27:50Z,"Given the TODO has a ""?"" on it (and I dunno if we want it or not), I'll leave this for a later PR?",https://github.com/bitcoin/bitcoin/pull/10652#discussion_r126249178,126249178,src/net_processing.cpp
theuni,2017-07-07T22:20:04Z,"My point was that IsInitialBlockDownload() may be false by the time it's checked in a callback on a separate thread (once that stuff comes in), though it was true in AcceptBlock. So it's potentially racy to subscribers.",https://github.com/bitcoin/bitcoin/pull/10652#discussion_r126256947,126256947,src/validation.cpp
TheBlueMatt,2017-07-07T23:18:24Z,"Ahh, ok. Yes, is not an issue in any of my work, I believe (worst-case you have an extra few fast-announcements when you first leave IBD), but I added a comment noting the issue.",https://github.com/bitcoin/bitcoin/pull/10652#discussion_r126263585,126263585,src/validation.cpp
promag,2017-07-10T14:08:21Z,Missing block or same line as `if ()`.,https://github.com/bitcoin/bitcoin/pull/10652#discussion_r126431389,126431389,src/net_processing.cpp
morcos,2017-07-10T19:45:33Z,same line or braces,https://github.com/bitcoin/bitcoin/pull/10652#discussion_r126517743,126517743,src/net_processing.cpp
morcos,2017-07-10T21:01:55Z,I'm a bit hesitant about this change.  I can't really remember exactly why we have this CanDirectFetch logic in compact block processing.  But this could make us unnecessarily avoid an optimistic compact block reconstruction if for some reason it took more than 200 mins to receive 2 blocks (right we do reconstructions if within 2 blocks of the announced block?),https://github.com/bitcoin/bitcoin/pull/10652#discussion_r126535956,126535956,src/net_processing.cpp
morcos,2017-07-10T21:07:12Z,"Actually now that I think about it, that concern exists prior to the changes in this PR.\nWhy do we have the CanDirectFetch guard for compact block processing?\n",https://github.com/bitcoin/bitcoin/pull/10652#discussion_r126537259,126537259,src/net_processing.cpp
TheBlueMatt,2017-07-11T01:35:29Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/10652#discussion_r126576463,126576463,src/net_processing.cpp
TheBlueMatt,2017-07-11T01:38:00Z,"No, I think you'd have to go 200 minutes for one block for it to matter (if you go 200 minutes for two, and missed the first one, you wont compact-download that older one, but thats OK, you were probably offline or something anyway). Still, we dont have a much better way to say ""ok, I really, really only want to do this if I'm caught up"" (ie cause otherwise mempool will be worthless). We could dro",https://github.com/bitcoin/bitcoin/pull/10652#discussion_r126576726,126576726,src/net_processing.cpp
promag,2017-07-11T09:53:10Z,Remove extra line.,https://github.com/bitcoin/bitcoin/pull/10652#discussion_r126644583,126644583,src/scheduler.cpp
promag,2017-07-11T09:54:36Z,`{` in new line for all functions. ,https://github.com/bitcoin/bitcoin/pull/10652#discussion_r126644870,126644870,src/scheduler.cpp
promag,2017-07-11T10:03:56Z,Remove `it` and mutate `rangeInFlight.first`.,https://github.com/bitcoin/bitcoin/pull/10652#discussion_r126646788,126646788,src/net_processing.cpp
promag,2017-07-11T10:21:59Z,"```cpp\nif (it->second.first == pfrom->GetId()) {\n    fExpectedBLOCKTXN = it->second.second->partialBlock;\n    break;\n}\n```",https://github.com/bitcoin/bitcoin/pull/10652#discussion_r126650373,126650373,src/net_processing.cpp
promag,2017-07-11T10:22:39Z,`expected_BLOCKTXN`?,https://github.com/bitcoin/bitcoin/pull/10652#discussion_r126650495,126650495,src/net_processing.cpp
promag,2017-07-11T10:27:05Z,"Replace these `mmapBlocksInFlight.count()` with, for instance:\n```cpp\nforceProcessing |= IsBlockInFlight(hash);\n```",https://github.com/bitcoin/bitcoin/pull/10652#discussion_r126651311,126651311,src/net_processing.cpp
promag,2017-07-12T22:52:25Z,"Suggestion, add `NodeId` to `QueuedBlock` structure?",https://github.com/bitcoin/bitcoin/pull/10652#discussion_r127092483,127092483,src/net_processing.cpp
TheBlueMatt,2017-08-03T19:07:47Z,"Would be a bit cleaner, maybe, but would also make it redundant.",https://github.com/bitcoin/bitcoin/pull/10652#discussion_r131233500,131233500,src/net_processing.cpp
