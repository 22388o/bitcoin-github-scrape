sipa,2012-08-16T18:29:39Z,"(EDITED)\n\nList of implementation changes:\n- new database layout: \n  - 2 leveldb's (coins/ and blktree/ subdirs), replacing blkindex.dat\n  - separate directory (blocks/) with block data (in the usual format, but smaller files) and undo data\n- database keys are of the form (char,key) instead of (string,key) for reasons of compactness\n- there is no txid-to-diskpos index anymore, only blkid-to-",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-7794418,7794418,
Diapolo,2012-08-21T12:18:08Z,"@sipa One question, our current AppendBlockFile() function takes MAX_SIZE into account and generates a new block-file if the space left in the block file (max allowed filesize) is < MAX_SIZE. So 128 MiB files would have a maximum of 96 MiB usage-data, right?\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-7899172,7899172,
sipa,2012-08-21T12:24:53Z,@Diapolo: not sure what you mean; I don't use AppendBlockFile anymore.\n,https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-7899296,7899296,
Diapolo,2012-08-21T12:27:01Z,"@sipa I saw that and wanted to understand the change here, which condition is used to determine, if a new block-file needs to be created, where is the check in your new code for that and what's the space limit?\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-7899334,7899334,
sipa,2012-08-21T12:29:39Z,The check is in FindBlockPos in main.cpp. And a new file is created if (old_used_size + new_block_size >= MAX_BLOCKFILE_SIZE).\n,https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-7899397,7899397,
luke-jr,2012-08-24T04:03:43Z,"Does this break the ability to downgrade at all? (I expect it just means wasted ""padding"" space in the blk*.dat files?)\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-7991614,7991614,
sipa,2012-08-27T00:23:47Z,"Updated. Batch block connection now keeps a permanent cache, and modifies that (instead of delaying block connection until several blocks were available, which interfered with normal network-based downloading). Also added a commit that changes the block database format, in preparation of things like parallel signature checking and initial headers-only mode.\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-8044737,8044737,
Diapolo,2012-08-27T05:47:16Z,@sipa With block database format you mean stored blocks in blk0000x.dat?\n,https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-8047427,8047427,
sipa,2012-08-27T10:31:17Z,"@luke-jr how do you mean breaking the ability to downgrade? The blk000*.dat files remain exactly the same format, but the other databases are incompatible.\n\n@Diapolo No, it uses coins.dat (the unspent txout set) and chain.dat (the block index), in addition to the blk_.dat (and rev_.dat) files. It's the format of chain.dat that changed in the last commit.\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-8052173,8052173,
luke-jr,2012-08-27T16:47:40Z,"@sipa If it interacts with downgrades in ugly ways, I'd probably not want to put it into next-test.\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-8062078,8062078,
sipa,2012-08-27T17:07:32Z,"@luke-jr Shouldn't be a problem - the filenames are all different, so you can (almost) run ultraprune and non-ultraprune together in the same datadir independently.\n\nThat said, it's likely to conflict with a lot of other stuff, so decide for yourself.\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-8062727,8062727,
mikehearn,2012-08-30T12:34:08Z,"Could you provide a squashed version of the patch somewhere, for review? It's really hard to review as is because it's  just a record of how you implemented it over time.\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-8157817,8157817,
sipa,2012-08-30T12:48:50Z,@mikehearn https://github.com/bitcoin/bitcoin/pull/1677.diff ?\n,https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-8158190,8158190,
mikehearn,2012-08-31T10:32:19Z,"Thanks, that looks useful.\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-8188081,8188081,
sipa,2012-08-31T11:29:53Z,"@mikehearn  Seems that through rebasing I lost some comments you made earlier on the commits?\n\nRegarding the encodings, I plan to write some text about the final format for all datastructures, but I may change a few things still. \n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-8189169,8189169,
sipa,2012-09-04T23:43:10Z,Rebased/combined with @mikehearn's LevelDB patch\n,https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-8282968,8282968,
sipa,2012-09-20T14:40:02Z,"Rebased on 0.7, and moved the more experimental block caching and parallel signature checking to a separate branch. The code in here should be stable and can be tested.\n\nThe only things that remain to be done are automatic import of old data, and more elaborate consistency checks at startup. I think those can be done in separate pull requests though.\n\nThis branch has its own LevelDB glue, inde",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-8730563,8730563,
mikehearn,2012-09-20T16:05:38Z,I closed the LevelDB pull req. Let's merge it as part of this.\n\nNote that my LevelDB branch has code that does replay the blocks with some GUI progress. It's not great because it actually re-writes the block files in order to track the block offsets ... I didn't do any deep refactorings to fix that as I wanted it to be as easy/fast to merge as possible and it's a one-off migration anyway. But as,https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-8735305,8735305,
sipa,2012-09-21T12:07:02Z,"@TheBlueMatt any way to disable the build tester here, as it seems to be incompatible with this anyway?\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-8762537,8762537,
laanwj,2012-09-21T13:01:10Z,"I've tested this a bit on the testnet. No problems found, and synchronization is super-fast.\n\nOne small comment: in your bitcoin-qt.pro, please use $(MAKE) instead of `make`. This prevents an annoying warning about a job server in Qt Creator.\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-8763731,8763731,
sipa,2012-09-21T13:12:49Z,@laanwj: updated to use $(MAKE)\n,https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-8764081,8764081,
TheBlueMatt,2012-09-22T20:46:20Z,"@sipa Id rather not, the patch is really quite simple (http://jenkins.bluematt.me/pull-tester/files/bitcoind-comparison.patch) , afaict, its only failing because setBlockIndexValid was added directly above hashGenesisBlock in main.cpp.  Can you just move that line and see if it works?\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-8792615,8792615,
sipa,2012-09-25T11:48:19Z,"Changed the database/serialization format one more time: coins and undo data now contains the transaction version number. This may be necessary when new versions of transaction are defined that have an influence on their ability to be spent.\n\n@TheBlueMatt ok, moved the setBlockIndexValid line in main.cpp.\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-8851318,8851318,
mikehearn,2012-09-27T15:00:43Z,This does not build on MacOS X because there is no fdatasync on that platform.\n,https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-8938946,8938946,
sipa,2012-09-28T14:56:28Z,"@TheBlueMatt I wonder why it still complains?\n\nEDIT: Oh, just out of date with master. Let's wait for the next cycle.\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-8978928,8978928,
mikehearn,2012-09-29T10:19:04Z,I just tried to start my client based on this branch and got:\n\nLoading block index...\nOpening LevelDB in /Users/hearn/Library/Application Support/Bitcoin/blktree\nOpened LevelDB successfully\nOpening LevelDB in /Users/hearn/Library/Application Support/Bitcoin/coins\nOpened LevelDB successfully\nLoadBlockIndex(): last block file = 23\nLoadBlockIndex(): last block file: CBlockFileInfo(blocks=1572,https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-9002668,9002668,
mikehearn,2012-09-29T11:19:56Z,"On investigation this failure can happen with both ultralevelprune and old bdb code, it happens when the block is not written but the db updates are. Typically if power is yanked at just the wrong time.\n\nAs it is not a new failure mode, I guess it should not delay review/merge of this code.\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-9003047,9003047,
Diapolo,2012-10-11T20:37:03Z,Did anyone build this directly on Windows with MinGW? I saw there was a cross-compile Windows flag in the pro file. Perhaps I should just fetch that branch and try in the next days.\n,https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-9356748,9356748,
sipa,2012-10-11T20:59:21Z,"@Diapolo ýes, I've done windows builds; I even had to backport the LevelDB env for windows from c++0x to c++, as gitian only has a gcc 4.2 mingw compiler which doesn't support c++0x.\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-9357697,9357697,
gavinandresen,2012-10-16T16:07:36Z,"Errors compiling on my Mac:\n\nmakefile.osx has 4 spaces instead of a tab:\n`@echo ""Building LevelDB ...""; cd leveldb-1.5.0; make; cd ..`\n\nAnd:\n`txdb-bdb.cpp: In member function ‘bool CCoinsDB::HaveCoins(uint256)’:\ntxdb-bdb.cpp:10: error: ‘make_pair’ was not declared in this scope`\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-9496096,9496096,
sipa,2012-10-16T18:51:25Z,"@gavinandresen Why does it build the BDB version? Did you explicitly disable USE_LEVELDB, or is there a problem with the makefile that causes this?\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-9502063,9502063,
sipa,2012-10-20T14:20:00Z,"Some additional changes: reorganized the commits a bit, fixed a bug that caused unit tests to fail, removed some dead code, and added a lot of comments (mostly in main.h).\n\nAlso see the list of implementation changes in the first comment here.\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-9631656,9631656,
gavinandresen,2012-10-20T14:32:44Z,"Design ACK; I reviewed all of the changes to main.h and about half of main.cpp, and had just a handful of tiny nits that aren't worth picking.\n\nI feel comfortable pulling this as long as @sipa can commit to working through the remaining TODOs and help fix any bugs that crop up over the next month or so.\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-9631794,9631794,
sipa,2012-10-20T14:40:33Z,"By the way: this pull request is rebased on top of 'threadimport' (#1880) and 'canonical' (#1742). I suppose that means those require ACKs first. If there is a problem, I'll remove them from under this pull.\n",https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-9631861,9631861,
gmaxwell,2012-10-20T21:41:56Z,ACK. This appears ready for integration.\n,https://github.com/bitcoin/bitcoin/pull/1677#issuecomment-9637115,9637115,
Diapolo,2012-08-21T13:13:27Z,"Why nBlockSize+8, is that a padding?\n",https://github.com/bitcoin/bitcoin/pull/1677#discussion_r1423981,1423981,src/main.cpp
sipa,2012-08-21T13:27:47Z,"4 bytes magic, 4 bytes block length; that's just the file format of blk*.dat.\n",https://github.com/bitcoin/bitcoin/pull/1677#discussion_r1424086,1424086,src/main.cpp
Diapolo,2012-08-21T13:34:03Z,"I'm lacking some background information here, sorry :). Is the format defined / described somewhere?\n",https://github.com/bitcoin/bitcoin/pull/1677#discussion_r1424125,1424125,src/main.cpp
sipa,2012-08-21T13:39:19Z,"No idea, but I wanted to retain compatibility between pre and post-ultraprune block files, so I used the same format. That is: the files are a concatenation of {4 bytes magic, 4 bytes LE integer with the actual block size, block data itself).\n",https://github.com/bitcoin/bitcoin/pull/1677#discussion_r1424182,1424182,src/main.cpp
Diapolo,2012-08-21T13:43:49Z,"I found this one and it explains what I was missing here: https://bitcointalk.org/index.php?topic=101514.0 thanks for your further explanation, too.\n\nWhy keep things compatible here, perhaps it's the right time to even optimize the internals of the block-files (e.g. compression or such a thing)?\n",https://github.com/bitcoin/bitcoin/pull/1677#discussion_r1424250,1424250,src/main.cpp
Diapolo,2012-10-11T20:34:11Z,"So this still includes legacy BDB support? Means we need to keep 2 code-bases up to date.\nWhat was the intention to keep it to be able to revert, just wanna know :).\n",https://github.com/bitcoin/bitcoin/pull/1677#discussion_r1823288,1823288,bitcoin-qt.pro
sipa,2012-10-11T21:00:19Z,"Yes, though the BDB version most likely doesn't compile anymore. This was converted from Mike's code which tried to keep compatibility, but that's just an unneccessary burden.\n",https://github.com/bitcoin/bitcoin/pull/1677#discussion_r1823611,1823611,bitcoin-qt.pro
Diapolo,2012-10-12T05:36:03Z,"Thanks, so it would be nice to remove that burden entirely from this pull and the code. If this is a one way ticket there is no need to keep BDB compatibility code in.\n",https://github.com/bitcoin/bitcoin/pull/1677#discussion_r1826779,1826779,bitcoin-qt.pro
mikehearn,2012-10-12T08:41:55Z,"The original idea was to reduce the risk of merging the code, in case there were issues with LevelDB [on some specific platform] we don't want to hold up the release or do a potentially messy revert.\n\nI agree it's irritating and a burden, but it'd suck if all of ultraprune ended up getting reverted due to unanticipated issues with LevelDB. Once 0.8 has been successfully rolled out to the userbas",https://github.com/bitcoin/bitcoin/pull/1677#discussion_r1827587,1827587,bitcoin-qt.pro
Diapolo,2012-10-12T09:16:12Z,I'm fine with removing that later as long as you / sipa keep track of that.\nThat whole block of commands in the pro-file looks like Vodoo to me anyway :-D.\n,https://github.com/bitcoin/bitcoin/pull/1677#discussion_r1827843,1827843,bitcoin-qt.pro
