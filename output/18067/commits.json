[
  {
    "sha": "005f8a92ccb5bc10c8daa106d75e1c21390461d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDVmOGE5MmNjYjViYzEwYzhkYWExMDZkNzVlMWMyMTM5MDQ2MWQz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-02-04T22:24:48Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-02-12T16:48:30Z"
      },
      "message": "wallet: Improve LegacyScriptPubKeyMan::CanProvide script recognition\n\nMake LegacyScriptPubKeyMan::CanProvide method able to recognize p2sh scripts\nwhen the redeem script is present in the mapScripts map without the p2sh script\nalso having to be added to the mapScripts map. This restores behavior prior to\nhttps://github.com/bitcoin/bitcoin/pull/17261, which I think broke backwards\ncompatibility with old wallet files by no longer treating addresses created by\n`addmultisigaddress` calls before #17261 as solvable.\n\nThe reason why tests didn't fail with the CanProvide implementation in #17261\nis because of a workaround added in 4a7e43e8460127a40a7895519587399feff3b682\n\"Store p2sh scripts in AddAndGetDestinationForScript\", which masked the problem\nfor new `addmultisigaddress` RPC calls without fixing it for multisig addresses\nalready created in old wallet files.\n\nThis change adds a lot of comments and allows reverting commit\n4a7e43e8460127a40a7895519587399feff3b682 \"Store p2sh scripts in\nAddAndGetDestinationForScript\", so the AddAndGetDestinationForScript() function,\nCanProvide() method, and mapScripts map should all be more comprehensible",
      "tree": {
        "sha": "e31c354d46ed2095e63202a96bbedb29a5b34d6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e31c354d46ed2095e63202a96bbedb29a5b34d6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/005f8a92ccb5bc10c8daa106d75e1c21390461d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/005f8a92ccb5bc10c8daa106d75e1c21390461d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/005f8a92ccb5bc10c8daa106d75e1c21390461d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/005f8a92ccb5bc10c8daa106d75e1c21390461d3/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2bdc476d4d23256d8396bb9051a511f540d87392",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bdc476d4d23256d8396bb9051a511f540d87392",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2bdc476d4d23256d8396bb9051a511f540d87392"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 107,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e7d7d76d3c825daddd384952c3df6dd99183b2c4",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/005f8a92ccb5bc10c8daa106d75e1c21390461d3/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/005f8a92ccb5bc10c8daa106d75e1c21390461d3/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=005f8a92ccb5bc10c8daa106d75e1c21390461d3",
        "patch": "@@ -209,7 +209,8 @@ BITCOIN_TESTS += \\\n   wallet/test/wallet_crypto_tests.cpp \\\n   wallet/test/coinselector_tests.cpp \\\n   wallet/test/init_tests.cpp \\\n-  wallet/test/ismine_tests.cpp\n+  wallet/test/ismine_tests.cpp \\\n+  wallet/test/scriptpubkeyman_tests.cpp\n \n BITCOIN_TEST_SUITE += \\\n   wallet/test/wallet_test_fixture.cpp \\"
      },
      {
        "sha": "76f31d2f6f7c57670a9d401c38c7a32f778e9096",
        "filename": "src/script/signingprovider.h",
        "status": "modified",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/005f8a92ccb5bc10c8daa106d75e1c21390461d3/src/script/signingprovider.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/005f8a92ccb5bc10c8daa106d75e1c21390461d3/src/script/signingprovider.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.h?ref=005f8a92ccb5bc10c8daa106d75e1c21390461d3",
        "patch": "@@ -66,7 +66,53 @@ class FillableSigningProvider : public SigningProvider\n     using KeyMap = std::map<CKeyID, CKey>;\n     using ScriptMap = std::map<CScriptID, CScript>;\n \n+    /**\n+     * Map of key id to unencrypted private keys known by the signing provider.\n+     * Map may be empty if the provider has another source of keys, like an\n+     * encrypted store.\n+     */\n     KeyMap mapKeys GUARDED_BY(cs_KeyStore);\n+\n+    /**\n+     * Map of script id to scripts known by the signing provider.\n+     *\n+     * This map originally just held P2SH redeemScripts, and was used by wallet\n+     * code to look up script ids referenced in \"OP_HASH160 <script id>\n+     * OP_EQUAL\" P2SH outputs. Later in 605e8473a7d it was extended to hold\n+     * P2WSH witnessScripts as well, and used to look up nested scripts\n+     * referenced in \"OP_0 <script hash>\" P2WSH outputs. Later in commits\n+     * f4691ab3a9d and 248f3a76a82, it was extended once again to hold segwit\n+     * \"OP_0 <key or script hash>\" scriptPubKeys, in order to give the wallet a\n+     * way to distinguish between segwit outputs that it generated addresses for\n+     * and wanted to receive payments from, and segwit outputs that it never\n+     * generated addresses for, but it could spend just because of having keys.\n+     * (Before segwit activation it was also important to not treat segwit\n+     * outputs to arbitrary wallet keys as payments, because these could be\n+     * spent by anyone without even needing to sign with the keys.)\n+     *\n+     * Some of the scripts stored in mapScripts are memory-only and\n+     * intentionally not saved to disk. Specifically, scripts added by\n+     * ImplicitlyLearnRelatedKeyScripts(pubkey) calls are not written to disk so\n+     * future wallet code can have flexibility to be more selective about what\n+     * transaction outputs it recognizes as payments, instead of having to treat\n+     * all outputs spending to keys it knows as payments. By contrast,\n+     * mapScripts entries added by AddCScript(script),\n+     * LearnRelatedScripts(pubkey, type), and LearnAllRelatedScripts(pubkey)\n+     * calls are saved because they are all intentionally used to receive\n+     * payments.\n+     *\n+     * The FillableSigningProvider::mapScripts script map should not be confused\n+     * with LegacyScriptPubKeyMan::setWatchOnly script set. The two collections\n+     * can hold the same scripts, but they serve different purposes. The\n+     * setWatchOnly script set is intended to expand the set of outputs the\n+     * wallet considers payments. Every output with a script it contains is\n+     * considered to belong to the wallet, regardless of whether the script is\n+     * solvable or signable. By contrast, the scripts in mapScripts are only\n+     * used for solving, and to restrict which outputs are considered payments\n+     * by the wallet. An output with a script in mapScripts, unlike\n+     * setWatchOnly, is not automatically considered to belong to the wallet if\n+     * it can't be solved and signed for.\n+     */\n     ScriptMap mapScripts GUARDED_BY(cs_KeyStore);\n \n     void ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);"
      },
      {
        "sha": "0c95ab29b137edfbeb394c2a62066d05aefc08d4",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 8,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/005f8a92ccb5bc10c8daa106d75e1c21390461d3/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/005f8a92ccb5bc10c8daa106d75e1c21390461d3/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=005f8a92ccb5bc10c8daa106d75e1c21390461d3",
        "patch": "@@ -70,7 +70,15 @@ bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan&\n     return true;\n }\n \n-IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+//! Recursively solve script and return spendable/watchonly/invalid status.\n+//!\n+//! @param keystore            legacy key and script store\n+//! @param script              script to solve\n+//! @param sigversion          script type (top-level / redeemscript / witnessscript)\n+//! @param recurse_scripthash  whether to recurse into nested p2sh and p2wsh\n+//!                            scripts or simply treat any script that has been\n+//!                            stored in the keystore as spendable\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion, bool recurse_scripthash=true)\n {\n     IsMineResult ret = IsMineResult::NO;\n \n@@ -129,7 +137,7 @@ IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& s\n         CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n-            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+            ret = std::max(ret, recurse_scripthash ? IsMineInner(keystore, subscript, IsMineSigVersion::P2SH) : IsMineResult::SPENDABLE);\n         }\n         break;\n     }\n@@ -147,7 +155,7 @@ IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& s\n         CScriptID scriptID = CScriptID(hash);\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n-            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+            ret = std::max(ret, recurse_scripthash ? IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0) : IsMineResult::SPENDABLE);\n         }\n         break;\n     }\n@@ -476,11 +484,11 @@ std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const\n \n bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n {\n-    if (IsMine(script) != ISMINE_NO) {\n-        // If it IsMine, we can always provide in some way\n-        return true;\n-    } else if (HaveCScript(CScriptID(script))) {\n-        // We can still provide some stuff if we have the script, but IsMine failed because we don't have keys\n+    IsMineResult ismine = IsMineInner(*this, script, IsMineSigVersion::TOP, /* recurse_scripthash= */ false);\n+    if (ismine == IsMineResult::SPENDABLE || ismine == IsMineResult::WATCH_ONLY) {\n+        // If ismine, it means we recognize keys or script ids in the script, or\n+        // are watching the script itself, and we can at least provide metadata\n+        // or solving information, even if not able to sign fully.\n         return true;\n     } else {\n         // If, given the stuff in sigdata, we could make a valid sigature, then we can provide for this script"
      },
      {
        "sha": "757865ea37eeabe709bc9deaefe05afe7d184dff",
        "filename": "src/wallet/test/scriptpubkeyman_tests.cpp",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/005f8a92ccb5bc10c8daa106d75e1c21390461d3/src/wallet/test/scriptpubkeyman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/005f8a92ccb5bc10c8daa106d75e1c21390461d3/src/wallet/test/scriptpubkeyman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/scriptpubkeyman_tests.cpp?ref=005f8a92ccb5bc10c8daa106d75e1c21390461d3",
        "patch": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <wallet/scriptpubkeyman.h>\n+#include <wallet/wallet.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(scriptpubkeyman_tests, BasicTestingSetup)\n+\n+// Test LegacyScriptPubKeyMan::CanProvide behavior, making sure it returns true\n+// for recognized scripts even when keys may not be available for signing.\n+BOOST_AUTO_TEST_CASE(CanProvide)\n+{\n+    // Set up wallet and keyman variables.\n+    NodeContext node;\n+    std::unique_ptr<interfaces::Chain> chain = interfaces::MakeChain(node);\n+    CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+    LegacyScriptPubKeyMan& keyman = *wallet.GetOrCreateLegacyScriptPubKeyMan();\n+\n+    // Make a 1 of 2 multisig script\n+    std::vector<CKey> keys(2);\n+    std::vector<CPubKey> pubkeys;\n+    for (CKey& key : keys) {\n+        key.MakeNewKey(true);\n+        pubkeys.emplace_back(key.GetPubKey());\n+    }\n+    CScript multisig_script = GetScriptForMultisig(1, pubkeys);\n+    CScript p2sh_script = GetScriptForDestination(ScriptHash(multisig_script));\n+    SignatureData data;\n+\n+    // Verify the p2sh(multisig) script is not recognized until the multisig\n+    // script is added to the keystore to make it solvable\n+    BOOST_CHECK(!keyman.CanProvide(p2sh_script, data));\n+    keyman.AddCScript(multisig_script);\n+    BOOST_CHECK(keyman.CanProvide(p2sh_script, data));\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "eb7d8a5b07e89133a5fb465ad1b793362e7439f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjdkOGE1YjA3ZTg5MTMzYTVmYjQ2NWFkMWI3OTMzNjJlNzQzOWY3",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-02-11T18:59:24Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-02-12T16:48:30Z"
      },
      "message": "[test] check for addmultisigaddress regression",
      "tree": {
        "sha": "fbde53988414f0a6dba330ee520e307f256ecef0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbde53988414f0a6dba330ee520e307f256ecef0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb7d8a5b07e89133a5fb465ad1b793362e7439f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb7d8a5b07e89133a5fb465ad1b793362e7439f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb7d8a5b07e89133a5fb465ad1b793362e7439f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb7d8a5b07e89133a5fb465ad1b793362e7439f7/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "005f8a92ccb5bc10c8daa106d75e1c21390461d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/005f8a92ccb5bc10c8daa106d75e1c21390461d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/005f8a92ccb5bc10c8daa106d75e1c21390461d3"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7a6e3df702ebab38ab733b590edf7be986562e89",
        "filename": "test/functional/feature_backwards_compatibility.py",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb7d8a5b07e89133a5fb465ad1b793362e7439f7/test/functional/feature_backwards_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb7d8a5b07e89133a5fb465ad1b793362e7439f7/test/functional/feature_backwards_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_backwards_compatibility.py?ref=eb7d8a5b07e89133a5fb465ad1b793362e7439f7",
        "patch": "@@ -122,6 +122,9 @@ def run_test(self):\n         info = wallet.getwalletinfo()\n         assert info['private_keys_enabled']\n         assert info['keypoolsize'] > 0\n+        # Use addmultisigaddress (see #18075)\n+        address_18075 = wallet.addmultisigaddress(1, [\"0296b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52\", \"037211a824f55b505228e4c3d5194c1fcfaa15a456abdf37f9b9d97a4040afc073\"], \"\", \"legacy\")[\"address\"]\n+        assert wallet.getaddressinfo(address_18075)[\"solvable\"]\n \n         # w1_v18: regular wallet, created with v0.18\n         node_v18.createwallet(wallet_name=\"w1_v18\")\n@@ -319,7 +322,7 @@ def run_test(self):\n         hdkeypath = info[\"hdkeypath\"]\n         pubkey = info[\"pubkey\"]\n \n-        # Copy the wallet to the last Bitcoin Core version and open it:\n+        # Copy the 0.17 wallet to the last Bitcoin Core version and open it:\n         node_v17.unloadwallet(\"u1_v17\")\n         shutil.copytree(\n             os.path.join(node_v17_wallets_dir, \"u1_v17\"),\n@@ -331,5 +334,14 @@ def run_test(self):\n         descriptor = \"wpkh([\" + info[\"hdmasterfingerprint\"] + hdkeypath[1:] + \"]\" + pubkey + \")\"\n         assert_equal(info[\"desc\"], descsum_create(descriptor))\n \n+        # Copy the 0.19 wallet to the last Bitcoin Core version and open it:\n+        shutil.copytree(\n+            os.path.join(node_v19_wallets_dir, \"w1_v19\"),\n+            os.path.join(node_master_wallets_dir, \"w1_v19\")\n+        )\n+        node_master.loadwallet(\"w1_v19\")\n+        wallet = node_master.get_wallet_rpc(\"w1_v19\")\n+        assert wallet.getaddressinfo(address_18075)[\"solvable\"]\n+\n if __name__ == '__main__':\n     BackwardsCompatibilityTest().main()"
      }
    ]
  },
  {
    "sha": "a304a3632f0437f4d0f04589a2200e2da91624a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzA0YTM2MzJmMDQzN2Y0ZDBmMDQ1ODlhMjIwMGUyZGE5MTYyNGE3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-02-04T22:27:41Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-02-12T16:48:30Z"
      },
      "message": "Revert \"Store p2sh scripts in AddAndGetDestinationForScript\"\n\nThis reverts commit 4a7e43e8460127a40a7895519587399feff3b682.",
      "tree": {
        "sha": "8174dc5ca5461d09b0147187d0952b7e55b54c7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8174dc5ca5461d09b0147187d0952b7e55b54c7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a304a3632f0437f4d0f04589a2200e2da91624a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a304a3632f0437f4d0f04589a2200e2da91624a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a304a3632f0437f4d0f04589a2200e2da91624a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a304a3632f0437f4d0f04589a2200e2da91624a7/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb7d8a5b07e89133a5fb465ad1b793362e7439f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb7d8a5b07e89133a5fb465ad1b793362e7439f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb7d8a5b07e89133a5fb465ad1b793362e7439f7"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 3,
      "deletions": 11
    },
    "files": [
      {
        "sha": "71b5cba01c5bbe6a192c1e52080bed0eb84e7b6f",
        "filename": "src/outputtype.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 11,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a304a3632f0437f4d0f04589a2200e2da91624a7/src/outputtype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a304a3632f0437f4d0f04589a2200e2da91624a7/src/outputtype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.cpp?ref=a304a3632f0437f4d0f04589a2200e2da91624a7",
        "patch": "@@ -82,30 +82,22 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n {\n     // Add script to keystore\n     keystore.AddCScript(script);\n-    ScriptHash sh(script);\n     // Note that scripts over 520 bytes are not yet supported.\n     switch (type) {\n     case OutputType::LEGACY:\n-        keystore.AddCScript(GetScriptForDestination(sh));\n-        return sh;\n+        return ScriptHash(script);\n     case OutputType::P2SH_SEGWIT:\n     case OutputType::BECH32: {\n         CTxDestination witdest = WitnessV0ScriptHash(script);\n         CScript witprog = GetScriptForDestination(witdest);\n         // Check if the resulting program is solvable (i.e. doesn't use an uncompressed key)\n-        if (!IsSolvable(keystore, witprog)) {\n-            // Since the wsh is invalid, add and return the sh instead.\n-            keystore.AddCScript(GetScriptForDestination(sh));\n-            return sh;\n-        }\n+        if (!IsSolvable(keystore, witprog)) return ScriptHash(script);\n         // Add the redeemscript, so that P2WSH and P2SH-P2WSH outputs are recognized as ours.\n         keystore.AddCScript(witprog);\n         if (type == OutputType::BECH32) {\n             return witdest;\n         } else {\n-            ScriptHash sh_w = ScriptHash(witprog);\n-            keystore.AddCScript(GetScriptForDestination(sh_w));\n-            return sh_w;\n+            return ScriptHash(witprog);\n         }\n     }\n     default: assert(false);"
      }
    ]
  }
]