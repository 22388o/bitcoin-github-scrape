DrahtBot,2021-05-21 03:55:09,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22155 (wallet test: Add test for subtract fee from recipient behavior by ryanofsky)\n* #22100 (refactor: Clean up new wal",https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-845634461,845634461,
achow101,2021-05-25 15:47:45,"With #17331 now merged, this is ready for review.",https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-847985686,847985686,
Sjors,2021-05-25 16:13:18,re-utACK a2dd0dbc91da89a5672d2e578998252b1a3ceabc,https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-848012016,848012016,
Xekyo,2021-05-26 18:10:33,"tACK c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602\n\nThe rebase ate my most pressing comment. Thanks @instagibbs for https://github.com/bitcoin/bitcoin/pull/22042. :heart: ",https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-849007602,849007602,
Sjors,2021-05-26 18:26:32,"The last rebase broke the fee estimation test on CI, though perhaps a coincidence; I can't reproduce:\n\n```\nself.run_test()\nFile ""/tmp/cirrus-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/feature_fee_estimation.py"", line 256, in run_test\ncheck_estimates(self.nodes[1], self.fees_per_kb)\nFile ""/tmp/cirrus-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functio",https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-849017814,849017814,
ryanofsky,2021-05-26 18:59:50,Code review ACK c2a5bd68ef60d9c64512b205ff6ea4ce7dca8602. I like `inputs_sum` and `recipients_sum`,https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-849039623,849039623,
ryanofsky,2021-06-04 13:42:47,"Maybe another cleanup for later, but the separate `fee_needed` and `nFeeRet` variables haven't been needed since the `CreateTransactionInternal` while loop was removed in 9d3bd74ab4430532d6e53eef8cf77ad999044b14. `fee_needed` was only introduced before that commit because if a change output was dropped in an early iteration of the loop, `fee_needed` would hold the cost of the transaction without t",https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-854733594,854733594,
achow101,2021-06-04 17:07:49,"@ryanofsky I agree that `fee_needed` can be dropped, but I don't think your diff is necessarily correct. Looking at it now, I don't think the current behavior is correct either (and your diff maintains this behavior). We shouldn't ever be paying more to the recipient than the sender expects. The excess, if it is dust, should be burned as fees. So your diff, and the current behavior, is incorrect i",https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-854880614,854880614,
achow101,2021-06-04 18:10:50,"I've reverted back to 96c2c9520e80ee4fed92f0e1ab859d59fcbdb110\n\nI think we should discuss the intended behavior of subtract fee from recipients during the wallet meeting today.",https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-854912977,854912977,
ryanofsky,2021-06-07 15:20:17,"re: https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-854733594\n\n> Maybe another cleanup for later, but the separate fee_needed and nFeeRet variables haven't been needed [...]\n\nfee_needed cleanup was discussed more in [IRC](https://www.erisian.com.au/bitcoin-core-dev/log-2021-06-04.html#l-221) and is addressed in #22155 for now adding by a unit test to exercise and check the relev",https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-856026671,856026671,
ryanofsky,2021-06-07 15:25:20,"This is probably close to ready to being merged\n\nUp to date ACKs\n\nglozow https://github.com/bitcoin/bitcoin/pull/22008#pullrequestreview-675439314\nryanofsky https://github.com/bitcoin/bitcoin/pull/22008#pullrequestreview-676223208\n\nPrevious ACKS\n\nSjors https://github.com/bitcoin/bitcoin/pull/22008#pullrequestreview-665540991\nSjors https://github.com/bitcoin/bitcoin/pull/22008#i",https://github.com/bitcoin/bitcoin/pull/22008#issuecomment-856033716,856033716,
Xekyo,2021-05-26 16:09:22,"commit d58f1fb0fdd43ed186073f9db477d9afd760c637 Move variable initializations to where they are used;\n\nNit: the commit message does not mention `m_avoid_partial_spends`, but `m_avoid_reuse`, was this a mix-up?",https://github.com/bitcoin/bitcoin/pull/22008#discussion_r639880355,639880355,src/wallet/wallet.cpp
achow101,2021-05-27 20:52:28,"Oops, yes, that's a typo. Will fix if I have to push this again.",https://github.com/bitcoin/bitcoin/pull/22008#discussion_r640957988,640957988,src/wallet/wallet.cpp
glozow,2021-05-28 10:51:44,"In cb81bede9b Move cs_wallet lock in CreateTransactionInternal to top of function and Remove extraneous scope in CreateTransactionInternal\n\nSeems like curly braces were supposed to limit the scope of the lock (?) but I am unsure why it should be released in the middle of `CreateTransation()`. If the intention is to hold this lock for all of `CreateTransaction()` (I don't see why we'd want to r",https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641457718,641457718,src/wallet/wallet.cpp
glozow,2021-05-28 11:57:56,"In 806c32f6ef Move empty recipients vector check to beginning in CreateTransaction\n\nI think this check for non-negative amounts should be moved to the beginning of `CreateTransaction()` as well, since it's a sanitization step similar to checking for empty vector. It doesn't need to be checked more than once (and doesn't need the lock).",https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641492447,641492447,src/wallet/wallet.cpp
glozow,2021-05-28 12:00:35,"In bc0035a417 Remove extraneous scope in CreateTransactionInternal\n\n```suggestion\n    // Subtract fee from the change output if not subtracting it from recipient outputs\n```",https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641493935,641493935,src/wallet/wallet.cpp
glozow,2021-05-28 12:07:35,"It could also be\n\n```c++\nif (std::any_of(vecSend.cbegin(), vecSend.cend(), [](const auto& recipient){ return recipient.nAmount < 0; }))\n```",https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641497754,641497754,src/wallet/wallet.cpp
achow101,2021-05-28 17:22:27,Fixed.,https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641703339,641703339,src/wallet/wallet.cpp
achow101,2021-05-28 17:22:34,Done,https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641703409,641703409,src/wallet/wallet.cpp
achow101,2021-05-28 17:22:39,Done,https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641703449,641703449,src/wallet/wallet.cpp
achow101,2021-05-28 17:22:46,Done,https://github.com/bitcoin/bitcoin/pull/22008#discussion_r641703512,641703512,src/wallet/wallet.cpp
glozow,2021-06-03 15:48:09,"In b583f73354 Move vin filling to before final fee setting (but not super relevant to this PR)\n\nQuestion: is there a reason `setCoins` (and `setCoinsRet`, etc. in the coin selection solvers) needs to be a `std::set` instead of a `std::vector`? It doesn't seem like we get much benefit out of using a set, and we convert to vector here anyway?",https://github.com/bitcoin/bitcoin/pull/22008#discussion_r644911809,644911809,src/wallet/spend.cpp
glozow,2021-06-04 10:47:35,"Question: just wondering, why doesn't this have an error message?",https://github.com/bitcoin/bitcoin/pull/22008#discussion_r645476752,645476752,src/wallet/spend.cpp
achow101,2021-06-04 16:42:04,No reason other than it's always been that way. `setCoinsRet` can be traced back to 0.1.0.,https://github.com/bitcoin/bitcoin/pull/22008#discussion_r645711411,645711411,src/wallet/spend.cpp
achow101,2021-06-04 17:08:21,I guess the original author forgot to add one. I've added an error message in a separate commit.,https://github.com/bitcoin/bitcoin/pull/22008#discussion_r645727221,645727221,src/wallet/spend.cpp
achow101,2021-06-04 17:19:12,"Oh, actually it does have an error message. It's set earlier in the function when a change address is fetched. When one is not available, the error message is set. If there is a different failure before we get to this particular condition, then that failure takes precedence and the error message is changed. But if we reach this failure condition, then the error message will have been set previousl",https://github.com/bitcoin/bitcoin/pull/22008#discussion_r645733373,645733373,src/wallet/spend.cpp
ryanofsky,2021-06-04 17:42:07,"In commit ""Remove unneeded fee_needed variable"" (303a6645dc604e1d074a1aa6253f4dc8a1c3109e)\n\nI think this comment is a big vague and maybe even misleading because this code isn't just updating the return value but also increasing the fee paid in the subtract-from-outputs case. I would maybe say something like ""// Increase nFeeRet to reflect extra fee paid by giving up the small change amount wh",https://github.com/bitcoin/bitcoin/pull/22008#discussion_r645746200,645746200,src/wallet/spend.cpp
