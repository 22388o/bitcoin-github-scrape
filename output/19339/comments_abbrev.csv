luke-jr,2020-06-20 19:39:06,Absurd fees aren't even close to the only policy being enforced in ATMP... It doesn't make sense to split just this one out.,https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647037491,647037491,
glozow,2020-06-20 19:42:21,"> Absurd fees aren't even close to the only policy being enforced in ATMP... It doesn't make sense to split just this one out.\n\n@luke-jr Sorry 😅   I'm a beginner so I don't know very much. Do you mean that there are other things that should be taken out too, or that it's not worth doing so at all?",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647037802,647037802,
luke-jr,2020-06-20 19:45:27,"It might be worth doing, but I'm not sure if the costs outweigh the benefits, and if/when done, it should be splitting all policy from all consensus checks, not just one policy from the rest.",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647038107,647038107,
luke-jr,2020-06-20 19:50:33,"Check out https://github.com/bitcoin/bitcoin/compare/0.20...luke-jr:sendraw_force-0.20+knots#diff-24efdb00bfbe56b140fb006b562cc70bR578\n\nThis changes all the policy checks to conditionals, while leaving the non-policy checks as strictly enforced. So a split would be on the same criteria. Note that reordering stuff may not always be a good idea, however...",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647038586,647038586,
DrahtBot,2020-06-20 19:54:24,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19753 (p2p: don't add AlreadyHave transactions to recentRejects by troygiorshev)\n* #19645 (Allow updating mempool-txn wi",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647038926,647038926,
glozow,2020-06-20 19:57:38,"@luke-jr okay, I see what you're saying. Agree that refactoring consensus/policy should be as a whole + may or may not be worth it. I could be completely mistaken, but I thought that this was more... a user's preference rather than node's fee policy, since it's pretty much only used in RPC and wallet. It seems to be set to 0 in other places?",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647039237,647039237,
JeremyRubin,2020-06-20 20:59:57,"I think you're correct in the abstract on this one @gzhao408, but concretely this behavior is probably desirable as it's a belt-and-suspenders check of preventing things getting into the mempool that are *almost certainly* a mistake.\n\nEven though mining/accepting these things should be done, and our node shouldn't really do 'deep transaction inspection', the case of absurd fees is pretty clear",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647044823,647044823,
luke-jr,2020-06-20 21:21:10,"@gzhao408 You may be right - it's a good point that we don't enforce it on other stuff. Maybe we should really be checking it before even calling ATMP.\n\n@JeremyRubin This is needed for GUI transactions too, at least.",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647046700,647046700,
JeremyRubin,2020-06-20 21:31:44,"One approach might be to introduce a redundant layer of logic to all the places we actually want to perform the absurdfee check, and then in a follow up PR (or commit if you want to do it in one), remove the now redundant ATMP check. I agree that ATMP is later than ideal for checking this property.",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647047694,647047694,
achow101,2020-06-20 22:08:37,"I agree with removing the absurd fee check from ATMP, but we should still have it somewhere instead of removing it completely. Since it only is used for transactions sent by the node, the ideal place to move this to would be `BroadcastTransaction` in `src/node/transaction.cpp`. The RPC and wallet (GUI goes through the wallet) both use `BroadcastTransaction`.",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647050678,647050678,
jnewbery,2020-06-22 23:08:49,"Concept ACK! This isn't policy, it's wallet/RPC behaviour (and as such, belongs in the wallet/RPC).",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647813137,647813137,
NicolasDorier,2020-06-23 00:49:04,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647841346,647841346,
ariard,2020-07-24 15:11:36,"Concept ACK,\n\nThis check should be part of a consistent wallet _tx-sanitization_ policy, i.e a set of checks protecting users funds against harmful actions before authorizing spend. Some signers already do this like [Coincard](https://ckbunker.com/policy.html). We could envision Core implementing the same kind of logic behind ScriptPubKeyMan::SignTransaction, with user settings. Now do this po",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-663587420,663587420,
glozow,2020-07-25 20:48:30,"This builds on #19093. If that one is merged first then I’ll rebase this; if this one gets more review attention, @rajarshimaitra is listed as the author of the base commit here so hopefully that’s ok. \n\nPer y’all’s wonderful advice, I moved the absurd fee checking into `BroadcastTransaction` and as an extra step in `testmempoolaccept`. Calling this a `TransactionError::MAX_FEE_EXCEEDED` seeme",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-663904504,663904504,
jnewbery,2020-07-27 10:58:31,Approach ACK. This looks great. Thanks Gloria!,https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-664325546,664325546,
glozow,2020-08-16 16:51:07,"Rebased and refactored some of the commits to make it cleaner + easier to review in preparation for PR Review Club ([Notes](https://bitcoincore.reviews/19339)). Now's a perfect time to review if anyone has time :) thanks everybody!\n\n",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-674549975,674549975,
robot-dreams,2020-08-22 18:12:46,"Concept ACK, Approach ACK, unit tests + all updated functional tests pass locally\n\nI think the discussion of ""what are the performance implications of calling ATMP twice"" is very interesting. I looked up where `BroadcastTransaction` could be called, and here's what I found:\n\n- `sendrawtransaction` RPC\n- `SubmitMemoryPoolAndRelay` in the wallet\n- `PSBTOperationsDialog` in the UI\n\nIn",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-678673676,678673676,
glozow,2020-08-23 19:11:57,"Thanks for the review @robot-dreams :)\n> In particular, I'm guessing `BroadcastTransaction` calls aren't too frequent (e.g. compared to relaying transactions in the P2P network)\n\nNice observation; I'd like to highlight that `BroadcastTransaction` is used for transactions coming from _clients_ as opposed to peers. Even if the slowdown were significant, it's very different from an inefficiency",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-678812569,678812569,
jnewbery,2020-08-24 12:04:09,"In the last commit log, there's no need to state which commit hash the commit was cherry-picked from.",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-679085763,679085763,
robot-dreams,2020-08-24 15:57:09,"@gzhao408 I did some cleanup and pushed it to https://github.com/robot-dreams/bitcoin/commits/mempool-remove-absurdfee ; feel free to grab any of the updated commits if you'd find them helpful, but of course no pressure to do so!\n\n- Rebase and fix merge conflict\n- Change `std::move(tx)` to `tx`\n- Change PR number in release notes\n- Change release notes about `testmempoolaccept` from ""if ",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-679213758,679213758,
glozow,2020-08-25 16:30:25,"Rebased and addressed comments. Apologies, I'm wrestling with the scripted-diff linter :'( \n\nI also edited the first commit so that I'm only picking the ATMP changes in #19093 (which is more RPC-focused) - these two PRs are now uncoupled.",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-680133532,680133532,
fanquake,2020-08-26 02:26:26,"> Rebased and addressed comments. Apologies, I'm wrestling with the scripted-diff linter :'(\n\nThe issue is GNU vs BSD sed. I'm assuming you are on macOS (BSD sed), and you've written a command that is incompatible with GNU sed (used by Travis). The fix here is to drop the '' after `-i`, which is the part that's incompatible. Unfortunately portability when using `-i` isn't trivial.\n\nWhen te",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-680422284,680422284,
jnewbery,2020-08-26 07:24:14,"> The issue is GNU vs BSD sed. I'm assuming you are on macOS (BSD sed), and you've written a command that is incompatible with GNU sed (used by Travis). The fix here is to drop the '' after -i, which is the part that's incompatible. Unfortunately portability when using -i isn't trivial.\n\nThis issue has tripped lots of people up (including me). Perhaps `commit-script-check.sh` should detect if ",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-680708152,680708152,
michaelfolkson,2020-08-26 19:50:13,"Concept ACK, Approach ACK\n\n> It might be worth doing, but I'm not sure if the costs outweigh the benefits, and if/when done, it should be splitting all policy from all consensus checks, not just one policy from the rest.\n\nAs was pointed out during the Bitcoin Core PR review club [session](https://bitcoincore.reviews/19339) and John earlier [here](https://github.com/bitcoin/bitcoin/pull/193",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-681088739,681088739,
glozow,2020-08-30 17:09:36,"Rebased, addressed @jonatack's review comments, fixed the `sed` problem. I also squashed the commits that add the client checking so hopefully the commits are more clear. This is ready for another look! \n\nI'm not sure what the appveyor failure is...? It doesn't seem related to this PR's changes 🤔 ",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-683445409,683445409,
jonatack,2020-08-30 17:19:13,"> I'm not sure what the appveyor failure is...? It doesn't seem related to this PR's changes 🤔 \n\nYes, appveyor is down ATM, #19839 was opened today as a fix.",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-683446524,683446524,
jnewbery,2020-09-03 07:48:43,utACK d0f10e25afbbbcfc2c46300cf7112ce4f303987d (but needs rebase),https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-686318923,686318923,
glozow,2020-09-03 16:19:11,Rebased,https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-686603252,686603252,
jnewbery,2020-09-03 16:57:56,"utACK 6bbda0e5d4\n\nVerified `git range-diff 4afff49265~..d0f10e25af 9ec325e2e9~..6bbda0e5d4`",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-686624517,686624517,
jonatack,2020-09-04 14:31:43,The CI failures seem unrelated--the travis job logs no error afaict and cirrus timed out.,https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-687182070,687182070,
sdaftuar,2020-09-05 00:03:56,"I agree with the goal of this PR, but invoking ATMP twice really feels like the wrong solution.  Could we just add a function to `validation.cpp` that returns the fee of a transaction (similar to what @ariard suggested in https://github.com/bitcoin/bitcoin/pull/19339#discussion_r483309109)?  That would be helpful more generally, for instance so that our wallet could someday tell us what the feerat",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-687481868,687481868,
jnewbery,2020-09-05 09:48:07,"> invoking ATMP twice really feels like the wrong solution\n\nCan you give a bit more concrete reason why this feels like the wrong solution to you? It seems like a very elegant way to utilize the existing code and avoid repetition. Note that this approach was suggested by @MarcoFalke in #15810 and got approach ACKs there from @sipa, @gmaxwell and me.",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-687581258,687581258,
sdaftuar,2020-09-05 10:54:45,"> Note that this approach was suggested by @MarcoFalke in #15810 and got approach ACKs there from @sipa, @gmaxwell and me.\n\nThanks for the context of #15810.  I agree that this PR's approach is better in some ways than the one there, by making the check in one place, at the time we try to call ATMP, rather than spread across multiple places in our rpc/wallet code.\n\nHowever ATMP does so muc",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-687590078,687590078,
glozow,2020-09-05 14:34:25,"Thanks for your input @sdaftuar! I agree that the fee check should be minimal.\n\nSome concerns I’ve heard about the 2x ATMP and will try to summarize here:\n- Performance: I did some bookkeeping by adding some logs to see how much use we get out of the signature and script caches ([comment](https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475093378)). We get quite a bit of reuse altho",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-687619570,687619570,
ariard,2020-09-06 16:29:18,"EDIT: Just to be clear, I maintain my Code Review ACK. That said it would be great if we open an issue or else to discuss and track further improvements in this area of the code, there is room for it.\n\n------\n\nIf the problem solves by this PR is ""How to disentangle wallet sanity max fee from mempool policy checks ?"", I'm not sure the current approach achieves it as types of checks are stil",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-687834534,687834534,
glozow,2020-09-07 17:14:12,"Thanks @ariard! I appreciate that your ACK is not being withdrawn.\n> A failure is a failure, what heuristic do you follow to sort the severity of them ?\n\nWe have a few defined categories that are relevant here, afaik:\n- Validation/Consensus failures (e.g. an invalid script or signature, etc)\n- Policy fails (e.g. minimum feerate for relay)\n- Client preference (e.g. absurd fee)\n\nI’ve",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-688443346,688443346,
ariard,2020-09-08 13:19:48,"> I’ve [arbitrarily] sorted them in severity, based on the idea that consensus failure = nobody will accept, policy failure = this node won’t accept, client preference = this user won’t accept. \n\nSure, the set of parties interested to the rule violation is one axis of analysis. The one I would favor is ordering them by tightness, namely a set A is more tight than set B if transaction is accept",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-688860764,688860764,
sdaftuar,2020-09-09 14:28:52,"I think this patch is basically what the fee calculator would need to look like:\n\n```diff\ndiff --git a/src/validation.cpp b/src/validation.cpp\nindex 58af8744d90..87685b44f6b 100644\n--- a/src/validation.cpp\n+++ b/src/validation.cpp\n@@ -1059,6 +1059,30 @@ bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs\n \n } // anon namespace\n \n+\n+// Calculate ",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-689600212,689600212,
LarryRuane,2020-09-16 15:06:36,"This PR updates several of the tests (both unit and functional), but, unless I'm missing it, it doesn't look like there's any verification of the modified _behavior_ (asserting that transactions with high fees are forwarded with the PR but not without the PR). This would probably require a brand new test or tests. Have you considered doing that? I may be able to help with this, but not until next ",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-693468642,693468642,
glozow,2020-09-18 20:20:04,"Just pushed with a rebase and `GetTransactionFee`. Hope that you can take a look at it @sdaftuar; it's largely based on your [comment](https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-689600212). And @jnewbery @ariard @jonatack - diff of the first 5 commits is the same so I hope it's easier to re-review. Thank you so much :pray:\n\nThank you for your review @larryruane! Incorporated yo",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-695067189,695067189,
glozow,2020-09-22 00:23:42,"Thanks for your feedback @DrahtBot, addressed.",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-696449638,696449638,
glozow,2020-09-26 16:26:25,"I felt that we had a lot of open questions regarding `GetTransactionFee` so I've opened a separate PR for review, #20025 (addressed @jnewbery's comments there as well).\n\nThis PR just re-delegates absurdfee checking to clients. The branch as it currently stands is pretty much the same as what was ACK'ed before, with a few small fixes. \n\nFor everyone who has reviewed this PR, I really apprec",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-699517077,699517077,
glozow,2020-10-01 11:12:41,Rebased,https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-702063349,702063349,
LarryRuane,2020-10-04 18:57:07,"utACK 8784930\n<details>\n<summary>git range-diff 22ebb7f~4..22ebb7f 8784930~4..87849300</summary>\n\n```\n1:  b1ea8a00f ! 1:  f907f4b93 [rpc/node] check for high fee before ATMP in clients\n    @@ src/node/transaction.cpp: TransactionError BroadcastTransaction(NodeContext& nod\n      \n     \n      ## src/rpc/rawtransaction.cpp ##\n    -@@ src/rpc/rawtransaction.cpp: static UniValue tes",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-703299852,703299852,
jnewbery,2020-10-05 12:49:15,utACK b048b275d9711f70847afaea5450f17a0f7e673a,https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-703609697,703609697,
MarcoFalke,2020-10-05 13:10:16,"re-ACK b048b275d9 , only change is squashing one commit 🏦\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK b048b275d9 , only change is squashing one commit 🏦\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgq2gv8DSuQInycB5w6VMTMI7aBtPBoUDAX",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-703621240,703621240,
LarryRuane,2020-10-05 18:46:39,re-ACK b048b275d9711f70847afaea5450f17a0f7e673a,https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-703819099,703819099,
instagibbs,2020-10-07 01:55:16,"concept ack, this will require release notes since people tend to use sending failure codes/text in fine-grained ways and it may break downstream things",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-704646142,704646142,
fanquake,2020-10-07 03:00:53,"> please don't address my nit unless you have to rebase or something.\n\n@glozow can follow up with some release notes and address any remaining nits. Either in a new PR, or possibly as part of #20025.",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-704662713,704662713,
MarcoFalke,2020-10-07 07:15:22,"Instead of mentioning that `absurdly-high-fee` changed into `max-fee-exceeded`, I'd rather just change it back and prevent the release notes from bloating.\n\nThough, the reason (my reason) testmempoolaccept doesn't return an error code because we can't really guarantee stability of failure reasons across versions of Bitcoin Core. Similarly the string can't be expected to be stable. So either we",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-704744784,704744784,
instagibbs,2020-10-07 12:15:20,"Might be worth opening an issue on the topic because apparently the codes\naren't enough for downstream users. Recent breaks include LND, probably\nmore.\n\nOn Wed, Oct 7, 2020, 3:15 AM MarcoFalke <notifications@github.com> wrote:\n\n> Instead of mentioning that absurdly-high-fee changed into max-fee-exceeded,\n> I'd rather just change it back and prevent the release notes from bloating.\n>\n> Tho",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-704894759,704894759,
MarcoFalke,2020-10-07 12:17:37,Mind sharing a link on further information how LND was broken by this?,https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-704895935,704895935,
instagibbs,2020-10-07 12:22:37,"Not this but text changes in general for mempool rpc messages. I'll dig\nthrough my notes sometime when I have the time\n\nOn Wed, Oct 7, 2020, 8:17 AM MarcoFalke <notifications@github.com> wrote:\n\n> Mind sharing a link on further information how LND was broken by this?\n>\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-704898320,704898320,
glozow,2020-10-08 21:09:20,"fwiw I think `max-fee-exceeded` is a more accurate error message - we're checking the `maxfeerate` passed in by the user, absurd or not. I'm not sure how to determine whether something should be in release notes or not :/ I'll just open a PR and we can talk there",https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-705824858,705824858,
pinheadmz,2020-08-19 18:19:12,"Instead of calling ATMP twice, can we trust the `test_accepted` value from the first call and skip redundant checks in the second call? Or maybe to put it another way, if all we need is the fee here, can we compute that quickly and test it against `max_tx_fee` before checking anything else about the tx? I think if that's easy enough to do, you don't have to add an argument to ATMP. But I guess you",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r473232345,473232345,src/node/transaction.cpp
pinheadmz,2020-08-19 18:48:24,"Should the filename have the PR number? (19339) I didn't know about this convention yet, just looked it up: https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#release-notes",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r473247904,473247904,doc/release-notes-19093.md
glozow,2020-08-22 13:08:16,"> Instead of calling ATMP twice, can we trust the `test_accepted` value from the first call and skip redundant checks in the second call?\n\nFrom what I understand, we do this somewhat (i.e. for expensive parts of validation) - the signature cache and script cache are filled in `PolicyScriptChecks` and `ConsensusScriptChecks` during the test accept and thus those parts don't need to be redone th",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475088750,475088750,src/node/transaction.cpp
glozow,2020-08-22 13:10:01,FYI @rajarshimaitra,https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475088881,475088881,doc/release-notes-19093.md
glozow,2020-08-22 13:53:04,"I've made a [branch](https://github.com/gzhao408/bitcoin/commit/483cc24a2923514a35f83682822aa29265c61555) that adds logging to the signature and script caches. Running the truncated version of rpc_rawtransaction.py shows how much reuse we get. Here's a sample of a `sendrawtransaction` which does the 2 ATMPs:\n\n```\n node0 2020-08-22T13:50:00.085822Z [httpworker.1] @@@ In BroadcastTransaction()",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475093378,475093378,src/node/transaction.cpp
jnewbery,2020-08-24 11:57:05,"Both this ATMP call and the one below should have their `std::move(tx)` argument changed to `tx`. In general, you should never use a variable after it's been used with `std::move` in a function call, since it might have been moved away. In this case, if `tx` has been moved from, it'll be null, and any attempt to dereference it will segfault.\n\nHowever, because ATMP takes a _const_ reference to ",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475546809,475546809,src/node/transaction.cpp
robot-dreams,2020-08-24 15:18:10,"Thanks for noting this and posting the link, @jnewbery ! After looking into this, I have two follow-up questions for you if that's OK:\n\n#### Question 1 (historical context)\n\nPreviously, this call always used `std::move(tx)` because `tx` did not appear later in the function. However, use of `tx` after `move` appeared in c7eb6b4f1fe5bd76388a023529977674534334a7, which was merged as part of #",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475693119,475693119,src/node/transaction.cpp
jnewbery,2020-08-24 16:57:16,"> However, use of tx after move appeared in c7eb6b4, which was merged as part of #18044. Do you happen to have any ideas about why it wasn't a concern then?\n\nBecause it was missed in review. In this case, it's not going to cause any issues because `tx` isn't actually moved from, but we should still never be doing anything with a variable after it's had `std::move` used on it.\n\n> Do you kno",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475759196,475759196,src/node/transaction.cpp
fjahr,2020-08-24 21:37:32,If you use a global namespace constant for the error message it would make sense to share it across files as well.   Otherwise local variables would make more sense to me. I think c763343c0064fe88aeef15eecd6273ccf2746fcc could also just be a clean scripted-diff without the need to introduce the constants.,https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475908814,475908814,test/functional/rpc_psbt.py
fjahr,2020-08-24 21:49:28,"IMO you don't need the intermediate return value and can just move the call into the if() but if you want to keep it:\n```suggestion\n        const bool test_accepted = AcceptToMemoryPool(*node.mempool, state, std::move(tx),\n```",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475913985,475913985,src/node/transaction.cpp
glozow,2020-08-25 14:39:23,"you're totally right, I changed it to a scripted diff",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r476501583,476501583,test/functional/rpc_psbt.py
glozow,2020-08-25 14:39:37,"moved it into the if(), thanks!",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r476501773,476501773,src/node/transaction.cpp
glozow,2020-08-25 14:39:56,done! thanks for the explanation @jnewbery :) ,https://github.com/bitcoin/bitcoin/pull/19339#discussion_r476502050,476502050,src/node/transaction.cpp
jonatack,2020-08-26 15:25:43,"baab966 suggestion, as `CAmount` is of type `int64_t` per `src/amount.h`, provide a default value \n```suggestion\n        CAmount fee{0};\n```",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r477388457,477388457,src/node/transaction.cpp
jonatack,2020-08-26 15:26:08,"bcb85f4\n```suggestion\n    CAmount fee{0}; // To return transaction fee from AcceptToMemoryPool\n```",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r477388789,477388789,src/rpc/rawtransaction.cpp
jonatack,2020-08-26 15:32:56,"d81090e8a `s/eg/e.g./` or\n```diff\n- return Untranslated(""Fee exceeds maximum configured by user (eg -maxtxfee, maxfeerate)"");\n+ return Untranslated(""Fee exceeds maximum configured by user in -maxtxfee or maxfeerate"");\n```\n",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r477393731,477393731,src/util/error.cpp
jonatack,2020-08-26 15:48:40,"a5b33914\n\n- Should these keys also be returned with relevant values for the happy case as well, and not only if fee exceeds maxfee? (I suspect they should.)\n\n- These additions would need to be documented in the `RPCHelpMan` help a few lines above, as well as with an `Updated RPCs` release note.",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r477405130,477405130,src/rpc/rawtransaction.cpp
jonatack,2020-08-26 16:37:29,"Oops, I was confused by the early and duplicate `result.push_back(std::move(result_0))` and `return`, which I wasn't expecting. Perhaps use an `else` instead and have all the cases fall through to the single push_back and return.\n\nConsider harmonising the cases to both return the `fee` or neither, and if `fee` is added, then update the help + write a release note + add `fee` test cases.",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r477436682,477436682,src/rpc/rawtransaction.cpp
jonatack,2020-08-26 16:45:49,"bcb85f4 perhaps document this added argument per https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-doxygen-compatible-comments\n```diff\n- * optionally takes an argument to return tx fee to the caller **/\n+ * @param[out] fee_out   optional argument to return tx fee to the caller **/\n```",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r477442434,477442434,src/validation.h
glozow,2020-08-30 13:06:04,Actually I shouldn't even return the fee - it was leftover from #19093. Thanks for catching that!,https://github.com/bitcoin/bitcoin/pull/19339#discussion_r479767701,479767701,src/rpc/rawtransaction.cpp
glozow,2020-08-30 13:17:28,done!,https://github.com/bitcoin/bitcoin/pull/19339#discussion_r479768882,479768882,src/validation.h
jonatack,2020-08-31 20:02:25,"ea8eb397 and 3721417 suggestion to keep the final `std::move and return` separate from the processing\n\n`git diff -w`\n```diff\n-    // Check that fee does not exceed maxfee\n     if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n+        // Accepted, but disallow because fee exceeds maxfee\n         result_0.pushKV(""allowed"", false);\n         result_0.pushKV(""reject-reas",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r480367940,480367940,src/rpc/rawtransaction.cpp
jnewbery,2020-09-03 07:49:17,Both seem fine. I have a preference for how it is right now to avoid the deeply nested if statements.,https://github.com/bitcoin/bitcoin/pull/19339#discussion_r482777222,482777222,src/rpc/rawtransaction.cpp
glozow,2020-09-03 16:00:54,"Absurdfee is kind of a ""special case"" where `test_accept_res` is true, but we still say not allowed... maybe it's good to keep it in a separate block?",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r483088759,483088759,src/rpc/rawtransaction.cpp
ariard,2020-09-03 23:42:12,"I think this approach is okay for now but it would be better to refactor further in the future. For now the mempool is guaranteed not to change due to tacking `cs_main` lock above but if we remove this lock requirement from ATMP in the future you might have different views of the mempool in the future, thus being rejected at first try and not being evaluated against `max_tx_fee` but succeeding at ",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r483309109,483309109,src/node/transaction.cpp
ariard,2020-09-03 23:46:09,"A follow-up could be to modify `testmempoolaccept` signature to return the computed fee/feerate, do we already have a RPC to evaluate-fee-but-don't-submit-to-mempool  ?",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r483310202,483310202,src/rpc/rawtransaction.cpp
glozow,2020-09-04 00:05:33,"`testmempoolaccept` would be the best place for this imo, see #19940 :)",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r483315485,483315485,src/rpc/rawtransaction.cpp
jonatack,2020-09-04 14:23:32,"I think (a) keep processing separate from move-and-return, which is why it is separated by an empty line at the end of the function, (b) don't repeat yourself, and (c) the principle of least surprise (at least, I found it surprising) outweigh the also-valid (d) avoid nested conditionals, but it's a detail that I won't hold against anyone :smiling_face_with_three_hearts: \n\nOTOH, I find a bit od",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r483647616,483647616,src/rpc/rawtransaction.cpp
LarryRuane,2020-09-15 16:11:51,"Another suggestion (but it's also good as-is):\n<details>\n<summary>Diff</summary>\n\n```diff\n--- a/src/rpc/rawtransaction.cpp\n+++ b/src/rpc/rawtransaction.cpp\n@@ -923,34 +923,36 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n     result_0.pushKV(""txid"", tx_hash.GetHex());\n \n     TxValidationState state;\n-    bool test_accept_res;\n+    bool allowed;\n     ",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r488790850,488790850,src/rpc/rawtransaction.cpp
LarryRuane,2020-09-15 18:09:46,"```suggestion\n        if (max_tx_fee && AcceptToMemoryPool(*node.mempool, state, tx,\n                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n            if (fee > max_tx_fee) {\n                return TransactionError::MAX_FEE_EXCEEDED;\n            }\n        }\n```\nPerformance: Call `AcceptToMemoryPool()` only if necessary.",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r488866705,488866705,src/node/transaction.cpp
glozow,2020-09-18 16:07:10,yep will do! :) ,https://github.com/bitcoin/bitcoin/pull/19339#discussion_r491049982,491049982,src/node/transaction.cpp
LarryRuane,2020-09-22 16:55:47,"Nonblocking suggestion: You could simplify the code branches and reduce nesting:\n```cpp\n        if (max_tx_fee) {\n            CAmount fee{0};\n            if (!GetTransactionFee(*node.mempool, state, tx, &fee)) {\n                err_string = state.ToString();\n                if (!state.IsInvalid()) {\n                    return TransactionError::MEMPOOL_ERROR;\n                }\n   ",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r492891317,492891317,src/node/transaction.cpp
LarryRuane,2020-09-22 17:03:45,"Similar nonblocking suggestion as above -- You may even want to consider refactoring this common error processing into a `TransactionError` method.\n```cpp\n        if (!AcceptToMemoryPool(*node.mempool, state, tx,\n                nullptr /* plTxnReplaced */, false /* bypass_limits */)) {\n            err_string = state.ToString();\n            if (!state.IsInvalid()) {\n                ret",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r492896238,492896238,src/node/transaction.cpp
LarryRuane,2020-09-22 17:05:42,"Simplification suggestion:\n```cpp\n    return Consensus::CheckTxInputs(*tx, state, view, GetSpendHeight(view), *fee_out);\n```",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r492897478,492897478,src/validation.cpp
jnewbery,2020-09-23 10:41:45,This would be better as a doxygen comment next to the declaration in the header file.,https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493435625,493435625,src/validation.cpp
jnewbery,2020-09-23 10:43:53,"`CTransactionRef` is a shared_ptr. shared_ptrs should only be passed by const ref to express that the called function might retain a ref count to the object, which never happens here. There are no lifetime semantics involved, so this should be passed as a pointer or reference. Const reference (`const CTransaction&`) would be most appropriate here.\n\n(C++ Core guidelines on passing shared_ptrs: ",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493437495,493437495,src/validation.cpp
jnewbery,2020-09-23 10:45:00,`s/TxValidationState &state/TxValidationState& state/` and `s/Amount *fee_out/Amount* fee_out/`,https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493438609,493438609,src/validation.cpp
jnewbery,2020-09-23 10:46:15,"This function is only ever called in one place, where cs_main is already being held. Rather than lock recursively, it would be better to annotate the function to require cs_main.",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493439778,493439778,src/validation.cpp
jnewbery,2020-09-23 10:47:11,"What is this line for? `GetBestBlock()` is a const method, and the return value is being discarded here, so this appears to be a no-op.",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493440556,493440556,src/validation.cpp
jnewbery,2020-09-23 10:50:24,"I think an `Optional<CAmount>` is the most natural return type here, rather than a 'success' bool and an out-param. Unset would mean ""transaction invalid - fee can't be calculated"" and set would mean ""fee calculated (but transaction not necessarily valid)"".",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493443449,493443449,src/validation.cpp
jnewbery,2020-09-23 10:54:04,"It feels weird to be setting a `TxValidationResult` in a function that purports to simply be a utility helper, and duplicating validity checks in this function feels like code duplication with the risk of divergence in the future. I'd much prefer it if this function was only checking/returning the fee, and all validity state was handled by ATMP.",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493446706,493446706,src/validation.cpp
jnewbery,2020-09-23 10:58:09,"It's a shame to duplicate the code a few lines below. If we used `GetTransactionFee()` _just_ to get the transaction fee (and not return any validation state) and relied on ATMP to return validation state, we wouldn't have this code duplication.",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493450254,493450254,src/node/transaction.cpp
glozow,2020-09-24 22:21:25,"Good point, made a helper function :)",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r494642765,494642765,src/node/transaction.cpp
glozow,2020-09-24 22:40:14,"I made a helper function for this so it doesn't duplicate the code\nThe question of ""if GetFee fails, still run ATMP or fail immediately?"" is still up in the air for me... ",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r494649337,494649337,src/node/transaction.cpp
sdaftuar,2020-09-25 23:04:14,"`GetBestBlock()` is const, but `hashBlock` is mutable, and what this function does is load the block hash associated with the utxo set into the `CoinsViewCache` object.  \n\nThe reason it is here is so that when we invoke `GetSpendHeight(m_view)` in the call to `Consensus::CheckTxInputs()`, we're doing so with the right height of the next block, which is necessary for the coinbase maturity check",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495303724,495303724,src/validation.cpp
sdaftuar,2020-09-25 23:11:32,"@gzhao408 What is the benefit of running ATMP if `GetTransactionFee()` fails?  It seems to me that if you get a failure, you should abort -- particularly because the way it's being used here is to prevent an absurd fee from getting through.  If a transient failure prevented the fee from being calculated (say, a race condition with an input being confirmed in a block or arriving in the mempool from",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495307983,495307983,src/node/transaction.cpp
glozow,2020-09-26 14:08:17,"@sdaftuar I definitely agree that if `GetTransactionFee` fails, we shouldn't try to submit the transaction. My issue with using `GetTransactionFee` to return a `TxValidationResult` is that, in my opinion, ATMP should be the authority on validation results.\n\nAt the end of the day, the fee is not meaningful unless validation succeeds. If `GetTransactionFee` fails due to the transaction being inv",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495460204,495460204,src/node/transaction.cpp
glozow,2020-09-26 14:15:47,Also @sdaftuar the `testmempoolaccept` RPC already returns the fee for a raw transaction (#19940)!,https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495460880,495460880,src/node/transaction.cpp
glozow,2020-09-26 14:47:18,"I tried removing the line and it looks okay. I might be reading this wrong but I think when we call `CheckTxInputs` with the `GetSpendHeight(view)`:\n```c\nif (!Consensus::CheckTxInputs(tx, state, view, GetSpendHeight(view), *fee_out)) {\n```\n\n[`GetSpendHeight()`](https://github.com/bitcoin/bitcoin/blob/8aa3a4a498742dc42631956ed3599b3fb2b80302/src/validation.cpp#L1477) calls `GetBestBlock()",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495463683,495463683,src/validation.cpp
sdaftuar,2020-09-26 15:08:26,Good point!,https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495465526,495465526,src/validation.cpp
LarryRuane,2020-09-26 20:37:47,"```suggestion\n        if (max_tx_fee) {\n            CAmount fee{0};\n```",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495493263,495493263,src/node/transaction.cpp
LarryRuane,2020-09-26 20:40:56,"```suggestion\nTransactionError HandleATMPError(TxValidationState state, std::string& err_string)\n{\n```",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495493514,495493514,src/node/transaction.cpp
LarryRuane,2020-09-26 20:46:23,"```suggestion\n            if (!AcceptToMemoryPool(\n                    *node.mempool, state, tx,\n                    nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n```",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495493978,495493978,src/node/transaction.cpp
LarryRuane,2020-09-26 20:48:11,"```suggestion\n        if (!AcceptToMemoryPool(\n                *node.mempool, state, tx,\n                nullptr /* plTxnReplaced */, false /* bypass_limits */)) {\n```",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495494089,495494089,src/node/transaction.cpp
LarryRuane,2020-09-26 20:49:11,"```suggestion\n    CAmount fee{0};\n```",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495494161,495494161,src/rpc/rawtransaction.cpp
glozow,2020-09-30 23:54:52,🤔  seems different from normal,https://github.com/bitcoin/bitcoin/pull/19339#discussion_r497863233,497863233,src/node/transaction.cpp
jnewbery,2020-10-05 08:15:53,"Minor style suggestions (no need to change these unless you're retouching the branch anyway):\n\n- Make the `TxValidationState state` argument a const reference to avoid a copy on the stack.\n- This function is only used internally in this translation unit. Make it `static` or put it in an unnamed namespace to avoid external linkage.",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499419350,499419350,src/node/transaction.cpp
MarcoFalke,2020-10-05 08:38:48,"style nit in commit f907f4b9389b86fc655f45917367be5838b79684:\n\n* Newline before `{`\n* Could suffix return parameters with `_out`\n\n```suggestion\nTransactionError HandleATMPError(TxValidationState state, std::string& err_string_out)\n{\n```",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499432040,499432040,src/node/transaction.cpp
MarcoFalke,2020-10-05 08:51:05,"bug in commit f907f4b:\n\nThis is wrong. maxtxfee doesn't influence sendrawtransaction at all. See `help sendrawtransaction`",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499439526,499439526,test/functional/rpc_rawtransaction.py
MarcoFalke,2020-10-05 08:51:27,"question in commit f907f4b:\n\nAny reason to change the reject-reason?",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499439733,499439733,test/functional/rpc_rawtransaction.py
MarcoFalke,2020-10-05 08:57:48,"Ah, I see this is fixed in the next commit. Maybe it could make sense to put the scripted diff first, so that this line doesn't have to change twice in the same pull request?\n\nAlso, the scripted diff could use `git grep -l ""bla""` instead of the hardcoded list of file names. This way it is easier to see that it is complete. Also, rebasing will be easier if a filename changes.",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499443726,499443726,test/functional/rpc_rawtransaction.py
MarcoFalke,2020-10-05 09:05:23,"in commit f907f4b9389b86fc655f45917367be5838b79684:\n\nAny reason to not squash commit 6a4a7c64246c826fed6b2bdf97ad91a5f864621b into this? Seems odd to add an TODO in one commit and then fix it in the next commit in the same pull.\n\n",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499448140,499448140,src/rpc/rawtransaction.cpp
MarcoFalke,2020-10-05 09:06:27,"in commit 6a4a7c64246c826fed6b2bdf97ad91a5f864621b:\n\nAny reason to change this? The next commit removes the line anyway.",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499448772,499448772,src/validation.cpp
glozow,2020-10-05 11:09:24,"I wanted to use the same reject reason that wallet gives when a fee is too high, which is `TransactionError::MAX_FEE_EXCEEDED`. Also a little sanity check for all the `absurdly-high-fee` tests.",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499518601,499518601,test/functional/rpc_rawtransaction.py
glozow,2020-10-05 11:10:53,"Yeah, I had this odd idea that people might review commit-by-commit and that documenting what to expect might be helpful, but perhaps it's just weird and confusing 😅 ",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499519405,499519405,src/rpc/rawtransaction.cpp
glozow,2020-10-05 11:14:11,"I wanted to make it really obvious that the behavior is identical if ATMP ignores high fees at this point, that's all :)",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499521168,499521168,src/validation.cpp
glozow,2020-10-05 11:50:25,"will squash, that is a better way 👍 ",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499540272,499540272,src/rpc/rawtransaction.cpp
glozow,2020-10-05 12:00:40,"done, thanks!",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499545847,499545847,src/node/transaction.cpp
glozow,2020-10-05 12:48:26,"> Also, the scripted diff could use git grep -l ""bla"" instead of the hardcoded list of file names.\n\nI will definitely do that in the future 😅  \n\n> Maybe it could make sense to put the scripted diff first, so that this line doesn't have to change twice in the same pull request?\n\nI think the line would still need to change, sine the rpc error code changes from -26 to -25 as well",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499572154,499572154,test/functional/rpc_rawtransaction.py
MarcoFalke,2020-10-05 13:21:21,"Not sure if I understand this. `MAX_FEE_EXCEEDED` returns the string `""Fee exceeds maximum configured by user""`, not `""max-fee-exceeded""`.\n\nAs there is no reject code, RPC users might match on the reject reason, which seems brittle, but if there is no convincing argument to change, I'd prefer to leave it as is.\n\nedit: probably not too much of a deal",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499593308,499593308,test/functional/rpc_rawtransaction.py
glozow,2020-10-05 14:55:26,"You're right, yeah. I guess this is an arbitrary change to make the error messages more similar 😅 ",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499661344,499661344,test/functional/rpc_rawtransaction.py
instagibbs,2020-10-07 02:04:18,"```suggestion\n        if (max_tx_fee > 0) {\n```",https://github.com/bitcoin/bitcoin/pull/19339#discussion_r500694549,500694549,src/node/transaction.cpp
