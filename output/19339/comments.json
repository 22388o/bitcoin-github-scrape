[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647037491",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647037491",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 647037491,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NzAzNzQ5MQ==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-20T19:39:06Z",
    "updated_at": "2020-06-20T19:39:06Z",
    "author_association": "MEMBER",
    "body": "Absurd fees aren't even close to the only policy being enforced in ATMP... It doesn't make sense to split just this one out.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647037491/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647037802",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647037802",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 647037802,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NzAzNzgwMg==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-20T19:42:21Z",
    "updated_at": "2020-06-20T19:42:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Absurd fees aren't even close to the only policy being enforced in ATMP... It doesn't make sense to split just this one out.\r\n\r\n@luke-jr Sorry \ud83d\ude05   I'm a beginner so I don't know very much. Do you mean that there are other things that should be taken out too, or that it's not worth doing so at all?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647037802/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647038107",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647038107",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 647038107,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NzAzODEwNw==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-20T19:45:27Z",
    "updated_at": "2020-06-20T19:45:27Z",
    "author_association": "MEMBER",
    "body": "It might be worth doing, but I'm not sure if the costs outweigh the benefits, and if/when done, it should be splitting all policy from all consensus checks, not just one policy from the rest.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647038107/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647038586",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647038586",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 647038586,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NzAzODU4Ng==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-20T19:50:33Z",
    "updated_at": "2020-06-20T19:50:33Z",
    "author_association": "MEMBER",
    "body": "Check out https://github.com/bitcoin/bitcoin/compare/0.20...luke-jr:sendraw_force-0.20+knots#diff-24efdb00bfbe56b140fb006b562cc70bR578\r\n\r\nThis changes all the policy checks to conditionals, while leaving the non-policy checks as strictly enforced. So a split would be on the same criteria. Note that reordering stuff may not always be a good idea, however...",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647038586/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647038926",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647038926",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 647038926,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NzAzODkyNg==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-20T19:54:24Z",
    "updated_at": "2020-10-01T17:26:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19753 (p2p: don't add AlreadyHave transactions to recentRejects by troygiorshev)\n* #19645 (Allow updating mempool-txn with cheaper witnesses by ariard)\n* #16546 (External signer support - Wallet Box edition by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647038926/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647039237",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647039237",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 647039237,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NzAzOTIzNw==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-20T19:57:38Z",
    "updated_at": "2020-06-20T19:57:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "@luke-jr okay, I see what you're saying. Agree that refactoring consensus/policy should be as a whole + may or may not be worth it. I could be completely mistaken, but I thought that this was more... a user's preference rather than node's fee policy, since it's pretty much only used in RPC and wallet. It seems to be set to 0 in other places?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647039237/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647044823",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647044823",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 647044823,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NzA0NDgyMw==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-20T20:59:57Z",
    "updated_at": "2020-06-20T20:59:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think you're correct in the abstract on this one @gzhao408, but concretely this behavior is probably desirable as it's a belt-and-suspenders check of preventing things getting into the mempool that are *almost certainly* a mistake.\r\n\r\nEven though mining/accepting these things should be done, and our node shouldn't really do 'deep transaction inspection', the case of absurd fees is pretty clearly accidental, so we add this redundant check (which can be disabled afaict via `allowhighfees`) even though clients should ultimately be responsible for this and not *rely* on absurd fees being rejected.\r\n\r\nI think if you wanted to move the logic somewhere else (e.g., to just RPC layer) you could do that too, but the most convenient place for that logic is in ATMP as we load the required context to check fees there already.\r\n\r\nClient side absurd fee problems should generally improve post-taproot & with the segwit fixes as signers should be more aware of how much fees their txn is spending as they can be made aware of all the inputs values they are signing for.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647044823/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647046700",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647046700",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 647046700,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NzA0NjcwMA==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-20T21:21:10Z",
    "updated_at": "2020-06-20T21:21:10Z",
    "author_association": "MEMBER",
    "body": "@gzhao408 You may be right - it's a good point that we don't enforce it on other stuff. Maybe we should really be checking it before even calling ATMP.\r\n\r\n@JeremyRubin This is needed for GUI transactions too, at least.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647046700/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647047694",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647047694",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 647047694,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NzA0NzY5NA==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-20T21:31:44Z",
    "updated_at": "2020-06-20T21:31:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "One approach might be to introduce a redundant layer of logic to all the places we actually want to perform the absurdfee check, and then in a follow up PR (or commit if you want to do it in one), remove the now redundant ATMP check. I agree that ATMP is later than ideal for checking this property.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647047694/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647050678",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647050678",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 647050678,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NzA1MDY3OA==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-20T22:08:37Z",
    "updated_at": "2020-06-20T22:08:37Z",
    "author_association": "MEMBER",
    "body": "I agree with removing the absurd fee check from ATMP, but we should still have it somewhere instead of removing it completely. Since it only is used for transactions sent by the node, the ideal place to move this to would be `BroadcastTransaction` in `src/node/transaction.cpp`. The RPC and wallet (GUI goes through the wallet) both use `BroadcastTransaction`.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647050678/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647813137",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647813137",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 647813137,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NzgxMzEzNw==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-22T23:08:49Z",
    "updated_at": "2020-06-22T23:08:49Z",
    "author_association": "MEMBER",
    "body": "Concept ACK! This isn't policy, it's wallet/RPC behaviour (and as such, belongs in the wallet/RPC).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647813137/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647841346",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647841346",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 647841346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0Nzg0MTM0Ng==",
    "user": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?u=256d78207f88d303d61b62060a309657276cf6cb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-06-23T00:49:04Z",
    "updated_at": "2020-06-23T00:49:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647841346/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663587420",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-663587420",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 663587420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzU4NzQyMA==",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-24T15:11:36Z",
    "updated_at": "2020-07-24T15:11:36Z",
    "author_association": "MEMBER",
    "body": "Concept ACK,\r\n\r\nThis check should be part of a consistent wallet _tx-sanitization_ policy, i.e a set of checks protecting users funds against harmful actions before authorizing spend. Some signers already do this like [Coincard](https://ckbunker.com/policy.html). We could envision Core implementing the same kind of logic behind ScriptPubKeyMan::SignTransaction, with user settings. Now do this policy should apply to transaction flowing through our node but not originating from our wallet (`sendrawtransaction`) ? That's harder to decide on because in some cases an absurd fee may have a game-theory rational (a LN justice transaction burning everything in fees before CSV delay expiration). \r\n\r\nOverall, absurd fee protection is already enforced on its own in `CreateTransaction` (grep `m_default_max_tx_fee`) but blindly removing from mempool checks would be a behavior change as it won't be applied anymore to `sendrawtransaction`/GUI transactions. So going forward with this PR check should be moved inside `BroadcastTransaction` to conserve behavior IMO.\r\n\r\nWith regards to untangling policy/consensus checks I think that should be a distinct conversation, order of them matter for anti-DoS reasons. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663587420/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663904504",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-663904504",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 663904504,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzkwNDUwNA==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-25T20:48:30Z",
    "updated_at": "2020-07-25T20:48:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "This builds on #19093. If that one is merged first then I\u2019ll rebase this; if this one gets more review attention, @rajarshimaitra is listed as the author of the base commit here so hopefully that\u2019s ok. \r\n\r\nPer y\u2019all\u2019s wonderful advice, I moved the absurd fee checking into `BroadcastTransaction` and as an extra step in `testmempoolaccept`. Calling this a `TransactionError::MAX_FEE_EXCEEDED` seemed more appropriate, since that\u2019s what the wallet uses. I still don\u2019t think it\u2019s policy since it\u2019s empty for transactions not originating from the node\u2019s own wallet. Whether it _should_ be policy would a separate and interesting discussion \ud83d\udc40 .\r\n\r\nThere\u2019s a couple intermediate stages to (1) test_accept and check fee before submitting (https://github.com/bitcoin/bitcoin/pull/19339/commits/7dc55a5f4c2bc3ba3c301338ce75b25412365dd7) and (2) keep absurd fee but ignore it in validation (https://github.com/bitcoin/bitcoin/pull/19339/commits/40703b1d5185cd26626d9da1fb76c3babdcdd550) to show that the behavior is the same.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663904504/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664325546",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-664325546",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 664325546,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NDMyNTU0Ng==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-27T10:58:31Z",
    "updated_at": "2020-07-27T10:58:31Z",
    "author_association": "MEMBER",
    "body": "Approach ACK. This looks great. Thanks Gloria!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/664325546/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674549975",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-674549975",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 674549975,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NDU0OTk3NQ==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-16T16:51:07Z",
    "updated_at": "2020-08-19T18:57:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased and refactored some of the commits to make it cleaner + easier to review in preparation for PR Review Club ([Notes](https://bitcoincore.reviews/19339)). Now's a perfect time to review if anyone has time :) thanks everybody!\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674549975/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678673676",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-678673676",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 678673676,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODY3MzY3Ng==",
    "user": {
      "login": "robot-dreams",
      "id": 4276679,
      "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4276679?u=b4a8cdc0904dca5d0765b64a5ba4ae1759539a98&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robot-dreams",
      "html_url": "https://github.com/robot-dreams",
      "followers_url": "https://api.github.com/users/robot-dreams/followers",
      "following_url": "https://api.github.com/users/robot-dreams/following{/other_user}",
      "gists_url": "https://api.github.com/users/robot-dreams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robot-dreams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
      "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
      "repos_url": "https://api.github.com/users/robot-dreams/repos",
      "events_url": "https://api.github.com/users/robot-dreams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-22T18:12:46Z",
    "updated_at": "2020-08-22T18:12:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK, Approach ACK, unit tests + all updated functional tests pass locally\r\n\r\nI think the discussion of \"what are the performance implications of calling ATMP twice\" is very interesting. I looked up where `BroadcastTransaction` could be called, and here's what I found:\r\n\r\n- `sendrawtransaction` RPC\r\n- `SubmitMemoryPoolAndRelay` in the wallet\r\n- `PSBTOperationsDialog` in the UI\r\n\r\nIn particular, I'm guessing `BroadcastTransaction` calls aren't too frequent (e.g. compared to relaying transactions in the P2P network), so the overhead of calling ATMP twice (especially since @gzhao408 showed that many of the verification results are cached) is OK.\r\n\r\n### Follow-ups for review club discussion:\r\n\r\n#### What would be the tradeoffs / considerations involved with either of these alternative approaches?\r\n\r\n1. Replace the `nAbsurdFee` parameter with some sort of generic `clientSafetyChecks` object that ATMP can call without knowing the client-specific details\r\n\r\n2. Split up ATMP into two parts: (i) `TestForMemoryPool` performs all checks and returns a fee together with some context, (ii) `AddToMemoryPool` takes the context and finishes the process. This way, we can remove the `test_accept` parameter. The `testmempoolaccept` RPC could just call `TestForMemoryPool`, and then `sendrawtransaction` could do something like this:\r\n\r\n```\r\ncontext = TestForMemoryPool(...);\r\nif (max_tx_fee && context.fee > max_tx_fee) {\r\n\treturn TransactionError::MAX_FEE_EXCEEDED;\r\n}\r\n\r\nif (!AddToMemoryPool(*node.mempool, context, ...)) {\r\n\t// return error result\r\n}\r\n```\r\n\r\n#### How will this change interact with taproot?\r\n\r\nGiven the \"Client side absurd fee problems should generally improve post-taproot\" comment above, will this code need to change again soon, or will \"post-taproot\" have multiple code paths, of which this is one of them?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678673676/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678812569",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-678812569",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 678812569,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODgxMjU2OQ==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-23T19:11:57Z",
    "updated_at": "2020-08-23T19:19:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the review @robot-dreams :)\r\n> In particular, I'm guessing `BroadcastTransaction` calls aren't too frequent (e.g. compared to relaying transactions in the P2P network)\r\n\r\nNice observation; I'd like to highlight that `BroadcastTransaction` is used for transactions coming from _clients_ as opposed to peers. Even if the slowdown were significant, it's very different from an inefficiency that may be exploited by random network peers.\r\n\r\n> Replace the `nAbsurdFee` parameter with some sort of generic `clientSafetyChecks` object that ATMP can call without knowing the client-specific details\r\n\r\nThe idea here is that we want to separate client-specific details from ATMP. In general, the validation result returned by ATMP shouldn't depend on which client submitted it (my opinion).\r\n\r\n> Split up ATMP into two parts: (i) TestForMemoryPool performs all checks and returns a fee together with some context, (ii) AddToMemoryPool takes the context and finishes the process.\r\n\r\nI'm not quite sure I fully understand this idea, but it seems pretty similar to what happens right now in ATMP. Most of it can be seen in [`AcceptSingleTransaction`](https://github.com/bitcoin/bitcoin/blob/master/src/validation.cpp#L1030) which has 4 components: the 3 `*Checks` (validation and fill in the fee), and `Finalize` (try to add it to the mempool). A test-accept returns before `Finalize`; a \"real\" accept runs through everything (and uses what's cached if possible). Other than repeating checks (which is the safe thing to do), this seems equivalent to what you're suggesting.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678812569/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/679085763",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-679085763",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 679085763,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTA4NTc2Mw==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-24T12:04:09Z",
    "updated_at": "2020-08-24T12:04:09Z",
    "author_association": "MEMBER",
    "body": "In the last commit log, there's no need to state which commit hash the commit was cherry-picked from.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/679085763/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/679213758",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-679213758",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 679213758,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTIxMzc1OA==",
    "user": {
      "login": "robot-dreams",
      "id": 4276679,
      "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4276679?u=b4a8cdc0904dca5d0765b64a5ba4ae1759539a98&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robot-dreams",
      "html_url": "https://github.com/robot-dreams",
      "followers_url": "https://api.github.com/users/robot-dreams/followers",
      "following_url": "https://api.github.com/users/robot-dreams/following{/other_user}",
      "gists_url": "https://api.github.com/users/robot-dreams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robot-dreams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
      "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
      "repos_url": "https://api.github.com/users/robot-dreams/repos",
      "events_url": "https://api.github.com/users/robot-dreams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-24T15:57:09Z",
    "updated_at": "2020-08-24T15:57:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gzhao408 I did some cleanup and pushed it to https://github.com/robot-dreams/bitcoin/commits/mempool-remove-absurdfee ; feel free to grab any of the updated commits if you'd find them helpful, but of course no pressure to do so!\r\n\r\n- Rebase and fix merge conflict\r\n- Change `std::move(tx)` to `tx`\r\n- Change PR number in release notes\r\n- Change release notes about `testmempoolaccept` from \"if transaction is accepted\" to \"if transaction **would be** accepted\"\r\n- Fix typo in commit message (udpate -> update)\r\n- Remove \"cherry-picked from\" from commit message",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/679213758/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/680133532",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-680133532",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 680133532,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDEzMzUzMg==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-25T16:30:25Z",
    "updated_at": "2020-08-25T16:30:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased and addressed comments. Apologies, I'm wrestling with the scripted-diff linter :'( \r\n\r\nI also edited the first commit so that I'm only picking the ATMP changes in #19093 (which is more RPC-focused) - these two PRs are now uncoupled.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/680133532/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/680422284",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-680422284",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 680422284,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDQyMjI4NA==",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?u=a0e0040aacd7d4f0787481e8ac30b494fa429e11&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-26T02:26:26Z",
    "updated_at": "2020-08-26T02:26:26Z",
    "author_association": "MEMBER",
    "body": "> Rebased and addressed comments. Apologies, I'm wrestling with the scripted-diff linter :'(\r\n\r\nThe issue is GNU vs BSD sed. I'm assuming you are on macOS (BSD sed), and you've written a command that is incompatible with GNU sed (used by Travis). The fix here is to drop the '' after `-i`, which is the part that's incompatible. Unfortunately portability when using `-i` isn't trivial.\r\n\r\nWhen testing `sed` commands on macOS I'd suggest brew installing and using [`gsed`](https://formulae.brew.sh/formula/gnu-sed).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/680422284/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/680708152",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-680708152",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 680708152,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDcwODE1Mg==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-26T07:24:14Z",
    "updated_at": "2020-08-26T07:24:14Z",
    "author_association": "MEMBER",
    "body": "> The issue is GNU vs BSD sed. I'm assuming you are on macOS (BSD sed), and you've written a command that is incompatible with GNU sed (used by Travis). The fix here is to drop the '' after -i, which is the part that's incompatible. Unfortunately portability when using -i isn't trivial.\r\n\r\nThis issue has tripped lots of people up (including me). Perhaps `commit-script-check.sh` should detect if a scripted diff uses the BSD sed syntax and print a more helpful error message.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/680708152/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/681088739",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-681088739",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 681088739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTA4ODczOQ==",
    "user": {
      "login": "michaelfolkson",
      "id": 16323900,
      "node_id": "MDQ6VXNlcjE2MzIzOTAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/16323900?u=e2201a78ad660e42fd175003d02ad749b855e0a9&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelfolkson",
      "html_url": "https://github.com/michaelfolkson",
      "followers_url": "https://api.github.com/users/michaelfolkson/followers",
      "following_url": "https://api.github.com/users/michaelfolkson/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
      "repos_url": "https://api.github.com/users/michaelfolkson/repos",
      "events_url": "https://api.github.com/users/michaelfolkson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-26T19:50:13Z",
    "updated_at": "2020-08-26T19:50:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK, Approach ACK\r\n\r\n> It might be worth doing, but I'm not sure if the costs outweigh the benefits, and if/when done, it should be splitting all policy from all consensus checks, not just one policy from the rest.\r\n\r\nAs was pointed out during the Bitcoin Core PR review club [session](https://bitcoincore.reviews/19339) and John earlier [here](https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-647813137) absurd fee checking is not policy and so splitting policy from consensus checks is not the goal in this PR. \r\n\r\n(Using @gzhao408 definition of policy here as \"a node\u2019s extra standards for validation in addition to consensus\")",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/681088739/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683445409",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-683445409",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 683445409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzQ0NTQwOQ==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-30T17:09:36Z",
    "updated_at": "2020-08-30T17:09:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased, addressed @jonatack's review comments, fixed the `sed` problem. I also squashed the commits that add the client checking so hopefully the commits are more clear. This is ready for another look! \r\n\r\nI'm not sure what the appveyor failure is...? It doesn't seem related to this PR's changes \ud83e\udd14 ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683445409/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683446524",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-683446524",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 683446524,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzQ0NjUyNA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-30T17:19:13Z",
    "updated_at": "2020-08-30T17:19:13Z",
    "author_association": "MEMBER",
    "body": "> I'm not sure what the appveyor failure is...? It doesn't seem related to this PR's changes \ud83e\udd14 \n\nYes, appveyor is down ATM, #19839 was opened today as a fix.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683446524/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686318923",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-686318923",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 686318923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjMxODkyMw==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-03T07:48:43Z",
    "updated_at": "2020-09-03T07:48:43Z",
    "author_association": "MEMBER",
    "body": "utACK d0f10e25afbbbcfc2c46300cf7112ce4f303987d (but needs rebase)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686318923/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686603252",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-686603252",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 686603252,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjYwMzI1Mg==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-03T16:19:11Z",
    "updated_at": "2020-09-03T16:19:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686603252/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686624517",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-686624517",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 686624517,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjYyNDUxNw==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-03T16:57:56Z",
    "updated_at": "2020-09-03T16:57:56Z",
    "author_association": "MEMBER",
    "body": "utACK 6bbda0e5d4\r\n\r\nVerified `git range-diff 4afff49265~..d0f10e25af 9ec325e2e9~..6bbda0e5d4`",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686624517/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687182070",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-687182070",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 687182070,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NzE4MjA3MA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-04T14:31:43Z",
    "updated_at": "2020-09-04T14:31:43Z",
    "author_association": "MEMBER",
    "body": "The CI failures seem unrelated--the travis job logs no error afaict and cirrus timed out.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687182070/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687481868",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-687481868",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 687481868,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NzQ4MTg2OA==",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-05T00:03:56Z",
    "updated_at": "2020-09-05T00:03:56Z",
    "author_association": "MEMBER",
    "body": "I agree with the goal of this PR, but invoking ATMP twice really feels like the wrong solution.  Could we just add a function to `validation.cpp` that returns the fee of a transaction (similar to what @ariard suggested in https://github.com/bitcoin/bitcoin/pull/19339#discussion_r483309109)?  That would be helpful more generally, for instance so that our wallet could someday tell us what the feerate is of incoming transactions.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687481868/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687581258",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-687581258",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 687581258,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NzU4MTI1OA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-05T09:48:07Z",
    "updated_at": "2020-09-05T09:48:07Z",
    "author_association": "MEMBER",
    "body": "> invoking ATMP twice really feels like the wrong solution\r\n\r\nCan you give a bit more concrete reason why this feels like the wrong solution to you? It seems like a very elegant way to utilize the existing code and avoid repetition. Note that this approach was suggested by @MarcoFalke in #15810 and got approach ACKs there from @sipa, @gmaxwell and me.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687581258/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687590078",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-687590078",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 687590078,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NzU5MDA3OA==",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-05T10:54:45Z",
    "updated_at": "2020-09-05T10:54:45Z",
    "author_association": "MEMBER",
    "body": "> Note that this approach was suggested by @MarcoFalke in #15810 and got approach ACKs there from @sipa, @gmaxwell and me.\r\n\r\nThanks for the context of #15810.  I agree that this PR's approach is better in some ways than the one there, by making the check in one place, at the time we try to call ATMP, rather than spread across multiple places in our rpc/wallet code.\r\n\r\nHowever ATMP does so much more than just calculate the fee of a transaction, so if that's the only reason we're invoking it twice it seems like overkill.  How much slower does this make the rpc call, particularly if a user is working with large transactions?  Re-validating a transaction, even when its signature checks have been cached, can still be slow for large transactions (especially non-segwit transactions) due to needing to rehash the data for those signature checks again.\r\n\r\nIf all we need is to look up inputs in the utxo set or in the mempool that is much quicker; so that aspect of #15810 I think is preferable to what we have here. I think the best outcome would be to add a function to validation that does the very simple thing of returning the fee of a given transaction (if calculable from the utxo and mempool, otherwise return an error); and where we call ATMP twice in this patch we could instead call the fee calculator and, on success and passing the absurd fee check, invoke ATMP.\r\n\r\nThis would result in the cleanest outcome for ATMP (slight improvement over what is proposed here is to get rid of the optional fee_out argument), and would be most performant.  The downside is the small amount of logic duplication in having a way to calculate fee in a single place outside of ATMP, but I think the performance benefit would outweigh that.  (By contrast, the version of #15810 that I reviewed just now had this check reimplemented in 3 places through the rpc/wallet code, so I wonder if that aspect is what reviewers were objecting to?)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687590078/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687619570",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-687619570",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 687619570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NzYxOTU3MA==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-05T14:34:25Z",
    "updated_at": "2020-09-05T14:34:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for your input @sdaftuar! I agree that the fee check should be minimal.\r\n\r\nSome concerns I\u2019ve heard about the 2x ATMP and will try to summarize here:\r\n- Performance: I did some bookkeeping by adding some logs to see how much use we get out of the signature and script caches ([comment](https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475093378)). We get quite a bit of reuse although, as you said, the hashing is also expensive. I assumed that a small performance hit wouldn't be too egregious in a function only used by clients.\r\n- Unnecessary ATMP validation logic when all we need is the fee: I definitely see this. Adding another function would probably have to do many of the sanitization steps as `PreChecks`, which isn\u2019t too expensive but would also be a little redundant. I think that just calling `PreChecks` would be sufficient if we could do that, but perhaps we would want to uncache the coins as well (handled in `ATMPWithTime` afterward)? As I thought about the \u201cminimum amount\u201d we need, it started to look more and more similar to ATMP, even if it's just adding it in 1 place.\r\n\r\nSome reasons for using 2x ATMP:\r\n- Minimal new code\r\n- In the case where a transaction has both, say, an invalid script and absurd fee, I think it would make more sense to return the more serious validation failure rather than `max-fee-exceeded`. \r\n- If the minimal fee-checking function returns an error, should we try again with ATMP or trust its result and return failure? If the latter, unless it's comprehensive, I was worried I'd accidentally introduce a bug where `BroadcastTransaction` is often failing due to imperfect fee-checker rather than real invalidity. If I were to do it this way, I'd probably reuse `PreChecks`.\r\n\r\n> This would result in the cleanest outcome for ATMP (slight improvement over what is proposed here is to get rid of the optional fee_out argument)\r\n\r\nFor some context, #19093 added `fee_out` to return the fee to the user in `testmempoolaccept`. I built on top of that since it suited my needs as well.\r\n\r\nI followed this approach under others' guidance (as @jnewbery mentioned), but also thought about the case of adding a separate check. Since you mentioned a separate fee-checking function could be helpful in other cases as well, I'm open/interested in implementing this. I just think that many of the things we do in ATMP would need to be repeated there as well. Would you agree that this is the case, and would it still be appropriate to add this?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687619570/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687834534",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-687834534",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 687834534,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NzgzNDUzNA==",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-06T16:29:18Z",
    "updated_at": "2020-09-06T23:25:07Z",
    "author_association": "MEMBER",
    "body": "EDIT: Just to be clear, I maintain my Code Review ACK. That said it would be great if we open an issue or else to discuss and track further improvements in this area of the code, there is room for it.\r\n\r\n------\r\n\r\nIf the problem solves by this PR is \"How to disentangle wallet sanity max fee from mempool policy checks ?\", I'm not sure the current approach achieves it as types of checks are still blurred, i.e a policy failure will mask the wallet max fee.\r\n\r\n> In the case where a transaction has both, say, an invalid script and absurd fee, I think it would make more sense to return the more serious validation failure rather than max-fee-exceeded.\r\n\r\nA failure is a failure, what heuristic do you follow to sort the severity of them ? Your transaction can still succeed all mempool rules, but still not broadcast due to its feerate inferior to all your peer's `feefilter`. Gathering checks by component which are responsible of them a) should ease review reasoning b) should enhance performance.\r\n\r\n> I was worried I'd accidentally introduce a bug where BroadcastTransaction is often failing due to imperfect fee-checker rather than real invalidity. If I were to do it this way, I'd probably reuse PreChecks.\r\n\r\nNote that this approach isn't bug-free, see above if we refactor the main lock tacking. Code duplication is a concern. The fee computation job is partially done by `Consensus::CheckTxInputs` which can be reused. What we can do is refactor internally `PreChecks` to extract the outpoints gathering logic in its own method thus a new `FeeCalculator` just have to wrap both and should be consistent with ATMP.\r\n\r\nAlso, any wallet check shouldn't belong to `BroadcastTransaction` but on the other side of the interface in `src/wallet/`. IIRC the design goal of `BroadcastTransaction` is just to be a wrapper between nodes components.\r\n\r\nThe current PR is worthy on its own to at least separate logically wallet from mempool checks and the reason I gave my ACK. But more I think about it more I guess we would like to have a clean `FeeCalculator` method. It's more costly in reviewing time but we could reuse it for exacting feerate of Taproot witnesses (which may come with their own feerate accounting rules, hard to reimplement correctly by client) or build an automatic RBF logic in the wallet (and you need to cache feerate across attempts).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687834534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688443346",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-688443346",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 688443346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4ODQ0MzM0Ng==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-07T17:14:12Z",
    "updated_at": "2020-09-08T15:13:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @ariard! I appreciate that your ACK is not being withdrawn.\r\n> A failure is a failure, what heuristic do you follow to sort the severity of them ?\r\n\r\nWe have a few defined categories that are relevant here, afaik:\r\n- Validation/Consensus failures (e.g. an invalid script or signature, etc)\r\n- Policy fails (e.g. minimum feerate for relay)\r\n- Client preference (e.g. absurd fee)\r\n\r\nI\u2019ve [arbitrarily] sorted them in severity, based on the idea that consensus failure = nobody will accept, policy failure = this node won\u2019t accept, client preference = this user won\u2019t accept. So I meant that any validation failure would be more serious than a client preference not being met. That being said, I could be misguided to say that higher severity should take priority. But this PR doesn\u2019t hinge on this idea.\r\n> If the problem solves by this PR is \u201cHow to disentangle wallet sanity max fee from mempool policy checks ?\u201c, I\u2019m not sure the current approach achieves it as types of checks are still blurred, i.e a policy failure will mask the wallet max fee.\r\n\r\nPlease let me know if I misunderstand your comment, but I don\u2019t think the checks are \u201cstill blurred.\u201d I would interpret blurring to be when code _should_ only be responsible for checking mempool/policy also has a client check mixed in there, which was the case before this PR. Also confusing, it would return `TX_NOT_STANDARD` (should = policy error) for absurd fee. In terms of failure cases, let me enumerate them:\r\n| policy | absurd fee | ATMP error (before this PR)         | ATMP error (after this PR)            |\r\n|--------|------------|-------------------------------------|---------------------------------------|\r\n| fail   | fail       | (depends on which one comes first) | TxValidationResult::(policy)   |\r\n| fail   | pass       | TxValidationResult::(policy)| TxValidationResult::(policy)   |\r\n| pass   | fail       | TxValidationResult::TX_NOT_STANDARD | none. client returns MAX_FEE_EXCEEDED |\r\n\r\nI\u2019d say this is less blurred than before. Further, the wallet (before and after this PR) checks against max fee in `CreateTransaction`. Thus, afaik it catches absurd fees before ever trying to submit to mempool, and case 1 and 3 don\u2019t actually happen. This PR is more relevant to the RPCs `testmempoolaccept` and `sendrawtransaction`, where ATMP was actually shouldering the fee checking responsibility.\r\n\r\nI think we should discuss/implement a `FeeCalculator` method on a separate issue or PR if it isn\u2019t a blocker here (although still waiting to hear from @sdaftuar on whether it is) :slightly_smiling_face:",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688443346/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688860764",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-688860764",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 688860764,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4ODg2MDc2NA==",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-08T13:19:48Z",
    "updated_at": "2020-09-08T13:24:20Z",
    "author_association": "MEMBER",
    "body": "> I\u2019ve [arbitrarily] sorted them in severity, based on the idea that consensus failure = nobody will accept, policy failure = this node won\u2019t accept, client preference = this user won\u2019t accept. \r\n\r\nSure, the set of parties interested to the rule violation is one axis of analysis. The one I would favor is ordering them by tightness, namely a set A is more tight than set B if transaction is accepted by B but not by A. So wallet's absurd fee is more strict than any consensus rules violation, even if local user is the only one interested. Concretely that gives you a heuristic to organize code in a way that if your transaction is rejected by set B (policy) it won't mask rejection by set A (client preference), as current code after the PR is doing by reusing ATMP.\r\n\r\n> I would interpret blurring to be when code should only be responsible for checking mempool/policy also has a client check mixed in there, which was the case before this PR.\r\n\r\nCorrect if I'm wrong but before/after this PR, if your transaction violates `MIN_STANDARD_TX_NONWITNESS_SIZE`and absurd fee, a user will only see reject message for the first violation and might still fail its client preferences after correcting the policy violation. Layering cleanly errors means a user is less confused about what to do in case of failure.\r\n\r\n>  This PR is more relevant to the RPCs testmempoolaccept and sendrawtransaction, where ATMP was actually shouldering the fee checking responsibility.\r\n\r\nYep and encapsulating the code further to be reused across RPCs, wallets or even as a library sounds like future steps :)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688860764/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/689600212",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-689600212",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 689600212,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTYwMDIxMg==",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-09T14:28:52Z",
    "updated_at": "2020-09-09T14:28:52Z",
    "author_association": "MEMBER",
    "body": "I think this patch is basically what the fee calculator would need to look like:\r\n\r\n```diff\r\ndiff --git a/src/validation.cpp b/src/validation.cpp\r\nindex 58af8744d90..87685b44f6b 100644\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -1059,6 +1059,30 @@ bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs\r\n \r\n } // anon namespace\r\n \r\n+\r\n+// Calculate the fee of a transaction, by looking up inputs from the mempool if\r\n+// necessary. Return true if the fee was successfully calculated, or false if\r\n+// an error with the transaction was discovered.\r\n+// Success does not imply that the transaction is valid -- but if it is valid,\r\n+// then the fee returned is correct.\r\n+bool GetTransactionFee(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx, CAmount *fee_out)\r\n+{\r\n+    LOCK2(cs_main, pool.cs);\r\n+\r\n+    CCoinsViewMemPool viewmempool(&::ChainstateActive().CoinsTip(), pool);\r\n+    CCoinsViewCache view(&viewmempool);\r\n+    view.GetBestBlock();\r\n+\r\n+    *fee_out = 0;\r\n+\r\n+    // Fees don't make sense for coinbase transactions\r\n+    if (tx->IsCoinBase()) return false;\r\n+    // Re-use the fee calculation in CheckTxInputs, which also validates that\r\n+    // the fee calculation is correct (ie that we don't overflow)\r\n+    if (!Consensus::CheckTxInputs(*tx, state, view, GetSpendHeight(view), *fee_out)) return false;\r\n+    return true;\r\n+}\r\n+\r\n /** (try to) add transaction to memory pool with a specified acceptance time **/\r\n static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\r\n                         int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\r\ndiff --git a/src/validation.h b/src/validation.h\r\nindex cac9473c7a5..9833b9d9e05 100644\r\n--- a/src/validation.h\r\n+++ b/src/validation.h\r\n@@ -199,6 +199,8 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\r\n /** Prune block files up to a given height */\r\n void PruneBlockFilesManual(int nManualPruneHeight);\r\n \r\n+bool GetTransactionFee(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx, CAmount *fee_out);\r\n+\r\n /** (try to) add transaction to memory pool\r\n  * plTxnReplaced will be appended to with all transactions replaced from mempool **/\r\n bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\r\n```\r\n\r\nWell it should probably fill in the TxValidationState for a coinbase transaction rather than just return false, but aside from that I don't believe we need more than this.  The semantics I suggest are: if the transaction is valid, then the fee calculated here is definitely correct; but if the transaction is invalid you don't know.  I think this is sufficient for many purposes, including the proposal here.  \r\n\r\nI was giving this more thought and I can also see a philosophical argument for fees only being meaningful if a transaction is valid, but validity is a tricky idea, because mempool acceptance couples various policy and anti-DoS ideas in with consensus validity. So something like #19093 is reasonable to me for that reason, and building on that to do the absurd fee check for testmempoolaccept seems reasonable.  However for other use cases in our wallet/rpc code, I think pulling out the fee calculation separately would be preferable to running ATMP twice.  And it seems to me that this kind of function should be more generally useful (for example I could imagine wanting a way to calculate the fee of a rawtransaction, without having to run it through ATMP).\r\n\r\nI think the way you'd use this is, if you're doing the maximum fee check, invoke this function and see if it succeeds; if not you give up on the transaction.  If it succeeds and the fee is too high, again give up.  Otherwise, invoke ATMP() and return the success or failure from that.\r\n\r\n> In the case where a transaction has both, say, an invalid script and absurd fee, I think it would make more sense to return the more serious validation failure rather than max-fee-exceeded.\r\n\r\nI think this is hard to say; I suspect it's way more likely to get a max-fee-exceeded than an actual script or policy failure!  It seems perfectly reasonable to me that a workflow for submitting a transaction is to first check the fees are sane, and then validate if that passes, so if our software does that too I think it's fine.\r\n\r\n> If the minimal fee-checking function returns an error, should we try again with ATMP or trust its result and return failure? If the latter, unless it's comprehensive, I was worried I'd accidentally introduce a bug where BroadcastTransaction is often failing due to imperfect fee-checker rather than real invalidity. If I were to do it this way, I'd probably reuse PreChecks.\r\n\r\nWith my proposed semantics, we wouldn't continue if there's an error -- the fee calculator I propose is only correct if there are no errors, otherwise all bets are off.  I don't think using PreChecks() would be problematic, but I think it's easier and more concise to just use CheckTxInputs() as I suggest.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/689600212/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693468642",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-693468642",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 693468642,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MzQ2ODY0Mg==",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?u=7965845672d27f915c0cbf6a4912ef63a012efb1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-16T15:06:36Z",
    "updated_at": "2020-09-16T15:06:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "This PR updates several of the tests (both unit and functional), but, unless I'm missing it, it doesn't look like there's any verification of the modified _behavior_ (asserting that transactions with high fees are forwarded with the PR but not without the PR). This would probably require a brand new test or tests. Have you considered doing that? I may be able to help with this, but not until next week at the earliest. What do you think?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693468642/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/695067189",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-695067189",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 695067189,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTA2NzE4OQ==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-18T20:20:04Z",
    "updated_at": "2020-09-18T20:20:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just pushed with a rebase and `GetTransactionFee`. Hope that you can take a look at it @sdaftuar; it's largely based on your [comment](https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-689600212). And @jnewbery @ariard @jonatack - diff of the first 5 commits is the same so I hope it's easier to re-review. Thank you so much :pray:\r\n\r\nThank you for your review @larryruane! Incorporated your only `if(max_tx_fee)` suggestion in https://github.com/bitcoin/bitcoin/pull/19339/commits/8c8b936dca571e4fd631c9a8a1306549072b449c\r\n\r\n> it doesn't look like there's any verification of the\u00a0modified\u00a0behavior\u00a0(asserting that transactions with high fees are forwarded with the PR but not without the PR).\r\n\r\nThis behavior hasn\u2019t been changed, high fee transactions are still not forwarded if from client and are forwarded if from peers :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/695067189/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/696449638",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-696449638",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 696449638,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NjQ0OTYzOA==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-22T00:23:42Z",
    "updated_at": "2020-09-22T00:23:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for your feedback @DrahtBot, addressed.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/696449638/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/699517077",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-699517077",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 699517077,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5OTUxNzA3Nw==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-26T16:26:25Z",
    "updated_at": "2020-09-26T16:26:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "I felt that we had a lot of open questions regarding `GetTransactionFee` so I've opened a separate PR for review, #20025 (addressed @jnewbery's comments there as well).\r\n\r\nThis PR just re-delegates absurdfee checking to clients. The branch as it currently stands is pretty much the same as what was ACK'ed before, with a few small fixes. \r\n\r\nFor everyone who has reviewed this PR, I really appreciate your time so far! If you're still comfortable with these changes, please let me know. If this approach is unacceptable please let me know as well, I can always close this in favor of #20025 since it's based on this branch :) in general I'd just like to discuss `GetTransactionFee` there instead of here.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/699517077/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702063349",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-702063349",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 702063349,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMjA2MzM0OQ==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-01T11:12:41Z",
    "updated_at": "2020-10-01T11:12:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702063349/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/703299852",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-703299852",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 703299852,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzI5OTg1Mg==",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?u=7965845672d27f915c0cbf6a4912ef63a012efb1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-04T18:57:07Z",
    "updated_at": "2020-10-04T18:57:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "utACK 8784930\r\n<details>\r\n<summary>git range-diff 22ebb7f~4..22ebb7f 8784930~4..87849300</summary>\r\n\r\n```\r\n1:  b1ea8a00f ! 1:  f907f4b93 [rpc/node] check for high fee before ATMP in clients\r\n    @@ src/node/transaction.cpp: TransactionError BroadcastTransaction(NodeContext& nod\r\n      \r\n     \r\n      ## src/rpc/rawtransaction.cpp ##\r\n    -@@ src/rpc/rawtransaction.cpp: static UniValue testmempoolaccept(const JSONRPCRequest& request)\r\n    +@@ src/rpc/rawtransaction.cpp: static RPCHelpMan testmempoolaccept()\r\n      \r\n          TxValidationState state;\r\n          bool test_accept_res;\r\n2:  4568fa37f = 2:  b0ec04de0 scripted-diff: update max-fee-exceeded error message to include RPC\r\n3:  b635b5d51 ! 3:  6a4a7c642 [validation] ignore absurdfee arg in ATMP\r\n    @@ Commit message\r\n         [validation] ignore absurdfee arg in ATMP\r\n     \r\n      ## src/rpc/rawtransaction.cpp ##\r\n    -@@ src/rpc/rawtransaction.cpp: static UniValue testmempoolaccept(const JSONRPCRequest& request)\r\n    +@@ src/rpc/rawtransaction.cpp: static RPCHelpMan testmempoolaccept()\r\n                  nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true, &fee);\r\n          }\r\n      \r\n4:  22ebb7fda ! 4:  8784930df [validation] Remove absurdfee from accepttomempool\r\n    @@ src/bench/block_assemble.cpp: static void AssembleBlock(benchmark::Bench& bench)\r\n          }\r\n     \r\n      ## src/net_processing.cpp ##\r\n    -@@ src/net_processing.cpp: void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set, std::list<\r\n    -         TxValidationState orphan_state;\r\n    +@@ src/net_processing.cpp: void PeerManager::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\r\n    +         TxValidationState state;\r\n    +         std::list<CTransactionRef> removed_txn;\r\n      \r\n    -         if (setMisbehaving.count(fromPeer)) continue;\r\n    --        if (AcceptToMemoryPool(m_mempool, orphan_state, porphanTx, &removed_txn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\r\n    -+        if (AcceptToMemoryPool(m_mempool, orphan_state, porphanTx, &removed_txn, false /* bypass_limits */)) {\r\n    +-        if (AcceptToMemoryPool(m_mempool, state, porphanTx, &removed_txn, false /* bypass_limits */, 0 /* nAbsurdFee */)) {\r\n    ++        if (AcceptToMemoryPool(m_mempool, state, porphanTx, &removed_txn, false /* bypass_limits */)) {\r\n                  LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\r\n                  RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), m_connman);\r\n    -             for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\r\n    +             for (unsigned int i = 0; i < porphanTx->vout.size(); i++) {\r\n     @@ src/net_processing.cpp: void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\r\n              // (older than our recency filter) if trying to DoS us, without any need\r\n              // for witness malleation.\r\n    @@ src/node/transaction.cpp: TransactionError BroadcastTransaction(NodeContext& nod\r\n      \r\n     \r\n      ## src/rpc/rawtransaction.cpp ##\r\n    -@@ src/rpc/rawtransaction.cpp: static UniValue testmempoolaccept(const JSONRPCRequest& request)\r\n    +@@ src/rpc/rawtransaction.cpp: static RPCHelpMan testmempoolaccept()\r\n          {\r\n              LOCK(cs_main);\r\n              test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\r\n```\r\n</details>",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/703299852/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/703609697",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-703609697",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 703609697,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzYwOTY5Nw==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-05T12:49:15Z",
    "updated_at": "2020-10-05T12:49:15Z",
    "author_association": "MEMBER",
    "body": "utACK b048b275d9711f70847afaea5450f17a0f7e673a",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/703609697/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/703621240",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-703621240",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 703621240,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzYyMTI0MA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-05T13:10:16Z",
    "updated_at": "2020-10-05T13:10:16Z",
    "author_association": "MEMBER",
    "body": "re-ACK b048b275d9 , only change is squashing one commit \ud83c\udfe6\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nre-ACK b048b275d9 , only change is squashing one commit \ud83c\udfe6\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUgq2gv8DSuQInycB5w6VMTMI7aBtPBoUDAX9yY9Z4Ruix1Im9Bf2fcJts6d9TxY\r\nAbgr2NlSDVGkF4wNvOi3SnXkcYSto+Yt7vNat1HCORsRSzKiyshjKbXjJg/Rvi7K\r\nS11vfpiA5YI87HoYgP/+QGUM912cLBt7DH78lnuskTVeN7B94PiyycU+WHgZw9Qm\r\n8WvFmyft5Tn5iEhOJufn7kB1B4Zdc4CbwTRsT1FpDyxoS+JQ2rvcpJgsXRf4l4Yn\r\n9wmZt637cYe4r5Nh4qyi56CgClbQvyyW1jgXZr3InFozkzPfXt9flbQJSKGGBDKy\r\nc8sVErF1g2QYC5jjkvhJ6c5fpkCt9lvrudf5ol8Ouv/KVhGE9HBqtK/05GVjUefw\r\nFfJaatnobEBXGE8JXVGvHWIazgjEd70MF1GSkZjxIyGHvvWU6IELJ2um0WP/1t4B\r\nSDSUbDFECh4hhZQupjXmTKF5dxl2h3RgkAot+tQc4EgIt9mAg10+vL/jTWTaE1B6\r\nl9ujyThH\r\n=rq5V\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `ef381a3560ba63d06ec8d836ebc9b3379cdaab5ad0d2d7c5ddbfb38d235c2c69  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e892940108ef381a3560ba63d06ec8d836ebc9b3379cdaab5ad0d2d7c5ddbfb38d235c2c69f010f7459c6b6b7dd47a242c985d4ad1f79108fff01000e06854299f4ca58e1ffe45278ecbb608f1045f7b1b26f0081451699118d9fd610083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff01032485a7305c8a64907604a39c200c8b908f020a3fcd21038f5cec725da496a52fb9a56649d652b765a87dc39c457f371d751e408f1045f7b1b26f0080717a0d75feec6bf0083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff01053c6e36354da38857b367f6af451d29708f0204c1b9cf751085ced4d39ce943ea5b0108b039bace340dbfff25f548e29323dc708f1045f7b1b26f00899d0ea377485ee940083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6df010c501309a769a737319fe27be1fbda68108f0205366a48d9ff5ef4ba0cd6173e38eb1be5449b5e1dbc3a1021b8f271709ff737e08f1045f7b1b26f0081c217c94cee026c50083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/703621240/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/703819099",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-703819099",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 703819099,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzgxOTA5OQ==",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?u=7965845672d27f915c0cbf6a4912ef63a012efb1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-05T18:46:39Z",
    "updated_at": "2020-10-05T18:46:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "re-ACK b048b275d9711f70847afaea5450f17a0f7e673a",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/703819099/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/704646142",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-704646142",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 704646142,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDY0NjE0Mg==",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-07T01:55:16Z",
    "updated_at": "2020-10-07T01:55:16Z",
    "author_association": "MEMBER",
    "body": "concept ack, this will require release notes since people tend to use sending failure codes/text in fine-grained ways and it may break downstream things",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/704646142/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/704662713",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-704662713",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 704662713,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDY2MjcxMw==",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?u=a0e0040aacd7d4f0787481e8ac30b494fa429e11&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-07T03:00:53Z",
    "updated_at": "2020-10-07T03:00:53Z",
    "author_association": "MEMBER",
    "body": "> please don't address my nit unless you have to rebase or something.\r\n\r\n@glozow can follow up with some release notes and address any remaining nits. Either in a new PR, or possibly as part of #20025.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/704662713/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/704744784",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-704744784",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 704744784,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDc0NDc4NA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-07T07:15:22Z",
    "updated_at": "2020-10-07T07:15:22Z",
    "author_association": "MEMBER",
    "body": "Instead of mentioning that `absurdly-high-fee` changed into `max-fee-exceeded`, I'd rather just change it back and prevent the release notes from bloating.\r\n\r\nThough, the reason (my reason) testmempoolaccept doesn't return an error code because we can't really guarantee stability of failure reasons across versions of Bitcoin Core. Similarly the string can't be expected to be stable. So either we assume that and don't mention the string change in the release notes, or we mention in the RPC help doc that the strings shouldn't be assumed to be stable. In both cases, the release notes don't mention the change.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/704744784/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/704894759",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-704894759",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 704894759,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDg5NDc1OQ==",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-07T12:15:20Z",
    "updated_at": "2020-10-07T12:15:20Z",
    "author_association": "MEMBER",
    "body": "Might be worth opening an issue on the topic because apparently the codes\naren't enough for downstream users. Recent breaks include LND, probably\nmore.\n\nOn Wed, Oct 7, 2020, 3:15 AM MarcoFalke <notifications@github.com> wrote:\n\n> Instead of mentioning that absurdly-high-fee changed into max-fee-exceeded,\n> I'd rather just change it back and prevent the release notes from bloating.\n>\n> Though, the reason (my reason) testmempoolaccept doesn't return an error\n> code because we can't really guarantee stability of failure reasons across\n> versions of Bitcoin Core. Similarly the string can't be expected to be\n> stable. So either we assume that and don't mention the string change in the\n> release notes, or we mention in the RPC help doc that the strings shouldn't\n> be assumed to be stable. In both cases, the release notes don't mention the\n> change.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-704744784>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ABMAFU67TYMCCYJAG63SDSTSJQIRVANCNFSM4ODQNOOQ>\n> .\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/704894759/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/704895935",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-704895935",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 704895935,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDg5NTkzNQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-07T12:17:37Z",
    "updated_at": "2020-10-07T12:17:37Z",
    "author_association": "MEMBER",
    "body": "Mind sharing a link on further information how LND was broken by this?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/704895935/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/704898320",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-704898320",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 704898320,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDg5ODMyMA==",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-07T12:22:37Z",
    "updated_at": "2020-10-07T12:22:37Z",
    "author_association": "MEMBER",
    "body": "Not this but text changes in general for mempool rpc messages. I'll dig\nthrough my notes sometime when I have the time\n\nOn Wed, Oct 7, 2020, 8:17 AM MarcoFalke <notifications@github.com> wrote:\n\n> Mind sharing a link on further information how LND was broken by this?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-704895935>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ABMAFU3CRQUFMVDXYTTEOBDSJRL7JANCNFSM4ODQNOOQ>\n> .\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/704898320/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/705824858",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-705824858",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19339",
    "id": 705824858,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNTgyNDg1OA==",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?u=3e27bc6589085f3450be1b0e969d04008cc77565&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-08T21:09:20Z",
    "updated_at": "2020-10-08T21:09:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "fwiw I think `max-fee-exceeded` is a more accurate error message - we're checking the `maxfeerate` passed in by the user, absurd or not. I'm not sure how to determine whether something should be in release notes or not :/ I'll just open a PR and we can talk there",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/705824858/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473232345",
    "pull_request_review_id": 470724834,
    "id": 473232345,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzMjM0NQ==",
    "diff_hunk": "@@ -36,10 +36,19 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n+        CAmount fee;\n+        bool test_accepted = AcceptToMemoryPool(*node.mempool, state, std::move(tx),\n+                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+        if (test_accepted) {\n+            if (max_tx_fee && fee > max_tx_fee) {\n+                return TransactionError::MAX_FEE_EXCEEDED;\n+            }\n+        }\n+        // Transaction fee is acceptable. Submit the transaction.",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "67bb7148ad4142611ab132047548f96dd3d59428",
    "user": {
      "login": "pinheadmz",
      "id": 2084648,
      "node_id": "MDQ6VXNlcjIwODQ2NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinheadmz",
      "html_url": "https://github.com/pinheadmz",
      "followers_url": "https://api.github.com/users/pinheadmz/followers",
      "following_url": "https://api.github.com/users/pinheadmz/following{/other_user}",
      "gists_url": "https://api.github.com/users/pinheadmz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
      "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
      "repos_url": "https://api.github.com/users/pinheadmz/repos",
      "events_url": "https://api.github.com/users/pinheadmz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Instead of calling ATMP twice, can we trust the `test_accepted` value from the first call and skip redundant checks in the second call? Or maybe to put it another way, if all we need is the fee here, can we compute that quickly and test it against `max_tx_fee` before checking anything else about the tx? I think if that's easy enough to do, you don't have to add an argument to ATMP. But I guess you'd still have to remove `nAbsurdFee` everywhere it's called.",
    "created_at": "2020-08-19T18:19:12Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r473232345",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473232345"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r473232345"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473232345/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473247904",
    "pull_request_review_id": 470724834,
    "id": 473247904,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0NzkwNA==",
    "diff_hunk": "@@ -0,0 +1,7 @@\n+RPC changes",
    "path": "doc/release-notes-19093.md",
    "position": null,
    "original_position": 1,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "67bb7148ad4142611ab132047548f96dd3d59428",
    "user": {
      "login": "pinheadmz",
      "id": 2084648,
      "node_id": "MDQ6VXNlcjIwODQ2NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinheadmz",
      "html_url": "https://github.com/pinheadmz",
      "followers_url": "https://api.github.com/users/pinheadmz/followers",
      "following_url": "https://api.github.com/users/pinheadmz/following{/other_user}",
      "gists_url": "https://api.github.com/users/pinheadmz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
      "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
      "repos_url": "https://api.github.com/users/pinheadmz/repos",
      "events_url": "https://api.github.com/users/pinheadmz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should the filename have the PR number? (19339) I didn't know about this convention yet, just looked it up: https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#release-notes",
    "created_at": "2020-08-19T18:48:24Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r473247904",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473247904"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r473247904"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473247904/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475088750",
    "pull_request_review_id": 472925035,
    "id": 475088750,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA4ODc1MA==",
    "diff_hunk": "@@ -36,10 +36,19 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n+        CAmount fee;\n+        bool test_accepted = AcceptToMemoryPool(*node.mempool, state, std::move(tx),\n+                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+        if (test_accepted) {\n+            if (max_tx_fee && fee > max_tx_fee) {\n+                return TransactionError::MAX_FEE_EXCEEDED;\n+            }\n+        }\n+        // Transaction fee is acceptable. Submit the transaction.",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "67bb7148ad4142611ab132047548f96dd3d59428",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Instead of calling ATMP twice, can we trust the `test_accepted` value from the first call and skip redundant checks in the second call?\r\n\r\nFrom what I understand, we do this somewhat (i.e. for expensive parts of validation) - the signature cache and script cache are filled in `PolicyScriptChecks` and `ConsensusScriptChecks` during the test accept and thus those parts don't need to be redone the second time around.\r\n\r\n> if all we need is the fee here, can we compute that quickly and test it against `max_tx_fee` before checking anything else about the tx?\r\n\r\nI definitely thought about doing it this way! Seemed simple enough, but without any tx sanitization (`PreChecks`) or state to go off of, it started getting really complicated \ud83d\ude05 . Test-accepting it through ATMP did exactly what I needed, and we kind of get to do it for... I don't want to say \"free,\" but it's way cheaper than 2x work.",
    "created_at": "2020-08-22T13:08:16Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475088750",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475088750"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475088750"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475088750/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT",
    "in_reply_to_id": 473232345
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475088881",
    "pull_request_review_id": 472925143,
    "id": 475088881,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA4ODg4MQ==",
    "diff_hunk": "@@ -0,0 +1,7 @@\n+RPC changes",
    "path": "doc/release-notes-19093.md",
    "position": null,
    "original_position": 1,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "67bb7148ad4142611ab132047548f96dd3d59428",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "FYI @rajarshimaitra",
    "created_at": "2020-08-22T13:10:01Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475088881",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475088881"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475088881"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475088881/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1,
    "side": "RIGHT",
    "in_reply_to_id": 473247904
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475093378",
    "pull_request_review_id": 472928071,
    "id": 475093378,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA5MzM3OA==",
    "diff_hunk": "@@ -36,10 +36,19 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n+        CAmount fee;\n+        bool test_accepted = AcceptToMemoryPool(*node.mempool, state, std::move(tx),\n+                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+        if (test_accepted) {\n+            if (max_tx_fee && fee > max_tx_fee) {\n+                return TransactionError::MAX_FEE_EXCEEDED;\n+            }\n+        }\n+        // Transaction fee is acceptable. Submit the transaction.",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "67bb7148ad4142611ab132047548f96dd3d59428",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I've made a [branch](https://github.com/gzhao408/bitcoin/commit/483cc24a2923514a35f83682822aa29265c61555) that adds logging to the signature and script caches. Running the truncated version of rpc_rawtransaction.py shows how much reuse we get. Here's a sample of a `sendrawtransaction` which does the 2 ATMPs:\r\n\r\n```\r\n node0 2020-08-22T13:50:00.085822Z [httpworker.1] @@@ In BroadcastTransaction() \r\n node0 2020-08-22T13:50:00.085883Z [httpworker.1] @@@ Calling ATMP with testaccept=1 ! \r\n node0 2020-08-22T13:50:00.086011Z [httpworker.1] @@@ Calling PolicyScriptChecks! \r\n node0 2020-08-22T13:50:00.086049Z [httpworker.1] @@@ Verifying Signature \r\n node0 2020-08-22T13:50:00.086674Z [httpworker.1] @@@ Adding entry to Signature Cache! \r\n node0 2020-08-22T13:50:00.086740Z [httpworker.1] @@@ Calling ConsensusScriptChecks! \r\n node0 2020-08-22T13:50:00.086785Z [httpworker.1] @@@ Verifying Signature \r\n node0 2020-08-22T13:50:00.086830Z [httpworker.1] @@@ Signature Cache already filled! \r\n node0 2020-08-22T13:50:00.086856Z [httpworker.1] @@@ Adding entry to Script Execution cache! \r\n node0 2020-08-22T13:50:00.086890Z [httpworker.1] @@@ Accepted, checking max fee \r\n node0 2020-08-22T13:50:00.086917Z [httpworker.1] @@@ Calling ATMP with testaccept=0 ! \r\n node0 2020-08-22T13:50:00.086992Z [httpworker.1] @@@ Calling PolicyScriptChecks! \r\n node0 2020-08-22T13:50:00.087023Z [httpworker.1] @@@ Verifying Signature \r\n node0 2020-08-22T13:50:00.087067Z [httpworker.1] @@@ Signature Cache already filled! \r\n node0 2020-08-22T13:50:00.087094Z [httpworker.1] @@@ Calling ConsensusScriptChecks! \r\n node0 2020-08-22T13:50:00.087119Z [httpworker.1] @@@ Script Execution cache is already filled! \r\n```",
    "created_at": "2020-08-22T13:53:04Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475093378",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475093378"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475093378"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475093378/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT",
    "in_reply_to_id": 473232345
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475546809",
    "pull_request_review_id": 473395169,
    "id": 475546809,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU0NjgwOQ==",
    "diff_hunk": "@@ -36,10 +36,19 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n+        CAmount fee;\n+        bool test_accepted = AcceptToMemoryPool(*node.mempool, state, std::move(tx),",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "67bb7148ad4142611ab132047548f96dd3d59428",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Both this ATMP call and the one below should have their `std::move(tx)` argument changed to `tx`. In general, you should never use a variable after it's been used with `std::move` in a function call, since it might have been moved away. In this case, if `tx` has been moved from, it'll be null, and any attempt to dereference it will segfault.\r\n\r\nHowever, because ATMP takes a _const_ reference to `CTransactionRef`, it can't be moved away from, so if ATMP wants to retain shared ownership of the transaction, it must copy rather than move to the new shared_ptr. That means that technically it is safe to use `tx` after this call.\r\n\r\nLet's just make it explicit though: ATMP takes a const ref and has to copy if it wants to retain shared ownership, so just pass it `tx`.\r\n\r\nSee R30, R34, R35 and R36 here: http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#r30-take-smart-pointers-as-parameters-only-to-explicitly-express-lifetime-semantics for more background on passing raw/smart pointers.",
    "created_at": "2020-08-24T11:57:05Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475546809",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475546809"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475546809"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475546809/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 42,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475693119",
    "pull_request_review_id": 473603533,
    "id": 475693119,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY5MzExOQ==",
    "diff_hunk": "@@ -36,10 +36,19 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n+        CAmount fee;\n+        bool test_accepted = AcceptToMemoryPool(*node.mempool, state, std::move(tx),",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "67bb7148ad4142611ab132047548f96dd3d59428",
    "user": {
      "login": "robot-dreams",
      "id": 4276679,
      "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robot-dreams",
      "html_url": "https://github.com/robot-dreams",
      "followers_url": "https://api.github.com/users/robot-dreams/followers",
      "following_url": "https://api.github.com/users/robot-dreams/following{/other_user}",
      "gists_url": "https://api.github.com/users/robot-dreams/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robot-dreams/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
      "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
      "repos_url": "https://api.github.com/users/robot-dreams/repos",
      "events_url": "https://api.github.com/users/robot-dreams/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks for noting this and posting the link, @jnewbery ! After looking into this, I have two follow-up questions for you if that's OK:\r\n\r\n#### Question 1 (historical context)\r\n\r\nPreviously, this call always used `std::move(tx)` because `tx` did not appear later in the function. However, use of `tx` after `move` appeared in c7eb6b4f1fe5bd76388a023529977674534334a7, which was merged as part of #18044. Do you happen to have any ideas about why it wasn't a concern then?\r\n\r\n#### Question 2 (C++ guidelines)\r\n\r\nThe linked guidelines mention the `const shared_ptr<widget>&` case, but not the `const shared_ptr<widget>` case that's used in `BroadcastTransaction`:\r\n\r\n<img width=\"813\" alt=\"guidelines\" src=\"https://user-images.githubusercontent.com/4276679/91061181-b88e7400-e5e0-11ea-8c86-1e50908c689e.png\">\r\n\r\nDo you know if we should think of the `const shared_ptr<widget>` case any differently?",
    "created_at": "2020-08-24T15:18:10Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475693119",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475693119"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475693119"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475693119/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 42,
    "side": "RIGHT",
    "in_reply_to_id": 475546809
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475759196",
    "pull_request_review_id": 473684990,
    "id": 475759196,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc1OTE5Ng==",
    "diff_hunk": "@@ -36,10 +36,19 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n+        CAmount fee;\n+        bool test_accepted = AcceptToMemoryPool(*node.mempool, state, std::move(tx),",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "67bb7148ad4142611ab132047548f96dd3d59428",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> However, use of tx after move appeared in c7eb6b4, which was merged as part of #18044. Do you happen to have any ideas about why it wasn't a concern then?\r\n\r\nBecause it was missed in review. In this case, it's not going to cause any issues because `tx` isn't actually moved from, but we should still never be doing anything with a variable after it's had `std::move` used on it.\r\n\r\n> Do you know if we should think of the const shared_ptr<widget> case any differently?\r\n\r\nI don't think there's any good reason to pass a shared_ptr by const value. I may be mistaken here, but I think that means you need to increment the refcount when you enter the function (because the parameter is copy-constructed from the argument), and if you want to retain the refcount, you need to increment it again (because you can't move from the const parameter). Move semantics with smart pointers is a deep rabbit hole. There's lots more here: https://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/ and http://scottmeyers.blogspot.com/2014/07/should-move-only-types-ever-be-passed.html.",
    "created_at": "2020-08-24T16:57:16Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475759196",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475759196"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475759196"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475759196/reactions",
      "total_count": 4,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 42,
    "side": "RIGHT",
    "in_reply_to_id": 475546809
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475908814",
    "pull_request_review_id": 473874624,
    "id": 475908814,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwODgxNA==",
    "diff_hunk": "@@ -21,6 +21,7 @@\n import os\n \n MAX_BIP125_RBF_SEQUENCE = 0xfffffffd\n+MAX_FEE_EXCEEDED_MSG = 'Fee exceeds maximum configured by user (eg -maxtxfee, maxfeerate)'",
    "path": "test/functional/rpc_psbt.py",
    "position": null,
    "original_position": 4,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "c763343c0064fe88aeef15eecd6273ccf2746fcc",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If you use a global namespace constant for the error message it would make sense to share it across files as well.   Otherwise local variables would make more sense to me. I think c763343c0064fe88aeef15eecd6273ccf2746fcc could also just be a clean scripted-diff without the need to introduce the constants.",
    "created_at": "2020-08-24T21:37:32Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475908814",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475908814"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475908814"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475908814/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 24,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475913985",
    "pull_request_review_id": 473874624,
    "id": 475913985,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkxMzk4NQ==",
    "diff_hunk": "@@ -36,8 +36,17 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n+        CAmount fee;\n+        bool test_accepted = AcceptToMemoryPool(*node.mempool, state, std::move(tx),",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "a872d8d31bcc2dd1089cb9fd68a48b3d798bd59b",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "IMO you don't need the intermediate return value and can just move the call into the if() but if you want to keep it:\r\n```suggestion\r\n        const bool test_accepted = AcceptToMemoryPool(*node.mempool, state, std::move(tx),\r\n```",
    "created_at": "2020-08-24T21:49:28Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475913985",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475913985"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r475913985"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475913985/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 42,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476501583",
    "pull_request_review_id": 474549567,
    "id": 476501583,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwMTU4Mw==",
    "diff_hunk": "@@ -21,6 +21,7 @@\n import os\n \n MAX_BIP125_RBF_SEQUENCE = 0xfffffffd\n+MAX_FEE_EXCEEDED_MSG = 'Fee exceeds maximum configured by user (eg -maxtxfee, maxfeerate)'",
    "path": "test/functional/rpc_psbt.py",
    "position": null,
    "original_position": 4,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "c763343c0064fe88aeef15eecd6273ccf2746fcc",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "you're totally right, I changed it to a scripted diff",
    "created_at": "2020-08-25T14:39:23Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r476501583",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476501583"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r476501583"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476501583/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 24,
    "side": "RIGHT",
    "in_reply_to_id": 475908814
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476501773",
    "pull_request_review_id": 474549807,
    "id": 476501773,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwMTc3Mw==",
    "diff_hunk": "@@ -36,8 +36,17 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n+        CAmount fee;\n+        bool test_accepted = AcceptToMemoryPool(*node.mempool, state, std::move(tx),",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "a872d8d31bcc2dd1089cb9fd68a48b3d798bd59b",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "moved it into the if(), thanks!",
    "created_at": "2020-08-25T14:39:37Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r476501773",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476501773"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r476501773"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476501773/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 42,
    "side": "RIGHT",
    "in_reply_to_id": 475913985
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476502050",
    "pull_request_review_id": 474550100,
    "id": 476502050,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwMjA1MA==",
    "diff_hunk": "@@ -36,10 +36,19 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n+        CAmount fee;\n+        bool test_accepted = AcceptToMemoryPool(*node.mempool, state, std::move(tx),",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "67bb7148ad4142611ab132047548f96dd3d59428",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done! thanks for the explanation @jnewbery :) ",
    "created_at": "2020-08-25T14:39:56Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r476502050",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476502050"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r476502050"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/476502050/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 42,
    "side": "RIGHT",
    "in_reply_to_id": 475546809
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/477388457",
    "pull_request_review_id": 475603323,
    "id": 477388457,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM4ODQ1Nw==",
    "diff_hunk": "@@ -36,10 +36,18 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n-        if (!AcceptToMemoryPool(*node.mempool, state, std::move(tx),\n-                nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n+        CAmount fee;",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 9,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "330b0ba1122ab5d8e385d371e1455e3ec0f95dee",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "baab966 suggestion, as `CAmount` is of type `int64_t` per `src/amount.h`, provide a default value \r\n```suggestion\r\n        CAmount fee{0};\r\n```",
    "created_at": "2020-08-26T15:25:43Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r477388457",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/477388457"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r477388457"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/477388457/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 41,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/477388789",
    "pull_request_review_id": 475603323,
    "id": 477388789,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM4ODc4OQ==",
    "diff_hunk": "@@ -924,10 +924,20 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n \n     TxValidationState state;\n     bool test_accept_res;\n+    CAmount fee; // To return transaction fee from AcceptToMemoryPool",
    "path": "src/rpc/rawtransaction.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "330b0ba1122ab5d8e385d371e1455e3ec0f95dee",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "bcb85f4\r\n```suggestion\r\n    CAmount fee{0}; // To return transaction fee from AcceptToMemoryPool\r\n```",
    "created_at": "2020-08-26T15:26:08Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r477388789",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/477388789"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r477388789"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/477388789/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 927,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/477393731",
    "pull_request_review_id": 475603323,
    "id": 477393731,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5MzczMQ==",
    "diff_hunk": "@@ -30,7 +30,7 @@ bilingual_str TransactionErrorString(const TransactionError err)\n         case TransactionError::SIGHASH_MISMATCH:\n             return Untranslated(\"Specified sighash value does not match value stored in PSBT\");\n         case TransactionError::MAX_FEE_EXCEEDED:\n-            return Untranslated(\"Fee exceeds maximum configured by -maxtxfee\");\n+            return Untranslated(\"Fee exceeds maximum configured by user (eg -maxtxfee, maxfeerate)\");",
    "path": "src/util/error.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "330b0ba1122ab5d8e385d371e1455e3ec0f95dee",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "d81090e8a `s/eg/e.g./` or\r\n```diff\r\n- return Untranslated(\"Fee exceeds maximum configured by user (eg -maxtxfee, maxfeerate)\");\r\n+ return Untranslated(\"Fee exceeds maximum configured by user in -maxtxfee or maxfeerate\");\r\n```\r\n",
    "created_at": "2020-08-26T15:32:56Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r477393731",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/477393731"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r477393731"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/477393731/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 33,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/477405130",
    "pull_request_review_id": 475603323,
    "id": 477405130,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQwNTEzMA==",
    "diff_hunk": "@@ -924,10 +924,20 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n \n     TxValidationState state;\n     bool test_accept_res;\n+    CAmount fee; // To return transaction fee from AcceptToMemoryPool\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n+            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    }\n+\n+    // Check that fee does not exceed maxfee\n+    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n+        result_0.pushKV(\"allowed\", false);\n+        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+        result_0.pushKV(\"fee\", fee);\n+        result.push_back(std::move(result_0));",
    "path": "src/rpc/rawtransaction.cpp",
    "position": 17,
    "original_position": 17,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "330b0ba1122ab5d8e385d371e1455e3ec0f95dee",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "a5b33914\r\n\r\n- Should these keys also be returned with relevant values for the happy case as well, and not only if fee exceeds maxfee? (I suspect they should.)\r\n\r\n- These additions would need to be documented in the `RPCHelpMan` help a few lines above, as well as with an `Updated RPCs` release note.",
    "created_at": "2020-08-26T15:48:40Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r477405130",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/477405130"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r477405130"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/477405130/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 961,
    "original_line": 961,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/477436682",
    "pull_request_review_id": 475666323,
    "id": 477436682,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNjY4Mg==",
    "diff_hunk": "@@ -924,10 +924,20 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n \n     TxValidationState state;\n     bool test_accept_res;\n+    CAmount fee; // To return transaction fee from AcceptToMemoryPool\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n+            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    }\n+\n+    // Check that fee does not exceed maxfee\n+    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n+        result_0.pushKV(\"allowed\", false);\n+        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+        result_0.pushKV(\"fee\", fee);\n+        result.push_back(std::move(result_0));",
    "path": "src/rpc/rawtransaction.cpp",
    "position": 17,
    "original_position": 17,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "330b0ba1122ab5d8e385d371e1455e3ec0f95dee",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oops, I was confused by the early and duplicate `result.push_back(std::move(result_0))` and `return`, which I wasn't expecting. Perhaps use an `else` instead and have all the cases fall through to the single push_back and return.\r\n\r\nConsider harmonising the cases to both return the `fee` or neither, and if `fee` is added, then update the help + write a release note + add `fee` test cases.",
    "created_at": "2020-08-26T16:37:29Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r477436682",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/477436682"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r477436682"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/477436682/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 961,
    "original_line": 961,
    "side": "RIGHT",
    "in_reply_to_id": 477405130
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/477442434",
    "pull_request_review_id": 475673082,
    "id": 477442434,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0MjQzNA==",
    "diff_hunk": "@@ -200,10 +200,11 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n /** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n+ * plTxnReplaced will be appended to with all transactions replaced from mempool\n+ * optionally takes an argument to return tx fee to the caller **/",
    "path": "src/validation.h",
    "position": null,
    "original_position": 6,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "330b0ba1122ab5d8e385d371e1455e3ec0f95dee",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "bcb85f4 perhaps document this added argument per https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-doxygen-compatible-comments\r\n```diff\r\n- * optionally takes an argument to return tx fee to the caller **/\r\n+ * @param[out] fee_out   optional argument to return tx fee to the caller **/\r\n```",
    "created_at": "2020-08-26T16:45:49Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r477442434",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/477442434"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r477442434"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/477442434/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 204,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479767701",
    "pull_request_review_id": 478201557,
    "id": 479767701,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2NzcwMQ==",
    "diff_hunk": "@@ -924,10 +924,20 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n \n     TxValidationState state;\n     bool test_accept_res;\n+    CAmount fee; // To return transaction fee from AcceptToMemoryPool\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n+            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    }\n+\n+    // Check that fee does not exceed maxfee\n+    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n+        result_0.pushKV(\"allowed\", false);\n+        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+        result_0.pushKV(\"fee\", fee);\n+        result.push_back(std::move(result_0));",
    "path": "src/rpc/rawtransaction.cpp",
    "position": 17,
    "original_position": 17,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "330b0ba1122ab5d8e385d371e1455e3ec0f95dee",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Actually I shouldn't even return the fee - it was leftover from #19093. Thanks for catching that!",
    "created_at": "2020-08-30T13:06:04Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r479767701",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479767701"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r479767701"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479767701/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 961,
    "original_line": 961,
    "side": "RIGHT",
    "in_reply_to_id": 477405130
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479768882",
    "pull_request_review_id": 478202436,
    "id": 479768882,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc2ODg4Mg==",
    "diff_hunk": "@@ -200,10 +200,11 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n /** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n+ * plTxnReplaced will be appended to with all transactions replaced from mempool\n+ * optionally takes an argument to return tx fee to the caller **/",
    "path": "src/validation.h",
    "position": null,
    "original_position": 6,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "330b0ba1122ab5d8e385d371e1455e3ec0f95dee",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done!",
    "created_at": "2020-08-30T13:17:28Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r479768882",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479768882"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r479768882"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479768882/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 204,
    "side": "RIGHT",
    "in_reply_to_id": 477442434
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480367940",
    "pull_request_review_id": 478914355,
    "id": 480367940,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2Nzk0MA==",
    "diff_hunk": "@@ -924,10 +924,19 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n \n     TxValidationState state;\n     bool test_accept_res;\n+    CAmount fee{0}; // To return transaction fee from AcceptToMemoryPool\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n+            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    }\n+\n+    // Check that fee does not exceed maxfee\n+    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n+        result_0.pushKV(\"allowed\", false);\n+        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+        result.push_back(std::move(result_0));\n+        return result;",
    "path": "src/rpc/rawtransaction.cpp",
    "position": 18,
    "original_position": 17,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "d0f10e25afbbbcfc2c46300cf7112ce4f303987d",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ea8eb397 and 3721417 suggestion to keep the final `std::move and return` separate from the processing\r\n\r\n`git diff -w`\r\n```diff\r\n-    // Check that fee does not exceed maxfee\r\n     if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\r\n+        // Accepted, but disallow because fee exceeds maxfee\r\n         result_0.pushKV(\"allowed\", false);\r\n         result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\r\n-        result.push_back(std::move(result_0));\r\n-        return result;\r\n-    }\r\n+    } else {\r\n         result_0.pushKV(\"allowed\", test_accept_res);\r\n@@ -950,6 +948,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\r\n                 result_0.pushKV(\"reject-reason\", state.GetRejectReason());\r\n             }\r\n         }\r\n+    }\r\n \r\n     result.push_back(std::move(result_0));\r\n     return result;\r\n```\r\n\r\n<details><summary>code</summary><p>\r\n\r\n```cpp\r\n    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\r\n        // Accepted, but disallow because fee exceeds maxfee\r\n        result_0.pushKV(\"allowed\", false);\r\n        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\r\n    } else {\r\n        result_0.pushKV(\"allowed\", test_accept_res);\r\n        if (!test_accept_res) {\r\n            if (state.IsInvalid()) {\r\n                if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\r\n                    result_0.pushKV(\"reject-reason\", \"missing-inputs\");\r\n                } else {\r\n                    result_0.pushKV(\"reject-reason\", strprintf(\"%s\", state.GetRejectReason()));\r\n                }\r\n            } else {\r\n                result_0.pushKV(\"reject-reason\", state.GetRejectReason());\r\n            }\r\n        }\r\n    }\r\n\r\n    result.push_back(std::move(result_0));\r\n    return result;\r\n}\r\n```\r\n</p></details>\r\n\r\n",
    "created_at": "2020-08-31T20:02:25Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r480367940",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480367940"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r480367940"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480367940/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 962,
    "original_line": 962,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482777222",
    "pull_request_review_id": 481581578,
    "id": 482777222,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3NzIyMg==",
    "diff_hunk": "@@ -924,10 +924,19 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n \n     TxValidationState state;\n     bool test_accept_res;\n+    CAmount fee{0}; // To return transaction fee from AcceptToMemoryPool\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n+            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    }\n+\n+    // Check that fee does not exceed maxfee\n+    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n+        result_0.pushKV(\"allowed\", false);\n+        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+        result.push_back(std::move(result_0));\n+        return result;",
    "path": "src/rpc/rawtransaction.cpp",
    "position": 18,
    "original_position": 17,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "d0f10e25afbbbcfc2c46300cf7112ce4f303987d",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Both seem fine. I have a preference for how it is right now to avoid the deeply nested if statements.",
    "created_at": "2020-09-03T07:49:17Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r482777222",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482777222"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r482777222"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/482777222/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 962,
    "original_line": 962,
    "side": "RIGHT",
    "in_reply_to_id": 480367940
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483088759",
    "pull_request_review_id": 481985872,
    "id": 483088759,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4ODc1OQ==",
    "diff_hunk": "@@ -924,10 +924,19 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n \n     TxValidationState state;\n     bool test_accept_res;\n+    CAmount fee{0}; // To return transaction fee from AcceptToMemoryPool\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n+            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    }\n+\n+    // Check that fee does not exceed maxfee\n+    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n+        result_0.pushKV(\"allowed\", false);\n+        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+        result.push_back(std::move(result_0));\n+        return result;",
    "path": "src/rpc/rawtransaction.cpp",
    "position": 18,
    "original_position": 17,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "d0f10e25afbbbcfc2c46300cf7112ce4f303987d",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Absurdfee is kind of a \"special case\" where `test_accept_res` is true, but we still say not allowed... maybe it's good to keep it in a separate block?",
    "created_at": "2020-09-03T16:00:54Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r483088759",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483088759"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r483088759"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483088759/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 962,
    "original_line": 962,
    "side": "RIGHT",
    "in_reply_to_id": 480367940
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483309109",
    "pull_request_review_id": 482270329,
    "id": 483309109,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwOTEwOQ==",
    "diff_hunk": "@@ -36,10 +36,18 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n-        if (!AcceptToMemoryPool(*node.mempool, state, std::move(tx),\n-                nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n+        CAmount fee{0};\n+        if (AcceptToMemoryPool(*node.mempool, state, tx,",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 10,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "6bbda0e5d4c63d4923ddc5ef6fcf4d8145a5e8c7",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think this approach is okay for now but it would be better to refactor further in the future. For now the mempool is guaranteed not to change due to tacking `cs_main` lock above but if we remove this lock requirement from ATMP in the future you might have different views of the mempool in the future, thus being rejected at first try and not being evaluated against `max_tx_fee` but succeeding at second throw and effectively bypassing the protection.\r\n\r\nSo technically the comment \"Transaction fee is acceptable\" is misleading as fee check might have been skipped.\r\n\r\nYou could add a new function `GetTransactionFee` composed of both a mempool lock tacking, a outpoints fetching logic (`src/validation.cpp` L649) and `Consensus::CheckTxInputs`.",
    "created_at": "2020-09-03T23:42:12Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r483309109",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483309109"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r483309109"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483309109/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 42,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483310202",
    "pull_request_review_id": 482270329,
    "id": 483310202,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMDIwMg==",
    "diff_hunk": "@@ -924,10 +924,19 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n \n     TxValidationState state;\n     bool test_accept_res;\n+    CAmount fee{0}; // To return transaction fee from AcceptToMemoryPool\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n+            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);",
    "path": "src/rpc/rawtransaction.cpp",
    "position": 10,
    "original_position": 9,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "6bbda0e5d4c63d4923ddc5ef6fcf4d8145a5e8c7",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "A follow-up could be to modify `testmempoolaccept` signature to return the computed fee/feerate, do we already have a RPC to evaluate-fee-but-don't-submit-to-mempool  ?",
    "created_at": "2020-09-03T23:46:09Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r483310202",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483310202"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r483310202"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483310202/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 954,
    "original_line": 954,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483315485",
    "pull_request_review_id": 482277418,
    "id": 483315485,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxNTQ4NQ==",
    "diff_hunk": "@@ -924,10 +924,19 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n \n     TxValidationState state;\n     bool test_accept_res;\n+    CAmount fee{0}; // To return transaction fee from AcceptToMemoryPool\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n+            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);",
    "path": "src/rpc/rawtransaction.cpp",
    "position": 10,
    "original_position": 9,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "6bbda0e5d4c63d4923ddc5ef6fcf4d8145a5e8c7",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`testmempoolaccept` would be the best place for this imo, see #19940 :)",
    "created_at": "2020-09-04T00:05:33Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r483315485",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483315485"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r483315485"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483315485/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 954,
    "original_line": 954,
    "side": "RIGHT",
    "in_reply_to_id": 483310202
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483647616",
    "pull_request_review_id": 482694697,
    "id": 483647616,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0NzYxNg==",
    "diff_hunk": "@@ -924,10 +924,19 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n \n     TxValidationState state;\n     bool test_accept_res;\n+    CAmount fee{0}; // To return transaction fee from AcceptToMemoryPool\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n+            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    }\n+\n+    // Check that fee does not exceed maxfee\n+    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n+        result_0.pushKV(\"allowed\", false);\n+        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+        result.push_back(std::move(result_0));\n+        return result;",
    "path": "src/rpc/rawtransaction.cpp",
    "position": 18,
    "original_position": 17,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "d0f10e25afbbbcfc2c46300cf7112ce4f303987d",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think (a) keep processing separate from move-and-return, which is why it is separated by an empty line at the end of the function, (b) don't repeat yourself, and (c) the principle of least surprise (at least, I found it surprising) outweigh the also-valid (d) avoid nested conditionals, but it's a detail that I won't hold against anyone :smiling_face_with_three_hearts: \r\n\r\nOTOH, I find a bit odd the logic of `test_accept_res` being true but being possibly disallowed due to the maxfee. Perhaps rename it (it's also not named like a boolean, e.g. `is/has/verb_{some_state}`, or mention it in the code like my doc suggestion (which could be improved). I think it's good to optimise the overall section for clarity and coherence, even if it changes a few more lines of code.\r\n\r\nBut these are all code style opinions, feel free to ignore if you disagree.\r\n",
    "created_at": "2020-09-04T14:23:32Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r483647616",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483647616"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r483647616"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/483647616/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 962,
    "original_line": 962,
    "side": "RIGHT",
    "in_reply_to_id": 480367940
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488790850",
    "pull_request_review_id": 488845893,
    "id": 488790850,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5MDg1MA==",
    "diff_hunk": "@@ -924,10 +924,19 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n \n     TxValidationState state;\n     bool test_accept_res;\n+    CAmount fee{0}; // To return transaction fee from AcceptToMemoryPool\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n+            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    }\n+\n+    // Check that fee does not exceed maxfee\n+    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n+        result_0.pushKV(\"allowed\", false);\n+        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+        result.push_back(std::move(result_0));\n+        return result;",
    "path": "src/rpc/rawtransaction.cpp",
    "position": 18,
    "original_position": 17,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "d0f10e25afbbbcfc2c46300cf7112ce4f303987d",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Another suggestion (but it's also good as-is):\r\n<details>\r\n<summary>Diff</summary>\r\n\r\n```diff\r\n--- a/src/rpc/rawtransaction.cpp\r\n+++ b/src/rpc/rawtransaction.cpp\r\n@@ -923,34 +923,36 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\r\n     result_0.pushKV(\"txid\", tx_hash.GetHex());\r\n \r\n     TxValidationState state;\r\n-    bool test_accept_res;\r\n+    bool allowed;\r\n     CAmount fee{0}; // To return transaction fee from AcceptToMemoryPool\r\n     {\r\n         LOCK(cs_main);\r\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\r\n+        allowed = AcceptToMemoryPool(mempool, state, std::move(tx),\r\n             nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\r\n     }\r\n+    std::string reject_reason;\r\n \r\n     // Check that fee does not exceed maxfee\r\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\r\n-        result_0.pushKV(\"allowed\", false);\r\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\r\n-        result.push_back(std::move(result_0));\r\n-        return result;\r\n+    if (allowed) {\r\n+        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\r\n+            allowed = false;\r\n+            reject_reason = \"max-fee-exceeded\";\r\n         }\r\n-    result_0.pushKV(\"allowed\", test_accept_res);\r\n-    if (!test_accept_res) {\r\n+    } else {\r\n         if (state.IsInvalid()) {\r\n             if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\r\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\r\n+                reject_reason = \"missing-inputs\";\r\n             } else {\r\n-                result_0.pushKV(\"reject-reason\", strprintf(\"%s\", state.GetRejectReason()));\r\n+                reject_reason = strprintf(\"%s\", state.GetRejectReason());\r\n             }\r\n         } else {\r\n-            result_0.pushKV(\"reject-reason\", state.GetRejectReason());\r\n+            reject_reason = state.GetRejectReason();\r\n         }\r\n     }\r\n-\r\n+    result_0.pushKV(\"allowed\", allowed);\r\n+    if (!reject_reason.empty()) {\r\n+        result_0.pushKV(\"reject-reason\", reject_reason);\r\n+    }\r\n     result.push_back(std::move(result_0));\r\n     return result;\r\n }\r\n```\r\n</details>\r\n<details>\r\n<summary>Code</summary>\r\n\r\n```\r\n    bool allowed;\r\n    CAmount fee{0}; // To return transaction fee from AcceptToMemoryPool\r\n    {\r\n        LOCK(cs_main);\r\n        allowed = AcceptToMemoryPool(mempool, state, std::move(tx),\r\n            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\r\n    }\r\n    std::string reject_reason;\r\n\r\n    // Check that fee does not exceed maxfee\r\n    if (allowed) {\r\n        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\r\n            allowed = false;\r\n            reject_reason = \"max-fee-exceeded\";\r\n        }\r\n    } else {\r\n        if (state.IsInvalid()) {\r\n            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\r\n                reject_reason = \"missing-inputs\";\r\n            } else {\r\n                reject_reason = strprintf(\"%s\", state.GetRejectReason());\r\n            }\r\n        } else {\r\n            reject_reason = state.GetRejectReason();\r\n        }\r\n    }\r\n    result_0.pushKV(\"allowed\", allowed);\r\n    if (!reject_reason.empty()) {\r\n        result_0.pushKV(\"reject-reason\", reject_reason);\r\n    }\r\n    result.push_back(std::move(result_0));\r\n    return result;\r\n```\r\n\r\n<details>",
    "created_at": "2020-09-15T16:11:51Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r488790850",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488790850"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r488790850"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488790850/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 962,
    "original_line": 962,
    "side": "RIGHT",
    "in_reply_to_id": 480367940
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488866705",
    "pull_request_review_id": 488939841,
    "id": 488866705,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2NjcwNQ==",
    "diff_hunk": "@@ -36,10 +36,18 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n-        if (!AcceptToMemoryPool(*node.mempool, state, std::move(tx),\n-                nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n+        CAmount fee{0};\n+        if (AcceptToMemoryPool(*node.mempool, state, tx,\n+                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n+            if (max_tx_fee && fee > max_tx_fee) {\n+                return TransactionError::MAX_FEE_EXCEEDED;\n+            }\n+        }",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "6bbda0e5d4c63d4923ddc5ef6fcf4d8145a5e8c7",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n        if (max_tx_fee && AcceptToMemoryPool(*node.mempool, state, tx,\r\n                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\r\n            if (fee > max_tx_fee) {\r\n                return TransactionError::MAX_FEE_EXCEEDED;\r\n            }\r\n        }\r\n```\r\nPerformance: Call `AcceptToMemoryPool()` only if necessary.",
    "created_at": "2020-09-15T18:09:46Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r488866705",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488866705"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r488866705"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488866705/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 42,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 63,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491049982",
    "pull_request_review_id": 491599159,
    "id": 491049982,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA0OTk4Mg==",
    "diff_hunk": "@@ -36,10 +36,18 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n-        if (!AcceptToMemoryPool(*node.mempool, state, std::move(tx),\n-                nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n+        CAmount fee{0};\n+        if (AcceptToMemoryPool(*node.mempool, state, tx,\n+                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n+            if (max_tx_fee && fee > max_tx_fee) {\n+                return TransactionError::MAX_FEE_EXCEEDED;\n+            }\n+        }",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "6bbda0e5d4c63d4923ddc5ef6fcf4d8145a5e8c7",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "yep will do! :) ",
    "created_at": "2020-09-18T16:07:10Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r491049982",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491049982"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r491049982"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491049982/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 42,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 63,
    "side": "RIGHT",
    "in_reply_to_id": 488866705
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492891317",
    "pull_request_review_id": 493665702,
    "id": 492891317,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5MTMxNw==",
    "diff_hunk": "@@ -36,10 +36,19 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n+        CAmount fee;\n+        bool test_accepted = AcceptToMemoryPool(*node.mempool, state, std::move(tx),\n+                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+        if (test_accepted) {\n+            if (max_tx_fee && fee > max_tx_fee) {\n+                return TransactionError::MAX_FEE_EXCEEDED;\n+            }\n+        }\n+        // Transaction fee is acceptable. Submit the transaction.",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "67bb7148ad4142611ab132047548f96dd3d59428",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nonblocking suggestion: You could simplify the code branches and reduce nesting:\r\n```cpp\r\n        if (max_tx_fee) {\r\n            CAmount fee{0};\r\n            if (!GetTransactionFee(*node.mempool, state, tx, &fee)) {\r\n                err_string = state.ToString();\r\n                if (!state.IsInvalid()) {\r\n                    return TransactionError::MEMPOOL_ERROR;\r\n                }\r\n                if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\r\n                    return TransactionError::MISSING_INPUTS;\r\n                }\r\n                return TransactionError::MEMPOOL_REJECTED;\r\n            }\r\n            if (fee > max_tx_fee) {\r\n                return TransactionError::MAX_FEE_EXCEEDED;\r\n            }\r\n        }\r\n```",
    "created_at": "2020-09-22T16:55:47Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r492891317",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492891317"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r492891317"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492891317/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 58,
    "side": "RIGHT",
    "in_reply_to_id": 473232345
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492896238",
    "pull_request_review_id": 493665702,
    "id": 492896238,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5NjIzOA==",
    "diff_hunk": "@@ -36,10 +36,28 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n+        CAmount fee{0};\n+        if (max_tx_fee) {\n+            if (!GetTransactionFee(*node.mempool, state, tx, &fee)) {\n+                err_string = state.ToString();\n+                if (state.IsInvalid()) {\n+                    if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n+                        return TransactionError::MISSING_INPUTS;\n+                    }\n+                    return TransactionError::MEMPOOL_REJECTED;\n+                } else {\n+                    return TransactionError::MEMPOOL_ERROR;\n+                }\n+            }\n+            else if (fee > max_tx_fee) {\n+                return TransactionError::MAX_FEE_EXCEEDED;\n+            }\n+        }\n+        // Transaction fee is acceptable. Submit the transaction.\n         if (!AcceptToMemoryPool(*node.mempool, state, tx,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n+                nullptr /* plTxnReplaced */, false /* bypass_limits */)) {",
    "path": "src/node/transaction.cpp",
    "position": 49,
    "original_position": 27,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "5c5fd76ad1ee68c3cd77436bad49041969cf1cb1",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Similar nonblocking suggestion as above -- You may even want to consider refactoring this common error processing into a `TransactionError` method.\r\n```cpp\r\n        if (!AcceptToMemoryPool(*node.mempool, state, tx,\r\n                nullptr /* plTxnReplaced */, false /* bypass_limits */)) {\r\n            err_string = state.ToString();\r\n            if (!state.IsInvalid()) {\r\n                return TransactionError::MEMPOOL_ERROR;\r\n            }\r\n            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\r\n                return TransactionError::MISSING_INPUTS;\r\n            }\r\n            return TransactionError::MEMPOOL_REJECTED;\r\n        }\r\n```",
    "created_at": "2020-09-22T17:03:45Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r492896238",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492896238"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r492896238"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492896238/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 66,
    "original_line": 66,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492897478",
    "pull_request_review_id": 493665702,
    "id": 492897478,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5NzQ3OA==",
    "diff_hunk": "@@ -1090,10 +1084,37 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n \n bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n                         std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept, CAmount* fee_out)\n+                        bool bypass_limits, bool test_accept, CAmount* fee_out)\n {\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept, fee_out);\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, test_accept, fee_out);\n+}\n+\n+// Calculate the fee of a transaction by looking up inputs from the mempool if\n+// necessary. Return true if the fee was successfully calculated, or false if\n+// an error with the transaction was discovered.\n+// If the transaction is valid, then the fee returned is correct.\n+// However, success does not imply that the transaction is valid.\n+bool GetTransactionFee(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx, CAmount *fee_out)\n+{\n+    LOCK2(cs_main, pool.cs);\n+\n+    CCoinsViewMemPool viewmempool(&::ChainstateActive().CoinsTip(), pool);\n+    CCoinsViewCache view(&viewmempool);\n+    view.GetBestBlock();\n+\n+    *fee_out = 0;\n+\n+    // Fees don't make sense for coinbase transactions\n+    if (tx->IsCoinBase()) {\n+        return state.Invalid(TxValidationResult::TX_CONSENSUS, \"coinbase\");\n+    }\n+    // Re-use the fee calculation in CheckTxInputs, which also validates that\n+    // the fee calculation is correct (i.e. that we don't overflow)\n+    if (!Consensus::CheckTxInputs(*tx, state, view, GetSpendHeight(view), *fee_out)) {\n+        return false; // state filled in by CheckTxInputs\n+    }\n+    return true;",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 85,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "5c5fd76ad1ee68c3cd77436bad49041969cf1cb1",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Simplification suggestion:\r\n```cpp\r\n    return Consensus::CheckTxInputs(*tx, state, view, GetSpendHeight(view), *fee_out);\r\n```",
    "created_at": "2020-09-22T17:05:42Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r492897478",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492897478"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r492897478"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492897478/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1117,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493435625",
    "pull_request_review_id": 494526804,
    "id": 493435625,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQzNTYyNQ==",
    "diff_hunk": "@@ -1090,6 +1090,33 @@ bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTrans\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, test_accept, fee_out);\n }\n \n+// Calculate the fee of a transaction by looking up inputs from the mempool if",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "5c5fd76ad1ee68c3cd77436bad49041969cf1cb1",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This would be better as a doxygen comment next to the declaration in the header file.",
    "created_at": "2020-09-23T10:41:45Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493435625",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493435625"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493435625"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493435625/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1093,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493437495",
    "pull_request_review_id": 494526804,
    "id": 493437495,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQzNzQ5NQ==",
    "diff_hunk": "@@ -1090,6 +1090,33 @@ bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTrans\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, test_accept, fee_out);\n }\n \n+// Calculate the fee of a transaction by looking up inputs from the mempool if\n+// necessary. Return true if the fee was successfully calculated, or false if\n+// an error with the transaction was discovered.\n+// If the transaction is valid, then the fee returned is correct.\n+// However, success does not imply that the transaction is valid.\n+bool GetTransactionFee(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx, CAmount *fee_out)",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 9,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "5c5fd76ad1ee68c3cd77436bad49041969cf1cb1",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`CTransactionRef` is a shared_ptr. shared_ptrs should only be passed by const ref to express that the called function might retain a ref count to the object, which never happens here. There are no lifetime semantics involved, so this should be passed as a pointer or reference. Const reference (`const CTransaction&`) would be most appropriate here.\r\n\r\n(C++ Core guidelines on passing shared_ptrs: http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-sharedptrparam-const)",
    "created_at": "2020-09-23T10:43:53Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493437495",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493437495"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493437495"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493437495/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1098,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493438609",
    "pull_request_review_id": 494526804,
    "id": 493438609,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQzODYwOQ==",
    "diff_hunk": "@@ -1090,6 +1090,33 @@ bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTrans\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, test_accept, fee_out);\n }\n \n+// Calculate the fee of a transaction by looking up inputs from the mempool if\n+// necessary. Return true if the fee was successfully calculated, or false if\n+// an error with the transaction was discovered.\n+// If the transaction is valid, then the fee returned is correct.\n+// However, success does not imply that the transaction is valid.\n+bool GetTransactionFee(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx, CAmount *fee_out)",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 9,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "5c5fd76ad1ee68c3cd77436bad49041969cf1cb1",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`s/TxValidationState &state/TxValidationState& state/` and `s/Amount *fee_out/Amount* fee_out/`",
    "created_at": "2020-09-23T10:45:00Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493438609",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493438609"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493438609"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493438609/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1098,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493439778",
    "pull_request_review_id": 494526804,
    "id": 493439778,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQzOTc3OA==",
    "diff_hunk": "@@ -1090,6 +1090,33 @@ bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTrans\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, test_accept, fee_out);\n }\n \n+// Calculate the fee of a transaction by looking up inputs from the mempool if\n+// necessary. Return true if the fee was successfully calculated, or false if\n+// an error with the transaction was discovered.\n+// If the transaction is valid, then the fee returned is correct.\n+// However, success does not imply that the transaction is valid.\n+bool GetTransactionFee(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx, CAmount *fee_out)\n+{\n+    LOCK2(cs_main, pool.cs);",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 11,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "5c5fd76ad1ee68c3cd77436bad49041969cf1cb1",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This function is only ever called in one place, where cs_main is already being held. Rather than lock recursively, it would be better to annotate the function to require cs_main.",
    "created_at": "2020-09-23T10:46:15Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493439778",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493439778"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493439778"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493439778/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1100,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493440556",
    "pull_request_review_id": 494526804,
    "id": 493440556,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ0MDU1Ng==",
    "diff_hunk": "@@ -1090,6 +1090,33 @@ bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTrans\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, test_accept, fee_out);\n }\n \n+// Calculate the fee of a transaction by looking up inputs from the mempool if\n+// necessary. Return true if the fee was successfully calculated, or false if\n+// an error with the transaction was discovered.\n+// If the transaction is valid, then the fee returned is correct.\n+// However, success does not imply that the transaction is valid.\n+bool GetTransactionFee(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx, CAmount *fee_out)\n+{\n+    LOCK2(cs_main, pool.cs);\n+\n+    CCoinsViewMemPool viewmempool(&::ChainstateActive().CoinsTip(), pool);\n+    CCoinsViewCache view(&viewmempool);\n+    view.GetBestBlock();",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "5c5fd76ad1ee68c3cd77436bad49041969cf1cb1",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What is this line for? `GetBestBlock()` is a const method, and the return value is being discarded here, so this appears to be a no-op.",
    "created_at": "2020-09-23T10:47:11Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493440556",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493440556"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493440556"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493440556/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1104,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493443449",
    "pull_request_review_id": 494526804,
    "id": 493443449,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ0MzQ0OQ==",
    "diff_hunk": "@@ -1090,6 +1090,33 @@ bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTrans\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, test_accept, fee_out);\n }\n \n+// Calculate the fee of a transaction by looking up inputs from the mempool if\n+// necessary. Return true if the fee was successfully calculated, or false if\n+// an error with the transaction was discovered.\n+// If the transaction is valid, then the fee returned is correct.\n+// However, success does not imply that the transaction is valid.\n+bool GetTransactionFee(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx, CAmount *fee_out)",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 9,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "5c5fd76ad1ee68c3cd77436bad49041969cf1cb1",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think an `Optional<CAmount>` is the most natural return type here, rather than a 'success' bool and an out-param. Unset would mean \"transaction invalid - fee can't be calculated\" and set would mean \"fee calculated (but transaction not necessarily valid)\".",
    "created_at": "2020-09-23T10:50:24Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493443449",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493443449"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493443449"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493443449/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1098,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493446706",
    "pull_request_review_id": 494526804,
    "id": 493446706,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ0NjcwNg==",
    "diff_hunk": "@@ -1090,6 +1090,33 @@ bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTrans\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, test_accept, fee_out);\n }\n \n+// Calculate the fee of a transaction by looking up inputs from the mempool if\n+// necessary. Return true if the fee was successfully calculated, or false if\n+// an error with the transaction was discovered.\n+// If the transaction is valid, then the fee returned is correct.\n+// However, success does not imply that the transaction is valid.\n+bool GetTransactionFee(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx, CAmount *fee_out)\n+{\n+    LOCK2(cs_main, pool.cs);\n+\n+    CCoinsViewMemPool viewmempool(&::ChainstateActive().CoinsTip(), pool);\n+    CCoinsViewCache view(&viewmempool);\n+    view.GetBestBlock();\n+\n+    *fee_out = 0;\n+\n+    // Fees don't make sense for coinbase transactions\n+    if (tx->IsCoinBase()) {\n+        return state.Invalid(TxValidationResult::TX_CONSENSUS, \"coinbase\");",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 21,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "5c5fd76ad1ee68c3cd77436bad49041969cf1cb1",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It feels weird to be setting a `TxValidationResult` in a function that purports to simply be a utility helper, and duplicating validity checks in this function feels like code duplication with the risk of divergence in the future. I'd much prefer it if this function was only checking/returning the fee, and all validity state was handled by ATMP.",
    "created_at": "2020-09-23T10:54:04Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493446706",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493446706"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493446706"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493446706/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1110,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493450254",
    "pull_request_review_id": 494526804,
    "id": 493450254,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ1MDI1NA==",
    "diff_hunk": "@@ -39,9 +39,19 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         // Transaction is not already in the mempool.\n         TxValidationState state;\n         CAmount fee{0};\n-        if (AcceptToMemoryPool(*node.mempool, state, tx,\n-                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n-            if (max_tx_fee && fee > max_tx_fee) {\n+        if (max_tx_fee) {\n+            if (!GetTransactionFee(*node.mempool, state, tx, &fee)) {\n+                err_string = state.ToString();\n+                if (state.IsInvalid()) {\n+                    if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n+                        return TransactionError::MISSING_INPUTS;\n+                    }\n+                    return TransactionError::MEMPOOL_REJECTED;\n+                } else {\n+                    return TransactionError::MEMPOOL_ERROR;\n+                }",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "5c5fd76ad1ee68c3cd77436bad49041969cf1cb1",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It's a shame to duplicate the code a few lines below. If we used `GetTransactionFee()` _just_ to get the transaction fee (and not return any validation state) and relied on ATMP to return validation state, we wouldn't have this code duplication.",
    "created_at": "2020-09-23T10:58:09Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493450254",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493450254"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r493450254"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493450254/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 45,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 52,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/494642765",
    "pull_request_review_id": 495990243,
    "id": 494642765,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0Mjc2NQ==",
    "diff_hunk": "@@ -36,10 +36,28 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n+        CAmount fee{0};\n+        if (max_tx_fee) {\n+            if (!GetTransactionFee(*node.mempool, state, tx, &fee)) {\n+                err_string = state.ToString();\n+                if (state.IsInvalid()) {\n+                    if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n+                        return TransactionError::MISSING_INPUTS;\n+                    }\n+                    return TransactionError::MEMPOOL_REJECTED;\n+                } else {\n+                    return TransactionError::MEMPOOL_ERROR;\n+                }\n+            }\n+            else if (fee > max_tx_fee) {\n+                return TransactionError::MAX_FEE_EXCEEDED;\n+            }\n+        }\n+        // Transaction fee is acceptable. Submit the transaction.\n         if (!AcceptToMemoryPool(*node.mempool, state, tx,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n+                nullptr /* plTxnReplaced */, false /* bypass_limits */)) {",
    "path": "src/node/transaction.cpp",
    "position": 49,
    "original_position": 27,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "5c5fd76ad1ee68c3cd77436bad49041969cf1cb1",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point, made a helper function :)",
    "created_at": "2020-09-24T22:21:25Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r494642765",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/494642765"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r494642765"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/494642765/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 66,
    "original_line": 66,
    "side": "RIGHT",
    "in_reply_to_id": 492896238
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/494649337",
    "pull_request_review_id": 495997966,
    "id": 494649337,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY0OTMzNw==",
    "diff_hunk": "@@ -39,9 +39,19 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         // Transaction is not already in the mempool.\n         TxValidationState state;\n         CAmount fee{0};\n-        if (AcceptToMemoryPool(*node.mempool, state, tx,\n-                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n-            if (max_tx_fee && fee > max_tx_fee) {\n+        if (max_tx_fee) {\n+            if (!GetTransactionFee(*node.mempool, state, tx, &fee)) {\n+                err_string = state.ToString();\n+                if (state.IsInvalid()) {\n+                    if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n+                        return TransactionError::MISSING_INPUTS;\n+                    }\n+                    return TransactionError::MEMPOOL_REJECTED;\n+                } else {\n+                    return TransactionError::MEMPOOL_ERROR;\n+                }",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "5c5fd76ad1ee68c3cd77436bad49041969cf1cb1",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I made a helper function for this so it doesn't duplicate the code\r\nThe question of \"if GetFee fails, still run ATMP or fail immediately?\" is still up in the air for me... ",
    "created_at": "2020-09-24T22:40:14Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r494649337",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/494649337"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r494649337"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/494649337/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 45,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 52,
    "side": "RIGHT",
    "in_reply_to_id": 493450254
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495303724",
    "pull_request_review_id": 496906388,
    "id": 495303724,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMwMzcyNA==",
    "diff_hunk": "@@ -1090,6 +1090,33 @@ bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTrans\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, test_accept, fee_out);\n }\n \n+// Calculate the fee of a transaction by looking up inputs from the mempool if\n+// necessary. Return true if the fee was successfully calculated, or false if\n+// an error with the transaction was discovered.\n+// If the transaction is valid, then the fee returned is correct.\n+// However, success does not imply that the transaction is valid.\n+bool GetTransactionFee(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx, CAmount *fee_out)\n+{\n+    LOCK2(cs_main, pool.cs);\n+\n+    CCoinsViewMemPool viewmempool(&::ChainstateActive().CoinsTip(), pool);\n+    CCoinsViewCache view(&viewmempool);\n+    view.GetBestBlock();",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "5c5fd76ad1ee68c3cd77436bad49041969cf1cb1",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`GetBestBlock()` is const, but `hashBlock` is mutable, and what this function does is load the block hash associated with the utxo set into the `CoinsViewCache` object.  \r\n\r\nThe reason it is here is so that when we invoke `GetSpendHeight(m_view)` in the call to `Consensus::CheckTxInputs()`, we're doing so with the right height of the next block, which is necessary for the coinbase maturity check that happens in that function.\r\n\r\nI think omitting this line would probably cause the code to crash, due to a null dereference in `GetSpendHeight()`?",
    "created_at": "2020-09-25T23:04:14Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495303724",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495303724"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495303724"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495303724/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1104,
    "side": "RIGHT",
    "in_reply_to_id": 493440556
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495307983",
    "pull_request_review_id": 496908107,
    "id": 495307983,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMwNzk4Mw==",
    "diff_hunk": "@@ -39,9 +39,19 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         // Transaction is not already in the mempool.\n         TxValidationState state;\n         CAmount fee{0};\n-        if (AcceptToMemoryPool(*node.mempool, state, tx,\n-                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n-            if (max_tx_fee && fee > max_tx_fee) {\n+        if (max_tx_fee) {\n+            if (!GetTransactionFee(*node.mempool, state, tx, &fee)) {\n+                err_string = state.ToString();\n+                if (state.IsInvalid()) {\n+                    if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n+                        return TransactionError::MISSING_INPUTS;\n+                    }\n+                    return TransactionError::MEMPOOL_REJECTED;\n+                } else {\n+                    return TransactionError::MEMPOOL_ERROR;\n+                }",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "5c5fd76ad1ee68c3cd77436bad49041969cf1cb1",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@gzhao408 What is the benefit of running ATMP if `GetTransactionFee()` fails?  It seems to me that if you get a failure, you should abort -- particularly because the way it's being used here is to prevent an absurd fee from getting through.  If a transient failure prevented the fee from being calculated (say, a race condition with an input being confirmed in a block or arriving in the mempool from another transaction), then continuing after the fee check fails to return a value risks actually sending out a transaction in the call to ATMP.\r\n\r\n@jnewbery I think `GetTransactionFee()` should return a reason for failure.  For instance, I could imagine that we might want to expose a `getrawtransactionfee` RPC where we just return the fee of a rawtransaction, and being able to return a meaningful error for why the fee couldn't be calculated seems useful in that context.",
    "created_at": "2020-09-25T23:11:32Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495307983",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495307983"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495307983"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495307983/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 45,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 52,
    "side": "RIGHT",
    "in_reply_to_id": 493450254
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495460204",
    "pull_request_review_id": 497007093,
    "id": 495460204,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2MDIwNA==",
    "diff_hunk": "@@ -39,9 +39,19 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         // Transaction is not already in the mempool.\n         TxValidationState state;\n         CAmount fee{0};\n-        if (AcceptToMemoryPool(*node.mempool, state, tx,\n-                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n-            if (max_tx_fee && fee > max_tx_fee) {\n+        if (max_tx_fee) {\n+            if (!GetTransactionFee(*node.mempool, state, tx, &fee)) {\n+                err_string = state.ToString();\n+                if (state.IsInvalid()) {\n+                    if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n+                        return TransactionError::MISSING_INPUTS;\n+                    }\n+                    return TransactionError::MEMPOOL_REJECTED;\n+                } else {\n+                    return TransactionError::MEMPOOL_ERROR;\n+                }",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "5c5fd76ad1ee68c3cd77436bad49041969cf1cb1",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@sdaftuar I definitely agree that if `GetTransactionFee` fails, we shouldn't try to submit the transaction. My issue with using `GetTransactionFee` to return a `TxValidationResult` is that, in my opinion, ATMP should be the authority on validation results.\r\n\r\nAt the end of the day, the fee is not meaningful unless validation succeeds. If `GetTransactionFee` fails due to the transaction being invalid, yes it fails, but it's more useful to return the validation error than \"sorry, couldn't get the fee.\" But I don't think `GetTransactionFee` should be relied upon to return a validation error. It would make sense to me to run a `test_accept` of ATMP to get the proper validation error if `GetTransactionFee` fails (but then with this idea... why not just dry-run ATMP haha).",
    "created_at": "2020-09-26T14:08:17Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495460204",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495460204"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495460204"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495460204/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 45,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 52,
    "side": "RIGHT",
    "in_reply_to_id": 493450254
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495460880",
    "pull_request_review_id": 497007527,
    "id": 495460880,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2MDg4MA==",
    "diff_hunk": "@@ -39,9 +39,19 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         // Transaction is not already in the mempool.\n         TxValidationState state;\n         CAmount fee{0};\n-        if (AcceptToMemoryPool(*node.mempool, state, tx,\n-                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n-            if (max_tx_fee && fee > max_tx_fee) {\n+        if (max_tx_fee) {\n+            if (!GetTransactionFee(*node.mempool, state, tx, &fee)) {\n+                err_string = state.ToString();\n+                if (state.IsInvalid()) {\n+                    if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n+                        return TransactionError::MISSING_INPUTS;\n+                    }\n+                    return TransactionError::MEMPOOL_REJECTED;\n+                } else {\n+                    return TransactionError::MEMPOOL_ERROR;\n+                }",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "5c5fd76ad1ee68c3cd77436bad49041969cf1cb1",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Also @sdaftuar the `testmempoolaccept` RPC already returns the fee for a raw transaction (#19940)!",
    "created_at": "2020-09-26T14:15:47Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495460880",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495460880"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495460880"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495460880/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 45,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 52,
    "side": "RIGHT",
    "in_reply_to_id": 493450254
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495463683",
    "pull_request_review_id": 497009536,
    "id": 495463683,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2MzY4Mw==",
    "diff_hunk": "@@ -1090,6 +1090,33 @@ bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTrans\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, test_accept, fee_out);\n }\n \n+// Calculate the fee of a transaction by looking up inputs from the mempool if\n+// necessary. Return true if the fee was successfully calculated, or false if\n+// an error with the transaction was discovered.\n+// If the transaction is valid, then the fee returned is correct.\n+// However, success does not imply that the transaction is valid.\n+bool GetTransactionFee(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx, CAmount *fee_out)\n+{\n+    LOCK2(cs_main, pool.cs);\n+\n+    CCoinsViewMemPool viewmempool(&::ChainstateActive().CoinsTip(), pool);\n+    CCoinsViewCache view(&viewmempool);\n+    view.GetBestBlock();",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "5c5fd76ad1ee68c3cd77436bad49041969cf1cb1",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I tried removing the line and it looks okay. I might be reading this wrong but I think when we call `CheckTxInputs` with the `GetSpendHeight(view)`:\r\n```c\r\nif (!Consensus::CheckTxInputs(tx, state, view, GetSpendHeight(view), *fee_out)) {\r\n```\r\n\r\n[`GetSpendHeight()`](https://github.com/bitcoin/bitcoin/blob/8aa3a4a498742dc42631956ed3599b3fb2b80302/src/validation.cpp#L1477) calls `GetBestBlock()` for `view` as well:\r\n\r\n```c \r\nint GetSpendHeight(const CCoinsViewCache& inputs)\r\n{\r\n    LOCK(cs_main);\r\n    CBlockIndex* pindexPrev = LookupBlockIndex(inputs.GetBestBlock());\r\n    return pindexPrev->nHeight + 1;\r\n}\r\n```",
    "created_at": "2020-09-26T14:47:18Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495463683",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495463683"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495463683"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495463683/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1104,
    "side": "RIGHT",
    "in_reply_to_id": 493440556
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495465526",
    "pull_request_review_id": 497010858,
    "id": 495465526,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2NTUyNg==",
    "diff_hunk": "@@ -1090,6 +1090,33 @@ bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTrans\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, test_accept, fee_out);\n }\n \n+// Calculate the fee of a transaction by looking up inputs from the mempool if\n+// necessary. Return true if the fee was successfully calculated, or false if\n+// an error with the transaction was discovered.\n+// If the transaction is valid, then the fee returned is correct.\n+// However, success does not imply that the transaction is valid.\n+bool GetTransactionFee(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx, CAmount *fee_out)\n+{\n+    LOCK2(cs_main, pool.cs);\n+\n+    CCoinsViewMemPool viewmempool(&::ChainstateActive().CoinsTip(), pool);\n+    CCoinsViewCache view(&viewmempool);\n+    view.GetBestBlock();",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 15,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "5c5fd76ad1ee68c3cd77436bad49041969cf1cb1",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point!",
    "created_at": "2020-09-26T15:08:26Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495465526",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495465526"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495465526"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495465526/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1104,
    "side": "RIGHT",
    "in_reply_to_id": 493440556
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495493263",
    "pull_request_review_id": 497029620,
    "id": 495493263,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ5MzI2Mw==",
    "diff_hunk": "@@ -36,20 +48,24 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n-        if (!AcceptToMemoryPool(*node.mempool, state, tx,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n-            err_string = state.ToString();\n-            if (state.IsInvalid()) {\n-                if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                    return TransactionError::MISSING_INPUTS;\n-                }\n-                return TransactionError::MEMPOOL_REJECTED;\n-            } else {\n-                return TransactionError::MEMPOOL_ERROR;\n+        CAmount fee{0};\n+        if (max_tx_fee) {",
    "path": "src/node/transaction.cpp",
    "position": 37,
    "original_position": 37,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "22ebb7fda03fd18361066b4ce92eeed009542976",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n        if (max_tx_fee) {\r\n            CAmount fee{0};\r\n```",
    "created_at": "2020-09-26T20:37:47Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495493263",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495493263"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495493263"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495493263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 53,
    "original_start_line": 53,
    "start_side": "RIGHT",
    "line": 54,
    "original_line": 54,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495493514",
    "pull_request_review_id": 497029620,
    "id": 495493514,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ5MzUxNA==",
    "diff_hunk": "@@ -13,6 +13,18 @@\n \n #include <future>\n \n+TransactionError HandleATMPError(TxValidationState state, std::string& err_string) {",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "22ebb7fda03fd18361066b4ce92eeed009542976",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\nTransactionError HandleATMPError(TxValidationState state, std::string& err_string)\r\n{\r\n```",
    "created_at": "2020-09-26T20:40:56Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495493514",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495493514"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495493514"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495493514/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 16,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495493978",
    "pull_request_review_id": 497029620,
    "id": 495493978,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ5Mzk3OA==",
    "diff_hunk": "@@ -36,20 +48,24 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n-        if (!AcceptToMemoryPool(*node.mempool, state, tx,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n-            err_string = state.ToString();\n-            if (state.IsInvalid()) {\n-                if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                    return TransactionError::MISSING_INPUTS;\n-                }\n-                return TransactionError::MEMPOOL_REJECTED;\n-            } else {\n-                return TransactionError::MEMPOOL_ERROR;\n+        CAmount fee{0};\n+        if (max_tx_fee) {\n+            // First, call ATMP with test_accept and check the fee. If ATMP\n+            // fails here, return error immediately.\n+            if (!AcceptToMemoryPool(*node.mempool, state, tx,\n+                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {",
    "path": "src/node/transaction.cpp",
    "position": 41,
    "original_position": 41,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "22ebb7fda03fd18361066b4ce92eeed009542976",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n            if (!AcceptToMemoryPool(\r\n                    *node.mempool, state, tx,\r\n                    nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\r\n```",
    "created_at": "2020-09-26T20:46:23Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495493978",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495493978"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495493978"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495493978/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 57,
    "original_start_line": 57,
    "start_side": "RIGHT",
    "line": 58,
    "original_line": 58,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495494089",
    "pull_request_review_id": 497029620,
    "id": 495494089,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ5NDA4OQ==",
    "diff_hunk": "@@ -36,20 +48,24 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n-        if (!AcceptToMemoryPool(*node.mempool, state, tx,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n-            err_string = state.ToString();\n-            if (state.IsInvalid()) {\n-                if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                    return TransactionError::MISSING_INPUTS;\n-                }\n-                return TransactionError::MEMPOOL_REJECTED;\n-            } else {\n-                return TransactionError::MEMPOOL_ERROR;\n+        CAmount fee{0};\n+        if (max_tx_fee) {\n+            // First, call ATMP with test_accept and check the fee. If ATMP\n+            // fails here, return error immediately.\n+            if (!AcceptToMemoryPool(*node.mempool, state, tx,\n+                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n+                return HandleATMPError(state, err_string);\n+            } else if (fee > max_tx_fee) {\n+                return TransactionError::MAX_FEE_EXCEEDED;\n             }\n         }\n+        // Try to submit the transaction to the mempool.\n+        if (!AcceptToMemoryPool(*node.mempool, state, tx,\n+                nullptr /* plTxnReplaced */, false /* bypass_limits */)) {",
    "path": "src/node/transaction.cpp",
    "position": 49,
    "original_position": 49,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "22ebb7fda03fd18361066b4ce92eeed009542976",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n        if (!AcceptToMemoryPool(\r\n                *node.mempool, state, tx,\r\n                nullptr /* plTxnReplaced */, false /* bypass_limits */)) {\r\n```",
    "created_at": "2020-09-26T20:48:11Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495494089",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495494089"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495494089"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495494089/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 65,
    "original_start_line": 65,
    "start_side": "RIGHT",
    "line": 66,
    "original_line": 66,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495494161",
    "pull_request_review_id": 497029620,
    "id": 495494161,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ5NDE2MQ==",
    "diff_hunk": "@@ -929,11 +929,19 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n \n     TxValidationState state;\n     bool test_accept_res;\n-    CAmount fee;\n+    CAmount fee{0}; // To return transaction fee from AcceptToMemoryPool",
    "path": "src/rpc/rawtransaction.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "22ebb7fda03fd18361066b4ce92eeed009542976",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n    CAmount fee{0};\r\n```",
    "created_at": "2020-09-26T20:49:11Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495494161",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495494161"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r495494161"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/495494161/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 950,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497863233",
    "pull_request_review_id": 499903993,
    "id": 497863233,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2MzIzMw==",
    "diff_hunk": "@@ -36,20 +48,24 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n-        if (!AcceptToMemoryPool(*node.mempool, state, tx,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n-            err_string = state.ToString();\n-            if (state.IsInvalid()) {\n-                if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                    return TransactionError::MISSING_INPUTS;\n-                }\n-                return TransactionError::MEMPOOL_REJECTED;\n-            } else {\n-                return TransactionError::MEMPOOL_ERROR;\n+        CAmount fee{0};\n+        if (max_tx_fee) {\n+            // First, call ATMP with test_accept and check the fee. If ATMP\n+            // fails here, return error immediately.\n+            if (!AcceptToMemoryPool(*node.mempool, state, tx,\n+                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n+                return HandleATMPError(state, err_string);\n+            } else if (fee > max_tx_fee) {\n+                return TransactionError::MAX_FEE_EXCEEDED;\n             }\n         }\n+        // Try to submit the transaction to the mempool.\n+        if (!AcceptToMemoryPool(*node.mempool, state, tx,\n+                nullptr /* plTxnReplaced */, false /* bypass_limits */)) {",
    "path": "src/node/transaction.cpp",
    "position": 49,
    "original_position": 49,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "22ebb7fda03fd18361066b4ce92eeed009542976",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "\ud83e\udd14  seems different from normal",
    "created_at": "2020-09-30T23:54:52Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r497863233",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497863233"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r497863233"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/497863233/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 65,
    "original_start_line": 65,
    "start_side": "RIGHT",
    "line": 66,
    "original_line": 66,
    "side": "RIGHT",
    "in_reply_to_id": 495494089
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499419350",
    "pull_request_review_id": 501817771,
    "id": 499419350,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQxOTM1MA==",
    "diff_hunk": "@@ -13,6 +13,18 @@\n \n #include <future>\n \n+TransactionError HandleATMPError(TxValidationState state, std::string& err_string) {",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "8784930dfaf4b981be6a3670c4298de2226a3989",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Minor style suggestions (no need to change these unless you're retouching the branch anyway):\r\n\r\n- Make the `TxValidationState state` argument a const reference to avoid a copy on the stack.\r\n- This function is only used internally in this translation unit. Make it `static` or put it in an unnamed namespace to avoid external linkage.",
    "created_at": "2020-10-05T08:15:53Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499419350",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499419350"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499419350"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499419350/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 16,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499432040",
    "pull_request_review_id": 501835098,
    "id": 499432040,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQzMjA0MA==",
    "diff_hunk": "@@ -13,6 +13,18 @@\n \n #include <future>\n \n+TransactionError HandleATMPError(TxValidationState state, std::string& err_string) {",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "f907f4b9389b86fc655f45917367be5838b79684",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "style nit in commit f907f4b9389b86fc655f45917367be5838b79684:\r\n\r\n* Newline before `{`\r\n* Could suffix return parameters with `_out`\r\n\r\n```suggestion\r\nTransactionError HandleATMPError(TxValidationState state, std::string& err_string_out)\r\n{\r\n```",
    "created_at": "2020-10-05T08:38:48Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499432040",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499432040"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499432040"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499432040/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 16,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499439526",
    "pull_request_review_id": 501835098,
    "id": 499439526,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQzOTUyNg==",
    "diff_hunk": "@@ -456,9 +456,9 @@ def run_test(self):\n         # Thus, testmempoolaccept should reject\n         testres = self.nodes[2].testmempoolaccept([rawTxSigned['hex']], 0.00001000)[0]\n         assert_equal(testres['allowed'], False)\n-        assert_equal(testres['reject-reason'], 'absurdly-high-fee')\n+        assert_equal(testres['reject-reason'], 'max-fee-exceeded')\n         # and sendrawtransaction should throw\n-        assert_raises_rpc_error(-26, \"absurdly-high-fee\", self.nodes[2].sendrawtransaction, rawTxSigned['hex'], 0.00001000)\n+        assert_raises_rpc_error(-25, 'Fee exceeds maximum configured by -maxtxfee', self.nodes[2].sendrawtransaction, rawTxSigned['hex'], 0.00001000)",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 8,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "f907f4b9389b86fc655f45917367be5838b79684",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "bug in commit f907f4b:\r\n\r\nThis is wrong. maxtxfee doesn't influence sendrawtransaction at all. See `help sendrawtransaction`",
    "created_at": "2020-10-05T08:51:05Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499439526",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499439526"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499439526"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499439526/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 461,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499439733",
    "pull_request_review_id": 501835098,
    "id": 499439733,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQzOTczMw==",
    "diff_hunk": "@@ -456,9 +456,9 @@ def run_test(self):\n         # Thus, testmempoolaccept should reject\n         testres = self.nodes[2].testmempoolaccept([rawTxSigned['hex']], 0.00001000)[0]\n         assert_equal(testres['allowed'], False)\n-        assert_equal(testres['reject-reason'], 'absurdly-high-fee')\n+        assert_equal(testres['reject-reason'], 'max-fee-exceeded')",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": 5,
    "original_position": 5,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "f907f4b9389b86fc655f45917367be5838b79684",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "question in commit f907f4b:\r\n\r\nAny reason to change the reject-reason?",
    "created_at": "2020-10-05T08:51:27Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499439733",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499439733"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499439733"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499439733/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 459,
    "original_line": 459,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499443726",
    "pull_request_review_id": 501835098,
    "id": 499443726,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ0MzcyNg==",
    "diff_hunk": "@@ -456,9 +456,9 @@ def run_test(self):\n         # Thus, testmempoolaccept should reject\n         testres = self.nodes[2].testmempoolaccept([rawTxSigned['hex']], 0.00001000)[0]\n         assert_equal(testres['allowed'], False)\n-        assert_equal(testres['reject-reason'], 'absurdly-high-fee')\n+        assert_equal(testres['reject-reason'], 'max-fee-exceeded')\n         # and sendrawtransaction should throw\n-        assert_raises_rpc_error(-26, \"absurdly-high-fee\", self.nodes[2].sendrawtransaction, rawTxSigned['hex'], 0.00001000)\n+        assert_raises_rpc_error(-25, 'Fee exceeds maximum configured by -maxtxfee', self.nodes[2].sendrawtransaction, rawTxSigned['hex'], 0.00001000)",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 8,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "f907f4b9389b86fc655f45917367be5838b79684",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah, I see this is fixed in the next commit. Maybe it could make sense to put the scripted diff first, so that this line doesn't have to change twice in the same pull request?\r\n\r\nAlso, the scripted diff could use `git grep -l \"bla\"` instead of the hardcoded list of file names. This way it is easier to see that it is complete. Also, rebasing will be easier if a filename changes.",
    "created_at": "2020-10-05T08:57:48Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499443726",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499443726"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499443726"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499443726/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 461,
    "side": "RIGHT",
    "in_reply_to_id": 499439526
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499448140",
    "pull_request_review_id": 501835098,
    "id": 499448140,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ0ODE0MA==",
    "diff_hunk": "@@ -947,12 +947,20 @@ static RPCHelpMan testmempoolaccept()\n \n     TxValidationState state;\n     bool test_accept_res;\n-    CAmount fee;\n+    CAmount fee{0}; // To return transaction fee from AcceptToMemoryPool\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n             nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true, &fee);\n     }\n+\n+    // TODO: move ATMP absurdFee check to here",
    "path": "src/rpc/rawtransaction.cpp",
    "position": null,
    "original_position": 12,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "f907f4b9389b86fc655f45917367be5838b79684",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "in commit f907f4b9389b86fc655f45917367be5838b79684:\r\n\r\nAny reason to not squash commit 6a4a7c64246c826fed6b2bdf97ad91a5f864621b into this? Seems odd to add an TODO in one commit and then fix it in the next commit in the same pull.\r\n\r\n",
    "created_at": "2020-10-05T09:05:23Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499448140",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499448140"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499448140"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499448140/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 957,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499448772",
    "pull_request_review_id": 501835098,
    "id": 499448772,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ0ODc3Mg==",
    "diff_hunk": "@@ -730,8 +730,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     if (!bypass_limits && !CheckFeeRate(nSize, nModifiedFees, state)) return false;\n \n     if (nAbsurdFee && nFees > nAbsurdFee)\n-        return state.Invalid(TxValidationResult::TX_NOT_STANDARD,\n-                \"absurdly-high-fee\", strprintf(\"%d > %d\", nFees, nAbsurdFee));\n+        LogPrintf(\"Ignoring Absurdfee\\n\");",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 6,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "6a4a7c64246c826fed6b2bdf97ad91a5f864621b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "in commit 6a4a7c64246c826fed6b2bdf97ad91a5f864621b:\r\n\r\nAny reason to change this? The next commit removes the line anyway.",
    "created_at": "2020-10-05T09:06:27Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499448772",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499448772"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499448772"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499448772/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 733,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499518601",
    "pull_request_review_id": 501947674,
    "id": 499518601,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxODYwMQ==",
    "diff_hunk": "@@ -456,9 +456,9 @@ def run_test(self):\n         # Thus, testmempoolaccept should reject\n         testres = self.nodes[2].testmempoolaccept([rawTxSigned['hex']], 0.00001000)[0]\n         assert_equal(testres['allowed'], False)\n-        assert_equal(testres['reject-reason'], 'absurdly-high-fee')\n+        assert_equal(testres['reject-reason'], 'max-fee-exceeded')",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": 5,
    "original_position": 5,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "f907f4b9389b86fc655f45917367be5838b79684",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I wanted to use the same reject reason that wallet gives when a fee is too high, which is `TransactionError::MAX_FEE_EXCEEDED`. Also a little sanity check for all the `absurdly-high-fee` tests.",
    "created_at": "2020-10-05T11:09:24Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499518601",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499518601"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499518601"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499518601/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 459,
    "original_line": 459,
    "side": "RIGHT",
    "in_reply_to_id": 499439733
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499519405",
    "pull_request_review_id": 501948722,
    "id": 499519405,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxOTQwNQ==",
    "diff_hunk": "@@ -947,12 +947,20 @@ static RPCHelpMan testmempoolaccept()\n \n     TxValidationState state;\n     bool test_accept_res;\n-    CAmount fee;\n+    CAmount fee{0}; // To return transaction fee from AcceptToMemoryPool\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n             nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true, &fee);\n     }\n+\n+    // TODO: move ATMP absurdFee check to here",
    "path": "src/rpc/rawtransaction.cpp",
    "position": null,
    "original_position": 12,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "f907f4b9389b86fc655f45917367be5838b79684",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yeah, I had this odd idea that people might review commit-by-commit and that documenting what to expect might be helpful, but perhaps it's just weird and confusing \ud83d\ude05 ",
    "created_at": "2020-10-05T11:10:53Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499519405",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499519405"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499519405"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499519405/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 957,
    "side": "RIGHT",
    "in_reply_to_id": 499448140
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499521168",
    "pull_request_review_id": 501951012,
    "id": 499521168,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyMTE2OA==",
    "diff_hunk": "@@ -730,8 +730,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     if (!bypass_limits && !CheckFeeRate(nSize, nModifiedFees, state)) return false;\n \n     if (nAbsurdFee && nFees > nAbsurdFee)\n-        return state.Invalid(TxValidationResult::TX_NOT_STANDARD,\n-                \"absurdly-high-fee\", strprintf(\"%d > %d\", nFees, nAbsurdFee));\n+        LogPrintf(\"Ignoring Absurdfee\\n\");",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 6,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "6a4a7c64246c826fed6b2bdf97ad91a5f864621b",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I wanted to make it really obvious that the behavior is identical if ATMP ignores high fees at this point, that's all :)",
    "created_at": "2020-10-05T11:14:11Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499521168",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499521168"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499521168"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499521168/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 733,
    "side": "RIGHT",
    "in_reply_to_id": 499448772
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499540272",
    "pull_request_review_id": 501976147,
    "id": 499540272,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU0MDI3Mg==",
    "diff_hunk": "@@ -947,12 +947,20 @@ static RPCHelpMan testmempoolaccept()\n \n     TxValidationState state;\n     bool test_accept_res;\n-    CAmount fee;\n+    CAmount fee{0}; // To return transaction fee from AcceptToMemoryPool\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n             nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true, &fee);\n     }\n+\n+    // TODO: move ATMP absurdFee check to here",
    "path": "src/rpc/rawtransaction.cpp",
    "position": null,
    "original_position": 12,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "f907f4b9389b86fc655f45917367be5838b79684",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "will squash, that is a better way \ud83d\udc4d ",
    "created_at": "2020-10-05T11:50:25Z",
    "updated_at": "2020-10-05T11:58:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499540272",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499540272"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499540272"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499540272/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 957,
    "side": "RIGHT",
    "in_reply_to_id": 499448140
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499545847",
    "pull_request_review_id": 501983458,
    "id": 499545847,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU0NTg0Nw==",
    "diff_hunk": "@@ -13,6 +13,18 @@\n \n #include <future>\n \n+TransactionError HandleATMPError(TxValidationState state, std::string& err_string) {",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "8784930dfaf4b981be6a3670c4298de2226a3989",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done, thanks!",
    "created_at": "2020-10-05T12:00:40Z",
    "updated_at": "2020-10-05T12:00:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499545847",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499545847"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499545847"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499545847/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 16,
    "side": "RIGHT",
    "in_reply_to_id": 499419350
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499572154",
    "pull_request_review_id": 502019418,
    "id": 499572154,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU3MjE1NA==",
    "diff_hunk": "@@ -456,9 +456,9 @@ def run_test(self):\n         # Thus, testmempoolaccept should reject\n         testres = self.nodes[2].testmempoolaccept([rawTxSigned['hex']], 0.00001000)[0]\n         assert_equal(testres['allowed'], False)\n-        assert_equal(testres['reject-reason'], 'absurdly-high-fee')\n+        assert_equal(testres['reject-reason'], 'max-fee-exceeded')\n         # and sendrawtransaction should throw\n-        assert_raises_rpc_error(-26, \"absurdly-high-fee\", self.nodes[2].sendrawtransaction, rawTxSigned['hex'], 0.00001000)\n+        assert_raises_rpc_error(-25, 'Fee exceeds maximum configured by -maxtxfee', self.nodes[2].sendrawtransaction, rawTxSigned['hex'], 0.00001000)",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 8,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "f907f4b9389b86fc655f45917367be5838b79684",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Also, the scripted diff could use git grep -l \"bla\" instead of the hardcoded list of file names.\r\n\r\nI will definitely do that in the future \ud83d\ude05  \r\n\r\n> Maybe it could make sense to put the scripted diff first, so that this line doesn't have to change twice in the same pull request?\r\n\r\nI think the line would still need to change, sine the rpc error code changes from -26 to -25 as well",
    "created_at": "2020-10-05T12:48:26Z",
    "updated_at": "2020-10-05T12:51:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499572154",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499572154"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499572154"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499572154/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 461,
    "side": "RIGHT",
    "in_reply_to_id": 499439526
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499593308",
    "pull_request_review_id": 502048645,
    "id": 499593308,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5MzMwOA==",
    "diff_hunk": "@@ -456,9 +456,9 @@ def run_test(self):\n         # Thus, testmempoolaccept should reject\n         testres = self.nodes[2].testmempoolaccept([rawTxSigned['hex']], 0.00001000)[0]\n         assert_equal(testres['allowed'], False)\n-        assert_equal(testres['reject-reason'], 'absurdly-high-fee')\n+        assert_equal(testres['reject-reason'], 'max-fee-exceeded')",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": 5,
    "original_position": 5,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "f907f4b9389b86fc655f45917367be5838b79684",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Not sure if I understand this. `MAX_FEE_EXCEEDED` returns the string `\"Fee exceeds maximum configured by user\"`, not `\"max-fee-exceeded\"`.\r\n\r\nAs there is no reject code, RPC users might match on the reject reason, which seems brittle, but if there is no convincing argument to change, I'd prefer to leave it as is.\r\n\r\nedit: probably not too much of a deal",
    "created_at": "2020-10-05T13:21:21Z",
    "updated_at": "2020-10-05T13:27:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499593308",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499593308"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499593308"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499593308/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 459,
    "original_line": 459,
    "side": "RIGHT",
    "in_reply_to_id": 499439733
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499661344",
    "pull_request_review_id": 502141870,
    "id": 499661344,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY2MTM0NA==",
    "diff_hunk": "@@ -456,9 +456,9 @@ def run_test(self):\n         # Thus, testmempoolaccept should reject\n         testres = self.nodes[2].testmempoolaccept([rawTxSigned['hex']], 0.00001000)[0]\n         assert_equal(testres['allowed'], False)\n-        assert_equal(testres['reject-reason'], 'absurdly-high-fee')\n+        assert_equal(testres['reject-reason'], 'max-fee-exceeded')",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": 5,
    "original_position": 5,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "f907f4b9389b86fc655f45917367be5838b79684",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You're right, yeah. I guess this is an arbitrary change to make the error messages more similar \ud83d\ude05 ",
    "created_at": "2020-10-05T14:55:26Z",
    "updated_at": "2020-10-05T14:55:26Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499661344",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499661344"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r499661344"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/499661344/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 459,
    "original_line": 459,
    "side": "RIGHT",
    "in_reply_to_id": 499439733
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500694549",
    "pull_request_review_id": 503475464,
    "id": 500694549,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY5NDU0OQ==",
    "diff_hunk": "@@ -36,20 +48,24 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n         if (!existingCoin.IsSpent()) return TransactionError::ALREADY_IN_CHAIN;\n     }\n     if (!node.mempool->exists(hashTx)) {\n-        // Transaction is not already in the mempool. Submit it.\n+        // Transaction is not already in the mempool.\n         TxValidationState state;\n-        if (!AcceptToMemoryPool(*node.mempool, state, tx,\n-                                nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n-            err_string = state.ToString();\n-            if (state.IsInvalid()) {\n-                if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                    return TransactionError::MISSING_INPUTS;\n-                }\n-                return TransactionError::MEMPOOL_REJECTED;\n-            } else {\n-                return TransactionError::MEMPOOL_ERROR;\n+        CAmount fee{0};\n+        if (max_tx_fee) {",
    "path": "src/node/transaction.cpp",
    "position": 37,
    "original_position": 37,
    "commit_id": "b048b275d9711f70847afaea5450f17a0f7e673a",
    "original_commit_id": "8f1290c60159a3171c27250bc95687548c5c1b84",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n        if (max_tx_fee > 0) {\r\n```",
    "created_at": "2020-10-07T02:04:18Z",
    "updated_at": "2020-10-07T02:10:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r500694549",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500694549"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19339#discussion_r500694549"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19339"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500694549/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 54,
    "original_line": 54,
    "side": "RIGHT"
  }
]