[
  {
    "sha": "9f13a10548bf77fb785a9c116234258275de6c04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjEzYTEwNTQ4YmY3N2ZiNzg1YTljMTE2MjM0MjU4Mjc1ZGU2YzA0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-04-22T21:55:00Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-05-01T03:14:08Z"
      },
      "message": "checkpoints: store mapCheckpoints in CCheckpointData rather than a pointer",
      "tree": {
        "sha": "0b8ec1207e3056383e2681807c6e532db3ef80c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b8ec1207e3056383e2681807c6e532db3ef80c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f13a10548bf77fb785a9c116234258275de6c04",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f13a10548bf77fb785a9c116234258275de6c04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f13a10548bf77fb785a9c116234258275de6c04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f13a10548bf77fb785a9c116234258275de6c04/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a10000222cb49eb253b41802ecf312adaf79439",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a10000222cb49eb253b41802ecf312adaf79439",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a10000222cb49eb253b41802ecf312adaf79439"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "cc54ac13f52e378a31bfa482b6481134d19a1b5c",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f13a10548bf77fb785a9c116234258275de6c04/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f13a10548bf77fb785a9c116234258275de6c04/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=9f13a10548bf77fb785a9c116234258275de6c04",
        "patch": "@@ -43,7 +43,7 @@ static Checkpoints::MapCheckpoints mapCheckpoints =\n         (295000, uint256S(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\"))\n         ;\n static const Checkpoints::CCheckpointData data = {\n-        &mapCheckpoints,\n+        mapCheckpoints,\n         1397080064, // * UNIX timestamp of last checkpoint block\n         36544669,   // * total number of transactions between genesis and last checkpoint\n                     //   (the tx=... number in the SetBestChain debug.log lines)\n@@ -55,7 +55,7 @@ static Checkpoints::MapCheckpoints mapCheckpointsTestnet =\n         ( 546, uint256S(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n         ;\n static const Checkpoints::CCheckpointData dataTestnet = {\n-        &mapCheckpointsTestnet,\n+        mapCheckpointsTestnet,\n         1337966069,\n         1488,\n         300\n@@ -66,7 +66,7 @@ static Checkpoints::MapCheckpoints mapCheckpointsRegtest =\n         ( 0, uint256S(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n         ;\n static const Checkpoints::CCheckpointData dataRegtest = {\n-        &mapCheckpointsRegtest,\n+        mapCheckpointsRegtest,\n         0,\n         0,\n         0"
      },
      {
        "sha": "97ea8e2feeb1012b29f70f1cb8e58ecdac77ac5e",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f13a10548bf77fb785a9c116234258275de6c04/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f13a10548bf77fb785a9c116234258275de6c04/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=9f13a10548bf77fb785a9c116234258275de6c04",
        "patch": "@@ -30,7 +30,7 @@ namespace Checkpoints {\n         if (!fEnabled)\n             return true;\n \n-        const MapCheckpoints& checkpoints = *Params().Checkpoints().mapCheckpoints;\n+        const MapCheckpoints& checkpoints = Params().Checkpoints().mapCheckpoints;\n \n         MapCheckpoints::const_iterator i = checkpoints.find(nHeight);\n         if (i == checkpoints.end()) return true;\n@@ -74,7 +74,7 @@ namespace Checkpoints {\n         if (!fEnabled)\n             return 0;\n \n-        const MapCheckpoints& checkpoints = *Params().Checkpoints().mapCheckpoints;\n+        const MapCheckpoints& checkpoints = Params().Checkpoints().mapCheckpoints;\n \n         return checkpoints.rbegin()->first;\n     }\n@@ -84,7 +84,7 @@ namespace Checkpoints {\n         if (!fEnabled)\n             return NULL;\n \n-        const MapCheckpoints& checkpoints = *Params().Checkpoints().mapCheckpoints;\n+        const MapCheckpoints& checkpoints = Params().Checkpoints().mapCheckpoints;\n \n         BOOST_REVERSE_FOREACH(const MapCheckpoints::value_type& i, checkpoints)\n         {"
      },
      {
        "sha": "9cccf4228a66826e0150eb908f71cc97c42901b4",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f13a10548bf77fb785a9c116234258275de6c04/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f13a10548bf77fb785a9c116234258275de6c04/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=9f13a10548bf77fb785a9c116234258275de6c04",
        "patch": "@@ -20,7 +20,7 @@ namespace Checkpoints\n typedef std::map<int, uint256> MapCheckpoints;\n \n struct CCheckpointData {\n-    const MapCheckpoints *mapCheckpoints;\n+    MapCheckpoints mapCheckpoints;\n     int64_t nTimeLastCheckpoint;\n     int64_t nTransactionsLastCheckpoint;\n     double fTransactionsPerDay;"
      }
    ]
  },
  {
    "sha": "699682304f8f81035fed0c8644a364b7b1b25912",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTk2ODIzMDRmOGY4MTAzNWZlZDBjODY0NGEzNjRiN2IxYjI1OTEy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-04-23T22:30:55Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-05-01T03:14:48Z"
      },
      "message": "checkpoints: make checkpoints a member of CChainParams\n\nThis drops the virtual call and simplifies the logic",
      "tree": {
        "sha": "63b835f7baab2519607c6d818e78aca27470b7f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63b835f7baab2519607c6d818e78aca27470b7f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/699682304f8f81035fed0c8644a364b7b1b25912",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/699682304f8f81035fed0c8644a364b7b1b25912",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/699682304f8f81035fed0c8644a364b7b1b25912",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/699682304f8f81035fed0c8644a364b7b1b25912/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f13a10548bf77fb785a9c116234258275de6c04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f13a10548bf77fb785a9c116234258275de6c04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f13a10548bf77fb785a9c116234258275de6c04"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 39,
      "deletions": 58
    },
    "files": [
      {
        "sha": "7ccc39bcafc231a332ae8ac9bdb8ab4f3b5557bd",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 57,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/699682304f8f81035fed0c8644a364b7b1b25912/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/699682304f8f81035fed0c8644a364b7b1b25912/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=699682304f8f81035fed0c8644a364b7b1b25912",
        "patch": "@@ -26,51 +26,6 @@ using namespace std;\n  *    timestamp before)\n  * + Contains no strange transactions\n  */\n-static Checkpoints::MapCheckpoints mapCheckpoints =\n-        boost::assign::map_list_of\n-        ( 11111, uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n-        ( 33333, uint256S(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n-        ( 74000, uint256S(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\"))\n-        (105000, uint256S(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\"))\n-        (134444, uint256S(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\"))\n-        (168000, uint256S(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\"))\n-        (193000, uint256S(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n-        (210000, uint256S(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n-        (216116, uint256S(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n-        (225430, uint256S(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n-        (250000, uint256S(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\"))\n-        (279000, uint256S(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\"))\n-        (295000, uint256S(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\"))\n-        ;\n-static const Checkpoints::CCheckpointData data = {\n-        mapCheckpoints,\n-        1397080064, // * UNIX timestamp of last checkpoint block\n-        36544669,   // * total number of transactions between genesis and last checkpoint\n-                    //   (the tx=... number in the SetBestChain debug.log lines)\n-        60000.0     // * estimated number of transactions per day after checkpoint\n-    };\n-\n-static Checkpoints::MapCheckpoints mapCheckpointsTestnet =\n-        boost::assign::map_list_of\n-        ( 546, uint256S(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n-        ;\n-static const Checkpoints::CCheckpointData dataTestnet = {\n-        mapCheckpointsTestnet,\n-        1337966069,\n-        1488,\n-        300\n-    };\n-\n-static Checkpoints::MapCheckpoints mapCheckpointsRegtest =\n-        boost::assign::map_list_of\n-        ( 0, uint256S(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n-        ;\n-static const Checkpoints::CCheckpointData dataRegtest = {\n-        mapCheckpointsRegtest,\n-        0,\n-        0,\n-        0\n-    };\n \n class CMainParams : public CChainParams {\n public:\n@@ -147,11 +102,27 @@ class CMainParams : public CChainParams {\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n         fTestnetToBeDeprecatedFieldRPC = false;\n-    }\n \n-    const Checkpoints::CCheckpointData& Checkpoints() const \n-    {\n-        return data;\n+        checkpointData = (Checkpoints::CCheckpointData) {\n+            boost::assign::map_list_of\n+            ( 11111, uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n+            ( 33333, uint256S(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n+            ( 74000, uint256S(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\"))\n+            (105000, uint256S(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\"))\n+            (134444, uint256S(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\"))\n+            (168000, uint256S(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\"))\n+            (193000, uint256S(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n+            (210000, uint256S(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n+            (216116, uint256S(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n+            (225430, uint256S(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n+            (250000, uint256S(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\"))\n+            (279000, uint256S(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\"))\n+            (295000, uint256S(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\")),\n+            1397080064, // * UNIX timestamp of last checkpoint block\n+            36544669,   // * total number of transactions between genesis and last checkpoint\n+                        //   (the tx=... number in the SetBestChain debug.log lines)\n+            60000.0     // * estimated number of transactions per day after checkpoint\n+        };\n     }\n };\n static CMainParams mainParams;\n@@ -203,10 +174,15 @@ class CTestNetParams : public CMainParams {\n         fRequireStandard = false;\n         fMineBlocksOnDemand = false;\n         fTestnetToBeDeprecatedFieldRPC = true;\n-    }\n-    const Checkpoints::CCheckpointData& Checkpoints() const \n-    {\n-        return dataTestnet;\n+\n+        checkpointData = (Checkpoints::CCheckpointData) {\n+            boost::assign::map_list_of\n+            ( 546, uint256S(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\")),\n+            1337966069,\n+            1488,\n+            300\n+        };\n+\n     }\n };\n static CTestNetParams testNetParams;\n@@ -245,10 +221,14 @@ class CRegTestParams : public CTestNetParams {\n         fRequireStandard = false;\n         fMineBlocksOnDemand = true;\n         fTestnetToBeDeprecatedFieldRPC = false;\n-    }\n-    const Checkpoints::CCheckpointData& Checkpoints() const \n-    {\n-        return dataRegtest;\n+\n+        checkpointData = (Checkpoints::CCheckpointData){\n+            boost::assign::map_list_of\n+            ( 0, uint256S(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\")),\n+            0,\n+            0,\n+            0\n+        };\n     }\n };\n static CRegTestParams regTestParams;"
      },
      {
        "sha": "590f3e137ee3d5a12412d92531ef48aae012185e",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/699682304f8f81035fed0c8644a364b7b1b25912/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/699682304f8f81035fed0c8644a364b7b1b25912/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=699682304f8f81035fed0c8644a364b7b1b25912",
        "patch": "@@ -74,7 +74,7 @@ class CChainParams\n     const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n     const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n-    virtual const Checkpoints::CCheckpointData& Checkpoints() const = 0;\n+    const Checkpoints::CCheckpointData& Checkpoints() const { return checkpointData; }\n protected:\n     CChainParams() {}\n \n@@ -96,6 +96,7 @@ class CChainParams\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n     bool fTestnetToBeDeprecatedFieldRPC;\n+    Checkpoints::CCheckpointData checkpointData;\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "11982d366df0301b8ceb6e9ec5bdc5a713be9ff0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTk4MmQzNjZkZjAzMDFiOGNlYjZlOWVjNWJkYzVhNzEzYmU5ZmYw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-04-22T22:19:11Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-05-01T03:14:48Z"
      },
      "message": "checkpoints: Decouple checkpoints from Params\n\nPass checkpoint data in as necessary",
      "tree": {
        "sha": "dfa369ef18c30da6225ea06dede31c0c8bd3ff87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfa369ef18c30da6225ea06dede31c0c8bd3ff87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11982d366df0301b8ceb6e9ec5bdc5a713be9ff0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11982d366df0301b8ceb6e9ec5bdc5a713be9ff0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11982d366df0301b8ceb6e9ec5bdc5a713be9ff0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11982d366df0301b8ceb6e9ec5bdc5a713be9ff0/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "699682304f8f81035fed0c8644a364b7b1b25912",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/699682304f8f81035fed0c8644a364b7b1b25912",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/699682304f8f81035fed0c8644a364b7b1b25912"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 43,
      "deletions": 37
    },
    "files": [
      {
        "sha": "37808996329fb8ee1685897682dfe7e0087ebdd4",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11982d366df0301b8ceb6e9ec5bdc5a713be9ff0/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11982d366df0301b8ceb6e9ec5bdc5a713be9ff0/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=11982d366df0301b8ceb6e9ec5bdc5a713be9ff0",
        "patch": "@@ -25,20 +25,20 @@ namespace Checkpoints {\n \n     bool fEnabled = true;\n \n-    bool CheckBlock(int nHeight, const uint256& hash)\n+    bool CheckBlock(const CCheckpointData& data, int nHeight, const uint256& hash)\n     {\n         if (!fEnabled)\n             return true;\n \n-        const MapCheckpoints& checkpoints = Params().Checkpoints().mapCheckpoints;\n+        const MapCheckpoints& checkpoints = data.mapCheckpoints;\n \n         MapCheckpoints::const_iterator i = checkpoints.find(nHeight);\n         if (i == checkpoints.end()) return true;\n         return hash == i->second;\n     }\n \n     //! Guess how far we are in the verification process at the given block index\n-    double GuessVerificationProgress(CBlockIndex *pindex, bool fSigchecks) {\n+    double GuessVerificationProgress(const CCheckpointData& data, CBlockIndex *pindex, bool fSigchecks) {\n         if (pindex==NULL)\n             return 0.0;\n \n@@ -50,8 +50,6 @@ namespace Checkpoints {\n         // Work is defined as: 1.0 per transaction before the last checkpoint, and\n         // fSigcheckVerificationFactor per transaction after.\n \n-        const CCheckpointData &data = Params().Checkpoints();\n-\n         if (pindex->nChainTx <= data.nTransactionsLastCheckpoint) {\n             double nCheapBefore = pindex->nChainTx;\n             double nCheapAfter = data.nTransactionsLastCheckpoint - pindex->nChainTx;\n@@ -69,22 +67,22 @@ namespace Checkpoints {\n         return fWorkBefore / (fWorkBefore + fWorkAfter);\n     }\n \n-    int GetTotalBlocksEstimate()\n+    int GetTotalBlocksEstimate(const CCheckpointData& data)\n     {\n         if (!fEnabled)\n             return 0;\n \n-        const MapCheckpoints& checkpoints = Params().Checkpoints().mapCheckpoints;\n+        const MapCheckpoints& checkpoints = data.mapCheckpoints;\n \n         return checkpoints.rbegin()->first;\n     }\n \n-    CBlockIndex* GetLastCheckpoint()\n+    CBlockIndex* GetLastCheckpoint(const CCheckpointData& data)\n     {\n         if (!fEnabled)\n             return NULL;\n \n-        const MapCheckpoints& checkpoints = Params().Checkpoints().mapCheckpoints;\n+        const MapCheckpoints& checkpoints = data.mapCheckpoints;\n \n         BOOST_REVERSE_FOREACH(const MapCheckpoints::value_type& i, checkpoints)\n         {"
      },
      {
        "sha": "b6e2c5acaff8efe41524046bf532b97f51f83187",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11982d366df0301b8ceb6e9ec5bdc5a713be9ff0/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11982d366df0301b8ceb6e9ec5bdc5a713be9ff0/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=11982d366df0301b8ceb6e9ec5bdc5a713be9ff0",
        "patch": "@@ -27,15 +27,15 @@ struct CCheckpointData {\n };\n \n //! Returns true if block passes checkpoint checks\n-bool CheckBlock(int nHeight, const uint256& hash);\n+bool CheckBlock(const CCheckpointData& data, int nHeight, const uint256& hash);\n \n //! Return conservative estimate of total number of blocks, 0 if unknown\n-int GetTotalBlocksEstimate();\n+int GetTotalBlocksEstimate(const CCheckpointData& data);\n \n //! Returns last CBlockIndex* in mapBlockIndex that is a checkpoint\n-CBlockIndex* GetLastCheckpoint();\n+CBlockIndex* GetLastCheckpoint(const CCheckpointData& data);\n \n-double GuessVerificationProgress(CBlockIndex* pindex, bool fSigchecks = true);\n+double GuessVerificationProgress(const CCheckpointData& data, CBlockIndex* pindex, bool fSigchecks = true);\n \n extern bool fEnabled;\n "
      },
      {
        "sha": "4e26cae52ec582e3b3527d42db7563587940e4ce",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11982d366df0301b8ceb6e9ec5bdc5a713be9ff0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11982d366df0301b8ceb6e9ec5bdc5a713be9ff0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=11982d366df0301b8ceb6e9ec5bdc5a713be9ff0",
        "patch": "@@ -1204,8 +1204,9 @@ CAmount GetBlockValue(int nHeight, const CAmount& nFees)\n \n bool IsInitialBlockDownload()\n {\n+    const CChainParams& chainParams = Params();\n     LOCK(cs_main);\n-    if (fImporting || fReindex || chainActive.Height() < Checkpoints::GetTotalBlocksEstimate())\n+    if (fImporting || fReindex || chainActive.Height() < Checkpoints::GetTotalBlocksEstimate(chainParams.Checkpoints()))\n         return true;\n     static bool lockIBDState = false;\n     if (lockIBDState)\n@@ -1709,7 +1710,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         return true;\n     }\n \n-    bool fScriptChecks = pindex->nHeight >= Checkpoints::GetTotalBlocksEstimate();\n+    bool fScriptChecks = pindex->nHeight >= Checkpoints::GetTotalBlocksEstimate(chainparams.Checkpoints());\n \n     // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n     // unless those are already completely spent.\n@@ -1954,6 +1955,7 @@ void PruneAndFlush() {\n \n /** Update chainActive and related internal data structures. */\n void static UpdateTip(CBlockIndex *pindexNew) {\n+    const CChainParams& chainParams = Params();\n     chainActive.SetTip(pindexNew);\n \n     // New best block\n@@ -1963,7 +1965,7 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     LogPrintf(\"%s: new best=%s  height=%d  log2_work=%.8g  tx=%lu  date=%s progress=%f  cache=%u\\n\", __func__,\n       chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(), log(chainActive.Tip()->nChainWork.getdouble())/log(2.0), (unsigned long)chainActive.Tip()->nChainTx,\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n-      Checkpoints::GuessVerificationProgress(chainActive.Tip()), (unsigned int)pcoinsTip->GetCacheSize());\n+      Checkpoints::GuessVerificationProgress(chainParams.Checkpoints(), chainActive.Tip()), (unsigned int)pcoinsTip->GetCacheSize());\n \n     cvBlockChange.notify_all();\n \n@@ -2247,6 +2249,7 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n bool ActivateBestChain(CValidationState &state, CBlock *pblock) {\n     CBlockIndex *pindexNewTip = NULL;\n     CBlockIndex *pindexMostWork = NULL;\n+    const CChainParams& chainParams = Params();\n     do {\n         boost::this_thread::interruption_point();\n \n@@ -2271,7 +2274,7 @@ bool ActivateBestChain(CValidationState &state, CBlock *pblock) {\n         if (!fInitialDownload) {\n             uint256 hashNewTip = pindexNewTip->GetBlockHash();\n             // Relay inventory, but don't relay old inventory during initial block download.\n-            int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n+            int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate(chainParams.Checkpoints());\n             // Don't relay blocks if pruning -- could cause a peer to try to download, resulting\n             // in a stalled download if the block file is pruned before the request.\n             if (nLocalServices & NODE_NETWORK) {\n@@ -2601,7 +2604,8 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n \n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n {\n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n+    const CChainParams& chainParams = Params();\n+    const Consensus::Params& consensusParams = chainParams.GetConsensus();\n     uint256 hash = block.GetHash();\n     if (hash == consensusParams.hashGenesisBlock)\n         return true;\n@@ -2611,7 +2615,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, Params().GetConsensus()))\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n         return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n                          REJECT_INVALID, \"bad-diffbits\");\n \n@@ -2621,24 +2625,24 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n                              REJECT_INVALID, \"time-too-old\");\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n-    if (!Checkpoints::CheckBlock(nHeight, hash))\n+    if (!Checkpoints::CheckBlock(chainParams.Checkpoints(), nHeight, hash))\n         return state.DoS(100, error(\"%s: rejected by checkpoint lock-in at %d\", __func__, nHeight),\n                          REJECT_CHECKPOINT, \"checkpoint mismatch\");\n \n     // Don't accept any forks from the main chain prior to last checkpoint\n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n+    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(chainParams.Checkpoints());\n     if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n         return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n \n     // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n-    if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, Params().RejectBlockOutdatedMajority()))\n+    if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityRejectBlockOutdated))\n     {\n         return state.Invalid(error(\"%s: rejected nVersion=1 block\", __func__),\n                              REJECT_OBSOLETE, \"bad-version\");\n     }\n \n     // Reject block.nVersion=2 blocks when 95% (75% on testnet) of the network has upgraded:\n-    if (block.nVersion < 3 && IsSuperMajority(3, pindexPrev, Params().RejectBlockOutdatedMajority()))\n+    if (block.nVersion < 3 && IsSuperMajority(3, pindexPrev, consensusParams.nMajorityRejectBlockOutdated))\n     {\n         return state.Invalid(error(\"%s : rejected nVersion=2 block\", __func__),\n                              REJECT_OBSOLETE, \"bad-version\");\n@@ -3025,6 +3029,7 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n \n bool static LoadBlockIndexDB()\n {\n+    const CChainParams& chainparams = Params();\n     if (!pblocktree->LoadBlockIndexGuts())\n         return false;\n \n@@ -3127,7 +3132,7 @@ bool static LoadBlockIndexDB()\n     LogPrintf(\"%s: hashBestChain=%s height=%d date=%s progress=%f\\n\", __func__,\n         chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(),\n         DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n-        Checkpoints::GuessVerificationProgress(chainActive.Tip()));\n+        Checkpoints::GuessVerificationProgress(chainparams.Checkpoints(), chainActive.Tip()));\n \n     return true;\n }"
      },
      {
        "sha": "8e29cdeb06a6e56c62a395544f79cbdba2965264",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11982d366df0301b8ceb6e9ec5bdc5a713be9ff0/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11982d366df0301b8ceb6e9ec5bdc5a713be9ff0/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=11982d366df0301b8ceb6e9ec5bdc5a713be9ff0",
        "patch": "@@ -89,7 +89,7 @@ QDateTime ClientModel::getLastBlockDate() const\n double ClientModel::getVerificationProgress() const\n {\n     LOCK(cs_main);\n-    return Checkpoints::GuessVerificationProgress(chainActive.Tip());\n+    return Checkpoints::GuessVerificationProgress(Params().Checkpoints(), chainActive.Tip());\n }\n \n void ClientModel::updateTimer()"
      },
      {
        "sha": "ed32ee7723483eb318eaac6770078dcdf100960d",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11982d366df0301b8ceb6e9ec5bdc5a713be9ff0/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11982d366df0301b8ceb6e9ec5bdc5a713be9ff0/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=11982d366df0301b8ceb6e9ec5bdc5a713be9ff0",
        "patch": "@@ -490,7 +490,7 @@ Value getblockchaininfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"headers\",               pindexBestHeader ? pindexBestHeader->nHeight : -1));\n     obj.push_back(Pair(\"bestblockhash\",         chainActive.Tip()->GetBlockHash().GetHex()));\n     obj.push_back(Pair(\"difficulty\",            (double)GetDifficulty()));\n-    obj.push_back(Pair(\"verificationprogress\",  Checkpoints::GuessVerificationProgress(chainActive.Tip())));\n+    obj.push_back(Pair(\"verificationprogress\",  Checkpoints::GuessVerificationProgress(Params().Checkpoints(), chainActive.Tip())));\n     obj.push_back(Pair(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex()));\n     return obj;\n }"
      },
      {
        "sha": "642ce13bcdbe123c89793d18d3899b35a0021ef8",
        "filename": "src/test/Checkpoints_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11982d366df0301b8ceb6e9ec5bdc5a713be9ff0/src/test/Checkpoints_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11982d366df0301b8ceb6e9ec5bdc5a713be9ff0/src/test/Checkpoints_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Checkpoints_tests.cpp?ref=11982d366df0301b8ceb6e9ec5bdc5a713be9ff0",
        "patch": "@@ -10,6 +10,7 @@\n \n #include \"uint256.h\"\n #include \"test/test_bitcoin.h\"\n+#include \"chainparams.h\"\n \n #include <boost/test/unit_test.hpp>\n \n@@ -19,21 +20,22 @@ BOOST_FIXTURE_TEST_SUITE(Checkpoints_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sanity)\n {\n+    const Checkpoints::CCheckpointData& checkpoints = Params(CBaseChainParams::MAIN).Checkpoints();\n     uint256 p11111 = uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\");\n     uint256 p134444 = uint256S(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\");\n-    BOOST_CHECK(Checkpoints::CheckBlock(11111, p11111));\n-    BOOST_CHECK(Checkpoints::CheckBlock(134444, p134444));\n+    BOOST_CHECK(Checkpoints::CheckBlock(checkpoints, 11111, p11111));\n+    BOOST_CHECK(Checkpoints::CheckBlock(checkpoints, 134444, p134444));\n \n     \n     // Wrong hashes at checkpoints should fail:\n-    BOOST_CHECK(!Checkpoints::CheckBlock(11111, p134444));\n-    BOOST_CHECK(!Checkpoints::CheckBlock(134444, p11111));\n+    BOOST_CHECK(!Checkpoints::CheckBlock(checkpoints, 11111, p134444));\n+    BOOST_CHECK(!Checkpoints::CheckBlock(checkpoints, 134444, p11111));\n \n     // ... but any hash not at a checkpoint should succeed:\n-    BOOST_CHECK(Checkpoints::CheckBlock(11111+1, p134444));\n-    BOOST_CHECK(Checkpoints::CheckBlock(134444+1, p11111));\n+    BOOST_CHECK(Checkpoints::CheckBlock(checkpoints, 11111+1, p134444));\n+    BOOST_CHECK(Checkpoints::CheckBlock(checkpoints, 134444+1, p11111));\n \n-    BOOST_CHECK(Checkpoints::GetTotalBlocksEstimate() >= 134444);\n+    BOOST_CHECK(Checkpoints::GetTotalBlocksEstimate(checkpoints) >= 134444);\n }    \n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "8674c9c534aba47e506f8a923bc3d574a18f8b6d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11982d366df0301b8ceb6e9ec5bdc5a713be9ff0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11982d366df0301b8ceb6e9ec5bdc5a713be9ff0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=11982d366df0301b8ceb6e9ec5bdc5a713be9ff0",
        "patch": "@@ -1059,6 +1059,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n {\n     int ret = 0;\n     int64_t nNow = GetTime();\n+    const CChainParams& chainParams = Params();\n \n     CBlockIndex* pindex = pindexStart;\n     {\n@@ -1070,12 +1071,12 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n             pindex = chainActive.Next(pindex);\n \n         ShowProgress(_(\"Rescanning...\"), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n-        double dProgressStart = Checkpoints::GuessVerificationProgress(pindex, false);\n-        double dProgressTip = Checkpoints::GuessVerificationProgress(chainActive.Tip(), false);\n+        double dProgressStart = Checkpoints::GuessVerificationProgress(chainParams.Checkpoints(), pindex, false);\n+        double dProgressTip = Checkpoints::GuessVerificationProgress(chainParams.Checkpoints(), chainActive.Tip(), false);\n         while (pindex)\n         {\n             if (pindex->nHeight % 100 == 0 && dProgressTip - dProgressStart > 0.0)\n-                ShowProgress(_(\"Rescanning...\"), std::max(1, std::min(99, (int)((Checkpoints::GuessVerificationProgress(pindex, false) - dProgressStart) / (dProgressTip - dProgressStart) * 100))));\n+                ShowProgress(_(\"Rescanning...\"), std::max(1, std::min(99, (int)((Checkpoints::GuessVerificationProgress(chainParams.Checkpoints(), pindex, false) - dProgressStart) / (dProgressTip - dProgressStart) * 100))));\n \n             CBlock block;\n             ReadBlockFromDisk(block, pindex);\n@@ -1087,7 +1088,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n             pindex = chainActive.Next(pindex);\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n-                LogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, Checkpoints::GuessVerificationProgress(pindex));\n+                LogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, Checkpoints::GuessVerificationProgress(chainParams.Checkpoints(), pindex));\n             }\n         }\n         ShowProgress(_(\"Rescanning...\"), 100); // hide progress dialog in GUI"
      }
    ]
  },
  {
    "sha": "a8cdaf5c962ff9018e2d8411f532eec7355f0623",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGNkYWY1Yzk2MmZmOTAxOGUyZDg0MTFmNTMyZWVjNzM1NWYwNjIz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-04-23T03:22:36Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-05-01T03:14:48Z"
      },
      "message": "checkpoints: move the checkpoints enable boolean into main\n\nThis pertains to app-state, so it doesn't make sense to handle inside the\ncheckpoint functions.",
      "tree": {
        "sha": "c98c3ebb907548099b601a76f0dbeb99fb3af084",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c98c3ebb907548099b601a76f0dbeb99fb3af084"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8cdaf5c962ff9018e2d8411f532eec7355f0623",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8cdaf5c962ff9018e2d8411f532eec7355f0623",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8cdaf5c962ff9018e2d8411f532eec7355f0623",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8cdaf5c962ff9018e2d8411f532eec7355f0623/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11982d366df0301b8ceb6e9ec5bdc5a713be9ff0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11982d366df0301b8ceb6e9ec5bdc5a713be9ff0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11982d366df0301b8ceb6e9ec5bdc5a713be9ff0"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 26,
      "deletions": 27
    },
    "files": [
      {
        "sha": "ddbf38efba34689072d20519dd082b0b4336b881",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 11,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8cdaf5c962ff9018e2d8411f532eec7355f0623/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8cdaf5c962ff9018e2d8411f532eec7355f0623/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=a8cdaf5c962ff9018e2d8411f532eec7355f0623",
        "patch": "@@ -23,13 +23,8 @@ namespace Checkpoints {\n      */\n     static const double SIGCHECK_VERIFICATION_FACTOR = 5.0;\n \n-    bool fEnabled = true;\n-\n     bool CheckBlock(const CCheckpointData& data, int nHeight, const uint256& hash)\n     {\n-        if (!fEnabled)\n-            return true;\n-\n         const MapCheckpoints& checkpoints = data.mapCheckpoints;\n \n         MapCheckpoints::const_iterator i = checkpoints.find(nHeight);\n@@ -69,19 +64,16 @@ namespace Checkpoints {\n \n     int GetTotalBlocksEstimate(const CCheckpointData& data)\n     {\n-        if (!fEnabled)\n-            return 0;\n-\n         const MapCheckpoints& checkpoints = data.mapCheckpoints;\n \n+        if (checkpoints.empty())\n+            return 0;\n+\n         return checkpoints.rbegin()->first;\n     }\n \n     CBlockIndex* GetLastCheckpoint(const CCheckpointData& data)\n     {\n-        if (!fEnabled)\n-            return NULL;\n-\n         const MapCheckpoints& checkpoints = data.mapCheckpoints;\n \n         BOOST_REVERSE_FOREACH(const MapCheckpoints::value_type& i, checkpoints)"
      },
      {
        "sha": "07ed7032a80d11dd07dd47dc236c8eb966458314",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8cdaf5c962ff9018e2d8411f532eec7355f0623/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8cdaf5c962ff9018e2d8411f532eec7355f0623/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=a8cdaf5c962ff9018e2d8411f532eec7355f0623",
        "patch": "@@ -37,8 +37,6 @@ CBlockIndex* GetLastCheckpoint(const CCheckpointData& data);\n \n double GuessVerificationProgress(const CCheckpointData& data, CBlockIndex* pindex, bool fSigchecks = true);\n \n-extern bool fEnabled;\n-\n } //namespace Checkpoints\n \n #endif // BITCOIN_CHECKPOINTS_H"
      },
      {
        "sha": "974b807f4f2a7e88618bfef1cb82c1632a1ccaef",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8cdaf5c962ff9018e2d8411f532eec7355f0623/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8cdaf5c962ff9018e2d8411f532eec7355f0623/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a8cdaf5c962ff9018e2d8411f532eec7355f0623",
        "patch": "@@ -741,7 +741,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     // Checkmempool and checkblockindex default to true in regtest mode\n     mempool.setSanityCheck(GetBoolArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks()));\n     fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n-    Checkpoints::fEnabled = GetBoolArg(\"-checkpoints\", true);\n+    fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", true);\n \n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n     nScriptCheckThreads = GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);"
      },
      {
        "sha": "df27a7c7af6816bdc53d5610d40c558979f343a0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 11,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8cdaf5c962ff9018e2d8411f532eec7355f0623/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8cdaf5c962ff9018e2d8411f532eec7355f0623/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a8cdaf5c962ff9018e2d8411f532eec7355f0623",
        "patch": "@@ -56,6 +56,7 @@ bool fHavePruned = false;\n bool fPruneMode = false;\n bool fIsBareMultisigStd = true;\n bool fCheckBlockIndex = false;\n+bool fCheckpointsEnabled = true;\n unsigned int nCoinCacheSize = 5000;\n uint64_t nPruneTarget = 0;\n \n@@ -1206,7 +1207,9 @@ bool IsInitialBlockDownload()\n {\n     const CChainParams& chainParams = Params();\n     LOCK(cs_main);\n-    if (fImporting || fReindex || chainActive.Height() < Checkpoints::GetTotalBlocksEstimate(chainParams.Checkpoints()))\n+    if (fImporting || fReindex)\n+        return true;\n+    if (fCheckpointsEnabled && chainActive.Height() < Checkpoints::GetTotalBlocksEstimate(chainParams.Checkpoints()))\n         return true;\n     static bool lockIBDState = false;\n     if (lockIBDState)\n@@ -1710,7 +1713,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         return true;\n     }\n \n-    bool fScriptChecks = pindex->nHeight >= Checkpoints::GetTotalBlocksEstimate(chainparams.Checkpoints());\n+    bool fScriptChecks = (!fCheckpointsEnabled || pindex->nHeight >= Checkpoints::GetTotalBlocksEstimate(chainparams.Checkpoints()));\n \n     // Do not allow blocks that contain transactions which 'overwrite' older transactions,\n     // unless those are already completely spent.\n@@ -2274,7 +2277,9 @@ bool ActivateBestChain(CValidationState &state, CBlock *pblock) {\n         if (!fInitialDownload) {\n             uint256 hashNewTip = pindexNewTip->GetBlockHash();\n             // Relay inventory, but don't relay old inventory during initial block download.\n-            int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate(chainParams.Checkpoints());\n+            int nBlockEstimate = 0;\n+            if (fCheckpointsEnabled)\n+                nBlockEstimate = Checkpoints::GetTotalBlocksEstimate(chainParams.Checkpoints());\n             // Don't relay blocks if pruning -- could cause a peer to try to download, resulting\n             // in a stalled download if the block file is pruned before the request.\n             if (nLocalServices & NODE_NETWORK) {\n@@ -2624,15 +2629,18 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n         return state.Invalid(error(\"%s: block's timestamp is too early\", __func__),\n                              REJECT_INVALID, \"time-too-old\");\n \n-    // Check that the block chain matches the known block chain up to a checkpoint\n-    if (!Checkpoints::CheckBlock(chainParams.Checkpoints(), nHeight, hash))\n-        return state.DoS(100, error(\"%s: rejected by checkpoint lock-in at %d\", __func__, nHeight),\n-                         REJECT_CHECKPOINT, \"checkpoint mismatch\");\n+    if(fCheckpointsEnabled)\n+    {\n+        // Check that the block chain matches the known block chain up to a checkpoint\n+        if (!Checkpoints::CheckBlock(chainParams.Checkpoints(), nHeight, hash))\n+            return state.DoS(100, error(\"%s: rejected by checkpoint lock-in at %d\", __func__, nHeight),\n+                             REJECT_CHECKPOINT, \"checkpoint mismatch\");\n \n-    // Don't accept any forks from the main chain prior to last checkpoint\n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(chainParams.Checkpoints());\n-    if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n-        return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n+        // Don't accept any forks from the main chain prior to last checkpoint\n+        CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(chainParams.Checkpoints());\n+        if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n+            return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n+    }\n \n     // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n     if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityRejectBlockOutdated))"
      },
      {
        "sha": "89c2ff2e41d7479f2cf8380992abce5a59bea204",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8cdaf5c962ff9018e2d8411f532eec7355f0623/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8cdaf5c962ff9018e2d8411f532eec7355f0623/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a8cdaf5c962ff9018e2d8411f532eec7355f0623",
        "patch": "@@ -118,6 +118,7 @@ extern int nScriptCheckThreads;\n extern bool fTxIndex;\n extern bool fIsBareMultisigStd;\n extern bool fCheckBlockIndex;\n+extern bool fCheckpointsEnabled;\n extern unsigned int nCoinCacheSize;\n extern CFeeRate minRelayTxFee;\n "
      },
      {
        "sha": "d7ea91607c0030d368c37c6fd996728c6d5d9b77",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8cdaf5c962ff9018e2d8411f532eec7355f0623/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8cdaf5c962ff9018e2d8411f532eec7355f0623/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=a8cdaf5c962ff9018e2d8411f532eec7355f0623",
        "patch": "@@ -59,7 +59,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     uint256 hash;\n \n     LOCK(cs_main);\n-    Checkpoints::fEnabled = false;\n+    fCheckpointsEnabled = false;\n \n     // Simple block creation, nothing special yet:\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n@@ -262,7 +262,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_FOREACH(CTransaction *tx, txFirst)\n         delete tx;\n \n-    Checkpoints::fEnabled = true;\n+    fCheckpointsEnabled = true;\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]