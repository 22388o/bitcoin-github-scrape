[
  {
    "sha": "f5162458cd3e757ee6bbc7e963b61d365ccc536a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTE2MjQ1OGNkM2U3NTdlZTZiYmM3ZTk2M2I2MWQzNjVjY2M1MzZh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-03-22T18:14:32Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-03-29T19:06:59Z"
      },
      "message": "[rpc] remove resendwallettransactions RPC\n\nThis RPC was added for testing wallet rebroadcasts. Since we now have a\nreal test for wallet rebroadcasts, it's no longer needed.\n\nThe call in wallet_basic.py can be removed because\nwallet_resendwallettransactions.py tests wallet rebroadcast.",
      "tree": {
        "sha": "e6936587bb5afc42e443d36d007822468650d0cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6936587bb5afc42e443d36d007822468650d0cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5162458cd3e757ee6bbc7e963b61d365ccc536a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5162458cd3e757ee6bbc7e963b61d365ccc536a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5162458cd3e757ee6bbc7e963b61d365ccc536a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5162458cd3e757ee6bbc7e963b61d365ccc536a/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0baf4b1f96635cdf5f26b36753321fe3ea40d4a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0baf4b1f96635cdf5f26b36753321fe3ea40d4a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0baf4b1f96635cdf5f26b36753321fe3ea40d4a8"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 1,
      "deletions": 61
    },
    "files": [
      {
        "sha": "2298f1d8de6c0ccb9119a1c10e36f9ab13e773bf",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 45,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5162458cd3e757ee6bbc7e963b61d365ccc536a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5162458cd3e757ee6bbc7e963b61d365ccc536a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f5162458cd3e757ee6bbc7e963b61d365ccc536a",
        "patch": "@@ -2668,50 +2668,6 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-static UniValue resendwallettransactions(const JSONRPCRequest& request)\n-{\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    CWallet* const pwallet = wallet.get();\n-\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n-        return NullUniValue;\n-    }\n-\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n-            RPCHelpMan{\"resendwallettransactions\",\n-                \"Immediately re-broadcast unconfirmed wallet transactions to all peers.\\n\"\n-                \"Intended only for testing; the wallet code periodically re-broadcasts\\n\"\n-                \"automatically.\\n\",\n-                {},\n-                RPCResult{\n-            \"Returns an RPC error if -walletbroadcast is set to false.\\n\"\n-            \"Returns array of transaction ids that were re-broadcast.\\n\"\n-                },\n-                 RPCExamples{\"\"},\n-             }.ToString()\n-            );\n-\n-    if (!pwallet->chain().p2pEnabled()) {\n-        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n-    }\n-\n-    auto locked_chain = pwallet->chain().lock();\n-    LOCK(pwallet->cs_wallet);\n-\n-    if (!pwallet->GetBroadcastTransactions()) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\");\n-    }\n-\n-    std::vector<uint256> txids = pwallet->ResendWalletTransactionsBefore(*locked_chain, GetTime());\n-    UniValue result(UniValue::VARR);\n-    for (const uint256& txid : txids)\n-    {\n-        result.push_back(txid.ToString());\n-    }\n-    return result;\n-}\n-\n static UniValue listunspent(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n@@ -4085,7 +4041,6 @@ UniValue importmulti(const JSONRPCRequest& request);\n static const CRPCCommand commands[] =\n { //  category              name                                actor (function)                argNames\n     //  --------------------- ------------------------          -----------------------         ----------\n-    { \"hidden\",             \"resendwallettransactions\",         &resendwallettransactions,      {} },\n     { \"rawtransactions\",    \"fundrawtransaction\",               &fundrawtransaction,            {\"hexstring\",\"options\",\"iswitness\"} },\n     { \"wallet\",             \"abandontransaction\",               &abandontransaction,            {\"txid\"} },\n     { \"wallet\",             \"abortrescan\",                      &abortrescan,                   {} },"
      },
      {
        "sha": "c89f42fc8a07dfff17285454e313814fde7f6375",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 16,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5162458cd3e757ee6bbc7e963b61d365ccc536a/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5162458cd3e757ee6bbc7e963b61d365ccc536a/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=f5162458cd3e757ee6bbc7e963b61d365ccc536a",
        "patch": "@@ -14,7 +14,6 @@\n     assert_raises_rpc_error,\n     connect_nodes_bi,\n     sync_blocks,\n-    sync_mempools,\n     wait_until,\n )\n \n@@ -216,23 +215,9 @@ def run_test(self):\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n \n-        # Test ResendWalletTransactions:\n-        # Create a couple of transactions, then start up a fourth\n-        # node (nodes[3]) and ask nodes[0] to rebroadcast.\n-        # EXPECT: nodes[3] should have those transactions in its mempool.\n-        txid1 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n-        txid2 = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n-        sync_mempools(self.nodes[0:2])\n-\n         self.start_node(3)\n         connect_nodes_bi(self.nodes, 0, 3)\n-        sync_blocks(self.nodes)\n-\n-        relayed = self.nodes[0].resendwallettransactions()\n-        assert_equal(set(relayed), {txid1, txid2})\n-        sync_mempools(self.nodes)\n-\n-        assert txid1 in self.nodes[3].getrawmempool()\n+        self.sync_all()\n \n         # check if we can list zero value tx as available coins\n         # 1. create raw_tx"
      }
    ]
  },
  {
    "sha": "ea1a2d8794ffb6b814e7120fb8ba0cc4aa7ebf3d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTFhMmQ4Nzk0ZmZiNmI4MTRlNzEyMGZiOGJhMGNjNGFhN2ViZjNk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-03-22T18:37:30Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-01T15:07:31Z"
      },
      "message": "[wallet] Remove ResendWalletTransactionsBefore\n\nThis is only called from ResendWalletTransactions(), so bring it inline.",
      "tree": {
        "sha": "8b040541dc7d45a130ce42ace0e84c79405279f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b040541dc7d45a130ce42ace0e84c79405279f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea1a2d8794ffb6b814e7120fb8ba0cc4aa7ebf3d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea1a2d8794ffb6b814e7120fb8ba0cc4aa7ebf3d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea1a2d8794ffb6b814e7120fb8ba0cc4aa7ebf3d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea1a2d8794ffb6b814e7120fb8ba0cc4aa7ebf3d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5162458cd3e757ee6bbc7e963b61d365ccc536a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5162458cd3e757ee6bbc7e963b61d365ccc536a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5162458cd3e757ee6bbc7e963b61d365ccc536a"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 21,
      "deletions": 39
    },
    "files": [
      {
        "sha": "e6a9d2c10800df5544bda99f0a3685fcc5917fab",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 37,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea1a2d8794ffb6b814e7120fb8ba0cc4aa7ebf3d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea1a2d8794ffb6b814e7120fb8ba0cc4aa7ebf3d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ea1a2d8794ffb6b814e7120fb8ba0cc4aa7ebf3d",
        "patch": "@@ -2112,53 +2112,37 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-std::vector<uint256> CWallet::ResendWalletTransactionsBefore(interfaces::Chain::Lock& locked_chain, int64_t nTime)\n-{\n-    std::vector<uint256> result;\n-\n-    LOCK(cs_wallet);\n-\n-    // Sort them in chronological order\n-    std::multimap<unsigned int, CWalletTx*> mapSorted;\n-    for (std::pair<const uint256, CWalletTx>& item : mapWallet)\n-    {\n-        CWalletTx& wtx = item.second;\n-        // Don't rebroadcast if newer than nTime:\n-        if (wtx.nTimeReceived > nTime)\n-            continue;\n-        mapSorted.insert(std::make_pair(wtx.nTimeReceived, &wtx));\n-    }\n-    for (const std::pair<const unsigned int, CWalletTx*>& item : mapSorted)\n-    {\n-        CWalletTx& wtx = *item.second;\n-        if (wtx.RelayWalletTransaction(locked_chain)) {\n-            result.push_back(wtx.GetHash());\n-        }\n-    }\n-    return result;\n-}\n-\n void CWallet::ResendWalletTransactions(interfaces::Chain::Lock& locked_chain, int64_t nBestBlockTime)\n {\n     // Do this infrequently and randomly to avoid giving away\n     // that these are our transactions.\n-    if (GetTime() < nNextResend || !fBroadcastTransactions)\n-        return;\n+    if (GetTime() < nNextResend || !fBroadcastTransactions) return;\n     bool fFirst = (nNextResend == 0);\n     nNextResend = GetTime() + GetRand(30 * 60);\n-    if (fFirst)\n-        return;\n+    if (fFirst) return;\n \n     // Only do it if there's been a new block since last time\n-    if (nBestBlockTime < nLastResend)\n-        return;\n+    if (nBestBlockTime < nLastResend) return;\n     nLastResend = GetTime();\n \n-    // Rebroadcast unconfirmed txes older than 5 minutes before the last\n-    // block was found:\n-    std::vector<uint256> relayed = ResendWalletTransactionsBefore(locked_chain, nBestBlockTime-5*60);\n-    if (!relayed.empty())\n-        WalletLogPrintf(\"%s: rebroadcast %u unconfirmed transactions\\n\", __func__, relayed.size());\n+    int relayed_tx_count = 0;\n+\n+    { // cs_wallet scope\n+        LOCK(cs_wallet);\n+\n+        // Relay transactions\n+        for (std::pair<const uint256, CWalletTx>& item : mapWallet) {\n+            CWalletTx& wtx = item.second;\n+            // only rebroadcast unconfirmed txes older than 5 minutes before the\n+            // last block was found\n+            if (wtx.nTimeReceived > nBestBlockTime - 5 * 60) continue;\n+            relayed_tx_count += wtx.RelayWalletTransaction(locked_chain) ? 1 : 0;\n+        }\n+    } // cs_wallet\n+\n+    if (relayed_tx_count > 0) {\n+        WalletLogPrintf(\"%s: rebroadcast %u unconfirmed transactions\\n\", __func__, relayed_tx_count);\n+    }\n }\n \n /** @} */ // end of mapWallet"
      },
      {
        "sha": "e000c5122d26ae98f4e93fb4c04bce21cd9bab77",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea1a2d8794ffb6b814e7120fb8ba0cc4aa7ebf3d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea1a2d8794ffb6b814e7120fb8ba0cc4aa7ebf3d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ea1a2d8794ffb6b814e7120fb8ba0cc4aa7ebf3d",
        "patch": "@@ -947,8 +947,6 @@ class CWallet final : public CCryptoKeyStore, private interfaces::Chain::Notific\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(interfaces::Chain::Lock& locked_chain, int64_t nBestBlockTime) override;\n-    // ResendWalletTransactionsBefore may only be called if fBroadcastTransactions!\n-    std::vector<uint256> ResendWalletTransactionsBefore(interfaces::Chain::Lock& locked_chain, int64_t nTime);\n     CAmount GetBalance(const isminefilter& filter=ISMINE_SPENDABLE, const int min_depth=0) const;\n     CAmount GetUnconfirmedBalance() const;\n     CAmount GetImmatureBalance() const;"
      }
    ]
  }
]