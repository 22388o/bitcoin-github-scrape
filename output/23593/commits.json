[
  {
    "sha": "85b3656a328eb77546deb8533d10e411a0b1872d",
    "node_id": "C_kwDOABII59oAKDg1YjM2NTZhMzI4ZWI3NzU0NmRlYjg1MzNkMTBlNDExYTBiMTg3MmQ",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-24T12:16:53Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-25T13:18:57Z"
      },
      "message": "build: remove x-prefix comparisons\n\nVery old shells suffered from bugs which meant that prefixing variables\nwith an \"x\" to ensure that the lefthand side of a comparison always\nstarted with an alphanumeric character was needed. Modern shells don't\nsuffer from this issue (i.e Bash was fixed in 1996).\n\nIn any case, we've already got unprefixed checks used in our codebase,\ni.e https://github.com/bitcoin/bitcoin/blob/master/configure.ac#L292,\nand have dependencies (in depends) that also use unprefixed comparisons.\n\nI think it's time that we can consolidate on not using the x-prefix\nworkaround. At best it's mostly just confusing.\n\nMore info:\nhttps://github.com/koalaman/shellcheck/wiki/SC2268\nhttps://www.vidarholen.net/contents/blog/?p=1035",
      "tree": {
        "sha": "e01a66b3b81f0f842faf361432323e1ad2ede569",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e01a66b3b81f0f842faf361432323e1ad2ede569"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85b3656a328eb77546deb8533d10e411a0b1872d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmGfjUsACgkQLuufXMCV\nJsHtow/9Gl4aITczZogShQFRMErKg5K++1UBvjKPPUEnrphYQ8yWD389tTWTN4Ge\nqp1lu1aHjnl7BeHV5dihrPieNnxhJj9k1Zpx4xOepgzUaGs4bE+ifr2Q1niGU6vs\nYMGmphHMsD1/sXgW5CeXiUNWC9TQpOHfJKQgNdYGS9ZlfPqbnPtt0VRoARsXSrRt\n2bqCVbD5aXyR8vYqkpRIbpFkG6xxp4+GLGNUFZOoxK5BYkZFiwmwmBBWLa1ywTQ8\ncxtxFyuOkhTg0Zpm5aPCLbJg1Bo7hcGAbI86HqzyZU3hH/wqq7TcdgicZdn4qPk3\nKT4z5iMPclBCMZTUKRyxUG8xYbfDMvigvF+1YIcYTxixVU0aZILcHjKYJUzTC/Rt\n6xputqMDrPWm56JPlpHZwEJ1ieGuiPD5HHTG+ZMciBR3vuZoNTMlnWzyi3J1A4eQ\nCj8T3IoIndcRqzt/SAqBFhtwM2Bq9DHLf3FMLEiB5Y+Z7bdbuIfZ8DP7Zk3WOrL6\nUJNwv3VaJiou4Kjq1RVun1GSzmVHfFtYAs/eGQAggOUbGXEq5eunjP7QUIDZZ6Ed\nOuyuSJTca39tTyNVopzve0M/XxdzbWLKmPkV6d9OZw3HwGxEMiWu6n3SlfURbICS\nmqwtu6GLslJw5tSNLYc6Oz02Q1tao29zW+bBSuVImZo7qFti4e8=\n=Iw7Y\n-----END PGP SIGNATURE-----",
        "payload": "tree e01a66b3b81f0f842faf361432323e1ad2ede569\nparent 681b25e3cd7d084f642693152322ed9a40f33ba0\nauthor fanquake <fanquake@gmail.com> 1637756213 +0800\ncommitter fanquake <fanquake@gmail.com> 1637846337 +0800\n\nbuild: remove x-prefix comparisons\n\nVery old shells suffered from bugs which meant that prefixing variables\nwith an \"x\" to ensure that the lefthand side of a comparison always\nstarted with an alphanumeric character was needed. Modern shells don't\nsuffer from this issue (i.e Bash was fixed in 1996).\n\nIn any case, we've already got unprefixed checks used in our codebase,\ni.e https://github.com/bitcoin/bitcoin/blob/master/configure.ac#L292,\nand have dependencies (in depends) that also use unprefixed comparisons.\n\nI think it's time that we can consolidate on not using the x-prefix\nworkaround. At best it's mostly just confusing.\n\nMore info:\nhttps://github.com/koalaman/shellcheck/wiki/SC2268\nhttps://www.vidarholen.net/contents/blog/?p=1035\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85b3656a328eb77546deb8533d10e411a0b1872d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85b3656a328eb77546deb8533d10e411a0b1872d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85b3656a328eb77546deb8533d10e411a0b1872d/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "681b25e3cd7d084f642693152322ed9a40f33ba0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/681b25e3cd7d084f642693152322ed9a40f33ba0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/681b25e3cd7d084f642693152322ed9a40f33ba0"
      }
    ],
    "stats": {
      "total": 408,
      "additions": 204,
      "deletions": 204
    },
    "files": [
      {
        "sha": "d2f01907c3150f7cf4add10084d154b0e4b75ecb",
        "filename": "build-aux/m4/bitcoin_find_bdb48.m4",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85b3656a328eb77546deb8533d10e411a0b1872d/build-aux/m4/bitcoin_find_bdb48.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85b3656a328eb77546deb8533d10e411a0b1872d/build-aux/m4/bitcoin_find_bdb48.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_find_bdb48.m4?ref=85b3656a328eb77546deb8533d10e411a0b1872d",
        "patch": "@@ -6,9 +6,9 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n   AC_ARG_VAR([BDB_CFLAGS], [C compiler flags for BerkeleyDB, bypasses autodetection])\n   AC_ARG_VAR([BDB_LIBS], [Linker flags for BerkeleyDB, bypasses autodetection])\n \n-  if test \"x$use_bdb\" = \"xno\"; then\n+  if test \"$use_bdb\" = \"no\"; then\n     use_bdb=no\n-  elif test \"x$BDB_CFLAGS\" = \"x\"; then\n+  elif test \"$BDB_CFLAGS\" = \"\"; then\n     AC_MSG_CHECKING([for Berkeley DB C++ headers])\n     BDB_CPPFLAGS=\n     bdbpath=X\n@@ -28,7 +28,7 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n           #error \"failed to find bdb 4.8+\"\n         #endif\n       ]])],[\n-        if test \"x$bdbpath\" = \"xX\"; then\n+        if test \"$bdbpath\" = \"X\"; then\n           bdbpath=\"${searchpath}\"\n         fi\n       ],[\n@@ -45,13 +45,13 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n         break\n       ],[])\n     done\n-    if test \"x$bdbpath\" = \"xX\"; then\n+    if test \"$bdbpath\" = \"X\"; then\n       use_bdb=no\n       AC_MSG_RESULT([no])\n       AC_MSG_WARN([libdb_cxx headers missing])\n       AC_MSG_WARN(AC_PACKAGE_NAME[ requires this library for BDB (legacy) wallet support])\n       AC_MSG_WARN([Passing --without-bdb will suppress this warning])\n-    elif test \"x$bdb48path\" = \"xX\"; then\n+    elif test \"$bdb48path\" = \"X\"; then\n       BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdbpath}],db_cxx)\n       AC_ARG_WITH([incompatible-bdb],[AS_HELP_STRING([--with-incompatible-bdb], [allow using a bdb version other than 4.8])],[\n         AC_MSG_WARN([Found Berkeley DB other than 4.8])\n@@ -74,23 +74,23 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n   fi\n   AC_SUBST(BDB_CPPFLAGS)\n \n-  if test \"x$use_bdb\" = \"xno\"; then\n+  if test \"$use_bdb\" = \"no\"; then\n     use_bdb=no\n-  elif test \"x$BDB_LIBS\" = \"x\"; then\n+  elif test \"$BDB_LIBS\" = \"\"; then\n     # TODO: Ideally this could find the library version and make sure it matches the headers being used\n     for searchlib in db_cxx-4.8 db_cxx db4_cxx; do\n       AC_CHECK_LIB([$searchlib],[main],[\n         BDB_LIBS=\"-l${searchlib}\"\n         break\n       ])\n     done\n-    if test \"x$BDB_LIBS\" = \"x\"; then\n+    if test \"$BDB_LIBS\" = \"\"; then\n         AC_MSG_WARN([libdb_cxx headers missing])\n         AC_MSG_WARN(AC_PACKAGE_NAME[ requires this library for BDB (legacy) wallet support])\n         AC_MSG_WARN([Passing --without-bdb will suppress this warning])\n     fi\n   fi\n-  if test \"x$use_bdb\" != \"xno\"; then\n+  if test \"$use_bdb\" != \"no\"; then\n     AC_SUBST(BDB_LIBS)\n     AC_DEFINE([USE_BDB], [1], [Define if BDB support should be compiled in])\n     use_bdb=yes"
      },
      {
        "sha": "8deca1c0cec5f9c02119fe01a6a01775a71bbed7",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 28,
        "deletions": 28,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85b3656a328eb77546deb8533d10e411a0b1872d/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85b3656a328eb77546deb8533d10e411a0b1872d/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=85b3656a328eb77546deb8533d10e411a0b1872d",
        "patch": "@@ -5,8 +5,8 @@ dnl file COPYING or http://www.opensource.org/licenses/mit-license.php.\n dnl Helper for cases where a qt dependency is not met.\n dnl Output: If qt version is auto, set bitcoin_enable_qt to false. Else, exit.\n AC_DEFUN([BITCOIN_QT_FAIL],[\n-  if test \"x$bitcoin_qt_want_version\" = xauto && test \"x$bitcoin_qt_force\" != xyes; then\n-    if test \"x$bitcoin_enable_qt\" != xno; then\n+  if test \"$bitcoin_qt_want_version\" = \"auto\" && test \"$bitcoin_qt_force\" != \"yes\"; then\n+    if test \"$bitcoin_enable_qt\" != \"no\"; then\n       AC_MSG_WARN([$1; bitcoin-qt frontend will not be built])\n     fi\n     bitcoin_enable_qt=no\n@@ -17,7 +17,7 @@ AC_DEFUN([BITCOIN_QT_FAIL],[\n ])\n \n AC_DEFUN([BITCOIN_QT_CHECK],[\n-  if test \"x$bitcoin_enable_qt\" != xno && test \"x$bitcoin_qt_want_version\" != xno; then\n+  if test \"$bitcoin_enable_qt\" != \"no\" && test \"$bitcoin_qt_want_version\" != \"no\"; then\n     true\n     $1\n   else\n@@ -35,12 +35,12 @@ dnl Inputs: $4: If \"yes\", don't fail if $2 is not found.\n dnl Output: $1 is set to the path of $2 if found. $2 are searched in order.\n AC_DEFUN([BITCOIN_QT_PATH_PROGS],[\n   BITCOIN_QT_CHECK([\n-    if test \"x$3\" != x; then\n+    if test \"$3\" != \"\"; then\n       AC_PATH_PROGS([$1], [$2], [], [$3])\n     else\n       AC_PATH_PROGS([$1], [$2])\n     fi\n-    if test \"x$$1\" = x && test \"x$4\" != xyes; then\n+    if test \"$$1\" = \"\" && test \"$4\" != \"yes\"; then\n       BITCOIN_QT_FAIL([$1 not found])\n     fi\n   ])\n@@ -57,14 +57,14 @@ AC_DEFUN([BITCOIN_QT_INIT],[\n     [build bitcoin-qt GUI (default=auto)])],\n     [\n      bitcoin_qt_want_version=$withval\n-     if test \"x$bitcoin_qt_want_version\" = xyes; then\n+     if test \"$bitcoin_qt_want_version\" = \"yes\"; then\n        bitcoin_qt_force=yes\n        bitcoin_qt_want_version=auto\n      fi\n     ],\n     [bitcoin_qt_want_version=auto])\n \n-  AS_IF([test \"x$with_gui\" = xqt5_debug],\n+  AS_IF([test \"$with_gui\" = \"qt5_debug\"],\n         [AS_CASE([$host],\n                  [*darwin*], [qt_lib_suffix=_debug],\n                  [*mingw*], [qt_lib_suffix=d],\n@@ -86,7 +86,7 @@ AC_DEFUN([BITCOIN_QT_INIT],[\n   dnl Android doesn't support D-Bus and certainly doesn't use it for notifications\n   case $host in\n     *android*)\n-      if test \"x$use_dbus\" != xyes; then\n+      if test \"$use_dbus\" != \"yes\"; then\n         use_dbus=no\n       fi\n     ;;\n@@ -118,10 +118,10 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n   CXXFLAGS=\"$PIC_FLAGS $CXXFLAGS\"\n   _BITCOIN_QT_IS_STATIC\n-  if test \"x$bitcoin_cv_static_qt\" = xyes; then\n+  if test \"$bitcoin_cv_static_qt\" = \"yes\"; then\n     _BITCOIN_QT_CHECK_STATIC_LIBS\n \n-    if test \"x$qt_plugin_path\" != x; then\n+    if test \"$qt_plugin_path\" != \"\"; then\n       if test -d \"$qt_plugin_path/platforms\"; then\n         QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms\"\n       fi\n@@ -137,31 +137,31 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n     fi\n \n     AC_DEFINE([QT_STATICPLUGIN], [1], [Define this symbol if qt plugins are static])\n-    if test \"x$TARGET_OS\" != xandroid; then\n+    if test \"$TARGET_OS\" != \"android\"; then\n       _BITCOIN_QT_CHECK_STATIC_PLUGIN([QMinimalIntegrationPlugin], [-lqminimal])\n       AC_DEFINE([QT_QPA_PLATFORM_MINIMAL], [1], [Define this symbol if the minimal qt platform exists])\n     fi\n-    if test \"x$TARGET_OS\" = xwindows; then\n+    if test \"$TARGET_OS\" = \"windows\"; then\n       dnl Linking against wtsapi32 is required. See #17749 and\n       dnl https://bugreports.qt.io/browse/QTBUG-27097.\n       AX_CHECK_LINK_FLAG([-lwtsapi32], [QT_LIBS=\"$QT_LIBS -lwtsapi32\"], [AC_MSG_ERROR([could not link against -lwtsapi32])])\n       _BITCOIN_QT_CHECK_STATIC_PLUGIN([QWindowsIntegrationPlugin], [-lqwindows])\n       _BITCOIN_QT_CHECK_STATIC_PLUGIN([QWindowsVistaStylePlugin], [-lqwindowsvistastyle])\n       AC_DEFINE([QT_QPA_PLATFORM_WINDOWS], [1], [Define this symbol if the qt platform is windows])\n-    elif test \"x$TARGET_OS\" = xlinux; then\n+    elif test \"$TARGET_OS\" = \"linux\"; then\n       dnl workaround for https://bugreports.qt.io/browse/QTBUG-74874\n       AX_CHECK_LINK_FLAG([-lxcb-shm], [QT_LIBS=\"$QT_LIBS -lxcb-shm\"], [AC_MSG_ERROR([could not link against -lxcb-shm])])\n       _BITCOIN_QT_CHECK_STATIC_PLUGIN([QXcbIntegrationPlugin], [-lqxcb])\n       AC_DEFINE([QT_QPA_PLATFORM_XCB], [1], [Define this symbol if the qt platform is xcb])\n-    elif test \"x$TARGET_OS\" = xdarwin; then\n+    elif test \"$TARGET_OS\" = \"darwin\"; then\n       AX_CHECK_LINK_FLAG([-framework Carbon], [QT_LIBS=\"$QT_LIBS -framework Carbon\"], [AC_MSG_ERROR(could not link against Carbon framework)])\n       AX_CHECK_LINK_FLAG([-framework IOSurface], [QT_LIBS=\"$QT_LIBS -framework IOSurface\"], [AC_MSG_ERROR(could not link against IOSurface framework)])\n       AX_CHECK_LINK_FLAG([-framework Metal], [QT_LIBS=\"$QT_LIBS -framework Metal\"], [AC_MSG_ERROR(could not link against Metal framework)])\n       AX_CHECK_LINK_FLAG([-framework QuartzCore], [QT_LIBS=\"$QT_LIBS -framework QuartzCore\"], [AC_MSG_ERROR(could not link against QuartzCore framework)])\n       _BITCOIN_QT_CHECK_STATIC_PLUGIN([QCocoaIntegrationPlugin], [-lqcocoa])\n       _BITCOIN_QT_CHECK_STATIC_PLUGIN([QMacStylePlugin], [-lqmacstyle])\n       AC_DEFINE([QT_QPA_PLATFORM_COCOA], [1], [Define this symbol if the qt platform is cocoa])\n-    elif test \"x$TARGET_OS\" = xandroid; then\n+    elif test \"$TARGET_OS\" = \"android\"; then\n       QT_LIBS=\"-Wl,--export-dynamic,--undefined=JNI_OnLoad -lqtforandroid -ljnigraphics -landroid -lqtfreetype $QT_LIBS\"\n       AC_DEFINE([QT_QPA_PLATFORM_ANDROID], [1], [Define this symbol if the qt platform is android])\n     fi\n@@ -170,11 +170,11 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   CXXFLAGS=$TEMP_CXXFLAGS\n   ])\n \n-  if test \"x$qt_bin_path\" = x; then\n+  if test \"$qt_bin_path\" = \"\"; then\n     qt_bin_path=\"`$PKG_CONFIG --variable=host_bins ${qt_lib_prefix}Core 2>/dev/null`\"\n   fi\n \n-  if test \"x$use_hardening\" != xno; then\n+  if test \"$use_hardening\" != \"no\"; then\n     BITCOIN_QT_CHECK([\n     AC_MSG_CHECKING([whether -fPIE can be used with this Qt config])\n     TEMP_CPPFLAGS=$CPPFLAGS\n@@ -249,26 +249,26 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   BITCOIN_QT_CHECK([\n     bitcoin_enable_qt=yes\n     bitcoin_enable_qt_test=yes\n-    if test \"x$have_qt_test\" = xno; then\n+    if test \"$have_qt_test\" = \"no\"; then\n       bitcoin_enable_qt_test=no\n     fi\n     bitcoin_enable_qt_dbus=no\n-    if test \"x$use_dbus\" != xno && test \"x$have_qt_dbus\" = xyes; then\n+    if test \"$use_dbus\" != \"no\" && test \"$have_qt_dbus\" = \"yes\"; then\n       bitcoin_enable_qt_dbus=yes\n     fi\n-    if test \"x$use_dbus\" = xyes && test \"x$have_qt_dbus\" = xno; then\n+    if test \"$use_dbus\" = \"yes\" && test \"$have_qt_dbus\" = \"no\"; then\n       AC_MSG_ERROR([libQtDBus not found. Install libQtDBus or remove --with-qtdbus.])\n     fi\n-    if test \"x$LUPDATE\" = x; then\n+    if test \"$LUPDATE\" = \"\"; then\n       AC_MSG_WARN([lupdate tool is required to update Qt translations.])\n     fi\n-    if test \"x$LCONVERT\" = x; then\n+    if test \"$LCONVERT\" = \"\"; then\n       AC_MSG_WARN([lconvert tool is required to update Qt translations.])\n     fi\n   ],[\n     bitcoin_enable_qt=no\n   ])\n-  if test x$bitcoin_enable_qt = xyes; then\n+  if test $bitcoin_enable_qt = \"yes\"; then\n     AC_MSG_RESULT([$bitcoin_enable_qt ($qt_lib_prefix)])\n   else\n     AC_MSG_RESULT([$bitcoin_enable_qt])\n@@ -349,17 +349,17 @@ AC_DEFUN([_BITCOIN_QT_CHECK_STATIC_LIBS], [\n   PKG_CHECK_MODULES([QT_FB], [${qt_lib_prefix}FbSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_FB_LIBS $QT_LIBS\"])\n   PKG_CHECK_MODULES([QT_FONTDATABASE], [${qt_lib_prefix}FontDatabaseSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_FONTDATABASE_LIBS $QT_LIBS\"])\n   PKG_CHECK_MODULES([QT_THEME], [${qt_lib_prefix}ThemeSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_THEME_LIBS $QT_LIBS\"])\n-  if test \"x$TARGET_OS\" = xlinux; then\n+  if test \"$TARGET_OS\" = \"linux\"; then\n     PKG_CHECK_MODULES([QT_INPUT], [${qt_lib_prefix}InputSupport], [QT_LIBS=\"$QT_INPUT_LIBS $QT_LIBS\"])\n     PKG_CHECK_MODULES([QT_SERVICE], [${qt_lib_prefix}ServiceSupport], [QT_LIBS=\"$QT_SERVICE_LIBS $QT_LIBS\"])\n     PKG_CHECK_MODULES([QT_XCBQPA], [${qt_lib_prefix}XcbQpa], [QT_LIBS=\"$QT_XCBQPA_LIBS $QT_LIBS\"])\n-  elif test \"x$TARGET_OS\" = xdarwin; then\n+  elif test \"$TARGET_OS\" = \"darwin\"; then\n     PKG_CHECK_MODULES([QT_CLIPBOARD], [${qt_lib_prefix}ClipboardSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_CLIPBOARD_LIBS $QT_LIBS\"])\n     PKG_CHECK_MODULES([QT_GRAPHICS], [${qt_lib_prefix}GraphicsSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_GRAPHICS_LIBS $QT_LIBS\"])\n     PKG_CHECK_MODULES([QT_SERVICE], [${qt_lib_prefix}ServiceSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_SERVICE_LIBS $QT_LIBS\"])\n-  elif test \"x$TARGET_OS\" = xwindows; then\n+  elif test \"$TARGET_OS\" = \"windows\"; then\n     PKG_CHECK_MODULES([QT_WINDOWSUIAUTOMATION], [${qt_lib_prefix}WindowsUIAutomationSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_WINDOWSUIAUTOMATION_LIBS $QT_LIBS\"])\n-  elif test \"x$TARGET_OS\" = xandroid; then\n+  elif test \"$TARGET_OS\" = \"android\"; then\n     PKG_CHECK_MODULES([QT_EGL], [${qt_lib_prefix}EglSupport], [QT_LIBS=\"$QT_EGL_LIBS $QT_LIBS\"])\n   fi\n ])\n@@ -391,7 +391,7 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS],[\n \n   BITCOIN_QT_CHECK([\n     PKG_CHECK_MODULES([QT_TEST], [${qt_lib_prefix}Test${qt_lib_suffix} $qt_version], [QT_TEST_INCLUDES=\"$QT_TEST_CFLAGS\"; have_qt_test=yes], [have_qt_test=no])\n-    if test \"x$use_dbus\" != xno; then\n+    if test \"$use_dbus\" != \"no\"; then\n       PKG_CHECK_MODULES([QT_DBUS], [${qt_lib_prefix}DBus $qt_version], [QT_DBUS_INCLUDES=\"$QT_DBUS_CFLAGS\"; have_qt_dbus=yes], [have_qt_dbus=no])\n     fi\n   ])"
      },
      {
        "sha": "736270afea5ab1daeb2d23de80f303e83d59c037",
        "filename": "build-aux/m4/bitcoin_subdir_to_include.m4",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85b3656a328eb77546deb8533d10e411a0b1872d/build-aux/m4/bitcoin_subdir_to_include.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85b3656a328eb77546deb8533d10e411a0b1872d/build-aux/m4/bitcoin_subdir_to_include.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_subdir_to_include.m4?ref=85b3656a328eb77546deb8533d10e411a0b1872d",
        "patch": "@@ -5,13 +5,13 @@ dnl file COPYING or http://www.opensource.org/licenses/mit-license.php.\n dnl BITCOIN_SUBDIR_TO_INCLUDE([CPPFLAGS-VARIABLE-NAME],[SUBDIRECTORY-NAME],[HEADER-FILE])\n dnl SUBDIRECTORY-NAME must end with a path separator\n AC_DEFUN([BITCOIN_SUBDIR_TO_INCLUDE],[\n-  if test \"x$2\" = \"x\"; then\n+  if test \"$2\" = \"\"; then\n     AC_MSG_RESULT([default])\n   else\n     echo \"#include <$2$3.h>\" >conftest.cpp\n     newinclpath=`${CXXCPP} ${CPPFLAGS} -M conftest.cpp 2>/dev/null | [ tr -d '\\\\n\\\\r\\\\\\\\' | sed -e 's/^.*[[:space:]:]\\(\\/[^[:space:]]*\\)]$3[\\.h[[:space:]].*$/\\1/' -e t -e d`]\n     AC_MSG_RESULT([${newinclpath}])\n-    if test \"x${newinclpath}\" != \"x\"; then\n+    if test \"${newinclpath}\" != \"\"; then\n       eval \"$1=\\\"\\$$1\\\"' -I${newinclpath}'\"\n     fi\n   fi"
      },
      {
        "sha": "45def0908b56a569488ed24f9c0492ef176fd64b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 164,
        "deletions": 164,
        "changes": 328,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85b3656a328eb77546deb8533d10e411a0b1872d/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85b3656a328eb77546deb8533d10e411a0b1872d/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=85b3656a328eb77546deb8533d10e411a0b1872d",
        "patch": "@@ -15,7 +15,7 @@ AC_CONFIG_MACRO_DIR([build-aux/m4])\n \n m4_ifndef([PKG_PROG_PKG_CONFIG], [AC_MSG_ERROR([PKG_PROG_PKG_CONFIG macro not found. Please install pkg-config and re-run autogen.sh])])\n PKG_PROG_PKG_CONFIG\n-if test \"x$PKG_CONFIG\" = x; then\n+if test \"$PKG_CONFIG\" = \"\"; then\n   AC_MSG_ERROR([pkg-config not found])\n fi\n \n@@ -31,7 +31,7 @@ BITCOIN_MP_GUI_NAME=bitcoin-gui\n \n dnl Unless the user specified ARFLAGS, force it to be cr\n AC_ARG_VAR([ARFLAGS], [Flags for the archiver, defaults to <cr> if not set])\n-if test \"x${ARFLAGS+set}\" != \"xset\"; then\n+if test \"${ARFLAGS+set}\" != \"set\"; then\n   ARFLAGS=\"cr\"\n fi\n \n@@ -55,7 +55,7 @@ dnl make the compilation flags quiet unless V=1 is used\n AM_SILENT_RULES([yes])\n \n dnl Compiler checks (here before libtool).\n-if test \"x${CXXFLAGS+set}\" = \"xset\"; then\n+if test \"${CXXFLAGS+set}\" = \"set\"; then\n   CXXFLAGS_overridden=yes\n else\n   CXXFLAGS_overridden=no\n@@ -86,7 +86,7 @@ CHECK_ATOMIC\n dnl Unless the user specified OBJCXX, force it to be the same as CXX. This ensures\n dnl that we get the same -std flags for both.\n m4_ifdef([AC_PROG_OBJCXX],[\n-if test \"x${OBJCXX+set}\" = \"x\"; then\n+if test \"${OBJCXX+set}\" = \"\"; then\n   OBJCXX=\"${CXX}\"\n fi\n AC_PROG_OBJCXX\n@@ -257,7 +257,7 @@ AC_ARG_ENABLE([asm],\n   [use_asm=$enableval],\n   [use_asm=yes])\n \n-if test \"x$use_asm\" = xyes; then\n+if test \"$use_asm\" = \"yes\"; then\n   AC_DEFINE([USE_ASM], [1], [Define this symbol to build in assembly routines])\n fi\n \n@@ -289,7 +289,7 @@ AC_ARG_ENABLE(man,\n     [AS_HELP_STRING([--disable-man],\n                     [do not install man pages (default is to install)])],,\n     enable_man=yes)\n-AM_CONDITIONAL([ENABLE_MAN], [test \"$enable_man\" != no])\n+AM_CONDITIONAL([ENABLE_MAN], [test \"$enable_man\" != \"no\"])\n \n dnl Enable debug\n AC_ARG_ENABLE([debug],\n@@ -353,9 +353,9 @@ case $host in\n     ;;\n esac\n \n-if test \"x$enable_debug\" = xyes; then\n+if test \"$enable_debug\" = \"yes\"; then\n   dnl Clear default -g -O2 flags\n-  if test \"x$CXXFLAGS_overridden\" = xno; then\n+  if test \"$CXXFLAGS_overridden\" = \"no\"; then\n \tCXXFLAGS=\"\"\n   fi\n \n@@ -375,12 +375,12 @@ if test \"x$enable_debug\" = xyes; then\n   AX_CHECK_COMPILE_FLAG([-ftrapv], [DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -ftrapv\"], [], [$CXXFLAG_WERROR])\n fi\n \n-if test \"x$enable_lto\" = \"xyes\"; then\n+if test \"$enable_lto\" = \"yes\"; then\n   AX_CHECK_COMPILE_FLAG([-flto], [LTO_CXXFLAGS=\"$LTO_CXXFLAGS -flto\"], [AC_MSG_ERROR([compile failed with -flto])], [$CXXFLAG_WERROR])\n   AX_CHECK_LINK_FLAG([-flto], [LTO_LDFLAGS=\"$LTO_LDFLAGS -flto\"], [AC_MSG_ERROR([link failed with -flto])], [$CXXFLAG_WERROR])\n fi\n \n-if test x$use_sanitizers != x; then\n+if test \"$use_sanitizers\" != \"\"; then\n   dnl First check if the compiler accepts flags. If an incompatible pair like\n   dnl -fsanitize=address,thread is used here, this check will fail. This will also\n   dnl fail if a bad argument is passed, e.g. -fsanitize=undfeined\n@@ -408,8 +408,8 @@ if test x$use_sanitizers != x; then\n fi\n \n ERROR_CXXFLAGS=\n-if test \"x$enable_werror\" = \"xyes\"; then\n-  if test \"x$CXXFLAG_WERROR\" = \"x\"; then\n+if test \"$enable_werror\" = \"yes\"; then\n+  if test \"$CXXFLAG_WERROR\" = \"\"; then\n     AC_MSG_ERROR([enable-werror set but -Werror is not usable])\n   fi\n   ERROR_CXXFLAGS=$CXXFLAG_WERROR\n@@ -421,7 +421,7 @@ if test \"x$enable_werror\" = \"xyes\"; then\n                                           int f(){ assert(false); }]])])\n fi\n \n-if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n+if test \"$CXXFLAGS_overridden\" = \"no\"; then\n   AX_CHECK_COMPILE_FLAG([-Wall], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wall\"], [], [$CXXFLAG_WERROR])\n   AX_CHECK_COMPILE_FLAG([-Wextra], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wextra\"], [], [$CXXFLAG_WERROR])\n   AX_CHECK_COMPILE_FLAG([-Wgnu], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wgnu\"], [], [$CXXFLAG_WERROR])\n@@ -446,7 +446,7 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wunreachable-code-loop-increment], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunreachable-code-loop-increment\"], [], [$CXXFLAG_WERROR])\n   AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wimplicit-fallthrough\"], [], [$CXXFLAG_WERROR])\n \n-  if test x$suppress_external_warnings != xno ; then\n+  if test \"$suppress_external_warnings\" != \"no\" ; then\n     AX_CHECK_COMPILE_FLAG([-Wdocumentation], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdocumentation\"], [], [$CXXFLAG_WERROR])\n   fi\n \n@@ -455,7 +455,7 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   dnl set the -Wno-foo case if it works.\n   AX_CHECK_COMPILE_FLAG([-Wunused-parameter], [NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-parameter\"], [], [$CXXFLAG_WERROR])\n   AX_CHECK_COMPILE_FLAG([-Wself-assign], [NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-self-assign\"], [], [$CXXFLAG_WERROR])\n-  if test x$suppress_external_warnings != xyes ; then\n+  if test \"$suppress_external_warnings\" != \"yes\" ; then\n     AX_CHECK_COMPILE_FLAG([-Wdeprecated-copy], [NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-copy\"], [], [$CXXFLAG_WERROR])\n   fi\n fi\n@@ -468,7 +468,7 @@ enable_sse41=no\n enable_avx2=no\n enable_shani=no\n \n-if test \"x$use_asm\" = \"xyes\"; then\n+if test \"$use_asm\" = \"yes\"; then\n \n dnl Check for optional instruction set support. Enabling these does _not_ imply that all code will\n dnl be compiled with them, rather that specific objects/libs may use them after checking for runtime\n@@ -493,7 +493,7 @@ AX_CHECK_COMPILE_FLAG([-mpclmul], [enable_clmul=yes], [], [$CXXFLAG_WERROR], [AC\n   return e == 0;\n ])])\n \n-if test x$enable_clmul = xyes; then\n+if test \"$enable_clmul\" = \"yes\"; then\n   CLMUL_CXXFLAGS=\"-mpclmul\"\n   AC_DEFINE([HAVE_CLMUL], [1], [Define this symbol if clmul instructions can be used])\n fi\n@@ -658,12 +658,12 @@ case $host in\n      AX_CHECK_LINK_FLAG([-static], [LIBTOOL_APP_LDFLAGS=\"$LIBTOOL_APP_LDFLAGS -all-static\"])\n \n      AC_PATH_PROG([MAKENSIS], [makensis], [none])\n-     if test x$MAKENSIS = xnone; then\n+     if test \"$MAKENSIS\" = \"none\"; then\n        AC_MSG_WARN([makensis not found. Cannot create installer.])\n      fi\n \n      AC_PATH_TOOL([WINDRES], [windres], [none])\n-     if test x$WINDRES = xnone; then\n+     if test \"$WINDRES\" = \"none\"; then\n        AC_MSG_ERROR([windres not found])\n      fi\n \n@@ -682,25 +682,25 @@ case $host in\n      ;;\n   *darwin*)\n      TARGET_OS=darwin\n-     if  test x$cross_compiling != xyes; then\n+     if  test $cross_compiling != \"yes\"; then\n        BUILD_OS=darwin\n        AC_PATH_PROGS([RSVG_CONVERT], [rsvg-convert rsvg], [rsvg-convert])\n        AC_CHECK_PROG([BREW], [brew], [brew])\n-       if test x$BREW = xbrew; then\n+       if test \"$BREW\" = \"brew\"; then\n          dnl These Homebrew packages may be keg-only, meaning that they won't be found\n          dnl in expected paths because they may conflict with system files. Ask\n          dnl Homebrew where each one is located, then adjust paths accordingly.\n          dnl It's safe to add these paths even if the functionality is disabled by\n          dnl the user (--without-wallet or --without-gui for example).\n \n-         if test \"x$use_bdb\" != xno && $BREW list --versions berkeley-db@4 >/dev/null && test \"x$BDB_CFLAGS\" = \"x\" && test \"x$BDB_LIBS\" = \"x\"; then\n+         if test \"$use_bdb\" != \"no\" && $BREW list --versions berkeley-db@4 >/dev/null && test \"$BDB_CFLAGS\" = \"\" && test \"$BDB_LIBS\" = \"\"; then\n            bdb_prefix=$($BREW --prefix berkeley-db@4 2>/dev/null)\n            dnl This must precede the call to BITCOIN_FIND_BDB48 below.\n            BDB_CFLAGS=\"-I$bdb_prefix/include\"\n            BDB_LIBS=\"-L$bdb_prefix/lib -ldb_cxx-4.8\"\n          fi\n \n-         if test \"x$use_sqlite\" != xno && $BREW list --versions sqlite3 >/dev/null; then\n+         if test \"$use_sqlite\" != \"no\" && $BREW list --versions sqlite3 >/dev/null; then\n            export PKG_CONFIG_PATH=\"$($BREW --prefix sqlite3 2>/dev/null)/lib/pkgconfig:$PKG_CONFIG_PATH\"\n          fi\n \n@@ -714,18 +714,18 @@ case $host in\n              dnl Therefore, as we do not use pkg-config to detect miniupnpc and libnatpmp\n              dnl packages, we should set the CPPFLAGS and LDFLAGS variables for them\n              dnl explicitly.\n-             if test \"x$use_upnp\" != xno && $BREW list --versions miniupnpc >/dev/null; then\n+             if test \"$use_upnp\" != \"no\" && $BREW list --versions miniupnpc >/dev/null; then\n                miniupnpc_prefix=$($BREW --prefix miniupnpc 2>/dev/null)\n-               if test \"x$suppress_external_warnings\" != xno; then\n+               if test \"$suppress_external_warnings\" != \"no\"; then\n                  CPPFLAGS=\"$CPPFLAGS -isystem $miniupnpc_prefix/include\"\n                else\n                  CPPFLAGS=\"$CPPFLAGS -I$miniupnpc_prefix/include\"\n                fi\n                LDFLAGS=\"$LDFLAGS -L$miniupnpc_prefix/lib\"\n              fi\n-             if test \"x$use_natpmp\" != xno && $BREW list --versions libnatpmp >/dev/null; then\n+             if test \"$use_natpmp\" != \"no\" && $BREW list --versions libnatpmp >/dev/null; then\n                libnatpmp_prefix=$($BREW --prefix libnatpmp 2>/dev/null)\n-               if test \"x$suppress_external_warnings\" != xno; then\n+               if test \"$suppress_external_warnings\" != \"no\"; then\n                  CPPFLAGS=\"$CPPFLAGS -isystem $libnatpmp_prefix/include\"\n                else\n                  CPPFLAGS=\"$CPPFLAGS -I$libnatpmp_prefix/include\"\n@@ -787,18 +787,18 @@ case $host in\n      ;;\n esac\n \n-if test x$use_extended_functional_tests != xno; then\n+if test \"$use_extended_functional_tests\" != \"no\"; then\n   AC_SUBST(EXTENDED_FUNCTIONAL_TESTS, --extended)\n fi\n \n-if test x$use_lcov = xyes; then\n-  if test x$LCOV = x; then\n+if test \"$use_lcov\" = \"yes\"; then\n+  if test \"$LCOV\" = \"\"; then\n     AC_MSG_ERROR([lcov testing requested but lcov not found])\n   fi\n-  if test x$PYTHON = x; then\n+  if test \"$PYTHON\" = \"\"; then\n     AC_MSG_ERROR([lcov testing requested but python not found])\n   fi\n-  if test x$GENHTML = x; then\n+  if test \"$GENHTML\" = \"\"; then\n     AC_MSG_ERROR([lcov testing requested but genhtml not found])\n   fi\n \n@@ -811,13 +811,13 @@ if test x$use_lcov = xyes; then\n       #endif\n     ]])],[\n       AC_MSG_RESULT([yes])\n-      if test x$LLVM_COV = x; then\n+      if test \"$LLVM_COV\" = \"\"; then\n         AC_MSG_ERROR([lcov testing requested but llvm-cov not found])\n       fi\n       COV_TOOL=\"$LLVM_COV gcov\"\n     ],[\n       AC_MSG_RESULT([no])\n-      if test x$GCOV = x; then\n+      if test \"$GCOV\" = \"x\"; then\n         AC_MSG_ERROR([lcov testing requested but gcov not found])\n       fi\n       COV_TOOL=\"$GCOV\"\n@@ -833,7 +833,7 @@ if test x$use_lcov = xyes; then\n   CXXFLAGS=\"$CXXFLAGS -Og\"\n fi\n \n-if test x$use_lcov_branch != xno; then\n+if test \"$use_lcov_branch\" != \"no\"; then\n   AC_SUBST(LCOV_OPTS, \"$LCOV_OPTS --rc lcov_branch_coverage=1\")\n fi\n \n@@ -853,26 +853,26 @@ AC_SYS_LARGEFILE\n dnl detect POSIX or GNU variant of strerror_r\n AC_FUNC_STRERROR_R\n \n-if test x$ac_cv_sys_file_offset_bits != x &&\n-   test x$ac_cv_sys_file_offset_bits != xno &&\n-   test x$ac_cv_sys_file_offset_bits != xunknown; then\n+if test \"$ac_cv_sys_file_offset_bits\" != \"\" &&\n+   test \"$ac_cv_sys_file_offset_bits\" != \"no\" &&\n+   test \"$ac_cv_sys_file_offset_bits\" != \"unknown\"; then\n   CPPFLAGS=\"$CPPFLAGS -D_FILE_OFFSET_BITS=$ac_cv_sys_file_offset_bits\"\n fi\n \n-if test x$ac_cv_sys_large_files != x &&\n-   test x$ac_cv_sys_large_files != xno &&\n-   test x$ac_cv_sys_large_files != xunknown; then\n+if test \"$ac_cv_sys_large_files\" != \"\" &&\n+   test \"$ac_cv_sys_large_files\" != \"no\" &&\n+   test \"$ac_cv_sys_large_files\" != \"unknown\"; then\n   CPPFLAGS=\"$CPPFLAGS -D_LARGE_FILES=$ac_cv_sys_large_files\"\n fi\n \n AC_SEARCH_LIBS([clock_gettime],[rt])\n \n-if test \"x$enable_gprof\" = xyes; then\n+if test \"$enable_gprof\" = \"yes\"; then\n     dnl -pg is incompatible with -pie. Since hardening and profiling together doesn't make sense,\n     dnl we simply make them mutually exclusive here. Additionally, hardened toolchains may force\n     dnl -pie by default, in which case it needs to be turned off with -no-pie.\n \n-    if test x$use_hardening = xyes; then\n+    if test \"$use_hardening\" = \"yes\"; then\n         AC_MSG_ERROR([gprof profiling is not compatible with hardening. Reconfigure with --disable-hardening or --disable-gprof])\n     fi\n     use_hardening=no\n@@ -884,7 +884,7 @@ if test \"x$enable_gprof\" = xyes; then\n         [AC_MSG_ERROR([gprof profiling requested but not available])], [$GPROF_LDFLAGS])\n fi\n \n-if test x$TARGET_OS != xwindows; then\n+if test \"$TARGET_OS\" != \"windows\"; then\n   dnl All windows code is PIC, forcing it on just adds useless compile warnings\n   AX_CHECK_COMPILE_FLAG([-fPIC], [PIC_FLAGS=\"-fPIC\"])\n fi\n@@ -893,7 +893,7 @@ dnl All versions of gcc that we commonly use for building are subject to bug\n dnl https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n dnl -fstack-reuse=none for all gcc builds. (Only gcc understands this flag)\n AX_CHECK_COMPILE_FLAG([-fstack-reuse=none], [HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-reuse=none\"])\n-if test x$use_hardening != xno; then\n+if test \"$use_hardening\" != \"no\"; then\n   use_hardening=yes\n   AX_CHECK_COMPILE_FLAG([-Wstack-protector], [HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n   AX_CHECK_COMPILE_FLAG([-fstack-protector-all], [HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n@@ -917,7 +917,7 @@ if test x$use_hardening != xno; then\n   dnl When enable_debug is yes, all optimizations are disabled.\n   dnl However, FORTIFY_SOURCE requires that there is some level of optimization, otherwise it does nothing and just creates a compiler warning.\n   dnl Since FORTIFY_SOURCE is a no-op without optimizations, do not enable it when enable_debug is yes.\n-  if test x$enable_debug != xyes; then\n+  if test \"$enable_debug\" != \"yes\"; then\n     AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[\n       AX_CHECK_PREPROC_FLAG([-U_FORTIFY_SOURCE],[\n         HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -U_FORTIFY_SOURCE\"\n@@ -945,7 +945,7 @@ fi\n dnl These flags are specific to ld64, and may cause issues with other linkers.\n dnl For example: GNU ld will interpret -dead_strip as -de and then try and use\n dnl \"ad_strip\" as the symbol for the entry point.\n-if test x$TARGET_OS = xdarwin; then\n+if test \"$TARGET_OS\" = \"darwin\"; then\n   AX_CHECK_LINK_FLAG([-Wl,-dead_strip], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"], [], [$LDFLAG_WERROR])\n   AX_CHECK_LINK_FLAG([-Wl,-dead_strip_dylibs], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip_dylibs\"], [], [$LDFLAG_WERROR])\n   AX_CHECK_LINK_FLAG([-Wl,-bind_at_load], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-bind_at_load\"], [], [$LDFLAG_WERROR])\n@@ -1036,7 +1036,7 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n   ],\n   [\n     AC_MSG_RESULT([no])\n-    if test x$use_reduce_exports = xyes; then\n+    if test \"$use_reduce_exports\" = \"yes\"; then\n       AC_MSG_ERROR([Cannot find a working visibility attribute. Use --disable-reduce-exports.])\n     fi\n   ]\n@@ -1054,7 +1054,7 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n   [AC_MSG_RESULT([no])]\n )\n \n-if test \"x$use_thread_local\" = xyes || test \"x$use_thread_local\" = xauto; then\n+if test \"$use_thread_local\" = \"yes\" || test \"$use_thread_local\" = \"auto\"; then\n   TEMP_LDFLAGS=\"$LDFLAGS\"\n   LDFLAGS=\"$TEMP_LDFLAGS $PTHREAD_CFLAGS\"\n   AC_MSG_CHECKING([for thread_local support])\n@@ -1240,7 +1240,7 @@ AC_LINK_IFELSE(\n     [ AC_MSG_RESULT([no]) ]\n )\n \n-if test \"x$have_any_system\" != \"xno\"; then\n+if test \"$have_any_system\" != \"no\"; then\n   AC_DEFINE([HAVE_SYSTEM], [1], [Define to 1 if std::system or ::wsystem is available.])\n fi\n \n@@ -1257,7 +1257,7 @@ AC_DEFUN([SUPPRESS_WARNINGS],\n          [$(echo $1 |${SED} -E -e 's/(^| )-I/\\1-isystem /g' -e 's;-isystem /usr/include([/ ]|$);-I/usr/include\\1;g')])\n \n dnl enable-fuzz should disable all other targets\n-if test \"x$enable_fuzz\" = \"xyes\"; then\n+if test \"$enable_fuzz\" = \"yes\"; then\n   AC_MSG_WARN([enable-fuzz will disable all other targets and force --enable-fuzz-binary=yes])\n   build_bitcoin_utils=no\n   build_bitcoin_cli=no\n@@ -1300,7 +1300,7 @@ else\n \n   dnl Keep a copy of the original $QT_INCLUDES and use it when invoking qt's moc\n   QT_INCLUDES_UNSUPPRESSED=$QT_INCLUDES\n-  if test x$suppress_external_warnings != xno ; then\n+  if test \"$suppress_external_warnings\" != \"no\" ; then\n     QT_INCLUDES=SUPPRESS_WARNINGS($QT_INCLUDES)\n     QT_DBUS_INCLUDES=SUPPRESS_WARNINGS($QT_DBUS_INCLUDES)\n     QT_TEST_INCLUDES=SUPPRESS_WARNINGS($QT_TEST_INCLUDES)\n@@ -1309,45 +1309,45 @@ else\n   CPPFLAGS=\"$CPPFLAGS -DPROVIDE_FUZZ_MAIN_FUNCTION\"\n fi\n \n-if test x$enable_wallet != xno; then\n+if test \"$enable_wallet\" != \"no\"; then\n     dnl Check for libdb_cxx only if wallet enabled\n-    if test \"x$use_bdb\" != \"xno\"; then\n+    if test \"$use_bdb\" != \"no\"; then\n       BITCOIN_FIND_BDB48\n-      if test x$suppress_external_warnings != xno ; then\n+      if test \"$suppress_external_warnings\" != \"no\" ; then\n         BDB_CPPFLAGS=SUPPRESS_WARNINGS($BDB_CPPFLAGS)\n       fi\n     fi\n \n     dnl Check for sqlite3\n-    if test \"x$use_sqlite\" != \"xno\"; then\n+    if test \"$use_sqlite\" != \"no\"; then\n       PKG_CHECK_MODULES([SQLITE], [sqlite3 >= 3.7.17], [have_sqlite=yes], [have_sqlite=no])\n     fi\n     AC_MSG_CHECKING([whether to build wallet with support for sqlite])\n-    if test \"x$use_sqlite\" = \"xno\"; then\n+    if test \"$use_sqlite\" = \"no\"; then\n       use_sqlite=no\n-    elif test \"x$have_sqlite\" = \"xno\"; then\n-      if test \"x$use_sqlite\" = \"xyes\"; then\n+    elif test \"$have_sqlite\" = \"no\"; then\n+      if test \"$use_sqlite\" = \"yes\"; then\n         AC_MSG_ERROR([sqlite support requested but cannot be built. Use --without-sqlite])\n       fi\n       use_sqlite=no\n     else\n-      if test x$use_sqlite != xno; then\n+      if test \"$use_sqlite\" != \"no\"; then\n         AC_DEFINE([USE_SQLITE],[1],[Define if sqlite support should be compiled in])\n         use_sqlite=yes\n       fi\n     fi\n     AC_MSG_RESULT([$use_sqlite])\n \n     dnl Disable wallet if both --without-bdb and --without-sqlite\n-    if test \"x$use_bdb$use_sqlite\" = \"xnono\"; then\n-        if test \"x$enable_wallet\" = \"xyes\"; then\n+    if test \"$use_bdb$use_sqlite\" = \"nono\"; then\n+        if test \"$enable_wallet\" = \"yes\"; then\n             AC_MSG_ERROR([wallet functionality requested but no BDB or SQLite support available.])\n         fi\n         enable_wallet=no\n     fi\n fi\n \n-if test x$use_ebpf != xno; then\n+if test \"$use_ebpf\" != \"no\"; then\n   AC_MSG_CHECKING([whether eBPF tracepoints are supported])\n   AC_COMPILE_IFELSE([\n     AC_LANG_PROGRAM(\n@@ -1359,22 +1359,22 @@ if test x$use_ebpf != xno; then\n   )\n fi\n \n-if test x$build_bitcoin_cli$build_bitcoin_tx$build_bitcoin_util$build_bitcoind$bitcoin_enable_qt$use_bench$use_tests = xnonononononono; then\n+if test \"$build_bitcoin_cli$build_bitcoin_tx$build_bitcoin_util$build_bitcoind$bitcoin_enable_qt$use_bench$use_tests\" = \"nonononononono\"; then\n   use_upnp=no\n   use_natpmp=no\n   use_zmq=no\n fi\n \n dnl Check for libminiupnpc (optional)\n-if test x$use_upnp != xno; then\n+if test \"$use_upnp\" != \"no\"; then\n   AC_CHECK_HEADERS(\n     [miniupnpc/miniupnpc.h miniupnpc/upnpcommands.h miniupnpc/upnperrors.h],\n     [AC_CHECK_LIB([miniupnpc], [upnpDiscover], [MINIUPNPC_LIBS=-lminiupnpc], [have_miniupnpc=no])],\n     [have_miniupnpc=no]\n   )\n dnl The minimum supported miniUPnPc API version is set to 10. This keeps compatibility\n dnl with Ubuntu 16.04 LTS and Debian 8 libminiupnpc-dev packages.\n-if test x$have_miniupnpc != xno; then\n+if test \"$have_miniupnpc\" != \"no\"; then\n   AC_MSG_CHECKING([whether miniUPnPc API version is supported])\n   AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[\n       @%:@include <miniupnpc/miniupnpc.h>\n@@ -1395,48 +1395,48 @@ fi\n fi\n \n dnl Check for libnatpmp (optional).\n-if test \"x$use_natpmp\" != xno; then\n+if test \"$use_natpmp\" != \"no\"; then\n   AC_CHECK_HEADERS([natpmp.h],\n                    [AC_CHECK_LIB([natpmp], [initnatpmp], [NATPMP_LIBS=-lnatpmp], [have_natpmp=no])],\n                    [have_natpmp=no])\n fi\n \n-if test x$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononononono; then\n+if test \"$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench\" = \"nonononononono\"; then\n   use_boost=no\n else\n   use_boost=yes\n fi\n \n-if test x$use_boost = xyes; then\n+if test \"$use_boost\" = \"yes\"; then\n \n   dnl Check for Boost headers\n   AX_BOOST_BASE([1.64.0],[],[AC_MSG_ERROR([Boost is not available!])])\n-  if test x$want_boost = xno; then\n+  if test \"$want_boost\" = \"no\"; then\n     AC_MSG_ERROR([only libbitcoinconsensus can be built without Boost])\n   fi\n   AX_BOOST_SYSTEM\n   AX_BOOST_FILESYSTEM\n \n-  if test x$suppress_external_warnings != xno; then\n+  if test \"$suppress_external_warnings\" != \"no\"; then\n     BOOST_CPPFLAGS=SUPPRESS_WARNINGS($BOOST_CPPFLAGS)\n   fi\n \n   BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB\"\n fi\n \n-if test \"x$use_external_signer\" != xno; then\n+if test \"$use_external_signer\" != \"no\"; then\n   AC_DEFINE([ENABLE_EXTERNAL_SIGNER], [], [Define if external signer support is enabled])\n fi\n-AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER], [test \"x$use_external_signer\" = \"xyes\"])\n+AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER], [test \"$use_external_signer\" = \"yes\"])\n \n dnl Do not compile with syscall sandbox support when compiling under the sanitizers.\n dnl The sanitizers introduce use of syscalls that are not typically used in bitcoind\n dnl (such as execve when the sanitizers execute llvm-symbolizer).\n-if test x$use_sanitizers != x; then\n+if test \"$use_sanitizers\" != \"\"; then\n   AC_MSG_WARN([Specifying --with-sanitizers forces --without-seccomp since the sanitizers introduce use of syscalls not allowed by the bitcoind syscall sandbox (-sandbox=<mode>).])\n   seccomp_found=no\n fi\n-if test \"x$seccomp_found\" != \"xno\"; then\n+if test \"$seccomp_found\" != \"no\"; then\n   AC_MSG_CHECKING([for seccomp-bpf (Linux x86-64)])\n   AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[\n       @%:@include <linux/seccomp.h>\n@@ -1457,22 +1457,22 @@ dnl Currently only enable -sandbox=<mode> feature if seccomp is found.\n dnl In the future, sandboxing could be also be supported with other\n dnl sandboxing mechanisms besides seccomp.\n use_syscall_sandbox=$seccomp_found\n-AM_CONDITIONAL([ENABLE_SYSCALL_SANDBOX], [test \"x$use_syscall_sandbox\" != \"xno\"])\n+AM_CONDITIONAL([ENABLE_SYSCALL_SANDBOX], [test \"$use_syscall_sandbox\" != \"no\"])\n \n dnl Check for reduced exports\n-if test x$use_reduce_exports = xyes; then\n+if test \"$use_reduce_exports\" = \"yes\"; then\n   AX_CHECK_COMPILE_FLAG([-fvisibility=hidden], [CXXFLAGS=\"$CXXFLAGS -fvisibility=hidden\"],\n   [AC_MSG_ERROR([Cannot set hidden symbol visibility. Use --disable-reduce-exports.])], [$CXXFLAG_WERROR])\n   AX_CHECK_LINK_FLAG([-Wl,--exclude-libs,ALL], [RELDFLAGS=\"-Wl,--exclude-libs,ALL\"], [], [$LDFLAG_WERROR])\n fi\n \n-if test x$use_tests = xyes; then\n+if test \"$use_tests\" = \"yes\"; then\n \n-  if test x$HEXDUMP = x; then\n+  if test \"$HEXDUMP\" = \"\"; then\n     AC_MSG_ERROR([hexdump is required for tests])\n   fi\n \n-  if test x$use_boost = xyes; then\n+  if test \"$use_boost\" = \"yes\"; then\n \n     AX_BOOST_UNIT_TEST_FRAMEWORK\n \n@@ -1499,26 +1499,26 @@ fi\n \n dnl libevent check\n \n-if test x$build_bitcoin_cli$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench != xnonononono; then\n+if test \"$build_bitcoin_cli$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench\" != \"nonononono\"; then\n   PKG_CHECK_MODULES([EVENT], [libevent >= 2.0.21], [use_libevent=yes], [AC_MSG_ERROR([libevent version 2.0.21 or greater not found.])])\n-  if test x$TARGET_OS != xwindows; then\n+  if test \"$TARGET_OS\" != \"windows\"; then\n     PKG_CHECK_MODULES([EVENT_PTHREADS], [libevent_pthreads >= 2.0.21],, [AC_MSG_ERROR([libevent_pthreads version 2.0.21 or greater not found.])])\n   fi\n \n-  if test x$suppress_external_warnings != xno; then\n+  if test \"$suppress_external_warnings\" != \"no\"; then\n     EVENT_CFLAGS=SUPPRESS_WARNINGS($EVENT_CFLAGS)\n   fi\n fi\n \n dnl QR Code encoding library check\n \n-if test \"x$use_qr\" != xno; then\n+if test \"$use_qr\" != \"no\"; then\n   BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])\n fi\n \n dnl ZMQ check\n \n-if test \"x$use_zmq\" = xyes; then\n+if test \"$use_zmq\" = \"yes\"; then\n   PKG_CHECK_MODULES([ZMQ], [libzmq >= 4],\n     AC_DEFINE([ENABLE_ZMQ], [1], [Define to 1 to enable ZMQ functions]),\n     [AC_DEFINE([ENABLE_ZMQ], [0], [Define to 1 to enable ZMQ functions])\n@@ -1528,7 +1528,7 @@ else\n   AC_DEFINE_UNQUOTED([ENABLE_ZMQ], [0], [Define to 1 to enable ZMQ functions])\n fi\n \n-if test \"x$use_zmq\" = xyes; then\n+if test \"$use_zmq\" = \"yes\"; then\n   dnl Assume libzmq was built for static linking\n   case $host in\n     *mingw*)\n@@ -1540,79 +1540,79 @@ fi\n dnl libmultiprocess library check\n \n libmultiprocess_found=no\n-if test \"x$with_libmultiprocess\" = xyes || test \"x$with_libmultiprocess\" = xauto; then\n+if test \"$with_libmultiprocess\" = \"yes\" || test \"$with_libmultiprocess\" = \"auto\"; then\n   m4_ifdef([PKG_CHECK_MODULES], [PKG_CHECK_MODULES([LIBMULTIPROCESS], [libmultiprocess], [\n      libmultiprocess_found=yes;\n      libmultiprocess_prefix=`$PKG_CONFIG --variable=prefix libmultiprocess`;\n   ], [true])])\n-elif test \"x$with_libmultiprocess\" != xno; then\n+elif test \"$with_libmultiprocess\" != \"no\"; then\n   AC_MSG_ERROR([--with-libmultiprocess=$with_libmultiprocess value is not yes, auto, or no])\n fi\n AC_SUBST(LIBMULTIPROCESS_CFLAGS)\n AC_SUBST(LIBMULTIPROCESS_LIBS)\n \n dnl Enable multiprocess check\n \n-if test \"x$enable_multiprocess\" = xyes; then\n-  if test \"x$libmultiprocess_found\" != xyes; then\n+if test \"$enable_multiprocess\" = \"yes\"; then\n+  if test \"$libmultiprocess_found\" != \"yes\"; then\n     AC_MSG_ERROR([--enable-multiprocess=yes option specified but libmultiprocess library was not found. May need to install libmultiprocess library, or specify install path with PKG_CONFIG_PATH environment variable. Running 'pkg-config --debug libmultiprocess' may be helpful for debugging.])\n   fi\n   build_multiprocess=yes\n-elif test \"x$enable_multiprocess\" = xauto; then\n+elif test \"$enable_multiprocess\" = \"auto\"; then\n   build_multiprocess=$libmultiprocess_found\n else\n   build_multiprocess=no\n fi\n \n-AM_CONDITIONAL([BUILD_MULTIPROCESS], [test \"x$build_multiprocess\" = xyes])\n-AM_CONDITIONAL([BUILD_BITCOIN_NODE], [test \"x$build_multiprocess\" = xyes])\n-AM_CONDITIONAL([BUILD_BITCOIN_GUI], [test \"x$build_multiprocess\" = xyes])\n+AM_CONDITIONAL([BUILD_MULTIPROCESS], [test \"$build_multiprocess\" = \"yes\"])\n+AM_CONDITIONAL([BUILD_BITCOIN_NODE], [test \"$build_multiprocess\" = \"yes\"])\n+AM_CONDITIONAL([BUILD_BITCOIN_GUI], [test \"$build_multiprocess\" = \"yes\"])\n \n dnl codegen tools check\n \n-if test x$build_multiprocess != xno; then\n-  if test \"x$with_mpgen\" = xyes || test \"x$with_mpgen\" = xauto; then\n+if test \"$build_multiprocess\" != \"no\"; then\n+  if test \"$with_mpgen\" = \"yes\" || test \"$with_mpgen\" = \"auto\"; then\n     MPGEN_PREFIX=\"$libmultiprocess_prefix\"\n-  elif test \"x$with_mpgen\" != xno; then\n+  elif test \"$with_mpgen\" != \"no\"; then\n     MPGEN_PREFIX=\"$with_mpgen\";\n   fi\n   AC_SUBST(MPGEN_PREFIX)\n fi\n \n AC_MSG_CHECKING([whether to build bitcoind])\n-AM_CONDITIONAL([BUILD_BITCOIND], [test x$build_bitcoind = xyes])\n+AM_CONDITIONAL([BUILD_BITCOIND], [test $build_bitcoind = \"yes\"])\n AC_MSG_RESULT($build_bitcoind)\n \n AC_MSG_CHECKING([whether to build bitcoin-cli])\n-AM_CONDITIONAL([BUILD_BITCOIN_CLI], [test x$build_bitcoin_cli = xyes])\n+AM_CONDITIONAL([BUILD_BITCOIN_CLI], [test $build_bitcoin_cli = \"yes\"])\n AC_MSG_RESULT($build_bitcoin_cli)\n \n AC_MSG_CHECKING([whether to build bitcoin-tx])\n-AM_CONDITIONAL([BUILD_BITCOIN_TX], [test x$build_bitcoin_tx = xyes])\n+AM_CONDITIONAL([BUILD_BITCOIN_TX], [test $build_bitcoin_tx = \"yes\"])\n AC_MSG_RESULT($build_bitcoin_tx)\n \n AC_MSG_CHECKING([whether to build bitcoin-wallet])\n-AM_CONDITIONAL([BUILD_BITCOIN_WALLET], [test x$build_bitcoin_wallet = xyes])\n+AM_CONDITIONAL([BUILD_BITCOIN_WALLET], [test $build_bitcoin_wallet = \"yes\"])\n AC_MSG_RESULT($build_bitcoin_wallet)\n \n AC_MSG_CHECKING([whether to build bitcoin-util])\n-AM_CONDITIONAL([BUILD_BITCOIN_UTIL], [test x$build_bitcoin_util = xyes])\n+AM_CONDITIONAL([BUILD_BITCOIN_UTIL], [test $build_bitcoin_util = \"yes\"])\n AC_MSG_RESULT($build_bitcoin_util)\n \n AC_MSG_CHECKING([whether to build libraries])\n-AM_CONDITIONAL([BUILD_BITCOIN_LIBS], [test x$build_bitcoin_libs = xyes])\n-if test x$build_bitcoin_libs = xyes; then\n+AM_CONDITIONAL([BUILD_BITCOIN_LIBS], [test $build_bitcoin_libs = \"yes\"])\n+if test \"$build_bitcoin_libs\" = \"yes\"; then\n   AC_DEFINE([HAVE_CONSENSUS_LIB], [1], [Define this symbol if the consensus lib has been built])\n   AC_CONFIG_FILES([libbitcoinconsensus.pc:libbitcoinconsensus.pc.in])\n fi\n AC_MSG_RESULT($build_bitcoin_libs)\n \n AC_LANG_POP\n \n-if test \"x$use_ccache\" != \"xno\"; then\n+if test \"$use_ccache\" != \"no\"; then\n   AC_MSG_CHECKING([if ccache should be used])\n-  if test x$CCACHE = x; then\n-    if test \"x$use_ccache\" = \"xyes\"; then\n+  if test \"$CCACHE\" = \"\"; then\n+    if test \"$use_ccache\" = \"yes\"; then\n       AC_MSG_ERROR([ccache not found.]);\n     else\n       use_ccache=no\n@@ -1623,15 +1623,15 @@ if test \"x$use_ccache\" != \"xno\"; then\n     CXX=\"$ac_cv_path_CCACHE $CXX\"\n   fi\n   AC_MSG_RESULT($use_ccache)\n-  if test \"x$use_ccache\" = \"xyes\"; then\n+  if test \"$use_ccache\" = \"yes\"; then\n     AX_CHECK_COMPILE_FLAG([-fdebug-prefix-map=A=B], [DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -fdebug-prefix-map=\\$(abs_top_srcdir)=.\"], [], [$CXXFLAG_WERROR])\n     AX_CHECK_PREPROC_FLAG([-fmacro-prefix-map=A=B], [DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -fmacro-prefix-map=\\$(abs_top_srcdir)=.\"], [], [$CXXFLAG_WERROR])\n   fi\n fi\n \n dnl enable wallet\n AC_MSG_CHECKING([if wallet should be enabled])\n-if test x$enable_wallet != xno; then\n+if test \"$enable_wallet\" != \"no\"; then\n   AC_MSG_RESULT([yes])\n   AC_DEFINE_UNQUOTED([ENABLE_WALLET],[1],[Define to 1 to enable wallet functions])\n   enable_wallet=yes\n@@ -1642,25 +1642,25 @@ fi\n \n dnl enable upnp support\n AC_MSG_CHECKING([whether to build with support for UPnP])\n-if test x$have_miniupnpc = xno; then\n-  if test x$use_upnp = xyes; then\n+if test \"$have_miniupnpc\" = \"no\"; then\n+  if test \"$use_upnp\" = \"yes\"; then\n      AC_MSG_ERROR([UPnP requested but cannot be built. Use --without-miniupnpc])\n   fi\n   AC_MSG_RESULT([no])\n   use_upnp=no\n else\n-  if test x$use_upnp != xno; then\n+  if test \"$use_upnp\" != \"no\"; then\n     AC_MSG_RESULT([yes])\n     AC_MSG_CHECKING([whether to build with UPnP enabled by default])\n     use_upnp=yes\n     upnp_setting=0\n-    if test x$use_upnp_default != xno; then\n+    if test \"$use_upnp_default\" != \"no\"; then\n       use_upnp_default=yes\n       upnp_setting=1\n     fi\n     AC_MSG_RESULT([$use_upnp_default])\n     AC_DEFINE_UNQUOTED([USE_UPNP],[$upnp_setting],[UPnP support not compiled if undefined, otherwise value (0 or 1) determines default state])\n-    if test x$TARGET_OS = xwindows; then\n+    if test \"$TARGET_OS\" = \"windows\"; then\n       MINIUPNPC_CPPFLAGS=\"-DSTATICLIB -DMINIUPNP_STATICLIB\"\n     fi\n   else\n@@ -1670,25 +1670,25 @@ fi\n \n dnl Enable NAT-PMP support.\n AC_MSG_CHECKING([whether to build with support for NAT-PMP])\n-if test \"x$have_natpmp\" = xno; then\n-  if test \"x$use_natpmp\" = xyes; then\n+if test \"$have_natpmp\" = \"no\"; then\n+  if test \"$use_natpmp\" = \"yes\"; then\n      AC_MSG_ERROR([NAT-PMP requested but cannot be built. Use --without-natpmp])\n   fi\n   AC_MSG_RESULT([no])\n   use_natpmp=no\n else\n-  if test \"x$use_natpmp\" != xno; then\n+  if test \"$use_natpmp\" != \"no\"; then\n     AC_MSG_RESULT([yes])\n     AC_MSG_CHECKING([whether to build with NAT-PMP enabled by default])\n     use_natpmp=yes\n     natpmp_setting=0\n-    if test \"x$use_natpmp_default\" != xno; then\n+    if test \"$use_natpmp_default\" != \"no\"; then\n       use_natpmp_default=yes\n       natpmp_setting=1\n     fi\n     AC_MSG_RESULT($use_natpmp_default)\n     AC_DEFINE_UNQUOTED([USE_NATPMP], [$natpmp_setting], [NAT-PMP support not compiled if undefined, otherwise value (0 or 1) determines default state])\n-    if test x$TARGET_OS = xwindows; then\n+    if test \"$TARGET_OS\" = \"windows\"; then\n       NATPMP_CPPFLAGS=\"-DSTATICLIB -DNATPMP_STATICLIB\"\n     fi\n   else\n@@ -1698,47 +1698,47 @@ fi\n \n dnl these are only used when qt is enabled\n BUILD_TEST_QT=\"\"\n-if test x$bitcoin_enable_qt != xno; then\n+if test \"$bitcoin_enable_qt\" != \"no\"; then\n   dnl enable dbus support\n   AC_MSG_CHECKING([whether to build GUI with support for D-Bus])\n-  if test x$bitcoin_enable_qt_dbus != xno; then\n+  if test \"$bitcoin_enable_qt_dbus\" != \"no\"; then\n     AC_DEFINE([USE_DBUS], [1], [Define if dbus support should be compiled in])\n   fi\n   AC_MSG_RESULT([$bitcoin_enable_qt_dbus])\n \n   dnl enable qr support\n   AC_MSG_CHECKING([whether to build GUI with support for QR codes])\n-  if test x$have_qrencode = xno; then\n-    if test x$use_qr = xyes; then\n+  if test \"$have_qrencode\" = \"no\"; then\n+    if test \"$use_qr\" = \"yes\"; then\n       AC_MSG_ERROR([QR support requested but cannot be built. Use --without-qrencode])\n     fi\n     use_qr=no\n   else\n-    if test x$use_qr != xno; then\n+    if test \"$use_qr\" != \"no\"; then\n       AC_DEFINE([USE_QRCODE], [1], [Define if QR support should be compiled in])\n       use_qr=yes\n     fi\n   fi\n   AC_MSG_RESULT([$use_qr])\n \n-  if test x$XGETTEXT = x; then\n+  if test \"$XGETTEXT\" = \"\"; then\n     AC_MSG_WARN([xgettext is required to update qt translations])\n   fi\n \n   AC_MSG_CHECKING([whether to build test_bitcoin-qt])\n-  if test x$use_gui_tests$bitcoin_enable_qt_test = xyesyes; then\n+  if test \"$use_gui_tests$bitcoin_enable_qt_test\" = \"yesyes\"; then\n     AC_MSG_RESULT([yes])\n     BUILD_TEST_QT=\"yes\"\n   else\n     AC_MSG_RESULT([no])\n   fi\n fi\n \n-AM_CONDITIONAL([ENABLE_ZMQ], [test \"x$use_zmq\" = \"xyes\"])\n+AM_CONDITIONAL([ENABLE_ZMQ], [test \"$use_zmq\" = \"yes\"])\n \n AC_MSG_CHECKING([whether to build test_bitcoin])\n-if test x$use_tests = xyes; then\n-  if test \"x$enable_fuzz\" = \"xyes\"; then\n+if test \"$use_tests\" = \"yes\"; then\n+  if test \"$enable_fuzz\" = \"yes\"; then\n     AC_MSG_RESULT([no, because fuzzing is enabled])\n   else\n     AC_MSG_RESULT([yes])\n@@ -1750,51 +1750,51 @@ else\n fi\n \n AC_MSG_CHECKING([whether to reduce exports])\n-if test x$use_reduce_exports = xyes; then\n+if test \"$use_reduce_exports\" = \"yes\"; then\n   AC_MSG_RESULT([yes])\n else\n   AC_MSG_RESULT([no])\n fi\n \n-if test x$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoin_libs$build_bitcoind$bitcoin_enable_qt$use_bench$use_tests = xnononononononono; then\n+if test \"$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoin_libs$build_bitcoind$bitcoin_enable_qt$use_bench$use_tests\" = \"nononononononono\"; then\n   AC_MSG_ERROR([No targets! Please specify at least one of: --with-utils --with-libs --with-daemon --with-gui --enable-bench or --enable-tests])\n fi\n \n-if test x$enable_fuzz_binary = xyes; then\n+if test \"$enable_fuzz_binary\" = \"yes\"; then\n   CHECK_RUNTIME_LIB\n fi\n \n-AM_CONDITIONAL([TARGET_DARWIN], [test x$TARGET_OS = xdarwin])\n-AM_CONDITIONAL([BUILD_DARWIN], [test x$BUILD_OS = xdarwin])\n-AM_CONDITIONAL([TARGET_LINUX], [test x$TARGET_OS = xlinux])\n-AM_CONDITIONAL([TARGET_WINDOWS], [test x$TARGET_OS = xwindows])\n-AM_CONDITIONAL([ENABLE_WALLET], [test x$enable_wallet = xyes])\n-AM_CONDITIONAL([USE_SQLITE], [test \"x$use_sqlite\" = \"xyes\"])\n-AM_CONDITIONAL([USE_BDB], [test \"x$use_bdb\" = \"xyes\"])\n-AM_CONDITIONAL([ENABLE_TRACING], [test x$have_sdt = xyes])\n-AM_CONDITIONAL([ENABLE_TESTS], [test x$BUILD_TEST = xyes])\n-AM_CONDITIONAL([ENABLE_FUZZ], [test x$enable_fuzz = xyes])\n-AM_CONDITIONAL([ENABLE_FUZZ_BINARY], [test x$enable_fuzz_binary = xyes])\n-AM_CONDITIONAL([ENABLE_QT], [test x$bitcoin_enable_qt = xyes])\n-AM_CONDITIONAL([ENABLE_QT_TESTS], [test x$BUILD_TEST_QT = xyes])\n-AM_CONDITIONAL([ENABLE_BENCH], [test x$use_bench = xyes])\n-AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n-AM_CONDITIONAL([USE_LCOV], [test x$use_lcov = xyes])\n-AM_CONDITIONAL([USE_LIBEVENT], [test x$use_libevent = xyes])\n-AM_CONDITIONAL([HARDEN], [test x$use_hardening = xyes])\n-AM_CONDITIONAL([ENABLE_SSE42], [test x$enable_sse42 = xyes])\n-AM_CONDITIONAL([ENABLE_SSE41], [test x$enable_sse41 = xyes])\n-AM_CONDITIONAL([ENABLE_AVX2], [test x$enable_avx2 = xyes])\n-AM_CONDITIONAL([ENABLE_SHANI], [test x$enable_shani = xyes])\n-AM_CONDITIONAL([ENABLE_ARM_CRC], [test x$enable_arm_crc = xyes])\n-AM_CONDITIONAL([USE_ASM], [test x$use_asm = xyes])\n-AM_CONDITIONAL([WORDS_BIGENDIAN], [test x$ac_cv_c_bigendian = xyes])\n-AM_CONDITIONAL([USE_NATPMP], [test x$use_natpmp = xyes])\n-AM_CONDITIONAL([USE_UPNP], [test x$use_upnp = xyes])\n+AM_CONDITIONAL([TARGET_DARWIN], [test \"$TARGET_OS\" = \"darwin\"])\n+AM_CONDITIONAL([BUILD_DARWIN], [test \"$BUILD_OS\" = \"darwin\"])\n+AM_CONDITIONAL([TARGET_LINUX], [test \"$TARGET_OS\" = \"linux\"])\n+AM_CONDITIONAL([TARGET_WINDOWS], [test \"$TARGET_OS\" = \"windows\"])\n+AM_CONDITIONAL([ENABLE_WALLET], [test \"$enable_wallet\" = \"yes\"])\n+AM_CONDITIONAL([USE_SQLITE], [test \"$use_sqlite\" = \"yes\"])\n+AM_CONDITIONAL([USE_BDB], [test \"$use_bdb\" = \"yes\"])\n+AM_CONDITIONAL([ENABLE_TRACING], [test \"$have_sdt\" = \"yes\"])\n+AM_CONDITIONAL([ENABLE_TESTS], [test \"$BUILD_TEST\" = \"yes\"])\n+AM_CONDITIONAL([ENABLE_FUZZ], [test \"$enable_fuzz\" = \"yes\"])\n+AM_CONDITIONAL([ENABLE_FUZZ_BINARY], [test \"$enable_fuzz_binary\" = \"yes\"])\n+AM_CONDITIONAL([ENABLE_QT], [test \"$bitcoin_enable_qt\" = \"yes\"])\n+AM_CONDITIONAL([ENABLE_QT_TESTS], [test \"$BUILD_TEST_QT\" = \"yes\"])\n+AM_CONDITIONAL([ENABLE_BENCH], [test \"$use_bench\" = \"yes\"])\n+AM_CONDITIONAL([USE_QRCODE], [test \"$use_qr\" = \"yes\"])\n+AM_CONDITIONAL([USE_LCOV], [test \"$use_lcov\" = \"yes\"])\n+AM_CONDITIONAL([USE_LIBEVENT], [test \"$use_libevent\" = \"yes\"])\n+AM_CONDITIONAL([HARDEN], [test \"$use_hardening\" = \"yes\"])\n+AM_CONDITIONAL([ENABLE_SSE42], [test \"$enable_sse42\" = \"yes\"])\n+AM_CONDITIONAL([ENABLE_SSE41], [test \"$enable_sse41\" = \"yes\"])\n+AM_CONDITIONAL([ENABLE_AVX2], [test \"$enable_avx2\" = \"yes\"])\n+AM_CONDITIONAL([ENABLE_SHANI], [test \"$enable_shani\" = \"yes\"])\n+AM_CONDITIONAL([ENABLE_ARM_CRC], [test \"$enable_arm_crc\" = \"yes\"])\n+AM_CONDITIONAL([USE_ASM], [test \"$use_asm\" = \"yes\"])\n+AM_CONDITIONAL([WORDS_BIGENDIAN], [test \"$ac_cv_c_bigendian\" = \"yes\"])\n+AM_CONDITIONAL([USE_NATPMP], [test \"$use_natpmp\" = \"yes\"])\n+AM_CONDITIONAL([USE_UPNP], [test \"$use_upnp\" = \"yes\"])\n \n dnl for minisketch\n-AM_CONDITIONAL([ENABLE_CLMUL], [test x$enable_clmul = xyes])\n-AM_CONDITIONAL([HAVE_CLZ], [test x$have_clzl$have_clzll = xyesyes])\n+AM_CONDITIONAL([ENABLE_CLMUL], [test \"$enable_clmul\" = \"yes\"])\n+AM_CONDITIONAL([HAVE_CLZ], [test \"$have_clzl$have_clzll\" = \"yesyes\"])\n \n AC_DEFINE([CLIENT_VERSION_MAJOR], [_CLIENT_VERSION_MAJOR], [Major version])\n AC_DEFINE([CLIENT_VERSION_MINOR], [_CLIENT_VERSION_MINOR], [Minor version])\n@@ -1926,16 +1926,16 @@ echo \"  multiprocess    = $build_multiprocess\"\n echo \"  with experimental syscall sandbox support = $use_syscall_sandbox\"\n echo \"  with libs       = $build_bitcoin_libs\"\n echo \"  with wallet     = $enable_wallet\"\n-if test \"x$enable_wallet\" != \"xno\"; then\n+if test \"$enable_wallet\" != \"no\"; then\n     echo \"    with sqlite   = $use_sqlite\"\n     echo \"    with bdb      = $use_bdb\"\n fi\n echo \"  with gui / qt   = $bitcoin_enable_qt\"\n-if test x$bitcoin_enable_qt != xno; then\n+if test $bitcoin_enable_qt != \"no\"; then\n     echo \"    with qr       = $use_qr\"\n fi\n echo \"  with zmq        = $use_zmq\"\n-if test x$enable_fuzz = xno; then\n+if test $enable_fuzz = \"no\"; then\n     echo \"  with test       = $use_tests\"\n else\n     echo \"  with test       = not building test_bitcoin because fuzzing is enabled\""
      },
      {
        "sha": "4e32a61954aa3ac232fbfca642705d93c665de2b",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85b3656a328eb77546deb8533d10e411a0b1872d/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85b3656a328eb77546deb8533d10e411a0b1872d/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=85b3656a328eb77546deb8533d10e411a0b1872d",
        "patch": "@@ -62,7 +62,7 @@ if test -z \"$with_gui\" && test -n \"@no_qt@\"; then\n   with_gui=no\n fi\n \n-if test -n \"@debug@\" && test -z \"@no_qt@\" && test \"x$with_gui\" != xno; then\n+if test -n \"@debug@\" && test -z \"@no_qt@\" && test \"$with_gui\" != \"no\"; then\n   with_gui=qt5_debug\n fi\n "
      }
    ]
  }
]