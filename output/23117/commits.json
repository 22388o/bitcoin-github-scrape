[
  {
    "sha": "fac5708afc03ab18ce2bd25039ca2032c5187f5c",
    "node_id": "C_kwDOABII59oAKGZhYzU3MDhhZmMwM2FiMThjZTJiZDI1MDM5Y2EyMDMyYzUxODdmNWM",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-28T08:58:24Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-28T08:48:51Z"
      },
      "message": "test: Use assert_equal over assert for easier debugging",
      "tree": {
        "sha": "86b02b32376a9d5087cf25e9dd1e78448ab098cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86b02b32376a9d5087cf25e9dd1e78448ab098cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fac5708afc03ab18ce2bd25039ca2032c5187f5c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg3fwv9Gsp8p20yzyS5ZHfL7+i31IXpj5Y316hVBUA32w+g85Z7g+eDVIZHos/T\nMAxKOEkCeIilsCIpLg2qFq3mINCnb6W3UmSHrLMZ4KV3fDzyT5BL/9LXCf/+6pFa\ng1uAAVnfQhxyzckZviuJ7CVvFie4Y9xk9SIM+r4IBUX0Eq+kVWtc5BphNUYtPLqG\n/s+BK2quiPkGDUahgYVRtlkH512X5YGQ7XA9cIkeXf68bulKAXqazJUelpewWBPH\nuDIW25swaNafe0E2/2Mz5snpwgFzPL5BEur3LPQVXkvr7gBX2QRIcJA4Q7FvugEm\ndd8FqskIBYILVgUihienVsTb3AET628L+GsiCdiujn0ijo8IuMke0zzWmDb4HU1M\nVMYnJKbylvU65QAeXw9b7ZfpNp5kltqBBldN8BmG3MRiKuSAQGcrDv1e2ZC++prg\nbltcnACEmzBcSLW7wrfqhNyI5+YOLxRz7MQIE2VCeI5jRceqmeMkgFlz8Micd8h2\n4W4wdMSv\n=BkEJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 86b02b32376a9d5087cf25e9dd1e78448ab098cf\nparent a9d0cec4991ab057557af9992daa4c8146a9b9d0\nauthor MarcoFalke <falke.marco@gmail.com> 1632819504 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1632818931 +0200\n\ntest: Use assert_equal over assert for easier debugging\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac5708afc03ab18ce2bd25039ca2032c5187f5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fac5708afc03ab18ce2bd25039ca2032c5187f5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac5708afc03ab18ce2bd25039ca2032c5187f5c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9d0cec4991ab057557af9992daa4c8146a9b9d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9d0cec4991ab057557af9992daa4c8146a9b9d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9d0cec4991ab057557af9992daa4c8146a9b9d0"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "cacc5d48b5ac94dc8a23b42813c79f185a28f8f1",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac5708afc03ab18ce2bd25039ca2032c5187f5c/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac5708afc03ab18ce2bd25039ca2032c5187f5c/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=fac5708afc03ab18ce2bd25039ca2032c5187f5c",
        "patch": "@@ -44,6 +44,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n+    assert_greater_than_or_equal,\n     assert_is_hex_string,\n     assert_raises_rpc_error,\n     try_rpc,\n@@ -124,11 +125,11 @@ def run_test(self):\n         self.log.info(\"Verify sigops are counted in GBT with pre-BIP141 rules before the fork\")\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n         tmpl = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n-        assert tmpl['sizelimit'] == 1000000\n+        assert_equal(tmpl['sizelimit'], 1000000)\n         assert 'weightlimit' not in tmpl\n-        assert tmpl['sigoplimit'] == 20000\n-        assert tmpl['transactions'][0]['hash'] == txid\n-        assert tmpl['transactions'][0]['sigops'] == 2\n+        assert_equal(tmpl['sigoplimit'], 20000)\n+        assert_equal(tmpl['transactions'][0]['hash'], txid)\n+        assert_equal(tmpl['transactions'][0]['sigops'], 2)\n         assert '!segwit' not in tmpl['rules']\n         self.generate(self.nodes[0], 1)  # block 162\n \n@@ -232,11 +233,11 @@ def run_test(self):\n         self.log.info(\"Verify sigops are counted in GBT with BIP141 rules after the fork\")\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n         tmpl = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n-        assert tmpl['sizelimit'] >= 3999577  # actual maximum size is lower due to minimum mandatory non-witness data\n-        assert tmpl['weightlimit'] == 4000000\n-        assert tmpl['sigoplimit'] == 80000\n-        assert tmpl['transactions'][0]['txid'] == txid\n-        assert tmpl['transactions'][0]['sigops'] == 8\n+        assert_greater_than_or_equal(tmpl['sizelimit'], 3999577)  # actual maximum size is lower due to minimum mandatory non-witness data\n+        assert_equal(tmpl['weightlimit'], 4000000)\n+        assert_equal(tmpl['sigoplimit'], 80000)\n+        assert_equal(tmpl['transactions'][0]['txid'], txid)\n+        assert_equal(tmpl['transactions'][0]['sigops'], 8)\n         assert '!segwit' in tmpl['rules']\n \n         self.generate(self.nodes[0], 1)  # Mine a block to clear the gbt cache"
      }
    ]
  },
  {
    "sha": "fa8f3ba131d5460275b52c08608ebad8195a420d",
    "node_id": "C_kwDOABII59oAKGZhOGYzYmExMzFkNTQ2MDI3NWI1MmMwODYwOGViYWQ4MTk1YTQyMGQ",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-28T09:00:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-28T08:52:33Z"
      },
      "message": "test: pep-8",
      "tree": {
        "sha": "a8cc43150a688e1e6f0e34e71422082cc61fb0d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8cc43150a688e1e6f0e34e71422082cc61fb0d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa8f3ba131d5460275b52c08608ebad8195a420d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhYoAwAmowSVsunm6Goutm2X+c6MIi7I2mK6ylF8A547dGP5BUQhUtp7fVBd5Uk\ngPA+LZ5sDjtA2/TBxPFqUHt9NG5491Km6H6XjGL52W066dEG1WbiCwVjXduf9klc\nNLcvYQ59SVZEVduV0LjWolV7WAdyAjwKIyKeVrnVWoxDaYOK6ecuQKg2Xo34v3z4\nbGcnYDG1WFV3/28VNs+E6/QJQUB/lTE56osJsM3nfSCmBoAZ16gd+IKeAcfkNJsu\nzMxR5UNK2yrQnHar/4D5MRyOVraFuIWwwL7nqZsf+z2tQh6OqlYtT+hB3f75t3if\nHnhlVbGHfFXUyEGsCH/LG9Y8E+SxbV1uzlKEflpoXz7j2E9tMMtHSneSEG/mBV/J\nMNV54g3apEgFvfg6xSkm76ipJHa4bVIpvq57QvjAjrTMUrkQfA7MkmWbY/i5zgwy\nPF961HEZtV1Uyn1ppPyxKH739G4PmRNTsvYmXnvVg6MIVymsv7yHwBYts89Rhkys\n5pbOqE0/\n=lYLo\n-----END PGP SIGNATURE-----",
        "payload": "tree a8cc43150a688e1e6f0e34e71422082cc61fb0d7\nparent fac5708afc03ab18ce2bd25039ca2032c5187f5c\nauthor MarcoFalke <falke.marco@gmail.com> 1632819645 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1632819153 +0200\n\ntest: pep-8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8f3ba131d5460275b52c08608ebad8195a420d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa8f3ba131d5460275b52c08608ebad8195a420d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8f3ba131d5460275b52c08608ebad8195a420d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fac5708afc03ab18ce2bd25039ca2032c5187f5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac5708afc03ab18ce2bd25039ca2032c5187f5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fac5708afc03ab18ce2bd25039ca2032c5187f5c"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 20,
      "deletions": 16
    },
    "files": [
      {
        "sha": "4054a9a9031dd87add07e158a4b3c710eee85e17",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 20,
        "deletions": 16,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8f3ba131d5460275b52c08608ebad8195a420d/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8f3ba131d5460275b52c08608ebad8195a420d/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=fa8f3ba131d5460275b52c08608ebad8195a420d",
        "patch": "@@ -55,20 +55,24 @@\n P2WPKH = 0\n P2WSH = 1\n \n+\n def getutxo(txid):\n     utxo = {}\n     utxo[\"vout\"] = 0\n     utxo[\"txid\"] = txid\n     return utxo\n \n+\n def find_spendable_utxo(node, min_value):\n     for utxo in node.listunspent(query_options={'minimumAmount': min_value}):\n         if utxo['spendable']:\n             return utxo\n \n     raise AssertionError(f\"Unspent output equal or higher than {min_value} not found\")\n \n-txs_mined = {} # txindex from txid to blockhash\n+\n+txs_mined = {}  # txindex from txid to blockhash\n+\n \n class SegWitTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -135,8 +139,8 @@ def run_test(self):\n \n         balance_presetup = self.nodes[0].getbalance()\n         self.pubkey = []\n-        p2sh_ids = [] # p2sh_ids[NODE][TYPE] is an array of txids that spend to P2WPKH (TYPE=0) or P2WSH (TYPE=1) scripts to an address for NODE embedded in p2sh\n-        wit_ids = [] # wit_ids[NODE][TYPE] is an array of txids that spend to P2WPKH (TYPE=0) or P2WSH (TYPE=1) scripts to an address for NODE via bare witness\n+        p2sh_ids = []  # p2sh_ids[NODE][TYPE] is an array of txids that spend to P2WPKH (TYPE=0) or P2WSH (TYPE=1) scripts to an address for NODE embedded in p2sh\n+        wit_ids = []  # wit_ids[NODE][TYPE] is an array of txids that spend to P2WPKH (TYPE=0) or P2WSH (TYPE=1) scripts to an address for NODE via bare witness\n         for i in range(3):\n             newaddress = self.nodes[i].getnewaddress()\n             self.pubkey.append(self.nodes[i].getaddressinfo(newaddress)[\"pubkey\"])\n@@ -216,7 +220,7 @@ def run_test(self):\n         witnesses = coinbase_tx[\"decoded\"][\"vin\"][0][\"txinwitness\"]\n         assert_equal(len(witnesses), 1)\n         assert_is_hex_string(witnesses[0])\n-        assert_equal(witnesses[0], '00'*32)\n+        assert_equal(witnesses[0], '00' * 32)\n \n         self.log.info(\"Verify witness txs without witness data are invalid after the fork\")\n         self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program hash mismatch)', wit_ids[NODE_2][P2WPKH][2], sign=False)\n@@ -357,7 +361,7 @@ def run_test(self):\n \n         for i in compressed_spendable_address:\n             v = self.nodes[0].getaddressinfo(i)\n-            if (v['isscript']):\n+            if v['isscript']:\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # p2sh multisig with compressed keys should always be spendable\n                 spendable_anytime.extend([p2sh])\n@@ -376,7 +380,7 @@ def run_test(self):\n \n         for i in uncompressed_spendable_address:\n             v = self.nodes[0].getaddressinfo(i)\n-            if (v['isscript']):\n+            if v['isscript']:\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # p2sh multisig with uncompressed keys should always be spendable\n                 spendable_anytime.extend([p2sh])\n@@ -395,7 +399,7 @@ def run_test(self):\n \n         for i in compressed_solvable_address:\n             v = self.nodes[0].getaddressinfo(i)\n-            if (v['isscript']):\n+            if v['isscript']:\n                 # Multisig without private is not seen after addmultisigaddress, but seen after importaddress\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 solvable_after_importaddress.extend([bare, p2sh, p2wsh, p2sh_p2wsh])\n@@ -408,7 +412,7 @@ def run_test(self):\n \n         for i in uncompressed_solvable_address:\n             v = self.nodes[0].getaddressinfo(i)\n-            if (v['isscript']):\n+            if v['isscript']:\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # Base uncompressed multisig without private is not seen after addmultisigaddress, but seen after importaddress\n                 solvable_after_importaddress.extend([bare, p2sh])\n@@ -447,7 +451,7 @@ def run_test(self):\n         importlist = []\n         for i in compressed_spendable_address + uncompressed_spendable_address + compressed_solvable_address + uncompressed_solvable_address:\n             v = self.nodes[0].getaddressinfo(i)\n-            if (v['isscript']):\n+            if v['isscript']:\n                 bare = bytes.fromhex(v['hex'])\n                 importlist.append(bare.hex())\n                 importlist.append(script_to_p2wsh_script(bare).hex())\n@@ -510,7 +514,7 @@ def run_test(self):\n \n         for i in compressed_spendable_address:\n             v = self.nodes[0].getaddressinfo(i)\n-            if (v['isscript']):\n+            if v['isscript']:\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 premature_witaddress.append(script_to_p2sh(p2wsh))\n             else:\n@@ -520,7 +524,7 @@ def run_test(self):\n \n         for i in uncompressed_spendable_address + uncompressed_solvable_address:\n             v = self.nodes[0].getaddressinfo(i)\n-            if (v['isscript']):\n+            if v['isscript']:\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # P2WSH and P2SH(P2WSH) multisig with uncompressed keys are never seen\n                 unseen_anytime.extend([p2wsh, p2sh_p2wsh])\n@@ -531,7 +535,7 @@ def run_test(self):\n \n         for i in compressed_solvable_address:\n             v = self.nodes[0].getaddressinfo(i)\n-            if (v['isscript']):\n+            if v['isscript']:\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 premature_witaddress.append(script_to_p2sh(p2wsh))\n             else:\n@@ -598,13 +602,13 @@ def mine_and_test_listunspent(self, script_list, ismine):\n         watchcount = 0\n         spendcount = 0\n         for i in self.nodes[0].listunspent():\n-            if (i['txid'] == txid):\n+            if i['txid'] == txid:\n                 watchcount += 1\n                 if i['spendable']:\n                     spendcount += 1\n-        if (ismine == 2):\n+        if ismine == 2:\n             assert_equal(spendcount, len(script_list))\n-        elif (ismine == 1):\n+        elif ismine == 1:\n             assert_equal(watchcount, len(script_list))\n             assert_equal(spendcount, 0)\n         else:\n@@ -616,7 +620,7 @@ def p2sh_address_to_script(self, v):\n         p2sh = CScript(bytes.fromhex(v['scriptPubKey']))\n         p2wsh = script_to_p2wsh_script(bare)\n         p2sh_p2wsh = script_to_p2sh_script(p2wsh)\n-        return([bare, p2sh, p2wsh, p2sh_p2wsh])\n+        return [bare, p2sh, p2wsh, p2sh_p2wsh]\n \n     def p2pkh_address_to_script(self, v):\n         pubkey = bytes.fromhex(v['pubkey'])"
      }
    ]
  }
]