[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/599251899",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18353#issuecomment-599251899",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18353",
    "id": 599251899,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTI1MTg5OQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-15T19:13:46Z",
    "updated_at": "2020-03-15T19:13:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18155 (tests: Add harness which fuzzes EvalScript and VerifyScript using a fuzzed signature checker by practicalswift)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/599251899/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393305716",
    "pull_request_review_id": 375576763,
    "id": 393305716,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNTcxNg==",
    "diff_hunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+template <typename T>\n+void TestMultiplicationOverflow(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    const T i = fuzzed_data_provider.ConsumeIntegral<T>();\n+    const T j = fuzzed_data_provider.ConsumeIntegral<T>();\n+    const bool is_multiplication_overflow_custom = MultiplicationOverflow(i, j);\n+    T result_builtin;\n+    const bool is_multiplication_overflow_builtin = __builtin_mul_overflow(i, j, &result_builtin);",
    "path": "src/test/fuzz/multiplication_overflow.cpp",
    "position": 21,
    "original_position": 21,
    "commit_id": "44abf417eb1cd8598084eee1a429ca57c7d0579a",
    "original_commit_id": "44abf417eb1cd8598084eee1a429ca57c7d0579a",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "does this compile for afl?",
    "created_at": "2020-03-16T20:56:28Z",
    "updated_at": "2020-03-16T20:57:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18353#discussion_r393305716",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18353",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393305716"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18353#discussion_r393305716"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18353"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393305716/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 21,
    "original_line": 21,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393326105",
    "pull_request_review_id": 375602216,
    "id": 393326105,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyNjEwNQ==",
    "diff_hunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+template <typename T>\n+void TestMultiplicationOverflow(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    const T i = fuzzed_data_provider.ConsumeIntegral<T>();\n+    const T j = fuzzed_data_provider.ConsumeIntegral<T>();\n+    const bool is_multiplication_overflow_custom = MultiplicationOverflow(i, j);\n+    T result_builtin;\n+    const bool is_multiplication_overflow_builtin = __builtin_mul_overflow(i, j, &result_builtin);",
    "path": "src/test/fuzz/multiplication_overflow.cpp",
    "position": 21,
    "original_position": 21,
    "commit_id": "44abf417eb1cd8598084eee1a429ca57c7d0579a",
    "original_commit_id": "44abf417eb1cd8598084eee1a429ca57c7d0579a",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes it should :)  Let me know if you find any evidence to the contrary :)",
    "created_at": "2020-03-16T21:42:35Z",
    "updated_at": "2020-03-16T21:43:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18353#discussion_r393326105",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18353",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393326105"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18353#discussion_r393326105"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18353"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393326105/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 21,
    "original_line": 21,
    "side": "RIGHT",
    "in_reply_to_id": 393305716
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393840499",
    "pull_request_review_id": 376241618,
    "id": 393840499,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0MDQ5OQ==",
    "diff_hunk": "@@ -54,4 +70,27 @@ NODISCARD inline CScriptNum ConsumeScriptNum(FuzzedDataProvider& fuzzed_data_pro\n     return CScriptNum{fuzzed_data_provider.ConsumeIntegral<int64_t>()};\n }\n \n+template <typename T>\n+bool MultiplicationOverflow(T i, T j)\n+{\n+    static_assert(std::is_integral<T>::value, \"Integral required.\");\n+    if (std::numeric_limits<T>::is_signed) {\n+        if (i > 0) {\n+            if (j > 0) {\n+                return i > (std::numeric_limits<T>::max() / j);\n+            } else {\n+                return j < (std::numeric_limits<T>::min() / i);\n+            }\n+        } else {\n+            if (j > 0) {\n+                return i < (std::numeric_limits<T>::min() / j);\n+            } else {\n+                return i != 0 && (j < (std::numeric_limits<T>::max() / i));\n+            }\n+        }\n+    } else {\n+        return j != 0 && i > std::numeric_limits<T>::max() / j;\n+    }",
    "path": "src/test/fuzz/util.h",
    "position": 61,
    "original_position": 61,
    "commit_id": "44abf417eb1cd8598084eee1a429ca57c7d0579a",
    "original_commit_id": "44abf417eb1cd8598084eee1a429ca57c7d0579a",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why implement this from scratch? Could just use `__builtin_mul_overflow`?",
    "created_at": "2020-03-17T17:15:19Z",
    "updated_at": "2020-03-17T17:15:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18353#discussion_r393840499",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18353",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393840499"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18353#discussion_r393840499"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18353"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393840499/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 93,
    "original_line": 93,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393859416",
    "pull_request_review_id": 376265938,
    "id": 393859416,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1OTQxNg==",
    "diff_hunk": "@@ -54,4 +70,27 @@ NODISCARD inline CScriptNum ConsumeScriptNum(FuzzedDataProvider& fuzzed_data_pro\n     return CScriptNum{fuzzed_data_provider.ConsumeIntegral<int64_t>()};\n }\n \n+template <typename T>\n+bool MultiplicationOverflow(T i, T j)\n+{\n+    static_assert(std::is_integral<T>::value, \"Integral required.\");\n+    if (std::numeric_limits<T>::is_signed) {\n+        if (i > 0) {\n+            if (j > 0) {\n+                return i > (std::numeric_limits<T>::max() / j);\n+            } else {\n+                return j < (std::numeric_limits<T>::min() / i);\n+            }\n+        } else {\n+            if (j > 0) {\n+                return i < (std::numeric_limits<T>::min() / j);\n+            } else {\n+                return i != 0 && (j < (std::numeric_limits<T>::max() / i));\n+            }\n+        }\n+    } else {\n+        return j != 0 && i > std::numeric_limits<T>::max() / j;\n+    }",
    "path": "src/test/fuzz/util.h",
    "position": 61,
    "original_position": 61,
    "commit_id": "44abf417eb1cd8598084eee1a429ca57c7d0579a",
    "original_commit_id": "44abf417eb1cd8598084eee1a429ca57c7d0579a",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think it would be handy to have `MultiplicationOverflow(\u2026)` in other non-test parts of the code base.\r\n\r\nWhen we are confident of the equivalence between `MultiplicationOverflow` and `__builtin_mul_overflow` we can implement `MultiplicationOverflow` by using the `__builtin_mul_overflow` builtin where available (gcc + clang) and the current implementation where it is not (MSVC).\r\n\r\nThat's why I added a fuzz test for `MultiplicationOverflow` too.\r\n\r\nAnd when we have a version of `MultiplicationOverflow(\u2026)` that is known to be working on all platforms we can start using it in non-test code.\r\n\r\nMakes sense? :)",
    "created_at": "2020-03-17T17:45:02Z",
    "updated_at": "2020-03-17T17:45:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18353#discussion_r393859416",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18353",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393859416"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18353#discussion_r393859416"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18353"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393859416/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 93,
    "original_line": 93,
    "side": "RIGHT",
    "in_reply_to_id": 393840499
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393863875",
    "pull_request_review_id": 376271546,
    "id": 393863875,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg2Mzg3NQ==",
    "diff_hunk": "@@ -54,4 +70,27 @@ NODISCARD inline CScriptNum ConsumeScriptNum(FuzzedDataProvider& fuzzed_data_pro\n     return CScriptNum{fuzzed_data_provider.ConsumeIntegral<int64_t>()};\n }\n \n+template <typename T>\n+bool MultiplicationOverflow(T i, T j)\n+{\n+    static_assert(std::is_integral<T>::value, \"Integral required.\");\n+    if (std::numeric_limits<T>::is_signed) {\n+        if (i > 0) {\n+            if (j > 0) {\n+                return i > (std::numeric_limits<T>::max() / j);\n+            } else {\n+                return j < (std::numeric_limits<T>::min() / i);\n+            }\n+        } else {\n+            if (j > 0) {\n+                return i < (std::numeric_limits<T>::min() / j);\n+            } else {\n+                return i != 0 && (j < (std::numeric_limits<T>::max() / i));\n+            }\n+        }\n+    } else {\n+        return j != 0 && i > std::numeric_limits<T>::max() / j;\n+    }",
    "path": "src/test/fuzz/util.h",
    "position": 61,
    "original_position": 61,
    "commit_id": "44abf417eb1cd8598084eee1a429ca57c7d0579a",
    "original_commit_id": "44abf417eb1cd8598084eee1a429ca57c7d0579a",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "When talking about integer overflows:\r\n\r\nDon't miss this one: [a signed integer overflow in Microsoft's SafeInt (\"SafeInt is a class library for C++ that manages integer overflows\")](https://github.com/dcleblanc/SafeInt/issues/11)...\r\n\r\nIt's like rain on your wedding day\r\nIt's a free ride when you've already paid\r\nIt's the good advice that you just didn't take\r\n\r\n:)",
    "created_at": "2020-03-17T17:52:12Z",
    "updated_at": "2020-03-17T17:52:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18353#discussion_r393863875",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18353",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393863875"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18353#discussion_r393863875"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18353"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393863875/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 93,
    "original_line": 93,
    "side": "RIGHT",
    "in_reply_to_id": 393840499
  }
]