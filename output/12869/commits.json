[
  {
    "sha": "0ca546a36b9966f566aed437a78d8df3719b1889",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2E1NDZhMzZiOTk2NmY1NjZhZWQ0MzdhNzhkOGRmMzcxOWIxODg5",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-04-03T07:51:56Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-21T23:27:53Z"
      },
      "message": "[wallet] Add KeyType enum",
      "tree": {
        "sha": "4e4ca241e0c583aa4b3d3e1d64231269ec4f8d93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e4ca241e0c583aa4b3d3e1d64231269ec4f8d93"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ca546a36b9966f566aed437a78d8df3719b1889",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlsDVfkACgkQV692LbM1\nMyK5QQ/8CISVweEI7H+y3YvyqwQj0WcyT715IBELJOJlkkdkeb1j8GUa86nfjmrt\n8NcYbaBmeFzfqmESjK7VCbjH/0kdqaVacR0gq1yAXvP2z/AF2p1+iR1/TZ6kchz3\ncVZ+shgbwevN7PWiixddPuuUCMzuufDBNUl3faFa380o115R140jfrmJXwXJgi9B\nT8PZWxXQl9+qsXBXNhQ6J6V9TWlUtkZf+dAs9eO7qmqRdh6TYhyZgHFmO2lXa+y8\nuKMeDWrRRPDUr81Orz9toJsXii0kBwOeAs31/58lUm5aUlf/xLkCa2Uf5XDQJvF8\nkNxSCydtk3SA3n9qpQAUTCEq1jEgTJw722s0vETDiwbLyQxyVgZdhUdkuROQGCf9\noIKS7IPwoJibssdK7ypG+8BjthoavP/Bdi7ZfCzV1pGxzRhdex7I7nnDAqJNV7Xg\nK9WaLtUqfvdygcysNGCC4PqlR2xEH73qTtQJpJafj8L+dSzqcjTtCDbN/KG0pvgP\nLjqM26wwUgQ5F3wdqJuI0PdWTredkuOFqFEIW3MBH+MiHlLw/hgC21grX/SOP2Tk\nIwRIn+HyKGOB57krB6HcVVDqBAg0x0ptAmYU6NizOH7CP9/q5MTbpBFJOdSrFIAe\n0z7C379wJLN/tTxm0BsQ0Yxwh63V6qIFMkSlfcUYpOYoURq8p2I=\n=c+gc\n-----END PGP SIGNATURE-----",
        "payload": "tree 4e4ca241e0c583aa4b3d3e1d64231269ec4f8d93\nparent d82c5d15c504f8c5eaa1fb890fe7f5dfe750946f\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1522741916 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1526945273 +0900\n\n[wallet] Add KeyType enum\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ca546a36b9966f566aed437a78d8df3719b1889",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ca546a36b9966f566aed437a78d8df3719b1889",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ca546a36b9966f566aed437a78d8df3719b1889/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d82c5d15c504f8c5eaa1fb890fe7f5dfe750946f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d82c5d15c504f8c5eaa1fb890fe7f5dfe750946f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d82c5d15c504f8c5eaa1fb890fe7f5dfe750946f"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f197cfaafeaebf9e4fd7953bad243f8056bcfec9",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ca546a36b9966f566aed437a78d8df3719b1889/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ca546a36b9966f566aed437a78d8df3719b1889/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=0ca546a36b9966f566aed437a78d8df3719b1889",
        "patch": "@@ -23,6 +23,29 @@\n  */\n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;\n \n+/**\n+ * Key type, based on Electrum 3.0 extension:\n+ * https://github.com/spesmilo/electrum/blob/82e88cb89df35288b80dfdbe071da74247351251/RELEASE-NOTES#L95-L108\n+ */\n+enum KeyType\n+{\n+    // Legacy style\n+    KEY_P2PKH_UNCOMPRESSED = 0x00,\n+    KEY_P2PKH_COMPRESSED   = 0x01,\n+    // New style\n+    KEY_P2PKH              = 0x10,   // compressed P2PKH, same as 0x01\n+    KEY_P2WPKH             = 0x11,\n+    KEY_P2WPKH_P2SH        = 0x12,\n+    KEY_P2SH               = 0x13,\n+    KEY_P2WSH              = 0x14,\n+    KEY_P2WSH_P2SH         = 0x15,\n+    // Ranges for validity\n+    KEY_RANGE_LEGACY_START = KEY_P2PKH_UNCOMPRESSED,\n+    KEY_RANGE_LEGACY_END   = KEY_P2PKH_COMPRESSED,\n+    KEY_RANGE_START        = KEY_P2PKH,\n+    KEY_RANGE_END          = KEY_P2WSH_P2SH,\n+};\n+\n /** An encapsulated private key. */\n class CKey\n {"
      }
    ]
  },
  {
    "sha": "f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2IwNjRjMDBhNWNiOWYxYmI4Yzk4YmJiODc0ZThjMmQxMjg4Zjdl",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-04-03T07:18:46Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-21T23:27:54Z"
      },
      "message": "[wallet] Switch to using KeyType in CKey",
      "tree": {
        "sha": "8499d0c9f6d15bd3fb3e183721f370aa6a08e3d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8499d0c9f6d15bd3fb3e183721f370aa6a08e3d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlsDVfoACgkQV692LbM1\nMyJ3Kw//Tq83hOLVJUfbKA/XO73Ws4IwH2fWqCQz+bpI9tWX/yZYPDEastakf4fa\nJSS51XVGP+ElAR78xkMEKmdoeGFKR5M0NYPWKQQvqzZrzIEx2LWq4XmZVumiCK7j\nStxIodJWywfq9Mgkny3bsBUr02s6hBeSCDGhWsATmck0GT/Bgey4VmRbPysRGdZc\nS2MtmrMUBX+VBpXbo/94t8NWc+QmbW9kReGPqgUIkbQD/TiAZfp/a4r70PIqtC3n\nPwcl1+dySGxCO5cf1Du0oK2pwgxGqZ2fIN++iKsXf+B7lHCIcVknE2MoZSns50rm\n0+XzpA2Y3uZl+dOuWYum3KIsigItjNdq/zpwfQpdt6s53nuKDms/drCGM5CMANZ8\nVkQ9jvLCfzhDrDWnPPEX3qSku/HIeLL5MVOqTbVNjNvKppvsSrRtn3sEPe7hMB2w\nWHc8hfbToHdHqfEpkLjT6Gx1fr9Z10rGmkbky464r5FQOwiWRkbe7eUNGtBHkj2U\nLkDNOxTpiXXi5jEQ3iiRW5jrVGTSuAs56jVIiWv9+Nqt4g/7LoVlMHHtFpC/sTs7\nagtvG5WpfDOlcJ0Fm6ZwJdtTA/0q16sr2c9R/wnEtnAvQryVveLD+9Vixl0eDMov\nAwfOmVyqW8uh0kC1MJ81CE1eDVr9xJCE3dAxdyxYAG+OW2iuhqM=\n=aXP1\n-----END PGP SIGNATURE-----",
        "payload": "tree 8499d0c9f6d15bd3fb3e183721f370aa6a08e3d9\nparent 0ca546a36b9966f566aed437a78d8df3719b1889\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1522739926 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1526945274 +0900\n\n[wallet] Switch to using KeyType in CKey\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ca546a36b9966f566aed437a78d8df3719b1889",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ca546a36b9966f566aed437a78d8df3719b1889",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ca546a36b9966f566aed437a78d8df3719b1889"
      }
    ],
    "stats": {
      "total": 172,
      "additions": 93,
      "deletions": 79
    },
    "files": [
      {
        "sha": "21e1529b06bed23f83ab93e5ca93e9b2d632d3b5",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -25,7 +25,7 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n     // Add some keys to the keystore:\n     CKey key[4];\n     for (int i = 0; i < 4; i++) {\n-        key[i].MakeNewKey(i % 2);\n+        key[i].MakeNewKeyWithType(KEY_P2PKH_COMPRESSED_FLAG(i % 2));\n         keystoreRet.AddKey(key[i]);\n     }\n "
      },
      {
        "sha": "7ad1b756c41eee1b7c50af72dd0e7d4d812efdd8",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -62,7 +62,7 @@ static void VerifyScriptBench(benchmark::State& state)\n             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1\n         }\n     };\n-    key.Set(vchKey.begin(), vchKey.end(), false);\n+    key.SetWithType(vchKey.begin(), vchKey.end(), KEY_P2PKH_UNCOMPRESSED);\n     CPubKey pubkey = key.GetPubKey();\n     uint160 pubkeyHash;\n     CHash160().Write(pubkey.begin(), pubkey.size()).Finalize(pubkeyHash.begin());"
      },
      {
        "sha": "09b960617c14ee03d100bd0d57c667ca25a87571",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -155,12 +155,12 @@ bool CKey::Check(const unsigned char *vch) {\n     return secp256k1_ec_seckey_verify(secp256k1_context_sign, vch);\n }\n \n-void CKey::MakeNewKey(bool fCompressedIn) {\n+void CKey::MakeNewKeyWithType(KeyType type) {\n     do {\n         GetStrongRandBytes(keydata.data(), keydata.size());\n     } while (!Check(keydata.data()));\n     fValid = true;\n-    fCompressed = fCompressedIn;\n+    m_type = type;\n }\n \n CPrivKey CKey::GetPrivKey() const {\n@@ -170,7 +170,7 @@ CPrivKey CKey::GetPrivKey() const {\n     size_t privkeylen;\n     privkey.resize(PRIVATE_KEY_SIZE);\n     privkeylen = PRIVATE_KEY_SIZE;\n-    ret = ec_privkey_export_der(secp256k1_context_sign, privkey.data(), &privkeylen, begin(), fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);\n+    ret = ec_privkey_export_der(secp256k1_context_sign, privkey.data(), &privkeylen, begin(), KEY_SECP256K1_EC_COMPRESSED_FLAG(m_type));\n     assert(ret);\n     privkey.resize(privkeylen);\n     return privkey;\n@@ -183,7 +183,7 @@ CPubKey CKey::GetPubKey() const {\n     CPubKey result;\n     int ret = secp256k1_ec_pubkey_create(secp256k1_context_sign, &pubkey, begin());\n     assert(ret);\n-    secp256k1_ec_pubkey_serialize(secp256k1_context_sign, (unsigned char*)result.begin(), &clen, &pubkey, fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);\n+    secp256k1_ec_pubkey_serialize(secp256k1_context_sign, (unsigned char*)result.begin(), &clen, &pubkey, KEY_SECP256K1_EC_COMPRESSED_FLAG(m_type));\n     assert(result.size() == clen);\n     assert(result.IsValid());\n     return result;\n@@ -205,7 +205,7 @@ bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_\n }\n \n bool CKey::VerifyPubKey(const CPubKey& pubkey) const {\n-    if (pubkey.IsCompressed() != fCompressed) {\n+    if (pubkey.IsCompressed() != KEY_IS_COMPRESSED(m_type)) {\n         return false;\n     }\n     unsigned char rnd[8];\n@@ -229,14 +229,14 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n     secp256k1_ecdsa_recoverable_signature_serialize_compact(secp256k1_context_sign, &vchSig[1], &rec, &sig);\n     assert(ret);\n     assert(rec != -1);\n-    vchSig[0] = 27 + rec + (fCompressed ? 4 : 0);\n+    vchSig[0] = 27 + rec + (KEY_IS_COMPRESSED(m_type) ? 4 : 0);\n     return true;\n }\n \n bool CKey::Load(const CPrivKey &privkey, const CPubKey &vchPubKey, bool fSkipCheck=false) {\n     if (!ec_privkey_import_der(secp256k1_context_sign, (unsigned char*)begin(), privkey.data(), privkey.size()))\n         return false;\n-    fCompressed = vchPubKey.IsCompressed();\n+    m_type = KEY_P2PKH_COMPRESSED_FLAG(vchPubKey.IsCompressed());\n     fValid = true;\n \n     if (fSkipCheck)\n@@ -247,7 +247,7 @@ bool CKey::Load(const CPrivKey &privkey, const CPubKey &vchPubKey, bool fSkipChe\n \n bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {\n     assert(IsValid());\n-    assert(IsCompressed());\n+    assert(KEY_IS_COMPRESSED(m_type));\n     std::vector<unsigned char, secure_allocator<unsigned char>> vout(64);\n     if ((nChild >> 31) == 0) {\n         CPubKey pubkey = GetPubKey();\n@@ -260,7 +260,7 @@ bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const\n     memcpy(ccChild.begin(), vout.data()+32, 32);\n     memcpy((unsigned char*)keyChild.begin(), begin(), 32);\n     bool ret = secp256k1_ec_privkey_tweak_add(secp256k1_context_sign, (unsigned char*)keyChild.begin(), vout.data());\n-    keyChild.fCompressed = true;\n+    keyChild.m_type = KEY_P2PKH_COMPRESSED;\n     keyChild.fValid = ret;\n     return ret;\n }\n@@ -277,7 +277,7 @@ void CExtKey::SetSeed(const unsigned char *seed, unsigned int nSeedLen) {\n     static const unsigned char hashkey[] = {'B','i','t','c','o','i','n',' ','s','e','e','d'};\n     std::vector<unsigned char, secure_allocator<unsigned char>> vout(64);\n     CHMAC_SHA512(hashkey, sizeof(hashkey)).Write(seed, nSeedLen).Finalize(vout.data());\n-    key.Set(vout.data(), vout.data() + 32, true);\n+    key.SetWithType(vout.data(), vout.data() + 32, KEY_P2PKH_COMPRESSED);\n     memcpy(chaincode.begin(), vout.data() + 32, 32);\n     nDepth = 0;\n     nChild = 0;\n@@ -310,12 +310,12 @@ void CExtKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {\n     memcpy(vchFingerprint, code+1, 4);\n     nChild = (code[5] << 24) | (code[6] << 16) | (code[7] << 8) | code[8];\n     memcpy(chaincode.begin(), code+9, 32);\n-    key.Set(code+42, code+BIP32_EXTKEY_SIZE, true);\n+    key.SetWithType(code+42, code+BIP32_EXTKEY_SIZE, KEY_P2PKH_COMPRESSED);\n }\n \n bool ECC_InitSanityCheck() {\n     CKey key;\n-    key.MakeNewKey(true);\n+    key.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n     CPubKey pubkey = key.GetPubKey();\n     return key.VerifyPubKey(pubkey);\n }"
      },
      {
        "sha": "922b2e5b8ade8b89889c575b13aab6a9ee23806a",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 22,
        "deletions": 9,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -46,6 +46,18 @@ enum KeyType\n     KEY_RANGE_END          = KEY_P2WSH_P2SH,\n };\n \n+// SECP256K1_EC_* conversion with KeyType\n+#define KEY_SECP256K1_EC_COMPRESSED_FLAG(type) ((type) != KEY_P2PKH_UNCOMPRESSED ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED)\n+\n+// Temporary helper for converting compressed=true/false into KEY_P2PKH_*\n+#define KEY_P2PKH_COMPRESSED_FLAG(flag) ((flag) ? KEY_P2PKH_COMPRESSED : KEY_P2PKH_UNCOMPRESSED)\n+\n+// Helper for 'is compressed' check\n+#define KEY_IS_COMPRESSED(type) (type != KEY_P2PKH_UNCOMPRESSED)\n+\n+// Validity check\n+#define KEY_VALID_TYPE(type) ((type >= KEY_RANGE_LEGACY_START && type <= KEY_RANGE_LEGACY_END) || (type >= KEY_RANGE_START && type <= KEY_RANGE_END))\n+\n /** An encapsulated private key. */\n class CKey\n {\n@@ -68,8 +80,9 @@ class CKey\n     //! data, so fValid should always correspond to the actual state.\n     bool fValid;\n \n-    //! Whether the public key corresponding to this private key is (to be) compressed.\n-    bool fCompressed;\n+    //! The key type, used to determine which kinds of addresses should be\n+    //! tracked.\n+    KeyType m_type;\n \n     //! The actual byte data\n     std::vector<unsigned char, secure_allocator<unsigned char> > keydata;\n@@ -79,29 +92,29 @@ class CKey\n \n public:\n     //! Construct an invalid private key.\n-    CKey() : fValid(false), fCompressed(false)\n+    CKey() : fValid(false), m_type(KEY_P2PKH_UNCOMPRESSED)\n     {\n         // Important: vch must be 32 bytes in length to not break serialization\n         keydata.resize(32);\n     }\n \n     friend bool operator==(const CKey& a, const CKey& b)\n     {\n-        return a.fCompressed == b.fCompressed &&\n+        return a.m_type == b.m_type &&\n             a.size() == b.size() &&\n             memcmp(a.keydata.data(), b.keydata.data(), a.size()) == 0;\n     }\n \n     //! Initialize using begin and end iterators to byte data.\n     template <typename T>\n-    void Set(const T pbegin, const T pend, bool fCompressedIn)\n+    void SetWithType(const T pbegin, const T pend, KeyType type_in)\n     {\n         if (size_t(pend - pbegin) != keydata.size()) {\n             fValid = false;\n         } else if (Check(&pbegin[0])) {\n             memcpy(keydata.data(), (unsigned char*)&pbegin[0], keydata.size());\n-            fValid = true;\n-            fCompressed = fCompressedIn;\n+            fValid = KEY_VALID_TYPE(type_in);\n+            m_type = type_in;\n         } else {\n             fValid = false;\n         }\n@@ -116,10 +129,10 @@ class CKey\n     bool IsValid() const { return fValid; }\n \n     //! Check whether the public key corresponding to this private key is (to be) compressed.\n-    bool IsCompressed() const { return fCompressed; }\n+    KeyType GetType() const { return m_type; }\n \n     //! Generate a new private key using a cryptographic PRNG.\n-    void MakeNewKey(bool fCompressed);\n+    void MakeNewKeyWithType(KeyType type);\n \n     /**\n      * Convert the private key to a CPrivKey (serialized OpenSSL private key data)."
      },
      {
        "sha": "fe6bd7f6d63b3db621843a94f710ebc227a116ff",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -136,10 +136,11 @@ CKey DecodeSecret(const std::string& str)\n     std::vector<unsigned char> data;\n     if (DecodeBase58Check(str, data)) {\n         const std::vector<unsigned char>& privkey_prefix = Params().Base58Prefix(CChainParams::SECRET_KEY);\n-        if ((data.size() == 32 + privkey_prefix.size() || (data.size() == 33 + privkey_prefix.size() && data.back() == 1)) &&\n+        bool typed = data.size() == 33 + privkey_prefix.size();\n+        if ((data.size() == 32 + privkey_prefix.size() || (typed && data.back() != 0)) &&\n             std::equal(privkey_prefix.begin(), privkey_prefix.end(), data.begin())) {\n-            bool compressed = data.size() == 33 + privkey_prefix.size();\n-            key.Set(data.begin() + privkey_prefix.size(), data.begin() + privkey_prefix.size() + 32, compressed);\n+            KeyType type = typed ? (KeyType)data.back() : KEY_P2PKH_UNCOMPRESSED;\n+            key.SetWithType(data.begin() + privkey_prefix.size(), data.begin() + privkey_prefix.size() + 32, type);\n         }\n     }\n     memory_cleanse(data.data(), data.size());\n@@ -151,7 +152,7 @@ std::string EncodeSecret(const CKey& key)\n     assert(key.IsValid());\n     std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::SECRET_KEY);\n     data.insert(data.end(), key.begin(), key.end());\n-    if (key.IsCompressed()) {\n+    if (KEY_IS_COMPRESSED(key.GetType())) {\n         data.push_back(1);\n     }\n     std::string ret = EncodeBase58Check(data);"
      },
      {
        "sha": "91529dc3efa7e586f07254ef3196b68ef67049a6",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -199,6 +199,6 @@ CKeyID GetKeyForDestination(const CKeyStore& store, const CTxDestination& dest)\n bool HaveKey(const CKeyStore& store, const CKey& key)\n {\n     CKey key2;\n-    key2.Set(key.begin(), key.end(), !key.IsCompressed());\n+    key2.SetWithType(key.begin(), key.end(), KEY_IS_COMPRESSED(key.GetType()) ? KEY_P2PKH_UNCOMPRESSED : KEY_P2PKH_COMPRESSED);\n     return store.HaveKey(key.GetPubKey().GetID()) || store.HaveKey(key2.GetPubKey().GetID());\n }"
      },
      {
        "sha": "e3db2918e3bea253cfe23ea48a7759a58dce79e6",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -62,7 +62,7 @@ void TestAddAddressesToSendBook()\n \n     auto build_address = [&wallet]() {\n         CKey key;\n-        key.MakeNewKey(true);\n+        key.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n         CTxDestination dest(GetDestinationForKey(\n             key.GetPubKey(), wallet.m_default_address_type));\n "
      },
      {
        "sha": "f98755bef5c7d61545b65b5802bb1312a28a1e42",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -23,7 +23,7 @@ bool TransactionSignatureCreator::CreateSig(const SigningProvider& provider, std\n         return false;\n \n     // Signing with uncompressed keys is disabled in witness scripts\n-    if (sigversion == SigVersion::WITNESS_V0 && !key.IsCompressed())\n+    if (sigversion == SigVersion::WITNESS_V0 && key.GetType() == KEY_P2PKH_UNCOMPRESSED)\n         return false;\n \n     uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion);"
      },
      {
        "sha": "0104712f6acafbc692ed0819947a943c8207698e",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -304,7 +304,7 @@ static CTransactionRef RandomOrphan()\n BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n {\n     CKey key;\n-    key.MakeNewKey(true);\n+    key.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n     CBasicKeyStore keystore;\n     keystore.AddKey(key);\n "
      },
      {
        "sha": "58cc6c96d41b245c54a05480dd176841945e4598",
        "filename": "src/test/key_io_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/test/key_io_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/test/key_io_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_io_tests.cpp?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -45,7 +45,7 @@ BOOST_AUTO_TEST_CASE(key_io_valid_parse)\n             // Must be valid private key\n             privkey = DecodeSecret(exp_base58string);\n             BOOST_CHECK_MESSAGE(privkey.IsValid(), \"!IsValid:\" + strTest);\n-            BOOST_CHECK_MESSAGE(privkey.IsCompressed() == isCompressed, \"compressed mismatch:\" + strTest);\n+            BOOST_CHECK_MESSAGE(KEY_IS_COMPRESSED(privkey.GetType()) == isCompressed, \"type mismatch:\" + strTest);\n             BOOST_CHECK_MESSAGE(privkey.size() == exp_payload.size() && std::equal(privkey.begin(), privkey.end(), exp_payload.begin()), \"key mismatch:\" + strTest);\n \n             // Private key must be invalid public key\n@@ -101,7 +101,7 @@ BOOST_AUTO_TEST_CASE(key_io_valid_gen)\n         if (isPrivkey) {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n             CKey key;\n-            key.Set(exp_payload.begin(), exp_payload.end(), isCompressed);\n+            key.SetWithType(exp_payload.begin(), exp_payload.end(), KEY_P2PKH_COMPRESSED_FLAG(isCompressed));\n             assert(key.IsValid());\n             BOOST_CHECK_MESSAGE(EncodeSecret(key) == exp_base58string, \"result mismatch: \" + strTest);\n         } else {"
      },
      {
        "sha": "e24706c3e9bea6119006e15471cd6bdd8a4ef189",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -33,13 +33,13 @@ BOOST_FIXTURE_TEST_SUITE(key_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(key_test1)\n {\n     CKey key1  = DecodeSecret(strSecret1);\n-    BOOST_CHECK(key1.IsValid() && !key1.IsCompressed());\n+    BOOST_CHECK(key1.IsValid() && !KEY_IS_COMPRESSED(key1.GetType()));\n     CKey key2  = DecodeSecret(strSecret2);\n-    BOOST_CHECK(key2.IsValid() && !key2.IsCompressed());\n+    BOOST_CHECK(key2.IsValid() && !KEY_IS_COMPRESSED(key2.GetType()));\n     CKey key1C = DecodeSecret(strSecret1C);\n-    BOOST_CHECK(key1C.IsValid() && key1C.IsCompressed());\n+    BOOST_CHECK(key1C.IsValid() && KEY_IS_COMPRESSED(key1C.GetType()));\n     CKey key2C = DecodeSecret(strSecret2C);\n-    BOOST_CHECK(key2C.IsValid() && key2C.IsCompressed());\n+    BOOST_CHECK(key2C.IsValid() && KEY_IS_COMPRESSED(key2C.GetType()));\n     CKey bad_key = DecodeSecret(strAddressBad);\n     BOOST_CHECK(!bad_key.IsValid());\n "
      },
      {
        "sha": "9dfd955151aa239522555a8b4aa82d2cc22e4014",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -43,7 +43,7 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     CKey key[4];\n     CAmount amount = 0;\n     for (int i = 0; i < 4; i++)\n-        key[i].MakeNewKey(true);\n+        key[i].MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n \n     CScript a_and_b;\n     a_and_b << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n@@ -139,7 +139,7 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n {\n     CKey key[4];\n     for (int i = 0; i < 4; i++)\n-        key[i].MakeNewKey(true);\n+        key[i].MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n \n     txnouttype whichType;\n \n@@ -178,7 +178,7 @@ BOOST_AUTO_TEST_CASE(multisig_Sign)\n     CKey key[4];\n     for (int i = 0; i < 4; i++)\n     {\n-        key[i].MakeNewKey(true);\n+        key[i].MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n         keystore.AddKey(key[i]);\n     }\n "
      },
      {
        "sha": "d5c4c7835c5b8be5cfb6fba43ffb20d301b6add2",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -60,7 +60,7 @@ BOOST_AUTO_TEST_CASE(sign)\n     CKey key[4];\n     for (int i = 0; i < 4; i++)\n     {\n-        key[i].MakeNewKey(true);\n+        key[i].MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n         keystore.AddKey(key[i]);\n     }\n \n@@ -158,7 +158,7 @@ BOOST_AUTO_TEST_CASE(set)\n     std::vector<CPubKey> keys;\n     for (int i = 0; i < 4; i++)\n     {\n-        key[i].MakeNewKey(true);\n+        key[i].MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n         keystore.AddKey(key[i]);\n         keys.push_back(key[i].GetPubKey());\n     }\n@@ -265,7 +265,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     std::vector<CPubKey> keys;\n     for (int i = 0; i < 6; i++)\n     {\n-        key[i].MakeNewKey(true);\n+        key[i].MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n         keystore.AddKey(key[i]);\n     }\n     for (int i = 0; i < 3; i++)"
      },
      {
        "sha": "912c5bad96dca2292877e8fccdf46d72a90c0559",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -20,7 +20,7 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n     CKey keys[3];\n     CPubKey pubkeys[3];\n     for (int i = 0; i < 3; i++) {\n-        keys[i].MakeNewKey(true);\n+        keys[i].MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n         pubkeys[i] = keys[i].GetPubKey();\n     }\n \n@@ -123,7 +123,7 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_failure)\n {\n     CKey key;\n     CPubKey pubkey;\n-    key.MakeNewKey(true);\n+    key.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n     pubkey = key.GetPubKey();\n \n     CScript s;\n@@ -180,7 +180,7 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n {\n     CKey key;\n     CPubKey pubkey;\n-    key.MakeNewKey(true);\n+    key.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n     pubkey = key.GetPubKey();\n \n     CScript s;\n@@ -250,7 +250,7 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     CKey keys[3];\n     CPubKey pubkeys[3];\n     for (int i = 0; i < 3; i++) {\n-        keys[i].MakeNewKey(true);\n+        keys[i].MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n         pubkeys[i] = keys[i].GetPubKey();\n     }\n \n@@ -316,7 +316,7 @@ BOOST_AUTO_TEST_CASE(script_standard_GetScriptFor_)\n     CKey keys[3];\n     CPubKey pubkeys[3];\n     for (int i = 0; i < 3; i++) {\n-        keys[i].MakeNewKey(true);\n+        keys[i].MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n         pubkeys[i] = keys[i].GetPubKey();\n     }\n \n@@ -388,12 +388,12 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n     CKey keys[2];\n     CPubKey pubkeys[2];\n     for (int i = 0; i < 2; i++) {\n-        keys[i].MakeNewKey(true);\n+        keys[i].MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n         pubkeys[i] = keys[i].GetPubKey();\n     }\n \n     CKey uncompressedKey;\n-    uncompressedKey.MakeNewKey(false);\n+    uncompressedKey.MakeNewKeyWithType(KEY_P2PKH_UNCOMPRESSED);\n     CPubKey uncompressedPubkey = uncompressedKey.GetPubKey();\n \n     CScript scriptPubKey;"
      },
      {
        "sha": "cce22fcb9d1a39a87cca38517015b39fd6f53775",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -250,20 +250,20 @@ struct KeyData\n     KeyData()\n     {\n \n-        key0.Set(vchKey0, vchKey0 + 32, false);\n-        key0C.Set(vchKey0, vchKey0 + 32, true);\n+        key0.SetWithType(vchKey0, vchKey0 + 32, KEY_P2PKH_UNCOMPRESSED);\n+        key0C.SetWithType(vchKey0, vchKey0 + 32, KEY_P2PKH_COMPRESSED);\n         pubkey0 = key0.GetPubKey();\n         pubkey0H = key0.GetPubKey();\n         pubkey0C = key0C.GetPubKey();\n         *const_cast<unsigned char*>(&pubkey0H[0]) = 0x06 | (pubkey0H[64] & 1);\n \n-        key1.Set(vchKey1, vchKey1 + 32, false);\n-        key1C.Set(vchKey1, vchKey1 + 32, true);\n+        key1.SetWithType(vchKey1, vchKey1 + 32, KEY_P2PKH_UNCOMPRESSED);\n+        key1C.SetWithType(vchKey1, vchKey1 + 32, KEY_P2PKH_COMPRESSED);\n         pubkey1 = key1.GetPubKey();\n         pubkey1C = key1C.GetPubKey();\n \n-        key2.Set(vchKey2, vchKey2 + 32, false);\n-        key2C.Set(vchKey2, vchKey2 + 32, true);\n+        key2.SetWithType(vchKey2, vchKey2 + 32, KEY_P2PKH_UNCOMPRESSED);\n+        key2C.SetWithType(vchKey2, vchKey2 + 32, KEY_P2PKH_COMPRESSED);\n         pubkey2 = key2.GetPubKey();\n         pubkey2C = key2C.GetPubKey();\n     }\n@@ -1066,9 +1066,9 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n {\n     ScriptError err;\n     CKey key1, key2, key3;\n-    key1.MakeNewKey(true);\n-    key2.MakeNewKey(false);\n-    key3.MakeNewKey(true);\n+    key1.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n+    key2.MakeNewKeyWithType(KEY_P2PKH_UNCOMPRESSED);\n+    key3.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n \n     CScript scriptPubKey12;\n     scriptPubKey12 << OP_1 << ToByteVector(key1.GetPubKey()) << ToByteVector(key2.GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n@@ -1096,10 +1096,10 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n {\n     ScriptError err;\n     CKey key1, key2, key3, key4;\n-    key1.MakeNewKey(true);\n-    key2.MakeNewKey(false);\n-    key3.MakeNewKey(true);\n-    key4.MakeNewKey(false);\n+    key1.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n+    key2.MakeNewKeyWithType(KEY_P2PKH_UNCOMPRESSED);\n+    key3.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n+    key4.MakeNewKeyWithType(KEY_P2PKH_UNCOMPRESSED);\n \n     CScript scriptPubKey23;\n     scriptPubKey23 << OP_2 << ToByteVector(key1.GetPubKey()) << ToByteVector(key2.GetPubKey()) << ToByteVector(key3.GetPubKey()) << OP_3 << OP_CHECKMULTISIG;\n@@ -1171,7 +1171,7 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     for (int i = 0; i < 3; i++)\n     {\n         CKey key;\n-        key.MakeNewKey(i%2 == 1);\n+        key.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED_FLAG(i%2));\n         keys.push_back(key);\n         pubkeys.push_back(key.GetPubKey());\n         keystore.AddKey(key);"
      },
      {
        "sha": "f1575c6b0526b62c96b21005ae43d5911f574436",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -48,7 +48,7 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n     for (int i = 0; i < 3; i++)\n     {\n         CKey k;\n-        k.MakeNewKey(true);\n+        k.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n         keys.push_back(k.GetPubKey());\n     }\n     CScript s2 = GetScriptForMultisig(1, keys);\n@@ -118,7 +118,7 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n     CCoinsViewCache coins(&coinsDummy);\n     // Create key\n     CKey key;\n-    key.MakeNewKey(true);\n+    key.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n     CPubKey pubkey = key.GetPubKey();\n     // Default flags\n     int flags = SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH;"
      },
      {
        "sha": "0d6e6854f2460fa8bec162776a836e3bacdbd272",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -123,7 +123,7 @@ TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)\n     // TODO: fix the code to support SegWit blocks.\n     UpdateVersionBitsParameters(Consensus::DEPLOYMENT_SEGWIT, 0, Consensus::BIP9Deployment::NO_TIMEOUT);\n     // Generate a 100-block chain:\n-    coinbaseKey.MakeNewKey(true);\n+    coinbaseKey.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n     CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n     for (int i = 0; i < COINBASE_MATURITY; i++)\n     {"
      },
      {
        "sha": "cb1158fcdd7e0ef64b895c316bc72c184ddaadee",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -296,7 +296,7 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n     CKey key[4];\n     for (int i = 0; i < 4; i++)\n     {\n-        key[i].MakeNewKey(i % 2);\n+        key[i].MakeNewKeyWithType(KEY_P2PKH_COMPRESSED_FLAG(i % 2));\n         keystoreRet.AddKey(key[i]);\n     }\n \n@@ -419,7 +419,7 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction) {\n     mtx.nVersion = 1;\n \n     CKey key;\n-    key.MakeNewKey(true); // Need to use compressed keys in segwit or the signing will fail\n+    key.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED); // Need to use compressed keys in segwit or the signing will fail\n     CBasicKeyStore keystore;\n     keystore.AddKeyPubKey(key, key.GetPubKey());\n     CKeyID hash = key.GetPubKey().GetID();\n@@ -499,11 +499,11 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CBasicKeyStore keystore, keystore2;\n     CKey key1, key2, key3, key1L, key2L;\n     CPubKey pubkey1, pubkey2, pubkey3, pubkey1L, pubkey2L;\n-    key1.MakeNewKey(true);\n-    key2.MakeNewKey(true);\n-    key3.MakeNewKey(true);\n-    key1L.MakeNewKey(false);\n-    key2L.MakeNewKey(false);\n+    key1.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n+    key2.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n+    key3.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n+    key1L.MakeNewKeyWithType(KEY_P2PKH_UNCOMPRESSED);\n+    key2L.MakeNewKeyWithType(KEY_P2PKH_UNCOMPRESSED);\n     pubkey1 = key1.GetPubKey();\n     pubkey2 = key2.GetPubKey();\n     pubkey3 = key3.GetPubKey();\n@@ -685,7 +685,7 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     t.vout.resize(1);\n     t.vout[0].nValue = 90*CENT;\n     CKey key;\n-    key.MakeNewKey(true);\n+    key.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n     t.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n \n     std::string reason;"
      },
      {
        "sha": "96bb9777371c7bd91b19262c47dd315b7f62c085",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -137,7 +137,7 @@ static bool DecryptKey(const CKeyingMaterial& vMasterKey, const std::vector<unsi\n     if (vchSecret.size() != 32)\n         return false;\n \n-    key.Set(vchSecret.begin(), vchSecret.end(), vchPubKey.IsCompressed());\n+    key.SetWithType(vchSecret.begin(), vchSecret.end(), KEY_P2PKH_COMPRESSED_FLAG(vchPubKey.IsCompressed()));\n     return key.VerifyPubKey(vchPubKey);\n }\n "
      },
      {
        "sha": "e5066209d78394a4fd7dcf7dcf39d513a0267fad",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -86,7 +86,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n         key.clear();\n         key.setObject();\n         CKey futureKey;\n-        futureKey.MakeNewKey(true);\n+        futureKey.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n         key.pushKV(\"scriptPubKey\", HexStr(GetScriptForRawPubKey(futureKey.GetPubKey())));\n         key.pushKV(\"timestamp\", newTip->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1);\n         key.pushKV(\"internal\", UniValue(true));"
      },
      {
        "sha": "0625e611f5f78127b2e973d6cc6d5b024d694111",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f3b064c00a5cb9f1bb8c98bbb874e8c2d1288f7e",
        "patch": "@@ -168,7 +168,7 @@ CPubKey CWallet::GenerateNewKey(WalletBatch &batch, bool internal)\n     if (IsHDEnabled()) {\n         DeriveNewChildKey(batch, metadata, secret, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n     } else {\n-        secret.MakeNewKey(fCompressed);\n+        secret.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED_FLAG(fCompressed));\n     }\n \n     // Compressed public keys were introduced in version 0.6.0\n@@ -1453,7 +1453,7 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n CPubKey CWallet::GenerateNewSeed()\n {\n     CKey key;\n-    key.MakeNewKey(true);\n+    key.MakeNewKeyWithType(KEY_P2PKH_COMPRESSED);\n     return DeriveNewSeed(key);\n }\n "
      }
    ]
  }
]