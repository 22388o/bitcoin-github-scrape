[
  {
    "sha": "81608178cff793ee205a4f70481c76d34c5448a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTYwODE3OGNmZjc5M2VlMjA1YTRmNzA0ODFjNzZkMzRjNTQ0OGE0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-23T19:16:09Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-05-16T21:45:19Z"
      },
      "message": "[wallet] [rpc] Remove getlabeladdress RPC\n\nlabels are associated with addresses (rather than addresses being\nassociated with labels, as was the case with accounts). The\ngetlabeladdress does not make sense in this model, so remove it.\n\ngetaccountaddress is still supported for one release as the accounts\nAPI is deprecated.",
      "tree": {
        "sha": "3302a1f1dd2f8b658c71d9fe571bec9716aeef6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3302a1f1dd2f8b658c71d9fe571bec9716aeef6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81608178cff793ee205a4f70481c76d34c5448a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81608178cff793ee205a4f70481c76d34c5448a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81608178cff793ee205a4f70481c76d34c5448a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81608178cff793ee205a4f70481c76d34c5448a4/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cfe17c3382ba750131cdc8703b2978132822070",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cfe17c3382ba750131cdc8703b2978132822070",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cfe17c3382ba750131cdc8703b2978132822070"
      }
    ],
    "stats": {
      "total": 163,
      "additions": 85,
      "deletions": 78
    },
    "files": [
      {
        "sha": "f44e9703e93a1dca04e634e979ec88d29b7e60c6",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81608178cff793ee205a4f70481c76d34c5448a4/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81608178cff793ee205a4f70481c76d34c5448a4/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=81608178cff793ee205a4f70481c76d34c5448a4",
        "patch": "@@ -52,7 +52,6 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listreceivedbylabel\", 0, \"minconf\" },\n     { \"listreceivedbylabel\", 1, \"include_empty\" },\n     { \"listreceivedbylabel\", 2, \"include_watchonly\" },\n-    { \"getlabeladdress\", 1, \"force\" },\n     { \"getbalance\", 1, \"minconf\" },\n     { \"getbalance\", 2, \"include_watchonly\" },\n     { \"getblockhash\", 0, \"height\" },"
      },
      {
        "sha": "c0992880cf8be98e8060c1ffa29a0ac4f63e8e02",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 42,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81608178cff793ee205a4f70481c76d34c5448a4/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81608178cff793ee205a4f70481c76d34c5448a4/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=81608178cff793ee205a4f70481c76d34c5448a4",
        "patch": "@@ -196,60 +196,43 @@ CTxDestination GetLabelDestination(CWallet* const pwallet, const std::string& la\n     return dest;\n }\n \n-static UniValue getlabeladdress(const JSONRPCRequest& request)\n+static UniValue getaccountaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (!IsDeprecatedRPCEnabled(\"accounts\") && request.strMethod == \"getaccountaddress\") {\n+    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n         if (request.fHelp) {\n             throw std::runtime_error(\"getaccountaddress (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)\");\n         }\n         throw JSONRPCError(RPC_METHOD_DEPRECATED, \"getaccountaddress is deprecated and will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts.\");\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+    if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n-            \"getlabeladdress \\\"label\\\" ( force ) \\n\"\n-            \"\\nReturns the default receiving address for this label. This will reset to a fresh address once there's a transaction that spends to it.\\n\"\n+            \"getaccountaddress \\\"account\\\"\\n\"\n+            \"\\n\\nDEPRECATED. Returns the current Bitcoin address for receiving payments to this account.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"label\\\"         (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n-            \"2. \\\"force\\\"         (bool, optional) Whether the label should be created if it does not yet exist. If False, the RPC will return an error if called with a label that doesn't exist.\\n\"\n-            \"                                    Defaults to false (unless the getaccountaddress method alias is being called, in which case defaults to true for backwards compatibility).\\n\"\n+            \"1. \\\"account\\\"       (string, required) The account for the address. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.\\n\"\n             \"\\nResult:\\n\"\n-            \"\\\"address\\\"          (string) The current receiving address for the label.\\n\"\n+            \"\\\"address\\\"          (string) The account bitcoin address\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getlabeladdress\", \"\")\n-            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n-            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n-            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleCli(\"getaccountaddress\", \"\")\n+            + HelpExampleCli(\"getaccountaddress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getaccountaddress\", \"\\\"myaccount\\\"\")\n+            + HelpExampleRpc(\"getaccountaddress\", \"\\\"myaccount\\\"\")\n         );\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    // Parse the label first so we don't generate a key if there's an error\n-    std::string label = LabelFromValue(request.params[0]);\n-    bool force = request.strMethod == \"getaccountaddress\";\n-    if (!request.params[1].isNull()) {\n-        force = request.params[1].get_bool();\n-    }\n-\n-    bool label_found = false;\n-    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n-        if (item.second.name == label) {\n-            label_found = true;\n-            break;\n-        }\n-    }\n-    if (!force && !label_found) {\n-        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n-    }\n+    // Parse the account first so we don't generate a key if there's an error\n+    std::string account = LabelFromValue(request.params[0]);\n \n     UniValue ret(UniValue::VSTR);\n \n-    ret = EncodeDestination(GetLabelDestination(pwallet, label));\n+    ret = EncodeDestination(GetLabelDestination(pwallet, account));\n     return ret;\n }\n \n@@ -335,23 +318,33 @@ static UniValue setlabel(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     }\n \n+    std::string old_label = pwallet->mapAddressBook[dest].name;\n     std::string label = LabelFromValue(request.params[1]);\n \n     if (IsMine(*pwallet, dest)) {\n-        // Detect when changing the label of an address that is the receiving address of another label:\n-        // If so, delete the account record for it. Labels, unlike addresses, can be deleted,\n-        // and if we wouldn't do this, the record would stick around forever.\n-        if (pwallet->mapAddressBook.count(dest)) {\n-            std::string old_label = pwallet->mapAddressBook[dest].name;\n-            if (old_label != label && dest == GetLabelDestination(pwallet, old_label)) {\n-                pwallet->DeleteLabel(old_label);\n-            }\n-        }\n         pwallet->SetAddressBook(dest, label, \"receive\");\n+        if (request.strMethod == \"setaccount\" && old_label != label && dest == GetLabelDestination(pwallet, old_label)) {\n+            // for setaccount, call GetLabelDestination so a new receive address is created for the old account\n+            GetLabelDestination(pwallet, old_label, true);\n+        }\n     } else {\n         pwallet->SetAddressBook(dest, label, \"send\");\n     }\n \n+    // Detect when there are no addresses using this label.\n+    // If so, delete the account record for it. Labels, unlike addresses, can be deleted,\n+    // and if we wouldn't do this, the record would stick around forever.\n+    bool found_address = false;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            found_address = true;\n+            break;\n+        }\n+    }\n+    if (!found_address) {\n+        pwallet->DeleteLabel(old_label);\n+    }\n+\n     return NullUniValue;\n }\n \n@@ -4260,7 +4253,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"sethdseed\",                        &sethdseed,                     {\"newkeypool\",\"seed\"} },\n \n     /** Account functions (deprecated) */\n-    { \"wallet\",             \"getaccountaddress\",                &getlabeladdress,               {\"account\"} },\n+    { \"wallet\",             \"getaccountaddress\",                &getaccountaddress,             {\"account\"} },\n     { \"wallet\",             \"getaccount\",                       &getaccount,                    {\"address\"} },\n     { \"wallet\",             \"getaddressesbyaccount\",            &getaddressesbyaccount,         {\"account\"} },\n     { \"wallet\",             \"getreceivedbyaccount\",             &getreceivedbylabel,            {\"account\",\"minconf\"} },\n@@ -4270,7 +4263,6 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"move\",                             &movecmd,                       {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n \n     /** Label functions (to replace non-balance account functions) */\n-    { \"wallet\",             \"getlabeladdress\",                  &getlabeladdress,               {\"label\",\"force\"} },\n     { \"wallet\",             \"getaddressesbylabel\",              &getaddressesbylabel,           {\"label\"} },\n     { \"wallet\",             \"getreceivedbylabel\",               &getreceivedbylabel,            {\"label\",\"minconf\"} },\n     { \"wallet\",             \"listlabels\",                       &listlabels,                    {\"purpose\"} },"
      },
      {
        "sha": "bc27c183b126c2c3bec7fbba2ee2a024733a9500",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81608178cff793ee205a4f70481c76d34c5448a4/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81608178cff793ee205a4f70481c76d34c5448a4/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=81608178cff793ee205a4f70481c76d34c5448a4",
        "patch": "@@ -40,7 +40,6 @@ def run_test(self):\n         #\n         # The following 'label' RPC methods are usable both with and without the\n         # -deprecatedrpc=accounts switch enabled.\n-        # - getlabeladdress\n         # - getaddressesbylabel\n         # - getreceivedbylabel\n         # - listlabels\n@@ -69,10 +68,6 @@ def run_test(self):\n         assert_raises_rpc_error(-32, \"getaccountaddress is deprecated\", self.nodes[0].getaccountaddress, \"label0\")\n         self.nodes[1].getaccountaddress(\"label1\")\n \n-        self.log.info(\"- getlabeladdress\")\n-        self.nodes[0].getlabeladdress(\"label0\")\n-        self.nodes[1].getlabeladdress(\"label1\")\n-\n         self.log.info(\"- getaddressesbyaccount\")\n         assert_raises_rpc_error(-32, \"getaddressesbyaccount is deprecated\", self.nodes[0].getaddressesbyaccount, \"label0\")\n         self.nodes[1].getaddressesbyaccount(\"label1\")"
      },
      {
        "sha": "f5d7830fca8183daca8a4858a6ba8e205019bb93",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 51,
        "deletions": 30,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81608178cff793ee205a4f70481c76d34c5448a4/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81608178cff793ee205a4f70481c76d34c5448a4/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=81608178cff793ee205a4f70481c76d34c5448a4",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test label RPCs.\n \n RPCs tested are:\n-    - getlabeladdress\n+    - getaccountaddress\n     - getaddressesbyaccount/getaddressesbylabel\n     - listaddressgroupings\n     - setlabel\n@@ -92,17 +92,24 @@ def _run_subtest(self, accounts_api, node):\n         # recognize the label/address associations.\n         labels = [Label(name, accounts_api) for name in (\"a\", \"b\", \"c\", \"d\", \"e\")]\n         for label in labels:\n-            label.add_receive_address(node.getlabeladdress(label=label.name, force=True))\n+            if accounts_api:\n+                address = node.getaccountaddress(label.name)\n+            else:\n+                address = node.getnewaddress(label.name)\n+            label.add_receive_address(address)\n             label.verify(node)\n \n         # Check all labels are returned by listlabels.\n         assert_equal(node.listlabels(), [label.name for label in labels])\n \n         # Send a transaction to each label, and make sure this forces\n-        # getlabeladdress to generate a new receiving address.\n+        # getaccountaddress to generate a new receiving address.\n         for label in labels:\n-            node.sendtoaddress(label.receive_address, amount_to_send)\n-            label.add_receive_address(node.getlabeladdress(label.name))\n+            if accounts_api:\n+                node.sendtoaddress(label.receive_address, amount_to_send)\n+                label.add_receive_address(node.getaccountaddress(label.name))\n+            else:\n+                node.sendtoaddress(label.addresses[0], amount_to_send)\n             label.verify(node)\n \n         # Check the amounts received.\n@@ -115,10 +122,17 @@ def _run_subtest(self, accounts_api, node):\n         # Check that sendfrom label reduces listaccounts balances.\n         for i, label in enumerate(labels):\n             to_label = labels[(i + 1) % len(labels)]\n-            node.sendfrom(label.name, to_label.receive_address, amount_to_send)\n+            if accounts_api:\n+                node.sendfrom(label.name, to_label.receive_address, amount_to_send)\n+            else:\n+                node.sendfrom(label.name, to_label.addresses[0], amount_to_send)\n         node.generate(1)\n         for label in labels:\n-            label.add_receive_address(node.getlabeladdress(label.name))\n+            if accounts_api:\n+                address = node.getaccountaddress(label.name)\n+            else:\n+                address = node.getnewaddress(label.name)\n+            label.add_receive_address(address)\n             label.verify(node)\n             assert_equal(node.getreceivedbylabel(label.name), 2)\n             if accounts_api:\n@@ -134,12 +148,12 @@ def _run_subtest(self, accounts_api, node):\n \n         # Check that setlabel can assign a label to a new unused address.\n         for label in labels:\n-            address = node.getlabeladdress(label=\"\", force=True)\n+            address = node.getnewaddress()\n             node.setlabel(address, label.name)\n             label.add_address(address)\n             label.verify(node)\n             if accounts_api:\n-                assert(address not in node.getaddressesbyaccount(\"\"))\n+                assert address not in node.getaddressesbyaccount(\"\")\n             else:\n                 assert_raises_rpc_error(-11, \"No addresses with label\", node.getaddressesbylabel, \"\")\n \n@@ -160,19 +174,20 @@ def _run_subtest(self, accounts_api, node):\n \n         # Check that setlabel can change the label of an address from a\n         # different label.\n-        change_label(node, labels[0].addresses[0], labels[0], labels[1])\n-\n-        # Check that setlabel can change the label of an address which\n-        # is the receiving address of a different label.\n-        change_label(node, labels[0].receive_address, labels[0], labels[1])\n+        change_label(node, labels[0].addresses[0], labels[0], labels[1], accounts_api)\n \n         # Check that setlabel can set the label of an address already\n         # in the label. This is a no-op.\n-        change_label(node, labels[2].addresses[0], labels[2], labels[2])\n+        change_label(node, labels[2].addresses[0], labels[2], labels[2], accounts_api)\n+\n+        if accounts_api:\n+            # Check that setaccount can change the label of an address which\n+            # is the receiving address of a different label.\n+            change_label(node, labels[0].receive_address, labels[0], labels[1], accounts_api)\n \n-        # Check that setlabel can set the label of an address which is\n-        # already the receiving address of the label. This is a no-op.\n-        change_label(node, labels[2].receive_address, labels[2], labels[2])\n+            # Check that setaccount can set the label of an address which is\n+            # already the receiving address of the label. This is a no-op.\n+            change_label(node, labels[2].receive_address, labels[2], labels[2], accounts_api)\n \n class Label:\n     def __init__(self, name, accounts_api):\n@@ -192,12 +207,14 @@ def add_address(self, address):\n \n     def add_receive_address(self, address):\n         self.add_address(address)\n-        self.receive_address = address\n+        if self.accounts_api:\n+            self.receive_address = address\n \n     def verify(self, node):\n         if self.receive_address is not None:\n             assert self.receive_address in self.addresses\n-            assert_equal(node.getlabeladdress(self.name), self.receive_address)\n+            if self.accounts_api:\n+                assert_equal(node.getaccountaddress(self.name), self.receive_address)\n \n         for address in self.addresses:\n             assert_equal(\n@@ -216,22 +233,26 @@ def verify(self, node):\n             assert_equal(set(node.getaddressesbyaccount(self.name)), set(self.addresses))\n \n \n-def change_label(node, address, old_label, new_label):\n+def change_label(node, address, old_label, new_label, accounts_api):\n     assert_equal(address in old_label.addresses, True)\n-    node.setlabel(address, new_label.name)\n+    if accounts_api:\n+        node.setaccount(address, new_label.name)\n+    else:\n+        node.setlabel(address, new_label.name)\n \n     old_label.addresses.remove(address)\n     new_label.add_address(address)\n \n-    # Calling setlabel on an address which was previously the receiving\n-    # address of a different label should reset the receiving address of\n-    # the old label, causing getlabeladdress to return a brand new\n+    # Calling setaccount on an address which was previously the receiving\n+    # address of a different account should reset the receiving address of\n+    # the old account, causing getaccountaddress to return a brand new\n     # address.\n-    if old_label.name != new_label.name and address == old_label.receive_address:\n-        new_address = node.getlabeladdress(old_label.name)\n-        assert_equal(new_address not in old_label.addresses, True)\n-        assert_equal(new_address not in new_label.addresses, True)\n-        old_label.add_receive_address(new_address)\n+    if accounts_api:\n+        if old_label.name != new_label.name and address == old_label.receive_address:\n+            new_address = node.getaccountaddress(old_label.name)\n+            assert_equal(new_address not in old_label.addresses, True)\n+            assert_equal(new_address not in new_label.addresses, True)\n+            old_label.add_receive_address(new_address)\n \n     old_label.verify(node)\n     new_label.verify(node)"
      }
    ]
  },
  {
    "sha": "67e0e04140b3dfac12d628cee391d40b5fac5cfa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2N2UwZTA0MTQwYjNkZmFjMTJkNjI4Y2VlMzkxZDQwYjVmYWM1Y2Zh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-23T19:18:55Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-05-16T21:45:19Z"
      },
      "message": "[wallet] [docs] Update release notes for removing `getlabeladdress`",
      "tree": {
        "sha": "33e8d3011343bc6d0a12ec51c26e32841583267a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33e8d3011343bc6d0a12ec51c26e32841583267a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67e0e04140b3dfac12d628cee391d40b5fac5cfa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67e0e04140b3dfac12d628cee391d40b5fac5cfa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67e0e04140b3dfac12d628cee391d40b5fac5cfa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67e0e04140b3dfac12d628cee391d40b5fac5cfa/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "81608178cff793ee205a4f70481c76d34c5448a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81608178cff793ee205a4f70481c76d34c5448a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/81608178cff793ee205a4f70481c76d34c5448a4"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f4a95bd40fa45846761bd6d385bd591ef99620c2",
        "filename": "doc/release-notes-pr12892.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67e0e04140b3dfac12d628cee391d40b5fac5cfa/doc/release-notes-pr12892.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67e0e04140b3dfac12d628cee391d40b5fac5cfa/doc/release-notes-pr12892.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-pr12892.md?ref=67e0e04140b3dfac12d628cee391d40b5fac5cfa",
        "patch": "@@ -18,7 +18,7 @@ Here are the changes to RPC methods:\n | Deprecated Method       | New Method            | Notes       |\n | :---------------------- | :-------------------- | :-----------|\n | `getaccount`            | `getaddressinfo`      | `getaddressinfo` returns a json object with address information instead of just the name of the account as a string. |\n-| `getaccountaddress`     | `getlabeladdress`     | `getlabeladdress` throws an error by default if the label does not already exist, but provides a `force` option for compatibility with existing applications. |\n+| `getaccountaddress`     | n/a                   | There is no replacement for `getaccountaddress` since labels do not have an associated receive address. |\n | `getaddressesbyaccount` | `getaddressesbylabel` | `getaddressesbylabel` returns a json object with the addresses as keys, instead of a list of strings. |\n | `getreceivedbyaccount`  | `getreceivedbylabel`  | _no change in behavior_ |\n | `listaccounts`          | `listlabels`          | `listlabels` does not return a balance or accept `minconf` and `watchonly` arguments. |"
      }
    ]
  }
]