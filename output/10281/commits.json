[
  {
    "sha": "c26655ed3f102ac460ff6f6f5b4875707806c4e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjY2NTVlZDNmMTAyYWM0NjBmZjZmNmY1YjQ4NzU3MDc4MDZjNGU2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-26T05:10:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-05-02T05:51:49Z"
      },
      "message": "doc: Add RPC interface guidelines",
      "tree": {
        "sha": "97cce4d4ab6ee8cb2f7f6f5bb84d8b286a95ef1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97cce4d4ab6ee8cb2f7f6f5bb84d8b286a95ef1e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c26655ed3f102ac460ff6f6f5b4875707806c4e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c26655ed3f102ac460ff6f6f5b4875707806c4e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c26655ed3f102ac460ff6f6f5b4875707806c4e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c26655ed3f102ac460ff6f6f5b4875707806c4e6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0a7e1994e6f3ebbf076feb50552440a365fd317",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0a7e1994e6f3ebbf076feb50552440a365fd317",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0a7e1994e6f3ebbf076feb50552440a365fd317"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 73,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fd75ada79f28a9a0e6905cadb3a117bfc67615fd",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 73,
        "deletions": 0,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c26655ed3f102ac460ff6f6f5b4875707806c4e6/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c26655ed3f102ac460ff6f6f5b4875707806c4e6/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=c26655ed3f102ac460ff6f6f5b4875707806c4e6",
        "patch": "@@ -495,3 +495,76 @@ Git and GitHub tips\n   This will add an `upstream-pull` remote to your git repository, which can be fetched using `git fetch --all`\n   or `git fetch upstream-pull`. Afterwards, you can use `upstream-pull/NUMBER/head` in arguments to `git show`,\n   `git checkout` and anywhere a commit id would be acceptable to see the changes from pull request NUMBER.\n+\n+RPC interface guidelines\n+--------------------------\n+\n+A few guidelines for introducing and reviewing new RPC interfaces:\n+\n+- Method naming: use consecutive lower-case names such as `getrawtransaction` and `submitblock`\n+\n+  - *Rationale*: Consistency with existing interface.\n+\n+- Argument naming: use snake case `fee_delta` (and not, e.g. camel case `feeDelta`)\n+\n+  - *Rationale*: Consistency with existing interface.\n+\n+- Use the JSON parser for parsing, don't manually parse integers or strings from\n+  arguments unless absolutely necessary.\n+\n+  - *Rationale*: Introduces hand-rolled string manipulation code at both the caller and callee sites,\n+    which is error prone, and it is easy to get things such as escaping wrong.\n+    JSON already supports nested data structures, no need to re-invent the wheel.\n+\n+  - *Exception*: AmountToValue can parse amounts as string. This was introduced because many JSON\n+    parsers and formatters hard-code handling decimal numbers as floating point\n+    values, resulting in potential loss of precision. This is unacceptable for\n+    monetary values. **Always** use `AmountToValue` and `ValueToAmount` when\n+    inputting or outputting monetary values. The only exceptions to this are\n+    `prioritisetransaction` and `getblocktemplate` because their interface\n+    is specified as-is in BIP22.\n+\n+- Missing arguments and 'null' should be treated the same: as default values. If there is no\n+  default value, both cases should fail in the same way.\n+\n+  - *Rationale*: Avoids surprises when switching to name-based arguments. Missing name-based arguments\n+  are passed as 'null'.\n+\n+  - *Exception*: Many legacy exceptions to this exist, one of the worst ones is\n+    `getbalance` which follows a completely different code path based on the\n+    number of arguments. We are still in the process of cleaning these up. Do not introduce\n+    new ones.\n+\n+- Try not to overload methods on argument type. E.g. don't make `getblock(true)` and `getblock(\"hash\")`\n+  do different things.\n+\n+  - *Rationale*: This is impossible to use with `bitcoin-cli`, and can be surprising to users.\n+\n+  - *Exception*: Some RPC calls can take both an `int` and `bool`, most notably when a bool was switched\n+    to a multi-value, or due to other historical reasons. **Always** have false map to 0 and\n+    true to 1 in this case.\n+\n+- Don't forget to fill in the argument names correctly in the RPC command table.\n+\n+  - *Rationale*: If not, the call can not be used with name-based arguments.\n+\n+- Set okSafeMode in the RPC command table to a sensible value: safe mode is when the\n+  blockchain is regarded to be in a confused state, and the client deems it unsafe to\n+  do anything irreversible such as send. Anything that just queries should be permitted.\n+\n+  - *Rationale*: Troubleshooting a node in safe mode is difficult if half the\n+    RPCs don't work.\n+\n+- Add every non-string RPC argument `(method, idx, name)` to the table `vRPCConvertParams` in `rpc/client.cpp`.\n+\n+  - *Rationale*: `bitcoin-cli` and the GUI debug console use this table to determine how to\n+    convert a plaintext command line to JSON. If the types don't match, the method can be unusable\n+    from there.\n+\n+- A RPC method must either be a wallet method or a non-wallet method. Do not\n+  introduce new methods such as `getinfo` and `signrawtransaction` that differ\n+  in behavior based on presence of a wallet.\n+\n+  - *Rationale*: as well as complicating the implementation and interfering\n+    with the introduction of multi-wallet, wallet and non-wallet code should be\n+    separated to avoid introducing circular dependencies between code units."
      }
    ]
  }
]