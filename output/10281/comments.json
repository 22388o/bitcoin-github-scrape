[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297255651",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10281#issuecomment-297255651",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10281",
    "id": 297255651,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NzI1NTY1MQ==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-26T06:46:19Z",
    "updated_at": "2017-04-26T06:46:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Great addition.\r\nConcept ACK.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297255651/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/298434335",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10281#issuecomment-298434335",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10281",
    "id": 298434335,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODQzNDMzNQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-01T21:13:16Z",
    "updated_at": "2017-05-01T21:13:16Z",
    "author_association": "MEMBER",
    "body": "Looks good. ACK 359f71d0fb243fa49884132c0fb0c24118d77842",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/298434335/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/298453847",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10281#issuecomment-298453847",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10281",
    "id": 298453847,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODQ1Mzg0Nw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-01T22:52:42Z",
    "updated_at": "2017-05-01T22:52:42Z",
    "author_association": "MEMBER",
    "body": "ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/298453847/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113375884",
    "pull_request_review_id": 34756758,
    "id": 113375884,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzM3NTg4NA==",
    "diff_hunk": "@@ -495,3 +495,68 @@ Git and GitHub tips\n   This will add an `upstream-pull` remote to your git repository, which can be fetched using `git fetch --all`\n   or `git fetch upstream-pull`. Afterwards, you can use `upstream-pull/NUMBER/head` in arguments to `git show`,\n   `git checkout` and anywhere a commit id would be acceptable to see the changes from pull request NUMBER.\n+\n+RPC interface guidelines\n+--------------------------\n+\n+A few guidelines for introducing and reviewing new RPC interfaces:\n+\n+- Method naming: use consecutive lower-case names such as `getrawtransaction` and `submitblock`\n+\n+  - *Rationale*: Consistency with existing interface.\n+\n+- Argument naming: use snake case `fee_delta` (and not, e.g. camel case `feeDelta`)\n+\n+  - *Rationale*: Consistency with existing interface.\n+\n+- Use the JSON parser for parsing, don't manually parse integers or strings from\n+  arguments unless absolutely necessary.\n+\n+  - *Rationale*: Introduces hand-rolled string manipulation code at both the caller and callee sites,\n+    which is error prone, and it is easy to get things such as escaping wrong.\n+    JSON already supports nested data structures, no need to re-invent the wheel.\n+\n+  - *Exception*: AmountToValue can parse amounts as string. This was introduced because many JSON\n+    parsers and formatters hard-code handling decimal numbers as floating point\n+    values, resulting in potential loss of precision. This is unacceptable for\n+    monetary values. **Always** use `AmountToValue` and `ValueToAmount` when\n+    inputting or outputting monetary values. The only exceptions to this are\n+    `prioritisetransaction` and `getblocktemplate` because their interface\n+    is specified as-is in BIP22.\n+\n+- Missing arguments and 'null' should be treated the same: as default values. If there is no\n+  default value, both cases should fail in the same way.\n+\n+  - *Rationale*: Avoids surprises when switching to name-based arguments. Missing name-based arguments\n+  are passed as 'null'.\n+\n+  - *Exception*: Many legacy exceptions to this exist, one of the worst ones is\n+    `getbalance` which follows a completely different code path based on the\n+    number of arguments. We are still in the process of cleaning these up. Do not introduce\n+    new ones.\n+\n+- Try not to overload methods on argument type. E.g. don't make `getblock(true)` and `getblock(\"hash\")`\n+  do different things.\n+\n+  - *Rationale*: This is impossible to use with `bitcoin-cli`, and can be surprising to users.\n+\n+  - *Exception*: Some RPC calls can take both an `int` and `bool`, most notably when a bool was switched\n+    to a multi-value, or due to other historical reasons. **Always** have false map to 0 and\n+    true to 1 in this case.",
    "path": "doc/developer-notes.md",
    "position": 51,
    "original_position": 51,
    "commit_id": "c26655ed3f102ac460ff6f6f5b4875707806c4e6",
    "original_commit_id": "32fd23f50feb6f1bf7b3021f8c938ba82f9da023",
    "user": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is not the case right now. At the moment, 0 maps to false and !0 maps to true. See e.g. `getrawtransaction`'s `verbose` argument handling.",
    "created_at": "2017-04-26T06:42:44Z",
    "updated_at": "2017-05-02T05:52:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10281#discussion_r113375884",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10281",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113375884"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10281#discussion_r113375884"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10281"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113375884/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 545,
    "original_line": 545,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113376005",
    "pull_request_review_id": 34756758,
    "id": 113376005,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzM3NjAwNQ==",
    "diff_hunk": "@@ -495,3 +495,68 @@ Git and GitHub tips\n   This will add an `upstream-pull` remote to your git repository, which can be fetched using `git fetch --all`\n   or `git fetch upstream-pull`. Afterwards, you can use `upstream-pull/NUMBER/head` in arguments to `git show`,\n   `git checkout` and anywhere a commit id would be acceptable to see the changes from pull request NUMBER.\n+\n+RPC interface guidelines\n+--------------------------\n+\n+A few guidelines for introducing and reviewing new RPC interfaces:\n+\n+- Method naming: use consecutive lower-case names such as `getrawtransaction` and `submitblock`\n+\n+  - *Rationale*: Consistency with existing interface.\n+\n+- Argument naming: use snake case `fee_delta` (and not, e.g. camel case `feeDelta`)\n+\n+  - *Rationale*: Consistency with existing interface.\n+\n+- Use the JSON parser for parsing, don't manually parse integers or strings from\n+  arguments unless absolutely necessary.\n+\n+  - *Rationale*: Introduces hand-rolled string manipulation code at both the caller and callee sites,\n+    which is error prone, and it is easy to get things such as escaping wrong.\n+    JSON already supports nested data structures, no need to re-invent the wheel.\n+\n+  - *Exception*: AmountToValue can parse amounts as string. This was introduced because many JSON\n+    parsers and formatters hard-code handling decimal numbers as floating point\n+    values, resulting in potential loss of precision. This is unacceptable for\n+    monetary values. **Always** use `AmountToValue` and `ValueToAmount` when\n+    inputting or outputting monetary values. The only exceptions to this are\n+    `prioritisetransaction` and `getblocktemplate` because their interface\n+    is specified as-is in BIP22.\n+\n+- Missing arguments and 'null' should be treated the same: as default values. If there is no\n+  default value, both cases should fail in the same way.\n+\n+  - *Rationale*: Avoids surprises when switching to name-based arguments. Missing name-based arguments\n+  are passed as 'null'.\n+\n+  - *Exception*: Many legacy exceptions to this exist, one of the worst ones is\n+    `getbalance` which follows a completely different code path based on the\n+    number of arguments. We are still in the process of cleaning these up. Do not introduce\n+    new ones.\n+\n+- Try not to overload methods on argument type. E.g. don't make `getblock(true)` and `getblock(\"hash\")`\n+  do different things.\n+\n+  - *Rationale*: This is impossible to use with `bitcoin-cli`, and can be surprising to users.\n+\n+  - *Exception*: Some RPC calls can take both an `int` and `bool`, most notably when a bool was switched\n+    to a multi-value, or due to other historical reasons. **Always** have false map to 0 and\n+    true to 1 in this case.\n+\n+- Don't forget to fill in the argument names correctly in the RPC command table.\n+\n+  - *Rationale*: If not, the call can not be used with name-based arguments.\n+\n+- Set okSafeMode in the RPC command table to a sensible value: safe mode is when the\n+  block chain is regarded to be in a confused state, and the client deems it unsafe to\n+  do anything irreversible such as send. Anything that just queries should be permitted.",
    "path": "doc/developer-notes.md",
    "position": null,
    "original_position": 59,
    "commit_id": "c26655ed3f102ac460ff6f6f5b4875707806c4e6",
    "original_commit_id": "32fd23f50feb6f1bf7b3021f8c938ba82f9da023",
    "user": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks for this! I vaguely presumed this was the case but never found anything explicitly stating it.",
    "created_at": "2017-04-26T06:43:44Z",
    "updated_at": "2017-05-02T05:52:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10281#discussion_r113376005",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10281",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113376005"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10281#discussion_r113376005"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10281"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113376005/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 553,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113376471",
    "pull_request_review_id": 34757382,
    "id": 113376471,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzM3NjQ3MQ==",
    "diff_hunk": "@@ -495,3 +495,68 @@ Git and GitHub tips\n   This will add an `upstream-pull` remote to your git repository, which can be fetched using `git fetch --all`\n   or `git fetch upstream-pull`. Afterwards, you can use `upstream-pull/NUMBER/head` in arguments to `git show`,\n   `git checkout` and anywhere a commit id would be acceptable to see the changes from pull request NUMBER.\n+\n+RPC interface guidelines\n+--------------------------\n+\n+A few guidelines for introducing and reviewing new RPC interfaces:\n+\n+- Method naming: use consecutive lower-case names such as `getrawtransaction` and `submitblock`\n+\n+  - *Rationale*: Consistency with existing interface.\n+\n+- Argument naming: use snake case `fee_delta` (and not, e.g. camel case `feeDelta`)\n+\n+  - *Rationale*: Consistency with existing interface.\n+\n+- Use the JSON parser for parsing, don't manually parse integers or strings from\n+  arguments unless absolutely necessary.\n+\n+  - *Rationale*: Introduces hand-rolled string manipulation code at both the caller and callee sites,\n+    which is error prone, and it is easy to get things such as escaping wrong.\n+    JSON already supports nested data structures, no need to re-invent the wheel.\n+\n+  - *Exception*: AmountToValue can parse amounts as string. This was introduced because many JSON\n+    parsers and formatters hard-code handling decimal numbers as floating point\n+    values, resulting in potential loss of precision. This is unacceptable for\n+    monetary values. **Always** use `AmountToValue` and `ValueToAmount` when\n+    inputting or outputting monetary values. The only exceptions to this are\n+    `prioritisetransaction` and `getblocktemplate` because their interface\n+    is specified as-is in BIP22.\n+\n+- Missing arguments and 'null' should be treated the same: as default values. If there is no\n+  default value, both cases should fail in the same way.\n+\n+  - *Rationale*: Avoids surprises when switching to name-based arguments. Missing name-based arguments\n+  are passed as 'null'.\n+\n+  - *Exception*: Many legacy exceptions to this exist, one of the worst ones is\n+    `getbalance` which follows a completely different code path based on the\n+    number of arguments. We are still in the process of cleaning these up. Do not introduce\n+    new ones.\n+\n+- Try not to overload methods on argument type. E.g. don't make `getblock(true)` and `getblock(\"hash\")`\n+  do different things.\n+\n+  - *Rationale*: This is impossible to use with `bitcoin-cli`, and can be surprising to users.\n+\n+  - *Exception*: Some RPC calls can take both an `int` and `bool`, most notably when a bool was switched\n+    to a multi-value, or due to other historical reasons. **Always** have false map to 0 and\n+    true to 1 in this case.\n+\n+- Don't forget to fill in the argument names correctly in the RPC command table.\n+\n+  - *Rationale*: If not, the call can not be used with name-based arguments.\n+\n+- Set okSafeMode in the RPC command table to a sensible value: safe mode is when the\n+  block chain is regarded to be in a confused state, and the client deems it unsafe to",
    "path": "doc/developer-notes.md",
    "position": null,
    "original_position": 58,
    "commit_id": "c26655ed3f102ac460ff6f6f5b4875707806c4e6",
    "original_commit_id": "32fd23f50feb6f1bf7b3021f8c938ba82f9da023",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: s/block chain/blockchain",
    "created_at": "2017-04-26T06:47:30Z",
    "updated_at": "2017-05-02T05:52:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10281#discussion_r113376471",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10281",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113376471"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10281#discussion_r113376471"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10281"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113376471/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 552,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113380551",
    "pull_request_review_id": 34761873,
    "id": 113380551,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzM4MDU1MQ==",
    "diff_hunk": "@@ -495,3 +495,68 @@ Git and GitHub tips\n   This will add an `upstream-pull` remote to your git repository, which can be fetched using `git fetch --all`\n   or `git fetch upstream-pull`. Afterwards, you can use `upstream-pull/NUMBER/head` in arguments to `git show`,\n   `git checkout` and anywhere a commit id would be acceptable to see the changes from pull request NUMBER.\n+\n+RPC interface guidelines\n+--------------------------\n+\n+A few guidelines for introducing and reviewing new RPC interfaces:\n+\n+- Method naming: use consecutive lower-case names such as `getrawtransaction` and `submitblock`\n+\n+  - *Rationale*: Consistency with existing interface.\n+\n+- Argument naming: use snake case `fee_delta` (and not, e.g. camel case `feeDelta`)\n+\n+  - *Rationale*: Consistency with existing interface.\n+\n+- Use the JSON parser for parsing, don't manually parse integers or strings from\n+  arguments unless absolutely necessary.\n+\n+  - *Rationale*: Introduces hand-rolled string manipulation code at both the caller and callee sites,\n+    which is error prone, and it is easy to get things such as escaping wrong.\n+    JSON already supports nested data structures, no need to re-invent the wheel.\n+\n+  - *Exception*: AmountToValue can parse amounts as string. This was introduced because many JSON\n+    parsers and formatters hard-code handling decimal numbers as floating point\n+    values, resulting in potential loss of precision. This is unacceptable for\n+    monetary values. **Always** use `AmountToValue` and `ValueToAmount` when\n+    inputting or outputting monetary values. The only exceptions to this are\n+    `prioritisetransaction` and `getblocktemplate` because their interface\n+    is specified as-is in BIP22.\n+\n+- Missing arguments and 'null' should be treated the same: as default values. If there is no\n+  default value, both cases should fail in the same way.\n+\n+  - *Rationale*: Avoids surprises when switching to name-based arguments. Missing name-based arguments\n+  are passed as 'null'.\n+\n+  - *Exception*: Many legacy exceptions to this exist, one of the worst ones is\n+    `getbalance` which follows a completely different code path based on the\n+    number of arguments. We are still in the process of cleaning these up. Do not introduce\n+    new ones.\n+\n+- Try not to overload methods on argument type. E.g. don't make `getblock(true)` and `getblock(\"hash\")`\n+  do different things.\n+\n+  - *Rationale*: This is impossible to use with `bitcoin-cli`, and can be surprising to users.\n+\n+  - *Exception*: Some RPC calls can take both an `int` and `bool`, most notably when a bool was switched\n+    to a multi-value, or due to other historical reasons. **Always** have false map to 0 and\n+    true to 1 in this case.",
    "path": "doc/developer-notes.md",
    "position": 51,
    "original_position": 51,
    "commit_id": "c26655ed3f102ac460ff6f6f5b4875707806c4e6",
    "original_commit_id": "32fd23f50feb6f1bf7b3021f8c938ba82f9da023",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "EH, I have that the wrong way around, thanks.",
    "created_at": "2017-04-26T07:17:47Z",
    "updated_at": "2017-05-02T05:52:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10281#discussion_r113380551",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10281",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113380551"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10281#discussion_r113380551"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10281"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113380551/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 545,
    "original_line": 545,
    "side": "RIGHT",
    "in_reply_to_id": 113375884
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113380903",
    "pull_request_review_id": 34762239,
    "id": 113380903,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzM4MDkwMw==",
    "diff_hunk": "@@ -495,3 +495,68 @@ Git and GitHub tips\n   This will add an `upstream-pull` remote to your git repository, which can be fetched using `git fetch --all`\n   or `git fetch upstream-pull`. Afterwards, you can use `upstream-pull/NUMBER/head` in arguments to `git show`,\n   `git checkout` and anywhere a commit id would be acceptable to see the changes from pull request NUMBER.\n+\n+RPC interface guidelines\n+--------------------------\n+\n+A few guidelines for introducing and reviewing new RPC interfaces:\n+\n+- Method naming: use consecutive lower-case names such as `getrawtransaction` and `submitblock`\n+\n+  - *Rationale*: Consistency with existing interface.\n+\n+- Argument naming: use snake case `fee_delta` (and not, e.g. camel case `feeDelta`)\n+\n+  - *Rationale*: Consistency with existing interface.\n+\n+- Use the JSON parser for parsing, don't manually parse integers or strings from\n+  arguments unless absolutely necessary.\n+\n+  - *Rationale*: Introduces hand-rolled string manipulation code at both the caller and callee sites,\n+    which is error prone, and it is easy to get things such as escaping wrong.\n+    JSON already supports nested data structures, no need to re-invent the wheel.\n+\n+  - *Exception*: AmountToValue can parse amounts as string. This was introduced because many JSON\n+    parsers and formatters hard-code handling decimal numbers as floating point\n+    values, resulting in potential loss of precision. This is unacceptable for\n+    monetary values. **Always** use `AmountToValue` and `ValueToAmount` when\n+    inputting or outputting monetary values. The only exceptions to this are\n+    `prioritisetransaction` and `getblocktemplate` because their interface\n+    is specified as-is in BIP22.\n+\n+- Missing arguments and 'null' should be treated the same: as default values. If there is no\n+  default value, both cases should fail in the same way.\n+\n+  - *Rationale*: Avoids surprises when switching to name-based arguments. Missing name-based arguments\n+  are passed as 'null'.\n+\n+  - *Exception*: Many legacy exceptions to this exist, one of the worst ones is\n+    `getbalance` which follows a completely different code path based on the\n+    number of arguments. We are still in the process of cleaning these up. Do not introduce\n+    new ones.\n+\n+- Try not to overload methods on argument type. E.g. don't make `getblock(true)` and `getblock(\"hash\")`\n+  do different things.\n+\n+  - *Rationale*: This is impossible to use with `bitcoin-cli`, and can be surprising to users.\n+\n+  - *Exception*: Some RPC calls can take both an `int` and `bool`, most notably when a bool was switched\n+    to a multi-value, or due to other historical reasons. **Always** have false map to 0 and\n+    true to 1 in this case.",
    "path": "doc/developer-notes.md",
    "position": 51,
    "original_position": 51,
    "commit_id": "c26655ed3f102ac460ff6f6f5b4875707806c4e6",
    "original_commit_id": "32fd23f50feb6f1bf7b3021f8c938ba82f9da023",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Or not. What I meant here is:\r\n```\r\nfalse=0\r\ntrue=1\r\n```\r\nE.g, the C++ mapping, not the bash mapping. As far as I know, we follow that everywhere?\r\nIf this wording is confusing, can you suggest another way.",
    "created_at": "2017-04-26T07:20:16Z",
    "updated_at": "2017-05-02T05:52:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10281#discussion_r113380903",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10281",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113380903"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10281#discussion_r113380903"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10281"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113380903/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 545,
    "original_line": 545,
    "side": "RIGHT",
    "in_reply_to_id": 113375884
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113384347",
    "pull_request_review_id": 34765870,
    "id": 113384347,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzM4NDM0Nw==",
    "diff_hunk": "@@ -495,3 +495,68 @@ Git and GitHub tips\n   This will add an `upstream-pull` remote to your git repository, which can be fetched using `git fetch --all`\n   or `git fetch upstream-pull`. Afterwards, you can use `upstream-pull/NUMBER/head` in arguments to `git show`,\n   `git checkout` and anywhere a commit id would be acceptable to see the changes from pull request NUMBER.\n+\n+RPC interface guidelines\n+--------------------------\n+\n+A few guidelines for introducing and reviewing new RPC interfaces:\n+\n+- Method naming: use consecutive lower-case names such as `getrawtransaction` and `submitblock`\n+\n+  - *Rationale*: Consistency with existing interface.\n+\n+- Argument naming: use snake case `fee_delta` (and not, e.g. camel case `feeDelta`)\n+\n+  - *Rationale*: Consistency with existing interface.\n+\n+- Use the JSON parser for parsing, don't manually parse integers or strings from\n+  arguments unless absolutely necessary.\n+\n+  - *Rationale*: Introduces hand-rolled string manipulation code at both the caller and callee sites,\n+    which is error prone, and it is easy to get things such as escaping wrong.\n+    JSON already supports nested data structures, no need to re-invent the wheel.\n+\n+  - *Exception*: AmountToValue can parse amounts as string. This was introduced because many JSON\n+    parsers and formatters hard-code handling decimal numbers as floating point\n+    values, resulting in potential loss of precision. This is unacceptable for\n+    monetary values. **Always** use `AmountToValue` and `ValueToAmount` when\n+    inputting or outputting monetary values. The only exceptions to this are\n+    `prioritisetransaction` and `getblocktemplate` because their interface\n+    is specified as-is in BIP22.\n+\n+- Missing arguments and 'null' should be treated the same: as default values. If there is no\n+  default value, both cases should fail in the same way.\n+\n+  - *Rationale*: Avoids surprises when switching to name-based arguments. Missing name-based arguments\n+  are passed as 'null'.\n+\n+  - *Exception*: Many legacy exceptions to this exist, one of the worst ones is\n+    `getbalance` which follows a completely different code path based on the\n+    number of arguments. We are still in the process of cleaning these up. Do not introduce\n+    new ones.\n+\n+- Try not to overload methods on argument type. E.g. don't make `getblock(true)` and `getblock(\"hash\")`\n+  do different things.\n+\n+  - *Rationale*: This is impossible to use with `bitcoin-cli`, and can be surprising to users.\n+\n+  - *Exception*: Some RPC calls can take both an `int` and `bool`, most notably when a bool was switched\n+    to a multi-value, or due to other historical reasons. **Always** have false map to 0 and\n+    true to 1 in this case.",
    "path": "doc/developer-notes.md",
    "position": 51,
    "original_position": 51,
    "commit_id": "c26655ed3f102ac460ff6f6f5b4875707806c4e6",
    "original_commit_id": "32fd23f50feb6f1bf7b3021f8c938ba82f9da023",
    "user": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I read it as \"interpret 0 as false and 1 as true, and anything else is [??]\".\r\n\r\nI.e. if a user passes 2 or -1 to the new RPC command which maps as you said, how will it treat values beyond [0, 1]?\r\n\r\nAm I misunderstanding?",
    "created_at": "2017-04-26T07:40:17Z",
    "updated_at": "2017-05-02T05:52:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10281#discussion_r113384347",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10281",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113384347"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10281#discussion_r113384347"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10281"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113384347/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 545,
    "original_line": 545,
    "side": "RIGHT",
    "in_reply_to_id": 113375884
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113389070",
    "pull_request_review_id": 34770970,
    "id": 113389070,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzM4OTA3MA==",
    "diff_hunk": "@@ -495,3 +495,68 @@ Git and GitHub tips\n   This will add an `upstream-pull` remote to your git repository, which can be fetched using `git fetch --all`\n   or `git fetch upstream-pull`. Afterwards, you can use `upstream-pull/NUMBER/head` in arguments to `git show`,\n   `git checkout` and anywhere a commit id would be acceptable to see the changes from pull request NUMBER.\n+\n+RPC interface guidelines\n+--------------------------\n+\n+A few guidelines for introducing and reviewing new RPC interfaces:\n+\n+- Method naming: use consecutive lower-case names such as `getrawtransaction` and `submitblock`\n+\n+  - *Rationale*: Consistency with existing interface.\n+\n+- Argument naming: use snake case `fee_delta` (and not, e.g. camel case `feeDelta`)\n+\n+  - *Rationale*: Consistency with existing interface.\n+\n+- Use the JSON parser for parsing, don't manually parse integers or strings from\n+  arguments unless absolutely necessary.\n+\n+  - *Rationale*: Introduces hand-rolled string manipulation code at both the caller and callee sites,\n+    which is error prone, and it is easy to get things such as escaping wrong.\n+    JSON already supports nested data structures, no need to re-invent the wheel.\n+\n+  - *Exception*: AmountToValue can parse amounts as string. This was introduced because many JSON\n+    parsers and formatters hard-code handling decimal numbers as floating point\n+    values, resulting in potential loss of precision. This is unacceptable for\n+    monetary values. **Always** use `AmountToValue` and `ValueToAmount` when\n+    inputting or outputting monetary values. The only exceptions to this are\n+    `prioritisetransaction` and `getblocktemplate` because their interface\n+    is specified as-is in BIP22.\n+\n+- Missing arguments and 'null' should be treated the same: as default values. If there is no\n+  default value, both cases should fail in the same way.\n+\n+  - *Rationale*: Avoids surprises when switching to name-based arguments. Missing name-based arguments\n+  are passed as 'null'.\n+\n+  - *Exception*: Many legacy exceptions to this exist, one of the worst ones is\n+    `getbalance` which follows a completely different code path based on the\n+    number of arguments. We are still in the process of cleaning these up. Do not introduce\n+    new ones.\n+\n+- Try not to overload methods on argument type. E.g. don't make `getblock(true)` and `getblock(\"hash\")`\n+  do different things.\n+\n+  - *Rationale*: This is impossible to use with `bitcoin-cli`, and can be surprising to users.\n+\n+  - *Exception*: Some RPC calls can take both an `int` and `bool`, most notably when a bool was switched\n+    to a multi-value, or due to other historical reasons. **Always** have false map to 0 and\n+    true to 1 in this case.",
    "path": "doc/developer-notes.md",
    "position": 51,
    "original_position": 51,
    "commit_id": "c26655ed3f102ac460ff6f6f5b4875707806c4e6",
    "original_commit_id": "32fd23f50feb6f1bf7b3021f8c938ba82f9da023",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't say anything about values besides 0 and 1 on purpose. Those may either map to 1, or to something else entirely (referring to \"when bool has switched to multi-value\"), or cause a failure.",
    "created_at": "2017-04-26T08:07:07Z",
    "updated_at": "2017-05-02T05:52:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10281#discussion_r113389070",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10281",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113389070"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10281#discussion_r113389070"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10281"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113389070/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 545,
    "original_line": 545,
    "side": "RIGHT",
    "in_reply_to_id": 113375884
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113392662",
    "pull_request_review_id": 34774937,
    "id": 113392662,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzM5MjY2Mg==",
    "diff_hunk": "@@ -495,3 +495,68 @@ Git and GitHub tips\n   This will add an `upstream-pull` remote to your git repository, which can be fetched using `git fetch --all`\n   or `git fetch upstream-pull`. Afterwards, you can use `upstream-pull/NUMBER/head` in arguments to `git show`,\n   `git checkout` and anywhere a commit id would be acceptable to see the changes from pull request NUMBER.\n+\n+RPC interface guidelines\n+--------------------------\n+\n+A few guidelines for introducing and reviewing new RPC interfaces:\n+\n+- Method naming: use consecutive lower-case names such as `getrawtransaction` and `submitblock`\n+\n+  - *Rationale*: Consistency with existing interface.\n+\n+- Argument naming: use snake case `fee_delta` (and not, e.g. camel case `feeDelta`)\n+\n+  - *Rationale*: Consistency with existing interface.\n+\n+- Use the JSON parser for parsing, don't manually parse integers or strings from\n+  arguments unless absolutely necessary.\n+\n+  - *Rationale*: Introduces hand-rolled string manipulation code at both the caller and callee sites,\n+    which is error prone, and it is easy to get things such as escaping wrong.\n+    JSON already supports nested data structures, no need to re-invent the wheel.\n+\n+  - *Exception*: AmountToValue can parse amounts as string. This was introduced because many JSON\n+    parsers and formatters hard-code handling decimal numbers as floating point\n+    values, resulting in potential loss of precision. This is unacceptable for\n+    monetary values. **Always** use `AmountToValue` and `ValueToAmount` when\n+    inputting or outputting monetary values. The only exceptions to this are\n+    `prioritisetransaction` and `getblocktemplate` because their interface\n+    is specified as-is in BIP22.\n+\n+- Missing arguments and 'null' should be treated the same: as default values. If there is no\n+  default value, both cases should fail in the same way.\n+\n+  - *Rationale*: Avoids surprises when switching to name-based arguments. Missing name-based arguments\n+  are passed as 'null'.\n+\n+  - *Exception*: Many legacy exceptions to this exist, one of the worst ones is\n+    `getbalance` which follows a completely different code path based on the\n+    number of arguments. We are still in the process of cleaning these up. Do not introduce\n+    new ones.\n+\n+- Try not to overload methods on argument type. E.g. don't make `getblock(true)` and `getblock(\"hash\")`\n+  do different things.\n+\n+  - *Rationale*: This is impossible to use with `bitcoin-cli`, and can be surprising to users.\n+\n+  - *Exception*: Some RPC calls can take both an `int` and `bool`, most notably when a bool was switched\n+    to a multi-value, or due to other historical reasons. **Always** have false map to 0 and\n+    true to 1 in this case.",
    "path": "doc/developer-notes.md",
    "position": 51,
    "original_position": 51,
    "commit_id": "c26655ed3f102ac460ff6f6f5b4875707806c4e6",
    "original_commit_id": "32fd23f50feb6f1bf7b3021f8c938ba82f9da023",
    "user": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ohh I was reading this backwards. You're talking about when a bool becomes an int, and I about when an int is interpreted as a bool. I'll think on wording to make this obvious.",
    "created_at": "2017-04-26T08:26:34Z",
    "updated_at": "2017-05-02T05:52:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10281#discussion_r113392662",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10281",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113392662"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10281#discussion_r113392662"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10281"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113392662/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 545,
    "original_line": 545,
    "side": "RIGHT",
    "in_reply_to_id": 113375884
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114106150",
    "pull_request_review_id": 35547249,
    "id": 114106150,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDEwNjE1MA==",
    "diff_hunk": "@@ -495,3 +495,68 @@ Git and GitHub tips\n   This will add an `upstream-pull` remote to your git repository, which can be fetched using `git fetch --all`\n   or `git fetch upstream-pull`. Afterwards, you can use `upstream-pull/NUMBER/head` in arguments to `git show`,\n   `git checkout` and anywhere a commit id would be acceptable to see the changes from pull request NUMBER.\n+\n+RPC interface guidelines\n+--------------------------\n+\n+A few guidelines for introducing and reviewing new RPC interfaces:\n+\n+- Method naming: use consecutive lower-case names such as `getrawtransaction` and `submitblock`\n+\n+  - *Rationale*: Consistency with existing interface.\n+\n+- Argument naming: use snake case `fee_delta` (and not, e.g. camel case `feeDelta`)\n+\n+  - *Rationale*: Consistency with existing interface.\n+\n+- Use the JSON parser for parsing, don't manually parse integers or strings from\n+  arguments unless absolutely necessary.\n+\n+  - *Rationale*: Introduces hand-rolled string manipulation code at both the caller and callee sites,\n+    which is error prone, and it is easy to get things such as escaping wrong.\n+    JSON already supports nested data structures, no need to re-invent the wheel.\n+\n+  - *Exception*: AmountToValue can parse amounts as string. This was introduced because many JSON\n+    parsers and formatters hard-code handling decimal numbers as floating point\n+    values, resulting in potential loss of precision. This is unacceptable for\n+    monetary values. **Always** use `AmountToValue` and `ValueToAmount` when\n+    inputting or outputting monetary values. The only exceptions to this are\n+    `prioritisetransaction` and `getblocktemplate` because their interface\n+    is specified as-is in BIP22.\n+\n+- Missing arguments and 'null' should be treated the same: as default values. If there is no\n+  default value, both cases should fail in the same way.\n+\n+  - *Rationale*: Avoids surprises when switching to name-based arguments. Missing name-based arguments\n+  are passed as 'null'.\n+\n+  - *Exception*: Many legacy exceptions to this exist, one of the worst ones is\n+    `getbalance` which follows a completely different code path based on the\n+    number of arguments. We are still in the process of cleaning these up. Do not introduce\n+    new ones.\n+\n+- Try not to overload methods on argument type. E.g. don't make `getblock(true)` and `getblock(\"hash\")`\n+  do different things.\n+\n+  - *Rationale*: This is impossible to use with `bitcoin-cli`, and can be surprising to users.\n+\n+  - *Exception*: Some RPC calls can take both an `int` and `bool`, most notably when a bool was switched\n+    to a multi-value, or due to other historical reasons. **Always** have false map to 0 and\n+    true to 1 in this case.",
    "path": "doc/developer-notes.md",
    "position": 51,
    "original_position": 51,
    "commit_id": "c26655ed3f102ac460ff6f6f5b4875707806c4e6",
    "original_commit_id": "32fd23f50feb6f1bf7b3021f8c938ba82f9da023",
    "user": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Re-reading this, I think I was simply not reading it properly. I think it looks fine as is.",
    "created_at": "2017-05-01T07:41:48Z",
    "updated_at": "2017-05-02T05:52:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10281#discussion_r114106150",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10281",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114106150"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10281#discussion_r114106150"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10281"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114106150/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 545,
    "original_line": 545,
    "side": "RIGHT",
    "in_reply_to_id": 113375884
  }
]