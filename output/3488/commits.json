[
  {
    "sha": "2102ab9f5cb542e6727e0f25e670d8549aa1bf1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTAyYWI5ZjVjYjU0MmU2NzI3ZTBmMjVlNjcwZDg1NDlhYTFiZjFh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-01-05T11:37:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-01-05T11:55:03Z"
      },
      "message": "ui: Fix GUI initialization order\n\nFixes at least #3478.\n\nSplits and documents the phases:\n1. Parse command-line options. These take precedence over anything else.\n2. Basic Qt initialization (not dependent on parameters or configuration)\n3. Application identification\n4. Initialization of translations\n5. Now that settings and translations are available, ask user for data directory\n6. Determine availability of data directory and parse bitcoin.conf\n7. URI IPC sending\n8. Main GUI initialization\n\nSplits command line parsing logic from ipcSendCommandLine into\nipcParseCommandLine, as isTestNet() can only be overridden in the early\nstages before choosing a data directory. Sending however needs to happen\nafter choosing a data directory.",
      "tree": {
        "sha": "cad487646827981bacb34d1d102c143eb6e858f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cad487646827981bacb34d1d102c143eb6e858f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2102ab9f5cb542e6727e0f25e670d8549aa1bf1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2102ab9f5cb542e6727e0f25e670d8549aa1bf1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2102ab9f5cb542e6727e0f25e670d8549aa1bf1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2102ab9f5cb542e6727e0f25e670d8549aa1bf1a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16403b42759205461918c652fdc5b71c422c44a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16403b42759205461918c652fdc5b71c422c44a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16403b42759205461918c652fdc5b71c422c44a2"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 64,
      "deletions": 41
    },
    "files": [
      {
        "sha": "cd74fb4cef803429d1eb56a0a84053bbf8f50514",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 36,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2102ab9f5cb542e6727e0f25e670d8549aa1bf1a/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2102ab9f5cb542e6727e0f25e670d8549aa1bf1a/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=2102ab9f5cb542e6727e0f25e670d8549aa1bf1a",
        "patch": "@@ -161,22 +161,23 @@ void DebugMessageHandler(QtMsgType type, const QMessageLogContext& context, cons\n #ifndef BITCOIN_QT_TEST\n int main(int argc, char *argv[])\n {\n-    bool fMissingDatadir = false;\n     bool fSelParFromCLFailed = false;\n-\n+    /// 1. Parse command-line options. These take precedence over anything else.\n     // Command-line options take precedence:\n     ParseParameters(argc, argv);\n-    // ... then bitcoin.conf:\n-    if (!boost::filesystem::is_directory(GetDataDir(false))) {\n-        fMissingDatadir = true;\n-    } else {\n-        ReadConfigFile(mapArgs, mapMultiArgs);\n-    }\n     // Check for -testnet or -regtest parameter (TestNet() calls are only valid after this clause)\n     if (!SelectParamsFromCommandLine()) {\n         fSelParFromCLFailed = true;\n     }\n+    // Parse URIs on command line -- this can affect TestNet() / RegTest() mode\n+    if (!PaymentServer::ipcParseCommandLine(argc, argv))\n+        exit(0);\n+\n+    bool isaTestNet = TestNet() || RegTest();\n+\n+    // Do not refer to data directory yet, this can be overridden by Intro::pickDataDirectory\n \n+    /// 2. Basic Qt initialization (not dependent on parameters or configuration)\n #if QT_VERSION < 0x050000\n     // Internal string conversion is all UTF-8\n     QTextCodec::setCodecForTr(QTextCodec::codecForName(\"UTF-8\"));\n@@ -196,44 +197,62 @@ int main(int argc, char *argv[])\n     // Register meta types used for QMetaObject::invokeMethod\n     qRegisterMetaType< bool* >();\n \n-    // Application identification (must be set before OptionsModel is initialized,\n-    // as it is used to locate QSettings)\n-    bool isaTestNet = TestNet() || RegTest();\n+    /// 3. Application identification\n+    // must be set before OptionsModel is initialized or translations are loaded,\n+    // as it is used to locate QSettings\n     QApplication::setOrganizationName(\"Bitcoin\");\n     QApplication::setOrganizationDomain(\"bitcoin.org\");\n     if (isaTestNet) // Separate UI settings for testnets\n         QApplication::setApplicationName(\"Bitcoin-Qt-testnet\");\n     else\n         QApplication::setApplicationName(\"Bitcoin-Qt\");\n \n+    /// 4. Initialization of translations, so that intro dialog is in user's language\n     // Now that QSettings are accessible, initialize translations\n     QTranslator qtTranslatorBase, qtTranslator, translatorBase, translator;\n     initTranslations(qtTranslatorBase, qtTranslator, translatorBase, translator);\n \n-    // Do this early as we don't want to bother initializing if we are just calling IPC\n-    // ... but do it after creating app and setting up translations, so errors are\n-    // translated properly.\n-    if (PaymentServer::ipcSendCommandLine(argc, argv))\n-        exit(0);\n-\n-    // Now that translations are initialized check for errors and allow a translatable error message\n-    if (fMissingDatadir) {\n-        QMessageBox::critical(0, QObject::tr(\"Bitcoin\"),\n-                              QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(mapArgs[\"-datadir\"])));\n+    // Show help message immediately after parsing command-line options (for \"-lang\") and setting locale,\n+    // but before showing splash screen.\n+    if (mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    {\n+        GUIUtil::HelpMessageBox help;\n+        help.showOrPrint();\n         return 1;\n     }\n-    else if (fSelParFromCLFailed) {\n+    // Now that translations are initialized, check for earlier errors and show a translatable error message\n+    if (fSelParFromCLFailed) {\n         QMessageBox::critical(0, QObject::tr(\"Bitcoin\"), QObject::tr(\"Error: Invalid combination of -regtest and -testnet.\"));\n         return 1;\n     }\n \n+    /// 5. Now that settings and translations are available, ask user for data directory\n+    // User language is set up: pick a data directory\n+    Intro::pickDataDirectory(isaTestNet);\n+\n+    /// 6. Determine availability of data directory and parse bitcoin.conf\n+    if (!boost::filesystem::is_directory(GetDataDir(false)))\n+    {\n+        QMessageBox::critical(0, QObject::tr(\"Bitcoin\"),\n+                              QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(mapArgs[\"-datadir\"])));\n+        return 1;\n+    }\n+    ReadConfigFile(mapArgs, mapMultiArgs);\n+\n+    /// 7. URI IPC sending\n+    // - Do this early as we don't want to bother initializing if we are just calling IPC\n+    // - Do this *after* setting up the data directory, as the data directory hash is used in the name\n+    // of the server.\n+    // - Do this after creating app and setting up translations, so errors are\n+    // translated properly.\n+    if (PaymentServer::ipcSendCommandLine())\n+        exit(0);\n+\n     // Start up the payment server early, too, so impatient users that click on\n     // bitcoin: links repeatedly have their payment requests routed to this process:\n     PaymentServer* paymentServer = new PaymentServer(&app);\n \n-    // User language is set up: pick a data directory\n-    Intro::pickDataDirectory(isaTestNet);\n-\n+    /// 8. Main GUI initialization\n     // Install global event filter that makes sure that long tooltips can be word-wrapped\n     app.installEventFilter(new GUIUtil::ToolTipToRichTextFilter(TOOLTIP_WRAP_THRESHOLD, &app));\n     // Install qDebug() message handler to route to debug.log\n@@ -242,24 +261,15 @@ int main(int argc, char *argv[])\n #else\n     qInstallMessageHandler(DebugMessageHandler);\n #endif\n-\n-    // ... now GUI settings:\n+    // Load GUI settings from QSettings\n     OptionsModel optionsModel;\n \n     // Subscribe to global signals from core\n     uiInterface.ThreadSafeMessageBox.connect(ThreadSafeMessageBox);\n     uiInterface.InitMessage.connect(InitMessage);\n     uiInterface.Translate.connect(Translate);\n \n-    // Show help message immediately after parsing command-line options (for \"-lang\") and setting locale,\n-    // but before showing splash screen.\n-    if (mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n-    {\n-        GUIUtil::HelpMessageBox help;\n-        help.showOrPrint();\n-        return 1;\n-    }\n-\n+    // Show splash screen if appropriate\n     SplashScreen splash(QPixmap(), 0, isaTestNet);\n     if (GetBoolArg(\"-splash\", true) && !GetBoolArg(\"-min\", false))\n     {"
      },
      {
        "sha": "5f7ccf7093af9b8f2acb9bdcecffd1da81c01074",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2102ab9f5cb542e6727e0f25e670d8549aa1bf1a/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2102ab9f5cb542e6727e0f25e670d8549aa1bf1a/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=2102ab9f5cb542e6727e0f25e670d8549aa1bf1a",
        "patch": "@@ -148,7 +148,7 @@ QString Intro::getDefaultDataDirectory()\n \n void Intro::pickDataDirectory(bool fIsTestnet)\n {\n-    namespace fs = boost::filesystem;;\n+    namespace fs = boost::filesystem;\n     QSettings settings;\n     /* If data directory provided on command line, no need to look at settings\n        or show a picking dialog */"
      },
      {
        "sha": "3d6f5de754cadfc56481e18a59c49f5d305b7c59",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2102ab9f5cb542e6727e0f25e670d8549aa1bf1a/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2102ab9f5cb542e6727e0f25e670d8549aa1bf1a/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=2102ab9f5cb542e6727e0f25e670d8549aa1bf1a",
        "patch": "@@ -180,10 +180,8 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n // and the items in savedPaymentRequest will be handled\n // when uiReady() is called.\n //\n-bool PaymentServer::ipcSendCommandLine(int argc, char* argv[])\n+bool PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n {\n-    bool fResult = false;\n-\n     for (int i = 1; i < argc; i++)\n     {\n         QString arg(argv[i]);\n@@ -226,7 +224,18 @@ bool PaymentServer::ipcSendCommandLine(int argc, char* argv[])\n             qDebug() << \"PaymentServer::ipcSendCommandLine : Payment request file does not exist: \" << arg;\n         }\n     }\n+    return true;\n+}\n \n+//\n+// Sending to the server is done synchronously, at startup.\n+// If the server isn't already running, startup continues,\n+// and the items in savedPaymentRequest will be handled\n+// when uiReady() is called.\n+//\n+bool PaymentServer::ipcSendCommandLine()\n+{\n+    bool fResult = false;\n     foreach (const QString& r, savedPaymentRequests)\n     {\n         QLocalSocket* socket = new QLocalSocket();"
      },
      {
        "sha": "5ee85f7db41b38a9a08aa9840dca31018f8668e4",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2102ab9f5cb542e6727e0f25e670d8549aa1bf1a/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2102ab9f5cb542e6727e0f25e670d8549aa1bf1a/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=2102ab9f5cb542e6727e0f25e670d8549aa1bf1a",
        "patch": "@@ -56,12 +56,16 @@ class PaymentServer : public QObject\n     Q_OBJECT\n \n public:\n+    // Parse URIs on command line\n+    // Returns false on error\n+    static bool ipcParseCommandLine(int argc, char *argv[]);\n+\n     // Returns true if there were URIs on the command line\n     // which were successfully sent to an already-running\n     // process.\n     // Note: if a payment request is given, SelectParams(MAIN/TESTNET)\n     // will be called so we startup in the right mode.\n-    static bool ipcSendCommandLine(int argc, char *argv[]);\n+    static bool ipcSendCommandLine();\n \n     // parent should be QApplication object\n     PaymentServer(QObject* parent, bool startLocalServer = true);"
      }
    ]
  }
]