[
  {
    "sha": "c11a333b4329aa95305fd840f99c70e9d3f80c19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTFhMzMzYjQzMjlhYTk1MzA1ZmQ4NDBmOTljNzBlOWQzZjgwYzE5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-05-18T22:50:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-30T18:15:45Z"
      },
      "message": "MuHash3072 implementation",
      "tree": {
        "sha": "903c456c188d99ef1638a39a02d399929bc2e67e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/903c456c188d99ef1638a39a02d399929bc2e67e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c11a333b4329aa95305fd840f99c70e9d3f80c19",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c11a333b4329aa95305fd840f99c70e9d3f80c19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c11a333b4329aa95305fd840f99c70e9d3f80c19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c11a333b4329aa95305fd840f99c70e9d3f80c19/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2935b469ae96a3203bb997a6eddc098903b336ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2935b469ae96a3203bb997a6eddc098903b336ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2935b469ae96a3203bb997a6eddc098903b336ce"
      }
    ],
    "stats": {
      "total": 401,
      "additions": 401,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1db826547ab1ae7428c436203805b9f241fdecca",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c11a333b4329aa95305fd840f99c70e9d3f80c19/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c11a333b4329aa95305fd840f99c70e9d3f80c19/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=c11a333b4329aa95305fd840f99c70e9d3f80c19",
        "patch": "@@ -456,6 +456,9 @@ if test x$use_lcov_branch != xno; then\n   AC_SUBST(LCOV_OPTS, \"$LCOV_OPTS --rc lcov_branch_coverage=1\")\n fi\n \n+dnl Check for __int128\n+AC_CHECK_TYPES([__int128])\n+\n dnl Check for endianness\n AC_C_BIGENDIAN\n "
      },
      {
        "sha": "eba1adfc608412880195d4f65ca4e838a76c9aee",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c11a333b4329aa95305fd840f99c70e9d3f80c19/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c11a333b4329aa95305fd840f99c70e9d3f80c19/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=c11a333b4329aa95305fd840f99c70e9d3f80c19",
        "patch": "@@ -256,6 +256,8 @@ crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/hmac_sha256.h \\\n   crypto/hmac_sha512.cpp \\\n   crypto/hmac_sha512.h \\\n+  crypto/muhash.cpp \\\n+  crypto/muhash.h \\\n   crypto/ripemd160.cpp \\\n   crypto/ripemd160.h \\\n   crypto/sha1.cpp \\"
      },
      {
        "sha": "68f930810a43d12296ac4e495e9f5a017f7f8246",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c11a333b4329aa95305fd840f99c70e9d3f80c19/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c11a333b4329aa95305fd840f99c70e9d3f80c19/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=c11a333b4329aa95305fd840f99c70e9d3f80c19",
        "patch": "@@ -10,6 +10,7 @@\n #include \"random.h\"\n #include \"uint256.h\"\n #include \"utiltime.h\"\n+#include \"crypto/muhash.h\"\n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha1.h\"\n #include \"crypto/sha256.h\"\n@@ -92,6 +93,19 @@ static void FastRandom_1bit(benchmark::State& state)\n     }\n }\n \n+static void MuHash(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32] = {0};\n+    while (state.KeepRunning()) {\n+        for (int i = 0; i < 1000; i++) {\n+            key[0] = i;\n+            acc *= MuHash3072(key);\n+        }\n+    }\n+}\n+\n BENCHMARK(RIPEMD160);\n BENCHMARK(SHA1);\n BENCHMARK(SHA256);\n@@ -101,3 +115,5 @@ BENCHMARK(SHA256_32b);\n BENCHMARK(SipHash_32b);\n BENCHMARK(FastRandom_32bit);\n BENCHMARK(FastRandom_1bit);\n+\n+BENCHMARK(MuHash);"
      },
      {
        "sha": "91491c3d006bcc91e462eb8a8721920129dfa2f1",
        "filename": "src/crypto/muhash.cpp",
        "status": "added",
        "additions": 273,
        "deletions": 0,
        "changes": 273,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c11a333b4329aa95305fd840f99c70e9d3f80c19/src/crypto/muhash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c11a333b4329aa95305fd840f99c70e9d3f80c19/src/crypto/muhash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/muhash.cpp?ref=c11a333b4329aa95305fd840f99c70e9d3f80c19",
        "patch": "@@ -0,0 +1,273 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"muhash.h\"\n+\n+#include <limits>\n+#include \"common.h\"\n+#include \"chacha20.h\"\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+namespace {\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+#define extract3(c0,c1,c2,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = c2; \\\n+    c2 = 0; \\\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+#define extract2(c0,c1,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = 0; \\\n+}\n+\n+/** [c0,c1] = a * b */\n+#define mul(c0,c1,a,b) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+    c2 = 0; \\\n+    c1 = t >> Num3072::LIMB_SIZE; \\\n+    c0 = t; \\\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+#define mulnadd3(c0,c1,c2,d0,d1,d2,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)d1 * n + c1; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    c2 = t + d2 * n; \\\n+}\n+\n+/* [c0,c1] *= n */\n+#define muln2(c0,c1,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)c1 * n; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+#define muladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+#define muldbladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0); \\\n+    c1 += tt; \\\n+    c2 += (c1 < tt) ? 1 : 0; \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1] += a */\n+#define add2(c0,c1,a) { \\\n+    c0 += (a); \\\n+    c1 += (c0 < (a)) ? 1 : 0; \\\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - 1103717) return false;\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    Num3072::limb_type c0 = 1103717;\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        Num3072::limb_type c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* out, const Num3072* a, const Num3072* b)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*b into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, a->limbs[1 + j], b->limbs[Num3072::LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < Num3072::LIMBS; ++i) muladd3(d0, d1, d2, a->limbs[i], b->limbs[Num3072::LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, 1103717);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, 1103717);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Square(Num3072* out, const Num3072* a)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*a into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (Num3072::LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, a->limbs[i + j + 1], a->limbs[Num3072::LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, a->limbs[(Num3072::LIMBS - 1 - j) / 2 + j + 1], a->limbs[Num3072::LIMBS - 1 - (Num3072::LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, 1103717);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, a->limbs[(j + 1) / 2], a->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, 1103717);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 x;\n+\n+    p[0] = *a;\n+\n+    for (int i = 0; i < 11; ++i) {\n+        p[i + 1] = p[i];\n+        for (int j = 0; j < (1 << i); ++j) Square(&p[i + 1], &p[i + 1]);\n+        Multiply(&p[i + 1], &p[i + 1], &p[i]);\n+    }\n+\n+    x = p[11];\n+\n+    for (int j = 0; j < 512; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[9]);\n+    for (int j = 0; j < 256; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[8]);\n+    for (int j = 0; j < 128; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[7]);\n+    for (int j = 0; j < 64; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[6]);\n+    for (int j = 0; j < 32; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[5]);\n+    for (int j = 0; j < 8; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[3]);\n+    for (int j = 0; j < 2; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[1]);\n+    for (int j = 0; j < 1; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 5; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[2]);\n+    for (int j = 0; j < 3; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 2; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 4; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 4; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[1]);\n+    for (int j = 0; j < 3; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+\n+    *out = x;\n+}\n+\n+}\n+\n+MuHash3072::MuHash3072() noexcept\n+{\n+    data.limbs[0] = 1;\n+    for (int i = 1; i < Num3072::LIMBS; ++i) data.limbs[i] = 0;\n+}\n+\n+MuHash3072::MuHash3072(const unsigned char* key32) noexcept\n+{\n+    unsigned char tmp[384];\n+    ChaCha20(key32, 32).Output(tmp, 384);\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        if (sizeof(Num3072::limb_type) == 4) {\n+            data.limbs[i] = ReadLE32(tmp + 4 * i);\n+        } else if (sizeof(Num3072::limb_type) == 8) {\n+            data.limbs[i] = ReadLE64(tmp + 8 * i);\n+        }\n+    }\n+}\n+\n+void MuHash3072::Finalize(unsigned char* hash384) noexcept\n+{\n+    if (IsOverflow(&data)) FullReduce(&data);\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        if (sizeof(Num3072::limb_type) == 4) {\n+            WriteLE32(hash384 + i * 4, data.limbs[i]);\n+        } else if (sizeof(Num3072::limb_type) == 8) {\n+            WriteLE64(hash384 + i * 8, data.limbs[i]);\n+        }\n+    }\n+}\n+\n+MuHash3072& MuHash3072::operator*=(const MuHash3072& x) noexcept\n+{\n+    Multiply(&this->data, &this->data, &x.data);\n+    return *this;\n+}\n+\n+MuHash3072& MuHash3072::operator/=(const MuHash3072& x) noexcept\n+{\n+    Num3072 tmp;\n+    Inverse(&tmp, &x.data);\n+    Multiply(&this->data, &this->data, &tmp);\n+    return *this;\n+}"
      },
      {
        "sha": "f29d3f9e1b3555403e02c68eac2ea0fb6100829d",
        "filename": "src/crypto/muhash.h",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c11a333b4329aa95305fd840f99c70e9d3f80c19/src/crypto/muhash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c11a333b4329aa95305fd840f99c70e9d3f80c19/src/crypto/muhash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/muhash.h?ref=c11a333b4329aa95305fd840f99c70e9d3f80c19",
        "patch": "@@ -0,0 +1,52 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"bitcoin-config.h\"\n+#endif\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets */\n+class MuHash3072\n+{\n+private:\n+    Num3072 data;\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept;\n+\n+    /* A singleton with a single 32-byte key in it. */\n+    explicit MuHash3072(const unsigned char* key32) noexcept;\n+\n+    /* Multiply (resulting in a hash for the union of the sets) */\n+    MuHash3072& operator*=(const MuHash3072& add) noexcept;\n+\n+    /* Divide (resulting in a hash for the difference of the sets) */\n+    MuHash3072& operator/=(const MuHash3072& sub) noexcept;\n+\n+    /* Finalize into a 384-byte hash. Does not change this object's value. */\n+    void Finalize(unsigned char* hash384) noexcept;\n+};\n+\n+#endif // BITCOIN_CRYPTO_MUHASH_H"
      },
      {
        "sha": "bae725c91cc272cb8fbd3a5beff29d1ef0462368",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c11a333b4329aa95305fd840f99c70e9d3f80c19/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c11a333b4329aa95305fd840f99c70e9d3f80c19/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=c11a333b4329aa95305fd840f99c70e9d3f80c19",
        "patch": "@@ -10,6 +10,7 @@\n #include \"crypto/sha512.h\"\n #include \"crypto/hmac_sha256.h\"\n #include \"crypto/hmac_sha512.h\"\n+#include \"crypto/muhash.h\"\n #include \"random.h\"\n #include \"utilstrencodings.h\"\n #include \"test/test_bitcoin.h\"\n@@ -505,4 +506,58 @@ BOOST_AUTO_TEST_CASE(countbits_tests)\n     }\n }\n \n+static MuHash3072 FromInt(unsigned char i) {\n+    unsigned char tmp[32] = {i, 0};\n+    return MuHash3072(tmp);\n+}\n+\n+BOOST_AUTO_TEST_CASE(muhash_tests)\n+{\n+    unsigned char out[384];\n+\n+    for (int iter = 0; iter < 10; ++iter) {\n+        unsigned char res[384];\n+        int table[4];\n+        for (int i = 0; i < 4; ++i) {\n+            table[i] = insecure_rand_ctx.randbits(3);\n+        }\n+        for (int order = 0; order < 4; ++order) {\n+            MuHash3072 acc;\n+            for (int i = 0; i < 4; ++i) {\n+                int t = table[i ^ order];\n+                if (t & 4) {\n+                    acc /= FromInt(t & 3);\n+                } else {\n+                    acc *= FromInt(t & 3);\n+                }\n+            }\n+            acc.Finalize(out);\n+            if (order == 0) {\n+                memcpy(res, out, 384);\n+            } else {\n+                BOOST_CHECK(memcmp(res, out, 384) == 0);\n+            }\n+        }\n+\n+        MuHash3072 x = FromInt(insecure_rand_ctx.randbits(4)); // x=X\n+        MuHash3072 y = FromInt(insecure_rand_ctx.randbits(4)); // x=X, y=Y\n+        MuHash3072 z; // x=X, y=Y, z=1\n+        z *= x; // x=X, y=Y, z=X\n+        z /= y; // x=X, y=Y, z=X/Y\n+        y /= x; // x=X, y=Y/X, z=X/Y\n+        z *= y; // x=X, y=Y/X, z=1\n+        z.Finalize(out);\n+        for (int i = 0; i < 384; ++i) {\n+            BOOST_CHECK_EQUAL(out[i], i == 0);\n+        }\n+    }\n+\n+    MuHash3072 acc = FromInt(0);\n+    acc *= FromInt(1);\n+    acc /= FromInt(2);\n+    acc.Finalize(out);\n+    uint256 x = (TruncatedSHA512Writer(SER_DISK, 0) << FLATDATA(out)).GetHash();\n+    BOOST_CHECK(x == uint256S(\"0e94c56c180f27fd6b182f091c5b007e2d6eba5ae28daa5aa92d2af8c26ea9a6\"));\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "c51afa3881ccb1fb11128bb63dbc7ed3d41d433f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTFhZmEzODgxY2NiMWZiMTExMjhiYjYzZGJjN2VkM2Q0MWQ0MzNm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-05-20T01:20:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-30T18:15:45Z"
      },
      "message": "muhash in gettxoutsetinfo",
      "tree": {
        "sha": "d34242143f4572d465bbc24af074be3cd862831c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d34242143f4572d465bbc24af074be3cd862831c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c51afa3881ccb1fb11128bb63dbc7ed3d41d433f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c51afa3881ccb1fb11128bb63dbc7ed3d41d433f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c51afa3881ccb1fb11128bb63dbc7ed3d41d433f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c51afa3881ccb1fb11128bb63dbc7ed3d41d433f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c11a333b4329aa95305fd840f99c70e9d3f80c19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c11a333b4329aa95305fd840f99c70e9d3f80c19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c11a333b4329aa95305fd840f99c70e9d3f80c19"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 59,
      "deletions": 19
    },
    "files": [
      {
        "sha": "cf37b917d0bcf81056228dbe39877a8b0ce3e143",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c51afa3881ccb1fb11128bb63dbc7ed3d41d433f/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c51afa3881ccb1fb11128bb63dbc7ed3d41d433f/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=c51afa3881ccb1fb11128bb63dbc7ed3d41d433f",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha256.h\"\n+#include \"crypto/sha512.h\"\n #include \"prevector.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n@@ -195,6 +196,41 @@ class CHashVerifier : public CHashWriter\n     }\n };\n \n+/** A writer stream that computes a 256-bit truncated SHA512. */\n+class TruncatedSHA512Writer\n+{\n+private:\n+    CSHA512 ctx;\n+\n+    const int nType;\n+    const int nVersion;\n+public:\n+\n+    TruncatedSHA512Writer(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {}\n+\n+    int GetType() const { return nType; }\n+    int GetVersion() const { return nVersion; }\n+\n+    void write(const char *pch, size_t size) {\n+        ctx.Write((const unsigned char*)pch, size);\n+    }\n+\n+    uint256 GetHash() {\n+        unsigned char out[64];\n+        ctx.Finalize(out);\n+        uint256 result;\n+        memcpy((unsigned char*)&result, out, 32);\n+        return result;\n+    }\n+\n+    template<typename T>\n+    TruncatedSHA512Writer& operator<<(const T& obj) {\n+        // Serialize to this stream\n+        ::Serialize(*this, obj);\n+        return (*this);\n+    }\n+};\n+\n /** Compute the 256-bit hash of an object's serialization. */\n template<typename T>\n uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)"
      },
      {
        "sha": "ce123c61af043c267de2bc02d7e7ddd3341a17ef",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 16,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c51afa3881ccb1fb11128bb63dbc7ed3d41d433f/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c51afa3881ccb1fb11128bb63dbc7ed3d41d433f/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=c51afa3881ccb1fb11128bb63dbc7ed3d41d433f",
        "patch": "@@ -11,6 +11,7 @@\n #include \"checkpoints.h\"\n #include \"coins.h\"\n #include \"consensus/validation.h\"\n+#include \"crypto/muhash.h\"\n #include \"validation.h\"\n #include \"core_io.h\"\n #include \"policy/feerate.h\"\n@@ -783,52 +784,50 @@ struct CCoinsStats\n     uint64_t nTransactions;\n     uint64_t nTransactionOutputs;\n     uint64_t nBogoSize;\n-    uint256 hashSerialized;\n+    uint256 muhash;\n     uint64_t nDiskSize;\n     CAmount nTotalAmount;\n \n     CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nBogoSize(0), nDiskSize(0), nTotalAmount(0) {}\n };\n \n-static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n+static void ApplyStats(CCoinsStats &stats, MuHash3072& acc, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n {\n     assert(!outputs.empty());\n-    ss << hash;\n-    ss << VARINT(outputs.begin()->second.nHeight * 2 + outputs.begin()->second.fCoinBase);\n     stats.nTransactions++;\n     for (const auto output : outputs) {\n-        ss << VARINT(output.first + 1);\n-        ss << *(const CScriptBase*)(&output.second.out.scriptPubKey);\n-        ss << VARINT(output.second.out.nValue);\n+        TruncatedSHA512Writer ss(SER_DISK, 0);\n+        ss << COutPoint(hash, output.first);\n+        ss << (uint32_t)(output.second.nHeight * 2 + output.second.fCoinBase);\n+        ss << output.second.out;\n+        acc *= MuHash3072(ss.GetHash().begin());\n         stats.nTransactionOutputs++;\n         stats.nTotalAmount += output.second.out.nValue;\n         stats.nBogoSize += 32 /* txid */ + 4 /* vout index */ + 4 /* height + coinbase */ + 8 /* amount */ +\n                            2 /* scriptPubKey len */ + output.second.out.scriptPubKey.size() /* scriptPubKey */;\n     }\n-    ss << VARINT(0);\n }\n \n //! Calculate statistics about the unspent transaction output set\n static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n {\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n \n-    CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n     stats.hashBlock = pcursor->GetBestBlock();\n     {\n         LOCK(cs_main);\n         stats.nHeight = mapBlockIndex.find(stats.hashBlock)->second->nHeight;\n     }\n-    ss << stats.hashBlock;\n-    uint256 prevkey;\n+    MuHash3072 acc;\n     std::map<uint32_t, Coin> outputs;\n+    uint256 prevkey;\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n         COutPoint key;\n         Coin coin;\n         if (pcursor->GetKey(key) && pcursor->GetValue(coin)) {\n             if (!outputs.empty() && key.hash != prevkey) {\n-                ApplyStats(stats, ss, prevkey, outputs);\n+                ApplyStats(stats, acc, prevkey, outputs);\n                 outputs.clear();\n             }\n             prevkey = key.hash;\n@@ -839,9 +838,13 @@ static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n         pcursor->Next();\n     }\n     if (!outputs.empty()) {\n-        ApplyStats(stats, ss, prevkey, outputs);\n+        ApplyStats(stats, acc, prevkey, outputs);\n     }\n-    stats.hashSerialized = ss.GetHash();\n+    unsigned char data[384];\n+    acc.Finalize(data);\n+    TruncatedSHA512Writer ss(SER_DISK, 0);\n+    ss << FLATDATA(data);\n+    stats.muhash = ss.GetHash();\n     stats.nDiskSize = view->EstimateSize();\n     return true;\n }\n@@ -909,7 +912,7 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             \"  \\\"transactions\\\": n,      (numeric) The number of transactions\\n\"\n             \"  \\\"txouts\\\": n,            (numeric) The number of output transactions\\n\"\n             \"  \\\"bogosize\\\": n,          (numeric) A meaningless metric for UTXO set size\\n\"\n-            \"  \\\"hash_serialized_2\\\": \\\"hash\\\", (string) The serialized hash\\n\"\n+            \"  \\\"muhash\\\": \\\"hash\\\",     (string) Rolling UTXO set hash\\n\"\n             \"  \\\"disk_size\\\": n,         (numeric) The estimated size of the chainstate on disk\\n\"\n             \"  \\\"total_amount\\\": x.xxx          (numeric) The total amount\\n\"\n             \"}\\n\"\n@@ -928,7 +931,7 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n         ret.push_back(Pair(\"transactions\", (int64_t)stats.nTransactions));\n         ret.push_back(Pair(\"txouts\", (int64_t)stats.nTransactionOutputs));\n         ret.push_back(Pair(\"bogosize\", (int64_t)stats.nBogoSize));\n-        ret.push_back(Pair(\"hash_serialized_2\", stats.hashSerialized.GetHex()));\n+        ret.push_back(Pair(\"muhash\", stats.muhash.GetHex()));\n         ret.push_back(Pair(\"disk_size\", stats.nDiskSize));\n         ret.push_back(Pair(\"total_amount\", ValueFromAmount(stats.nTotalAmount)));\n     } else {"
      },
      {
        "sha": "9d080ed783d10307b05984ced95740efd09def3f",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c51afa3881ccb1fb11128bb63dbc7ed3d41d433f/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c51afa3881ccb1fb11128bb63dbc7ed3d41d433f/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=c51afa3881ccb1fb11128bb63dbc7ed3d41d433f",
        "patch": "@@ -70,7 +70,7 @@ def _test_gettxoutsetinfo(self):\n         assert size > 6400\n         assert size < 64000\n         assert_equal(len(res['bestblock']), 64)\n-        assert_equal(len(res['hash_serialized_2']), 64)\n+        assert_equal(len(res['muhash']), 64)\n \n         self.log.info(\"Test that gettxoutsetinfo() works for blockchain with just the genesis block\")\n         b1hash = node.getblockhash(1)\n@@ -83,7 +83,8 @@ def _test_gettxoutsetinfo(self):\n         assert_equal(res2['txouts'], 0)\n         assert_equal(res2['bogosize'], 0),\n         assert_equal(res2['bestblock'], node.getblockhash(0))\n-        assert_equal(len(res2['hash_serialized_2']), 64)\n+        assert_equal(res2['muhash'], '1ab6089a655235d9609a687448dc4cc429302704eded8b0615f93bfe03ec658f')\n+        assert res2['muhash'] != res['muhash']\n \n         self.log.info(\"Test that gettxoutsetinfo() returns the same result after invalidate/reconsider block\")\n         node.reconsiderblock(b1hash)\n@@ -95,7 +96,7 @@ def _test_gettxoutsetinfo(self):\n         assert_equal(res['txouts'], res3['txouts'])\n         assert_equal(res['bogosize'], res3['bogosize'])\n         assert_equal(res['bestblock'], res3['bestblock'])\n-        assert_equal(res['hash_serialized_2'], res3['hash_serialized_2'])\n+        assert_equal(res['muhash'], res3['muhash'])\n \n     def _test_getblockheader(self):\n         node = self.nodes[0]"
      }
    ]
  },
  {
    "sha": "d24afe6b0cbbf4ff2df75c5844ab46ec6358bbf0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjRhZmU2YjBjYmJmNGZmMmRmNzVjNTg0NGFiNDZlYzYzNThiYmYw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-30T18:11:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-30T18:15:45Z"
      },
      "message": "Simplification",
      "tree": {
        "sha": "197140abcc8f9cda81115c17646c9920af3ed811",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/197140abcc8f9cda81115c17646c9920af3ed811"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d24afe6b0cbbf4ff2df75c5844ab46ec6358bbf0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d24afe6b0cbbf4ff2df75c5844ab46ec6358bbf0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d24afe6b0cbbf4ff2df75c5844ab46ec6358bbf0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d24afe6b0cbbf4ff2df75c5844ab46ec6358bbf0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c51afa3881ccb1fb11128bb63dbc7ed3d41d433f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c51afa3881ccb1fb11128bb63dbc7ed3d41d433f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c51afa3881ccb1fb11128bb63dbc7ed3d41d433f"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 11,
      "deletions": 24
    },
    "files": [
      {
        "sha": "7c989fad80f71b8dd071c57a338facd92106201d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 24,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d24afe6b0cbbf4ff2df75c5844ab46ec6358bbf0/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d24afe6b0cbbf4ff2df75c5844ab46ec6358bbf0/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=d24afe6b0cbbf4ff2df75c5844ab46ec6358bbf0",
        "patch": "@@ -791,21 +791,18 @@ struct CCoinsStats\n     CCoinsStats() : nHeight(0), nTransactions(0), nTransactionOutputs(0), nBogoSize(0), nDiskSize(0), nTotalAmount(0) {}\n };\n \n-static void ApplyStats(CCoinsStats &stats, MuHash3072& acc, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n+static void ApplyStats(CCoinsStats &stats, MuHash3072& acc, const COutPoint outpoint, const Coin& coin)\n {\n-    assert(!outputs.empty());\n     stats.nTransactions++;\n-    for (const auto output : outputs) {\n-        TruncatedSHA512Writer ss(SER_DISK, 0);\n-        ss << COutPoint(hash, output.first);\n-        ss << (uint32_t)(output.second.nHeight * 2 + output.second.fCoinBase);\n-        ss << output.second.out;\n-        acc *= MuHash3072(ss.GetHash().begin());\n-        stats.nTransactionOutputs++;\n-        stats.nTotalAmount += output.second.out.nValue;\n-        stats.nBogoSize += 32 /* txid */ + 4 /* vout index */ + 4 /* height + coinbase */ + 8 /* amount */ +\n-                           2 /* scriptPubKey len */ + output.second.out.scriptPubKey.size() /* scriptPubKey */;\n-    }\n+    TruncatedSHA512Writer ss(SER_DISK, 0);\n+    ss << outpoint;\n+    ss << (uint32_t)(coin.nHeight * 2 + coin.fCoinBase);\n+    ss << coin.out;\n+    acc *= MuHash3072(ss.GetHash().begin());\n+    stats.nTransactionOutputs++;\n+    stats.nTotalAmount += coin.out.nValue;\n+    stats.nBogoSize += 32 /* txid */ + 4 /* vout index */ + 4 /* height + coinbase */ + 8 /* amount */ +\n+                       2 /* scriptPubKey len */ + coin.out.scriptPubKey.size() /* scriptPubKey */;\n }\n \n //! Calculate statistics about the unspent transaction output set\n@@ -819,27 +816,17 @@ static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n         stats.nHeight = mapBlockIndex.find(stats.hashBlock)->second->nHeight;\n     }\n     MuHash3072 acc;\n-    std::map<uint32_t, Coin> outputs;\n-    uint256 prevkey;\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n         COutPoint key;\n         Coin coin;\n         if (pcursor->GetKey(key) && pcursor->GetValue(coin)) {\n-            if (!outputs.empty() && key.hash != prevkey) {\n-                ApplyStats(stats, acc, prevkey, outputs);\n-                outputs.clear();\n-            }\n-            prevkey = key.hash;\n-            outputs[key.n] = std::move(coin);\n+            ApplyStats(stats, acc, key, coin);\n         } else {\n             return error(\"%s: unable to read value\", __func__);\n         }\n         pcursor->Next();\n     }\n-    if (!outputs.empty()) {\n-        ApplyStats(stats, acc, prevkey, outputs);\n-    }\n     unsigned char data[384];\n     acc.Finalize(data);\n     TruncatedSHA512Writer ss(SER_DISK, 0);"
      }
    ]
  },
  {
    "sha": "93f3680395814d747db04c2b464fc56f6a6cecf1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2YzNjgwMzk1ODE0ZDc0N2RiMDRjMmI0NjRmYzU2ZjZhNmNlY2Yx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-30T18:15:17Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-30T18:15:45Z"
      },
      "message": "Add x86_64 assembly optimization for MuHash",
      "tree": {
        "sha": "a00d27530176e2ea803fbdfbc47cf79d2dc97540",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a00d27530176e2ea803fbdfbc47cf79d2dc97540"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93f3680395814d747db04c2b464fc56f6a6cecf1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93f3680395814d747db04c2b464fc56f6a6cecf1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93f3680395814d747db04c2b464fc56f6a6cecf1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93f3680395814d747db04c2b464fc56f6a6cecf1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d24afe6b0cbbf4ff2df75c5844ab46ec6358bbf0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d24afe6b0cbbf4ff2df75c5844ab46ec6358bbf0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d24afe6b0cbbf4ff2df75c5844ab46ec6358bbf0"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 50,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4ac1d88619419f3f460b891d338f6d52f0f5705a",
        "filename": "src/crypto/muhash.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93f3680395814d747db04c2b464fc56f6a6cecf1/src/crypto/muhash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93f3680395814d747db04c2b464fc56f6a6cecf1/src/crypto/muhash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/muhash.cpp?ref=93f3680395814d747db04c2b464fc56f6a6cecf1",
        "patch": "@@ -28,6 +28,54 @@ namespace {\n     c1 = 0; \\\n }\n \n+#if defined(__amd64__) || defined(__x86_64__)\n+\n+/** [c0,c1] = a * b */\n+#define mul(c0,c1,a,b) { \\\n+    __asm__ (\"mulq %3\" : \"=d\"(c1), \"=a\"(c0) : \"a\"(a), \"g\"(b) : \"cc\"); \\\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+#define muladd3(c0,c1,c2,a,b) { \\\n+    uint64_t tl, th; \\\n+    __asm__ (\"mulq %3\" : \"=a\"(tl), \"=d\"(th) : \"a\"(a), \"g\"(b) : \"cc\"); \\\n+    __asm__ (\"addq %3,%0; adcq %4,%1; adcq $0,%2\" : \"+r\"(c0), \"+r\"(c1), \"+r\"(c2) : \"a\"(tl), \"d\"(th) : \"cc\"); \\\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+#define muldbladd3(c0,c1,c2,a,b) { \\\n+    uint64_t tl, th; \\\n+    __asm__ (\"mulq %3\" : \"=a\"(tl), \"=d\"(th) : \"a\"(a), \"g\"(b) : \"cc\"); \\\n+    __asm__ (\"addq %3,%0; adcq %4,%1; adcq $0,%2\" : \"+r\"(c0), \"+r\"(c1), \"+r\"(c2) : \"a\"(tl), \"d\"(th) : \"cc\"); \\\n+    __asm__ (\"addq %3,%0; adcq %4,%1; adcq $0,%2\" : \"+r\"(c0), \"+r\"(c1), \"+r\"(c2) : \"a\"(tl), \"d\"(th) : \"cc\"); \\\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c0 is initially 0 */\n+#define mulnadd3(c0,c1,c2,d0,d1,d2,n) { \\\n+    uint64_t tl1, th1, tl2, th2, tl3; \\\n+    __asm__ (\"mulq %3\" : \"=a\"(tl1), \"=d\"(th1) : \"a\"(d0), \"r\"((Num3072::limb_type)n) : \"cc\"); \\\n+    __asm__ (\"addq %3,%0; adcq %4,%1; adcq $0,%2\" : \"+r\"(c0), \"+r\"(c1), \"+r\"(c2) : \"g\"(tl1), \"g\"(th1) : \"cc\"); \\\n+    __asm__ (\"mulq %3\" : \"=a\"(tl2), \"=d\"(th2) : \"a\"(d1), \"r\"((Num3072::limb_type)n) : \"cc\"); \\\n+    __asm__ (\"addq %2,%0; adcq %3,%1\" : \"+r\"(c1), \"+r\"(c2) : \"g\"(tl2), \"g\"(th2) : \"cc\"); \\\n+    __asm__ (\"imulq %2,%1,%0\" : \"=r\"(tl3) : \"g\"(d2), \"i\"(n) : \"cc\"); \\\n+    __asm__ (\"addq %1,%0\" : \"+r\"(c2) : \"g\"(tl3) : \"cc\"); \\\n+}\n+\n+/* [c0,c1] *= n */\n+#define muln2(c0,c1,n) { \\\n+    uint64_t th; \\\n+    __asm__ (\"mulq %2\" : \"+a\"(c0), \"=d\"(th) : \"r\"((Num3072::limb_type)n) : \"cc\"); \\\n+    __asm__ (\"imul %1,%0,%0\" : \"+r\"(c1) : \"i\"(n) : \"cc\"); \\\n+    __asm__ (\"addq %1,%0\" : \"+r\"(c1) : \"g\"(th) : \"cc\"); \\\n+}\n+\n+/** [c0,c1] += a */\n+#define add2(c0,c1,a) { \\\n+    __asm__ (\"add %2,%0; adc $0,%1\" : \"+r\"(c0), \"+r\"(c1) : \"r\"(a) : \"cc\"); \\\n+}\n+\n+#else\n+\n /** [c0,c1] = a * b */\n #define mul(c0,c1,a,b) { \\\n     Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n@@ -95,6 +143,8 @@ namespace {\n     c1 += (c0 < (a)) ? 1 : 0; \\\n }\n \n+#endif\n+\n bool IsOverflow(const Num3072* d)\n {\n     for (int i = 1; i < Num3072::LIMBS - 1; ++i) {"
      }
    ]
  }
]