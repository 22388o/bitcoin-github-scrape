promag,2017-10-02T21:30:59Z,In #10286 the commit *Fix zmq tests now that txn/blocks are unordered* (04feed) can be removed after this is merged. cc @TheBlueMatt ,https://github.com/bitcoin/bitcoin/pull/11439#issuecomment-333671224,333671224,
TheBlueMatt,2017-10-02T21:35:55Z,"Hmm, I removed the commit in question from #10286 (replaced with https://github.com/bitcoin/bitcoin/pull/10286/commits/fdfd31355bfd1401c60e1ff3ec581d8f3ff29291). Its really unclear to me what the ZMQ API is, even - its not defined anywhere if clients should or should not rely on the ordering here. The fact that it was possible for our test to implies to me that we should maybe keep the ordering co",https://github.com/bitcoin/bitcoin/pull/11439#issuecomment-333672328,333672328,
promag,2017-10-02T21:40:40Z,There is no order guarantee and as such the clients can't and shouldn't rely on that - that's why the type is the first piece in each message. IMO we should avoid the ordering in the test because it is a bad example on how to subscribe and process the notifications.,https://github.com/bitcoin/bitcoin/pull/11439#issuecomment-333673366,333673366,
promag,2017-10-02T22:06:37Z,"After some discussion with @TheBlueMatt on IRC we came to the conclusion that there should be an improvement to the ZMQ interface documentation regarding all notifications, respective payloads and guarantees.",https://github.com/bitcoin/bitcoin/pull/11439#issuecomment-333679017,333679017,
promag,2017-10-03T17:40:13Z,"@jnewbery I believe we don't want the loop right?\n\nhttps://github.com/bitcoin/bitcoin/blob/dbc4ae03963014ab4b7957d62ba59dbd8f938c33/contrib/zmq/zmq_sub.py#L41",https://github.com/bitcoin/bitcoin/pull/11439#issuecomment-333921956,333921956,
jnewbery,2017-10-04T14:25:07Z,"Useful discussion of zmq notification ordering here: https://botbot.me/freenode/bitcoin-core-dev/2017-10-03/?msg=91859584&page=1\n\nI still think this PR could be a useful simplification in the test code.",https://github.com/bitcoin/bitcoin/pull/11439#issuecomment-334172725,334172725,
promag,2017-10-04T14:50:38Z,"This is controversial and unneeded at the moment, as @TheBlueMatt said, the current order (although not documented) will not change and this test (as it is in master) helps to verify it.\n\nTherefore I'm closing this and I'll submit another with the cleanup and another with improved ZMQ interface documentation.",https://github.com/bitcoin/bitcoin/pull/11439#issuecomment-334181141,334181141,
jnewbery,2017-10-03T16:02:55Z,nit: prefer `ZMQSubscriber`,https://github.com/bitcoin/bitcoin/pull/11439#discussion_r142446199,142446199,test/functional/zmq_test.py
jnewbery,2017-10-03T16:30:14Z,Why not move this logic into `ZMQSubscriber.__init__()`? Then you'd just need to pass in `self.zmqContext`. Port could be taken from a class variable to ensure uniqueness.,https://github.com/bitcoin/bitcoin/pull/11439#discussion_r142453332,142453332,test/functional/zmq_test.py
promag,2017-10-03T17:37:50Z,Ok.,https://github.com/bitcoin/bitcoin/pull/11439#discussion_r142470348,142470348,test/functional/zmq_test.py
promag,2017-10-03T17:39:49Z,"`ZMQSubscriber` is like a C++ POD, did't want to have logic there. Is this a strong suggestion?",https://github.com/bitcoin/bitcoin/pull/11439#discussion_r142470886,142470886,test/functional/zmq_test.py
jnewbery,2017-10-03T17:53:02Z,"It makes more sense to me to have `ZMQSubscriber` handle the initialization logic (and also preferably the receive logic). That makes it more portable if for some reason we want to use the interface in another test.\n\nConceptually it doesn't make sense to me to have a TestFramework object subscribing to a zmq interface. Owning ZMQ subscribers makes more sense to me.",https://github.com/bitcoin/bitcoin/pull/11439#discussion_r142474301,142474301,test/functional/zmq_test.py
ryanofsky,2017-10-04T14:17:37Z,Unnecessary parentheses.,https://github.com/bitcoin/bitcoin/pull/11439#discussion_r142683344,142683344,test/functional/zmq_test.py
