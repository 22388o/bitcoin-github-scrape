[
  {
    "sha": "d0f5b012ace884e7dfb595ce594aebf7508ad314",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMGY1YjAxMmFjZTg4NGU3ZGZiNTk1Y2U1OTRhZWJmNzUwOGFkMzE0",
    "commit": {
      "author": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-03-20T19:20:47Z"
      },
      "committer": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-03-20T19:20:47Z"
      },
      "message": "test: added test for JSONRPC-objects",
      "tree": {
        "sha": "5caf17d901144ea8ebb7e2fd35956fff8547c3d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5caf17d901144ea8ebb7e2fd35956fff8547c3d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0f5b012ace884e7dfb595ce594aebf7508ad314",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEED2bWxOeRx//n2QOeJiaFvHjtEfsFAl51F5AACgkQJiaFvHjt\nEftl5gf9EsDL7KgKx7/KWIWi9ES8tu75jUA6oVyOpUDNpmkI8s4ZaGL+c1eZYnnH\n6eFPQ3TE/hbNxfyF5nJLVLNM/2ySVI1q1SyrnJt2d2lCMgbdRw9tYXgEmMWlDh0j\nMJCxDxnaEF1/8c9M5t5o+rcxJF3H1P/y9RuklpUjreevT0VCkbbqJhB7mu/4Sy9Q\n2W9H8Gre6P5HEU0eg7izcS9iM7gUZ65bnZGAuj+4Ra30cGV4BF8U1uY5TMLjDueU\nsBnALJP3F9vL+McibtE0QfPyOm9d0HljYqgS3uBFcqOqmmsNoVURD4icfiZolOHI\n9GZ/f0F6LuaNVhyjAU9CbjlmcKUmtw==\n=QKc9\n-----END PGP SIGNATURE-----",
        "payload": "tree 5caf17d901144ea8ebb7e2fd35956fff8547c3d2\nparent 5bf45fe2a9642f8ae8f8a12bcbf8f8b4770421ad\nauthor Harris <brakmic@gmail.com> 1584732047 +0100\ncommitter Harris <brakmic@gmail.com> 1584732047 +0100\n\ntest: added test for JSONRPC-objects\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0f5b012ace884e7dfb595ce594aebf7508ad314",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0f5b012ace884e7dfb595ce594aebf7508ad314",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0f5b012ace884e7dfb595ce594aebf7508ad314/comments",
    "author": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5bf45fe2a9642f8ae8f8a12bcbf8f8b4770421ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bf45fe2a9642f8ae8f8a12bcbf8f8b4770421ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bf45fe2a9642f8ae8f8a12bcbf8f8b4770421ad"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 61,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1e4f443f35ec7c18ed5d20e87c720b1a0da1eb3c",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 1,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0f5b012ace884e7dfb595ce594aebf7508ad314/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0f5b012ace884e7dfb595ce594aebf7508ad314/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=d0f5b012ace884e7dfb595ce594aebf7508ad314",
        "patch": "@@ -39,9 +39,69 @@ UniValue CallRPC(std::string args)\n     }\n }\n \n-\n BOOST_FIXTURE_TEST_SUITE(rpc_tests, TestingSetup)\n \n+BOOST_AUTO_TEST_CASE(rpc_object_parsing)\n+{\n+    UniValue r;\n+    JSONRPCRequest jsonrpcrequest;\n+    UniValue request(UniValue::VOBJ);\n+    UniValue params(UniValue::VARR);\n+    UniValue id(1);\n+    request.pushKV(\"method\", \"getnetworkinfo\");\n+    request.pushKV(\"params\", NullUniValue);\n+    request.pushKV(\"id\", id);\n+    // Should parse valid request object.\n+    BOOST_CHECK_NO_THROW(jsonrpcrequest.parse(request));\n+    // Should construct valid request object.\n+    BOOST_CHECK_NO_THROW(r = JSONRPCRequestObj(\"getnetworkinfo\", params, id));\n+    \n+    const UniValue result(100);\n+    r = JSONRPCReplyObj(result, NullUniValue, id);\n+    auto queried_result = find_value(r, \"result\");\n+    // Should construct valid reply object containing \"result\" field\n+    // when given error-object is NullUniValue.\n+    BOOST_CHECK_EQUAL(queried_result.get_int(), 100);\n+    \n+    const UniValue error(UniValue::VSTR, \"ERROR\");\n+    r = JSONRPCReplyObj(result, error, id);\n+    std::string queried_error;\n+    // Should construct valid reply object containing \"error\" field\n+    // when given error-object is not NullUniValue.\n+    BOOST_CHECK_NO_THROW(queried_error = r[\"error\"].get_str());\n+    // Should return the message from object's \"error\" field.\n+    BOOST_CHECK_EQUAL(queried_error, \"ERROR\");\n+\n+    int error_code = 23;\n+    int returned_code;\n+    // Should construct a valid error object.\n+    BOOST_CHECK_NO_THROW(r = JSONRPCError(error_code, \"This is an error message\"));\n+    // Should return an error code.\n+    BOOST_CHECK_NO_THROW(returned_code = r[\"code\"].get_int());\n+    // Should have returned the original error code.\n+    BOOST_CHECK_EQUAL(returned_code, error_code);\n+\n+    std::string json_string;\n+    // Should return a serialized object.\n+    BOOST_CHECK_NO_THROW(json_string = JSONRPCReply(request, NullUniValue, id));\n+    // Should have returned a non-empty string.\n+    BOOST_CHECK(json_string.length() > 0);\n+\n+    UniValue a_batch(UniValue::VARR);\n+    UniValue one = JSONRPCReplyObj(UniValue(\"result_1\"), NullUniValue, UniValue(UniValue::VNUM, \"1\"));\n+    UniValue two = JSONRPCReplyObj(UniValue(\"result_2\"), NullUniValue, UniValue(UniValue::VNUM, \"2\"));\n+    UniValue three = JSONRPCReplyObj(UniValue(\"result_3\"), NullUniValue, UniValue(UniValue::VNUM, \"3\"));\n+\n+    a_batch.push_back(one);\n+    a_batch.push_back(two);\n+    a_batch.push_back(three);\n+    std::vector<UniValue> jsons;\n+    // Should return a vector of UniValue objects\n+    BOOST_CHECK_NO_THROW(jsons = JSONRPCProcessBatchReply(a_batch, 4));\n+    // Should have returned a vector that is not empty\n+    BOOST_CHECK(jsons.size() > 0);\n+}\n+\n BOOST_AUTO_TEST_CASE(rpc_rawparams)\n {\n     // Test raw transaction API argument handling"
      }
    ]
  }
]