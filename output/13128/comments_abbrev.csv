practicalswift,2018-05-14T15:07:43Z,@MarcoFalke Good idea. Renamed from `cs_feeEstimator` to `m_cs_fee_estimator`. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/13128#issuecomment-388851373,388851373,
DrahtBot,2018-07-22T23:49:38Z,"<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 69 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",https://github.com/bitcoin/bitcoin/pull/13128#issuecomment-406906704,406906704,
practicalswift,2018-08-27T16:22:30Z,@MarcoFalke Would you mind re-review this locking PR you looked at before? :-),https://github.com/bitcoin/bitcoin/pull/13128#issuecomment-416282681,416282681,
DrahtBot,2018-09-20T22:37:37Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#10443](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/10443.html) (Add fee_est tool for debugging fee estimati",https://github.com/bitcoin/bitcoin/pull/13128#issuecomment-423356718,423356718,
practicalswift,2018-10-08T13:20:46Z,"@Empact @MarcoFalke Updated. Would you mind re-reviewing? The current version is annotations only, so no change in locking. In other words: this PR changes only compile-time checking and no runtime behaviour. Should hence hopefully be trivial to review :-)",https://github.com/bitcoin/bitcoin/pull/13128#issuecomment-427829976,427829976,
ken2812221,2018-12-02T07:11:54Z,utACK 1a01e1c120809b19ddc9c9c6ee5d6686a90f55b3,https://github.com/bitcoin/bitcoin/pull/13128#issuecomment-443486904,443486904,
practicalswift,2018-12-19T15:29:49Z,Any chance of getting this reviewed? It is a compile time check only :-),https://github.com/bitcoin/bitcoin/pull/13128#issuecomment-448635770,448635770,
ryanofsky,2019-01-07T18:26:17Z,"Adding `EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator)` to `processBlockTx` caused a bunch of problems in #10443 due to `cs_feeEstimator` being a private member. In [pr/fee.30](https://github.com/ryanofsky/bitcoin/commits/pr/fee.30), `CTxMemPool::removeForBlock` would call `CBlockPolicyEstimator::processBlock`, which would lock `cs_feeEstimator`, and then call a lambda passed from the caller to loop th",https://github.com/bitcoin/bitcoin/pull/13128#issuecomment-452032584,452032584,
MarcoFalke,2018-05-14T14:52:56Z,Might as well rename to `m_cs_fee_estimator` according to developer notes.,https://github.com/bitcoin/bitcoin/pull/13128#discussion_r187983294,187983294,src/policy/fees.h
Empact,2018-09-02T07:07:12Z,"I don't think we need exclusive locking here, as `GetMaxConfirms` is a read so concurrent access wouldn't result in incoherent data.",https://github.com/bitcoin/bitcoin/pull/13128#discussion_r214530826,214530826,src/policy/fees.cpp
Empact,2018-09-02T07:07:44Z,"`get` is a read of the ptr value, which is only updated in the constructor, so this lock is unnecessary AFAICT. `PT_GUARDED_BY` could be more appropriate.",https://github.com/bitcoin/bitcoin/pull/13128#discussion_r214530840,214530840,src/policy/fees.cpp
Empact,2018-12-02T08:01:53Z,"nit: did you try marking these `PT_GUARDED_BY`? Seems it would be appropriate, based on the lock in `estimateRawFee`.",https://github.com/bitcoin/bitcoin/pull/13128#discussion_r238088405,238088405,src/policy/fees.h
