[
  {
    "sha": "9a789d4dc63b4c5feb053fbc0a04d1fb41fd3720",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTc4OWQ0ZGM2M2I0YzVmZWIwNTNmYmMwYTA0ZDFmYjQxZmQzNzIw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-08T13:17:18Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-12-02T20:18:04Z"
      },
      "message": "policy: Add Clang thread safety annotations for variables guarded by cs_feeEstimator",
      "tree": {
        "sha": "f305a915a64add83e2a2ec1b15092ceb470d9fa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f305a915a64add83e2a2ec1b15092ceb470d9fa4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a789d4dc63b4c5feb053fbc0a04d1fb41fd3720",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a789d4dc63b4c5feb053fbc0a04d1fb41fd3720",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a789d4dc63b4c5feb053fbc0a04d1fb41fd3720",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a789d4dc63b4c5feb053fbc0a04d1fb41fd3720/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed12fd83ca7999a896350197533de5e9202bc2fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed12fd83ca7999a896350197533de5e9202bc2fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed12fd83ca7999a896350197533de5e9202bc2fe"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 17,
      "deletions": 17
    },
    "files": [
      {
        "sha": "d3deff9b92c688bf1496c4ca165618591a7c1f11",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a789d4dc63b4c5feb053fbc0a04d1fb41fd3720/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a789d4dc63b4c5feb053fbc0a04d1fb41fd3720/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=9a789d4dc63b4c5feb053fbc0a04d1fb41fd3720",
        "patch": "@@ -228,10 +228,12 @@ class CBlockPolicyEstimator\n     unsigned int HighestTargetTracked(FeeEstimateHorizon horizon) const;\n \n private:\n-    unsigned int nBestSeenHeight;\n-    unsigned int firstRecordedHeight;\n-    unsigned int historicalFirst;\n-    unsigned int historicalBest;\n+    mutable CCriticalSection cs_feeEstimator;\n+\n+    unsigned int nBestSeenHeight GUARDED_BY(cs_feeEstimator);\n+    unsigned int firstRecordedHeight GUARDED_BY(cs_feeEstimator);\n+    unsigned int historicalFirst GUARDED_BY(cs_feeEstimator);\n+    unsigned int historicalBest GUARDED_BY(cs_feeEstimator);\n \n     struct TxStatsInfo\n     {\n@@ -241,34 +243,32 @@ class CBlockPolicyEstimator\n     };\n \n     // map of txids to information about that transaction\n-    std::map<uint256, TxStatsInfo> mapMemPoolTxs;\n+    std::map<uint256, TxStatsInfo> mapMemPoolTxs GUARDED_BY(cs_feeEstimator);\n \n     /** Classes to track historical data on transaction confirmations */\n     std::unique_ptr<TxConfirmStats> feeStats;\n     std::unique_ptr<TxConfirmStats> shortStats;\n     std::unique_ptr<TxConfirmStats> longStats;\n \n-    unsigned int trackedTxs;\n-    unsigned int untrackedTxs;\n+    unsigned int trackedTxs GUARDED_BY(cs_feeEstimator);\n+    unsigned int untrackedTxs GUARDED_BY(cs_feeEstimator);\n \n-    std::vector<double> buckets;              // The upper-bound of the range for the bucket (inclusive)\n-    std::map<double, unsigned int> bucketMap; // Map of bucket upper-bound to index into all vectors by bucket\n-\n-    mutable CCriticalSection cs_feeEstimator;\n+    std::vector<double> buckets GUARDED_BY(cs_feeEstimator); // The upper-bound of the range for the bucket (inclusive)\n+    std::map<double, unsigned int> bucketMap GUARDED_BY(cs_feeEstimator); // Map of bucket upper-bound to index into all vectors by bucket\n \n     /** Process a transaction confirmed in a block*/\n-    bool processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry);\n+    bool processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry) EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator);\n \n     /** Helper for estimateSmartFee */\n-    double estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon, EstimationResult *result) const;\n+    double estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon, EstimationResult *result) const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator);\n     /** Helper for estimateSmartFee */\n-    double estimateConservativeFee(unsigned int doubleTarget, EstimationResult *result) const;\n+    double estimateConservativeFee(unsigned int doubleTarget, EstimationResult *result) const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator);\n     /** Number of blocks of data recorded while fee estimates have been running */\n-    unsigned int BlockSpan() const;\n+    unsigned int BlockSpan() const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator);\n     /** Number of blocks of recorded fee estimate data represented in saved data file */\n-    unsigned int HistoricalBlockSpan() const;\n+    unsigned int HistoricalBlockSpan() const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator);\n     /** Calculation of highest target that reasonable estimate can be provided for */\n-    unsigned int MaxUsableEstimate() const;\n+    unsigned int MaxUsableEstimate() const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator);\n };\n \n class FeeFilterRounder"
      }
    ]
  },
  {
    "sha": "764e42fee2df1253db6407bd8e1e477d31e9350c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjRlNDJmZWUyZGYxMjUzZGI2NDA3YmQ4ZTFlNDc3ZDMxZTkzNTBj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-08T13:18:43Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-12-02T20:18:04Z"
      },
      "message": "scripted-diff: Rename from cs_feeEstimator to m_cs_fee_estimator\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/cs_feeEstimator/m_cs_fee_estimator/' src/policy/fees.cpp src/policy/fees.h\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "9b1d89f96731ca676d0d5cf90631615479f98f4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b1d89f96731ca676d0d5cf90631615479f98f4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/764e42fee2df1253db6407bd8e1e477d31e9350c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/764e42fee2df1253db6407bd8e1e477d31e9350c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/764e42fee2df1253db6407bd8e1e477d31e9350c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/764e42fee2df1253db6407bd8e1e477d31e9350c/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a789d4dc63b4c5feb053fbc0a04d1fb41fd3720",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a789d4dc63b4c5feb053fbc0a04d1fb41fd3720",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a789d4dc63b4c5feb053fbc0a04d1fb41fd3720"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 24,
      "deletions": 24
    },
    "files": [
      {
        "sha": "b958270c3ba85ba38f7212fbe7a466b62e86d59f",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/764e42fee2df1253db6407bd8e1e477d31e9350c/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/764e42fee2df1253db6407bd8e1e477d31e9350c/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=764e42fee2df1253db6407bd8e1e477d31e9350c",
        "patch": "@@ -511,7 +511,7 @@ void TxConfirmStats::removeTx(unsigned int entryHeight, unsigned int nBestSeenHe\n // of no harm to try to remove them again.\n bool CBlockPolicyEstimator::removeTx(uint256 hash, bool inBlock)\n {\n-    LOCK(cs_feeEstimator);\n+    LOCK(m_cs_fee_estimator);\n     std::map<uint256, TxStatsInfo>::iterator pos = mapMemPoolTxs.find(hash);\n     if (pos != mapMemPoolTxs.end()) {\n         feeStats->removeTx(pos->second.blockHeight, nBestSeenHeight, pos->second.bucketIndex, inBlock);\n@@ -548,7 +548,7 @@ CBlockPolicyEstimator::~CBlockPolicyEstimator()\n \n void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate)\n {\n-    LOCK(cs_feeEstimator);\n+    LOCK(m_cs_fee_estimator);\n     unsigned int txHeight = entry.GetHeight();\n     uint256 hash = entry.GetTx().GetHash();\n     if (mapMemPoolTxs.count(hash)) {\n@@ -615,7 +615,7 @@ bool CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxM\n void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n                                          std::vector<const CTxMemPoolEntry*>& entries)\n {\n-    LOCK(cs_feeEstimator);\n+    LOCK(m_cs_fee_estimator);\n     if (nBlockHeight <= nBestSeenHeight) {\n         // Ignore side chains and re-orgs; assuming they are random\n         // they don't affect the estimate.\n@@ -693,7 +693,7 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n     }\n     }\n \n-    LOCK(cs_feeEstimator);\n+    LOCK(m_cs_fee_estimator);\n     // Return failure if trying to analyze a target we're not tracking\n     if (confTarget <= 0 || (unsigned int)confTarget > stats->GetMaxConfirms())\n         return CFeeRate(0);\n@@ -819,7 +819,7 @@ double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget,\n  */\n CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation *feeCalc, bool conservative) const\n {\n-    LOCK(cs_feeEstimator);\n+    LOCK(m_cs_fee_estimator);\n \n     if (feeCalc) {\n         feeCalc->desiredTarget = confTarget;\n@@ -899,7 +899,7 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation\n bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const\n {\n     try {\n-        LOCK(cs_feeEstimator);\n+        LOCK(m_cs_fee_estimator);\n         fileout << 149900; // version required to read: 0.14.99 or later\n         fileout << CLIENT_VERSION; // version that wrote the file\n         fileout << nBestSeenHeight;\n@@ -924,7 +924,7 @@ bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const\n bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n {\n     try {\n-        LOCK(cs_feeEstimator);\n+        LOCK(m_cs_fee_estimator);\n         int nVersionRequired, nVersionThatWrote;\n         filein >> nVersionRequired >> nVersionThatWrote;\n         if (nVersionRequired > CLIENT_VERSION)\n@@ -983,7 +983,7 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n \n void CBlockPolicyEstimator::FlushUnconfirmed() {\n     int64_t startclear = GetTimeMicros();\n-    LOCK(cs_feeEstimator);\n+    LOCK(m_cs_fee_estimator);\n     size_t num_entries = mapMemPoolTxs.size();\n     // Remove every entry in mapMemPoolTxs\n     while (!mapMemPoolTxs.empty()) {"
      },
      {
        "sha": "e303686c739928bbbfdb9ef3d26d2fb353e54338",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/764e42fee2df1253db6407bd8e1e477d31e9350c/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/764e42fee2df1253db6407bd8e1e477d31e9350c/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=764e42fee2df1253db6407bd8e1e477d31e9350c",
        "patch": "@@ -228,12 +228,12 @@ class CBlockPolicyEstimator\n     unsigned int HighestTargetTracked(FeeEstimateHorizon horizon) const;\n \n private:\n-    mutable CCriticalSection cs_feeEstimator;\n+    mutable CCriticalSection m_cs_fee_estimator;\n \n-    unsigned int nBestSeenHeight GUARDED_BY(cs_feeEstimator);\n-    unsigned int firstRecordedHeight GUARDED_BY(cs_feeEstimator);\n-    unsigned int historicalFirst GUARDED_BY(cs_feeEstimator);\n-    unsigned int historicalBest GUARDED_BY(cs_feeEstimator);\n+    unsigned int nBestSeenHeight GUARDED_BY(m_cs_fee_estimator);\n+    unsigned int firstRecordedHeight GUARDED_BY(m_cs_fee_estimator);\n+    unsigned int historicalFirst GUARDED_BY(m_cs_fee_estimator);\n+    unsigned int historicalBest GUARDED_BY(m_cs_fee_estimator);\n \n     struct TxStatsInfo\n     {\n@@ -243,32 +243,32 @@ class CBlockPolicyEstimator\n     };\n \n     // map of txids to information about that transaction\n-    std::map<uint256, TxStatsInfo> mapMemPoolTxs GUARDED_BY(cs_feeEstimator);\n+    std::map<uint256, TxStatsInfo> mapMemPoolTxs GUARDED_BY(m_cs_fee_estimator);\n \n     /** Classes to track historical data on transaction confirmations */\n     std::unique_ptr<TxConfirmStats> feeStats;\n     std::unique_ptr<TxConfirmStats> shortStats;\n     std::unique_ptr<TxConfirmStats> longStats;\n \n-    unsigned int trackedTxs GUARDED_BY(cs_feeEstimator);\n-    unsigned int untrackedTxs GUARDED_BY(cs_feeEstimator);\n+    unsigned int trackedTxs GUARDED_BY(m_cs_fee_estimator);\n+    unsigned int untrackedTxs GUARDED_BY(m_cs_fee_estimator);\n \n-    std::vector<double> buckets GUARDED_BY(cs_feeEstimator); // The upper-bound of the range for the bucket (inclusive)\n-    std::map<double, unsigned int> bucketMap GUARDED_BY(cs_feeEstimator); // Map of bucket upper-bound to index into all vectors by bucket\n+    std::vector<double> buckets GUARDED_BY(m_cs_fee_estimator); // The upper-bound of the range for the bucket (inclusive)\n+    std::map<double, unsigned int> bucketMap GUARDED_BY(m_cs_fee_estimator); // Map of bucket upper-bound to index into all vectors by bucket\n \n     /** Process a transaction confirmed in a block*/\n-    bool processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry) EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator);\n+    bool processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry) EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);\n \n     /** Helper for estimateSmartFee */\n-    double estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon, EstimationResult *result) const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator);\n+    double estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon, EstimationResult *result) const EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);\n     /** Helper for estimateSmartFee */\n-    double estimateConservativeFee(unsigned int doubleTarget, EstimationResult *result) const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator);\n+    double estimateConservativeFee(unsigned int doubleTarget, EstimationResult *result) const EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);\n     /** Number of blocks of data recorded while fee estimates have been running */\n-    unsigned int BlockSpan() const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator);\n+    unsigned int BlockSpan() const EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);\n     /** Number of blocks of recorded fee estimate data represented in saved data file */\n-    unsigned int HistoricalBlockSpan() const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator);\n+    unsigned int HistoricalBlockSpan() const EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);\n     /** Calculation of highest target that reasonable estimate can be provided for */\n-    unsigned int MaxUsableEstimate() const EXCLUSIVE_LOCKS_REQUIRED(cs_feeEstimator);\n+    unsigned int MaxUsableEstimate() const EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);\n };\n \n class FeeFilterRounder"
      }
    ]
  },
  {
    "sha": "dae1423e5aaa9923f1b11be4650e343f3235d46a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYWUxNDIzZTVhYWE5OTIzZjFiMTFiZTQ2NTBlMzQzZjMyMzVkNDZh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-12-02T20:28:53Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-12-02T23:14:33Z"
      },
      "message": "Add locking annotations to feeStats, shortStats and longStats",
      "tree": {
        "sha": "4be1cf878780ffdd9bb17d00fc32a1df36020267",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4be1cf878780ffdd9bb17d00fc32a1df36020267"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dae1423e5aaa9923f1b11be4650e343f3235d46a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dae1423e5aaa9923f1b11be4650e343f3235d46a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dae1423e5aaa9923f1b11be4650e343f3235d46a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dae1423e5aaa9923f1b11be4650e343f3235d46a/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "764e42fee2df1253db6407bd8e1e477d31e9350c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/764e42fee2df1253db6407bd8e1e477d31e9350c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/764e42fee2df1253db6407bd8e1e477d31e9350c"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c49b9fa36b9f97d464a15295ccd16a5b4319b8d6",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dae1423e5aaa9923f1b11be4650e343f3235d46a/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dae1423e5aaa9923f1b11be4650e343f3235d46a/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=dae1423e5aaa9923f1b11be4650e343f3235d46a",
        "patch": "@@ -710,6 +710,7 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n \n unsigned int CBlockPolicyEstimator::HighestTargetTracked(FeeEstimateHorizon horizon) const\n {\n+    LOCK(m_cs_fee_estimator);\n     switch (horizon) {\n     case FeeEstimateHorizon::SHORT_HALFLIFE: {\n         return shortStats->GetMaxConfirms();"
      },
      {
        "sha": "c8472a12f5d752b13b1a8e2b697fab803419462d",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dae1423e5aaa9923f1b11be4650e343f3235d46a/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dae1423e5aaa9923f1b11be4650e343f3235d46a/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=dae1423e5aaa9923f1b11be4650e343f3235d46a",
        "patch": "@@ -246,9 +246,9 @@ class CBlockPolicyEstimator\n     std::map<uint256, TxStatsInfo> mapMemPoolTxs GUARDED_BY(m_cs_fee_estimator);\n \n     /** Classes to track historical data on transaction confirmations */\n-    std::unique_ptr<TxConfirmStats> feeStats;\n-    std::unique_ptr<TxConfirmStats> shortStats;\n-    std::unique_ptr<TxConfirmStats> longStats;\n+    std::unique_ptr<TxConfirmStats> feeStats PT_GUARDED_BY(m_cs_fee_estimator);\n+    std::unique_ptr<TxConfirmStats> shortStats PT_GUARDED_BY(m_cs_fee_estimator);\n+    std::unique_ptr<TxConfirmStats> longStats PT_GUARDED_BY(m_cs_fee_estimator);\n \n     unsigned int trackedTxs GUARDED_BY(m_cs_fee_estimator);\n     unsigned int untrackedTxs GUARDED_BY(m_cs_fee_estimator);"
      }
    ]
  }
]