[
  {
    "sha": "8695a39350cd9fd403c1bb1ca725535b591f82f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Njk1YTM5MzUwY2Q5ZmQ0MDNjMWJiMWNhNzI1NTM1YjU5MWY4MmY5",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-08-15T20:56:45Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-08-18T18:23:13Z"
      },
      "message": "replace int with size_t in stream methods\n\nThus the read(...) and write(...) methods of all stream classes now have identical parameter lists.\nThis will bring these classes one step closer to a common interface.",
      "tree": {
        "sha": "361de2affb0ec4ce0acbb8f92e3bcc9e8ba2d961",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/361de2affb0ec4ce0acbb8f92e3bcc9e8ba2d961"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8695a39350cd9fd403c1bb1ca725535b591f82f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8695a39350cd9fd403c1bb1ca725535b591f82f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8695a39350cd9fd403c1bb1ca725535b591f82f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8695a39350cd9fd403c1bb1ca725535b591f82f9/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4f151f714d67da7850d94d44b824944d3f0d74d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4f151f714d67da7850d94d44b824944d3f0d74d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4f151f714d67da7850d94d44b824944d3f0d74d"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 4,
      "deletions": 6
    },
    "files": [
      {
        "sha": "3e5eff469ded42870c08142b2b339a5871ae4ade",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8695a39350cd9fd403c1bb1ca725535b591f82f9/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8695a39350cd9fd403c1bb1ca725535b591f82f9/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=8695a39350cd9fd403c1bb1ca725535b591f82f9",
        "patch": "@@ -68,7 +68,7 @@ inline const T* end_ptr(const std::vector<T,TAl>& v)\n /////////////////////////////////////////////////////////////////\n //\n // Templates for serializing to anything that looks like a stream,\n-// i.e. anything that supports .read(char*, int) and .write(char*, int)\n+// i.e. anything that supports .read(char*, size_t) and .write(char*, size_t)\n //\n \n enum\n@@ -876,7 +876,7 @@ class CSizeComputer\n \n     CSizeComputer(int nTypeIn, int nVersionIn) : nSize(0), nType(nTypeIn), nVersion(nVersionIn) {}\n \n-    CSizeComputer& write(const char *psz, int nSize)\n+    CSizeComputer& write(const char *psz, size_t nSize)\n     {\n         this->nSize += nSize;\n         return *this;\n@@ -1105,10 +1105,9 @@ class CDataStream\n     void ReadVersion()           { *this >> nVersion; }\n     void WriteVersion()          { *this << nVersion; }\n \n-    CDataStream& read(char* pch, int nSize)\n+    CDataStream& read(char* pch, size_t nSize)\n     {\n         // Read from the beginning of the buffer\n-        assert(nSize >= 0);\n         unsigned int nReadPosNext = nReadPos + nSize;\n         if (nReadPosNext >= vch.size())\n         {\n@@ -1145,10 +1144,9 @@ class CDataStream\n         return (*this);\n     }\n \n-    CDataStream& write(const char* pch, int nSize)\n+    CDataStream& write(const char* pch, size_t nSize)\n     {\n         // Write to the end of the buffer\n-        assert(nSize >= 0);\n         vch.insert(vch.end(), pch, pch + nSize);\n         return (*this);\n     }"
      }
    ]
  }
]