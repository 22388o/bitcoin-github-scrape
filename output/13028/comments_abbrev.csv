promag,2018-04-19T13:52:32Z,~~Please review #13017 first.~~ (already merged).,https://github.com/bitcoin/bitcoin/pull/13028#issuecomment-382743904,382743904,
jnewbery,2018-04-19T21:16:09Z,"Concept ACK.\n\nNote that this will allow dynamically loading wallets, but more is required before we add dynamic unloading of wallets (this doesn't prevent one thread from removing a wallet while another thread still has a pointer to that wallet).",https://github.com/bitcoin/bitcoin/pull/13028#issuecomment-382883301,382883301,
promag,2018-04-20T01:22:49Z,"> this doesn't prevent one thread from removing a wallet while another thread still has a pointer to that wallet\n\n@jnewbery true, that's one of the reasons to switch to shared pointers. A wallet can be unregistered and only (enqueued-to-)(unloaded+released) when reference count is zero.",https://github.com/bitcoin/bitcoin/pull/13028#issuecomment-382933547,382933547,
promag,2018-04-23T06:59:10Z,"#13017 is merged, rebased.",https://github.com/bitcoin/bitcoin/pull/13028#issuecomment-383473854,383473854,
jonasschnelli,2018-04-26T09:29:31Z,utACK e2f58f421b1a6e360bbf7efdfbba398918ce19d3,https://github.com/bitcoin/bitcoin/pull/13028#issuecomment-384575463,384575463,
MarcoFalke,2018-04-19T14:50:25Z,Does it compile if you add a `GUARDED_BY` here?,https://github.com/bitcoin/bitcoin/pull/13028#discussion_r182774165,182774165,src/wallet/wallet.cpp
practicalswift,2018-04-19T14:57:54Z,"Good point @MarcoFalke!\n\nPlease add `GUARDED_BY(cs_wallets)` and verify by building with `--enable-werror` using  `clang`.",https://github.com/bitcoin/bitcoin/pull/13028#discussion_r182777090,182777090,src/wallet/wallet.cpp
promag,2018-04-19T15:25:01Z,Done.,https://github.com/bitcoin/bitcoin/pull/13028#discussion_r182786721,182786721,src/wallet/wallet.cpp
jonasschnelli,2018-04-23T12:10:00Z,"IMO the GetWallet call with returning a vector of raw pointers is dangerous.\nThis is why I used the callable/lamda approach in #12587 (see https://github.com/bitcoin/bitcoin/pull/12587/files#diff-74d273024bfb20e7f09b87a23cd26f4dR41).\n\nA concurrency mess-up with retrieving the pointers under the cs_wallet lock (copy of the vector), then continue outside of the `cs_wallet` lock may happen in t",https://github.com/bitcoin/bitcoin/pull/13028#discussion_r183371330,183371330,src/wallet/wallet.cpp
jonasschnelli,2018-04-23T12:12:18Z,This problem obviously also is also true for `GetWallet()` and - for unloading - moving to a shared pointer and weak-unloading at a later stage is probably unavoidable.,https://github.com/bitcoin/bitcoin/pull/13028#discussion_r183371825,183371825,src/wallet/wallet.cpp
jnewbery,2018-04-23T16:50:20Z,"Right now there's no way to free wallets. Obviously we'll need to change this when we add an `unloadwallet` RPC, but for now this approach is sufficient to allow us to add a `loadwallet` and `createwallet` RPC.\n\nWould it be sufficient to add a comment to these functions warning of the danger if we add a way to free wallets?",https://github.com/bitcoin/bitcoin/pull/13028#discussion_r183464533,183464533,src/wallet/wallet.cpp
jonasschnelli,2018-04-23T18:04:40Z,Maybe a comment... I think its also okay to just be aware of this and fix it once we have a way to remove pointers from the array.,https://github.com/bitcoin/bitcoin/pull/13028#discussion_r183486941,183486941,src/wallet/wallet.cpp
promag,2018-04-23T18:09:23Z,"I'm working on that with shared pointers. I can include this commit there, but IMO this is not worse than master so can go in to at least protect concurrency for loadwallet.",https://github.com/bitcoin/bitcoin/pull/13028#discussion_r183488359,183488359,src/wallet/wallet.cpp
