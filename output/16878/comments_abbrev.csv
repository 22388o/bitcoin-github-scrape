DrahtBot,2019-09-16 06:05:05,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-531651205,531651205,
practicalswift,2019-09-16 10:13:28,"Concept ACK\n\nNice work! If you have the time: consider tackling the remaining `test_deterministic_coverage.sh` suppressions in follow-up PRs. Deterministic line coverage would be great to have! :)",https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-531716989,531716989,
davereikher,2019-09-16 13:20:02,"> Concept ACK\n> \n> Nice work! If you have the time: consider tackling the remaining `test_deterministic_coverage.sh` suppressions in follow-up PRs. Deterministic line coverage would be great to have! :)\n\nThanks for the review! I addressed your remarks in ffd3953. I indeed plan to tackle those in my free time.",https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-531773138,531773138,
davereikher,2019-09-20 11:48:50,"Could somebody explain why it's not allowed to include `boost/test/unit_test_parameters.hpp`?\n```\nA new Boost dependency in the form of ""boost/test/unit_test_parameters.hpp"" appears to have been introduced:\n\nsrc/test/denialofservice_tests.cpp:#include <boost/test/unit_test_parameters.hpp>\n\n^---- failure generated from test/lint/lint-includes.sh\n```\nI need it to access the `BOOST_TE",https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-533520776,533520776,
MarcoFalke,2019-09-20 12:05:19,"I guess, you'd have to add it like this:\n\n```diff\ndiff --git a/test/lint/lint-includes.sh b/test/lint/lint-includes.sh\nindex d27e45a23f..c9e1d57ee1 100755\n--- a/test/lint/lint-includes.sh\n+++ b/test/lint/lint-includes.sh\n@@ -68,6 +68,7 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/signals2/last_value.hpp\n     boost/signals2/signal.hpp\n     boost/test/unit_test.hpp\n+    boost/test/u",https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-533525660,533525660,
davereikher,2019-09-22 07:17:44,@MarcoFalke I see that the changes I made regarding setting the seed to `BOOST_TEST_RANDOM` are causing some trouble - some Travis builds fail while succeeding for me locally so I'm not sure how to debug that as well as the fact that the boost interface might change and I also feel that this is going a bit out of scope for this pull request which aims to make DoS_mapOrphans have deterministic cove,https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-533856395,533856395,
practicalswift,2019-09-22 19:24:09,ACK ffd3953757051ac50cea4129edbd9e9d5be39d0f -- diff looks correct,https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-533910107,533910107,
davereikher,2019-09-24 12:00:59,"How can I remove the ""Waiting for author"" label?",https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-534525858,534525858,
MarcoFalke,2019-10-03 19:45:04,"Have you seen #16978, which should fix the reproducibility issue",https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-538098710,538098710,
davereikher,2019-10-24 14:13:40,"@laanwj  This PR is waiting for additional reviews, so I don't think this should be labeled as 'Waiting for author'?",https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-545937714,545937714,
davereikher,2020-06-14 11:39:10,"Thanks very much for the review @jonatack ! I rebased on the latest master and addressed the nits in  d90308b.\nCould somebody please re-run the travis job? Looks like it timed out on ARM.",https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-643754707,643754707,
davereikher,2020-07-16 06:46:55,"I'm running this test multiple times with the `contrib/devtools/test_deterministic_coverage.sh` script and out of 590 runs it detected non-deterministic coverage twice, in a seemingly unrelated location. This line https://github.com/bitcoin/bitcoin/blob/9a714c51dc79993506718617e383294cf6bff0b4/src/checkqueue.h#L99 very rarely doesn't run. I'm thinking that maybe some tests which are not in the lis",https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-659194950,659194950,
MarcoFalke,2020-07-16 07:49:21,"You don't need to solve all issues. As long as something is an improvement, it should be good to go",https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-659225225,659225225,
practicalswift,2020-07-16 08:22:11,"@davereikher \n\n> @practicalswift Can you say how many times the script ran for each test before it was considered to be deterministic? I guess there is some threshold number of runs such that if non-deterministic behavior doesn't appear during those runs then this test is considered to be deterministic 'enough'. Is 2 out of 590 runs above or below that threshold?\n\nPersonally I think 2 out ",https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-659244243,659244243,
davereikher,2020-07-16 09:00:13,"> Personally I think 2 out of 590 runs is a great improvement compared to the current state of things: great job! :)\n> \n> Thanks for tackling testing non-determinism!\n\nThanks @practicalswift , so do you think this test should be removed from the list of non-deterministic tests then?",https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-659265434,659265434,
davereikher,2020-07-19 14:09:32,"Ok, I think it's done. As [stated](https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-659194950), there is still some non-determinism, but it occurs once every several hundred rounds in an unrelated location. I'm assuming it's below the threshold of non-determinism, so I removed this test from the list of non-deterministic tests in `contrib/devtools/test_deterministic_coverage.sh`.",https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-660649155,660649155,
MarcoFalke,2020-07-21 07:05:50,ACK 4455949d6f0218b40d33d7fe6de6555f8f62192f,https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-661676597,661676597,
practicalswift,2019-09-16 10:15:45,Could use `std::numeric_limits<uint64_t>::max()` instead of `LARGE_NUMBER`? :),https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324598079,324598079,src/test/denialofservice_tests.cpp
practicalswift,2019-09-16 10:17:27,Nit: Could avoid non-repo-idiomatic yoda notation :),https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324598676,324598676,src/test/denialofservice_tests.cpp
MarcoFalke,2019-09-16 13:24:56,Looks like the wrong location for this. I fail to understand what CPubKey has to do with the orphan map or even DoS?!,https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324672285,324672285,src/test/denialofservice_tests.cpp
davereikher,2019-09-16 13:52:10,"Thanks for the review! While trying to understand the non-determinism in the coverage, I used the script `contrib/devtools/test_deterministic_coverage.sh`, which uses `gcovr` to show the diff in which lines were and which ones were not executed between two runs with different coverage. \n\nOver multiple runs of the script, the only two places where the coverage was non-deterministic were: \n\n",https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324686941,324686941,src/test/denialofservice_tests.cpp
MarcoFalke,2019-09-16 14:03:07,I see. A smaller alternative would be to set the key to a constant?,https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324692872,324692872,src/test/denialofservice_tests.cpp
davereikher,2019-09-16 14:41:02,"That could be nice actually if it's acceptable. I didn't want to do it initially because I didn't want to modify the test too much and restricted myself to 'parasitic' changes.\nOn the other hand - if I'm not mistaken, this will not work directly, since, if we have transaction B which is using as an input an output from transaction A, part of the data used to calculate the hash of that input for ",https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324713835,324713835,src/test/denialofservice_tests.cpp
MarcoFalke,2019-09-16 14:50:51,"`InsecureRand256` is an alias for `g_insecure_rand_ctx.rand256()`, so it can be made deterministic with a call to `SeedInsecureRand(/* deterministic */ true)`.\n\n> this test would loose the fuzzing feature of making a different key every run.\n\nThis ""fuzzing feature"" is useless, as a failure could not be reproduced (when it occurs) and thus not debugged, nor fixed.\n\nWhen fuzzing is desir",https://github.com/bitcoin/bitcoin/pull/16878#discussion_r324719530,324719530,src/test/denialofservice_tests.cpp
davereikher,2019-09-17 10:20:42,"I see. Then I can just set a seed which guarantees the widest coverage in the beginning of the test and that should take care of the non-determinism in both `RandomOrphan` and `ecdsa_signature_parse_der_lax`, making the code much simpler.\n\nStill, I would argue that it's best to leave the fuzzing and write the seed to a file. That would result in an a better coverage over a long period of time.",https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325090401,325090401,src/test/denialofservice_tests.cpp
MarcoFalke,2019-09-17 10:56:20,"Yeah, up to you if you feel strongly. My opinion is that we shouldn't mix unit tests with fuzz tests, which are designed and compiled separately, see https://github.com/bitcoin/bitcoin/blob/master/doc/fuzzing.md",https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325104042,325104042,src/test/denialofservice_tests.cpp
davereikher,2019-09-18 05:54:03,"I agree that fuzz tests should be separate and I wasn't familiar with `src/test/fuzz`. Thanks for pointing me there. However, reading through https://github.com/bitcoin/bitcoin/pull/16320, there are some comments about the positive value of non-determinism in tests (I was trying to understand if the direction is to completely eliminate non-determinism). I think that an effort should be made when w",https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325492476,325492476,src/test/denialofservice_tests.cpp
MarcoFalke,2019-09-18 10:29:15,"We already use `BOOST_TEST_RANDOM` https://www.boost.org/doc/libs/1_71_0/libs/test/doc/html/boost_test/utf_reference/rt_param_reference/random.html, which is logged. So might as well use that as the seed for our test rng?",https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325599568,325599568,src/test/denialofservice_tests.cpp
davereikher,2019-09-18 14:08:47,"Sounds good. Do you suggest seeding the rng with `BOOST_TEST_RANDOM` in `BasicTestingSetup` or only in this test for now? I'm thinking the latter, since otherwise it changes the behaviour of all tests that use random numbers when running them locally and it would require adjusting the test execution scripts, as now the seed must be provided externally. For example, `test_deterministic_coverage.sh`",https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325697287,325697287,src/test/denialofservice_tests.cpp
MarcoFalke,2019-09-18 14:16:58,"> test_deterministic_coverage.sh will always show deterministic coverage when run locally unless we provide a different value of BOOST_TEST_RANDOM every time it's run. I feel handling those issues would be out of the scope of this pull request and may be done separately?\n\nI think this is the way the script should work (report non-determinism even when the rng seed is pinned to a constant). As ",https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325702113,325702113,src/test/denialofservice_tests.cpp
davereikher,2019-09-18 14:55:44,"Yes, that sounds interesting, since IMO recording the seed for any test that uses random values is important. I'll check whether pinning the seed still results in non determinism between runs and based on that I'll see what can be done about it and about setting the seed to `BOOST_TEST_RANDOM` in `BasicTestingSetup`.\nFor now, I guess setting the seed to `BOOST_TEST_RANDOM` just inside this test ",https://github.com/bitcoin/bitcoin/pull/16878#discussion_r325725391,325725391,src/test/denialofservice_tests.cpp
MarcoFalke,2019-09-20 12:12:22,I guess you could move this logic into a helper `SeedInsecureRandWithBoostRandomSeed`?,https://github.com/bitcoin/bitcoin/pull/16878#discussion_r326598869,326598869,src/test/denialofservice_tests.cpp
MarcoFalke,2019-09-20 15:11:08,not sure how stable that boost interface is. They seem to change it every couple of versions,https://github.com/bitcoin/bitcoin/pull/16878#discussion_r326675636,326675636,src/test/setup_common.h
davereikher,2019-09-21 12:07:22,Is there a better way to access this value? Maybe directly access the environment variable using std::getenv?,https://github.com/bitcoin/bitcoin/pull/16878#discussion_r326857875,326857875,src/test/setup_common.h
MarcoFalke,2019-10-03 19:46:58,"Still don't like this, maybe it can be removed after https://github.com/bitcoin/bitcoin/pull/16878#issuecomment-538098710 ?",https://github.com/bitcoin/bitcoin/pull/16878#discussion_r331220386,331220386,src/test/denialofservice_tests.cpp
davereikher,2019-10-05 09:50:45,"Actually, I ran the `DoS_mapOrphans` test to test the initial version of #16978 and even though the seed was the same between different runs, I still got non-deterministic behaviour for this test. The non-determinism originated from the size of the `mapOrphanTransactions` map. It was different for each run. I didn't dive into the source code to understand why exactly that is but I suspect that it'",https://github.com/bitcoin/bitcoin/pull/16878#discussion_r331741093,331741093,src/test/denialofservice_tests.cpp
MarcoFalke,2019-10-07 17:41:54,"Hmm, ok. Will see if other have an opinion on this.",https://github.com/bitcoin/bitcoin/pull/16878#discussion_r332149229,332149229,src/test/denialofservice_tests.cpp
jonatack,2020-06-11 17:22:38,nit: sort,https://github.com/bitcoin/bitcoin/pull/16878#discussion_r438947512,438947512,src/test/denialofservice_tests.cpp
jonatack,2020-06-11 17:38:42,"suggestion\n```diff\n-/** This function runs CPubkey::Verify with parameters that result in all branches of the function ecdsa_signature_parse_der_lax to run. Namely, the signature literal\n- * in vch_sig_str in the following function is comprised of R and S values which both contain leading zeroes, forcing some branches of said function to run which\n- * would otherwise not. This function is ",https://github.com/bitcoin/bitcoin/pull/16878#discussion_r438956486,438956486,src/test/denialofservice_tests.cpp
MarcoFalke,2020-06-14 12:28:45,"instead of hardcoding special cases, I'd prefer if the txids were just derived from a deterministic fast random context. If you want, you can explicitly seed it so that the condition is hit at least once.",https://github.com/bitcoin/bitcoin/pull/16878#discussion_r439824826,439824826,src/test/denialofservice_tests.cpp
davereikher,2020-06-17 18:11:24,"Ok, I can do that. The RNG can indeed be seeded so that the condition is hit at least once. However, the `ForceCoverageInPubKeyVerify` function must remain, since the non-determinism is not caused by different seeds, but is there due to concurrency issues (please refer to my comment [here](https://github.com/bitcoin/bitcoin/pull/16878?_pjax=%23js-repo-pjax-container#discussion_r331741093) for some",https://github.com/bitcoin/bitcoin/pull/16878#discussion_r441735209,441735209,src/test/denialofservice_tests.cpp
MarcoFalke,2020-06-17 18:21:35,"Generally the tests run in a single thread, so there shouldn't be any concurrency issues. Are you sure the non-determinism is not caused by the random private key, which can also be picked deterministically?",https://github.com/bitcoin/bitcoin/pull/16878#discussion_r441740979,441740979,src/test/denialofservice_tests.cpp
davereikher,2020-07-09 14:01:04,"Sorry for the long delay, you are right, the additional non-determinism was caused by the fact that the private key is generated by another RNG and not by concurrency issues. I removed the function I added to force coverage and forced the key to be generated by the same RNG for this test. I seeded it so that all branches of the function `ecdsa_signature_parse_der_lax` run. However, after a few doz",https://github.com/bitcoin/bitcoin/pull/16878#discussion_r452240106,452240106,src/test/denialofservice_tests.cpp
MarcoFalke,2020-07-20 06:29:09,"nit: This can simply say\n```suggestion\n    assert(key.IsValid());\n```",https://github.com/bitcoin/bitcoin/pull/16878#discussion_r457093822,457093822,src/test/denialofservice_tests.cpp
davereikher,2020-07-20 16:07:15,Wouldn't it fail the test if the generated key is invalid instead of retrying?,https://github.com/bitcoin/bitcoin/pull/16878#discussion_r457526084,457526084,src/test/denialofservice_tests.cpp
MarcoFalke,2020-07-20 18:29:12,"Yes, but that should never happen, because the test is deterministic",https://github.com/bitcoin/bitcoin/pull/16878#discussion_r457609103,457609103,src/test/denialofservice_tests.cpp
