[
  {
    "sha": "4455949d6f0218b40d33d7fe6de6555f8f62192f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDU1OTQ5ZDZmMDIxOGI0MGQzM2Q3ZmU2ZGU2NTU1ZjhmNjIxOTJm",
    "commit": {
      "author": {
        "name": "David Reikher",
        "email": "david.reikher@gmail.com",
        "date": "2019-09-15T13:04:57Z"
      },
      "committer": {
        "name": "David Reikher",
        "email": "david.reikher@gmail.com",
        "date": "2020-07-21T06:18:57Z"
      },
      "message": "Make test DoS_mapOrphans deterministic\n\nThe RandomOrphan function and the function ecdsa_signature_parse_der_lax\nin pubkey.cpp were causing non-deterministic test coverage.\n\nForce seed in the beginning of the test to make it deterministic.\nThe seed is selected carefully so that all branches of the function\necdsa_signature_parse_der_lax are executed. Prior to this fix, the test\nwas exhibiting non-deterministic coverage since none of the ECDSA\nsignatures that were generated during the test had leading zeroes in\neither R, S, or both, resulting in some branches of said function not\nbeing executed. The seed ensures that both conditions are hit.\n\nRemoved denialofservice_tests test entry from the list of non-deterministic\ntests in the coverage script.",
      "tree": {
        "sha": "ef5fe6712f1f6052b7fe0279537dbb56038a6c55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef5fe6712f1f6052b7fe0279537dbb56038a6c55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4455949d6f0218b40d33d7fe6de6555f8f62192f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4455949d6f0218b40d33d7fe6de6555f8f62192f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4455949d6f0218b40d33d7fe6de6555f8f62192f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4455949d6f0218b40d33d7fe6de6555f8f62192f/comments",
    "author": {
      "login": "davereikher",
      "id": 5347350,
      "node_id": "MDQ6VXNlcjUzNDczNTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5347350?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davereikher",
      "html_url": "https://github.com/davereikher",
      "followers_url": "https://api.github.com/users/davereikher/followers",
      "following_url": "https://api.github.com/users/davereikher/following{/other_user}",
      "gists_url": "https://api.github.com/users/davereikher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davereikher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davereikher/subscriptions",
      "organizations_url": "https://api.github.com/users/davereikher/orgs",
      "repos_url": "https://api.github.com/users/davereikher/repos",
      "events_url": "https://api.github.com/users/davereikher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davereikher/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "davereikher",
      "id": 5347350,
      "node_id": "MDQ6VXNlcjUzNDczNTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5347350?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davereikher",
      "html_url": "https://github.com/davereikher",
      "followers_url": "https://api.github.com/users/davereikher/followers",
      "following_url": "https://api.github.com/users/davereikher/following{/other_user}",
      "gists_url": "https://api.github.com/users/davereikher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davereikher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davereikher/subscriptions",
      "organizations_url": "https://api.github.com/users/davereikher/orgs",
      "repos_url": "https://api.github.com/users/davereikher/repos",
      "events_url": "https://api.github.com/users/davereikher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davereikher/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "090d87716074434bdc6c7656ec44d049197a793a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/090d87716074434bdc6c7656ec44d049197a793a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/090d87716074434bdc6c7656ec44d049197a793a"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 19,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8501c72f04a552bf7cb699890e92c874be43de05",
        "filename": "contrib/devtools/test_deterministic_coverage.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4455949d6f0218b40d33d7fe6de6555f8f62192f/contrib/devtools/test_deterministic_coverage.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4455949d6f0218b40d33d7fe6de6555f8f62192f/contrib/devtools/test_deterministic_coverage.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test_deterministic_coverage.sh?ref=4455949d6f0218b40d33d7fe6de6555f8f62192f",
        "patch": "@@ -16,7 +16,6 @@ GCOV_EXECUTABLE=\"gcov\"\n NON_DETERMINISTIC_TESTS=(\n     \"blockfilter_index_tests/blockfilter_index_initial_sync\"  # src/checkqueue.h: In CCheckQueue::Loop(): while (queue.empty()) { ... }\n     \"coinselector_tests/knapsack_solver_test\"                 # coinselector_tests.cpp: if (equal_sets(setCoinsRet, setCoinsRet2))\n-    \"denialofservice_tests/DoS_mapOrphans\"                    # denialofservice_tests.cpp: it = mapOrphanTransactions.lower_bound(InsecureRand256());\n     \"fs_tests/fsbridge_fstream\"                               # deterministic test failure?\n     \"miner_tests/CreateNewBlock_validity\"                     # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n     \"scheduler_tests/manythreads\"                             # scheduler.cpp: CScheduler::serviceQueue()"
      },
      {
        "sha": "b1a635d9da29ceb6e0f4ee2b7c44b0b977bcc690",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4455949d6f0218b40d33d7fe6de6555f8f62192f/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4455949d6f0218b40d33d7fe6de6555f8f62192f/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=4455949d6f0218b40d33d7fe6de6555f8f62192f",
        "patch": "@@ -4,10 +4,12 @@\n \n // Unit tests for denial-of-service detection/prevention code\n \n+#include <arith_uint256.h>\n #include <banman.h>\n #include <chainparams.h>\n #include <net.h>\n #include <net_processing.h>\n+#include <pubkey.h>\n #include <script/sign.h>\n #include <script/signingprovider.h>\n #include <script/standard.h>\n@@ -314,10 +316,26 @@ static CTransactionRef RandomOrphan()\n     return it->second.tx;\n }\n \n+static void MakeNewKeyWithFastRandomContext(CKey& key)\n+{\n+    std::vector<unsigned char> keydata;\n+    keydata = g_insecure_rand_ctx.randbytes(32);\n+    key.Set(keydata.data(), keydata.data() + keydata.size(), /*fCompressedIn*/ true);\n+    assert(key.IsValid());\n+}\n+\n BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n {\n+    // This test had non-deterministic coverage due to\n+    // randomly selected seeds.\n+    // This seed is chosen so that all branches of the function\n+    // ecdsa_signature_parse_der_lax are executed during this test.\n+    // Specifically branches that run only when an ECDSA\n+    // signature's R and S values have leading zeros.\n+    g_insecure_rand_ctx = FastRandomContext(ArithToUint256(arith_uint256(33)));\n+\n     CKey key;\n-    key.MakeNewKey(true);\n+    MakeNewKeyWithFastRandomContext(key);\n     FillableSigningProvider keystore;\n     BOOST_CHECK(keystore.AddKey(key));\n "
      }
    ]
  }
]