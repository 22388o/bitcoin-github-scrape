[
  {
    "sha": "660ff174f299a6dfb28f7725dfbb08f140a5474b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjBmZjE3NGYyOTlhNmRmYjI4Zjc3MjVkZmJiMDhmMTQwYTU0NzRi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-13T15:55:23Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-18T14:56:12Z"
      },
      "message": "Use boost::thread locking instead of interprocess",
      "tree": {
        "sha": "4d3c52db399ace118c871fc92715fd8836f02201",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d3c52db399ace118c871fc92715fd8836f02201"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/660ff174f299a6dfb28f7725dfbb08f140a5474b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/660ff174f299a6dfb28f7725dfbb08f140a5474b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/660ff174f299a6dfb28f7725dfbb08f140a5474b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/660ff174f299a6dfb28f7725dfbb08f140a5474b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a9130aca20af3f82b7ddd62afe5ce85a845e425",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a9130aca20af3f82b7ddd62afe5ce85a845e425",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a9130aca20af3f82b7ddd62afe5ce85a845e425"
      }
    ],
    "stats": {
      "total": 113,
      "additions": 54,
      "deletions": 59
    },
    "files": [
      {
        "sha": "d8d86d525e74a5d11eef38f1da17eae9c9695d11",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 17,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/660ff174f299a6dfb28f7725dfbb08f140a5474b/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/660ff174f299a6dfb28f7725dfbb08f140a5474b/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=660ff174f299a6dfb28f7725dfbb08f140a5474b",
        "patch": "@@ -3,8 +3,9 @@\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"sync.h\"\n+#include \"util.h\"\n \n-\n+#include <boost/foreach.hpp>\n \n #ifdef DEBUG_LOCKORDER\n //\n@@ -40,7 +41,7 @@ struct CLockLocation\n \n typedef std::vector< std::pair<void*, CLockLocation> > LockStack;\n \n-static boost::interprocess::interprocess_mutex dd_mutex;\n+static boost::mutex dd_mutex;\n static std::map<std::pair<void*, void*>, LockStack> lockorders;\n static boost::thread_specific_ptr<LockStack> lockstack;\n \n@@ -66,7 +67,6 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n \n static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n {\n-    bool fOrderOK = true;\n     if (lockstack.get() == NULL)\n         lockstack.reset(new LockStack);\n \n@@ -75,20 +75,21 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n \n     (*lockstack).push_back(std::make_pair(c, locklocation));\n \n-    if (!fTry) BOOST_FOREACH(const PAIRTYPE(void*, CLockLocation)& i, (*lockstack))\n-    {\n-        if (i.first == c) break;\n-\n-        std::pair<void*, void*> p1 = std::make_pair(i.first, c);\n-        if (lockorders.count(p1))\n-            continue;\n-        lockorders[p1] = (*lockstack);\n-\n-        std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n-        if (lockorders.count(p2))\n-        {\n-            potential_deadlock_detected(p1, lockorders[p2], lockorders[p1]);\n-            break;\n+    if (!fTry) {\n+        BOOST_FOREACH(const PAIRTYPE(void*, CLockLocation)& i, (*lockstack)) {\n+            if (i.first == c) break;\n+\n+            std::pair<void*, void*> p1 = std::make_pair(i.first, c);\n+            if (lockorders.count(p1))\n+                continue;\n+            lockorders[p1] = (*lockstack);\n+\n+            std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n+            if (lockorders.count(p2))\n+            {\n+                potential_deadlock_detected(p1, lockorders[p2], lockorders[p1]);\n+                break;\n+            }\n         }\n     }\n     dd_mutex.unlock();"
      },
      {
        "sha": "1604338fb66975b0c93feeb0780b3863d555dfe0",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 35,
        "deletions": 42,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/660ff174f299a6dfb28f7725dfbb08f140a5474b/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/660ff174f299a6dfb28f7725dfbb08f140a5474b/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=660ff174f299a6dfb28f7725dfbb08f140a5474b",
        "patch": "@@ -5,19 +5,19 @@\n #ifndef BITCOIN_SYNC_H\n #define BITCOIN_SYNC_H\n \n-#include <boost/interprocess/sync/interprocess_recursive_mutex.hpp>\n-#include <boost/interprocess/sync/scoped_lock.hpp>\n-#include <boost/interprocess/sync/interprocess_semaphore.hpp>\n-#include <boost/interprocess/sync/lock_options.hpp>\n+#include <boost/thread/mutex.hpp>\n+#include <boost/thread/recursive_mutex.hpp>\n+#include <boost/thread/locks.hpp>\n+#include <boost/thread/condition_variable.hpp>\n \n \n \n \n /** Wrapped boost mutex: supports recursive locking, but no waiting  */\n-typedef boost::interprocess::interprocess_recursive_mutex CCriticalSection;\n+typedef boost::recursive_mutex CCriticalSection;\n \n /** Wrapped boost mutex: supports waiting but not recursive locking */\n-typedef boost::interprocess::interprocess_mutex CWaitableCriticalSection;\n+typedef boost::mutex CWaitableCriticalSection;\n \n #ifdef DEBUG_LOCKORDER\n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false);\n@@ -32,12 +32,12 @@ template<typename Mutex>\n class CMutexLock\n {\n private:\n-    boost::interprocess::scoped_lock<Mutex> lock;\n+    boost::unique_lock<Mutex> lock;\n public:\n \n     void Enter(const char* pszName, const char* pszFile, int nLine)\n     {\n-        if (!lock.owns())\n+        if (!lock.owns_lock())\n         {\n             EnterCritical(pszName, pszFile, nLine, (void*)(lock.mutex()));\n #ifdef DEBUG_LOCKCONTENTION\n@@ -55,7 +55,7 @@ class CMutexLock\n \n     void Leave()\n     {\n-        if (lock.owns())\n+        if (lock.owns_lock())\n         {\n             lock.unlock();\n             LeaveCritical();\n@@ -64,17 +64,17 @@ class CMutexLock\n \n     bool TryEnter(const char* pszName, const char* pszFile, int nLine)\n     {\n-        if (!lock.owns())\n+        if (!lock.owns_lock())\n         {\n             EnterCritical(pszName, pszFile, nLine, (void*)(lock.mutex()), true);\n             lock.try_lock();\n-            if (!lock.owns())\n+            if (!lock.owns_lock())\n                 LeaveCritical();\n         }\n-        return lock.owns();\n+        return lock.owns_lock();\n     }\n \n-    CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) : lock(mutexIn, boost::interprocess::defer_lock)\n+    CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) : lock(mutexIn, boost::defer_lock)\n     {\n         if (fTry)\n             TryEnter(pszName, pszFile, nLine);\n@@ -84,16 +84,16 @@ class CMutexLock\n \n     ~CMutexLock()\n     {\n-        if (lock.owns())\n+        if (lock.owns_lock())\n             LeaveCritical();\n     }\n \n     operator bool()\n     {\n-        return lock.owns();\n+        return lock.owns_lock();\n     }\n \n-    boost::interprocess::scoped_lock<Mutex> &GetLock()\n+    boost::unique_lock<Mutex> &GetLock()\n     {\n         return lock;\n     }\n@@ -117,47 +117,40 @@ typedef CMutexLock<CCriticalSection> CCriticalBlock;\n         LeaveCritical(); \\\n     }\n \n-#ifdef MAC_OSX\n-// boost::interprocess::interprocess_semaphore seems to spinlock on OSX; prefer polling instead\n class CSemaphore\n {\n private:\n-    CCriticalSection cs;\n-    int val;\n+    boost::condition_variable condition;\n+    boost::mutex mutex;\n+    int value;\n \n public:\n-    CSemaphore(int init) : val(init) {}\n+    CSemaphore(int init) : value(init) {}\n \n     void wait() {\n-        do {\n-            {\n-                LOCK(cs);\n-                if (val>0) {\n-                    val--;\n-                    return;\n-                }\n-            }\n-            Sleep(100);\n-        } while(1);\n+        boost::unique_lock<boost::mutex> lock(mutex);\n+        while (value < 1) {\n+            condition.wait(lock);\n+        }\n+        value--;\n     }\n \n     bool try_wait() {\n-        LOCK(cs);\n-        if (val>0) {\n-            val--;\n-            return true;\n-        }\n-        return false;\n+        boost::unique_lock<boost::mutex> lock(mutex);\n+        if (value < 1)\n+            return false;\n+        value--;\n+        return true;\n     }\n \n     void post() {\n-        LOCK(cs);\n-        val++;\n+        {\n+            boost::unique_lock<boost::mutex> lock(mutex);\n+            value++;\n+        }\n+        condition.notify_one();\n     }\n };\n-#else\n-typedef boost::interprocess::interprocess_semaphore CSemaphore;\n-#endif\n \n /** RAII-style semaphore lock */\n class CSemaphoreGrant"
      },
      {
        "sha": "b0c80f6dfc4d3f4703d59af71ed2267b9e639287",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/660ff174f299a6dfb28f7725dfbb08f140a5474b/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/660ff174f299a6dfb28f7725dfbb08f140a5474b/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=660ff174f299a6dfb28f7725dfbb08f140a5474b",
        "patch": "@@ -27,6 +27,7 @@ namespace boost {\n #include <boost/foreach.hpp>\n #include <openssl/crypto.h>\n #include <openssl/rand.h>\n+#include <stdarg.h>\n \n #ifdef WIN32\n #ifdef _MSC_VER"
      }
    ]
  }
]