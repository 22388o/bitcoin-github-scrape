[
  {
    "sha": "21be609b4947c955b93dd2be3fbc7624f6e04325",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMWJlNjA5YjQ5NDdjOTU1YjkzZGQyYmUzZmJjNzYyNGY2ZTA0MzI1",
    "commit": {
      "author": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-03-05T01:10:11Z"
      },
      "committer": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2019-03-05T01:10:11Z"
      },
      "message": "In lint-format-strings, open files sequentially\n\nIn lint-format-strings, we use python argparse to read our file arguments. In\nthis mode, argparse opens all the files simultaneously. On OS X, where the\ndefault filehandle limit is 128, this causes the lint to fail. Instead, ask\nargparse for our filename arguments as strings, and open them one at a time\nusing 'with open'.",
      "tree": {
        "sha": "4736183f0cc7d544fe51f80825153d46ad6e9c4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4736183f0cc7d544fe51f80825153d46ad6e9c4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21be609b4947c955b93dd2be3fbc7624f6e04325",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21be609b4947c955b93dd2be3fbc7624f6e04325",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21be609b4947c955b93dd2be3fbc7624f6e04325",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21be609b4947c955b93dd2be3fbc7624f6e04325/comments",
    "author": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14023c966c51a0a14a2e4477fbe3e5d810f91076",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14023c966c51a0a14a2e4477fbe3e5d810f91076",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14023c966c51a0a14a2e4477fbe3e5d810f91076"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "187da91ef1549c2fea9b1207a90741d09235c0b6",
        "filename": "test/lint/lint-format-strings.py",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21be609b4947c955b93dd2be3fbc7624f6e04325/test/lint/lint-format-strings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21be609b4947c955b93dd2be3fbc7624f6e04325/test/lint/lint-format-strings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-format-strings.py?ref=21be609b4947c955b93dd2be3fbc7624f6e04325",
        "patch": "@@ -262,27 +262,27 @@ def main():\n     parser.add_argument(\"--skip-arguments\", type=int, help=\"number of arguments before the format string \"\n                         \"argument (e.g. 1 in the case of fprintf)\", default=0)\n     parser.add_argument(\"function_name\", help=\"function name (e.g. fprintf)\", default=None)\n-    parser.add_argument(\"file\", type=argparse.FileType(\"r\", encoding=\"utf-8\"), nargs=\"*\", help=\"C++ source code file (e.g. foo.cpp)\")\n+    parser.add_argument(\"file\", nargs=\"*\", help=\"C++ source code file (e.g. foo.cpp)\")\n     args = parser.parse_args()\n-\n     exit_code = 0\n-    for f in args.file:\n-        for function_call_str in parse_function_calls(args.function_name, f.read()):\n-            parts = parse_function_call_and_arguments(args.function_name, function_call_str)\n-            relevant_function_call_str = unescape(\"\".join(parts))[:512]\n-            if (f.name, relevant_function_call_str) in FALSE_POSITIVES:\n-                continue\n-            if len(parts) < 3 + args.skip_arguments:\n-                exit_code = 1\n-                print(\"{}: Could not parse function call string \\\"{}(...)\\\": {}\".format(f.name, args.function_name, relevant_function_call_str))\n-                continue\n-            argument_count = len(parts) - 3 - args.skip_arguments\n-            format_str = parse_string_content(parts[1 + args.skip_arguments])\n-            format_specifier_count = count_format_specifiers(format_str)\n-            if format_specifier_count != argument_count:\n-                exit_code = 1\n-                print(\"{}: Expected {} argument(s) after format string but found {} argument(s): {}\".format(f.name, format_specifier_count, argument_count, relevant_function_call_str))\n-                continue\n+    for filename in args.file:\n+        with open(filename, \"r\", encoding=\"utf-8\") as f:\n+            for function_call_str in parse_function_calls(args.function_name, f.read()):\n+                parts = parse_function_call_and_arguments(args.function_name, function_call_str)\n+                relevant_function_call_str = unescape(\"\".join(parts))[:512]\n+                if (f.name, relevant_function_call_str) in FALSE_POSITIVES:\n+                    continue\n+                if len(parts) < 3 + args.skip_arguments:\n+                    exit_code = 1\n+                    print(\"{}: Could not parse function call string \\\"{}(...)\\\": {}\".format(f.name, args.function_name, relevant_function_call_str))\n+                    continue\n+                argument_count = len(parts) - 3 - args.skip_arguments\n+                format_str = parse_string_content(parts[1 + args.skip_arguments])\n+                format_specifier_count = count_format_specifiers(format_str)\n+                if format_specifier_count != argument_count:\n+                    exit_code = 1\n+                    print(\"{}: Expected {} argument(s) after format string but found {} argument(s): {}\".format(f.name, format_specifier_count, argument_count, relevant_function_call_str))\n+                    continue\n     sys.exit(exit_code)\n \n "
      }
    ]
  }
]