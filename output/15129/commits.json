[
  {
    "sha": "b8eb5880693358951229512987beffcff51e0ecf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGViNTg4MDY5MzM1ODk1MTIyOTUxMjk4N2JlZmZjZmY1MWUwZWNm",
    "commit": {
      "author": {
        "name": "benthecarman",
        "email": "benthecarman@live.com",
        "date": "2021-08-31T01:23:17Z"
      },
      "committer": {
        "name": "benthecarman",
        "email": "benthecarman@live.com",
        "date": "2021-08-31T01:23:17Z"
      },
      "message": "rpc: Added ability to remove watch only addresses",
      "tree": {
        "sha": "a63157e2a5e7e65c3c619155ca62db38f7c4ece1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a63157e2a5e7e65c3c619155ca62db38f7c4ece1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8eb5880693358951229512987beffcff51e0ecf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEECtg4d8HwzR7pvWYK18x3C4H9IqgFAmEthIUACgkQ18x3C4H9\nIqiawwv/RSrIyRhdvWQIfska+oOr/TDPEUml03DO2r56uUxj4bHyW+zPTCOOkuyO\nAjC5+uo1HUn5xeE/kFwOAL75tmXR4TvxMdSamiAogjWjTOvgwpvGxa1l4bZrPbKF\na95HBQTJm06ENYt0TC9yvj365OSForrSXl87zFEAJRXf66pyUkfenKPMGNrMwPJo\nKIowj8Qt43DcUEuPbMtPNZweemotFYAIdDNbsmUaZy8ZvaO3sZwOAQyrlO00tHFb\nQfR6dPQgQ+tptp/S2rQM//MNPtxFp4BT4G/SAb0X5raFn6C6/8Fd6a1E8sIDhgpt\nPrB6hfUwmbx7JAbY5O6iHCtckw6+9CrzJP5cz6gF+dboXmvsMFWzU4WhOwaOUXOA\npTNxl4h96oOQLcyxvawCS7TvuSeMpP/BDywjYJLNxD0/lxpdCN9Cf/3R1cM3/o7D\noTPZvQAiO98OXmQf7XYwJMa0lemLXhibxtrnmXAuNRTxdWIjdjVX0an/i4MnzkWM\nsUE7q617\n=Mj4c\n-----END PGP SIGNATURE-----",
        "payload": "tree a63157e2a5e7e65c3c619155ca62db38f7c4ece1\nparent b1c4a4ed395e825d93e2897088766d842cdb1207\nauthor benthecarman <benthecarman@live.com> 1630372997 -0500\ncommitter benthecarman <benthecarman@live.com> 1630372997 -0500\n\nrpc: Added ability to remove watch only addresses\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8eb5880693358951229512987beffcff51e0ecf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8eb5880693358951229512987beffcff51e0ecf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8eb5880693358951229512987beffcff51e0ecf/comments",
    "author": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1c4a4ed395e825d93e2897088766d842cdb1207",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1c4a4ed395e825d93e2897088766d842cdb1207",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1c4a4ed395e825d93e2897088766d842cdb1207"
      }
    ],
    "stats": {
      "total": 248,
      "additions": 242,
      "deletions": 6
    },
    "files": [
      {
        "sha": "010d77a57a36f319aaf4254341623299277de201",
        "filename": "doc/release-notes-15129.md",
        "status": "added",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8eb5880693358951229512987beffcff51e0ecf/doc/release-notes-15129.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8eb5880693358951229512987beffcff51e0ecf/doc/release-notes-15129.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15129.md?ref=b8eb5880693358951229512987beffcff51e0ecf",
        "patch": "@@ -0,0 +1,4 @@\n+New RPCs\n+--------\n+- A new `removeaddress` RPC will remove a watch only address or script\n+  from the current wallet. (#15129)\n\\ No newline at end of file"
      },
      {
        "sha": "42cbd68871cfa04832f86c36ca761685a53c47aa",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8eb5880693358951229512987beffcff51e0ecf/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8eb5880693358951229512987beffcff51e0ecf/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=b8eb5880693358951229512987beffcff51e0ecf",
        "patch": "@@ -138,6 +138,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"importprivkey\", 2, \"rescan\" },\n     { \"importaddress\", 2, \"rescan\" },\n     { \"importaddress\", 3, \"p2sh\" },\n+    { \"removeaddress\", 1, \"p2sh\" },\n+    { \"removeaddress\", 2, \"purge_transactions\" },\n     { \"importpubkey\", 2, \"rescan\" },\n     { \"importmulti\", 0, \"requests\" },\n     { \"importmulti\", 1, \"options\" },"
      },
      {
        "sha": "561bc4d270fb3d358499bc0c6a783d6c53ef6553",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 92,
        "deletions": 0,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8eb5880693358951229512987beffcff51e0ecf/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8eb5880693358951229512987beffcff51e0ecf/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=b8eb5880693358951229512987beffcff51e0ecf",
        "patch": "@@ -324,6 +324,98 @@ RPCHelpMan importaddress()\n     };\n }\n \n+static void RemoveAddress(CWallet*, const CTxDestination&, bool);\n+static void RemoveScript(CWallet* const pwallet, const CScript& script, bool is_redeem_script, bool purge_txns) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    isminetype ismine = pwallet->IsMine(script);\n+    if (!is_redeem_script && ismine == ISMINE_SPENDABLE) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet contains the private key for this address\");\n+    } else if (!is_redeem_script && ismine == ISMINE_NO) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet does not contain this address or script\");\n+    }\n+    CHECK_NONFATAL(ismine == ISMINE_WATCH_ONLY || is_redeem_script);\n+\n+    LegacyScriptPubKeyMan& spk_man = EnsureLegacyScriptPubKeyMan(*pwallet);\n+\n+    if (spk_man.HaveWatchOnly(script) && !spk_man.PurgeWatchOnly(script)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error removing address/script from wallet\");\n+    }\n+    if (is_redeem_script) {\n+        CScriptID scriptID = CScriptID(script);\n+        if (!spk_man.HaveCScript(scriptID)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error removing p2sh redeemScript from wallet\");\n+        }\n+        RemoveAddress(pwallet, ScriptHash(scriptID), purge_txns);\n+    } else {\n+        CTxDestination destination;\n+        if (ExtractDestination(script, destination)) {\n+            pwallet->DelAddressBook(destination);\n+        }\n+    }\n+\n+    if (purge_txns) {\n+        pwallet->RemoveTransactions(script);\n+    }\n+}\n+\n+static void RemoveAddress(CWallet* const pwallet, const CTxDestination& dest, bool purge_txns) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    CScript script = GetScriptForDestination(dest);\n+    RemoveScript(pwallet, script, false, purge_txns);\n+    // remove from address book\n+    if (IsValidDestination(dest)) {\n+        pwallet->DelAddressBook(dest);\n+    }\n+}\n+\n+RPCHelpMan removeaddress()\n+{\n+    return RPCHelpMan{\n+        \"removeaddress\",\n+        \"\\nRemoves an address or script (in hex) that was being watched as if it were in your wallet but was not being used to spend. Requires a new wallet backup.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The Bitcoin address (or hex-encoded script)\"},\n+            {\"p2sh\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Whether to remove the P2SH version of the script as well\"},\n+            {\"purge_transactions\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Whether to remove existing transactions from the wallet\"},\n+        },\n+        RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n+        RPCExamples{\n+            \"\\nRemove an address\\n\" + HelpExampleCli(\"removeaddress\", \"\\\"myaddress\\\"\") +\n+            \"\\nRemove a script\\n\" + HelpExampleCli(\"removeaddress\", \"\\\"myscript\\\"\") +\n+            \"\\nAs a JSON-RPC call\\n\" + HelpExampleRpc(\"removeaddress\", \"\\\"myaddress\\\"\")},\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue {\n+            std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return NullUniValue;\n+\n+            EnsureLegacyScriptPubKeyMan(*wallet, true);\n+\n+            // Whether to remove the p2sh version too\n+            const bool is_p2sh{request.params[1].isNull() ? false : request.params[1].get_bool()};\n+\n+            // Whether to remove the wallet transactions too\n+            const bool purge_txns{request.params[2].isNull() ? false : request.params[2].get_bool()};\n+\n+            {\n+                LOCK(wallet->cs_wallet);\n+\n+                CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+                if (IsValidDestination(dest)) {\n+                    if (is_p2sh) {\n+                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Cannot use the p2sh flag with an address - use a script instead\");\n+                    }\n+                    RemoveAddress(wallet.get(), dest, purge_txns);\n+                } else if (IsHex(request.params[0].get_str())) {\n+                    std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n+                    RemoveScript(wallet.get(), CScript(data.begin(), data.end()), is_p2sh, purge_txns);\n+                } else {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n+                }\n+            }\n+            return NullUniValue;\n+    },\n+        };\n+}\n+\n RPCHelpMan importprunedfunds()\n {\n     return RPCHelpMan{\"importprunedfunds\","
      },
      {
        "sha": "da03168a5b5cf2eb2992fae778c6f3e017e4bf58",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8eb5880693358951229512987beffcff51e0ecf/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8eb5880693358951229512987beffcff51e0ecf/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b8eb5880693358951229512987beffcff51e0ecf",
        "patch": "@@ -4690,6 +4690,7 @@ RPCHelpMan abortrescan();\n RPCHelpMan dumpprivkey();\n RPCHelpMan importprivkey();\n RPCHelpMan importaddress();\n+RPCHelpMan removeaddress();\n RPCHelpMan importpubkey();\n RPCHelpMan dumpwallet();\n RPCHelpMan importwallet();\n@@ -4749,6 +4750,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             &listwallets,                    },\n     { \"wallet\",             &loadwallet,                     },\n     { \"wallet\",             &lockunspent,                    },\n+    { \"wallet\",             &removeaddress,                  },\n     { \"wallet\",             &removeprunedfunds,              },\n     { \"wallet\",             &rescanblockchain,               },\n     { \"wallet\",             &send,                           },"
      },
      {
        "sha": "2c0a4c598692fa1651b0f267f34373de74b605be",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8eb5880693358951229512987beffcff51e0ecf/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8eb5880693358951229512987beffcff51e0ecf/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=b8eb5880693358951229512987beffcff51e0ecf",
        "patch": "@@ -882,6 +882,35 @@ bool LegacyScriptPubKeyMan::RemoveWatchOnly(const CScript &dest)\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::PurgeWatchOnly(const CScript& dest)\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        setWatchOnly.erase(dest);\n+        CPubKey pubKey;\n+        if (ExtractPubKey(dest, pubKey)) {\n+            CKeyID key_id = pubKey.GetID();\n+            mapWatchKeys.erase(key_id);\n+            mapKeyMetadata.erase(key_id);\n+            if (pubKey.IsCompressed()) {\n+                CScript script = GetScriptForDestination(WitnessV0KeyHash(key_id));\n+                CScriptID id(script);\n+                mapScripts.erase(id);\n+                m_script_metadata.erase(id);\n+            }\n+        }\n+    }\n+\n+    if (!HaveWatchOnly()) {\n+        NotifyWatchonlyChanged(false);\n+    }\n+    if (!WalletBatch(m_storage.GetDatabase()).EraseWatchOnly(dest)) {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n bool LegacyScriptPubKeyMan::LoadWatchOnly(const CScript &dest)\n {\n     return AddWatchOnlyInMem(dest);"
      },
      {
        "sha": "0b2bbd3b2b1d4c473261c35a44ede0f01b03cd50",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8eb5880693358951229512987beffcff51e0ecf/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8eb5880693358951229512987beffcff51e0ecf/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=b8eb5880693358951229512987beffcff51e0ecf",
        "patch": "@@ -440,6 +440,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool HaveWatchOnly() const;\n     //! Remove a watch only script from the keystore\n     bool RemoveWatchOnly(const CScript &dest);\n+    //! Remove a watch only script and superfluous scripts from the keystore\n+    bool PurgeWatchOnly(const CScript& dest);\n     bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n     //! Fetches a pubkey from mapWatchKeys if it exists there"
      },
      {
        "sha": "8c5e584b1cc1b28541bc7dc89171cd5ff1f75808",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8eb5880693358951229512987beffcff51e0ecf/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8eb5880693358951229512987beffcff51e0ecf/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b8eb5880693358951229512987beffcff51e0ecf",
        "patch": "@@ -1026,6 +1026,45 @@ bool CWallet::LoadToWallet(const uint256& hash, const UpdateWalletTxFn& fill_wtx\n     return true;\n }\n \n+void CWallet::RemoveTransactions(const CScript& script)\n+{\n+    LOCK(cs_wallet);\n+\n+    std::vector<std::unique_ptr<CWalletTx>> vWtx;\n+    for (std::map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it) {\n+        const CWalletTx& wTx = it->second;\n+        bool txContainsScript = false;\n+\n+        // if the tx sends to this script\n+        for (const CTxOut& txout : wTx.tx->vout) {\n+            txContainsScript |= script == txout.scriptPubKey;\n+        }\n+\n+        // if the tx spends from this script\n+        if (!txContainsScript) {\n+            for (const CTxIn& txin : wTx.tx->vin) {\n+                std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(txin.prevout.hash);\n+                if (mi != mapWallet.end()) {\n+                    const CWalletTx& prev = (*mi).second;\n+                    if (txin.prevout.n < prev.tx->vout.size()) {\n+                        txContainsScript |= script == prev.tx->vout[txin.prevout.n].scriptPubKey;\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (txContainsScript && !IsFromMe(*wTx.tx) && !IsMine(*wTx.tx)) {\n+            vWtx.push_back(std::make_unique<CWalletTx>(this, MakeTransactionRef(std::move(*wTx.tx))));\n+        }\n+    }\n+\n+    for (const auto& wtx : vWtx) {\n+        mapWallet.erase(wtx->GetHash());\n+        WalletBatch(GetDatabase()).EraseTx(wtx->GetHash());\n+        NotifyTransactionChanged(wtx->GetHash(), CT_DELETED);\n+    }\n+}\n+\n bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, CWalletTx::Confirmation confirm, bool fUpdate)\n {\n     const CTransaction& tx = *ptx;"
      },
      {
        "sha": "174f1276e7d4cc3561a357996f125efbd7067b2b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8eb5880693358951229512987beffcff51e0ecf/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8eb5880693358951229512987beffcff51e0ecf/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b8eb5880693358951229512987beffcff51e0ecf",
        "patch": "@@ -507,6 +507,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     int64_t IncOrderPosNext(WalletBatch *batch = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     DBErrors ReorderTransactions();\n \n+    void RemoveTransactions(const CScript& script);\n+\n     void MarkDirty();\n \n     //! Callback for updating transaction metadata in mapWallet."
      },
      {
        "sha": "9a957319c7f36cd0a5fab19249d4a517002b9f93",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 70,
        "deletions": 6,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8eb5880693358951229512987beffcff51e0ecf/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8eb5880693358951229512987beffcff51e0ecf/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=b8eb5880693358951229512987beffcff51e0ecf",
        "patch": "@@ -426,7 +426,7 @@ def run_test(self):\n             # Import address and private key to check correct behavior of spendable unspents\n             # 1. Send some coins to generate new UTXO\n             address_to_import = self.nodes[2].getnewaddress()\n-            txid = self.nodes[0].sendtoaddress(address_to_import, 1)\n+            addr_txid = self.nodes[0].sendtoaddress(address_to_import, 1)\n             self.nodes[0].generate(1)\n             self.sync_all(self.nodes[0:3])\n \n@@ -493,26 +493,90 @@ def run_test(self):\n                 assert_raises_rpc_error(-8, 'Invalid estimate_mode parameter, must be one of: \"unset\", \"economical\", \"conservative\"',\n                     self.nodes[2].sendtoaddress, address=address, amount=1, conf_target=target, estimate_mode=mode)\n \n-            # 2. Import address from node2 to node1\n+            # Import address from node2 to node1\n             self.nodes[1].importaddress(address_to_import)\n \n-            # 3. Validate that the imported address is watch-only on node1\n+            # Validate that the imported address is watch-only on node1\n             assert self.nodes[1].getaddressinfo(address_to_import)[\"iswatchonly\"]\n \n-            # 4. Check that the unspents after import are not spendable\n+            # Check that the unspents after import are not spendable\n             assert_array_result(self.nodes[1].listunspent(),\n                                 {\"address\": address_to_import},\n                                 {\"spendable\": False})\n \n-            # 5. Import private key of the previously imported address on node1\n+            # Remove the address from node1\n+            self.nodes[1].removeaddress(address_to_import, False, False)\n+\n+            # Validate that the address is no longer in the wallet\n+            assert not self.nodes[1].getaddressinfo(address_to_import)[\"iswatchonly\"]\n+\n+            # Validate tx is still in wallet\n+            self.nodes[1].gettransaction(addr_txid)\n+\n+            # Re-import address then purge transactions\n+            self.nodes[1].importaddress(address_to_import)\n+            self.nodes[1].removeaddress(address_to_import, False, True)\n+\n+            # Validate transaction is removed\n+            assert_raises_rpc_error(-5, \"Invalid or non-wallet transaction id\", self.nodes[1].gettransaction, addr_txid)\n+\n+            # Validate that the address is no longer in the wallet\n+            assert not self.nodes[1].getaddressinfo(address_to_import)[\"iswatchonly\"]\n+\n+            # Attempt to remove address again\n+            assert_raises_rpc_error(-4, \"The wallet does not contain this address or script\", self.nodes[1].removeaddress, address_to_import)\n+\n+            # Re-import the address\n+            self.nodes[1].importaddress(address_to_import)\n+\n+            # Import private key of the previously imported address on node1\n             priv_key = self.nodes[2].dumpprivkey(address_to_import)\n             self.nodes[1].importprivkey(priv_key)\n \n-            # 6. Check that the unspents are now spendable on node1\n+            script = \"76a91463fe7c47cf475802b1c4ec2d34d1ef33e6b0fc6388ac\"\n+            scriptAddr = \"mpdg41HWZR8puTvV1A1wxpF85Gewn2VALN\"\n+            p2shAddr = \"2Mw8MoHnYnWw2TwtcoWXC2hxr9Jx6YVELYQ\"\n+\n+            # Import script\n+            self.nodes[1].importaddress(script, \"\", False, True)\n+\n+            # Validate that the addresses are in the wallet\n+            assert self.nodes[1].getaddressinfo(scriptAddr)[\"iswatchonly\"]\n+            assert self.nodes[1].getaddressinfo(p2shAddr)[\"iswatchonly\"]\n+\n+            # Remove script\n+            self.nodes[1].removeaddress(script, True, True)\n+\n+            # Validate that the addresses are no longer in the wallet\n+            assert not self.nodes[1].getaddressinfo(scriptAddr)[\"iswatchonly\"]\n+            assert not self.nodes[1].getaddressinfo(p2shAddr)[\"iswatchonly\"]\n+\n+            # Check that the unspents are now spendable on node1\n             assert_array_result(self.nodes[1].listunspent(),\n                                 {\"address\": address_to_import},\n                                 {\"spendable\": True})\n \n+            # Attempt to remove address after owning private key\n+            assert_raises_rpc_error(-4, \"The wallet contains the private key for this address\", self.nodes[1].removeaddress, address_to_import)\n+\n+            # Check for removeaddress affecting other addresses\n+            # Send some coins to generate new UTXO\n+            address_to_import2 = self.nodes[2].getnewaddress()\n+            txid = self.nodes[0].sendtoaddress(address_to_import2, 1)\n+            self.nodes[0].generate(1)\n+            self.sync_all(self.nodes[0:3])\n+\n+            # Import the new address from node2 to node1\n+            self.nodes[1].importaddress(address_to_import2)\n+            assert self.nodes[1].getaddressinfo(address_to_import2)[\"iswatchonly\"]\n+\n+            # Remove the address from node1\n+            self.nodes[1].removeaddress(address_to_import2)\n+\n+            # Check the address was removed and other address is unaffected\n+            assert not self.nodes[1].getaddressinfo(address_to_import2)[\"iswatchonly\"]\n+            assert self.nodes[1].getaddressinfo(address_to_import)[\"ismine\"]\n+\n         # Mine a block from node0 to an address from node1\n         coinbase_addr = self.nodes[1].getnewaddress()\n         block_hash = self.nodes[0].generatetoaddress(1, coinbase_addr)[0]"
      }
    ]
  }
]