DrahtBot,2021-06-06 14:36:07,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #13062 (Make script interpreter independent from storage type CScript by sipa)\n\nIf you consider this pull request import",https://github.com/bitcoin/bitcoin/pull/22166#issuecomment-855409415,855409415,
achow101,2021-06-08 16:22:36,ACK f9d6f9a52c61833bbc5c611ff6a3e59066e1c92f,https://github.com/bitcoin/bitcoin/pull/22166#issuecomment-856912364,856912364,
laanwj,2021-06-14 15:21:40,"Reviewed that the consensus commit (e3739fb3b042c3805b5b6357f6f79df787d11144) is a pure refactor.\n\nCode review ACK 13c6ab699eb6906c6554b4319a377c33fa0d157f",https://github.com/bitcoin/bitcoin/pull/22166#issuecomment-860771902,860771902,
achow101,2021-06-14 19:33:57,re-ACK 13c6ab699eb6906c6554b4319a377c33fa0d157f,https://github.com/bitcoin/bitcoin/pull/22166#issuecomment-860939242,860939242,
sipa,2021-06-15 22:01:14,"Addressed some comments, and also made this observable change:\n\n```diff\n             if (permit_uncompressed || key.IsCompressed()) {\n                 CPubKey pubkey = key.GetPubKey();\n                 out.keys.emplace(pubkey.GetID(), key);\n-                return std::make_unique<ConstPubkeyProvider>(key_exp_index, pubkey);\n+                return std::make_unique<ConstPubkeyProvide",https://github.com/bitcoin/bitcoin/pull/22166#issuecomment-861865268,861865268,
achow101,2021-06-16 16:53:22,re-ACK 834935511c2c799c8cb2312d617dbed6336000c4,https://github.com/bitcoin/bitcoin/pull/22166#issuecomment-862546343,862546343,
Sjors,2021-06-16 19:35:21,"It's too hot here to review code, but I can confirm that this correctly infers my `tr(xpub...)` and `tr(xpub1, pk(xpub2))` descriptors (and surviving a roundtrip through `deriveaddresses`). Might be a good sanity check to try with a rebased #21329 too.",https://github.com/bitcoin/bitcoin/pull/22166#issuecomment-862658229,862658229,
laanwj,2021-06-17 10:33:10,"> It's too hot here to review code\n\nSame, I propose we postpone the feature freeze a bit. Not able to concentrate at the moment.",https://github.com/bitcoin/bitcoin/pull/22166#issuecomment-863127161,863127161,
sipa,2021-06-18 01:23:52,"Rebased, will work on adding some tests for failure cases of `InferTaprootTree`.",https://github.com/bitcoin/bitcoin/pull/22166#issuecomment-863663554,863663554,
sipa,2021-06-18 18:33:03,"@Sjors Oops, thanks for catching that. I redid the rebase; does it look better now?",https://github.com/bitcoin/bitcoin/pull/22166#issuecomment-864209850,864209850,
achow101,2021-06-18 18:44:51,"re-ACK d637a9b397816e34652d0c4d383308e39770737a\n\nRebase looks good.",https://github.com/bitcoin/bitcoin/pull/22166#issuecomment-864215272,864215272,
Sjors,2021-06-21 15:48:12,"re-utACK d637a9b\n\nMuch better",https://github.com/bitcoin/bitcoin/pull/22166#issuecomment-865144862,865144862,
achow101,2021-06-07 20:12:52,"In 77466ae5c58b4a46e545d3d24521fa635f7b8fbe ""Taproot descriptor inference""\n\nIt would be useful to explain in more detail why these conditions matter.\n\nIIUC, this happens because in the section above, if we have duplicate subtrees, we end up making the same side of the tree when we have duplicates which means that the normal tree handling part of this loop runs out of nodes to look at on th",https://github.com/bitcoin/bitcoin/pull/22166#discussion_r646907609,646907609,src/script/standard.cpp
sipa,2021-06-08 00:38:06,"Restructured things a bit by adding explicit ""explored"" and ""inner"" flags to the nodes. This avoids the need for testing the specifics of the unexplored child.\n\nAlso expanded the comment to explain this better.",https://github.com/bitcoin/bitcoin/pull/22166#discussion_r647029293,647029293,src/script/standard.cpp
laanwj,2021-06-15 11:35:08,I would have a slight preference to use constants here instead of hardcoding `0x02` (and `0x03` below) and `33`.,https://github.com/bitcoin/bitcoin/pull/22166#discussion_r651702477,651702477,src/script/descriptor.cpp
laanwj,2021-06-15 11:37:29,It looks like the optional `xonly` argument to `InferPubkey` is never passed?,https://github.com/bitcoin/bitcoin/pull/22166#discussion_r651704018,651704018,src/script/descriptor.cpp
laanwj,2021-06-15 12:13:27,would be nice to add an assertion here with regard to `control.size()` before indexing into it (maybe same for `program`),https://github.com/bitcoin/bitcoin/pull/22166#discussion_r651729225,651729225,src/script/interpreter.cpp
sipa,2021-06-15 21:24:20,"I agree with this, but prefer keeping it for a follow-up. There are several places where this is already done, and I'd like to introduce constants for it, as well as using them everywhere in the same PR - doing so here would be a distraction.",https://github.com/bitcoin/bitcoin/pull/22166#discussion_r652163469,652163469,src/script/descriptor.cpp
sipa,2021-06-15 21:24:27,Fixed.,https://github.com/bitcoin/bitcoin/pull/22166#discussion_r652163550,652163550,src/script/descriptor.cpp
sipa,2021-06-15 21:57:32,Done.,https://github.com/bitcoin/bitcoin/pull/22166#discussion_r652182119,652182119,src/script/interpreter.cpp
Sjors,2021-06-17 11:18:34,70ff719c364999346495a2368760f6fbb5a6ca36: why would a script have more than one control block? I assume this only happens if an identical script appears in multiple branches? Can you expand the comment?,https://github.com/bitcoin/bitcoin/pull/22166#discussion_r653469576,653469576,src/script/standard.h
Sjors,2021-06-17 12:39:01,70ff719c364999346495a2368760f6fbb5a6ca36 : maybe assert `IsComplete()`?,https://github.com/bitcoin/bitcoin/pull/22166#discussion_r653524666,653524666,src/script/standard.cpp
Sjors,2021-06-17 13:11:56,"834935511c2c799c8cb2312d617dbed6336000c4: rather than failing, could we return `raw()` (at least for `leaf_ver == TAPROOT_LEAF_TAPSCRIPT`)? That can wait for a followup though, since we can't have `tr()` descriptors with raw leaves in the wallet anyway atm, and `raw()` is still limited to the top level.",https://github.com/bitcoin/bitcoin/pull/22166#discussion_r653550686,653550686,src/script/descriptor.cpp
sipa,2021-06-18 01:18:55,Done in https://github.com/bitcoin/bitcoin/pull/22275.,https://github.com/bitcoin/bitcoin/pull/22166#discussion_r654079583,654079583,src/script/standard.cpp
sipa,2021-06-18 01:19:04,Doing so in https://github.com/bitcoin/bitcoin/pull/22275.,https://github.com/bitcoin/bitcoin/pull/22166#discussion_r654079643,654079643,src/script/standard.h
sipa,2021-06-18 01:20:45,I think that's exactly what this code does.,https://github.com/bitcoin/bitcoin/pull/22166#discussion_r654080186,654080186,src/script/descriptor.cpp
Sjors,2021-06-18 15:38:28,"I think you lost the asserts in your rebase:\n```\nassert(control.size() >= TAPROOT_CONTROL_BASE_SIZE);\nassert(program.size() >= uint256::size());\n```",https://github.com/bitcoin/bitcoin/pull/22166#discussion_r654527282,654527282,src/script/interpreter.cpp
meshcollider,2021-06-23 10:02:25,nit: `to build`,https://github.com/bitcoin/bitcoin/pull/22166#discussion_r656947824,656947824,src/script/standard.cpp
meshcollider,2021-06-23 10:03:15,nit: `node`,https://github.com/bitcoin/bitcoin/pull/22166#discussion_r656948503,656948503,src/script/standard.cpp
meshcollider,2021-06-23 10:04:07,nit: `provided`,https://github.com/bitcoin/bitcoin/pull/22166#discussion_r656949147,656949147,src/script/standard.cpp
jonatack,2021-06-23 11:37:45,"touched up the various nits in #22323, feel free to add any others there",https://github.com/bitcoin/bitcoin/pull/22166#discussion_r657010291,657010291,src/script/standard.cpp
