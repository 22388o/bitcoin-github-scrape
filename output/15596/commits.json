[
  {
    "sha": "fae5f874d51c770322fb18cc4050b3f14697de66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWU1Zjg3NGQ1MWM3NzAzMjJmYjE4Y2M0MDUwYjNmMTQ2OTdkZTY2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-13T18:45:53Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-13T18:43:55Z"
      },
      "message": "rpc: Document that minconf is an ignored dummy value",
      "tree": {
        "sha": "7ebe0beb6c9b5ff2ed3144c6a71a79fe7036a8d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ebe0beb6c9b5ff2ed3144c6a71a79fe7036a8d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae5f874d51c770322fb18cc4050b3f14697de66",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJciU9rAAoJEM4rdWl+aaVIfEwMAMyyXetZm21lR7wxRC/CAZ70\nHlZAhH7bLLcOIQCmFvowl2lxQWKykzX8+SNVhsBLrrXLUVx9B5EJnO6ZRt2yR791\n6u6FF7i5zKQoGHQCqClt4rkHDVWeb7ZfONuULO6J4tsKHQ9ehB1vvk/89gEoGpax\nxxcDhRdTGf9haI8vaAdx/6GR2rX0MMb8mY+S4VBOqRHRExK3i9UVau/NfnKBe5lc\ne88QnJNZqilr1M3djwHJBMC7y/TmEHGZ5CG0C79jYANjyeqeicc8yD8QJKg9nfDW\n7zpP3OCyedt9Z+T5CPTGpRXlESZn3mN7RAHV4ybd07iIPumOFCxV7dg0Q7FUQEGE\nyG0tkWhTYpvQIkscfVC1KUEJ00ogW8SVYPtzl+te+z6IFRGfU+i1s2kocES7R+Pr\ndBKg1Lv7zn6XzuVhSi4T3RfIc3HThiE0XpKiTI860ukRKrreBs8DWn6QMXAg3LBL\nYI2eKYK3B20t9JUDKwlWqG4egJXtgeKHNOwwvp3nXw==\n=ATfF\n-----END PGP SIGNATURE-----",
        "payload": "tree 7ebe0beb6c9b5ff2ed3144c6a71a79fe7036a8d7\nparent 887f57eb727643eb1f37999a022f3817aaab6d00\nauthor MarcoFalke <falke.marco@gmail.com> 1552502753 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1552502635 -0400\n\nrpc: Document that minconf is an ignored dummy value\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae5f874d51c770322fb18cc4050b3f14697de66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fae5f874d51c770322fb18cc4050b3f14697de66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae5f874d51c770322fb18cc4050b3f14697de66/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "887f57eb727643eb1f37999a022f3817aaab6d00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/887f57eb727643eb1f37999a022f3817aaab6d00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/887f57eb727643eb1f37999a022f3817aaab6d00"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 7,
      "deletions": 15
    },
    "files": [
      {
        "sha": "a35659e371864595360d302c7f66c91229335605",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 15,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae5f874d51c770322fb18cc4050b3f14697de66/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae5f874d51c770322fb18cc4050b3f14697de66/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fae5f874d51c770322fb18cc4050b3f14697de66",
        "patch": "@@ -807,9 +807,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n-        throw std::runtime_error(\n-            RPCHelpMan{\"sendmany\",\n+    const RPCHelpMan help{\"sendmany\",\n                 \"\\nSend multiple times. Amounts are double-precision floating point numbers.\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n@@ -819,7 +817,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n                             {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The bitcoin address is the key, the numeric amount (can be string) in \" + CURRENCY_UNIT + \" is the value\"},\n                         },\n                     },\n-                    {\"minconf\", RPCArg::Type::NUM, /* default */ \"1\", \"Only use the balance confirmed at least this many times.\"},\n+                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"Ignored dummy value\"},\n                     {\"comment\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment\"},\n                     {\"subtractfeefrom\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A json array with addresses.\\n\"\n             \"                           The fee will be equally deducted from the amount of each selected address.\\n\"\n@@ -850,7 +848,11 @@ static UniValue sendmany(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"sendmany\", \"\\\"\\\", {\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}, 6, \\\"testing\\\"\")\n                 },\n-            }.ToString());\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -867,9 +869,6 @@ static UniValue sendmany(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Dummy value must be set to \\\"\\\"\");\n     }\n     UniValue sendTo = request.params[1].get_obj();\n-    int nMinDepth = 1;\n-    if (!request.params[2].isNull())\n-        nMinDepth = request.params[2].get_int();\n \n     mapValue_t mapValue;\n     if (!request.params[3].isNull() && !request.params[3].get_str().empty())\n@@ -897,7 +896,6 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     std::set<CTxDestination> destinations;\n     std::vector<CRecipient> vecSend;\n \n-    CAmount totalAmount = 0;\n     std::vector<std::string> keys = sendTo.getKeys();\n     for (const std::string& name_ : keys) {\n         CTxDestination dest = DecodeDestination(name_);\n@@ -914,7 +912,6 @@ static UniValue sendmany(const JSONRPCRequest& request)\n         CAmount nAmount = AmountFromValue(sendTo[name_]);\n         if (nAmount <= 0)\n             throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n-        totalAmount += nAmount;\n \n         bool fSubtractFeeFromAmount = false;\n         for (unsigned int idx = 0; idx < subtractFeeFromAmount.size(); idx++) {\n@@ -929,11 +926,6 @@ static UniValue sendmany(const JSONRPCRequest& request)\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    // Check funds\n-    if (totalAmount > pwallet->GetLegacyBalance(ISMINE_SPENDABLE, nMinDepth)) {\n-        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Wallet has insufficient funds\");\n-    }\n-\n     // Shuffle recipient list\n     std::shuffle(vecSend.begin(), vecSend.end(), FastRandomContext());\n "
      }
    ]
  },
  {
    "sha": "faa3a246e8809b4954a4a6d202fe8c7f7f776b6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWEzYTI0NmU4ODA5YjQ5NTRhNGE2ZDIwMmZlOGM3ZjdmNzc2YjZl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-10T21:29:54Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-14T20:03:53Z"
      },
      "message": "scripted-diff: wallet: Rename pcoin to wtx\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e 's/const CWalletTx ?\\* ?pcoin = &/const CWalletTx\\& wtx = /g' src/wallet/wallet.cpp\nsed -i -e 's/\\<pcoin->/wtx./g' src/wallet/wallet.cpp\nsed -i -e 's/\\<pcoin\\>/\\&wtx/g' src/wallet/wallet.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "df1f6309e4f4373221dcf483e0b70a4f1b11267d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df1f6309e4f4373221dcf483e0b70a4f1b11267d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa3a246e8809b4954a4a6d202fe8c7f7f776b6e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcirOpAAoJEM4rdWl+aaVItqAMAJ4RnJk7+UmTu85kF0LwM+X4\n20biBadcvPD8UIC/vUlEyVh+8NAbogvxGPiXlc4gZ2En9dlbdxrSb6uupeV5FTgT\nLLYUZ251UdWwHwwS9Bbk5eOBIDp9SViF18R/xYoYg/5VW0xy2w/SK5TlNWj0Xpm5\nN1nzwjVqm+xur2QZLtk3mNPuMZklAugY/H7m5g0ulGMgavzMsaG+Zo0H3wD8JJRv\nrcdi7SQhSfMxsnI07ERAVC5RCPuNNTQ8d453tuXvfhuyPSKHzcnvDgBA3LYMDlR8\nfOPUpaMJGJ3KmplrXvxxZkcny0qNVBVfzSY41JhwwfMwzmzYgAxjC9BvGhTeHwWG\n/KR/5SxqKacAkoZoQmlfZ9lqueYyLWYH7Zn1O0QZbyqJ6WOkl10jCV+jKgsk8zxt\nku83QmgQKxMrbxVLJ4pBVZxZ4pFZV2RGqcPW1ciuhNRE6y69jiBa6zK3XmhWrjmi\niZl0LweqAOnmZ+D73QLAuvA8fnjgzEhRVSpu48uhjg==\n=lmMi\n-----END PGP SIGNATURE-----",
        "payload": "tree df1f6309e4f4373221dcf483e0b70a4f1b11267d\nparent fae5f874d51c770322fb18cc4050b3f14697de66\nauthor MarcoFalke <falke.marco@gmail.com> 1552253394 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1552593833 -0400\n\nscripted-diff: wallet: Rename pcoin to wtx\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e 's/const CWalletTx ?\\* ?pcoin = &/const CWalletTx\\& wtx = /g' src/wallet/wallet.cpp\nsed -i -e 's/\\<pcoin->/wtx./g' src/wallet/wallet.cpp\nsed -i -e 's/\\<pcoin\\>/\\&wtx/g' src/wallet/wallet.cpp\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa3a246e8809b4954a4a6d202fe8c7f7f776b6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa3a246e8809b4954a4a6d202fe8c7f7f776b6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa3a246e8809b4954a4a6d202fe8c7f7f776b6e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fae5f874d51c770322fb18cc4050b3f14697de66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae5f874d51c770322fb18cc4050b3f14697de66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fae5f874d51c770322fb18cc4050b3f14697de66"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 45,
      "deletions": 45
    },
    "files": [
      {
        "sha": "cd1a37e3e9a1241b92d9800b616d35526a0c6ce5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 45,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa3a246e8809b4954a4a6d202fe8c7f7f776b6e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa3a246e8809b4954a4a6d202fe8c7f7f776b6e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=faa3a246e8809b4954a4a6d202fe8c7f7f776b6e",
        "patch": "@@ -2180,9 +2180,9 @@ CAmount CWallet::GetBalance(const isminefilter& filter, const int min_depth) con\n         LOCK(cs_wallet);\n         for (const auto& entry : mapWallet)\n         {\n-            const CWalletTx* pcoin = &entry.second;\n-            if (pcoin->IsTrusted(*locked_chain) && pcoin->GetDepthInMainChain(*locked_chain) >= min_depth) {\n-                nTotal += pcoin->GetAvailableCredit(*locked_chain, true, filter);\n+            const CWalletTx& wtx = entry.second;\n+            if (wtx.IsTrusted(*locked_chain) && wtx.GetDepthInMainChain(*locked_chain) >= min_depth) {\n+                nTotal += wtx.GetAvailableCredit(*locked_chain, true, filter);\n             }\n         }\n     }\n@@ -2198,9 +2198,9 @@ CAmount CWallet::GetUnconfirmedBalance() const\n         LOCK(cs_wallet);\n         for (const auto& entry : mapWallet)\n         {\n-            const CWalletTx* pcoin = &entry.second;\n-            if (!pcoin->IsTrusted(*locked_chain) && pcoin->GetDepthInMainChain(*locked_chain) == 0 && pcoin->InMempool())\n-                nTotal += pcoin->GetAvailableCredit(*locked_chain);\n+            const CWalletTx& wtx = entry.second;\n+            if (!wtx.IsTrusted(*locked_chain) && wtx.GetDepthInMainChain(*locked_chain) == 0 && wtx.InMempool())\n+                nTotal += wtx.GetAvailableCredit(*locked_chain);\n         }\n     }\n     return nTotal;\n@@ -2214,8 +2214,8 @@ CAmount CWallet::GetImmatureBalance() const\n         LOCK(cs_wallet);\n         for (const auto& entry : mapWallet)\n         {\n-            const CWalletTx* pcoin = &entry.second;\n-            nTotal += pcoin->GetImmatureCredit(*locked_chain);\n+            const CWalletTx& wtx = entry.second;\n+            nTotal += wtx.GetImmatureCredit(*locked_chain);\n         }\n     }\n     return nTotal;\n@@ -2229,9 +2229,9 @@ CAmount CWallet::GetUnconfirmedWatchOnlyBalance() const\n         LOCK(cs_wallet);\n         for (const auto& entry : mapWallet)\n         {\n-            const CWalletTx* pcoin = &entry.second;\n-            if (!pcoin->IsTrusted(*locked_chain) && pcoin->GetDepthInMainChain(*locked_chain) == 0 && pcoin->InMempool())\n-                nTotal += pcoin->GetAvailableCredit(*locked_chain, true, ISMINE_WATCH_ONLY);\n+            const CWalletTx& wtx = entry.second;\n+            if (!wtx.IsTrusted(*locked_chain) && wtx.GetDepthInMainChain(*locked_chain) == 0 && wtx.InMempool())\n+                nTotal += wtx.GetAvailableCredit(*locked_chain, true, ISMINE_WATCH_ONLY);\n         }\n     }\n     return nTotal;\n@@ -2245,8 +2245,8 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n         LOCK(cs_wallet);\n         for (const auto& entry : mapWallet)\n         {\n-            const CWalletTx* pcoin = &entry.second;\n-            nTotal += pcoin->GetImmatureWatchOnlyCredit(*locked_chain);\n+            const CWalletTx& wtx = entry.second;\n+            nTotal += wtx.GetImmatureWatchOnlyCredit(*locked_chain);\n         }\n     }\n     return nTotal;\n@@ -2319,25 +2319,25 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n     for (const auto& entry : mapWallet)\n     {\n         const uint256& wtxid = entry.first;\n-        const CWalletTx* pcoin = &entry.second;\n+        const CWalletTx& wtx = entry.second;\n \n-        if (!locked_chain.checkFinalTx(*pcoin->tx)) {\n+        if (!locked_chain.checkFinalTx(*wtx.tx)) {\n             continue;\n         }\n \n-        if (pcoin->IsImmatureCoinBase(locked_chain))\n+        if (wtx.IsImmatureCoinBase(locked_chain))\n             continue;\n \n-        int nDepth = pcoin->GetDepthInMainChain(locked_chain);\n+        int nDepth = wtx.GetDepthInMainChain(locked_chain);\n         if (nDepth < 0)\n             continue;\n \n         // We should not consider coins which aren't at least in our mempool\n         // It's possible for these to be conflicted via ancestors which we may never be able to detect\n-        if (nDepth == 0 && !pcoin->InMempool())\n+        if (nDepth == 0 && !wtx.InMempool())\n             continue;\n \n-        bool safeTx = pcoin->IsTrusted(locked_chain);\n+        bool safeTx = wtx.IsTrusted(locked_chain);\n \n         // We should not consider coins from transactions that are replacing\n         // other transactions.\n@@ -2354,7 +2354,7 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n         // be a 1-block reorg away from the chain where transactions A and C\n         // were accepted to another chain where B, B', and C were all\n         // accepted.\n-        if (nDepth == 0 && pcoin->mapValue.count(\"replaces_txid\")) {\n+        if (nDepth == 0 && wtx.mapValue.count(\"replaces_txid\")) {\n             safeTx = false;\n         }\n \n@@ -2366,7 +2366,7 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n         // intending to replace A', but potentially resulting in a scenario\n         // where A, A', and D could all be accepted (instead of just B and\n         // D, or just A and A' like the user would want).\n-        if (nDepth == 0 && pcoin->mapValue.count(\"replaced_by_txid\")) {\n+        if (nDepth == 0 && wtx.mapValue.count(\"replaced_by_txid\")) {\n             safeTx = false;\n         }\n \n@@ -2377,8 +2377,8 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n         if (nDepth < nMinDepth || nDepth > nMaxDepth)\n             continue;\n \n-        for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++) {\n-            if (pcoin->tx->vout[i].nValue < nMinimumAmount || pcoin->tx->vout[i].nValue > nMaximumAmount)\n+        for (unsigned int i = 0; i < wtx.tx->vout.size(); i++) {\n+            if (wtx.tx->vout[i].nValue < nMinimumAmount || wtx.tx->vout[i].nValue > nMaximumAmount)\n                 continue;\n \n             if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs && !coinControl->IsSelected(COutPoint(entry.first, i)))\n@@ -2390,20 +2390,20 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n             if (IsSpent(locked_chain, wtxid, i))\n                 continue;\n \n-            isminetype mine = IsMine(pcoin->tx->vout[i]);\n+            isminetype mine = IsMine(wtx.tx->vout[i]);\n \n             if (mine == ISMINE_NO) {\n                 continue;\n             }\n \n-            bool solvable = IsSolvable(*this, pcoin->tx->vout[i].scriptPubKey);\n+            bool solvable = IsSolvable(*this, wtx.tx->vout[i].scriptPubKey);\n             bool spendable = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (((mine & ISMINE_WATCH_ONLY) != ISMINE_NO) && (coinControl && coinControl->fAllowWatchOnly && solvable));\n \n-            vCoins.push_back(COutput(pcoin, i, nDepth, spendable, solvable, safeTx, (coinControl && coinControl->fAllowWatchOnly)));\n+            vCoins.push_back(COutput(&wtx, i, nDepth, spendable, solvable, safeTx, (coinControl && coinControl->fAllowWatchOnly)));\n \n             // Checks the sum amount of all UTXO's.\n             if (nMinimumSumAmount != MAX_MONEY) {\n-                nTotal += pcoin->tx->vout[i].nValue;\n+                nTotal += wtx.tx->vout[i].nValue;\n \n                 if (nTotal >= nMinimumSumAmount) {\n                     return;\n@@ -2562,13 +2562,13 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(outpoint.hash);\n         if (it != mapWallet.end())\n         {\n-            const CWalletTx* pcoin = &it->second;\n+            const CWalletTx& wtx = it->second;\n             // Clearly invalid input, fail\n-            if (pcoin->tx->vout.size() <= outpoint.n)\n+            if (wtx.tx->vout.size() <= outpoint.n)\n                 return false;\n             // Just to calculate the marginal byte size\n-            nValueFromPresetInputs += pcoin->tx->vout[outpoint.n].nValue;\n-            setPresetCoins.insert(CInputCoin(pcoin->tx, outpoint.n));\n+            nValueFromPresetInputs += wtx.tx->vout[outpoint.n].nValue;\n+            setPresetCoins.insert(CInputCoin(wtx.tx, outpoint.n));\n         } else\n             return false; // TODO: Allow non-wallet inputs\n     }\n@@ -3606,27 +3606,27 @@ std::map<CTxDestination, CAmount> CWallet::GetAddressBalances(interfaces::Chain:\n         LOCK(cs_wallet);\n         for (const auto& walletEntry : mapWallet)\n         {\n-            const CWalletTx *pcoin = &walletEntry.second;\n+            const CWalletTx& wtx = walletEntry.second;\n \n-            if (!pcoin->IsTrusted(locked_chain))\n+            if (!wtx.IsTrusted(locked_chain))\n                 continue;\n \n-            if (pcoin->IsImmatureCoinBase(locked_chain))\n+            if (wtx.IsImmatureCoinBase(locked_chain))\n                 continue;\n \n-            int nDepth = pcoin->GetDepthInMainChain(locked_chain);\n-            if (nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? 0 : 1))\n+            int nDepth = wtx.GetDepthInMainChain(locked_chain);\n+            if (nDepth < (wtx.IsFromMe(ISMINE_ALL) ? 0 : 1))\n                 continue;\n \n-            for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++)\n+            for (unsigned int i = 0; i < wtx.tx->vout.size(); i++)\n             {\n                 CTxDestination addr;\n-                if (!IsMine(pcoin->tx->vout[i]))\n+                if (!IsMine(wtx.tx->vout[i]))\n                     continue;\n-                if(!ExtractDestination(pcoin->tx->vout[i].scriptPubKey, addr))\n+                if(!ExtractDestination(wtx.tx->vout[i].scriptPubKey, addr))\n                     continue;\n \n-                CAmount n = IsSpent(locked_chain, walletEntry.first, i) ? 0 : pcoin->tx->vout[i].nValue;\n+                CAmount n = IsSpent(locked_chain, walletEntry.first, i) ? 0 : wtx.tx->vout[i].nValue;\n \n                 if (!balances.count(addr))\n                     balances[addr] = 0;\n@@ -3646,13 +3646,13 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n \n     for (const auto& walletEntry : mapWallet)\n     {\n-        const CWalletTx *pcoin = &walletEntry.second;\n+        const CWalletTx& wtx = walletEntry.second;\n \n-        if (pcoin->tx->vin.size() > 0)\n+        if (wtx.tx->vin.size() > 0)\n         {\n             bool any_mine = false;\n             // group all input addresses with each other\n-            for (const CTxIn& txin : pcoin->tx->vin)\n+            for (const CTxIn& txin : wtx.tx->vin)\n             {\n                 CTxDestination address;\n                 if(!IsMine(txin)) /* If this input isn't mine, ignore it */\n@@ -3666,7 +3666,7 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n             // group change with input addresses\n             if (any_mine)\n             {\n-               for (const CTxOut& txout : pcoin->tx->vout)\n+               for (const CTxOut& txout : wtx.tx->vout)\n                    if (IsChange(txout))\n                    {\n                        CTxDestination txoutAddr;\n@@ -3683,7 +3683,7 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n         }\n \n         // group lone addrs by themselves\n-        for (const auto& txout : pcoin->tx->vout)\n+        for (const auto& txout : wtx.tx->vout)\n             if (IsMine(txout))\n             {\n                 CTxDestination address;"
      }
    ]
  },
  {
    "sha": "fac1a0fe54287d819cd0967ad6c75bbcb49b332b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWMxYTBmZTU0Mjg3ZDgxOWNkMDk2N2FkNmM3NWJiY2I0OWIzMzJi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-13T03:16:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-14T20:05:13Z"
      },
      "message": "wallet: Remove unused GetLegacyBalance",
      "tree": {
        "sha": "cf6e2239e54bf7e38ac264a917aa883b1f529fe5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf6e2239e54bf7e38ac264a917aa883b1f529fe5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fac1a0fe54287d819cd0967ad6c75bbcb49b332b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcirP5AAoJEM4rdWl+aaVI5aQMALh8alqPhHqohPUWBUYNcdfb\n2zPLHTegDorYaALc995d3q0M5oOnKlOY52oqU9FMTFZu9Z0AOzjQmzG1Itbti8cS\nuGJYe3jcg/TP/8my9EBzxPb4DVDjYryy5Wod/m8g7+iyJ/6euDU/ZuTTMOODYw5Q\nmCFJgJ3Ygq7lNpYqXdjM05nm4JD+jaPtDN9GTiZ3RU0VHV3NUVCnWPvU1eVw7Ir0\nLlcpA7psPqnhrwjEDUPoa/p/QE7x69xVhUKpzDb60kauATAN2jiFvc3Uhp95xNtR\nhlCQus4Qsf4qhYedx9O4te9vVSp0Bl0yQ9SLqqeScJ3EaVS2iGzs+OBHSKexy2PH\nK9iPqgiIN0msFPrasdfbC2rSLwLto5yeJ4FudGGepVDuYMaW6VDtUTfuStOwa94h\nFcEEdO8SN4ZQ3a2TSiuCWmLHLu16jFYlc4XWMIQnCzLqS/G9zEOFn6NU4ISMLaH7\npdMoxgwLWlctdosmOuTyzJ1ky9kF/wIK/38geGjtnw==\n=8Tpx\n-----END PGP SIGNATURE-----",
        "payload": "tree cf6e2239e54bf7e38ac264a917aa883b1f529fe5\nparent faa3a246e8809b4954a4a6d202fe8c7f7f776b6e\nauthor MarcoFalke <falke.marco@gmail.com> 1552447002 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1552593913 -0400\n\nwallet: Remove unused GetLegacyBalance\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac1a0fe54287d819cd0967ad6c75bbcb49b332b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fac1a0fe54287d819cd0967ad6c75bbcb49b332b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac1a0fe54287d819cd0967ad6c75bbcb49b332b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faa3a246e8809b4954a4a6d202fe8c7f7f776b6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa3a246e8809b4954a4a6d202fe8c7f7f776b6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faa3a246e8809b4954a4a6d202fe8c7f7f776b6e"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 0,
      "deletions": 41
    },
    "files": [
      {
        "sha": "c0a650f8786e4c73be4c18be9dea3b4fed4be12d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 40,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac1a0fe54287d819cd0967ad6c75bbcb49b332b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac1a0fe54287d819cd0967ad6c75bbcb49b332b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fac1a0fe54287d819cd0967ad6c75bbcb49b332b",
        "patch": "@@ -2252,46 +2252,6 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n     return nTotal;\n }\n \n-// Calculate total balance in a different way from GetBalance. The biggest\n-// difference is that GetBalance sums up all unspent TxOuts paying to the\n-// wallet, while this sums up both spent and unspent TxOuts paying to the\n-// wallet, and then subtracts the values of TxIns spending from the wallet. This\n-// also has fewer restrictions on which unconfirmed transactions are considered\n-// trusted.\n-CAmount CWallet::GetLegacyBalance(const isminefilter& filter, int minDepth) const\n-{\n-    auto locked_chain = chain().lock();\n-    LOCK(cs_wallet);\n-\n-    CAmount balance = 0;\n-    for (const auto& entry : mapWallet) {\n-        const CWalletTx& wtx = entry.second;\n-        const int depth = wtx.GetDepthInMainChain(*locked_chain);\n-        if (depth < 0 || !locked_chain->checkFinalTx(*wtx.tx) || wtx.IsImmatureCoinBase(*locked_chain)) {\n-            continue;\n-        }\n-\n-        // Loop through tx outputs and add incoming payments. For outgoing txs,\n-        // treat change outputs specially, as part of the amount debited.\n-        CAmount debit = wtx.GetDebit(filter);\n-        const bool outgoing = debit > 0;\n-        for (const CTxOut& out : wtx.tx->vout) {\n-            if (outgoing && IsChange(out)) {\n-                debit -= out.nValue;\n-            } else if (IsMine(out) & filter && depth >= minDepth) {\n-                balance += out.nValue;\n-            }\n-        }\n-\n-        // For outgoing txs, subtract amount debited.\n-        if (outgoing) {\n-            balance -= debit;\n-        }\n-    }\n-\n-    return balance;\n-}\n-\n CAmount CWallet::GetAvailableBalance(const CCoinControl* coinControl) const\n {\n     auto locked_chain = chain().lock();"
      },
      {
        "sha": "4eedf37da7aa92e8bc4c13cb4ac4be8517ed56d8",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac1a0fe54287d819cd0967ad6c75bbcb49b332b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac1a0fe54287d819cd0967ad6c75bbcb49b332b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fac1a0fe54287d819cd0967ad6c75bbcb49b332b",
        "patch": "@@ -950,7 +950,6 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetImmatureBalance() const;\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n-    CAmount GetLegacyBalance(const isminefilter& filter, int minDepth) const;\n     CAmount GetAvailableBalance(const CCoinControl* coinControl = nullptr) const;\n \n     OutputType TransactionChangeType(OutputType change_type, const std::vector<CRecipient>& vecSend);"
      }
    ]
  },
  {
    "sha": "fabfb79673d6bf9bff5258cd709d8294e77c1764",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWJmYjc5NjczZDZiZjliZmY1MjU4Y2Q3MDlkODI5NGU3N2MxNzY0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-20T16:59:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-20T16:46:53Z"
      },
      "message": "doc: Add release notes for 15596",
      "tree": {
        "sha": "5e13b5ef1aa6f96a7c2a3f2a3882f53b8969cb2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e13b5ef1aa6f96a7c2a3f2a3882f53b8969cb2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fabfb79673d6bf9bff5258cd709d8294e77c1764",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJckm59AAoJEM4rdWl+aaVInbkL/0Apek9U8W2vnsZtt/kqfCJ+\nVifDbFPSpXJZ4b/sT5IHZZWLt88s4R5+lmKFbUmZH6j7XVq/Idzsu9isi/W2xuqX\n1eGzmeLe9QWgEtw8JhSKBhG9C9o3i/3mOJh5KxvHdPoQBrIG0mx9efKOSEnU5bIB\nzfcTJWVlsXrRRZjWDLua5I5qrnmIEX0KT1458issQusB9FVC/CVu8LGVr28t0ian\nJulS1x1l0OvIhOPYafPQT/iaQAWAikQa44D1hLiSkZ9kd4EBe38zD2Tp9iOVLTkm\nnX2kL0dwf2ui/NqGrFx57aDKFIPnYreDp8GyIjJT74+M8Lb+2uTbv88P9e8issb8\n0GWH81xABjfSd6g3rsd6eEgejpuRrTefHZAr11QVmsjiyf2S+AwLawDQJUBNLEyy\nsaAGdI601OpZJ0NNllTBw6YoKNEfW9+DywLs6AV3E0ye/PaIoB/BK1U0dcuDWXWI\nmlfek82ePvf89yA/G5sMz3rfdVvMe5LlJsOSjue7fQ==\n=d0AB\n-----END PGP SIGNATURE-----",
        "payload": "tree 5e13b5ef1aa6f96a7c2a3f2a3882f53b8969cb2a\nparent fac1a0fe54287d819cd0967ad6c75bbcb49b332b\nauthor MarcoFalke <falke.marco@gmail.com> 1553101158 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1553100413 -0400\n\ndoc: Add release notes for 15596\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabfb79673d6bf9bff5258cd709d8294e77c1764",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fabfb79673d6bf9bff5258cd709d8294e77c1764",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabfb79673d6bf9bff5258cd709d8294e77c1764/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fac1a0fe54287d819cd0967ad6c75bbcb49b332b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac1a0fe54287d819cd0967ad6c75bbcb49b332b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fac1a0fe54287d819cd0967ad6c75bbcb49b332b"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a876b70ba76e5b338ad19062aca90676df5ae8b1",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabfb79673d6bf9bff5258cd709d8294e77c1764/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabfb79673d6bf9bff5258cd709d8294e77c1764/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=fabfb79673d6bf9bff5258cd709d8294e77c1764",
        "patch": "@@ -66,9 +66,21 @@ platform.\n Notable changes\n ===============\n \n-Example item\n+Updated RPCs\n ------------\n \n+Note: some low-level RPC changes mainly useful for testing are described in the\n+Low-level Changes section below.\n+\n+* The `sendmany` RPC had an argument `minconf` that was not well specified and\n+  would lead to RPC errors even when the wallet's coin selection would succeed.\n+  The `sendtoaddress` RPC never had this check, so to normalize the behavior,\n+  `minconf` is now ignored in `sendmany`. If the coin selection does not\n+  succeed due to missing coins, it will still throw an RPC error. Be reminded\n+  that coin selection is influenced by the `-spendzeroconfchange`,\n+  `-limitancestorcount`, `-limitdescendantcount` and `-walletrejectlongchains`\n+  command line arguments.\n+\n \n Low-level changes\n ================="
      }
    ]
  }
]