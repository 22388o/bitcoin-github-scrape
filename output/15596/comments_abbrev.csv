promag,2019-03-14T14:23:25Z,Should `minconf` be `CoinEligibilityFilter::conf_theirs`?,https://github.com/bitcoin/bitcoin/pull/15596#issuecomment-472881380,472881380,
MarcoFalke,2019-03-14T14:37:38Z,"That is not clear from the description in the rpc help. And I'd rather not change the behaviour of coinselection for this rpc, since that will change how it behaved previously. (See also https://github.com/bitcoin/bitcoin/pull/15595#issuecomment-472630503, where I tried to pass it down to coinselection)",https://github.com/bitcoin/bitcoin/pull/15596#issuecomment-472890408,472890408,
practicalswift,2019-03-14T19:52:01Z,"`GetLegacyBalance` is unused and should be removed, no?\n. \nTBH this kind of stuff should really be identified automatically and fixed before human review takes place -- we really need to use better tooling in Travis :-)",https://github.com/bitcoin/bitcoin/pull/15596#issuecomment-473033675,473033675,
DrahtBot,2019-03-14T22:14:57Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15729](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15729.html) (rpc: Ignore minconf parameter in getbalance",https://github.com/bitcoin/bitcoin/pull/15596#issuecomment-473086249,473086249,
MarcoFalke,2019-03-18T15:30:40Z,Removed all now unused methods,https://github.com/bitcoin/bitcoin/pull/15596#issuecomment-473961319,473961319,
MarcoFalke,2019-03-18T19:52:15Z,@jnewbery ,https://github.com/bitcoin/bitcoin/pull/15596#issuecomment-474074683,474074683,
MarcoFalke,2019-03-20T16:49:13Z,Added a writeup as requested by @ryanofsky ,https://github.com/bitcoin/bitcoin/pull/15596#issuecomment-474925938,474925938,
jnewbery,2019-03-21T14:47:05Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15596#issuecomment-475259476,475259476,
promag,2019-03-22T00:42:55Z,"ACK behavior change, and no change in tests ðŸ˜• ",https://github.com/bitcoin/bitcoin/pull/15596#issuecomment-475454395,475454395,
jnewbery,2019-04-01T15:01:58Z,"utACK fabfb79673d6bf9bff5258cd709d8294e77c1764\n\nThe fact that this parameter was not covered by any test cases is indication that it was underspecified.\n\nNice incidental correction of coin -> wtx.",https://github.com/bitcoin/bitcoin/pull/15596#issuecomment-478615989,478615989,
MarcoFalke,2019-04-03T16:07:09Z,I am going to merge this tomorrow unless there are further concerns,https://github.com/bitcoin/bitcoin/pull/15596#issuecomment-479554971,479554971,
gmaxwell,2019-11-24T18:07:21Z,"Since some people reading the release notes are probably going to end up here confused (I did),  I thought it would be useful to write my understanding here.\n\nThe min_conf argument to sendmany was functionally part of the now gone ""accounts"" system.  ... that's also why it was only an argument to sendmany and not sendtoaddress, since  sendmany had an account parameter (and as luke-noted, sendt",https://github.com/bitcoin/bitcoin/pull/15596#issuecomment-557912847,557912847,
MarcoFalke,2019-11-24T18:44:10Z,Thanks for providing some more background on this. I read the release notes myself this morning and was confused by my own wording. Unfortunately it is now too late to change the release notes :(,https://github.com/bitcoin/bitcoin/pull/15596#issuecomment-557916057,557916057,
jnewbery,2019-11-24T22:08:58Z,What does soft-deprecated mean?,https://github.com/bitcoin/bitcoin/pull/15596#issuecomment-557933088,557933088,
MarcoFalke,2019-11-24T22:40:51Z,"> What does soft-deprecated mean?\n\nI think it means that there is an similar call that should be preferred, but the original one will never be removed.",https://github.com/bitcoin/bitcoin/pull/15596#issuecomment-557935650,557935650,
gmaxwell,2019-11-24T22:51:10Z,"And, in particular, new functionality would be added to the new call... and the old call just hangs around for compatibility reasons, without changing except for bug fixes and trivial improvements.",https://github.com/bitcoin/bitcoin/pull/15596#issuecomment-557936518,557936518,
ryanofsky,2019-03-20T15:56:58Z,"In commit ""rpc: Document that minconf is an ignored dummy value"" (fae5f874d51c770322fb18cc4050b3f14697de66)\n\nIs this commit description actually accurate? Is this just documenting existing behavior or changing the behavior?\n\nIf this commit is changing the behavior, I think there should be release notes saying min_depth is now ignored. Also, maybe this should raise an error if min_depth is ",https://github.com/bitcoin/bitcoin/pull/15596#discussion_r267415074,267415074,src/wallet/rpcwallet.cpp
MarcoFalke,2019-03-20T16:52:32Z,"Strictly speaking it is changing behavior, since it might throw a different rpc error (or none at all and succeed) now. However, the previous behavior was not well specified by the documentation string of `minconf`. And my attempt at making sense of it failed: \n*  rpc: Actually use sendmany::minconf #15595 ",https://github.com/bitcoin/bitcoin/pull/15596#discussion_r267442136,267442136,src/wallet/rpcwallet.cpp
promag,2019-04-02T14:27:52Z,"By not throwing an error the client may think `min_depth` is still used and never update his code.\n\n> Also, maybe this should raise an error if min_depth is passed and is set to anything other than 1.\n\nI think @ryanofsky suggestion should be considered.",https://github.com/bitcoin/bitcoin/pull/15596#discussion_r271333873,271333873,src/wallet/rpcwallet.cpp
MarcoFalke,2019-04-02T14:42:30Z,"That is just going to open a can of worms. I think, either it should throw for any value (including 1, the default), since that was ignored before as well, or never throw at all.\n\nIf it throws for all values, you might as well just remove the parameter and break the interface. Though, then that'd have to go through a `-deprecatedrpc` cycle. I don't think this effort is justified. Please explai",https://github.com/bitcoin/bitcoin/pull/15596#discussion_r271341333,271341333,src/wallet/rpcwallet.cpp
promag,2019-04-02T14:48:34Z,"I think ignoring doesn't raise awareness and clients remain deluded, as we were.",https://github.com/bitcoin/bitcoin/pull/15596#discussion_r271344594,271344594,src/wallet/rpcwallet.cpp
promag,2019-04-02T14:52:02Z,"I also understand the effort concern, but we do have a clear way to deprecate things and break backward compatibility, so why deal with this as a special case, and leave the parameter sitting there?",https://github.com/bitcoin/bitcoin/pull/15596#discussion_r271346409,271346409,src/wallet/rpcwallet.cpp
jnewbery,2019-04-02T15:37:21Z,"I can see both sides. In this case though, I think we should just silently ignore. I don't see any downside to clients continuing to specify this and having it ignored. The help text has been updated to ""ignore dummy value"", so I don't think there's any chance of users being confused by this.\n\nEnforcing that this be set to 1 would give the impression that the passed value actually does somethi",https://github.com/bitcoin/bitcoin/pull/15596#discussion_r271369338,271369338,src/wallet/rpcwallet.cpp
promag,2019-04-02T15:53:13Z,The help text is worthless for existing software.,https://github.com/bitcoin/bitcoin/pull/15596#discussion_r271376994,271376994,src/wallet/rpcwallet.cpp
MarcoFalke,2019-04-02T16:15:09Z,"This will be mentioned in the release notes and RPC help, if people don't read those when upgrading their bitcoind backend, I don't think there is much we can do. Making it an error to pass something other than `1` is not going them to read them either, but just modify their code to pass `1`, what is the point then?",https://github.com/bitcoin/bitcoin/pull/15596#discussion_r271386504,271386504,src/wallet/rpcwallet.cpp
jnewbery,2019-04-02T16:22:46Z,"> The help text is worthless for existing software.\n\nFor existing software, the only thing throwing an error would do is make the user change the client so it sets this to 1 or omit it. The end result will be the same as if the RPC doesn't throw an error, except there would be more disruption for users during transition.\n\nIf this PR were actually deprecating useful functionality, then I'd ",https://github.com/bitcoin/bitcoin/pull/15596#discussion_r271389702,271389702,src/wallet/rpcwallet.cpp
luke-jr,2019-04-08T14:29:10Z,"The reasoning here is flawed, BTW. `sendtoaddress` was kind of soft-deprecated by `sendmany`.",https://github.com/bitcoin/bitcoin/pull/15596#discussion_r273076463,273076463,doc/release-notes.md
MarcoFalke,2019-04-08T14:35:44Z,"It is just one of many reasons why the arg should be ignored. Feel free to remove that reasoning, the others should still hold.",https://github.com/bitcoin/bitcoin/pull/15596#discussion_r273079902,273079902,doc/release-notes.md
