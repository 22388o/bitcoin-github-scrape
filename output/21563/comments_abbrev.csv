DrahtBot,2021-04-01 04:24:01,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21527 (net_processing: lock clean up by ajtowns)\n\nIf you consider this pull request important, please also help to revi",https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-811627872,811627872,
jnewbery,2021-04-02 11:04:53,"EDIT: This PR has substantially changed. The comment below refers to the old branch.\n\nThis does indeed seem useless. The mutex was added by @TheBlueMatt in commit d7c58ad514ee00db00589216166808258bc16b60:\n\n>    Split CNode::cs_vSend: message processing and message sending\n>    \n>    cs_vSend is used for two purposes - to lock the datastructures used\n>    to queue messages to place on",https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-812483710,812483710,
hebasto,2021-04-07 12:11:02,Rebased 8ca2ee6377f534b15b47440b819b1564c9c06b88 -> b58097facb4fec80df8fa140dfefd9c461c93832 ([pr21563.02](https://github.com/hebasto/bitcoin/commits/pr21563.02) -> [pr21563.03](https://github.com/hebasto/bitcoin/commits/pr21563.03)) due to the conflict with #21571.,https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-814863105,814863105,
jnewbery,2021-04-09 09:04:55,"This seems safe to me. The only thing that `CNode.cs_sendProcessing` enforces is preventing `SendMessages()` from being called for the same `CNode` concurrently. However, `SendMessages()` can only be called by `threadMessageHandler`, so there's no possibility of it being called concurrently.\n\nI wonder if instead of simply removing this, we should replace it with something that more closely doc",https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-816538311,816538311,
hebasto,2021-04-09 10:00:06,"@jnewbery \n> I wonder if instead of simply removing this, we should replace it with something that more closely documents our expectations. I think that calling any of the `NetEventsInterface` methods (`InitializeNode`, `FinalizeNode`, `SendMessages`, `ProcessMessages`) in `PeerManagerImpl` concurrently could lead to problems, so perhaps a global mutex in `PeerManagerImpl` should be added that's",https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-816571392,816571392,
jnewbery,2021-04-09 17:53:49,"> Maybe postpone it until #19398 is fulfilled?\n\nI think they can be done independently. But I think I'd like to see the new internal PeerManagerImpl lock being introduced in the same PR that removes cs_sendProcessing.",https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-816853404,816853404,
hebasto,2021-04-12 12:42:56,"Updated b58097facb4fec80df8fa140dfefd9c461c93832 -> 4de76058f8c3150de07d7a02faaceb261d732499 ([pr21563.03](https://github.com/hebasto/bitcoin/commits/pr21563.03) -> [pr21563.04](https://github.com/hebasto/bitcoin/commits/pr21563.04)):\n\n- rebased on top of the recent changes in CI\n- addressed @jnewbery's [comment](https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-816538311)",https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-817778741,817778741,
MarcoFalke,2021-04-12 13:54:42,"```\n node0 stderr libc++abi.dylib: terminating with uncaught exception of type std::__1::system_error: mutex lock failed: Invalid argument \n```\n\nhttps://cirrus-ci.com/task/5038649289998336?logs=ci#L3615",https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-817832368,817832368,
hebasto,2021-04-12 14:11:17,"> ```\n>  node0 stderr libc++abi.dylib: terminating with uncaught exception of type std::__1::system_error: mutex lock failed: Invalid argument \n> ```\n> \n> https://cirrus-ci.com/task/5038649289998336?logs=ci#L3615\n\nLooks like a mutex is prematurely destroyed. Weird.",https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-817845316,817845316,
hebasto,2021-04-12 19:54:43,"Updated 4de76058f8c3150de07d7a02faaceb261d732499 -> b1e5ca217c3557ed89d985c7e8ea28c2b9ed303b ([pr21563.04](https://github.com/hebasto/bitcoin/commits/pr21563.04) -> [pr21563.05](https://github.com/hebasto/bitcoin/commits/pr21563.05), [diff](https://github.com/hebasto/bitcoin/compare/pr21563.04..pr21563.05)):\n\n- fixed bug\n",https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-818107599,818107599,
hebasto,2021-04-13 12:50:15,"Updated b1e5ca217c3557ed89d985c7e8ea28c2b9ed303b -> a3663329ad1899cc012437167a316040d77e00bc ([pr21563.05](https://github.com/hebasto/bitcoin/commits/pr21563.05) -> [pr21563.06](https://github.com/hebasto/bitcoin/commits/pr21563.06)):\n\n- rebased on top of the recent CI changes\n- addressed @jnewbery's comments ",https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-818709445,818709445,
jnewbery,2021-04-13 12:55:52,"This seems good to me.\n\n@MarcoFalke - you introduced the `LOCK2(::cs_main, ::g_cs_orphans);` in #18458. Do you see any problem with locking `cs_vNodes`, grabbing a copy of `vNodes`, releasing the lock and then deleting the nodes in `CConnman::Stop()`? This is similar to what happens in the socket handler and message handler threads?",https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-818713120,818713120,
ajtowns,2021-04-20 07:37:32,"Removing a mutex that guards nothing then adding a mutex that also doesn't actually guard anything seems a bit backwards...\n\n#21527 has it guarding the extratxns data structures (as part of getting rid of g_cs_orphans). It would be good for it to be able to guard the address data structures in struct Peer, but without it being a global, that will probably be awkward at best, since Peer doesn't",https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-823051060,823051060,
MarcoFalke,2021-04-20 07:49:26,The fist commit seems separate from the other changes?,https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-823059284,823059284,
hebasto,2021-04-20 14:02:04,"Updated a3663329ad1899cc012437167a316040d77e00bc -> 9766b7f43d4fedd1740f4444689b6ba2ff33d12d ([pr21563.06](https://github.com/hebasto/bitcoin/commits/pr21563.06) -> [pr21563.07](https://github.com/hebasto/bitcoin/commits/pr21563.07)):\n\n- dropped all commits but the first one in favor of #21527\n\n> The cs_vNodes changes don't seem to be mentioned in the title or PR description?\n\nThe PR d",https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-823299566,823299566,
jnewbery,2021-04-20 14:18:14,"I think this change is fine. It steals the `CNode*`s from `vNodes`, releases the mutex and then cleans up the nodes. That's very similar to the pattern in `SocketHandler()`:\n\nhttps://github.com/bitcoin/bitcoin/blob/018045347110d76cfc1f89a79fb49a867e3b8449/src/net.cpp#L1481-L1487\n\nand in `ThreadMessageHandler()`:\n\nhttps://github.com/bitcoin/bitcoin/blob/018045347110d76cfc1f89a79fb49a867",https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-823312404,823312404,
jnewbery,2021-04-22 13:17:34,"> This code actually belongs to the destructor ~CConnman() where we can access vNodes without locking and without upsetting the TSA. I think it can be moved to the destructor with some further changes (outside of this PR).\n\nMaybe, but that's a much more invasive change. `CConnman::Stop()` calls `PeerManager::DeleteNode()` for all the nodes. The destructor for `CConnman` is called _after_ the d",https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-824833418,824833418,
jnewbery,2021-04-22 13:23:22,"utACK 9766b7f43d4fedd1740f4444689b6ba2ff33d12d\n\nAgree with @MarcoFalke that the move & clear is more elegantly expressed as std::vector::swap().\n\n<details>\n<summary>Diff</summary>\n\n```diff\ndiff --git a/src/net.cpp b/src/net.cpp\nindex b7c1b8c6c4..94029491ab 100644\n--- a/src/net.cpp\n+++ b/src/net.cpp\n@@ -2637,11 +2637,7 @@ void CConnman::StopNodes()\n \n     // Delete peer ",https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-824837931,824837931,
hebasto,2021-04-22 14:36:46,"Updated 9766b7f43d4fedd1740f4444689b6ba2ff33d12d -> 8c8237a4a10feb2ac9ce46f67b5d14bf879b670f ([pr21563.07](https://github.com/hebasto/bitcoin/commits/pr21563.07) -> [pr21563.08](https://github.com/hebasto/bitcoin/commits/pr21563.08), [diff](https://github.com/hebasto/bitcoin/compare/pr21563.07..pr21563.08)).\n\nAddressed @MarcoFalke's comments:\n- https://github.com/bitcoin/bitcoin/pull/21563#d",https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-824898734,824898734,
jnewbery,2021-04-22 16:58:44,utACK 8c8237a4a10feb2ac9ce46f67b5d14bf879b670f,https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-825023144,825023144,
vasild,2021-04-23 10:01:22,"(consider out of scope of this PR)\n\nCould we assert that all threads are stopped when `StopNodes()` starts executing? Something like\n```cpp\nassert(threadMessageHandler.get_id() == std::thread::id());\nassert(threadSocketHandler.get_id() == std::thread::id());\n...\n```\n\nOr even call `StopThreads()` at the start of `StopNodes()`?",https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-825548438,825548438,
MarcoFalke,2021-04-25 08:01:26,"> Or even call StopThreads() at the start of StopNodes()?\n\nThis used to be the case before commit fa369651c5523f393e0bfcfa328b8e27006711aa. Maybe that commit should be reverted now?",https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-826278304,826278304,
MarcoFalke,2021-04-25 08:12:26,"There is a related pr, which is waiting for review donations: #21750 ",https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-826280142,826280142,
jnewbery,2021-04-13 10:07:29,This can now be replaced with `if (node.connman) node.connman->Stop()`.,https://github.com/bitcoin/bitcoin/pull/21563#discussion_r612311671,612311671,src/init.cpp
jnewbery,2021-04-13 10:09:15,"I think this lock can be held for much less time:\n\n```c++\n    // Delete peer connections\n    std::vector<CNode*> nodes;\n    {\n        LOCK(cs_vNodes);\n        nodes = std::move(vNodes);\n        vNodes.clear();\n    }\n\n    for (CNode* pnode : nodes) {\n        pnode->CloseSocketDisconnect();\n        DeleteNode(pnode);\n    }\n\n    for (CNode* pnode : vNodesDisconnected) ",https://github.com/bitcoin/bitcoin/pull/21563#discussion_r612312840,612312840,src/net.cpp
jnewbery,2021-04-13 10:11:04,What do you think about excluding holding `cs_main` when calling into a NetEventsInterface method?,https://github.com/bitcoin/bitcoin/pull/21563#discussion_r612313941,612313941,src/net_processing.cpp
jnewbery,2021-04-13 10:12:49,"You can also remove the `LOCK2(::cs_main, g_cs_orphans);` from `fuzz/process_message.cpp` and `fuzz/process_messages.cpp`.",https://github.com/bitcoin/bitcoin/pull/21563#discussion_r612314992,612314992,src/init.cpp
hebasto,2021-04-13 12:50:47,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-818709445).,https://github.com/bitcoin/bitcoin/pull/21563#discussion_r612415999,612415999,src/init.cpp
hebasto,2021-04-13 12:51:05,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-818709445).,https://github.com/bitcoin/bitcoin/pull/21563#discussion_r612416239,612416239,src/net.cpp
hebasto,2021-04-13 12:51:24,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-818709445).,https://github.com/bitcoin/bitcoin/pull/21563#discussion_r612416480,612416480,src/init.cpp
hebasto,2021-04-13 12:53:42,"It is not trivial due to the https://github.com/bitcoin/bitcoin/blob/c1f480fb234856a60e9b1f4bf97114bfd9b3d0b0/src/net_processing.cpp#L662\n\nGoing to keep the scope of this PR tight.",https://github.com/bitcoin/bitcoin/pull/21563#discussion_r612418192,612418192,src/net_processing.cpp
ajtowns,2021-04-20 22:45:08,"Could write this as:\n\n```c++\ncs_vNodes.lock();\nstd::vector<CNode*> nodes(std::move(vNodes)); // move constructor clears vNodes\ncs_vNodes.unlock();\n``` \n\nIf I'm reading the spec right, the move constructor is guaranteed to be constant time, while `operator=` is linear time; and the move constructor also guarantees the original ends up cleared. Since C++17 the move constructor is als",https://github.com/bitcoin/bitcoin/pull/21563#discussion_r617079727,617079727,src/net.cpp
MarcoFalke,2021-04-21 05:55:04,Does performance matter here at all? Shutdown only happens once and flushing to disk will take magnitudes longer anyway.,https://github.com/bitcoin/bitcoin/pull/21563#discussion_r617220064,617220064,src/net.cpp
ajtowns,2021-04-21 06:12:11,"No I don't think so -- at worst it's just moving pointers around, and only a hundred or so of them in normal configurations. (I wasn't sure if std::move + clear was safe / necessary, so looked into the behaviours)",https://github.com/bitcoin/bitcoin/pull/21563#discussion_r617227463,617227463,src/net.cpp
MarcoFalke,2021-04-21 06:40:07,Could achieve the same in one less line of code with https://en.cppreference.com/w/cpp/container/vector/swap ?,https://github.com/bitcoin/bitcoin/pull/21563#discussion_r617241012,617241012,src/net.cpp
MarcoFalke,2021-04-21 07:12:56,"Or even remove all of this logic and re-use the existing ""disconnect all nodes"" logic?\n\n```diff\ndiff --git a/src/net.cpp b/src/net.cpp\nindex b7c1b8c6c4..9a4a989e15 100644\n--- a/src/net.cpp\n+++ b/src/net.cpp\n@@ -2636,31 +2636,17 @@ void CConnman::StopNodes()\n     }\n \n     // Delete peer connections\n-    std::vector<CNode*> nodes;\n     {\n         LOCK(cs_vNodes);\n-       ",https://github.com/bitcoin/bitcoin/pull/21563#discussion_r617258833,617258833,src/net.cpp
MarcoFalke,2021-04-21 07:13:47,minor nit: would be nice to do style-fixups in a separate commit,https://github.com/bitcoin/bitcoin/pull/21563#discussion_r617259352,617259352,src/net.cpp
MarcoFalke,2021-04-21 07:39:05,(I tried running the tests with my diff and for some reason the node crashed),https://github.com/bitcoin/bitcoin/pull/21563#discussion_r617275698,617275698,src/net.cpp
jnewbery,2021-04-21 09:33:41,"> the move constructor is guaranteed to be constant time, while operator= is linear time\n\nThis is the move assignment operator (number 2 in https://en.cppreference.com/w/cpp/container/vector/operator%3D). Its complexity is linear in the size of `this` - the vector being moved to. Presumably that's because the objects in `this` need to be destructed and the memory already owned by `this` needs ",https://github.com/bitcoin/bitcoin/pull/21563#discussion_r617359646,617359646,src/net.cpp
hebasto,2021-04-22 14:41:14,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-824898734).,https://github.com/bitcoin/bitcoin/pull/21563#discussion_r618465560,618465560,src/net.cpp
hebasto,2021-04-22 14:41:50,"> Could achieve the same in one less line of code with https://en.cppreference.com/w/cpp/container/vector/swap ?\n\nThanks! [Updated](https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-824898734).",https://github.com/bitcoin/bitcoin/pull/21563#discussion_r618466046,618466046,src/net.cpp
ajtowns,2021-04-23 07:26:09,"Might be worth adding a comment as to why `vNodesDisconnected`, `vhListenSocket`, `semOutbound` and `semAddnode` are all safe to reset here -- I think it's because:\n\n * `vNodesDisconnected` and `vhListenSocket` are only otherwise accessed by `ThreadSocketHandler`\n * `semOutbound` and `semAddnode` are only otherwise accessed via `ThreadOpenConnections`, `Start()`, `Interrupt()` (and `Interrup",https://github.com/bitcoin/bitcoin/pull/21563#discussion_r618999184,618999184,src/net.cpp
ajtowns,2021-04-23 07:41:21,"I think there probably should be a comment as to why explicitly calling `StopNodes` is still necessary\n\n(I believe it's because if you don't do that, then `m_node` will get destructed, deleting its `peerman`, then attempting to delete it's `connman` which will see some entries in `vNodes` and try to call `peerman->FinalizeNode()` on them, but `peerman` is deleted at that point. With the lock o",https://github.com/bitcoin/bitcoin/pull/21563#discussion_r619008311,619008311,src/test/fuzz/process_message.cpp
MarcoFalke,2021-04-25 07:59:08,"Just to answer (myself) why my diff crashed: When the threads are interrupted, the node refcounts do *not* get decremented",https://github.com/bitcoin/bitcoin/pull/21563#discussion_r619770711,619770711,src/net.cpp
MarcoFalke,2021-04-25 08:02:01,I think changing the destruction order can be done in a separate pull?,https://github.com/bitcoin/bitcoin/pull/21563#discussion_r619771099,619771099,src/test/fuzz/process_message.cpp
MarcoFalke,2021-04-25 08:03:19,RPC must be (and is assumed to be) shutdown before `Stop` is called. The other threads are also assumed to be shut down. Maybe reverting my commit (https://github.com/bitcoin/bitcoin/pull/21563#issuecomment-826278304) could help to self-document that better?,https://github.com/bitcoin/bitcoin/pull/21563#discussion_r619771278,619771278,src/net.cpp
vasild,2021-04-26 14:15:50,I am working on a change that will address this problem of forgetting `Release()` due to an early `return`.,https://github.com/bitcoin/bitcoin/pull/21563#discussion_r620339006,620339006,src/net.cpp
vasild,2021-05-07 16:13:13,"> When the threads are interrupted, the node refcounts do _not_ get decremented\n\nThis is changed/fixed in https://github.com/bitcoin/bitcoin/pull/21878 in commit\n\n96bcc72b5 `net: dedup and RAII-fy the creation of a copy of CConnman::vNodes`",https://github.com/bitcoin/bitcoin/pull/21563#discussion_r628344911,628344911,src/net.cpp
