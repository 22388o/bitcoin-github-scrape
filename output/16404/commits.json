[
  {
    "sha": "6bc1ff915dd495f05985d3402a34dbfc3b6a08b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmMxZmY5MTVkZDQ5NWYwNTk4NWQzNDAyYTM0ZGJmYzNiNmEwOGI0",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-07-17T13:38:15Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-08-19T00:05:58Z"
      },
      "message": "doc: Add note regarding ZMQ block notification",
      "tree": {
        "sha": "9ad811620312b4ee5e018cfc69484f1d8d29de1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ad811620312b4ee5e018cfc69484f1d8d29de1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bc1ff915dd495f05985d3402a34dbfc3b6a08b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bc1ff915dd495f05985d3402a34dbfc3b6a08b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bc1ff915dd495f05985d3402a34dbfc3b6a08b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bc1ff915dd495f05985d3402a34dbfc3b6a08b4/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8a6d52724651e1a6d7c35165d5c6fe575a11b83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8a6d52724651e1a6d7c35165d5c6fe575a11b83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8a6d52724651e1a6d7c35165d5c6fe575a11b83"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a309abd0cc53ad7dbfb4626e9a15405658d417a4",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bc1ff915dd495f05985d3402a34dbfc3b6a08b4/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bc1ff915dd495f05985d3402a34dbfc3b6a08b4/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=6bc1ff915dd495f05985d3402a34dbfc3b6a08b4",
        "patch": "@@ -111,7 +111,9 @@ using other means such as firewalling.\n \n Note that when the block chain tip changes, a reorganisation may occur\n and just the tip will be notified. It is up to the subscriber to\n-retrieve the chain from the last known block to the new tip.\n+retrieve the chain from the last known block to the new tip. Also note\n+that no notification occurs if the tip was in the active chain - this\n+is the case after calling invalidateblock RPC.\n \n There are several possibilities that ZMQ notification can get lost\n during transmission depending on the communication type you are"
      }
    ]
  },
  {
    "sha": "aa2622a726bc0f02152d79c888a332694678a989",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTI2MjJhNzI2YmMwZjAyMTUyZDc5Yzg4OGEzMzI2OTQ2NzhhOTg5",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-07-17T15:13:37Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-08-19T00:25:31Z"
      },
      "message": "qa: Refactor ZMQ test",
      "tree": {
        "sha": "b6ddef3dabb3ffb775021d31798c7a3113baf4da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6ddef3dabb3ffb775021d31798c7a3113baf4da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa2622a726bc0f02152d79c888a332694678a989",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa2622a726bc0f02152d79c888a332694678a989",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa2622a726bc0f02152d79c888a332694678a989",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa2622a726bc0f02152d79c888a332694678a989/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6bc1ff915dd495f05985d3402a34dbfc3b6a08b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bc1ff915dd495f05985d3402a34dbfc3b6a08b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bc1ff915dd495f05985d3402a34dbfc3b6a08b4"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 31,
      "deletions": 38
    },
    "files": [
      {
        "sha": "d1304e776506b320bf6432a1fd8cbb55a6d02461",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 31,
        "deletions": 38,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa2622a726bc0f02152d79c888a332694678a989/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa2622a726bc0f02152d79c888a332694678a989/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=aa2622a726bc0f02152d79c888a332694678a989",
        "patch": "@@ -8,11 +8,9 @@\n from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.messages import CTransaction, hash256\n-from test_framework.util import assert_equal\n+from test_framework.util import assert_equal, connect_nodes\n from io import BytesIO\n \n-ADDRESS = \"tcp://127.0.0.1:28332\"\n-\n def hash256_reversed(byte_str):\n     return hash256(byte_str)[::-1]\n \n@@ -43,66 +41,61 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_py3_zmq()\n         self.skip_if_no_bitcoind_zmq()\n \n-    def setup_nodes(self):\n+    def run_test(self):\n         import zmq\n+        self.ctx = zmq.Context()\n+        try:\n+            self.test_basic()\n+        finally:\n+            # Destroy the ZMQ context.\n+            self.log.debug(\"Destroying ZMQ context\")\n+            self.ctx.destroy(linger=None)\n \n-        # Initialize ZMQ context and socket.\n+    def test_basic(self):\n         # All messages are received in the same socket which means\n         # that this test fails if the publishing order changes.\n         # Note that the publishing order is not defined in the documentation and\n         # is subject to change.\n-        self.zmq_context = zmq.Context()\n-        socket = self.zmq_context.socket(zmq.SUB)\n+        import zmq\n+        address = 'tcp://127.0.0.1:28332'\n+        socket = self.ctx.socket(zmq.SUB)\n         socket.set(zmq.RCVTIMEO, 60000)\n-        socket.connect(ADDRESS)\n+        socket.connect(address)\n \n         # Subscribe to all available topics.\n-        self.hashblock = ZMQSubscriber(socket, b\"hashblock\")\n-        self.hashtx = ZMQSubscriber(socket, b\"hashtx\")\n-        self.rawblock = ZMQSubscriber(socket, b\"rawblock\")\n-        self.rawtx = ZMQSubscriber(socket, b\"rawtx\")\n-\n-        self.extra_args = [\n-            [\"-zmqpub%s=%s\" % (sub.topic.decode(), ADDRESS) for sub in [self.hashblock, self.hashtx, self.rawblock, self.rawtx]],\n-            [],\n-        ]\n-        self.add_nodes(self.num_nodes, self.extra_args)\n-        self.start_nodes()\n-        self.import_deterministic_coinbase_privkeys()\n+        hashblock = ZMQSubscriber(socket, b\"hashblock\")\n+        hashtx = ZMQSubscriber(socket, b\"hashtx\")\n+        rawblock = ZMQSubscriber(socket, b\"rawblock\")\n+        rawtx = ZMQSubscriber(socket, b\"rawtx\")\n \n-    def run_test(self):\n-        try:\n-            self._zmq_test()\n-        finally:\n-            # Destroy the ZMQ context.\n-            self.log.debug(\"Destroying ZMQ context\")\n-            self.zmq_context.destroy(linger=None)\n+        self.restart_node(0, [\"-zmqpub%s=%s\" % (sub.topic.decode(), address) for sub in [hashblock, hashtx, rawblock, rawtx]])\n+        connect_nodes(self.nodes[0], 1)\n \n-    def _zmq_test(self):\n         num_blocks = 5\n         self.log.info(\"Generate %(n)d blocks (and %(n)d coinbase txes)\" % {\"n\": num_blocks})\n         genhashes = self.nodes[0].generatetoaddress(num_blocks, ADDRESS_BCRT1_UNSPENDABLE)\n+\n         self.sync_all()\n \n         for x in range(num_blocks):\n             # Should receive the coinbase txid.\n-            txid = self.hashtx.receive()\n+            txid = hashtx.receive()\n \n             # Should receive the coinbase raw transaction.\n-            hex = self.rawtx.receive()\n+            hex = rawtx.receive()\n             tx = CTransaction()\n             tx.deserialize(BytesIO(hex))\n             tx.calc_sha256()\n             assert_equal(tx.hash, txid.hex())\n \n             # Should receive the generated block hash.\n-            hash = self.hashblock.receive().hex()\n+            hash = hashblock.receive().hex()\n             assert_equal(genhashes[x], hash)\n             # The block should only have the coinbase txid.\n             assert_equal([txid.hex()], self.nodes[1].getblock(hash)[\"tx\"])\n \n             # Should receive the generated raw block.\n-            block = self.rawblock.receive()\n+            block = rawblock.receive()\n             assert_equal(genhashes[x], hash256_reversed(block[:80]).hex())\n \n         if self.is_wallet_compiled():\n@@ -111,20 +104,20 @@ def _zmq_test(self):\n             self.sync_all()\n \n             # Should receive the broadcasted txid.\n-            txid = self.hashtx.receive()\n+            txid = hashtx.receive()\n             assert_equal(payment_txid, txid.hex())\n \n             # Should receive the broadcasted raw transaction.\n-            hex = self.rawtx.receive()\n+            hex = rawtx.receive()\n             assert_equal(payment_txid, hash256_reversed(hex).hex())\n \n \n         self.log.info(\"Test the getzmqnotifications RPC\")\n         assert_equal(self.nodes[0].getzmqnotifications(), [\n-            {\"type\": \"pubhashblock\", \"address\": ADDRESS, \"hwm\": 1000},\n-            {\"type\": \"pubhashtx\", \"address\": ADDRESS, \"hwm\": 1000},\n-            {\"type\": \"pubrawblock\", \"address\": ADDRESS, \"hwm\": 1000},\n-            {\"type\": \"pubrawtx\", \"address\": ADDRESS, \"hwm\": 1000},\n+            {\"type\": \"pubhashblock\", \"address\": address, \"hwm\": 1000},\n+            {\"type\": \"pubhashtx\", \"address\": address, \"hwm\": 1000},\n+            {\"type\": \"pubrawblock\", \"address\": address, \"hwm\": 1000},\n+            {\"type\": \"pubrawtx\", \"address\": address, \"hwm\": 1000},\n         ])\n \n         assert_equal(self.nodes[1].getzmqnotifications(), [])"
      }
    ]
  },
  {
    "sha": "abdfc5e89b687f73de4ab97e924c29cc27e71c15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYmRmYzVlODliNjg3ZjczZGU0YWI5N2U5MjRjMjljYzI3ZTcxYzE1",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-07-17T13:41:42Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-08-19T00:25:33Z"
      },
      "message": "qa: Test ZMQ notification after chain reorg",
      "tree": {
        "sha": "dee44671d2085da5ea93827648e9766b42165c58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dee44671d2085da5ea93827648e9766b42165c58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abdfc5e89b687f73de4ab97e924c29cc27e71c15",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abdfc5e89b687f73de4ab97e924c29cc27e71c15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/abdfc5e89b687f73de4ab97e924c29cc27e71c15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abdfc5e89b687f73de4ab97e924c29cc27e71c15/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa2622a726bc0f02152d79c888a332694678a989",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa2622a726bc0f02152d79c888a332694678a989",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa2622a726bc0f02152d79c888a332694678a989"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 25,
      "deletions": 0
    },
    "files": [
      {
        "sha": "912b667b0c7eb22a8eba6f8ca20fadb2b3b65d15",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abdfc5e89b687f73de4ab97e924c29cc27e71c15/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abdfc5e89b687f73de4ab97e924c29cc27e71c15/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=abdfc5e89b687f73de4ab97e924c29cc27e71c15",
        "patch": "@@ -46,6 +46,7 @@ def run_test(self):\n         self.ctx = zmq.Context()\n         try:\n             self.test_basic()\n+            self.test_reorg()\n         finally:\n             # Destroy the ZMQ context.\n             self.log.debug(\"Destroying ZMQ context\")\n@@ -122,5 +123,29 @@ def test_basic(self):\n \n         assert_equal(self.nodes[1].getzmqnotifications(), [])\n \n+    def test_reorg(self):\n+        import zmq\n+        address = 'tcp://127.0.0.1:28333'\n+        socket = self.ctx.socket(zmq.SUB)\n+        socket.set(zmq.RCVTIMEO, 60000)\n+        socket.connect(address)\n+        hashblock = ZMQSubscriber(socket, b'hashblock')\n+\n+        # Should only notify the tip if a reorg occurs\n+        self.restart_node(0, ['-zmqpub%s=%s' % (hashblock.topic.decode(), address)])\n+\n+        # Generate 1 block in nodes[0] and receive all notifications\n+        self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)\n+        assert_equal(self.nodes[0].getbestblockhash(), hashblock.receive().hex())\n+\n+        # Generate 2 blocks in nodes[1]\n+        self.nodes[1].generatetoaddress(2, ADDRESS_BCRT1_UNSPENDABLE)\n+\n+        # nodes[0] will reorg chain after connecting back nodes[1]\n+        connect_nodes(self.nodes[0], 1)\n+\n+        # Should receive nodes[1] tip\n+        assert_equal(self.nodes[1].getbestblockhash(), hashblock.receive().hex())\n+\n if __name__ == '__main__':\n     ZMQTest().main()"
      }
    ]
  }
]