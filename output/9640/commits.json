[
  {
    "sha": "d625b907a1800a5a30c4ad285641c7418d2c28c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjI1YjkwN2ExODAwYTVhMzBjNGFkMjg1NjQxYzc0MThkMmMyOGMx",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-01-26T17:57:04Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-01-30T16:47:10Z"
      },
      "message": "wallet: Refactor dummy signature signing for reusability",
      "tree": {
        "sha": "ab77fc0f12bd438e34a52882fbc97e667948a0cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab77fc0f12bd438e34a52882fbc97e667948a0cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d625b907a1800a5a30c4ad285641c7418d2c28c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d625b907a1800a5a30c4ad285641c7418d2c28c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d625b907a1800a5a30c4ad285641c7418d2c28c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d625b907a1800a5a30c4ad285641c7418d2c28c1/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e99f0d7ad443ff72087c6f80e9fab65cace0bf19"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 30,
      "deletions": 15
    },
    "files": [
      {
        "sha": "a7b8022bd9c79e025ab601e8cc3563170239f022",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 15,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d625b907a1800a5a30c4ad285641c7418d2c28c1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d625b907a1800a5a30c4ad285641c7418d2c28c1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d625b907a1800a5a30c4ad285641c7418d2c28c1",
        "patch": "@@ -2583,21 +2583,9 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                                               std::numeric_limits<unsigned int>::max() - (fWalletRbf ? 2 : 1)));\n \n                 // Fill in dummy signatures for fee calculation.\n-                int nIn = 0;\n-                for (const auto& coin : setCoins)\n-                {\n-                    const CScript& scriptPubKey = coin.first->tx->vout[coin.second].scriptPubKey;\n-                    SignatureData sigdata;\n-\n-                    if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n-                    {\n-                        strFailReason = _(\"Signing transaction failed\");\n-                        return false;\n-                    } else {\n-                        UpdateTransaction(txNew, nIn, sigdata);\n-                    }\n-\n-                    nIn++;\n+                if (!DummySignTx(txNew, setCoins)) {\n+                    strFailReason = _(\"Signing transaction failed\");\n+                    return false;\n                 }\n \n                 unsigned int nBytes = GetVirtualTransactionSize(txNew);"
      },
      {
        "sha": "1de04ae16a3889ba69fff022cba1ba0e240afebd",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d625b907a1800a5a30c4ad285641c7418d2c28c1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d625b907a1800a5a30c4ad285641c7418d2c28c1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d625b907a1800a5a30c4ad285641c7418d2c28c1",
        "patch": "@@ -13,6 +13,7 @@\n #include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n #include \"script/ismine.h\"\n+#include \"script/sign.h\"\n #include \"wallet/crypter.h\"\n #include \"wallet/walletdb.h\"\n #include \"wallet/rpcwallet.h\"\n@@ -796,6 +797,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries);\n     bool AddAccountingEntry(const CAccountingEntry&);\n     bool AddAccountingEntry(const CAccountingEntry&, CWalletDB *pwalletdb);\n+    template <typename ContainerType>\n+    bool DummySignTx(CMutableTransaction &txNew, const ContainerType &coins);\n \n     static CFeeRate minTxFee;\n     static CFeeRate fallbackFee;\n@@ -1028,4 +1031,28 @@ class CAccount\n     }\n };\n \n+// Helper for producing a bunch of max-sized low-S signatures (eg 72 bytes)\n+// ContainerType is meant to hold pair<CWalletTx *, int>, and be iterable\n+// so that each entry corresponds to each vIn, in order.\n+template <typename ContainerType>\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins)\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    int nIn = 0;\n+    for (const auto& coin : coins)\n+    {\n+        const CScript& scriptPubKey = coin.first->tx->vout[coin.second].scriptPubKey;\n+        SignatureData sigdata;\n+\n+        if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+        {\n+            return false;\n+        } else {\n+            UpdateTransaction(txNew, nIn, sigdata);\n+        }\n+\n+        nIn++;\n+    }\n+    return true;\n+}\n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  },
  {
    "sha": "f62659448cdfd752447117fb73ab5328fbe3e41d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjI2NTk0NDhjZGZkNzUyNDQ3MTE3ZmI3M2FiNTMyOGZiZTNlNDFk",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-01-26T17:59:32Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-02-01T01:03:45Z"
      },
      "message": "rpc: bumpfee: use correct maximum signed tx size for fee calculation\n\nMore accurate than simply adding one byte per input, and properly handles the\ncase where the original transaction happened to have very small signatures",
      "tree": {
        "sha": "0f255ce9d302ff9ae07368cb0c278ce60583a063",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f255ce9d302ff9ae07368cb0c278ce60583a063"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f62659448cdfd752447117fb73ab5328fbe3e41d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f62659448cdfd752447117fb73ab5328fbe3e41d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f62659448cdfd752447117fb73ab5328fbe3e41d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f62659448cdfd752447117fb73ab5328fbe3e41d/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d625b907a1800a5a30c4ad285641c7418d2c28c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d625b907a1800a5a30c4ad285641c7418d2c28c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d625b907a1800a5a30c4ad285641c7418d2c28c1"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 35,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4f763fd6e2f3a2a4cb741b2548ad6028fc7ebac7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 4,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f62659448cdfd752447117fb73ab5328fbe3e41d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f62659448cdfd752447117fb73ab5328fbe3e41d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f62659448cdfd752447117fb73ab5328fbe3e41d",
        "patch": "@@ -2664,6 +2664,33 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+// Calculate the size of the transaction assuming all signatures are max size\n+// Use DummySignatureCreator, which inserts 72 byte signatures everywhere.\n+// TODO: re-use this in CWallet::CreateTransaction (right now\n+// CreateTransaction uses the constructed dummy-signed tx to do a priority\n+// calculation, but we should be able to refactor after priority is removed).\n+// NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n+// be IsAllFromMe).\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx)\n+{\n+    CMutableTransaction txNew(tx);\n+    std::vector<pair<CWalletTx *, unsigned int>> vCoins;\n+    // Look up the inputs.  We should have already checked that this transaction\n+    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n+    // wallet, with a valid index into the vout array.\n+    for (auto& input : tx.vin) {\n+        const auto mi = pwalletMain->mapWallet.find(input.prevout.hash);\n+        assert(mi != pwalletMain->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        vCoins.emplace_back(make_pair(&(mi->second), input.prevout.n));\n+    }\n+    if (!pwalletMain->DummySignTx(txNew, vCoins)) {\n+        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n+        // implies that we can sign for every input.\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that cannot be signed\");\n+    }\n+    return GetVirtualTransactionSize(txNew);\n+}\n+\n UniValue bumpfee(const JSONRPCRequest& request)\n {\n     if (!EnsureWalletIsAvailable(request.fHelp)) {\n@@ -2769,9 +2796,9 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n     }\n \n-    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    // Calculate the expected size of the new transaction.\n     int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n-    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx);\n \n     // optional parameters\n     bool specifiedConfirmTarget = false;\n@@ -2845,8 +2872,12 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate\n-        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + walletIncrementalRelayFee.GetFeePerK()) {\n-            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + walletIncrementalRelayFee.GetFeePerK());\n+        // walletIncrementalRelayFee.GetFeePerK() should be exact, because it's initialized\n+        // in that unit (fee per kb).\n+        // However, nOldFeeRate is a calculated value from the tx fee/size, so\n+        // add 1 satoshi to the result, because it may have been rounded down.\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK()) {\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK());\n             nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n         }\n     }"
      }
    ]
  },
  {
    "sha": "9522b53a91f28032c34b94662d50b000534708ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTIyYjUzYTkxZjI4MDMyYzM0Yjk0NjYyZDUwYjAwMDUzNDcwOGNl",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-01-26T17:57:42Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-02-01T01:03:45Z"
      },
      "message": "rpc: bumpfee: handle errors more gracefully",
      "tree": {
        "sha": "b9fb2476ca21c7d62366eab57aef7cdf5ec791a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9fb2476ca21c7d62366eab57aef7cdf5ec791a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9522b53a91f28032c34b94662d50b000534708ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9522b53a91f28032c34b94662d50b000534708ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9522b53a91f28032c34b94662d50b000534708ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9522b53a91f28032c34b94662d50b000534708ce/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f62659448cdfd752447117fb73ab5328fbe3e41d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f62659448cdfd752447117fb73ab5328fbe3e41d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f62659448cdfd752447117fb73ab5328fbe3e41d"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8b135b0e0f7e3bb5836feb88b57e13505ac86d4c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9522b53a91f28032c34b94662d50b000534708ce/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9522b53a91f28032c34b94662d50b000534708ce/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9522b53a91f28032c34b94662d50b000534708ce",
        "patch": "@@ -2733,6 +2733,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n             \"  \\\"origfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n             \"  \\\"fee\\\":      n,         (numeric) Fee of the new transaction\\n\"\n+            \"  \\\"errors\\\":  [ str... ] (json array of strings) Errors encountered during processing (may be empty)\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n@@ -2945,23 +2946,32 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n     wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n     CValidationState state;\n-    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state) || !state.IsValid()) {\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n+        // NOTE: CommitTransaction never returns false, so this should never happen.\n         throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason()));\n     }\n \n+    UniValue vErrors(UniValue::VARR);\n+    if (state.IsInvalid()) {\n+        // This can happen if the mempool rejected the transaction.  Report\n+        // what happened in the \"errors\" response.\n+        vErrors.push_back(strprintf(\"Error: The transaction was rejected: %s\", FormatStateMessage(state)));\n+    }\n+\n     // mark the original tx as bumped\n     if (!pwalletMain->MarkReplaced(wtx.GetHash(), wtxBumped.GetHash())) {\n         // TODO: see if JSON-RPC has a standard way of returning a response\n         // along with an exception. It would be good to return information about\n         // wtxBumped to the caller even if marking the original transaction\n         // replaced does not succeed for some reason.\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Created new bumpfee transaction but could not mark the original transaction as replaced.\");\n+        vErrors.push_back(\"Error: Created new bumpfee transaction but could not mark the original transaction as replaced.\");\n     }\n \n     UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"txid\", wtxBumped.GetHash().GetHex()));\n     result.push_back(Pair(\"origfee\", ValueFromAmount(nOldFee)));\n     result.push_back(Pair(\"fee\", ValueFromAmount(nNewFee)));\n+    result.push_back(Pair(\"errors\", vErrors));\n \n     return result;\n }"
      }
    ]
  }
]