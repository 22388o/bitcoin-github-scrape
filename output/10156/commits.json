[
  {
    "sha": "d1a95e8d3d0ac58792fe1b885c9fc65af11d7691",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWE5NWU4ZDNkMGFjNTg3OTJmZTFiODg1YzlmYzY1YWYxMWQ3Njkx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-02T21:03:55Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-02T07:48:48Z"
      },
      "message": "Bumpfee move request parameter interaction to the top",
      "tree": {
        "sha": "d330316b0e7452378d6aa36225a9413006daf6ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d330316b0e7452378d6aa36225a9413006daf6ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1a95e8d3d0ac58792fe1b885c9fc65af11d7691",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAljgrOAACgkQHrd2uwPH\nki2uVA//YcE6D+1F0kDVJksjEaEFBCjiPm+1NyIGVDM6KPjYQP1k2K/veaYSo9bh\nBCyZ+QLg78LQzaCf6KhSqxkKbRmuDcLuPVKFlcb+cUTNwRQnEaCfK8qtWBEhkpXU\nlz1gLRfNlL93Kd5tr3iIhJNulrtLDJLj7H9jlVkI8S822NChIQbdXbr/XVGTPvy3\nuc5yvfrh4tFhl6QENRJVQNAroCHzQ4A9xZLySm99IuKxU8uX9+rokIzUFaYmWecm\nPHl5ICecd3CG7kHkAOKpyISxItBevI9ZpUjTyye3N/o/21+R+CFfzKLnkas5TaCe\nKgK1UJn71sx1gZBfQB2p7M45PnLSJIeGeou0aXEEpGSX8A9Ifoa3Pk60tMX+HrZG\nR3eyA3xr/S0JzHdLUrQJ1EwPNHum2cvDz1xsvJM6TxHaOr+cCbTRWraRMwSILDhx\nPbqC8zYPJq+3/OnZN4/B9sSBpp6paWFwWbxRfnbU+seu/JDbPH8xSIdkKIeetnv/\nFPL0Sns3Gdv5qtsnkAaag8ONlIzf+40GeBO9LFMCwPE6Rn4581DY8ZpF+nP4fzGg\nezmHa7Q9Gu5yYefY7McQtzjCEa5LkuBGJCKU7G65ZPMX17JLBgOk9UfNT6AB8tlw\n1lUDIcNtDxsC19ChFCeYfgxrDMhCZIu+N30GkZnswbDIJzLEAfE=\n=540M\n-----END PGP SIGNATURE-----",
        "payload": "tree d330316b0e7452378d6aa36225a9413006daf6ce\nparent fbf36cae3a4613e289cec6c5eaeb1395d362a037\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1486069435 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1491119328 +0200\n\nBumpfee move request parameter interaction to the top\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1a95e8d3d0ac58792fe1b885c9fc65af11d7691",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1a95e8d3d0ac58792fe1b885c9fc65af11d7691",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1a95e8d3d0ac58792fe1b885c9fc65af11d7691/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fbf36cae3a4613e289cec6c5eaeb1395d362a037",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbf36cae3a4613e289cec6c5eaeb1395d362a037",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fbf36cae3a4613e289cec6c5eaeb1395d362a037"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 37,
      "deletions": 38
    },
    "files": [
      {
        "sha": "af6f59c9d9282eabd5fa81143811e7111c53e268",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 38,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a95e8d3d0ac58792fe1b885c9fc65af11d7691/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a95e8d3d0ac58792fe1b885c9fc65af11d7691/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d1a95e8d3d0ac58792fe1b885c9fc65af11d7691",
        "patch": "@@ -2859,6 +2859,38 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     uint256 hash;\n     hash.SetHex(request.params[0].get_str());\n \n+    // optional parameters\n+    bool specifiedConfirmTarget = false;\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            specifiedConfirmTarget = true;\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) { // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+            }\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int64();\n+        }\n+\n+        if (options.exists(\"replaceable\")) {\n+            replaceable = options[\"replaceable\"].get_bool();\n+        }\n+    }\n+\n     // retrieve the original tx from the wallet\n     LOCK2(cs_main, pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n@@ -2916,44 +2948,6 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n     const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx, *pwallet);\n \n-    // optional parameters\n-    bool specifiedConfirmTarget = false;\n-    int newConfirmTarget = nTxConfirmTarget;\n-    CAmount totalFee = 0;\n-    bool replaceable = true;\n-    if (request.params.size() > 1) {\n-        UniValue options = request.params[1];\n-        RPCTypeCheckObj(options,\n-            {\n-                {\"confTarget\", UniValueType(UniValue::VNUM)},\n-                {\"totalFee\", UniValueType(UniValue::VNUM)},\n-                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n-            },\n-            true, true);\n-\n-        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n-        } else if (options.exists(\"confTarget\")) {\n-            specifiedConfirmTarget = true;\n-            newConfirmTarget = options[\"confTarget\"].get_int();\n-            if (newConfirmTarget <= 0) { // upper-bound will be checked by estimatefee/smartfee\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n-            }\n-        } else if (options.exists(\"totalFee\")) {\n-            totalFee = options[\"totalFee\"].get_int64();\n-            CAmount requiredFee = CWallet::GetRequiredFee(maxNewTxSize);\n-            if (totalFee < requiredFee ) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER,\n-                                   strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n-                                             FormatMoney(requiredFee)));\n-            }\n-        }\n-\n-        if (options.exists(\"replaceable\")) {\n-            replaceable = options[\"replaceable\"].get_bool();\n-        }\n-    }\n-\n     // calculate the old fee and fee-rate\n     CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n     CFeeRate nOldFeeRate(nOldFee, txSize);\n@@ -2973,6 +2967,11 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n                                                                 FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(::incrementalRelayFee.GetFee(maxNewTxSize))));\n         }\n+        CAmount requiredFee = CWallet::GetRequiredFee(maxNewTxSize);\n+        if (totalFee < requiredFee ) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n+                                                                FormatMoney(requiredFee)));\n+        }\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n     } else {"
      }
    ]
  },
  {
    "sha": "0337a39d31603eb2c723a560410357f186763dc2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzM3YTM5ZDMxNjAzZWIyYzcyM2E1NjA0MTAzNTdmMTg2NzYzZGMy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-03-03T15:15:47Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-02T08:12:39Z"
      },
      "message": "Refactor Bumpfee core functionality",
      "tree": {
        "sha": "82076d4859da26c9bb890538acedcbbc232f6ac6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82076d4859da26c9bb890538acedcbbc232f6ac6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0337a39d31603eb2c723a560410357f186763dc2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAljgsngACgkQHrd2uwPH\nki1fPw/9GN+wJC9i6FMj+xytfH4fQNQDo63Qgdl+ZmX72FS42u4OvsasUi4soCt2\nRQinP3vqwWFyCu5J2EmqrwqawvC8uL9curv0MTbW3GfbRi1pn1itGUEsp6uib7QI\nVp+7+aOiO2/BpInbj2/b7IVOdYTwR742xz3jZYk98MO1gIaxOVZ8/JvfpAeqJ8Xl\nZQ6+t54GoXcUzeKruFrQ/BnFJMhUHF6viuaSaeYbYBnE0YT7A2+/UI0930smoen0\nPMOD1QCvlB6PRtEi0mqO5ghv4cDNVYP9G7QAvQygbZH0Qa+IZhBr3x63CDs0/8Tw\nRXY+f6qUspnmLGW1vZDe4xHbXUbkVacW0saEnXyvUOxdYKfstLwWgmLYtD3yBD4q\n/6XlwPpgQTcNbQ9KTlfNsP+j6IpEYK/CK6nv1APV77ofLhMWxJNORztckePGEOO3\nD0mlezIXoFlqjyNEpujAxQK332IVy2jtXPQ0hGsATOFpv+S82fkdHtTYUG1DWpSA\nfI5KRIhSxs9Y1HeLzdrUSBz6pIO7nYspBOvxzyeQsuRMKPWRZ+kKcoyYfYkNObML\nRhm5/vrqLho5BfDV63MmR3VpZAtGS7e3X5WEG0uJwuPcsNJ34VJjHOyQBiX0Ng4+\nAxKXlibnYZj0oyt5hGpAsMSXcj9vviiJ8/qcf3eS24rM9xroyvk=\n=3rrp\n-----END PGP SIGNATURE-----",
        "payload": "tree 82076d4859da26c9bb890538acedcbbc232f6ac6\nparent d1a95e8d3d0ac58792fe1b885c9fc65af11d7691\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1488554147 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1491120759 +0200\n\nRefactor Bumpfee core functionality\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0337a39d31603eb2c723a560410357f186763dc2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0337a39d31603eb2c723a560410357f186763dc2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0337a39d31603eb2c723a560410357f186763dc2/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1a95e8d3d0ac58792fe1b885c9fc65af11d7691",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1a95e8d3d0ac58792fe1b885c9fc65af11d7691",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1a95e8d3d0ac58792fe1b885c9fc65af11d7691"
      }
    ],
    "stats": {
      "total": 603,
      "additions": 382,
      "deletions": 221
    },
    "files": [
      {
        "sha": "eab8efc74f83579283cadf5c8211ca61d66f601d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0337a39d31603eb2c723a560410357f186763dc2/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0337a39d31603eb2c723a560410357f186763dc2/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=0337a39d31603eb2c723a560410357f186763dc2",
        "patch": "@@ -156,6 +156,7 @@ BITCOIN_CORE_H = \\\n   wallet/coincontrol.h \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n+  wallet/feebumper.h \\\n   wallet/rpcwallet.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n@@ -230,6 +231,7 @@ libbitcoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_wallet_a_SOURCES = \\\n   wallet/crypter.cpp \\\n   wallet/db.cpp \\\n+  wallet/feebumper.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/wallet.cpp \\"
      },
      {
        "sha": "98b6da83c26538f9c7f38a80012d4f09bf6a5b36",
        "filename": "src/wallet/feebumper.cpp",
        "status": "added",
        "additions": 275,
        "deletions": 0,
        "changes": 275,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0337a39d31603eb2c723a560410357f186763dc2/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0337a39d31603eb2c723a560410357f186763dc2/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=0337a39d31603eb2c723a560410357f186763dc2",
        "patch": "@@ -0,0 +1,275 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"consensus/validation.h\"\n+#include \"wallet/feebumper.h\"\n+#include \"wallet/wallet.h\"\n+#include \"policy/policy.h\"\n+#include \"policy/rbf.h\"\n+#include \"validation.h\" //for mempool access\n+#include \"txmempool.h\"\n+#include \"utilmoneystr.h\"\n+#include \"util.h\"\n+#include \"net.h\"\n+\n+// Calculate the size of the transaction assuming all signatures are max size\n+// Use DummySignatureCreator, which inserts 72 byte signatures everywhere.\n+// TODO: re-use this in CWallet::CreateTransaction (right now\n+// CreateTransaction uses the constructed dummy-signed tx to do a priority\n+// calculation, but we should be able to refactor after priority is removed).\n+// NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n+// be IsAllFromMe).\n+int64_t CalculateMaximumSignedTxSize(const CWallet *pWallet, const CTransaction &tx)\n+{\n+    CMutableTransaction txNew(tx);\n+    std::vector<std::pair<const CWalletTx *, unsigned int>> vCoins;\n+    // Look up the inputs.  We should have already checked that this transaction\n+    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n+    // wallet, with a valid index into the vout array.\n+    for (auto& input : tx.vin) {\n+        const auto mi = pWallet->mapWallet.find(input.prevout.hash);\n+        assert(mi != pWallet->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        vCoins.emplace_back(std::make_pair(&(mi->second), input.prevout.n));\n+    }\n+    if (!pWallet->DummySignTx(txNew, vCoins)) {\n+        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n+        // implies that we can sign for every input.\n+        return -1;\n+    }\n+    return GetVirtualTransactionSize(txNew);\n+}\n+\n+CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConfirmTarget, bool specifiedConfirmTarget, CAmount totalFee, bool newTxReplaceable)\n+    :\n+    txid(txidIn),\n+    nOldFee(0),\n+    nNewFee(0)\n+{\n+    vErrors.clear();\n+    bumpedTxid.SetNull();\n+    AssertLockHeld(pWallet->cs_wallet);\n+    if (!pWallet->mapWallet.count(txid)) {\n+        vErrors.push_back(\"Invalid or non-wallet transaction id\");\n+        currentResult = BumpFeeResult::INVALID_ADDRESS_OR_KEY;\n+        return;\n+    }\n+    auto it = pWallet->mapWallet.find(txid);\n+    const CWalletTx& wtx = it->second;\n+\n+    if (pWallet->HasWalletSpend(txid)) {\n+        vErrors.push_back(\"Transaction has descendants in the wallet\");\n+        currentResult = BumpFeeResult::INVALID_PARAMETER;\n+        return;\n+    }\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it_mp = mempool.mapTx.find(txid);\n+        if (it_mp != mempool.mapTx.end() && it_mp->GetCountWithDescendants() > 1) {\n+            vErrors.push_back(\"Transaction has descendants in the mempool\");\n+            currentResult = BumpFeeResult::INVALID_PARAMETER;\n+            return;\n+        }\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0) {\n+        vErrors.push_back(\"Transaction has been mined, or is conflicted with a mined transaction\");\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    if (!SignalsOptInRBF(wtx)) {\n+        vErrors.push_back(\"Transaction is not BIP 125 replaceable\");\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\")) {\n+        vErrors.push_back(strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", txid.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pWallet->IsAllFromMe(wtx, ISMINE_SPENDABLE)) {\n+        vErrors.push_back(\"Transaction contains inputs that don't belong to this wallet\");\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pWallet->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1) {\n+                vErrors.push_back(\"Transaction has multiple change outputs\");\n+                currentResult = BumpFeeResult::WALLET_ERROR;\n+                return;\n+            }\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1) {\n+        vErrors.push_back(\"Transaction does not have a change output\");\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    // Calculate the expected size of the new transaction.\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(pWallet, *wtx.tx);\n+    if (maxNewTxSize < 0) {\n+        vErrors.push_back(\"Transaction contains inputs that cannot be signed\");\n+        currentResult = BumpFeeResult::INVALID_ADDRESS_OR_KEY;\n+        return;\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CFeeRate nNewFeeRate;\n+    // The wallet uses a conservative WALLET_INCREMENTAL_RELAY_FEE value to\n+    // future proof against changes to network wide policy for incremental relay\n+    // fee that our node may not be aware of.\n+    CFeeRate walletIncrementalRelayFee = CFeeRate(WALLET_INCREMENTAL_RELAY_FEE);\n+    if (::incrementalRelayFee > walletIncrementalRelayFee) {\n+        walletIncrementalRelayFee = ::incrementalRelayFee;\n+    }\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + ::incrementalRelayFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            vErrors.push_back(strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n+                                                                FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(::incrementalRelayFee.GetFee(maxNewTxSize))));\n+            currentResult = BumpFeeResult::INVALID_PARAMETER;\n+            return;\n+        }\n+        CAmount requiredFee = pWallet->GetRequiredFee(maxNewTxSize);\n+        if (totalFee < requiredFee) {\n+            vErrors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n+                                                                FormatMoney(requiredFee)));\n+            currentResult = BumpFeeResult::INVALID_PARAMETER;\n+            return;\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+    } else {\n+        // if user specified a confirm target then don't consider any global payTxFee\n+        if (specifiedConfirmTarget) {\n+            nNewFee = pWallet->GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, CAmount(0));\n+        }\n+        // otherwise use the regular wallet logic to select payTxFee or default confirm target\n+        else {\n+            nNewFee = pWallet->GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool);\n+        }\n+\n+        nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n+\n+        // New fee rate must be at least old rate + minimum incremental relay rate\n+        // walletIncrementalRelayFee.GetFeePerK() should be exact, because it's initialized\n+        // in that unit (fee per kb).\n+        // However, nOldFeeRate is a calculated value from the tx fee/size, so\n+        // add 1 satoshi to the result, because it may have been rounded down.\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK()) {\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK());\n+            nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+        }\n+    }\n+\n+    // Check that in all cases the new fee doesn't violate maxTxFee\n+     if (nNewFee > maxTxFee) {\n+         vErrors.push_back(strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n+                               FormatMoney(nNewFee), FormatMoney(maxTxFee)));\n+         currentResult = BumpFeeResult::WALLET_ERROR;\n+         return;\n+     }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        vErrors.push_back(strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CAmount nDelta = nNewFee - nOldFee;\n+    assert(nDelta > 0);\n+    mtx =  *wtx.tx;\n+    CTxOut* poutput = &(mtx.vout[nOutput]);\n+    if (poutput->nValue < nDelta) {\n+        vErrors.push_back(\"Change output is too small to bump the fee\");\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue -= nDelta;\n+    if (poutput->nValue <= poutput->GetDustThreshold(::dustRelayFee)) {\n+        LogPrint(BCLog::RPC, \"Bumping fee and discarding dust output\\n\");\n+        nNewFee += poutput->nValue;\n+        mtx.vout.erase(mtx.vout.begin() + nOutput);\n+    }\n+\n+    // Mark new tx not replaceable, if requested.\n+    if (!newTxReplaceable) {\n+        for (auto& input : mtx.vin) {\n+            if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;\n+        }\n+    }\n+\n+    currentResult = BumpFeeResult::OK;\n+}\n+\n+bool CFeeBumper::commit(CWallet *pWallet)\n+{\n+    AssertLockHeld(pWallet->cs_wallet);\n+    vErrors.clear();\n+    if (txid.IsNull() || !pWallet->mapWallet.count(txid)) {\n+        vErrors.push_back(\"Invalid or non-wallet transaction id\");\n+        currentResult = BumpFeeResult::MISC_ERROR;\n+    }\n+    CWalletTx& oldWtx = pWallet->mapWallet[txid];\n+\n+    CWalletTx wtxBumped(pWallet, MakeTransactionRef(std::move(mtx)));\n+    // commit/broadcast the tx\n+    CReserveKey reservekey(pWallet);\n+    wtxBumped.mapValue = oldWtx.mapValue;\n+    wtxBumped.mapValue[\"replaces_txid\"] = oldWtx.GetHash().ToString();\n+    wtxBumped.vOrderForm = oldWtx.vOrderForm;\n+    wtxBumped.strFromAccount = oldWtx.strFromAccount;\n+    wtxBumped.fTimeReceivedIsTxTime = true;\n+    wtxBumped.fFromMe = true;\n+    CValidationState state;\n+    if (!pWallet->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n+        // NOTE: CommitTransaction never returns false, so this should never happen.\n+        vErrors.push_back(strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason()));\n+        return false;\n+    }\n+\n+    bumpedTxid = wtxBumped.GetHash();\n+    if (state.IsInvalid()) {\n+        // This can happen if the mempool rejected the transaction.  Report\n+        // what happened in the \"errors\" response.\n+        vErrors.push_back(strprintf(\"Error: The transaction was rejected: %s\", FormatStateMessage(state)));\n+    }\n+\n+    // mark the original tx as bumped\n+    if (!pWallet->MarkReplaced(oldWtx.GetHash(), wtxBumped.GetHash())) {\n+        // TODO: see if JSON-RPC has a standard way of returning a response\n+        // along with an exception. It would be good to return information about\n+        // wtxBumped to the caller even if marking the original transaction\n+        // replaced does not succeed for some reason.\n+        vErrors.push_back(\"Error: Created new bumpfee transaction but could not mark the original transaction as replaced.\");\n+    }\n+    return true;\n+}\n+"
      },
      {
        "sha": "42b0ccad3667a0a73bf63fedc7120e0bbf371e2a",
        "filename": "src/wallet/feebumper.h",
        "status": "added",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0337a39d31603eb2c723a560410357f186763dc2/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0337a39d31603eb2c723a560410357f186763dc2/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=0337a39d31603eb2c723a560410357f186763dc2",
        "patch": "@@ -0,0 +1,46 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_FEEBUMPER_H\n+#define BITCOIN_WALLET_FEEBUMPER_H\n+\n+#include <primitives/transaction.h>\n+\n+class CWallet;\n+class uint256;\n+\n+enum class BumpFeeResult\n+{\n+    OK,\n+    INVALID_ADDRESS_OR_KEY,\n+    INVALID_REQUEST,\n+    INVALID_PARAMETER,\n+    WALLET_ERROR,\n+    MISC_ERROR,\n+};\n+\n+class CFeeBumper\n+{\n+public:\n+    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, int newConfirmTarget, bool specifiedConfirmTarget, CAmount totalFee, bool newTxReplaceable);\n+    BumpFeeResult getResult() const { return currentResult; }\n+    const std::vector<std::string>& getErrors() const { return vErrors; }\n+    CAmount getOldFee() const { return nOldFee; }\n+    CAmount getNewFee() const { return nNewFee; }\n+    CMutableTransaction* getBumpedTxRef() { return &mtx; }\n+    uint256 getBumpedTxId() const { return bumpedTxid; }\n+\n+    bool commit(CWallet *pWalletNonConst);\n+\n+private:\n+    const uint256 txid;\n+    uint256 bumpedTxid;\n+    CMutableTransaction mtx;\n+    std::vector<std::string> vErrors;\n+    BumpFeeResult currentResult;\n+    CAmount nOldFee;\n+    CAmount nNewFee;\n+};\n+\n+#endif // BITCOIN_WALLET_FEEBUMPER_H"
      },
      {
        "sha": "701e9987b5527756a213d338be9b533c4f57f60f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 219,
        "changes": 254,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0337a39d31603eb2c723a560410357f186763dc2/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0337a39d31603eb2c723a560410357f186763dc2/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0337a39d31603eb2c723a560410357f186763dc2",
        "patch": "@@ -18,8 +18,9 @@\n #include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n-#include \"wallet.h\"\n-#include \"walletdb.h\"\n+#include \"wallet/feebumper.h\"\n+#include \"wallet/wallet.h\"\n+#include \"wallet/walletdb.h\"\n \n #include <stdint.h>\n \n@@ -2778,33 +2779,6 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n-// Calculate the size of the transaction assuming all signatures are max size\n-// Use DummySignatureCreator, which inserts 72 byte signatures everywhere.\n-// TODO: re-use this in CWallet::CreateTransaction (right now\n-// CreateTransaction uses the constructed dummy-signed tx to do a priority\n-// calculation, but we should be able to refactor after priority is removed).\n-// NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n-// be IsAllFromMe).\n-int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, CWallet &wallet)\n-{\n-    CMutableTransaction txNew(tx);\n-    std::vector<std::pair<CWalletTx*, unsigned int>> vCoins;\n-    // Look up the inputs.  We should have already checked that this transaction\n-    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n-    // wallet, with a valid index into the vout array.\n-    for (auto& input : tx.vin) {\n-        const auto mi = wallet.mapWallet.find(input.prevout.hash);\n-        assert(mi != wallet.mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n-        vCoins.emplace_back(std::make_pair(&(mi->second), input.prevout.n));\n-    }\n-    if (!wallet.DummySignTx(txNew, vCoins)) {\n-        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n-        // implies that we can sign for every input.\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that cannot be signed\");\n-    }\n-    return GetVirtualTransactionSize(txNew);\n-}\n-\n UniValue bumpfee(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n@@ -2891,206 +2865,48 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         }\n     }\n \n-    // retrieve the original tx from the wallet\n     LOCK2(cs_main, pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n-    if (!pwallet->mapWallet.count(hash)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n-    }\n-    CWalletTx& wtx = pwallet->mapWallet[hash];\n-\n-    if (pwallet->HasWalletSpend(hash)) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Transaction has descendants in the wallet\");\n-    }\n \n+    CFeeBumper feeBump(pwallet, hash, newConfirmTarget, specifiedConfirmTarget, totalFee, replaceable);\n+    BumpFeeResult res = feeBump.getResult();\n+    if (res != BumpFeeResult::OK)\n     {\n-        LOCK(mempool.cs);\n-        auto it = mempool.mapTx.find(hash);\n-        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Transaction has descendants in the mempool\");\n+        switch(res) {\n+            case BumpFeeResult::INVALID_ADDRESS_OR_KEY:\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, feeBump.getErrors()[0]);\n+                break;\n+            case BumpFeeResult::INVALID_REQUEST:\n+                throw JSONRPCError(RPC_INVALID_REQUEST, feeBump.getErrors()[0]);\n+                break;\n+            case BumpFeeResult::INVALID_PARAMETER:\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, feeBump.getErrors()[0]);\n+                break;\n+            case BumpFeeResult::WALLET_ERROR:\n+                throw JSONRPCError(RPC_WALLET_ERROR, feeBump.getErrors()[0]);\n+                break;\n+            default:\n+                throw JSONRPCError(RPC_MISC_ERROR, feeBump.getErrors()[0]);\n+                break;\n         }\n     }\n \n-    if (wtx.GetDepthInMainChain() != 0) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction has been mined, or is conflicted with a mined transaction\");\n-    }\n-\n-    if (!SignalsOptInRBF(wtx)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction is not BIP 125 replaceable\");\n-    }\n-\n-    if (wtx.mapValue.count(\"replaced_by_txid\")) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n-    }\n-\n-    // check that original tx consists entirely of our inputs\n-    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n-    if (!pwallet->IsAllFromMe(wtx, ISMINE_SPENDABLE)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction contains inputs that don't belong to this wallet\");\n-    }\n-\n-    // figure out which output was change\n-    // if there was no change output or multiple change outputs, fail\n-    int nOutput = -1;\n-    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n-        if (pwallet->IsChange(wtx.tx->vout[i])) {\n-            if (nOutput != -1) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction has multiple change outputs\");\n-            }\n-            nOutput = i;\n-        }\n-    }\n-    if (nOutput == -1) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction does not have a change output\");\n+    // sign bumped transaction\n+    if (!pwallet->SignTransaction(*feeBump.getBumpedTxRef())) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n     }\n-\n-    // Calculate the expected size of the new transaction.\n-    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n-    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx, *pwallet);\n-\n-    // calculate the old fee and fee-rate\n-    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n-    CFeeRate nOldFeeRate(nOldFee, txSize);\n-    CAmount nNewFee;\n-    CFeeRate nNewFeeRate;\n-    // The wallet uses a conservative WALLET_INCREMENTAL_RELAY_FEE value to\n-    // future proof against changes to network wide policy for incremental relay\n-    // fee that our node may not be aware of.\n-    CFeeRate walletIncrementalRelayFee = CFeeRate(WALLET_INCREMENTAL_RELAY_FEE);\n-    if (::incrementalRelayFee > walletIncrementalRelayFee) {\n-        walletIncrementalRelayFee = ::incrementalRelayFee;\n+    // commit the bumped transaction\n+    if(!feeBump.commit(pwallet)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, feeBump.getErrors()[0]);\n     }\n-\n-    if (totalFee > 0) {\n-        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + ::incrementalRelayFee.GetFee(maxNewTxSize);\n-        if (totalFee < minTotalFee) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n-                                                                FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(::incrementalRelayFee.GetFee(maxNewTxSize))));\n-        }\n-        CAmount requiredFee = CWallet::GetRequiredFee(maxNewTxSize);\n-        if (totalFee < requiredFee ) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n-                                                                FormatMoney(requiredFee)));\n-        }\n-        nNewFee = totalFee;\n-        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n-    } else {\n-        // if user specified a confirm target then don't consider any global payTxFee\n-        if (specifiedConfirmTarget) {\n-            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, CAmount(0));\n-        }\n-        // otherwise use the regular wallet logic to select payTxFee or default confirm target\n-        else {\n-            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool);\n-        }\n-\n-        nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n-\n-        // New fee rate must be at least old rate + minimum incremental relay rate\n-        // walletIncrementalRelayFee.GetFeePerK() should be exact, because it's initialized\n-        // in that unit (fee per kb).\n-        // However, nOldFeeRate is a calculated value from the tx fee/size, so\n-        // add 1 satoshi to the result, because it may have been rounded down.\n-        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK()) {\n-            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK());\n-            nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n-        }\n-    }\n-\n-    // Check that in all cases the new fee doesn't violate maxTxFee\n-     if (nNewFee > maxTxFee) {\n-         throw JSONRPCError(RPC_WALLET_ERROR,\n-                            strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n-                                      FormatMoney(nNewFee), FormatMoney(maxTxFee)));\n-     }\n-\n-    // check that fee rate is higher than mempool's minimum fee\n-    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n-    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n-    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n-    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n-    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n-    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n-    }\n-\n-    // Now modify the output to increase the fee.\n-    // If the output is not large enough to pay the fee, fail.\n-    CAmount nDelta = nNewFee - nOldFee;\n-    assert(nDelta > 0);\n-    CMutableTransaction tx(*(wtx.tx));\n-    CTxOut* poutput = &(tx.vout[nOutput]);\n-    if (poutput->nValue < nDelta) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Change output is too small to bump the fee\");\n-    }\n-\n-    // If the output would become dust, discard it (converting the dust to fee)\n-    poutput->nValue -= nDelta;\n-    if (poutput->nValue <= poutput->GetDustThreshold(::dustRelayFee)) {\n-        LogPrint(BCLog::RPC, \"Bumping fee and discarding dust output\\n\");\n-        nNewFee += poutput->nValue;\n-        tx.vout.erase(tx.vout.begin() + nOutput);\n-    }\n-\n-    // Mark new tx not replaceable, if requested.\n-    if (!replaceable) {\n-        for (auto& input : tx.vin) {\n-            if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;\n-        }\n-    }\n-\n-    // sign the new tx\n-    CTransaction txNewConst(tx);\n-    int nIn = 0;\n-    for (auto& input : tx.vin) {\n-        std::map<uint256, CWalletTx>::const_iterator mi = pwallet->mapWallet.find(input.prevout.hash);\n-        assert(mi != pwallet->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n-        if (!ProduceSignature(TransactionSignatureCreator(pwallet, &txNewConst, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n-        }\n-        UpdateTransaction(tx, nIn, sigdata);\n-        nIn++;\n-    }\n-\n-    // commit/broadcast the tx\n-    CReserveKey reservekey(pwallet);\n-    CWalletTx wtxBumped(pwallet, MakeTransactionRef(std::move(tx)));\n-    wtxBumped.mapValue = wtx.mapValue;\n-    wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n-    wtxBumped.vOrderForm = wtx.vOrderForm;\n-    wtxBumped.strFromAccount = wtx.strFromAccount;\n-    wtxBumped.fTimeReceivedIsTxTime = true;\n-    wtxBumped.fFromMe = true;\n-    CValidationState state;\n-    if (!pwallet->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n-        // NOTE: CommitTransaction never returns false, so this should never happen.\n-        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason()));\n-    }\n-\n-    UniValue vErrors(UniValue::VARR);\n-    if (state.IsInvalid()) {\n-        // This can happen if the mempool rejected the transaction.  Report\n-        // what happened in the \"errors\" response.\n-        vErrors.push_back(strprintf(\"Error: The transaction was rejected: %s\", FormatStateMessage(state)));\n-    }\n-\n-    // mark the original tx as bumped\n-    if (!pwallet->MarkReplaced(wtx.GetHash(), wtxBumped.GetHash())) {\n-        // TODO: see if JSON-RPC has a standard way of returning a response\n-        // along with an exception. It would be good to return information about\n-        // wtxBumped to the caller even if marking the original transaction\n-        // replaced does not succeed for some reason.\n-        vErrors.push_back(\"Error: Created new bumpfee transaction but could not mark the original transaction as replaced.\");\n-    }\n-\n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"txid\", wtxBumped.GetHash().GetHex()));\n-    result.push_back(Pair(\"origfee\", ValueFromAmount(nOldFee)));\n-    result.push_back(Pair(\"fee\", ValueFromAmount(nNewFee)));\n-    result.push_back(Pair(\"errors\", vErrors));\n+    result.push_back(Pair(\"txid\", feeBump.getBumpedTxId().GetHex()));\n+    result.push_back(Pair(\"origfee\", ValueFromAmount(feeBump.getOldFee())));\n+    result.push_back(Pair(\"fee\", ValueFromAmount(feeBump.getNewFee())));\n+    UniValue errors(UniValue::VARR);\n+    for (const std::string& err: feeBump.getErrors())\n+        errors.push_back(err);\n+    result.push_back(errors);\n \n     return result;\n }"
      },
      {
        "sha": "186d3c5cd34ff169f0cb000e4898fe89fece5f13",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0337a39d31603eb2c723a560410357f186763dc2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0337a39d31603eb2c723a560410357f186763dc2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0337a39d31603eb2c723a560410357f186763dc2",
        "patch": "@@ -16,6 +16,7 @@\n #include \"validation.h\"\n #include \"net.h\"\n #include \"policy/policy.h\"\n+#include \"policy/rbf.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"script/script.h\"\n@@ -2255,6 +2256,26 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n+bool CWallet::SignTransaction(CMutableTransaction &tx)\n+{\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto& input : tx.vin) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n+        assert(mi != mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n+        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n+        SignatureData sigdata;\n+        if (!ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n+            return false;\n+        }\n+        UpdateTransaction(tx, nIn, sigdata);\n+        nIn++;\n+    }\n+    return true;\n+}\n+\n bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, bool keepReserveKey, const CTxDestination& destChange)\n {\n     std::vector<CRecipient> vecSend;"
      },
      {
        "sha": "c714ddd09073891b074006150d6e93e2be364ffc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0337a39d31603eb2c723a560410357f186763dc2/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0337a39d31603eb2c723a560410357f186763dc2/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0337a39d31603eb2c723a560410357f186763dc2",
        "patch": "@@ -867,6 +867,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * calling CreateTransaction();\n      */\n     bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, bool keepReserveKey = true, const CTxDestination& destChange = CNoDestination());\n+    bool SignTransaction(CMutableTransaction& tx);\n \n     /**\n      * Create a new transaction paying the recipients with a set of coins\n@@ -881,7 +882,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool AddAccountingEntry(const CAccountingEntry&);\n     bool AddAccountingEntry(const CAccountingEntry&, CWalletDB *pwalletdb);\n     template <typename ContainerType>\n-    bool DummySignTx(CMutableTransaction &txNew, const ContainerType &coins);\n+    bool DummySignTx(CMutableTransaction &txNew, const ContainerType &coins) const;\n \n     static CFeeRate minTxFee;\n     static CFeeRate fallbackFee;\n@@ -1125,7 +1126,7 @@ class CAccount\n // ContainerType is meant to hold pair<CWalletTx *, int>, and be iterable\n // so that each entry corresponds to each vIn, in order.\n template <typename ContainerType>\n-bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins)\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins) const\n {\n     // Fill in dummy signatures for fee calculation.\n     int nIn = 0;"
      }
    ]
  },
  {
    "sha": "2718db070589114d54fdf227fb560c1578a7e419",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzE4ZGIwNzA1ODkxMTRkNTRmZGYyMjdmYjU2MGMxNTc4YTdlNDE5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-03-27T11:55:28Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-02T08:12:42Z"
      },
      "message": "Restore invalid fee check (must be > 0)",
      "tree": {
        "sha": "1f8031450c18a9f6aac8fde27d6feb552b9ca721",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f8031450c18a9f6aac8fde27d6feb552b9ca721"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2718db070589114d54fdf227fb560c1578a7e419",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAljgsnoACgkQHrd2uwPH\nki1OYw//WFVogw7CNmTh6/wwBx3/OfVXgMlhMer3Mp5vWpfcza29jdNk4Lv00f+/\nObvqR/LM1CsFWBFlciVMbBl4myDGf0LPoLOKkxNUGp79XeE51+f6OdDSaw1Ot0DT\nYGyHhzjkhUBMK1vKB7c8nitmmFog0K2VpzRvVofd/T2EUvRpBGCEnRlCtmnkjVjX\nKFE1hVCI7DHxThQ1ihgP+1tTm2xvDStjzod+9toTitu8d3dptgjWOUvTIGLKh8nm\nkBNRdEEW8lBebbnjfP5J0UWGyeuq78+G0TqlG6DY396ORu+bN246HOaILNkdSSm9\nc5sMZHXRN2jJTN/qLC3GoyuVA4WcDMHMoc+edIZHI+SnRKG5qHxiKFagtTIuGcLZ\n72WpfxR42qHn6HnYXPtLOc8hNtalbRoZBU65ju8o+WZM5TkbZSBMytYeBglxUlQb\ngaOxOBP39Y5ZC64tMextdaiYGUS0RDvel/LjaFyS8g671Y8qFo2GEn0nwh1H3ot4\nldJWJYumnZkXR53lvBkDQAYzJF43gltvkGBcv4K2NPWj+lM7TKm57t94HWG+ESXp\npBekv+hYVNqzqJ4duA6JctrAlxxV8fTgXC8/dZMnpqjoxgNFH0aqhU0xTc51kH1y\nA2GARBTStr3JWc6O2IrPpLMhrDYQ6HY+pzFvb5yNxOlQAjLDA44=\n=NSAN\n-----END PGP SIGNATURE-----",
        "payload": "tree 1f8031450c18a9f6aac8fde27d6feb552b9ca721\nparent 0337a39d31603eb2c723a560410357f186763dc2\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1490615728 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1491120762 +0200\n\nRestore invalid fee check (must be > 0)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2718db070589114d54fdf227fb560c1578a7e419",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2718db070589114d54fdf227fb560c1578a7e419",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2718db070589114d54fdf227fb560c1578a7e419/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0337a39d31603eb2c723a560410357f186763dc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0337a39d31603eb2c723a560410357f186763dc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0337a39d31603eb2c723a560410357f186763dc2"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f746c54f24e2f591b29d53ff39c1b3e8f1a54cc9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2718db070589114d54fdf227fb560c1578a7e419/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2718db070589114d54fdf227fb560c1578a7e419/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2718db070589114d54fdf227fb560c1578a7e419",
        "patch": "@@ -2858,6 +2858,9 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             }\n         } else if (options.exists(\"totalFee\")) {\n             totalFee = options[\"totalFee\"].get_int64();\n+            if (totalFee <= 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee %s (must be greater than 0)\", FormatMoney(totalFee)));\n+            }\n         }\n \n         if (options.exists(\"replaceable\")) {"
      }
    ]
  },
  {
    "sha": "bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiY2M3MmNjY2M3MmYwMjBkNjg5NmJiYmY0ZTg1ZGYxMWUxZDVhNGYw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-03-27T11:59:33Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-02T08:12:42Z"
      },
      "message": "Directly abort execution in FeeBumper::commit if wallet or tx is not available",
      "tree": {
        "sha": "37ffd7214487cb626a0c9e66239bfb82c2f3f32b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37ffd7214487cb626a0c9e66239bfb82c2f3f32b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAljgsnoACgkQHrd2uwPH\nki0HJQ/+Jq9BVQmL/XaO4ztweVkK+hssoyRQVqWIIqYiD136dzsQG1WsrMHkHQcw\n34qM92xK0lYRRHkqjEEN+/gaQT/B9zk0RQmgXI9QIabtWO9B81lbMBDTDMrPxBQ7\nQAn/AryzeiCdCmd4I+sLlObPFcG4lT2mPuK85arnwdWN+tcZalKB8LnErKoCSFY1\neW05K/YH2nSW0bHm7ynHHibl8kqgsOnHAhxVYn1H78voBR2WH9/6yyXKJCw5vlCU\nz1hcFpPoGryIzxsouKTwIWKB8YExGEisnTiwJGf4r5kveHk11C+YBfrIUaOYeFe7\nwHqhFL8by8PS45eDEmIHphnZgD45AMQv/7RLWhAynmR931+abLrF+vq4V3Z/gmt5\n6ZdOF9CKs3Jd2AlfZ/SJp547GZm1RwCO8hX3e3fWBWsdfHtQPXMtOR1pOCbC7q1r\nF54H8ohjnJhEJhC9fdeJs+sh/aFeE51iOv0Pl956eOqDqVAgJhbwz4d7q9EKbWsF\nr77d/XkpKLjoDXa5lb+iut7vigKbYYME+phTCcIuoWp9/aLnjpFtPtf9OoWtH5fC\n5z+pH2IDI9XirO1GJ/f7LBpHV7vhqmiFcpBgjV1H3D2wvvrEmJDiTCfExTv4d01K\n/WmSzNov0rbU0Mzc8EC9xyLgHihT7Rx7gW75EcDxmhTq7TZn/0c=\n=cNz/\n-----END PGP SIGNATURE-----",
        "payload": "tree 37ffd7214487cb626a0c9e66239bfb82c2f3f32b\nparent 2718db070589114d54fdf227fb560c1578a7e419\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1490615973 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1491120762 +0200\n\nDirectly abort execution in FeeBumper::commit if wallet or tx is not available\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2718db070589114d54fdf227fb560c1578a7e419",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2718db070589114d54fdf227fb560c1578a7e419",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2718db070589114d54fdf227fb560c1578a7e419"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "57c879447c7a2ed4162379f72a101f2ec31848ad",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0",
        "patch": "@@ -236,6 +236,7 @@ bool CFeeBumper::commit(CWallet *pWallet)\n     if (txid.IsNull() || !pWallet->mapWallet.count(txid)) {\n         vErrors.push_back(\"Invalid or non-wallet transaction id\");\n         currentResult = BumpFeeResult::MISC_ERROR;\n+        return false;\n     }\n     CWalletTx& oldWtx = pWallet->mapWallet[txid];\n "
      }
    ]
  },
  {
    "sha": "51ea44f01c0d63aeacb8657b6305040b3419e9f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MWVhNDRmMDFjMGQ2M2FlYWNiODY1N2I2MzA1MDQwYjM0MTllOWYx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-03-27T12:00:14Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-02T08:12:43Z"
      },
      "message": "Use \"return false\" instead assert() in CWallet::SignTransaction",
      "tree": {
        "sha": "de330dbfca90469a863288cfee9670ad9e7de4da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de330dbfca90469a863288cfee9670ad9e7de4da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51ea44f01c0d63aeacb8657b6305040b3419e9f1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAljgsnsACgkQHrd2uwPH\nki2F9BAAvieAA0a56M28RKt9MZbVhwP2vOB4xM8xRpOHTtqJhF4lqctPJYH5lMjC\nks7+b2bQuIemlTnSpzMZKvA4/9G7BTAAcDmLoWxqjvXEs+KQN7poHExveEjakqnN\nn1s0p3cXBs1EYn9fxs97xaC25QtbKh8Yz9D52OVnEZLr9BE+fHrWJOU0DQV+wBRK\nBA6Uhjjv68CrdQTcJm0yLLkkEXeDO9NVORCY2jvTqLaWUpjNySzjjsFctTW5zmZr\npC6wlBQDJ+ktJ5NxPF8ycYRaWbqIa0cUfjdXS/21Yt4np+BkhcK2NR+5vcfhgr6C\n3c1RMrQdfWdOwbgVfBsD0+6ZYLkqQSIp0i9xuUgM2Cy7mkuicia21Ik46KyQXyeP\n3qOenkgBK9r1QSilYD9qHpbrDqgI2rH5ib+5vMLuqb9kI1qLj0+TGHJl/kaHWsrN\n9ONpZsHR8uwArtLJJa7kFcXnztsFG4SdGQaz39Lbf1caitYLjfL5KPwGW8f7bUZY\n9PqHdYufid/mcnGqYLrfVbLlwzIzPO7jsM4eKRH+KoPgzP5QEdWpiF9m1adyqCjn\nVA1gVJgZWq3duEYFNxVJ7ImUvwHaA00GmPetqxSFsgTa9oNBnL+k+p980aH3grbw\n5/ZzEppyEPA3kxyd09AEPyhX3atYWqP0khoy274/g6rPdsoACbw=\n=jg/U\n-----END PGP SIGNATURE-----",
        "payload": "tree de330dbfca90469a863288cfee9670ad9e7de4da\nparent bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1490616014 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1491120763 +0200\n\nUse \"return false\" instead assert() in CWallet::SignTransaction\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51ea44f01c0d63aeacb8657b6305040b3419e9f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51ea44f01c0d63aeacb8657b6305040b3419e9f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51ea44f01c0d63aeacb8657b6305040b3419e9f1/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bcc72cccc72f020d6896bbbf4e85df11e1d5a4f0"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d415bb09c6b013d891353c423b02fdebbf23f2f5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ea44f01c0d63aeacb8657b6305040b3419e9f1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ea44f01c0d63aeacb8657b6305040b3419e9f1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=51ea44f01c0d63aeacb8657b6305040b3419e9f1",
        "patch": "@@ -2263,7 +2263,9 @@ bool CWallet::SignTransaction(CMutableTransaction &tx)\n     int nIn = 0;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n-        assert(mi != mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n+            return false;\n+        }\n         const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n         const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n         SignatureData sigdata;"
      }
    ]
  },
  {
    "sha": "bb78c1599e555fbece13ad50ab4b1dfa68ebc372",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjc4YzE1OTllNTU1ZmJlY2UxM2FkNTBhYjRiMWRmYTY4ZWJjMzcy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-03-28T06:56:35Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-02T08:12:43Z"
      },
      "message": "Restore CalculateMaximumSignedTxSize function signature",
      "tree": {
        "sha": "5c3778685a4d6fcee5e2af7821e436c231397a15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c3778685a4d6fcee5e2af7821e436c231397a15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb78c1599e555fbece13ad50ab4b1dfa68ebc372",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAljgsnsACgkQHrd2uwPH\nki2UMw/9GPS5l+HDFq8rCXTlXdxZovRAnqYpnW861hGAKREBPXMbc4d4GqSuQ3zV\nczXabb3H1tDbF8O9qvbo+UH2vJXjcQSCOtVGNO1ARtr4ksMIc3QsNIUJrOD0HOCB\nVO4mh1SAUQxdMnYtcnhaQcXvRG/Ry85xrwCxoybE2mQf7V8P1ATHtsYeisuXSsQL\nprjE5EzDn9UzrYWbaBVuW60kMHuA4JveXL+ce0Yeko5rGNTc+Ga+iA8SnaxiloPs\n4Z9WsT+MPZ9ZxsaG+KgcXhP4FcIJLnx52Z2pl3NtmcGHPiV8QmjJUohk9NGTtKpH\nNns8eaX+kgWlCZWx5eh3D2T0Va1lxAbE6ucDu8HXFF/jKIbbDir/7K9KeGCJ6s7X\n/L7Vj0hWsMxmBavQ01mhYWDmcSEFym4R+steDqxNND9BeNRGxjSLtqfDrAkUiNXq\noJZwsA8z8zaP+q5eUigy17zumdZrGFTy9yS01Byfah3mGgLsNPTTt51iaFjlite6\nyf99QFTd1shk4h48VvtDCzgw8pQLNvBUyx+TQagRaJTISTcp/eZMh1IxiB1Ole6V\nMVh0cl34zByVuauD+H4exR3x9q3ORb+nOXyJZIFFVPFcKmmCTjYUKMoP9vD4UyxM\n3A5ckn39BfUGnexIHqhmAAtuP49Mbe3IGmsmzb9zfq7iZ2vXsTI=\n=NzKz\n-----END PGP SIGNATURE-----",
        "payload": "tree 5c3778685a4d6fcee5e2af7821e436c231397a15\nparent 51ea44f01c0d63aeacb8657b6305040b3419e9f1\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1490684195 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1491120763 +0200\n\nRestore CalculateMaximumSignedTxSize function signature\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb78c1599e555fbece13ad50ab4b1dfa68ebc372",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb78c1599e555fbece13ad50ab4b1dfa68ebc372",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb78c1599e555fbece13ad50ab4b1dfa68ebc372/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51ea44f01c0d63aeacb8657b6305040b3419e9f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51ea44f01c0d63aeacb8657b6305040b3419e9f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51ea44f01c0d63aeacb8657b6305040b3419e9f1"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "61b7a730b564bcec06a9661e5d6c72adf47c7a2a",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb78c1599e555fbece13ad50ab4b1dfa68ebc372/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb78c1599e555fbece13ad50ab4b1dfa68ebc372/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=bb78c1599e555fbece13ad50ab4b1dfa68ebc372",
        "patch": "@@ -20,7 +20,7 @@\n // calculation, but we should be able to refactor after priority is removed).\n // NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n // be IsAllFromMe).\n-int64_t CalculateMaximumSignedTxSize(const CWallet *pWallet, const CTransaction &tx)\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet)\n {\n     CMutableTransaction txNew(tx);\n     std::vector<std::pair<const CWalletTx *, unsigned int>> vCoins;\n@@ -120,7 +120,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n \n     // Calculate the expected size of the new transaction.\n     int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n-    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(pWallet, *wtx.tx);\n+    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx, pWallet);\n     if (maxNewTxSize < 0) {\n         vErrors.push_back(\"Transaction contains inputs that cannot be signed\");\n         currentResult = BumpFeeResult::INVALID_ADDRESS_OR_KEY;"
      }
    ]
  },
  {
    "sha": "44cabe6380d63505b30d4f854bbbe7926201a2a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NGNhYmU2MzgwZDYzNTA1YjMwZDRmODU0YmJiZTc5MjYyMDFhMmE5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-03-28T07:06:46Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-02T08:12:43Z"
      },
      "message": "Use static calls for GetRequiredFee and GetMinimumFee, remove make_pair from emplace_back",
      "tree": {
        "sha": "e7a9bbf6987c4a0d3c0c141e6029d2bde3183afd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7a9bbf6987c4a0d3c0c141e6029d2bde3183afd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44cabe6380d63505b30d4f854bbbe7926201a2a9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAljgsnsACgkQHrd2uwPH\nki11Dg/+NKOA4ya3OBone4kk+xlftPEN5hfoAlxXmEMfjASChoTOZQTCnqQo4CvQ\nJdtZhcYcbI3CPEUXkJV4zwQnbj2cDj688sSvCjBvAJ6+cGOxGQ2Hbwyi6Uy1kEkg\n3bgSFchXn9xJwkpAjH59N+IVGGYZE29+1jPH7R2DIxzHeG9UqSKEuQIowmLWIGD/\nqQj7fOK1OwTrD9GTVtVb5KbYGhDx6apyMiP41I0F/wHeB3zX8aM2qAywim+x7BVR\nFYHqxKtaoBhMbhy8ubgvohD/RDKbhUDdERVAxYvc2ArZb5QsrnZwMpCCURHL6QSy\nLoZt/BxniKNpvycOJymOQq9tWYDgeox/N0BuAx76t6raLW+gua7J8MGOh8xR3f3c\nAD29sOzQKSpxyOXILFVHmPcJhBA+4RkIQDsTp/wGRKi57IHTwVQnpMoH6yTyqu85\nZCVy7tMpQ7+8oX4Y4hmTxPp+5b8Kbx4g1GcmlM9+iJsS+KxCOVt69mjUgvJDypgh\n8FgDN93q58PDFV4zoRBzkV/D8cmccNeQ+fF8RIqmF5AO3BVt2IL/Iehq5yKDhavX\noDKeUHFI33N2IT1rvo0diZ7SoOk8k9FrbNAJ/g3hr9DTnZpNWB1KSWOslxytKeg8\nn7CXcgaH2qPyHUKOu+8/ue8Xaaym0FBOTE2X1Uxsm9fgPgO59E0=\n=7EjV\n-----END PGP SIGNATURE-----",
        "payload": "tree e7a9bbf6987c4a0d3c0c141e6029d2bde3183afd\nparent bb78c1599e555fbece13ad50ab4b1dfa68ebc372\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1490684806 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1491120763 +0200\n\nUse static calls for GetRequiredFee and GetMinimumFee, remove make_pair from emplace_back\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44cabe6380d63505b30d4f854bbbe7926201a2a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44cabe6380d63505b30d4f854bbbe7926201a2a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44cabe6380d63505b30d4f854bbbe7926201a2a9/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb78c1599e555fbece13ad50ab4b1dfa68ebc372",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb78c1599e555fbece13ad50ab4b1dfa68ebc372",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb78c1599e555fbece13ad50ab4b1dfa68ebc372"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9ebb36f36e69fdf73230da9a4c22eb1a8217ec42",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44cabe6380d63505b30d4f854bbbe7926201a2a9/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44cabe6380d63505b30d4f854bbbe7926201a2a9/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=44cabe6380d63505b30d4f854bbbe7926201a2a9",
        "patch": "@@ -30,7 +30,7 @@ int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWal\n     for (auto& input : tx.vin) {\n         const auto mi = pWallet->mapWallet.find(input.prevout.hash);\n         assert(mi != pWallet->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n-        vCoins.emplace_back(std::make_pair(&(mi->second), input.prevout.n));\n+        vCoins.emplace_back(&(mi->second), input.prevout.n);\n     }\n     if (!pWallet->DummySignTx(txNew, vCoins)) {\n         // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n@@ -147,7 +147,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n             currentResult = BumpFeeResult::INVALID_PARAMETER;\n             return;\n         }\n-        CAmount requiredFee = pWallet->GetRequiredFee(maxNewTxSize);\n+        CAmount requiredFee = CWallet::GetRequiredFee(maxNewTxSize);\n         if (totalFee < requiredFee) {\n             vErrors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n                                                                 FormatMoney(requiredFee)));\n@@ -159,11 +159,11 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n     } else {\n         // if user specified a confirm target then don't consider any global payTxFee\n         if (specifiedConfirmTarget) {\n-            nNewFee = pWallet->GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, CAmount(0));\n+            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, CAmount(0));\n         }\n         // otherwise use the regular wallet logic to select payTxFee or default confirm target\n         else {\n-            nNewFee = pWallet->GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool);\n+            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool);\n         }\n \n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);"
      }
    ]
  },
  {
    "sha": "0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGYyMmVkNmZkMGI4M2QxODFkYzhjZTM3ODZhNDdkYTBmMWQ1OGFl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-03-28T07:08:01Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-02T08:12:43Z"
      },
      "message": "Cancel feebump is vErrors is not empty",
      "tree": {
        "sha": "4e6b8504477eefbd1b60670d01fed050bb6ce45d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e6b8504477eefbd1b60670d01fed050bb6ce45d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAljgsnsACgkQHrd2uwPH\nki323A//SQiC/xuFsYR/sn2cEsz46YqnJaK+2PfE3VUVMIpItaTziTLqeAWU9GSW\n1IwhrOczWTr2FzrdhXPdzo7zHtZf7NjBP9lP3yuteXGU55sPUFIM323L5MgbPjdq\nFj+3Ino/X9yIncG7k5EcZ7Ncf8AE6y5K0kRn+zUN5oL8Yi6D6Vtay0w6JV43TGmJ\nllFGZM2gQTbT3mQH1/R8nqHkA9Nezf2R6cJKEMPcu9w/ZiOFYEnmuibPpV7vICS4\naeEmNBI+oANztd0/sYIX0+rJ4ifFgguQ296YZDna5Iq8p7JOedjaN1+oi2HBgrf2\n329z9UUk4hzJJcyHuV3xQGyoPSw+VkppGgJuFizcbqxWDLxHfQCBDEi+iwk4ws7U\n21kYPiAlGTYoj4HZ1K5r0G+RTe4scwL+CT34OsTFGyfXqaUtdmA8VlW4RqUkmyuQ\nlRNgNVH6RvvSD57gJXXfdrdllYtH84MPw6ehF6hhqfvofMkY+0wqYnYj/MMHy3zc\nqwbzaExJmwawR81l1A5Zv4rUjjf+zvsd3JJO2AX0PZ2SzKcjeIvFSfYVyEjd1q9D\nW1lCQqAzwv+BS393W8fR9fx78wew30yRhamy9eI2GDW0CQaPcat0QEez4U2JYVVn\nC/LC67ZXtbJNX7AUMEPAuDtrGD4FsXlYBVbKfRbYZcBGpMhitA8=\n=SXmm\n-----END PGP SIGNATURE-----",
        "payload": "tree 4e6b8504477eefbd1b60670d01fed050bb6ce45d\nparent 44cabe6380d63505b30d4f854bbbe7926201a2a9\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1490684881 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1491120763 +0200\n\nCancel feebump is vErrors is not empty\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44cabe6380d63505b30d4f854bbbe7926201a2a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44cabe6380d63505b30d4f854bbbe7926201a2a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44cabe6380d63505b30d4f854bbbe7926201a2a9"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "73de2395291c6e47cbab27466fa330984c2ae83e",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae",
        "patch": "@@ -232,7 +232,9 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n bool CFeeBumper::commit(CWallet *pWallet)\n {\n     AssertLockHeld(pWallet->cs_wallet);\n-    vErrors.clear();\n+    if (!vErrors.empty() || currentResult != BumpFeeResult::OK) {\n+        return false;\n+    }\n     if (txid.IsNull() || !pWallet->mapWallet.count(txid)) {\n         vErrors.push_back(\"Invalid or non-wallet transaction id\");\n         currentResult = BumpFeeResult::MISC_ERROR;"
      }
    ]
  },
  {
    "sha": "5f59d3ecb7f1b63579e7f07fc520459cdf119c81",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjU5ZDNlY2I3ZjFiNjM1NzllN2YwN2ZjNTIwNDU5Y2RmMTE5Yzgx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-03-30T07:26:21Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-02T08:12:43Z"
      },
      "message": "Improve CFeeBumper interface, add comments, make use of std::move",
      "tree": {
        "sha": "2676a11700b27907a255ee47199cbfbb1926e73d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2676a11700b27907a255ee47199cbfbb1926e73d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f59d3ecb7f1b63579e7f07fc520459cdf119c81",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAljgsnsACgkQHrd2uwPH\nki2x4BAAoL+d8nVzwlURSRVBo/lxPNyIGx9qJrB47SaADvG5ygxAAd4rx7ZHY1HE\nAwoGimL+h50imnDaL+BGRI1lLNPkS9A9PaOx1XGyReUG1j4x7RnEsWUIHu+DtCE+\n2OZtOJ8G/v3wsNrTv24YZExenixE2lpSRwLdchLL/Gc8dA2p8t8c2FQiyL4BccE8\nhFUvHPk3owFbO7mOI6Y/JRQj9+TbHvQqPK9biJABTQsMgYQl6w1S9dNZep/co1ei\nc0fmDGdrf2NnlIHH/HV9n4FpDPbUBpMdqp44pRjSiWAiMeZSNj1m5ITvA0P5jmay\n3WseMuH8XzbJY4o/cbsDXMndQ34MpAxj7CBFOqKLupgkMnOcwvGQGKw7jdc7+ljr\nWxFAorS0V1hJ8I/8/inIxUS8BRZ7GPuaFkpzlyV8Nl8P8TJl3NTndAKqM65y+m4W\nonVDzC3ONQ0aLlJ0Ymy88Y+Z0SvLPZ8pQ+ba3TbjQkU2+Qgzvi/hfU3ZWT4DkhhJ\n8BJSF8lfoCoHzzcagqcGj8tYjgAI4RX8yQjNMNoJsL66RBhUeRK4xhMGiZca3oHO\nWlN2Nv79vHUfngzdJvaHdM48rHrNRtmJRE8y/EaAGfR20VSkZRXKUdTp0qs7o8gA\nSApuHK4uS6gAAP35MCnHYWV37PTPuv0DExs1tRcHyFo/5jGWV+M=\n=h42/\n-----END PGP SIGNATURE-----",
        "payload": "tree 2676a11700b27907a255ee47199cbfbb1926e73d\nparent 0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1490858781 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1491120763 +0200\n\nImprove CFeeBumper interface, add comments, make use of std::move\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f59d3ecb7f1b63579e7f07fc520459cdf119c81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f59d3ecb7f1b63579e7f07fc520459cdf119c81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f59d3ecb7f1b63579e7f07fc520459cdf119c81/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0df22ed6fd0b83d181dc8ce3786a47da0f1d58ae"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 18,
      "deletions": 3
    },
    "files": [
      {
        "sha": "fe3871a91d9b8c75e22ddfd0a5f714a71bfd278f",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f59d3ecb7f1b63579e7f07fc520459cdf119c81/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f59d3ecb7f1b63579e7f07fc520459cdf119c81/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=5f59d3ecb7f1b63579e7f07fc520459cdf119c81",
        "patch": "@@ -42,7 +42,7 @@ int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWal\n \n CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConfirmTarget, bool specifiedConfirmTarget, CAmount totalFee, bool newTxReplaceable)\n     :\n-    txid(txidIn),\n+    txid(std::move(txidIn)),\n     nOldFee(0),\n     nNewFee(0)\n {\n@@ -229,6 +229,11 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n     currentResult = BumpFeeResult::OK;\n }\n \n+bool CFeeBumper::signTransaction(CWallet *pWallet)\n+{\n+     return pWallet->SignTransaction(mtx);\n+}\n+\n bool CFeeBumper::commit(CWallet *pWallet)\n {\n     AssertLockHeld(pWallet->cs_wallet);"
      },
      {
        "sha": "1a30499893fc067af7dbc01d59400eefd8e4868a",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f59d3ecb7f1b63579e7f07fc520459cdf119c81/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f59d3ecb7f1b63579e7f07fc520459cdf119c81/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=5f59d3ecb7f1b63579e7f07fc520459cdf119c81",
        "patch": "@@ -28,9 +28,19 @@ class CFeeBumper\n     const std::vector<std::string>& getErrors() const { return vErrors; }\n     CAmount getOldFee() const { return nOldFee; }\n     CAmount getNewFee() const { return nNewFee; }\n-    CMutableTransaction* getBumpedTxRef() { return &mtx; }\n     uint256 getBumpedTxId() const { return bumpedTxid; }\n \n+    /* signs the new transaction,\n+     * returns false if the tx couldn't be found or if it was\n+     * improssible to create the signature(s)\n+     */\n+    bool signTransaction(CWallet *pWallet);\n+\n+    /* commits the fee bump,\n+     * returns true, in case of CWallet::CommitTransaction was successful\n+     * but, eventually sets vErrors if the tx could not be added to the mempool (will try later)\n+     * or if the old transaction could not be marked as replaced\n+     */\n     bool commit(CWallet *pWalletNonConst);\n \n private:"
      },
      {
        "sha": "2cc3072c16aed4548604a937a16b40bbc42df7dc",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f59d3ecb7f1b63579e7f07fc520459cdf119c81/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f59d3ecb7f1b63579e7f07fc520459cdf119c81/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5f59d3ecb7f1b63579e7f07fc520459cdf119c81",
        "patch": "@@ -2895,7 +2895,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     }\n \n     // sign bumped transaction\n-    if (!pwallet->SignTransaction(*feeBump.getBumpedTxRef())) {\n+    if (!feeBump.signTransaction(pwallet)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n     }\n     // commit the bumped transaction"
      }
    ]
  },
  {
    "sha": "19e36bbef60bfed36954fa515e57dfb074d7a3da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOWUzNmJiZWY2MGJmZWQzNjk1NGZhNTE1ZTU3ZGZiMDc0ZDdhM2Rh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-01T15:53:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-03T10:32:32Z"
      },
      "message": "Add fs.cpp/h",
      "tree": {
        "sha": "bf957da20730fb6a2e83871fe2e7bbcbba543e43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf957da20730fb6a2e83871fe2e7bbcbba543e43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19e36bbef60bfed36954fa515e57dfb074d7a3da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19e36bbef60bfed36954fa515e57dfb074d7a3da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19e36bbef60bfed36954fa515e57dfb074d7a3da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19e36bbef60bfed36954fa515e57dfb074d7a3da/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2cd0b0eecfedb6aa6a9d3618f13cd77e1ba3042",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2cd0b0eecfedb6aa6a9d3618f13cd77e1ba3042",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2cd0b0eecfedb6aa6a9d3618f13cd77e1ba3042"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 43,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8680546b995b983589fa58b52d6f6381c247ded0",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19e36bbef60bfed36954fa515e57dfb074d7a3da/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19e36bbef60bfed36954fa515e57dfb074d7a3da/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=19e36bbef60bfed36954fa515e57dfb074d7a3da",
        "patch": "@@ -98,6 +98,7 @@ BITCOIN_CORE_H = \\\n   core_io.h \\\n   core_memusage.h \\\n   cuckoocache.h \\\n+  fs.h \\\n   httprpc.h \\\n   httpserver.h \\\n   indirectmap.h \\\n@@ -326,6 +327,7 @@ libbitcoin_util_a_SOURCES = \\\n   compat/glibc_sanity.cpp \\\n   compat/glibcxx_sanity.cpp \\\n   compat/strnlen.cpp \\\n+  fs.cpp \\\n   random.cpp \\\n   rpc/protocol.cpp \\\n   support/cleanse.cpp \\"
      },
      {
        "sha": "6f2b768de322f4c1de51ae8ada66955fcec5faad",
        "filename": "src/fs.cpp",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19e36bbef60bfed36954fa515e57dfb074d7a3da/src/fs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19e36bbef60bfed36954fa515e57dfb074d7a3da/src/fs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.cpp?ref=19e36bbef60bfed36954fa515e57dfb074d7a3da",
        "patch": "@@ -0,0 +1,17 @@\n+#include \"fs.h\"\n+\n+#include <boost/filesystem.hpp>\n+\n+namespace fsbridge {\n+\n+FILE *fopen(const fs::path& p, const char *mode)\n+{\n+    return ::fopen(p.string().c_str(), mode);\n+}\n+\n+FILE *freopen(const fs::path& p, const char *mode, FILE *stream)\n+{\n+    return ::freopen(p.string().c_str(), mode, stream);\n+}\n+\n+} // fsbridge"
      },
      {
        "sha": "585cbf9c38254fc3cf1e0ffd5a779eb15ee28be5",
        "filename": "src/fs.h",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19e36bbef60bfed36954fa515e57dfb074d7a3da/src/fs.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19e36bbef60bfed36954fa515e57dfb074d7a3da/src/fs.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.h?ref=19e36bbef60bfed36954fa515e57dfb074d7a3da",
        "patch": "@@ -0,0 +1,24 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_FS_H\n+#define BITCOIN_FS_H\n+\n+#include <stdio.h>\n+#include <string>\n+\n+#include <boost/filesystem.hpp>\n+#include <boost/filesystem/fstream.hpp>\n+#include <boost/filesystem/detail/utf8_codecvt_facet.hpp>\n+\n+/** Filesystem operations and types */\n+namespace fs = boost::filesystem;\n+\n+/** Bridge operations to C stdio */\n+namespace fsbridge {\n+    FILE *fopen(const fs::path& p, const char *mode);\n+    FILE *freopen(const fs::path& p, const char *mode, FILE *stream);\n+};\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDUxNzJkMzU0MzlhMGNjZDQ4Y2ZkZDkyYWEwYjZiY2E5YTNiZWU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-01T15:54:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-03T10:32:32Z"
      },
      "message": "Replace includes of boost/filesystem.h with fs.h\n\nThis is step one in abstracting the use of boost::filesystem.",
      "tree": {
        "sha": "3a3362fac876fdd076c6da47e3c4dfe8693f6590",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a3362fac876fdd076c6da47e3c4dfe8693f6590"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19e36bbef60bfed36954fa515e57dfb074d7a3da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19e36bbef60bfed36954fa515e57dfb074d7a3da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19e36bbef60bfed36954fa515e57dfb074d7a3da"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 28,
      "deletions": 37
    },
    "files": [
      {
        "sha": "2c242538537b9e27dd7cb462ea1a11e3c672e986",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -8,13 +8,13 @@\n #include \"addrman.h\"\n #include \"chainparams.h\"\n #include \"clientversion.h\"\n+#include \"fs.h\"\n #include \"hash.h\"\n #include \"random.h\"\n #include \"streams.h\"\n #include \"tinyformat.h\"\n #include \"util.h\"\n \n-#include <boost/filesystem.hpp>\n \n CBanDB::CBanDB()\n {"
      },
      {
        "sha": "f68845f879fa0a007a6c5555781ca0d15303e483",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -6,11 +6,11 @@\n #ifndef BITCOIN_ADDRDB_H\n #define BITCOIN_ADDRDB_H\n \n+#include \"fs.h\"\n #include \"serialize.h\"\n \n #include <string>\n #include <map>\n-#include <boost/filesystem/path.hpp>\n \n class CSubNet;\n class CAddrMan;"
      },
      {
        "sha": "4d81ae62d0b481ccbe286216a9bb9422bb550ab2",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -9,12 +9,12 @@\n \n #include \"chainparamsbase.h\"\n #include \"clientversion.h\"\n+#include \"fs.h\"\n #include \"rpc/client.h\"\n #include \"rpc/protocol.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n-#include <boost/filesystem/operations.hpp>\n #include <stdio.h>\n \n #include <event2/buffer.h>"
      },
      {
        "sha": "45502e02ee6d7aad747fa3d024a1f97d9f4fc6d2",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -10,6 +10,7 @@\n #include \"chainparams.h\"\n #include \"clientversion.h\"\n #include \"compat.h\"\n+#include \"fs.h\"\n #include \"rpc/server.h\"\n #include \"init.h\"\n #include \"noui.h\"\n@@ -20,7 +21,6 @@\n #include \"utilstrencodings.h\"\n \n #include <boost/algorithm/string/predicate.hpp>\n-#include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n #include <stdio.h>"
      },
      {
        "sha": "d2acfe241677de5af10bd79da3312ec1498838ef",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -4,11 +4,10 @@\n \n #include \"dbwrapper.h\"\n \n+#include \"fs.h\"\n #include \"util.h\"\n #include \"random.h\"\n \n-#include <boost/filesystem.hpp>\n-\n #include <leveldb/cache.h>\n #include <leveldb/env.h>\n #include <leveldb/filter_policy.h>"
      },
      {
        "sha": "a6e3ba1656c871853561ac9728148d5318085e29",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -6,14 +6,13 @@\n #define BITCOIN_DBWRAPPER_H\n \n #include \"clientversion.h\"\n+#include \"fs.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"version.h\"\n \n-#include <boost/filesystem/path.hpp>\n-\n #include <leveldb/db.h>\n #include <leveldb/write_batch.h>\n "
      },
      {
        "sha": "39cff2316f1705caf91a8ff44042abeb69665f72",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -16,6 +16,7 @@\n #include \"checkpoints.h\"\n #include \"compat/sanity.h\"\n #include \"consensus/validation.h\"\n+#include \"fs.h\"\n #include \"httpserver.h\"\n #include \"httprpc.h\"\n #include \"key.h\"\n@@ -56,7 +57,6 @@\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/algorithm/string/split.hpp>\n #include <boost/bind.hpp>\n-#include <boost/filesystem.hpp>\n #include <boost/function.hpp>\n #include <boost/interprocess/sync/file_lock.hpp>\n #include <boost/thread.hpp>"
      },
      {
        "sha": "0fb0ad5039636c324a1562f9e7c406c5dd71e453",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -11,6 +11,7 @@\n #include \"amount.h\"\n #include \"bloom.h\"\n #include \"compat.h\"\n+#include \"fs.h\"\n #include \"hash.h\"\n #include \"limitedmap.h\"\n #include \"netaddress.h\"\n@@ -32,7 +33,6 @@\n #include <arpa/inet.h>\n #endif\n \n-#include <boost/filesystem/path.hpp>\n #include <boost/foreach.hpp>\n #include <boost/signals2/signal.hpp>\n "
      },
      {
        "sha": "c0cdad3b1e010d317bc72942b733877d2d2e7c61",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -10,6 +10,7 @@\n \n #include \"chainparams.h\"\n #include \"clientmodel.h\"\n+#include \"fs.h\"\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n #include \"intro.h\"\n@@ -38,7 +39,6 @@\n \n #include <stdint.h>\n \n-#include <boost/filesystem/operations.hpp>\n #include <boost/thread.hpp>\n \n #include <QApplication>"
      },
      {
        "sha": "bebba259d0d9669513661935826f4e2b03dbc6d7",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -9,6 +9,7 @@\n #include \"qvalidatedlineedit.h\"\n #include \"walletmodel.h\"\n \n+#include \"fs.h\"\n #include \"primitives/transaction.h\"\n #include \"init.h\"\n #include \"policy/policy.h\"\n@@ -35,9 +36,6 @@\n #include \"shlwapi.h\"\n #endif\n \n-#include <boost/filesystem.hpp>\n-#include <boost/filesystem/fstream.hpp>\n-#include <boost/filesystem/detail/utf8_codecvt_facet.hpp>\n #include <boost/scoped_array.hpp>\n \n #include <QAbstractItemView>"
      },
      {
        "sha": "afe216615431cb651e7ccd3cf3e8035b4275256c",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_QT_GUIUTIL_H\n \n #include \"amount.h\"\n+#include \"fs.h\"\n \n #include <QEvent>\n #include <QHeaderView>\n@@ -16,8 +17,6 @@\n #include <QTableView>\n #include <QLabel>\n \n-#include <boost/filesystem.hpp>\n-\n class QValidatedLineEdit;\n class SendCoinsRecipient;\n "
      },
      {
        "sha": "bafdfc917e8aa90cffac21908e50061417dcc5a3",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -6,15 +6,14 @@\n #include \"config/bitcoin-config.h\"\n #endif\n \n+#include \"fs.h\"\n #include \"intro.h\"\n #include \"ui_intro.h\"\n \n #include \"guiutil.h\"\n \n #include \"util.h\"\n \n-#include <boost/filesystem.hpp>\n-\n #include <QFileDialog>\n #include <QSettings>\n #include <QMessageBox>"
      },
      {
        "sha": "965f98db33e91699a8d9509a36259d089e7bcb31",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"chainparams.h\"\n #include \"consensus/validation.h\"\n+#include \"fs.h\"\n #include \"validation.h\"\n #include \"rpc/register.h\"\n #include \"rpc/server.h\"\n@@ -17,8 +18,6 @@\n #include <QDir>\n #include <QtGlobal>\n \n-#include <boost/filesystem.hpp>\n-\n static UniValue rpcNestedTest_rpc(const JSONRPCRequest& request)\n {\n     if (request.fHelp) {"
      },
      {
        "sha": "fa1d8042bcf5914d35c11947c2e1ff9d7b688c86",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -6,11 +6,12 @@\n #ifndef BITCOIN_RPCPROTOCOL_H\n #define BITCOIN_RPCPROTOCOL_H\n \n+#include \"fs.h\"\n+\n #include <list>\n #include <map>\n #include <stdint.h>\n #include <string>\n-#include <boost/filesystem.hpp>\n \n #include <univalue.h>\n "
      },
      {
        "sha": "4032c5163c87d2db2ecb3d1cd3994d8e963ebb13",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -6,6 +6,7 @@\n #include \"rpc/server.h\"\n \n #include \"base58.h\"\n+#include \"fs.h\"\n #include \"init.h\"\n #include \"random.h\"\n #include \"sync.h\"\n@@ -16,7 +17,6 @@\n #include <univalue.h>\n \n #include <boost/bind.hpp>\n-#include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n #include <boost/shared_ptr.hpp>\n #include <boost/signals2/signal.hpp>"
      },
      {
        "sha": "4a12277a3644f365bbc9361e4a0d90bd2d023b9a",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -7,6 +7,7 @@\n #include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n+#include \"fs.h\"\n #include \"key.h\"\n #include \"validation.h\"\n #include \"miner.h\"\n@@ -24,7 +25,6 @@\n \n #include <memory>\n \n-#include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n FastRandomContext insecure_rand_ctx(true);"
      },
      {
        "sha": "d67d35a37013104594330c40ff3c0a0e8145cb73",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -6,12 +6,12 @@\n #define BITCOIN_TEST_TEST_BITCOIN_H\n \n #include \"chainparamsbase.h\"\n+#include \"fs.h\"\n #include \"key.h\"\n #include \"pubkey.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n \n-#include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n /** Basic testing setup."
      },
      {
        "sha": "96ce4db2fe6a754192c57ea5c994abb283f5a811",
        "filename": "src/test/testutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/test/testutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/test/testutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/testutil.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -8,7 +8,7 @@\n #include <shlobj.h>\n #endif\n \n-#include <boost/filesystem.hpp>\n+#include \"fs.h\"\n \n boost::filesystem::path GetTempPath() {\n     return boost::filesystem::temp_directory_path();"
      },
      {
        "sha": "e2d0de0e26b7b2ac4264ca15713467080fb3d72f",
        "filename": "src/test/testutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/test/testutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/test/testutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/testutil.h?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -8,7 +8,7 @@\n #ifndef BITCOIN_TEST_TESTUTIL_H\n #define BITCOIN_TEST_TESTUTIL_H\n \n-#include <boost/filesystem/path.hpp>\n+#include \"fs.h\"\n \n boost::filesystem::path GetTempPath();\n "
      },
      {
        "sha": "600036eab0169cb608213516253b942dfde3a7c8",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -10,6 +10,7 @@\n #include \"util.h\"\n \n #include \"chainparamsbase.h\"\n+#include \"fs.h\"\n #include \"random.h\"\n #include \"serialize.h\"\n #include \"sync.h\"\n@@ -79,8 +80,6 @@\n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n #include <boost/algorithm/string/join.hpp>\n #include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()\n-#include <boost/filesystem.hpp>\n-#include <boost/filesystem/fstream.hpp>\n #include <boost/foreach.hpp>\n #include <boost/program_options/detail/config_file.hpp>\n #include <boost/program_options/parsers.hpp>"
      },
      {
        "sha": "1dbf044105b510fc94e7e9cfb1a912d5af486731",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -15,6 +15,7 @@\n #endif\n \n #include \"compat.h\"\n+#include \"fs.h\"\n #include \"tinyformat.h\"\n #include \"utiltime.h\"\n \n@@ -25,7 +26,6 @@\n #include <string>\n #include <vector>\n \n-#include <boost/filesystem/path.hpp>\n #include <boost/signals2/signal.hpp>\n #include <boost/thread/exceptions.hpp>\n "
      },
      {
        "sha": "df6b8e41e750ce89eaf7562f0468c76449fa3171",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -12,6 +12,7 @@\n #include \"consensus/consensus.h\"\n #include \"consensus/merkle.h\"\n #include \"consensus/validation.h\"\n+#include \"fs.h\"\n #include \"hash.h\"\n #include \"init.h\"\n #include \"policy/fees.h\"\n@@ -41,8 +42,6 @@\n \n #include <boost/algorithm/string/replace.hpp>\n #include <boost/algorithm/string/join.hpp>\n-#include <boost/filesystem.hpp>\n-#include <boost/filesystem/fstream.hpp>\n #include <boost/math/distributions/poisson.hpp>\n #include <boost/thread.hpp>\n "
      },
      {
        "sha": "0d0bf66ab5e5bb6500b91c7b7f4be22835f3e10b",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -13,6 +13,7 @@\n #include \"amount.h\"\n #include \"chain.h\"\n #include \"coins.h\"\n+#include \"fs.h\"\n #include \"protocol.h\" // For CMessageHeader::MessageStartChars\n #include \"script/script_error.h\"\n #include \"sync.h\"\n@@ -30,7 +31,6 @@\n #include <atomic>\n \n #include <boost/unordered_map.hpp>\n-#include <boost/filesystem/path.hpp>\n \n class CBlockIndex;\n class CBlockTreeDB;"
      },
      {
        "sha": "825e233b9885a13f377e9069c9ad72578a2b8c26",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -6,6 +6,7 @@\n #include \"db.h\"\n \n #include \"addrman.h\"\n+#include \"fs.h\"\n #include \"hash.h\"\n #include \"protocol.h\"\n #include \"util.h\"\n@@ -17,7 +18,6 @@\n #include <sys/stat.h>\n #endif\n \n-#include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n #include <boost/thread.hpp>\n #include <boost/version.hpp>"
      },
      {
        "sha": "b99c3156d63081a23e500619a5f2c59acc64933f",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_WALLET_DB_H\n \n #include \"clientversion.h\"\n+#include \"fs.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n #include \"sync.h\"\n@@ -16,8 +17,6 @@\n #include <string>\n #include <vector>\n \n-#include <boost/filesystem/path.hpp>\n-\n #include <db_cxx.h>\n \n static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;"
      },
      {
        "sha": "ec0432f9cfc335c1abca13dc24ada09f8a83ed01",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -11,6 +11,7 @@\n #include \"wallet/coincontrol.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n+#include \"fs.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"validation.h\"\n@@ -30,7 +31,6 @@\n #include <assert.h>\n \n #include <boost/algorithm/string/replace.hpp>\n-#include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n CWallet* pwalletMain = NULL;"
      },
      {
        "sha": "a04e35046de302c2482eb08784708d9c351dae00",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"base58.h\"\n #include \"consensus/validation.h\"\n+#include \"fs.h\"\n #include \"validation.h\" // For CheckTransaction\n #include \"protocol.h\"\n #include \"serialize.h\"\n@@ -18,7 +19,6 @@\n #include <atomic>\n \n #include <boost/version.hpp>\n-#include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n #include <boost/thread.hpp>\n "
      }
    ]
  },
  {
    "sha": "bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYWM1YzljZjY0M2U5MzMzNDc5YWM2Njc0MjZkMGI3MGY4ZjNhYTdm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-01T16:05:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-03T10:32:32Z"
      },
      "message": "Replace uses of boost::filesystem with fs\n\nStep two in abstracting away boost::filesystem.\n\nTo repeat this, simply run:\n```\ngit ls-files \\*.cpp \\*.h | xargs sed -i 's/boost::filesystem/fs/g'\n```",
      "tree": {
        "sha": "5fc0eac69ace5d21c1a1b40e6b610058b92a4bd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5fc0eac69ace5d21c1a1b40e6b610058b92a4bd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d5172d35439a0ccd48cfdd92aa0b6bca9a3bee5"
      }
    ],
    "stats": {
      "total": 278,
      "additions": 139,
      "deletions": 139
    },
    "files": [
      {
        "sha": "5f203c8f75b473d060dca7755371c57f95031c5c",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -36,7 +36,7 @@ bool CBanDB::Write(const banmap_t& banSet)\n     ssBanlist << hash;\n \n     // open temp output file, and associate with CAutoFile\n-    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n+    fs::path pathTmp = GetDataDir() / tmpfn;\n     FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n     CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n@@ -68,7 +68,7 @@ bool CBanDB::Read(banmap_t& banSet)\n         return error(\"%s: Failed to open file %s\", __func__, pathBanlist.string());\n \n     // use file size to size memory buffer\n-    uint64_t fileSize = boost::filesystem::file_size(pathBanlist);\n+    uint64_t fileSize = fs::file_size(pathBanlist);\n     uint64_t dataSize = 0;\n     // Don't try to resize to a negative number if file is small\n     if (fileSize >= sizeof(uint256))\n@@ -133,7 +133,7 @@ bool CAddrDB::Write(const CAddrMan& addr)\n     ssPeers << hash;\n \n     // open temp output file, and associate with CAutoFile\n-    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n+    fs::path pathTmp = GetDataDir() / tmpfn;\n     FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n     CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n@@ -165,7 +165,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n         return error(\"%s: Failed to open file %s\", __func__, pathAddr.string());\n \n     // use file size to size memory buffer\n-    uint64_t fileSize = boost::filesystem::file_size(pathAddr);\n+    uint64_t fileSize = fs::file_size(pathAddr);\n     uint64_t dataSize = 0;\n     // Don't try to resize to a negative number if file is small\n     if (fileSize >= sizeof(uint256))"
      },
      {
        "sha": "c3d509bd3a7a653353d00b0c9c7a5eb776fbd9dc",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -80,7 +80,7 @@ typedef std::map<CSubNet, CBanEntry> banmap_t;\n class CAddrDB\n {\n private:\n-    boost::filesystem::path pathAddr;\n+    fs::path pathAddr;\n public:\n     CAddrDB();\n     bool Write(const CAddrMan& addr);\n@@ -92,7 +92,7 @@ class CAddrDB\n class CBanDB\n {\n private:\n-    boost::filesystem::path pathBanlist;\n+    fs::path pathBanlist;\n public:\n     CBanDB();\n     bool Write(const banmap_t& banSet);"
      },
      {
        "sha": "5edd43d41e0f81c88e7fc8e5cd879bfa9a51a930",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -96,7 +96,7 @@ static int AppInitRPC(int argc, char* argv[])\n         }\n         return EXIT_SUCCESS;\n     }\n-    if (!boost::filesystem::is_directory(GetDataDir(false))) {\n+    if (!fs::is_directory(GetDataDir(false))) {\n         fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", GetArg(\"-datadir\", \"\").c_str());\n         return EXIT_FAILURE;\n     }"
      },
      {
        "sha": "31680a8ec765ca85916f66df1e97ba567aaca72f",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -97,7 +97,7 @@ bool AppInit(int argc, char* argv[])\n \n     try\n     {\n-        if (!boost::filesystem::is_directory(GetDataDir(false)))\n+        if (!fs::is_directory(GetDataDir(false)))\n         {\n             fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", GetArg(\"-datadir\", \"\").c_str());\n             return false;"
      },
      {
        "sha": "3d2098c05927cceb8c41184536f77ab87cbe1230",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -90,7 +90,7 @@ static leveldb::Options GetOptions(size_t nCacheSize)\n     return options;\n }\n \n-CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n+CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n {\n     penv = NULL;\n     readoptions.verify_checksums = true;"
      },
      {
        "sha": "b13e98b7a4b5cbbcdf90abc869e2f1305785127a",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -194,7 +194,7 @@ class CDBWrapper\n      * @param[in] obfuscate   If true, store data obfuscated via simple XOR. If false, XOR\n      *                        with a zero'd byte array.\n      */\n-    CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false, bool obfuscate = false);\n+    CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false, bool obfuscate = false);\n     ~CDBWrapper();\n \n     template <typename K, typename V>"
      },
      {
        "sha": "808cc64f707a16078935ae95ffd449aedb134b1a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -212,7 +212,7 @@ void Shutdown()\n \n     if (fFeeEstimatesInitialized)\n     {\n-        boost::filesystem::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n+        fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n         CAutoFile est_fileout(fopen(est_path.string().c_str(), \"wb\"), SER_DISK, CLIENT_VERSION);\n         if (!est_fileout.IsNull())\n             mempool.WriteFeeEstimates(est_fileout);\n@@ -250,8 +250,8 @@ void Shutdown()\n \n #ifndef WIN32\n     try {\n-        boost::filesystem::remove(GetPidFile());\n-    } catch (const boost::filesystem::filesystem_error& e) {\n+        fs::remove(GetPidFile());\n+    } catch (const fs::filesystem_error& e) {\n         LogPrintf(\"%s: Unable to remove pidfile: %s\\n\", __func__, e.what());\n     }\n #endif\n@@ -578,14 +578,14 @@ struct CImportingNow\n // works correctly.\n void CleanupBlockRevFiles()\n {\n-    std::map<std::string, boost::filesystem::path> mapBlockFiles;\n+    std::map<std::string, fs::path> mapBlockFiles;\n \n     // Glob all blk?????.dat and rev?????.dat files from the blocks directory.\n     // Remove the rev files immediately and insert the blk file paths into an\n     // ordered map keyed by block file index.\n     LogPrintf(\"Removing unusable blk?????.dat and rev?????.dat files for -reindex with -prune\\n\");\n-    boost::filesystem::path blocksdir = GetDataDir() / \"blocks\";\n-    for (boost::filesystem::directory_iterator it(blocksdir); it != boost::filesystem::directory_iterator(); it++) {\n+    fs::path blocksdir = GetDataDir() / \"blocks\";\n+    for (fs::directory_iterator it(blocksdir); it != fs::directory_iterator(); it++) {\n         if (is_regular_file(*it) &&\n             it->path().filename().string().length() == 12 &&\n             it->path().filename().string().substr(8,4) == \".dat\")\n@@ -602,7 +602,7 @@ void CleanupBlockRevFiles()\n     // keeping a separate counter.  Once we hit a gap (or if 0 doesn't exist)\n     // start removing block files.\n     int nContigCounter = 0;\n-    BOOST_FOREACH(const PAIRTYPE(std::string, boost::filesystem::path)& item, mapBlockFiles) {\n+    BOOST_FOREACH(const PAIRTYPE(std::string, fs::path)& item, mapBlockFiles) {\n         if (atoi(item.first) == nContigCounter) {\n             nContigCounter++;\n             continue;\n@@ -611,7 +611,7 @@ void CleanupBlockRevFiles()\n     }\n }\n \n-void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n+void ThreadImport(std::vector<fs::path> vImportFiles)\n {\n     const CChainParams& chainparams = Params();\n     RenameThread(\"bitcoin-loadblk\");\n@@ -624,7 +624,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n         int nFile = 0;\n         while (true) {\n             CDiskBlockPos pos(nFile, 0);\n-            if (!boost::filesystem::exists(GetBlockPosFilename(pos, \"blk\")))\n+            if (!fs::exists(GetBlockPosFilename(pos, \"blk\")))\n                 break; // No block files left to reindex\n             FILE *file = OpenBlockFile(pos, true);\n             if (!file)\n@@ -641,11 +641,11 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n     }\n \n     // hardcoded $DATADIR/bootstrap.dat\n-    boost::filesystem::path pathBootstrap = GetDataDir() / \"bootstrap.dat\";\n-    if (boost::filesystem::exists(pathBootstrap)) {\n+    fs::path pathBootstrap = GetDataDir() / \"bootstrap.dat\";\n+    if (fs::exists(pathBootstrap)) {\n         FILE *file = fopen(pathBootstrap.string().c_str(), \"rb\");\n         if (file) {\n-            boost::filesystem::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n+            fs::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n             LogPrintf(\"Importing bootstrap.dat...\\n\");\n             LoadExternalBlockFile(chainparams, file);\n             RenameOver(pathBootstrap, pathBootstrapOld);\n@@ -655,7 +655,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n     }\n \n     // -loadblock=\n-    BOOST_FOREACH(const boost::filesystem::path& path, vImportFiles) {\n+    BOOST_FOREACH(const fs::path& path, vImportFiles) {\n         FILE *file = fopen(path.string().c_str(), \"rb\");\n         if (file) {\n             LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n@@ -1123,7 +1123,7 @@ static bool LockDataDirectory(bool probeOnly)\n     std::string strDataDir = GetDataDir().string();\n \n     // Make sure only a single Bitcoin process is using the data directory.\n-    boost::filesystem::path pathLockFile = GetDataDir() / \".lock\";\n+    fs::path pathLockFile = GetDataDir() / \".lock\";\n     FILE* file = fopen(pathLockFile.string().c_str(), \"a\"); // empty lock file; created if it doesn't exist.\n     if (file) fclose(file);\n \n@@ -1388,7 +1388,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fReindex = GetBoolArg(\"-reindex\", false);\n     bool fReindexChainState = GetBoolArg(\"-reindex-chainstate\", false);\n \n-    boost::filesystem::create_directories(GetDataDir() / \"blocks\");\n+    fs::create_directories(GetDataDir() / \"blocks\");\n \n     // cache size calculations\n     int64_t nTotalCache = (GetArg(\"-dbcache\", nDefaultDbCache) << 20);\n@@ -1534,7 +1534,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n     LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - nStart);\n \n-    boost::filesystem::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n+    fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n     CAutoFile est_filein(fopen(est_path.string().c_str(), \"rb\"), SER_DISK, CLIENT_VERSION);\n     // Allowed to fail as this file IS missing on first startup.\n     if (!est_filein.IsNull())\n@@ -1590,7 +1590,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (IsArgSet(\"-blocknotify\"))\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n \n-    std::vector<boost::filesystem::path> vImportFiles;\n+    std::vector<fs::path> vImportFiles;\n     if (mapMultiArgs.count(\"-loadblock\"))\n     {\n         BOOST_FOREACH(const std::string& strFile, mapMultiArgs.at(\"-loadblock\"))"
      },
      {
        "sha": "23ec3ab434fa5b4ca221b809680b0c6cd92f86f2",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -608,7 +608,7 @@ int main(int argc, char *argv[])\n \n     /// 6. Determine availability of data directory and parse bitcoin.conf\n     /// - Do not call GetDataDir(true) before this step finishes\n-    if (!boost::filesystem::is_directory(GetDataDir(false)))\n+    if (!fs::is_directory(GetDataDir(false)))\n     {\n         QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n                               QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(GetArg(\"-datadir\", \"\"))));"
      },
      {
        "sha": "3a1f9b8e04892bd26c25f30b5cde44f3020fd69d",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -63,7 +63,7 @@\n #include <QFontDatabase>\n #endif\n \n-static boost::filesystem::detail::utf8_codecvt_facet utf8;\n+static fs::detail::utf8_codecvt_facet utf8;\n \n #if defined(Q_OS_MAC)\n extern double NSAppKitVersionNumber;\n@@ -408,10 +408,10 @@ bool isObscured(QWidget *w)\n \n void openDebugLogfile()\n {\n-    boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n+    fs::path pathDebug = GetDataDir() / \"debug.log\";\n \n     /* Open debug.log with the associated application */\n-    if (boost::filesystem::exists(pathDebug))\n+    if (fs::exists(pathDebug))\n         QDesktopServices::openUrl(QUrl::fromLocalFile(boostPathToQString(pathDebug)));\n }\n \n@@ -595,7 +595,7 @@ TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* t\n }\n \n #ifdef WIN32\n-boost::filesystem::path static StartupShortcutPath()\n+fs::path static StartupShortcutPath()\n {\n     std::string chain = ChainNameFromCommandLine();\n     if (chain == CBaseChainParams::MAIN)\n@@ -608,13 +608,13 @@ boost::filesystem::path static StartupShortcutPath()\n bool GetStartOnSystemStartup()\n {\n     // check for Bitcoin*.lnk\n-    return boost::filesystem::exists(StartupShortcutPath());\n+    return fs::exists(StartupShortcutPath());\n }\n \n bool SetStartOnSystemStartup(bool fAutoStart)\n {\n     // If the shortcut exists already, remove it for updating\n-    boost::filesystem::remove(StartupShortcutPath());\n+    fs::remove(StartupShortcutPath());\n \n     if (fAutoStart)\n     {\n@@ -684,9 +684,9 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n // Follow the Desktop Application Autostart Spec:\n // http://standards.freedesktop.org/autostart-spec/autostart-spec-latest.html\n \n-boost::filesystem::path static GetAutostartDir()\n+fs::path static GetAutostartDir()\n {\n-    namespace fs = boost::filesystem;\n+    namespace fs = fs;\n \n     char* pszConfigHome = getenv(\"XDG_CONFIG_HOME\");\n     if (pszConfigHome) return fs::path(pszConfigHome) / \"autostart\";\n@@ -695,7 +695,7 @@ boost::filesystem::path static GetAutostartDir()\n     return fs::path();\n }\n \n-boost::filesystem::path static GetAutostartFilePath()\n+fs::path static GetAutostartFilePath()\n {\n     std::string chain = ChainNameFromCommandLine();\n     if (chain == CBaseChainParams::MAIN)\n@@ -705,7 +705,7 @@ boost::filesystem::path static GetAutostartFilePath()\n \n bool GetStartOnSystemStartup()\n {\n-    boost::filesystem::ifstream optionFile(GetAutostartFilePath());\n+    fs::ifstream optionFile(GetAutostartFilePath());\n     if (!optionFile.good())\n         return false;\n     // Scan through file for \"Hidden=true\":\n@@ -725,17 +725,17 @@ bool GetStartOnSystemStartup()\n bool SetStartOnSystemStartup(bool fAutoStart)\n {\n     if (!fAutoStart)\n-        boost::filesystem::remove(GetAutostartFilePath());\n+        fs::remove(GetAutostartFilePath());\n     else\n     {\n         char pszExePath[MAX_PATH+1];\n         memset(pszExePath, 0, sizeof(pszExePath));\n         if (readlink(\"/proc/self/exe\", pszExePath, sizeof(pszExePath)-1) == -1)\n             return false;\n \n-        boost::filesystem::create_directories(GetAutostartDir());\n+        fs::create_directories(GetAutostartDir());\n \n-        boost::filesystem::ofstream optionFile(GetAutostartFilePath(), std::ios_base::out|std::ios_base::trunc);\n+        fs::ofstream optionFile(GetAutostartFilePath(), std::ios_base::out|std::ios_base::trunc);\n         if (!optionFile.good())\n             return false;\n         std::string chain = ChainNameFromCommandLine();\n@@ -857,12 +857,12 @@ void setClipboard(const QString& str)\n     QApplication::clipboard()->setText(str, QClipboard::Selection);\n }\n \n-boost::filesystem::path qstringToBoostPath(const QString &path)\n+fs::path qstringToBoostPath(const QString &path)\n {\n-    return boost::filesystem::path(path.toStdString(), utf8);\n+    return fs::path(path.toStdString(), utf8);\n }\n \n-QString boostPathToQString(const boost::filesystem::path &path)\n+QString boostPathToQString(const fs::path &path)\n {\n     return QString::fromStdString(path.string(utf8));\n }"
      },
      {
        "sha": "f95677015641c235c0461c985fde96eeb364aca0",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -182,10 +182,10 @@ namespace GUIUtil\n     void restoreWindowGeometry(const QString& strSetting, const QSize &defaultSizeIn, QWidget *parent);\n \n     /* Convert QString to OS specific boost path through UTF-8 */\n-    boost::filesystem::path qstringToBoostPath(const QString &path);\n+    fs::path qstringToBoostPath(const QString &path);\n \n     /* Convert OS specific boost path to QString through UTF-8 */\n-    QString boostPathToQString(const boost::filesystem::path &path);\n+    QString boostPathToQString(const fs::path &path);\n \n     /* Convert seconds into a QString with days, hours, mins, secs */\n     QString formatDurationStr(int secs);"
      },
      {
        "sha": "2a7ea0ff657b8a8d305f5e718e29287e44589486",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -69,7 +69,7 @@ FreespaceChecker::FreespaceChecker(Intro *_intro)\n \n void FreespaceChecker::check()\n {\n-    namespace fs = boost::filesystem;\n+    namespace fs = fs;\n     QString dataDirStr = intro->getPathToCheck();\n     fs::path dataDir = GUIUtil::qstringToBoostPath(dataDirStr);\n     uint64_t freeBytesAvailable = 0;\n@@ -189,7 +189,7 @@ QString Intro::getDefaultDataDirectory()\n \n bool Intro::pickDataDirectory()\n {\n-    namespace fs = boost::filesystem;\n+    namespace fs = fs;\n     QSettings settings;\n     /* If data directory provided on command line, no need to look at settings\n        or show a picking dialog */"
      },
      {
        "sha": "dada689731094611f23f562a289138bf3842364b",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -155,5 +155,5 @@ void RPCNestedTests::rpcNestedTests()\n     delete pblocktree;\n     pblocktree = nullptr;\n \n-    boost::filesystem::remove_all(boost::filesystem::path(path));\n+    fs::remove_all(fs::path(path));\n }"
      },
      {
        "sha": "823a5775f6dc3b2b4680e5df981cc09d9be18269",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -66,9 +66,9 @@ static const std::string COOKIEAUTH_USER = \"__cookie__\";\n /** Default name for auth cookie file */\n static const std::string COOKIEAUTH_FILE = \".cookie\";\n \n-boost::filesystem::path GetAuthCookieFile()\n+fs::path GetAuthCookieFile()\n {\n-    boost::filesystem::path path(GetArg(\"-rpccookiefile\", COOKIEAUTH_FILE));\n+    fs::path path(GetArg(\"-rpccookiefile\", COOKIEAUTH_FILE));\n     if (!path.is_complete()) path = GetDataDir() / path;\n     return path;\n }\n@@ -84,7 +84,7 @@ bool GenerateAuthCookie(std::string *cookie_out)\n      * these are set to 077 in init.cpp unless overridden with -sysperms.\n      */\n     std::ofstream file;\n-    boost::filesystem::path filepath = GetAuthCookieFile();\n+    fs::path filepath = GetAuthCookieFile();\n     file.open(filepath.string().c_str());\n     if (!file.is_open()) {\n         LogPrintf(\"Unable to open cookie authentication file %s for writing\\n\", filepath.string());\n@@ -103,7 +103,7 @@ bool GetAuthCookie(std::string *cookie_out)\n {\n     std::ifstream file;\n     std::string cookie;\n-    boost::filesystem::path filepath = GetAuthCookieFile();\n+    fs::path filepath = GetAuthCookieFile();\n     file.open(filepath.string().c_str());\n     if (!file.is_open())\n         return false;\n@@ -118,8 +118,8 @@ bool GetAuthCookie(std::string *cookie_out)\n void DeleteAuthCookie()\n {\n     try {\n-        boost::filesystem::remove(GetAuthCookieFile());\n-    } catch (const boost::filesystem::filesystem_error& e) {\n+        fs::remove(GetAuthCookieFile());\n+    } catch (const fs::filesystem_error& e) {\n         LogPrintf(\"%s: Unable to remove random auth cookie file: %s\\n\", __func__, e.what());\n     }\n }"
      },
      {
        "sha": "70f7092cfeb659d8c870d02d4142c308c9768402",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -90,7 +90,7 @@ std::string JSONRPCReply(const UniValue& result, const UniValue& error, const Un\n UniValue JSONRPCError(int code, const std::string& message);\n \n /** Get name of RPC authentication cookie file */\n-boost::filesystem::path GetAuthCookieFile();\n+fs::path GetAuthCookieFile();\n /** Generate a new RPC authentication cookie and write it to disk */\n bool GenerateAuthCookie(std::string *cookie_out);\n /** Read the RPC authentication cookie from disk */"
      },
      {
        "sha": "c9d9849ada071ca27b169f707627c931f58475f3",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -28,7 +28,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n-        boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+        fs::path ph = fs::temp_directory_path() / fs::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n         char key = 'k';\n         uint256 in = GetRandHash();\n@@ -49,7 +49,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n-        boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+        fs::path ph = fs::temp_directory_path() / fs::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         char key = 'i';\n@@ -86,7 +86,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n-        boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+        fs::path ph = fs::temp_directory_path() / fs::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         // The two keys are intentionally chosen for ordering\n@@ -125,8 +125,8 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n // Test that we do not obfuscation if there is existing data.\n BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n {\n-    // We're going to share this boost::filesystem::path between two wrappers\n-    boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+    // We're going to share this fs::path between two wrappers\n+    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n@@ -167,8 +167,8 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n // Ensure that we start obfuscating during a reindex.\n BOOST_AUTO_TEST_CASE(existing_data_reindex)\n {\n-    // We're going to share this boost::filesystem::path between two wrappers\n-    boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+    // We're going to share this fs::path between two wrappers\n+    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n@@ -204,7 +204,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n \n BOOST_AUTO_TEST_CASE(iterator_ordering)\n {\n-    boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n     CDBWrapper dbw(ph, (1 << 20), true, false, false);\n     for (int x=0x00; x<256; ++x) {\n         uint8_t key = x;\n@@ -275,7 +275,7 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n {\n     char buf[10];\n \n-    boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n     CDBWrapper dbw(ph, (1 << 20), true, false, false);\n     for (int x=0x00; x<10; ++x) {\n         for (int y = 0; y < 10; y++) {"
      },
      {
        "sha": "bda38196622773e8c0ea4fe87fc5af119970ca2b",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -59,7 +59,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         RegisterAllCoreRPCCommands(tableRPC);\n         ClearDatadirCache();\n         pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n-        boost::filesystem::create_directories(pathTemp);\n+        fs::create_directories(pathTemp);\n         ForceSetArg(\"-datadir\", pathTemp.string());\n         mempool.setSanityCheck(1.0);\n         pblocktree = new CBlockTreeDB(1 << 20, true);\n@@ -91,7 +91,7 @@ TestingSetup::~TestingSetup()\n         delete pcoinsTip;\n         delete pcoinsdbview;\n         delete pblocktree;\n-        boost::filesystem::remove_all(pathTemp);\n+        fs::remove_all(pathTemp);\n }\n \n TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)"
      },
      {
        "sha": "60a86d8c4839093962bec59d817a31b38ded2e15",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -30,7 +30,7 @@ struct BasicTestingSetup {\n class CConnman;\n struct TestingSetup: public BasicTestingSetup {\n     CCoinsViewDB *pcoinsdbview;\n-    boost::filesystem::path pathTemp;\n+    fs::path pathTemp;\n     boost::thread_group threadGroup;\n     CConnman* connman;\n "
      },
      {
        "sha": "591d0bf30271240f9184ed472d04ab6c6096c851",
        "filename": "src/test/testutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/test/testutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/test/testutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/testutil.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -10,6 +10,6 @@\n \n #include \"fs.h\"\n \n-boost::filesystem::path GetTempPath() {\n-    return boost::filesystem::temp_directory_path();\n+fs::path GetTempPath() {\n+    return fs::temp_directory_path();\n }"
      },
      {
        "sha": "cbe784d6400b9dd4cc4339ae6803f9c1d2bb13fd",
        "filename": "src/test/testutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/test/testutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/test/testutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/testutil.h?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -10,6 +10,6 @@\n \n #include \"fs.h\"\n \n-boost::filesystem::path GetTempPath();\n+fs::path GetTempPath();\n \n #endif // BITCOIN_TEST_TESTUTIL_H"
      },
      {
        "sha": "49f4c2bc9a29224332adf3360d03d47543a4e548",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 28,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -214,7 +214,7 @@ void OpenDebugLog()\n \n     assert(fileout == NULL);\n     assert(vMsgsBeforeOpenLog);\n-    boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n+    fs::path pathDebug = GetDataDir() / \"debug.log\";\n     fileout = fopen(pathDebug.string().c_str(), \"a\");\n     if (fileout) {\n         setbuf(fileout, NULL); // unbuffered\n@@ -353,7 +353,7 @@ int LogPrintStr(const std::string &str)\n             // reopen the log file, if requested\n             if (fReopenDebugLog) {\n                 fReopenDebugLog = false;\n-                boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n+                fs::path pathDebug = GetDataDir() / \"debug.log\";\n                 if (freopen(pathDebug.string().c_str(),\"a\",fileout) != NULL)\n                     setbuf(fileout, NULL); // unbuffered\n             }\n@@ -511,9 +511,9 @@ void PrintExceptionContinue(const std::exception* pex, const char* pszThread)\n     fprintf(stderr, \"\\n\\n************************\\n%s\\n\", message.c_str());\n }\n \n-boost::filesystem::path GetDefaultDataDir()\n+fs::path GetDefaultDataDir()\n {\n-    namespace fs = boost::filesystem;\n+    namespace fs = fs;\n     // Windows < Vista: C:\\Documents and Settings\\Username\\Application Data\\Bitcoin\n     // Windows >= Vista: C:\\Users\\Username\\AppData\\Roaming\\Bitcoin\n     // Mac: ~/Library/Application Support/Bitcoin\n@@ -538,13 +538,13 @@ boost::filesystem::path GetDefaultDataDir()\n #endif\n }\n \n-static boost::filesystem::path pathCached;\n-static boost::filesystem::path pathCachedNetSpecific;\n+static fs::path pathCached;\n+static fs::path pathCachedNetSpecific;\n static CCriticalSection csPathCached;\n \n-const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n+const fs::path &GetDataDir(bool fNetSpecific)\n {\n-    namespace fs = boost::filesystem;\n+    namespace fs = fs;\n \n     LOCK(csPathCached);\n \n@@ -576,13 +576,13 @@ void ClearDatadirCache()\n {\n     LOCK(csPathCached);\n \n-    pathCached = boost::filesystem::path();\n-    pathCachedNetSpecific = boost::filesystem::path();\n+    pathCached = fs::path();\n+    pathCachedNetSpecific = fs::path();\n }\n \n-boost::filesystem::path GetConfigFile(const std::string& confPath)\n+fs::path GetConfigFile(const std::string& confPath)\n {\n-    boost::filesystem::path pathConfigFile(confPath);\n+    fs::path pathConfigFile(confPath);\n     if (!pathConfigFile.is_complete())\n         pathConfigFile = GetDataDir(false) / pathConfigFile;\n \n@@ -591,7 +591,7 @@ boost::filesystem::path GetConfigFile(const std::string& confPath)\n \n void ReadConfigFile(const std::string& confPath)\n {\n-    boost::filesystem::ifstream streamConfig(GetConfigFile(confPath));\n+    fs::ifstream streamConfig(GetConfigFile(confPath));\n     if (!streamConfig.good())\n         return; // No bitcoin.conf file is OK\n \n@@ -616,14 +616,14 @@ void ReadConfigFile(const std::string& confPath)\n }\n \n #ifndef WIN32\n-boost::filesystem::path GetPidFile()\n+fs::path GetPidFile()\n {\n-    boost::filesystem::path pathPidFile(GetArg(\"-pid\", BITCOIN_PID_FILENAME));\n+    fs::path pathPidFile(GetArg(\"-pid\", BITCOIN_PID_FILENAME));\n     if (!pathPidFile.is_complete()) pathPidFile = GetDataDir() / pathPidFile;\n     return pathPidFile;\n }\n \n-void CreatePidFile(const boost::filesystem::path &path, pid_t pid)\n+void CreatePidFile(const fs::path &path, pid_t pid)\n {\n     FILE* file = fopen(path.string().c_str(), \"w\");\n     if (file)\n@@ -634,7 +634,7 @@ void CreatePidFile(const boost::filesystem::path &path, pid_t pid)\n }\n #endif\n \n-bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest)\n+bool RenameOver(fs::path src, fs::path dest)\n {\n #ifdef WIN32\n     return MoveFileExA(src.string().c_str(), dest.string().c_str(),\n@@ -650,13 +650,13 @@ bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest)\n  * Specifically handles case where path p exists, but it wasn't possible for the user to\n  * write to the parent directory.\n  */\n-bool TryCreateDirectory(const boost::filesystem::path& p)\n+bool TryCreateDirectory(const fs::path& p)\n {\n     try\n     {\n-        return boost::filesystem::create_directory(p);\n-    } catch (const boost::filesystem::filesystem_error&) {\n-        if (!boost::filesystem::exists(p) || !boost::filesystem::is_directory(p))\n+        return fs::create_directory(p);\n+    } catch (const fs::filesystem_error&) {\n+        if (!fs::exists(p) || !fs::is_directory(p))\n             throw;\n     }\n \n@@ -763,11 +763,11 @@ void ShrinkDebugFile()\n     // Amount of debug.log to save at end when shrinking (must fit in memory)\n     constexpr size_t RECENT_DEBUG_HISTORY_SIZE = 10 * 1000000;\n     // Scroll debug.log if it's getting too big\n-    boost::filesystem::path pathLog = GetDataDir() / \"debug.log\";\n+    fs::path pathLog = GetDataDir() / \"debug.log\";\n     FILE* file = fopen(pathLog.string().c_str(), \"r\");\n     // If debug.log file is more than 10% bigger the RECENT_DEBUG_HISTORY_SIZE\n     // trim it down by saving only the last RECENT_DEBUG_HISTORY_SIZE bytes\n-    if (file && boost::filesystem::file_size(pathLog) > 11 * (RECENT_DEBUG_HISTORY_SIZE / 10))\n+    if (file && fs::file_size(pathLog) > 11 * (RECENT_DEBUG_HISTORY_SIZE / 10))\n     {\n         // Restart the file with some of the end\n         std::vector<char> vch(RECENT_DEBUG_HISTORY_SIZE, 0);\n@@ -787,9 +787,9 @@ void ShrinkDebugFile()\n }\n \n #ifdef WIN32\n-boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate)\n+fs::path GetSpecialFolderPath(int nFolder, bool fCreate)\n {\n-    namespace fs = boost::filesystem;\n+    namespace fs = fs;\n \n     char pszPath[MAX_PATH] = \"\";\n \n@@ -850,9 +850,9 @@ void SetupEnvironment()\n     // The path locale is lazy initialized and to avoid deinitialization errors\n     // in multithreading environments, it is set explicitly by the main thread.\n     // A dummy locale is used to extract the internal default locale, used by\n-    // boost::filesystem::path, which is then used to explicitly imbue the path.\n-    std::locale loc = boost::filesystem::path::imbue(std::locale::classic());\n-    boost::filesystem::path::imbue(loc);\n+    // fs::path, which is then used to explicitly imbue the path.\n+    std::locale loc = fs::path::imbue(std::locale::classic());\n+    fs::path::imbue(loc);\n }\n \n bool SetupNetworking()"
      },
      {
        "sha": "7998449feebc26e62133bb5865621fe9afe28728",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -144,19 +144,19 @@ void FileCommit(FILE *file);\n bool TruncateFile(FILE *file, unsigned int length);\n int RaiseFileDescriptorLimit(int nMinFD);\n void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length);\n-bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest);\n-bool TryCreateDirectory(const boost::filesystem::path& p);\n-boost::filesystem::path GetDefaultDataDir();\n-const boost::filesystem::path &GetDataDir(bool fNetSpecific = true);\n+bool RenameOver(fs::path src, fs::path dest);\n+bool TryCreateDirectory(const fs::path& p);\n+fs::path GetDefaultDataDir();\n+const fs::path &GetDataDir(bool fNetSpecific = true);\n void ClearDatadirCache();\n-boost::filesystem::path GetConfigFile(const std::string& confPath);\n+fs::path GetConfigFile(const std::string& confPath);\n #ifndef WIN32\n-boost::filesystem::path GetPidFile();\n-void CreatePidFile(const boost::filesystem::path &path, pid_t pid);\n+fs::path GetPidFile();\n+void CreatePidFile(const fs::path &path, pid_t pid);\n #endif\n void ReadConfigFile(const std::string& confPath);\n #ifdef WIN32\n-boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n+fs::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif\n void OpenDebugLog();\n void ShrinkDebugFile();"
      },
      {
        "sha": "0b55e1db1bba56c1e253aae26a99ab0b43697bad",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -3314,8 +3314,8 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune)\n {\n     for (std::set<int>::iterator it = setFilesToPrune.begin(); it != setFilesToPrune.end(); ++it) {\n         CDiskBlockPos pos(*it, 0);\n-        boost::filesystem::remove(GetBlockPosFilename(pos, \"blk\"));\n-        boost::filesystem::remove(GetBlockPosFilename(pos, \"rev\"));\n+        fs::remove(GetBlockPosFilename(pos, \"blk\"));\n+        fs::remove(GetBlockPosFilename(pos, \"rev\"));\n         LogPrintf(\"Prune: %s deleted blk/rev (%05u)\\n\", __func__, *it);\n     }\n }\n@@ -3399,7 +3399,7 @@ void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight\n \n bool CheckDiskSpace(uint64_t nAdditionalBytes)\n {\n-    uint64_t nFreeBytesAvailable = boost::filesystem::space(GetDataDir()).available;\n+    uint64_t nFreeBytesAvailable = fs::space(GetDataDir()).available;\n \n     // Check for nMinDiskSpace bytes (currently 50MB)\n     if (nFreeBytesAvailable < nMinDiskSpace + nAdditionalBytes)\n@@ -3412,8 +3412,8 @@ FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fReadOnly)\n {\n     if (pos.IsNull())\n         return NULL;\n-    boost::filesystem::path path = GetBlockPosFilename(pos, prefix);\n-    boost::filesystem::create_directories(path.parent_path());\n+    fs::path path = GetBlockPosFilename(pos, prefix);\n+    fs::create_directories(path.parent_path());\n     FILE* file = fopen(path.string().c_str(), \"rb+\");\n     if (!file && !fReadOnly)\n         file = fopen(path.string().c_str(), \"wb+\");\n@@ -3439,7 +3439,7 @@ FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly) {\n     return OpenDiskFile(pos, \"rev\", fReadOnly);\n }\n \n-boost::filesystem::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)\n+fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)\n {\n     return GetDataDir() / \"blocks\" / strprintf(\"%s%05u.dat\", prefix, pos.nFile);\n }"
      },
      {
        "sha": "4aa10cbb0bdc5e26058dd5e128c3b278910df0f8",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -250,7 +250,7 @@ FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Open an undo file (rev?????.dat) */\n FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */\n-boost::filesystem::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n+fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n /** Import blocks from an external file */\n bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp = NULL);\n /** Initialize a new block tree database + block data on disk */"
      },
      {
        "sha": "050450247fcb248fdb9edef799befa5ea5e09bf2",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -66,17 +66,17 @@ void CDBEnv::Close()\n     EnvShutdown();\n }\n \n-bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n+bool CDBEnv::Open(const fs::path& pathIn)\n {\n     if (fDbEnvInit)\n         return true;\n \n     boost::this_thread::interruption_point();\n \n     strPath = pathIn.string();\n-    boost::filesystem::path pathLogDir = pathIn / \"database\";\n+    fs::path pathLogDir = pathIn / \"database\";\n     TryCreateDirectory(pathLogDir);\n-    boost::filesystem::path pathErrorFile = pathIn / \"db.log\";\n+    fs::path pathErrorFile = pathIn / \"db.log\";\n     LogPrintf(\"CDBEnv::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n \n     unsigned int nEnvFlags = 0;\n@@ -227,13 +227,13 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n     return fSuccess;\n }\n \n-bool CDB::VerifyEnvironment(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& errorStr)\n+bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr)\n {\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n     LogPrintf(\"Using wallet %s\\n\", walletFile);\n \n     // Wallet file must be a plain filename without a directory\n-    if (walletFile != boost::filesystem::basename(walletFile) + boost::filesystem::extension(walletFile))\n+    if (walletFile != fs::basename(walletFile) + fs::extension(walletFile))\n     {\n         errorStr = strprintf(_(\"Wallet %s resides outside data directory %s\"), walletFile, dataDir.string());\n         return false;\n@@ -242,12 +242,12 @@ bool CDB::VerifyEnvironment(const std::string& walletFile, const boost::filesyst\n     if (!bitdb.Open(dataDir))\n     {\n         // try moving the database env out of the way\n-        boost::filesystem::path pathDatabase = dataDir / \"database\";\n-        boost::filesystem::path pathDatabaseBak = dataDir / strprintf(\"database.%d.bak\", GetTime());\n+        fs::path pathDatabase = dataDir / \"database\";\n+        fs::path pathDatabaseBak = dataDir / strprintf(\"database.%d.bak\", GetTime());\n         try {\n-            boost::filesystem::rename(pathDatabase, pathDatabaseBak);\n+            fs::rename(pathDatabase, pathDatabaseBak);\n             LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathDatabase.string(), pathDatabaseBak.string());\n-        } catch (const boost::filesystem::filesystem_error&) {\n+        } catch (const fs::filesystem_error&) {\n             // failure is ok (well, not really, but it's not worse than what we started with)\n         }\n \n@@ -261,9 +261,9 @@ bool CDB::VerifyEnvironment(const std::string& walletFile, const boost::filesyst\n     return true;\n }\n \n-bool CDB::VerifyDatabaseFile(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& warningStr, std::string& errorStr, bool (*recoverFunc)(const std::string& strFile))\n+bool CDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr, bool (*recoverFunc)(const std::string& strFile))\n {\n-    if (boost::filesystem::exists(dataDir / walletFile))\n+    if (fs::exists(dataDir / walletFile))\n     {\n         CDBEnv::VerifyResult r = bitdb.Verify(walletFile, recoverFunc);\n         if (r == CDBEnv::RECOVER_OK)\n@@ -590,7 +590,7 @@ void CDBEnv::Flush(bool fShutdown)\n                 dbenv->log_archive(&listp, DB_ARCH_REMOVE);\n                 Close();\n                 if (!fMockDb)\n-                    boost::filesystem::remove_all(boost::filesystem::path(strPath) / \"database\");\n+                    fs::remove_all(fs::path(strPath) / \"database\");\n             }\n         }\n     }"
      },
      {
        "sha": "9f912f9a1a4f14ceebcfa46c458bc7e48a777b92",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -27,7 +27,7 @@ class CDBEnv\n private:\n     bool fDbEnvInit;\n     bool fMockDb;\n-    // Don't change into boost::filesystem::path, as that can result in\n+    // Don't change into fs::path, as that can result in\n     // shutdown problems/crashes caused by a static initialized internal pointer.\n     std::string strPath;\n \n@@ -66,7 +66,7 @@ class CDBEnv\n     typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n     bool Salvage(const std::string& strFile, bool fAggressive, std::vector<KeyValPair>& vResult);\n \n-    bool Open(const boost::filesystem::path& path);\n+    bool Open(const fs::path& path);\n     void Close();\n     void Flush(bool fShutdown);\n     void CheckpointLSN(const std::string& strFile);\n@@ -109,9 +109,9 @@ class CDB\n        ideal to be called periodically */\n     static bool PeriodicFlush(std::string strFile);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& errorStr);\n+    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& warningStr, std::string& errorStr, bool (*recoverFunc)(const std::string& strFile));\n+    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr, bool (*recoverFunc)(const std::string& strFile));\n \n private:\n     CDB(const CDB&);"
      },
      {
        "sha": "55d81daab426ec52b9ba2a5c3cd599781d894888",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -3945,16 +3945,16 @@ bool CWallet::BackupWallet(const std::string& strDest)\n                 bitdb.mapFileUseCount.erase(strWalletFile);\n \n                 // Copy wallet file\n-                boost::filesystem::path pathSrc = GetDataDir() / strWalletFile;\n-                boost::filesystem::path pathDest(strDest);\n-                if (boost::filesystem::is_directory(pathDest))\n+                fs::path pathSrc = GetDataDir() / strWalletFile;\n+                fs::path pathDest(strDest);\n+                if (fs::is_directory(pathDest))\n                     pathDest /= strWalletFile;\n \n                 try {\n-                    boost::filesystem::copy_file(pathSrc, pathDest, boost::filesystem::copy_option::overwrite_if_exists);\n+                    fs::copy_file(pathSrc, pathDest, fs::copy_option::overwrite_if_exists);\n                     LogPrintf(\"copied %s to %s\\n\", strWalletFile, pathDest.string());\n                     return true;\n-                } catch (const boost::filesystem::filesystem_error& e) {\n+                } catch (const fs::filesystem_error& e) {\n                     LogPrintf(\"error copying %s to %s - %s\\n\", strWalletFile, pathDest.string(), e.what());\n                     return false;\n                 }"
      },
      {
        "sha": "ceff2d36e35938588d136e87a06c03b4285f943b",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -842,12 +842,12 @@ bool CWalletDB::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDa\n     return true;\n }\n \n-bool CWalletDB::VerifyEnvironment(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& errorStr)\n+bool CWalletDB::VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr)\n {\n     return CDB::VerifyEnvironment(walletFile, dataDir, errorStr);\n }\n \n-bool CWalletDB::VerifyDatabaseFile(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& warningStr, std::string& errorStr)\n+bool CWalletDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr)\n {\n     return CDB::VerifyDatabaseFile(walletFile, dataDir, errorStr, warningStr, CWalletDB::Recover);\n }"
      },
      {
        "sha": "b94f341b2edb722d25824aaa5517642072f38428",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bac5c9cf643e9333479ac667426d0b70f8f3aa7f/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "patch": "@@ -185,9 +185,9 @@ class CWalletDB : public CDB\n     /* Function to determine if a certain KV/key-type is a key (cryptographical key) type */\n     static bool IsKeyType(const std::string& strType);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& errorStr);\n+    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& warningStr, std::string& errorStr);\n+    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr);\n \n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);"
      }
    ]
  },
  {
    "sha": "2a5f574762614b74dee738392057200dd28c64fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTVmNTc0NzYyNjE0Yjc0ZGVlNzM4MzkyMDU3MjAwZGQyOGM2NGZi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-01T16:28:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-03T10:32:32Z"
      },
      "message": "Use fsbridge for fopen and freopen\n\nAbstracts away how a path is opened to a `FILE*`.\n\nReduces the number of places where path is converted to a string\nfor anything else but printing.",
      "tree": {
        "sha": "7b47462778a6dd5964eb0c2cc332276581b2615e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b47462778a6dd5964eb0c2cc332276581b2615e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a5f574762614b74dee738392057200dd28c64fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a5f574762614b74dee738392057200dd28c64fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a5f574762614b74dee738392057200dd28c64fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a5f574762614b74dee738392057200dd28c64fb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bac5c9cf643e9333479ac667426d0b70f8f3aa7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bac5c9cf643e9333479ac667426d0b70f8f3aa7f"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "a3743cd0d4dee3fb069e952bd847e2d59c46d607",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a5f574762614b74dee738392057200dd28c64fb/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a5f574762614b74dee738392057200dd28c64fb/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=2a5f574762614b74dee738392057200dd28c64fb",
        "patch": "@@ -37,7 +37,7 @@ bool CBanDB::Write(const banmap_t& banSet)\n \n     // open temp output file, and associate with CAutoFile\n     fs::path pathTmp = GetDataDir() / tmpfn;\n-    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n+    FILE *file = fsbridge::fopen(pathTmp, \"wb\");\n     CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n         return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n@@ -62,7 +62,7 @@ bool CBanDB::Write(const banmap_t& banSet)\n bool CBanDB::Read(banmap_t& banSet)\n {\n     // open input file, and associate with CAutoFile\n-    FILE *file = fopen(pathBanlist.string().c_str(), \"rb\");\n+    FILE *file = fsbridge::fopen(pathBanlist, \"rb\");\n     CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n         return error(\"%s: Failed to open file %s\", __func__, pathBanlist.string());\n@@ -134,7 +134,7 @@ bool CAddrDB::Write(const CAddrMan& addr)\n \n     // open temp output file, and associate with CAutoFile\n     fs::path pathTmp = GetDataDir() / tmpfn;\n-    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n+    FILE *file = fsbridge::fopen(pathTmp, \"wb\");\n     CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n         return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n@@ -159,7 +159,7 @@ bool CAddrDB::Write(const CAddrMan& addr)\n bool CAddrDB::Read(CAddrMan& addr)\n {\n     // open input file, and associate with CAutoFile\n-    FILE *file = fopen(pathAddr.string().c_str(), \"rb\");\n+    FILE *file = fsbridge::fopen(pathAddr, \"rb\");\n     CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n         return error(\"%s: Failed to open file %s\", __func__, pathAddr.string());"
      },
      {
        "sha": "06e657abee37e6ced34e141e4b36fed68e86278c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a5f574762614b74dee738392057200dd28c64fb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a5f574762614b74dee738392057200dd28c64fb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2a5f574762614b74dee738392057200dd28c64fb",
        "patch": "@@ -213,7 +213,7 @@ void Shutdown()\n     if (fFeeEstimatesInitialized)\n     {\n         fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n-        CAutoFile est_fileout(fopen(est_path.string().c_str(), \"wb\"), SER_DISK, CLIENT_VERSION);\n+        CAutoFile est_fileout(fsbridge::fopen(est_path, \"wb\"), SER_DISK, CLIENT_VERSION);\n         if (!est_fileout.IsNull())\n             mempool.WriteFeeEstimates(est_fileout);\n         else\n@@ -643,7 +643,7 @@ void ThreadImport(std::vector<fs::path> vImportFiles)\n     // hardcoded $DATADIR/bootstrap.dat\n     fs::path pathBootstrap = GetDataDir() / \"bootstrap.dat\";\n     if (fs::exists(pathBootstrap)) {\n-        FILE *file = fopen(pathBootstrap.string().c_str(), \"rb\");\n+        FILE *file = fsbridge::fopen(pathBootstrap, \"rb\");\n         if (file) {\n             fs::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n             LogPrintf(\"Importing bootstrap.dat...\\n\");\n@@ -656,7 +656,7 @@ void ThreadImport(std::vector<fs::path> vImportFiles)\n \n     // -loadblock=\n     BOOST_FOREACH(const fs::path& path, vImportFiles) {\n-        FILE *file = fopen(path.string().c_str(), \"rb\");\n+        FILE *file = fsbridge::fopen(path, \"rb\");\n         if (file) {\n             LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n             LoadExternalBlockFile(chainparams, file);\n@@ -1124,7 +1124,7 @@ static bool LockDataDirectory(bool probeOnly)\n \n     // Make sure only a single Bitcoin process is using the data directory.\n     fs::path pathLockFile = GetDataDir() / \".lock\";\n-    FILE* file = fopen(pathLockFile.string().c_str(), \"a\"); // empty lock file; created if it doesn't exist.\n+    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n     if (file) fclose(file);\n \n     try {\n@@ -1535,7 +1535,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - nStart);\n \n     fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n-    CAutoFile est_filein(fopen(est_path.string().c_str(), \"rb\"), SER_DISK, CLIENT_VERSION);\n+    CAutoFile est_filein(fsbridge::fopen(est_path, \"rb\"), SER_DISK, CLIENT_VERSION);\n     // Allowed to fail as this file IS missing on first startup.\n     if (!est_filein.IsNull())\n         mempool.ReadFeeEstimates(est_filein);"
      },
      {
        "sha": "aa5d57c413f2dfb6088a6fdfdbc7c2db7960ebad",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a5f574762614b74dee738392057200dd28c64fb/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a5f574762614b74dee738392057200dd28c64fb/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=2a5f574762614b74dee738392057200dd28c64fb",
        "patch": "@@ -215,7 +215,7 @@ void OpenDebugLog()\n     assert(fileout == NULL);\n     assert(vMsgsBeforeOpenLog);\n     fs::path pathDebug = GetDataDir() / \"debug.log\";\n-    fileout = fopen(pathDebug.string().c_str(), \"a\");\n+    fileout = fsbridge::fopen(pathDebug, \"a\");\n     if (fileout) {\n         setbuf(fileout, NULL); // unbuffered\n         // dump buffered messages from before we opened the log\n@@ -354,7 +354,7 @@ int LogPrintStr(const std::string &str)\n             if (fReopenDebugLog) {\n                 fReopenDebugLog = false;\n                 fs::path pathDebug = GetDataDir() / \"debug.log\";\n-                if (freopen(pathDebug.string().c_str(),\"a\",fileout) != NULL)\n+                if (fsbridge::freopen(pathDebug,\"a\",fileout) != NULL)\n                     setbuf(fileout, NULL); // unbuffered\n             }\n \n@@ -625,7 +625,7 @@ fs::path GetPidFile()\n \n void CreatePidFile(const fs::path &path, pid_t pid)\n {\n-    FILE* file = fopen(path.string().c_str(), \"w\");\n+    FILE* file = fsbridge::fopen(path, \"w\");\n     if (file)\n     {\n         fprintf(file, \"%d\\n\", pid);\n@@ -764,7 +764,7 @@ void ShrinkDebugFile()\n     constexpr size_t RECENT_DEBUG_HISTORY_SIZE = 10 * 1000000;\n     // Scroll debug.log if it's getting too big\n     fs::path pathLog = GetDataDir() / \"debug.log\";\n-    FILE* file = fopen(pathLog.string().c_str(), \"r\");\n+    FILE* file = fsbridge::fopen(pathLog, \"r\");\n     // If debug.log file is more than 10% bigger the RECENT_DEBUG_HISTORY_SIZE\n     // trim it down by saving only the last RECENT_DEBUG_HISTORY_SIZE bytes\n     if (file && fs::file_size(pathLog) > 11 * (RECENT_DEBUG_HISTORY_SIZE / 10))\n@@ -775,7 +775,7 @@ void ShrinkDebugFile()\n         int nBytes = fread(vch.data(), 1, vch.size(), file);\n         fclose(file);\n \n-        file = fopen(pathLog.string().c_str(), \"w\");\n+        file = fsbridge::fopen(pathLog, \"w\");\n         if (file)\n         {\n             fwrite(vch.data(), 1, nBytes, file);"
      },
      {
        "sha": "03bae31d9ee3eb27084f4a698c1730a4a8aa8eef",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a5f574762614b74dee738392057200dd28c64fb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a5f574762614b74dee738392057200dd28c64fb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2a5f574762614b74dee738392057200dd28c64fb",
        "patch": "@@ -3414,9 +3414,9 @@ FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fReadOnly)\n         return NULL;\n     fs::path path = GetBlockPosFilename(pos, prefix);\n     fs::create_directories(path.parent_path());\n-    FILE* file = fopen(path.string().c_str(), \"rb+\");\n+    FILE* file = fsbridge::fopen(path, \"rb+\");\n     if (!file && !fReadOnly)\n-        file = fopen(path.string().c_str(), \"wb+\");\n+        file = fsbridge::fopen(path, \"wb+\");\n     if (!file) {\n         LogPrintf(\"Unable to open file %s\\n\", path.string());\n         return NULL;\n@@ -4164,7 +4164,7 @@ static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n bool LoadMempool(void)\n {\n     int64_t nExpiryTimeout = GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n-    FILE* filestr = fopen((GetDataDir() / \"mempool.dat\").string().c_str(), \"rb\");\n+    FILE* filestr = fsbridge::fopen(GetDataDir() / \"mempool.dat\", \"rb\");\n     CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n     if (file.IsNull()) {\n         LogPrintf(\"Failed to open mempool file from disk. Continuing anyway.\\n\");\n@@ -4244,7 +4244,7 @@ void DumpMempool(void)\n     int64_t mid = GetTimeMicros();\n \n     try {\n-        FILE* filestr = fopen((GetDataDir() / \"mempool.dat.new\").string().c_str(), \"wb\");\n+        FILE* filestr = fsbridge::fopen(GetDataDir() / \"mempool.dat.new\", \"wb\");\n         if (!filestr) {\n             return;\n         }"
      },
      {
        "sha": "f47fc92b5758ae8b62e548fc7dc8b7f5a9342a08",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a5f574762614b74dee738392057200dd28c64fb/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a5f574762614b74dee738392057200dd28c64fb/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=2a5f574762614b74dee738392057200dd28c64fb",
        "patch": "@@ -89,7 +89,7 @@ bool CDBEnv::Open(const fs::path& pathIn)\n     dbenv->set_lg_max(1048576);\n     dbenv->set_lk_max_locks(40000);\n     dbenv->set_lk_max_objects(40000);\n-    dbenv->set_errfile(fopen(pathErrorFile.string().c_str(), \"a\")); /// debug\n+    dbenv->set_errfile(fsbridge::fopen(pathErrorFile, \"a\")); /// debug\n     dbenv->set_flags(DB_AUTO_COMMIT, 1);\n     dbenv->set_flags(DB_TXN_WRITE_NOSYNC, 1);\n     dbenv->log_set_config(DB_LOG_AUTO_REMOVE, 1);"
      }
    ]
  },
  {
    "sha": "75594bd7f26b8c3842d399deec2321886b9e75ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTU5NGJkN2YyNmI4YzM4NDJkMzk5ZGVlYzIzMjE4ODZiOWU3NWVm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-02T06:25:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-03T10:33:14Z"
      },
      "message": "torcontrol: Use fs::path instead of std::string for private key path",
      "tree": {
        "sha": "7c495cdd596d6d20a3a82f1c83ef603f179e418b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c495cdd596d6d20a3a82f1c83ef603f179e418b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75594bd7f26b8c3842d399deec2321886b9e75ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75594bd7f26b8c3842d399deec2321886b9e75ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75594bd7f26b8c3842d399deec2321886b9e75ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75594bd7f26b8c3842d399deec2321886b9e75ef/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a5f574762614b74dee738392057200dd28c64fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a5f574762614b74dee738392057200dd28c64fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a5f574762614b74dee738392057200dd28c64fb"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "c1bd95b00f22526063045a2be4b49bee3bd451e0",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75594bd7f26b8c3842d399deec2321886b9e75ef/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75594bd7f26b8c3842d399deec2321886b9e75ef/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=75594bd7f26b8c3842d399deec2321886b9e75ef",
        "patch": "@@ -314,9 +314,9 @@ static std::map<std::string,std::string> ParseTorReplyMapping(const std::string\n  * @param maxsize Puts a maximum size limit on the file that is read. If the file is larger than this, truncated data\n  *         (with len > maxsize) will be returned.\n  */\n-static std::pair<bool,std::string> ReadBinaryFile(const std::string &filename, size_t maxsize=std::numeric_limits<size_t>::max())\n+static std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize=std::numeric_limits<size_t>::max())\n {\n-    FILE *f = fopen(filename.c_str(), \"rb\");\n+    FILE *f = fsbridge::fopen(filename, \"rb\");\n     if (f == NULL)\n         return std::make_pair(false,\"\");\n     std::string retval;\n@@ -334,9 +334,9 @@ static std::pair<bool,std::string> ReadBinaryFile(const std::string &filename, s\n /** Write contents of std::string to a file.\n  * @return true on success.\n  */\n-static bool WriteBinaryFile(const std::string &filename, const std::string &data)\n+static bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n {\n-    FILE *f = fopen(filename.c_str(), \"wb\");\n+    FILE *f = fsbridge::fopen(filename, \"wb\");\n     if (f == NULL)\n         return false;\n     if (fwrite(data.data(), 1, data.size(), f) != data.size()) {\n@@ -359,7 +359,7 @@ class TorController\n     ~TorController();\n \n     /** Get name fo file to store private key in */\n-    std::string GetPrivateKeyFile();\n+    fs::path GetPrivateKeyFile();\n \n     /** Reconnect, after getting disconnected */\n     void Reconnect();\n@@ -411,7 +411,7 @@ TorController::TorController(struct event_base* _base, const std::string& _targe\n     // Read service private key if cached\n     std::pair<bool,std::string> pkf = ReadBinaryFile(GetPrivateKeyFile());\n     if (pkf.first) {\n-        LogPrint(BCLog::TOR, \"tor: Reading cached private key from %s\\n\", GetPrivateKeyFile());\n+        LogPrint(BCLog::TOR, \"tor: Reading cached private key from %s\\n\", GetPrivateKeyFile().string());\n         private_key = pkf.second;\n     }\n }\n@@ -442,9 +442,9 @@ void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlRe\n         service = LookupNumeric(std::string(service_id+\".onion\").c_str(), GetListenPort());\n         LogPrintf(\"tor: Got service ID %s, advertising service %s\\n\", service_id, service.ToString());\n         if (WriteBinaryFile(GetPrivateKeyFile(), private_key)) {\n-            LogPrint(BCLog::TOR, \"tor: Cached service private key to %s\\n\", GetPrivateKeyFile());\n+            LogPrint(BCLog::TOR, \"tor: Cached service private key to %s\\n\", GetPrivateKeyFile().string());\n         } else {\n-            LogPrintf(\"tor: Error writing service private key to %s\\n\", GetPrivateKeyFile());\n+            LogPrintf(\"tor: Error writing service private key to %s\\n\", GetPrivateKeyFile().string());\n         }\n         AddLocal(service, LOCAL_MANUAL);\n         // ... onion requested - keep connection open\n@@ -651,9 +651,9 @@ void TorController::Reconnect()\n     }\n }\n \n-std::string TorController::GetPrivateKeyFile()\n+fs::path TorController::GetPrivateKeyFile()\n {\n-    return (GetDataDir() / \"onion_private_key\").string();\n+    return GetDataDir() / \"onion_private_key\";\n }\n \n void TorController::reconnect_cb(evutil_socket_t fd, short what, void *arg)"
      }
    ]
  },
  {
    "sha": "f110272dc90cd870bfff48c9a61e091e67dbb2e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTEwMjcyZGM5MGNkODcwYmZmZjQ4YzlhNjFlMDkxZTY3ZGJiMmU5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-02T08:42:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-03T10:33:14Z"
      },
      "message": "Remove `namespace fs=fs`\n\nHaving these inside functions is silly and redundant now.",
      "tree": {
        "sha": "2c385efd61a2888c83cb0e0730a35913f6a707af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c385efd61a2888c83cb0e0730a35913f6a707af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f110272dc90cd870bfff48c9a61e091e67dbb2e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f110272dc90cd870bfff48c9a61e091e67dbb2e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f110272dc90cd870bfff48c9a61e091e67dbb2e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f110272dc90cd870bfff48c9a61e091e67dbb2e9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75594bd7f26b8c3842d399deec2321886b9e75ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75594bd7f26b8c3842d399deec2321886b9e75ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75594bd7f26b8c3842d399deec2321886b9e75ef"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a2699d374a45af5bcb91f10a2692d29d37658b2b",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f110272dc90cd870bfff48c9a61e091e67dbb2e9/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f110272dc90cd870bfff48c9a61e091e67dbb2e9/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=f110272dc90cd870bfff48c9a61e091e67dbb2e9",
        "patch": "@@ -686,8 +686,6 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n \n fs::path static GetAutostartDir()\n {\n-    namespace fs = fs;\n-\n     char* pszConfigHome = getenv(\"XDG_CONFIG_HOME\");\n     if (pszConfigHome) return fs::path(pszConfigHome) / \"autostart\";\n     char* pszHome = getenv(\"HOME\");"
      },
      {
        "sha": "2460a59109c505e5ab9dd187a9ee9cb0b5233c92",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f110272dc90cd870bfff48c9a61e091e67dbb2e9/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f110272dc90cd870bfff48c9a61e091e67dbb2e9/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=f110272dc90cd870bfff48c9a61e091e67dbb2e9",
        "patch": "@@ -69,7 +69,6 @@ FreespaceChecker::FreespaceChecker(Intro *_intro)\n \n void FreespaceChecker::check()\n {\n-    namespace fs = fs;\n     QString dataDirStr = intro->getPathToCheck();\n     fs::path dataDir = GUIUtil::qstringToBoostPath(dataDirStr);\n     uint64_t freeBytesAvailable = 0;\n@@ -189,7 +188,6 @@ QString Intro::getDefaultDataDirectory()\n \n bool Intro::pickDataDirectory()\n {\n-    namespace fs = fs;\n     QSettings settings;\n     /* If data directory provided on command line, no need to look at settings\n        or show a picking dialog */"
      },
      {
        "sha": "54737992891414b8fd45feebf84bdd59c0941226",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f110272dc90cd870bfff48c9a61e091e67dbb2e9/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f110272dc90cd870bfff48c9a61e091e67dbb2e9/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=f110272dc90cd870bfff48c9a61e091e67dbb2e9",
        "patch": "@@ -513,7 +513,6 @@ void PrintExceptionContinue(const std::exception* pex, const char* pszThread)\n \n fs::path GetDefaultDataDir()\n {\n-    namespace fs = fs;\n     // Windows < Vista: C:\\Documents and Settings\\Username\\Application Data\\Bitcoin\n     // Windows >= Vista: C:\\Users\\Username\\AppData\\Roaming\\Bitcoin\n     // Mac: ~/Library/Application Support/Bitcoin\n@@ -544,7 +543,6 @@ static CCriticalSection csPathCached;\n \n const fs::path &GetDataDir(bool fNetSpecific)\n {\n-    namespace fs = fs;\n \n     LOCK(csPathCached);\n \n@@ -789,8 +787,6 @@ void ShrinkDebugFile()\n #ifdef WIN32\n fs::path GetSpecialFolderPath(int nFolder, bool fCreate)\n {\n-    namespace fs = fs;\n-\n     char pszPath[MAX_PATH] = \"\";\n \n     if(SHGetSpecialFolderPathA(NULL, pszPath, nFolder, fCreate))"
      }
    ]
  },
  {
    "sha": "cd7f39467afd1f2742a80d608852ebb9eb5179a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDdmMzk0NjdhZmQxZjI3NDJhODBkNjA4ODUyZWJiOWViNTE3OWEw",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-04T18:59:35Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-04T18:59:35Z"
      },
      "message": "initialize flag variable to 0 (and continue if GetLogCategory() fails)",
      "tree": {
        "sha": "44b165da41a1854b5ceb04a6c1f1e80fcf4509fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44b165da41a1854b5ceb04a6c1f1e80fcf4509fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd7f39467afd1f2742a80d608852ebb9eb5179a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd7f39467afd1f2742a80d608852ebb9eb5179a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd7f39467afd1f2742a80d608852ebb9eb5179a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd7f39467afd1f2742a80d608852ebb9eb5179a0/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72bc7e1303d54104b06be390f18de7fc5f1ba432",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72bc7e1303d54104b06be390f18de7fc5f1ba432",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72bc7e1303d54104b06be390f18de7fc5f1ba432"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1a4d83033ec810db511d16621348a04ef0fa8cdb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd7f39467afd1f2742a80d608852ebb9eb5179a0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd7f39467afd1f2742a80d608852ebb9eb5179a0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cd7f39467afd1f2742a80d608852ebb9eb5179a0",
        "patch": "@@ -913,9 +913,10 @@ bool AppInitParameterInteraction()\n \n         if (!(GetBoolArg(\"-nodebug\", false) || find(categories.begin(), categories.end(), std::string(\"0\")) != categories.end())) {\n             for (const auto& cat : categories) {\n-                uint32_t flag;\n+                uint32_t flag = 0;\n                 if (!GetLogCategory(&flag, &cat)) {\n                     InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n+                    continue;\n                 }\n                 logCategories |= flag;\n             }\n@@ -926,9 +927,10 @@ bool AppInitParameterInteraction()\n     if (mapMultiArgs.count(\"-debugexclude\") > 0) {\n         const std::vector<std::string>& excludedCategories = mapMultiArgs.at(\"-debugexclude\");\n         for (const auto& cat : excludedCategories) {\n-            uint32_t flag;\n+            uint32_t flag = 0;\n             if (!GetLogCategory(&flag, &cat)) {\n                 InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n+                continue;\n             }\n             logCategories &= ~flag;\n         }"
      }
    ]
  },
  {
    "sha": "faafa801e885ec20c8e4307f1dc1617ee0c04998",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWFmYTgwMWU4ODVlYzIwYzhlNDMwN2YxZGMxNjE3ZWUwYzA0OTk4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-04-04T23:18:12Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-04-04T23:03:26Z"
      },
      "message": "init: Remove redundant logging code",
      "tree": {
        "sha": "d417ec8d393eedaebbfe7c837b3748ec1e2cb412",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d417ec8d393eedaebbfe7c837b3748ec1e2cb412"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faafa801e885ec20c8e4307f1dc1617ee0c04998",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faafa801e885ec20c8e4307f1dc1617ee0c04998",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faafa801e885ec20c8e4307f1dc1617ee0c04998",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faafa801e885ec20c8e4307f1dc1617ee0c04998/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "080d7c700fc3291560d79fc590e05b8e2bad984f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/080d7c700fc3291560d79fc590e05b8e2bad984f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/080d7c700fc3291560d79fc590e05b8e2bad984f"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 1,
      "deletions": 4
    },
    "files": [
      {
        "sha": "f8f0edcbec66de8979329cd640d96c4b050c71b2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faafa801e885ec20c8e4307f1dc1617ee0c04998/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faafa801e885ec20c8e4307f1dc1617ee0c04998/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=faafa801e885ec20c8e4307f1dc1617ee0c04998",
        "patch": "@@ -444,8 +444,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n         _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + \" \" + _(\"<category> can be:\") + \" \" + ListLogCategories() + \".\");\n     strUsage += HelpMessageOpt(\"-debugexclude=<category>\", strprintf(_(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\")));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-nodebug\", \"Turn off debugging messages, same as -debug=0\");\n     strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n     strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), DEFAULT_LOGIPS));\n     strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), DEFAULT_LOGTIMESTAMPS));\n@@ -906,12 +904,11 @@ bool AppInitParameterInteraction()\n         InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));\n \n     // ********************************************************* Step 3: parameter-to-internal-flags\n-\n     if (mapMultiArgs.count(\"-debug\") > 0) {\n         // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n         const std::vector<std::string>& categories = mapMultiArgs.at(\"-debug\");\n \n-        if (!(GetBoolArg(\"-nodebug\", false) || find(categories.begin(), categories.end(), std::string(\"0\")) != categories.end())) {\n+        if (find(categories.begin(), categories.end(), std::string(\"0\")) == categories.end()) {\n             for (const auto& cat : categories) {\n                 uint32_t flag;\n                 if (!GetLogCategory(&flag, &cat)) {"
      }
    ]
  },
  {
    "sha": "b67eb8dde8853c2956f6ed36746fc3ade248e925",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjdlYjhkZGU4ODUzYzI5NTZmNmVkMzY3NDZmYzNhZGUyNDhlOTI1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-05T07:25:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-05T07:40:48Z"
      },
      "message": "doc: Remove version numbers from READMEs\n\nIf we want to keep these numbers, could generate them using autoconf.\nBut this seems unnecessary.",
      "tree": {
        "sha": "efafb22ef46c2aea02f11bca218e2ee343cf9d99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/efafb22ef46c2aea02f11bca218e2ee343cf9d99"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b67eb8dde8853c2956f6ed36746fc3ade248e925",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b67eb8dde8853c2956f6ed36746fc3ade248e925",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b67eb8dde8853c2956f6ed36746fc3ade248e925",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b67eb8dde8853c2956f6ed36746fc3ade248e925/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fade78854cf4e8b0d2f603a33c1a3383859da0d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fade78854cf4e8b0d2f603a33c1a3383859da0d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fade78854cf4e8b0d2f603a33c1a3383859da0d1"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "275ae67e54daaa03c451dffbcdedf04e89388698",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b67eb8dde8853c2956f6ed36746fc3ade248e925/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b67eb8dde8853c2956f6ed36746fc3ade248e925/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=b67eb8dde8853c2956f6ed36746fc3ade248e925",
        "patch": "@@ -1,5 +1,5 @@\n-Bitcoin Core 0.14.99\n-=====================\n+Bitcoin Core\n+=============\n \n Setup\n ---------------------"
      },
      {
        "sha": "07d61b3bda13acb5ac4775db4d23a97586aed646",
        "filename": "doc/README_windows.txt",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b67eb8dde8853c2956f6ed36746fc3ade248e925/doc/README_windows.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b67eb8dde8853c2956f6ed36746fc3ade248e925/doc/README_windows.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_windows.txt?ref=b67eb8dde8853c2956f6ed36746fc3ade248e925",
        "patch": "@@ -1,5 +1,5 @@\n-Bitcoin Core 0.14.99\r\n-=====================\r\n+Bitcoin Core\r\n+=============\r\n \r\n Intro\r\n -----\r"
      }
    ]
  },
  {
    "sha": "168a7034f5eefcf657f6332f0b7966e439ca4df5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjhhNzAzNGY1ZWVmY2Y2NTdmNjMzMmYwYjc5NjZlNDM5Y2E0ZGY1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-05T07:32:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-05T07:40:56Z"
      },
      "message": "doc: Make build system insert version in Doxyfile",
      "tree": {
        "sha": "f16c67a1c720d772071913b8f8d6294fe8e21d6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f16c67a1c720d772071913b8f8d6294fe8e21d6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/168a7034f5eefcf657f6332f0b7966e439ca4df5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168a7034f5eefcf657f6332f0b7966e439ca4df5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/168a7034f5eefcf657f6332f0b7966e439ca4df5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168a7034f5eefcf657f6332f0b7966e439ca4df5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b67eb8dde8853c2956f6ed36746fc3ade248e925",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b67eb8dde8853c2956f6ed36746fc3ade248e925",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b67eb8dde8853c2956f6ed36746fc3ade248e925"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1e1ed49f917d9fda4c89df8b6dc6d1d0b495c89c",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/168a7034f5eefcf657f6332f0b7966e439ca4df5/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/168a7034f5eefcf657f6332f0b7966e439ca4df5/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=168a7034f5eefcf657f6332f0b7966e439ca4df5",
        "patch": "@@ -1157,6 +1157,7 @@ AC_SUBST(QR_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/functional/config.ini])\n AC_CONFIG_FILES([test/util/buildenv.py],[chmod +x test/util/buildenv.py])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n+AC_CONFIG_FILES([doc/Doxyfile])\n AC_CONFIG_LINKS([test/functional/test_runner.py:test/functional/test_runner.py])\n AC_CONFIG_LINKS([test/util/bitcoin-util-test.py:test/util/bitcoin-util-test.py])\n AC_CONFIG_LINKS([test/util/bctest.py:test/util/bctest.py])"
      },
      {
        "sha": "58c65fb7e25514043bef4caad82a668aabca4914",
        "filename": "doc/Doxyfile.in",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/168a7034f5eefcf657f6332f0b7966e439ca4df5/doc/Doxyfile.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/168a7034f5eefcf657f6332f0b7966e439ca4df5/doc/Doxyfile.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Doxyfile.in?ref=168a7034f5eefcf657f6332f0b7966e439ca4df5",
        "patch": "@@ -38,7 +38,7 @@ PROJECT_NAME           = \"Bitcoin Core\"\n # could be handy for archiving the generated documentation or if some version\n # control system is used.\n \n-PROJECT_NUMBER         = 0.14.99\n+PROJECT_NUMBER         = @PACKAGE_VERSION@\n \n # Using the PROJECT_BRIEF tag one can provide an optional one line description\n # for a project that appears at the top of each page and should give viewer a",
        "previous_filename": "doc/Doxyfile"
      }
    ]
  },
  {
    "sha": "18968187da375b1a71af102c13b0a9e5d7ea65ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODk2ODE4N2RhMzc1YjFhNzFhZjEwMmMxM2IwYTllNWQ3ZWE2NWVm",
    "commit": {
      "author": {
        "name": "Allan Doensen",
        "email": "allan@doensen.com",
        "date": "2017-04-04T13:37:39Z"
      },
      "committer": {
        "name": "Allan Doensen",
        "email": "allan@doensen.com",
        "date": "2017-04-05T07:45:29Z"
      },
      "message": "Fix for issues with startup and mutiple monitors on windows.",
      "tree": {
        "sha": "467d4304188696a97bfb3dcc0ee007d430d8131a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/467d4304188696a97bfb3dcc0ee007d430d8131a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18968187da375b1a71af102c13b0a9e5d7ea65ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18968187da375b1a71af102c13b0a9e5d7ea65ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18968187da375b1a71af102c13b0a9e5d7ea65ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18968187da375b1a71af102c13b0a9e5d7ea65ef/comments",
    "author": {
      "login": "AllanDoensen",
      "id": 12585202,
      "node_id": "MDQ6VXNlcjEyNTg1MjAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12585202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AllanDoensen",
      "html_url": "https://github.com/AllanDoensen",
      "followers_url": "https://api.github.com/users/AllanDoensen/followers",
      "following_url": "https://api.github.com/users/AllanDoensen/following{/other_user}",
      "gists_url": "https://api.github.com/users/AllanDoensen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AllanDoensen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AllanDoensen/subscriptions",
      "organizations_url": "https://api.github.com/users/AllanDoensen/orgs",
      "repos_url": "https://api.github.com/users/AllanDoensen/repos",
      "events_url": "https://api.github.com/users/AllanDoensen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AllanDoensen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "AllanDoensen",
      "id": 12585202,
      "node_id": "MDQ6VXNlcjEyNTg1MjAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12585202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AllanDoensen",
      "html_url": "https://github.com/AllanDoensen",
      "followers_url": "https://api.github.com/users/AllanDoensen/followers",
      "following_url": "https://api.github.com/users/AllanDoensen/following{/other_user}",
      "gists_url": "https://api.github.com/users/AllanDoensen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AllanDoensen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AllanDoensen/subscriptions",
      "organizations_url": "https://api.github.com/users/AllanDoensen/orgs",
      "repos_url": "https://api.github.com/users/AllanDoensen/repos",
      "events_url": "https://api.github.com/users/AllanDoensen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AllanDoensen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f93f9b92969b4a3f77d3f1c2a30ba3bf558e0cac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f93f9b92969b4a3f77d3f1c2a30ba3bf558e0cac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f93f9b92969b4a3f77d3f1c2a30ba3bf558e0cac"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 9,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c98eab3dcac9d578356c2a6c3404ecc7a99fa4c5",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18968187da375b1a71af102c13b0a9e5d7ea65ef/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18968187da375b1a71af102c13b0a9e5d7ea65ef/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=18968187da375b1a71af102c13b0a9e5d7ea65ef",
        "patch": "@@ -842,15 +842,19 @@ void restoreWindowGeometry(const QString& strSetting, const QSize& defaultSize,\n     QSettings settings;\n     QPoint pos = settings.value(strSetting + \"Pos\").toPoint();\n     QSize size = settings.value(strSetting + \"Size\", defaultSize).toSize();\n+    QRect screen = QApplication::desktop()->screenGeometry();\n+    QPoint posCenter(\n+        abs((screen.width() - size.width()) / 2),\n+        abs((screen.height() - size.height()) / 2));\n \n-    if (!pos.x() && !pos.y()) {\n-        QRect screen = QApplication::desktop()->screenGeometry();\n-        pos.setX((screen.width() - size.width()) / 2);\n-        pos.setY((screen.height() - size.height()) / 2);\n-    }\n+    if (!pos.x() && !pos.y())\n+        pos = posCenter;\n \n     parent->resize(size);\n     parent->move(pos);\n+\n+    if (QApplication::desktop()->screenNumber(parent) == -1)\n+        parent->move(posCenter);\n }\n \n void setClipboard(const QString& str)"
      }
    ]
  },
  {
    "sha": "3c95bd43d8ffec336e26227ac4e2d71d3b349061",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzk1YmQ0M2Q4ZmZlYzMzNmUyNjIyN2FjNGUyZDcxZDNiMzQ5MDYx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-05T09:20:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-05T09:28:07Z"
      },
      "message": "Merge #10154: init: Remove redundant logging code\n\nfaafa80 init: Remove redundant logging code (MarcoFalke)\n\nTree-SHA512: 5ad0e9aba0e25a36025dd4ee5e5fddd2c0039f95bafd0f33300ea59e2f9bba807da6a1a8b4311d6aad5a360b99163edf4a4f161cb13f0f38580d8d6b504c94ad",
      "tree": {
        "sha": "17326f107a93eb34a858477b3a5939f2ff7db303",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17326f107a93eb34a858477b3a5939f2ff7db303"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c95bd43d8ffec336e26227ac4e2d71d3b349061",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJY5LinAAoJEHSBCwEjRsmmFpoIAKWd3z7EYZWjJXrOUsl5R0vg\noa3nCzrI8tbQdjW0kcWHYi94yKHQvplUvkDtmj9r1LjuYBQylVsznN9ad5yoRw+E\ncFSqDnC80NP0Wr+1uIybAQn5qb5ymff9tYrSU3YteDRj7Izmp7K9aujeiDDdCxaI\n8Vz1LsN+a0yY603XzHwKAGt36xt4V8CU3WsajM4oKcgy+z+bDtd5uZMAYAFuwe9u\nE+YEY1zHhu+BECDrHx70WZkCJVJGQZMsTjmQmq2gXe2x4Y2QdRImzHpmc+X79z9k\nbLjwaKMDlcBqW7Hi2g2KT/YHGrrhwYzCsGXe7cxwblMOfoPipKwLvSWpPTRVAY0=\n=iYgF\n-----END PGP SIGNATURE-----",
        "payload": "tree 17326f107a93eb34a858477b3a5939f2ff7db303\nparent fade78854cf4e8b0d2f603a33c1a3383859da0d1\nparent faafa801e885ec20c8e4307f1dc1617ee0c04998\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1491384019 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1491384487 +0200\n\nMerge #10154: init: Remove redundant logging code\n\nfaafa80 init: Remove redundant logging code (MarcoFalke)\n\nTree-SHA512: 5ad0e9aba0e25a36025dd4ee5e5fddd2c0039f95bafd0f33300ea59e2f9bba807da6a1a8b4311d6aad5a360b99163edf4a4f161cb13f0f38580d8d6b504c94ad\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c95bd43d8ffec336e26227ac4e2d71d3b349061",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c95bd43d8ffec336e26227ac4e2d71d3b349061",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c95bd43d8ffec336e26227ac4e2d71d3b349061/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fade78854cf4e8b0d2f603a33c1a3383859da0d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fade78854cf4e8b0d2f603a33c1a3383859da0d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fade78854cf4e8b0d2f603a33c1a3383859da0d1"
      },
      {
        "sha": "faafa801e885ec20c8e4307f1dc1617ee0c04998",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faafa801e885ec20c8e4307f1dc1617ee0c04998",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faafa801e885ec20c8e4307f1dc1617ee0c04998"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 1,
      "deletions": 4
    },
    "files": [
      {
        "sha": "08360e167dc4b1239ec62d15682acf9ff1e34bc5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c95bd43d8ffec336e26227ac4e2d71d3b349061/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c95bd43d8ffec336e26227ac4e2d71d3b349061/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3c95bd43d8ffec336e26227ac4e2d71d3b349061",
        "patch": "@@ -444,8 +444,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n         _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + \" \" + _(\"<category> can be:\") + \" \" + ListLogCategories() + \".\");\n     strUsage += HelpMessageOpt(\"-debugexclude=<category>\", strprintf(_(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\")));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-nodebug\", \"Turn off debugging messages, same as -debug=0\");\n     strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n     strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), DEFAULT_LOGIPS));\n     strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), DEFAULT_LOGTIMESTAMPS));\n@@ -906,12 +904,11 @@ bool AppInitParameterInteraction()\n         InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));\n \n     // ********************************************************* Step 3: parameter-to-internal-flags\n-\n     if (mapMultiArgs.count(\"-debug\") > 0) {\n         // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n         const std::vector<std::string>& categories = mapMultiArgs.at(\"-debug\");\n \n-        if (!(GetBoolArg(\"-nodebug\", false) || find(categories.begin(), categories.end(), std::string(\"0\")) != categories.end())) {\n+        if (find(categories.begin(), categories.end(), std::string(\"0\")) == categories.end()) {\n             for (const auto& cat : categories) {\n                 uint32_t flag;\n                 if (!GetLogCategory(&flag, &cat)) {"
      }
    ]
  },
  {
    "sha": "c7e73eafa139c29a38f73ab697e2e967a386908d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2U3M2VhZmExMzljMjlhMzhmNzNhYjY5N2UyZTk2N2EzODY5MDhk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-05T09:29:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-05T09:30:10Z"
      },
      "message": "Merge #10151: [logging] initialize flag variable to 0 (and continue if GetLogCategory() fails)\n\ncd7f394 initialize flag variable to 0 (and continue if GetLogCategory() fails) (John Newbery)\n\nTree-SHA512: d0f2653bd0e71ed763220cb08d3a5335c5bdfe2f54ff7f9302d97f3265d7aa7f57606fe416a61aaac1535dbb046d0fb40a61f5a9d5cf234b042268e00ee7679d",
      "tree": {
        "sha": "ac888603a16e8f987f2e78b7e342498c33d10f00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac888603a16e8f987f2e78b7e342498c33d10f00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7e73eafa139c29a38f73ab697e2e967a386908d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJY5LkiAAoJEHSBCwEjRsmmqEQH/30u61Zg7XNICWKr4Z8kAAEL\n78i+EkXMDgeqpxxaEWNaekYpYATlqT7+oG9fAFHg8aV7HvOY1JkIbzFA2p2D/KrW\ng45m0bpEuf8ACl2FOfv6D116REB2e+RW7rns4i/1sOC6z0s+6KNSHN2PXWjxn1m2\nC9UJXOb1rbaJ+62DpI3xF5Ya37z9WGG04gtGLD65CF6P4vp9GmDJlgKWdjkl34GI\nhmFi9xQjTm0W95PFRlm9ycH5O+4GYeIWvJ8fzAGY2JgAGXaYSvQ8ZrrW3OTND16B\n7Y8EhfvVT5VisqKjR+GkIFDFXCX8j0B35yTJ9Ng6Lac/bLVURyZAnXF2JM1sGrU=\n=fDV3\n-----END PGP SIGNATURE-----",
        "payload": "tree ac888603a16e8f987f2e78b7e342498c33d10f00\nparent 3c95bd43d8ffec336e26227ac4e2d71d3b349061\nparent cd7f39467afd1f2742a80d608852ebb9eb5179a0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1491384559 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1491384610 +0200\n\nMerge #10151: [logging] initialize flag variable to 0 (and continue if GetLogCategory() fails)\n\ncd7f394 initialize flag variable to 0 (and continue if GetLogCategory() fails) (John Newbery)\n\nTree-SHA512: d0f2653bd0e71ed763220cb08d3a5335c5bdfe2f54ff7f9302d97f3265d7aa7f57606fe416a61aaac1535dbb046d0fb40a61f5a9d5cf234b042268e00ee7679d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7e73eafa139c29a38f73ab697e2e967a386908d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7e73eafa139c29a38f73ab697e2e967a386908d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7e73eafa139c29a38f73ab697e2e967a386908d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c95bd43d8ffec336e26227ac4e2d71d3b349061",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c95bd43d8ffec336e26227ac4e2d71d3b349061",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c95bd43d8ffec336e26227ac4e2d71d3b349061"
      },
      {
        "sha": "cd7f39467afd1f2742a80d608852ebb9eb5179a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd7f39467afd1f2742a80d608852ebb9eb5179a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd7f39467afd1f2742a80d608852ebb9eb5179a0"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "315be8b697bbf2aefa546f26a6c6c2209335df07",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7e73eafa139c29a38f73ab697e2e967a386908d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7e73eafa139c29a38f73ab697e2e967a386908d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c7e73eafa139c29a38f73ab697e2e967a386908d",
        "patch": "@@ -910,9 +910,10 @@ bool AppInitParameterInteraction()\n \n         if (find(categories.begin(), categories.end(), std::string(\"0\")) == categories.end()) {\n             for (const auto& cat : categories) {\n-                uint32_t flag;\n+                uint32_t flag = 0;\n                 if (!GetLogCategory(&flag, &cat)) {\n                     InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n+                    continue;\n                 }\n                 logCategories |= flag;\n             }\n@@ -923,9 +924,10 @@ bool AppInitParameterInteraction()\n     if (mapMultiArgs.count(\"-debugexclude\") > 0) {\n         const std::vector<std::string>& excludedCategories = mapMultiArgs.at(\"-debugexclude\");\n         for (const auto& cat : excludedCategories) {\n-            uint32_t flag;\n+            uint32_t flag = 0;\n             if (!GetLogCategory(&flag, &cat)) {\n                 InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n+                continue;\n             }\n             logCategories &= ~flag;\n         }"
      }
    ]
  },
  {
    "sha": "63062bda1ac0b57cb92e663596650a6e42508f15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzA2MmJkYTFhYzBiNTdjYjkyZTY2MzU5NjY1MGE2ZTQyNTA4ZjE1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-05T19:19:26Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-05T22:36:37Z"
      },
      "message": "[tests] color test results and sort alphabetically",
      "tree": {
        "sha": "9ad8154f1b50e021194340ac1296020e78826e66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ad8154f1b50e021194340ac1296020e78826e66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63062bda1ac0b57cb92e663596650a6e42508f15",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63062bda1ac0b57cb92e663596650a6e42508f15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63062bda1ac0b57cb92e663596650a6e42508f15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63062bda1ac0b57cb92e663596650a6e42508f15/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7e73eafa139c29a38f73ab697e2e967a386908d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7e73eafa139c29a38f73ab697e2e967a386908d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7e73eafa139c29a38f73ab697e2e967a386908d"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 61,
      "deletions": 25
    },
    "files": [
      {
        "sha": "7cf02218267d33fa66c550163bc27f15ddbcbd8a",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 61,
        "deletions": 25,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63062bda1ac0b57cb92e663596650a6e42508f15/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63062bda1ac0b57cb92e663596650a6e42508f15/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=63062bda1ac0b57cb92e663596650a6e42508f15",
        "patch": "@@ -25,6 +25,12 @@\n import re\n import logging\n \n+BOLD = (\"\", \"\")\n+if os.name == 'posix':\n+    # primitive formatting on supported\n+    # terminal via ANSI escape sequences:\n+    BOLD = ('\\033[0m', '\\033[1m')\n+\n TEST_EXIT_PASSED = 0\n TEST_EXIT_SKIPPED = 77\n \n@@ -231,11 +237,6 @@ def main():\n     run_tests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], args.jobs, args.coverage, passon_args)\n \n def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=False, args=[]):\n-    BOLD = (\"\",\"\")\n-    if os.name == 'posix':\n-        # primitive formatting on supported\n-        # terminal via ANSI escape sequences:\n-        BOLD = ('\\033[0m', '\\033[1m')\n \n     #Set env vars\n     if \"BITCOIND\" not in os.environ:\n@@ -258,42 +259,54 @@ def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=Fal\n         subprocess.check_output([tests_dir + 'create_cache.py'] + flags)\n \n     #Run Tests\n-    all_passed = True\n-    time_sum = 0\n-    time0 = time.time()\n-\n     job_queue = TestHandler(jobs, tests_dir, test_list, flags)\n+    time0 = time.time()\n+    test_results = []\n \n     max_len_name = len(max(test_list, key=len))\n-    results = \"\\n\" + BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"STATUS \", \"DURATION\") + BOLD[0]\n+\n     for _ in range(len(test_list)):\n-        (name, stdout, stderr, status, duration) = job_queue.get_next()\n-        all_passed = all_passed and status != \"Failed\"\n-        time_sum += duration\n-\n-        if status == \"Passed\":\n-            logging.debug(\"\\n%s%s%s passed, Duration: %s s\" % (BOLD[1], name, BOLD[0], duration))\n-        elif status == \"Skipped\":\n-            logging.debug(\"\\n%s%s%s skipped\" % (BOLD[1], name, BOLD[0]))\n+        test_result, stdout, stderr = job_queue.get_next()\n+        test_results.append(test_result)\n+\n+        if test_result.status == \"Passed\":\n+            logging.debug(\"\\n%s%s%s passed, Duration: %s s\" % (BOLD[1], test_result.name, BOLD[0], test_result.time))\n+        elif test_result.status == \"Skipped\":\n+            logging.debug(\"\\n%s%s%s skipped\" % (BOLD[1], test_result.name, BOLD[0]))\n         else:\n-            print(\"\\n%s%s%s failed, Duration: %s s\\n\" % (BOLD[1], name, BOLD[0], duration))\n+            print(\"\\n%s%s%s failed, Duration: %s s\\n\" % (BOLD[1], test_result.name, BOLD[0], test_result.time))\n             print(BOLD[1] + 'stdout:\\n' + BOLD[0] + stdout + '\\n')\n             print(BOLD[1] + 'stderr:\\n' + BOLD[0] + stderr + '\\n')\n \n-        results += \"%s | %s | %s s\\n\" % (name.ljust(max_len_name), status.ljust(7), duration)\n-\n-    results += BOLD[1] + \"\\n%s | %s | %s s (accumulated)\" % (\"ALL\".ljust(max_len_name), str(all_passed).ljust(7), time_sum) + BOLD[0]\n-    print(results)\n-    print(\"\\nRuntime: %s s\" % (int(time.time() - time0)))\n+    print_results(test_results, max_len_name, (int(time.time() - time0)))\n \n     if coverage:\n         coverage.report_rpc_coverage()\n \n         logging.debug(\"Cleaning up coverage data\")\n         coverage.cleanup()\n \n+    all_passed = all(map(lambda test_result: test_result.status == \"Passed\", test_results))\n+\n     sys.exit(not all_passed)\n \n+def print_results(test_results, max_len_name, runtime):\n+    results = \"\\n\" + BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"STATUS \", \"DURATION\") + BOLD[0]\n+\n+    test_results.sort(key=lambda result: result.name.lower())\n+    all_passed = True\n+    time_sum = 0\n+\n+    for test_result in test_results:\n+        all_passed = all_passed and test_result.status != \"Failed\"\n+        time_sum += test_result.time\n+        test_result.padding = max_len_name\n+        results += str(test_result)\n+\n+    results += BOLD[1] + \"\\n%s | %s | %s s (accumulated) \\n\" % (\"ALL\".ljust(max_len_name), str(all_passed).ljust(7), time_sum) + BOLD[0]\n+    results += \"Runtime: %s s\\n\" % (runtime)\n+    print(results)\n+\n class TestHandler:\n     \"\"\"\n     Trigger the testscrips passed in via the list.\n@@ -348,9 +361,32 @@ def get_next(self):\n                         status = \"Failed\"\n                     self.num_running -= 1\n                     self.jobs.remove(j)\n-                    return name, stdout, stderr, status, int(time.time() - time0)\n+\n+                    return TestResult(name, status, int(time.time() - time0)), stdout, stderr\n             print('.', end='', flush=True)\n \n+class TestResult():\n+    def __init__(self, name, status, time):\n+        self.name = name\n+        self.status = status\n+        self.time = time\n+        self.padding = 0\n+\n+    def __repr__(self):\n+        COLOR = (\"\", \"\")\n+        if os.name == 'posix':\n+            # primitive formatting on supported\n+            # terminal via ANSI escape sequences:\n+            if self.status == \"Passed\":\n+                COLOR = ('\\033[0m', '\\033[0;34m')\n+            elif self.status == \"Failed\":\n+                COLOR = ('\\033[0m', '\\033[0;31m')\n+            elif self.status == \"Skipped\":\n+                COLOR = ('\\033[0m', '\\033[1;30m')\n+\n+        return COLOR[1] + \"%s | %s | %s s\\n\" % (self.name.ljust(self.padding), self.status.ljust(7), self.time) + COLOR[0]\n+\n+\n def check_script_list(src_dir):\n     \"\"\"Check scripts directory.\n "
      }
    ]
  },
  {
    "sha": "08d9aee3ebc2c2401c4137e0575bdbbe056f5cae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGQ5YWVlM2ViYzJjMjQwMWM0MTM3ZTA1NzViZGJiZTA1NmY1Y2Fl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-05T07:39:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-06T08:41:34Z"
      },
      "message": "build: Remove duplicate version information from src/clientversion.h\n\nFail when the version information is not defined otherwise when\nHAVE_CONFIG_H is not set.",
      "tree": {
        "sha": "f8cac51be9c629ea753bac843831aaf2ce53e0a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8cac51be9c629ea753bac843831aaf2ce53e0a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08d9aee3ebc2c2401c4137e0575bdbbe056f5cae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08d9aee3ebc2c2401c4137e0575bdbbe056f5cae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08d9aee3ebc2c2401c4137e0575bdbbe056f5cae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08d9aee3ebc2c2401c4137e0575bdbbe056f5cae/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "168a7034f5eefcf657f6332f0b7966e439ca4df5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168a7034f5eefcf657f6332f0b7966e439ca4df5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/168a7034f5eefcf657f6332f0b7966e439ca4df5"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 5,
      "deletions": 21
    },
    "files": [
      {
        "sha": "8fde6daca5320dbec724da06eb722ef760afba57",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 5,
        "deletions": 21,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08d9aee3ebc2c2401c4137e0575bdbbe056f5cae/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08d9aee3ebc2c2401c4137e0575bdbbe056f5cae/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=08d9aee3ebc2c2401c4137e0575bdbbe056f5cae",
        "patch": "@@ -7,29 +7,13 @@\n \n #if defined(HAVE_CONFIG_H)\n #include \"config/bitcoin-config.h\"\n-#else\n-\n-/**\n- * client versioning and copyright year\n- */\n-\n-//! These need to be macros, as clientversion.cpp's and bitcoin*-res.rc's voodoo requires it\n-#define CLIENT_VERSION_MAJOR 0\n-#define CLIENT_VERSION_MINOR 14\n-#define CLIENT_VERSION_REVISION 99\n-#define CLIENT_VERSION_BUILD 0\n-\n-//! Set to true for release, false for prerelease or test build\n-#define CLIENT_VERSION_IS_RELEASE false\n-\n-/**\n- * Copyright year (2009-this)\n- * Todo: update this when changing our copyright comments in the source\n- */\n-#define COPYRIGHT_YEAR 2017\n-\n #endif //HAVE_CONFIG_H\n \n+// Check that required client information is defined\n+#if !defined(CLIENT_VERSION_MAJOR) || !defined(CLIENT_VERSION_MINOR) || !defined(CLIENT_VERSION_REVISION) || !defined(CLIENT_VERSION_BUILD) || !defined(CLIENT_VERSION_IS_RELEASE) || !defined(COPYRIGHT_YEAR)\n+#error Client version information missing: wasn't defined by bitcoin-config.h nor defined any other way\n+#endif\n+\n /**\n  * Converts the parameter X to a string after macro replacement on X has been performed.\n  * Don't merge these into one macro!"
      }
    ]
  },
  {
    "sha": "9ff781884a504244a446cad8013ef9f6e86ff1c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmY3ODE4ODRhNTA0MjQ0YTQ0NmNhZDgwMTNlZjlmNmU4NmZmMWMz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-05T07:48:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-06T08:41:34Z"
      },
      "message": "doc: Update release process for simplified version bumping",
      "tree": {
        "sha": "d3aca4f623f97fd3c9bee57ad61c85c5dc6ee76f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3aca4f623f97fd3c9bee57ad61c85c5dc6ee76f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ff781884a504244a446cad8013ef9f6e86ff1c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ff781884a504244a446cad8013ef9f6e86ff1c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ff781884a504244a446cad8013ef9f6e86ff1c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ff781884a504244a446cad8013ef9f6e86ff1c3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08d9aee3ebc2c2401c4137e0575bdbbe056f5cae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08d9aee3ebc2c2401c4137e0575bdbbe056f5cae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08d9aee3ebc2c2401c4137e0575bdbbe056f5cae"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 3,
      "deletions": 18
    },
    "files": [
      {
        "sha": "5a99b726f1281424b1f1fda842137de2e36856b8",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 3,
        "deletions": 18,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ff781884a504244a446cad8013ef9f6e86ff1c3/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ff781884a504244a446cad8013ef9f6e86ff1c3/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=9ff781884a504244a446cad8013ef9f6e86ff1c3",
        "patch": "@@ -10,7 +10,7 @@ Before every release candidate:\n Before every minor and major release:\n \n * Update [bips.md](bips.md) to account for changes since the last release.\n-* Update version in sources (see below)\n+* Update version in `configure.ac` (don't forget to set `CLIENT_VERSION_IS_RELEASE` to `true`)\n * Write release notes (see below)\n * Update `src/chainparams.cpp` nMinimumChainWork with information from the getblockchaininfo rpc.\n * Update `src/chainparams.cpp` defaultAssumeValid  with information from the getblockhash rpc.\n@@ -24,6 +24,7 @@ Before every major release:\n * Update hardcoded [seeds](/contrib/seeds/README.md), see [this pull request](https://github.com/bitcoin/bitcoin/pull/7415) for an example.\n * Update [`BLOCK_CHAIN_SIZE`](/src/qt/intro.cpp) to the current size plus some overhead.\n * Update `src/chainparams.cpp` chainTxData with statistics about the transaction count and rate.\n+* Update version of `contrib/gitian-descriptors/*.yml`: usually one'd want to do this on master after branching off the release - but be sure to at least do it before a new major release\n \n ### First time / New builders\n \n@@ -37,23 +38,7 @@ Check out the source code in the following directory hierarchy.\n     git clone https://github.com/devrandom/gitian-builder.git\n     git clone https://github.com/bitcoin/bitcoin.git\n \n-### Bitcoin maintainers/release engineers, update version in sources\n-\n-Update the following:\n-\n-- `configure.ac`:\n-    - `_CLIENT_VERSION_MAJOR`\n-    - `_CLIENT_VERSION_MINOR`\n-    - `_CLIENT_VERSION_REVISION`\n-    - Don't forget to set `_CLIENT_VERSION_IS_RELEASE` to `true`\n-- `src/clientversion.h`: (this mirrors `configure.ac` - see issue #3539)\n-    - `CLIENT_VERSION_MAJOR`\n-    - `CLIENT_VERSION_MINOR`\n-    - `CLIENT_VERSION_REVISION`\n-    - Don't forget to set `CLIENT_VERSION_IS_RELEASE` to `true`\n-- `doc/README.md` and `doc/README_windows.txt`\n-- `doc/Doxyfile`: `PROJECT_NUMBER` contains the full version\n-- `contrib/gitian-descriptors/*.yml`: usually one'd want to do this on master after branching off the release - but be sure to at least do it before a new major release\n+### Bitcoin maintainers/release engineers, suggestion for writing release notes\n \n Write release notes. git shortlog helps a lot, for example:\n "
      }
    ]
  },
  {
    "sha": "1352092dbd5c59cb6460ed0cc5890271acf6efef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzUyMDkyZGJkNWM1OWNiNjQ2MGVkMGNjNTg5MDI3MWFjZjZlZmVm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-06T14:37:30Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-06T14:37:30Z"
      },
      "message": "Log calls to getblocktemplate",
      "tree": {
        "sha": "a032e6fae62ad331ef5cf9033e3af5eaf48869b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a032e6fae62ad331ef5cf9033e3af5eaf48869b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1352092dbd5c59cb6460ed0cc5890271acf6efef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1352092dbd5c59cb6460ed0cc5890271acf6efef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1352092dbd5c59cb6460ed0cc5890271acf6efef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1352092dbd5c59cb6460ed0cc5890271acf6efef/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7e73eafa139c29a38f73ab697e2e967a386908d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7e73eafa139c29a38f73ab697e2e967a386908d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7e73eafa139c29a38f73ab697e2e967a386908d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c86b130f9c2dcbe5fab46f938195f24ee9c0b331",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1352092dbd5c59cb6460ed0cc5890271acf6efef/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1352092dbd5c59cb6460ed0cc5890271acf6efef/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=1352092dbd5c59cb6460ed0cc5890271acf6efef",
        "patch": "@@ -369,9 +369,7 @@ void JSONRPCRequest::parse(const UniValue& valRequest)\n     if (!valMethod.isStr())\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Method must be a string\");\n     strMethod = valMethod.get_str();\n-    if (strMethod != \"getblocktemplate\") {\n-        LogPrint(BCLog::RPC, \"ThreadRPCServer method=%s\\n\", SanitizeString(strMethod));\n-    }\n+    LogPrint(BCLog::RPC, \"ThreadRPCServer method=%s\\n\", SanitizeString(strMethod));\n \n     // Parse params\n     UniValue valParams = find_value(request, \"params\");"
      }
    ]
  },
  {
    "sha": "bb92d839d5aecd41954091435a35e86b35a0a7ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjkyZDgzOWQ1YWVjZDQxOTU0MDkxNDM1YTM1ZTg2YjM1YTBhN2Nh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-06T17:31:47Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-06T17:31:47Z"
      },
      "message": "[tests] Add unicode symbols for tests passing/failing/skipping",
      "tree": {
        "sha": "cb68e1e0bb623998b16bf839c97b0fdd2527a438",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb68e1e0bb623998b16bf839c97b0fdd2527a438"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb92d839d5aecd41954091435a35e86b35a0a7ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb92d839d5aecd41954091435a35e86b35a0a7ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb92d839d5aecd41954091435a35e86b35a0a7ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb92d839d5aecd41954091435a35e86b35a0a7ca/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "63062bda1ac0b57cb92e663596650a6e42508f15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63062bda1ac0b57cb92e663596650a6e42508f15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63062bda1ac0b57cb92e663596650a6e42508f15"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d40ca9bbc64af9f6514e020cd17683192a457f95",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb92d839d5aecd41954091435a35e86b35a0a7ca/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb92d839d5aecd41954091435a35e86b35a0a7ca/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=bb92d839d5aecd41954091435a35e86b35a0a7ca",
        "patch": "@@ -291,7 +291,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=Fal\n     sys.exit(not all_passed)\n \n def print_results(test_results, max_len_name, runtime):\n-    results = \"\\n\" + BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"STATUS \", \"DURATION\") + BOLD[0]\n+    results = \"\\n\" + BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"STATUS   \", \"DURATION\") + BOLD[0]\n \n     test_results.sort(key=lambda result: result.name.lower())\n     all_passed = True\n@@ -384,7 +384,15 @@ def __repr__(self):\n             elif self.status == \"Skipped\":\n                 COLOR = ('\\033[0m', '\\033[1;30m')\n \n-        return COLOR[1] + \"%s | %s | %s s\\n\" % (self.name.ljust(self.padding), self.status.ljust(7), self.time) + COLOR[0]\n+        SYMBOL = \"  \"\n+        if self.status == \"Passed\":\n+            SYMBOL = \"\u2713 \"\n+        elif self.status == \"Failed\":\n+            SYMBOL = \"\u2716 \"\n+        elif self.status == \"Skipped\":\n+            SYMBOL = \"\u25cb \"\n+\n+        return COLOR[1] + \"%s | %s%s | %s s\\n\" % (self.name.ljust(self.padding), SYMBOL, self.status.ljust(7), self.time) + COLOR[0]\n \n \n def check_script_list(src_dir):"
      }
    ]
  },
  {
    "sha": "8c28670e92b6422eb7576f074446238f9f221999",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzI4NjcwZTkyYjY0MjJlYjc1NzZmMDc0NDQ2MjM4ZjlmMjIxOTk5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-06T18:19:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-06T18:35:15Z"
      },
      "message": "Merge #9902: Lightweight abstraction of boost::filesystem\n\nf110272 Remove `namespace fs=fs` (Wladimir J. van der Laan)\n75594bd torcontrol: Use fs::path instead of std::string for private key path (Wladimir J. van der Laan)\n2a5f574 Use fsbridge for fopen and freopen (Wladimir J. van der Laan)\nbac5c9c Replace uses of boost::filesystem with fs (Wladimir J. van der Laan)\n7d5172d Replace includes of boost/filesystem.h with fs.h (Wladimir J. van der Laan)\n19e36bb Add fs.cpp/h (Wladimir J. van der Laan)\n\nTree-SHA512: 2c34f059dfa6850b9323f3389e9090a6b5f839a457a2960d182c2ecfafd9883c956f5928bb796613402d3aad68ebc78259796a7a313f4a6cfa98aaf507a66842",
      "tree": {
        "sha": "d54a16aa559b66073933e21e2e21930b5507765b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d54a16aa559b66073933e21e2e21930b5507765b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c28670e92b6422eb7576f074446238f9f221999",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJY5opjAAoJEHSBCwEjRsmmMfIIAL7f+5wSMg1IkyTcyze3uNPs\nOlKHNL8tUgg7Y4mg1Gofl1NPKw/ZC8iai4+JOuutnvAtNnT+mC59oWb8MlyXKWC6\nbEIOq8ocEo3ftWx2IVXD/ESQEqDWhOMeLpRSFRCh+rvRSwiFVsyyKRfR8AMO0jha\nKxZrTow6lC+R6QwBFEJlUsh7K3O7C5f5KezAfWFXestFoY6xa+ipzRcMSwv2oInE\nnSipqAhVUAPIiyspLYGiWWCLlM8fo7fmQOsH6373VX8laOMwNNIELe3HNxniv0x5\nunjljlmdlZBvs9anPofpg9X1sZliQAbtvBNag2cFRE/u1PIFxY7VjVR064EOP4Y=\n=Wchr\n-----END PGP SIGNATURE-----",
        "payload": "tree d54a16aa559b66073933e21e2e21930b5507765b\nparent c7e73eafa139c29a38f73ab697e2e967a386908d\nparent f110272dc90cd870bfff48c9a61e091e67dbb2e9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1491502761 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1491503715 +0200\n\nMerge #9902: Lightweight abstraction of boost::filesystem\n\nf110272 Remove `namespace fs=fs` (Wladimir J. van der Laan)\n75594bd torcontrol: Use fs::path instead of std::string for private key path (Wladimir J. van der Laan)\n2a5f574 Use fsbridge for fopen and freopen (Wladimir J. van der Laan)\nbac5c9c Replace uses of boost::filesystem with fs (Wladimir J. van der Laan)\n7d5172d Replace includes of boost/filesystem.h with fs.h (Wladimir J. van der Laan)\n19e36bb Add fs.cpp/h (Wladimir J. van der Laan)\n\nTree-SHA512: 2c34f059dfa6850b9323f3389e9090a6b5f839a457a2960d182c2ecfafd9883c956f5928bb796613402d3aad68ebc78259796a7a313f4a6cfa98aaf507a66842\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c28670e92b6422eb7576f074446238f9f221999",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c28670e92b6422eb7576f074446238f9f221999",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c28670e92b6422eb7576f074446238f9f221999/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7e73eafa139c29a38f73ab697e2e967a386908d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7e73eafa139c29a38f73ab697e2e967a386908d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7e73eafa139c29a38f73ab697e2e967a386908d"
      },
      {
        "sha": "f110272dc90cd870bfff48c9a61e091e67dbb2e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f110272dc90cd870bfff48c9a61e091e67dbb2e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f110272dc90cd870bfff48c9a61e091e67dbb2e9"
      }
    ],
    "stats": {
      "total": 440,
      "additions": 233,
      "deletions": 207
    },
    "files": [
      {
        "sha": "8680546b995b983589fa58b52d6f6381c247ded0",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -98,6 +98,7 @@ BITCOIN_CORE_H = \\\n   core_io.h \\\n   core_memusage.h \\\n   cuckoocache.h \\\n+  fs.h \\\n   httprpc.h \\\n   httpserver.h \\\n   indirectmap.h \\\n@@ -326,6 +327,7 @@ libbitcoin_util_a_SOURCES = \\\n   compat/glibc_sanity.cpp \\\n   compat/glibcxx_sanity.cpp \\\n   compat/strnlen.cpp \\\n+  fs.cpp \\\n   random.cpp \\\n   rpc/protocol.cpp \\\n   support/cleanse.cpp \\"
      },
      {
        "sha": "a3743cd0d4dee3fb069e952bd847e2d59c46d607",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -8,13 +8,13 @@\n #include \"addrman.h\"\n #include \"chainparams.h\"\n #include \"clientversion.h\"\n+#include \"fs.h\"\n #include \"hash.h\"\n #include \"random.h\"\n #include \"streams.h\"\n #include \"tinyformat.h\"\n #include \"util.h\"\n \n-#include <boost/filesystem.hpp>\n \n CBanDB::CBanDB()\n {\n@@ -36,8 +36,8 @@ bool CBanDB::Write(const banmap_t& banSet)\n     ssBanlist << hash;\n \n     // open temp output file, and associate with CAutoFile\n-    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n-    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n+    fs::path pathTmp = GetDataDir() / tmpfn;\n+    FILE *file = fsbridge::fopen(pathTmp, \"wb\");\n     CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n         return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n@@ -62,13 +62,13 @@ bool CBanDB::Write(const banmap_t& banSet)\n bool CBanDB::Read(banmap_t& banSet)\n {\n     // open input file, and associate with CAutoFile\n-    FILE *file = fopen(pathBanlist.string().c_str(), \"rb\");\n+    FILE *file = fsbridge::fopen(pathBanlist, \"rb\");\n     CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n         return error(\"%s: Failed to open file %s\", __func__, pathBanlist.string());\n \n     // use file size to size memory buffer\n-    uint64_t fileSize = boost::filesystem::file_size(pathBanlist);\n+    uint64_t fileSize = fs::file_size(pathBanlist);\n     uint64_t dataSize = 0;\n     // Don't try to resize to a negative number if file is small\n     if (fileSize >= sizeof(uint256))\n@@ -133,8 +133,8 @@ bool CAddrDB::Write(const CAddrMan& addr)\n     ssPeers << hash;\n \n     // open temp output file, and associate with CAutoFile\n-    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n-    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n+    fs::path pathTmp = GetDataDir() / tmpfn;\n+    FILE *file = fsbridge::fopen(pathTmp, \"wb\");\n     CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n         return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n@@ -159,13 +159,13 @@ bool CAddrDB::Write(const CAddrMan& addr)\n bool CAddrDB::Read(CAddrMan& addr)\n {\n     // open input file, and associate with CAutoFile\n-    FILE *file = fopen(pathAddr.string().c_str(), \"rb\");\n+    FILE *file = fsbridge::fopen(pathAddr, \"rb\");\n     CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n         return error(\"%s: Failed to open file %s\", __func__, pathAddr.string());\n \n     // use file size to size memory buffer\n-    uint64_t fileSize = boost::filesystem::file_size(pathAddr);\n+    uint64_t fileSize = fs::file_size(pathAddr);\n     uint64_t dataSize = 0;\n     // Don't try to resize to a negative number if file is small\n     if (fileSize >= sizeof(uint256))"
      },
      {
        "sha": "c3d509bd3a7a653353d00b0c9c7a5eb776fbd9dc",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -6,11 +6,11 @@\n #ifndef BITCOIN_ADDRDB_H\n #define BITCOIN_ADDRDB_H\n \n+#include \"fs.h\"\n #include \"serialize.h\"\n \n #include <string>\n #include <map>\n-#include <boost/filesystem/path.hpp>\n \n class CSubNet;\n class CAddrMan;\n@@ -80,7 +80,7 @@ typedef std::map<CSubNet, CBanEntry> banmap_t;\n class CAddrDB\n {\n private:\n-    boost::filesystem::path pathAddr;\n+    fs::path pathAddr;\n public:\n     CAddrDB();\n     bool Write(const CAddrMan& addr);\n@@ -92,7 +92,7 @@ class CAddrDB\n class CBanDB\n {\n private:\n-    boost::filesystem::path pathBanlist;\n+    fs::path pathBanlist;\n public:\n     CBanDB();\n     bool Write(const banmap_t& banSet);"
      },
      {
        "sha": "5edd43d41e0f81c88e7fc8e5cd879bfa9a51a930",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -9,12 +9,12 @@\n \n #include \"chainparamsbase.h\"\n #include \"clientversion.h\"\n+#include \"fs.h\"\n #include \"rpc/client.h\"\n #include \"rpc/protocol.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n-#include <boost/filesystem/operations.hpp>\n #include <stdio.h>\n \n #include <event2/buffer.h>\n@@ -96,7 +96,7 @@ static int AppInitRPC(int argc, char* argv[])\n         }\n         return EXIT_SUCCESS;\n     }\n-    if (!boost::filesystem::is_directory(GetDataDir(false))) {\n+    if (!fs::is_directory(GetDataDir(false))) {\n         fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", GetArg(\"-datadir\", \"\").c_str());\n         return EXIT_FAILURE;\n     }"
      },
      {
        "sha": "31680a8ec765ca85916f66df1e97ba567aaca72f",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -10,6 +10,7 @@\n #include \"chainparams.h\"\n #include \"clientversion.h\"\n #include \"compat.h\"\n+#include \"fs.h\"\n #include \"rpc/server.h\"\n #include \"init.h\"\n #include \"noui.h\"\n@@ -20,7 +21,6 @@\n #include \"utilstrencodings.h\"\n \n #include <boost/algorithm/string/predicate.hpp>\n-#include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n #include <stdio.h>\n@@ -97,7 +97,7 @@ bool AppInit(int argc, char* argv[])\n \n     try\n     {\n-        if (!boost::filesystem::is_directory(GetDataDir(false)))\n+        if (!fs::is_directory(GetDataDir(false)))\n         {\n             fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", GetArg(\"-datadir\", \"\").c_str());\n             return false;"
      },
      {
        "sha": "3d2098c05927cceb8c41184536f77ab87cbe1230",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -4,11 +4,10 @@\n \n #include \"dbwrapper.h\"\n \n+#include \"fs.h\"\n #include \"util.h\"\n #include \"random.h\"\n \n-#include <boost/filesystem.hpp>\n-\n #include <leveldb/cache.h>\n #include <leveldb/env.h>\n #include <leveldb/filter_policy.h>\n@@ -91,7 +90,7 @@ static leveldb::Options GetOptions(size_t nCacheSize)\n     return options;\n }\n \n-CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n+CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n {\n     penv = NULL;\n     readoptions.verify_checksums = true;"
      },
      {
        "sha": "b13e98b7a4b5cbbcdf90abc869e2f1305785127a",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -6,14 +6,13 @@\n #define BITCOIN_DBWRAPPER_H\n \n #include \"clientversion.h\"\n+#include \"fs.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"version.h\"\n \n-#include <boost/filesystem/path.hpp>\n-\n #include <leveldb/db.h>\n #include <leveldb/write_batch.h>\n \n@@ -195,7 +194,7 @@ class CDBWrapper\n      * @param[in] obfuscate   If true, store data obfuscated via simple XOR. If false, XOR\n      *                        with a zero'd byte array.\n      */\n-    CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false, bool obfuscate = false);\n+    CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false, bool obfuscate = false);\n     ~CDBWrapper();\n \n     template <typename K, typename V>"
      },
      {
        "sha": "6f2b768de322f4c1de51ae8ada66955fcec5faad",
        "filename": "src/fs.cpp",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/fs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/fs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -0,0 +1,17 @@\n+#include \"fs.h\"\n+\n+#include <boost/filesystem.hpp>\n+\n+namespace fsbridge {\n+\n+FILE *fopen(const fs::path& p, const char *mode)\n+{\n+    return ::fopen(p.string().c_str(), mode);\n+}\n+\n+FILE *freopen(const fs::path& p, const char *mode, FILE *stream)\n+{\n+    return ::freopen(p.string().c_str(), mode, stream);\n+}\n+\n+} // fsbridge"
      },
      {
        "sha": "585cbf9c38254fc3cf1e0ffd5a779eb15ee28be5",
        "filename": "src/fs.h",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/fs.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/fs.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.h?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -0,0 +1,24 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_FS_H\n+#define BITCOIN_FS_H\n+\n+#include <stdio.h>\n+#include <string>\n+\n+#include <boost/filesystem.hpp>\n+#include <boost/filesystem/fstream.hpp>\n+#include <boost/filesystem/detail/utf8_codecvt_facet.hpp>\n+\n+/** Filesystem operations and types */\n+namespace fs = boost::filesystem;\n+\n+/** Bridge operations to C stdio */\n+namespace fsbridge {\n+    FILE *fopen(const fs::path& p, const char *mode);\n+    FILE *freopen(const fs::path& p, const char *mode, FILE *stream);\n+};\n+\n+#endif"
      },
      {
        "sha": "1e7e388a52413c89d531c7998a571464d7b64992",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -16,6 +16,7 @@\n #include \"checkpoints.h\"\n #include \"compat/sanity.h\"\n #include \"consensus/validation.h\"\n+#include \"fs.h\"\n #include \"httpserver.h\"\n #include \"httprpc.h\"\n #include \"key.h\"\n@@ -56,7 +57,6 @@\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/algorithm/string/split.hpp>\n #include <boost/bind.hpp>\n-#include <boost/filesystem.hpp>\n #include <boost/function.hpp>\n #include <boost/interprocess/sync/file_lock.hpp>\n #include <boost/thread.hpp>\n@@ -212,8 +212,8 @@ void Shutdown()\n \n     if (fFeeEstimatesInitialized)\n     {\n-        boost::filesystem::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n-        CAutoFile est_fileout(fopen(est_path.string().c_str(), \"wb\"), SER_DISK, CLIENT_VERSION);\n+        fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n+        CAutoFile est_fileout(fsbridge::fopen(est_path, \"wb\"), SER_DISK, CLIENT_VERSION);\n         if (!est_fileout.IsNull())\n             mempool.WriteFeeEstimates(est_fileout);\n         else\n@@ -250,8 +250,8 @@ void Shutdown()\n \n #ifndef WIN32\n     try {\n-        boost::filesystem::remove(GetPidFile());\n-    } catch (const boost::filesystem::filesystem_error& e) {\n+        fs::remove(GetPidFile());\n+    } catch (const fs::filesystem_error& e) {\n         LogPrintf(\"%s: Unable to remove pidfile: %s\\n\", __func__, e.what());\n     }\n #endif\n@@ -577,14 +577,14 @@ struct CImportingNow\n // works correctly.\n void CleanupBlockRevFiles()\n {\n-    std::map<std::string, boost::filesystem::path> mapBlockFiles;\n+    std::map<std::string, fs::path> mapBlockFiles;\n \n     // Glob all blk?????.dat and rev?????.dat files from the blocks directory.\n     // Remove the rev files immediately and insert the blk file paths into an\n     // ordered map keyed by block file index.\n     LogPrintf(\"Removing unusable blk?????.dat and rev?????.dat files for -reindex with -prune\\n\");\n-    boost::filesystem::path blocksdir = GetDataDir() / \"blocks\";\n-    for (boost::filesystem::directory_iterator it(blocksdir); it != boost::filesystem::directory_iterator(); it++) {\n+    fs::path blocksdir = GetDataDir() / \"blocks\";\n+    for (fs::directory_iterator it(blocksdir); it != fs::directory_iterator(); it++) {\n         if (is_regular_file(*it) &&\n             it->path().filename().string().length() == 12 &&\n             it->path().filename().string().substr(8,4) == \".dat\")\n@@ -601,7 +601,7 @@ void CleanupBlockRevFiles()\n     // keeping a separate counter.  Once we hit a gap (or if 0 doesn't exist)\n     // start removing block files.\n     int nContigCounter = 0;\n-    BOOST_FOREACH(const PAIRTYPE(std::string, boost::filesystem::path)& item, mapBlockFiles) {\n+    BOOST_FOREACH(const PAIRTYPE(std::string, fs::path)& item, mapBlockFiles) {\n         if (atoi(item.first) == nContigCounter) {\n             nContigCounter++;\n             continue;\n@@ -610,7 +610,7 @@ void CleanupBlockRevFiles()\n     }\n }\n \n-void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n+void ThreadImport(std::vector<fs::path> vImportFiles)\n {\n     const CChainParams& chainparams = Params();\n     RenameThread(\"bitcoin-loadblk\");\n@@ -623,7 +623,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n         int nFile = 0;\n         while (true) {\n             CDiskBlockPos pos(nFile, 0);\n-            if (!boost::filesystem::exists(GetBlockPosFilename(pos, \"blk\")))\n+            if (!fs::exists(GetBlockPosFilename(pos, \"blk\")))\n                 break; // No block files left to reindex\n             FILE *file = OpenBlockFile(pos, true);\n             if (!file)\n@@ -640,11 +640,11 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n     }\n \n     // hardcoded $DATADIR/bootstrap.dat\n-    boost::filesystem::path pathBootstrap = GetDataDir() / \"bootstrap.dat\";\n-    if (boost::filesystem::exists(pathBootstrap)) {\n-        FILE *file = fopen(pathBootstrap.string().c_str(), \"rb\");\n+    fs::path pathBootstrap = GetDataDir() / \"bootstrap.dat\";\n+    if (fs::exists(pathBootstrap)) {\n+        FILE *file = fsbridge::fopen(pathBootstrap, \"rb\");\n         if (file) {\n-            boost::filesystem::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n+            fs::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n             LogPrintf(\"Importing bootstrap.dat...\\n\");\n             LoadExternalBlockFile(chainparams, file);\n             RenameOver(pathBootstrap, pathBootstrapOld);\n@@ -654,8 +654,8 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n     }\n \n     // -loadblock=\n-    BOOST_FOREACH(const boost::filesystem::path& path, vImportFiles) {\n-        FILE *file = fopen(path.string().c_str(), \"rb\");\n+    BOOST_FOREACH(const fs::path& path, vImportFiles) {\n+        FILE *file = fsbridge::fopen(path, \"rb\");\n         if (file) {\n             LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n             LoadExternalBlockFile(chainparams, file);\n@@ -1135,8 +1135,8 @@ static bool LockDataDirectory(bool probeOnly)\n     std::string strDataDir = GetDataDir().string();\n \n     // Make sure only a single Bitcoin process is using the data directory.\n-    boost::filesystem::path pathLockFile = GetDataDir() / \".lock\";\n-    FILE* file = fopen(pathLockFile.string().c_str(), \"a\"); // empty lock file; created if it doesn't exist.\n+    fs::path pathLockFile = GetDataDir() / \".lock\";\n+    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n     if (file) fclose(file);\n \n     try {\n@@ -1400,7 +1400,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fReindex = GetBoolArg(\"-reindex\", false);\n     bool fReindexChainState = GetBoolArg(\"-reindex-chainstate\", false);\n \n-    boost::filesystem::create_directories(GetDataDir() / \"blocks\");\n+    fs::create_directories(GetDataDir() / \"blocks\");\n \n     // cache size calculations\n     int64_t nTotalCache = (GetArg(\"-dbcache\", nDefaultDbCache) << 20);\n@@ -1546,8 +1546,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n     LogPrintf(\" block index %15dms\\n\", GetTimeMillis() - nStart);\n \n-    boost::filesystem::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n-    CAutoFile est_filein(fopen(est_path.string().c_str(), \"rb\"), SER_DISK, CLIENT_VERSION);\n+    fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n+    CAutoFile est_filein(fsbridge::fopen(est_path, \"rb\"), SER_DISK, CLIENT_VERSION);\n     // Allowed to fail as this file IS missing on first startup.\n     if (!est_filein.IsNull())\n         mempool.ReadFeeEstimates(est_filein);\n@@ -1602,7 +1602,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (IsArgSet(\"-blocknotify\"))\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n \n-    std::vector<boost::filesystem::path> vImportFiles;\n+    std::vector<fs::path> vImportFiles;\n     if (mapMultiArgs.count(\"-loadblock\"))\n     {\n         BOOST_FOREACH(const std::string& strFile, mapMultiArgs.at(\"-loadblock\"))"
      },
      {
        "sha": "0fb0ad5039636c324a1562f9e7c406c5dd71e453",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -11,6 +11,7 @@\n #include \"amount.h\"\n #include \"bloom.h\"\n #include \"compat.h\"\n+#include \"fs.h\"\n #include \"hash.h\"\n #include \"limitedmap.h\"\n #include \"netaddress.h\"\n@@ -32,7 +33,6 @@\n #include <arpa/inet.h>\n #endif\n \n-#include <boost/filesystem/path.hpp>\n #include <boost/foreach.hpp>\n #include <boost/signals2/signal.hpp>\n "
      },
      {
        "sha": "23ec3ab434fa5b4ca221b809680b0c6cd92f86f2",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -10,6 +10,7 @@\n \n #include \"chainparams.h\"\n #include \"clientmodel.h\"\n+#include \"fs.h\"\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n #include \"intro.h\"\n@@ -38,7 +39,6 @@\n \n #include <stdint.h>\n \n-#include <boost/filesystem/operations.hpp>\n #include <boost/thread.hpp>\n \n #include <QApplication>\n@@ -608,7 +608,7 @@ int main(int argc, char *argv[])\n \n     /// 6. Determine availability of data directory and parse bitcoin.conf\n     /// - Do not call GetDataDir(true) before this step finishes\n-    if (!boost::filesystem::is_directory(GetDataDir(false)))\n+    if (!fs::is_directory(GetDataDir(false)))\n     {\n         QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n                               QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(GetArg(\"-datadir\", \"\"))));"
      },
      {
        "sha": "a2699d374a45af5bcb91f10a2692d29d37658b2b",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 20,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -9,6 +9,7 @@\n #include \"qvalidatedlineedit.h\"\n #include \"walletmodel.h\"\n \n+#include \"fs.h\"\n #include \"primitives/transaction.h\"\n #include \"init.h\"\n #include \"policy/policy.h\"\n@@ -35,9 +36,6 @@\n #include \"shlwapi.h\"\n #endif\n \n-#include <boost/filesystem.hpp>\n-#include <boost/filesystem/fstream.hpp>\n-#include <boost/filesystem/detail/utf8_codecvt_facet.hpp>\n #include <boost/scoped_array.hpp>\n \n #include <QAbstractItemView>\n@@ -65,7 +63,7 @@\n #include <QFontDatabase>\n #endif\n \n-static boost::filesystem::detail::utf8_codecvt_facet utf8;\n+static fs::detail::utf8_codecvt_facet utf8;\n \n #if defined(Q_OS_MAC)\n extern double NSAppKitVersionNumber;\n@@ -410,10 +408,10 @@ bool isObscured(QWidget *w)\n \n void openDebugLogfile()\n {\n-    boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n+    fs::path pathDebug = GetDataDir() / \"debug.log\";\n \n     /* Open debug.log with the associated application */\n-    if (boost::filesystem::exists(pathDebug))\n+    if (fs::exists(pathDebug))\n         QDesktopServices::openUrl(QUrl::fromLocalFile(boostPathToQString(pathDebug)));\n }\n \n@@ -597,7 +595,7 @@ TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* t\n }\n \n #ifdef WIN32\n-boost::filesystem::path static StartupShortcutPath()\n+fs::path static StartupShortcutPath()\n {\n     std::string chain = ChainNameFromCommandLine();\n     if (chain == CBaseChainParams::MAIN)\n@@ -610,13 +608,13 @@ boost::filesystem::path static StartupShortcutPath()\n bool GetStartOnSystemStartup()\n {\n     // check for Bitcoin*.lnk\n-    return boost::filesystem::exists(StartupShortcutPath());\n+    return fs::exists(StartupShortcutPath());\n }\n \n bool SetStartOnSystemStartup(bool fAutoStart)\n {\n     // If the shortcut exists already, remove it for updating\n-    boost::filesystem::remove(StartupShortcutPath());\n+    fs::remove(StartupShortcutPath());\n \n     if (fAutoStart)\n     {\n@@ -686,18 +684,16 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n // Follow the Desktop Application Autostart Spec:\n // http://standards.freedesktop.org/autostart-spec/autostart-spec-latest.html\n \n-boost::filesystem::path static GetAutostartDir()\n+fs::path static GetAutostartDir()\n {\n-    namespace fs = boost::filesystem;\n-\n     char* pszConfigHome = getenv(\"XDG_CONFIG_HOME\");\n     if (pszConfigHome) return fs::path(pszConfigHome) / \"autostart\";\n     char* pszHome = getenv(\"HOME\");\n     if (pszHome) return fs::path(pszHome) / \".config\" / \"autostart\";\n     return fs::path();\n }\n \n-boost::filesystem::path static GetAutostartFilePath()\n+fs::path static GetAutostartFilePath()\n {\n     std::string chain = ChainNameFromCommandLine();\n     if (chain == CBaseChainParams::MAIN)\n@@ -707,7 +703,7 @@ boost::filesystem::path static GetAutostartFilePath()\n \n bool GetStartOnSystemStartup()\n {\n-    boost::filesystem::ifstream optionFile(GetAutostartFilePath());\n+    fs::ifstream optionFile(GetAutostartFilePath());\n     if (!optionFile.good())\n         return false;\n     // Scan through file for \"Hidden=true\":\n@@ -727,17 +723,17 @@ bool GetStartOnSystemStartup()\n bool SetStartOnSystemStartup(bool fAutoStart)\n {\n     if (!fAutoStart)\n-        boost::filesystem::remove(GetAutostartFilePath());\n+        fs::remove(GetAutostartFilePath());\n     else\n     {\n         char pszExePath[MAX_PATH+1];\n         memset(pszExePath, 0, sizeof(pszExePath));\n         if (readlink(\"/proc/self/exe\", pszExePath, sizeof(pszExePath)-1) == -1)\n             return false;\n \n-        boost::filesystem::create_directories(GetAutostartDir());\n+        fs::create_directories(GetAutostartDir());\n \n-        boost::filesystem::ofstream optionFile(GetAutostartFilePath(), std::ios_base::out|std::ios_base::trunc);\n+        fs::ofstream optionFile(GetAutostartFilePath(), std::ios_base::out|std::ios_base::trunc);\n         if (!optionFile.good())\n             return false;\n         std::string chain = ChainNameFromCommandLine();\n@@ -859,12 +855,12 @@ void setClipboard(const QString& str)\n     QApplication::clipboard()->setText(str, QClipboard::Selection);\n }\n \n-boost::filesystem::path qstringToBoostPath(const QString &path)\n+fs::path qstringToBoostPath(const QString &path)\n {\n-    return boost::filesystem::path(path.toStdString(), utf8);\n+    return fs::path(path.toStdString(), utf8);\n }\n \n-QString boostPathToQString(const boost::filesystem::path &path)\n+QString boostPathToQString(const fs::path &path)\n {\n     return QString::fromStdString(path.string(utf8));\n }"
      },
      {
        "sha": "f95677015641c235c0461c985fde96eeb364aca0",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_QT_GUIUTIL_H\n \n #include \"amount.h\"\n+#include \"fs.h\"\n \n #include <QEvent>\n #include <QHeaderView>\n@@ -16,8 +17,6 @@\n #include <QTableView>\n #include <QLabel>\n \n-#include <boost/filesystem.hpp>\n-\n class QValidatedLineEdit;\n class SendCoinsRecipient;\n \n@@ -183,10 +182,10 @@ namespace GUIUtil\n     void restoreWindowGeometry(const QString& strSetting, const QSize &defaultSizeIn, QWidget *parent);\n \n     /* Convert QString to OS specific boost path through UTF-8 */\n-    boost::filesystem::path qstringToBoostPath(const QString &path);\n+    fs::path qstringToBoostPath(const QString &path);\n \n     /* Convert OS specific boost path to QString through UTF-8 */\n-    QString boostPathToQString(const boost::filesystem::path &path);\n+    QString boostPathToQString(const fs::path &path);\n \n     /* Convert seconds into a QString with days, hours, mins, secs */\n     QString formatDurationStr(int secs);"
      },
      {
        "sha": "2460a59109c505e5ab9dd187a9ee9cb0b5233c92",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -6,15 +6,14 @@\n #include \"config/bitcoin-config.h\"\n #endif\n \n+#include \"fs.h\"\n #include \"intro.h\"\n #include \"ui_intro.h\"\n \n #include \"guiutil.h\"\n \n #include \"util.h\"\n \n-#include <boost/filesystem.hpp>\n-\n #include <QFileDialog>\n #include <QSettings>\n #include <QMessageBox>\n@@ -70,7 +69,6 @@ FreespaceChecker::FreespaceChecker(Intro *_intro)\n \n void FreespaceChecker::check()\n {\n-    namespace fs = boost::filesystem;\n     QString dataDirStr = intro->getPathToCheck();\n     fs::path dataDir = GUIUtil::qstringToBoostPath(dataDirStr);\n     uint64_t freeBytesAvailable = 0;\n@@ -190,7 +188,6 @@ QString Intro::getDefaultDataDirectory()\n \n bool Intro::pickDataDirectory()\n {\n-    namespace fs = boost::filesystem;\n     QSettings settings;\n     /* If data directory provided on command line, no need to look at settings\n        or show a picking dialog */"
      },
      {
        "sha": "dada689731094611f23f562a289138bf3842364b",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"chainparams.h\"\n #include \"consensus/validation.h\"\n+#include \"fs.h\"\n #include \"validation.h\"\n #include \"rpc/register.h\"\n #include \"rpc/server.h\"\n@@ -17,8 +18,6 @@\n #include <QDir>\n #include <QtGlobal>\n \n-#include <boost/filesystem.hpp>\n-\n static UniValue rpcNestedTest_rpc(const JSONRPCRequest& request)\n {\n     if (request.fHelp) {\n@@ -156,5 +155,5 @@ void RPCNestedTests::rpcNestedTests()\n     delete pblocktree;\n     pblocktree = nullptr;\n \n-    boost::filesystem::remove_all(boost::filesystem::path(path));\n+    fs::remove_all(fs::path(path));\n }"
      },
      {
        "sha": "823a5775f6dc3b2b4680e5df981cc09d9be18269",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -66,9 +66,9 @@ static const std::string COOKIEAUTH_USER = \"__cookie__\";\n /** Default name for auth cookie file */\n static const std::string COOKIEAUTH_FILE = \".cookie\";\n \n-boost::filesystem::path GetAuthCookieFile()\n+fs::path GetAuthCookieFile()\n {\n-    boost::filesystem::path path(GetArg(\"-rpccookiefile\", COOKIEAUTH_FILE));\n+    fs::path path(GetArg(\"-rpccookiefile\", COOKIEAUTH_FILE));\n     if (!path.is_complete()) path = GetDataDir() / path;\n     return path;\n }\n@@ -84,7 +84,7 @@ bool GenerateAuthCookie(std::string *cookie_out)\n      * these are set to 077 in init.cpp unless overridden with -sysperms.\n      */\n     std::ofstream file;\n-    boost::filesystem::path filepath = GetAuthCookieFile();\n+    fs::path filepath = GetAuthCookieFile();\n     file.open(filepath.string().c_str());\n     if (!file.is_open()) {\n         LogPrintf(\"Unable to open cookie authentication file %s for writing\\n\", filepath.string());\n@@ -103,7 +103,7 @@ bool GetAuthCookie(std::string *cookie_out)\n {\n     std::ifstream file;\n     std::string cookie;\n-    boost::filesystem::path filepath = GetAuthCookieFile();\n+    fs::path filepath = GetAuthCookieFile();\n     file.open(filepath.string().c_str());\n     if (!file.is_open())\n         return false;\n@@ -118,8 +118,8 @@ bool GetAuthCookie(std::string *cookie_out)\n void DeleteAuthCookie()\n {\n     try {\n-        boost::filesystem::remove(GetAuthCookieFile());\n-    } catch (const boost::filesystem::filesystem_error& e) {\n+        fs::remove(GetAuthCookieFile());\n+    } catch (const fs::filesystem_error& e) {\n         LogPrintf(\"%s: Unable to remove random auth cookie file: %s\\n\", __func__, e.what());\n     }\n }"
      },
      {
        "sha": "70f7092cfeb659d8c870d02d4142c308c9768402",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -6,11 +6,12 @@\n #ifndef BITCOIN_RPCPROTOCOL_H\n #define BITCOIN_RPCPROTOCOL_H\n \n+#include \"fs.h\"\n+\n #include <list>\n #include <map>\n #include <stdint.h>\n #include <string>\n-#include <boost/filesystem.hpp>\n \n #include <univalue.h>\n \n@@ -89,7 +90,7 @@ std::string JSONRPCReply(const UniValue& result, const UniValue& error, const Un\n UniValue JSONRPCError(int code, const std::string& message);\n \n /** Get name of RPC authentication cookie file */\n-boost::filesystem::path GetAuthCookieFile();\n+fs::path GetAuthCookieFile();\n /** Generate a new RPC authentication cookie and write it to disk */\n bool GenerateAuthCookie(std::string *cookie_out);\n /** Read the RPC authentication cookie from disk */"
      },
      {
        "sha": "4032c5163c87d2db2ecb3d1cd3994d8e963ebb13",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -6,6 +6,7 @@\n #include \"rpc/server.h\"\n \n #include \"base58.h\"\n+#include \"fs.h\"\n #include \"init.h\"\n #include \"random.h\"\n #include \"sync.h\"\n@@ -16,7 +17,6 @@\n #include <univalue.h>\n \n #include <boost/bind.hpp>\n-#include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n #include <boost/shared_ptr.hpp>\n #include <boost/signals2/signal.hpp>"
      },
      {
        "sha": "c9d9849ada071ca27b169f707627c931f58475f3",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -28,7 +28,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n-        boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+        fs::path ph = fs::temp_directory_path() / fs::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n         char key = 'k';\n         uint256 in = GetRandHash();\n@@ -49,7 +49,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n-        boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+        fs::path ph = fs::temp_directory_path() / fs::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         char key = 'i';\n@@ -86,7 +86,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n-        boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+        fs::path ph = fs::temp_directory_path() / fs::unique_path();\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         // The two keys are intentionally chosen for ordering\n@@ -125,8 +125,8 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n // Test that we do not obfuscation if there is existing data.\n BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n {\n-    // We're going to share this boost::filesystem::path between two wrappers\n-    boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+    // We're going to share this fs::path between two wrappers\n+    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n@@ -167,8 +167,8 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n // Ensure that we start obfuscating during a reindex.\n BOOST_AUTO_TEST_CASE(existing_data_reindex)\n {\n-    // We're going to share this boost::filesystem::path between two wrappers\n-    boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+    // We're going to share this fs::path between two wrappers\n+    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n@@ -204,7 +204,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n \n BOOST_AUTO_TEST_CASE(iterator_ordering)\n {\n-    boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n     CDBWrapper dbw(ph, (1 << 20), true, false, false);\n     for (int x=0x00; x<256; ++x) {\n         uint8_t key = x;\n@@ -275,7 +275,7 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n {\n     char buf[10];\n \n-    boost::filesystem::path ph = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();\n+    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n     CDBWrapper dbw(ph, (1 << 20), true, false, false);\n     for (int x=0x00; x<10; ++x) {\n         for (int y = 0; y < 10; y++) {"
      },
      {
        "sha": "bda38196622773e8c0ea4fe87fc5af119970ca2b",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -7,6 +7,7 @@\n #include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n+#include \"fs.h\"\n #include \"key.h\"\n #include \"validation.h\"\n #include \"miner.h\"\n@@ -24,7 +25,6 @@\n \n #include <memory>\n \n-#include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n FastRandomContext insecure_rand_ctx(true);\n@@ -59,7 +59,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         RegisterAllCoreRPCCommands(tableRPC);\n         ClearDatadirCache();\n         pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n-        boost::filesystem::create_directories(pathTemp);\n+        fs::create_directories(pathTemp);\n         ForceSetArg(\"-datadir\", pathTemp.string());\n         mempool.setSanityCheck(1.0);\n         pblocktree = new CBlockTreeDB(1 << 20, true);\n@@ -91,7 +91,7 @@ TestingSetup::~TestingSetup()\n         delete pcoinsTip;\n         delete pcoinsdbview;\n         delete pblocktree;\n-        boost::filesystem::remove_all(pathTemp);\n+        fs::remove_all(pathTemp);\n }\n \n TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)"
      },
      {
        "sha": "60a86d8c4839093962bec59d817a31b38ded2e15",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -6,12 +6,12 @@\n #define BITCOIN_TEST_TEST_BITCOIN_H\n \n #include \"chainparamsbase.h\"\n+#include \"fs.h\"\n #include \"key.h\"\n #include \"pubkey.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n \n-#include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n /** Basic testing setup.\n@@ -30,7 +30,7 @@ struct BasicTestingSetup {\n class CConnman;\n struct TestingSetup: public BasicTestingSetup {\n     CCoinsViewDB *pcoinsdbview;\n-    boost::filesystem::path pathTemp;\n+    fs::path pathTemp;\n     boost::thread_group threadGroup;\n     CConnman* connman;\n "
      },
      {
        "sha": "591d0bf30271240f9184ed472d04ab6c6096c851",
        "filename": "src/test/testutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/test/testutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/test/testutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/testutil.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -8,8 +8,8 @@\n #include <shlobj.h>\n #endif\n \n-#include <boost/filesystem.hpp>\n+#include \"fs.h\"\n \n-boost::filesystem::path GetTempPath() {\n-    return boost::filesystem::temp_directory_path();\n+fs::path GetTempPath() {\n+    return fs::temp_directory_path();\n }"
      },
      {
        "sha": "cbe784d6400b9dd4cc4339ae6803f9c1d2bb13fd",
        "filename": "src/test/testutil.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/test/testutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/test/testutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/testutil.h?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -8,8 +8,8 @@\n #ifndef BITCOIN_TEST_TESTUTIL_H\n #define BITCOIN_TEST_TESTUTIL_H\n \n-#include <boost/filesystem/path.hpp>\n+#include \"fs.h\"\n \n-boost::filesystem::path GetTempPath();\n+fs::path GetTempPath();\n \n #endif // BITCOIN_TEST_TESTUTIL_H"
      },
      {
        "sha": "c1bd95b00f22526063045a2be4b49bee3bd451e0",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -314,9 +314,9 @@ static std::map<std::string,std::string> ParseTorReplyMapping(const std::string\n  * @param maxsize Puts a maximum size limit on the file that is read. If the file is larger than this, truncated data\n  *         (with len > maxsize) will be returned.\n  */\n-static std::pair<bool,std::string> ReadBinaryFile(const std::string &filename, size_t maxsize=std::numeric_limits<size_t>::max())\n+static std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize=std::numeric_limits<size_t>::max())\n {\n-    FILE *f = fopen(filename.c_str(), \"rb\");\n+    FILE *f = fsbridge::fopen(filename, \"rb\");\n     if (f == NULL)\n         return std::make_pair(false,\"\");\n     std::string retval;\n@@ -334,9 +334,9 @@ static std::pair<bool,std::string> ReadBinaryFile(const std::string &filename, s\n /** Write contents of std::string to a file.\n  * @return true on success.\n  */\n-static bool WriteBinaryFile(const std::string &filename, const std::string &data)\n+static bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n {\n-    FILE *f = fopen(filename.c_str(), \"wb\");\n+    FILE *f = fsbridge::fopen(filename, \"wb\");\n     if (f == NULL)\n         return false;\n     if (fwrite(data.data(), 1, data.size(), f) != data.size()) {\n@@ -359,7 +359,7 @@ class TorController\n     ~TorController();\n \n     /** Get name fo file to store private key in */\n-    std::string GetPrivateKeyFile();\n+    fs::path GetPrivateKeyFile();\n \n     /** Reconnect, after getting disconnected */\n     void Reconnect();\n@@ -411,7 +411,7 @@ TorController::TorController(struct event_base* _base, const std::string& _targe\n     // Read service private key if cached\n     std::pair<bool,std::string> pkf = ReadBinaryFile(GetPrivateKeyFile());\n     if (pkf.first) {\n-        LogPrint(BCLog::TOR, \"tor: Reading cached private key from %s\\n\", GetPrivateKeyFile());\n+        LogPrint(BCLog::TOR, \"tor: Reading cached private key from %s\\n\", GetPrivateKeyFile().string());\n         private_key = pkf.second;\n     }\n }\n@@ -442,9 +442,9 @@ void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlRe\n         service = LookupNumeric(std::string(service_id+\".onion\").c_str(), GetListenPort());\n         LogPrintf(\"tor: Got service ID %s, advertising service %s\\n\", service_id, service.ToString());\n         if (WriteBinaryFile(GetPrivateKeyFile(), private_key)) {\n-            LogPrint(BCLog::TOR, \"tor: Cached service private key to %s\\n\", GetPrivateKeyFile());\n+            LogPrint(BCLog::TOR, \"tor: Cached service private key to %s\\n\", GetPrivateKeyFile().string());\n         } else {\n-            LogPrintf(\"tor: Error writing service private key to %s\\n\", GetPrivateKeyFile());\n+            LogPrintf(\"tor: Error writing service private key to %s\\n\", GetPrivateKeyFile().string());\n         }\n         AddLocal(service, LOCAL_MANUAL);\n         // ... onion requested - keep connection open\n@@ -651,9 +651,9 @@ void TorController::Reconnect()\n     }\n }\n \n-std::string TorController::GetPrivateKeyFile()\n+fs::path TorController::GetPrivateKeyFile()\n {\n-    return (GetDataDir() / \"onion_private_key\").string();\n+    return GetDataDir() / \"onion_private_key\";\n }\n \n void TorController::reconnect_cb(evutil_socket_t fd, short what, void *arg)"
      },
      {
        "sha": "54737992891414b8fd45feebf84bdd59c0941226",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 36,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -10,6 +10,7 @@\n #include \"util.h\"\n \n #include \"chainparamsbase.h\"\n+#include \"fs.h\"\n #include \"random.h\"\n #include \"serialize.h\"\n #include \"sync.h\"\n@@ -79,8 +80,6 @@\n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n #include <boost/algorithm/string/join.hpp>\n #include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()\n-#include <boost/filesystem.hpp>\n-#include <boost/filesystem/fstream.hpp>\n #include <boost/foreach.hpp>\n #include <boost/program_options/detail/config_file.hpp>\n #include <boost/program_options/parsers.hpp>\n@@ -215,8 +214,8 @@ void OpenDebugLog()\n \n     assert(fileout == NULL);\n     assert(vMsgsBeforeOpenLog);\n-    boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n-    fileout = fopen(pathDebug.string().c_str(), \"a\");\n+    fs::path pathDebug = GetDataDir() / \"debug.log\";\n+    fileout = fsbridge::fopen(pathDebug, \"a\");\n     if (fileout) {\n         setbuf(fileout, NULL); // unbuffered\n         // dump buffered messages from before we opened the log\n@@ -354,8 +353,8 @@ int LogPrintStr(const std::string &str)\n             // reopen the log file, if requested\n             if (fReopenDebugLog) {\n                 fReopenDebugLog = false;\n-                boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n-                if (freopen(pathDebug.string().c_str(),\"a\",fileout) != NULL)\n+                fs::path pathDebug = GetDataDir() / \"debug.log\";\n+                if (fsbridge::freopen(pathDebug,\"a\",fileout) != NULL)\n                     setbuf(fileout, NULL); // unbuffered\n             }\n \n@@ -512,9 +511,8 @@ void PrintExceptionContinue(const std::exception* pex, const char* pszThread)\n     fprintf(stderr, \"\\n\\n************************\\n%s\\n\", message.c_str());\n }\n \n-boost::filesystem::path GetDefaultDataDir()\n+fs::path GetDefaultDataDir()\n {\n-    namespace fs = boost::filesystem;\n     // Windows < Vista: C:\\Documents and Settings\\Username\\Application Data\\Bitcoin\n     // Windows >= Vista: C:\\Users\\Username\\AppData\\Roaming\\Bitcoin\n     // Mac: ~/Library/Application Support/Bitcoin\n@@ -539,13 +537,12 @@ boost::filesystem::path GetDefaultDataDir()\n #endif\n }\n \n-static boost::filesystem::path pathCached;\n-static boost::filesystem::path pathCachedNetSpecific;\n+static fs::path pathCached;\n+static fs::path pathCachedNetSpecific;\n static CCriticalSection csPathCached;\n \n-const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n+const fs::path &GetDataDir(bool fNetSpecific)\n {\n-    namespace fs = boost::filesystem;\n \n     LOCK(csPathCached);\n \n@@ -577,13 +574,13 @@ void ClearDatadirCache()\n {\n     LOCK(csPathCached);\n \n-    pathCached = boost::filesystem::path();\n-    pathCachedNetSpecific = boost::filesystem::path();\n+    pathCached = fs::path();\n+    pathCachedNetSpecific = fs::path();\n }\n \n-boost::filesystem::path GetConfigFile(const std::string& confPath)\n+fs::path GetConfigFile(const std::string& confPath)\n {\n-    boost::filesystem::path pathConfigFile(confPath);\n+    fs::path pathConfigFile(confPath);\n     if (!pathConfigFile.is_complete())\n         pathConfigFile = GetDataDir(false) / pathConfigFile;\n \n@@ -592,7 +589,7 @@ boost::filesystem::path GetConfigFile(const std::string& confPath)\n \n void ReadConfigFile(const std::string& confPath)\n {\n-    boost::filesystem::ifstream streamConfig(GetConfigFile(confPath));\n+    fs::ifstream streamConfig(GetConfigFile(confPath));\n     if (!streamConfig.good())\n         return; // No bitcoin.conf file is OK\n \n@@ -617,16 +614,16 @@ void ReadConfigFile(const std::string& confPath)\n }\n \n #ifndef WIN32\n-boost::filesystem::path GetPidFile()\n+fs::path GetPidFile()\n {\n-    boost::filesystem::path pathPidFile(GetArg(\"-pid\", BITCOIN_PID_FILENAME));\n+    fs::path pathPidFile(GetArg(\"-pid\", BITCOIN_PID_FILENAME));\n     if (!pathPidFile.is_complete()) pathPidFile = GetDataDir() / pathPidFile;\n     return pathPidFile;\n }\n \n-void CreatePidFile(const boost::filesystem::path &path, pid_t pid)\n+void CreatePidFile(const fs::path &path, pid_t pid)\n {\n-    FILE* file = fopen(path.string().c_str(), \"w\");\n+    FILE* file = fsbridge::fopen(path, \"w\");\n     if (file)\n     {\n         fprintf(file, \"%d\\n\", pid);\n@@ -635,7 +632,7 @@ void CreatePidFile(const boost::filesystem::path &path, pid_t pid)\n }\n #endif\n \n-bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest)\n+bool RenameOver(fs::path src, fs::path dest)\n {\n #ifdef WIN32\n     return MoveFileExA(src.string().c_str(), dest.string().c_str(),\n@@ -651,13 +648,13 @@ bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest)\n  * Specifically handles case where path p exists, but it wasn't possible for the user to\n  * write to the parent directory.\n  */\n-bool TryCreateDirectory(const boost::filesystem::path& p)\n+bool TryCreateDirectory(const fs::path& p)\n {\n     try\n     {\n-        return boost::filesystem::create_directory(p);\n-    } catch (const boost::filesystem::filesystem_error&) {\n-        if (!boost::filesystem::exists(p) || !boost::filesystem::is_directory(p))\n+        return fs::create_directory(p);\n+    } catch (const fs::filesystem_error&) {\n+        if (!fs::exists(p) || !fs::is_directory(p))\n             throw;\n     }\n \n@@ -764,19 +761,19 @@ void ShrinkDebugFile()\n     // Amount of debug.log to save at end when shrinking (must fit in memory)\n     constexpr size_t RECENT_DEBUG_HISTORY_SIZE = 10 * 1000000;\n     // Scroll debug.log if it's getting too big\n-    boost::filesystem::path pathLog = GetDataDir() / \"debug.log\";\n-    FILE* file = fopen(pathLog.string().c_str(), \"r\");\n+    fs::path pathLog = GetDataDir() / \"debug.log\";\n+    FILE* file = fsbridge::fopen(pathLog, \"r\");\n     // If debug.log file is more than 10% bigger the RECENT_DEBUG_HISTORY_SIZE\n     // trim it down by saving only the last RECENT_DEBUG_HISTORY_SIZE bytes\n-    if (file && boost::filesystem::file_size(pathLog) > 11 * (RECENT_DEBUG_HISTORY_SIZE / 10))\n+    if (file && fs::file_size(pathLog) > 11 * (RECENT_DEBUG_HISTORY_SIZE / 10))\n     {\n         // Restart the file with some of the end\n         std::vector<char> vch(RECENT_DEBUG_HISTORY_SIZE, 0);\n         fseek(file, -((long)vch.size()), SEEK_END);\n         int nBytes = fread(vch.data(), 1, vch.size(), file);\n         fclose(file);\n \n-        file = fopen(pathLog.string().c_str(), \"w\");\n+        file = fsbridge::fopen(pathLog, \"w\");\n         if (file)\n         {\n             fwrite(vch.data(), 1, nBytes, file);\n@@ -788,10 +785,8 @@ void ShrinkDebugFile()\n }\n \n #ifdef WIN32\n-boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate)\n+fs::path GetSpecialFolderPath(int nFolder, bool fCreate)\n {\n-    namespace fs = boost::filesystem;\n-\n     char pszPath[MAX_PATH] = \"\";\n \n     if(SHGetSpecialFolderPathA(NULL, pszPath, nFolder, fCreate))\n@@ -851,9 +846,9 @@ void SetupEnvironment()\n     // The path locale is lazy initialized and to avoid deinitialization errors\n     // in multithreading environments, it is set explicitly by the main thread.\n     // A dummy locale is used to extract the internal default locale, used by\n-    // boost::filesystem::path, which is then used to explicitly imbue the path.\n-    std::locale loc = boost::filesystem::path::imbue(std::locale::classic());\n-    boost::filesystem::path::imbue(loc);\n+    // fs::path, which is then used to explicitly imbue the path.\n+    std::locale loc = fs::path::imbue(std::locale::classic());\n+    fs::path::imbue(loc);\n }\n \n bool SetupNetworking()"
      },
      {
        "sha": "7998449feebc26e62133bb5865621fe9afe28728",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -15,6 +15,7 @@\n #endif\n \n #include \"compat.h\"\n+#include \"fs.h\"\n #include \"tinyformat.h\"\n #include \"utiltime.h\"\n \n@@ -25,7 +26,6 @@\n #include <string>\n #include <vector>\n \n-#include <boost/filesystem/path.hpp>\n #include <boost/signals2/signal.hpp>\n #include <boost/thread/exceptions.hpp>\n \n@@ -144,19 +144,19 @@ void FileCommit(FILE *file);\n bool TruncateFile(FILE *file, unsigned int length);\n int RaiseFileDescriptorLimit(int nMinFD);\n void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length);\n-bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest);\n-bool TryCreateDirectory(const boost::filesystem::path& p);\n-boost::filesystem::path GetDefaultDataDir();\n-const boost::filesystem::path &GetDataDir(bool fNetSpecific = true);\n+bool RenameOver(fs::path src, fs::path dest);\n+bool TryCreateDirectory(const fs::path& p);\n+fs::path GetDefaultDataDir();\n+const fs::path &GetDataDir(bool fNetSpecific = true);\n void ClearDatadirCache();\n-boost::filesystem::path GetConfigFile(const std::string& confPath);\n+fs::path GetConfigFile(const std::string& confPath);\n #ifndef WIN32\n-boost::filesystem::path GetPidFile();\n-void CreatePidFile(const boost::filesystem::path &path, pid_t pid);\n+fs::path GetPidFile();\n+void CreatePidFile(const fs::path &path, pid_t pid);\n #endif\n void ReadConfigFile(const std::string& confPath);\n #ifdef WIN32\n-boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n+fs::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif\n void OpenDebugLog();\n void ShrinkDebugFile();"
      },
      {
        "sha": "239893dc0bad7345937abdcd7895ad8e69301d9e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -12,6 +12,7 @@\n #include \"consensus/consensus.h\"\n #include \"consensus/merkle.h\"\n #include \"consensus/validation.h\"\n+#include \"fs.h\"\n #include \"hash.h\"\n #include \"init.h\"\n #include \"policy/fees.h\"\n@@ -41,8 +42,6 @@\n \n #include <boost/algorithm/string/replace.hpp>\n #include <boost/algorithm/string/join.hpp>\n-#include <boost/filesystem.hpp>\n-#include <boost/filesystem/fstream.hpp>\n #include <boost/math/distributions/poisson.hpp>\n #include <boost/thread.hpp>\n \n@@ -3318,8 +3317,8 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune)\n {\n     for (std::set<int>::iterator it = setFilesToPrune.begin(); it != setFilesToPrune.end(); ++it) {\n         CDiskBlockPos pos(*it, 0);\n-        boost::filesystem::remove(GetBlockPosFilename(pos, \"blk\"));\n-        boost::filesystem::remove(GetBlockPosFilename(pos, \"rev\"));\n+        fs::remove(GetBlockPosFilename(pos, \"blk\"));\n+        fs::remove(GetBlockPosFilename(pos, \"rev\"));\n         LogPrintf(\"Prune: %s deleted blk/rev (%05u)\\n\", __func__, *it);\n     }\n }\n@@ -3403,7 +3402,7 @@ void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight\n \n bool CheckDiskSpace(uint64_t nAdditionalBytes)\n {\n-    uint64_t nFreeBytesAvailable = boost::filesystem::space(GetDataDir()).available;\n+    uint64_t nFreeBytesAvailable = fs::space(GetDataDir()).available;\n \n     // Check for nMinDiskSpace bytes (currently 50MB)\n     if (nFreeBytesAvailable < nMinDiskSpace + nAdditionalBytes)\n@@ -3416,11 +3415,11 @@ FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fReadOnly)\n {\n     if (pos.IsNull())\n         return NULL;\n-    boost::filesystem::path path = GetBlockPosFilename(pos, prefix);\n-    boost::filesystem::create_directories(path.parent_path());\n-    FILE* file = fopen(path.string().c_str(), \"rb+\");\n+    fs::path path = GetBlockPosFilename(pos, prefix);\n+    fs::create_directories(path.parent_path());\n+    FILE* file = fsbridge::fopen(path, \"rb+\");\n     if (!file && !fReadOnly)\n-        file = fopen(path.string().c_str(), \"wb+\");\n+        file = fsbridge::fopen(path, \"wb+\");\n     if (!file) {\n         LogPrintf(\"Unable to open file %s\\n\", path.string());\n         return NULL;\n@@ -3443,7 +3442,7 @@ FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly) {\n     return OpenDiskFile(pos, \"rev\", fReadOnly);\n }\n \n-boost::filesystem::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)\n+fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)\n {\n     return GetDataDir() / \"blocks\" / strprintf(\"%s%05u.dat\", prefix, pos.nFile);\n }\n@@ -4168,7 +4167,7 @@ static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n bool LoadMempool(void)\n {\n     int64_t nExpiryTimeout = GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n-    FILE* filestr = fopen((GetDataDir() / \"mempool.dat\").string().c_str(), \"rb\");\n+    FILE* filestr = fsbridge::fopen(GetDataDir() / \"mempool.dat\", \"rb\");\n     CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n     if (file.IsNull()) {\n         LogPrintf(\"Failed to open mempool file from disk. Continuing anyway.\\n\");\n@@ -4248,7 +4247,7 @@ void DumpMempool(void)\n     int64_t mid = GetTimeMicros();\n \n     try {\n-        FILE* filestr = fopen((GetDataDir() / \"mempool.dat.new\").string().c_str(), \"wb\");\n+        FILE* filestr = fsbridge::fopen(GetDataDir() / \"mempool.dat.new\", \"wb\");\n         if (!filestr) {\n             return;\n         }"
      },
      {
        "sha": "4aa10cbb0bdc5e26058dd5e128c3b278910df0f8",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -13,6 +13,7 @@\n #include \"amount.h\"\n #include \"chain.h\"\n #include \"coins.h\"\n+#include \"fs.h\"\n #include \"protocol.h\" // For CMessageHeader::MessageStartChars\n #include \"script/script_error.h\"\n #include \"sync.h\"\n@@ -30,7 +31,6 @@\n #include <atomic>\n \n #include <boost/unordered_map.hpp>\n-#include <boost/filesystem/path.hpp>\n \n class CBlockIndex;\n class CBlockTreeDB;\n@@ -250,7 +250,7 @@ FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Open an undo file (rev?????.dat) */\n FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */\n-boost::filesystem::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n+fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n /** Import blocks from an external file */\n bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp = NULL);\n /** Initialize a new block tree database + block data on disk */"
      },
      {
        "sha": "f47fc92b5758ae8b62e548fc7dc8b7f5a9342a08",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -6,6 +6,7 @@\n #include \"db.h\"\n \n #include \"addrman.h\"\n+#include \"fs.h\"\n #include \"hash.h\"\n #include \"protocol.h\"\n #include \"util.h\"\n@@ -17,7 +18,6 @@\n #include <sys/stat.h>\n #endif\n \n-#include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n #include <boost/thread.hpp>\n #include <boost/version.hpp>\n@@ -66,17 +66,17 @@ void CDBEnv::Close()\n     EnvShutdown();\n }\n \n-bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n+bool CDBEnv::Open(const fs::path& pathIn)\n {\n     if (fDbEnvInit)\n         return true;\n \n     boost::this_thread::interruption_point();\n \n     strPath = pathIn.string();\n-    boost::filesystem::path pathLogDir = pathIn / \"database\";\n+    fs::path pathLogDir = pathIn / \"database\";\n     TryCreateDirectory(pathLogDir);\n-    boost::filesystem::path pathErrorFile = pathIn / \"db.log\";\n+    fs::path pathErrorFile = pathIn / \"db.log\";\n     LogPrintf(\"CDBEnv::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n \n     unsigned int nEnvFlags = 0;\n@@ -89,7 +89,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n     dbenv->set_lg_max(1048576);\n     dbenv->set_lk_max_locks(40000);\n     dbenv->set_lk_max_objects(40000);\n-    dbenv->set_errfile(fopen(pathErrorFile.string().c_str(), \"a\")); /// debug\n+    dbenv->set_errfile(fsbridge::fopen(pathErrorFile, \"a\")); /// debug\n     dbenv->set_flags(DB_AUTO_COMMIT, 1);\n     dbenv->set_flags(DB_TXN_WRITE_NOSYNC, 1);\n     dbenv->log_set_config(DB_LOG_AUTO_REMOVE, 1);\n@@ -227,13 +227,13 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n     return fSuccess;\n }\n \n-bool CDB::VerifyEnvironment(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& errorStr)\n+bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr)\n {\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n     LogPrintf(\"Using wallet %s\\n\", walletFile);\n \n     // Wallet file must be a plain filename without a directory\n-    if (walletFile != boost::filesystem::basename(walletFile) + boost::filesystem::extension(walletFile))\n+    if (walletFile != fs::basename(walletFile) + fs::extension(walletFile))\n     {\n         errorStr = strprintf(_(\"Wallet %s resides outside data directory %s\"), walletFile, dataDir.string());\n         return false;\n@@ -242,12 +242,12 @@ bool CDB::VerifyEnvironment(const std::string& walletFile, const boost::filesyst\n     if (!bitdb.Open(dataDir))\n     {\n         // try moving the database env out of the way\n-        boost::filesystem::path pathDatabase = dataDir / \"database\";\n-        boost::filesystem::path pathDatabaseBak = dataDir / strprintf(\"database.%d.bak\", GetTime());\n+        fs::path pathDatabase = dataDir / \"database\";\n+        fs::path pathDatabaseBak = dataDir / strprintf(\"database.%d.bak\", GetTime());\n         try {\n-            boost::filesystem::rename(pathDatabase, pathDatabaseBak);\n+            fs::rename(pathDatabase, pathDatabaseBak);\n             LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathDatabase.string(), pathDatabaseBak.string());\n-        } catch (const boost::filesystem::filesystem_error&) {\n+        } catch (const fs::filesystem_error&) {\n             // failure is ok (well, not really, but it's not worse than what we started with)\n         }\n \n@@ -261,9 +261,9 @@ bool CDB::VerifyEnvironment(const std::string& walletFile, const boost::filesyst\n     return true;\n }\n \n-bool CDB::VerifyDatabaseFile(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& warningStr, std::string& errorStr, bool (*recoverFunc)(const std::string& strFile))\n+bool CDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr, bool (*recoverFunc)(const std::string& strFile))\n {\n-    if (boost::filesystem::exists(dataDir / walletFile))\n+    if (fs::exists(dataDir / walletFile))\n     {\n         CDBEnv::VerifyResult r = bitdb.Verify(walletFile, recoverFunc);\n         if (r == CDBEnv::RECOVER_OK)\n@@ -590,7 +590,7 @@ void CDBEnv::Flush(bool fShutdown)\n                 dbenv->log_archive(&listp, DB_ARCH_REMOVE);\n                 Close();\n                 if (!fMockDb)\n-                    boost::filesystem::remove_all(boost::filesystem::path(strPath) / \"database\");\n+                    fs::remove_all(fs::path(strPath) / \"database\");\n             }\n         }\n     }"
      },
      {
        "sha": "9f912f9a1a4f14ceebcfa46c458bc7e48a777b92",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_WALLET_DB_H\n \n #include \"clientversion.h\"\n+#include \"fs.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n #include \"sync.h\"\n@@ -16,8 +17,6 @@\n #include <string>\n #include <vector>\n \n-#include <boost/filesystem/path.hpp>\n-\n #include <db_cxx.h>\n \n static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;\n@@ -28,7 +27,7 @@ class CDBEnv\n private:\n     bool fDbEnvInit;\n     bool fMockDb;\n-    // Don't change into boost::filesystem::path, as that can result in\n+    // Don't change into fs::path, as that can result in\n     // shutdown problems/crashes caused by a static initialized internal pointer.\n     std::string strPath;\n \n@@ -67,7 +66,7 @@ class CDBEnv\n     typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n     bool Salvage(const std::string& strFile, bool fAggressive, std::vector<KeyValPair>& vResult);\n \n-    bool Open(const boost::filesystem::path& path);\n+    bool Open(const fs::path& path);\n     void Close();\n     void Flush(bool fShutdown);\n     void CheckpointLSN(const std::string& strFile);\n@@ -110,9 +109,9 @@ class CDB\n        ideal to be called periodically */\n     static bool PeriodicFlush(std::string strFile);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& errorStr);\n+    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& warningStr, std::string& errorStr, bool (*recoverFunc)(const std::string& strFile));\n+    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr, bool (*recoverFunc)(const std::string& strFile));\n \n private:\n     CDB(const CDB&);"
      },
      {
        "sha": "55d81daab426ec52b9ba2a5c3cd599781d894888",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -11,6 +11,7 @@\n #include \"wallet/coincontrol.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n+#include \"fs.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"validation.h\"\n@@ -30,7 +31,6 @@\n #include <assert.h>\n \n #include <boost/algorithm/string/replace.hpp>\n-#include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n CWallet* pwalletMain = NULL;\n@@ -3945,16 +3945,16 @@ bool CWallet::BackupWallet(const std::string& strDest)\n                 bitdb.mapFileUseCount.erase(strWalletFile);\n \n                 // Copy wallet file\n-                boost::filesystem::path pathSrc = GetDataDir() / strWalletFile;\n-                boost::filesystem::path pathDest(strDest);\n-                if (boost::filesystem::is_directory(pathDest))\n+                fs::path pathSrc = GetDataDir() / strWalletFile;\n+                fs::path pathDest(strDest);\n+                if (fs::is_directory(pathDest))\n                     pathDest /= strWalletFile;\n \n                 try {\n-                    boost::filesystem::copy_file(pathSrc, pathDest, boost::filesystem::copy_option::overwrite_if_exists);\n+                    fs::copy_file(pathSrc, pathDest, fs::copy_option::overwrite_if_exists);\n                     LogPrintf(\"copied %s to %s\\n\", strWalletFile, pathDest.string());\n                     return true;\n-                } catch (const boost::filesystem::filesystem_error& e) {\n+                } catch (const fs::filesystem_error& e) {\n                     LogPrintf(\"error copying %s to %s - %s\\n\", strWalletFile, pathDest.string(), e.what());\n                     return false;\n                 }"
      },
      {
        "sha": "ceff2d36e35938588d136e87a06c03b4285f943b",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"base58.h\"\n #include \"consensus/validation.h\"\n+#include \"fs.h\"\n #include \"validation.h\" // For CheckTransaction\n #include \"protocol.h\"\n #include \"serialize.h\"\n@@ -18,7 +19,6 @@\n #include <atomic>\n \n #include <boost/version.hpp>\n-#include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n #include <boost/thread.hpp>\n \n@@ -842,12 +842,12 @@ bool CWalletDB::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDa\n     return true;\n }\n \n-bool CWalletDB::VerifyEnvironment(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& errorStr)\n+bool CWalletDB::VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr)\n {\n     return CDB::VerifyEnvironment(walletFile, dataDir, errorStr);\n }\n \n-bool CWalletDB::VerifyDatabaseFile(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& warningStr, std::string& errorStr)\n+bool CWalletDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr)\n {\n     return CDB::VerifyDatabaseFile(walletFile, dataDir, errorStr, warningStr, CWalletDB::Recover);\n }"
      },
      {
        "sha": "b94f341b2edb722d25824aaa5517642072f38428",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c28670e92b6422eb7576f074446238f9f221999/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c28670e92b6422eb7576f074446238f9f221999/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=8c28670e92b6422eb7576f074446238f9f221999",
        "patch": "@@ -185,9 +185,9 @@ class CWalletDB : public CDB\n     /* Function to determine if a certain KV/key-type is a key (cryptographical key) type */\n     static bool IsKeyType(const std::string& strType);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& errorStr);\n+    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const std::string& walletFile, const boost::filesystem::path& dataDir, std::string& warningStr, std::string& errorStr);\n+    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr);\n \n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);"
      }
    ]
  },
  {
    "sha": "a3a2160b665076a9405d360427249c2f73f80d82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2EyMTYwYjY2NTA3NmE5NDA1ZDM2MDQyNzI0OWMyZjczZjgwZDgy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-07T12:52:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-07T12:55:29Z"
      },
      "message": "Merge #10162: [trivial] Log calls to getblocktemplate\n\n1352092 Log calls to getblocktemplate (John Newbery)\n\nTree-SHA512: de2c6faac8baea2f63eb499dbcd0669062a71759050cf8bcada9b454fe82f056c23635d41c755badf55158ffc40a380f82bea1f40c8a2cc51604d981515b71eb",
      "tree": {
        "sha": "a9954dee8b33549fdd0701f0a8a1129a26f8ab60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9954dee8b33549fdd0701f0a8a1129a26f8ab60"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3a2160b665076a9405d360427249c2f73f80d82",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJY54xBAAoJEHSBCwEjRsmmcDYH/jWwxqeY+JzFpGw+2o89mV7h\nHM4lPE1sf6FmQljDmIG4AjlsCOUh2PVbcjwAYdROI2uUgwhu/Wxc9Zp74PHADXYm\nHFPJnD7wUuI+/GRlWrhGWrXKFjU7BL5yGz89ZnMoHEEmX2tYD9ShGn/4/TA2/cg1\noxHtUulFuddxFrTZGrH0dsBODXEVEmcB+iHiT8CpcTYdHcKlwrhwY2/RJdX90KvG\nSPRUM/d/oLA1IOOyPaLBiIn3tIQl6HpMElpZ3wBqrYm0tCzYHo7FQ6UjXBSGnugn\nKol80er150/n1O+o+R4B5EvfuMoX/4YLmBMgbVsCpEIxohdH5L7xWqT3l0IVPZ4=\n=s++i\n-----END PGP SIGNATURE-----",
        "payload": "tree a9954dee8b33549fdd0701f0a8a1129a26f8ab60\nparent 8c28670e92b6422eb7576f074446238f9f221999\nparent 1352092dbd5c59cb6460ed0cc5890271acf6efef\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1491569549 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1491569729 +0200\n\nMerge #10162: [trivial] Log calls to getblocktemplate\n\n1352092 Log calls to getblocktemplate (John Newbery)\n\nTree-SHA512: de2c6faac8baea2f63eb499dbcd0669062a71759050cf8bcada9b454fe82f056c23635d41c755badf55158ffc40a380f82bea1f40c8a2cc51604d981515b71eb\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3a2160b665076a9405d360427249c2f73f80d82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3a2160b665076a9405d360427249c2f73f80d82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3a2160b665076a9405d360427249c2f73f80d82/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c28670e92b6422eb7576f074446238f9f221999",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c28670e92b6422eb7576f074446238f9f221999",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c28670e92b6422eb7576f074446238f9f221999"
      },
      {
        "sha": "1352092dbd5c59cb6460ed0cc5890271acf6efef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1352092dbd5c59cb6460ed0cc5890271acf6efef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1352092dbd5c59cb6460ed0cc5890271acf6efef"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5c493428d8b041dc5e362cebcb9a8553853337ea",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3a2160b665076a9405d360427249c2f73f80d82/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3a2160b665076a9405d360427249c2f73f80d82/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=a3a2160b665076a9405d360427249c2f73f80d82",
        "patch": "@@ -369,9 +369,7 @@ void JSONRPCRequest::parse(const UniValue& valRequest)\n     if (!valMethod.isStr())\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Method must be a string\");\n     strMethod = valMethod.get_str();\n-    if (strMethod != \"getblocktemplate\") {\n-        LogPrint(BCLog::RPC, \"ThreadRPCServer method=%s\\n\", SanitizeString(strMethod));\n-    }\n+    LogPrint(BCLog::RPC, \"ThreadRPCServer method=%s\\n\", SanitizeString(strMethod));\n \n     // Parse params\n     UniValue valParams = find_value(request, \"params\");"
      }
    ]
  },
  {
    "sha": "d80baaa514260334077799abbce4d7f16c2a538d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODBiYWFhNTE0MjYwMzM0MDc3Nzk5YWJiY2U0ZDdmMTZjMmE1Mzhk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-07T13:15:29Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-07T13:15:29Z"
      },
      "message": "fixup - align summary row correctly and make colors/glyphs globals",
      "tree": {
        "sha": "6d227d7f86abca7a4c4277f45ce01f119cacb82d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d227d7f86abca7a4c4277f45ce01f119cacb82d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d80baaa514260334077799abbce4d7f16c2a538d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d80baaa514260334077799abbce4d7f16c2a538d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d80baaa514260334077799abbce4d7f16c2a538d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d80baaa514260334077799abbce4d7f16c2a538d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb92d839d5aecd41954091435a35e86b35a0a7ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb92d839d5aecd41954091435a35e86b35a0a7ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb92d839d5aecd41954091435a35e86b35a0a7ca"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 17,
      "deletions": 18
    },
    "files": [
      {
        "sha": "c0bbc623a899650736d69e93b129c498f8ce7306",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 17,
        "deletions": 18,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d80baaa514260334077799abbce4d7f16c2a538d/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d80baaa514260334077799abbce4d7f16c2a538d/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=d80baaa514260334077799abbce4d7f16c2a538d",
        "patch": "@@ -25,11 +25,18 @@\n import re\n import logging\n \n-BOLD = (\"\", \"\")\n+# Formatting. Default colors to empty strings.\n+BOLD, BLUE, RED, GREY = (\"\", \"\"), (\"\", \"\"), (\"\", \"\"), (\"\", \"\")\n+TICK = \"\u2713 \"\n+CROSS = \"\u2716 \"\n+CIRCLE = \"\u25cb \"\n if os.name == 'posix':\n     # primitive formatting on supported\n     # terminal via ANSI escape sequences:\n     BOLD = ('\\033[0m', '\\033[1m')\n+    BLUE = ('\\033[0m', '\\033[0;34m')\n+    RED = ('\\033[0m', '\\033[0;31m')\n+    GREY = ('\\033[0m', '\\033[1;30m')\n \n TEST_EXIT_PASSED = 0\n TEST_EXIT_SKIPPED = 77\n@@ -303,7 +310,8 @@ def print_results(test_results, max_len_name, runtime):\n         test_result.padding = max_len_name\n         results += str(test_result)\n \n-    results += BOLD[1] + \"\\n%s | %s | %s s (accumulated) \\n\" % (\"ALL\".ljust(max_len_name), str(all_passed).ljust(7), time_sum) + BOLD[0]\n+    status = TICK + \"Passed\" if all_passed else CROSS + \"Failed\"\n+    results += BOLD[1] + \"\\n%s | %s | %s s (accumulated) \\n\" % (\"ALL\".ljust(max_len_name), status.ljust(9), time_sum) + BOLD[0]\n     results += \"Runtime: %s s\\n\" % (runtime)\n     print(results)\n \n@@ -373,26 +381,17 @@ def __init__(self, name, status, time):\n         self.padding = 0\n \n     def __repr__(self):\n-        COLOR = (\"\", \"\")\n-        if os.name == 'posix':\n-            # primitive formatting on supported\n-            # terminal via ANSI escape sequences:\n-            if self.status == \"Passed\":\n-                COLOR = ('\\033[0m', '\\033[0;34m')\n-            elif self.status == \"Failed\":\n-                COLOR = ('\\033[0m', '\\033[0;31m')\n-            elif self.status == \"Skipped\":\n-                COLOR = ('\\033[0m', '\\033[1;30m')\n-\n-        SYMBOL = \"  \"\n         if self.status == \"Passed\":\n-            SYMBOL = \"\u2713 \"\n+            color = BLUE\n+            glyph = TICK\n         elif self.status == \"Failed\":\n-            SYMBOL = \"\u2716 \"\n+            color = RED\n+            glyph = CROSS\n         elif self.status == \"Skipped\":\n-            SYMBOL = \"\u25cb \"\n+            color = GREY\n+            glyph = CIRCLE\n \n-        return COLOR[1] + \"%s | %s%s | %s s\\n\" % (self.name.ljust(self.padding), SYMBOL, self.status.ljust(7), self.time) + COLOR[0]\n+        return color[1] + \"%s | %s%s | %s s\\n\" % (self.name.ljust(self.padding), glyph, self.status.ljust(7), self.time) + color[0]\n \n \n def check_script_list(src_dir):"
      }
    ]
  },
  {
    "sha": "928695bee67e99d9af71be2f9e498e0dd6e379a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Mjg2OTViZWU2N2U5OWQ5YWY3MWJlMmY5ZTQ5OGUwZGQ2ZTM3OWEw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-07T13:37:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-07T13:41:04Z"
      },
      "message": "Merge #10155: build: Deduplicate version numbers\n\n9ff7818 doc: Update release process for simplified version bumping (Wladimir J. van der Laan)\n08d9aee build: Remove duplicate version information from src/clientversion.h (Wladimir J. van der Laan)\n168a703 doc: Make build system insert version in Doxyfile (Wladimir J. van der Laan)\nb67eb8d doc: Remove version numbers from READMEs (Wladimir J. van der Laan)\n\nTree-SHA512: 531e44282b1c1383a382847a5605177917dfbf78acfaa754d1cbadd2e165c7e34ddbd01790f87615083fac359571708c2551ad24b712aab1f84a2068360c3a17",
      "tree": {
        "sha": "86ad7188b83a75abd9442d5645b7e2996059b9b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86ad7188b83a75abd9442d5645b7e2996059b9b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/928695bee67e99d9af71be2f9e498e0dd6e379a0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJY55bwAAoJEHSBCwEjRsmm7yUH/1Ycfz9iIOv8q57zlqpl/zkt\nQZE2ZfMXbq4NVJvJCNXk+qImF2wxMHfXsVlHFl223NHy5aHwJ8qMdK91vM4J13g8\nJvWIztgft7/6pMD7bECOqWU1ZqiRFjmDhwQOfVhCjWHDAgmPkjw5Jnh7gCB8nK9A\nf2xpkJxyVnBJFyB50jINf3nyBhta4L9CJtV/nOKjqg5ugY2PT3+mZX/UZl5p7G8i\n0yeuM2UCbNLrx2qQflPInbbFub+AzAr6AwbUzaP3B6M89R/hIE3ut44RXuFKeFw9\nCAarxFHD5oJMwMCeiLXgVH7bz/QvIHhZ1zzAUYSzEShlzcBdds5+nawRj9vbPkQ=\n=Ei5A\n-----END PGP SIGNATURE-----",
        "payload": "tree 86ad7188b83a75abd9442d5645b7e2996059b9b5\nparent a3a2160b665076a9405d360427249c2f73f80d82\nparent 9ff781884a504244a446cad8013ef9f6e86ff1c3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1491572251 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1491572464 +0200\n\nMerge #10155: build: Deduplicate version numbers\n\n9ff7818 doc: Update release process for simplified version bumping (Wladimir J. van der Laan)\n08d9aee build: Remove duplicate version information from src/clientversion.h (Wladimir J. van der Laan)\n168a703 doc: Make build system insert version in Doxyfile (Wladimir J. van der Laan)\nb67eb8d doc: Remove version numbers from READMEs (Wladimir J. van der Laan)\n\nTree-SHA512: 531e44282b1c1383a382847a5605177917dfbf78acfaa754d1cbadd2e165c7e34ddbd01790f87615083fac359571708c2551ad24b712aab1f84a2068360c3a17\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/928695bee67e99d9af71be2f9e498e0dd6e379a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/928695bee67e99d9af71be2f9e498e0dd6e379a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/928695bee67e99d9af71be2f9e498e0dd6e379a0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3a2160b665076a9405d360427249c2f73f80d82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3a2160b665076a9405d360427249c2f73f80d82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3a2160b665076a9405d360427249c2f73f80d82"
      },
      {
        "sha": "9ff781884a504244a446cad8013ef9f6e86ff1c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ff781884a504244a446cad8013ef9f6e86ff1c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ff781884a504244a446cad8013ef9f6e86ff1c3"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 14,
      "deletions": 44
    },
    "files": [
      {
        "sha": "1e1ed49f917d9fda4c89df8b6dc6d1d0b495c89c",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/928695bee67e99d9af71be2f9e498e0dd6e379a0/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/928695bee67e99d9af71be2f9e498e0dd6e379a0/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=928695bee67e99d9af71be2f9e498e0dd6e379a0",
        "patch": "@@ -1157,6 +1157,7 @@ AC_SUBST(QR_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/functional/config.ini])\n AC_CONFIG_FILES([test/util/buildenv.py],[chmod +x test/util/buildenv.py])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n+AC_CONFIG_FILES([doc/Doxyfile])\n AC_CONFIG_LINKS([test/functional/test_runner.py:test/functional/test_runner.py])\n AC_CONFIG_LINKS([test/util/bitcoin-util-test.py:test/util/bitcoin-util-test.py])\n AC_CONFIG_LINKS([test/util/bctest.py:test/util/bctest.py])"
      },
      {
        "sha": "58c65fb7e25514043bef4caad82a668aabca4914",
        "filename": "doc/Doxyfile.in",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/928695bee67e99d9af71be2f9e498e0dd6e379a0/doc/Doxyfile.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/928695bee67e99d9af71be2f9e498e0dd6e379a0/doc/Doxyfile.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Doxyfile.in?ref=928695bee67e99d9af71be2f9e498e0dd6e379a0",
        "patch": "@@ -38,7 +38,7 @@ PROJECT_NAME           = \"Bitcoin Core\"\n # could be handy for archiving the generated documentation or if some version\n # control system is used.\n \n-PROJECT_NUMBER         = 0.14.99\n+PROJECT_NUMBER         = @PACKAGE_VERSION@\n \n # Using the PROJECT_BRIEF tag one can provide an optional one line description\n # for a project that appears at the top of each page and should give viewer a",
        "previous_filename": "doc/Doxyfile"
      },
      {
        "sha": "275ae67e54daaa03c451dffbcdedf04e89388698",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/928695bee67e99d9af71be2f9e498e0dd6e379a0/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/928695bee67e99d9af71be2f9e498e0dd6e379a0/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=928695bee67e99d9af71be2f9e498e0dd6e379a0",
        "patch": "@@ -1,5 +1,5 @@\n-Bitcoin Core 0.14.99\n-=====================\n+Bitcoin Core\n+=============\n \n Setup\n ---------------------"
      },
      {
        "sha": "07d61b3bda13acb5ac4775db4d23a97586aed646",
        "filename": "doc/README_windows.txt",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/928695bee67e99d9af71be2f9e498e0dd6e379a0/doc/README_windows.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/928695bee67e99d9af71be2f9e498e0dd6e379a0/doc/README_windows.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_windows.txt?ref=928695bee67e99d9af71be2f9e498e0dd6e379a0",
        "patch": "@@ -1,5 +1,5 @@\n-Bitcoin Core 0.14.99\r\n-=====================\r\n+Bitcoin Core\r\n+=============\r\n \r\n Intro\r\n -----\r"
      },
      {
        "sha": "5a99b726f1281424b1f1fda842137de2e36856b8",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 3,
        "deletions": 18,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/928695bee67e99d9af71be2f9e498e0dd6e379a0/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/928695bee67e99d9af71be2f9e498e0dd6e379a0/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=928695bee67e99d9af71be2f9e498e0dd6e379a0",
        "patch": "@@ -10,7 +10,7 @@ Before every release candidate:\n Before every minor and major release:\n \n * Update [bips.md](bips.md) to account for changes since the last release.\n-* Update version in sources (see below)\n+* Update version in `configure.ac` (don't forget to set `CLIENT_VERSION_IS_RELEASE` to `true`)\n * Write release notes (see below)\n * Update `src/chainparams.cpp` nMinimumChainWork with information from the getblockchaininfo rpc.\n * Update `src/chainparams.cpp` defaultAssumeValid  with information from the getblockhash rpc.\n@@ -24,6 +24,7 @@ Before every major release:\n * Update hardcoded [seeds](/contrib/seeds/README.md), see [this pull request](https://github.com/bitcoin/bitcoin/pull/7415) for an example.\n * Update [`BLOCK_CHAIN_SIZE`](/src/qt/intro.cpp) to the current size plus some overhead.\n * Update `src/chainparams.cpp` chainTxData with statistics about the transaction count and rate.\n+* Update version of `contrib/gitian-descriptors/*.yml`: usually one'd want to do this on master after branching off the release - but be sure to at least do it before a new major release\n \n ### First time / New builders\n \n@@ -37,23 +38,7 @@ Check out the source code in the following directory hierarchy.\n     git clone https://github.com/devrandom/gitian-builder.git\n     git clone https://github.com/bitcoin/bitcoin.git\n \n-### Bitcoin maintainers/release engineers, update version in sources\n-\n-Update the following:\n-\n-- `configure.ac`:\n-    - `_CLIENT_VERSION_MAJOR`\n-    - `_CLIENT_VERSION_MINOR`\n-    - `_CLIENT_VERSION_REVISION`\n-    - Don't forget to set `_CLIENT_VERSION_IS_RELEASE` to `true`\n-- `src/clientversion.h`: (this mirrors `configure.ac` - see issue #3539)\n-    - `CLIENT_VERSION_MAJOR`\n-    - `CLIENT_VERSION_MINOR`\n-    - `CLIENT_VERSION_REVISION`\n-    - Don't forget to set `CLIENT_VERSION_IS_RELEASE` to `true`\n-- `doc/README.md` and `doc/README_windows.txt`\n-- `doc/Doxyfile`: `PROJECT_NUMBER` contains the full version\n-- `contrib/gitian-descriptors/*.yml`: usually one'd want to do this on master after branching off the release - but be sure to at least do it before a new major release\n+### Bitcoin maintainers/release engineers, suggestion for writing release notes\n \n Write release notes. git shortlog helps a lot, for example:\n "
      },
      {
        "sha": "8fde6daca5320dbec724da06eb722ef760afba57",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 5,
        "deletions": 21,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/928695bee67e99d9af71be2f9e498e0dd6e379a0/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/928695bee67e99d9af71be2f9e498e0dd6e379a0/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=928695bee67e99d9af71be2f9e498e0dd6e379a0",
        "patch": "@@ -7,29 +7,13 @@\n \n #if defined(HAVE_CONFIG_H)\n #include \"config/bitcoin-config.h\"\n-#else\n-\n-/**\n- * client versioning and copyright year\n- */\n-\n-//! These need to be macros, as clientversion.cpp's and bitcoin*-res.rc's voodoo requires it\n-#define CLIENT_VERSION_MAJOR 0\n-#define CLIENT_VERSION_MINOR 14\n-#define CLIENT_VERSION_REVISION 99\n-#define CLIENT_VERSION_BUILD 0\n-\n-//! Set to true for release, false for prerelease or test build\n-#define CLIENT_VERSION_IS_RELEASE false\n-\n-/**\n- * Copyright year (2009-this)\n- * Todo: update this when changing our copyright comments in the source\n- */\n-#define COPYRIGHT_YEAR 2017\n-\n #endif //HAVE_CONFIG_H\n \n+// Check that required client information is defined\n+#if !defined(CLIENT_VERSION_MAJOR) || !defined(CLIENT_VERSION_MINOR) || !defined(CLIENT_VERSION_REVISION) || !defined(CLIENT_VERSION_BUILD) || !defined(CLIENT_VERSION_IS_RELEASE) || !defined(COPYRIGHT_YEAR)\n+#error Client version information missing: wasn't defined by bitcoin-config.h nor defined any other way\n+#endif\n+\n /**\n  * Converts the parameter X to a string after macro replacement on X has been performed.\n  * Don't merge these into one macro!"
      }
    ]
  },
  {
    "sha": "a5fd74667459d74c81ea701f32f688916bf0a719",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNWZkNzQ2Njc0NTlkNzRjODFlYTcwMWYzMmY2ODg5MTZiZjBhNzE5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-07T13:41:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-07T13:51:26Z"
      },
      "message": "Merge #9681: Refactor Bumpfee, move core functionality to CWallet\n\n5f59d3e Improve CFeeBumper interface, add comments, make use of std::move (Jonas Schnelli)\n0df22ed Cancel feebump is vErrors is not empty (Jonas Schnelli)\n44cabe6 Use static calls for GetRequiredFee and GetMinimumFee, remove make_pair from emplace_back (Jonas Schnelli)\nbb78c15 Restore CalculateMaximumSignedTxSize function signature (Jonas Schnelli)\n51ea44f Use \"return false\" instead assert() in CWallet::SignTransaction (Jonas Schnelli)\nbcc72cc Directly abort execution in FeeBumper::commit if wallet or tx is not available (Jonas Schnelli)\n2718db0 Restore invalid fee check (must be > 0) (Jonas Schnelli)\n0337a39 Refactor Bumpfee core functionality (Jonas Schnelli)\nd1a95e8 Bumpfee move request parameter interaction to the top (Jonas Schnelli)\n\nTree-SHA512: 0e6d1f3322ed671fa2291e59ac9556ce4646bc78267edc6eedc46b0014b7b08aa83c30315358b911d82898847d4845634a18b67e253a7b699dcc852eb2652c07",
      "tree": {
        "sha": "4bc2856255064ae33c821ba71cf0d085a17577f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4bc2856255064ae33c821ba71cf0d085a17577f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5fd74667459d74c81ea701f32f688916bf0a719",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJY55leAAoJEHSBCwEjRsmmfX8IAKkfg/CmaJpA0T6yKwhLqGhm\nwCUyN8hwt2iqQrrYMdNxMXN/rEzFjyrEcxknqAH3mjSO+Xu+TyLIyyGBMYW8ZeUa\nxEUTOW+O6O2U/xOIJg90XSzlQCaxHM9I4Y7VPhR1+Y27Aw+UqyU9roF6lG0rApx0\nfFfGczgn5Sf322Pod8gkEbWoYwFf+RjJ411ojqqhWf9FFfuRgrm8EJadpDZA4IL+\niWLSoYvjjv7gMELXaurAt+lEST/VQLRFVl/JOVghak1Z5lo7XTiVkF5MbvXZrFeV\nHx4/G8GGYhHy8J80GHqgAif+q/TQ4o6oNbHO9Cka74t5qz8bzEzPbG3tRJPi9Y8=\n=zhAA\n-----END PGP SIGNATURE-----",
        "payload": "tree 4bc2856255064ae33c821ba71cf0d085a17577f6\nparent 928695bee67e99d9af71be2f9e498e0dd6e379a0\nparent 5f59d3ecb7f1b63579e7f07fc520459cdf119c81\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1491572511 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1491573086 +0200\n\nMerge #9681: Refactor Bumpfee, move core functionality to CWallet\n\n5f59d3e Improve CFeeBumper interface, add comments, make use of std::move (Jonas Schnelli)\n0df22ed Cancel feebump is vErrors is not empty (Jonas Schnelli)\n44cabe6 Use static calls for GetRequiredFee and GetMinimumFee, remove make_pair from emplace_back (Jonas Schnelli)\nbb78c15 Restore CalculateMaximumSignedTxSize function signature (Jonas Schnelli)\n51ea44f Use \"return false\" instead assert() in CWallet::SignTransaction (Jonas Schnelli)\nbcc72cc Directly abort execution in FeeBumper::commit if wallet or tx is not available (Jonas Schnelli)\n2718db0 Restore invalid fee check (must be > 0) (Jonas Schnelli)\n0337a39 Refactor Bumpfee core functionality (Jonas Schnelli)\nd1a95e8 Bumpfee move request parameter interaction to the top (Jonas Schnelli)\n\nTree-SHA512: 0e6d1f3322ed671fa2291e59ac9556ce4646bc78267edc6eedc46b0014b7b08aa83c30315358b911d82898847d4845634a18b67e253a7b699dcc852eb2652c07\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5fd74667459d74c81ea701f32f688916bf0a719",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5fd74667459d74c81ea701f32f688916bf0a719",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5fd74667459d74c81ea701f32f688916bf0a719/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "928695bee67e99d9af71be2f9e498e0dd6e379a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/928695bee67e99d9af71be2f9e498e0dd6e379a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/928695bee67e99d9af71be2f9e498e0dd6e379a0"
      },
      {
        "sha": "5f59d3ecb7f1b63579e7f07fc520459cdf119c81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f59d3ecb7f1b63579e7f07fc520459cdf119c81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f59d3ecb7f1b63579e7f07fc520459cdf119c81"
      }
    ],
    "stats": {
      "total": 631,
      "additions": 407,
      "deletions": 224
    },
    "files": [
      {
        "sha": "69b5bb48ad09f1f3c6772905af3257ff592fd482",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5fd74667459d74c81ea701f32f688916bf0a719/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5fd74667459d74c81ea701f32f688916bf0a719/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=a5fd74667459d74c81ea701f32f688916bf0a719",
        "patch": "@@ -157,6 +157,7 @@ BITCOIN_CORE_H = \\\n   wallet/coincontrol.h \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n+  wallet/feebumper.h \\\n   wallet/rpcwallet.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n@@ -231,6 +232,7 @@ libbitcoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_wallet_a_SOURCES = \\\n   wallet/crypter.cpp \\\n   wallet/db.cpp \\\n+  wallet/feebumper.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/wallet.cpp \\"
      },
      {
        "sha": "fe3871a91d9b8c75e22ddfd0a5f714a71bfd278f",
        "filename": "src/wallet/feebumper.cpp",
        "status": "added",
        "additions": 283,
        "deletions": 0,
        "changes": 283,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5fd74667459d74c81ea701f32f688916bf0a719/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5fd74667459d74c81ea701f32f688916bf0a719/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=a5fd74667459d74c81ea701f32f688916bf0a719",
        "patch": "@@ -0,0 +1,283 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"consensus/validation.h\"\n+#include \"wallet/feebumper.h\"\n+#include \"wallet/wallet.h\"\n+#include \"policy/policy.h\"\n+#include \"policy/rbf.h\"\n+#include \"validation.h\" //for mempool access\n+#include \"txmempool.h\"\n+#include \"utilmoneystr.h\"\n+#include \"util.h\"\n+#include \"net.h\"\n+\n+// Calculate the size of the transaction assuming all signatures are max size\n+// Use DummySignatureCreator, which inserts 72 byte signatures everywhere.\n+// TODO: re-use this in CWallet::CreateTransaction (right now\n+// CreateTransaction uses the constructed dummy-signed tx to do a priority\n+// calculation, but we should be able to refactor after priority is removed).\n+// NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n+// be IsAllFromMe).\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet)\n+{\n+    CMutableTransaction txNew(tx);\n+    std::vector<std::pair<const CWalletTx *, unsigned int>> vCoins;\n+    // Look up the inputs.  We should have already checked that this transaction\n+    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n+    // wallet, with a valid index into the vout array.\n+    for (auto& input : tx.vin) {\n+        const auto mi = pWallet->mapWallet.find(input.prevout.hash);\n+        assert(mi != pWallet->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        vCoins.emplace_back(&(mi->second), input.prevout.n);\n+    }\n+    if (!pWallet->DummySignTx(txNew, vCoins)) {\n+        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n+        // implies that we can sign for every input.\n+        return -1;\n+    }\n+    return GetVirtualTransactionSize(txNew);\n+}\n+\n+CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConfirmTarget, bool specifiedConfirmTarget, CAmount totalFee, bool newTxReplaceable)\n+    :\n+    txid(std::move(txidIn)),\n+    nOldFee(0),\n+    nNewFee(0)\n+{\n+    vErrors.clear();\n+    bumpedTxid.SetNull();\n+    AssertLockHeld(pWallet->cs_wallet);\n+    if (!pWallet->mapWallet.count(txid)) {\n+        vErrors.push_back(\"Invalid or non-wallet transaction id\");\n+        currentResult = BumpFeeResult::INVALID_ADDRESS_OR_KEY;\n+        return;\n+    }\n+    auto it = pWallet->mapWallet.find(txid);\n+    const CWalletTx& wtx = it->second;\n+\n+    if (pWallet->HasWalletSpend(txid)) {\n+        vErrors.push_back(\"Transaction has descendants in the wallet\");\n+        currentResult = BumpFeeResult::INVALID_PARAMETER;\n+        return;\n+    }\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it_mp = mempool.mapTx.find(txid);\n+        if (it_mp != mempool.mapTx.end() && it_mp->GetCountWithDescendants() > 1) {\n+            vErrors.push_back(\"Transaction has descendants in the mempool\");\n+            currentResult = BumpFeeResult::INVALID_PARAMETER;\n+            return;\n+        }\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0) {\n+        vErrors.push_back(\"Transaction has been mined, or is conflicted with a mined transaction\");\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    if (!SignalsOptInRBF(wtx)) {\n+        vErrors.push_back(\"Transaction is not BIP 125 replaceable\");\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\")) {\n+        vErrors.push_back(strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", txid.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pWallet->IsAllFromMe(wtx, ISMINE_SPENDABLE)) {\n+        vErrors.push_back(\"Transaction contains inputs that don't belong to this wallet\");\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pWallet->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1) {\n+                vErrors.push_back(\"Transaction has multiple change outputs\");\n+                currentResult = BumpFeeResult::WALLET_ERROR;\n+                return;\n+            }\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1) {\n+        vErrors.push_back(\"Transaction does not have a change output\");\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    // Calculate the expected size of the new transaction.\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx, pWallet);\n+    if (maxNewTxSize < 0) {\n+        vErrors.push_back(\"Transaction contains inputs that cannot be signed\");\n+        currentResult = BumpFeeResult::INVALID_ADDRESS_OR_KEY;\n+        return;\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CFeeRate nNewFeeRate;\n+    // The wallet uses a conservative WALLET_INCREMENTAL_RELAY_FEE value to\n+    // future proof against changes to network wide policy for incremental relay\n+    // fee that our node may not be aware of.\n+    CFeeRate walletIncrementalRelayFee = CFeeRate(WALLET_INCREMENTAL_RELAY_FEE);\n+    if (::incrementalRelayFee > walletIncrementalRelayFee) {\n+        walletIncrementalRelayFee = ::incrementalRelayFee;\n+    }\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + ::incrementalRelayFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            vErrors.push_back(strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n+                                                                FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(::incrementalRelayFee.GetFee(maxNewTxSize))));\n+            currentResult = BumpFeeResult::INVALID_PARAMETER;\n+            return;\n+        }\n+        CAmount requiredFee = CWallet::GetRequiredFee(maxNewTxSize);\n+        if (totalFee < requiredFee) {\n+            vErrors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n+                                                                FormatMoney(requiredFee)));\n+            currentResult = BumpFeeResult::INVALID_PARAMETER;\n+            return;\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+    } else {\n+        // if user specified a confirm target then don't consider any global payTxFee\n+        if (specifiedConfirmTarget) {\n+            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, CAmount(0));\n+        }\n+        // otherwise use the regular wallet logic to select payTxFee or default confirm target\n+        else {\n+            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool);\n+        }\n+\n+        nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n+\n+        // New fee rate must be at least old rate + minimum incremental relay rate\n+        // walletIncrementalRelayFee.GetFeePerK() should be exact, because it's initialized\n+        // in that unit (fee per kb).\n+        // However, nOldFeeRate is a calculated value from the tx fee/size, so\n+        // add 1 satoshi to the result, because it may have been rounded down.\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK()) {\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK());\n+            nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+        }\n+    }\n+\n+    // Check that in all cases the new fee doesn't violate maxTxFee\n+     if (nNewFee > maxTxFee) {\n+         vErrors.push_back(strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n+                               FormatMoney(nNewFee), FormatMoney(maxTxFee)));\n+         currentResult = BumpFeeResult::WALLET_ERROR;\n+         return;\n+     }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        vErrors.push_back(strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CAmount nDelta = nNewFee - nOldFee;\n+    assert(nDelta > 0);\n+    mtx =  *wtx.tx;\n+    CTxOut* poutput = &(mtx.vout[nOutput]);\n+    if (poutput->nValue < nDelta) {\n+        vErrors.push_back(\"Change output is too small to bump the fee\");\n+        currentResult = BumpFeeResult::WALLET_ERROR;\n+        return;\n+    }\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue -= nDelta;\n+    if (poutput->nValue <= poutput->GetDustThreshold(::dustRelayFee)) {\n+        LogPrint(BCLog::RPC, \"Bumping fee and discarding dust output\\n\");\n+        nNewFee += poutput->nValue;\n+        mtx.vout.erase(mtx.vout.begin() + nOutput);\n+    }\n+\n+    // Mark new tx not replaceable, if requested.\n+    if (!newTxReplaceable) {\n+        for (auto& input : mtx.vin) {\n+            if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;\n+        }\n+    }\n+\n+    currentResult = BumpFeeResult::OK;\n+}\n+\n+bool CFeeBumper::signTransaction(CWallet *pWallet)\n+{\n+     return pWallet->SignTransaction(mtx);\n+}\n+\n+bool CFeeBumper::commit(CWallet *pWallet)\n+{\n+    AssertLockHeld(pWallet->cs_wallet);\n+    if (!vErrors.empty() || currentResult != BumpFeeResult::OK) {\n+        return false;\n+    }\n+    if (txid.IsNull() || !pWallet->mapWallet.count(txid)) {\n+        vErrors.push_back(\"Invalid or non-wallet transaction id\");\n+        currentResult = BumpFeeResult::MISC_ERROR;\n+        return false;\n+    }\n+    CWalletTx& oldWtx = pWallet->mapWallet[txid];\n+\n+    CWalletTx wtxBumped(pWallet, MakeTransactionRef(std::move(mtx)));\n+    // commit/broadcast the tx\n+    CReserveKey reservekey(pWallet);\n+    wtxBumped.mapValue = oldWtx.mapValue;\n+    wtxBumped.mapValue[\"replaces_txid\"] = oldWtx.GetHash().ToString();\n+    wtxBumped.vOrderForm = oldWtx.vOrderForm;\n+    wtxBumped.strFromAccount = oldWtx.strFromAccount;\n+    wtxBumped.fTimeReceivedIsTxTime = true;\n+    wtxBumped.fFromMe = true;\n+    CValidationState state;\n+    if (!pWallet->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n+        // NOTE: CommitTransaction never returns false, so this should never happen.\n+        vErrors.push_back(strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason()));\n+        return false;\n+    }\n+\n+    bumpedTxid = wtxBumped.GetHash();\n+    if (state.IsInvalid()) {\n+        // This can happen if the mempool rejected the transaction.  Report\n+        // what happened in the \"errors\" response.\n+        vErrors.push_back(strprintf(\"Error: The transaction was rejected: %s\", FormatStateMessage(state)));\n+    }\n+\n+    // mark the original tx as bumped\n+    if (!pWallet->MarkReplaced(oldWtx.GetHash(), wtxBumped.GetHash())) {\n+        // TODO: see if JSON-RPC has a standard way of returning a response\n+        // along with an exception. It would be good to return information about\n+        // wtxBumped to the caller even if marking the original transaction\n+        // replaced does not succeed for some reason.\n+        vErrors.push_back(\"Error: Created new bumpfee transaction but could not mark the original transaction as replaced.\");\n+    }\n+    return true;\n+}\n+"
      },
      {
        "sha": "1a30499893fc067af7dbc01d59400eefd8e4868a",
        "filename": "src/wallet/feebumper.h",
        "status": "added",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5fd74667459d74c81ea701f32f688916bf0a719/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5fd74667459d74c81ea701f32f688916bf0a719/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=a5fd74667459d74c81ea701f32f688916bf0a719",
        "patch": "@@ -0,0 +1,56 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_FEEBUMPER_H\n+#define BITCOIN_WALLET_FEEBUMPER_H\n+\n+#include <primitives/transaction.h>\n+\n+class CWallet;\n+class uint256;\n+\n+enum class BumpFeeResult\n+{\n+    OK,\n+    INVALID_ADDRESS_OR_KEY,\n+    INVALID_REQUEST,\n+    INVALID_PARAMETER,\n+    WALLET_ERROR,\n+    MISC_ERROR,\n+};\n+\n+class CFeeBumper\n+{\n+public:\n+    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, int newConfirmTarget, bool specifiedConfirmTarget, CAmount totalFee, bool newTxReplaceable);\n+    BumpFeeResult getResult() const { return currentResult; }\n+    const std::vector<std::string>& getErrors() const { return vErrors; }\n+    CAmount getOldFee() const { return nOldFee; }\n+    CAmount getNewFee() const { return nNewFee; }\n+    uint256 getBumpedTxId() const { return bumpedTxid; }\n+\n+    /* signs the new transaction,\n+     * returns false if the tx couldn't be found or if it was\n+     * improssible to create the signature(s)\n+     */\n+    bool signTransaction(CWallet *pWallet);\n+\n+    /* commits the fee bump,\n+     * returns true, in case of CWallet::CommitTransaction was successful\n+     * but, eventually sets vErrors if the tx could not be added to the mempool (will try later)\n+     * or if the old transaction could not be marked as replaced\n+     */\n+    bool commit(CWallet *pWalletNonConst);\n+\n+private:\n+    const uint256 txid;\n+    uint256 bumpedTxid;\n+    CMutableTransaction mtx;\n+    std::vector<std::string> vErrors;\n+    BumpFeeResult currentResult;\n+    CAmount nOldFee;\n+    CAmount nNewFee;\n+};\n+\n+#endif // BITCOIN_WALLET_FEEBUMPER_H"
      },
      {
        "sha": "2cc3072c16aed4548604a937a16b40bbc42df7dc",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 222,
        "changes": 262,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5fd74667459d74c81ea701f32f688916bf0a719/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5fd74667459d74c81ea701f32f688916bf0a719/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a5fd74667459d74c81ea701f32f688916bf0a719",
        "patch": "@@ -18,8 +18,9 @@\n #include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n-#include \"wallet.h\"\n-#include \"walletdb.h\"\n+#include \"wallet/feebumper.h\"\n+#include \"wallet/wallet.h\"\n+#include \"wallet/walletdb.h\"\n \n #include <stdint.h>\n \n@@ -2778,33 +2779,6 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n-// Calculate the size of the transaction assuming all signatures are max size\n-// Use DummySignatureCreator, which inserts 72 byte signatures everywhere.\n-// TODO: re-use this in CWallet::CreateTransaction (right now\n-// CreateTransaction uses the constructed dummy-signed tx to do a priority\n-// calculation, but we should be able to refactor after priority is removed).\n-// NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n-// be IsAllFromMe).\n-int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, CWallet &wallet)\n-{\n-    CMutableTransaction txNew(tx);\n-    std::vector<std::pair<CWalletTx*, unsigned int>> vCoins;\n-    // Look up the inputs.  We should have already checked that this transaction\n-    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n-    // wallet, with a valid index into the vout array.\n-    for (auto& input : tx.vin) {\n-        const auto mi = wallet.mapWallet.find(input.prevout.hash);\n-        assert(mi != wallet.mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n-        vCoins.emplace_back(std::make_pair(&(mi->second), input.prevout.n));\n-    }\n-    if (!wallet.DummySignTx(txNew, vCoins)) {\n-        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n-        // implies that we can sign for every input.\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that cannot be signed\");\n-    }\n-    return GetVirtualTransactionSize(txNew);\n-}\n-\n UniValue bumpfee(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n@@ -2859,63 +2833,6 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     uint256 hash;\n     hash.SetHex(request.params[0].get_str());\n \n-    // retrieve the original tx from the wallet\n-    LOCK2(cs_main, pwallet->cs_wallet);\n-    EnsureWalletIsUnlocked(pwallet);\n-    if (!pwallet->mapWallet.count(hash)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n-    }\n-    CWalletTx& wtx = pwallet->mapWallet[hash];\n-\n-    if (pwallet->HasWalletSpend(hash)) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Transaction has descendants in the wallet\");\n-    }\n-\n-    {\n-        LOCK(mempool.cs);\n-        auto it = mempool.mapTx.find(hash);\n-        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Transaction has descendants in the mempool\");\n-        }\n-    }\n-\n-    if (wtx.GetDepthInMainChain() != 0) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction has been mined, or is conflicted with a mined transaction\");\n-    }\n-\n-    if (!SignalsOptInRBF(wtx)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction is not BIP 125 replaceable\");\n-    }\n-\n-    if (wtx.mapValue.count(\"replaced_by_txid\")) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n-    }\n-\n-    // check that original tx consists entirely of our inputs\n-    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n-    if (!pwallet->IsAllFromMe(wtx, ISMINE_SPENDABLE)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction contains inputs that don't belong to this wallet\");\n-    }\n-\n-    // figure out which output was change\n-    // if there was no change output or multiple change outputs, fail\n-    int nOutput = -1;\n-    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n-        if (pwallet->IsChange(wtx.tx->vout[i])) {\n-            if (nOutput != -1) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction has multiple change outputs\");\n-            }\n-            nOutput = i;\n-        }\n-    }\n-    if (nOutput == -1) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction does not have a change output\");\n-    }\n-\n-    // Calculate the expected size of the new transaction.\n-    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n-    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx, *pwallet);\n-\n     // optional parameters\n     bool specifiedConfirmTarget = false;\n     int newConfirmTarget = nTxConfirmTarget;\n@@ -2941,11 +2858,8 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             }\n         } else if (options.exists(\"totalFee\")) {\n             totalFee = options[\"totalFee\"].get_int64();\n-            CAmount requiredFee = CWallet::GetRequiredFee(maxNewTxSize);\n-            if (totalFee < requiredFee ) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER,\n-                                   strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n-                                             FormatMoney(requiredFee)));\n+            if (totalFee <= 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee %s (must be greater than 0)\", FormatMoney(totalFee)));\n             }\n         }\n \n@@ -2954,144 +2868,48 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         }\n     }\n \n-    // calculate the old fee and fee-rate\n-    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n-    CFeeRate nOldFeeRate(nOldFee, txSize);\n-    CAmount nNewFee;\n-    CFeeRate nNewFeeRate;\n-    // The wallet uses a conservative WALLET_INCREMENTAL_RELAY_FEE value to\n-    // future proof against changes to network wide policy for incremental relay\n-    // fee that our node may not be aware of.\n-    CFeeRate walletIncrementalRelayFee = CFeeRate(WALLET_INCREMENTAL_RELAY_FEE);\n-    if (::incrementalRelayFee > walletIncrementalRelayFee) {\n-        walletIncrementalRelayFee = ::incrementalRelayFee;\n-    }\n-\n-    if (totalFee > 0) {\n-        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + ::incrementalRelayFee.GetFee(maxNewTxSize);\n-        if (totalFee < minTotalFee) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n-                                                                FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(::incrementalRelayFee.GetFee(maxNewTxSize))));\n-        }\n-        nNewFee = totalFee;\n-        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n-    } else {\n-        // if user specified a confirm target then don't consider any global payTxFee\n-        if (specifiedConfirmTarget) {\n-            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, CAmount(0));\n-        }\n-        // otherwise use the regular wallet logic to select payTxFee or default confirm target\n-        else {\n-            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool);\n-        }\n-\n-        nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n-\n-        // New fee rate must be at least old rate + minimum incremental relay rate\n-        // walletIncrementalRelayFee.GetFeePerK() should be exact, because it's initialized\n-        // in that unit (fee per kb).\n-        // However, nOldFeeRate is a calculated value from the tx fee/size, so\n-        // add 1 satoshi to the result, because it may have been rounded down.\n-        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK()) {\n-            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK());\n-            nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n-        }\n-    }\n-\n-    // Check that in all cases the new fee doesn't violate maxTxFee\n-     if (nNewFee > maxTxFee) {\n-         throw JSONRPCError(RPC_WALLET_ERROR,\n-                            strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n-                                      FormatMoney(nNewFee), FormatMoney(maxTxFee)));\n-     }\n-\n-    // check that fee rate is higher than mempool's minimum fee\n-    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n-    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n-    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n-    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n-    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n-    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n-    }\n-\n-    // Now modify the output to increase the fee.\n-    // If the output is not large enough to pay the fee, fail.\n-    CAmount nDelta = nNewFee - nOldFee;\n-    assert(nDelta > 0);\n-    CMutableTransaction tx(*(wtx.tx));\n-    CTxOut* poutput = &(tx.vout[nOutput]);\n-    if (poutput->nValue < nDelta) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Change output is too small to bump the fee\");\n-    }\n-\n-    // If the output would become dust, discard it (converting the dust to fee)\n-    poutput->nValue -= nDelta;\n-    if (poutput->nValue <= poutput->GetDustThreshold(::dustRelayFee)) {\n-        LogPrint(BCLog::RPC, \"Bumping fee and discarding dust output\\n\");\n-        nNewFee += poutput->nValue;\n-        tx.vout.erase(tx.vout.begin() + nOutput);\n-    }\n-\n-    // Mark new tx not replaceable, if requested.\n-    if (!replaceable) {\n-        for (auto& input : tx.vin) {\n-            if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;\n-        }\n-    }\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n \n-    // sign the new tx\n-    CTransaction txNewConst(tx);\n-    int nIn = 0;\n-    for (auto& input : tx.vin) {\n-        std::map<uint256, CWalletTx>::const_iterator mi = pwallet->mapWallet.find(input.prevout.hash);\n-        assert(mi != pwallet->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n-        if (!ProduceSignature(TransactionSignatureCreator(pwallet, &txNewConst, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+    CFeeBumper feeBump(pwallet, hash, newConfirmTarget, specifiedConfirmTarget, totalFee, replaceable);\n+    BumpFeeResult res = feeBump.getResult();\n+    if (res != BumpFeeResult::OK)\n+    {\n+        switch(res) {\n+            case BumpFeeResult::INVALID_ADDRESS_OR_KEY:\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, feeBump.getErrors()[0]);\n+                break;\n+            case BumpFeeResult::INVALID_REQUEST:\n+                throw JSONRPCError(RPC_INVALID_REQUEST, feeBump.getErrors()[0]);\n+                break;\n+            case BumpFeeResult::INVALID_PARAMETER:\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, feeBump.getErrors()[0]);\n+                break;\n+            case BumpFeeResult::WALLET_ERROR:\n+                throw JSONRPCError(RPC_WALLET_ERROR, feeBump.getErrors()[0]);\n+                break;\n+            default:\n+                throw JSONRPCError(RPC_MISC_ERROR, feeBump.getErrors()[0]);\n+                break;\n         }\n-        UpdateTransaction(tx, nIn, sigdata);\n-        nIn++;\n     }\n \n-    // commit/broadcast the tx\n-    CReserveKey reservekey(pwallet);\n-    CWalletTx wtxBumped(pwallet, MakeTransactionRef(std::move(tx)));\n-    wtxBumped.mapValue = wtx.mapValue;\n-    wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n-    wtxBumped.vOrderForm = wtx.vOrderForm;\n-    wtxBumped.strFromAccount = wtx.strFromAccount;\n-    wtxBumped.fTimeReceivedIsTxTime = true;\n-    wtxBumped.fFromMe = true;\n-    CValidationState state;\n-    if (!pwallet->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n-        // NOTE: CommitTransaction never returns false, so this should never happen.\n-        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason()));\n-    }\n-\n-    UniValue vErrors(UniValue::VARR);\n-    if (state.IsInvalid()) {\n-        // This can happen if the mempool rejected the transaction.  Report\n-        // what happened in the \"errors\" response.\n-        vErrors.push_back(strprintf(\"Error: The transaction was rejected: %s\", FormatStateMessage(state)));\n+    // sign bumped transaction\n+    if (!feeBump.signTransaction(pwallet)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n     }\n-\n-    // mark the original tx as bumped\n-    if (!pwallet->MarkReplaced(wtx.GetHash(), wtxBumped.GetHash())) {\n-        // TODO: see if JSON-RPC has a standard way of returning a response\n-        // along with an exception. It would be good to return information about\n-        // wtxBumped to the caller even if marking the original transaction\n-        // replaced does not succeed for some reason.\n-        vErrors.push_back(\"Error: Created new bumpfee transaction but could not mark the original transaction as replaced.\");\n+    // commit the bumped transaction\n+    if(!feeBump.commit(pwallet)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, feeBump.getErrors()[0]);\n     }\n-\n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"txid\", wtxBumped.GetHash().GetHex()));\n-    result.push_back(Pair(\"origfee\", ValueFromAmount(nOldFee)));\n-    result.push_back(Pair(\"fee\", ValueFromAmount(nNewFee)));\n-    result.push_back(Pair(\"errors\", vErrors));\n+    result.push_back(Pair(\"txid\", feeBump.getBumpedTxId().GetHex()));\n+    result.push_back(Pair(\"origfee\", ValueFromAmount(feeBump.getOldFee())));\n+    result.push_back(Pair(\"fee\", ValueFromAmount(feeBump.getNewFee())));\n+    UniValue errors(UniValue::VARR);\n+    for (const std::string& err: feeBump.getErrors())\n+        errors.push_back(err);\n+    result.push_back(errors);\n \n     return result;\n }"
      },
      {
        "sha": "d449f83a8738b35a6c91907c8c26ee40f8770e84",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5fd74667459d74c81ea701f32f688916bf0a719/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5fd74667459d74c81ea701f32f688916bf0a719/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a5fd74667459d74c81ea701f32f688916bf0a719",
        "patch": "@@ -17,6 +17,7 @@\n #include \"validation.h\"\n #include \"net.h\"\n #include \"policy/policy.h\"\n+#include \"policy/rbf.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"script/script.h\"\n@@ -2255,6 +2256,28 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n+bool CWallet::SignTransaction(CMutableTransaction &tx)\n+{\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto& input : tx.vin) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n+        if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n+            return false;\n+        }\n+        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n+        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n+        SignatureData sigdata;\n+        if (!ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n+            return false;\n+        }\n+        UpdateTransaction(tx, nIn, sigdata);\n+        nIn++;\n+    }\n+    return true;\n+}\n+\n bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, bool keepReserveKey, const CTxDestination& destChange)\n {\n     std::vector<CRecipient> vecSend;"
      },
      {
        "sha": "c714ddd09073891b074006150d6e93e2be364ffc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5fd74667459d74c81ea701f32f688916bf0a719/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5fd74667459d74c81ea701f32f688916bf0a719/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a5fd74667459d74c81ea701f32f688916bf0a719",
        "patch": "@@ -867,6 +867,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * calling CreateTransaction();\n      */\n     bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, bool keepReserveKey = true, const CTxDestination& destChange = CNoDestination());\n+    bool SignTransaction(CMutableTransaction& tx);\n \n     /**\n      * Create a new transaction paying the recipients with a set of coins\n@@ -881,7 +882,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool AddAccountingEntry(const CAccountingEntry&);\n     bool AddAccountingEntry(const CAccountingEntry&, CWalletDB *pwalletdb);\n     template <typename ContainerType>\n-    bool DummySignTx(CMutableTransaction &txNew, const ContainerType &coins);\n+    bool DummySignTx(CMutableTransaction &txNew, const ContainerType &coins) const;\n \n     static CFeeRate minTxFee;\n     static CFeeRate fallbackFee;\n@@ -1125,7 +1126,7 @@ class CAccount\n // ContainerType is meant to hold pair<CWalletTx *, int>, and be iterable\n // so that each entry corresponds to each vIn, in order.\n template <typename ContainerType>\n-bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins)\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins) const\n {\n     // Fill in dummy signatures for fee calculation.\n     int nIn = 0;"
      }
    ]
  },
  {
    "sha": "df1ca9e93a61787ea7ad8743dfb400126a52b8e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjFjYTllOTNhNjE3ODdlYTdhZDg3NDNkZmI0MDAxMjZhNTJiOGU5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-07T14:20:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-07T14:22:05Z"
      },
      "message": "Merge #10159: [tests] color test results and sort alphabetically\n\nd80baaa fixup - align summary row correctly and make colors/glyphs globals (John Newbery)\nbb92d83 [tests] Add unicode symbols for tests passing/failing/skipping (John Newbery)\n63062bd [tests] color test results and sort alphabetically (John Newbery)\n\nTree-SHA512: a5b85c05480722abd6e483d1817b7527ca487b8bb8292bc81efba158df5a619b8103ed43b790396071ab0710f39457895a79460480044324798c81331bbade5a",
      "tree": {
        "sha": "f15b80e74174bf3eb75bc07138271e22b64b5b4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f15b80e74174bf3eb75bc07138271e22b64b5b4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df1ca9e93a61787ea7ad8743dfb400126a52b8e9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJY56CNAAoJEHSBCwEjRsmmVnAH/i82AZj4JKdPDTF2kJGbtXd5\nNUKDeCkw4Wz0k6CWXheXj8JvDCGkMRjlxudFi9Sna5vtcgqSCr0l014MQ/ZZhNET\nbRlfVsvudhUXR/J85CrF5M5gU1tizBU0pUwrgJu6O8U95u4+rLisVZJ4wVzgfcQE\nUCmYMax552rKVx1NOZ9WCWzaCQmtwOjS18Ds2mIAjr3BnMW89vxyDrw1HKgFN4mf\n6aFj17JBGze8ZHMP8qX3/yDrpfjFBR8JnzHSeWoZakUmS2ePeLh2PARnURz/3kl/\nzRtDqWoBUcgSmbz6P5Uc9A9wB1KPbL7Wk0YBL2t+Imh8HbYt0hdb+eAa4rjrmz0=\n=4M57\n-----END PGP SIGNATURE-----",
        "payload": "tree f15b80e74174bf3eb75bc07138271e22b64b5b4a\nparent a5fd74667459d74c81ea701f32f688916bf0a719\nparent d80baaa514260334077799abbce4d7f16c2a538d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1491574839 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1491574925 +0200\n\nMerge #10159: [tests] color test results and sort alphabetically\n\nd80baaa fixup - align summary row correctly and make colors/glyphs globals (John Newbery)\nbb92d83 [tests] Add unicode symbols for tests passing/failing/skipping (John Newbery)\n63062bd [tests] color test results and sort alphabetically (John Newbery)\n\nTree-SHA512: a5b85c05480722abd6e483d1817b7527ca487b8bb8292bc81efba158df5a619b8103ed43b790396071ab0710f39457895a79460480044324798c81331bbade5a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df1ca9e93a61787ea7ad8743dfb400126a52b8e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df1ca9e93a61787ea7ad8743dfb400126a52b8e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df1ca9e93a61787ea7ad8743dfb400126a52b8e9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5fd74667459d74c81ea701f32f688916bf0a719",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5fd74667459d74c81ea701f32f688916bf0a719",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5fd74667459d74c81ea701f32f688916bf0a719"
      },
      {
        "sha": "d80baaa514260334077799abbce4d7f16c2a538d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d80baaa514260334077799abbce4d7f16c2a538d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d80baaa514260334077799abbce4d7f16c2a538d"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 68,
      "deletions": 25
    },
    "files": [
      {
        "sha": "c0bbc623a899650736d69e93b129c498f8ce7306",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 68,
        "deletions": 25,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df1ca9e93a61787ea7ad8743dfb400126a52b8e9/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df1ca9e93a61787ea7ad8743dfb400126a52b8e9/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=df1ca9e93a61787ea7ad8743dfb400126a52b8e9",
        "patch": "@@ -25,6 +25,19 @@\n import re\n import logging\n \n+# Formatting. Default colors to empty strings.\n+BOLD, BLUE, RED, GREY = (\"\", \"\"), (\"\", \"\"), (\"\", \"\"), (\"\", \"\")\n+TICK = \"\u2713 \"\n+CROSS = \"\u2716 \"\n+CIRCLE = \"\u25cb \"\n+if os.name == 'posix':\n+    # primitive formatting on supported\n+    # terminal via ANSI escape sequences:\n+    BOLD = ('\\033[0m', '\\033[1m')\n+    BLUE = ('\\033[0m', '\\033[0;34m')\n+    RED = ('\\033[0m', '\\033[0;31m')\n+    GREY = ('\\033[0m', '\\033[1;30m')\n+\n TEST_EXIT_PASSED = 0\n TEST_EXIT_SKIPPED = 77\n \n@@ -231,11 +244,6 @@ def main():\n     run_tests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], args.jobs, args.coverage, passon_args)\n \n def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=False, args=[]):\n-    BOLD = (\"\",\"\")\n-    if os.name == 'posix':\n-        # primitive formatting on supported\n-        # terminal via ANSI escape sequences:\n-        BOLD = ('\\033[0m', '\\033[1m')\n \n     #Set env vars\n     if \"BITCOIND\" not in os.environ:\n@@ -258,42 +266,55 @@ def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=Fal\n         subprocess.check_output([tests_dir + 'create_cache.py'] + flags)\n \n     #Run Tests\n-    all_passed = True\n-    time_sum = 0\n-    time0 = time.time()\n-\n     job_queue = TestHandler(jobs, tests_dir, test_list, flags)\n+    time0 = time.time()\n+    test_results = []\n \n     max_len_name = len(max(test_list, key=len))\n-    results = \"\\n\" + BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"STATUS \", \"DURATION\") + BOLD[0]\n+\n     for _ in range(len(test_list)):\n-        (name, stdout, stderr, status, duration) = job_queue.get_next()\n-        all_passed = all_passed and status != \"Failed\"\n-        time_sum += duration\n-\n-        if status == \"Passed\":\n-            logging.debug(\"\\n%s%s%s passed, Duration: %s s\" % (BOLD[1], name, BOLD[0], duration))\n-        elif status == \"Skipped\":\n-            logging.debug(\"\\n%s%s%s skipped\" % (BOLD[1], name, BOLD[0]))\n+        test_result, stdout, stderr = job_queue.get_next()\n+        test_results.append(test_result)\n+\n+        if test_result.status == \"Passed\":\n+            logging.debug(\"\\n%s%s%s passed, Duration: %s s\" % (BOLD[1], test_result.name, BOLD[0], test_result.time))\n+        elif test_result.status == \"Skipped\":\n+            logging.debug(\"\\n%s%s%s skipped\" % (BOLD[1], test_result.name, BOLD[0]))\n         else:\n-            print(\"\\n%s%s%s failed, Duration: %s s\\n\" % (BOLD[1], name, BOLD[0], duration))\n+            print(\"\\n%s%s%s failed, Duration: %s s\\n\" % (BOLD[1], test_result.name, BOLD[0], test_result.time))\n             print(BOLD[1] + 'stdout:\\n' + BOLD[0] + stdout + '\\n')\n             print(BOLD[1] + 'stderr:\\n' + BOLD[0] + stderr + '\\n')\n \n-        results += \"%s | %s | %s s\\n\" % (name.ljust(max_len_name), status.ljust(7), duration)\n-\n-    results += BOLD[1] + \"\\n%s | %s | %s s (accumulated)\" % (\"ALL\".ljust(max_len_name), str(all_passed).ljust(7), time_sum) + BOLD[0]\n-    print(results)\n-    print(\"\\nRuntime: %s s\" % (int(time.time() - time0)))\n+    print_results(test_results, max_len_name, (int(time.time() - time0)))\n \n     if coverage:\n         coverage.report_rpc_coverage()\n \n         logging.debug(\"Cleaning up coverage data\")\n         coverage.cleanup()\n \n+    all_passed = all(map(lambda test_result: test_result.status == \"Passed\", test_results))\n+\n     sys.exit(not all_passed)\n \n+def print_results(test_results, max_len_name, runtime):\n+    results = \"\\n\" + BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"STATUS   \", \"DURATION\") + BOLD[0]\n+\n+    test_results.sort(key=lambda result: result.name.lower())\n+    all_passed = True\n+    time_sum = 0\n+\n+    for test_result in test_results:\n+        all_passed = all_passed and test_result.status != \"Failed\"\n+        time_sum += test_result.time\n+        test_result.padding = max_len_name\n+        results += str(test_result)\n+\n+    status = TICK + \"Passed\" if all_passed else CROSS + \"Failed\"\n+    results += BOLD[1] + \"\\n%s | %s | %s s (accumulated) \\n\" % (\"ALL\".ljust(max_len_name), status.ljust(9), time_sum) + BOLD[0]\n+    results += \"Runtime: %s s\\n\" % (runtime)\n+    print(results)\n+\n class TestHandler:\n     \"\"\"\n     Trigger the testscrips passed in via the list.\n@@ -348,9 +369,31 @@ def get_next(self):\n                         status = \"Failed\"\n                     self.num_running -= 1\n                     self.jobs.remove(j)\n-                    return name, stdout, stderr, status, int(time.time() - time0)\n+\n+                    return TestResult(name, status, int(time.time() - time0)), stdout, stderr\n             print('.', end='', flush=True)\n \n+class TestResult():\n+    def __init__(self, name, status, time):\n+        self.name = name\n+        self.status = status\n+        self.time = time\n+        self.padding = 0\n+\n+    def __repr__(self):\n+        if self.status == \"Passed\":\n+            color = BLUE\n+            glyph = TICK\n+        elif self.status == \"Failed\":\n+            color = RED\n+            glyph = CROSS\n+        elif self.status == \"Skipped\":\n+            color = GREY\n+            glyph = CIRCLE\n+\n+        return color[1] + \"%s | %s%s | %s s\\n\" % (self.name.ljust(self.padding), glyph, self.status.ljust(7), self.time) + color[0]\n+\n+\n def check_script_list(src_dir):\n     \"\"\"Check scripts directory.\n "
      }
    ]
  },
  {
    "sha": "45ce471ab01e4d6facad69df846592fd51a5072c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWNlNDcxYWIwMWU0ZDZmYWNhZDY5ZGY4NDY1OTJmZDUxYTUwNzJj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-31T20:44:41Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-08T02:16:41Z"
      },
      "message": "Reduce spammy test logging\n\nThis commit reduces spammy logging by the test framework. It truncates\nlogging send/receive message in mininode to 500 characters.  mininode\nwas previously logging the entire message sent received, which can be up\nto 1MB for a full block.",
      "tree": {
        "sha": "bc307668fe01addda16e69a269061e09cf319eca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc307668fe01addda16e69a269061e09cf319eca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45ce471ab01e4d6facad69df846592fd51a5072c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45ce471ab01e4d6facad69df846592fd51a5072c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45ce471ab01e4d6facad69df846592fd51a5072c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45ce471ab01e4d6facad69df846592fd51a5072c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "471ed00fcd3b6feb2e37ad071c7ead78b4e2dad7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/471ed00fcd3b6feb2e37ad071c7ead78b4e2dad7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/471ed00fcd3b6feb2e37ad071c7ead78b4e2dad7"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 13,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d57d46f2ffdf6ffaee2c9e357eb0c834b3ad34b8",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45ce471ab01e4d6facad69df846592fd51a5072c/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45ce471ab01e4d6facad69df846592fd51a5072c/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=45ce471ab01e4d6facad69df846592fd51a5072c",
        "patch": "@@ -1749,7 +1749,7 @@ def got_data(self):\n     def send_message(self, message, pushbuf=False):\n         if self.state != \"connected\" and not pushbuf:\n             raise IOError('Not connected, no pushbuf')\n-        logger.debug(\"Send message to %s:%d: %s\" % (self.dstaddr, self.dstport, repr(message)))\n+        self._log_message(\"send\", message)\n         command = message.command\n         data = message.serialize()\n         tmsg = self.MAGIC_BYTES[self.network]\n@@ -1771,9 +1771,19 @@ def got_message(self, message):\n                 self.messagemap[b'ping'] = msg_ping_prebip31\n         if self.last_sent + 30 * 60 < time.time():\n             self.send_message(self.messagemap[b'ping']())\n-        logger.debug(\"Received message from %s:%d: %s\" % (self.dstaddr, self.dstport, repr(message)))\n+        self._log_message(\"receive\", message)\n         self.cb.deliver(self, message)\n \n+    def _log_message(self, direction, msg):\n+        if direction == \"send\":\n+            log_message = \"Send message to \"\n+        elif direction == \"receive\":\n+            log_message = \"Received message from \"\n+        log_message += \"%s:%d: %s\" % (self.dstaddr, self.dstport, repr(msg)[:500])\n+        if len(log_message) > 500:\n+            log_message += \"... (msg truncated)\"\n+        logger.debug(log_message)\n+\n     def disconnect_node(self):\n         self.disconnect = True\n "
      },
      {
        "sha": "899b0b5a1b69e2d2fe66c1b2087186a513090065",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45ce471ab01e4d6facad69df846592fd51a5072c/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45ce471ab01e4d6facad69df846592fd51a5072c/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=45ce471ab01e4d6facad69df846592fd51a5072c",
        "patch": "@@ -315,7 +315,7 @@ def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=\n     datadir = os.path.join(dirname, \"node\"+str(i))\n     if binary is None:\n         binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-    args = [ binary, \"-datadir=\"+datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-mocktime=\"+str(get_mocktime()) ]\n+    args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(get_mocktime())]\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n     logger.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")"
      }
    ]
  },
  {
    "sha": "3b584859fc86db041f72d74f71d48f34e27140dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjU4NDg1OWZjODZkYjA0MWY3MmQ3NGY3MWQ0OGYzNGUyNzE0MGRk",
    "commit": {
      "author": {
        "name": "Allan Doensen",
        "email": "allan@doensen.com",
        "date": "2017-04-08T05:27:28Z"
      },
      "committer": {
        "name": "Allan Doensen",
        "email": "allan@doensen.com",
        "date": "2017-04-08T05:27:28Z"
      },
      "message": "Changes after comments from @laanwj.\n\nIf the application is detected to be in an invalid position then the default size and position are now used.\nUse of use of abs() has been removed.",
      "tree": {
        "sha": "6c839b38bd5304f8cf41b40b2ca6fb421e2e58c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c839b38bd5304f8cf41b40b2ca6fb421e2e58c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b584859fc86db041f72d74f71d48f34e27140dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b584859fc86db041f72d74f71d48f34e27140dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b584859fc86db041f72d74f71d48f34e27140dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b584859fc86db041f72d74f71d48f34e27140dd/comments",
    "author": {
      "login": "AllanDoensen",
      "id": 12585202,
      "node_id": "MDQ6VXNlcjEyNTg1MjAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12585202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AllanDoensen",
      "html_url": "https://github.com/AllanDoensen",
      "followers_url": "https://api.github.com/users/AllanDoensen/followers",
      "following_url": "https://api.github.com/users/AllanDoensen/following{/other_user}",
      "gists_url": "https://api.github.com/users/AllanDoensen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AllanDoensen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AllanDoensen/subscriptions",
      "organizations_url": "https://api.github.com/users/AllanDoensen/orgs",
      "repos_url": "https://api.github.com/users/AllanDoensen/repos",
      "events_url": "https://api.github.com/users/AllanDoensen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AllanDoensen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "AllanDoensen",
      "id": 12585202,
      "node_id": "MDQ6VXNlcjEyNTg1MjAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12585202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AllanDoensen",
      "html_url": "https://github.com/AllanDoensen",
      "followers_url": "https://api.github.com/users/AllanDoensen/followers",
      "following_url": "https://api.github.com/users/AllanDoensen/following{/other_user}",
      "gists_url": "https://api.github.com/users/AllanDoensen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AllanDoensen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AllanDoensen/subscriptions",
      "organizations_url": "https://api.github.com/users/AllanDoensen/orgs",
      "repos_url": "https://api.github.com/users/AllanDoensen/repos",
      "events_url": "https://api.github.com/users/AllanDoensen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AllanDoensen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18968187da375b1a71af102c13b0a9e5d7ea65ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18968187da375b1a71af102c13b0a9e5d7ea65ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18968187da375b1a71af102c13b0a9e5d7ea65ef"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 8,
      "deletions": 9
    },
    "files": [
      {
        "sha": "a66a0218cfe22acdee32b059a24f75c0e22c4102",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b584859fc86db041f72d74f71d48f34e27140dd/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b584859fc86db041f72d74f71d48f34e27140dd/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=3b584859fc86db041f72d74f71d48f34e27140dd",
        "patch": "@@ -842,19 +842,18 @@ void restoreWindowGeometry(const QString& strSetting, const QSize& defaultSize,\n     QSettings settings;\n     QPoint pos = settings.value(strSetting + \"Pos\").toPoint();\n     QSize size = settings.value(strSetting + \"Size\", defaultSize).toSize();\n-    QRect screen = QApplication::desktop()->screenGeometry();\n-    QPoint posCenter(\n-        abs((screen.width() - size.width()) / 2),\n-        abs((screen.height() - size.height()) / 2));\n-\n-    if (!pos.x() && !pos.y())\n-        pos = posCenter;\n \n     parent->resize(size);\n     parent->move(pos);\n \n-    if (QApplication::desktop()->screenNumber(parent) == -1)\n-        parent->move(posCenter);\n+    if ((!pos.x() && !pos.y()) || (QApplication::desktop()->screenNumber(parent) == -1))\n+    {\n+        QRect screen = QApplication::desktop()->screenGeometry();\n+        QPoint defaultPos((screen.width() - defaultSize.width()) / 2,\n+                          (screen.height() - defaultSize.height()) / 2);\n+        parent->resize(defaultSize);\n+        parent->move(defaultPos);\n+    }\n }\n \n void setClipboard(const QString& str)"
      }
    ]
  },
  {
    "sha": "88799ea1b1c08f4bc1a487c9e3c2effd5e1650ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODc5OWVhMWIxYzA4ZjRiYzFhNDg3YzllM2MyZWZmZDVlMTY1MGFl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-04-08T10:33:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-04-08T10:34:31Z"
      },
      "message": "Merge #10124: [test] Suppress test logging spam\n\n45ce471 Reduce spammy test logging (John Newbery)\n\nTree-SHA512: 64b2ce29fb62a4e738840bbaf93563559451c2ef078ba66ecfc1dbe34adefea61ad2ad2d768444cb2e0b30cb3cbe47e38ed818d4c91f7723a3d1ba9fdd0043f9",
      "tree": {
        "sha": "a1c5bc00c5f789e97156492cbb312dd8f9f73003",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1c5bc00c5f789e97156492cbb312dd8f9f73003"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88799ea1b1c08f4bc1a487c9e3c2effd5e1650ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJY6Ly3AAoJENLqSFDnUoslFisQAJLDN8/9FV19iemmADGkPLY+\nh9tbmzbPSwBORhp1Od754W5jUsW31wV4Zq/mMR0/5vLlUNKJVVceg/G2B8w9MAKV\nAKRM27Ml1C59AseZNx874yCyKTSWkVIwgD1d+KBdKOCK6elx41oYnTaJUhZfWmwD\nQ4vnpGlCQ5xs+8T4ymRhTSULMuhP7R82q0yRPVitnE6Jqs40BZiT3VEgTtXExuZf\nDnMMkdK02PlEYMOsME97yVHMXqWcMiGCwvYdFAiIHJGaneHSsVzabZXrn9hrPoh5\n/PMRvnXa7is54TBc20++nx1TGFbqWBhmerFnugQBaJouby6P/o/NWnLfYMIIIgHg\n5dP/AMMe6ahB9u0SKAZDg4yU2KpnJYwFVhFLbUxhjREAdcGgM0SIg/FMiExsVvHm\nP84ZgGbMDlwqL5ge4uLZEaJY2HIr6+VUEF2wtFo0s1IS78rB1qfzh10oqN2L0pbV\nY3dj+/zOVquA+YvQ1Ps5oquIkZJkx7IeQm6f/9xrhkfJ9DjiUYNc4ZEM1zVhvF9T\n+e/4Ory1LruiTVZxk6qbBKX3pFzC4ybSgffAX7HKkF/pgs83+IdSoRKUb7wDRNzn\n8ygZ+RiufZW+qMMLNSSevI+XJ/GXHJULxHqh94r3YFskZ/3I0791NDy0YA4xz5Zj\n22aLHlFS3NHDgayvHYzH\n=+aYj\n-----END PGP SIGNATURE-----",
        "payload": "tree a1c5bc00c5f789e97156492cbb312dd8f9f73003\nparent df1ca9e93a61787ea7ad8743dfb400126a52b8e9\nparent 45ce471ab01e4d6facad69df846592fd51a5072c\nauthor MarcoFalke <falke.marco@gmail.com> 1491647594 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1491647671 +0200\n\nMerge #10124: [test] Suppress test logging spam\n\n45ce471 Reduce spammy test logging (John Newbery)\n\nTree-SHA512: 64b2ce29fb62a4e738840bbaf93563559451c2ef078ba66ecfc1dbe34adefea61ad2ad2d768444cb2e0b30cb3cbe47e38ed818d4c91f7723a3d1ba9fdd0043f9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88799ea1b1c08f4bc1a487c9e3c2effd5e1650ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88799ea1b1c08f4bc1a487c9e3c2effd5e1650ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88799ea1b1c08f4bc1a487c9e3c2effd5e1650ae/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df1ca9e93a61787ea7ad8743dfb400126a52b8e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df1ca9e93a61787ea7ad8743dfb400126a52b8e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df1ca9e93a61787ea7ad8743dfb400126a52b8e9"
      },
      {
        "sha": "45ce471ab01e4d6facad69df846592fd51a5072c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45ce471ab01e4d6facad69df846592fd51a5072c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45ce471ab01e4d6facad69df846592fd51a5072c"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 13,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d57d46f2ffdf6ffaee2c9e357eb0c834b3ad34b8",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88799ea1b1c08f4bc1a487c9e3c2effd5e1650ae/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88799ea1b1c08f4bc1a487c9e3c2effd5e1650ae/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=88799ea1b1c08f4bc1a487c9e3c2effd5e1650ae",
        "patch": "@@ -1749,7 +1749,7 @@ def got_data(self):\n     def send_message(self, message, pushbuf=False):\n         if self.state != \"connected\" and not pushbuf:\n             raise IOError('Not connected, no pushbuf')\n-        logger.debug(\"Send message to %s:%d: %s\" % (self.dstaddr, self.dstport, repr(message)))\n+        self._log_message(\"send\", message)\n         command = message.command\n         data = message.serialize()\n         tmsg = self.MAGIC_BYTES[self.network]\n@@ -1771,9 +1771,19 @@ def got_message(self, message):\n                 self.messagemap[b'ping'] = msg_ping_prebip31\n         if self.last_sent + 30 * 60 < time.time():\n             self.send_message(self.messagemap[b'ping']())\n-        logger.debug(\"Received message from %s:%d: %s\" % (self.dstaddr, self.dstport, repr(message)))\n+        self._log_message(\"receive\", message)\n         self.cb.deliver(self, message)\n \n+    def _log_message(self, direction, msg):\n+        if direction == \"send\":\n+            log_message = \"Send message to \"\n+        elif direction == \"receive\":\n+            log_message = \"Received message from \"\n+        log_message += \"%s:%d: %s\" % (self.dstaddr, self.dstport, repr(msg)[:500])\n+        if len(log_message) > 500:\n+            log_message += \"... (msg truncated)\"\n+        logger.debug(log_message)\n+\n     def disconnect_node(self):\n         self.disconnect = True\n "
      },
      {
        "sha": "899b0b5a1b69e2d2fe66c1b2087186a513090065",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88799ea1b1c08f4bc1a487c9e3c2effd5e1650ae/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88799ea1b1c08f4bc1a487c9e3c2effd5e1650ae/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=88799ea1b1c08f4bc1a487c9e3c2effd5e1650ae",
        "patch": "@@ -315,7 +315,7 @@ def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=\n     datadir = os.path.join(dirname, \"node\"+str(i))\n     if binary is None:\n         binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-    args = [ binary, \"-datadir=\"+datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-mocktime=\"+str(get_mocktime()) ]\n+    args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(get_mocktime())]\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n     logger.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")"
      }
    ]
  },
  {
    "sha": "36aeab4b990cccab7d4db9ec71e87edf01f418df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmFlYWI0Yjk5MGNjY2FiN2Q0ZGI5ZWM3MWU4N2VkZjAxZjQxOGRm",
    "commit": {
      "author": {
        "name": "Allan Doensen",
        "email": "allan@doensen.com",
        "date": "2017-04-04T13:37:39Z"
      },
      "committer": {
        "name": "Allan Doensen",
        "email": "allan@doensen.com",
        "date": "2017-04-09T05:43:34Z"
      },
      "message": "Fix for issues with startup and mutiple monitors on windows.\n\nChanges after comments from @laanwj.\n\nIf the application is detected to be in an invalid position then the default size and position are now used.\nUse of use of abs() has been removed.",
      "tree": {
        "sha": "17389a37b048d5ca9571d1ca0ce731074a3b0bf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17389a37b048d5ca9571d1ca0ce731074a3b0bf6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36aeab4b990cccab7d4db9ec71e87edf01f418df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36aeab4b990cccab7d4db9ec71e87edf01f418df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36aeab4b990cccab7d4db9ec71e87edf01f418df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36aeab4b990cccab7d4db9ec71e87edf01f418df/comments",
    "author": {
      "login": "AllanDoensen",
      "id": 12585202,
      "node_id": "MDQ6VXNlcjEyNTg1MjAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12585202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AllanDoensen",
      "html_url": "https://github.com/AllanDoensen",
      "followers_url": "https://api.github.com/users/AllanDoensen/followers",
      "following_url": "https://api.github.com/users/AllanDoensen/following{/other_user}",
      "gists_url": "https://api.github.com/users/AllanDoensen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AllanDoensen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AllanDoensen/subscriptions",
      "organizations_url": "https://api.github.com/users/AllanDoensen/orgs",
      "repos_url": "https://api.github.com/users/AllanDoensen/repos",
      "events_url": "https://api.github.com/users/AllanDoensen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AllanDoensen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "AllanDoensen",
      "id": 12585202,
      "node_id": "MDQ6VXNlcjEyNTg1MjAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12585202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AllanDoensen",
      "html_url": "https://github.com/AllanDoensen",
      "followers_url": "https://api.github.com/users/AllanDoensen/followers",
      "following_url": "https://api.github.com/users/AllanDoensen/following{/other_user}",
      "gists_url": "https://api.github.com/users/AllanDoensen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AllanDoensen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AllanDoensen/subscriptions",
      "organizations_url": "https://api.github.com/users/AllanDoensen/orgs",
      "repos_url": "https://api.github.com/users/AllanDoensen/repos",
      "events_url": "https://api.github.com/users/AllanDoensen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AllanDoensen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88799ea1b1c08f4bc1a487c9e3c2effd5e1650ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88799ea1b1c08f4bc1a487c9e3c2effd5e1650ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88799ea1b1c08f4bc1a487c9e3c2effd5e1650ae"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "b2e29abad123603f8e5328f12e632caced72c82f",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36aeab4b990cccab7d4db9ec71e87edf01f418df/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36aeab4b990cccab7d4db9ec71e87edf01f418df/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=36aeab4b990cccab7d4db9ec71e87edf01f418df",
        "patch": "@@ -839,14 +839,17 @@ void restoreWindowGeometry(const QString& strSetting, const QSize& defaultSize,\n     QPoint pos = settings.value(strSetting + \"Pos\").toPoint();\n     QSize size = settings.value(strSetting + \"Size\", defaultSize).toSize();\n \n-    if (!pos.x() && !pos.y()) {\n-        QRect screen = QApplication::desktop()->screenGeometry();\n-        pos.setX((screen.width() - size.width()) / 2);\n-        pos.setY((screen.height() - size.height()) / 2);\n-    }\n-\n     parent->resize(size);\n     parent->move(pos);\n+\n+    if ((!pos.x() && !pos.y()) || (QApplication::desktop()->screenNumber(parent) == -1))\n+    {\n+        QRect screen = QApplication::desktop()->screenGeometry();\n+        QPoint defaultPos((screen.width() - defaultSize.width()) / 2,\n+                          (screen.height() - defaultSize.height()) / 2);\n+        parent->resize(defaultSize);\n+        parent->move(defaultPos);\n+    }\n }\n \n void setClipboard(const QString& str)"
      }
    ]
  },
  {
    "sha": "b0c302bdeccce1536e272dfb0a38efac70129c77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMGMzMDJiZGVjY2NlMTUzNmUyNzJkZmIwYTM4ZWZhYzcwMTI5Yzc3",
    "commit": {
      "author": {
        "name": "Allan Doensen",
        "email": "allan@doensen.com",
        "date": "2017-04-09T05:50:50Z"
      },
      "committer": {
        "name": "Allan Doensen",
        "email": "allan@doensen.com",
        "date": "2017-04-09T05:50:50Z"
      },
      "message": "Merge branch 'masterMultiMonFix' of https://github.com/AllanDoensen/bitcoin into masterMultiMonFix\n\nSquashed.",
      "tree": {
        "sha": "17389a37b048d5ca9571d1ca0ce731074a3b0bf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17389a37b048d5ca9571d1ca0ce731074a3b0bf6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0c302bdeccce1536e272dfb0a38efac70129c77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0c302bdeccce1536e272dfb0a38efac70129c77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b0c302bdeccce1536e272dfb0a38efac70129c77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0c302bdeccce1536e272dfb0a38efac70129c77/comments",
    "author": {
      "login": "AllanDoensen",
      "id": 12585202,
      "node_id": "MDQ6VXNlcjEyNTg1MjAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12585202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AllanDoensen",
      "html_url": "https://github.com/AllanDoensen",
      "followers_url": "https://api.github.com/users/AllanDoensen/followers",
      "following_url": "https://api.github.com/users/AllanDoensen/following{/other_user}",
      "gists_url": "https://api.github.com/users/AllanDoensen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AllanDoensen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AllanDoensen/subscriptions",
      "organizations_url": "https://api.github.com/users/AllanDoensen/orgs",
      "repos_url": "https://api.github.com/users/AllanDoensen/repos",
      "events_url": "https://api.github.com/users/AllanDoensen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AllanDoensen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "AllanDoensen",
      "id": 12585202,
      "node_id": "MDQ6VXNlcjEyNTg1MjAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/12585202?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AllanDoensen",
      "html_url": "https://github.com/AllanDoensen",
      "followers_url": "https://api.github.com/users/AllanDoensen/followers",
      "following_url": "https://api.github.com/users/AllanDoensen/following{/other_user}",
      "gists_url": "https://api.github.com/users/AllanDoensen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AllanDoensen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AllanDoensen/subscriptions",
      "organizations_url": "https://api.github.com/users/AllanDoensen/orgs",
      "repos_url": "https://api.github.com/users/AllanDoensen/repos",
      "events_url": "https://api.github.com/users/AllanDoensen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AllanDoensen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36aeab4b990cccab7d4db9ec71e87edf01f418df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36aeab4b990cccab7d4db9ec71e87edf01f418df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36aeab4b990cccab7d4db9ec71e87edf01f418df"
      },
      {
        "sha": "3b584859fc86db041f72d74f71d48f34e27140dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b584859fc86db041f72d74f71d48f34e27140dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b584859fc86db041f72d74f71d48f34e27140dd"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  }
]