[
  {
    "sha": "c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDlkNWJjOWU2Yzk3YzQ3YzBiZDc4NjA0YjJjMzkzYTdlNGFmMDk3",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-10-26T15:08:46Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-12-01T15:10:25Z"
      },
      "message": "Store the total sig op count of a tx.\n\nStore sum of legacy and P2SH sig op counts.  This is calculated in AcceptToMemory pool and storing it saves redoing the expensive calculation in block template creation.",
      "tree": {
        "sha": "4018d21e32637d0acfda7fb88e24a21415baf6e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4018d21e32637d0acfda7fb88e24a21415baf6e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16f4a6e0fe267e38d14f887e124ee9ca8894267a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16f4a6e0fe267e38d14f887e124ee9ca8894267a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16f4a6e0fe267e38d14f887e124ee9ca8894267a"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 13,
      "deletions": 8
    },
    "files": [
      {
        "sha": "fb6d32b2fc8d7de18cccfb40dd3499d24199e3da",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
        "patch": "@@ -964,7 +964,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             }\n         }\n \n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase);\n+        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOps);\n         unsigned int nSize = entry.GetTxSize();\n \n         // Don't accept it if it can't get into a block"
      },
      {
        "sha": "2147dbb0653365034db37f771059e74a1808af65",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
        "patch": "@@ -150,7 +150,7 @@ CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(CMutableTransaction &tx, CTxMemPo\n     CAmount inChainValue = hasNoDependencies ? txn.GetValueOut() : 0;\n \n     return CTxMemPoolEntry(txn, nFee, nTime, dPriority, nHeight,\n-                           hasNoDependencies, inChainValue, spendsCoinbase);\n+                           hasNoDependencies, inChainValue, spendsCoinbase, sigOpCount);\n }\n \n void Shutdown(void* parg)"
      },
      {
        "sha": "273bfdd7f4a5688b8b4e78b05ffd453d762b3d0d",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
        "patch": "@@ -66,11 +66,12 @@ struct TestMemPoolEntryHelper\n     unsigned int nHeight;\n     bool hadNoDependencies;\n     bool spendsCoinbase;\n-\n+    unsigned int sigOpCount;\n+    \n     TestMemPoolEntryHelper() :\n         nFee(0), nTime(0), dPriority(0.0), nHeight(1),\n-        hadNoDependencies(false), spendsCoinbase(false) { }\n-\n+        hadNoDependencies(false), spendsCoinbase(false), sigOpCount(1) { }\n+    \n     CTxMemPoolEntry FromTx(CMutableTransaction &tx, CTxMemPool *pool = NULL);\n \n     // Change the default value\n@@ -80,5 +81,6 @@ struct TestMemPoolEntryHelper\n     TestMemPoolEntryHelper &Height(unsigned int _height) { nHeight = _height; return *this; }\n     TestMemPoolEntryHelper &HadNoDependencies(bool _hnd) { hadNoDependencies = _hnd; return *this; }\n     TestMemPoolEntryHelper &SpendsCoinbase(bool _flag) { spendsCoinbase = _flag; return *this; }\n+    TestMemPoolEntryHelper &SigOps(unsigned int _sigops) { sigOpCount = _sigops; return *this; }\n };\n #endif"
      },
      {
        "sha": "fa62cbf166345646eebcc57db4d62867f0c6b70d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
        "patch": "@@ -22,10 +22,10 @@ using namespace std;\n CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n                                  bool poolHasNoInputsOf, CAmount _inChainInputValue,\n-                                 bool _spendsCoinbase):\n+                                 bool _spendsCoinbase, unsigned int _sigOps):\n     tx(_tx), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n     hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue),\n-    spendsCoinbase(_spendsCoinbase)\n+    spendsCoinbase(_spendsCoinbase), sigOpCount(_sigOps)\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);"
      },
      {
        "sha": "334b54782369f391a22c1fbd98526a2588ad0b5a",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
        "patch": "@@ -68,6 +68,7 @@ class CTxMemPoolEntry\n     bool hadNoDependencies; //! Not dependent on any other txs when it entered the mempool\n     CAmount inChainInputValue; //! Sum of all txin values that are already in blockchain\n     bool spendsCoinbase; //! keep track of transactions that spend a coinbase\n+    unsigned int sigOpCount; //! Legacy sig ops plus P2SH sig op count\n \n     // Information about descendants of this transaction that are in the\n     // mempool; if we remove this transaction we must remove all of these\n@@ -81,7 +82,8 @@ class CTxMemPoolEntry\n public:\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                     int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n-                    bool poolHasNoInputsOf, CAmount _inChainInputValue, bool spendsCoinbase);\n+                    bool poolHasNoInputsOf, CAmount _inChainInputValue, bool spendsCoinbase,\n+                    unsigned int nSigOps);\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n@@ -95,6 +97,7 @@ class CTxMemPoolEntry\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return entryHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }\n+    unsigned int GetSigOpCount() const { return sigOpCount; }\n     size_t DynamicMemoryUsage() const { return nUsageSize; }\n \n     // Adjusts the descendant state, if this entry is not dirty."
      }
    ]
  },
  {
    "sha": "f3fe83673e84ef4d20b3026faa397cad17212ff8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2ZlODM2NzNlODRlZjRkMjBiMzAyNmZhYTM5N2NhZDE3MjEyZmY4",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-10-26T18:06:06Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-12-01T15:10:25Z"
      },
      "message": "Add a score index to the mempool.\n\nThe score index is meant to represent the order of priority for being included in a block for miners.  Initially this is set to the transactions modified (by any feeDelta) fee rate.  Index improvements and unit tests by sdaftuar.",
      "tree": {
        "sha": "2d0938c50ec5419750e215457e63690e34f66982",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d0938c50ec5419750e215457e63690e34f66982"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3fe83673e84ef4d20b3026faa397cad17212ff8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3fe83673e84ef4d20b3026faa397cad17212ff8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3fe83673e84ef4d20b3026faa397cad17212ff8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3fe83673e84ef4d20b3026faa397cad17212ff8/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c49d5bc9e6c97c47c0bd78604b2c393a7e4af097"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 106,
      "deletions": 12
    },
    "files": [
      {
        "sha": "aede79753182578a196f929e231403b28b0515ae",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3fe83673e84ef4d20b3026faa397cad17212ff8/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3fe83673e84ef4d20b3026faa397cad17212ff8/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=f3fe83673e84ef4d20b3026faa397cad17212ff8",
        "patch": "@@ -190,6 +190,7 @@ UniValue mempoolToJSON(bool fVerbose = false)\n             UniValue info(UniValue::VOBJ);\n             info.push_back(Pair(\"size\", (int)e.GetTxSize()));\n             info.push_back(Pair(\"fee\", ValueFromAmount(e.GetFee())));\n+            info.push_back(Pair(\"modifiedfee\", ValueFromAmount(e.GetModifiedFee())));\n             info.push_back(Pair(\"time\", e.GetTime()));\n             info.push_back(Pair(\"height\", (int)e.GetHeight()));\n             info.push_back(Pair(\"startingpriority\", e.GetPriority(e.GetHeight())));\n@@ -247,6 +248,7 @@ UniValue getrawmempool(const UniValue& params, bool fHelp)\n             \"  \\\"transactionid\\\" : {       (json object)\\n\"\n             \"    \\\"size\\\" : n,             (numeric) transaction size in bytes\\n\"\n             \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \"\\n\"\n+            \"    \\\"modifiedfee\\\" : n,      (numeric) transaction fee with fee deltas used for mining priority\\n\"\n             \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n             \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n             \"    \\\"startingpriority\\\" : n, (numeric) priority when transaction entered pool\\n\""
      },
      {
        "sha": "e9f7378f747d151b1d904aaa52ffa80bb8e2ca07",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 9,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3fe83673e84ef4d20b3026faa397cad17212ff8/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3fe83673e84ef4d20b3026faa397cad17212ff8/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=f3fe83673e84ef4d20b3026faa397cad17212ff8",
        "patch": "@@ -102,12 +102,13 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     removed.clear();\n }\n \n+template<int index>\n void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder)\n {\n     BOOST_CHECK_EQUAL(pool.size(), sortedOrder.size());\n-    CTxMemPool::indexed_transaction_set::nth_index<1>::type::iterator it = pool.mapTx.get<1>().begin();\n+    typename CTxMemPool::indexed_transaction_set::nth_index<index>::type::iterator it = pool.mapTx.get<index>().begin();\n     int count=0;\n-    for (; it != pool.mapTx.get<1>().end(); ++it, ++count) {\n+    for (; it != pool.mapTx.get<index>().end(); ++it, ++count) {\n         BOOST_CHECK_EQUAL(it->GetTx().GetHash().ToString(), sortedOrder[count]);\n     }\n }\n@@ -163,7 +164,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     sortedOrder[2] = tx1.GetHash().ToString(); // 10000\n     sortedOrder[3] = tx4.GetHash().ToString(); // 15000\n     sortedOrder[4] = tx2.GetHash().ToString(); // 20000\n-    CheckSort(pool, sortedOrder);\n+    CheckSort<1>(pool, sortedOrder);\n \n     /* low fee but with high fee child */\n     /* tx6 -> tx7 -> tx8, tx9 -> tx10 */\n@@ -175,7 +176,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     BOOST_CHECK_EQUAL(pool.size(), 6);\n     // Check that at this point, tx6 is sorted low\n     sortedOrder.insert(sortedOrder.begin(), tx6.GetHash().ToString());\n-    CheckSort(pool, sortedOrder);\n+    CheckSort<1>(pool, sortedOrder);\n \n     CTxMemPool::setEntries setAncestors;\n     setAncestors.insert(pool.mapTx.find(tx6.GetHash()));\n@@ -201,7 +202,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     sortedOrder.erase(sortedOrder.begin());\n     sortedOrder.push_back(tx6.GetHash().ToString());\n     sortedOrder.push_back(tx7.GetHash().ToString());\n-    CheckSort(pool, sortedOrder);\n+    CheckSort<1>(pool, sortedOrder);\n \n     /* low fee child of tx7 */\n     CMutableTransaction tx8 = CMutableTransaction();\n@@ -216,7 +217,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n \n     // Now tx8 should be sorted low, but tx6/tx both high\n     sortedOrder.insert(sortedOrder.begin(), tx8.GetHash().ToString());\n-    CheckSort(pool, sortedOrder);\n+    CheckSort<1>(pool, sortedOrder);\n \n     /* low fee child of tx7 */\n     CMutableTransaction tx9 = CMutableTransaction();\n@@ -231,7 +232,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     // tx9 should be sorted low\n     BOOST_CHECK_EQUAL(pool.size(), 9);\n     sortedOrder.insert(sortedOrder.begin(), tx9.GetHash().ToString());\n-    CheckSort(pool, sortedOrder);\n+    CheckSort<1>(pool, sortedOrder);\n \n     std::vector<std::string> snapshotOrder = sortedOrder;\n \n@@ -273,17 +274,50 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     sortedOrder.insert(sortedOrder.begin()+5, tx9.GetHash().ToString());\n     sortedOrder.insert(sortedOrder.begin()+6, tx8.GetHash().ToString());\n     sortedOrder.insert(sortedOrder.begin()+7, tx10.GetHash().ToString()); // tx10 is just before tx6\n-    CheckSort(pool, sortedOrder);\n+    CheckSort<1>(pool, sortedOrder);\n \n     // there should be 10 transactions in the mempool\n     BOOST_CHECK_EQUAL(pool.size(), 10);\n \n     // Now try removing tx10 and verify the sort order returns to normal\n     std::list<CTransaction> removed;\n     pool.remove(pool.mapTx.find(tx10.GetHash())->GetTx(), removed, true);\n-    CheckSort(pool, snapshotOrder);\n+    CheckSort<1>(pool, snapshotOrder);\n+\n+    pool.remove(pool.mapTx.find(tx9.GetHash())->GetTx(), removed, true);\n+    pool.remove(pool.mapTx.find(tx8.GetHash())->GetTx(), removed, true);\n+    /* Now check the sort on the mining score index.\n+     * Final order should be:\n+     *\n+     * tx7 (2M)\n+     * tx2 (20k)\n+     * tx4 (15000)\n+     * tx1/tx5 (10000)\n+     * tx3/6 (0)\n+     * (Ties resolved by hash)\n+     */\n+    sortedOrder.clear();\n+    sortedOrder.push_back(tx7.GetHash().ToString());\n+    sortedOrder.push_back(tx2.GetHash().ToString());\n+    sortedOrder.push_back(tx4.GetHash().ToString());\n+    if (tx1.GetHash() < tx5.GetHash()) {\n+        sortedOrder.push_back(tx5.GetHash().ToString());\n+        sortedOrder.push_back(tx1.GetHash().ToString());\n+    } else {\n+        sortedOrder.push_back(tx1.GetHash().ToString());\n+        sortedOrder.push_back(tx5.GetHash().ToString());\n+    }\n+    if (tx3.GetHash() < tx6.GetHash()) {\n+        sortedOrder.push_back(tx6.GetHash().ToString());\n+        sortedOrder.push_back(tx3.GetHash().ToString());\n+    } else {\n+        sortedOrder.push_back(tx3.GetHash().ToString());\n+        sortedOrder.push_back(tx6.GetHash().ToString());\n+    }\n+    CheckSort<3>(pool, sortedOrder);\n }\n \n+\n BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n {\n     CTxMemPool pool(CFeeRate(1000));"
      },
      {
        "sha": "35be2162877d940bc74383ba2ba8c2fc218505eb",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3fe83673e84ef4d20b3026faa397cad17212ff8/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3fe83673e84ef4d20b3026faa397cad17212ff8/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=f3fe83673e84ef4d20b3026faa397cad17212ff8",
        "patch": "@@ -36,6 +36,8 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n     nFeesWithDescendants = nFee;\n     CAmount nValueIn = tx.GetValueOut()+nFee;\n     assert(inChainInputValue <= nValueIn);\n+\n+    feeDelta = 0;\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n@@ -53,6 +55,11 @@ CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n     return dResult;\n }\n \n+void CTxMemPoolEntry::UpdateFeeDelta(int64_t newFeeDelta)\n+{\n+    feeDelta = newFeeDelta;\n+}\n+\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n@@ -392,6 +399,15 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     }\n     UpdateAncestorsOf(true, newit, setAncestors);\n \n+    // Update transaction's score for any feeDelta created by PrioritiseTransaction\n+    std::map<uint256, std::pair<double, CAmount> >::const_iterator pos = mapDeltas.find(hash);\n+    if (pos != mapDeltas.end()) {\n+        const std::pair<double, CAmount> &deltas = pos->second;\n+        if (deltas.second) {\n+            mapTx.modify(newit, update_fee_delta(deltas.second));\n+        }\n+    }\n+\n     nTransactionsUpdated++;\n     totalTxSize += entry.GetTxSize();\n     minerPolicyEstimator->processTransaction(entry, fCurrentEstimate);\n@@ -769,6 +785,10 @@ void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash,\n         std::pair<double, CAmount> &deltas = mapDeltas[hash];\n         deltas.first += dPriorityDelta;\n         deltas.second += nFeeDelta;\n+        txiter it = mapTx.find(hash);\n+        if (it != mapTx.end()) {\n+            mapTx.modify(it, update_fee_delta(deltas.second));\n+        }\n     }\n     LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, FormatMoney(nFeeDelta));\n }\n@@ -818,8 +838,8 @@ bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n \n size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n-    // Estimate the overhead of mapTx to be 9 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n-    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 9 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + cachedInnerUsage;\n+    // Estimate the overhead of mapTx to be 12 pointers + an allocation, as no exact formula for boost::multi_index_contained is implemented.\n+    return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 12 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + cachedInnerUsage;\n }\n \n void CTxMemPool::RemoveStaged(setEntries &stage) {"
      },
      {
        "sha": "b011c38827ea2d08875bca10d10e83c85727a744",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 39,
        "deletions": 1,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3fe83673e84ef4d20b3026faa397cad17212ff8/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3fe83673e84ef4d20b3026faa397cad17212ff8/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=f3fe83673e84ef4d20b3026faa397cad17212ff8",
        "patch": "@@ -69,6 +69,7 @@ class CTxMemPoolEntry\n     CAmount inChainInputValue; //! Sum of all txin values that are already in blockchain\n     bool spendsCoinbase; //! keep track of transactions that spend a coinbase\n     unsigned int sigOpCount; //! Legacy sig ops plus P2SH sig op count\n+    int64_t feeDelta; //! Used for determining the priority of the transaction for mining in a block\n \n     // Information about descendants of this transaction that are in the\n     // mempool; if we remove this transaction we must remove all of these\n@@ -98,10 +99,13 @@ class CTxMemPoolEntry\n     unsigned int GetHeight() const { return entryHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }\n     unsigned int GetSigOpCount() const { return sigOpCount; }\n+    int64_t GetModifiedFee() const { return nFee + feeDelta; }\n     size_t DynamicMemoryUsage() const { return nUsageSize; }\n \n     // Adjusts the descendant state, if this entry is not dirty.\n     void UpdateState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount);\n+    // Updates the fee delta used for mining priority score\n+    void UpdateFeeDelta(int64_t feeDelta);\n \n     /** We can set the entry to be dirty if doing the full calculation of in-\n      *  mempool descendants will be too expensive, which can potentially happen\n@@ -139,6 +143,16 @@ struct set_dirty\n         { e.SetDirty(); }\n };\n \n+struct update_fee_delta\n+{\n+    update_fee_delta(int64_t _feeDelta) : feeDelta(_feeDelta) { }\n+\n+    void operator() (CTxMemPoolEntry &e) { e.UpdateFeeDelta(feeDelta); }\n+\n+private:\n+    int64_t feeDelta;\n+};\n+\n // extracts a TxMemPoolEntry's transaction hash\n struct mempoolentry_txid\n {\n@@ -186,6 +200,24 @@ class CompareTxMemPoolEntryByFee\n     }\n };\n \n+/** \\class CompareTxMemPoolEntryByScore\n+ *\n+ *  Sort by score of entry ((fee+delta)/size) in descending order\n+ */\n+class CompareTxMemPoolEntryByScore\n+{\n+public:\n+    bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b)\n+    {\n+        double f1 = (double)a.GetModifiedFee() * b.GetTxSize();\n+        double f2 = (double)b.GetModifiedFee() * a.GetTxSize();\n+        if (f1 == f2) {\n+            return b.GetTx().GetHash() < a.GetTx().GetHash();\n+        }\n+        return f1 > f2;\n+    }\n+};\n+\n class CompareTxMemPoolEntryByEntryTime\n {\n public:\n@@ -223,10 +255,11 @@ class CInPoint\n  *\n  * CTxMemPool::mapTx, and CTxMemPoolEntry bookkeeping:\n  *\n- * mapTx is a boost::multi_index that sorts the mempool on 3 criteria:\n+ * mapTx is a boost::multi_index that sorts the mempool on 4 criteria:\n  * - transaction hash\n  * - feerate [we use max(feerate of tx, feerate of tx with all descendants)]\n  * - time in mempool\n+ * - mining score (feerate modified by any fee deltas from PrioritiseTransaction)\n  *\n  * Note: the term \"descendant\" refers to in-mempool transactions that depend on\n  * this one, while \"ancestor\" refers to in-mempool transactions that a given\n@@ -323,6 +356,11 @@ class CTxMemPool\n             boost::multi_index::ordered_non_unique<\n                 boost::multi_index::identity<CTxMemPoolEntry>,\n                 CompareTxMemPoolEntryByEntryTime\n+                >,\n+            // sorted by score (for mining prioritization)\n+            boost::multi_index::ordered_unique<\n+                boost::multi_index::identity<CTxMemPoolEntry>,\n+                CompareTxMemPoolEntryByScore\n             >\n         >\n     > indexed_transaction_set;"
      }
    ]
  },
  {
    "sha": "7230187b1d8bf39da5f1502e4c9eeb8e72dccdff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjMwMTg3YjFkOGJmMzlkYTVmMTUwMmU0YzllZWI4ZTcyZGNjZGZm",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-03T15:02:20Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-12-01T15:10:25Z"
      },
      "message": "Add TxPriority class and comparator",
      "tree": {
        "sha": "cc87e1bd43bb3bd17c9df1d1523fb7b86b34f7c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc87e1bd43bb3bd17c9df1d1523fb7b86b34f7c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7230187b1d8bf39da5f1502e4c9eeb8e72dccdff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7230187b1d8bf39da5f1502e4c9eeb8e72dccdff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7230187b1d8bf39da5f1502e4c9eeb8e72dccdff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7230187b1d8bf39da5f1502e4c9eeb8e72dccdff/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3fe83673e84ef4d20b3026faa397cad17212ff8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3fe83673e84ef4d20b3026faa397cad17212ff8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3fe83673e84ef4d20b3026faa397cad17212ff8"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "deeb2f7b62ea4b5c41ac3f7cfa9885d2143f12c6",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7230187b1d8bf39da5f1502e4c9eeb8e72dccdff/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7230187b1d8bf39da5f1502e4c9eeb8e72dccdff/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=7230187b1d8bf39da5f1502e4c9eeb8e72dccdff",
        "patch": "@@ -587,4 +587,17 @@ class CCoinsViewMemPool : public CCoinsViewBacked\n     bool HaveCoins(const uint256 &txid) const;\n };\n \n+// We want to sort transactions by coin age priority\n+typedef std::pair<double, CTxMemPool::txiter> TxCoinAgePriority;\n+\n+struct TxCoinAgePriorityCompare\n+{\n+    bool operator()(const TxCoinAgePriority& a, const TxCoinAgePriority& b)\n+    {\n+        if (a.first == b.first)\n+            return CompareTxMemPoolEntryByScore()(*(b.second), *(a.second)); //Reverse order to make sort less than\n+        return a.first < b.first;\n+    }\n+};\n+\n #endif // BITCOIN_TXMEMPOOL_H"
      }
    ]
  },
  {
    "sha": "1f09287c667d3a7d10ab9c5c96037fe48899490d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjA5Mjg3YzY2N2QzYTdkMTBhYjljNWM5NjAzN2ZlNDg4OTk0OTBk",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-10-26T18:06:19Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-12-01T15:10:25Z"
      },
      "message": "Make accessing mempool parents and children public",
      "tree": {
        "sha": "d852d44a90e2b7c0ae0b42340259aa85d3727a58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d852d44a90e2b7c0ae0b42340259aa85d3727a58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f09287c667d3a7d10ab9c5c96037fe48899490d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f09287c667d3a7d10ab9c5c96037fe48899490d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f09287c667d3a7d10ab9c5c96037fe48899490d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f09287c667d3a7d10ab9c5c96037fe48899490d/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7230187b1d8bf39da5f1502e4c9eeb8e72dccdff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7230187b1d8bf39da5f1502e4c9eeb8e72dccdff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7230187b1d8bf39da5f1502e4c9eeb8e72dccdff"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5652969f4bb85206c69315eeb0abad94424078f4",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f09287c667d3a7d10ab9c5c96037fe48899490d/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f09287c667d3a7d10ab9c5c96037fe48899490d/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=1f09287c667d3a7d10ab9c5c96037fe48899490d",
        "patch": "@@ -375,6 +375,8 @@ class CTxMemPool\n     };\n     typedef std::set<txiter, CompareIteratorByHash> setEntries;\n \n+    const setEntries & GetMemPoolParents(txiter entry) const;\n+    const setEntries & GetMemPoolChildren(txiter entry) const;\n private:\n     typedef std::map<txiter, setEntries, CompareIteratorByHash> cacheMap;\n \n@@ -386,8 +388,6 @@ class CTxMemPool\n     typedef std::map<txiter, TxLinks, CompareIteratorByHash> txlinksMap;\n     txlinksMap mapLinks;\n \n-    const setEntries & GetMemPoolParents(txiter entry) const;\n-    const setEntries & GetMemPoolChildren(txiter entry) const;\n     void UpdateParent(txiter entry, txiter parent, bool add);\n     void UpdateChild(txiter entry, txiter child, bool add);\n "
      }
    ]
  },
  {
    "sha": "5f122633020ce5d9f78c73394cda576a8657a3ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjEyMjYzMzAyMGNlNWQ5Zjc4YzczMzk0Y2RhNTc2YTg2NTdhM2Fj",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-10-28T18:56:28Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-12-01T15:10:25Z"
      },
      "message": "Expose FormatStateMessage",
      "tree": {
        "sha": "b12d5bef8c24b435bdc7e158b74692f4ca672436",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b12d5bef8c24b435bdc7e158b74692f4ca672436"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f122633020ce5d9f78c73394cda576a8657a3ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f122633020ce5d9f78c73394cda576a8657a3ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f122633020ce5d9f78c73394cda576a8657a3ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f122633020ce5d9f78c73394cda576a8657a3ac/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f09287c667d3a7d10ab9c5c96037fe48899490d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f09287c667d3a7d10ab9c5c96037fe48899490d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f09287c667d3a7d10ab9c5c96037fe48899490d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e9e9820434101756053d8a4a57d3edb444691c57",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f122633020ce5d9f78c73394cda576a8657a3ac/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f122633020ce5d9f78c73394cda576a8657a3ac/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5f122633020ce5d9f78c73394cda576a8657a3ac",
        "patch": "@@ -816,7 +816,7 @@ CAmount GetMinRelayFee(const CTransaction& tx, const CTxMemPool& pool, unsigned\n }\n \n /** Convert CValidationState to a human-readable message for logging */\n-static std::string FormatStateMessage(const CValidationState &state)\n+std::string FormatStateMessage(const CValidationState &state)\n {\n     return strprintf(\"%s%s (code %i)\",\n         state.GetRejectReason(),"
      },
      {
        "sha": "19623f4d96f5a8f39d81b404fa066c93a5eba78d",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f122633020ce5d9f78c73394cda576a8657a3ac/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f122633020ce5d9f78c73394cda576a8657a3ac/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=5f122633020ce5d9f78c73394cda576a8657a3ac",
        "patch": "@@ -257,6 +257,8 @@ void PruneAndFlush();\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fOverrideMempoolLimit=false, bool fRejectAbsurdFee=false);\n \n+/** Convert CValidationState to a human-readable message for logging */\n+std::string FormatStateMessage(const CValidationState &state);\n \n struct CNodeStateStats {\n     int nMisbehavior;"
      }
    ]
  },
  {
    "sha": "553cad94e29c33872b60d97b8574ed2773355f0b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTNjYWQ5NGUyOWMzMzg3MmI2MGQ5N2I4NTc0ZWQyNzczMzU1ZjBi",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-11-03T15:35:39Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-12-01T17:09:37Z"
      },
      "message": "Rewrite CreateNewBlock\n\nUse the score index on the mempool to only add sorted txs in order.  Remove much of the validation while building the block, relying on mempool to be consistent and only contain txs that can be mined.\nThe mempool is assumed to be consistent as far as not containing txs which spend non-existent outputs or double spends, and scripts are valid.  Finality of txs is still checked (except not coinbase maturity, assumed in mempool).\nStill TestBlockValidity in case mempool consistency breaks and return error state if an invalid block was created.\nUnit tests are modified to realize that invalid blocks can now be constructed if the mempool breaks its consistency assumptions and also updated to have the right fees, since the cached value is now used for block construction.\n\nConflicts:\n\tsrc/miner.cpp",
      "tree": {
        "sha": "0cf289e53969878180a50a36cb264e084b0179f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0cf289e53969878180a50a36cb264e084b0179f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/553cad94e29c33872b60d97b8574ed2773355f0b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/553cad94e29c33872b60d97b8574ed2773355f0b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/553cad94e29c33872b60d97b8574ed2773355f0b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/553cad94e29c33872b60d97b8574ed2773355f0b/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f122633020ce5d9f78c73394cda576a8657a3ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f122633020ce5d9f78c73394cda576a8657a3ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f122633020ce5d9f78c73394cda576a8657a3ac"
      }
    ],
    "stats": {
      "total": 361,
      "additions": 156,
      "deletions": 205
    },
    "files": [
      {
        "sha": "c6db00d301cb04b3fcb321bde451ee660e9ba6b8",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 120,
        "deletions": 181,
        "changes": 301,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/553cad94e29c33872b60d97b8574ed2773355f0b/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/553cad94e29c33872b60d97b8574ed2773355f0b/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=553cad94e29c33872b60d97b8574ed2773355f0b",
        "patch": "@@ -27,6 +27,7 @@\n \n #include <boost/thread.hpp>\n #include <boost/tuple/tuple.hpp>\n+#include <queue>\n \n using namespace std;\n \n@@ -40,48 +41,18 @@ using namespace std;\n // transactions in the memory pool. When we select transactions from the\n // pool, we select by highest priority or fee rate, so we might consider\n // transactions that depend on transactions that aren't yet in the block.\n-// The COrphan class keeps track of these 'temporary orphans' while\n-// CreateBlock is figuring out which transactions to include.\n-//\n-class COrphan\n-{\n-public:\n-    const CTransaction* ptx;\n-    set<uint256> setDependsOn;\n-    CFeeRate feeRate;\n-    double dPriority;\n-\n-    COrphan(const CTransaction* ptxIn) : ptx(ptxIn), feeRate(0), dPriority(0)\n-    {\n-    }\n-};\n \n uint64_t nLastBlockTx = 0;\n uint64_t nLastBlockSize = 0;\n \n-// We want to sort transactions by priority and fee rate, so:\n-typedef boost::tuple<double, CFeeRate, const CTransaction*> TxPriority;\n-class TxPriorityCompare\n+class ScoreCompare\n {\n-    bool byFee;\n-\n public:\n-    TxPriorityCompare(bool _byFee) : byFee(_byFee) { }\n+    ScoreCompare() {}\n \n-    bool operator()(const TxPriority& a, const TxPriority& b)\n+    bool operator()(const CTxMemPool::txiter a, const CTxMemPool::txiter b)\n     {\n-        if (byFee)\n-        {\n-            if (a.get<1>() == b.get<1>())\n-                return a.get<0>() < b.get<0>();\n-            return a.get<1>() < b.get<1>();\n-        }\n-        else\n-        {\n-            if (a.get<0>() == b.get<0>())\n-                return a.get<1>() < b.get<1>();\n-            return a.get<0>() < b.get<0>();\n-        }\n+        return CompareTxMemPoolEntryByScore()(*b,*a); // Convert to less than\n     }\n };\n \n@@ -141,6 +112,22 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n     nBlockMinSize = std::min(nBlockMaxSize, nBlockMinSize);\n \n     // Collect memory pool transactions into the block\n+    CTxMemPool::setEntries inBlock;\n+    CTxMemPool::setEntries waitSet;\n+\n+    // This vector will be sorted into a priority queue:\n+    vector<TxCoinAgePriority> vecPriority;\n+    TxCoinAgePriorityCompare pricomparer;\n+    std::map<CTxMemPool::txiter, double, CTxMemPool::CompareIteratorByHash> waitPriMap;\n+    typedef std::map<CTxMemPool::txiter, double, CTxMemPool::CompareIteratorByHash>::iterator waitPriIter;\n+    double actualPriority = -1;\n+\n+    std::priority_queue<CTxMemPool::txiter, std::vector<CTxMemPool::txiter>, ScoreCompare> clearedTxs;\n+    bool fPrintPriority = GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n+    uint64_t nBlockSize = 1000;\n+    uint64_t nBlockTx = 0;\n+    unsigned int nBlockSigOps = 100;\n+    int lastFewTxs = 0;\n     CAmount nFees = 0;\n \n     {\n@@ -149,157 +136,102 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         const int nHeight = pindexPrev->nHeight + 1;\n         pblock->nTime = GetAdjustedTime();\n         const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n-        CCoinsViewCache view(pcoinsTip);\n-\n-        // Priority order to process transactions\n-        list<COrphan> vOrphan; // list memory doesn't move\n-        map<uint256, vector<COrphan*> > mapDependers;\n-        bool fPrintPriority = GetBoolArg(\"-printpriority\", DEFAULT_PRINTPRIORITY);\n-\n-        // This vector will be sorted into a priority queue:\n-        vector<TxPriority> vecPriority;\n-        vecPriority.reserve(mempool.mapTx.size());\n-        for (CTxMemPool::indexed_transaction_set::iterator mi = mempool.mapTx.begin();\n-             mi != mempool.mapTx.end(); ++mi)\n-        {\n-            const CTransaction& tx = mi->GetTx();\n-\n-            int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n-                                    ? nMedianTimePast\n-                                    : pblock->GetBlockTime();\n-\n-            if (tx.IsCoinBase() || !IsFinalTx(tx, nHeight, nLockTimeCutoff))\n-                continue;\n-\n-            COrphan* porphan = NULL;\n-            double dPriority = 0;\n-            CAmount nTotalIn = 0;\n-            bool fMissingInputs = false;\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-            {\n-                // Read prev transaction\n-                if (!view.HaveCoins(txin.prevout.hash))\n-                {\n-                    // This should never happen; all transactions in the memory\n-                    // pool should connect to either transactions in the chain\n-                    // or other transactions in the memory pool.\n-                    if (!mempool.mapTx.count(txin.prevout.hash))\n-                    {\n-                        LogPrintf(\"ERROR: mempool transaction missing input\\n\");\n-                        if (fDebug) assert(\"mempool transaction missing input\" == 0);\n-                        fMissingInputs = true;\n-                        if (porphan)\n-                            vOrphan.pop_back();\n-                        break;\n-                    }\n-\n-                    // Has to wait for dependencies\n-                    if (!porphan)\n-                    {\n-                        // Use list for automatic deletion\n-                        vOrphan.push_back(COrphan(&tx));\n-                        porphan = &vOrphan.back();\n-                    }\n-                    mapDependers[txin.prevout.hash].push_back(porphan);\n-                    porphan->setDependsOn.insert(txin.prevout.hash);\n-                    nTotalIn += mempool.mapTx.find(txin.prevout.hash)->GetTx().vout[txin.prevout.n].nValue;\n-                    continue;\n-                }\n-                const CCoins* coins = view.AccessCoins(txin.prevout.hash);\n-                assert(coins);\n-\n-                CAmount nValueIn = coins->vout[txin.prevout.n].nValue;\n-                nTotalIn += nValueIn;\n-\n-                int nConf = nHeight - coins->nHeight;\n-\n-                dPriority += (double)nValueIn * nConf;\n-            }\n-            if (fMissingInputs) continue;\n-\n-            // Priority is sum(valuein * age) / modified_txsize\n-            unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-            dPriority = tx.ComputePriority(dPriority, nTxSize);\n-\n-            uint256 hash = tx.GetHash();\n-            mempool.ApplyDeltas(hash, dPriority, nTotalIn);\n \n-            CFeeRate feeRate(nTotalIn-tx.GetValueOut(), nTxSize);\n+        int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n+                                ? nMedianTimePast\n+                                : pblock->GetBlockTime();\n \n-            if (porphan)\n+        bool fPriorityBlock = nBlockPrioritySize > 0;\n+        if (fPriorityBlock) {\n+            vecPriority.reserve(mempool.mapTx.size());\n+            for (CTxMemPool::indexed_transaction_set::iterator mi = mempool.mapTx.begin();\n+                 mi != mempool.mapTx.end(); ++mi)\n             {\n-                porphan->dPriority = dPriority;\n-                porphan->feeRate = feeRate;\n+                double dPriority = mi->GetPriority(nHeight);\n+                CAmount dummy;\n+                mempool.ApplyDeltas(mi->GetTx().GetHash(), dPriority, dummy);\n+                vecPriority.push_back(TxCoinAgePriority(dPriority, mi));\n             }\n-            else\n-                vecPriority.push_back(TxPriority(dPriority, feeRate, &(mi->GetTx())));\n+            std::make_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n         }\n \n-        // Collect transactions into block\n-        uint64_t nBlockSize = 1000;\n-        uint64_t nBlockTx = 0;\n-        int nBlockSigOps = 100;\n-        bool fSortedByFee = (nBlockPrioritySize <= 0);\n+        CTxMemPool::indexed_transaction_set::nth_index<3>::type::iterator mi = mempool.mapTx.get<3>().begin();\n+        CTxMemPool::txiter iter;\n \n-        TxPriorityCompare comparer(fSortedByFee);\n-        std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n-\n-        while (!vecPriority.empty())\n+        while (mi != mempool.mapTx.get<3>().end() || !clearedTxs.empty())\n         {\n-            // Take highest priority transaction off the priority queue:\n-            double dPriority = vecPriority.front().get<0>();\n-            CFeeRate feeRate = vecPriority.front().get<1>();\n-            const CTransaction& tx = *(vecPriority.front().get<2>());\n-\n-            std::pop_heap(vecPriority.begin(), vecPriority.end(), comparer);\n-            vecPriority.pop_back();\n-\n-            // Size limits\n-            unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-            if (nBlockSize + nTxSize >= nBlockMaxSize)\n-                continue;\n+            bool priorityTx = false;\n+            if (fPriorityBlock && !vecPriority.empty()) { // add a tx from priority queue to fill the blockprioritysize\n+                priorityTx = true;\n+                iter = vecPriority.front().second;\n+                actualPriority = vecPriority.front().first;\n+                std::pop_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n+                vecPriority.pop_back();\n+            }\n+            else if (clearedTxs.empty()) { // add tx with next highest score\n+                iter = mempool.mapTx.project<0>(mi);\n+                mi++;\n+            }\n+            else {  // try to add a previously postponed child tx\n+                iter = clearedTxs.top();\n+                clearedTxs.pop();\n+            }\n \n-            // Legacy limits on sigOps:\n-            unsigned int nTxSigOps = GetLegacySigOpCount(tx);\n-            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n-                continue;\n+            if (inBlock.count(iter))\n+                continue; // could have been added to the priorityBlock\n \n-            // Skip free transactions if we're past the minimum block size:\n-            const uint256& hash = tx.GetHash();\n-            double dPriorityDelta = 0;\n-            CAmount nFeeDelta = 0;\n-            mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n-            if (fSortedByFee && (dPriorityDelta <= 0) && (nFeeDelta <= 0) && (feeRate < ::minRelayTxFee) && (nBlockSize + nTxSize >= nBlockMinSize))\n-                continue;\n+            const CTransaction& tx = iter->GetTx();\n \n-            // Prioritise by fee once past the priority size or we run out of high-priority\n-            // transactions:\n-            if (!fSortedByFee &&\n-                ((nBlockSize + nTxSize >= nBlockPrioritySize) || !AllowFree(dPriority)))\n+            bool fOrphan = false;\n+            BOOST_FOREACH(CTxMemPool::txiter parent, mempool.GetMemPoolParents(iter))\n             {\n-                fSortedByFee = true;\n-                comparer = TxPriorityCompare(fSortedByFee);\n-                std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n+                if (!inBlock.count(parent)) {\n+                    fOrphan = true;\n+                    break;\n+                }\n             }\n-\n-            if (!view.HaveInputs(tx))\n+            if (fOrphan) {\n+                if (priorityTx)\n+                    waitPriMap.insert(std::make_pair(iter,actualPriority));\n+                else\n+                    waitSet.insert(iter);\n                 continue;\n+            }\n \n-            CAmount nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n-\n-            nTxSigOps += GetP2SHSigOpCount(tx, view);\n-            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n+            unsigned int nTxSize = iter->GetTxSize();\n+            if (fPriorityBlock &&\n+                (nBlockSize + nTxSize >= nBlockPrioritySize || !AllowFree(actualPriority))) {\n+                fPriorityBlock = false;\n+                waitPriMap.clear();\n+            }\n+            if (!priorityTx &&\n+                (iter->GetModifiedFee() < ::minRelayTxFee.GetFee(nTxSize) && nBlockSize >= nBlockMinSize)) {\n+                break;\n+            }\n+            if (nBlockSize + nTxSize >= nBlockMaxSize) {\n+                if (nBlockSize >  nBlockMaxSize - 100 || lastFewTxs > 50) {\n+                    break;\n+                }\n+                // Once we're within 1000 bytes of a full block, only look at 50 more txs\n+                // to try to fill the remaining space.\n+                if (nBlockSize > nBlockMaxSize - 1000) {\n+                    lastFewTxs++;\n+                }\n                 continue;\n+            }\n \n-            // Note that flags: we don't want to set mempool/IsStandard()\n-            // policy here, but we still have to ensure that the block we\n-            // create only contains transactions that are valid in new blocks.\n-            CValidationState state;\n-            if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n+            if (!IsFinalTx(tx, nHeight, nLockTimeCutoff))\n                 continue;\n \n-            UpdateCoins(tx, state, view, nHeight);\n+            unsigned int nTxSigOps = iter->GetSigOpCount();\n+            if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS) {\n+                if (nBlockSigOps > MAX_BLOCK_SIGOPS - 2) {\n+                    break;\n+                }\n+                continue;\n+            }\n \n+            CAmount nTxFees = iter->GetFee();\n             // Added\n             pblock->vtx.push_back(tx);\n             pblocktemplate->vTxFees.push_back(nTxFees);\n@@ -311,31 +243,37 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n \n             if (fPrintPriority)\n             {\n+                double dPriority = iter->GetPriority(nHeight);\n+                CAmount dummy;\n+                mempool.ApplyDeltas(tx.GetHash(), dPriority, dummy);\n                 LogPrintf(\"priority %.1f fee %s txid %s\\n\",\n-                    dPriority, feeRate.ToString(), tx.GetHash().ToString());\n+                          dPriority , CFeeRate(iter->GetModifiedFee(), nTxSize).ToString(), tx.GetHash().ToString());\n             }\n \n+            inBlock.insert(iter);\n+\n             // Add transactions that depend on this one to the priority queue\n-            if (mapDependers.count(hash))\n+            BOOST_FOREACH(CTxMemPool::txiter child, mempool.GetMemPoolChildren(iter))\n             {\n-                BOOST_FOREACH(COrphan* porphan, mapDependers[hash])\n-                {\n-                    if (!porphan->setDependsOn.empty())\n-                    {\n-                        porphan->setDependsOn.erase(hash);\n-                        if (porphan->setDependsOn.empty())\n-                        {\n-                            vecPriority.push_back(TxPriority(porphan->dPriority, porphan->feeRate, porphan->ptx));\n-                            std::push_heap(vecPriority.begin(), vecPriority.end(), comparer);\n-                        }\n+                if (fPriorityBlock) {\n+                    waitPriIter wpiter = waitPriMap.find(child);\n+                    if (wpiter != waitPriMap.end()) {\n+                        vecPriority.push_back(TxCoinAgePriority(wpiter->second,child));\n+                        std::push_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n+                        waitPriMap.erase(wpiter);\n+                    }\n+                }\n+                else {\n+                    if (waitSet.count(child)) {\n+                        clearedTxs.push(child);\n+                        waitSet.erase(child);\n                     }\n                 }\n             }\n         }\n-\n         nLastBlockTx = nBlockTx;\n         nLastBlockSize = nBlockSize;\n-        LogPrintf(\"CreateNewBlock(): total size %u\\n\", nBlockSize);\n+        LogPrintf(\"CreateNewBlock(): total size %u txs: %u fees: %ld sigops %d\\n\", nBlockSize, nBlockTx, nFees, nBlockSigOps);\n \n         // Compute final coinbase transaction.\n         txNew.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n@@ -351,8 +289,9 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n \n         CValidationState state;\n-        if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false))\n-            throw std::runtime_error(\"CreateNewBlock(): TestBlockValidity failed\");\n+        if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {\n+            throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, FormatStateMessage(state)));\n+        }\n     }\n \n     return pblocktemplate.release();"
      },
      {
        "sha": "19ddb5b79c5e2380d7856a669a18aad40df49250",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 24,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/553cad94e29c33872b60d97b8574ed2773355f0b/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/553cad94e29c33872b60d97b8574ed2773355f0b/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=553cad94e29c33872b60d97b8574ed2773355f0b",
        "patch": "@@ -120,7 +120,22 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         tx.vout[0].nValue -= 1000000;\n         hash = tx.GetHash();\n         bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n-        mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n+        // If we don't set the # of sig ops in the CTxMemPoolEntry, template creation fails\n+        mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n+        tx.vin[0].prevout.hash = hash;\n+    }\n+    BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n+    mempool.clear();\n+\n+    tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n+    tx.vout[0].nValue = 5000000000LL;\n+    for (unsigned int i = 0; i < 1001; ++i)\n+    {\n+        tx.vout[0].nValue -= 1000000;\n+        hash = tx.GetHash();\n+        bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n+        // If we do set the # of sig ops in the CTxMemPoolEntry, template creation passes\n+        mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOps(20).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n@@ -141,79 +156,76 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         tx.vout[0].nValue -= 10000000;\n         hash = tx.GetHash();\n         bool spendsCoinbase = (i == 0) ? true : false; // only first tx spends coinbase\n-        mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n+        mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n-    // orphan in mempool\n+    // orphan in mempool, template creation fails\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n-    delete pblocktemplate;\n+    mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).FromTx(tx));\n+    BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n     // child with higher priority than parent\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n     tx.vout[0].nValue = 4900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(100000000LL).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin.resize(2);\n     tx.vin[1].scriptSig = CScript() << OP_1;\n     tx.vin[1].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[1].prevout.n = 0;\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(400000000LL).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n-    // coinbase in mempool\n+    // coinbase in mempool, template creation fails\n     tx.vin.resize(1);\n     tx.vin[0].prevout.SetNull();\n     tx.vin[0].scriptSig = CScript() << OP_0 << OP_1;\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n-    delete pblocktemplate;\n+    // give it a fee so it'll get mined\n+    mempool.addUnchecked(hash, entry.Fee(100000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n+    BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n-    // invalid (pre-p2sh) txn in mempool\n+    // invalid (pre-p2sh) txn in mempool, template creation fails\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[0].prevout.n = 0;\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vout[0].nValue = 4900000000LL;\n     script = CScript() << OP_0;\n     tx.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(script));\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(10000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin[0].scriptSig = CScript() << std::vector<unsigned char>(script.begin(), script.end());\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n-    delete pblocktemplate;\n+    mempool.addUnchecked(hash, entry.Fee(1000000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n+    BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n-    // double spend txn pair in mempool\n+    // double spend txn pair in mempool, template creation fails\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vout[0].nValue = 4900000000LL;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n-    delete pblocktemplate;\n+    mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    BOOST_CHECK_THROW(CreateNewBlock(chainparams, scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n     // subsidy changing\n@@ -237,7 +249,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     tx.nLockTime = chainActive.Tip()->nHeight+1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));\n \n     // time locked\n@@ -251,7 +263,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.vout[0].scriptPubKey = CScript() << OP_1;\n     tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n     hash = tx2.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).SpendsCoinbase(true).FromTx(tx2));\n+    mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx2));\n     BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));"
      }
    ]
  }
]