practicalswift,2020-06-17 20:29:26,"Concept ACK: explicit is better than implicit.\n\nWarm welcome as a contributor @renepickhardt - I'm a big fan of your Lightning work etc :)  Looking forward to reading Mastering the Lightning Network once it is released!\n\nFWIW, we are already assuming that `sizeof(uint16_t) == sizeof(unsigned short)` implicitly in multiple places like here â€¦\n\nhttps://github.com/bitcoin/bitcoin/blob/35ed",https://github.com/bitcoin/bitcoin/pull/19314#issuecomment-645607341,645607341,
renepickhardt,2020-06-17 20:29:45,"btw running `git grep ""unsigned short""` results in: \n```\nsrc/secp256k1/src/tests.c:            unsigned short sh;\n```\nI could make another commit to this branch where I also changed that but I am not sure if the bitcoin repo is the place to patch libsecp256k1 or if that should be done in https://github.com/bitcoin-core/secp256k1\n\nat least the remote file https://github.com/bitcoin-core",https://github.com/bitcoin/bitcoin/pull/19314#issuecomment-645607509,645607509,
DrahtBot,2020-06-17 23:11:45,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19415 (net: Make DNS lookup mockable, add fuzzing harness by practicalswift)\n* #19203 (net: Add regression fuzz harness ",https://github.com/bitcoin/bitcoin/pull/19314#issuecomment-645673045,645673045,
practicalswift,2020-06-21 21:10:54,@renepickhardt Would you mind squashing? I think this one should be ready for final review after squash :),https://github.com/bitcoin/bitcoin/pull/19314#issuecomment-647182087,647182087,
renepickhardt,2020-06-22 10:15:39,"Ok so I have squashed the two commits and rebased to current master to make merging easier (: \n\nif there is anything more to do let me know @practicalswift ",https://github.com/bitcoin/bitcoin/pull/19314#issuecomment-647424022,647424022,
sipsorcery,2020-06-23 20:15:53,"ACK 1cabbddbca615b26aa4510c75f459c28d6fe0afd.\n\nNice to replace a C header with a C++ header as well.",https://github.com/bitcoin/bitcoin/pull/19314#issuecomment-648394173,648394173,
practicalswift,2020-06-23 20:49:27,"ACK 1cabbddbca615b26aa4510c75f459c28d6fe0afd -- patch looks correct :)\n\nIf anyone wants to follow up by checking potentially unintended/unwarranted uses of `long` this command might be helpful to find candidates :)\n\n```\n$ git grep -E '[^a-zA-Z_.""]long[^a-zA-Z_.""]' -- ""*.cpp"" ""*.h"" "":(exclude)src/univalue/"" "":(exclude)src/qt/"" "":(exclude)src/test/"" "":(exclude)src/crc32c/"" "":(exclude)src/c",https://github.com/bitcoin/bitcoin/pull/19314#issuecomment-648410385,648410385,
luke-jr,2020-06-24 01:34:20,"Note the (mentioned in comments only, not an issue for this commit) libsecp256k1 `unsigned short` does in fact need to be an unsigned short...",https://github.com/bitcoin/bitcoin/pull/19314#issuecomment-648529959,648529959,
laanwj,2020-07-09 14:36:00,"ACK 1cabbddbca615b26aa4510c75f459c28d6fe0afd\nAfter this, the only mention of `unsigned short` left is in the secp256k1 tests, which should not be changed here\n\n> In addition to @luke-jr's comment, could the type of the port parameter in the Socks5() function be changed from int to uint16_t?\n\nI understand why @renepickhardt  didn't do this. Right now, this is a pure refactor, only changin",https://github.com/bitcoin/bitcoin/pull/19314#issuecomment-656165688,656165688,
adamjonas,2020-06-18 15:39:26,It looks like the linter is calling out the trailing whitespace here.,https://github.com/bitcoin/bitcoin/pull/19314#discussion_r442320856,442320856,src/qt/optionsmodel.h
renepickhardt,2020-06-18 17:57:57,fixed,https://github.com/bitcoin/bitcoin/pull/19314#discussion_r442405012,442405012,src/qt/optionsmodel.h
luke-jr,2020-06-24 01:35:51,This is okay only because `strprintf` has some type magic.,https://github.com/bitcoin/bitcoin/pull/19314#discussion_r444595808,444595808,src/addrdb.cpp
luke-jr,2020-06-24 01:36:25,Can we just drop the cast entirely? Not sure I see the point...,https://github.com/bitcoin/bitcoin/pull/19314#discussion_r444595936,444595936,src/net.cpp
luke-jr,2020-06-24 01:38:49,Why not change the type of `port`?,https://github.com/bitcoin/bitcoin/pull/19314#discussion_r444596515,444596515,src/netbase.cpp
practicalswift,2020-06-24 05:40:50,"The point is to make a potentially sign-changing narrowing conversion explicit.\n\n`GetArg` returns `int64_t` so it makes sense to make the implicit conversion to `uint16_t` explicit using a cast.",https://github.com/bitcoin/bitcoin/pull/19314#discussion_r444656001,444656001,src/net.cpp
laanwj,2020-07-09 14:31:21,"Yes, this isn't a problem, `strprintf` is type safe. There is never a need for size specifiers.",https://github.com/bitcoin/bitcoin/pull/19314#discussion_r452261880,452261880,src/addrdb.cpp
