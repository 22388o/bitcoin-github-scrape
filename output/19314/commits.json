[
  {
    "sha": "1cabbddbca615b26aa4510c75f459c28d6fe0afd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2FiYmRkYmNhNjE1YjI2YWE0NTEwYzc1ZjQ1OWMyOGQ2ZmUwYWZk",
    "commit": {
      "author": {
        "name": "Aaron Hook",
        "email": "ahook@protonmail.com",
        "date": "2019-12-29T21:04:02Z"
      },
      "committer": {
        "name": "Rene Pickhardt",
        "email": "r.pickhardt@gmail.com",
        "date": "2020-06-22T10:12:22Z"
      },
      "message": "refactor: Use uint16_t instead of unsigned short\n\nremoved trailing whitespace to make linter happy",
      "tree": {
        "sha": "04459232e1ee90d4e5a2ba8f625c903177beeff3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04459232e1ee90d4e5a2ba8f625c903177beeff3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cabbddbca615b26aa4510c75f459c28d6fe0afd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cabbddbca615b26aa4510c75f459c28d6fe0afd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1cabbddbca615b26aa4510c75f459c28d6fe0afd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cabbddbca615b26aa4510c75f459c28d6fe0afd/comments",
    "author": null,
    "committer": {
      "login": "renepickhardt",
      "id": 1926816,
      "node_id": "MDQ6VXNlcjE5MjY4MTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1926816?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/renepickhardt",
      "html_url": "https://github.com/renepickhardt",
      "followers_url": "https://api.github.com/users/renepickhardt/followers",
      "following_url": "https://api.github.com/users/renepickhardt/following{/other_user}",
      "gists_url": "https://api.github.com/users/renepickhardt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/renepickhardt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/renepickhardt/subscriptions",
      "organizations_url": "https://api.github.com/users/renepickhardt/orgs",
      "repos_url": "https://api.github.com/users/renepickhardt/repos",
      "events_url": "https://api.github.com/users/renepickhardt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/renepickhardt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ef15e8a86038225afef2487ca23abc10ca5dffa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ef15e8a86038225afef2487ca23abc10ca5dffa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ef15e8a86038225afef2487ca23abc10ca5dffa"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 28,
      "deletions": 22
    },
    "files": [
      {
        "sha": "f3e8a19de22e741ea50fc5743a6e7fa81957e6ab",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cabbddbca615b26aa4510c75f459c28d6fe0afd/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cabbddbca615b26aa4510c75f459c28d6fe0afd/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=1cabbddbca615b26aa4510c75f459c28d6fe0afd",
        "patch": "@@ -8,6 +8,7 @@\n #include <addrman.h>\n #include <chainparams.h>\n #include <clientversion.h>\n+#include <cstdint>\n #include <hash.h>\n #include <random.h>\n #include <streams.h>\n@@ -36,7 +37,7 @@ template <typename Data>\n bool SerializeFileDB(const std::string& prefix, const fs::path& path, const Data& data)\n {\n     // Generate random temporary filename\n-    unsigned short randv = 0;\n+    uint16_t randv = 0;\n     GetRandBytes((unsigned char*)&randv, sizeof(randv));\n     std::string tmpfn = strprintf(\"%s.%04x\", prefix, randv);\n "
      },
      {
        "sha": "afde8a894b4167d0c9858bfceab2f01119de2f6d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cabbddbca615b26aa4510c75f459c28d6fe0afd/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cabbddbca615b26aa4510c75f459c28d6fe0afd/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1cabbddbca615b26aa4510c75f459c28d6fe0afd",
        "patch": "@@ -42,6 +42,7 @@\n static_assert(MINIUPNPC_API_VERSION >= 10, \"miniUPnPc API version >= 10 assumed\");\n #endif\n \n+#include <cstdint>\n #include <unordered_map>\n \n #include <math.h>\n@@ -110,9 +111,9 @@ void CConnman::AddOneShot(const std::string& strDest)\n     vOneShots.push_back(strDest);\n }\n \n-unsigned short GetListenPort()\n+uint16_t GetListenPort()\n {\n-    return (unsigned short)(gArgs.GetArg(\"-port\", Params().GetDefaultPort()));\n+    return (uint16_t)(gArgs.GetArg(\"-port\", Params().GetDefaultPort()));\n }\n \n // find 'best' local address for a particular peer"
      },
      {
        "sha": "8e42dcf6f3b13cc581073fd3e7b1749ef4b625e8",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cabbddbca615b26aa4510c75f459c28d6fe0afd/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cabbddbca615b26aa4510c75f459c28d6fe0afd/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=1cabbddbca615b26aa4510c75f459c28d6fe0afd",
        "patch": "@@ -25,8 +25,8 @@\n #include <uint256.h>\n \n #include <atomic>\n+#include <cstdint>\n #include <deque>\n-#include <stdint.h>\n #include <thread>\n #include <memory>\n #include <condition_variable>\n@@ -482,7 +482,7 @@ void Discover();\n void StartMapPort();\n void InterruptMapPort();\n void StopMapPort();\n-unsigned short GetListenPort();\n+uint16_t GetListenPort();\n \n struct CombinerAll\n {"
      },
      {
        "sha": "6744391616ea037d24f4f81b7d8e4d861b9b2bbb",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cabbddbca615b26aa4510c75f459c28d6fe0afd/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cabbddbca615b26aa4510c75f459c28d6fe0afd/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=1cabbddbca615b26aa4510c75f459c28d6fe0afd",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <cstdint>\n #include <netaddress.h>\n #include <hash.h>\n #include <util/strencodings.h>\n@@ -627,15 +628,15 @@ CService::CService() : port(0)\n {\n }\n \n-CService::CService(const CNetAddr& cip, unsigned short portIn) : CNetAddr(cip), port(portIn)\n+CService::CService(const CNetAddr& cip, uint16_t portIn) : CNetAddr(cip), port(portIn)\n {\n }\n \n-CService::CService(const struct in_addr& ipv4Addr, unsigned short portIn) : CNetAddr(ipv4Addr), port(portIn)\n+CService::CService(const struct in_addr& ipv4Addr, uint16_t portIn) : CNetAddr(ipv4Addr), port(portIn)\n {\n }\n \n-CService::CService(const struct in6_addr& ipv6Addr, unsigned short portIn) : CNetAddr(ipv6Addr), port(portIn)\n+CService::CService(const struct in6_addr& ipv6Addr, uint16_t portIn) : CNetAddr(ipv6Addr), port(portIn)\n {\n }\n \n@@ -663,7 +664,7 @@ bool CService::SetSockAddr(const struct sockaddr *paddr)\n     }\n }\n \n-unsigned short CService::GetPort() const\n+uint16_t CService::GetPort() const\n {\n     return port;\n }"
      },
      {
        "sha": "d7ab537cf68a2c90464bd83d714b926ff907ea5d",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cabbddbca615b26aa4510c75f459c28d6fe0afd/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cabbddbca615b26aa4510c75f459c28d6fe0afd/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=1cabbddbca615b26aa4510c75f459c28d6fe0afd",
        "patch": "@@ -12,7 +12,7 @@\n #include <compat.h>\n #include <serialize.h>\n \n-#include <stdint.h>\n+#include <cstdint>\n #include <string>\n #include <vector>\n \n@@ -142,10 +142,10 @@ class CService : public CNetAddr\n \n     public:\n         CService();\n-        CService(const CNetAddr& ip, unsigned short port);\n-        CService(const struct in_addr& ipv4Addr, unsigned short port);\n+        CService(const CNetAddr& ip, uint16_t port);\n+        CService(const struct in_addr& ipv4Addr, uint16_t port);\n         explicit CService(const struct sockaddr_in& addr);\n-        unsigned short GetPort() const;\n+        uint16_t GetPort() const;\n         bool GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const;\n         bool SetSockAddr(const struct sockaddr* paddr);\n         friend bool operator==(const CService& a, const CService& b);\n@@ -156,7 +156,7 @@ class CService : public CNetAddr\n         std::string ToStringPort() const;\n         std::string ToStringIPPort() const;\n \n-        CService(const struct in6_addr& ipv6Addr, unsigned short port);\n+        CService(const struct in6_addr& ipv6Addr, uint16_t port);\n         explicit CService(const struct sockaddr_in6& addr);\n \n         SERIALIZE_METHODS(CService, obj) { READWRITE(obj.ip, Using<BigEndianFormatter<2>>(obj.port)); }"
      },
      {
        "sha": "3a3b5f3e66825336f990657603e8476f55e7f52f",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cabbddbca615b26aa4510c75f459c28d6fe0afd/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cabbddbca615b26aa4510c75f459c28d6fe0afd/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=1cabbddbca615b26aa4510c75f459c28d6fe0afd",
        "patch": "@@ -12,6 +12,7 @@\n #include <util/system.h>\n \n #include <atomic>\n+#include <cstdint>\n \n #ifndef WIN32\n #include <fcntl.h>\n@@ -798,11 +799,11 @@ bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int\n         ProxyCredentials random_auth;\n         static std::atomic_int counter(0);\n         random_auth.username = random_auth.password = strprintf(\"%i\", counter++);\n-        if (!Socks5(strDest, (unsigned short)port, &random_auth, hSocket)) {\n+        if (!Socks5(strDest, (uint16_t)port, &random_auth, hSocket)) {\n             return false;\n         }\n     } else {\n-        if (!Socks5(strDest, (unsigned short)port, 0, hSocket)) {\n+        if (!Socks5(strDest, (uint16_t)port, 0, hSocket)) {\n             return false;\n         }\n     }"
      },
      {
        "sha": "14fdf9046e6ee492fa849214d26842e88ddb04a0",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cabbddbca615b26aa4510c75f459c28d6fe0afd/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cabbddbca615b26aa4510c75f459c28d6fe0afd/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=1cabbddbca615b26aa4510c75f459c28d6fe0afd",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_QT_OPTIONSMODEL_H\n \n #include <amount.h>\n+#include <cstdint>\n #include <qt/guiconstants.h>\n \n #include <QAbstractListModel>\n@@ -15,7 +16,7 @@ class Node;\n }\n \n extern const char *DEFAULT_GUI_PROXY_HOST;\n-static constexpr unsigned short DEFAULT_GUI_PROXY_PORT = 9050;\n+static constexpr uint16_t DEFAULT_GUI_PROXY_PORT = 9050;\n \n /**\n  * Convert configured prune target MiB to displayed GB. Round up to avoid underestimating max disk usage."
      },
      {
        "sha": "7a94e704b2d29b5c263d767db92313bb90f15e6f",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cabbddbca615b26aa4510c75f459c28d6fe0afd/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cabbddbca615b26aa4510c75f459c28d6fe0afd/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=1cabbddbca615b26aa4510c75f459c28d6fe0afd",
        "patch": "@@ -9,13 +9,13 @@\n #include <compat/endian.h>\n \n #include <algorithm>\n+#include <cstdint>\n #include <cstring>\n #include <ios>\n #include <limits>\n #include <map>\n #include <memory>\n #include <set>\n-#include <stdint.h>\n #include <string>\n #include <string.h>\n #include <utility>\n@@ -272,7 +272,7 @@ template<typename Stream> inline void Unserialize(Stream& s, bool& a) { char f=s\n inline unsigned int GetSizeOfCompactSize(uint64_t nSize)\n {\n     if (nSize < 253)             return sizeof(unsigned char);\n-    else if (nSize <= std::numeric_limits<unsigned short>::max()) return sizeof(unsigned char) + sizeof(unsigned short);\n+    else if (nSize <= std::numeric_limits<uint16_t>::max()) return sizeof(unsigned char) + sizeof(uint16_t);\n     else if (nSize <= std::numeric_limits<unsigned int>::max())  return sizeof(unsigned char) + sizeof(unsigned int);\n     else                         return sizeof(unsigned char) + sizeof(uint64_t);\n }\n@@ -286,7 +286,7 @@ void WriteCompactSize(Stream& os, uint64_t nSize)\n     {\n         ser_writedata8(os, nSize);\n     }\n-    else if (nSize <= std::numeric_limits<unsigned short>::max())\n+    else if (nSize <= std::numeric_limits<uint16_t>::max())\n     {\n         ser_writedata8(os, 253);\n         ser_writedata16(os, nSize);"
      },
      {
        "sha": "ab42be21bd80b1f951c25ffc965ad3e08c587e6a",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cabbddbca615b26aa4510c75f459c28d6fe0afd/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cabbddbca615b26aa4510c75f459c28d6fe0afd/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=1cabbddbca615b26aa4510c75f459c28d6fe0afd",
        "patch": "@@ -6,6 +6,7 @@\n #include <addrman.h>\n #include <chainparams.h>\n #include <clientversion.h>\n+#include <cstdint>\n #include <net.h>\n #include <netbase.h>\n #include <serialize.h>\n@@ -83,10 +84,10 @@ BOOST_FIXTURE_TEST_SUITE(net_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(cnode_listen_port)\n {\n     // test default\n-    unsigned short port = GetListenPort();\n+    uint16_t port = GetListenPort();\n     BOOST_CHECK(port == Params().GetDefaultPort());\n     // test set port\n-    unsigned short altPort = 12345;\n+    uint16_t altPort = 12345;\n     BOOST_CHECK(gArgs.SoftSetArg(\"-port\", ToString(altPort)));\n     port = GetListenPort();\n     BOOST_CHECK(port == altPort);"
      }
    ]
  }
]