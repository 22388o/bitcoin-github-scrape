[
  {
    "sha": "8ee08120de0b6765d8b9081e06f743e15653f8e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZWUwODEyMGRlMGI2NzY1ZDhiOTA4MWUwNmY3NDNlMTU2NTNmOGU0",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-01-09T22:17:48Z"
      },
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2018-03-07T13:31:30Z"
      },
      "message": "Add address filtering to listreceivedbyaddress",
      "tree": {
        "sha": "048c76498c89192e350b3f71fd2b645a0d5c173d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/048c76498c89192e350b3f71fd2b645a0d5c173d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ee08120de0b6765d8b9081e06f743e15653f8e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ee08120de0b6765d8b9081e06f743e15653f8e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ee08120de0b6765d8b9081e06f743e15653f8e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ee08120de0b6765d8b9081e06f743e15653f8e4/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f13d756cdd9445d1478a70c5387df2a444045f6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13d756cdd9445d1478a70c5387df2a444045f6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f13d756cdd9445d1478a70c5387df2a444045f6e"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 39,
      "deletions": 9
    },
    "files": [
      {
        "sha": "0eeb3f98b34acc65d6adeba7c64458894a1e94ba",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ee08120de0b6765d8b9081e06f743e15653f8e4/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ee08120de0b6765d8b9081e06f743e15653f8e4/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=8ee08120de0b6765d8b9081e06f743e15653f8e4",
        "patch": "@@ -43,6 +43,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listreceivedbyaddress\", 0, \"minconf\" },\n     { \"listreceivedbyaddress\", 1, \"include_empty\" },\n     { \"listreceivedbyaddress\", 2, \"include_watchonly\" },\n+    { \"listreceivedbyaddress\", 3, \"address_filter\" },\n     { \"listreceivedbyaccount\", 0, \"minconf\" },\n     { \"listreceivedbyaccount\", 1, \"include_empty\" },\n     { \"listreceivedbyaccount\", 2, \"include_watchonly\" },"
      },
      {
        "sha": "dfa8546076be5e3f2d6b1f4b9b62c15e143d9364",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 9,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ee08120de0b6765d8b9081e06f743e15653f8e4/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ee08120de0b6765d8b9081e06f743e15653f8e4/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8ee08120de0b6765d8b9081e06f743e15653f8e4",
        "patch": "@@ -1403,6 +1403,16 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n         if(params[2].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n+    bool has_filtered_address = false;\n+    CTxDestination filtered_address = CNoDestination();\n+    if (!fByAccounts && params.size() > 3) {\n+        if (!IsValidDestinationString(params[3].get_str())) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"address_filter parameter was invalid\");\n+        }\n+        filtered_address = DecodeDestination(params[3].get_str());\n+        has_filtered_address = true;\n+    }\n+\n     // Tally\n     std::map<CTxDestination, tallyitem> mapTally;\n     for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n@@ -1421,6 +1431,10 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n             if (!ExtractDestination(txout.scriptPubKey, address))\n                 continue;\n \n+            if (has_filtered_address && !(filtered_address == address)) {\n+                continue;\n+            }\n+\n             isminefilter mine = IsMine(*pwallet, address);\n             if(!(mine & filter))\n                 continue;\n@@ -1437,10 +1451,24 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n     // Reply\n     UniValue ret(UniValue::VARR);\n     std::map<std::string, tallyitem> mapAccountTally;\n-    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n-        const CTxDestination& dest = item.first;\n-        const std::string& strAccount = item.second.name;\n-        std::map<CTxDestination, tallyitem>::iterator it = mapTally.find(dest);\n+\n+    // Create mapAddressBook iterator\n+    // If we aren't filtering, go from begin() to end()\n+    auto start = pwallet->mapAddressBook.begin();\n+    auto end = pwallet->mapAddressBook.end();\n+    // If we are filtering, find() the applicable entry\n+    if (has_filtered_address) {\n+        start = pwallet->mapAddressBook.find(filtered_address);\n+        if (start != end) {\n+            end = std::next(start);\n+        }\n+    }\n+\n+    for (auto item_it = start; item_it != end; ++item_it)\n+    {\n+        const CTxDestination& address = item_it->first;\n+        const std::string& strAccount = item_it->second.name;\n+        auto it = mapTally.find(address);\n         if (it == mapTally.end() && !fIncludeEmpty)\n             continue;\n \n@@ -1466,7 +1494,7 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n             UniValue obj(UniValue::VOBJ);\n             if(fIsWatchonly)\n                 obj.pushKV(\"involvesWatchonly\", true);\n-            obj.pushKV(\"address\",       EncodeDestination(dest));\n+            obj.pushKV(\"address\",       EncodeDestination(address));\n             obj.pushKV(\"account\",       strAccount);\n             obj.pushKV(\"amount\",        ValueFromAmount(nAmount));\n             obj.pushKV(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf));\n@@ -1511,15 +1539,15 @@ UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 3)\n+    if (request.fHelp || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"listreceivedbyaddress ( minconf include_empty include_watchonly)\\n\"\n+            \"listreceivedbyaddress ( minconf include_empty include_watchonly address_filter )\\n\"\n             \"\\nList balances by receiving address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n             \"2. include_empty     (bool, optional, default=false) Whether to include addresses that haven't received any payments.\\n\"\n             \"3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').\\n\"\n-\n+            \"4. address_filter    (string, optional) If present, only return information on this address.\\n\"\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n@@ -1541,6 +1569,7 @@ UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n             + HelpExampleCli(\"listreceivedbyaddress\", \"\")\n             + HelpExampleCli(\"listreceivedbyaddress\", \"6 true\")\n             + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true\")\n+            + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true, \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\"\")\n         );\n \n     ObserveSafeMode();\n@@ -3837,7 +3866,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listaddressgroupings\",             &listaddressgroupings,          {} },\n     { \"wallet\",             \"listlockunspent\",                  &listlockunspent,               {} },\n     { \"wallet\",             \"listreceivedbyaccount\",            &listreceivedbyaccount,         {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\",\"address_filter\"} },\n     { \"wallet\",             \"listsinceblock\",                   &listsinceblock,                {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n     { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"account\",\"count\",\"skip\",\"include_watchonly\"} },\n     { \"wallet\",             \"listunspent\",                      &listunspent,                   {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },"
      }
    ]
  },
  {
    "sha": "f087613719026bcd5cba95ec64c19361fcc71ecf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDg3NjEzNzE5MDI2YmNkNWNiYTk1ZWM2NGMxOTM2MWZjYzcxZWNm",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-01-09T22:18:17Z"
      },
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2018-03-07T13:31:31Z"
      },
      "message": "Add tests of listreceivedbyaddress address filtering",
      "tree": {
        "sha": "f4f12b5a3faa7f2f01626da81c29f28e972eb7ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4f12b5a3faa7f2f01626da81c29f28e972eb7ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f087613719026bcd5cba95ec64c19361fcc71ecf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f087613719026bcd5cba95ec64c19361fcc71ecf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f087613719026bcd5cba95ec64c19361fcc71ecf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f087613719026bcd5cba95ec64c19361fcc71ecf/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ee08120de0b6765d8b9081e06f743e15653f8e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ee08120de0b6765d8b9081e06f743e15653f8e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ee08120de0b6765d8b9081e06f743e15653f8e4"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 37,
      "deletions": 3
    },
    "files": [
      {
        "sha": "01c9899c7157b6b75587f8948a35c567c3b8f353",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 37,
        "deletions": 3,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f087613719026bcd5cba95ec64c19361fcc71ecf/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f087613719026bcd5cba95ec64c19361fcc71ecf/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=f087613719026bcd5cba95ec64c19361fcc71ecf",
        "patch": "@@ -45,10 +45,44 @@ def run_test(self):\n         assert_array_result(self.nodes[1].listreceivedbyaddress(11), {\"address\": addr}, {}, True)\n \n         # Empty Tx\n-        addr = self.nodes[1].getnewaddress()\n+        empty_addr = self.nodes[1].getnewaddress()\n         assert_array_result(self.nodes[1].listreceivedbyaddress(0, True),\n-                            {\"address\": addr},\n-                            {\"address\": addr, \"account\": \"\", \"amount\": 0, \"confirmations\": 0, \"txids\": []})\n+                            {\"address\": empty_addr},\n+                            {\"address\": empty_addr, \"account\": \"\", \"amount\": 0, \"confirmations\": 0, \"txids\": []})\n+\n+        #Test Address filtering\n+        #Only on addr\n+        expected = {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]}\n+        res = self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True, address_filter=addr)\n+        assert_array_result(res, {\"address\":addr}, expected)\n+        assert_equal(len(res), 1)\n+        #Error on invalid address\n+        assert_raises_rpc_error(-4, \"address_filter parameter was invalid\", self.nodes[1].listreceivedbyaddress, minconf=0, include_empty=True, include_watchonly=True, address_filter=\"bamboozling\")\n+        #Another address receive money\n+        res = self.nodes[1].listreceivedbyaddress(0, True, True)\n+        assert_equal(len(res), 2) #Right now 2 entries\n+        other_addr = self.nodes[1].getnewaddress()\n+        txid2 = self.nodes[0].sendtoaddress(other_addr, 0.1)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+        #Same test as above should still pass\n+        expected = {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":11, \"txids\":[txid,]}\n+        res = self.nodes[1].listreceivedbyaddress(0, True, True, addr)\n+        assert_array_result(res, {\"address\":addr}, expected)\n+        assert_equal(len(res), 1)\n+        #Same test as above but with other_addr should still pass\n+        expected = {\"address\":other_addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":1, \"txids\":[txid2,]}\n+        res = self.nodes[1].listreceivedbyaddress(0, True, True, other_addr)\n+        assert_array_result(res, {\"address\":other_addr}, expected)\n+        assert_equal(len(res), 1)\n+        #Should be two entries though without filter\n+        res = self.nodes[1].listreceivedbyaddress(0, True, True)\n+        assert_equal(len(res), 3) #Became 3 entries\n+\n+        #Not on random addr\n+        other_addr = self.nodes[0].getnewaddress() # note on node[0]! just a random addr\n+        res = self.nodes[1].listreceivedbyaddress(0, True, True, other_addr)\n+        assert_equal(len(res), 0)\n \n         self.log.info(\"getreceivedbyaddress Test\")\n "
      }
    ]
  }
]