[
  {
    "sha": "b8580cacc70764ba5a48e3defb864d75e6c28626",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODU4MGNhY2M3MDc2NGJhNWE0OGUzZGVmYjg2NGQ3NWU2YzI4NjI2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-05T19:00:30Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-04-23T16:54:03Z"
      },
      "message": "[net processing] Move net processing consts to net_processing.cpp",
      "tree": {
        "sha": "82b9c1d89a6f4ff2366fc67e6fc9abdb133b24f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82b9c1d89a6f4ff2366fc67e6fc9abdb133b24f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8580cacc70764ba5a48e3defb864d75e6c28626",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8580cacc70764ba5a48e3defb864d75e6c28626",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8580cacc70764ba5a48e3defb864d75e6c28626",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8580cacc70764ba5a48e3defb864d75e6c28626/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47b94a337e1aad0c347fdfecba999b963ab51006",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47b94a337e1aad0c347fdfecba999b963ab51006",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47b94a337e1aad0c347fdfecba999b963ab51006"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 33,
      "deletions": 35
    },
    "files": [
      {
        "sha": "0d79efbba79c0923bdf7a83192c144cc27c82072",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8580cacc70764ba5a48e3defb864d75e6c28626/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8580cacc70764ba5a48e3defb864d75e6c28626/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=b8580cacc70764ba5a48e3defb864d75e6c28626",
        "patch": "@@ -45,16 +45,10 @@ static const bool DEFAULT_WHITELISTRELAY = true;\n /** Default for -whitelistforcerelay. */\n static const bool DEFAULT_WHITELISTFORCERELAY = false;\n \n-/** Time between pings automatically sent out for latency probing and keepalive (in seconds). */\n-static const int PING_INTERVAL = 2 * 60;\n /** Time after which to disconnect, after waiting for a ping response (or inactivity). */\n static const int TIMEOUT_INTERVAL = 20 * 60;\n /** Run the feeler connection loop once every 2 minutes or 120 seconds. **/\n static const int FEELER_INTERVAL = 120;\n-/** The maximum number of entries in an 'inv' protocol message */\n-static const unsigned int MAX_INV_SZ = 50000;\n-/** The maximum number of entries in a locator */\n-static const unsigned int MAX_LOCATOR_SZ = 101;\n /** The maximum number of new addresses to accumulate before announcing. */\n static const unsigned int MAX_ADDR_TO_SEND = 1000;\n /** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */"
      },
      {
        "sha": "f3a610b160038f2853bfac68a76f12363e0b9bb9",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8580cacc70764ba5a48e3defb864d75e6c28626/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8580cacc70764ba5a48e3defb864d75e6c28626/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b8580cacc70764ba5a48e3defb864d75e6c28626",
        "patch": "@@ -64,6 +64,12 @@ static constexpr int STALE_RELAY_AGE_LIMIT = 30 * 24 * 60 * 60;\n /// Age after which a block is considered historical for purposes of rate\n /// limiting block relay. Set to one week, denominated in seconds.\n static constexpr int HISTORICAL_BLOCK_AGE = 7 * 24 * 60 * 60;\n+/** Time between pings automatically sent out for latency probing and keepalive (in seconds). */\n+static const int PING_INTERVAL = 2 * 60;\n+/** The maximum number of entries in a locator */\n+static const unsigned int MAX_LOCATOR_SZ = 101;\n+/** The maximum number of entries in an 'inv' protocol message */\n+static const unsigned int MAX_INV_SZ = 50000;\n /** Maximum number of in-flight transactions from a peer */\n static constexpr int32_t MAX_PEER_TX_IN_FLIGHT = 100;\n /** Maximum number of announced transactions from a peer */\n@@ -80,6 +86,33 @@ static_assert(INBOUND_PEER_TX_DELAY >= MAX_GETDATA_RANDOM_DELAY,\n \"To preserve security, MAX_GETDATA_RANDOM_DELAY should not exceed INBOUND_PEER_DELAY\");\n /** Limit to avoid sending big packets. Not used in processing incoming GETDATA for compatibility */\n static const unsigned int MAX_GETDATA_SZ = 1000;\n+/** Number of blocks that can be requested at any given time from a single peer. */\n+static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 16;\n+/** Timeout in seconds during which a peer must stall block download progress before being disconnected. */\n+static const unsigned int BLOCK_STALLING_TIMEOUT = 2;\n+/** Number of headers sent in one getheaders result. We rely on the assumption that if a peer sends\n+ *  less than this number, we reached its tip. Changing this value is a protocol upgrade. */\n+static const unsigned int MAX_HEADERS_RESULTS = 2000;\n+/** Maximum depth of blocks we're willing to serve as compact blocks to peers\n+ *  when requested. For older blocks, a regular BLOCK response will be sent. */\n+static const int MAX_CMPCTBLOCK_DEPTH = 5;\n+/** Maximum depth of blocks we're willing to respond to GETBLOCKTXN requests for. */\n+static const int MAX_BLOCKTXN_DEPTH = 10;\n+/** Size of the \"block download window\": how far ahead of our current height do we fetch?\n+ *  Larger windows tolerate larger download speed differences between peer, but increase the potential\n+ *  degree of disordering of blocks on disk (which make reindexing and pruning harder). We'll probably\n+ *  want to make this a per-peer adaptive value at some point. */\n+static const unsigned int BLOCK_DOWNLOAD_WINDOW = 1024;\n+/** Block download timeout base, expressed in millionths of the block interval (i.e. 10 min) */\n+static const int64_t BLOCK_DOWNLOAD_TIMEOUT_BASE = 1000000;\n+/** Additional block download timeout per parallel downloading peer (i.e. 5 min) */\n+static const int64_t BLOCK_DOWNLOAD_TIMEOUT_PER_PEER = 500000;\n+/** Maximum number of headers to announce when relaying blocks with headers message.*/\n+static const unsigned int MAX_BLOCKS_TO_ANNOUNCE = 8;\n+/** Maximum number of unconnecting headers announcements before DoS score */\n+static const int MAX_UNCONNECTING_HEADERS = 10;\n+/** Minimum blocks required to signal NODE_NETWORK_LIMITED */\n+static const unsigned int NODE_NETWORK_LIMITED_MIN_BLOCKS = 288;\n \n \n struct COrphanTx {"
      },
      {
        "sha": "cf0168c2d18a45c9ef95990e08d947cb461506db",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 29,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8580cacc70764ba5a48e3defb864d75e6c28626/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8580cacc70764ba5a48e3defb864d75e6c28626/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=b8580cacc70764ba5a48e3defb864d75e6c28626",
        "patch": "@@ -81,31 +81,10 @@ static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n static const int MAX_SCRIPTCHECK_THREADS = 15;\n /** -par default (number of script-checking threads, 0 = auto) */\n static const int DEFAULT_SCRIPTCHECK_THREADS = 0;\n-/** Number of blocks that can be requested at any given time from a single peer. */\n-static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 16;\n-/** Timeout in seconds during which a peer must stall block download progress before being disconnected. */\n-static const unsigned int BLOCK_STALLING_TIMEOUT = 2;\n-/** Number of headers sent in one getheaders result. We rely on the assumption that if a peer sends\n- *  less than this number, we reached its tip. Changing this value is a protocol upgrade. */\n-static const unsigned int MAX_HEADERS_RESULTS = 2000;\n-/** Maximum depth of blocks we're willing to serve as compact blocks to peers\n- *  when requested. For older blocks, a regular BLOCK response will be sent. */\n-static const int MAX_CMPCTBLOCK_DEPTH = 5;\n-/** Maximum depth of blocks we're willing to respond to GETBLOCKTXN requests for. */\n-static const int MAX_BLOCKTXN_DEPTH = 10;\n-/** Size of the \"block download window\": how far ahead of our current height do we fetch?\n- *  Larger windows tolerate larger download speed differences between peer, but increase the potential\n- *  degree of disordering of blocks on disk (which make reindexing and pruning harder). We'll probably\n- *  want to make this a per-peer adaptive value at some point. */\n-static const unsigned int BLOCK_DOWNLOAD_WINDOW = 1024;\n /** Time to wait (in seconds) between writing blocks/block index to disk. */\n static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;\n /** Time to wait (in seconds) between flushing chainstate to disk. */\n static const unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;\n-/** Block download timeout base, expressed in millionths of the block interval (i.e. 10 min) */\n-static const int64_t BLOCK_DOWNLOAD_TIMEOUT_BASE = 1000000;\n-/** Additional block download timeout per parallel downloading peer (i.e. 5 min) */\n-static const int64_t BLOCK_DOWNLOAD_TIMEOUT_PER_PEER = 500000;\n \n static const int64_t DEFAULT_MAX_TIP_AGE = 24 * 60 * 60;\n /** Maximum age of our tip in seconds for us to be considered current for fee estimation */\n@@ -120,12 +99,6 @@ static const bool DEFAULT_PERSIST_MEMPOOL = true;\n /** Default for using fee filter */\n static const bool DEFAULT_FEEFILTER = true;\n \n-/** Maximum number of headers to announce when relaying blocks with headers message.*/\n-static const unsigned int MAX_BLOCKS_TO_ANNOUNCE = 8;\n-\n-/** Maximum number of unconnecting headers announcements before DoS score */\n-static const int MAX_UNCONNECTING_HEADERS = 10;\n-\n /** Default for -stopatheight */\n static const int DEFAULT_STOPATHEIGHT = 0;\n \n@@ -177,8 +150,6 @@ extern bool fPruneMode;\n extern uint64_t nPruneTarget;\n /** Block files containing a block-height within MIN_BLOCKS_TO_KEEP of ::ChainActive().Tip() will not be pruned. */\n static const unsigned int MIN_BLOCKS_TO_KEEP = 288;\n-/** Minimum blocks required to signal NODE_NETWORK_LIMITED */\n-static const unsigned int NODE_NETWORK_LIMITED_MIN_BLOCKS = 288;\n \n static const signed int DEFAULT_CHECKBLOCKS = 6;\n static const unsigned int DEFAULT_CHECKLEVEL = 3;"
      }
    ]
  },
  {
    "sha": "0109622b08887ed01a30911477ce4b8f266d4b4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTA5NjIyYjA4ODg3ZWQwMWEzMDkxMTQ3N2NlNGI4ZjI2NmQ0YjRh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-05T19:18:08Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-04-23T16:54:06Z"
      },
      "message": "[validation] Move validation-only consts to validation.cpp",
      "tree": {
        "sha": "7e27b418071ae0a12e041a16f378c52434aaf962",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e27b418071ae0a12e041a16f378c52434aaf962"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0109622b08887ed01a30911477ce4b8f266d4b4a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0109622b08887ed01a30911477ce4b8f266d4b4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0109622b08887ed01a30911477ce4b8f266d4b4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0109622b08887ed01a30911477ce4b8f266d4b4a/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8580cacc70764ba5a48e3defb864d75e6c28626",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8580cacc70764ba5a48e3defb864d75e6c28626",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8580cacc70764ba5a48e3defb864d75e6c28626"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 19,
      "deletions": 18
    },
    "files": [
      {
        "sha": "25975e3e31c7bef860b7097b4993e498104423e0",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0109622b08887ed01a30911477ce4b8f266d4b4a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0109622b08887ed01a30911477ce4b8f266d4b4a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0109622b08887ed01a30911477ce4b8f266d4b4a",
        "patch": "@@ -59,6 +59,25 @@\n #define MICRO 0.000001\n #define MILLI 0.001\n \n+/**\n+ * An extra transaction can be added to a package, as long as it only has one\n+ * ancestor and is no larger than this. Not really any reason to make this\n+ * configurable as it doesn't materially change DoS parameters.\n+ */\n+static const unsigned int EXTRA_DESCENDANT_TX_SIZE_LIMIT = 10000;\n+/** Maximum kilobytes for transactions to store for processing during reorg */\n+static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20000;\n+/** The pre-allocation chunk size for blk?????.dat files (since 0.8) */\n+static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; // 16 MiB\n+/** The pre-allocation chunk size for rev?????.dat files (since 0.8) */\n+static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+/** Time to wait (in seconds) between writing blocks/block index to disk. */\n+static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;\n+/** Time to wait (in seconds) between flushing chainstate to disk. */\n+static const unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;\n+/** Maximum age of our tip in seconds for us to be considered current for fee estimation */\n+static const int64_t MAX_FEE_ESTIMATION_TIP_AGE = 3 * 60 * 60;\n+\n bool CBlockIndexWorkComparator::operator()(const CBlockIndex *pa, const CBlockIndex *pb) const {\n     // First sort by most total work, ...\n     if (pa->nChainWork > pb->nChainWork) return false;"
      },
      {
        "sha": "f878a2eb62d7a9b43562d4c3a34e3d3302eb3e61",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0109622b08887ed01a30911477ce4b8f266d4b4a/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0109622b08887ed01a30911477ce4b8f266d4b4a/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=0109622b08887ed01a30911477ce4b8f266d4b4a",
        "patch": "@@ -60,35 +60,17 @@ static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 101;\n static const unsigned int DEFAULT_DESCENDANT_LIMIT = 25;\n /** Default for -limitdescendantsize, maximum kilobytes of in-mempool descendants */\n static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;\n-/**\n- * An extra transaction can be added to a package, as long as it only has one\n- * ancestor and is no larger than this. Not really any reason to make this\n- * configurable as it doesn't materially change DoS parameters.\n- */\n-static const unsigned int EXTRA_DESCENDANT_TX_SIZE_LIMIT = 10000;\n /** Default for -mempoolexpiry, expiration time for mempool transactions in hours */\n static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 336;\n-/** Maximum kilobytes for transactions to store for processing during reorg */\n-static const unsigned int MAX_DISCONNECTED_TX_POOL_SIZE = 20000;\n /** The maximum size of a blk?????.dat file (since 0.8) */\n static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n-/** The pre-allocation chunk size for blk?????.dat files (since 0.8) */\n-static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; // 16 MiB\n-/** The pre-allocation chunk size for rev?????.dat files (since 0.8) */\n-static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n \n /** Maximum number of dedicated script-checking threads allowed */\n static const int MAX_SCRIPTCHECK_THREADS = 15;\n /** -par default (number of script-checking threads, 0 = auto) */\n static const int DEFAULT_SCRIPTCHECK_THREADS = 0;\n-/** Time to wait (in seconds) between writing blocks/block index to disk. */\n-static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;\n-/** Time to wait (in seconds) between flushing chainstate to disk. */\n-static const unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;\n \n static const int64_t DEFAULT_MAX_TIP_AGE = 24 * 60 * 60;\n-/** Maximum age of our tip in seconds for us to be considered current for fee estimation */\n-static const int64_t MAX_FEE_ESTIMATION_TIP_AGE = 3 * 60 * 60;\n \n static const bool DEFAULT_CHECKPOINTS_ENABLED = true;\n static const bool DEFAULT_TXINDEX = false;"
      }
    ]
  },
  {
    "sha": "507b36dd1bf867cd20e4312b95c68b494c9bb7b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDdiMzZkZDFiZjg2N2NkMjBlNDMxMmI5NWM2OGI0OTRjOWJiN2I4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-05T19:33:38Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-04-23T16:54:06Z"
      },
      "message": "[validation] Move all const declarations to top of validation.h",
      "tree": {
        "sha": "0545b10c242543386e3613bb493e47b48eaa4bbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0545b10c242543386e3613bb493e47b48eaa4bbc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/507b36dd1bf867cd20e4312b95c68b494c9bb7b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/507b36dd1bf867cd20e4312b95c68b494c9bb7b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/507b36dd1bf867cd20e4312b95c68b494c9bb7b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/507b36dd1bf867cd20e4312b95c68b494c9bb7b8/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0109622b08887ed01a30911477ce4b8f266d4b4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0109622b08887ed01a30911477ce4b8f266d4b4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0109622b08887ed01a30911477ce4b8f266d4b4a"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 13,
      "deletions": 19
    },
    "files": [
      {
        "sha": "91b1ba6497fdb29cef55b5ae5dfb6d7d56f3bf23",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 13,
        "deletions": 19,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/507b36dd1bf867cd20e4312b95c68b494c9bb7b8/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/507b36dd1bf867cd20e4312b95c68b494c9bb7b8/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=507b36dd1bf867cd20e4312b95c68b494c9bb7b8",
        "patch": "@@ -64,14 +64,11 @@ static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;\n static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 336;\n /** The maximum size of a blk?????.dat file (since 0.8) */\n static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n-\n /** Maximum number of dedicated script-checking threads allowed */\n static const int MAX_SCRIPTCHECK_THREADS = 15;\n /** -par default (number of script-checking threads, 0 = auto) */\n static const int DEFAULT_SCRIPTCHECK_THREADS = 0;\n-\n static const int64_t DEFAULT_MAX_TIP_AGE = 24 * 60 * 60;\n-\n static const bool DEFAULT_CHECKPOINTS_ENABLED = true;\n static const bool DEFAULT_TXINDEX = false;\n static const char* const DEFAULT_BLOCKFILTERINDEX = \"0\";\n@@ -80,9 +77,21 @@ static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n static const bool DEFAULT_PERSIST_MEMPOOL = true;\n /** Default for using fee filter */\n static const bool DEFAULT_FEEFILTER = true;\n-\n /** Default for -stopatheight */\n static const int DEFAULT_STOPATHEIGHT = 0;\n+/** Block files containing a block-height within MIN_BLOCKS_TO_KEEP of ::ChainActive().Tip() will not be pruned. */\n+static const unsigned int MIN_BLOCKS_TO_KEEP = 288;\n+static const signed int DEFAULT_CHECKBLOCKS = 6;\n+static const unsigned int DEFAULT_CHECKLEVEL = 3;\n+// Require that user allocate at least 550 MiB for block & undo files (blk???.dat and rev???.dat)\n+// At 1MB per block, 288 blocks = 288MB.\n+// Add 15% for Undo data = 331MB\n+// Add 20% for Orphan block rate = 397MB\n+// We want the low water mark after pruning to be at least 397 MB and since we prune in\n+// full block file chunks, we need the high water mark which triggers the prune to be\n+// one 128MB block file + added 15% undo data = 147MB greater for a total of 545MB\n+// Setting the target to >= 550 MiB will make it likely we can respect the target.\n+static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n \n struct BlockHasher\n {\n@@ -130,21 +139,6 @@ extern bool fHavePruned;\n extern bool fPruneMode;\n /** Number of MiB of block files that we're trying to stay below. */\n extern uint64_t nPruneTarget;\n-/** Block files containing a block-height within MIN_BLOCKS_TO_KEEP of ::ChainActive().Tip() will not be pruned. */\n-static const unsigned int MIN_BLOCKS_TO_KEEP = 288;\n-\n-static const signed int DEFAULT_CHECKBLOCKS = 6;\n-static const unsigned int DEFAULT_CHECKLEVEL = 3;\n-\n-// Require that user allocate at least 550 MiB for block & undo files (blk???.dat and rev???.dat)\n-// At 1MB per block, 288 blocks = 288MB.\n-// Add 15% for Undo data = 331MB\n-// Add 20% for Orphan block rate = 397MB\n-// We want the low water mark after pruning to be at least 397 MB and since we prune in\n-// full block file chunks, we need the high water mark which triggers the prune to be\n-// one 128MB block file + added 15% undo data = 147MB greater for a total of 545MB\n-// Setting the target to >= 550 MiB will make it likely we can respect the target.\n-static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n \n /**\n  * Process an incoming block. This only returns after the best known valid"
      }
    ]
  },
  {
    "sha": "e9ea95a30d3c0f62b0df0b29744fb5d68687f97f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWVhOTVhMzBkM2MwZjYyYjBkZjBiMjk3NDRmYjVkNjg2ODdmOTdm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-11-05T19:49:59Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-04-23T16:54:06Z"
      },
      "message": "[net processing] Move all const declarations to top of net_processing.cpp",
      "tree": {
        "sha": "b21ebd3a1318ecfad7c19d1ebc470069193d0fc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b21ebd3a1318ecfad7c19d1ebc470069193d0fc9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9ea95a30d3c0f62b0df0b29744fb5d68687f97f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9ea95a30d3c0f62b0df0b29744fb5d68687f97f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9ea95a30d3c0f62b0df0b29744fb5d68687f97f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9ea95a30d3c0f62b0df0b29744fb5d68687f97f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "507b36dd1bf867cd20e4312b95c68b494c9bb7b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/507b36dd1bf867cd20e4312b95c68b494c9bb7b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/507b36dd1bf867cd20e4312b95c68b494c9bb7b8"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 14,
      "deletions": 16
    },
    "files": [
      {
        "sha": "26327ac6ebd1be56579355dd31aa66009ab9ef4d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 16,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9ea95a30d3c0f62b0df0b29744fb5d68687f97f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9ea95a30d3c0f62b0df0b29744fb5d68687f97f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e9ea95a30d3c0f62b0df0b29744fb5d68687f97f",
        "patch": "@@ -113,7 +113,20 @@ static const unsigned int MAX_BLOCKS_TO_ANNOUNCE = 8;\n static const int MAX_UNCONNECTING_HEADERS = 10;\n /** Minimum blocks required to signal NODE_NETWORK_LIMITED */\n static const unsigned int NODE_NETWORK_LIMITED_MIN_BLOCKS = 288;\n-\n+/** Average delay between local address broadcasts */\n+static constexpr std::chrono::hours AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL{24};\n+/** Average delay between peer address broadcasts */\n+static constexpr std::chrono::seconds AVG_ADDRESS_BROADCAST_INTERVAL{30};\n+/** Average delay between trickled inventory transmissions in seconds.\n+ *  Blocks and whitelisted receivers bypass this, outbound peers get half this delay. */\n+static const unsigned int INVENTORY_BROADCAST_INTERVAL = 5;\n+/** Maximum number of inventory items to send per transmission.\n+ *  Limits the impact of low-fee transaction floods. */\n+static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_INTERVAL;\n+/** Average delay between feefilter broadcasts in seconds. */\n+static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n+/** Maximum feefilter broadcast delay after significant change. */\n+static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n \n struct COrphanTx {\n     // When modifying, adapt the copy of this definition in tests/DoS_tests.\n@@ -130,21 +143,6 @@ void EraseOrphansFor(NodeId peer);\n /** Increase a node's misbehavior score. */\n void Misbehaving(NodeId nodeid, int howmuch, const std::string& message=\"\") EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-/** Average delay between local address broadcasts */\n-static constexpr std::chrono::hours AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL{24};\n-/** Average delay between peer address broadcasts */\n-static constexpr std::chrono::seconds AVG_ADDRESS_BROADCAST_INTERVAL{30};\n-/** Average delay between trickled inventory transmissions in seconds.\n- *  Blocks and whitelisted receivers bypass this, outbound peers get half this delay. */\n-static const unsigned int INVENTORY_BROADCAST_INTERVAL = 5;\n-/** Maximum number of inventory items to send per transmission.\n- *  Limits the impact of low-fee transaction floods. */\n-static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_INTERVAL;\n-/** Average delay between feefilter broadcasts in seconds. */\n-static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n-/** Maximum feefilter broadcast delay after significant change. */\n-static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n-\n // Internal stuff\n namespace {\n     /** Number of nodes with fSyncStarted. */"
      }
    ]
  }
]