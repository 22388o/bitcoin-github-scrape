DrahtBot,2019-11-05 20:19:48,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18725 ([WIP] Expand CPFP ""carve-out"" rule from N=1 to N=100 by instagibbs)\n* #18642 (Use std::chrono for the time to rot",https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-550002151,550002151,
MarcoFalke,2019-11-05 20:24:49,"I don't know if it makes sense to move the consts to `init`. Just because the parsing code for most modules is thrown into init, I don't think this is the right place long term. We might want to have modules weakly integrated into Bitcoin Core (like the wallet or the gui), in which case the parsing code should stay in those modules (along with the defaults)",https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-550004237,550004237,
jnewbery,2019-11-05 20:40:13,"> We might want to have modules weakly integrated into Bitcoin Core (like the wallet or the gui), in which case the parsing code should stay in those modules (along with the defaults)\n\nConcept ACK. I think it would make sense longer-term if modules managed their own arguments, but for now, that's not the case so init.cpp is the right place for them. If you take a look at the constants I've mov",https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-550010182,550010182,
practicalswift,2019-11-05 21:26:13,"Concept ACK\n\nCould do `s/const /constexpr /g` on the touched lines where it makes sense? :)",https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-550027900,550027900,
laanwj,2019-11-06 11:59:42,"Concept ACK \n\n> I don't know if it makes sense to move the consts to init\n\nYes, I think there's two ideas in conflict here. One is to move the defaults to implementation files (instead of having them clutter headers), which is a good thing in itself, and the other is to do parsing where the values are needed instead of having `init.cpp` be a busy hive of unrelated parsing (and merge confli",https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-550278607,550278607,
promag,2019-11-06 15:05:13,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-550350829,550350829,
jnewbery,2019-11-06 15:12:10,"> do parsing where the values are needed instead of having init.cpp be a busy hive of unrelated parsing (and merge conflicts).\n\nNicely put. Definite concept ACK on doing this (in future PRs)",https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-550353860,550353860,
promag,2019-11-06 15:15:06,"> > do parsing where the values are needed instead of having init.cpp be a busy hive of unrelated parsing (and merge conflicts).\n> \n> Nicely put. Definite concept ACK on doing this (in future PRs)\n\nI thought the benefit of the current approach is to fail as soon as possible?",https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-550355273,550355273,
MarcoFalke,2019-11-06 15:19:48,"> I thought the benefit of the current approach is to fail as soon as possible?\n\nMoving the parsing code to another module doesn't mean it can't fail on init (see e.g. the wallet init parsing)",https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-550357390,550357390,
promag,2019-11-06 15:22:17,"> where the values are needed\n\nAh ok, my comment was because of this bit. Breaking the initialization sounds good to me.",https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-550358527,550358527,
jnewbery,2019-11-06 15:24:17,Are we supposed to care about AppVeyor failures? Is there a way to rerun them when they fail?,https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-550359479,550359479,
jnewbery,2019-11-06 15:26:51,"> Could do s/const /constexpr /g on the touched lines where it makes sense? :)\n\nI don't want scope to creep too much. It made sense to me to change const to constexpr when moving a constant from the header file to the implementation file, but for the simple moves within files I kept the definitions the same.\n(slightly arbitrary, but I had to draw the line somewhere)",https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-550360702,550360702,
MarcoFalke,2019-11-06 15:29:58,I suggest ignoring the appveyor result until https://github.com/bitcoin/bitcoin/pull/17384#issuecomment-550305021 is merged,https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-550362186,550362186,
promag,2019-11-06 15:32:14,"> Are we supposed to care about AppVeyor failures? Is there a way to rerun them when they fail?\n\nI've restarted. There's a Rebuild PR button there (maybe if you have permissions?).",https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-550363246,550363246,
laanwj,2019-11-06 15:58:07,"> Ah ok, my comment was because of this bit. Breaking the initialization sounds good to me.\n\nYesss I agree I didn't *literally* mean where the values are needed, but the module where the values are needed, Of course it's better to do as much of parsing upfront as possible. Failing on argument parsing when threads have already been spun up is inconvenient. It's exactly what is wrong at the mome",https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-550375296,550375296,
jnewbery,2019-11-07 19:11:32,rebased,https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-551221278,551221278,
jnewbery,2020-03-13 20:55:54,rebased on master,https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-598907784,598907784,
practicalswift,2020-03-13 22:23:18,ACK 3ba3f119c7c3aacf1646747550dfa81f9f903f2e -- `const` is great and patch looks good :),https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-598954850,598954850,
jnewbery,2020-04-23 17:01:21,"I've simplified this PR to remove any moves to init.cpp. I think the discussion above about start-up and separating components is interesting, but wasn't really the point of this PR. This PR now _only_ does the following:\n\n- move constants that are only used in net processing to net_processing.cpp\n- move constants that are only used in validation to validation.cpp\n- move all constants in n",https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-618518795,618518795,
MarcoFalke,2020-04-23 18:44:59,"> Reviewing this PR should be trivial\n\nI disagree that review of this is trivial. Let's take a look at the first move (`PING_TIMEOUT`): ping and timeout are tightly coupled. (The timeout will start to count after the ping was sent). Ripping the constants away from each other is making the code harder to read.\n\nAlso, I don't really understand the motivation to move compile time constants of",https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-618584644,618584644,
MarcoFalke,2020-04-23 18:48:46,ACK on moving net_processing consts from validation to net_processing. Not sure about the rest.,https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-618587221,618587221,
jnewbery,2020-04-24 00:05:57,"> Let's take a look at the first move (PING_TIMEOUT): ping and timeout are tightly coupled.\n\nNo, the second value is a timeout on _any_ socket activity, not just pings. It should live in net. PING is an application-level message and exists in net_processing.\n\n> Also, I don't really understand the motivation to move compile time constants of trivial types from the header to the cpp file.\n",https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-618731896,618731896,
MarcoFalke,2020-04-24 00:17:44,"Fair enough, Concept ACK",https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-618734968,618734968,
practicalswift,2020-04-24 13:33:53,ACK e9ea95a30d3c0f62b0df0b29744fb5d68687f97f -- patch looks correct,https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-619013226,619013226,
MarcoFalke,2020-04-25 12:36:18,"ACK e9ea95a30d3c0f62b0df0b29744fb5d68687f97f ðŸš‰\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK e9ea95a30d3c0f62b0df0b29744fb5d68687f97f ðŸš‰\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUigiwv+NZXoqdH0Elf0l5k1w3q8pkNuTK5sx34HgU9JbfVzKrGUHh1Y7Q",https://github.com/bitcoin/bitcoin/pull/17383#issuecomment-619373145,619373145,
