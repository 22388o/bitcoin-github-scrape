[
  {
    "sha": "16b0a936e15b81710755303e11ef51f608b61475",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmIwYTkzNmUxNWI4MTcxMDc1NTMwM2UxMWVmNTFmNjA4YjYxNDc1",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-26T00:49:33Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-01T20:17:03Z"
      },
      "message": "guix: Rebase toolchain on glibc 2.24 (2.27 for riscv64)\n\nSupport for riscv64 in glibc landed in 2.27 so it's unavoidable that we\nuse 2.27.\n\nRunning a Bitcoin build with toolchains based on 2.24 for platforms\nother than riscv64 seem to produce binaries which do not have 2.17\nsymbols. So use 2.24 since it's more recent and maintained by Debian\nStretch.",
      "tree": {
        "sha": "1f7bc959fc5453575da46a74aab8638e45bf6385",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f7bc959fc5453575da46a74aab8638e45bf6385"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16b0a936e15b81710755303e11ef51f608b61475",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16b0a936e15b81710755303e11ef51f608b61475",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16b0a936e15b81710755303e11ef51f608b61475",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16b0a936e15b81710755303e11ef51f608b61475/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddc6979b8baab048bbf0c5c2dd23345a8eb5c60e"
      }
    ],
    "stats": {
      "total": 521,
      "additions": 519,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f4df4855fc460b2ae53b4f5c9e1de66d17840888",
        "filename": "contrib/guix/manifest.scm",
        "status": "modified",
        "additions": 41,
        "deletions": 2,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/manifest.scm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/manifest.scm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/manifest.scm?ref=16b0a936e15b81710755303e11ef51f608b61475",
        "patch": "@@ -135,11 +135,25 @@ chain for \" target \" development.\"))\n   (package-with-extra-patches gcc-8\n     (search-our-patches \"gcc-8-sort-libtool-find-output.patch\")))\n \n+;; Building glibc with stack smashing protector first landed in glibc 2.25, use\n+;; this function to disable for older glibcs\n+;;\n+;; From glibc 2.25 changelog:\n+;;\n+;;   * Most of glibc can now be built with the stack smashing protector enabled.\n+;;     It is recommended to build glibc with --enable-stack-protector=strong.\n+;;     Implemented by Nick Alcock (Oracle).\n+(define (make-glibc-without-ssp xglibc)\n+  (package-with-extra-configure-variable\n+   (package-with-extra-configure-variable\n+    xglibc \"libc_cv_ssp\" \"no\")\n+   \"libc_cv_ssp_strong\" \"no\"))\n+\n (define* (make-bitcoin-cross-toolchain target\n                                        #:key\n                                        (base-gcc-for-libc gcc-7)\n                                        (base-kernel-headers linux-libre-headers-5.4)\n-                                       (base-libc glibc)  ; glibc 2.31\n+                                       (base-libc (make-glibc-without-ssp glibc-2.24))\n                                        (base-gcc (make-gcc-rpath-link base-gcc)))\n   \"Convenience wrapper around MAKE-CROSS-TOOLCHAIN with default values\n desirable for building Bitcoin Core release binaries.\"\n@@ -557,6 +571,28 @@ and endian independent.\")\n inspecting signatures in Mach-O binaries.\")\n       (license license:expat))))\n \n+(define-public glibc-2.24\n+  (package\n+    (inherit glibc)\n+    (version \"2.24\")\n+    (source (origin\n+              (method git-fetch)\n+              (uri (git-reference\n+                    (url \"https://sourceware.org/git/glibc.git\")\n+                    (commit \"0d7f1ed30969886c8dde62fbf7d2c79967d4bace\")))\n+              (file-name (git-file-name \"glibc\" \"0d7f1ed30969886c8dde62fbf7d2c79967d4bace\"))\n+              (sha256\n+               (base32\n+                \"0g5hryia5v1k0qx97qffgwzrz4lr4jw3s5kj04yllhswsxyjbic3\"))\n+              (patches (search-our-patches \"glibc-ldd-x86_64.patch\"\n+                                           \"glibc-versioned-locpath.patch\"\n+                                           \"glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch\"\n+                                           \"glibc-2.24-no-build-time-cxx-header-run.patch\"))))))\n+\n+(define glibc-2.27/bitcoin-patched\n+  (package-with-extra-patches glibc-2.27\n+    (search-our-patches \"glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch\")))\n+\n (packages->manifest\n  (append\n   (list ;; The Basics\n@@ -606,7 +642,10 @@ inspecting signatures in Mach-O binaries.\")\n                  (make-nsis-with-sde-support nsis-x86_64)\n                  osslsigncode))\n           ((string-contains target \"-linux-\")\n-           (list (make-bitcoin-cross-toolchain target)))\n+           (list (cond ((string-contains target \"riscv64-\")\n+                        (make-bitcoin-cross-toolchain target #:base-libc glibc-2.27/bitcoin-patched))\n+                       (else\n+                        (make-bitcoin-cross-toolchain target)))))\n           ((string-contains target \"darwin\")\n            (list clang-toolchain-10 binutils imagemagick libtiff librsvg font-tuffy cmake xorriso python-signapple))\n           (else '())))))"
      },
      {
        "sha": "54a7824345fa381dbfed01c4b7603d403a329fa2",
        "filename": "contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "status": "added",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch?ref=16b0a936e15b81710755303e11ef51f608b61475",
        "patch": "@@ -0,0 +1,60 @@\n+commit 6b02af31e9a721bb15a11380cd22d53b621711f8\n+Author: Szabolcs Nagy <szabolcs.nagy@arm.com>\n+Date:   Wed Oct 18 17:26:23 2017 +0100\n+\n+    [AARCH64] Rewrite elf_machine_load_address using _DYNAMIC symbol\n+    \n+    This patch rewrites aarch64 elf_machine_load_address to use special _DYNAMIC\n+    symbol instead of _dl_start.\n+    \n+    The static address of _DYNAMIC symbol is stored in the first GOT entry.\n+    Here is the change which makes this solution work (part of binutils 2.24):\n+    https://sourceware.org/ml/binutils/2013-06/msg00248.html\n+    \n+    i386, x86_64 targets use the same method to do this as well.\n+    \n+    The original implementation relies on a trick that R_AARCH64_ABS32 relocation\n+    being resolved at link time and the static address fits in the 32bits.\n+    However, in LP64, normally, the address is defined to be 64 bit.\n+    \n+    Here is the C version one which should be portable in all cases.\n+    \n+            * sysdeps/aarch64/dl-machine.h (elf_machine_load_address): Use\n+            _DYNAMIC symbol to calculate load address.\n+\n+diff --git a/sysdeps/aarch64/dl-machine.h b/sysdeps/aarch64/dl-machine.h\n+index e86d8b5b63..5a5b8a5de5 100644\n+--- a/sysdeps/aarch64/dl-machine.h\n++++ b/sysdeps/aarch64/dl-machine.h\n+@@ -49,26 +49,11 @@ elf_machine_load_address (void)\n+   /* To figure out the load address we use the definition that for any symbol:\n+      dynamic_addr(symbol) = static_addr(symbol) + load_addr\n+ \n+-     The choice of symbol is arbitrary. The static address we obtain\n+-     by constructing a non GOT reference to the symbol, the dynamic\n+-     address of the symbol we compute using adrp/add to compute the\n+-     symbol's address relative to the PC.\n+-     This depends on 32bit relocations being resolved at link time\n+-     and that the static address fits in the 32bits.  */\n+-\n+-  ElfW(Addr) static_addr;\n+-  ElfW(Addr) dynamic_addr;\n+-\n+-  asm (\"\t\t\t\t\t\\n\"\n+-\"\tadrp\t%1, _dl_start;\t\t\t\\n\"\n+-\"\tadd\t%1, %1, #:lo12:_dl_start\t\\n\"\n+-\"\tldr\t%w0, 1f\t\t\t\t\\n\"\n+-\"\tb\t2f\t\t\t\t\\n\"\n+-\"1:\t\t\t\t\t\t\\n\"\n+-\"\t.word\t_dl_start\t\t\t\\n\"\n+-\"2:\t\t\t\t\t\t\\n\"\n+-    : \"=r\" (static_addr),  \"=r\" (dynamic_addr));\n+-  return dynamic_addr - static_addr;\n++    _DYNAMIC sysmbol is used here as its link-time address stored in\n++    the special unrelocated first GOT entry.  */\n++\n++    extern ElfW(Dyn) _DYNAMIC[] attribute_hidden;\n++    return (ElfW(Addr)) &_DYNAMIC - elf_machine_dynamic ();\n+ }\n+ \n+ /* Set up the loaded object described by L so its unrelocated PLT"
      },
      {
        "sha": "5d7a148c62cf05e9eb2d55b5c1997462e303935d",
        "filename": "contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "status": "added",
        "additions": 98,
        "deletions": 0,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch?ref=16b0a936e15b81710755303e11ef51f608b61475",
        "patch": "@@ -0,0 +1,98 @@\n+commit dc23a45db566095e83ff0b7a57afc87fb5ca89a1\n+Author: Florian Weimer <fweimer@redhat.com>\n+Date:   Wed Sep 21 10:45:32 2016 +0200\n+\n+    Avoid running $(CXX) during build to obtain header file paths\n+    \n+    This reduces the build time somewhat and is particularly noticeable\n+    during rebuilds with few code changes.\n+\n+diff --git a/Makerules b/Makerules\n+index 7e4077ee50..c338850de5 100644\n+--- a/Makerules\n++++ b/Makerules\n+@@ -121,14 +121,10 @@ ifneq (,$(CXX))\n+ # will be used instead of /usr/include/stdlib.h and /usr/include/math.h.\n+ before-compile := $(common-objpfx)cstdlib $(common-objpfx)cmath \\\n+ \t          $(before-compile)\n+-cstdlib=$(shell echo \"\\#include <cstdlib>\" | $(CXX) -M -MP -x c++ - \\\n+-\t\t| sed -n \"/cstdlib:/{s/:$$//;p}\")\n+-$(common-objpfx)cstdlib: $(cstdlib)\n++$(common-objpfx)cstdlib: $(c++-cstdlib-header)\n+ \t$(INSTALL_DATA) $< $@T\n+ \t$(move-if-change) $@T $@\n+-cmath=$(shell echo \"\\#include <cmath>\" | $(CXX) -M -MP -x c++ - \\\n+-\t\t| sed -n \"/cmath:/{s/:$$//;p}\")\n+-$(common-objpfx)cmath: $(cmath)\n++$(common-objpfx)cmath: $(c++-cmath-header)\n+ \t$(INSTALL_DATA) $< $@T\n+ \t$(move-if-change) $@T $@\n+ endif\n+diff --git a/config.make.in b/config.make.in\n+index 95c6f36876..04a8b3ed7f 100644\n+--- a/config.make.in\n++++ b/config.make.in\n+@@ -45,6 +45,8 @@ defines = @DEFINES@\n+ sysheaders = @sysheaders@\n+ sysincludes = @SYSINCLUDES@\n+ c++-sysincludes = @CXX_SYSINCLUDES@\n++c++-cstdlib-header = @CXX_CSTDLIB_HEADER@\n++c++-cmath-header = @CXX_CMATH_HEADER@\n+ all-warnings = @all_warnings@\n+ enable-werror = @enable_werror@\n+ \n+diff --git a/configure b/configure\n+index 17625e1041..6ff252744b 100755\n+--- a/configure\n++++ b/configure\n+@@ -635,6 +635,8 @@ BISON\n+ INSTALL_INFO\n+ PERL\n+ BASH_SHELL\n++CXX_CMATH_HEADER\n++CXX_CSTDLIB_HEADER\n+ CXX_SYSINCLUDES\n+ SYSINCLUDES\n+ AUTOCONF\n+@@ -5054,6 +5056,18 @@ fi\n+ \n+ \n+ \n++# Obtain some C++ header file paths.  This is used to make a local\n++# copy of those headers in Makerules.\n++if test -n \"$CXX\"; then\n++  find_cxx_header () {\n++    echo \"#include <$1>\" | $CXX -M -MP -x c++ - | sed -n \"/$1:/{s/:\\$//;p}\"\n++  }\n++  CXX_CSTDLIB_HEADER=\"$(find_cxx_header cstdlib)\"\n++  CXX_CMATH_HEADER=\"$(find_cxx_header cmath)\"\n++fi\n++\n++\n++\n+ # Test if LD_LIBRARY_PATH contains the notation for the current directory\n+ # since this would lead to problems installing/building glibc.\n+ # LD_LIBRARY_PATH contains the current directory if one of the following\n+diff --git a/configure.ac b/configure.ac\n+index 33bcd62180..9938ab0dc2 100644\n+--- a/configure.ac\n++++ b/configure.ac\n+@@ -1039,6 +1039,18 @@ fi\n+ AC_SUBST(SYSINCLUDES)\n+ AC_SUBST(CXX_SYSINCLUDES)\n+ \n++# Obtain some C++ header file paths.  This is used to make a local\n++# copy of those headers in Makerules.\n++if test -n \"$CXX\"; then\n++  find_cxx_header () {\n++    echo \"#include <$1>\" | $CXX -M -MP -x c++ - | sed -n \"/$1:/{s/:\\$//;p}\"\n++  }\n++  CXX_CSTDLIB_HEADER=\"$(find_cxx_header cstdlib)\"\n++  CXX_CMATH_HEADER=\"$(find_cxx_header cmath)\"\n++fi\n++AC_SUBST(CXX_CSTDLIB_HEADER)\n++AC_SUBST(CXX_CMATH_HEADER)\n++\n+ # Test if LD_LIBRARY_PATH contains the notation for the current directory\n+ # since this would lead to problems installing/building glibc.\n+ # LD_LIBRARY_PATH contains the current directory if one of the following"
      },
      {
        "sha": "39c995ffb5c4caa8a572b221e40aaee7d0264dd1",
        "filename": "contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "status": "added",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch?ref=16b0a936e15b81710755303e11ef51f608b61475",
        "patch": "@@ -0,0 +1,70 @@\n+From 562c52cc81a4e456a62e6455feb32732049e9070 Mon Sep 17 00:00:00 2001\n+From: \"H.J. Lu\" <hjl.tools@gmail.com>\n+Date: Mon, 31 Dec 2018 09:26:42 -0800\n+Subject: [PATCH] riscv: Use __has_include__ to include <asm/syscalls.h> [BZ\n+ #24022]\n+\n+<asm/syscalls.h> has been removed by\n+\n+commit 27f8899d6002e11a6e2d995e29b8deab5aa9cc25\n+Author: David Abdurachmanov <david.abdurachmanov@gmail.com>\n+Date:   Thu Nov 8 20:02:39 2018 +0100\n+\n+    riscv: add asm/unistd.h UAPI header\n+\n+    Marcin Juszkiewicz reported issues while generating syscall table for riscv\n+    using 4.20-rc1. The patch refactors our unistd.h files to match some other\n+    architectures.\n+\n+    - Add asm/unistd.h UAPI header, which has __ARCH_WANT_NEW_STAT only for 64-bit\n+    - Remove asm/syscalls.h UAPI header and merge to asm/unistd.h\n+    - Adjust kernel asm/unistd.h\n+\n+    So now asm/unistd.h UAPI header should show all syscalls for riscv.\n+\n+<asm/syscalls.h> may be restored by\n+\n+Subject: [PATCH] riscv: restore asm/syscalls.h UAPI header\n+Date: Tue, 11 Dec 2018 09:09:35 +0100\n+\n+UAPI header asm/syscalls.h was merged into UAPI asm/unistd.h header,\n+which did resolve issue with missing syscalls macros resulting in\n+glibc (2.28) build failure. It also broke glibc in a different way:\n+asm/syscalls.h is being used by glibc. I noticed this while doing\n+Fedora 30/Rawhide mass rebuild.\n+\n+The patch returns asm/syscalls.h header and incl. it into asm/unistd.h.\n+I plan to send a patch to glibc to use asm/unistd.h instead of\n+asm/syscalls.h\n+\n+In the meantime, we use __has_include__, which was added to GCC 5, to\n+check if <asm/syscalls.h> exists before including it.  Tested with\n+build-many-glibcs.py for riscv against kernel 4.19.12 and 4.20-rc7.\n+\n+\t[BZ #24022]\n+\t* sysdeps/unix/sysv/linux/riscv/flush-icache.c: Check if\n+\t<asm/syscalls.h> exists with __has_include__ before including it.\n+---\n+ sysdeps/unix/sysv/linux/riscv/flush-icache.c | 6 +++++-\n+ 1 file changed, 5 insertions(+), 1 deletion(-)\n+\n+diff --git a/sysdeps/unix/sysv/linux/riscv/flush-icache.c b/sysdeps/unix/sysv/linux/riscv/flush-icache.c\n+index d612ef4c6c..0b2042620b 100644\n+--- a/sysdeps/unix/sysv/linux/riscv/flush-icache.c\n++++ b/sysdeps/unix/sysv/linux/riscv/flush-icache.c\n+@@ -21,7 +21,11 @@\n+ #include <stdlib.h>\n+ #include <atomic.h>\n+ #include <sys/cachectl.h>\n+-#include <asm/syscalls.h>\n++#if __has_include__ (<asm/syscalls.h>)\n++# include <asm/syscalls.h>\n++#else\n++# include <asm/unistd.h>\n++#endif\n+ \n+ typedef int (*func_type) (void *, void *, unsigned long int);\n+ \n+-- \n+2.31.1\n+"
      },
      {
        "sha": "b1b6d5a54863cbcb6a2d92e3bdb9127defbb4d99",
        "filename": "contrib/guix/patches/glibc-ldd-x86_64.patch",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/patches/glibc-ldd-x86_64.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/patches/glibc-ldd-x86_64.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-ldd-x86_64.patch?ref=16b0a936e15b81710755303e11ef51f608b61475",
        "patch": "@@ -0,0 +1,10 @@\n+By default, 'RTDLLIST' in 'ldd' refers to 'lib64/ld-linux-x86-64.so', whereas\n+it's in 'lib/' for us.  This patch fixes that.\n+\n+--- glibc-2.17/sysdeps/unix/sysv/linux/x86_64/ldd-rewrite.sed\t2012-12-25 04:02:13.000000000 +0100\n++++ glibc-2.17/sysdeps/unix/sysv/linux/x86_64/ldd-rewrite.sed\t2013-09-15 23:08:03.000000000 +0200\n+@@ -1,3 +1,3 @@\n+ /LD_TRACE_LOADED_OBJECTS=1/a\\\n+ add_env=\"$add_env LD_LIBRARY_VERSION=\\\\$verify_out\"\n+-s_^\\(RTLDLIST=\\)\\(.*lib\\)\\(\\|64\\|x32\\)\\(/[^/]*\\)\\(-x86-64\\|-x32\\)\\(\\.so\\.[0-9.]*\\)[ \t]*$_\\1\"\\2\\4\\6 \\264\\4-x86-64\\6 \\2x32\\4-x32\\6\"_\n++s_^\\(RTLDLIST=\\)\\(.*lib\\)\\(\\|64\\|x32\\)\\(/[^/]*\\)\\(-x86-64\\|-x32\\)\\(\\.so\\.[0-9.]*\\)[ \t]*$_\\1\"\\2\\4\\6 \\2\\4-x86-64\\6 \\2x32\\4-x32\\6\"_"
      },
      {
        "sha": "bc7652127fa5a2aca5e7cea1793b5679ac17aa06",
        "filename": "contrib/guix/patches/glibc-versioned-locpath.patch",
        "status": "added",
        "additions": 240,
        "deletions": 0,
        "changes": 240,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/patches/glibc-versioned-locpath.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16b0a936e15b81710755303e11ef51f608b61475/contrib/guix/patches/glibc-versioned-locpath.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-versioned-locpath.patch?ref=16b0a936e15b81710755303e11ef51f608b61475",
        "patch": "@@ -0,0 +1,240 @@\n+The format of locale data can be incompatible between libc versions, and\n+loading incompatible data can lead to 'setlocale' returning EINVAL at best\n+or triggering an assertion failure at worst.  See\n+https://lists.gnu.org/archive/html/guix-devel/2015-09/msg00717.html\n+for background information.\n+\n+To address that, this patch changes libc to honor a new 'GUIX_LOCPATH'\n+variable, and to look for locale data in version-specific sub-directories of\n+that variable.  So, if GUIX_LOCPATH=/foo:/bar, locale data is searched for in\n+/foo/X.Y and /bar/X.Y, where X.Y is the libc version number.\n+\n+That way, a single 'GUIX_LOCPATH' setting can work even if different libc\n+versions coexist on the system.\n+\n+--- a/locale/newlocale.c\n++++ b/locale/newlocale.c\n+@@ -30,6 +30,7 @@\n+ /* Lock for protecting global data.  */\n+ __libc_rwlock_define (extern , __libc_setlocale_lock attribute_hidden)\n+ \n++extern error_t compute_locale_search_path (char **, size_t *);\n+ \n+ /* Use this when we come along an error.  */\n+ #define ERROR_RETURN\t\t\t\t\t\t\t      \\\n+@@ -48,7 +49,6 @@ __newlocale (int category_mask, const char *locale, __locale_t base)\n+   __locale_t result_ptr;\n+   char *locale_path;\n+   size_t locale_path_len;\n+-  const char *locpath_var;\n+   int cnt;\n+   size_t names_len;\n+ \n+@@ -102,17 +102,8 @@ __newlocale (int category_mask, const char *locale, __locale_t base)\n+   locale_path = NULL;\n+   locale_path_len = 0;\n+ \n+-  locpath_var = getenv (\"LOCPATH\");\n+-  if (locpath_var != NULL && locpath_var[0] != '\\0')\n+-    {\n+-      if (__argz_create_sep (locpath_var, ':',\n+-\t\t\t     &locale_path, &locale_path_len) != 0)\n+-\treturn NULL;\n+-\n+-      if (__argz_add_sep (&locale_path, &locale_path_len,\n+-\t\t\t  _nl_default_locale_path, ':') != 0)\n+-\treturn NULL;\n+-    }\n++  if (compute_locale_search_path (&locale_path, &locale_path_len) != 0)\n++    return NULL;\n+ \n+   /* Get the names for the locales we are interested in.  We either\n+      allow a composite name or a single name.  */\n+diff --git a/locale/setlocale.c b/locale/setlocale.c\n+index ead030d..0c0e314 100644\n+--- a/locale/setlocale.c\n++++ b/locale/setlocale.c\n+@@ -215,12 +215,65 @@ setdata (int category, struct __locale_data *data)\n+     }\n+ }\n+ \n++/* Return in *LOCALE_PATH and *LOCALE_PATH_LEN the locale data search path as\n++   a colon-separated list.  Return ENOMEN on error, zero otherwise.  */\n++error_t\n++compute_locale_search_path (char **locale_path, size_t *locale_path_len)\n++{\n++  char* guix_locpath_var = getenv (\"GUIX_LOCPATH\");\n++  char *locpath_var = getenv (\"LOCPATH\");\n++\n++  if (guix_locpath_var != NULL && guix_locpath_var[0] != '\\0')\n++    {\n++      /* Entries in 'GUIX_LOCPATH' take precedence over 'LOCPATH'.  These\n++\t entries are systematically prefixed with \"/X.Y\" where \"X.Y\" is the\n++\t libc version.  */\n++      if (__argz_create_sep (guix_locpath_var, ':',\n++\t\t\t     locale_path, locale_path_len) != 0\n++\t  || __argz_suffix_entries (locale_path, locale_path_len,\n++\t\t\t\t    \"/\" VERSION) != 0)\n++\tgoto bail_out;\n++    }\n++\n++  if (locpath_var != NULL && locpath_var[0] != '\\0')\n++    {\n++      char *reg_locale_path = NULL;\n++      size_t reg_locale_path_len = 0;\n++\n++      if (__argz_create_sep (locpath_var, ':',\n++\t\t\t     &reg_locale_path, &reg_locale_path_len) != 0)\n++\tgoto bail_out;\n++\n++      if (__argz_append (locale_path, locale_path_len,\n++\t\t\t reg_locale_path, reg_locale_path_len) != 0)\n++\tgoto bail_out;\n++\n++      free (reg_locale_path);\n++    }\n++\n++  if (*locale_path != NULL)\n++    {\n++      /* Append the system default locale directory.  */\n++      if (__argz_add_sep (locale_path, locale_path_len,\n++\t\t\t  _nl_default_locale_path, ':') != 0)\n++\tgoto bail_out;\n++    }\n++\n++  return 0;\n++\n++ bail_out:\n++  free (*locale_path);\n++  *locale_path = NULL;\n++  *locale_path_len = 0;\n++\n++  return ENOMEM;\n++}\n++\n+ char *\n+ setlocale (int category, const char *locale)\n+ {\n+   char *locale_path;\n+   size_t locale_path_len;\n+-  const char *locpath_var;\n+   char *composite;\n+ \n+   /* Sanity check for CATEGORY argument.  */\n+@@ -251,17 +304,10 @@ setlocale (int category, const char *locale)\n+   locale_path = NULL;\n+   locale_path_len = 0;\n+ \n+-  locpath_var = getenv (\"LOCPATH\");\n+-  if (locpath_var != NULL && locpath_var[0] != '\\0')\n++  if (compute_locale_search_path (&locale_path, &locale_path_len) != 0)\n+     {\n+-      if (__argz_create_sep (locpath_var, ':',\n+-\t\t\t     &locale_path, &locale_path_len) != 0\n+-\t  || __argz_add_sep (&locale_path, &locale_path_len,\n+-\t\t\t     _nl_default_locale_path, ':') != 0)\n+-\t{\n+-\t  __libc_rwlock_unlock (__libc_setlocale_lock);\n+-\t  return NULL;\n+-\t}\n++      __libc_rwlock_unlock (__libc_setlocale_lock);\n++      return NULL;\n+     }\n+ \n+   if (category == LC_ALL)\n+diff --git a/string/Makefile b/string/Makefile\n+index 8424a61..f925503 100644\n+--- a/string/Makefile\n++++ b/string/Makefile\n+@@ -38,7 +38,7 @@ routines\t:= strcat strchr strcmp strcoll strcpy strcspn\t\t\\\n+ \t\t   swab strfry memfrob memmem rawmemchr strchrnul\t\\\n+ \t\t   $(addprefix argz-,append count create ctsep next\t\\\n+ \t\t\t\t     delete extract insert stringify\t\\\n+-\t\t\t\t     addsep replace)\t\t\t\\\n++\t\t\t\t     addsep replace suffix)\t\t\\\n+ \t\t   envz basename\t\t\t\t\t\\\n+ \t\t   strcoll_l strxfrm_l string-inlines memrchr\t\t\\\n+ \t\t   xpg-strerror strerror_l\n+diff --git a/string/argz-suffix.c b/string/argz-suffix.c\n+new file mode 100644\n+index 0000000..505b0f2\n+--- /dev/null\n++++ b/string/argz-suffix.c\n+@@ -0,0 +1,56 @@\n++/* Copyright (C) 2015 Free Software Foundation, Inc.\n++   This file is part of the GNU C Library.\n++   Contributed by Ludovic Court\u00e8s <ludo@gnu.org>.\n++\n++   The GNU C Library is free software; you can redistribute it and/or\n++   modify it under the terms of the GNU Lesser General Public\n++   License as published by the Free Software Foundation; either\n++   version 2.1 of the License, or (at your option) any later version.\n++\n++   The GNU C Library is distributed in the hope that it will be useful,\n++   but WITHOUT ANY WARRANTY; without even the implied warranty of\n++   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n++   Lesser General Public License for more details.\n++\n++   You should have received a copy of the GNU Lesser General Public\n++   License along with the GNU C Library; if not, see\n++   <http://www.gnu.org/licenses/>.  */\n++\n++#include <argz.h>\n++#include <errno.h>\n++#include <stdlib.h>\n++#include <string.h>\n++\n++\n++error_t\n++__argz_suffix_entries (char **argz, size_t *argz_len, const char *suffix)\n++\n++{\n++  size_t suffix_len = strlen (suffix);\n++  size_t count = __argz_count (*argz, *argz_len);\n++  size_t new_argz_len = *argz_len + count * suffix_len;\n++  char *new_argz = malloc (new_argz_len);\n++\n++  if (new_argz)\n++    {\n++      char *p = new_argz, *entry;\n++\n++      for (entry = *argz;\n++\t   entry != NULL;\n++\t   entry = argz_next (*argz, *argz_len, entry))\n++\t{\n++\t  p = stpcpy (p, entry);\n++\t  p = stpcpy (p, suffix);\n++\t  p++;\n++\t}\n++\n++      free (*argz);\n++      *argz = new_argz;\n++      *argz_len = new_argz_len;\n++\n++      return 0;\n++    }\n++  else\n++    return ENOMEM;\n++}\n++weak_alias (__argz_suffix_entries, argz_suffix_entries)\n+diff --git a/string/argz.h b/string/argz.h\n+index bb62a31..d276a35 100644\n+--- a/string/argz.h\n++++ b/string/argz.h\n+@@ -134,6 +134,16 @@ extern error_t argz_replace (char **__restrict __argz,\n+ \t\t\t     const char *__restrict __str,\n+ \t\t\t     const char *__restrict __with,\n+ \t\t\t     unsigned int *__restrict __replace_count);\n++\n++/* Suffix each entry of ARGZ & ARGZ_LEN with SUFFIX.  Return 0 on success,\n++   and ENOMEN if memory cannot be allocated.  */\n++extern error_t __argz_suffix_entries (char **__restrict __argz,\n++\t\t\t\t      size_t *__restrict __argz_len,\n++\t\t\t\t      const char *__restrict __suffix);\n++extern error_t argz_suffix_entries (char **__restrict __argz,\n++\t\t\t\t    size_t *__restrict __argz_len,\n++\t\t\t\t    const char *__restrict __suffix);\n++\n+ \f\n+ /* Returns the next entry in ARGZ & ARGZ_LEN after ENTRY, or NULL if there\n+    are no more.  If entry is NULL, then the first entry is returned.  This"
      }
    ]
  },
  {
    "sha": "dc4137a60c99979b89f75d2bddba96d043f387b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzQxMzdhNjBjOTk5NzliODlmNzVkMmJkZGJhOTZkMDQzZjM4N2I4",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-06-28T20:55:32Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-01T20:20:28Z"
      },
      "message": "guix: Build depends/qt with our platform definition\n\nOur 'bitcoin-linux-g++' definition better integrates with our depends\nsystem than the stock linux-g++-64 definition.\n\nThis fixes a bug whereby Guix builds on x86_64 for x86_64 did not\nproduce a QMinimalIntegrationPlugin and led to bitcoin-qt not being\nbuilt.",
      "tree": {
        "sha": "91012748d67522898a2b048dfcc02ce0ac71d237",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91012748d67522898a2b048dfcc02ce0ac71d237"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc4137a60c99979b89f75d2bddba96d043f387b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc4137a60c99979b89f75d2bddba96d043f387b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc4137a60c99979b89f75d2bddba96d043f387b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc4137a60c99979b89f75d2bddba96d043f387b8/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16b0a936e15b81710755303e11ef51f608b61475",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16b0a936e15b81710755303e11ef51f608b61475",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16b0a936e15b81710755303e11ef51f608b61475"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9351c5422967b2fbd0193309e895792ae17acd05",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc4137a60c99979b89f75d2bddba96d043f387b8/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc4137a60c99979b89f75d2bddba96d043f387b8/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=dc4137a60c99979b89f75d2bddba96d043f387b8",
        "patch": "@@ -214,6 +214,7 @@ make -C depends --jobs=\"$JOBS\" HOST=\"$HOST\" \\\n                                    x86_64_linux_NM=x86_64-linux-gnu-nm \\\n                                    x86_64_linux_STRIP=x86_64-linux-gnu-strip \\\n                                    qt_config_opts_i686_linux='-platform linux-g++ -xplatform bitcoin-linux-g++' \\\n+                                   qt_config_opts_x86_64_linux='-platform linux-g++ -xplatform bitcoin-linux-g++' \\\n                                    FORCE_USE_SYSTEM_CLANG=1\n \n "
      }
    ]
  },
  {
    "sha": "647f7e5f1da1089d451f3c431efc635b8e87b064",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDdmN2U1ZjFkYTEwODlkNDUxZjNjNDMxZWZjNjM1YjhlODdiMDY0",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-02T18:10:33Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-07-02T18:10:33Z"
      },
      "message": "guix: Also sort SHA256SUMS.part",
      "tree": {
        "sha": "e05b1bdcce216685054d197551c91f6f02028b4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e05b1bdcce216685054d197551c91f6f02028b4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/647f7e5f1da1089d451f3c431efc635b8e87b064",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/647f7e5f1da1089d451f3c431efc635b8e87b064",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/647f7e5f1da1089d451f3c431efc635b8e87b064",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/647f7e5f1da1089d451f3c431efc635b8e87b064/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc4137a60c99979b89f75d2bddba96d043f387b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc4137a60c99979b89f75d2bddba96d043f387b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc4137a60c99979b89f75d2bddba96d043f387b8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e457840d1572f69cb8e7c924b87f09d60620b41c",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/647f7e5f1da1089d451f3c431efc635b8e87b064/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/647f7e5f1da1089d451f3c431efc635b8e87b064/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=647f7e5f1da1089d451f3c431efc635b8e87b064",
        "patch": "@@ -446,5 +446,6 @@ mv --no-target-directory \"$OUTDIR\" \"$ACTUAL_OUTDIR\" \\\n         find \"$ACTUAL_OUTDIR\" -type f\n     } | xargs realpath --relative-base=\"$PWD\" \\\n       | xargs sha256sum \\\n+      | sort -k2 \\\n       | sponge \"$ACTUAL_OUTDIR\"/SHA256SUMS.part\n )"
      },
      {
        "sha": "f484ac5774c7e9a29f8b8884863559f27692e19a",
        "filename": "contrib/guix/libexec/codesign.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/647f7e5f1da1089d451f3c431efc635b8e87b064/contrib/guix/libexec/codesign.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/647f7e5f1da1089d451f3c431efc635b8e87b064/contrib/guix/libexec/codesign.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/codesign.sh?ref=647f7e5f1da1089d451f3c431efc635b8e87b064",
        "patch": "@@ -108,5 +108,6 @@ mv --no-target-directory \"$OUTDIR\" \"$ACTUAL_OUTDIR\" \\\n         find \"$ACTUAL_OUTDIR\" -type f\n     } | xargs realpath --relative-base=\"$PWD\" \\\n         | xargs sha256sum \\\n+        | sort -k2 \\\n         | sponge \"$ACTUAL_OUTDIR\"/SHA256SUMS.part\n )"
      }
    ]
  }
]