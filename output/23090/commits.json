[
  {
    "sha": "38e9e9b015b461d8329e8b08e595383ea5c7cc06",
    "node_id": "C_kwDOABII59oAKDM4ZTllOWIwMTViNDYxZDgzMjllOGIwOGU1OTUzODNlYTVjN2NjMDY",
    "commit": {
      "author": {
        "name": "katesalazar",
        "email": "mercedes.catherine.salazar@gmail.com",
        "date": "2021-09-22T20:51:43Z"
      },
      "committer": {
        "name": "katesalazar",
        "email": "mercedes.catherine.salazar@gmail.com",
        "date": "2021-10-01T08:41:09Z"
      },
      "message": "Deprecate `main` and `test` `-chain` params\n\nDeprecate them in favor of `mainnet` and `testnet`, in line with\n`signet`.\n\nExpect plenty of CI protests on this change while I'm figuring it out.\n\n---\n\nRebase helpers (remove before merging)\n\n    grep -r CBaseChainParams::MAIN src/ | sed s/MAINNET/XXX/ | \\\n    grep CBaseChainParams::MAIN | sed s/:.*//\n\n    grep -r '\"main\"' src/ | grep -v Binary | sed s/:.*// | uniq",
      "tree": {
        "sha": "8c72c1c435d0d9e15a98a8f178caab6dbacdfdbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c72c1c435d0d9e15a98a8f178caab6dbacdfdbb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38e9e9b015b461d8329e8b08e595383ea5c7cc06",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38e9e9b015b461d8329e8b08e595383ea5c7cc06",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38e9e9b015b461d8329e8b08e595383ea5c7cc06",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38e9e9b015b461d8329e8b08e595383ea5c7cc06/comments",
    "author": {
      "login": "katesalazar",
      "id": 52637275,
      "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/katesalazar",
      "html_url": "https://github.com/katesalazar",
      "followers_url": "https://api.github.com/users/katesalazar/followers",
      "following_url": "https://api.github.com/users/katesalazar/following{/other_user}",
      "gists_url": "https://api.github.com/users/katesalazar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/katesalazar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
      "organizations_url": "https://api.github.com/users/katesalazar/orgs",
      "repos_url": "https://api.github.com/users/katesalazar/repos",
      "events_url": "https://api.github.com/users/katesalazar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/katesalazar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "katesalazar",
      "id": 52637275,
      "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/katesalazar",
      "html_url": "https://github.com/katesalazar",
      "followers_url": "https://api.github.com/users/katesalazar/followers",
      "following_url": "https://api.github.com/users/katesalazar/following{/other_user}",
      "gists_url": "https://api.github.com/users/katesalazar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/katesalazar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
      "organizations_url": "https://api.github.com/users/katesalazar/orgs",
      "repos_url": "https://api.github.com/users/katesalazar/repos",
      "events_url": "https://api.github.com/users/katesalazar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/katesalazar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e1de1fc59057c5f6fe15a02acd922e158e91292",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e1de1fc59057c5f6fe15a02acd922e158e91292",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e1de1fc59057c5f6fe15a02acd922e158e91292"
      }
    ],
    "stats": {
      "total": 272,
      "additions": 149,
      "deletions": 123
    },
    "files": [
      {
        "sha": "4b32d9febb3bdb9a92115fa7312f462fc3b0dd02",
        "filename": "doc/bitcoin-conf.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/doc/bitcoin-conf.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/doc/bitcoin-conf.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bitcoin-conf.md?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -29,7 +29,7 @@ Comments may appear in two ways:\n ### Network specific options\n \n Network specific options can be:\n-- placed into sections with headers `[main]` (not `[mainnet]`), `[test]` (not `[testnet]`), `[signet]` or `[regtest]`;\n+- placed into sections with headers `[mainnet]`, `[testnet]`, `[signet]` or `[regtest]`;\n - prefixed with a chain name; e.g., `regtest.maxmempool=100`.\n \n Network specific options take precedence over non-network specific options."
      },
      {
        "sha": "115074182e13bbac5e7ac450d80b75cf1c453c42",
        "filename": "src/bench/checkblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/bench/checkblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/bench/checkblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkblock.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -35,7 +35,7 @@ static void DeserializeAndCheckBlockTest(benchmark::Bench& bench)\n     stream.write(&a, 1); // Prevent compaction\n \n     ArgsManager bench_args;\n-    const auto chainParams = CreateChainParams(bench_args, CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(bench_args, CBaseChainParams::MAINNET);\n \n     bench.unit(\"block\").run([&] {\n         CBlock block; // Note that CBlock caches its checked state, so we need to recreate it here"
      },
      {
        "sha": "b6d0080cd1aa66be2e2d0d94ccfc395ce4a1b544",
        "filename": "src/bench/mempool_stress.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/bench/mempool_stress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/bench/mempool_stress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_stress.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -79,7 +79,7 @@ static void ComplexMemPool(benchmark::Bench& bench)\n         ordered_coins.emplace_back(MakeTransactionRef(tx));\n         available_coins.emplace_back(ordered_coins.back(), tx_counter++);\n     }\n-    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>(CBaseChainParams::MAIN);\n+    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>(CBaseChainParams::MAINNET);\n     CTxMemPool pool;\n     LOCK2(cs_main, pool.cs);\n     bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {"
      },
      {
        "sha": "7c0ec51fcd60b8eebcf1bb856ad6ad5ff8aba2c2",
        "filename": "src/bench/rpc_blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/bench/rpc_blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/bench/rpc_blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rpc_blockchain.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -15,7 +15,7 @@\n namespace {\n \n struct TestBlockAndIndex {\n-    const std::unique_ptr<const TestingSetup> testing_setup{MakeNoLogFileContext<const TestingSetup>(CBaseChainParams::MAIN)};\n+    const std::unique_ptr<const TestingSetup> testing_setup{MakeNoLogFileContext<const TestingSetup>(CBaseChainParams::MAINNET)};\n     CBlock block{};\n     uint256 blockHash{};\n     CBlockIndex blockindex{};"
      },
      {
        "sha": "654ea16d0a9155cf445dc6912eb6dd29db50cc49",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -60,7 +60,7 @@ static void SetupCliArgs(ArgsManager& argsman)\n {\n     SetupHelpOptions(argsman);\n \n-    const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n+    const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAINNET);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     const auto signetBaseParams = CreateBaseChainParams(CBaseChainParams::SIGNET);\n     const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);"
      },
      {
        "sha": "232536c57ce555b5c26f516eb471e2c82d532931",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -61,7 +61,7 @@ static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits\n class CMainParams : public CChainParams {\n public:\n     CMainParams() {\n-        strNetworkID = CBaseChainParams::MAIN;\n+        strNetworkID = CBaseChainParams::MAINNET;\n         consensus.signet_blocks = false;\n         consensus.signet_challenge.clear();\n         consensus.nSubsidyHalvingInterval = 210000;\n@@ -565,7 +565,7 @@ const CChainParams &Params() {\n \n std::unique_ptr<const CChainParams> CreateChainParams(const ArgsManager& args, const std::string& chain)\n {\n-    if (chain == CBaseChainParams::MAIN) {\n+    if (chain == CBaseChainParams::MAINNET) {\n         return std::unique_ptr<CChainParams>(new CMainParams());\n     } else if (chain == CBaseChainParams::TESTNET) {\n         return std::unique_ptr<CChainParams>(new CTestNetParams());"
      },
      {
        "sha": "20d2c39f5e7849e4c1172cd629cf6db8bdcb7642",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -10,8 +10,10 @@\n \n #include <assert.h>\n \n-const std::string CBaseChainParams::MAIN = \"main\";\n-const std::string CBaseChainParams::TESTNET = \"test\";\n+/* [[deprecated]] */ const std::string CBaseChainParams::MAIN = \"main\";\n+const std::string CBaseChainParams::MAINNET = \"mainnet\";\n+/* [[deprecated]] */ const std::string CBaseChainParams::TEST = \"test\";\n+const std::string CBaseChainParams::TESTNET = \"testnet\";\n const std::string CBaseChainParams::SIGNET = \"signet\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n \n@@ -42,7 +44,7 @@ const CBaseChainParams& BaseParams()\n  */\n std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain)\n {\n-    if (chain == CBaseChainParams::MAIN) {\n+    if (chain == CBaseChainParams::MAINNET) {\n         return std::make_unique<CBaseChainParams>(\"\", 8332, 8334);\n     } else if (chain == CBaseChainParams::TESTNET) {\n         return std::make_unique<CBaseChainParams>(\"testnet3\", 18332, 18334);"
      },
      {
        "sha": "65b4802cc7f68ad57eda3c651dd41ef46a0638ce",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -19,7 +19,9 @@ class CBaseChainParams\n public:\n     ///@{\n     /** Chain name strings */\n-    static const std::string MAIN;\n+    /* [[deprecated]] */ static const std::string MAIN;\n+    static const std::string MAINNET;\n+    /* [[deprecated]] */ static const std::string TEST;\n     static const std::string TESTNET;\n     static const std::string SIGNET;\n     static const std::string REGTEST;"
      },
      {
        "sha": "5472d4be09416f79a1996a47cb180bea3d1d5c04",
        "filename": "src/external_signer.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/external_signer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/external_signer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/external_signer.h?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -29,7 +29,7 @@ class ExternalSigner\n public:\n     //! @param[in] command      the command which handles interaction with the external signer\n     //! @param[in] fingerprint  master key fingerprint of the signer\n-    //! @param[in] chain        \"main\", \"test\", \"regtest\" or \"signet\"\n+    //! @param[in] chain        \"mainnet\", \"testnet\", \"regtest\" or \"signet\"\n     //! @param[in] name         device name\n     ExternalSigner(const std::string& command, const std::string chain, const std::string& fingerprint, const std::string name);\n \n@@ -42,7 +42,7 @@ class ExternalSigner\n     //! Obtain a list of signers. Calls `<command> enumerate`.\n     //! @param[in]              command the command which handles interaction with the external signer\n     //! @param[in,out] signers  vector to which new signers (with a unique master key fingerprint) are added\n-    //! @param chain            \"main\", \"test\", \"regtest\" or \"signet\"\n+    //! @param chain            \"mainnet\", \"testnet\", \"regtest\" or \"signet\"\n     //! @returns success\n     static bool Enumerate(const std::string& command, std::vector<ExternalSigner>& signers, const std::string chain);\n "
      },
      {
        "sha": "5a9f42d3060dab2571db56df54ca3ffbb93dce5d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -355,11 +355,11 @@ void SetupServerArgs(ArgsManager& argsman)\n \n     init::AddLoggingArgs(argsman);\n \n-    const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n+    const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAINNET);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     const auto signetBaseParams = CreateBaseChainParams(CBaseChainParams::SIGNET);\n     const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n-    const auto defaultChainParams = CreateChainParams(argsman, CBaseChainParams::MAIN);\n+    const auto defaultChainParams = CreateChainParams(argsman, CBaseChainParams::MAINNET);\n     const auto testnetChainParams = CreateChainParams(argsman, CBaseChainParams::TESTNET);\n     const auto signetChainParams = CreateChainParams(argsman, CBaseChainParams::SIGNET);\n     const auto regtestChainParams = CreateChainParams(argsman, CBaseChainParams::REGTEST);"
      },
      {
        "sha": "96622861ee2edadc0fe91d62a1a9ae1f7ece6f99",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -489,8 +489,9 @@ bool LabelOutOfFocusEventFilter::eventFilter(QObject* watched, QEvent* event)\n fs::path static StartupShortcutPath()\n {\n     std::string chain = gArgs.GetChainName();\n-    if (chain == CBaseChainParams::MAIN)\n+    if (chain == CBaseChainParams::MAINNET) {\n         return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin.lnk\";\n+    }\n     if (chain == CBaseChainParams::TESTNET) // Remove this special case when CBaseChainParams::TESTNET = \"testnet4\"\n         return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin (testnet).lnk\";\n     return GetSpecialFolderPath(CSIDL_STARTUP) / strprintf(\"Bitcoin (%s).lnk\", chain);\n@@ -572,8 +573,9 @@ fs::path static GetAutostartDir()\n fs::path static GetAutostartFilePath()\n {\n     std::string chain = gArgs.GetChainName();\n-    if (chain == CBaseChainParams::MAIN)\n+    if (chain == CBaseChainParams::MAINNET) {\n         return GetAutostartDir() / \"bitcoin.desktop\";\n+    }\n     return GetAutostartDir() / strprintf(\"bitcoin-%s.desktop\", chain);\n }\n \n@@ -617,8 +619,9 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n         // Write a bitcoin.desktop file to the autostart directory:\n         optionFile << \"[Desktop Entry]\\n\";\n         optionFile << \"Type=Application\\n\";\n-        if (chain == CBaseChainParams::MAIN)\n+        if (chain == CBaseChainParams::MAINNET) {\n             optionFile << \"Name=Bitcoin\\n\";\n+        }\n         else\n             optionFile << strprintf(\"Name=Bitcoin (%s)\\n\", chain);\n         optionFile << \"Exec=\" << pszExePath << strprintf(\" -min -chain=%s\\n\", chain);"
      },
      {
        "sha": "75a9effb21d1794364237537bdfb81a661902094",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -17,8 +17,8 @@ static const struct {\n     const int iconColorHueShift;\n     const int iconColorSaturationReduction;\n } network_styles[] = {\n-    {\"main\", QAPP_APP_NAME_DEFAULT, 0, 0},\n-    {\"test\", QAPP_APP_NAME_TESTNET, 70, 30},\n+    {\"mainnet\", QAPP_APP_NAME_DEFAULT, 0, 0},\n+    {\"testnet\", QAPP_APP_NAME_TESTNET, 70, 30},\n     {\"signet\", QAPP_APP_NAME_SIGNET, 35, 15},\n     {\"regtest\", QAPP_APP_NAME_REGTEST, 160, 30},\n };\n@@ -79,7 +79,7 @@ NetworkStyle::NetworkStyle(const QString &_appName, const int iconColorHueShift,\n \n const NetworkStyle* NetworkStyle::instantiate(const std::string& networkId)\n {\n-    std::string titleAddText = networkId == CBaseChainParams::MAIN ? \"\" : strprintf(\"[%s]\", networkId);\n+    std::string titleAddText = networkId == CBaseChainParams::MAINNET ? \"\" : strprintf(\"[%s]\", networkId);\n     for (const auto& network_style : network_styles) {\n         if (networkId == network_style.networkId) {\n             return new NetworkStyle("
      },
      {
        "sha": "bc4e183b5baacb62fed83d45492fa45df10ecc70",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -93,10 +93,10 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n             SendCoinsRecipient r;\n             if (GUIUtil::parseBitcoinURI(arg, &r) && !r.address.isEmpty())\n             {\n-                auto tempChainParams = CreateChainParams(gArgs, CBaseChainParams::MAIN);\n+                auto tempChainParams = CreateChainParams(gArgs, CBaseChainParams::MAINNET);\n \n                 if (IsValidDestinationString(r.address.toStdString(), *tempChainParams)) {\n-                    SelectParams(CBaseChainParams::MAIN);\n+                    SelectParams(CBaseChainParams::MAINNET);\n                 } else {\n                     tempChainParams = CreateChainParams(gArgs, CBaseChainParams::TESTNET);\n                     if (IsValidDestinationString(r.address.toStdString(), *tempChainParams)) {"
      },
      {
        "sha": "8d5070ebc0d3fc0017e95497ff27539b620103a5",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -55,7 +55,7 @@ void RPCNestedTests::rpcNestedTests()\n     std::string result2;\n     std::string filtered;\n     RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo()[chain]\", &filtered); //simple result filtering with path\n-    QVERIFY(result==\"main\");\n+    QVERIFY(result==\"mainnet\");\n     QVERIFY(filtered == \"getblockchaininfo()[chain]\");\n \n     RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblock(getbestblockhash())\"); //simple 2 level nesting"
      },
      {
        "sha": "76ca10c6263d062f595986dd6853f4840cd54ae3",
        "filename": "src/test/data/key_io_valid.json",
        "status": "modified",
        "additions": 36,
        "deletions": 36,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/data/key_io_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/data/key_io_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/key_io_valid.json?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -3,31 +3,31 @@\n         \"1BShJZ8A5q53oJJfMJoEF1gfZCWdZqZwwD\",\n         \"76a914728d4cc27d19707b0197cfcd7c412d43287864b588ac\",\n         {\n-            \"chain\": \"main\",\n+            \"chain\": \"mainnet\",\n             \"isPrivkey\": false\n         }\n     ],\n     [\n         \"3L1YkZjdeNSqaZcNKZFXQfyokx3zVYm7r6\",\n         \"a914c8f37c3cc21561296ad81f4bec6b5de10ebc185187\",\n         {\n-            \"chain\": \"main\",\n+            \"chain\": \"mainnet\",\n             \"isPrivkey\": false\n         }\n     ],\n     [\n         \"mhJuoGLgnJC8gdBgBzEigsoyG4omQXejPT\",\n         \"76a91413a92d1998e081354d36c13ce0c9dc04b865d40a88ac\",\n         {\n-            \"chain\": \"test\",\n+            \"chain\": \"testnet\",\n             \"isPrivkey\": false\n         }\n     ],\n     [\n         \"2N5VpzKEuYvZJbmg6eUNGnfrrD1ir92FWGu\",\n         \"a91486648cc2faaf05660e72c04c7a837bcc3e986f1787\",\n         {\n-            \"chain\": \"test\",\n+            \"chain\": \"testnet\",\n             \"isPrivkey\": false\n         }\n     ],\n@@ -67,7 +67,7 @@\n         \"5KcrFZvJ2p4dM6QVUPu53cKXcCfozA1PJLHm1mNAxkDYhgThLu4\",\n         \"ed6c796e2f62377410766214f55aa81ac9a6590ad7ed57c509c983bf648409ac\",\n         {\n-            \"chain\": \"main\",\n+            \"chain\": \"mainnet\",\n             \"isCompressed\": false,\n             \"isPrivkey\": true\n         }\n@@ -76,7 +76,7 @@\n         \"L195WBrf2G3nCnun4CLxrb8XKk9LbCqH43THh4n4QrL5SzRzpq9j\",\n         \"74f76c106e38d20514a99a86e4fe3bb28319e7dd2ad21dbc170cbb516a5358fa\",\n         {\n-            \"chain\": \"main\",\n+            \"chain\": \"mainnet\",\n             \"isCompressed\": true,\n             \"isPrivkey\": true\n         }\n@@ -85,7 +85,7 @@\n         \"92z6HnMQR4tWqjfVA3UaUN5EuUMgoVMdCa5rZFYZfmgyD7wxYCw\",\n         \"b8511e1d74549e305517d48a1d394d1be2cfa5d0f3c0d83f9f450316ffa01276\",\n         {\n-            \"chain\": \"test\",\n+            \"chain\": \"testnet\",\n             \"isCompressed\": false,\n             \"isPrivkey\": true\n         }\n@@ -94,7 +94,7 @@\n         \"cTPnaF52x4w4Tq6afPxRHux3wbYb86thS7S45A7r3oZc1AHTQ6Qm\",\n         \"ad68c48d337181da125de9061933ececcdf7d917631af7d34f7e38082bff9a11\",\n         {\n-            \"chain\": \"test\",\n+            \"chain\": \"testnet\",\n             \"isCompressed\": true,\n             \"isPrivkey\": true\n         }\n@@ -139,7 +139,7 @@\n         \"bc1q5cuatynjmk4szh40mmunszfzh7zrc5xm9w8ccy\",\n         \"0014a639d59272ddab015eafdef9380922bf843c50db\",\n         {\n-            \"chain\": \"main\",\n+            \"chain\": \"mainnet\",\n             \"isPrivkey\": false,\n             \"tryCaseFlip\": true\n         }\n@@ -148,7 +148,7 @@\n         \"bc1qkw7lz3ahms6e0ajv27mzh7g62tchjpmve4afc29u7w49tddydy2syv0087\",\n         \"0020b3bdf147b7dc3597f64c57b62bf91a52f179076ccd7a9c28bcf3aa55b5a46915\",\n         {\n-            \"chain\": \"main\",\n+            \"chain\": \"mainnet\",\n             \"isPrivkey\": false,\n             \"tryCaseFlip\": true\n         }\n@@ -157,7 +157,7 @@\n         \"bc1p5rgvqejqh9dh37t9g94dd9cm8vtqns7dndgj423egwggsggcdzmsspvr7j\",\n         \"5120a0d0c06640b95b78f965416ad6971b3b1609c3cd9b512aaa39439088211868b7\",\n         {\n-            \"chain\": \"main\",\n+            \"chain\": \"mainnet\",\n             \"isPrivkey\": false,\n             \"tryCaseFlip\": true\n         }\n@@ -166,7 +166,7 @@\n         \"bc1zr4pq63udck\",\n         \"52021d42\",\n         {\n-            \"chain\": \"main\",\n+            \"chain\": \"mainnet\",\n             \"isPrivkey\": false,\n             \"tryCaseFlip\": true\n         }\n@@ -175,7 +175,7 @@\n         \"tb1q74fxwnvhsue0l8wremgq66xzvn48jlc5zthsvz\",\n         \"0014f552674d978732ff9dc3ced00d68c264ea797f14\",\n         {\n-            \"chain\": \"test\",\n+            \"chain\": \"testnet\",\n             \"isPrivkey\": false,\n             \"tryCaseFlip\": true\n         }\n@@ -184,7 +184,7 @@\n         \"tb1qpt7cqgq8ukv92dcraun9c3n0s3aswrt62vtv8nqmkfpa2tjfghesv9ln74\",\n         \"00200afd802007e598553703ef265c466f847b070d7a5316c3cc1bb243d52e4945f3\",\n         {\n-            \"chain\": \"test\",\n+            \"chain\": \"testnet\",\n             \"isPrivkey\": false,\n             \"tryCaseFlip\": true\n         }\n@@ -193,7 +193,7 @@\n         \"tb1ph9v3e8nxct57hknlkhkz75p5pnxnkn05cw8ewpxu6tek56g29xgqydzfu7\",\n         \"5120b9591c9e66c2e9ebda7fb5ec2f50340ccd3b4df4c38f9704dcd2f36a690a2990\",\n         {\n-            \"chain\": \"test\",\n+            \"chain\": \"testnet\",\n             \"isPrivkey\": false,\n             \"tryCaseFlip\": true\n         }\n@@ -202,7 +202,7 @@\n         \"tb1ray6e8gxfx49ers6c4c70l3c8lsxtcmlx\",\n         \"5310e93593a0c9354b91c358ae3cffc707fc\",\n         {\n-            \"chain\": \"test\",\n+            \"chain\": \"testnet\",\n             \"isPrivkey\": false,\n             \"tryCaseFlip\": true\n         }\n@@ -283,31 +283,31 @@\n         \"16y3Q1XVRZqMR9T1XL1FkvNtD2E1bXBuYa\",\n         \"76a9144171ec673aeb9fcf42af6094a3c82207e3b9a78188ac\",\n         {\n-            \"chain\": \"main\",\n+            \"chain\": \"mainnet\",\n             \"isPrivkey\": false\n         }\n     ],\n     [\n         \"3CmZZnAiHVQgiAKSakf864oJMxN2BP1eLC\",\n         \"a914798575fc1041b9440c4e63c28e57e597d00b7e4387\",\n         {\n-            \"chain\": \"main\",\n+            \"chain\": \"mainnet\",\n             \"isPrivkey\": false\n         }\n     ],\n     [\n         \"mtCB3SoBo7EYUv8j54kUubGY4x3aJPY8nk\",\n         \"76a9148b0c5f9ee714e0d1d24642ad63d9d5f398d9b56588ac\",\n         {\n-            \"chain\": \"test\",\n+            \"chain\": \"testnet\",\n             \"isPrivkey\": false\n         }\n     ],\n     [\n         \"2N5ymzzKpx6EdUR4UdMZ7t9hcuwqtpHwgw5\",\n         \"a9148badb3c3b5c0d39f906f7618e0018b7eae4baf7387\",\n         {\n-            \"chain\": \"test\",\n+            \"chain\": \"testnet\",\n             \"isPrivkey\": false\n         }\n     ],\n@@ -347,7 +347,7 @@\n         \"5JUHCgyxNSHg64wwju72eNsG6ajqo4Z2fHHw9iLDLfh69rSiL7w\",\n         \"5644d06d88855dacf3192a31df8f4acd8e4c155c52a86d2c1fa48303f5cff053\",\n         {\n-            \"chain\": \"main\",\n+            \"chain\": \"mainnet\",\n             \"isCompressed\": false,\n             \"isPrivkey\": true\n         }\n@@ -356,7 +356,7 @@\n         \"L2kZaexG69VSriMe9T2m1jkS86iPe3xNbjcdfakRC1PHe7ay78Ji\",\n         \"a50ee94aefcabf5a5d7c85be5b3844dee03c5604861dbfc77fe388c91e5a30f8\",\n         {\n-            \"chain\": \"main\",\n+            \"chain\": \"mainnet\",\n             \"isCompressed\": true,\n             \"isPrivkey\": true\n         }\n@@ -365,7 +365,7 @@\n         \"927JwT1ViCr5TD2ZX8CsMNhg17dXmou5xu4y2KiH54zD7i34UJq\",\n         \"4502a54c0026b0150281d41f40860d1e23870c63cdc32645bbed688f2ee41f64\",\n         {\n-            \"chain\": \"test\",\n+            \"chain\": \"testnet\",\n             \"isCompressed\": false,\n             \"isPrivkey\": true\n         }\n@@ -374,7 +374,7 @@\n         \"cTpGGNPVy2Eagawohbr4aGtRJzpLnjxGsGYh9DUcBM45f3KdKGF6\",\n         \"ba005a0cb39587aab00bd54c848b59e8adaed47403228567ddc739c2a344ff59\",\n         {\n-            \"chain\": \"test\",\n+            \"chain\": \"testnet\",\n             \"isCompressed\": true,\n             \"isPrivkey\": true\n         }\n@@ -419,7 +419,7 @@\n         \"bc1qz377zwe5awr68dnggengqx9vrjt05k98q3sw2n\",\n         \"0014147de13b34eb87a3b66846668018ac1c96fa58a7\",\n         {\n-            \"chain\": \"main\",\n+            \"chain\": \"mainnet\",\n             \"isPrivkey\": false,\n             \"tryCaseFlip\": true\n         }\n@@ -428,7 +428,7 @@\n         \"bc1qkmhskpdzg8kdkfywhu09kswwn9qan9vnkrf6mk40jvnr06s6sz5ssf82ya\",\n         \"0020b6ef0b05a241ecdb248ebf1e5b41ce9941d99593b0d3addaaf932637ea1a80a9\",\n         {\n-            \"chain\": \"main\",\n+            \"chain\": \"mainnet\",\n             \"isPrivkey\": false,\n             \"tryCaseFlip\": true\n         }\n@@ -437,7 +437,7 @@\n         \"bc1ps8cndas60cntk8x79sg9f5e5jz7x050z8agyugln2ukkks23rryqpejzkc\",\n         \"512081f136f61a7e26bb1cde2c1054d33490bc67d1e23f504e23f3572d6b415118c8\",\n         {\n-            \"chain\": \"main\",\n+            \"chain\": \"mainnet\",\n             \"isPrivkey\": false,\n             \"tryCaseFlip\": true\n         }\n@@ -446,7 +446,7 @@\n         \"bc1zn4tsczge9l\",\n         \"52029d57\",\n         {\n-            \"chain\": \"main\",\n+            \"chain\": \"mainnet\",\n             \"isPrivkey\": false,\n             \"tryCaseFlip\": true\n         }\n@@ -455,7 +455,7 @@\n         \"tb1q6xw0wwd9n9d7ge87dryz4vm5vtahzhvz6yett3\",\n         \"0014d19cf739a5995be464fe68c82ab37462fb715d82\",\n         {\n-            \"chain\": \"test\",\n+            \"chain\": \"testnet\",\n             \"isPrivkey\": false,\n             \"tryCaseFlip\": true\n         }\n@@ -464,7 +464,7 @@\n         \"tb1qwn9zq9fu5uk35ykpgsc7rz4uawy4yh0r5m5er26768h5ur50su3qj6evun\",\n         \"002074ca20153ca72d1a12c14431e18abceb89525de3a6e991ab5ed1ef4e0e8f8722\",\n         {\n-            \"chain\": \"test\",\n+            \"chain\": \"testnet\",\n             \"isPrivkey\": false,\n             \"tryCaseFlip\": true\n         }\n@@ -473,7 +473,7 @@\n         \"tb1pmcdc5d8gr92rtemfsnhpeqanvs0nr82upn5dktxluz9n0qcv34lqxke0wq\",\n         \"5120de1b8a34e8195435e76984ee1c83b3641f319d5c0ce8db2cdfe08b37830c8d7e\",\n         {\n-            \"chain\": \"test\",\n+            \"chain\": \"testnet\",\n             \"isPrivkey\": false,\n             \"tryCaseFlip\": true\n         }\n@@ -482,7 +482,7 @@\n         \"tb1rgxjvtfzp0xczz6dlzqv8d5cmuykk4qkk\",\n         \"531041a4c5a44179b02169bf101876d31be1\",\n         {\n-            \"chain\": \"test\",\n+            \"chain\": \"testnet\",\n             \"isPrivkey\": false,\n             \"tryCaseFlip\": true\n         }\n@@ -563,31 +563,31 @@\n         \"12agZTajtRE3STSchwWNWnrm467zzTQ916\",\n         \"76a9141156e00f70061e5faba8b71593a8c7554b47090c88ac\",\n         {\n-            \"chain\": \"main\",\n+            \"chain\": \"mainnet\",\n             \"isPrivkey\": false\n         }\n     ],\n     [\n         \"3NXqB6iZiPYbKruNT3d9xNBTmtb73xMvvf\",\n         \"a914e49decc9e5d97e0547d3642f3a4795b13ae62bca87\",\n         {\n-            \"chain\": \"main\",\n+            \"chain\": \"mainnet\",\n             \"isPrivkey\": false\n         }\n     ],\n     [\n         \"mjgt4BoCYxjzWvJFoh68x7cj5GeaKDYhyx\",\n         \"76a9142dc11fc7b8072f733f690ffb0591c00f4062295c88ac\",\n         {\n-            \"chain\": \"test\",\n+            \"chain\": \"testnet\",\n             \"isPrivkey\": false\n         }\n     ],\n     [\n         \"2NCT6FdQ5MxorHgnFxLeHyGwTGRdkHcrJDH\",\n         \"a914d2a8ec992b0894a0d9391ca5d9c45c388c41be7e87\",\n         {\n-            \"chain\": \"test\",\n+            \"chain\": \"testnet\",\n             \"isPrivkey\": false\n         }\n     ],"
      },
      {
        "sha": "efb29bb46f71b3adb17ee80068257927f74a890c",
        "filename": "src/test/fuzz/descriptor_parse.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/fuzz/descriptor_parse.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/fuzz/descriptor_parse.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/descriptor_parse.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -11,7 +11,7 @@ void initialize_descriptor_parse()\n {\n     static const ECCVerifyHandle verify_handle;\n     ECC_Start();\n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(CBaseChainParams::MAINNET);\n }\n \n FUZZ_TARGET_INIT(descriptor_parse, initialize_descriptor_parse)"
      },
      {
        "sha": "095f2fd6f67076ff079c002d5835298c7d0f70cd",
        "filename": "src/test/fuzz/key_io.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/fuzz/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/fuzz/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/key_io.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -15,7 +15,7 @@ void initialize_key_io()\n {\n     static const ECCVerifyHandle verify_handle;\n     ECC_Start();\n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(CBaseChainParams::MAINNET);\n }\n \n FUZZ_TARGET_INIT(key_io, initialize_key_io)"
      },
      {
        "sha": "e34b141794f87d442c4e8c9be182aabd7a504f3c",
        "filename": "src/test/fuzz/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/fuzz/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/fuzz/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -23,7 +23,7 @@\n \n void initialize_net()\n {\n-    static const auto testing_setup = MakeNoLogFileContext<>(CBaseChainParams::MAIN);\n+    static const auto testing_setup = MakeNoLogFileContext<>(CBaseChainParams::MAINNET);\n }\n \n FUZZ_TARGET_INIT(net, initialize_net)"
      },
      {
        "sha": "50e47988aa714b626d354e31f01dd7a11529236e",
        "filename": "src/test/fuzz/pow.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/fuzz/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/fuzz/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/pow.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -17,7 +17,7 @@\n \n void initialize_pow()\n {\n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(CBaseChainParams::MAINNET);\n }\n \n FUZZ_TARGET_INIT(pow, initialize_pow)"
      },
      {
        "sha": "ef3343d4a8676f5481cfcf4e57c1cda4440393dc",
        "filename": "src/test/fuzz/versionbits.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/fuzz/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/fuzz/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/versionbits.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -104,7 +104,7 @@ std::unique_ptr<const CChainParams> g_params;\n void initialize()\n {\n     // this is actually comparatively slow, so only do it once\n-    g_params = CreateChainParams(ArgsManager{}, CBaseChainParams::MAIN);\n+    g_params = CreateChainParams(ArgsManager{}, CBaseChainParams::MAINNET);\n     assert(g_params != nullptr);\n }\n "
      },
      {
        "sha": "8747034dc29d06127000a80b8d2923225d6717d6",
        "filename": "src/test/key_io_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/key_io_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/key_io_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_io_tests.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -25,7 +25,7 @@ BOOST_AUTO_TEST_CASE(key_io_valid_parse)\n     UniValue tests = read_json(std::string(json_tests::key_io_valid, json_tests::key_io_valid + sizeof(json_tests::key_io_valid)));\n     CKey privkey;\n     CTxDestination destination;\n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(CBaseChainParams::MAINNET);\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n@@ -114,7 +114,7 @@ BOOST_AUTO_TEST_CASE(key_io_valid_gen)\n         }\n     }\n \n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(CBaseChainParams::MAINNET);\n }\n \n \n@@ -136,7 +136,8 @@ BOOST_AUTO_TEST_CASE(key_io_invalid)\n         std::string exp_base58string = test[0].get_str();\n \n         // must be invalid as public and as private key\n-        for (const auto& chain : { CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::SIGNET, CBaseChainParams::REGTEST }) {\n+        for (const auto & chain : { CBaseChainParams::MAINNET, CBaseChainParams::TESTNET,\n+                                    CBaseChainParams::SIGNET, CBaseChainParams::REGTEST }) {\n             SelectParams(chain);\n             destination = DecodeDestination(exp_base58string);\n             BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid pubkey in mainnet:\" + strTest);"
      },
      {
        "sha": "3827b914c0e64428a9b8e627ceeba36e5cdfea7c",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -192,7 +192,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n     // Note that by default, these tests run with size accounting enabled.\n-    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(* m_node.args, CBaseChainParams::MAINNET);\n     const CChainParams& chainparams = *chainParams;\n     CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     std::unique_ptr<CBlockTemplate> pblocktemplate;"
      },
      {
        "sha": "7feca4f60eca978b259e83e19328733a8acf57c4",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -14,7 +14,7 @@ BOOST_FIXTURE_TEST_SUITE(pow_tests, BasicTestingSetup)\n /* Test calculation of next difficulty target with no constraints applying */\n BOOST_AUTO_TEST_CASE(get_next_work)\n {\n-    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(* m_node.args, CBaseChainParams::MAINNET);\n     int64_t nLastRetargetTime = 1261130161; // Block #30240\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 32255;\n@@ -26,7 +26,7 @@ BOOST_AUTO_TEST_CASE(get_next_work)\n /* Test the constraint on the upper bound for next work */\n BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n {\n-    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(* m_node.args, CBaseChainParams::MAINNET);\n     int64_t nLastRetargetTime = 1231006505; // Block #0\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 2015;\n@@ -38,7 +38,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n /* Test the constraint on the lower bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n {\n-    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(* m_node.args, CBaseChainParams::MAINNET);\n     int64_t nLastRetargetTime = 1279008237; // Block #66528\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 68543;\n@@ -50,7 +50,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n /* Test the constraint on the upper bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n {\n-    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(* m_node.args, CBaseChainParams::MAINNET);\n     int64_t nLastRetargetTime = 1263163443; // NOTE: Not an actual block time\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 46367;\n@@ -61,7 +61,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n \n BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_negative_target)\n {\n-    const auto consensus = CreateChainParams(*m_node.args, CBaseChainParams::MAIN)->GetConsensus();\n+    const auto consensus = CreateChainParams(* m_node.args, CBaseChainParams::MAINNET)->GetConsensus();\n     uint256 hash;\n     unsigned int nBits;\n     nBits = UintToArith256(consensus.powLimit).GetCompact(true);\n@@ -71,7 +71,7 @@ BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_negative_target)\n \n BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_overflow_target)\n {\n-    const auto consensus = CreateChainParams(*m_node.args, CBaseChainParams::MAIN)->GetConsensus();\n+    const auto consensus = CreateChainParams(* m_node.args, CBaseChainParams::MAINNET)->GetConsensus();\n     uint256 hash;\n     unsigned int nBits = ~0x00800000;\n     hash.SetHex(\"0x1\");\n@@ -80,7 +80,7 @@ BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_overflow_target)\n \n BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_too_easy_target)\n {\n-    const auto consensus = CreateChainParams(*m_node.args, CBaseChainParams::MAIN)->GetConsensus();\n+    const auto consensus = CreateChainParams(* m_node.args, CBaseChainParams::MAINNET)->GetConsensus();\n     uint256 hash;\n     unsigned int nBits;\n     arith_uint256 nBits_arith = UintToArith256(consensus.powLimit);\n@@ -92,7 +92,7 @@ BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_too_easy_target)\n \n BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_biger_hash_than_target)\n {\n-    const auto consensus = CreateChainParams(*m_node.args, CBaseChainParams::MAIN)->GetConsensus();\n+    const auto consensus = CreateChainParams(* m_node.args, CBaseChainParams::MAINNET)->GetConsensus();\n     uint256 hash;\n     unsigned int nBits;\n     arith_uint256 hash_arith = UintToArith256(consensus.powLimit);\n@@ -104,7 +104,7 @@ BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_biger_hash_than_target)\n \n BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_zero_target)\n {\n-    const auto consensus = CreateChainParams(*m_node.args, CBaseChainParams::MAIN)->GetConsensus();\n+    const auto consensus = CreateChainParams(* m_node.args, CBaseChainParams::MAINNET)->GetConsensus();\n     uint256 hash;\n     unsigned int nBits;\n     arith_uint256 hash_arith{0};\n@@ -115,7 +115,7 @@ BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_zero_target)\n \n BOOST_AUTO_TEST_CASE(GetBlockProofEquivalentTime_test)\n {\n-    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(* m_node.args, CBaseChainParams::MAINNET);\n     std::vector<CBlockIndex> blocks(10000);\n     for (int i = 0; i < 10000; i++) {\n         blocks[i].pprev = i ? &blocks[i - 1] : nullptr;\n@@ -164,22 +164,22 @@ void sanity_check_chainparams(const ArgsManager& args, std::string chainName)\n \n BOOST_AUTO_TEST_CASE(ChainParams_MAIN_sanity)\n {\n-    sanity_check_chainparams(*m_node.args, CBaseChainParams::MAIN);\n+    sanity_check_chainparams(* m_node.args, CBaseChainParams::MAINNET);\n }\n \n BOOST_AUTO_TEST_CASE(ChainParams_REGTEST_sanity)\n {\n-    sanity_check_chainparams(*m_node.args, CBaseChainParams::REGTEST);\n+    sanity_check_chainparams(* m_node.args, CBaseChainParams::REGTEST);\n }\n \n BOOST_AUTO_TEST_CASE(ChainParams_TESTNET_sanity)\n {\n-    sanity_check_chainparams(*m_node.args, CBaseChainParams::TESTNET);\n+    sanity_check_chainparams(* m_node.args, CBaseChainParams::TESTNET);\n }\n \n BOOST_AUTO_TEST_CASE(ChainParams_SIGNET_sanity)\n {\n-    sanity_check_chainparams(*m_node.args, CBaseChainParams::SIGNET);\n+    sanity_check_chainparams(* m_node.args, CBaseChainParams::SIGNET);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "9dfc729de5314078b17e17b3a3feb04727cccfb4",
        "filename": "src/test/settings_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/settings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/settings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/settings_tests.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -183,7 +183,7 @@ BOOST_FIXTURE_TEST_CASE(Merge, MergeTestingSetup)\n         if (!out_file) throw std::system_error(errno, std::generic_category(), \"fopen failed\");\n     }\n \n-    const std::string& network = CBaseChainParams::MAIN;\n+    const std::string & network = CBaseChainParams::MAINNET;\n     ForEachMergeSetup([&](const ActionList& arg_actions, const ActionList& conf_actions, bool force_set,\n                           bool ignore_default_section_config) {\n         std::string desc;\n@@ -252,7 +252,7 @@ BOOST_FIXTURE_TEST_CASE(Merge, MergeTestingSetup)\n     // Results file is formatted like:\n     //\n     //   <input> || GetSetting() | GetSettingsList() | OnlyHasDefaultSectionSetting()\n-    BOOST_CHECK_EQUAL(out_sha_hex, \"79db02d74e3e193196541b67c068b40ebd0c124a24b3ecbe9cbf7e85b1c4ba7a\");\n+    BOOST_CHECK_EQUAL(out_sha_hex, \"1c148e00e7a4b6291162dd70687e82abc606e94d295acac5b6ff577195fb42a4\");\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "35da7dddaeb84957660d28aba31ca32fd629c7c2",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -77,7 +77,8 @@ struct BasicTestingSetup {\n     ECCVerifyHandle globalVerifyHandle;\n     NodeContext m_node;\n \n-    explicit BasicTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {});\n+    explicit BasicTestingSetup(const std::string & chainName = CBaseChainParams::MAINNET,\n+                               const std::vector<const char *> & extra_args = {});\n     ~BasicTestingSetup();\n \n     const fs::path m_path_root;\n@@ -90,14 +91,16 @@ struct BasicTestingSetup {\n  */\n struct ChainTestingSetup : public BasicTestingSetup {\n \n-    explicit ChainTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {});\n+    explicit ChainTestingSetup(const std::string & chainName = CBaseChainParams::MAINNET,\n+                               const std::vector<const char *> & extra_args = {});\n     ~ChainTestingSetup();\n };\n \n /** Testing setup that configures a complete environment.\n  */\n struct TestingSetup : public ChainTestingSetup {\n-    explicit TestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {});\n+    explicit TestingSetup(const std::string & chainName = CBaseChainParams::MAINNET,\n+                          const std::vector<const char *> & extra_args = {});\n };\n \n /** Identical to TestingSetup, but chain set to regtest */"
      },
      {
        "sha": "17953be56895b11b631e357313906a198fa577bf",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 16,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -741,7 +741,7 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     test_args.SetNetworkOnlyArg(\"-ccc\");\n     test_args.SetNetworkOnlyArg(\"-h\");\n \n-    test_args.SelectConfigNetwork(CBaseChainParams::MAIN);\n+    test_args.SelectConfigNetwork(CBaseChainParams::MAINNET);\n     BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"e\");\n     BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2);\n     BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"0\");\n@@ -816,59 +816,59 @@ BOOST_AUTO_TEST_CASE(util_GetChainName)\n     std::string error;\n \n     BOOST_CHECK(test_args.ParseParameters(0, (char**)argv_testnet, error));\n-    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"main\");\n+    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"mainnet\");\n \n     BOOST_CHECK(test_args.ParseParameters(2, (char**)argv_testnet, error));\n-    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"testnet\");\n \n     BOOST_CHECK(test_args.ParseParameters(2, (char**)argv_regtest, error));\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"regtest\");\n \n     BOOST_CHECK(test_args.ParseParameters(3, (char**)argv_test_no_reg, error));\n-    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"testnet\");\n \n     BOOST_CHECK(test_args.ParseParameters(3, (char**)argv_both, error));\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n \n     BOOST_CHECK(test_args.ParseParameters(0, (char**)argv_testnet, error));\n     test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"testnet\");\n \n     BOOST_CHECK(test_args.ParseParameters(2, (char**)argv_testnet, error));\n     test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"testnet\");\n \n     BOOST_CHECK(test_args.ParseParameters(2, (char**)argv_regtest, error));\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n \n     BOOST_CHECK(test_args.ParseParameters(3, (char**)argv_test_no_reg, error));\n     test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"testnet\");\n \n     BOOST_CHECK(test_args.ParseParameters(3, (char**)argv_both, error));\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n \n     // check setting the network to test (and thus making\n     // [test] regtest=1 potentially relevant) doesn't break things\n-    test_args.SelectConfigNetwork(\"test\");\n+    test_args.SelectConfigNetwork(\"testnet\");\n \n     BOOST_CHECK(test_args.ParseParameters(0, (char**)argv_testnet, error));\n     test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"testnet\");\n \n     BOOST_CHECK(test_args.ParseParameters(2, (char**)argv_testnet, error));\n     test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"testnet\");\n \n     BOOST_CHECK(test_args.ParseParameters(2, (char**)argv_regtest, error));\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n \n     BOOST_CHECK(test_args.ParseParameters(2, (char**)argv_test_no_reg, error));\n     test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"testnet\");\n \n     BOOST_CHECK(test_args.ParseParameters(3, (char**)argv_both, error));\n     test_args.ReadConfigString(testnetconf);\n@@ -889,7 +889,7 @@ BOOST_AUTO_TEST_CASE(util_GetChainName)\n //\n // - Combining SoftSet and ForceSet calls.\n //\n-// - Testing \"main\" and \"test\" network values to make sure settings from network\n+// - Testing \"mainnet\" and \"testnet\" network values to make sure settings from network\n //   sections are applied and to check for mainnet-specific behaviors like\n //   inheriting settings from the default section.\n //\n@@ -916,8 +916,10 @@ struct ArgsMergeTestingSetup : public BasicTestingSetup {\n             ForEachNoDup(conf_actions, SET, SECTION_NEGATE, [&] {\n                 for (bool soft_set : {false, true}) {\n                     for (bool force_set : {false, true}) {\n-                        for (const std::string& section : {CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::SIGNET}) {\n-                            for (const std::string& network : {CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::SIGNET}) {\n+                        for (const std::string & section : { CBaseChainParams::MAINNET, CBaseChainParams::TESTNET,\n+                                                             CBaseChainParams::SIGNET}) {\n+                            for (const std::string & network : { CBaseChainParams::MAINNET, CBaseChainParams::TESTNET,\n+                                                                 CBaseChainParams::SIGNET}) {\n                                 for (bool net_specific : {false, true}) {\n                                     fn(arg_actions, conf_actions, soft_set, force_set, section, network, net_specific);\n                                 }\n@@ -1071,7 +1073,7 @@ BOOST_FIXTURE_TEST_CASE(util_ArgsMerge, ArgsMergeTestingSetup)\n     // Results file is formatted like:\n     //\n     //   <input> || <IsArgSet/IsArgNegated/GetArg output> | <GetArgs output> | <GetUnsuitable output>\n-    BOOST_CHECK_EQUAL(out_sha_hex, \"d1e436c1cd510d0ec44d5205d4b4e3bee6387d316e0075c58206cb16603f3d82\");\n+    BOOST_CHECK_EQUAL(out_sha_hex, \"99ddcb43f22fd6ee9e4d954a97cc6bd2552ecd74819cceb0e0b7a577621e254d\");\n }\n \n // Similar test as above, but for ArgsManager::GetChainName function.\n@@ -1174,7 +1176,7 @@ BOOST_FIXTURE_TEST_CASE(util_ChainMerge, ChainMergeTestingSetup)\n     // Results file is formatted like:\n     //\n     //   <input> || <output>\n-    BOOST_CHECK_EQUAL(out_sha_hex, \"f263493e300023b6509963887444c41386f44b63bc30047eb8402e8c1144854c\");\n+    BOOST_CHECK_EQUAL(out_sha_hex, \"3de27eac4523a2a5e9966caecc37937908b997ddc20ec55dfb6a091322ef5568\");\n }\n \n BOOST_AUTO_TEST_CASE(util_ReadWriteSettings)"
      },
      {
        "sha": "9eaab563eff466e1043cc89a5b2c3d7a01ae61b4",
        "filename": "src/test/validation_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/validation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/validation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_tests.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -40,15 +40,15 @@ static void TestBlockSubsidyHalvings(int nSubsidyHalvingInterval)\n \n BOOST_AUTO_TEST_CASE(block_subsidy_test)\n {\n-    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(* m_node.args, CBaseChainParams::MAINNET);\n     TestBlockSubsidyHalvings(chainParams->GetConsensus()); // As in main\n     TestBlockSubsidyHalvings(150); // As in regtest\n     TestBlockSubsidyHalvings(1000); // Just another interval\n }\n \n BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n {\n-    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(* m_node.args, CBaseChainParams::MAINNET);\n     CAmount nSum = 0;\n     for (int nHeight = 0; nHeight < 14000000; nHeight += 1000) {\n         CAmount nSubsidy = GetBlockSubsidy(nHeight, chainParams->GetConsensus());"
      },
      {
        "sha": "1b10eaccb373567698d6b63c60e578e832f89a17",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -416,7 +416,8 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n {\n     // check that any deployment on any chain can conceivably reach both\n     // ACTIVE and FAILED states in roughly the way we expect\n-    for (const auto& chain_name : {CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::SIGNET, CBaseChainParams::REGTEST}) {\n+    for (const auto & chain_name : { CBaseChainParams::MAINNET, CBaseChainParams::TESTNET,\n+                                     CBaseChainParams::SIGNET, CBaseChainParams::REGTEST}) {\n         const auto chainParams = CreateChainParams(*m_node.args, chain_name);\n         uint32_t chain_all_vbits{0};\n         for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++i) {"
      },
      {
        "sha": "ace7e941ae14d44209e3b416d67797dc094a40a3",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -269,7 +269,9 @@ const std::set<std::string> ArgsManager::GetUnsuitableSectionOnlyArgs() const\n     if (m_network.empty()) return std::set<std::string> {};\n \n     // if it's okay to use the default section for this network, don't worry\n-    if (m_network == CBaseChainParams::MAIN) return std::set<std::string> {};\n+    if (m_network == CBaseChainParams::MAINNET) {\n+        return std::set<std::string> {};\n+    }\n \n     for (const auto& arg : m_network_only_args) {\n         if (OnlyHasDefaultSectionSetting(m_settings, m_network, SettingName(arg))) {\n@@ -286,7 +288,7 @@ const std::list<SectionInfo> ArgsManager::GetUnrecognizedSections() const\n         CBaseChainParams::REGTEST,\n         CBaseChainParams::SIGNET,\n         CBaseChainParams::TESTNET,\n-        CBaseChainParams::MAIN\n+        CBaseChainParams::MAINNET\n     };\n \n     LOCK(cs_args);\n@@ -1011,12 +1013,22 @@ std::string ArgsManager::GetChainName() const\n     if (fTestNet)\n         return CBaseChainParams::TESTNET;\n \n-    return GetArg(\"-chain\", CBaseChainParams::MAIN);\n+    auto chain_name = GetArg(\"-chain\", CBaseChainParams::MAINNET);\n+    if (chain_name == CBaseChainParams::MAIN) {\n+        std::cout << \"WARNING -chain=main is deprecated. Please switch to -chain=mainnet\" << std::endl;  // XXX bitcoin logging\n+        std::cerr << \"WARNING -chain=main is deprecated. Please switch to -chain=mainnet\" << std::endl;  // XXX bitcoin logging\n+        return CBaseChainParams::MAINNET;\n+    } else if (chain_name == CBaseChainParams::TEST) {\n+        std::cout << \"WARNING -chain=test is deprecated. Please switch to -testnet or to -chain=testnet\" << std::endl;  // XXX bitcoin logging\n+        std::cerr << \"WARNING -chain=test is deprecated. Please switch to -testnet or to -chain=testnet\" << std::endl;  // XXX bitcoin logging\n+        return CBaseChainParams::TESTNET;\n+    }\n+    return chain_name;\n }\n \n bool ArgsManager::UseDefaultSection(const std::string& arg) const\n {\n-    return m_network == CBaseChainParams::MAIN || m_network_only_args.count(arg) == 0;\n+    return m_network == CBaseChainParams::MAINNET || m_network_only_args.count(arg) == 0;\n }\n \n util::SettingsValue ArgsManager::GetSetting(const std::string& arg) const"
      },
      {
        "sha": "4ccb1c72dd253ec5eba541ce1912e38b42c91ae1",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -362,7 +362,7 @@ class ArgsManager\n \n     /**\n      * Returns the appropriate chain name from the program arguments.\n-     * @return CBaseChainParams::MAIN by default; raises runtime error if an invalid combination is given.\n+     * @return CBaseChainParams::MAINNET by default; raises runtime error if an invalid combination is given.\n      */\n     std::string GetChainName() const;\n "
      },
      {
        "sha": "93f0a7c18e8e9938080934b970368e64c02ff5bb",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -344,7 +344,7 @@ void BerkeleyDatabase::Open()\n \n             ret = pdb_temp->open(nullptr,                             // Txn pointer\n                             fMockDb ? nullptr : strFile.c_str(),      // Filename\n-                            fMockDb ? strFile.c_str() : \"main\",       // Logical db name\n+                            fMockDb ? strFile.c_str() : \"mainnet\",    // Logical db name\n                             DB_BTREE,                                 // Database type\n                             nFlags,                                   // Flags\n                             0);\n@@ -464,9 +464,9 @@ bool BerkeleyDatabase::Rewrite(const char* pszSkip)\n                     BerkeleyBatch db(*this, true);\n                     std::unique_ptr<Db> pdbCopy = std::make_unique<Db>(env->dbenv.get(), 0);\n \n-                    int ret = pdbCopy->open(nullptr,               // Txn pointer\n+                    int ret = pdbCopy->open(nullptr,            // Txn pointer\n                                             strFileRes.c_str(), // Filename\n-                                            \"main\",             // Logical db name\n+                                            \"mainnet\",          // Logical db name\n                                             DB_BTREE,           // Database type\n                                             DB_CREATE,          // Flags\n                                             0);"
      },
      {
        "sha": "be2acc0dd9938cca89a244071d549f717aa650fa",
        "filename": "src/wallet/salvage.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/wallet/salvage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/wallet/salvage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.cpp?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -120,9 +120,9 @@ bool RecoverDatabaseFile(const fs::path& file_path, bilingual_str& error, std::v\n     }\n \n     std::unique_ptr<Db> pdbCopy = std::make_unique<Db>(env->dbenv.get(), 0);\n-    int ret = pdbCopy->open(nullptr,               // Txn pointer\n+    int ret = pdbCopy->open(nullptr,            // Txn pointer\n                             filename.c_str(),   // Filename\n-                            \"main\",             // Logical db name\n+                            \"mainnet\",          // Logical db name\n                             DB_BTREE,           // Database type\n                             DB_CREATE,          // Flags\n                             0);"
      },
      {
        "sha": "2e62e38188356beafae0e73edcb82391cc6e7b07",
        "filename": "src/wallet/test/init_test_fixture.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/wallet/test/init_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/wallet/test/init_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_test_fixture.h?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -12,7 +12,7 @@\n \n \n struct InitWalletDirTestingSetup: public BasicTestingSetup {\n-    explicit InitWalletDirTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n+    explicit InitWalletDirTestingSetup(const std::string & chainName = CBaseChainParams::MAINNET);\n     ~InitWalletDirTestingSetup();\n     void SetWalletDir(const fs::path& walletdir_path);\n "
      },
      {
        "sha": "bd9a1e8475f23eaf55ae73c95b4e8314cf065ff9",
        "filename": "src/wallet/test/wallet_test_fixture.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/wallet/test/wallet_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/src/wallet/test/wallet_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.h?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -18,7 +18,7 @@\n /** Testing setup and teardown for wallet.\n  */\n struct WalletTestingSetup : public TestingSetup {\n-    explicit WalletTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n+    explicit WalletTestingSetup(const std::string & chainName = CBaseChainParams::MAINNET);\n \n     std::unique_ptr<interfaces::WalletClient> m_wallet_client = interfaces::MakeWalletClient(*m_node.chain, *Assert(m_node.args));\n     CWallet m_wallet;"
      },
      {
        "sha": "a874623de86f673118eb12ad2d895e2cbe1baa01",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -49,7 +49,7 @@ def test_config_file_parser(self):\n         util.write_config(main_conf_file_path, n=0, chain='', extra_config=f'includeconf={inc_conf_file_path}\\n')\n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('acceptnonstdtxn=1\\n')\n-        self.nodes[0].assert_start_raises_init_error(extra_args=[f\"-conf={main_conf_file_path}\"], expected_msg='Error: acceptnonstdtxn is not currently supported for main chain')\n+        self.nodes[0].assert_start_raises_init_error(extra_args=[f\"-conf={main_conf_file_path}\"], expected_msg='Error: acceptnonstdtxn is not currently supported for mainnet chain')\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('nono\\n')\n@@ -74,9 +74,9 @@ def test_config_file_parser(self):\n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('testnot.datadir=1\\n')\n         with open(inc_conf_file2_path, 'w', encoding='utf-8') as conf:\n-            conf.write('[testnet]\\n')\n+            conf.write('[testnut]\\n')\n         self.restart_node(0)\n-        self.nodes[0].stop_node(expected_stderr=f'Warning: {inc_conf_file_path}:1 Section [testnot] is not recognized.{os.linesep}{inc_conf_file2_path}:1 Section [testnet] is not recognized.')\n+        self.nodes[0].stop_node(expected_stderr=f'Warning: {inc_conf_file_path}:1 Section [testnot] is not recognized.{os.linesep}{inc_conf_file2_path}:1 Section [testnut] is not recognized.')\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('')  # clear"
      },
      {
        "sha": "43d767cff42b472a07ec5440cd9639fa4d6ac807",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e9e9b015b461d8329e8b08e595383ea5c7cc06/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e9e9b015b461d8329e8b08e595383ea5c7cc06/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "patch": "@@ -346,7 +346,7 @@ def write_config(config_path, *, n, chain, extra_config=\"\", disable_autoconnect=\n     # Translate chain subdirectory name to config name\n     if chain == 'testnet3':\n         chain_name_conf_arg = 'testnet'\n-        chain_name_conf_section = 'test'\n+        chain_name_conf_section = 'testnet'\n     else:\n         chain_name_conf_arg = chain\n         chain_name_conf_section = chain"
      }
    ]
  },
  {
    "sha": "1d2baa4a64d3df882490592b07e1a0d4f7e3efb7",
    "node_id": "C_kwDOABII59oAKDFkMmJhYTRhNjRkM2RmODgyNDkwNTkyYjA3ZTFhMGQ0ZjdlM2VmYjc",
    "commit": {
      "author": {
        "name": "katesalazar",
        "email": "mercedes.catherine.salazar@gmail.com",
        "date": "2021-10-01T09:17:52Z"
      },
      "committer": {
        "name": "katesalazar",
        "email": "mercedes.catherine.salazar@gmail.com",
        "date": "2021-10-01T10:10:05Z"
      },
      "message": "Break compile compatibility.",
      "tree": {
        "sha": "a079e1c254609b4769308710905ac35b8bb5a96d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a079e1c254609b4769308710905ac35b8bb5a96d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d2baa4a64d3df882490592b07e1a0d4f7e3efb7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d2baa4a64d3df882490592b07e1a0d4f7e3efb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d2baa4a64d3df882490592b07e1a0d4f7e3efb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d2baa4a64d3df882490592b07e1a0d4f7e3efb7/comments",
    "author": {
      "login": "katesalazar",
      "id": 52637275,
      "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/katesalazar",
      "html_url": "https://github.com/katesalazar",
      "followers_url": "https://api.github.com/users/katesalazar/followers",
      "following_url": "https://api.github.com/users/katesalazar/following{/other_user}",
      "gists_url": "https://api.github.com/users/katesalazar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/katesalazar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
      "organizations_url": "https://api.github.com/users/katesalazar/orgs",
      "repos_url": "https://api.github.com/users/katesalazar/repos",
      "events_url": "https://api.github.com/users/katesalazar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/katesalazar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "katesalazar",
      "id": 52637275,
      "node_id": "MDQ6VXNlcjUyNjM3Mjc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/52637275?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/katesalazar",
      "html_url": "https://github.com/katesalazar",
      "followers_url": "https://api.github.com/users/katesalazar/followers",
      "following_url": "https://api.github.com/users/katesalazar/following{/other_user}",
      "gists_url": "https://api.github.com/users/katesalazar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/katesalazar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/katesalazar/subscriptions",
      "organizations_url": "https://api.github.com/users/katesalazar/orgs",
      "repos_url": "https://api.github.com/users/katesalazar/repos",
      "events_url": "https://api.github.com/users/katesalazar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/katesalazar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38e9e9b015b461d8329e8b08e595383ea5c7cc06",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38e9e9b015b461d8329e8b08e595383ea5c7cc06"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 12,
      "deletions": 11
    },
    "files": [
      {
        "sha": "c79452f3de8279653a57c4c09c83bd72bc398d59",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d2baa4a64d3df882490592b07e1a0d4f7e3efb7/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d2baa4a64d3df882490592b07e1a0d4f7e3efb7/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=1d2baa4a64d3df882490592b07e1a0d4f7e3efb7",
        "patch": "@@ -10,10 +10,10 @@\n \n #include <assert.h>\n \n-/* [[deprecated]] */ const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::MAINNET = \"mainnet\";\n-/* [[deprecated]] */ const std::string CBaseChainParams::TEST = \"test\";\n+const std::string CBaseChainParams::MAINNET_OLD = \"main\";\n const std::string CBaseChainParams::TESTNET = \"testnet\";\n+const std::string CBaseChainParams::TESTNET_OLD = \"test\";\n const std::string CBaseChainParams::SIGNET = \"signet\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n "
      },
      {
        "sha": "027bf4d0ce8be8bb73b475324af5c453c4760a2f",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d2baa4a64d3df882490592b07e1a0d4f7e3efb7/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d2baa4a64d3df882490592b07e1a0d4f7e3efb7/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=1d2baa4a64d3df882490592b07e1a0d4f7e3efb7",
        "patch": "@@ -19,10 +19,10 @@ class CBaseChainParams\n public:\n     ///@{\n     /** Chain name strings */\n-    /* [[deprecated]] */ static const std::string MAIN;\n     static const std::string MAINNET;\n-    /* [[deprecated]] */ static const std::string TEST;\n+    static const std::string MAINNET_OLD;\n     static const std::string TESTNET;\n+    static const std::string TESTNET_OLD;\n     static const std::string SIGNET;\n     static const std::string REGTEST;\n     ///@}"
      },
      {
        "sha": "9cb66045cccd47b993cdbac7e02c281fc905bd17",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d2baa4a64d3df882490592b07e1a0d4f7e3efb7/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d2baa4a64d3df882490592b07e1a0d4f7e3efb7/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=1d2baa4a64d3df882490592b07e1a0d4f7e3efb7",
        "patch": "@@ -55,7 +55,7 @@ void RPCNestedTests::rpcNestedTests()\n     std::string result2;\n     std::string filtered;\n     RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo()[chain]\", &filtered); //simple result filtering with path\n-    QVERIFY(result==\"mainnet\");\n+    QVERIFY(result == \"mainnet\");\n     QVERIFY(filtered == \"getblockchaininfo()[chain]\");\n \n     RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblock(getbestblockhash())\"); //simple 2 level nesting"
      },
      {
        "sha": "763b4a65cec3d38dd91134b5d518877b18dd5abe",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d2baa4a64d3df882490592b07e1a0d4f7e3efb7/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d2baa4a64d3df882490592b07e1a0d4f7e3efb7/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=1d2baa4a64d3df882490592b07e1a0d4f7e3efb7",
        "patch": "@@ -169,17 +169,17 @@ BOOST_AUTO_TEST_CASE(ChainParams_MAIN_sanity)\n \n BOOST_AUTO_TEST_CASE(ChainParams_REGTEST_sanity)\n {\n-    sanity_check_chainparams(* m_node.args, CBaseChainParams::REGTEST);\n+    sanity_check_chainparams(*m_node.args, CBaseChainParams::REGTEST);\n }\n \n BOOST_AUTO_TEST_CASE(ChainParams_TESTNET_sanity)\n {\n-    sanity_check_chainparams(* m_node.args, CBaseChainParams::TESTNET);\n+    sanity_check_chainparams(*m_node.args, CBaseChainParams::TESTNET);\n }\n \n BOOST_AUTO_TEST_CASE(ChainParams_SIGNET_sanity)\n {\n-    sanity_check_chainparams(* m_node.args, CBaseChainParams::SIGNET);\n+    sanity_check_chainparams(*m_node.args, CBaseChainParams::SIGNET);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "0120030bfd6eff8e499d045256ab0c5946acea5f",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d2baa4a64d3df882490592b07e1a0d4f7e3efb7/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d2baa4a64d3df882490592b07e1a0d4f7e3efb7/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=1d2baa4a64d3df882490592b07e1a0d4f7e3efb7",
        "patch": "@@ -1014,11 +1014,11 @@ std::string ArgsManager::GetChainName() const\n         return CBaseChainParams::TESTNET;\n \n     auto chain_name = GetArg(\"-chain\", CBaseChainParams::MAINNET);\n-    if (chain_name == CBaseChainParams::MAIN) {\n+    if (chain_name == CBaseChainParams::MAINNET_OLD) {\n         std::cout << \"WARNING -chain=main is deprecated. Please switch to -chain=mainnet\" << std::endl;  // XXX bitcoin logging\n         std::cerr << \"WARNING -chain=main is deprecated. Please switch to -chain=mainnet\" << std::endl;  // XXX bitcoin logging\n         return CBaseChainParams::MAINNET;\n-    } else if (chain_name == CBaseChainParams::TEST) {\n+    } else if (chain_name == CBaseChainParams::TESTNET_OLD) {\n         std::cout << \"WARNING -chain=test is deprecated. Please switch to -testnet or to -chain=testnet\" << std::endl;  // XXX bitcoin logging\n         std::cerr << \"WARNING -chain=test is deprecated. Please switch to -testnet or to -chain=testnet\" << std::endl;  // XXX bitcoin logging\n         return CBaseChainParams::TESTNET;"
      },
      {
        "sha": "338b180235f377589bdabf44979b696235c72378",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d2baa4a64d3df882490592b07e1a0d4f7e3efb7/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d2baa4a64d3df882490592b07e1a0d4f7e3efb7/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=1d2baa4a64d3df882490592b07e1a0d4f7e3efb7",
        "patch": "@@ -76,7 +76,8 @@ def test_config_file_parser(self):\n         with open(inc_conf_file2_path, 'w', encoding='utf-8') as conf:\n             conf.write('[testnut]\\n')\n         self.restart_node(0)\n-        self.nodes[0].stop_node(expected_stderr=f'Warning: {inc_conf_file_path}:1 Section [testnot] is not recognized.{os.linesep}{inc_conf_file2_path}:1 Section [testnut] is not recognized.')\n+        self.nodes[0].stop_node(expected_stderr=f'Warning: {inc_conf_file_path}:1 Section [testnot] is not recognized.{os.linesep}\\\n+            {inc_conf_file2_path}:1 Section [testnut] is not recognized.')\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('')  # clear"
      }
    ]
  }
]