[
  {
    "sha": "c63a73d18aa60207790f24b9a910fd45eb3afaa3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjNhNzNkMThhYTYwMjA3NzkwZjI0YjlhOTEwZmQ0NWViM2FmYWEz",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-11-17T03:04:01Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-11-17T03:04:01Z"
      },
      "message": "Update comments in util to be doxygen compatible",
      "tree": {
        "sha": "b9f54e44b87da879c39c3d0b83a2a634fda2521f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9f54e44b87da879c39c3d0b83a2a634fda2521f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c63a73d18aa60207790f24b9a910fd45eb3afaa3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c63a73d18aa60207790f24b9a910fd45eb3afaa3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c63a73d18aa60207790f24b9a910fd45eb3afaa3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c63a73d18aa60207790f24b9a910fd45eb3afaa3/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d3ce7421e11ed693840e04bee4d18fb9d396309",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d3ce7421e11ed693840e04bee4d18fb9d396309",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d3ce7421e11ed693840e04bee4d18fb9d396309"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 72,
      "deletions": 49
    },
    "files": [
      {
        "sha": "0cdf4e614d8df6b173ece4178e06abed210b6f81",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 19,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63a73d18aa60207790f24b9a910fd45eb3afaa3/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63a73d18aa60207790f24b9a910fd45eb3afaa3/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=c63a73d18aa60207790f24b9a910fd45eb3afaa3",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n@@ -105,7 +105,7 @@ bool fLogTimestamps = false;\n bool fLogIPs = false;\n volatile bool fReopenDebugLog = false;\n \n-// Init OpenSSL library multithreading support\n+/** Init OpenSSL library multithreading support */\n static CCriticalSection** ppmutexOpenSSL;\n void locking_callback(int mode, int i, const char* file, int line)\n {\n@@ -149,18 +149,22 @@ class CInit\n }\n instance_of_cinit;\n \n-// LogPrintf() has been broken a couple of times now\n-// by well-meaning people adding mutexes in the most straightforward way.\n-// It breaks because it may be called by global destructors during shutdown.\n-// Since the order of destruction of static/global objects is undefined,\n-// defining a mutex as a global object doesn't work (the mutex gets\n-// destroyed, and then some later destructor calls OutputDebugStringF,\n-// maybe indirectly, and you get a core dump at shutdown trying to lock\n-// the mutex).\n+/**\n+ * LogPrintf() has been broken a couple of times now\n+ * by well-meaning people adding mutexes in the most straightforward way.\n+ * It breaks because it may be called by global destructors during shutdown.\n+ * Since the order of destruction of static/global objects is undefined,\n+ * defining a mutex as a global object doesn't work (the mutex gets\n+ * destroyed, and then some later destructor calls OutputDebugStringF,\n+ * maybe indirectly, and you get a core dump at shutdown trying to lock\n+ * the mutex).\n+ */\n \n static boost::once_flag debugPrintInitFlag = BOOST_ONCE_INIT;\n-// We use boost::call_once() to make sure these are initialized\n-// in a thread-safe manner the first time called:\n+/**\n+ * We use boost::call_once() to make sure these are initialized\n+ * in a thread-safe manner the first time called:\n+ */\n static FILE* fileout = NULL;\n static boost::mutex* mutexDebugLog = NULL;\n \n@@ -500,9 +504,11 @@ bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest)\n #endif /* WIN32 */\n }\n \n-// Ignores exceptions thrown by Boost's create_directory if the requested directory exists.\n-// Specifically handles case where path p exists, but it wasn't possible for the user to\n-// write to the parent directory.\n+/**\n+ * Ignores exceptions thrown by Boost's create_directory if the requested directory exists.\n+ * Specifically handles case where path p exists, but it wasn't possible for the user to\n+ * write to the parent directory.\n+ */\n bool TryCreateDirectory(const boost::filesystem::path& p)\n {\n     try\n@@ -542,8 +548,10 @@ bool TruncateFile(FILE *file, unsigned int length) {\n #endif\n }\n \n-// this function tries to raise the file descriptor limit to the requested number.\n-// It returns the actual file descriptor limit (which may be more or less than nMinFD)\n+/**\n+ * this function tries to raise the file descriptor limit to the requested number.\n+ * It returns the actual file descriptor limit (which may be more or less than nMinFD)\n+ */\n int RaiseFileDescriptorLimit(int nMinFD) {\n #if defined(WIN32)\n     return 2048;\n@@ -563,8 +571,10 @@ int RaiseFileDescriptorLimit(int nMinFD) {\n #endif\n }\n \n-// this function tries to make a particular range of a file allocated (corresponding to disk space)\n-// it is advisory, and the range specified in the arguments will never contain live data\n+/**\n+ * this function tries to make a particular range of a file allocated (corresponding to disk space)\n+ * it is advisory, and the range specified in the arguments will never contain live data\n+ */\n void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length) {\n #if defined(WIN32)\n     // Windows-specific version"
      },
      {
        "sha": "a4aaf29f914ae461a899b2af74eae271656441db",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 22,
        "deletions": 15,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63a73d18aa60207790f24b9a910fd45eb3afaa3/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63a73d18aa60207790f24b9a910fd45eb3afaa3/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=c63a73d18aa60207790f24b9a910fd45eb3afaa3",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n /**\n@@ -40,25 +40,26 @@ extern volatile bool fReopenDebugLog;\n \n void SetupEnvironment();\n \n-/* Return true if log accepts specified category */\n+/** Return true if log accepts specified category */\n bool LogAcceptCategory(const char* category);\n-/* Send a string to the log output */\n+/** Send a string to the log output */\n int LogPrintStr(const std::string &str);\n \n #define LogPrintf(...) LogPrint(NULL, __VA_ARGS__)\n \n-/* When we switch to C++11, this can be switched to variadic templates instead\n+/**\n+ * When we switch to C++11, this can be switched to variadic templates instead\n  * of this macro-based construction (see tinyformat.h).\n  */\n #define MAKE_ERROR_AND_LOG_FUNC(n)                                        \\\n-    /*   Print to debug.log if -debug=category switch is given OR category is NULL. */ \\\n+    /**   Print to debug.log if -debug=category switch is given OR category is NULL. */ \\\n     template<TINYFORMAT_ARGTYPES(n)>                                          \\\n     static inline int LogPrint(const char* category, const char* format, TINYFORMAT_VARARGS(n))  \\\n     {                                                                         \\\n         if(!LogAcceptCategory(category)) return 0;                            \\\n         return LogPrintStr(tfm::format(format, TINYFORMAT_PASSARGS(n))); \\\n     }                                                                         \\\n-    /*   Log error and return false */                                        \\\n+    /**   Log error and return false */                                        \\\n     template<TINYFORMAT_ARGTYPES(n)>                                          \\\n     static inline bool error(const char* format, TINYFORMAT_VARARGS(n))                     \\\n     {                                                                         \\\n@@ -68,7 +69,8 @@ int LogPrintStr(const std::string &str);\n \n TINYFORMAT_FOREACH_ARGNUM(MAKE_ERROR_AND_LOG_FUNC)\n \n-/* Zero-arg versions of logging and error, these are not covered by\n+/**\n+ * Zero-arg versions of logging and error, these are not covered by\n  * TINYFORMAT_FOREACH_ARGNUM\n  */\n static inline int LogPrint(const char* category, const char* format)\n@@ -162,13 +164,15 @@ bool SoftSetBoolArg(const std::string& strArg, bool fValue);\n void SetThreadPriority(int nPriority);\n void RenameThread(const char* name);\n \n-// Standard wrapper for do-something-forever thread functions.\n-// \"Forever\" really means until the thread is interrupted.\n-// Use it like:\n-//   new boost::thread(boost::bind(&LoopForever<void (*)()>, \"dumpaddr\", &DumpAddresses, 900000));\n-// or maybe:\n-//    boost::function<void()> f = boost::bind(&FunctionWithArg, argument);\n-//    threadGroup.create_thread(boost::bind(&LoopForever<boost::function<void()> >, \"nothing\", f, milliseconds));\n+/**\n+ * Standard wrapper for do-something-forever thread functions.\n+ * \"Forever\" really means until the thread is interrupted.\n+ * Use it like:\n+ *   new boost::thread(boost::bind(&LoopForever<void (*)()>, \"dumpaddr\", &DumpAddresses, 900000));\n+ * or maybe:\n+ *    boost::function<void()> f = boost::bind(&FunctionWithArg, argument);\n+ *    threadGroup.create_thread(boost::bind(&LoopForever<boost::function<void()> >, \"nothing\", f, milliseconds));\n+ */\n template <typename Callable> void LoopForever(const char* name,  Callable func, int64_t msecs)\n {\n     std::string s = strprintf(\"bitcoin-%s\", name);\n@@ -196,7 +200,10 @@ template <typename Callable> void LoopForever(const char* name,  Callable func,\n         throw;\n     }\n }\n-// .. and a wrapper that just calls func once\n+\n+/**\n+ * .. and a wrapper that just calls func once\n+ */\n template <typename Callable> void TraceThread(const char* name,  Callable func)\n {\n     std::string s = strprintf(\"bitcoin-%s\", name);"
      },
      {
        "sha": "085adae85e90315ac99e0e12e153cbe43f58fbf2",
        "filename": "src/utilmoneystr.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63a73d18aa60207790f24b9a910fd45eb3afaa3/src/utilmoneystr.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63a73d18aa60207790f24b9a910fd45eb3afaa3/src/utilmoneystr.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilmoneystr.cpp?ref=c63a73d18aa60207790f24b9a910fd45eb3afaa3",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"utilmoneystr.h\""
      },
      {
        "sha": "6a153db5fa7e7a441e004b398ce81caf18337033",
        "filename": "src/utilmoneystr.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63a73d18aa60207790f24b9a910fd45eb3afaa3/src/utilmoneystr.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63a73d18aa60207790f24b9a910fd45eb3afaa3/src/utilmoneystr.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilmoneystr.h?ref=c63a73d18aa60207790f24b9a910fd45eb3afaa3",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n /**"
      },
      {
        "sha": "a961b3c5cdc54d25e0c872bbeef0e91c0db90586",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63a73d18aa60207790f24b9a910fd45eb3afaa3/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63a73d18aa60207790f24b9a910fd45eb3afaa3/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=c63a73d18aa60207790f24b9a910fd45eb3afaa3",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"utilstrencodings.h\"\n@@ -14,8 +14,10 @@\n \n using namespace std;\n \n-// safeChars chosen to allow simple messages/URLs/email addresses, but avoid anything\n-// even possibly remotely dangerous like & or >\n+/**\n+ * safeChars chosen to allow simple messages/URLs/email addresses, but avoid anything\n+ * even possibly remotely dangerous like & or >\n+ */\n static string safeChars(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890 .,;_/:?@()\");\n string SanitizeString(const string& str)\n {"
      },
      {
        "sha": "0c0171b8944cd0441f73a9f32b506e8696bc254d",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63a73d18aa60207790f24b9a910fd45eb3afaa3/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63a73d18aa60207790f24b9a910fd45eb3afaa3/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=c63a73d18aa60207790f24b9a910fd45eb3afaa3",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n /**\n@@ -19,7 +19,7 @@\n #define UEND(a)             ((unsigned char*)&((&(a))[1]))\n #define ARRAYLEN(array)     (sizeof(array)/sizeof((array)[0]))\n \n-// This is needed because the foreach macro can't get over the comma in pair<t1, t2>\n+/** This is needed because the foreach macro can't get over the comma in pair<t1, t2> */\n #define PAIRTYPE(t1, t2)    std::pair<t1, t2>\n \n std::string SanitizeString(const std::string& str);\n@@ -45,7 +45,7 @@ int atoi(const std::string& str);\n /**\n  * Convert string to signed 32-bit integer with strict parse error feedback.\n  * @returns true if the entire string could be parsed as valid integer,\n- *   false if not the entire string could be parsed or when overflow or underflow occured.\n+ *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */\n bool ParseInt32(const std::string& str, int32_t *out);\n \n@@ -74,7 +74,8 @@ inline std::string HexStr(const T& vch, bool fSpaces=false)\n     return HexStr(vch.begin(), vch.end(), fSpaces);\n }\n \n-/** Format a paragraph of text to a fixed width, adding spaces for\n+/** \n+ * Format a paragraph of text to a fixed width, adding spaces for\n  * indentation to any added line.\n  */\n std::string FormatParagraph(const std::string in, size_t width=79, size_t indent=0);"
      },
      {
        "sha": "9c137e8aa0a693bedc1ac92d17e8f5cff0eee61a",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63a73d18aa60207790f24b9a910fd45eb3afaa3/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63a73d18aa60207790f24b9a910fd45eb3afaa3/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=c63a73d18aa60207790f24b9a910fd45eb3afaa3",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n@@ -14,7 +14,7 @@\n \n using namespace std;\n \n-static int64_t nMockTime = 0;  // For unit testing\n+static int64_t nMockTime = 0;  //! For unit testing\n \n int64_t GetTime()\n {\n@@ -42,9 +42,12 @@ int64_t GetTimeMicros()\n \n void MilliSleep(int64_t n)\n {\n-// Boost's sleep_for was uninterruptable when backed by nanosleep from 1.50\n-// until fixed in 1.52. Use the deprecated sleep method for the broken case.\n-// See: https://svn.boost.org/trac/boost/ticket/7238\n+\n+/**\n+ * Boost's sleep_for was uninterruptable when backed by nanosleep from 1.50\n+ * until fixed in 1.52. Use the deprecated sleep method for the broken case.\n+ * See: https://svn.boost.org/trac/boost/ticket/7238\n+ */\n #if defined(HAVE_WORKING_BOOST_SLEEP_FOR)\n     boost::this_thread::sleep_for(boost::chrono::milliseconds(n));\n #elif defined(HAVE_WORKING_BOOST_SLEEP)"
      },
      {
        "sha": "9d7d42fe473b8ef2c3bea6de72007528c518a947",
        "filename": "src/utiltime.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c63a73d18aa60207790f24b9a910fd45eb3afaa3/src/utiltime.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c63a73d18aa60207790f24b9a910fd45eb3afaa3/src/utiltime.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.h?ref=c63a73d18aa60207790f24b9a910fd45eb3afaa3",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_UTILTIME_H"
      }
    ]
  }
]