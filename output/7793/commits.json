[
  {
    "sha": "fada0c422c081ba53a324aaf63c0a750cb56498e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWRhMGM0MjJjMDgxYmE1M2EzMjRhYWY2M2MwYTc1MGNiNTY0OThl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-03T09:49:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-03T09:58:01Z"
      },
      "message": "[doc] Fix doxygen comments for members",
      "tree": {
        "sha": "cb5bfc67fed9a66c67582fa4ade5fe77b8442259",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb5bfc67fed9a66c67582fa4ade5fe77b8442259"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fada0c422c081ba53a324aaf63c0a750cb56498e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fada0c422c081ba53a324aaf63c0a750cb56498e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fada0c422c081ba53a324aaf63c0a750cb56498e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fada0c422c081ba53a324aaf63c0a750cb56498e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30c2dd8d0598afac9319d3a813a89a682b9c0d34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30c2dd8d0598afac9319d3a813a89a682b9c0d34",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30c2dd8d0598afac9319d3a813a89a682b9c0d34"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 55,
      "deletions": 49
    },
    "files": [
      {
        "sha": "8affb2158a9132e7b0b0b5a8d17c245e3053336b",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fada0c422c081ba53a324aaf63c0a750cb56498e/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fada0c422c081ba53a324aaf63c0a750cb56498e/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=fada0c422c081ba53a324aaf63c0a750cb56498e",
        "patch": "@@ -71,6 +71,12 @@ To describe a member or variable use:\n int var; //!< Detailed description after the member\n ```\n \n+or\n+```cpp\n+//! Description before the member\n+int var;\n+```\n+\n Also OK:\n ```c++\n ///"
      },
      {
        "sha": "5c7d190125cc387059e70d367b297eec39dff1e0",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fada0c422c081ba53a324aaf63c0a750cb56498e/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fada0c422c081ba53a324aaf63c0a750cb56498e/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=fada0c422c081ba53a324aaf63c0a750cb56498e",
        "patch": "@@ -266,8 +266,8 @@ class CRegTestParams : public CChainParams {\n         assert(consensus.hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n \n-        vFixedSeeds.clear(); //! Regtest mode doesn't have any fixed seeds.\n-        vSeeds.clear();  //! Regtest mode doesn't have any DNS seeds.\n+        vFixedSeeds.clear(); //!< Regtest mode doesn't have any fixed seeds.\n+        vSeeds.clear();      //!< Regtest mode doesn't have any DNS seeds.\n \n         fMiningRequiresPeers = false;\n         fDefaultConsistencyChecks = true;"
      },
      {
        "sha": "b68c6affae7f94fb534645296f7fa124ff8c97a4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fada0c422c081ba53a324aaf63c0a750cb56498e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fada0c422c081ba53a324aaf63c0a750cb56498e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fada0c422c081ba53a324aaf63c0a750cb56498e",
        "patch": "@@ -194,10 +194,10 @@ namespace {\n     /** Blocks that are in flight, and that are in the queue to be downloaded. Protected by cs_main. */\n     struct QueuedBlock {\n         uint256 hash;\n-        CBlockIndex *pindex;  //! Optional.\n-        int64_t nTime;  //! Time of \"getdata\" request in microseconds.\n-        bool fValidatedHeaders;  //! Whether this block has validated headers at the time of request.\n-        int64_t nTimeDisconnect; //! The timeout for this block request (for disconnecting a slow peer)\n+        CBlockIndex* pindex;     //!< Optional.\n+        int64_t nTime;           //!< Time of \"getdata\" request in microseconds.\n+        bool fValidatedHeaders;  //!< Whether this block has validated headers at the time of request.\n+        int64_t nTimeDisconnect; //!< The timeout for this block request (for disconnecting a slow peer)\n     };\n     map<uint256, pair<NodeId, list<QueuedBlock>::iterator> > mapBlocksInFlight;\n "
      },
      {
        "sha": "3ea9dc500ca64ad9932eabee820ff83475994e98",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fada0c422c081ba53a324aaf63c0a750cb56498e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fada0c422c081ba53a324aaf63c0a750cb56498e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=fada0c422c081ba53a324aaf63c0a750cb56498e",
        "patch": "@@ -469,13 +469,13 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n class CBlockFileInfo\n {\n public:\n-    unsigned int nBlocks;      //! number of blocks stored in file\n-    unsigned int nSize;        //! number of used bytes of block file\n-    unsigned int nUndoSize;    //! number of used bytes in the undo file\n-    unsigned int nHeightFirst; //! lowest height of block in file\n-    unsigned int nHeightLast;  //! highest height of block in file\n-    uint64_t nTimeFirst;         //! earliest time of block in file\n-    uint64_t nTimeLast;          //! latest time of block in file\n+    unsigned int nBlocks;      //!< number of blocks stored in file\n+    unsigned int nSize;        //!< number of used bytes of block file\n+    unsigned int nUndoSize;    //!< number of used bytes in the undo file\n+    unsigned int nHeightFirst; //!< lowest height of block in file\n+    unsigned int nHeightLast;  //!< highest height of block in file\n+    uint64_t nTimeFirst;       //!< earliest time of block in file\n+    uint64_t nTimeLast;        //!< latest time of block in file\n \n     ADD_SERIALIZE_METHODS;\n "
      },
      {
        "sha": "463f62f710603df56025573254cab323a2ab849b",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fada0c422c081ba53a324aaf63c0a750cb56498e/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fada0c422c081ba53a324aaf63c0a750cb56498e/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=fada0c422c081ba53a324aaf63c0a750cb56498e",
        "patch": "@@ -265,8 +265,8 @@ class CBlockPolicyEstimator\n     void Read(CAutoFile& filein);\n \n private:\n-    CFeeRate minTrackedFee; //! Passed to constructor to avoid dependency on main\n-    double minTrackedPriority; //! Set to AllowFreeThreshold\n+    CFeeRate minTrackedFee;    //!< Passed to constructor to avoid dependency on main\n+    double minTrackedPriority; //!< Set to AllowFreeThreshold\n     unsigned int nBestSeenHeight;\n     struct TxStatsInfo\n     {"
      },
      {
        "sha": "033987af59efba62d7be3fd0f795830079e130a2",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fada0c422c081ba53a324aaf63c0a750cb56498e/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fada0c422c081ba53a324aaf63c0a750cb56498e/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=fada0c422c081ba53a324aaf63c0a750cb56498e",
        "patch": "@@ -18,8 +18,8 @@ using namespace std;\n class CRPCConvertParam\n {\n public:\n-    std::string methodName;            //! method whose params want conversion\n-    int paramIdx;                      //! 0-based idx of param to convert\n+    std::string methodName; //!< method whose params want conversion\n+    int paramIdx;           //!< 0-based idx of param to convert\n };\n \n static const CRPCConvertParam vRPCConvertParams[] ="
      },
      {
        "sha": "9c47f7c6c95778d501d374de6f1e6dc533c165a1",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fada0c422c081ba53a324aaf63c0a750cb56498e/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fada0c422c081ba53a324aaf63c0a750cb56498e/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=fada0c422c081ba53a324aaf63c0a750cb56498e",
        "patch": "@@ -1015,12 +1015,12 @@ namespace {\n  */\n class CTransactionSignatureSerializer {\n private:\n-    const CTransaction &txTo;  //! reference to the spending transaction (the one being serialized)\n-    const CScript &scriptCode; //! output script being consumed\n-    const unsigned int nIn;    //! input index of txTo being signed\n-    const bool fAnyoneCanPay;  //! whether the hashtype has the SIGHASH_ANYONECANPAY flag set\n-    const bool fHashSingle;    //! whether the hashtype is SIGHASH_SINGLE\n-    const bool fHashNone;      //! whether the hashtype is SIGHASH_NONE\n+    const CTransaction& txTo;  //!< reference to the spending transaction (the one being serialized)\n+    const CScript& scriptCode; //!< output script being consumed\n+    const unsigned int nIn;    //!< input index of txTo being signed\n+    const bool fAnyoneCanPay;  //!< whether the hashtype has the SIGHASH_ANYONECANPAY flag set\n+    const bool fHashSingle;    //!< whether the hashtype is SIGHASH_SINGLE\n+    const bool fHashNone;      //!< whether the hashtype is SIGHASH_NONE\n \n public:\n     CTransactionSignatureSerializer(const CTransaction &txToIn, const CScript &scriptCodeIn, unsigned int nInIn, int nHashTypeIn) :"
      },
      {
        "sha": "f348da8e1982bd7a31f02e4251337c11351e9acd",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fada0c422c081ba53a324aaf63c0a750cb56498e/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fada0c422c081ba53a324aaf63c0a750cb56498e/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=fada0c422c081ba53a324aaf63c0a750cb56498e",
        "patch": "@@ -27,7 +27,7 @@ class CScriptID : public uint160\n     CScriptID(const uint160& in) : uint160(in) {}\n };\n \n-static const unsigned int MAX_OP_RETURN_RELAY = 83; //! bytes (+1 for OP_RETURN, +2 for the pushdata opcodes)\n+static const unsigned int MAX_OP_RETURN_RELAY = 83; //!< bytes (+1 for OP_RETURN, +2 for the pushdata opcodes)\n extern bool fAcceptDatacarrier;\n extern unsigned nMaxDatacarrierBytes;\n "
      },
      {
        "sha": "de4ba0b371a42361e9d863dabd641d89aeea91a8",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fada0c422c081ba53a324aaf63c0a750cb56498e/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fada0c422c081ba53a324aaf63c0a750cb56498e/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=fada0c422c081ba53a324aaf63c0a750cb56498e",
        "patch": "@@ -74,28 +74,28 @@ class CTxMemPoolEntry\n {\n private:\n     CTransaction tx;\n-    CAmount nFee; //! Cached to avoid expensive parent-transaction lookups\n-    size_t nTxSize; //! ... and avoid recomputing tx size\n-    size_t nModSize; //! ... and modified size for priority\n-    size_t nUsageSize; //! ... and total memory usage\n-    int64_t nTime; //! Local time when entering the mempool\n-    double entryPriority; //! Priority when entering the mempool\n-    unsigned int entryHeight; //! Chain height when entering the mempool\n-    bool hadNoDependencies; //! Not dependent on any other txs when it entered the mempool\n-    CAmount inChainInputValue; //! Sum of all txin values that are already in blockchain\n-    bool spendsCoinbase; //! keep track of transactions that spend a coinbase\n-    unsigned int sigOpCount; //! Legacy sig ops plus P2SH sig op count\n-    int64_t feeDelta; //! Used for determining the priority of the transaction for mining in a block\n-    LockPoints lockPoints; //! Track the height and time at which tx was final\n+    CAmount nFee;              //!< Cached to avoid expensive parent-transaction lookups\n+    size_t nTxSize;            //!< ... and avoid recomputing tx size\n+    size_t nModSize;           //!< ... and modified size for priority\n+    size_t nUsageSize;         //!< ... and total memory usage\n+    int64_t nTime;             //!< Local time when entering the mempool\n+    double entryPriority;      //!< Priority when entering the mempool\n+    unsigned int entryHeight;  //!< Chain height when entering the mempool\n+    bool hadNoDependencies;    //!< Not dependent on any other txs when it entered the mempool\n+    CAmount inChainInputValue; //!< Sum of all txin values that are already in blockchain\n+    bool spendsCoinbase;       //!< keep track of transactions that spend a coinbase\n+    unsigned int sigOpCount;   //!< Legacy sig ops plus P2SH sig op count\n+    int64_t feeDelta;          //!< Used for determining the priority of the transaction for mining in a block\n+    LockPoints lockPoints;     //!< Track the height and time at which tx was final\n \n     // Information about descendants of this transaction that are in the\n     // mempool; if we remove this transaction we must remove all of these\n     // descendants as well.  if nCountWithDescendants is 0, treat this entry as\n     // dirty, and nSizeWithDescendants and nModFeesWithDescendants will not be\n     // correct.\n-    uint64_t nCountWithDescendants; //! number of descendant transactions\n-    uint64_t nSizeWithDescendants;  //! ... and size\n-    CAmount nModFeesWithDescendants;  //! ... and total fees (all including us)\n+    uint64_t nCountWithDescendants;  //!< number of descendant transactions\n+    uint64_t nSizeWithDescendants;   //!< ... and size\n+    CAmount nModFeesWithDescendants; //!< ... and total fees (all including us)\n \n     // Analogous statistics for ancestor transactions\n     uint64_t nCountWithAncestors;\n@@ -399,18 +399,18 @@ class CInPoint\n class CTxMemPool\n {\n private:\n-    uint32_t nCheckFrequency; //! Value n means that n times in 2^32 we check.\n+    uint32_t nCheckFrequency; //!< Value n means that n times in 2^32 we check.\n     unsigned int nTransactionsUpdated;\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n-    uint64_t totalTxSize; //! sum of all mempool tx' byte sizes\n-    uint64_t cachedInnerUsage; //! sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n+    uint64_t totalTxSize;      //!< sum of all mempool tx' byte sizes\n+    uint64_t cachedInnerUsage; //!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n     CFeeRate minReasonableRelayFee;\n \n     mutable int64_t lastRollingFeeUpdate;\n     mutable bool blockSinceLastRollingFeeBump;\n-    mutable double rollingMinimumFeeRate; //! minimum fee to get into the pool, decreases exponentially\n+    mutable double rollingMinimumFeeRate; //!< minimum fee to get into the pool, decreases exponentially\n \n     void trackPackageRemoved(const CFeeRate& rate);\n "
      },
      {
        "sha": "da590f88893467ec38b81b6f6bd621ef80897c37",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fada0c422c081ba53a324aaf63c0a750cb56498e/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fada0c422c081ba53a324aaf63c0a750cb56498e/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=fada0c422c081ba53a324aaf63c0a750cb56498e",
        "patch": "@@ -14,7 +14,7 @@\n \n using namespace std;\n \n-static int64_t nMockTime = 0;  //! For unit testing\n+static int64_t nMockTime = 0; //!< For unit testing\n \n int64_t GetTime()\n {"
      },
      {
        "sha": "96d5d4e1e015b366e3377086a817801e1d9d8e0a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fada0c422c081ba53a324aaf63c0a750cb56498e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fada0c422c081ba53a324aaf63c0a750cb56498e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fada0c422c081ba53a324aaf63c0a750cb56498e",
        "patch": "@@ -228,11 +228,11 @@ class CWalletTx : public CMerkleTx\n     mapValue_t mapValue;\n     std::vector<std::pair<std::string, std::string> > vOrderForm;\n     unsigned int fTimeReceivedIsTxTime;\n-    unsigned int nTimeReceived; //! time received by this node\n+    unsigned int nTimeReceived; //!< time received by this node\n     unsigned int nTimeSmart;\n     char fFromMe;\n     std::string strFromAccount;\n-    int64_t nOrderPos; //! position in ordered transaction list\n+    int64_t nOrderPos; //!< position in ordered transaction list\n \n     // memory only\n     mutable bool fDebitCached;\n@@ -324,7 +324,7 @@ class CWalletTx : public CMerkleTx\n         }\n \n         READWRITE(*(CMerkleTx*)this);\n-        std::vector<CMerkleTx> vUnused; //! Used to be vtxPrev\n+        std::vector<CMerkleTx> vUnused; //!< Used to be vtxPrev\n         READWRITE(vUnused);\n         READWRITE(mapValue);\n         READWRITE(vOrderForm);\n@@ -465,7 +465,7 @@ class CAccountingEntry\n     std::string strOtherAccount;\n     std::string strComment;\n     mapValue_t mapValue;\n-    int64_t nOrderPos;  //! position in ordered transaction list\n+    int64_t nOrderPos; //!< position in ordered transaction list\n     uint64_t nEntryNo;\n \n     CAccountingEntry()"
      }
    ]
  }
]