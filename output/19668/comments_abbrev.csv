hebasto,2020-08-05 12:44:10,Friendly ping @ajtowns @vasild ,https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-669171329,669171329,
hebasto,2020-08-05 14:38:28,"Updated fa9157916514903cd7b526375597b1de0d8df8f0 -> 3f00515e92e7b6aed97c126592ad94b8a52a0e18 ([pr19668.01](https://github.com/hebasto/bitcoin/commits/pr19668.01) -> [pr19668.02](https://github.com/hebasto/bitcoin/commits/pr19668.02), [diff](https://github.com/hebasto/bitcoin/compare/pr19668.01..pr19668.02)).\n\nThis is an alternative approach without issues [mentioned](https://github.com/bitcoin",https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-669231930,669231930,
hebasto,2020-08-05 14:42:04,"@MarcoFalke \n> weak Concept ACK. Will review some more later\n\nUpdated motivation in the OP.",https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-669233841,669233841,
ajtowns,2020-08-05 17:01:48,"Concept ACK.\n\nI'd suggest going further and annotating the `AssertLock(Not)Held` calls with `EXCLUSIVE_LOCKS_REQUIRED(cs)` (or `!cs`) too. This catches existing missing annotations in `validation.cpp:CheckSequenceLocks` and `wallet/scriptpubkeyman.cpp:DescriptorScriptPubKeyMan::AddDescriptKeyWithDb` so seems worthwhile. Patch at https://github.com/ajtowns/bitcoin/commits/202008-assertlockheld",https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-669312538,669312538,
hebasto,2020-08-05 17:30:43,"@ajtowns \n> I'd suggest going further and annotating the `AssertLock(Not)Held` calls with `EXCLUSIVE_LOCKS_REQUIRED(cs)` (or `!cs`) too. This catches existing missing annotations in `validation.cpp:CheckSequenceLocks` and `wallet/scriptpubkeyman.cpp:DescriptorScriptPubKeyMan::AddDescriptKeyWithDb` so seems worthwhile. Patch at https://github.com/ajtowns/bitcoin/commits/202008-assertlockheld\n\",https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-669326867,669326867,
ajtowns,2020-08-06 06:01:27,Might be good to fix up the lock annotations before removing the ASSERT annotation on AssertLockHeldInternal so you can compile successfully at each commit? Otherwise looks good to me.,https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-669720297,669720297,
hebasto,2020-08-06 06:07:13,"@ajtowns \n> Might be good to fix up the lock annotations before removing the ASSERT annotation on AssertLockHeldInternal so you can compile successfully at each commit? Otherwise looks good to me.\n\nDone, commits are reordered now.",https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-669722304,669722304,
jnewbery,2020-08-07 10:56:00,Concept ACK. Perhaps the **Locking/mutex usage notes** section of developer-notes.md should be updated with the current best practice for annotating/asserting locks.,https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-670459278,670459278,
hebasto,2020-08-07 11:18:00,"@jnewbery \n> Concept ACK. Perhaps the **Locking/mutex usage notes** section of developer-notes.md should be updated with the current best practice for annotating/asserting locks.\n\nYou read my mind :)\n\nDo you want me adding a doc commit to this PR?",https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-670467580,670467580,
jnewbery,2020-08-07 12:09:02,"> Do you want me adding a doc commit to this PR?\n\nI think it's fine to add it to this PR.",https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-670485238,670485238,
hebasto,2020-08-08 10:05:46,"> > Do you want me adding a doc commit to this PR?\n> \n> I think it's fine to add it to this PR.\n\nDone.\n\n@jnewbery @jonatack Mind checking wording in the doc commit?",https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-670853751,670853751,
vasild,2020-08-10 12:01:35,"This PR basically replaces the attribute `ASSERT_EXCLUSIVE_LOCK()` of `AssertLockHeldInternal()` with `EXCLUSIVE_LOCKS_REQUIRED()` and fixes some of the exposed warnings.\n\nIt is unfortunate that we can't have both attributes.",https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-671313972,671313972,
jnewbery,2020-08-13 11:35:22,"This all seems reasonable and the updated developer docs are clear and make sense.\n\n@ajtowns : what does your :-1: mean here https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-671313972? Are you saying that we can have both attributes, or that it's not unfortunate, or that we can't have both and that this PR is going in the wrong direction? As someone who doesn't know very much about t",https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-673425395,673425395,
DrahtBot,2020-08-20 20:58:53,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #17785 (p2p: Unify Send and Receive protocol versions by hebasto)\n\nIf you consider this pull request important, please a",https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-677901218,677901218,
hebasto,2020-08-24 17:32:41,Rebased 76668236610198f61bf60c42a40c2826585515b7 -> 9ee46539e2c65e4ac53149fcdf1badeb35279013 ([pr19668.05](https://github.com/hebasto/bitcoin/commits/pr19668.05) -> [pr19668.06](https://github.com/hebasto/bitcoin/commits/pr19668.06)) due to the conflict with #19704.,https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-679265308,679265308,
MarcoFalke,2020-08-29 17:32:09,"Just one question: https://github.com/bitcoin/bitcoin/pull/19668#discussion_r479669946\n\nOtherwise, almost ACK 984ea63cb6 ðŸ”˜\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nalmost ACK 984ea63cb6 ðŸ”˜\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\np",https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-683319875,683319875,
hebasto,2020-08-29 17:51:43,"Updated 9ee46539e2c65e4ac53149fcdf1badeb35279013 -> ea74e10acf17903e44c85e3678853414653dd4e1 ([pr19668.06](https://github.com/hebasto/bitcoin/commits/pr19668.06) -> [pr19668.07](https://github.com/hebasto/bitcoin/commits/pr19668.07), [diff](https://github.com/hebasto/bitcoin/compare/pr19668.06..pr19668.07)):\n\n- addressed @MarcoFalke's [comment](https://github.com/bitcoin/bitcoin/pull/19668#dis",https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-683322259,683322259,
MarcoFalke,2020-08-29 17:58:34,"ACK ea74e10acf ðŸŽ™\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK ea74e10acf ðŸŽ™\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjduAwAvJQy8WxET79bR7T5ZL/UoKzl6VDAiNEM5pbrfO0xCRrsD1bM+s+RABtR\nnxkeaGOrOrUNAvbGun0GKtT7voqp3x3RwXtcUdeNRCSJXp5zOIz",https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-683323040,683323040,
hebasto,2020-08-30 16:52:29,"@ajtowns @jnewbery @vasild\n\nBegging for another review round :)",https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-683443587,683443587,
jnewbery,2020-08-31 10:18:14,ACK ea74e10acf17903e44c85e3678853414653dd4e1,https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-683693418,683693418,
ajtowns,2020-08-31 16:21:13,ACK ea74e10acf17903e44c85e3678853414653dd4e1,https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-683882752,683882752,
MarcoFalke,2020-08-05 13:47:31,"It seems a layer-violation to import the validation lock cs_main into the net.h header to annotate this function. Also, this approach doesn't seem like it scales, since it has to be done for each mutex that is held during a call to `ForEachNode`.",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r465738894,465738894,src/net.h
hebasto,2020-08-05 14:43:17,[Updated](https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-669231930).,https://github.com/bitcoin/bitcoin/pull/19668#discussion_r465779202,465779202,src/net.h
vasild,2020-08-07 13:38:33,"These can also be tagged with `ASSERT_EXCLUSIVE_LOCK`.\n\n```suggestion\nvoid AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) ASSERT_EXCLUSIVE_LOCK(cs) EXCLUSIVE_LOCKS_REQUIRED(cs);\ntemplate <typename MutexType>\nvoid AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) ASSERT_EXCLUSIVE_LOCK(cs) EXCLUSIVE_LOC",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r467045878,467045878,src/sync.h
vasild,2020-08-07 20:04:10,"I tried the following with `AssertLockHeldInternal() EXCLUSIVE_LOCKS_REQUIRED(cs) ASSERT_EXCLUSIVE_LOCK(cs);`:\n\n```cpp\nvoid f()\n{\n    // The following line produces a warning due to the EXCLUSIVE_LOCKS_REQUIRED attribute:\n    // Calling function 'AssertLockHeldInternal<AnnotatedMixin<std:: __1::recursive_mutex>>' requires holding mutex 'cs_main' exclusively [-Wthread-safety-analysis]\",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r467244459,467244459,src/sync.h
hebasto,2020-08-07 20:47:08,"> These can also be tagged with `ASSERT_EXCLUSIVE_LOCK`.\n\nWhat are expected benefits?",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r467261327,467261327,src/sync.h
hebasto,2020-08-08 08:38:19,"@vasild \nHere are branches to test your suggestion:\n- https://github.com/hebasto/bitcoin/tree/pr16981-base\n- https://github.com/hebasto/bitcoin/tree/pr16981-suggestion\n\nCompiling the branch with suggestion miss the following warnings:\n```\nwallet/scriptpubkeyman.cpp:1861:9: warning: reading variable 'm_map_crypted_keys' requires holding mutex 'cs_desc_man' [-Wthread-safety-analysis]\",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r467396070,467396070,src/sync.h
vasild,2020-08-10 11:50:13,"Ok, I confirm the above. The presence of `ASSERT_EXCLUSIVE_LOCK()` causes some warnings to be silenced.",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r467850828,467850828,src/sync.h
vasild,2020-08-10 11:56:53,"nit: Maybe use an example that does not involve `RecursiveMutex` since we recommend against using it and if we manage to obliterate it from the code, then this example will require adjusting.",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r467853723,467853723,doc/developer-notes.md
MarcoFalke,2020-08-29 09:38:37,"LockAssertion's `__attribute__` is `EXCLUSIVE_LOCK_FUNCTION` aka `ACQUIRE`. This goes against the clang documentation, which states that the capability is *not* held. https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#acquire-acquire-shared-release-release-shared\n\n> ACQUIRE is an attribute on functions or methods, which declares that the function acquires a capability, but does not release ",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r479631289,479631289,src/net_processing.cpp
hebasto,2020-08-29 16:00:59,"https://github.com/bitcoin/bitcoin/blob/4631dc5c578475fd3ca7a91676f7daf788a11192/src/sync.h#L353-L355\n\n> _when it_ [the fact that mutex is locked] _couldn't be determined otherwise_ [by Thread Safety Analysis]\n\nSuch lambda expression is that case.",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r479663318,479663318,src/net_processing.cpp
hebasto,2020-08-29 16:23:05,"Oh, I've failed to find an example in our code base that embraces a `Mutex` instance, an annotation in function member declaration, and an assertion in function member definition.",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r479665449,479665449,doc/developer-notes.md
MarcoFalke,2020-08-29 16:44:12,"But in that case the `AssertLockHeld` (version as in current master) should be used. That would also comply with the clang docs:  https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#assert-capability-and-assert-shared-capability\n\n> These are attributes on a function or method that does a run-time test to see whether the calling thread holds the given capability. The function is assumed to fa",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r479667413,479667413,src/net_processing.cpp
MarcoFalke,2020-08-29 16:45:52,"The alternative version could even be tagged with `EXCLUSIVE_LOCKS_REQUIRED`, so that correct usage of the run-time-only check would be enforced at compile time.",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r479667589,479667589,src/net_processing.cpp
hebasto,2020-08-29 16:46:40,This PR goal is decouple compile-time check from run-time one.,https://github.com/bitcoin/bitcoin/pull/19668#discussion_r479667659,479667659,src/net_processing.cpp
hebasto,2020-08-29 16:55:41,"From _the point of Thread Safety Analysis_ the `AssertLockHeld()` is a run-time check now. That hides compile-time checks.\n\nThis PR makes `AssertLockHeld()` a compile-time check (again from _the point of Thread Safety Analysis_).\n\n> It might be good to add an `AssertLockHeld` version that only does the runtime check without influencing compile-time warnings.\n\nThis PR makes (not adds) """,https://github.com/bitcoin/bitcoin/pull/19668#discussion_r479668534,479668534,src/net_processing.cpp
MarcoFalke,2020-08-29 16:56:29,"in commit 5971934eac13809143c763aa515b1960a7368d74:\n\nwhy are you removing this? This should come with the appropriate annotation to enforce correct usage and warn about missing compile-time annotations\n\n```suggestion\nvoid AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) EXCLUSIVE_LOCKS_REQUIRED(cs);\n```",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r479668587,479668587,src/sync.h
MarcoFalke,2020-08-29 16:56:59,"In fact, adding this annotation and compiling the commit shows one instance of a missing annotation.",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r479668635,479668635,src/sync.h
MarcoFalke,2020-08-29 17:01:43,"Ah, it looks like you already did that in the next commit :man_facepalming:  653c8d065d90642ffb2d8d4d49474b4abc67a811",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r479669053,479669053,src/sync.h
hebasto,2020-08-29 17:03:53,Should I reorder/squash commits?,https://github.com/bitcoin/bitcoin/pull/19668#discussion_r479669193,479669193,src/sync.h
MarcoFalke,2020-08-29 17:12:23,"Ok, but why are you not adding the annotation that the documentation suggests for this use case?\n\n```diff\ndiff --git a/src/sync.h b/src/sync.h\nindex 7b397a8003..4a222442a9 100644\n--- a/src/sync.h\n+++ b/src/sync.h\n@@ -357,7 +357,7 @@ public:\n struct SCOPED_LOCKABLE LockAssertion\n {\n     template <typename Mutex>\n-    explicit LockAssertion(Mutex& mutex) EXCLUSIVE_LOCK_FUNCTION",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r479669946,479669946,src/net_processing.cpp
MarcoFalke,2020-08-29 17:31:04,"No need to reorder, but if you want you can describe the two preparatory commits. Suggested git range-diff for the first two commits:\n\n\n```\n1:  00e537d140 ! 1:  efeaeaec78 Use LockAssertion utility class instead of AssertLockHeld()\n    @@ Metadata\n      ## Commit message ##\n         Use LockAssertion utility class instead of AssertLockHeld()\n     \n    +    First, add the proper a",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r479671611,479671611,src/sync.h
hebasto,2020-08-29 17:32:19,"> Ok, but why are you not adding the annotation that the documentation suggests for this use case?\n\nIt seems a bit out of this PR scope.\nNevertheless, `ASSERT_EXCLUSIVE_LOCK` ""does a run-time test"". But `LockAssertion` provides compile-time TSA check. See: https://github.com/bitcoin/bitcoin/pull/14437/files#diff-df95fc819b237793cb462142a31b1871\n",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r479671761,479671761,src/net_processing.cpp
hebasto,2020-08-29 17:47:55,Thanks! Commit messages have been [updated](https://github.com/bitcoin/bitcoin/pull/19668#issuecomment-683322259).,https://github.com/bitcoin/bitcoin/pull/19668#discussion_r479673202,479673202,src/sync.h
MarcoFalke,2020-08-29 17:55:31,"The run time check was added when it was renamed from ""annotation"" to ""assertion"": https://github.com/bitcoin/bitcoin/pull/16034#issuecomment-493042117",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r479673855,479673855,src/net_processing.cpp
hebasto,2020-08-29 18:06:01,"Our crafted run time check `AssertLockHeld()` is preferred over TSA run time check `ASSERT_EXCLUSIVE_LOCK()`, no?",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r479674772,479674772,src/net_processing.cpp
ajtowns,2020-08-31 16:10:58,I think the only actual differences between `EXCLUSIVE_LOCK_FUNCTION` and `ASSERT_EXCLUSIVE_LOCK` are that the latter doesn't warn you when it sees you attempt to lock the same thing twice (so whether a redundant assertion like `LOCK(x); LockAssertion a(x);` gives an error or not) and whether it warns you if you don't release the lock when you leave the scope -- but since we've got an unlocking de,https://github.com/bitcoin/bitcoin/pull/19668#discussion_r480234824,480234824,src/net_processing.cpp
MarcoFalke,2020-08-31 16:13:16,Sure. Lets leave it as is. Resolving discussion.,https://github.com/bitcoin/bitcoin/pull/19668#discussion_r480236074,480236074,src/net_processing.cpp
ryanofsky,2020-09-03 17:25:08,What's the reason to prefer LockAssertion to AssertLockHeld if AssertLockHeld works at compile time and runtime and LockAssertion only works at compile time? Maybe this could be clarified https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#threads-and-synchronization,https://github.com/bitcoin/bitcoin/pull/19668#discussion_r483140292,483140292,src/net_processing.cpp
hebasto,2020-09-03 18:00:30,"When TSA fails to detect that a mutex is locked we do want to use `LockAssertion` as using `AssertLockHeld` no longer helps:\n```\n$ git diff\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\nindex 0e049bd66..90bd626fc 100644\n--- a/src/net_processing.cpp\n+++ b/src/net_processing.cpp\n@@ -1370,7 +1370,7 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, c",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r483159531,483159531,src/net_processing.cpp
hebasto,2020-09-03 18:03:08,And this `LockAssertion` application is documented: https://github.com/bitcoin/bitcoin/blob/a0a422c34cfd6514d0cc445bd784d3ee1a2d1749/src/sync.h#L355-L357,https://github.com/bitcoin/bitcoin/pull/19668#discussion_r483160829,483160829,src/net_processing.cpp
hebasto,2020-09-03 18:04:40,"> Maybe this could be clarified https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#threads-and-synchronization\n\nMind suggesting the clarification as my English is so poor?",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r483161612,483161612,src/net_processing.cpp
ryanofsky,2020-09-03 21:45:30,"Oh, I wasn't aware `AssertLockHeld` annotations changed from `ASSERT_EXCLUSIVE_LOCK` \nto `EXCLUSIVE_LOCKS_REQUIRED` in #19668. This seems like a questionable decision to me, because now instead of being able to use `AssertLockHeld` everywhere, we have separate confusing `AssertLockHeld` and `LockAssertion` calls.\n\nI think I would want to clarify this by changing `AssertLockHeld` annotations ",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r483270987,483270987,src/net_processing.cpp
ajtowns,2020-09-03 22:29:09,"We have three types of assertions related for locking:\n\n* marking a function as `EXCLUSIVE_LOCKS_REQUIRED` has a compile time check with clang that the caller has already obtained the lock\n* declaring a `LockAssertion` instance overrides the clang compile time checks by saying that we've already somehow acquired the lock in a way that we can't prove via clang thread safety annotations. This ",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r483287210,483287210,src/net_processing.cpp
ryanofsky,2020-09-03 23:31:39,"> no longer needlessly disables the compile time checks\n\nIt's funny the only reason I ever called it was to disable compile time checks, and now it doesn't do that anymore! :smile: If really the only thing AssertLockHeld is doing is adding runtime checks on top of compile time checks that are already present, I think that is nearly useless. Anyway, can take it up in another PR.",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r483305959,483305959,src/net_processing.cpp
ryanofsky,2020-09-03 23:51:53,"> Anyway, can take it up in another PR.\n\nCreated #19865 to experiment\n\n",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r483311798,483311798,src/net_processing.cpp
ajtowns,2020-09-03 23:54:42,You use `LockAssertion g(cs_foo);` to tell the compiler that a lock is guaranteed to already be held within a code block even though the function annotations don't guarantee it. AssertLockHeld is useful if you're not compiling with clang.,https://github.com/bitcoin/bitcoin/pull/19668#discussion_r483312523,483312523,src/net_processing.cpp
ryanofsky,2020-09-04 00:12:34,"> AssertLockHeld is useful if you're not compiling with clang.\n\nYes, that's what I mean by ""nearly useless."" It can help developers who aren't using clang, and who are compiling with DEBUG_LOCKORDER, and who want to wait for an assert to trigger at runtime. But it won't make the codebase more thread safe because we already don't merge changes that don't compile with clang.\n\nAny case, if yo",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r483317313,483317313,src/net_processing.cpp
hebasto,2020-09-04 08:06:28,"> > AssertLockHeld is useful if you're not compiling with clang.\n> \n> Yes, that's what I mean by ""nearly useless."" It can help developers who aren't using clang, and who are compiling with DEBUG_LOCKORDER, and who want to wait for an assert to trigger at runtime. But it won't make the codebase more thread safe because we already don't merge changes that don't compile with clang.\n\nI [disagr",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r483457405,483457405,src/net_processing.cpp
aaronpuchert,2020-09-16 23:53:16,"> However if the assert attribute is defined first: `ASSERT_EXCLUSIVE_LOCK(cs) EXCLUSIVE_LOCKS_REQUIRED(cs)` then only the second warning is generated (`EXCLUSIVE_LOCKS_REQUIRED` is ignored in this case).\n\nThis is somewhat expected. If you assert `cs`, it's assumed to be held afterwards. If you require it to be held and then assert it, we warn if it isn't initially held, and then assume it to ",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r489815763,489815763,src/sync.h
aaronpuchert,2020-09-17 00:21:03,"`ASSERT_EXCLUSIVE_LOCK` was created for exactly this purpose, and it's conceptually the right attribute to use here. `EXCLUSIVE_LOCK_FUNCTION` isn't right for the very simple reason that you don't actually lock. Also this shouldn't be a `SCOPED_LOCKABLE` because assertions don't go out of scope.\n\n> `E_L_F` has the advantage that it discourages using `LockAssertion` where it's not necessary\n",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r489823422,489823422,src/net_processing.cpp
vasild,2020-09-18 09:41:15,"@aaronpuchert,\n> This is somewhat expected. If you assert cs, it's assumed to be held afterwards. If you require it to be held and then assert it, we warn if it isn't initially held, and then assume it to be held afterwards.\n\nI agree with that if they were two distinct functions:\n```cpp\nfunc_tagged_with_assert_exclusive_lock();\n...\nfunc_tagged_with_exclusive_lock_required();\n...\n",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r490828755,490828755,src/sync.h
aaronpuchert,2020-09-18 11:31:55,"> If the combination of `ATTR1` and `ATTR2` is meaningless then maybe it would be good to produce some warning or error instead of silently assuming some behavior.\n\nMakes sense, but there are many attributes and I'm not sure whether we can exhaustively figure out which combinations make sense and which don't.",https://github.com/bitcoin/bitcoin/pull/19668#discussion_r490885616,490885616,src/sync.h
