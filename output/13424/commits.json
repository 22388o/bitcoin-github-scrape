[
  {
    "sha": "5eb20f81d9568284dca735e4f770f41a48aa5660",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWIyMGY4MWQ5NTY4Mjg0ZGNhNzM1ZTRmNzcwZjQxYTQ4YWE1NjYw",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-06-08T18:16:07Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-08-07T16:47:39Z"
      },
      "message": "Consistently use ParseHashV to validate hash inputs in rpc\n\nParseHashV validates the length and encoding of the string and throws\nan informative RPC error on failure, which is as good or better than\nthese alternative calls.\n\nNote I switched ParseHashV to check string length first, because\nIsHex tests that the length is even, and an error like:\n\"must be of length 64 (not 63, for X)\" is much more informative than\n\"must be hexadecimal string (not X)\"",
      "tree": {
        "sha": "b0cddba3e535af76c852d57816d84f5335b15a6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0cddba3e535af76c852d57816d84f5335b15a6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5eb20f81d9568284dca735e4f770f41a48aa5660",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJbac0tAAoJEG7l83hfeLNFzaEH/R4hH+QfihF/JRzQoNRi6tML\nMScADAT5GgcKEwiNyhu1ixYLXvzOwI+dyIWBN+NwdXgVQGt3J8258i54joMewGnE\n/RGsLhrstGARQ4iI99SVe9z/7aTNo4SDlBrtun55PlOJ7Eq70wOeRAavF4ylAwoy\nnZ6mi8dLiwSEQRSUkgDYDCiL7PX5hdjxnKsoVt6hUqL/zr9jTrDXJXisu+iT1hDz\n3W2wAYS4Q7JyYX8JOdquklsrDgSGdEERJbKe/VjpJniZBTZmzDz5oOuocq6l0Qvi\nhKFFUdBkUXAAD0RVOT1ro9sHuFZZdsKmO3fPcg6mX3OgYq7QskPp5SHqHMIJtqU=\n=c7uz\n-----END PGP SIGNATURE-----",
        "payload": "tree b0cddba3e535af76c852d57816d84f5335b15a6d\nparent 56f69360dc98bd68704f19646a84d045788d199e\nauthor Ben Woosley <ben.woosley@gmail.com> 1528481767 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1533660459 -0400\n\nConsistently use ParseHashV to validate hash inputs in rpc\n\nParseHashV validates the length and encoding of the string and throws\nan informative RPC error on failure, which is as good or better than\nthese alternative calls.\n\nNote I switched ParseHashV to check string length first, because\nIsHex tests that the length is even, and an error like:\n\"must be of length 64 (not 63, for X)\" is much more informative than\n\"must be hexadecimal string (not X)\"\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eb20f81d9568284dca735e4f770f41a48aa5660",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5eb20f81d9568284dca735e4f770f41a48aa5660",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eb20f81d9568284dca735e4f770f41a48aa5660/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56f69360dc98bd68704f19646a84d045788d199e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56f69360dc98bd68704f19646a84d045788d199e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56f69360dc98bd68704f19646a84d045788d199e"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 58,
      "deletions": 59
    },
    "files": [
      {
        "sha": "b809fd0f5d18a1c2343240b86eb032f6caa77fd8",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 16,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eb20f81d9568284dca735e4f770f41a48aa5660/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eb20f81d9568284dca735e4f770f41a48aa5660/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=5eb20f81d9568284dca735e4f770f41a48aa5660",
        "patch": "@@ -252,7 +252,7 @@ static UniValue waitforblock(const JSONRPCRequest& request)\n         );\n     int timeout = 0;\n \n-    uint256 hash = uint256S(request.params[0].get_str());\n+    uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n \n     if (!request.params[1].isNull())\n         timeout = request.params[1].get_int();\n@@ -706,8 +706,7 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n \n     LOCK(cs_main);\n \n-    std::string strHash = request.params[0].get_str();\n-    uint256 hash(uint256S(strHash));\n+    uint256 hash(ParseHashV(request.params[0], \"hash\"));\n \n     bool fVerbose = true;\n     if (!request.params[1].isNull())\n@@ -800,8 +799,7 @@ static UniValue getblock(const JSONRPCRequest& request)\n \n     LOCK(cs_main);\n \n-    std::string strHash = request.params[0].get_str();\n-    uint256 hash(uint256S(strHash));\n+    uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n \n     int verbosity = 1;\n     if (!request.params[1].isNull()) {\n@@ -1033,8 +1031,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n \n     UniValue ret(UniValue::VOBJ);\n \n-    std::string strHash = request.params[0].get_str();\n-    uint256 hash(uint256S(strHash));\n+    uint256 hash(ParseHashV(request.params[0], \"txid\"));\n     int n = request.params[1].get_int();\n     COutPoint out(hash, n);\n     bool fMempool = true;\n@@ -1442,8 +1439,7 @@ static UniValue preciousblock(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"preciousblock\", \"\\\"blockhash\\\"\")\n         );\n \n-    std::string strHash = request.params[0].get_str();\n-    uint256 hash(uint256S(strHash));\n+    uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     CBlockIndex* pblockindex;\n \n     {\n@@ -1478,8 +1474,7 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"invalidateblock\", \"\\\"blockhash\\\"\")\n         );\n \n-    std::string strHash = request.params[0].get_str();\n-    uint256 hash(uint256S(strHash));\n+    uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     CValidationState state;\n \n     {\n@@ -1518,8 +1513,7 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n         );\n \n-    std::string strHash = request.params[0].get_str();\n-    uint256 hash(uint256S(strHash));\n+    uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n \n     {\n         LOCK(cs_main);\n@@ -1572,7 +1566,7 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n         LOCK(cs_main);\n         pindex = chainActive.Tip();\n     } else {\n-        uint256 hash = uint256S(request.params[1].get_str());\n+        uint256 hash(ParseHashV(request.params[1], \"blockhash\"));\n         LOCK(cs_main);\n         pindex = LookupBlockIndex(hash);\n         if (!pindex) {\n@@ -1711,8 +1705,7 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n \n         pindex = chainActive[height];\n     } else {\n-        const std::string strHash = request.params[0].get_str();\n-        const uint256 hash(uint256S(strHash));\n+        const uint256 hash(ParseHashV(request.params[0], \"hash_or_height\"));\n         pindex = LookupBlockIndex(hash);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");"
      },
      {
        "sha": "c95145b204b013fbac021a410fd71741ab52311a",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eb20f81d9568284dca735e4f770f41a48aa5660/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eb20f81d9568284dca735e4f770f41a48aa5660/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=5eb20f81d9568284dca735e4f770f41a48aa5660",
        "patch": "@@ -247,7 +247,7 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n \n     LOCK(cs_main);\n \n-    uint256 hash = ParseHashStr(request.params[0].get_str(), \"txid\");\n+    uint256 hash(ParseHashV(request.params[0], \"txid\"));\n     CAmount nAmount = request.params[2].get_int64();\n \n     if (!(request.params[1].isNull() || request.params[1].get_real() == 0)) {\n@@ -456,7 +456,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             // Format: <hashBestChain><nTransactionsUpdatedLast>\n             std::string lpstr = lpval.get_str();\n \n-            hashWatchedChain.SetHex(lpstr.substr(0, 64));\n+            hashWatchedChain = ParseHashV(lpstr.substr(0, 64), \"longpollid\");\n             nTransactionsUpdatedLastLP = atoi64(lpstr.substr(64));\n         }\n         else"
      },
      {
        "sha": "9f94307949df85f4b617eaef6ac9a58424f38c27",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eb20f81d9568284dca735e4f770f41a48aa5660/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eb20f81d9568284dca735e4f770f41a48aa5660/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=5eb20f81d9568284dca735e4f770f41a48aa5660",
        "patch": "@@ -229,9 +229,7 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n     UniValue txids = request.params[0].get_array();\n     for (unsigned int idx = 0; idx < txids.size(); idx++) {\n         const UniValue& txid = txids[idx];\n-        if (txid.get_str().length() != 64 || !IsHex(txid.get_str()))\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid txid \")+txid.get_str());\n-        uint256 hash(uint256S(txid.get_str()));\n+        uint256 hash(ParseHashV(txid, \"txid\"));\n         if (setTxids.count(hash))\n             throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, duplicated txid: \")+txid.get_str());\n        setTxids.insert(hash);\n@@ -242,7 +240,7 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n     uint256 hashBlock;\n     if (!request.params[1].isNull()) {\n         LOCK(cs_main);\n-        hashBlock = uint256S(request.params[1].get_str());\n+        hashBlock = ParseHashV(request.params[1], \"blockhash\");\n         pblockindex = LookupBlockIndex(hashBlock);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");"
      },
      {
        "sha": "85383eb3bc54450653c90cdbaf5ddffacb99d023",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eb20f81d9568284dca735e4f770f41a48aa5660/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eb20f81d9568284dca735e4f770f41a48aa5660/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=5eb20f81d9568284dca735e4f770f41a48aa5660",
        "patch": "@@ -117,16 +117,12 @@ CAmount AmountFromValue(const UniValue& value)\n \n uint256 ParseHashV(const UniValue& v, std::string strName)\n {\n-    std::string strHex;\n-    if (v.isStr())\n-        strHex = v.get_str();\n+    std::string strHex(v.get_str());\n+    if (64 != strHex.length())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", strName, 64, strHex.length(), strHex));\n     if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n-    if (64 != strHex.length())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d)\", strName, 64, strHex.length()));\n-    uint256 result;\n-    result.SetHex(strHex);\n-    return result;\n+    return uint256S(strHex);\n }\n uint256 ParseHashO(const UniValue& o, std::string strKey)\n {"
      },
      {
        "sha": "d08b80cc206ab0f18a81f87c050354449f51b9f3",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eb20f81d9568284dca735e4f770f41a48aa5660/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eb20f81d9568284dca735e4f770f41a48aa5660/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=5eb20f81d9568284dca735e4f770f41a48aa5660",
        "patch": "@@ -416,8 +416,7 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    uint256 hash;\n-    hash.SetHex(request.params[0].get_str());\n+    uint256 hash(ParseHashV(request.params[0], \"txid\"));\n     std::vector<uint256> vHash;\n     vHash.push_back(hash);\n     std::vector<uint256> vHashOut;"
      },
      {
        "sha": "fec8f69019d2a1ee426471a01d3b0ec9eb263fba",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 14,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eb20f81d9568284dca735e4f770f41a48aa5660/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eb20f81d9568284dca735e4f770f41a48aa5660/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5eb20f81d9568284dca735e4f770f41a48aa5660",
        "patch": "@@ -2231,9 +2231,8 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     isminefilter filter = ISMINE_SPENDABLE;\n \n     if (!request.params[0].isNull() && !request.params[0].get_str().empty()) {\n-        uint256 blockId;\n+        uint256 blockId(ParseHashV(request.params[0], \"blockhash\"));\n \n-        blockId.SetHex(request.params[0].get_str());\n         paltindex = pindex = LookupBlockIndex(blockId);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n@@ -2362,8 +2361,7 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    uint256 hash;\n-    hash.SetHex(request.params[0].get_str());\n+    uint256 hash(ParseHashV(request.params[0], \"txid\"));\n \n     isminefilter filter = ISMINE_SPENDABLE;\n     if(!request.params[1].isNull())\n@@ -2430,8 +2428,7 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    uint256 hash;\n-    hash.SetHex(request.params[0].get_str());\n+    uint256 hash(ParseHashV(request.params[0], \"txid\"));\n \n     if (!pwallet->mapWallet.count(hash)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n@@ -2836,17 +2833,13 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n                 {\"vout\", UniValueType(UniValue::VNUM)},\n             });\n \n-        const std::string& txid = find_value(o, \"txid\").get_str();\n-        if (!IsHex(txid)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected hex txid\");\n-        }\n-\n+        const uint256 txid(ParseHashO(o, \"txid\"));\n         const int nOutput = find_value(o, \"vout\").get_int();\n         if (nOutput < 0) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout must be positive\");\n         }\n \n-        const COutPoint outpt(uint256S(txid), nOutput);\n+        const COutPoint outpt(txid, nOutput);\n \n         const auto it = pwallet->mapWallet.find(outpt.hash);\n         if (it == pwallet->mapWallet.end()) {\n@@ -3701,8 +3694,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     }\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n-    uint256 hash;\n-    hash.SetHex(request.params[0].get_str());\n+    uint256 hash(ParseHashV(request.params[0], \"txid\"));\n \n     // optional parameters\n     CAmount totalFee = 0;"
      },
      {
        "sha": "e16e1e242f5cfc8fe2b7e18f8b9bffb2ed537932",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eb20f81d9568284dca735e4f770f41a48aa5660/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eb20f81d9568284dca735e4f770f41a48aa5660/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=5eb20f81d9568284dca735e4f770f41a48aa5660",
        "patch": "@@ -24,7 +24,8 @@ def run_test(self):\n         assert_raises_rpc_error(-1, \"prioritisetransaction\", self.nodes[0].prioritisetransaction, '', 0, 0, 0)\n \n         # Test `prioritisetransaction` invalid `txid`\n-        assert_raises_rpc_error(-1, \"txid must be hexadecimal string\", self.nodes[0].prioritisetransaction, txid='foo', fee_delta=0)\n+        assert_raises_rpc_error(-8, \"txid must be of length 64 (not 3, for 'foo')\", self.nodes[0].prioritisetransaction, txid='foo', fee_delta=0)\n+        assert_raises_rpc_error(-8, \"txid must be hexadecimal string (not 'Zd1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000')\", self.nodes[0].prioritisetransaction, txid='Zd1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000', fee_delta=0)\n \n         # Test `prioritisetransaction` invalid `dummy`\n         txid = '1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000'"
      },
      {
        "sha": "36cd8f5b097d6a14374418291b37f7dae7657315",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eb20f81d9568284dca735e4f770f41a48aa5660/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eb20f81d9568284dca735e4f770f41a48aa5660/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=5eb20f81d9568284dca735e4f770f41a48aa5660",
        "patch": "@@ -287,7 +287,7 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n         block_hash = int(node.generate(1)[0], 16)\n \n         # Store the raw block in our internal format.\n-        block = FromHex(CBlock(), node.getblock(\"%02x\" % block_hash, False))\n+        block = FromHex(CBlock(), node.getblock(\"%064x\" % block_hash, False))\n         for tx in block.vtx:\n             tx.calc_sha256()\n         block.rehash()"
      },
      {
        "sha": "ff377721cb323ab6ac3f2e0ebef5b9d5c0885c3b",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eb20f81d9568284dca735e4f770f41a48aa5660/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eb20f81d9568284dca735e4f770f41a48aa5660/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=5eb20f81d9568284dca735e4f770f41a48aa5660",
        "patch": "@@ -402,7 +402,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n \n             block_time += 9\n \n-            fork_point = self.nodes[0].getblock(\"%02x\" % new_block_hashes[0])[\"previousblockhash\"]\n+            fork_point = self.nodes[0].getblock(\"%064x\" % new_block_hashes[0])[\"previousblockhash\"]\n             fork_point = int(fork_point, 16)\n \n             # Use getblocks/getdata"
      },
      {
        "sha": "a908596ab3a398066b344b385a5cef80348a058a",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eb20f81d9568284dca735e4f770f41a48aa5660/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eb20f81d9568284dca735e4f770f41a48aa5660/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=5eb20f81d9568284dca735e4f770f41a48aa5660",
        "patch": "@@ -125,7 +125,9 @@ def _test_getchaintxstats(self):\n \n         # Test `getchaintxstats` invalid `blockhash`\n         assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].getchaintxstats, blockhash=0)\n-        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].getchaintxstats, blockhash='0')\n+        assert_raises_rpc_error(-8, \"blockhash must be of length 64 (not 1, for '0')\", self.nodes[0].getchaintxstats, blockhash='0')\n+        assert_raises_rpc_error(-8, \"blockhash must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].getchaintxstats, blockhash='ZZZ0000000000000000000000000000000000000000000000000000000000000')\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].getchaintxstats, blockhash='0000000000000000000000000000000000000000000000000000000000000000')\n         blockhash = self.nodes[0].getblockhash(200)\n         self.nodes[0].invalidateblock(blockhash)\n         assert_raises_rpc_error(-8, \"Block is not in main chain\", self.nodes[0].getchaintxstats, blockhash=blockhash)\n@@ -206,7 +208,9 @@ def _test_gettxoutsetinfo(self):\n     def _test_getblockheader(self):\n         node = self.nodes[0]\n \n-        assert_raises_rpc_error(-5, \"Block not found\", node.getblockheader, \"nonsense\")\n+        assert_raises_rpc_error(-8, \"hash must be of length 64 (not 8, for 'nonsense')\", node.getblockheader, \"nonsense\")\n+        assert_raises_rpc_error(-8, \"hash must be hexadecimal string (not 'ZZZ7bb8b1697ea987f3b223ba7819250cae33efacb068d23dc24859824a77844')\", node.getblockheader, \"ZZZ7bb8b1697ea987f3b223ba7819250cae33efacb068d23dc24859824a77844\")\n+        assert_raises_rpc_error(-5, \"Block not found\", node.getblockheader, \"0cf7bb8b1697ea987f3b223ba7819250cae33efacb068d23dc24859824a77844\")\n \n         besthash = node.getbestblockhash()\n         secondbesthash = node.getblockhash(199)"
      },
      {
        "sha": "a1bfb00e16e5814577634ac84ac1ab88cc58032d",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eb20f81d9568284dca735e4f770f41a48aa5660/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eb20f81d9568284dca735e4f770f41a48aa5660/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=5eb20f81d9568284dca735e4f770f41a48aa5660",
        "patch": "@@ -76,8 +76,9 @@ def run_test(self):\n         txid = '1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000'\n         assert_raises_rpc_error(-3, \"Expected type array\", self.nodes[0].createrawtransaction, 'foo', {})\n         assert_raises_rpc_error(-1, \"JSON value is not an object as expected\", self.nodes[0].createrawtransaction, ['foo'], {})\n-        assert_raises_rpc_error(-8, \"txid must be hexadecimal string\", self.nodes[0].createrawtransaction, [{}], {})\n-        assert_raises_rpc_error(-8, \"txid must be hexadecimal string\", self.nodes[0].createrawtransaction, [{'txid': 'foo'}], {})\n+        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].createrawtransaction, [{}], {})\n+        assert_raises_rpc_error(-8, \"txid must be of length 64 (not 3, for 'foo')\", self.nodes[0].createrawtransaction, [{'txid': 'foo'}], {})\n+        assert_raises_rpc_error(-8, \"txid must be hexadecimal string (not 'ZZZ7bb8b1697ea987f3b223ba7819250cae33efacb068d23dc24859824a77844')\", self.nodes[0].createrawtransaction, [{'txid': 'ZZZ7bb8b1697ea987f3b223ba7819250cae33efacb068d23dc24859824a77844'}], {})\n         assert_raises_rpc_error(-8, \"Invalid parameter, missing vout key\", self.nodes[0].createrawtransaction, [{'txid': txid}], {})\n         assert_raises_rpc_error(-8, \"Invalid parameter, missing vout key\", self.nodes[0].createrawtransaction, [{'txid': txid, 'vout': 'foo'}], {})\n         assert_raises_rpc_error(-8, \"Invalid parameter, vout must be positive\", self.nodes[0].createrawtransaction, [{'txid': txid, 'vout': -1}], {})\n@@ -165,9 +166,10 @@ def run_test(self):\n         # We should not get the tx if we provide an unrelated block\n         assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[0].getrawtransaction, tx, True, block2)\n         # An invalid block hash should raise the correct errors\n-        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal\", self.nodes[0].getrawtransaction, tx, True, True)\n-        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n+        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].getrawtransaction, tx, True, True)\n+        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n+        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n+        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].getrawtransaction, tx, True, \"ZZZ0000000000000000000000000000000000000000000000000000000000000\")\n         assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"0000000000000000000000000000000000000000000000000000000000000000\")\n         # Undo the blocks and check in_active_chain\n         self.nodes[0].invalidateblock(block1)"
      },
      {
        "sha": "26abed414a12eb7e1b12e250813fc2c0f04ad0c3",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eb20f81d9568284dca735e4f770f41a48aa5660/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eb20f81d9568284dca735e4f770f41a48aa5660/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=5eb20f81d9568284dca735e4f770f41a48aa5660",
        "patch": "@@ -62,12 +62,18 @@ def run_test(self):\n         txid_spent = txin_spent[\"txid\"]\n         txid_unspent = txid1 if txin_spent[\"txid\"] != txid1 else txid2\n \n+        # Invalid txids\n+        assert_raises_rpc_error(-8, \"txid must be of length 64 (not 32, for '00000000000000000000000000000000')\", self.nodes[2].gettxoutproof, [\"00000000000000000000000000000000\"], blockhash)\n+        assert_raises_rpc_error(-8, \"txid must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[2].gettxoutproof, [\"ZZZ0000000000000000000000000000000000000000000000000000000000000\"], blockhash)\n+        # Invalid blockhashes\n+        assert_raises_rpc_error(-8, \"blockhash must be of length 64 (not 32, for '00000000000000000000000000000000')\", self.nodes[2].gettxoutproof, [txid_spent], \"00000000000000000000000000000000\")\n+        assert_raises_rpc_error(-8, \"blockhash must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[2].gettxoutproof, [txid_spent], \"ZZZ0000000000000000000000000000000000000000000000000000000000000\")\n         # We can't find the block from a fully-spent tx\n         assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[2].gettxoutproof, [txid_spent])\n         # We can get the proof if we specify the block\n         assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_spent], blockhash)), [txid_spent])\n         # We can't get the proof if we specify a non-existent block\n-        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[2].gettxoutproof, [txid_spent], \"00000000000000000000000000000000\")\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[2].gettxoutproof, [txid_spent], \"0000000000000000000000000000000000000000000000000000000000000000\")\n         # We can get the proof if the transaction is unspent\n         assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_unspent])), [txid_unspent])\n         # We can get the proof if we provide a list of transactions and one of them is unspent. The ordering of the list should not matter."
      },
      {
        "sha": "add7b7629d104ab1f13d2c337740b501b1606410",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eb20f81d9568284dca735e4f770f41a48aa5660/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eb20f81d9568284dca735e4f770f41a48aa5660/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=5eb20f81d9568284dca735e4f770f41a48aa5660",
        "patch": "@@ -122,9 +122,15 @@ def run_test(self):\n         assert_equal([unspent_0], self.nodes[2].listlockunspent())\n         self.nodes[2].lockunspent(True, [unspent_0])\n         assert_equal(len(self.nodes[2].listlockunspent()), 0)\n-        assert_raises_rpc_error(-8, \"Invalid parameter, unknown transaction\",\n+        assert_raises_rpc_error(-8, \"txid must be of length 64 (not 34, for '0000000000000000000000000000000000')\",\n                                 self.nodes[2].lockunspent, False,\n                                 [{\"txid\": \"0000000000000000000000000000000000\", \"vout\": 0}])\n+        assert_raises_rpc_error(-8, \"txid must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\",\n+                                self.nodes[2].lockunspent, False,\n+                                [{\"txid\": \"ZZZ0000000000000000000000000000000000000000000000000000000000000\", \"vout\": 0}])\n+        assert_raises_rpc_error(-8, \"Invalid parameter, unknown transaction\",\n+                                self.nodes[2].lockunspent, False,\n+                                [{\"txid\": \"0000000000000000000000000000000000000000000000000000000000000000\", \"vout\": 0}])\n         assert_raises_rpc_error(-8, \"Invalid parameter, vout index out of bounds\",\n                                 self.nodes[2].lockunspent, False,\n                                 [{\"txid\": unspent_0[\"txid\"], \"vout\": 999}])"
      },
      {
        "sha": "a49be78f2b8a281024c36b44a408fceb64eb95cc",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eb20f81d9568284dca735e4f770f41a48aa5660/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eb20f81d9568284dca735e4f770f41a48aa5660/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=5eb20f81d9568284dca735e4f770f41a48aa5660",
        "patch": "@@ -50,8 +50,10 @@ def test_invalid_blockhash(self):\n                                 \"42759cde25462784395a337460bde75f58e73d3f08bd31fdc3507cbac856a2c4\")\n         assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].listsinceblock,\n                                 \"0000000000000000000000000000000000000000000000000000000000000000\")\n-        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].listsinceblock,\n+        assert_raises_rpc_error(-8, \"blockhash must be of length 64 (not 11, for 'invalid-hex')\", self.nodes[0].listsinceblock,\n                                 \"invalid-hex\")\n+        assert_raises_rpc_error(-8, \"blockhash must be hexadecimal string (not 'Z000000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].listsinceblock,\n+                                \"Z000000000000000000000000000000000000000000000000000000000000000\")\n \n     def test_reorg(self):\n         '''"
      }
    ]
  }
]