[
  {
    "sha": "c1d79812f428860e6f624835851d6f3ecd86bbb3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWQ3OTgxMmY0Mjg4NjBlNmY2MjQ4MzU4NTFkNmYzZWNkODZiYmIz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-09-12T14:45:01Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-09-12T14:45:09Z"
      },
      "message": "Do not abort if RPC listening for IPv6 fails\n\nInstead, fall back to IPv4 listening.",
      "tree": {
        "sha": "9979a1dec6ecc6605636ed1d448680d8f9015347",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9979a1dec6ecc6605636ed1d448680d8f9015347"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1d79812f428860e6f624835851d6f3ecd86bbb3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1d79812f428860e6f624835851d6f3ecd86bbb3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1d79812f428860e6f624835851d6f3ecd86bbb3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1d79812f428860e6f624835851d6f3ecd86bbb3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d078739965e09a74b50b52a66079fee804800341",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d078739965e09a74b50b52a66079fee804800341",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d078739965e09a74b50b52a66079fee804800341"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 20,
      "deletions": 5
    },
    "files": [
      {
        "sha": "fa392363616a4c94f64e89225a11909e2afd31b1",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 5,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1d79812f428860e6f624835851d6f3ecd86bbb3/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1d79812f428860e6f624835851d6f3ecd86bbb3/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=c1d79812f428860e6f624835851d6f3ecd86bbb3",
        "patch": "@@ -761,17 +761,19 @@ void ThreadRPCServer2(void* parg)\n     const bool loopback = !mapArgs.count(\"-rpcallowip\");\n     asio::ip::address bindAddress = loopback ? asio::ip::address_v6::loopback() : asio::ip::address_v6::any();\n     ip::tcp::endpoint endpoint(bindAddress, GetArg(\"-rpcport\", 8332));\n+    boost::system::error_code v6_only_error;\n+    boost::shared_ptr<ip::tcp::acceptor> acceptor(new ip::tcp::acceptor(io_service));\n \n     boost::signals2::signal<void ()> StopRequests;\n \n+    bool fListening = false;\n+    std::string strerr;\n     try\n     {\n-        boost::shared_ptr<ip::tcp::acceptor> acceptor(new ip::tcp::acceptor(io_service));\n         acceptor->open(endpoint.protocol());\n         acceptor->set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));\n \n         // Try making the socket dual IPv6/IPv4 (if listening on the \"any\" address)\n-        boost::system::error_code v6_only_error;\n         acceptor->set_option(boost::asio::ip::v6_only(loopback), v6_only_error);\n \n         acceptor->bind(endpoint);\n@@ -783,8 +785,16 @@ void ThreadRPCServer2(void* parg)\n                     static_cast<void (ip::tcp::acceptor::*)()>(&ip::tcp::acceptor::close), acceptor.get())\n                 .track(acceptor));\n \n+        fListening = true;\n+    }\n+    catch(boost::system::system_error &e)\n+    {\n+        strerr = strprintf(_(\"An error occurred while setting up the RPC port %i for listening on IPv6, falling back to IPv4: %s\"), endpoint.port(), e.what());\n+    }\n+\n+    try {\n         // If dual IPv6/IPv4 failed (or we're opening loopback interfaces only), open IPv4 separately\n-        if (loopback || v6_only_error)\n+        if (!fListening || loopback || v6_only_error)\n         {\n             bindAddress = loopback ? asio::ip::address_v4::loopback() : asio::ip::address_v4::any();\n             endpoint.address(bindAddress);\n@@ -800,12 +810,17 @@ void ThreadRPCServer2(void* parg)\n             StopRequests.connect(signals2::slot<void ()>(\n                         static_cast<void (ip::tcp::acceptor::*)()>(&ip::tcp::acceptor::close), acceptor.get())\n                     .track(acceptor));\n+\n+            fListening = true;\n         }\n     }\n     catch(boost::system::system_error &e)\n     {\n-        uiInterface.ThreadSafeMessageBox(strprintf(_(\"An error occurred while setting up the RPC port %i for listening: %s\"), endpoint.port(), e.what()),\n-                             _(\"Error\"), CClientUIInterface::OK | CClientUIInterface::MODAL);\n+        strerr = strprintf(_(\"An error occurred while setting up the RPC port %i for listening on IPv4: %s\"), endpoint.port(), e.what());\n+    }\n+\n+    if (!fListening) {\n+        uiInterface.ThreadSafeMessageBox(strerr, _(\"Error\"), CClientUIInterface::OK | CClientUIInterface::MODAL);\n         StartShutdown();\n         return;\n     }"
      }
    ]
  }
]