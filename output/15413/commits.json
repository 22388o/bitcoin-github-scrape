[
  {
    "sha": "543ef7d626177a5cc4e0f5c7f01bca0946782d1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDNlZjdkNjI2MTc3YTVjYzRlMGY1YzdmMDFiY2EwOTQ2NzgyZDFj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-02-15T09:41:48Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-02-15T09:41:52Z"
      },
      "message": "tests: Add missing cs_main locks required when accessing pcoinsdbview, pcoinsTip or pblocktree",
      "tree": {
        "sha": "555da7db84222843ae03bfaa8f2667dd848ce71e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/555da7db84222843ae03bfaa8f2667dd848ce71e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/543ef7d626177a5cc4e0f5c7f01bca0946782d1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/543ef7d626177a5cc4e0f5c7f01bca0946782d1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/543ef7d626177a5cc4e0f5c7f01bca0946782d1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/543ef7d626177a5cc4e0f5c7f01bca0946782d1c/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c576979b78b541bf3b4a7cbeee989b55d268e3e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c576979b78b541bf3b4a7cbeee989b55d268e3e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c576979b78b541bf3b4a7cbeee989b55d268e3e1"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 8,
      "deletions": 5
    },
    "files": [
      {
        "sha": "cd4543c012ee9021c954d4293ad2a2ad319638f2",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/543ef7d626177a5cc4e0f5c7f01bca0946782d1c/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/543ef7d626177a5cc4e0f5c7f01bca0946782d1c/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=543ef7d626177a5cc4e0f5c7f01bca0946782d1c",
        "patch": "@@ -73,10 +73,12 @@ static void AssembleBlock(benchmark::State& state)\n     boost::thread_group thread_group;\n     CScheduler scheduler;\n     {\n+        LOCK(cs_main);\n         ::pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n         ::pcoinsdbview.reset(new CCoinsViewDB(1 << 23, true));\n         ::pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n-\n+    }\n+    {\n         const CChainParams& chainparams = Params();\n         thread_group.create_thread(std::bind(&CScheduler::serviceQueue, &scheduler));\n         GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);"
      },
      {
        "sha": "1f6840d81315e9364b227b5fb96e1c4063133e3a",
        "filename": "src/bench/duplicate_inputs.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/543ef7d626177a5cc4e0f5c7f01bca0946782d1c/src/bench/duplicate_inputs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/543ef7d626177a5cc4e0f5c7f01bca0946782d1c/src/bench/duplicate_inputs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/duplicate_inputs.cpp?ref=543ef7d626177a5cc4e0f5c7f01bca0946782d1c",
        "patch": "@@ -37,10 +37,12 @@ static void DuplicateInputs(benchmark::State& state)\n     CScheduler scheduler;\n     const CChainParams& chainparams = Params();\n     {\n+        LOCK(cs_main);\n         ::pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n         ::pcoinsdbview.reset(new CCoinsViewDB(1 << 23, true));\n         ::pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n-\n+    }\n+    {\n         thread_group.create_thread(std::bind(&CScheduler::serviceQueue, &scheduler));\n         GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n         LoadGenesisBlock(chainparams);"
      },
      {
        "sha": "4d04aae7e929884f7a2a1368b18c3f8178c42935",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/543ef7d626177a5cc4e0f5c7f01bca0946782d1c/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/543ef7d626177a5cc4e0f5c7f01bca0946782d1c/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=543ef7d626177a5cc4e0f5c7f01bca0946782d1c",
        "patch": "@@ -102,7 +102,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n // should fail.\n // Capture this interaction with the upgraded_nop argument: set it when evaluating\n // any script flag that is implemented as an upgraded NOP code.\n-static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t failing_flags, bool add_to_cache)\n+static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t failing_flags, bool add_to_cache) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     PrecomputedTransactionData txdata(tx);\n     // If we add many more flags, this loop can get too expensive, but we can\n@@ -219,11 +219,10 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n     CBlock block;\n \n     block = CreateAndProcessBlock({spend_tx}, p2pk_scriptPubKey);\n+    LOCK(cs_main);\n     BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n     BOOST_CHECK(pcoinsTip->GetBestBlock() == block.GetHash());\n \n-    LOCK(cs_main);\n-\n     // Test P2SH: construct a transaction that is valid without P2SH, and\n     // then test validity with P2SH.\n     {"
      }
    ]
  }
]