[
  {
    "sha": "fa72fce7c948185752a01002000ea511809146ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTcyZmNlN2M5NDgxODU3NTJhMDEwMDIwMDBlYTUxMTgwOTE0NmVk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-08T17:34:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-06-09T19:00:48Z"
      },
      "message": "test: Use ConnmanTestMsg from test lib in denialofservice_tests",
      "tree": {
        "sha": "ef48ef3f9f6f2bb4be9ee6fe951132a023dd8d32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef48ef3f9f6f2bb4be9ee6fe951132a023dd8d32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa72fce7c948185752a01002000ea511809146ed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgGhwv+MUg0AhsxlNxJnkY1KcuCiMlmnore5CogRV6PBUnLtQVje5CMRTu+0NA0\nBYdLIsMWJDLTmYbKq7VFCTky6C/NM/0QXBhnIUAqkYg2OW449SqNqFIEDd+vYgf/\ndC3vN3EAWYYCmzYseGAMx4mVxoI7AS5UMq4Rv0VpYkXJGEMeDxjvWBlONjNM2Fz3\nprCnHwbUZ6WbLmi4YmBeUcz9zqubL097ibjSYrzY5vSuv0/bDfEXoDRt+tUywu8Y\n7N+06O2npn4ZNtOnYYA3gzvoJI/UuuLQPpITi7bb1i9o5epR4iIjUDvK14pzt65z\nr88x/tvUCvxNQKb/Q+xpCGumfTOrRNtDHicOzi9Ela1KeSZpHCJmR614VBpzGgHn\ncjXITBS8BlX91nvdKqT2aj5WigMLn9QykzCD/Ni/X2eA5xobiLKgIi3N+7BaVx9z\nWHPk+12guaCbCa6SK6j42LqLHXd/+kpdac+O0I3JRNINoyL5oA3KGhcZWm0WI7yJ\nTmyo/kzt\n=OS1R\n-----END PGP SIGNATURE-----",
        "payload": "tree ef48ef3f9f6f2bb4be9ee6fe951132a023dd8d32\nparent 82bc7faec8079b50f248655a97950087948f065d\nauthor MarcoFalke <falke.marco@gmail.com> 1586367296 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1623265248 +0200\n\ntest: Use ConnmanTestMsg from test lib in denialofservice_tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa72fce7c948185752a01002000ea511809146ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa72fce7c948185752a01002000ea511809146ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa72fce7c948185752a01002000ea511809146ed/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82bc7faec8079b50f248655a97950087948f065d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82bc7faec8079b50f248655a97950087948f065d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82bc7faec8079b50f248655a97950087948f065d"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 14,
      "deletions": 31
    },
    "files": [
      {
        "sha": "2b9a616f17291e36a6d5022b378775410bf8ac13",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 31,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa72fce7c948185752a01002000ea511809146ed/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa72fce7c948185752a01002000ea511809146ed/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=fa72fce7c948185752a01002000ea511809146ed",
        "patch": "@@ -14,36 +14,19 @@\n #include <script/signingprovider.h>\n #include <script/standard.h>\n #include <serialize.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n #include <txorphanage.h>\n #include <util/string.h>\n #include <util/system.h>\n #include <util/time.h>\n #include <validation.h>\n \n-#include <test/util/setup_common.h>\n-\n #include <array>\n #include <stdint.h>\n \n #include <boost/test/unit_test.hpp>\n \n-struct CConnmanTest : public CConnman {\n-    using CConnman::CConnman;\n-    void AddNode(CNode& node)\n-    {\n-        LOCK(cs_vNodes);\n-        vNodes.push_back(&node);\n-    }\n-    void ClearNodes()\n-    {\n-        LOCK(cs_vNodes);\n-        for (CNode* node : vNodes) {\n-            delete node;\n-        }\n-        vNodes.clear();\n-    }\n-};\n-\n static CService ip(uint32_t i)\n {\n     struct in_addr s;\n@@ -120,7 +103,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     peerLogic->FinalizeNode(dummyNode1);\n }\n \n-static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerManager &peerLogic, CConnmanTest* connman)\n+static void AddRandomOutboundPeer(std::vector<CNode*>& vNodes, PeerManager& peerLogic, ConnmanTestMsg& connman)\n {\n     CAddress addr(ip(g_insecure_rand_ctx.randbits(32)), NODE_NONE);\n     vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), INVALID_SOCKET, addr, /* nKeyedNetGroupIn */ 0, /* nLocalHostNonceIn */ 0, CAddress(), /* pszDest */ \"\", ConnectionType::OUTBOUND_FULL_RELAY, /* inbound_onion */ false));\n@@ -130,13 +113,13 @@ static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerManager &pee\n     peerLogic.InitializeNode(&node);\n     node.fSuccessfullyConnected = true;\n \n-    connman->AddNode(node);\n+    connman.AddTestNode(node);\n }\n \n BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n {\n     const CChainParams& chainparams = Params();\n-    auto connman = std::make_unique<CConnmanTest>(0x1337, 0x1337, *m_node.addrman);\n+    auto connman = std::make_unique<ConnmanTestMsg>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, nullptr,\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n \n@@ -150,8 +133,8 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n     std::vector<CNode *> vNodes;\n \n     // Mock some outbound peers\n-    for (int i=0; i<max_outbound_full_relay; ++i) {\n-        AddRandomOutboundPeer(vNodes, *peerLogic, connman.get());\n+    for (int i = 0; i < max_outbound_full_relay; ++i) {\n+        AddRandomOutboundPeer(vNodes, *peerLogic, *connman);\n     }\n \n     peerLogic->CheckForStaleTipAndEvictPeers();\n@@ -176,7 +159,7 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n     // If we add one more peer, something should get marked for eviction\n     // on the next check (since we're mocking the time to be in the future, the\n     // required time connected check should be satisfied).\n-    AddRandomOutboundPeer(vNodes, *peerLogic, connman.get());\n+    AddRandomOutboundPeer(vNodes, *peerLogic, *connman);\n \n     peerLogic->CheckForStaleTipAndEvictPeers();\n     for (int i = 0; i < max_outbound_full_relay; ++i) {\n@@ -202,14 +185,14 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n         peerLogic->FinalizeNode(*node);\n     }\n \n-    connman->ClearNodes();\n+    connman->ClearTestNodes();\n }\n \n BOOST_AUTO_TEST_CASE(peer_discouragement)\n {\n     const CChainParams& chainparams = Params();\n     auto banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    auto connman = std::make_unique<CConnmanTest>(0x1337, 0x1337, *m_node.addrman);\n+    auto connman = std::make_unique<ConnmanTestMsg>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n \n@@ -233,7 +216,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     nodes[0]->SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(nodes[0]);\n     nodes[0]->fSuccessfullyConnected = true;\n-    connman->AddNode(*nodes[0]);\n+    connman->AddTestNode(*nodes[0]);\n     peerLogic->Misbehaving(nodes[0]->GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\"); // Should be discouraged\n     {\n         LOCK(nodes[0]->cs_sendProcessing);\n@@ -249,7 +232,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     nodes[1]->SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(nodes[1]);\n     nodes[1]->fSuccessfullyConnected = true;\n-    connman->AddNode(*nodes[1]);\n+    connman->AddTestNode(*nodes[1]);\n     peerLogic->Misbehaving(nodes[1]->GetId(), DISCOURAGEMENT_THRESHOLD - 1, /* message */ \"\");\n     {\n         LOCK(nodes[1]->cs_sendProcessing);\n@@ -280,7 +263,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     nodes[2]->SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(nodes[2]);\n     nodes[2]->fSuccessfullyConnected = true;\n-    connman->AddNode(*nodes[2]);\n+    connman->AddTestNode(*nodes[2]);\n     peerLogic->Misbehaving(nodes[2]->GetId(), DISCOURAGEMENT_THRESHOLD, /* message */ \"\");\n     {\n         LOCK(nodes[2]->cs_sendProcessing);\n@@ -296,7 +279,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     for (CNode* node : nodes) {\n         peerLogic->FinalizeNode(*node);\n     }\n-    connman->ClearNodes();\n+    connman->ClearTestNodes();\n }\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)"
      }
    ]
  }
]