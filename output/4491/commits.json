[
  {
    "sha": "eaedb59e0570558a528eac52f7fd89639911496e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWVkYjU5ZTA1NzA1NThhNTI4ZWFjNTJmN2ZkODk2Mzk5MTE0OTZl",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-07-09T09:00:00Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-07-17T20:12:44Z"
      },
      "message": "net: add SetSocketNonBlocking() as OS independent wrapper",
      "tree": {
        "sha": "7f762bd63985d4f3c6f1cb8ffaf3a6af9e0f946f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f762bd63985d4f3c6f1cb8ffaf3a6af9e0f946f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eaedb59e0570558a528eac52f7fd89639911496e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaedb59e0570558a528eac52f7fd89639911496e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eaedb59e0570558a528eac52f7fd89639911496e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaedb59e0570558a528eac52f7fd89639911496e/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "e8d4cb807169dd56e8efc753521a94368dd2f69d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8d4cb807169dd56e8efc753521a94368dd2f69d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8d4cb807169dd56e8efc753521a94368dd2f69d"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 47,
      "deletions": 44
    },
    "files": [
      {
        "sha": "e0f0f14f2b51e7dea1db7118e003237a3d8eda5e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 15,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaedb59e0570558a528eac52f7fd89639911496e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaedb59e0570558a528eac52f7fd89639911496e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=eaedb59e0570558a528eac52f7fd89639911496e",
        "patch": "@@ -501,14 +501,8 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest)\n         addrman.Attempt(addrConnect);\n \n         // Set to non-blocking\n-#ifdef WIN32\n-        u_long nOne = 1;\n-        if (ioctlsocket(hSocket, FIONBIO, &nOne) == SOCKET_ERROR)\n-            LogPrintf(\"ConnectSocket() : ioctlsocket non-blocking setting failed, error %s\\n\", NetworkErrorString(WSAGetLastError()));\n-#else\n-        if (fcntl(hSocket, F_SETFL, O_NONBLOCK) == SOCKET_ERROR)\n-            LogPrintf(\"ConnectSocket() : fcntl non-blocking setting failed, error %s\\n\", NetworkErrorString(errno));\n-#endif\n+        if (!SetSocketNonBlocking(hSocket, true))\n+            LogPrintf(\"ConnectNode: Setting socket to non-blocking failed, error %s\\n\", NetworkErrorString(WSAGetLastError()));\n \n         // Add node\n         CNode* pnode = new CNode(hSocket, addrConnect, pszDest ? pszDest : \"\", false);\n@@ -1642,14 +1636,9 @@ bool BindListenPort(const CService &addrBind, string& strError, bool fWhiteliste\n     setsockopt(hListenSocket, SOL_SOCKET, SO_REUSEADDR, (void*)&nOne, sizeof(int));\n #endif\n \n-#ifdef WIN32\n     // Set to non-blocking, incoming connections will also inherit this\n-    if (ioctlsocket(hListenSocket, FIONBIO, (u_long*)&nOne) == SOCKET_ERROR)\n-#else\n-    if (fcntl(hListenSocket, F_SETFL, O_NONBLOCK) == SOCKET_ERROR)\n-#endif\n-    {\n-        strError = strprintf(\"Error: Couldn't set properties on socket for incoming connections (error %s)\", NetworkErrorString(WSAGetLastError()));\n+    if (!SetSocketNonBlocking(hListenSocket, true)) {\n+        strError = strprintf(\"BindListenPort: Setting listening socket to non-blocking failed, error %s\\n\", NetworkErrorString(WSAGetLastError()));\n         LogPrintf(\"%s\\n\", strError);\n         return false;\n     }"
      },
      {
        "sha": "af6d11f0e217048e97122af4b4d8def850b152cf",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 29,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaedb59e0570558a528eac52f7fd89639911496e/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaedb59e0570558a528eac52f7fd89639911496e/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=eaedb59e0570558a528eac52f7fd89639911496e",
        "patch": "@@ -7,17 +7,17 @@\n #include \"bitcoin-config.h\"\n #endif\n \n-#ifdef HAVE_GETADDRINFO_A\n-#include <netdb.h>\n-#endif\n-\n #include \"netbase.h\"\n \n #include \"hash.h\"\n #include \"sync.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n \n+#ifdef HAVE_GETADDRINFO_A\n+#include <netdb.h>\n+#endif\n+\n #ifndef WIN32\n #if HAVE_INET_PTON\n #include <arpa/inet.h>\n@@ -331,22 +331,15 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n     SOCKET hSocket = socket(((struct sockaddr*)&sockaddr)->sa_family, SOCK_STREAM, IPPROTO_TCP);\n     if (hSocket == INVALID_SOCKET)\n         return false;\n+\n #ifdef SO_NOSIGPIPE\n     int set = 1;\n     setsockopt(hSocket, SOL_SOCKET, SO_NOSIGPIPE, (void*)&set, sizeof(int));\n #endif\n \n-#ifdef WIN32\n-    u_long fNonblock = 1;\n-    if (ioctlsocket(hSocket, FIONBIO, &fNonblock) == SOCKET_ERROR)\n-#else\n-    int fFlags = fcntl(hSocket, F_GETFL, 0);\n-    if (fcntl(hSocket, F_SETFL, fFlags | O_NONBLOCK) == -1)\n-#endif\n-    {\n-        CloseSocket(hSocket);\n-        return false;\n-    }\n+    // Set to non-blocking\n+    if (!SetSocketNonBlocking(hSocket, true))\n+        return error(\"ConnectSocketDirectly: Setting socket to non-blocking failed, error %s\\n\", NetworkErrorString(WSAGetLastError()));\n \n     if (connect(hSocket, (struct sockaddr*)&sockaddr, len) == SOCKET_ERROR)\n     {\n@@ -404,20 +397,10 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n         }\n     }\n \n-    // this isn't even strictly necessary\n-    // CNode::ConnectNode immediately turns the socket back to non-blocking\n-    // but we'll turn it back to blocking just in case\n-#ifdef WIN32\n-    fNonblock = 0;\n-    if (ioctlsocket(hSocket, FIONBIO, &fNonblock) == SOCKET_ERROR)\n-#else\n-    fFlags = fcntl(hSocket, F_GETFL, 0);\n-    if (fcntl(hSocket, F_SETFL, fFlags & ~O_NONBLOCK) == SOCKET_ERROR)\n-#endif\n-    {\n-        CloseSocket(hSocket);\n-        return false;\n-    }\n+    // This is required when using SOCKS5 proxy!\n+    // CNode::ConnectNode turns the socket back to non-blocking.\n+    if (!SetSocketNonBlocking(hSocket, false))\n+        return error(\"ConnectSocketDirectly: Setting socket to blocking failed, error %s\\n\", NetworkErrorString(WSAGetLastError()));\n \n     hSocketRet = hSocket;\n     return true;\n@@ -1271,3 +1254,32 @@ bool CloseSocket(SOCKET& hSocket)\n     hSocket = INVALID_SOCKET;\n     return ret != SOCKET_ERROR;\n }\n+\n+bool SetSocketNonBlocking(SOCKET& hSocket, bool fNonBlocking)\n+{\n+    if (fNonBlocking) {\n+#ifdef WIN32\n+        u_long nOne = 1;\n+        if (ioctlsocket(hSocket, FIONBIO, &nOne) == SOCKET_ERROR) {\n+#else\n+        int fFlags = fcntl(hSocket, F_GETFL, 0);\n+        if (fcntl(hSocket, F_SETFL, fFlags | O_NONBLOCK) == SOCKET_ERROR) {\n+#endif\n+            CloseSocket(hSocket);\n+            return false;\n+        }\n+    } else {\n+#ifdef WIN32\n+        u_long nZero = 0;\n+        if (ioctlsocket(hSocket, FIONBIO, &nZero) == SOCKET_ERROR) {\n+#else\n+        int fFlags = fcntl(hSocket, F_GETFL, 0);\n+        if (fcntl(hSocket, F_SETFL, fFlags & ~O_NONBLOCK) == SOCKET_ERROR) {\n+#endif\n+            CloseSocket(hSocket);\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "7d83e3534479fe79f70a860d03787a30f56c0856",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaedb59e0570558a528eac52f7fd89639911496e/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaedb59e0570558a528eac52f7fd89639911496e/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=eaedb59e0570558a528eac52f7fd89639911496e",
        "patch": "@@ -180,5 +180,7 @@ bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest\n std::string NetworkErrorString(int err);\n /** Close socket and set hSocket to INVALID_SOCKET */\n bool CloseSocket(SOCKET& hSocket);\n+/** Disable or enable blocking-mode for a socket */\n+bool SetSocketNonBlocking(SOCKET& hSocket, bool fNonBlocking);\n \n #endif"
      }
    ]
  }
]