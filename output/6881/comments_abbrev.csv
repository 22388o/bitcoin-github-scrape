btcdrak,2015-10-23T18:26:11Z,"Thanks for picking it up, not sure why the other got closed.\n",https://github.com/bitcoin/bitcoin/pull/6881#issuecomment-150655108,150655108,
morcos,2015-10-24T00:44:26Z,Concept ACK.  I'd really like the higher precision.\n,https://github.com/bitcoin/bitcoin/pull/6881#issuecomment-150728335,150728335,
laanwj,2015-10-24T06:02:55Z,"Concept ACK - can be useful. Do keep it disabled by default, high-precision time makes correlation/side channel attacks easier, better to not make the logs more valuable.\n",https://github.com/bitcoin/bitcoin/pull/6881#issuecomment-150761184,150761184,
petertodd,2015-10-24T19:42:44Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6881#issuecomment-150843234,150843234,
instagibbs,2015-10-26T17:53:55Z,"ACK, works as advertised\n",https://github.com/bitcoin/bitcoin/pull/6881#issuecomment-151226316,151226316,
gmaxwell,2015-10-26T18:30:19Z,GetTimeMicros() is not a monotone clock.  Will doom befall our users when the log entry timestamps sometimes go backwards?\n,https://github.com/bitcoin/bitcoin/pull/6881#issuecomment-151239903,151239903,
laanwj,2015-10-26T18:56:25Z,"@gmaxwell\nI don't think potential jumps in time will have apocalyptic effect for users. The debug log is meant for reporting to humans, which can generally cope. Using monotone time for log timestamps is not very usual - as it counts since some unspecified starting point, it is only useful for deltas.\n",https://github.com/bitcoin/bitcoin/pull/6881#issuecomment-151247609,151247609,
jgarzik,2015-10-26T19:07:21Z,ut ACK - though I do not see value in making this yet another option\n\nIMO just add micros to the log and be done with it.\n,https://github.com/bitcoin/bitcoin/pull/6881#issuecomment-151252302,151252302,
gmaxwell,2015-10-26T19:54:22Z,"@laanwj There are other ways to make the time monotone-- apply max with the last priinted time. (OS returned monotone time can also be adjusted to whatever timebase by finding the initial offset; but that goes down a rabbit hole).\n\nWRT Jeff's comment.  I too would rather have them on all the time, and any message where we're worried about creating privacy violating logs, we should just stop logg",https://github.com/bitcoin/bitcoin/pull/6881#issuecomment-151264566,151264566,
laanwj,2015-10-26T20:05:11Z,"Would really like to keep this an option, so will merge as-is.\n",https://github.com/bitcoin/bitcoin/pull/6881#issuecomment-151267378,151267378,
jgarzik,2015-10-26T20:11:48Z,"@laanwj Justification?\n\nMore options = more work.  Where is the value in yet another default-off option that few users will ever know about, much less use?\n\nDefault-off this is basically dead code we must maintain.\n",https://github.com/bitcoin/bitcoin/pull/6881#issuecomment-151269352,151269352,
laanwj,2015-10-26T20:15:15Z,"See my post above.\nAlso there is no need for microsecond timestamps for most people. It will just take up more horizontal space. If you need them ,you can enable them.\n",https://github.com/bitcoin/bitcoin/pull/6881#issuecomment-151271130,151271130,
jgarzik,2015-10-26T20:33:25Z,"@laanwj ""no need for microsecond timestamps for most people""  Citation needed?\n\nApache, MySQL, Linux kernel, several sys-loggers and other major servers/services moved to sub-second timestamps a while ago.\n",https://github.com/bitcoin/bitcoin/pull/6881#issuecomment-151276182,151276182,
petertodd,2015-10-26T21:08:34Z,"FWIW I've never even needed second-precision timestamps myself. Equally, dmesg for example gives me ""seconds since boot"" or something, rather than what I usually am more interested in, the date - wouldn't use that as an example of user friendly for general debugging.\n",https://github.com/bitcoin/bitcoin/pull/6881#issuecomment-151285322,151285322,
TheBlueMatt,2015-10-24T01:07:28Z,Do we really care about mock times for debug log entires?\n,https://github.com/bitcoin/bitcoin/pull/6881#discussion_r42927730,42927730,src/utiltime.cpp
MarcoFalke,2015-10-24T14:16:25Z,Nit: Can you use the already present `fLogTimeMicros` which defaults to false instead of hardcoding it twice? (c.f. #6349)\n,https://github.com/bitcoin/bitcoin/pull/6881#discussion_r42934355,42934355,src/init.cpp
petertodd,2015-10-24T19:42:29Z,"I think we should, as if we ever give a way to change the mocktime via RPC it'd be useful to be able to correlate the log files to what time we set.\n",https://github.com/bitcoin/bitcoin/pull/6881#discussion_r42937544,42937544,src/utiltime.cpp
sdaftuar,2015-10-26T14:10:22Z,"Yeah I have some code I use to test that plays back historical data to a node and uses mocktime, and having the debug log have (mostly) consistent timestamps is helpful to me, so I figured I'd preserve the existing behavior.\n",https://github.com/bitcoin/bitcoin/pull/6881#discussion_r42997138,42997138,src/utiltime.cpp
sdaftuar,2015-10-26T14:11:45Z,Good idea; fixed.\n,https://github.com/bitcoin/bitcoin/pull/6881#discussion_r42997312,42997312,src/init.cpp
laanwj,2015-10-26T18:39:23Z,"Instead of passing fLogTimeMicros both as input and output I'd prefer the default to be handled like the others, e.g. in the header,\n\n```\nstatic const bool DEFAULT_LOGTIMEMICROS = false;\n```\n\nThen\n\n```\nstrUsage += HelpMessageOpt(""-logtimemicros"", strprintf(""Add microsecond precision to debug timestamps (default: %u)"", DEFAULT_LOGTIMEMICROS));\n...\nLogTimeMicros = GetBoolArg(""-logtimemicr",https://github.com/bitcoin/bitcoin/pull/6881#discussion_r43034478,43034478,src/init.cpp
sdaftuar,2015-10-26T18:48:31Z,"Will do -- is that fine to put in util.h, since the global is declared in util.cpp? (I don't see anything else like that in util.h, so just want to double-check.)\n",https://github.com/bitcoin/bitcoin/pull/6881#discussion_r43035771,43035771,src/init.cpp
laanwj,2015-10-26T18:57:21Z,"Yep, sounds good to me. You're right that the other options in util.h don't stick to this either, but it's the sane thing to do for new options :)\n",https://github.com/bitcoin/bitcoin/pull/6881#discussion_r43036995,43036995,src/init.cpp
