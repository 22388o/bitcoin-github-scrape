[
  {
    "sha": "5d47860334fbe0018e742d8d2a339deb11a899e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDQ3ODYwMzM0ZmJlMDAxOGU3NDJkOGQyYTMzOWRlYjExYTg5OWU4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-12-01T19:00:26Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-08-21T23:16:47Z"
      },
      "message": "refactor: move CAddress-without-nTime logic to net_processing\n\nHistorically, the VERSION message contains an \"addrMe\" and an \"addrYou\". As\nthese are sent before version negotiation is complete, the protocol version is\nINIT_PROTO_VERSION (209), and in that protocol, CAddress is serialized without\nnTime.\n\nThis is in fact the only situation left where a CAddress is (de)serialized\nwithout nTime. As it's such a simple structure (CService for ip/port + uint64_t\nfor nServices), just inline that structure in the few places where it occurs,\nand remove the logic for dealing with missing nTime from CAddress.",
      "tree": {
        "sha": "53055628f99f45585bdc514f25fdaf52ddb1ee21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53055628f99f45585bdc514f25fdaf52ddb1ee21"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d47860334fbe0018e742d8d2a339deb11a899e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d47860334fbe0018e742d8d2a339deb11a899e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d47860334fbe0018e742d8d2a339deb11a899e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d47860334fbe0018e742d8d2a339deb11a899e8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5a406f003a060325128db47552089b3254044e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5a406f003a060325128db47552089b3254044e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5a406f003a060325128db47552089b3254044e3"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 21,
      "deletions": 25
    },
    "files": [
      {
        "sha": "5c3a49982a49ba11209484198d6645faa71e7fab",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 15,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d47860334fbe0018e742d8d2a339deb11a899e8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d47860334fbe0018e742d8d2a339deb11a899e8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5d47860334fbe0018e742d8d2a339deb11a899e8",
        "patch": "@@ -1087,25 +1087,25 @@ void PeerManagerImpl::PushNodeVersion(CNode& pnode, int64_t nTime)\n     // Note that pnode->GetLocalServices() is a reflection of the local\n     // services we were offering when the CNode object was created for this\n     // peer.\n-    ServiceFlags nLocalNodeServices = pnode.GetLocalServices();\n+    uint64_t my_services{pnode.GetLocalServices()};\n     uint64_t nonce = pnode.GetLocalNonce();\n     const int nNodeStartingHeight{m_best_height};\n     NodeId nodeid = pnode.GetId();\n     CAddress addr = pnode.addr;\n \n-    CAddress addrYou = addr.IsRoutable() && !IsProxy(addr) && addr.IsAddrV1Compatible() ?\n-                           addr :\n-                           CAddress(CService(), addr.nServices);\n-    CAddress addrMe = CAddress(CService(), nLocalNodeServices);\n+    CService addr_you = addr.IsRoutable() && !IsProxy(addr) && addr.IsAddrV1Compatible() ? addr : CService();\n+    uint64_t your_services{addr.nServices};\n \n     const bool tx_relay = !m_ignore_incoming_txs && pnode.m_tx_relay != nullptr;\n-    m_connman.PushMessage(&pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (uint64_t)nLocalNodeServices, nTime, addrYou, addrMe,\n+    m_connman.PushMessage(&pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, my_services, nTime,\n+            your_services, addr_you, // Together the pre-version-31402 serialization of CAddress \"addrYou\" (without nTime)\n+            my_services, CService(), // Together the pre-version-31402 serialization of CAddress \"addrMe\" (without nTime)\n             nonce, strSubVersion, nNodeStartingHeight, tx_relay));\n \n     if (fLogIPs) {\n-        LogPrint(BCLog::NET, \"send version message: version %d, blocks=%d, us=%s, them=%s, txrelay=%d, peer=%d\\n\", PROTOCOL_VERSION, nNodeStartingHeight, addrMe.ToString(), addrYou.ToString(), tx_relay, nodeid);\n+        LogPrint(BCLog::NET, \"send version message: version %d, blocks=%d, us=%s, them=%s, txrelay=%d, peer=%d\\n\", PROTOCOL_VERSION, nNodeStartingHeight, CService().ToString(), addr_you.ToString(), tx_relay, nodeid);\n     } else {\n-        LogPrint(BCLog::NET, \"send version message: version %d, blocks=%d, us=%s, txrelay=%d, peer=%d\\n\", PROTOCOL_VERSION, nNodeStartingHeight, addrMe.ToString(), tx_relay, nodeid);\n+        LogPrint(BCLog::NET, \"send version message: version %d, blocks=%d, us=%s, txrelay=%d, peer=%d\\n\", PROTOCOL_VERSION, nNodeStartingHeight, CService().ToString(), tx_relay, nodeid);\n     }\n }\n \n@@ -2487,21 +2487,20 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         int64_t nTime;\n-        CAddress addrMe;\n-        CAddress addrFrom;\n+        CService addrMe;\n         uint64_t nNonce = 1;\n-        uint64_t nServiceInt;\n         ServiceFlags nServices;\n         int nVersion;\n         std::string cleanSubVer;\n         int starting_height = -1;\n         bool fRelay = true;\n \n-        vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n+        vRecv >> nVersion >> Using<CustomUintFormatter<8>>(nServices) >> nTime;\n         if (nTime < 0) {\n             nTime = 0;\n         }\n-        nServices = ServiceFlags(nServiceInt);\n+        vRecv.ignore(8); // Ignore the addrMe service bits sent by the peer\n+        vRecv >> addrMe;\n         if (!pfrom.IsInboundConn())\n         {\n             m_addrman.SetServices(pfrom.addr, nServices);\n@@ -2520,8 +2519,14 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             return;\n         }\n \n-        if (!vRecv.empty())\n-            vRecv >> addrFrom >> nNonce;\n+        if (!vRecv.empty()) {\n+            // The version message includes information about the sending node which we don't use:\n+            //   - 8 bytes (service bits)\n+            //   - 16 bytes (ipv6 address)\n+            //   - 2 bytes (port)\n+            vRecv.ignore(26);\n+            vRecv >> nNonce;\n+        }\n         if (!vRecv.empty()) {\n             std::string strSubVer;\n             vRecv >> LIMITED_STRING(strSubVer, MAX_SUBVERSION_LENGTH);"
      },
      {
        "sha": "126c3646a4cacf582d05548d17c855343a5d05c7",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d47860334fbe0018e742d8d2a339deb11a899e8/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d47860334fbe0018e742d8d2a339deb11a899e8/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=5d47860334fbe0018e742d8d2a339deb11a899e8",
        "patch": "@@ -396,7 +396,6 @@ class CAddress : public CService\n         // ambiguous what that would mean. Make sure no code relying on that is introduced:\n         assert(!(s.GetType() & SER_GETHASH));\n         bool use_v2;\n-        bool store_time;\n         if (s.GetType() & SER_DISK) {\n             // In the disk serialization format, the encoding (v1 or v2) is determined by a flag version\n             // that's part of the serialization itself. ADDRV2_FORMAT in the stream version only determines\n@@ -413,24 +412,16 @@ class CAddress : public CService\n             } else {\n                 throw std::ios_base::failure(\"Unsupported CAddress disk format version\");\n             }\n-            store_time = true;\n         } else {\n             // In the network serialization format, the encoding (v1 or v2) is determined directly by\n             // the value of ADDRV2_FORMAT in the stream version, as no explicitly encoded version\n             // exists in the stream.\n             assert(s.GetType() & SER_NETWORK);\n             use_v2 = s.GetVersion() & ADDRV2_FORMAT;\n-            // The only time we serialize a CAddress object without nTime is in\n-            // the initial VERSION messages which contain two CAddress records.\n-            // At that point, the serialization version is INIT_PROTO_VERSION.\n-            // After the version handshake, serialization version is >=\n-            // MIN_PEER_PROTO_VERSION and all ADDR messages are serialized with\n-            // nTime.\n-            store_time = s.GetVersion() != INIT_PROTO_VERSION;\n         }\n \n         SER_READ(obj, obj.nTime = TIME_INIT);\n-        if (store_time) READWRITE(obj.nTime);\n+        READWRITE(obj.nTime);\n         // nServices is serialized as CompactSize in V2; as uint64_t in V1.\n         if (use_v2) {\n             uint64_t services_tmp;"
      }
    ]
  },
  {
    "sha": "75290ae61e37f9b7c432b59d03eca6f07f7529cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTI5MGFlNjFlMzdmOWI3YzQzMmI1OWQwM2VjYTZmMDdmNzUyOWNk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-12-01T19:01:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-08-21T23:16:47Z"
      },
      "message": "Drop us=... message in net debug for sending version message\n\nThe us=... message in the debug log when sending a version message is\nalways [::]:0, because we no longer send our own address there.\nTherefore, this information is entirely redundant. Remove it.",
      "tree": {
        "sha": "38e39b1fdd8d24c6853973bd3f677fb9b72317d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38e39b1fdd8d24c6853973bd3f677fb9b72317d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75290ae61e37f9b7c432b59d03eca6f07f7529cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75290ae61e37f9b7c432b59d03eca6f07f7529cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75290ae61e37f9b7c432b59d03eca6f07f7529cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75290ae61e37f9b7c432b59d03eca6f07f7529cd/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d47860334fbe0018e742d8d2a339deb11a899e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d47860334fbe0018e742d8d2a339deb11a899e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d47860334fbe0018e742d8d2a339deb11a899e8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8be82f7ebcfa632b09e7fd5569ffe5b1a2fb4051",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75290ae61e37f9b7c432b59d03eca6f07f7529cd/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75290ae61e37f9b7c432b59d03eca6f07f7529cd/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=75290ae61e37f9b7c432b59d03eca6f07f7529cd",
        "patch": "@@ -1103,9 +1103,9 @@ void PeerManagerImpl::PushNodeVersion(CNode& pnode, int64_t nTime)\n             nonce, strSubVersion, nNodeStartingHeight, tx_relay));\n \n     if (fLogIPs) {\n-        LogPrint(BCLog::NET, \"send version message: version %d, blocks=%d, us=%s, them=%s, txrelay=%d, peer=%d\\n\", PROTOCOL_VERSION, nNodeStartingHeight, CService().ToString(), addr_you.ToString(), tx_relay, nodeid);\n+        LogPrint(BCLog::NET, \"send version message: version %d, blocks=%d, them=%s, txrelay=%d, peer=%d\\n\", PROTOCOL_VERSION, nNodeStartingHeight, addr_you.ToString(), tx_relay, nodeid);\n     } else {\n-        LogPrint(BCLog::NET, \"send version message: version %d, blocks=%d, us=%s, txrelay=%d, peer=%d\\n\", PROTOCOL_VERSION, nNodeStartingHeight, CService().ToString(), tx_relay, nodeid);\n+        LogPrint(BCLog::NET, \"send version message: version %d, blocks=%d, txrelay=%d, peer=%d\\n\", PROTOCOL_VERSION, nNodeStartingHeight, tx_relay, nodeid);\n     }\n }\n "
      }
    ]
  }
]