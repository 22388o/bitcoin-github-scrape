DrahtBot,2021-05-29 03:59:58,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23381](https://github.com/bitcoin/bitcoin/pull/23381) (validation/refactor: refactoring for package submission by glozow",https://github.com/bitcoin/bitcoin/pull/22097#issuecomment-850764465,850764465,
Xekyo,2021-06-11 16:49:50,"> 404_002 (100_000 bytes of regular fields, 1002 bytes of witness fields), dividing by WITNESS_SCALE_FACTOR, obtaining 101_000 virtual bytes\n\nDid you mean 4,002 bytes of witness fields?",https://github.com/bitcoin/bitcoin/pull/22097#issuecomment-859712783,859712783,
jonatack,2021-06-11 16:54:40,ping @rustyrussell,https://github.com/bitcoin/bitcoin/pull/22097#issuecomment-859715412,859715412,
harding,2021-06-11 20:44:58,"Wouldn't this cause the package acceptance code to accept packages that wouldn't be accepted as a series of successively-relayed transactions?  E.g., Alice submits a 400,001 weight transaction (100,001 vbytes) followed by a 3999 weight child transaction (1,000 vbytes).\n\nI don't think implementing this (with a bug fix for the above, if I'm correct) would be a disaster, but I think we should try",https://github.com/bitcoin/bitcoin/pull/22097#issuecomment-859901930,859901930,
Xekyo,2021-06-11 21:50:43,"Good point, although I am wondering whether backend code should generally move towards weight units everywhere even if the feerate interfaces remain denominated in vbytes for the userbase.",https://github.com/bitcoin/bitcoin/pull/22097#issuecomment-859927590,859927590,
ariard,2021-06-13 17:15:59,"@Xekyo\n\n> Did you mean 4,002 bytes of witness fields?\n\nYep, good catch, corrected in PR description.\n\n@harding \n\n> Wouldn't this cause the package acceptance code to accept packages that wouldn't be accepted as a series of successively-relayed transactions? E.g., Alice submits a 400,001 weight transaction (100,001 vbytes) followed by a 3999 weight child transaction (1,000 vbytes). ",https://github.com/bitcoin/bitcoin/pull/22097#issuecomment-860243406,860243406,
ariard,2021-06-13 17:17:02,"@glozow I guess you would be interested, it's the answer to your question [here](https://github.com/bitcoin/bitcoin/issues/14895#issuecomment-826237280).",https://github.com/bitcoin/bitcoin/pull/22097#issuecomment-860243551,860243551,
harding,2021-06-13 19:17:22,"@ariard \n\n> I think the parent transaction would be rejected by our current check against MAX_STANDARD_TX_WEIGHT (400_000 WU), which still apply at package acceptance (in AcceptMultipleTransactions) ? \n\nOh, of course.  The example would then be:\n\n```python\nIn [1]: x = 400000; y = 3001; z = 999\n\nIn [2]: x+y+z <= 404000\nOut[2]: True\n\nIn [3]: ceil(x/4)+ceil(y/4)+ceil(z/4) <= 1",https://github.com/bitcoin/bitcoin/pull/22097#issuecomment-860257644,860257644,
ariard,2021-06-14 15:57:44,"@harding\n\nYes your last example works.\n\n> Yeah, but it would be nice to follow the same rules when there's no significant benefit to changing them. That said, I don't really care about tiny rounding issues that don't impact our DoS protections at all; it just seems incongruous to me.\n\nBeyond the reduction of rounding-bugs risks in critical paths of downstream codebases, I think there i",https://github.com/bitcoin/bitcoin/pull/22097#issuecomment-860799024,860799024,
harding,2021-06-16 18:51:22,"@ariard thanks for your detailed response and sorry for bike shedding.\n\nI'm concept NACK on using different rules for packages of transactions than we would use for the same transactions submitted separately unless there's a significant benefit motivating the difference.  I don't think a less-than 0.001% difference in economic rationality (which only matters in rare edge cases) is anywhere sig",https://github.com/bitcoin/bitcoin/pull/22097#issuecomment-862627568,862627568,
harding,2021-06-18 09:14:33,"> Code wise, please note that the virtual size isn't computed as a simple /4 (rounded up) from the weight units but also factors in the signature OPs cost. As implemented a specially-crafted transaction's size could largely diverge between the WU size there and the virtual size in the rest of the code.\n\nI don't think that's accurate.  The number of sigops in a transaction has no direct effect ",https://github.com/bitcoin/bitcoin/pull/22097#issuecomment-863890176,863890176,
darosior,2021-06-18 09:30:42,"> I don't think that's accurate. The number of sigops in a transaction has no direct effect on its weight or vsize\n\nThe transaction virtual size is increased if its number of sigops is abnormally high compared to its size:\nhttps://github.com/bitcoin/bitcoin/blob/da69d9965a112c6421fce5649b5a18beb7513526/src/policy/policy.cpp#L280-L283\n\nThis is how the size is computed in ATMP. However you",https://github.com/bitcoin/bitcoin/pull/22097#issuecomment-863900614,863900614,
Xekyo,2021-06-18 18:16:54,"AFAIU, sigops and weight are two independent limits per consensus. The treatment of transactions with high sigops as having a high weight is a simplification to avoid a multidimensional optimization problem and only applies to policy checks.",https://github.com/bitcoin/bitcoin/pull/22097#issuecomment-864202682,864202682,
harding,2021-06-20 01:57:30,"@darosior \n\n> The transaction virtual size is increased if its number of sigops is abnormally high compared to its size\n\nThanks for looking up and linking me to the code.  I was able to follow it back to #8356 where this was added and so I think I now understand the source of confusion:  We allow users to exceed the policy limits on sigops by pretending their transactions are the same vsiz",https://github.com/bitcoin/bitcoin/pull/22097#issuecomment-864487861,864487861,
darosior,2021-06-21 20:41:52,"> As long as developers are creating transactions in a normal way\n\nYes, of course. But my point there was just to be careful to not drop the DOS protection rule with a refactoring to WU ([but this patch specifically doesn't drop it as it was not present in the first](https://github.com/bitcoin/bitcoin/pull/22097#issuecomment-863900614)).",https://github.com/bitcoin/bitcoin/pull/22097#issuecomment-865330523,865330523,
DrahtBot,2021-11-09 17:06:05,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/22097#issuecomment-964351870,964351870,
