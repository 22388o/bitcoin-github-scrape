pstratem,2020-06-08 19:36:36,"comparing this to current master this seems to actually be slower (if only very slightly), running debian 10.4 on an i7-8550U\n\n>bench_master.txt:SHA256, 5, 340, 4.45805, 0.0026092, 0.00263955, **0.00262045**\n>bench_master.txt:SHA256D64_1024, 5, 7400, 4.45677, 0.000120143, 0.000120585, **0.000120541**\n>bench_master.txt:SHA256_32b, 5, 4700000, 4.68355, 1.98788e-07, 1.99912e-07, **1.99391e-07",https://github.com/bitcoin/bitcoin/pull/19214#issuecomment-640842139,640842139,
fjahr,2020-06-08 19:54:51,"tested ACK addf18da951439f696dba163ae1c73458d43ea03\n\nFor me, the SHA256 tests are speeding up significantly after this.",https://github.com/bitcoin/bitcoin/pull/19214#issuecomment-640852709,640852709,
pstratem,2020-06-08 20:20:09,"I must have gotten something wrong, doing the benchmarks again after git clean shows this pr being about 6x faster\n\nACK addf18da951439f696dba163ae1c73458d43ea03",https://github.com/bitcoin/bitcoin/pull/19214#issuecomment-640864246,640864246,
MarcoFalke,2020-06-09 00:50:10,Can hashing be made to fail when `SHA256AutoDetect` hasn't been called?,https://github.com/bitcoin/bitcoin/pull/19214#issuecomment-640962921,640962921,
Sjors,2020-06-09 09:59:12,"On a 2019 Macbook Pro:\n\n```sh\nsrc/bench/bench_bitcoin -filter=SHA256.*\n```\n\nBefore:\n```\n# Benchmark, evals, iterations, total, min, max, median\nSHA256, 5, 340, 6.08992, 0.00350198, 0.00370616, 0.0035939\nSHA256D64_1024, 5, 7400, 22.9059, 0.000614125, 0.00062785, 0.000618134\nSHA256_32b, 5, 4700000, 6.0593, 2.55725e-07, 2.59171e-07, 2.58255e-07\n```\n\nAfter (addf18da951439f6",https://github.com/bitcoin/bitcoin/pull/19214#issuecomment-641180165,641180165,
laanwj,2020-06-09 12:19:48,"```\n# Benchmark, evals, iterations, total, min, max, median\nSHA256, …\nSHA256D64_1024, …\nSHA256_32b, …\n```\nMaybe it would be useful to specify here what SHA256 implementation is benchmarked. This makes comparisons slightly more meaningful.\n",https://github.com/bitcoin/bitcoin/pull/19214#issuecomment-641252225,641252225,
MarcoFalke,2020-06-10 14:41:30,"From IRC:\n\n```\n[16:51] <phantomcircuit> sipa, oh do any of the other benchmarks maybe end up calling something that would call the auto detect?\n```\n\nIf another benchmark spins up a testing setup, that testing setup will call auto detect. So this explains the confusing results where the naive implementation is faster than avx2.",https://github.com/bitcoin/bitcoin/pull/19214#issuecomment-642055141,642055141,
luke-jr,2020-06-11 04:25:52,"There should probably be a way to force a specific implementation?\n\n(I think always defaulting to the generic implementation makes sense...)",https://github.com/bitcoin/bitcoin/pull/19214#issuecomment-642398204,642398204,
MarcoFalke,2020-06-11 15:04:37,"In the functional tests we use\n\n```py\nif self.is_foobar_compiled():\n  self.test_foobar()\n```\n\nSomething along those lines could also be used to bench the different hash impls. here.",https://github.com/bitcoin/bitcoin/pull/19214#issuecomment-642719866,642719866,
laanwj,2020-06-11 17:22:03,"Yes, benchmarking all the different SHA356 implementations could be useful as well. I think this was the case in one of the initial PRs that introduced more of them.\n\nThat said that still leaves open what to do for other benchmarks that might depend on the SHA256 implementation. We don't want to re-run all the benchmarks for all the supported implementations ofc.",https://github.com/bitcoin/bitcoin/pull/19214#issuecomment-642822415,642822415,
MarcoFalke,2020-06-11 17:50:00,"> That said that still leaves open what to do for other benchmarks that might depend on the SHA256 implementation. We don't want to re-run all the benchmarks for all the supported implementations ofc.\n\nI generally don't like using globals to magically change control flow, especially in tests. There have been enough cases in the past where global state in tests has lead to confusing results. (I",https://github.com/bitcoin/bitcoin/pull/19214#issuecomment-642836054,642836054,
laanwj,2020-06-16 15:13:20,"> The silent fallback shouldn't be needed, or am I missing something obvious?\n\nI think there's something of an initialization order issue here. Some of the objects initialized before `main()` might make (light, non-performance-critical) use of SHA256 to do initialization. We don't want to move the processor detection that soon due to logging / potential failure modes.",https://github.com/bitcoin/bitcoin/pull/19214#issuecomment-644828532,644828532,
laanwj,2020-07-15 13:15:00,"ACK addf18da951439f696dba163ae1c73458d43ea03\nI'm going to merge this, It has enough ACKs and I think this is a clear improvement to before. Additional suggestions can be done in later PRs.",https://github.com/bitcoin/bitcoin/pull/19214#issuecomment-658760350,658760350,
