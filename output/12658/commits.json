[
  {
    "sha": "029ecac1bc361736a9b6c8fe5652558ca383b4b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjllY2FjMWJjMzYxNzM2YTliNmM4ZmU1NjUyNTU4Y2EzODNiNGI5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-03-10T01:04:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-03-10T01:04:31Z"
      },
      "message": "Split up and sanitize CWalletTx serialization",
      "tree": {
        "sha": "87d11ede82b36d5cdbdb92ec14891a383895a31d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87d11ede82b36d5cdbdb92ec14891a383895a31d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/029ecac1bc361736a9b6c8fe5652558ca383b4b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/029ecac1bc361736a9b6c8fe5652558ca383b4b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/029ecac1bc361736a9b6c8fe5652558ca383b4b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/029ecac1bc361736a9b6c8fe5652558ca383b4b9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29fad97c320c892ab6a480c81e2078ec22ab354b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29fad97c320c892ab6a480c81e2078ec22ab354b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29fad97c320c892ab6a480c81e2078ec22ab354b"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 22,
      "deletions": 28
    },
    "files": [
      {
        "sha": "eabd1c1c31f17f734e6ef05e2fe0efe3eb5adac5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 22,
        "deletions": 28,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/029ecac1bc361736a9b6c8fe5652558ca383b4b9/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/029ecac1bc361736a9b6c8fe5652558ca383b4b9/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=029ecac1bc361736a9b6c8fe5652558ca383b4b9",
        "patch": "@@ -390,42 +390,36 @@ class CWalletTx : public CMerkleTx\n         nOrderPos = -1;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        if (ser_action.ForRead())\n-            Init(nullptr);\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n         char fSpent = false;\n+        mapValue_t mapValueCopy = mapValue;\n \n-        if (!ser_action.ForRead())\n-        {\n-            mapValue[\"fromaccount\"] = strFromAccount;\n-\n-            WriteOrderPos(nOrderPos, mapValue);\n-\n-            if (nTimeSmart)\n-                mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n+        mapValueCopy[\"fromaccount\"] = strFromAccount;\n+        WriteOrderPos(nOrderPos, mapValueCopy);\n+        if (nTimeSmart) {\n+            mapValueCopy[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n         }\n \n-        READWRITE(*static_cast<CMerkleTx*>(this));\n+        s << *static_cast<const CMerkleTx*>(this);\n         std::vector<CMerkleTx> vUnused; //!< Used to be vtxPrev\n-        READWRITE(vUnused);\n-        READWRITE(mapValue);\n-        READWRITE(vOrderForm);\n-        READWRITE(fTimeReceivedIsTxTime);\n-        READWRITE(nTimeReceived);\n-        READWRITE(fFromMe);\n-        READWRITE(fSpent);\n+        s << vUnused << mapValueCopy << vOrderForm << fTimeReceivedIsTxTime << nTimeReceived << fFromMe << fSpent;\n+    }\n \n-        if (ser_action.ForRead())\n-        {\n-            strFromAccount = mapValue[\"fromaccount\"];\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        Init(nullptr);\n+        char fSpent;\n \n-            ReadOrderPos(nOrderPos, mapValue);\n+        s >> *static_cast<CMerkleTx*>(this);\n+        std::vector<CMerkleTx> vUnused; //!< Used to be vtxPrev\n+        s >> vUnused >> mapValue >> vOrderForm >> fTimeReceivedIsTxTime >> nTimeReceived >> fFromMe >> fSpent;\n \n-            nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(mapValue[\"timesmart\"]) : 0;\n-        }\n+        strFromAccount = std::move(mapValue[\"fromaccount\"]);\n+        ReadOrderPos(nOrderPos, mapValue);\n+        nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(mapValue[\"timesmart\"]) : 0;\n \n         mapValue.erase(\"fromaccount\");\n         mapValue.erase(\"spent\");"
      }
    ]
  },
  {
    "sha": "42343c748c2bca8ba9b888d949088dbfd1f142b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjM0M2M3NDhjMmJjYThiYTliODg4ZDk0OTA4OGRiZmQxZjE0MmI0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-03-10T01:25:28Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-03-11T17:56:31Z"
      },
      "message": "Split up and sanitize CAccountingEntry serialization",
      "tree": {
        "sha": "6687ab48c172da6c33ac75e61895eff7c5f8fdec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6687ab48c172da6c33ac75e61895eff7c5f8fdec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42343c748c2bca8ba9b888d949088dbfd1f142b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42343c748c2bca8ba9b888d949088dbfd1f142b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42343c748c2bca8ba9b888d949088dbfd1f142b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42343c748c2bca8ba9b888d949088dbfd1f142b4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "029ecac1bc361736a9b6c8fe5652558ca383b4b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/029ecac1bc361736a9b6c8fe5652558ca383b4b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/029ecac1bc361736a9b6c8fe5652558ca383b4b9"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 34,
      "deletions": 33
    },
    "files": [
      {
        "sha": "0f29bff1ff8acd41086401bc897da8208b0efe62",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 34,
        "deletions": 33,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42343c748c2bca8ba9b888d949088dbfd1f142b4/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42343c748c2bca8ba9b888d949088dbfd1f142b4/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=42343c748c2bca8ba9b888d949088dbfd1f142b4",
        "patch": "@@ -602,48 +602,49 @@ class CAccountingEntry\n         nEntryNo = 0;\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    template <typename Stream>\n+    void Serialize(Stream& s) const {\n         int nVersion = s.GetVersion();\n-        if (!(s.GetType() & SER_GETHASH))\n-            READWRITE(nVersion);\n+        if (!(s.GetType() & SER_GETHASH)) {\n+            s << nVersion;\n+        }\n         //! Note: strAccount is serialized as part of the key, not here.\n-        READWRITE(nCreditDebit);\n-        READWRITE(nTime);\n-        READWRITE(LIMITED_STRING(strOtherAccount, 65536));\n+        s << nCreditDebit << nTime << strOtherAccount;\n \n-        if (!ser_action.ForRead())\n-        {\n-            WriteOrderPos(nOrderPos, mapValue);\n-\n-            if (!(mapValue.empty() && _ssExtra.empty()))\n-            {\n-                CDataStream ss(s.GetType(), s.GetVersion());\n-                ss.insert(ss.begin(), '\\0');\n-                ss << mapValue;\n-                ss.insert(ss.end(), _ssExtra.begin(), _ssExtra.end());\n-                strComment.append(ss.str());\n-            }\n+        mapValue_t mapValueCopy = mapValue;\n+        WriteOrderPos(nOrderPos, mapValueCopy);\n+\n+        std::string strCommentCopy = strComment;\n+        if (!mapValueCopy.empty() || !_ssExtra.empty()) {\n+            CDataStream ss(s.GetType(), s.GetVersion());\n+            ss.insert(ss.begin(), '\\0');\n+            ss << mapValueCopy;\n+            ss.insert(ss.end(), _ssExtra.begin(), _ssExtra.end());\n+            strCommentCopy.append(ss.str());\n         }\n+        s << strCommentCopy;\n+    }\n \n-        READWRITE(LIMITED_STRING(strComment, 65536));\n+    template <typename Stream>\n+    void Unserialize(Stream& s) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH)) {\n+            s >> nVersion;\n+        }\n+        //! Note: strAccount is serialized as part of the key, not here.\n+        s >> nCreditDebit >> nTime >> LIMITED_STRING(strOtherAccount, 65536) >> LIMITED_STRING(strComment, 65536);\n \n         size_t nSepPos = strComment.find(\"\\0\", 0, 1);\n-        if (ser_action.ForRead())\n-        {\n-            mapValue.clear();\n-            if (std::string::npos != nSepPos)\n-            {\n-                CDataStream ss(std::vector<char>(strComment.begin() + nSepPos + 1, strComment.end()), s.GetType(), s.GetVersion());\n-                ss >> mapValue;\n-                _ssExtra = std::vector<char>(ss.begin(), ss.end());\n-            }\n-            ReadOrderPos(nOrderPos, mapValue);\n+        mapValue.clear();\n+        if (std::string::npos != nSepPos) {\n+            CDataStream ss(std::vector<char>(strComment.begin() + nSepPos + 1, strComment.end()), s.GetType(), s.GetVersion());\n+            ss >> mapValue;\n+            _ssExtra = std::vector<char>(ss.begin(), ss.end());\n         }\n-        if (std::string::npos != nSepPos)\n+        ReadOrderPos(nOrderPos, mapValue);\n+        if (std::string::npos != nSepPos) {\n             strComment.erase(nSepPos);\n+        }\n \n         mapValue.erase(\"n\");\n     }"
      }
    ]
  }
]