JeremyRubin,2018-10-05T06:53:42Z,"cr-ack 6d1779d -- one of my earlier versions looked a lot like that. \n\nI'd also suggest another optimization to make the vector a prevector with say 20 outputs so we can avoid the allocation on most txns.\n\nMay I suggest using adjacent_find with std::equal instead of your own loop?\nhttps://en.cppreference.com/w/cpp/algorithm/adjacent_find\n\n",https://github.com/bitcoin/bitcoin/pull/14397#issuecomment-427264404,427264404,
jnewbery,2018-10-05T07:04:06Z,"I prefer this to #14387, but I have the same question for @sipa as I asked Jeremy in that PR:\n\n> This makes block propagation faster, but do we have an understanding of how much these milliseconds matter? Is there a way we can determine whether the increased complexity introduced is a reasonable price to pay for the performance win?\n\nGranted, the complexity added here is minimal compared t",https://github.com/bitcoin/bitcoin/pull/14397#issuecomment-427266540,427266540,
sipa,2018-10-05T07:06:39Z,"@jnewbery Yeah, that's fair. I just wanted to show an alternative which is a smaller improvement but at much lower review complexity. I'm not convinced we need either approach.",https://github.com/bitcoin/bitcoin/pull/14397#issuecomment-427267103,427267103,
jamesob,2018-10-05T07:43:11Z,"For what it's worth, bitcoinperf [didn't show any significant performance regression](https://bitcoinperf.com/changes/?rev=d926a87fde&exe=4&env=5) for IBD or reindex after the merge of #14247, so it's not clear that either changeset is needed.",https://github.com/bitcoin/bitcoin/pull/14397#issuecomment-427275334,427275334,
MarcoFalke,2018-10-05T07:50:00Z,@jamesob I think this is not so much about ibd but rather propagation,https://github.com/bitcoin/bitcoin/pull/14397#issuecomment-427276985,427276985,
JeremyRubin,2018-10-05T08:00:18Z,"@MarcoFalke correct.\n\nIt's something like 13ms slower.",https://github.com/bitcoin/bitcoin/pull/14397#issuecomment-427279584,427279584,
DrahtBot,2018-10-05T10:42:55Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14400](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14400.html) (Add Benchmark to test input de-duplication ",https://github.com/bitcoin/bitcoin/pull/14397#issuecomment-427321696,427321696,
gmaxwell,2018-10-05T23:08:51Z,"Even block propagation is no longer critical for this:  When the prior optimization went in, we didn't have relay-before-validate.   I'm not opposed to this change-- as it's pretty straight forward to review-- but since this particular validity criteria is pure (a function of the tx itself with no dependency on external state) effort might be better spent reorging things so that this test ends up ",https://github.com/bitcoin/bitcoin/pull/14397#issuecomment-427521630,427521630,
ryanofsky,2018-10-06T03:05:40Z,Is there an explanation of what purpose the duplicate input check will serve if the connect block code is fixed to check for valid spends?,https://github.com/bitcoin/bitcoin/pull/14397#issuecomment-427541098,427541098,
gmaxwell,2018-10-07T16:43:27Z,"@ryanofsky  Making block connection alone check for duplicate inputs isn't sufficient: The whole reason this code was initially added in PR #443 was to keep duplicate inputs out of the mempool-- block connection did originally prevent the dupes.  If both block-connection and mempool processing prevented duplicate inputs, then, indeed, there should be no reason for this code.\n",https://github.com/bitcoin/bitcoin/pull/14397#issuecomment-427667520,427667520,
jl2012,2018-10-10T17:55:30Z,I think both set+insert (the existing one) and sort (this PR) are O(NlogN). So sort is faster as it is more optimized?,https://github.com/bitcoin/bitcoin/pull/14397#issuecomment-428669165,428669165,
sipa,2018-10-12T23:37:21Z,"@jl2012 You get better memory locality and lower allocation overhead by representing things as a vector rather than a set. The set permits much faster updating though, but that's not something we need here.",https://github.com/bitcoin/bitcoin/pull/14397#issuecomment-429490018,429490018,
DrahtBot,2018-11-25T23:13:52Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/14397#issuecomment-441482692,441482692,
MarcoFalke,2019-04-19T17:32:19Z,"There hasn't been much activity lately and the patch still needs rebase, so I am closing this for now. Please let me know when you want to continue working on this, so the pull request can be re-opened.",https://github.com/bitcoin/bitcoin/pull/14397#issuecomment-484965531,484965531,
jl2012,2018-10-13T07:55:13Z,Tx with 1 input is quite common. Would it be faster if we skip those?,https://github.com/bitcoin/bitcoin/pull/14397#discussion_r224952926,224952926,src/consensus/tx_verify.cpp
