DrahtBot,2021-09-10 09:40:41,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23280](https://github.com/bitcoin/bitcoin/pull/23280) (init: Coalesce Chainstate loading sequence between {,non-}unittes",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-916773723,916773723,
hebasto,2021-09-10 10:54:36,"mingw complains:\n```\nwallet/rpcdump.cpp: In lambda function:\nwallet/rpcdump.cpp:553:76: error: use of deleted function ‘fs::path::path(const string&)’\n  553 |         file.open(request.params[0].get_str(), std::ios::in | std::ios::ate);\n      |                                                                            ^\nIn file included from ./flatfile.h:11,\n                 from ./c",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-916814941,916814941,
ryanofsky,2021-09-10 11:15:28,"re: https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-916814941\n\n> mingw complains:\n\nThanks for headsup, and this should be addressed in the last push",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-916826194,916826194,
ryanofsky,2021-09-10 11:19:12,"This PR is basically ready but I still am looking for feedback about about whether best solution to `path.string()` method and `path(string)` constructor brokenness on windows is to make these methods uncallable and replace with them with `PathToString` `PathFromString` functions like this PR is doing. Or to just override these methods to keep current boost path behavior, and actually do what we w",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-916828329,916828329,
MarcoFalke,2021-09-10 11:35:23,"> Or to take an alternate approach like using the new (since mid-2019) windows build option to force a UTF-8 code page\n\nIf this fixes all our issues and avoids developer headaches when writing code (which conversion function to use), that seems most preferable.",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-916836553,916836553,
ryanofsky,2021-09-10 12:06:34,"> > Or to take an alternate approach like using the new (since mid-2019) windows build option to force a UTF-8 code page\n> \n> If this fixes all our issues and avoids developer headaches when writing code (which conversion function to use), that seems most preferable.\n\nSorry, I thought I had posted more details/drawbacks about this alternate approach previously, but I don't think I ever did",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-916852960,916852960,
hebasto,2021-09-10 12:51:09,"Out of curiosity, what is the leveldb approach to handle paths on Windows?",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-916880346,916880346,
hebasto,2021-09-10 13:26:39,friendly ping @sipsorcery ,https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-916903617,916903617,
ryanofsky,2021-09-10 16:19:07,"> friendly ping @sipsorcery\n\n:facepalm: To be clear I think that the build hack would be inferior to this PR in every way! I think think the build hack is not worth implementing or even discussing seriously. The only reason I brought it up was for completeness and to illustrate how fragile and unpredictable the [`std::filesystem::path(std::string)` implicit constructor](https://en.cppreference",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-917032695,917032695,
hebasto,2021-09-10 17:43:50,"Concept ACK on adding own explicit path <-> string conversion functions.\n\n> To be clear I think that the build hack would be inferior to this PR in every way! I think think the build hack is not worth implementing or even discussing seriously.\n\nSorry Russ, but I don't follow what ""the build hack"" do you mean.\n\n> > Out of curiosity, what is the leveldb approach to handle paths on Window",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-917091206,917091206,
ryanofsky,2021-09-10 18:00:49,"> Sorry Russ, but I don't follow what ""the build hack"" do you mean.\n\nSorry, my fault for making this thread really confusing, but I wasn't sure the reason you were pinging windows build guru sipsorcery and I thought the reason was that you wanted sipsorcery to implement the ""build option"" discussed here https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-916836553 which I do not think i",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-917101941,917101941,
hebasto,2021-09-10 18:14:56,"Do I understand correctly that _all_ changes (except for `fs.h` and `fs.cpp`) are ""forced"" by a compiler due to https://github.com/bitcoin/bitcoin/blob/d312e529ce904c0dc8244f29424b8cba9c7da9cd/src/fs.h#L40-L42?",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-917111119,917111119,
ryanofsky,2021-09-10 18:29:46,"> Do I understand correctly that _all_ changes (except for `fs.h` and `fs.cpp`) are ""forced"" by a compiler\n\nYes that is exactly right. I'm working on splitting up the PR into commits and rewriting the description and documentation now that various test bugs have been fixed, but this PR is just forbidding calls to `fs::path` methods that work ok on unix, but are confusing, badly documented, and",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-917120632,917120632,
sipsorcery,2021-09-10 18:39:48,"@hebasto this stuff is a bit above my pay grade I'm afraid. I'm ok with the Win32 API's, such as `CreateFileA` for ANSI, `CreateFileW` for Unicode (UTF-16) etc. but when it comes to the file paths in the standard library `std::filesystem` and `boost` I'm out of my depth.\n\nIt's a pity @ken2812221 isn't still around, he seemed to have a good grip on this stuff. I've always wondered where he got ",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-917126876,917126876,
ryanofsky,2021-09-10 18:53:24,"I'm working on improving documentation so this will be easier to understand, but the idea is just that we need to call functions that convert strings predictably and ignore the current windows ""code page"". We need to avoid calling functions that convert strings unpredictably and use the the windows code page.\n\nThe `fs::path` class happens to have two methods which we are calling which ignore t",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-917135109,917135109,
MarcoFalke,2021-09-11 07:18:36,@ryanofsky Have you seen my previous comment https://github.com/bitcoin/bitcoin/pull/22937#discussion_r706099389 ?,https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-917357785,917357785,
ryanofsky,2021-09-14 14:38:17,"Updated f735d6031d827e8a1bea5dcb00a11262be9c8a20 -> 650470227f9312b627b4bee3f85540f2e00f8bd7 ([`pr/u8path.4`](https://github.com/ryanofsky/bitcoin/commits/pr/u8path.4) -> [`pr/u8path.5`](https://github.com/ryanofsky/bitcoin/commits/pr/u8path.5), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/u8path.4..pr/u8path.5)) fixing review comment about bad spelling, and fixing error in multiproce",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-919214950,919214950,
hebasto,2021-09-15 00:43:03,"I've managed to make functional tests pass on Windows (MSVC build) in the [combined branch](https://github.com/hebasto/bitcoin/commits/pr22937-0914-COMBINED).\n\nAnd the following [patch](https://github.com/hebasto/bitcoin/commit/90c02435d1d92502afc354efe02ebbcad8f58548) was required:\n```diff\n--- a/src/addrdb.cpp\n+++ b/src/addrdb.cpp\n@@ -194,7 +194,7 @@ std::optional<bilingual_str> LoadA",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-919610206,919610206,
laanwj,2021-09-15 08:46:46,"It's so incredibly stupid that basic, straightforward, conversion functions like these are unsafe and we need to write our own replacements. Sorry, more of a C++ rant than anything else… along with the locale handling disaster it seems like an intentional minefield sometimes.",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-919823959,919823959,
ryanofsky,2021-09-16 15:56:46,"Thank you @hebasto for debugging and fixing this! 🙇 \n\nUpdated 650470227f9312b627b4bee3f85540f2e00f8bd7 -> 127cce3ac9d0aab6401eafbe8d4f0d2400f1ccf4 ([`pr/u8path.5`](https://github.com/ryanofsky/bitcoin/commits/pr/u8path.5) -> [`pr/u8path.6`](https://github.com/ryanofsky/bitcoin/commits/pr/u8path.6), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/u8path.5..pr/u8path.6)) with these fix",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-921027477,921027477,
ryanofsky,2021-09-16 16:34:51,"Updated 127cce3ac9d0aab6401eafbe8d4f0d2400f1ccf4 -> 552e87e342a670808a227653a52134661400afcc ([`pr/u8path.6`](https://github.com/ryanofsky/bitcoin/commits/pr/u8path.6) -> [`pr/u8path.7`](https://github.com/ryanofsky/bitcoin/commits/pr/u8path.7), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/u8path.6..pr/u8path.7)) fixing unintended formatting changes caused by adding PathToString calls",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-921056249,921056249,
kiminuo,2021-09-19 15:03:23,"I did try to search for `.string()` and I got these occurrences:\n\n<details>\n  <summary>Search result</summary>\n\n```\n19 results - 11 files\n\nsrc\dbwrapper.cpp:\n  117  CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n  118:     : m_name{path.stem().string()}\n  119  {\n\nsrc\init.cpp:\n  1097                    ""also be ",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-922488054,922488054,
ryanofsky,2021-09-19 19:12:40,"> I did try to search for `.string()` and I got these occurrences:\n\nThanks! Great idea.\n\n> Please correct me if I'm wrong but my understanding is that `fs::PathToString` (and other helper functions) should be used as much as possible (and if not then it should be probably commented). Am I missing something?\n\nNo that's right. I just didn't think to search for these, and the tests that a",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-922522071,922522071,
ryanofsky,2021-09-24 21:36:32,"Rebased a1b9c0f2a557dce39ae83f1738b7668c586f376e -> 8a2f979ea78c116dc586da9d18ef1697b297ef01 ([`pr/u8path.11`](https://github.com/ryanofsky/bitcoin/commits/pr/u8path.11) -> [`pr/u8path.12`](https://github.com/ryanofsky/bitcoin/commits/pr/u8path.12), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/u8path.11-rebase..pr/u8path.12)) due to conflict with #19806",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-926932776,926932776,
ryanofsky,2021-09-27 12:28:36,"> I tested the combined branch (this PR + #20744) on top of the master ([16ccb3a](https://github.com/bitcoin/bitcoin/commit/16ccb3a1cd9125eb24a5b45a98099ff98660767a)), and found another implicit type conversion case which could be fixed with the following patch:\n\nAnother string bites the dust. Thanks!\n\nUpdated 8a2f979ea78c116dc586da9d18ef1697b297ef01 -> 371b06d77a53cd1e9ac10c9f2b0ff9c56a2d",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-927825620,927825620,
hebasto,2021-09-27 13:16:13,"The [CI error](https://api.cirrus-ci.com/v1/task/5093451675992064/logs/functional_tests.log) ""[WinError 10054] An existing connection was forcibly closed by the remote host"" seems unrelated to this PR changes. Job restarted.\n",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-927864933,927864933,
kiminuo,2021-09-27 17:33:14,"@ryanofsky I was looking around and I have found this function in `system.cpp`:\n\n```cpp\nbool RenameOver(fs::path src, fs::path dest)\n{\n#ifdef WIN32\n    return MoveFileExW(src.wstring().c_str(), dest.wstring().c_str(),\n                       MOVEFILE_REPLACE_EXISTING) != 0;\n#else\n    int rc = std::rename(src.c_str(), dest.c_str());\n    return (rc == 0);\n#endif /* WIN32 */\n}",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-928098603,928098603,
ryanofsky,2021-09-27 17:53:28,"> Is `.wstring().c_str()` correct? I would expect your `fs::PathToString` fuction to be used here too\n\nThis is actually correct and calling PathToString would be wrong here. The idea behind this code is to avoid any conversion to narrow strings. The path object on windows natively uses a wide string, wstring() returns it, and \nMoveFileExW expects it. So there is no need for this code to chan",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-928112127,928112127,
kiminuo,2021-09-27 18:23:32,https://github.com/ryanofsky/bitcoin/blob/371b06d77a53cd1e9ac10c9f2b0ff9c56a2d8d68/src/i2p.cpp#L331 - Should `fs::PathToString` be used here? ,https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-928158060,928158060,
ryanofsky,2021-09-27 23:11:52,"> https://github.com/ryanofsky/bitcoin/blob/371b06d77a53cd1e9ac10c9f2b0ff9c56a2d8d68/src/i2p.cpp#L331 - Should `fs::PathToString` be used here?\n\nWow, great find! This should have triggered a build error, and it was a nightmare to figure out what was allowing this to succeed, but it turned out I was overloading the tinyformat `formatValue` function in an imperfect way that caused the overload t",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-928419711,928419711,
ryanofsky,2021-09-28 13:58:59,"Updated b95db7a0393a4da8954f0a63371a673231c36b6e -> bf9197c563cc62847a331df38c0a612433ea8beb ([`pr/u8path.14`](https://github.com/ryanofsky/bitcoin/commits/pr/u8path.14) -> [`pr/u8path.15`](https://github.com/ryanofsky/bitcoin/commits/pr/u8path.15), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/u8path.14..pr/u8path.15)) taking hebasto's suggestion and making the tinyformat link errors ",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-929249771,929249771,
ryanofsky,2021-10-05 16:10:42,"Rebased 2f4a115f4aa394323118e0b9d3569a089e280360 -> 6544ea5035268025207d2402db2f7d90fde947a6 ([`pr/u8path.16`](https://github.com/ryanofsky/bitcoin/commits/pr/u8path.16) -> [`pr/u8path.17`](https://github.com/ryanofsky/bitcoin/commits/pr/u8path.17), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/u8path.16-rebase..pr/u8path.17)) due to conflict with #22950",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-934552090,934552090,
kiminuo,2021-10-09 08:01:47,"@hebasto I compiled on my Windows 10 machine using instructions here: https://github.com/ryanofsky/bitcoin/blob/pr/u8path/build_msvc/README.md#building\n\nNote that bitcoin source files are located in folder `C:\dev\fs_tests_₿_🏃` on my machine.\n\nNow when I attempt to run `bitcoind.exe` with a unicode datadir (using PowerShell 7), it just stops for me saying that the directory does not exist:",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-939252018,939252018,
hebasto,2021-10-09 08:30:42,"> @hebasto I compiled on my Windows 10 machine using instructions here: https://github.com/ryanofsky/bitcoin/blob/pr/u8path/build_msvc/README.md#building\n\nWhy not using the updated build instructions?\n\nIn the Command Prompt everything works as expected:\n```\n>git fetch origin pull/22937/merge:pr22937m-1009\n>git switch pr22937m-1009\n>cd .\build_msvc\n>python msvc-autogen.py\n>msbui",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-939256269,939256269,
kiminuo,2021-10-09 09:56:31,"> Why not using the updated build instructions?\n\nI forgot they have changed. Thanks for letting me know.\n\nAnyway, I have re-compiled the source code (with merged master) and now it works for me with `C:\dev\fs_tests_₿_🏃\datadir` path. So it looks good. (I'm not entirely sure what was wrong the first time. Sorry for confusion.)",https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-939268870,939268870,
kiminuo,2021-10-09 09:57:17,ACK 6544ea5035268025207d2402db2f7d90fde947a6,https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-939268971,939268971,
DrahtBot,2021-10-14 14:56:36,<!--9cd9c72976c961c55c7acef8f6ba82cd-->\n### Guix builds\n\n| File | commit 5b7210c8745d9572fe94620f848d4ee1304c91a7<br>(master) | commit 143235bb9e8bdae1f06c73bb40432a5dcef7fed5<br>(master and this pull) |\n|--|--|--|\n| SHA256SUMS.part | [`c79a21dc3da6e71b...`](https://drahtbot.space/guix/bitcoin/bitcoin/5b7210c8745d9572fe94620f848d4ee1304c91a7/SHA256SUMS.part) | [`b983ebfb72b583d8...`](https://,https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-943439492,943439492,
laanwj,2021-10-15 08:01:22,Code review ACK 6544ea5035268025207d2402db2f7d90fde947a6,https://github.com/bitcoin/bitcoin/pull/22937#issuecomment-944083301,944083301,
MarcoFalke,2021-09-10 08:56:02,"Wasn't `path.string()` already explicit enough? Also, when should `u8string` be used instead? Finally, `strprintf(""%s"", path)` without any helpers still compiles? When should/shouldn't that be used?",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r706015262,706015262,src/addrdb.cpp
ryanofsky,2021-09-10 10:21:51,"> Wasn't `path.string()` already explicit enough?\n\nThe problem with `path.string()` isn't the explicitness, it's the unsafe behavior with the new path class on windows, where it returns a string in an arbitrary encoding based on the local code page. In preparation for this, this PR is disabling the `path.string()` now so it isn't misused later, and adding `PathToString` as a replacement which ",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r706070518,706070518,src/addrdb.cpp
MarcoFalke,2021-09-10 10:25:23,"I think tinyformat just ""emulates"" our `::ToString(path)`, which should also compile (didn't try)",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r706072473,706072473,src/addrdb.cpp
ryanofsky,2021-09-10 10:51:05,"> I think tinyformat just ""emulates"" our `::ToString(path)`, which should also compile (didn't try)\n\nApparently tinyformat is using operator<<, which boost path and std path both provide. I found I could disable it with\n\n```c++\ntemplate<class CharT, class Traits>\nstd::basic_ostream<CharT,Traits>& operator<<(std::basic_ostream<CharT,Traits>& os, const path& p)\n{\n    static_assert(si",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r706086559,706086559,src/addrdb.cpp
MarcoFalke,2021-09-10 11:15:19,"> PathToString/PathFromString functions should be used otherwise\n> U8 functions are the right functions to call in JSON-RPC code and Qt string code ...\n\n\nI am not sure how this can be achieved, without something like bilingual_str.\n\nFor example, `InitError`s are passed to Qt, as well as stderr, as well as the debug log. If Qt requires `u8string` and the others require `PathToString`, t",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r706099389,706099389,src/addrdb.cpp
hebasto,2021-09-10 19:14:40,"I think we should also add\n```suggestion\n    path& operator=(std::string&) = delete;\n    path& operator/=(const std::string&) = delete;\n    path& append(const std::string&) = delete;\n```",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r706413370,706413370,src/fs.h
ryanofsky,2021-09-11 12:56:56,"Nothing we want to achieve should be impossible to achieve or require a different string type. If your home directory is `""/home/\xf0""` (invalid utf-8), and Qt needs to display an error message about peers.dat, it should just display it with a [replacement character](https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character) like ""Error reading /home/�/.bitcoin/peers.dat"". If we",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r706610162,706610162,src/addrdb.cpp
MarcoFalke,2021-09-13 10:44:05,"Can probably remove all of this code, because `BOOST_FILESYSTEM_C_STR` is no longer used? If yes, maybe even split up this change",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r707215834,707215834,src/fs.cpp
MarcoFalke,2021-09-13 10:46:35,Would it make sense to make `operator<<(a)` call `a<<PathToString(*this)`?,https://github.com/bitcoin/bitcoin/pull/22937#discussion_r707217372,707217372,src/fs.h
fanquake,2021-09-13 12:48:36,"I'm happy to base #20744 on this change, if this is the direction we are taking, and save splitting the Boost removal over several PRs.",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r707300999,707300999,src/fs.cpp
MarcoFalke,2021-09-13 12:51:15,"If we want to move forward with removing `boost::fs`, it could even make sense to split up the #20744 build system changes, so that other pull requests can start using the other C++17 features.",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r707303172,707303172,src/fs.cpp
ryanofsky,2021-09-13 12:58:31,"> I'm happy to base #20744 on this change, if this is the direction we are taking, and save splitting the Boost removal over several PRs.\n\nYeah, sorry, I've been a slow iterating over the documentation and variations on the idea, but I'll push an updated version of this and rebased version of #20744 today",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r707309090,707309090,src/fs.cpp
ryanofsky,2021-09-13 17:50:10,"re: https://github.com/bitcoin/bitcoin/pull/22937#discussion_r707215834\n\n> Can probably remove all of this code, because `BOOST_FILESYSTEM_C_STR` is no longer used? If yes, maybe even split up this change\n\nIt would be wrong to remove the static asserts without removing the fsbridge::fopen code, which is still used. Followup PR #20744 removes all of this, though. The static asserts here are",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r707555626,707555626,src/fs.cpp
ryanofsky,2021-09-13 17:50:43,"re: https://github.com/bitcoin/bitcoin/pull/22937#discussion_r706413370\n\n> I think we should also add\n\nGreat suggestion! Added these. Trying to block every method that might result in a bad string conversion is probably not worth it, but these methods are pretty frequently used, and blocking these did turn up two more possible bugs.\n",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r707555997,707555997,src/fs.h
ryanofsky,2021-09-13 18:00:26,"re: https://github.com/bitcoin/bitcoin/pull/22937#discussion_r707217372\n\n> Would it make sense to make `operator<<(a)` call `a<<PathToString(*this)`?\n\nI'm more comfortable blocking methods that are unsafe than overriding their behavior so they no longer behave as described by the c++ standard. Also PathToString() might be the right string representation for some cases, and the wrong string",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r707562869,707562869,src/fs.h
hebasto,2021-09-13 20:23:17,"typo: \n```suggestion\n    // Allow path objects arguments for compatibility,.\n```",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r707654702,707654702,src/fs.h
hebasto,2021-09-26 12:05:18,"8a2f979ea78c116dc586da9d18ef1697b297ef01\n\nIt is unfortunate that we have to do this.\n\nAnyway, using of `boost::io::quoted` requires to include headers as follows:\n```diff\ndiff --git a/src/fs.h b/src/fs.h\nindex e15dc3051..56934ea29 100644\n--- a/src/fs.h\n+++ b/src/fs.h\n@@ -14,6 +14,13 @@\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n \n+#include",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r716193935,716193935,src/fs.h
ryanofsky,2021-09-27 11:50:14,"re: https://github.com/bitcoin/bitcoin/pull/22937#discussion_r716193935\n\n> It is unfortunate that we have to do this.\n\nWhat's unfortunate that we have to do? If you want to disallow the quoted function (by deleting this), or use a different kind of escaping (by changing this), these things would be possible in a followup. I also think boost's choice of quoting behavior is a little weird, b",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r716615777,716615777,src/fs.h
hebasto,2021-09-27 12:38:53,"> > Anyway, using of boost::io::quoted requires to include headers as follows:\n> \n> I don't think this is true...\n\nIt was required to compile the combined branch -- this PR + #20744.",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r716649979,716649979,src/fs.h
ryanofsky,2021-09-27 12:47:17,"> It was required to compile the combined branch -- this PR + #20744.\n\nMaybe we can move the discussion to #20744 if there are continuing issues there but I think #20744 should not be calling boost::io::quoted but should switch to std::quoted instead. We can also choose to get rid of this fs::quoted function entirely in a new PR between this PR and #20744 if we are willing to changing logging ",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r716656860,716656860,src/fs.h
hebasto,2021-09-27 12:55:46,Agree.,https://github.com/bitcoin/bitcoin/pull/22937#discussion_r716663938,716663938,src/fs.h
hebasto,2021-09-28 10:10:35,"A note (not an issue).\nIf code contains a `formatValue` call which assumes implicit `std::string` conversion, an error will be generated by a _linker_, not a compiler.",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r717427816,717427816,src/fs.h
hebasto,2021-09-28 11:12:30,"```suggestion\n// Disallow implicit std::string conversion for tinyformat to avoid\n// locale-dependent encoding on windows.\nnamespace tinyformat {\ntemplate<> inline void formatValue(std::ostream&, const char*, const char*, int, const fs::path&) = delete;\n} // namespace tinyformat\n```\n\nto force a compiler to report errors?\n\nAlso the explicit template specialization with the `boos",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r717469791,717469791,src/fs.h
ryanofsky,2021-09-28 13:31:16,"> to force a compiler to report errors?\n\nWow, I had no idea you could delete nonmember functions. It is much nicer to have this caught by the compiler instead of the linker. Will update.\n\n> Also the explicit template specialization with the `boost::filesystem::path` type seems redundant, no?\n\nThis is just to catch cases like `strformat(""%s"", path1 / path2)` or whatever else might retur",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r717579678,717579678,src/fs.h
hebasto,2021-09-28 13:47:30,"> This is just to catch cases like `strformat(""%s"", path1 / path2)` or whatever else might return a `std::filesystem::path` instead of an `fs::path`\n\nWe do not use the same assumption for other functions. Why just here?",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r717595754,717595754,src/fs.h
ryanofsky,2021-09-28 13:57:27,"> We do not use the same assumption for other functions. Why just here?\n\nIf there are other places where it's easy to catch more encoding problems, I would be happy to add overloads. This case does work a little differently from other cases because it is template specialization not a function overload. A function overload will match when a subclass instance is passed to a parent class paramete",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r717605806,717605806,src/fs.h
hebasto,2021-09-28 13:59:20,"Thanks for an explanation!\n\nMaybe add a comment to the code?",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r717607763,717607763,src/fs.h
ryanofsky,2021-09-28 14:47:51,"If we did want to be more vigilant about possible encoding bugs, we could have a followup PR that drops public inheritance `class path : public boost::filesystem::path` and wraps a private member instead, or uses private inheritance, to make the class a whitelist of allowed functions instead of a blacklist of disallowed functions. The changes required would be a superset of changes already in this",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r717658284,717658284,src/fs.h
kiminuo,2021-10-04 21:08:54,"nit: I find the sentence ""On windows, file paths are natively represented as unicode strings, [..]"" slightly confusing because of that ""unicode strings"". My immediate understanding is something like ""a sequence of bytes in either UTF-8, UTF-16, etc. encoding"" which makes me guess for no good reason :)\n\nAccording to https://docs.microsoft.com/en-us/cpp/standard-library/filesystem?view=msvc-160#",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r721719370,721719370,src/test/fs_tests.cpp
kiminuo,2021-10-04 21:37:11,"I wonder if it is worth adding a test for [.stem()](https://en.cppreference.com/w/cpp/filesystem/path/stem) method too. We use it in [dbwrapper.cpp](https://github.com/bitcoin/bitcoin/pull/22937/files#diff-44bef8fa93d168379ef331d9e11d333be06ce98a8f37ec65f8a987846b90a151R118). \n\nThe test can be simply:\n\n```cpp\nBOOST_CHECK_EQUAL(fs::PathToString(fs::PathFromString(u8_str).stem()), u8_str);",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r721734953,721734953,src/test/fs_tests.cpp
ryanofsky,2021-10-05 06:48:47,"> I wonder if it is worth adding a test for [.stem()](https://en.cppreference.com/w/cpp/filesystem/path/stem) method too. \n\nThanks, added suggested test",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r721936281,721936281,src/test/fs_tests.cpp
ryanofsky,2021-10-05 07:06:37,"> nit: I find the sentence ""On windows, file paths are natively represented as unicode strings, [..]"" slightly confusing because of that ""unicode strings"". \n\nThanks rewrote this and replaced ""unicode strings"" with ""unicode"". The character types and encodings that windows uses internally are not really relevant here. The point is just that paths on windows are unicode and have to be encoded as ",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r721947453,721947453,src/test/fs_tests.cpp
ken2812221,2021-10-11 20:18:37,"I prefer to overwrite the path constructor function and `.string()` to make it compatible with UTF-8 and remain the implicit conversion function. Because `u8string()` would return `std::u8string` in C++20 and I don't think it is a nice idea to handle another type of string. There is no simple way to convert between `std::string` and `std::u8string`. \n\nIf we want to avoid `std::u8string` showin",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r726544489,726544489,src/fs.h
ryanofsky,2021-10-12 00:41:15,"re: https://github.com/bitcoin/bitcoin/pull/22937#discussion_r726544489\n\n> I prefer to overwrite the path constructor function and `.string()` to make it compatible with UTF-8 and remain the implicit conversion function. \n\nI think allowing implicit conversion will probably be a good idea a few years in the future when we can require the UTF-8 code page on windows, but right now in October ",https://github.com/bitcoin/bitcoin/pull/22937#discussion_r726678503,726678503,src/fs.h
