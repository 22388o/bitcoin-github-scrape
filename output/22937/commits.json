[
  {
    "sha": "b39a477ec69a51b2016d3a8c70c0c77670f87f2b",
    "node_id": "C_kwDOABII59oAKGIzOWE0NzdlYzY5YTUxYjIwMTZkM2E4YzcwYzBjNzc2NzBmODdmMmI",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-09-10T04:17:20Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-05T15:10:47Z"
      },
      "message": "refactor: Add fs::PathToString, fs::PathFromString, u8string, u8path functions\n\nThere is no change in behavior. This just helps prepare for the\ntransition from the boost::filesystem to the std::filesystem path\nimplementation.\n\nCo-authored-by: Kiminuo <kiminuo@protonmail.com>",
      "tree": {
        "sha": "61a1769fd27f29de68c6a03f5a4a7361c13b1a21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61a1769fd27f29de68c6a03f5a4a7361c13b1a21"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b39a477ec69a51b2016d3a8c70c0c77670f87f2b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b39a477ec69a51b2016d3a8c70c0c77670f87f2b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b39a477ec69a51b2016d3a8c70c0c77670f87f2b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b39a477ec69a51b2016d3a8c70c0c77670f87f2b/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "113b863f0773999497f952daa6539a03a66a9de3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/113b863f0773999497f952daa6539a03a66a9de3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/113b863f0773999497f952daa6539a03a66a9de3"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 104,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2dcd9c9860810b22ee3e1d63985286dca45190ad",
        "filename": "src/fs.h",
        "status": "modified",
        "additions": 77,
        "deletions": 1,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b39a477ec69a51b2016d3a8c70c0c77670f87f2b/src/fs.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b39a477ec69a51b2016d3a8c70c0c77670f87f2b/src/fs.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.h?ref=b39a477ec69a51b2016d3a8c70c0c77670f87f2b",
        "patch": "@@ -15,7 +15,83 @@\n #include <boost/filesystem/fstream.hpp>\n \n /** Filesystem operations and types */\n-namespace fs = boost::filesystem;\n+namespace fs {\n+\n+using namespace boost::filesystem;\n+\n+/**\n+ * Path class wrapper to prepare application code for transition from\n+ * boost::filesystem library to std::filesystem implementation. The main\n+ * purpose of the class is to define fs::path::u8string() and fs::u8path()\n+ * functions not present in boost. In the next git commit, it also blocks calls\n+ * to the fs::path(std::string) implicit constructor and the fs::path::string()\n+ * method, which worked well in the boost::filesystem implementation, but have\n+ * unsafe and unpredictable behavior on Windows in the std::filesystem\n+ * implementation (see implementation note in \\ref PathToString for details).\n+ */\n+class path : public boost::filesystem::path\n+{\n+public:\n+    using boost::filesystem::path::path;\n+    path(boost::filesystem::path path) : boost::filesystem::path::path(std::move(path)) {}\n+\n+    // Define UTF-8 string conversion method not present in boost::filesystem but present in std::filesystem.\n+    std::string u8string() const { return boost::filesystem::path::string(); }\n+};\n+\n+// Define UTF-8 string conversion function not present in boost::filesystem but present in std::filesystem.\n+static inline path u8path(const std::string& string)\n+{\n+    return boost::filesystem::path(string);\n+}\n+\n+/**\n+ * Convert path object to byte string. On POSIX, paths natively are byte\n+ * strings so this is trivial. On Windows, paths natively are Unicode, so an\n+ * encoding step is necessary.\n+ *\n+ * The inverse of \\ref PathToString is \\ref PathFromString. The strings\n+ * returned and parsed by these functions can be used to call POSIX APIs, and\n+ * for roundtrip conversion, logging, and debugging. But they are not\n+ * guaranteed to be valid UTF-8, and are generally meant to be used internally,\n+ * not externally. When communicating with external programs and libraries that\n+ * require UTF-8, fs::path::u8string() and fs::u8path() methods can be used.\n+ * For other applications, if support for non UTF-8 paths is required, or if\n+ * higher-level JSON or XML or URI or C-style escapes are preferred, it may be\n+ * also be appropriate to use different path encoding functions.\n+ *\n+ * Implementation note: On Windows, the std::filesystem::path(string)\n+ * constructor and std::filesystem::path::string() method are not safe to use\n+ * here, because these methods encode the path using C++'s narrow multibyte\n+ * encoding, which on Windows corresponds to the current \"code page\", which is\n+ * unpredictable and typically not able to represent all valid paths. So\n+ * std::filesystem::path::u8string() and std::filesystem::u8path() functions\n+ * are used instead on Windows. On POSIX, u8string/u8path functions are not\n+ * safe to use because paths are not always valid UTF-8, so plain string\n+ * methods which do not transform the path there are used.\n+ */\n+static inline std::string PathToString(const path& path)\n+{\n+#ifdef WIN32\n+    return path.u8string();\n+#else\n+    static_assert(std::is_same<path::string_type, std::string>::value, \"PathToString not implemented on this platform\");\n+    return path.boost::filesystem::path::string();\n+#endif\n+}\n+\n+/**\n+ * Convert byte string to path object. Inverse of \\ref PathToString.\n+ */\n+static inline path PathFromString(const std::string& string)\n+{\n+#ifdef WIN32\n+    return u8path(string);\n+#else\n+    return boost::filesystem::path(string);\n+#endif\n+}\n+} // namespace fs\n \n /** Bridge operations to C stdio */\n namespace fsbridge {"
      },
      {
        "sha": "ecb838a7dd7af72ed9385017459715ef86f48a41",
        "filename": "src/test/fs_tests.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b39a477ec69a51b2016d3a8c70c0c77670f87f2b/src/test/fs_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b39a477ec69a51b2016d3a8c70c0c77670f87f2b/src/test/fs_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fs_tests.cpp?ref=b39a477ec69a51b2016d3a8c70c0c77670f87f2b",
        "patch": "@@ -11,6 +11,33 @@\n \n BOOST_FIXTURE_TEST_SUITE(fs_tests, BasicTestingSetup)\n \n+BOOST_AUTO_TEST_CASE(fsbridge_pathtostring)\n+{\n+    std::string u8_str = \"fs_tests_\u20bf_\ud83c\udfc3\";\n+    BOOST_CHECK_EQUAL(fs::PathToString(fs::PathFromString(u8_str)), u8_str);\n+    BOOST_CHECK_EQUAL(fs::u8path(u8_str).u8string(), u8_str);\n+    BOOST_CHECK_EQUAL(fs::PathFromString(u8_str).u8string(), u8_str);\n+    BOOST_CHECK_EQUAL(fs::PathToString(fs::u8path(u8_str)), u8_str);\n+#ifndef WIN32\n+    // On non-windows systems, verify that arbitrary byte strings containing\n+    // invalid UTF-8 can be round tripped successfully with PathToString and\n+    // PathFromString. On non-windows systems, paths are just byte strings so\n+    // these functions do not do any encoding. On windows, paths are Unicode,\n+    // and these functions do encoding and decoding, so the behavior of this\n+    // test would be undefined.\n+    std::string invalid_u8_str = \"\\xf0\";\n+    BOOST_CHECK_EQUAL(invalid_u8_str.size(), 1);\n+    BOOST_CHECK_EQUAL(fs::PathToString(fs::PathFromString(invalid_u8_str)), invalid_u8_str);\n+#endif\n+}\n+\n+BOOST_AUTO_TEST_CASE(fsbridge_stem)\n+{\n+    std::string test_filename = \"fs_tests_\u20bf_\ud83c\udfc3.dat\";\n+    std::string expected_stem = \"fs_tests_\u20bf_\ud83c\udfc3\";\n+    BOOST_CHECK_EQUAL(fs::PathToString(fs::PathFromString(test_filename).stem()), expected_stem);\n+}\n+\n BOOST_AUTO_TEST_CASE(fsbridge_fstream)\n {\n     fs::path tmpfolder = m_args.GetDataDirBase();"
      }
    ]
  },
  {
    "sha": "6544ea5035268025207d2402db2f7d90fde947a6",
    "node_id": "C_kwDOABII59oAKDY1NDRlYTUwMzUyNjgwMjUyMDdkMjQwMmRiMmY3ZDkwZmRlOTQ3YTY",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-09-10T04:17:20Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-05T15:10:47Z"
      },
      "message": "refactor: Block unsafe fs::path std::string conversion calls\n\nThere is no change in behavior. This just helps prepare for the\ntransition from boost::filesystem to std::filesystem by avoiding calls\nto methods which will be unsafe after the transaction to std::filesystem\nto due lack of a boost::filesystem::path::imbue equivalent and inability\nto set a predictable locale.\n\nCo-authored-by: Hennadii Stepanov <32963518+hebasto@users.noreply.github.com>\nCo-authored-by: Kiminuo <kiminuo@protonmail.com>\nCo-authored-by: MarcoFalke <falke.marco@gmail.com>",
      "tree": {
        "sha": "c3f6600cfd84c8cb1c57e00bce5a83e4d44dde75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3f6600cfd84c8cb1c57e00bce5a83e4d44dde75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6544ea5035268025207d2402db2f7d90fde947a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6544ea5035268025207d2402db2f7d90fde947a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6544ea5035268025207d2402db2f7d90fde947a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6544ea5035268025207d2402db2f7d90fde947a6/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b39a477ec69a51b2016d3a8c70c0c77670f87f2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b39a477ec69a51b2016d3a8c70c0c77670f87f2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b39a477ec69a51b2016d3a8c70c0c77670f87f2b"
      }
    ],
    "stats": {
      "total": 440,
      "additions": 244,
      "deletions": 196
    },
    "files": [
      {
        "sha": "bdb1fc6b2b148c7b2776973c8171a6274ef20466",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -58,7 +58,7 @@ bool SerializeFileDB(const std::string& prefix, const fs::path& path, const Data\n     if (fileout.IsNull()) {\n         fileout.fclose();\n         remove(pathTmp);\n-        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n+        return error(\"%s: Failed to open file %s\", __func__, fs::PathToString(pathTmp));\n     }\n \n     // Serialize\n@@ -70,7 +70,7 @@ bool SerializeFileDB(const std::string& prefix, const fs::path& path, const Data\n     if (!FileCommit(fileout.Get())) {\n         fileout.fclose();\n         remove(pathTmp);\n-        return error(\"%s: Failed to flush file %s\", __func__, pathTmp.string());\n+        return error(\"%s: Failed to flush file %s\", __func__, fs::PathToString(pathTmp));\n     }\n     fileout.fclose();\n \n@@ -122,8 +122,8 @@ void DeserializeFileDB(const fs::path& path, Data& data, int version)\n } // namespace\n \n CBanDB::CBanDB(fs::path ban_list_path)\n-    : m_banlist_dat(ban_list_path.string() + \".dat\"),\n-      m_banlist_json(ban_list_path.string() + \".json\")\n+    : m_banlist_dat(ban_list_path + \".dat\"),\n+      m_banlist_json(ban_list_path + \".json\")\n {\n }\n \n@@ -143,7 +143,7 @@ bool CBanDB::Write(const banmap_t& banSet)\n bool CBanDB::Read(banmap_t& banSet)\n {\n     if (fs::exists(m_banlist_dat)) {\n-        LogPrintf(\"banlist.dat ignored because it can only be read by \" PACKAGE_NAME \" version 22.x. Remove %s to silence this warning.\\n\", m_banlist_dat);\n+        LogPrintf(\"banlist.dat ignored because it can only be read by \" PACKAGE_NAME \" version 22.x. Remove %s to silence this warning.\\n\", fs::quoted(fs::PathToString(m_banlist_dat)));\n     }\n     // If the JSON banlist does not exist, then recreate it\n     if (!fs::exists(m_banlist_json)) {\n@@ -155,15 +155,15 @@ bool CBanDB::Read(banmap_t& banSet)\n \n     if (!util::ReadSettings(m_banlist_json, settings, errors)) {\n         for (const auto& err : errors) {\n-            LogPrintf(\"Cannot load banlist %s: %s\\n\", m_banlist_json.string(), err);\n+            LogPrintf(\"Cannot load banlist %s: %s\\n\", fs::PathToString(m_banlist_json), err);\n         }\n         return false;\n     }\n \n     try {\n         BanMapFromJson(settings[JSON_KEY], banSet);\n     } catch (const std::runtime_error& e) {\n-        LogPrintf(\"Cannot parse banlist %s: %s\\n\", m_banlist_json.string(), e.what());\n+        LogPrintf(\"Cannot parse banlist %s: %s\\n\", fs::PathToString(m_banlist_json), e.what());\n         return false;\n     }\n \n@@ -194,12 +194,12 @@ std::optional<bilingual_str> LoadAddrman(const std::vector<bool>& asmap, const A\n     } catch (const DbNotFoundError&) {\n         // Addrman can be in an inconsistent state after failure, reset it\n         addrman = std::make_unique<AddrMan>(asmap, /* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n-        LogPrintf(\"Creating peers.dat because the file was not found (%s)\\n\", path_addr);\n+        LogPrintf(\"Creating peers.dat because the file was not found (%s)\\n\", fs::quoted(fs::PathToString(path_addr)));\n         DumpPeerAddresses(args, *addrman);\n     } catch (const std::exception& e) {\n         addrman = nullptr;\n         return strprintf(_(\"Invalid or corrupt peers.dat (%s). If you believe this is a bug, please report it to %s. As a workaround, you can move the file (%s) out of the way (rename, move, or delete) to have a new one created on the next start.\"),\n-                         e.what(), PACKAGE_BUGREPORT, path_addr);\n+                         e.what(), PACKAGE_BUGREPORT, fs::quoted(fs::PathToString(path_addr)));\n     }\n     return std::nullopt;\n }\n@@ -215,7 +215,7 @@ std::vector<CAddress> ReadAnchors(const fs::path& anchors_db_path)\n     std::vector<CAddress> anchors;\n     try {\n         DeserializeFileDB(anchors_db_path, anchors, CLIENT_VERSION | ADDRV2_FORMAT);\n-        LogPrintf(\"Loaded %i addresses from %s\\n\", anchors.size(), anchors_db_path.filename());\n+        LogPrintf(\"Loaded %i addresses from %s\\n\", anchors.size(), fs::quoted(fs::PathToString(anchors_db_path.filename())));\n     } catch (const std::exception&) {\n         anchors.clear();\n     }"
      },
      {
        "sha": "43e986a765d64207394245c047690cb5f069758c",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -786,7 +786,7 @@ static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, co\n         if (failedToGetAuthCookie) {\n             throw std::runtime_error(strprintf(\n                 \"Could not locate RPC credentials. No authentication cookie could be found, and RPC password is not set.  See -rpcpassword and -stdinrpcpass.  Configuration file: (%s)\",\n-                GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string()));\n+                fs::PathToString(GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)))));\n         } else {\n             throw std::runtime_error(\"Authorization failed: Incorrect rpcuser or rpcpassword\");\n         }"
      },
      {
        "sha": "d04f29219ee651a9ab9bc6f6769e2ceddc38f65e",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -115,7 +115,7 @@ static leveldb::Options GetOptions(size_t nCacheSize)\n }\n \n CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n-    : m_name{path.stem().string()}\n+    : m_name{fs::PathToString(path.stem())}\n {\n     penv = nullptr;\n     readoptions.verify_checksums = true;\n@@ -129,21 +129,21 @@ CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bo\n         options.env = penv;\n     } else {\n         if (fWipe) {\n-            LogPrintf(\"Wiping LevelDB in %s\\n\", path.string());\n-            leveldb::Status result = leveldb::DestroyDB(path.string(), options);\n+            LogPrintf(\"Wiping LevelDB in %s\\n\", fs::PathToString(path));\n+            leveldb::Status result = leveldb::DestroyDB(fs::PathToString(path), options);\n             dbwrapper_private::HandleError(result);\n         }\n         TryCreateDirectories(path);\n-        LogPrintf(\"Opening LevelDB in %s\\n\", path.string());\n+        LogPrintf(\"Opening LevelDB in %s\\n\", fs::PathToString(path));\n     }\n-    leveldb::Status status = leveldb::DB::Open(options, path.string(), &pdb);\n+    leveldb::Status status = leveldb::DB::Open(options, fs::PathToString(path), &pdb);\n     dbwrapper_private::HandleError(status);\n     LogPrintf(\"Opened LevelDB successfully\\n\");\n \n     if (gArgs.GetBoolArg(\"-forcecompactdb\", false)) {\n-        LogPrintf(\"Starting database compaction of %s\\n\", path.string());\n+        LogPrintf(\"Starting database compaction of %s\\n\", fs::PathToString(path));\n         pdb->CompactRange(nullptr, nullptr);\n-        LogPrintf(\"Finished database compaction of %s\\n\", path.string());\n+        LogPrintf(\"Finished database compaction of %s\\n\", fs::PathToString(path));\n     }\n \n     // The base-case obfuscation key, which is a noop.\n@@ -160,10 +160,10 @@ CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bo\n         Write(OBFUSCATE_KEY_KEY, new_key);\n         obfuscate_key = new_key;\n \n-        LogPrintf(\"Wrote new obfuscate key for %s: %s\\n\", path.string(), HexStr(obfuscate_key));\n+        LogPrintf(\"Wrote new obfuscate key for %s: %s\\n\", fs::PathToString(path), HexStr(obfuscate_key));\n     }\n \n-    LogPrintf(\"Using obfuscation key for %s: %s\\n\", path.string(), HexStr(obfuscate_key));\n+    LogPrintf(\"Using obfuscation key for %s: %s\\n\", fs::PathToString(path), HexStr(obfuscate_key));\n }\n \n CDBWrapper::~CDBWrapper()"
      },
      {
        "sha": "929808c7fa7d397f3970cf1f17f44d003b0926e7",
        "filename": "src/flatfile.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/flatfile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/flatfile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/flatfile.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -41,11 +41,11 @@ FILE* FlatFileSeq::Open(const FlatFilePos& pos, bool read_only)\n     if (!file && !read_only)\n         file = fsbridge::fopen(path, \"wb+\");\n     if (!file) {\n-        LogPrintf(\"Unable to open file %s\\n\", path.string());\n+        LogPrintf(\"Unable to open file %s\\n\", fs::PathToString(path));\n         return nullptr;\n     }\n     if (pos.nPos && fseek(file, pos.nPos, SEEK_SET)) {\n-        LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, path.string());\n+        LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, fs::PathToString(path));\n         fclose(file);\n         return nullptr;\n     }"
      },
      {
        "sha": "8cae7f32c6251730df55a91c4a69a72d554759a5",
        "filename": "src/fs.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/fs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/fs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -24,7 +24,7 @@ namespace fsbridge {\n FILE *fopen(const fs::path& p, const char *mode)\n {\n #ifndef WIN32\n-    return ::fopen(p.string().c_str(), mode);\n+    return ::fopen(p.c_str(), mode);\n #else\n     std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>,wchar_t> utf8_cvt;\n     return ::_wfopen(p.wstring().c_str(), utf8_cvt.from_bytes(mode).c_str());\n@@ -46,7 +46,7 @@ static std::string GetErrorReason()\n \n FileLock::FileLock(const fs::path& file)\n {\n-    fd = open(file.string().c_str(), O_RDWR);\n+    fd = open(file.c_str(), O_RDWR);\n     if (fd == -1) {\n         reason = GetErrorReason();\n     }\n@@ -249,9 +249,9 @@ void ofstream::close()\n #else // __GLIBCXX__\n \n #if BOOST_VERSION >= 107700\n-static_assert(sizeof(*BOOST_FILESYSTEM_C_STR(fs::path())) == sizeof(wchar_t),\n+static_assert(sizeof(*BOOST_FILESYSTEM_C_STR(boost::filesystem::path())) == sizeof(wchar_t),\n #else\n-static_assert(sizeof(*fs::path().BOOST_FILESYSTEM_C_STR) == sizeof(wchar_t),\n+static_assert(sizeof(*boost::filesystem::path().BOOST_FILESYSTEM_C_STR) == sizeof(wchar_t),\n #endif // BOOST_VERSION >= 107700\n     \"Warning: This build is using boost::filesystem ofstream and ifstream \"\n     \"implementations which will fail to open paths containing multibyte \""
      },
      {
        "sha": "4a0bf39e95c2d08528a257f5c350139f21509cfe",
        "filename": "src/fs.h",
        "status": "modified",
        "additions": 56,
        "deletions": 2,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/fs.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/fs.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.h?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -13,6 +13,7 @@\n \n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n+#include <tinyformat.h>\n \n /** Filesystem operations and types */\n namespace fs {\n@@ -23,8 +24,8 @@ using namespace boost::filesystem;\n  * Path class wrapper to prepare application code for transition from\n  * boost::filesystem library to std::filesystem implementation. The main\n  * purpose of the class is to define fs::path::u8string() and fs::u8path()\n- * functions not present in boost. In the next git commit, it also blocks calls\n- * to the fs::path(std::string) implicit constructor and the fs::path::string()\n+ * functions not present in boost. It also blocks calls to the\n+ * fs::path(std::string) implicit constructor and the fs::path::string()\n  * method, which worked well in the boost::filesystem implementation, but have\n  * unsafe and unpredictable behavior on Windows in the std::filesystem\n  * implementation (see implementation note in \\ref PathToString for details).\n@@ -33,7 +34,26 @@ class path : public boost::filesystem::path\n {\n public:\n     using boost::filesystem::path::path;\n+\n+    // Allow path objects arguments for compatibility.\n     path(boost::filesystem::path path) : boost::filesystem::path::path(std::move(path)) {}\n+    path& operator=(boost::filesystem::path path) { boost::filesystem::path::operator=(std::move(path)); return *this; }\n+    path& operator/=(boost::filesystem::path path) { boost::filesystem::path::operator/=(std::move(path)); return *this; }\n+\n+    // Allow literal string arguments, which are safe as long as the literals are ASCII.\n+    path(const char* c) : boost::filesystem::path(c) {}\n+    path& operator=(const char* c) { boost::filesystem::path::operator=(c); return *this; }\n+    path& operator/=(const char* c) { boost::filesystem::path::operator/=(c); return *this; }\n+    path& append(const char* c) { boost::filesystem::path::append(c); return *this; }\n+\n+    // Disallow std::string arguments to avoid locale-dependent decoding on windows.\n+    path(std::string) = delete;\n+    path& operator=(std::string) = delete;\n+    path& operator/=(std::string) = delete;\n+    path& append(std::string) = delete;\n+\n+    // Disallow std::string conversion method to avoid locale-dependent encoding on windows.\n+    std::string string() const = delete;\n \n     // Define UTF-8 string conversion method not present in boost::filesystem but present in std::filesystem.\n     std::string u8string() const { return boost::filesystem::path::string(); }\n@@ -45,6 +65,33 @@ static inline path u8path(const std::string& string)\n     return boost::filesystem::path(string);\n }\n \n+// Disallow implicit std::string conversion for system_complete to avoid\n+// locale-dependent encoding on windows.\n+static inline path system_complete(const path& p)\n+{\n+    return boost::filesystem::system_complete(p);\n+}\n+\n+// Disallow implicit std::string conversion for exists to avoid\n+// locale-dependent encoding on windows.\n+static inline bool exists(const path& p)\n+{\n+    return boost::filesystem::exists(p);\n+}\n+\n+// Allow explicit quoted stream I/O.\n+static inline auto quoted(const std::string& s)\n+{\n+    return boost::io::quoted(s, '&');\n+}\n+\n+// Allow safe path append operations.\n+static inline path operator+(path p1, path p2)\n+{\n+    p1 += std::move(p2);\n+    return p1;\n+}\n+\n /**\n  * Convert path object to byte string. On POSIX, paths natively are byte\n  * strings so this is trivial. On Windows, paths natively are Unicode, so an\n@@ -179,4 +226,11 @@ namespace fsbridge {\n #endif // WIN32 && __GLIBCXX__\n };\n \n+// Disallow path operator<< formatting in tinyformat to avoid locale-dependent\n+// encoding on windows.\n+namespace tinyformat {\n+template<> inline void formatValue(std::ostream&, const char*, const char*, int, const boost::filesystem::path&) = delete;\n+template<> inline void formatValue(std::ostream&, const char*, const char*, int, const fs::path&) = delete;\n+} // namespace tinyformat\n+\n #endif // BITCOIN_FS_H"
      },
      {
        "sha": "35ac8731f20c66b85c3a6ff7188d193bb339fc27",
        "filename": "src/i2p.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/i2p.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/i2p.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/i2p.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -328,7 +328,7 @@ void Session::GenerateAndSavePrivateKey(const Sock& sock)\n     if (!WriteBinaryFile(m_private_key_file,\n                          std::string(m_private_key.begin(), m_private_key.end()))) {\n         throw std::runtime_error(\n-            strprintf(\"Cannot save I2P private key to %s\", m_private_key_file));\n+            strprintf(\"Cannot save I2P private key to %s\", fs::quoted(fs::PathToString(m_private_key_file))));\n     }\n }\n "
      },
      {
        "sha": "164b7bb55dccf3c57d367a902e4b95bc2ee4e58e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -113,7 +113,7 @@ static const char* BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n static fs::path GetPidFile(const ArgsManager& args)\n {\n-    return AbsPathForConfigVal(fs::path(args.GetArg(\"-pid\", BITCOIN_PID_FILENAME)));\n+    return AbsPathForConfigVal(fs::PathFromString(args.GetArg(\"-pid\", BITCOIN_PID_FILENAME)));\n }\n \n [[nodiscard]] static bool CreatePidFile(const ArgsManager& args)\n@@ -127,7 +127,7 @@ static fs::path GetPidFile(const ArgsManager& args)\n #endif\n         return true;\n     } else {\n-        return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\"), GetPidFile(args).string(), std::strerror(errno)));\n+        return InitError(strprintf(_(\"Unable to create the PID file '%s': %s\"), fs::PathToString(GetPidFile(args)), std::strerror(errno)));\n     }\n }\n \n@@ -1062,10 +1062,10 @@ static bool LockDataDirectory(bool probeOnly)\n     // Make sure only a single Bitcoin process is using the data directory.\n     fs::path datadir = gArgs.GetDataDirNet();\n     if (!DirIsWritable(datadir)) {\n-        return InitError(strprintf(_(\"Cannot write to data directory '%s'; check permissions.\"), datadir.string()));\n+        return InitError(strprintf(_(\"Cannot write to data directory '%s'; check permissions.\"), fs::PathToString(datadir)));\n     }\n     if (!LockDirectory(datadir, \".lock\", probeOnly)) {\n-        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\"), datadir.string(), PACKAGE_NAME));\n+        return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. %s is probably already running.\"), fs::PathToString(datadir), PACKAGE_NAME));\n     }\n     return true;\n }\n@@ -1126,12 +1126,12 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n \n     // Warn about relative -datadir path.\n-    if (args.IsArgSet(\"-datadir\") && !fs::path(args.GetArg(\"-datadir\", \"\")).is_absolute()) {\n+    if (args.IsArgSet(\"-datadir\") && !fs::PathFromString(args.GetArg(\"-datadir\", \"\")).is_absolute()) {\n         LogPrintf(\"Warning: relative datadir option '%s' specified, which will be interpreted relative to the \" /* Continued */\n                   \"current working directory '%s'. This is fragile, because if bitcoin is started in the future \"\n                   \"from a different location, it will be unable to locate the current data files. There could \"\n                   \"also be data loss if bitcoin is started while in a temporary directory.\\n\",\n-                  args.GetArg(\"-datadir\", \"\"), fs::current_path().string());\n+                  args.GetArg(\"-datadir\", \"\"), fs::PathToString(fs::current_path()));\n     }\n \n     InitSignatureCache();\n@@ -1215,20 +1215,20 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         // Read asmap file if configured\n         std::vector<bool> asmap;\n         if (args.IsArgSet(\"-asmap\")) {\n-            fs::path asmap_path = fs::path(args.GetArg(\"-asmap\", \"\"));\n+            fs::path asmap_path = fs::PathFromString(args.GetArg(\"-asmap\", \"\"));\n             if (asmap_path.empty()) {\n-                asmap_path = DEFAULT_ASMAP_FILENAME;\n+                asmap_path = fs::PathFromString(DEFAULT_ASMAP_FILENAME);\n             }\n             if (!asmap_path.is_absolute()) {\n                 asmap_path = gArgs.GetDataDirNet() / asmap_path;\n             }\n             if (!fs::exists(asmap_path)) {\n-                InitError(strprintf(_(\"Could not find asmap file %s\"), asmap_path));\n+                InitError(strprintf(_(\"Could not find asmap file %s\"), fs::quoted(fs::PathToString(asmap_path))));\n                 return false;\n             }\n             asmap = DecodeAsmap(asmap_path);\n             if (asmap.size() == 0) {\n-                InitError(strprintf(_(\"Could not parse asmap file %s\"), asmap_path));\n+                InitError(strprintf(_(\"Could not parse asmap file %s\"), fs::quoted(fs::PathToString(asmap_path))));\n                 return false;\n             }\n             const uint256 asmap_version = SerializeHash(asmap);\n@@ -1653,11 +1653,11 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     // ********************************************************* Step 11: import blocks\n \n     if (!CheckDiskSpace(gArgs.GetDataDirNet())) {\n-        InitError(strprintf(_(\"Error: Disk space is low for %s\"), gArgs.GetDataDirNet()));\n+        InitError(strprintf(_(\"Error: Disk space is low for %s\"), fs::quoted(fs::PathToString(gArgs.GetDataDirNet()))));\n         return false;\n     }\n     if (!CheckDiskSpace(gArgs.GetBlocksDirPath())) {\n-        InitError(strprintf(_(\"Error: Disk space is low for %s\"), gArgs.GetBlocksDirPath()));\n+        InitError(strprintf(_(\"Error: Disk space is low for %s\"), fs::quoted(fs::PathToString(gArgs.GetBlocksDirPath()))));\n         return false;\n     }\n \n@@ -1685,7 +1685,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n     std::vector<fs::path> vImportFiles;\n     for (const std::string& strFile : args.GetArgs(\"-loadblock\")) {\n-        vImportFiles.push_back(strFile);\n+        vImportFiles.push_back(fs::PathFromString(strFile));\n     }\n \n     chainman.m_load_block = std::thread(&util::TraceThread, \"loadblk\", [=, &chainman, &args] {"
      },
      {
        "sha": "8f9e0ebc8799631eb772c599a9fe4b7634274ae0",
        "filename": "src/init/common.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/init/common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/init/common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/common.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -81,7 +81,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n void SetLoggingOptions(const ArgsManager& args)\n {\n     LogInstance().m_print_to_file = !args.IsArgNegated(\"-debuglogfile\");\n-    LogInstance().m_file_path = AbsPathForConfigVal(args.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE));\n+    LogInstance().m_file_path = AbsPathForConfigVal(fs::PathFromString(args.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE)));\n     LogInstance().m_print_to_console = args.GetBoolArg(\"-printtoconsole\", !args.GetBoolArg(\"-daemon\", false));\n     LogInstance().m_log_timestamps = args.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n     LogInstance().m_log_time_micros = args.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n@@ -128,24 +128,24 @@ bool StartLogging(const ArgsManager& args)\n     }\n     if (!LogInstance().StartLogging()) {\n             return InitError(strprintf(Untranslated(\"Could not open debug log file %s\"),\n-                LogInstance().m_file_path.string()));\n+                fs::PathToString(LogInstance().m_file_path)));\n     }\n \n     if (!LogInstance().m_log_timestamps)\n         LogPrintf(\"Startup time: %s\\n\", FormatISO8601DateTime(GetTime()));\n-    LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n-    LogPrintf(\"Using data directory %s\\n\", gArgs.GetDataDirNet().string());\n+    LogPrintf(\"Default data directory %s\\n\", fs::PathToString(GetDefaultDataDir()));\n+    LogPrintf(\"Using data directory %s\\n\", fs::PathToString(gArgs.GetDataDirNet()));\n \n     // Only log conf file usage message if conf file actually exists.\n     fs::path config_file_path = GetConfigFile(args.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n     if (fs::exists(config_file_path)) {\n-        LogPrintf(\"Config file: %s\\n\", config_file_path.string());\n+        LogPrintf(\"Config file: %s\\n\", fs::PathToString(config_file_path));\n     } else if (args.IsArgSet(\"-conf\")) {\n         // Warn if no conf file exists at path provided by user\n-        InitWarning(strprintf(_(\"The specified config file %s does not exist\"), config_file_path.string()));\n+        InitWarning(strprintf(_(\"The specified config file %s does not exist\"), fs::PathToString(config_file_path)));\n     } else {\n         // Not categorizing as \"Warning\" because it's the default behavior\n-        LogPrintf(\"Config file: %s (not found, skipping)\\n\", config_file_path.string());\n+        LogPrintf(\"Config file: %s (not found, skipping)\\n\", fs::PathToString(config_file_path));\n     }\n \n     // Log the config arguments to debug.log"
      },
      {
        "sha": "9036b80c45c4f32362a2ec7450ce76e6e2ee65d0",
        "filename": "src/ipc/process.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/ipc/process.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/ipc/process.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/process.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -30,8 +30,8 @@ class ProcessImpl : public Process\n         return mp::SpawnProcess(pid, [&](int fd) {\n             fs::path path = argv0_path;\n             path.remove_filename();\n-            path.append(new_exe_name);\n-            return std::vector<std::string>{path.string(), \"-ipcfd\", strprintf(\"%i\", fd)};\n+            path /= fs::PathFromString(new_exe_name);\n+            return std::vector<std::string>{fs::PathToString(path), \"-ipcfd\", strprintf(\"%i\", fd)};\n         });\n     }\n     int waitSpawned(int pid) override { return mp::WaitProcess(pid); }"
      },
      {
        "sha": "3cb6d97c16e9139e0be1211eda0db6f4d65e30dd",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -68,13 +68,14 @@ void CleanupBlockRevFiles()\n     LogPrintf(\"Removing unusable blk?????.dat and rev?????.dat files for -reindex with -prune\\n\");\n     fs::path blocksdir = gArgs.GetBlocksDirPath();\n     for (fs::directory_iterator it(blocksdir); it != fs::directory_iterator(); it++) {\n+        const std::string path = fs::PathToString(it->path().filename());\n         if (fs::is_regular_file(*it) &&\n-            it->path().filename().string().length() == 12 &&\n-            it->path().filename().string().substr(8,4) == \".dat\")\n+            path.length() == 12 &&\n+            path.substr(8,4) == \".dat\")\n         {\n-            if (it->path().filename().string().substr(0, 3) == \"blk\") {\n-                mapBlockFiles[it->path().filename().string().substr(3, 5)] = it->path();\n-            } else if (it->path().filename().string().substr(0, 3) == \"rev\") {\n+            if (path.substr(0, 3) == \"blk\") {\n+                mapBlockFiles[path.substr(3, 5)] = it->path();\n+            } else if (path.substr(0, 3) == \"rev\") {\n                 remove(it->path());\n             }\n         }\n@@ -527,14 +528,14 @@ void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFile\n         for (const fs::path& path : vImportFiles) {\n             FILE* file = fsbridge::fopen(path, \"rb\");\n             if (file) {\n-                LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n+                LogPrintf(\"Importing blocks file %s...\\n\", fs::PathToString(path));\n                 chainman.ActiveChainstate().LoadExternalBlockFile(file);\n                 if (ShutdownRequested()) {\n                     LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n                     return;\n                 }\n             } else {\n-                LogPrintf(\"Warning: Could not open blocks file %s\\n\", path.string());\n+                LogPrintf(\"Warning: Could not open blocks file %s\\n\", fs::PathToString(path));\n             }\n         }\n "
      },
      {
        "sha": "850b4f0439d5110b86fa27f975f22fcf192b048b",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -527,7 +527,7 @@ CBlockPolicyEstimator::CBlockPolicyEstimator()\n     fs::path est_filepath = gArgs.GetDataDirNet() / FEE_ESTIMATES_FILENAME;\n     CAutoFile est_file(fsbridge::fopen(est_filepath, \"rb\"), SER_DISK, CLIENT_VERSION);\n     if (est_file.IsNull() || !Read(est_file)) {\n-        LogPrintf(\"Failed to read fee estimates from %s. Continue anyway.\\n\", est_filepath.string());\n+        LogPrintf(\"Failed to read fee estimates from %s. Continue anyway.\\n\", fs::PathToString(est_filepath));\n     }\n }\n \n@@ -887,7 +887,7 @@ void CBlockPolicyEstimator::Flush() {\n     fs::path est_filepath = gArgs.GetDataDirNet() / FEE_ESTIMATES_FILENAME;\n     CAutoFile est_file(fsbridge::fopen(est_filepath, \"wb\"), SER_DISK, CLIENT_VERSION);\n     if (est_file.IsNull() || !Write(est_file)) {\n-        LogPrintf(\"Failed to write fee estimates to %s. Continue anyway.\\n\", est_filepath.string());\n+        LogPrintf(\"Failed to write fee estimates to %s. Continue anyway.\\n\", fs::PathToString(est_filepath));\n     }\n }\n "
      },
      {
        "sha": "78dc922a43a7fdc844c25d88c566401f7539b591",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -647,12 +647,12 @@ void setClipboard(const QString& str)\n \n fs::path qstringToBoostPath(const QString &path)\n {\n-    return fs::path(path.toStdString());\n+    return fs::u8path(path.toStdString());\n }\n \n QString boostPathToQString(const fs::path &path)\n {\n-    return QString::fromStdString(path.string());\n+    return QString::fromStdString(path.u8string());\n }\n \n QString NetworkToQString(Network net)"
      },
      {
        "sha": "2ca4b6a21e279c5e5448739600a59f7c05fec5e2",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -263,7 +263,7 @@ bool Intro::showIfNeeded(bool& did_show_intro, int64_t& prune_MiB)\n      * (to be consistent with bitcoind behavior)\n      */\n     if(dataDir != GUIUtil::getDefaultDataDirectory()) {\n-        gArgs.SoftSetArg(\"-datadir\", GUIUtil::qstringToBoostPath(dataDir).string()); // use OS locale for path setting\n+        gArgs.SoftSetArg(\"-datadir\", fs::PathToString(GUIUtil::qstringToBoostPath(dataDir))); // use OS locale for path setting\n     }\n     return true;\n }"
      },
      {
        "sha": "fc99c8eed9881c75207f48e762a1f8243c0eaeb4",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -2537,15 +2537,15 @@ static RPCHelpMan dumptxoutset()\n         },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    const fs::path path = fsbridge::AbsPathJoin(gArgs.GetDataDirNet(), request.params[0].get_str());\n+    const fs::path path = fsbridge::AbsPathJoin(gArgs.GetDataDirNet(), fs::u8path(request.params[0].get_str()));\n     // Write to a temporary path and then move into `path` on completion\n     // to avoid confusion due to an interruption.\n-    const fs::path temppath = fsbridge::AbsPathJoin(gArgs.GetDataDirNet(), request.params[0].get_str() + \".incomplete\");\n+    const fs::path temppath = fsbridge::AbsPathJoin(gArgs.GetDataDirNet(), fs::u8path(request.params[0].get_str() + \".incomplete\"));\n \n     if (fs::exists(path)) {\n         throw JSONRPCError(\n             RPC_INVALID_PARAMETER,\n-            path.string() + \" already exists. If you are sure this is what you want, \"\n+            path.u8string() + \" already exists. If you are sure this is what you want, \"\n             \"move it out of the way first\");\n     }\n \n@@ -2555,7 +2555,7 @@ static RPCHelpMan dumptxoutset()\n     UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), afile);\n     fs::rename(temppath, path);\n \n-    result.pushKV(\"path\", path.string());\n+    result.pushKV(\"path\", path.u8string());\n     return result;\n },\n     };"
      },
      {
        "sha": "3245e04cdf149752d2b30c68fdd3c19f9d2e442c",
        "filename": "src/rpc/request.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/rpc/request.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/rpc/request.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/request.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -70,7 +70,7 @@ static fs::path GetAuthCookieFile(bool temp=false)\n     if (temp) {\n         arg += \".tmp\";\n     }\n-    return AbsPathForConfigVal(fs::path(arg));\n+    return AbsPathForConfigVal(fs::PathFromString(arg));\n }\n \n bool GenerateAuthCookie(std::string *cookie_out)\n@@ -87,18 +87,18 @@ bool GenerateAuthCookie(std::string *cookie_out)\n     fs::path filepath_tmp = GetAuthCookieFile(true);\n     file.open(filepath_tmp);\n     if (!file.is_open()) {\n-        LogPrintf(\"Unable to open cookie authentication file %s for writing\\n\", filepath_tmp.string());\n+        LogPrintf(\"Unable to open cookie authentication file %s for writing\\n\", fs::PathToString(filepath_tmp));\n         return false;\n     }\n     file << cookie;\n     file.close();\n \n     fs::path filepath = GetAuthCookieFile(false);\n     if (!RenameOver(filepath_tmp, filepath)) {\n-        LogPrintf(\"Unable to rename cookie authentication file %s to %s\\n\", filepath_tmp.string(), filepath.string());\n+        LogPrintf(\"Unable to rename cookie authentication file %s to %s\\n\", fs::PathToString(filepath_tmp), fs::PathToString(filepath));\n         return false;\n     }\n-    LogPrintf(\"Generated RPC authentication cookie %s\\n\", filepath.string());\n+    LogPrintf(\"Generated RPC authentication cookie %s\\n\", fs::PathToString(filepath));\n \n     if (cookie_out)\n         *cookie_out = cookie;"
      },
      {
        "sha": "9bcfba350780245397d14a4b16259cfbd549eb82",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -239,7 +239,7 @@ static RPCHelpMan getrpcinfo()\n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"active_commands\", active_commands);\n \n-    const std::string path = LogInstance().m_file_path.string();\n+    const std::string path = LogInstance().m_file_path.u8string();\n     UniValue log_path(UniValue::VSTR, path);\n     result.pushKV(\"logpath\", log_path);\n "
      },
      {
        "sha": "fbba25c404152584bf7c26937950b72cb25b9472",
        "filename": "src/test/fuzz/banman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/test/fuzz/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/test/fuzz/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/banman.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -48,7 +48,7 @@ FUZZ_TARGET_INIT(banman, initialize_banman)\n     const bool start_with_corrupted_banlist{fuzzed_data_provider.ConsumeBool()};\n     bool force_read_and_write_to_err{false};\n     if (start_with_corrupted_banlist) {\n-        assert(WriteBinaryFile(banlist_file.string() + \".json\",\n+        assert(WriteBinaryFile(banlist_file + \".json\",\n                                fuzzed_data_provider.ConsumeRandomLengthString()));\n     } else {\n         force_read_and_write_to_err = fuzzed_data_provider.ConsumeBool();\n@@ -111,5 +111,5 @@ FUZZ_TARGET_INIT(banman, initialize_banman)\n             assert(banmap == banmap_read);\n         }\n     }\n-    fs::remove(banlist_file.string() + \".json\");\n+    fs::remove(fs::PathToString(banlist_file + \".json\"));\n }"
      },
      {
        "sha": "15cba9e3e591c0e575e85c5b546e7290a99f4763",
        "filename": "src/test/settings_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/test/settings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/test/settings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/settings_tests.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -80,19 +80,19 @@ BOOST_AUTO_TEST_CASE(ReadWrite)\n         \"dupe\": \"dupe\"\n     })\");\n     BOOST_CHECK(!util::ReadSettings(path, values, errors));\n-    std::vector<std::string> dup_keys = {strprintf(\"Found duplicate key dupe in settings file %s\", path.string())};\n+    std::vector<std::string> dup_keys = {strprintf(\"Found duplicate key dupe in settings file %s\", fs::PathToString(path))};\n     BOOST_CHECK_EQUAL_COLLECTIONS(errors.begin(), errors.end(), dup_keys.begin(), dup_keys.end());\n \n     // Check non-kv json files not allowed\n     WriteText(path, R\"(\"non-kv\")\");\n     BOOST_CHECK(!util::ReadSettings(path, values, errors));\n-    std::vector<std::string> non_kv = {strprintf(\"Found non-object value \\\"non-kv\\\" in settings file %s\", path.string())};\n+    std::vector<std::string> non_kv = {strprintf(\"Found non-object value \\\"non-kv\\\" in settings file %s\", fs::PathToString(path))};\n     BOOST_CHECK_EQUAL_COLLECTIONS(errors.begin(), errors.end(), non_kv.begin(), non_kv.end());\n \n     // Check invalid json not allowed\n     WriteText(path, R\"(invalid json)\");\n     BOOST_CHECK(!util::ReadSettings(path, values, errors));\n-    std::vector<std::string> fail_parse = {strprintf(\"Unable to parse settings file %s\", path.string())};\n+    std::vector<std::string> fail_parse = {strprintf(\"Unable to parse settings file %s\", fs::PathToString(path))};\n     BOOST_CHECK_EQUAL_COLLECTIONS(errors.begin(), errors.end(), fail_parse.begin(), fail_parse.end());\n }\n "
      },
      {
        "sha": "e95573022c283b10d29b6eefb2882677b4cd810b",
        "filename": "src/test/util/chainstate.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/test/util/chainstate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/test/util/chainstate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/chainstate.h?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -36,7 +36,7 @@ CreateAndActivateUTXOSnapshot(NodeContext& node, const fs::path root, F malleati\n \n     UniValue result = CreateUTXOSnapshot(node, node.chainman->ActiveChainstate(), auto_outfile);\n     BOOST_TEST_MESSAGE(\n-        \"Wrote UTXO snapshot to \" << snapshot_path.make_preferred().string() << \": \" << result.write());\n+        \"Wrote UTXO snapshot to \" << fs::PathToString(snapshot_path.make_preferred()) << \": \" << result.write());\n \n     // Read the written snapshot in and then activate it.\n     //"
      },
      {
        "sha": "a3c7564d76911fca70f97c85bc012de271114475",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -91,8 +91,8 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::ve\n         extra_args);\n     util::ThreadRename(\"test\");\n     fs::create_directories(m_path_root);\n-    m_args.ForceSetArg(\"-datadir\", m_path_root.string());\n-    gArgs.ForceSetArg(\"-datadir\", m_path_root.string());\n+    m_args.ForceSetArg(\"-datadir\", fs::PathToString(m_path_root));\n+    gArgs.ForceSetArg(\"-datadir\", fs::PathToString(m_path_root));\n     gArgs.ClearPathCache();\n     {\n         SetupServerArgs(*m_node.args);"
      },
      {
        "sha": "55adfd3e292b577b9afbb063c507294d9e03eb40",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -51,23 +51,23 @@ BOOST_AUTO_TEST_CASE(util_datadir)\n {\n     // Use local args variable instead of m_args to avoid making assumptions about test setup\n     ArgsManager args;\n-    args.ForceSetArg(\"-datadir\", m_path_root.string());\n+    args.ForceSetArg(\"-datadir\", fs::PathToString(m_path_root));\n \n     const fs::path dd_norm = args.GetDataDirBase();\n \n-    args.ForceSetArg(\"-datadir\", dd_norm.string() + \"/\");\n+    args.ForceSetArg(\"-datadir\", fs::PathToString(dd_norm) + \"/\");\n     args.ClearPathCache();\n     BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirBase());\n \n-    args.ForceSetArg(\"-datadir\", dd_norm.string() + \"/.\");\n+    args.ForceSetArg(\"-datadir\", fs::PathToString(dd_norm) + \"/.\");\n     args.ClearPathCache();\n     BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirBase());\n \n-    args.ForceSetArg(\"-datadir\", dd_norm.string() + \"/./\");\n+    args.ForceSetArg(\"-datadir\", fs::PathToString(dd_norm) + \"/./\");\n     args.ClearPathCache();\n     BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirBase());\n \n-    args.ForceSetArg(\"-datadir\", dd_norm.string() + \"/.//\");\n+    args.ForceSetArg(\"-datadir\", fs::PathToString(dd_norm) + \"/.//\");\n     args.ClearPathCache();\n     BOOST_CHECK_EQUAL(dd_norm, args.GetDataDirBase());\n }\n@@ -1181,13 +1181,13 @@ BOOST_AUTO_TEST_CASE(util_ReadWriteSettings)\n {\n     // Test writing setting.\n     TestArgsManager args1;\n-    args1.ForceSetArg(\"-datadir\", m_path_root.string());\n+    args1.ForceSetArg(\"-datadir\", fs::PathToString(m_path_root));\n     args1.LockSettings([&](util::Settings& settings) { settings.rw_settings[\"name\"] = \"value\"; });\n     args1.WriteSettingsFile();\n \n     // Test reading setting.\n     TestArgsManager args2;\n-    args2.ForceSetArg(\"-datadir\", m_path_root.string());\n+    args2.ForceSetArg(\"-datadir\", fs::PathToString(m_path_root));\n     args2.ReadSettingsFile();\n     args2.LockSettings([&](util::Settings& settings) { BOOST_CHECK_EQUAL(settings.rw_settings[\"name\"].get_str(), \"value\"); });\n "
      },
      {
        "sha": "55618a5c57ca0c2475d9d94b253c413d77ce3f47",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -318,7 +318,7 @@ TorController::TorController(struct event_base* _base, const std::string& tor_co\n     // Read service private key if cached\n     std::pair<bool,std::string> pkf = ReadBinaryFile(GetPrivateKeyFile());\n     if (pkf.first) {\n-        LogPrint(BCLog::TOR, \"tor: Reading cached private key from %s\\n\", GetPrivateKeyFile().string());\n+        LogPrint(BCLog::TOR, \"tor: Reading cached private key from %s\\n\", fs::PathToString(GetPrivateKeyFile()));\n         private_key = pkf.second;\n     }\n }\n@@ -356,9 +356,9 @@ void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlRe\n         service = LookupNumeric(std::string(service_id+\".onion\"), Params().GetDefaultPort());\n         LogPrintf(\"tor: Got service ID %s, advertising service %s\\n\", service_id, service.ToString());\n         if (WriteBinaryFile(GetPrivateKeyFile(), private_key)) {\n-            LogPrint(BCLog::TOR, \"tor: Cached service private key to %s\\n\", GetPrivateKeyFile().string());\n+            LogPrint(BCLog::TOR, \"tor: Cached service private key to %s\\n\", fs::PathToString(GetPrivateKeyFile()));\n         } else {\n-            LogPrintf(\"tor: Error writing service private key to %s\\n\", GetPrivateKeyFile().string());\n+            LogPrintf(\"tor: Error writing service private key to %s\\n\", fs::PathToString(GetPrivateKeyFile()));\n         }\n         AddLocal(service, LOCAL_MANUAL);\n         // ... onion requested - keep connection open\n@@ -508,7 +508,7 @@ void TorController::protocolinfo_cb(TorControlConnection& _conn, const TorContro\n         } else if (methods.count(\"SAFECOOKIE\")) {\n             // Cookie: hexdump -e '32/1 \"%02x\"\"\\n\"'  ~/.tor/control_auth_cookie\n             LogPrint(BCLog::TOR, \"tor: Using SAFECOOKIE authentication, reading cookie authentication from %s\\n\", cookiefile);\n-            std::pair<bool,std::string> status_cookie = ReadBinaryFile(cookiefile, TOR_COOKIE_SIZE);\n+            std::pair<bool,std::string> status_cookie = ReadBinaryFile(fs::PathFromString(cookiefile), TOR_COOKIE_SIZE);\n             if (status_cookie.first && status_cookie.second.size() == TOR_COOKIE_SIZE) {\n                 // _conn.Command(\"AUTHENTICATE \" + HexStr(status_cookie.second), std::bind(&TorController::auth_cb, this, std::placeholders::_1, std::placeholders::_2));\n                 cookie = std::vector<uint8_t>(status_cookie.second.begin(), status_cookie.second.end());"
      },
      {
        "sha": "b696c65e9d7b1ab8c552c8657ad06e0fede9bbfa",
        "filename": "src/util/asmap.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/util/asmap.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/util/asmap.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/asmap.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -201,7 +201,7 @@ std::vector<bool> DecodeAsmap(fs::path path)\n     }\n     fseek(filestr, 0, SEEK_END);\n     int length = ftell(filestr);\n-    LogPrintf(\"Opened asmap file %s (%d bytes) from disk\\n\", path, length);\n+    LogPrintf(\"Opened asmap file %s (%d bytes) from disk\\n\", fs::quoted(fs::PathToString(path)), length);\n     fseek(filestr, 0, SEEK_SET);\n     uint8_t cur_byte;\n     for (int i = 0; i < length; ++i) {\n@@ -211,7 +211,7 @@ std::vector<bool> DecodeAsmap(fs::path path)\n         }\n     }\n     if (!SanityCheckASMap(bits, 128)) {\n-        LogPrintf(\"Sanity check of asmap file %s failed\\n\", path);\n+        LogPrintf(\"Sanity check of asmap file %s failed\\n\", fs::quoted(fs::PathToString(path)));\n         return {};\n     }\n     return bits;"
      },
      {
        "sha": "7fb35c073ee0f0f159729e607a7b8176ad815216",
        "filename": "src/util/settings.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/util/settings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/util/settings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/settings.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -66,24 +66,24 @@ bool ReadSettings(const fs::path& path, std::map<std::string, SettingsValue>& va\n     fsbridge::ifstream file;\n     file.open(path);\n     if (!file.is_open()) {\n-      errors.emplace_back(strprintf(\"%s. Please check permissions.\", path.string()));\n+      errors.emplace_back(strprintf(\"%s. Please check permissions.\", fs::PathToString(path)));\n       return false;\n     }\n \n     SettingsValue in;\n     if (!in.read(std::string{std::istreambuf_iterator<char>(file), std::istreambuf_iterator<char>()})) {\n-        errors.emplace_back(strprintf(\"Unable to parse settings file %s\", path.string()));\n+        errors.emplace_back(strprintf(\"Unable to parse settings file %s\", fs::PathToString(path)));\n         return false;\n     }\n \n     if (file.fail()) {\n-        errors.emplace_back(strprintf(\"Failed reading settings file %s\", path.string()));\n+        errors.emplace_back(strprintf(\"Failed reading settings file %s\", fs::PathToString(path)));\n         return false;\n     }\n     file.close(); // Done with file descriptor. Release while copying data.\n \n     if (!in.isObject()) {\n-        errors.emplace_back(strprintf(\"Found non-object value %s in settings file %s\", in.write(), path.string()));\n+        errors.emplace_back(strprintf(\"Found non-object value %s in settings file %s\", in.write(), fs::PathToString(path)));\n         return false;\n     }\n \n@@ -92,7 +92,7 @@ bool ReadSettings(const fs::path& path, std::map<std::string, SettingsValue>& va\n     for (size_t i = 0; i < in_keys.size(); ++i) {\n         auto inserted = values.emplace(in_keys[i], in_values[i]);\n         if (!inserted.second) {\n-            errors.emplace_back(strprintf(\"Found duplicate key %s in settings file %s\", in_keys[i], path.string()));\n+            errors.emplace_back(strprintf(\"Found duplicate key %s in settings file %s\", in_keys[i], fs::PathToString(path)));\n         }\n     }\n     return errors.empty();\n@@ -109,7 +109,7 @@ bool WriteSettings(const fs::path& path,\n     fsbridge::ofstream file;\n     file.open(path);\n     if (file.fail()) {\n-        errors.emplace_back(strprintf(\"Error: Unable to open settings file %s for writing\", path.string()));\n+        errors.emplace_back(strprintf(\"Error: Unable to open settings file %s for writing\", fs::PathToString(path)));\n         return false;\n     }\n     file << out.write(/* prettyIndent= */ 1, /* indentLevel= */ 4) << std::endl;"
      },
      {
        "sha": "12d7dc49b2b15db327ea31830127012df4982402",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -98,7 +98,7 @@ bool LockDirectory(const fs::path& directory, const std::string lockfile_name, b\n     fs::path pathLockFile = directory / lockfile_name;\n \n     // If a lock for this directory already exists in the map, don't try to re-lock it\n-    if (dir_locks.count(pathLockFile.string())) {\n+    if (dir_locks.count(fs::PathToString(pathLockFile))) {\n         return true;\n     }\n \n@@ -107,19 +107,19 @@ bool LockDirectory(const fs::path& directory, const std::string lockfile_name, b\n     if (file) fclose(file);\n     auto lock = std::make_unique<fsbridge::FileLock>(pathLockFile);\n     if (!lock->TryLock()) {\n-        return error(\"Error while attempting to lock directory %s: %s\", directory.string(), lock->GetReason());\n+        return error(\"Error while attempting to lock directory %s: %s\", fs::PathToString(directory), lock->GetReason());\n     }\n     if (!probe_only) {\n         // Lock successful and we're not just probing, put it into the map\n-        dir_locks.emplace(pathLockFile.string(), std::move(lock));\n+        dir_locks.emplace(fs::PathToString(pathLockFile), std::move(lock));\n     }\n     return true;\n }\n \n void UnlockDirectory(const fs::path& directory, const std::string& lockfile_name)\n {\n     LOCK(cs_dir_locks);\n-    dir_locks.erase((directory / lockfile_name).string());\n+    dir_locks.erase(fs::PathToString(directory / lockfile_name));\n }\n \n void ReleaseDirectoryLocks()\n@@ -242,7 +242,7 @@ namespace {\n fs::path StripRedundantLastElementsOfPath(const fs::path& path)\n {\n     auto result = path;\n-    while (result.filename().string() == \".\") {\n+    while (fs::PathToString(result.filename()) == \".\") {\n         result = result.parent_path();\n     }\n \n@@ -402,7 +402,7 @@ const fs::path& ArgsManager::GetBlocksDirPath() const\n     if (!path.empty()) return path;\n \n     if (IsArgSet(\"-blocksdir\")) {\n-        path = fs::system_complete(GetArg(\"-blocksdir\", \"\"));\n+        path = fs::system_complete(fs::PathFromString(GetArg(\"-blocksdir\", \"\")));\n         if (!fs::is_directory(path)) {\n             path = \"\";\n             return path;\n@@ -411,7 +411,7 @@ const fs::path& ArgsManager::GetBlocksDirPath() const\n         path = GetDataDirBase();\n     }\n \n-    path /= BaseParams().DataDir();\n+    path /= fs::PathFromString(BaseParams().DataDir());\n     path /= \"blocks\";\n     fs::create_directories(path);\n     path = StripRedundantLastElementsOfPath(path);\n@@ -429,7 +429,7 @@ const fs::path& ArgsManager::GetDataDir(bool net_specific) const\n \n     std::string datadir = GetArg(\"-datadir\", \"\");\n     if (!datadir.empty()) {\n-        path = fs::system_complete(datadir);\n+        path = fs::system_complete(fs::PathFromString(datadir));\n         if (!fs::is_directory(path)) {\n             path = \"\";\n             return path;\n@@ -438,7 +438,7 @@ const fs::path& ArgsManager::GetDataDir(bool net_specific) const\n         path = GetDefaultDataDir();\n     }\n     if (net_specific)\n-        path /= BaseParams().DataDir();\n+        path /= fs::PathFromString(BaseParams().DataDir());\n \n     if (fs::create_directories(path)) {\n         // This is the first run, create wallets subdirectory too\n@@ -517,7 +517,7 @@ bool ArgsManager::GetSettingsPath(fs::path* filepath, bool temp) const\n     }\n     if (filepath) {\n         std::string settings = GetArg(\"-settings\", BITCOIN_SETTINGS_FILENAME);\n-        *filepath = fsbridge::AbsPathJoin(GetDataDirNet(), temp ? settings + \".tmp\" : settings);\n+        *filepath = fsbridge::AbsPathJoin(GetDataDirNet(), fs::PathFromString(temp ? settings + \".tmp\" : settings));\n     }\n     return true;\n }\n@@ -572,7 +572,7 @@ bool ArgsManager::WriteSettingsFile(std::vector<std::string>* errors) const\n         return false;\n     }\n     if (!RenameOver(path_tmp, path)) {\n-        SaveErrors({strprintf(\"Failed renaming settings file %s to %s\\n\", path_tmp.string(), path.string())}, errors);\n+        SaveErrors({strprintf(\"Failed renaming settings file %s to %s\\n\", fs::PathToString(path_tmp), fs::PathToString(path))}, errors);\n         return false;\n     }\n     return true;\n@@ -809,12 +809,12 @@ fs::path GetDefaultDataDir()\n bool CheckDataDirOption()\n {\n     std::string datadir = gArgs.GetArg(\"-datadir\", \"\");\n-    return datadir.empty() || fs::is_directory(fs::system_complete(datadir));\n+    return datadir.empty() || fs::is_directory(fs::system_complete(fs::PathFromString(datadir)));\n }\n \n fs::path GetConfigFile(const std::string& confPath)\n {\n-    return AbsPathForConfigVal(fs::path(confPath), false);\n+    return AbsPathForConfigVal(fs::PathFromString(confPath), false);\n }\n \n static bool GetConfigOptions(std::istream& stream, const std::string& filepath, std::string& error, std::vector<std::pair<std::string, std::string>>& options, std::list<SectionInfo>& sections)\n@@ -1065,7 +1065,7 @@ bool RenameOver(fs::path src, fs::path dest)\n     return MoveFileExW(src.wstring().c_str(), dest.wstring().c_str(),\n                        MOVEFILE_REPLACE_EXISTING) != 0;\n #else\n-    int rc = std::rename(src.string().c_str(), dest.string().c_str());\n+    int rc = std::rename(src.c_str(), dest.c_str());\n     return (rc == 0);\n #endif /* WIN32 */\n }"
      },
      {
        "sha": "2290e119fd85518e9014208c80a5d06cd205fa42",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -61,9 +61,9 @@ bool WalletDatabaseFileId::operator==(const WalletDatabaseFileId& rhs) const\n std::shared_ptr<BerkeleyEnvironment> GetBerkeleyEnv(const fs::path& env_directory)\n {\n     LOCK(cs_db);\n-    auto inserted = g_dbenvs.emplace(env_directory.string(), std::weak_ptr<BerkeleyEnvironment>());\n+    auto inserted = g_dbenvs.emplace(fs::PathToString(env_directory), std::weak_ptr<BerkeleyEnvironment>());\n     if (inserted.second) {\n-        auto env = std::make_shared<BerkeleyEnvironment>(env_directory.string());\n+        auto env = std::make_shared<BerkeleyEnvironment>(env_directory);\n         inserted.first->second = env;\n         return env;\n     }\n@@ -101,7 +101,7 @@ void BerkeleyEnvironment::Close()\n \n     if (error_file) fclose(error_file);\n \n-    UnlockDirectory(strPath, \".walletlock\");\n+    UnlockDirectory(fs::PathFromString(strPath), \".walletlock\");\n }\n \n void BerkeleyEnvironment::Reset()\n@@ -111,7 +111,7 @@ void BerkeleyEnvironment::Reset()\n     fMockDb = false;\n }\n \n-BerkeleyEnvironment::BerkeleyEnvironment(const fs::path& dir_path) : strPath(dir_path.string())\n+BerkeleyEnvironment::BerkeleyEnvironment(const fs::path& dir_path) : strPath(fs::PathToString(dir_path))\n {\n     Reset();\n }\n@@ -129,24 +129,24 @@ bool BerkeleyEnvironment::Open(bilingual_str& err)\n         return true;\n     }\n \n-    fs::path pathIn = strPath;\n+    fs::path pathIn = fs::PathFromString(strPath);\n     TryCreateDirectories(pathIn);\n     if (!LockDirectory(pathIn, \".walletlock\")) {\n         LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", strPath);\n-        err = strprintf(_(\"Error initializing wallet database environment %s!\"), Directory());\n+        err = strprintf(_(\"Error initializing wallet database environment %s!\"), fs::quoted(fs::PathToString(Directory())));\n         return false;\n     }\n \n     fs::path pathLogDir = pathIn / \"database\";\n     TryCreateDirectories(pathLogDir);\n     fs::path pathErrorFile = pathIn / \"db.log\";\n-    LogPrintf(\"BerkeleyEnvironment::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n+    LogPrintf(\"BerkeleyEnvironment::Open: LogDir=%s ErrorFile=%s\\n\", fs::PathToString(pathLogDir), fs::PathToString(pathErrorFile));\n \n     unsigned int nEnvFlags = 0;\n     if (gArgs.GetBoolArg(\"-privdb\", DEFAULT_WALLET_PRIVDB))\n         nEnvFlags |= DB_PRIVATE;\n \n-    dbenv->set_lg_dir(pathLogDir.string().c_str());\n+    dbenv->set_lg_dir(fs::PathToString(pathLogDir).c_str());\n     dbenv->set_cachesize(0, 0x100000, 1); // 1 MiB should be enough for just the wallet\n     dbenv->set_lg_bsize(0x10000);\n     dbenv->set_lg_max(1048576);\n@@ -173,7 +173,7 @@ bool BerkeleyEnvironment::Open(bilingual_str& err)\n             LogPrintf(\"BerkeleyEnvironment::Open: Error %d closing failed database environment: %s\\n\", ret2, DbEnv::strerror(ret2));\n         }\n         Reset();\n-        err = strprintf(_(\"Error initializing wallet database environment %s!\"), Directory());\n+        err = strprintf(_(\"Error initializing wallet database environment %s!\"), fs::quoted(fs::PathToString(Directory())));\n         if (ret == DB_RUNRECOVERY) {\n             err += Untranslated(\" \") + _(\"This error could occur if this wallet was not shutdown cleanly and was last loaded using a build with a newer version of Berkeley DB. If so, please use the software that last loaded this wallet\");\n         }\n@@ -261,7 +261,7 @@ bool BerkeleyDatabase::Verify(bilingual_str& errorStr)\n     fs::path file_path = walletDir / strFile;\n \n     LogPrintf(\"Using BerkeleyDB version %s\\n\", BerkeleyDatabaseVersion());\n-    LogPrintf(\"Using wallet %s\\n\", file_path.string());\n+    LogPrintf(\"Using wallet %s\\n\", fs::PathToString(file_path));\n \n     if (!env->Open(errorStr)) {\n         return false;\n@@ -274,7 +274,7 @@ bool BerkeleyDatabase::Verify(bilingual_str& errorStr)\n         Db db(env->dbenv.get(), 0);\n         int result = db.verify(strFile.c_str(), nullptr, nullptr, 0);\n         if (result != 0) {\n-            errorStr = strprintf(_(\"%s corrupt. Try using the wallet tool bitcoin-wallet to salvage or restoring a backup.\"), file_path);\n+            errorStr = strprintf(_(\"%s corrupt. Try using the wallet tool bitcoin-wallet to salvage or restoring a backup.\"), fs::quoted(fs::PathToString(file_path)));\n             return false;\n         }\n     }\n@@ -566,7 +566,7 @@ void BerkeleyEnvironment::Flush(bool fShutdown)\n                 dbenv->log_archive(&listp, DB_ARCH_REMOVE);\n                 Close();\n                 if (!fMockDb) {\n-                    fs::remove_all(fs::path(strPath) / \"database\");\n+                    fs::remove_all(fs::PathFromString(strPath) / \"database\");\n                 }\n             }\n         }\n@@ -614,21 +614,21 @@ bool BerkeleyDatabase::Backup(const std::string& strDest) const\n \n                 // Copy wallet file\n                 fs::path pathSrc = env->Directory() / strFile;\n-                fs::path pathDest(strDest);\n+                fs::path pathDest(fs::PathFromString(strDest));\n                 if (fs::is_directory(pathDest))\n-                    pathDest /= strFile;\n+                    pathDest /= fs::PathFromString(strFile);\n \n                 try {\n                     if (fs::equivalent(pathSrc, pathDest)) {\n-                        LogPrintf(\"cannot backup to wallet source file %s\\n\", pathDest.string());\n+                        LogPrintf(\"cannot backup to wallet source file %s\\n\", fs::PathToString(pathDest));\n                         return false;\n                     }\n \n                     fs::copy_file(pathSrc, pathDest, fs::copy_option::overwrite_if_exists);\n-                    LogPrintf(\"copied %s to %s\\n\", strFile, pathDest.string());\n+                    LogPrintf(\"copied %s to %s\\n\", strFile, fs::PathToString(pathDest));\n                     return true;\n                 } catch (const fs::filesystem_error& e) {\n-                    LogPrintf(\"error copying %s to %s - %s\\n\", strFile, pathDest.string(), fsbridge::get_filesystem_error_message(e));\n+                    LogPrintf(\"error copying %s to %s - %s\\n\", strFile, fs::PathToString(pathDest), fsbridge::get_filesystem_error_message(e));\n                     return false;\n                 }\n             }\n@@ -828,10 +828,10 @@ std::unique_ptr<BerkeleyDatabase> MakeBerkeleyDatabase(const fs::path& path, con\n     std::unique_ptr<BerkeleyDatabase> db;\n     {\n         LOCK(cs_db); // Lock env.m_databases until insert in BerkeleyDatabase constructor\n-        std::string data_filename = data_file.filename().string();\n+        std::string data_filename = fs::PathToString(data_file.filename());\n         std::shared_ptr<BerkeleyEnvironment> env = GetBerkeleyEnv(data_file.parent_path());\n         if (env->m_databases.count(data_filename)) {\n-            error = Untranslated(strprintf(\"Refusing to load database. Data file '%s' is already loaded.\", (env->Directory() / data_filename).string()));\n+            error = Untranslated(strprintf(\"Refusing to load database. Data file '%s' is already loaded.\", fs::PathToString(env->Directory() / data_filename)));\n             status = DatabaseStatus::FAILED_ALREADY_LOADED;\n             return nullptr;\n         }"
      },
      {
        "sha": "b666a8e73a6c983e3f4f4c2ea9b3a5174c78ec74",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -63,7 +63,7 @@ class BerkeleyEnvironment\n \n     bool IsMock() const { return fMockDb; }\n     bool IsInitialized() const { return fDbEnvInit; }\n-    fs::path Directory() const { return strPath; }\n+    fs::path Directory() const { return fs::PathFromString(strPath); }\n \n     bool Open(bilingual_str& error);\n     void Close();\n@@ -141,7 +141,7 @@ class BerkeleyDatabase : public WalletDatabase\n     bool Verify(bilingual_str& error);\n \n     /** Return path to main database filename */\n-    std::string Filename() override { return (env->Directory() / strFile).string(); }\n+    std::string Filename() override { return fs::PathToString(env->Directory() / strFile); }\n \n     std::string Format() override { return \"bdb\"; }\n     /**"
      },
      {
        "sha": "c74c69ed09f2aeabe8b9505de96b814708dbcb1a",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -12,25 +12,26 @@\n \n std::vector<fs::path> ListDatabases(const fs::path& wallet_dir)\n {\n-    const size_t offset = wallet_dir.string().size() + (wallet_dir == wallet_dir.root_name() ? 0 : 1);\n+    const size_t offset = wallet_dir.native().size() + (wallet_dir == wallet_dir.root_name() ? 0 : 1);\n     std::vector<fs::path> paths;\n     boost::system::error_code ec;\n \n     for (auto it = fs::recursive_directory_iterator(wallet_dir, ec); it != fs::recursive_directory_iterator(); it.increment(ec)) {\n         if (ec) {\n             if (fs::is_directory(*it)) {\n                 it.no_push();\n-                LogPrintf(\"%s: %s %s -- skipping.\\n\", __func__, ec.message(), it->path().string());\n+                LogPrintf(\"%s: %s %s -- skipping.\\n\", __func__, ec.message(), fs::PathToString(it->path()));\n             } else {\n-                LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), it->path().string());\n+                LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), fs::PathToString(it->path()));\n             }\n             continue;\n         }\n \n         try {\n             // Get wallet path relative to walletdir by removing walletdir from the wallet path.\n             // This can be replaced by boost::filesystem::lexically_relative once boost is bumped to 1.60.\n-            const fs::path path = it->path().string().substr(offset);\n+            const auto path_str = it->path().native().substr(offset);\n+            const fs::path path{path_str.begin(), path_str.end()};\n \n             if (it->status().type() == fs::directory_file &&\n                 (IsBDBFile(BDBDataFile(it->path())) || IsSQLiteFile(SQLiteDataFile(it->path())))) {\n@@ -50,7 +51,7 @@ std::vector<fs::path> ListDatabases(const fs::path& wallet_dir)\n                 }\n             }\n         } catch (const std::exception& e) {\n-            LogPrintf(\"%s: Error scanning %s: %s\\n\", __func__, it->path().string(), e.what());\n+            LogPrintf(\"%s: Error scanning %s: %s\\n\", __func__, fs::PathToString(it->path()), e.what());\n             it.no_push();\n         }\n     }\n@@ -85,7 +86,7 @@ bool IsBDBFile(const fs::path& path)\n     // This check also prevents opening lock files.\n     boost::system::error_code ec;\n     auto size = fs::file_size(path, ec);\n-    if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), path.string());\n+    if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), fs::PathToString(path));\n     if (size < 4096) return false;\n \n     fsbridge::ifstream file(path, std::ios::binary);\n@@ -109,7 +110,7 @@ bool IsSQLiteFile(const fs::path& path)\n     // A SQLite Database file is at least 512 bytes.\n     boost::system::error_code ec;\n     auto size = fs::file_size(path, ec);\n-    if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), path.string());\n+    if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), fs::PathToString(path));\n     if (size < 512) return false;\n \n     fsbridge::ifstream file(path, std::ios::binary);"
      },
      {
        "sha": "08d94b76d9993bb52c97dd80d33909fa2abe973a",
        "filename": "src/wallet/dump.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/dump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/dump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/dump.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -19,16 +19,16 @@ bool DumpWallet(CWallet& wallet, bilingual_str& error)\n         return false;\n     }\n \n-    fs::path path = dump_filename;\n+    fs::path path = fs::PathFromString(dump_filename);\n     path = fs::absolute(path);\n     if (fs::exists(path)) {\n-        error = strprintf(_(\"File %s already exists. If you are sure this is what you want, move it out of the way first.\"), path.string());\n+        error = strprintf(_(\"File %s already exists. If you are sure this is what you want, move it out of the way first.\"), fs::PathToString(path));\n         return false;\n     }\n     fsbridge::ofstream dump_file;\n     dump_file.open(path);\n     if (dump_file.fail()) {\n-        error = strprintf(_(\"Unable to open %s for writing\"), path.string());\n+        error = strprintf(_(\"Unable to open %s for writing\"), fs::PathToString(path));\n         return false;\n     }\n \n@@ -114,10 +114,10 @@ bool CreateFromDump(const std::string& name, const fs::path& wallet_path, biling\n         return false;\n     }\n \n-    fs::path dump_path = dump_filename;\n+    fs::path dump_path = fs::PathFromString(dump_filename);\n     dump_path = fs::absolute(dump_path);\n     if (!fs::exists(dump_path)) {\n-        error = strprintf(_(\"Dump file %s does not exist.\"), dump_path.string());\n+        error = strprintf(_(\"Dump file %s does not exist.\"), fs::PathToString(dump_path));\n         return false;\n     }\n     fsbridge::ifstream dump_file(dump_path);"
      },
      {
        "sha": "57f1a6a67af22f2f0e04abf97faad6bdfa8574b5",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -551,13 +551,13 @@ class WalletClientImpl : public WalletClient\n     }\n     std::string getWalletDir() override\n     {\n-        return GetWalletDir().string();\n+        return fs::PathToString(GetWalletDir());\n     }\n     std::vector<std::string> listWalletDir() override\n     {\n         std::vector<std::string> paths;\n         for (auto& path : ListDatabases(GetWalletDir())) {\n-            paths.push_back(path.string());\n+            paths.push_back(fs::PathToString(path));\n         }\n         return paths;\n     }"
      },
      {
        "sha": "7ef5a0cf55c321cc981d8df19f75400d31fb1c72",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -25,25 +25,25 @@ bool VerifyWallets(WalletContext& context)\n     ArgsManager& args = *Assert(context.args);\n \n     if (args.IsArgSet(\"-walletdir\")) {\n-        fs::path wallet_dir = args.GetArg(\"-walletdir\", \"\");\n+        fs::path wallet_dir = fs::PathFromString(args.GetArg(\"-walletdir\", \"\"));\n         boost::system::error_code error;\n         // The canonical path cleans the path, preventing >1 Berkeley environment instances for the same directory\n         fs::path canonical_wallet_dir = fs::canonical(wallet_dir, error);\n         if (error || !fs::exists(wallet_dir)) {\n-            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), fs::PathToString(wallet_dir)));\n             return false;\n         } else if (!fs::is_directory(wallet_dir)) {\n-            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\"), wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\"), fs::PathToString(wallet_dir)));\n             return false;\n         // The canonical path transforms relative paths into absolute ones, so we check the non-canonical version\n         } else if (!wallet_dir.is_absolute()) {\n-            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\"), wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\"), fs::PathToString(wallet_dir)));\n             return false;\n         }\n-        args.ForceSetArg(\"-walletdir\", canonical_wallet_dir.string());\n+        args.ForceSetArg(\"-walletdir\", fs::PathToString(canonical_wallet_dir));\n     }\n \n-    LogPrintf(\"Using wallet directory %s\\n\", GetWalletDir().string());\n+    LogPrintf(\"Using wallet directory %s\\n\", fs::PathToString(GetWalletDir()));\n \n     chain.initMessage(_(\"Verifying wallet(s)\u2026\").translated);\n \n@@ -70,7 +70,7 @@ bool VerifyWallets(WalletContext& context)\n \n     for (const auto& wallet : chain.getSettingsList(\"wallet\")) {\n         const auto& wallet_file = wallet.get_str();\n-        const fs::path path = fsbridge::AbsPathJoin(GetWalletDir(), wallet_file);\n+        const fs::path path = fsbridge::AbsPathJoin(GetWalletDir(), fs::PathFromString(wallet_file));\n \n         if (!wallet_paths.insert(path).second) {\n             chain.initWarning(strprintf(_(\"Ignoring duplicate -wallet %s.\"), wallet_file));\n@@ -102,7 +102,7 @@ bool LoadWallets(WalletContext& context)\n         std::set<fs::path> wallet_paths;\n         for (const auto& wallet : chain.getSettingsList(\"wallet\")) {\n             const auto& name = wallet.get_str();\n-            if (!wallet_paths.insert(name).second) {\n+            if (!wallet_paths.insert(fs::PathFromString(name)).second) {\n                 continue;\n             }\n             DatabaseOptions options;"
      },
      {
        "sha": "9b09bc23d680847e6f5d9071330f16e44d685a4f",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -550,7 +550,7 @@ RPCHelpMan importwallet()\n         EnsureWalletIsUnlocked(*pwallet);\n \n         fsbridge::ifstream file;\n-        file.open(request.params[0].get_str(), std::ios::in | std::ios::ate);\n+        file.open(fs::u8path(request.params[0].get_str()), std::ios::in | std::ios::ate);\n         if (!file.is_open()) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n         }\n@@ -745,7 +745,7 @@ RPCHelpMan dumpwallet()\n \n     EnsureWalletIsUnlocked(wallet);\n \n-    fs::path filepath = request.params[0].get_str();\n+    fs::path filepath = fs::u8path(request.params[0].get_str());\n     filepath = fs::absolute(filepath);\n \n     /* Prevent arbitrary files from being overwritten. There have been reports\n@@ -754,7 +754,7 @@ RPCHelpMan dumpwallet()\n      * It may also avoid other security issues.\n      */\n     if (fs::exists(filepath)) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, filepath.string() + \" already exists. If you are sure this is what you want, move it out of the way first\");\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, filepath.u8string() + \" already exists. If you are sure this is what you want, move it out of the way first\");\n     }\n \n     fsbridge::ofstream file;\n@@ -844,7 +844,7 @@ RPCHelpMan dumpwallet()\n     file.close();\n \n     UniValue reply(UniValue::VOBJ);\n-    reply.pushKV(\"filename\", filepath.string());\n+    reply.pushKV(\"filename\", filepath.u8string());\n \n     return reply;\n },"
      },
      {
        "sha": "cc0f6c2aff2c169b9bb3d06ba2f89ed8fab5ed41",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -2555,7 +2555,7 @@ static RPCHelpMan listwalletdir()\n     UniValue wallets(UniValue::VARR);\n     for (const auto& path : ListDatabases(GetWalletDir())) {\n         UniValue wallet(UniValue::VOBJ);\n-        wallet.pushKV(\"name\", path.string());\n+        wallet.pushKV(\"name\", path.u8string());\n         wallets.push_back(wallet);\n     }\n \n@@ -2856,22 +2856,22 @@ static RPCHelpMan restorewallet()\n \n     WalletContext& context = EnsureWalletContext(request.context);\n \n-    std::string backup_file = request.params[1].get_str();\n+    auto backup_file = fs::u8path(request.params[1].get_str());\n \n     if (!fs::exists(backup_file)) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Backup file does not exist\");\n     }\n \n     std::string wallet_name = request.params[0].get_str();\n \n-    const fs::path wallet_path = fsbridge::AbsPathJoin(GetWalletDir(), wallet_name);\n+    const fs::path wallet_path = fsbridge::AbsPathJoin(GetWalletDir(), fs::u8path(wallet_name));\n \n     if (fs::exists(wallet_path)) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Wallet name already exists.\");\n     }\n \n     if (!TryCreateDirectories(wallet_path)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Failed to create database path '%s'. Database already exists.\", wallet_path.string()));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Failed to create database path '%s'. Database already exists.\", wallet_path.u8string()));\n     }\n \n     auto wallet_file = wallet_path / \"wallet.dat\";"
      },
      {
        "sha": "650e083e8ef2f5856cf2ad0409e237d7c9992479",
        "filename": "src/wallet/sqlite.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/sqlite.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/sqlite.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/sqlite.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -67,7 +67,7 @@ static void SetPragma(sqlite3* db, const std::string& key, const std::string& va\n }\n \n SQLiteDatabase::SQLiteDatabase(const fs::path& dir_path, const fs::path& file_path, bool mock)\n-    : WalletDatabase(), m_mock(mock), m_dir_path(dir_path.string()), m_file_path(file_path.string())\n+    : WalletDatabase(), m_mock(mock), m_dir_path(fs::PathToString(dir_path)), m_file_path(fs::PathToString(file_path))\n {\n     {\n         LOCK(g_sqlite_mutex);\n@@ -206,7 +206,7 @@ void SQLiteDatabase::Open()\n \n     if (m_db == nullptr) {\n         if (!m_mock) {\n-            TryCreateDirectories(m_dir_path);\n+            TryCreateDirectories(fs::PathFromString(m_dir_path));\n         }\n         int ret = sqlite3_open_v2(m_file_path.c_str(), &m_db, flags, nullptr);\n         if (ret != SQLITE_OK) {"
      },
      {
        "sha": "dba3f35025ad4003c0b2ef5f38feeda2b97d02e7",
        "filename": "src/wallet/test/db_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/test/db_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/test/db_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/db_tests.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -16,7 +16,7 @@ BOOST_FIXTURE_TEST_SUITE(db_tests, BasicTestingSetup)\n static std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& path, std::string& database_filename)\n {\n     fs::path data_file = BDBDataFile(path);\n-    database_filename = data_file.filename().string();\n+    database_filename = fs::PathToString(data_file.filename());\n     return GetBerkeleyEnv(data_file.parent_path());\n }\n \n@@ -25,11 +25,7 @@ BOOST_AUTO_TEST_CASE(getwalletenv_file)\n     std::string test_name = \"test_name.dat\";\n     const fs::path datadir = gArgs.GetDataDirNet();\n     fs::path file_path = datadir / test_name;\n-#if BOOST_VERSION >= 107700\n-    std::ofstream f(BOOST_FILESYSTEM_C_STR(file_path));\n-#else\n-    std::ofstream f(file_path.BOOST_FILESYSTEM_C_STR);\n-#endif // BOOST_VERSION >= 107700\n+    fs::ofstream f(file_path);\n     f.close();\n \n     std::string filename;"
      },
      {
        "sha": "170675c035ece89a5bb9086af4568ce21b4afc43",
        "filename": "src/wallet/test/init_test_fixture.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/test/init_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/test/init_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_test_fixture.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -32,11 +32,7 @@ InitWalletDirTestingSetup::InitWalletDirTestingSetup(const std::string& chainNam\n     fs::create_directories(m_walletdir_path_cases[\"default\"]);\n     fs::create_directories(m_walletdir_path_cases[\"custom\"]);\n     fs::create_directories(m_walletdir_path_cases[\"relative\"]);\n-#if BOOST_VERSION >= 107700\n-    std::ofstream f(BOOST_FILESYSTEM_C_STR(m_walletdir_path_cases[\"file\"]));\n-#else\n-    std::ofstream f(m_walletdir_path_cases[\"file\"].BOOST_FILESYSTEM_C_STR);\n-#endif // BOOST_VERSION >= 107700\n+    fs::ofstream f(m_walletdir_path_cases[\"file\"]);\n     f.close();\n }\n \n@@ -50,5 +46,5 @@ InitWalletDirTestingSetup::~InitWalletDirTestingSetup()\n \n void InitWalletDirTestingSetup::SetWalletDir(const fs::path& walletdir_path)\n {\n-    gArgs.ForceSetArg(\"-walletdir\", walletdir_path.string());\n+    gArgs.ForceSetArg(\"-walletdir\", fs::PathToString(walletdir_path));\n }"
      },
      {
        "sha": "222c2bf4b77afa1c0ac078df88ee23598650c785",
        "filename": "src/wallet/test/init_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/test/init_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/test/init_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_tests.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -17,7 +17,7 @@ BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_default)\n     SetWalletDir(m_walletdir_path_cases[\"default\"]);\n     bool result = m_wallet_client->verify();\n     BOOST_CHECK(result == true);\n-    fs::path walletdir = gArgs.GetArg(\"-walletdir\", \"\");\n+    fs::path walletdir = fs::PathFromString(gArgs.GetArg(\"-walletdir\", \"\"));\n     fs::path expected_path = fs::canonical(m_walletdir_path_cases[\"default\"]);\n     BOOST_CHECK_EQUAL(walletdir, expected_path);\n }\n@@ -27,7 +27,7 @@ BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_custom)\n     SetWalletDir(m_walletdir_path_cases[\"custom\"]);\n     bool result = m_wallet_client->verify();\n     BOOST_CHECK(result == true);\n-    fs::path walletdir = gArgs.GetArg(\"-walletdir\", \"\");\n+    fs::path walletdir = fs::PathFromString(gArgs.GetArg(\"-walletdir\", \"\"));\n     fs::path expected_path = fs::canonical(m_walletdir_path_cases[\"custom\"]);\n     BOOST_CHECK_EQUAL(walletdir, expected_path);\n }\n@@ -67,7 +67,7 @@ BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_no_trailing)\n     SetWalletDir(m_walletdir_path_cases[\"trailing\"]);\n     bool result = m_wallet_client->verify();\n     BOOST_CHECK(result == true);\n-    fs::path walletdir = gArgs.GetArg(\"-walletdir\", \"\");\n+    fs::path walletdir = fs::PathFromString(gArgs.GetArg(\"-walletdir\", \"\"));\n     fs::path expected_path = fs::canonical(m_walletdir_path_cases[\"default\"]);\n     BOOST_CHECK_EQUAL(walletdir, expected_path);\n }\n@@ -77,7 +77,7 @@ BOOST_AUTO_TEST_CASE(walletinit_verify_walletdir_no_trailing2)\n     SetWalletDir(m_walletdir_path_cases[\"trailing2\"]);\n     bool result = m_wallet_client->verify();\n     BOOST_CHECK(result == true);\n-    fs::path walletdir = gArgs.GetArg(\"-walletdir\", \"\");\n+    fs::path walletdir = fs::PathFromString(gArgs.GetArg(\"-walletdir\", \"\"));\n     fs::path expected_path = fs::canonical(m_walletdir_path_cases[\"default\"]);\n     BOOST_CHECK_EQUAL(walletdir, expected_path);\n }"
      },
      {
        "sha": "94b5abfba74a8e69b34696f03f3a613a9df8addf",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -258,7 +258,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     SetMockTime(KEY_TIME);\n     m_coinbase_txns.emplace_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n \n-    std::string backup_file = (gArgs.GetDataDirNet() / \"wallet.backup\").string();\n+    std::string backup_file = fs::PathToString(gArgs.GetDataDirNet() / \"wallet.backup\");\n \n     // Import key into wallet and call dumpwallet to create backup file.\n     {"
      },
      {
        "sha": "598fce01125216a6879019afe97867ba03d9698c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -2515,16 +2515,16 @@ std::unique_ptr<WalletDatabase> MakeWalletDatabase(const std::string& name, cons\n     // 2. Path to an existing directory.\n     // 3. Path to a symlink to a directory.\n     // 4. For backwards compatibility, the name of a data file in -walletdir.\n-    const fs::path wallet_path = fsbridge::AbsPathJoin(GetWalletDir(), name);\n+    const fs::path wallet_path = fsbridge::AbsPathJoin(GetWalletDir(), fs::PathFromString(name));\n     fs::file_type path_type = fs::symlink_status(wallet_path).type();\n     if (!(path_type == fs::file_not_found || path_type == fs::directory_file ||\n           (path_type == fs::symlink_file && fs::is_directory(wallet_path)) ||\n-          (path_type == fs::regular_file && fs::path(name).filename() == name))) {\n+          (path_type == fs::regular_file && fs::PathFromString(name).filename() == fs::PathFromString(name)))) {\n         error_string = Untranslated(strprintf(\n               \"Invalid -wallet path '%s'. -wallet path should point to a directory where wallet.dat and \"\n               \"database/log.?????????? files can be stored, a location where such a directory could be created, \"\n               \"or (for backwards compatibility) the name of an existing data file in -walletdir (%s)\",\n-              name, GetWalletDir()));\n+              name, fs::quoted(fs::PathToString(GetWalletDir()))));\n         status = DatabaseStatus::FAILED_BAD_PATH;\n         return nullptr;\n     }"
      },
      {
        "sha": "a6839f1f7848ce4c210be30ac2594586eaa02547",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -1106,7 +1106,7 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n     try {\n         exists = fs::symlink_status(path).type() != fs::file_not_found;\n     } catch (const fs::filesystem_error& e) {\n-        error = Untranslated(strprintf(\"Failed to access database path '%s': %s\", path.string(), fsbridge::get_filesystem_error_message(e)));\n+        error = Untranslated(strprintf(\"Failed to access database path '%s': %s\", fs::PathToString(path), fsbridge::get_filesystem_error_message(e)));\n         status = DatabaseStatus::FAILED_BAD_PATH;\n         return nullptr;\n     }\n@@ -1118,33 +1118,33 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n         }\n         if (IsSQLiteFile(SQLiteDataFile(path))) {\n             if (format) {\n-                error = Untranslated(strprintf(\"Failed to load database path '%s'. Data is in ambiguous format.\", path.string()));\n+                error = Untranslated(strprintf(\"Failed to load database path '%s'. Data is in ambiguous format.\", fs::PathToString(path)));\n                 status = DatabaseStatus::FAILED_BAD_FORMAT;\n                 return nullptr;\n             }\n             format = DatabaseFormat::SQLITE;\n         }\n     } else if (options.require_existing) {\n-        error = Untranslated(strprintf(\"Failed to load database path '%s'. Path does not exist.\", path.string()));\n+        error = Untranslated(strprintf(\"Failed to load database path '%s'. Path does not exist.\", fs::PathToString(path)));\n         status = DatabaseStatus::FAILED_NOT_FOUND;\n         return nullptr;\n     }\n \n     if (!format && options.require_existing) {\n-        error = Untranslated(strprintf(\"Failed to load database path '%s'. Data is not in recognized format.\", path.string()));\n+        error = Untranslated(strprintf(\"Failed to load database path '%s'. Data is not in recognized format.\", fs::PathToString(path)));\n         status = DatabaseStatus::FAILED_BAD_FORMAT;\n         return nullptr;\n     }\n \n     if (format && options.require_create) {\n-        error = Untranslated(strprintf(\"Failed to create database path '%s'. Database already exists.\", path.string()));\n+        error = Untranslated(strprintf(\"Failed to create database path '%s'. Database already exists.\", fs::PathToString(path)));\n         status = DatabaseStatus::FAILED_ALREADY_EXISTS;\n         return nullptr;\n     }\n \n     // A db already exists so format is set, but options also specifies the format, so make sure they agree\n     if (format && options.require_format && format != options.require_format) {\n-        error = Untranslated(strprintf(\"Failed to load database path '%s'. Data is not in required format.\", path.string()));\n+        error = Untranslated(strprintf(\"Failed to load database path '%s'. Data is not in required format.\", fs::PathToString(path)));\n         status = DatabaseStatus::FAILED_BAD_FORMAT;\n         return nullptr;\n     }\n@@ -1166,15 +1166,15 @@ std::unique_ptr<WalletDatabase> MakeDatabase(const fs::path& path, const Databas\n #ifdef USE_SQLITE\n         return MakeSQLiteDatabase(path, options, status, error);\n #endif\n-        error = Untranslated(strprintf(\"Failed to open database path '%s'. Build does not support SQLite database format.\", path.string()));\n+        error = Untranslated(strprintf(\"Failed to open database path '%s'. Build does not support SQLite database format.\", fs::PathToString(path)));\n         status = DatabaseStatus::FAILED_BAD_FORMAT;\n         return nullptr;\n     }\n \n #ifdef USE_BDB\n     return MakeBerkeleyDatabase(path, options, status, error);\n #endif\n-    error = Untranslated(strprintf(\"Failed to open database path '%s'. Build does not support Berkeley DB database format.\", path.string()));\n+    error = Untranslated(strprintf(\"Failed to open database path '%s'. Build does not support Berkeley DB database format.\", fs::PathToString(path)));\n     status = DatabaseStatus::FAILED_BAD_FORMAT;\n     return nullptr;\n }"
      },
      {
        "sha": "788679bbebe6729c7fa17ebe3e40626337c590dc",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -125,7 +125,7 @@ bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command)\n         return false;\n     }\n     const std::string name = args.GetArg(\"-wallet\", \"\");\n-    const fs::path path = fsbridge::AbsPathJoin(GetWalletDir(), name);\n+    const fs::path path = fsbridge::AbsPathJoin(GetWalletDir(), fs::PathFromString(name));\n \n     if (command == \"create\") {\n         DatabaseOptions options;"
      },
      {
        "sha": "7f813432b3b22f346372be45c7ee0c617d320585",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6544ea5035268025207d2402db2f7d90fde947a6/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=6544ea5035268025207d2402db2f7d90fde947a6",
        "patch": "@@ -12,7 +12,7 @@ fs::path GetWalletDir()\n     fs::path path;\n \n     if (gArgs.IsArgSet(\"-walletdir\")) {\n-        path = gArgs.GetArg(\"-walletdir\", \"\");\n+        path = fs::PathFromString(gArgs.GetArg(\"-walletdir\", \"\"));\n         if (!fs::is_directory(path)) {\n             // If the path specified doesn't exist, we return the deliberately\n             // invalid empty string."
      }
    ]
  }
]