[
  {
    "sha": "f63dad288e5d37a7f5b1e34e452c916f2535a821",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjNkYWQyODhlNWQzN2E3ZjViMWUzNGU0NTJjOTE2ZjI1MzVhODIx",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-08-03T14:38:41Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-08-07T12:42:05Z"
      },
      "message": "[Refactor] Split CKeyStore from CWatchOnlyStore",
      "tree": {
        "sha": "3c84b2bd49bfe521071e69cc42d2c25f90fab6db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c84b2bd49bfe521071e69cc42d2c25f90fab6db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f63dad288e5d37a7f5b1e34e452c916f2535a821",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f63dad288e5d37a7f5b1e34e452c916f2535a821",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f63dad288e5d37a7f5b1e34e452c916f2535a821",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f63dad288e5d37a7f5b1e34e452c916f2535a821/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e222618a32a16cf0efae392e6349c10c38e57db6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e222618a32a16cf0efae392e6349c10c38e57db6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e222618a32a16cf0efae392e6349c10c38e57db6"
      }
    ],
    "stats": {
      "total": 169,
      "additions": 94,
      "deletions": 75
    },
    "files": [
      {
        "sha": "ee5b31ed46ff5fda5f3984f55d5e90ea07e500e5",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 10,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=f63dad288e5d37a7f5b1e34e452c916f2535a821",
        "patch": "@@ -17,18 +17,23 @@ bool CBasicKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) con\n {\n     CKey key;\n     if (!GetKey(address, key)) {\n-        LOCK(cs_KeyStore);\n-        WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n-        if (it != mapWatchKeys.end()) {\n-            vchPubKeyOut = it->second;\n-            return true;\n-        }\n         return false;\n     }\n     vchPubKeyOut = key.GetPubKey();\n     return true;\n }\n \n+bool CWatchOnlyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n+{\n+    LOCK(cs_KeyStore);\n+    WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n+    if (it != mapWatchKeys.end()) {\n+        vchPubKeyOut = it->second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n {\n     LOCK(cs_KeyStore);\n@@ -80,7 +85,7 @@ static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)\n     return true;\n }\n \n-bool CBasicKeyStore::AddWatchOnly(const CScript &dest)\n+bool CWatchOnlyStore::AddWatchOnly(const CScript &dest)\n {\n     LOCK(cs_KeyStore);\n     setWatchOnly.insert(dest);\n@@ -90,7 +95,7 @@ bool CBasicKeyStore::AddWatchOnly(const CScript &dest)\n     return true;\n }\n \n-bool CBasicKeyStore::RemoveWatchOnly(const CScript &dest)\n+bool CWatchOnlyStore::RemoveWatchOnly(const CScript &dest)\n {\n     LOCK(cs_KeyStore);\n     setWatchOnly.erase(dest);\n@@ -100,13 +105,13 @@ bool CBasicKeyStore::RemoveWatchOnly(const CScript &dest)\n     return true;\n }\n \n-bool CBasicKeyStore::HaveWatchOnly(const CScript &dest) const\n+bool CWatchOnlyStore::HaveWatchOnly(const CScript &dest) const\n {\n     LOCK(cs_KeyStore);\n     return setWatchOnly.count(dest) > 0;\n }\n \n-bool CBasicKeyStore::HaveWatchOnly() const\n+bool CWatchOnlyStore::HaveWatchOnly() const\n {\n     LOCK(cs_KeyStore);\n     return (!setWatchOnly.empty());"
      },
      {
        "sha": "907ded1ed5c49190b8d16dce4f7316d3304ec7c5",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 16,
        "deletions": 13,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=f63dad288e5d37a7f5b1e34e452c916f2535a821",
        "patch": "@@ -37,27 +37,35 @@ class CKeyStore\n     virtual bool AddCScript(const CScript& redeemScript) =0;\n     virtual bool HaveCScript(const CScriptID &hash) const =0;\n     virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const =0;\n-\n-    //! Support for Watch-only addresses\n-    virtual bool AddWatchOnly(const CScript &dest) =0;\n-    virtual bool RemoveWatchOnly(const CScript &dest) =0;\n-    virtual bool HaveWatchOnly(const CScript &dest) const =0;\n-    virtual bool HaveWatchOnly() const =0;\n };\n \n typedef std::map<CKeyID, CKey> KeyMap;\n typedef std::map<CKeyID, CPubKey> WatchKeyMap;\n typedef std::map<CScriptID, CScript > ScriptMap;\n typedef std::set<CScript> WatchOnlySet;\n \n+/** Watch only store, that keeps watched addresses */\n+class CWatchOnlyStore\n+{\n+protected:\n+    mutable CCriticalSection cs_KeyStore;\n+    WatchOnlySet setWatchOnly;\n+    WatchKeyMap mapWatchKeys;\n+\n+public:\n+    virtual bool AddWatchOnly(const CScript &dest);\n+    virtual bool RemoveWatchOnly(const CScript &dest);\n+    virtual bool HaveWatchOnly(const CScript &dest) const;\n+    virtual bool HaveWatchOnly() const;\n+    virtual bool GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const;\n+};\n+\n /** Basic key store, that keeps keys in an address->secret map */\n class CBasicKeyStore : public CKeyStore\n {\n protected:\n     KeyMap mapKeys;\n-    WatchKeyMap mapWatchKeys;\n     ScriptMap mapScripts;\n-    WatchOnlySet setWatchOnly;\n \n public:\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n@@ -100,11 +108,6 @@ class CBasicKeyStore : public CKeyStore\n     virtual bool AddCScript(const CScript& redeemScript) override;\n     virtual bool HaveCScript(const CScriptID &hash) const override;\n     virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;\n-\n-    virtual bool AddWatchOnly(const CScript &dest) override;\n-    virtual bool RemoveWatchOnly(const CScript &dest) override;\n-    virtual bool HaveWatchOnly(const CScript &dest) const override;\n-    virtual bool HaveWatchOnly() const override;\n };\n \n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;"
      },
      {
        "sha": "7cfe39f31119ba20045d88f48a68817d4ad1042c",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=f63dad288e5d37a7f5b1e34e452c916f2535a821",
        "patch": "@@ -83,7 +83,7 @@ class AddressTablePriv\n             for (const std::pair<CTxDestination, CAddressBookData>& item : wallet->mapAddressBook)\n             {\n                 const CBitcoinAddress& address = item.first;\n-                bool fMine = IsMine(*wallet, address.Get());\n+                bool fMine = IsMine(*wallet, *wallet, address.Get());\n                 AddressTableEntry::Type addressType = translateTransactionType(\n                         QString::fromStdString(item.second.purpose), fMine);\n                 const std::string& strName = item.second.name;"
      },
      {
        "sha": "c63dede84c1535b2315289b2a08779ceb27be797",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=f63dad288e5d37a7f5b1e34e452c916f2535a821",
        "patch": "@@ -99,7 +99,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n                     strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + tr(\"unknown\") + \"<br>\";\n                     strHTML += \"<b>\" + tr(\"To\") + \":</b> \";\n                     strHTML += GUIUtil::HtmlEscape(rec->address);\n-                    QString addressOwned = (::IsMine(*wallet, address) == ISMINE_SPENDABLE) ? tr(\"own address\") : tr(\"watch-only\");\n+                    QString addressOwned = (::IsMine(*wallet, *wallet, address) == ISMINE_SPENDABLE) ? tr(\"own address\") : tr(\"watch-only\");\n                     if (!wallet->mapAddressBook[address].name.empty())\n                         strHTML += \" (\" + addressOwned + \", \" + tr(\"label\") + \": \" + GUIUtil::HtmlEscape(wallet->mapAddressBook[address].name) + \")\";\n                     else"
      },
      {
        "sha": "0a14257a6e19b2abed9d4876de0bdba27acd4050",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=f63dad288e5d37a7f5b1e34e452c916f2535a821",
        "patch": "@@ -221,7 +221,7 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         ret.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n \n #ifdef ENABLE_WALLET\n-        isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n+        isminetype mine = pwallet ? IsMine(*pwallet, *pwallet, dest) : ISMINE_NO;\n         ret.push_back(Pair(\"ismine\", bool(mine & ISMINE_SPENDABLE)));\n         ret.push_back(Pair(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY)));\n         UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);"
      },
      {
        "sha": "8b2882f18a900ee9b199384c405c0c2a5c585bb6",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=f63dad288e5d37a7f5b1e34e452c916f2535a821",
        "patch": "@@ -26,30 +26,30 @@ unsigned int HaveKeys(const std::vector<valtype>& pubkeys, const CKeyStore& keys\n     return nResult;\n }\n \n-isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey, SigVersion sigversion)\n+isminetype IsMine(const CKeyStore& keystore, const CWatchOnlyStore& watchOnlyStore, const CScript& scriptPubKey, SigVersion sigversion)\n {\n     bool isInvalid = false;\n-    return IsMine(keystore, scriptPubKey, isInvalid, sigversion);\n+    return IsMine(keystore, watchOnlyStore, scriptPubKey, isInvalid, sigversion);\n }\n \n-isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest, SigVersion sigversion)\n+isminetype IsMine(const CKeyStore& keystore, const CWatchOnlyStore& watchOnlyStore, const CTxDestination& dest, SigVersion sigversion)\n {\n     bool isInvalid = false;\n-    return IsMine(keystore, dest, isInvalid, sigversion);\n+    return IsMine(keystore, watchOnlyStore, dest, isInvalid, sigversion);\n }\n \n-isminetype IsMine(const CKeyStore &keystore, const CTxDestination& dest, bool& isInvalid, SigVersion sigversion)\n+isminetype IsMine(const CKeyStore &keystore, const CWatchOnlyStore& watchOnlyStore, const CTxDestination& dest, bool& isInvalid, SigVersion sigversion)\n {\n     CScript script = GetScriptForDestination(dest);\n-    return IsMine(keystore, script, isInvalid, sigversion);\n+    return IsMine(keystore, watchOnlyStore, script, isInvalid, sigversion);\n }\n \n-isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool& isInvalid, SigVersion sigversion)\n+isminetype IsMine(const CKeyStore &keystore, const CWatchOnlyStore& watchOnlyStore,  const CScript& scriptPubKey, bool& isInvalid, SigVersion sigversion)\n {\n     std::vector<valtype> vSolutions;\n     txnouttype whichType;\n     if (!Solver(scriptPubKey, whichType, vSolutions)) {\n-        if (keystore.HaveWatchOnly(scriptPubKey))\n+        if (watchOnlyStore.HaveWatchOnly(scriptPubKey))\n             return ISMINE_WATCH_UNSOLVABLE;\n         return ISMINE_NO;\n     }\n@@ -77,7 +77,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool&\n             // This also applies to the P2WSH case.\n             break;\n         }\n-        isminetype ret = ::IsMine(keystore, GetScriptForDestination(CKeyID(uint160(vSolutions[0]))), isInvalid, SIGVERSION_WITNESS_V0);\n+        isminetype ret = ::IsMine(keystore, watchOnlyStore, GetScriptForDestination(CKeyID(uint160(vSolutions[0]))), isInvalid, SIGVERSION_WITNESS_V0);\n         if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_SOLVABLE || (ret == ISMINE_NO && isInvalid))\n             return ret;\n         break;\n@@ -86,7 +86,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool&\n         keyID = CKeyID(uint160(vSolutions[0]));\n         if (sigversion != SIGVERSION_BASE) {\n             CPubKey pubkey;\n-            if (keystore.GetPubKey(keyID, pubkey) && !pubkey.IsCompressed()) {\n+            if ((keystore.GetPubKey(keyID, pubkey) || watchOnlyStore.GetPubKey(keyID, pubkey)) && !pubkey.IsCompressed()) {\n                 isInvalid = true;\n                 return ISMINE_NO;\n             }\n@@ -99,7 +99,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool&\n         CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n-            isminetype ret = IsMine(keystore, subscript, isInvalid);\n+            isminetype ret = IsMine(keystore, watchOnlyStore, subscript, isInvalid);\n             if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_SOLVABLE || (ret == ISMINE_NO && isInvalid))\n                 return ret;\n         }\n@@ -115,7 +115,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool&\n         CScriptID scriptID = CScriptID(hash);\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n-            isminetype ret = IsMine(keystore, subscript, isInvalid, SIGVERSION_WITNESS_V0);\n+            isminetype ret = IsMine(keystore, watchOnlyStore, subscript, isInvalid, SIGVERSION_WITNESS_V0);\n             if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_SOLVABLE || (ret == ISMINE_NO && isInvalid))\n                 return ret;\n         }\n@@ -144,7 +144,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool&\n     }\n     }\n \n-    if (keystore.HaveWatchOnly(scriptPubKey)) {\n+    if (watchOnlyStore.HaveWatchOnly(scriptPubKey)) {\n         // TODO: This could be optimized some by doing some work after the above solver\n         SignatureData sigs;\n         return ProduceSignature(DummySignatureCreator(&keystore), scriptPubKey, sigs) ? ISMINE_WATCH_SOLVABLE : ISMINE_WATCH_UNSOLVABLE;"
      },
      {
        "sha": "c77815c90af5f6ba38d1424a9c7f16613653f72a",
        "filename": "src/script/ismine.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/script/ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/script/ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.h?ref=f63dad288e5d37a7f5b1e34e452c916f2535a821",
        "patch": "@@ -11,6 +11,7 @@\n #include <stdint.h>\n \n class CKeyStore;\n+class CWatchOnlyStore;\n class CScript;\n \n /** IsMine() return codes */\n@@ -33,9 +34,9 @@ typedef uint8_t isminefilter;\n  * different SIGVERSION may have different network rules. Currently the only use of isInvalid is indicate uncompressed\n  * keys in SIGVERSION_WITNESS_V0 script, but could also be used in similar cases in the future\n  */\n-isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey, bool& isInvalid, SigVersion = SIGVERSION_BASE);\n-isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey, SigVersion = SIGVERSION_BASE);\n-isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest, bool& isInvalid, SigVersion = SIGVERSION_BASE);\n-isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest, SigVersion = SIGVERSION_BASE);\n+isminetype IsMine(const CKeyStore& keystore, const CWatchOnlyStore& watchOnlyStore, const CScript& scriptPubKey, bool& isInvalid, SigVersion = SIGVERSION_BASE);\n+isminetype IsMine(const CKeyStore& keystore, const CWatchOnlyStore& watchOnlyStore, const CScript& scriptPubKey, SigVersion = SIGVERSION_BASE);\n+isminetype IsMine(const CKeyStore& keystore, const CWatchOnlyStore& watchOnlyStore, const CTxDestination& dest, bool& isInvalid, SigVersion = SIGVERSION_BASE);\n+isminetype IsMine(const CKeyStore& keystore, const CWatchOnlyStore& watchOnlyStore, const CTxDestination& dest, SigVersion = SIGVERSION_BASE);\n \n #endif // BITCOIN_SCRIPT_ISMINE_H"
      },
      {
        "sha": "c223fa11e390f497b8b85627a04f754aa0362c21",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=f63dad288e5d37a7f5b1e34e452c916f2535a821",
        "patch": "@@ -186,6 +186,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n     // to spend an escrow transaction.\n     //\n     CBasicKeyStore keystore, emptykeystore, partialkeystore;\n+    CWatchOnlyStore watchOnlyStore;\n     CKey key[3];\n     CTxDestination keyaddr[3];\n     for (int i = 0; i < 3; i++)\n@@ -206,8 +207,8 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         CTxDestination addr;\n         BOOST_CHECK(ExtractDestination(s, addr));\n         BOOST_CHECK(addr == keyaddr[0]);\n-        BOOST_CHECK(IsMine(keystore, s));\n-        BOOST_CHECK(!IsMine(emptykeystore, s));\n+        BOOST_CHECK(IsMine(keystore, watchOnlyStore, s));\n+        BOOST_CHECK(!IsMine(emptykeystore, watchOnlyStore, s));\n     }\n     {\n         std::vector<valtype> solutions;\n@@ -219,8 +220,8 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         CTxDestination addr;\n         BOOST_CHECK(ExtractDestination(s, addr));\n         BOOST_CHECK(addr == keyaddr[0]);\n-        BOOST_CHECK(IsMine(keystore, s));\n-        BOOST_CHECK(!IsMine(emptykeystore, s));\n+        BOOST_CHECK(IsMine(keystore, watchOnlyStore, s));\n+        BOOST_CHECK(!IsMine(emptykeystore, watchOnlyStore, s));\n     }\n     {\n         std::vector<valtype> solutions;\n@@ -231,9 +232,9 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         BOOST_CHECK_EQUAL(solutions.size(), 4U);\n         CTxDestination addr;\n         BOOST_CHECK(!ExtractDestination(s, addr));\n-        BOOST_CHECK(IsMine(keystore, s));\n-        BOOST_CHECK(!IsMine(emptykeystore, s));\n-        BOOST_CHECK(!IsMine(partialkeystore, s));\n+        BOOST_CHECK(IsMine(keystore, watchOnlyStore, s));\n+        BOOST_CHECK(!IsMine(emptykeystore, watchOnlyStore, s));\n+        BOOST_CHECK(!IsMine(partialkeystore, watchOnlyStore, s));\n     }\n     {\n         std::vector<valtype> solutions;\n@@ -248,9 +249,9 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         BOOST_CHECK(addrs[0] == keyaddr[0]);\n         BOOST_CHECK(addrs[1] == keyaddr[1]);\n         BOOST_CHECK(nRequired == 1);\n-        BOOST_CHECK(IsMine(keystore, s));\n-        BOOST_CHECK(!IsMine(emptykeystore, s));\n-        BOOST_CHECK(!IsMine(partialkeystore, s));\n+        BOOST_CHECK(IsMine(keystore, watchOnlyStore, s));\n+        BOOST_CHECK(!IsMine(emptykeystore, watchOnlyStore, s));\n+        BOOST_CHECK(!IsMine(partialkeystore, watchOnlyStore, s));\n     }\n     {\n         std::vector<valtype> solutions;"
      },
      {
        "sha": "237f27bad3e32c0f7628f4fd9947093a2cff2ab8",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=f63dad288e5d37a7f5b1e34e452c916f2535a821",
        "patch": "@@ -57,6 +57,7 @@ BOOST_AUTO_TEST_CASE(sign)\n \n     // Test SignSignature() (and therefore the version of Solver() that signs transactions)\n     CBasicKeyStore keystore;\n+    CWatchOnlyStore watchOnlyStore;\n     CKey key[4];\n     for (int i = 0; i < 4; i++)\n     {\n@@ -98,7 +99,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         txTo[i].vin[0].prevout.n = i;\n         txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n         txTo[i].vout[0].nValue = 1;\n-        BOOST_CHECK_MESSAGE(IsMine(keystore, txFrom.vout[i].scriptPubKey), strprintf(\"IsMine %d\", i));\n+        BOOST_CHECK_MESSAGE(IsMine(keystore, watchOnlyStore, txFrom.vout[i].scriptPubKey), strprintf(\"IsMine %d\", i));\n     }\n     for (int i = 0; i < 8; i++)\n     {\n@@ -155,6 +156,7 @@ BOOST_AUTO_TEST_CASE(set)\n     LOCK(cs_main);\n     // Test the CScript::Set* methods\n     CBasicKeyStore keystore;\n+    CWatchOnlyStore watchOnlyStore;\n     CKey key[4];\n     std::vector<CPubKey> keys;\n     for (int i = 0; i < 4; i++)\n@@ -196,7 +198,7 @@ BOOST_AUTO_TEST_CASE(set)\n         txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n         txTo[i].vout[0].nValue = 1*CENT;\n         txTo[i].vout[0].scriptPubKey = inner[i];\n-        BOOST_CHECK_MESSAGE(IsMine(keystore, txFrom.vout[i].scriptPubKey), strprintf(\"IsMine %d\", i));\n+        BOOST_CHECK_MESSAGE(IsMine(keystore, watchOnlyStore, txFrom.vout[i].scriptPubKey), strprintf(\"IsMine %d\", i));\n     }\n     for (int i = 0; i < 4; i++)\n     {"
      },
      {
        "sha": "e7b12ccd67dbf79ab0623b74eadca2204e3ffd12",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=f63dad288e5d37a7f5b1e34e452c916f2535a821",
        "patch": "@@ -182,7 +182,7 @@ UniValue abortrescan(const JSONRPCRequest& request)\n void ImportAddress(CWallet*, const CBitcoinAddress& address, const std::string& strLabel);\n void ImportScript(CWallet* const pwallet, const CScript& script, const std::string& strLabel, bool isRedeemScript)\n {\n-    if (!isRedeemScript && ::IsMine(*pwallet, script) == ISMINE_SPENDABLE) {\n+    if (!isRedeemScript && ::IsMine(*pwallet, *pwallet, script) == ISMINE_SPENDABLE) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n     }\n \n@@ -782,7 +782,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n             CBitcoinAddress redeemAddress = CBitcoinAddress(CScriptID(redeemScript));\n             CScript redeemDestination = GetScriptForDestination(redeemAddress.Get());\n \n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n+            if (::IsMine(*pwallet, *pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n             }\n \n@@ -875,7 +875,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n \n                 CScript pubKeyScript = GetScriptForDestination(pubKeyAddress.Get());\n \n-                if (::IsMine(*pwallet, pubKeyScript) == ISMINE_SPENDABLE) {\n+                if (::IsMine(*pwallet, *pwallet, pubKeyScript) == ISMINE_SPENDABLE) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n                 }\n \n@@ -893,7 +893,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n                 // TODO Is this necessary?\n                 CScript scriptRawPubKey = GetScriptForRawPubKey(pubKey);\n \n-                if (::IsMine(*pwallet, scriptRawPubKey) == ISMINE_SPENDABLE) {\n+                if (::IsMine(*pwallet, *pwallet, scriptRawPubKey) == ISMINE_SPENDABLE) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n                 }\n \n@@ -967,7 +967,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n \n             // Import scriptPubKey only.\n             if (pubKeys.size() == 0 && keys.size() == 0) {\n-                if (::IsMine(*pwallet, script) == ISMINE_SPENDABLE) {\n+                if (::IsMine(*pwallet, *pwallet, script) == ISMINE_SPENDABLE) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n                 }\n "
      },
      {
        "sha": "6fe574f49cf5214acc3a9ec25f56e43f649f462d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f63dad288e5d37a7f5b1e34e452c916f2535a821",
        "patch": "@@ -284,7 +284,7 @@ UniValue setaccount(const JSONRPCRequest& request)\n         strAccount = AccountFromValue(request.params[1]);\n \n     // Only add the account if the address is yours.\n-    if (IsMine(*pwallet, address.Get())) {\n+    if (IsMine(*pwallet, *pwallet, address.Get())) {\n         // Detect when changing the account of an address that is the 'unused current key' of another account:\n         if (pwallet->mapAddressBook.count(address.Get())) {\n             std::string strOldAccount = pwallet->mapAddressBook[address.Get()].name;\n@@ -641,7 +641,7 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     CScript scriptPubKey = GetScriptForDestination(address.Get());\n-    if (!IsMine(*pwallet, scriptPubKey)) {\n+    if (!IsMine(*pwallet, *pwallet, scriptPubKey)) {\n         return ValueFromAmount(0);\n     }\n \n@@ -715,7 +715,7 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n         for (const CTxOut& txout : wtx.tx->vout)\n         {\n             CTxDestination address;\n-            if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*pwallet, address) && setAddress.count(address)) {\n+            if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*pwallet, *pwallet, address) && setAddress.count(address)) {\n                 if (wtx.GetDepthInMainChain() >= nMinDepth)\n                     nAmount += txout.nValue;\n             }\n@@ -1267,7 +1267,7 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n             if (!ExtractDestination(txout.scriptPubKey, address))\n                 continue;\n \n-            isminefilter mine = IsMine(*pwallet, address);\n+            isminefilter mine = IsMine(*pwallet, *pwallet, address);\n             if(!(mine & filter))\n                 continue;\n \n@@ -1469,7 +1469,7 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n         for (const COutputEntry& s : listSent)\n         {\n             UniValue entry(UniValue::VOBJ);\n-            if (involvesWatchonly || (::IsMine(*pwallet, s.destination) & ISMINE_WATCH_ONLY)) {\n+            if (involvesWatchonly || (::IsMine(*pwallet, *pwallet, s.destination) & ISMINE_WATCH_ONLY)) {\n                 entry.push_back(Pair(\"involvesWatchonly\", true));\n             }\n             entry.push_back(Pair(\"account\", strSentAccount));\n@@ -1500,7 +1500,7 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n             if (fAllAccounts || (account == strAccount))\n             {\n                 UniValue entry(UniValue::VOBJ);\n-                if (involvesWatchonly || (::IsMine(*pwallet, r.destination) & ISMINE_WATCH_ONLY)) {\n+                if (involvesWatchonly || (::IsMine(*pwallet, *pwallet, r.destination) & ISMINE_WATCH_ONLY)) {\n                     entry.push_back(Pair(\"involvesWatchonly\", true));\n                 }\n                 entry.push_back(Pair(\"account\", account));\n@@ -1720,7 +1720,7 @@ UniValue listaccounts(const JSONRPCRequest& request)\n \n     std::map<std::string, CAmount> mapAccountBalances;\n     for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n-        if (IsMine(*pwallet, entry.first) & includeWatchonly) {  // This address belongs to me\n+        if (IsMine(*pwallet, *pwallet, entry.first) & includeWatchonly) {  // This address belongs to me\n             mapAccountBalances[entry.second.name] = 0;\n         }\n     }"
      },
      {
        "sha": "2bd69579b6ce0775d5ffb3c20db5c57fcc67cab5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f63dad288e5d37a7f5b1e34e452c916f2535a821",
        "patch": "@@ -284,7 +284,7 @@ bool CWallet::LoadCScript(const CScript& redeemScript)\n \n bool CWallet::AddWatchOnly(const CScript& dest)\n {\n-    if (!CCryptoKeyStore::AddWatchOnly(dest))\n+    if (!CWatchOnlyStore::AddWatchOnly(dest))\n         return false;\n     const CKeyMetadata& meta = mapKeyMetadata[CScriptID(dest)];\n     UpdateTimeFirstKey(meta.nCreateTime);\n@@ -301,7 +301,7 @@ bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n bool CWallet::RemoveWatchOnly(const CScript &dest)\n {\n     AssertLockHeld(cs_wallet);\n-    if (!CCryptoKeyStore::RemoveWatchOnly(dest))\n+    if (!CWatchOnlyStore::RemoveWatchOnly(dest))\n         return false;\n     if (!HaveWatchOnly())\n         NotifyWatchonlyChanged(false);\n@@ -313,7 +313,7 @@ bool CWallet::RemoveWatchOnly(const CScript &dest)\n \n bool CWallet::LoadWatchOnly(const CScript &dest)\n {\n-    return CCryptoKeyStore::AddWatchOnly(dest);\n+    return CWatchOnlyStore::AddWatchOnly(dest);\n }\n \n bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n@@ -1240,7 +1240,7 @@ CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n \n isminetype CWallet::IsMine(const CTxOut& txout) const\n {\n-    return ::IsMine(*this, txout.scriptPubKey);\n+    return ::IsMine(*this, *this, txout.scriptPubKey);\n }\n \n CAmount CWallet::GetCredit(const CTxOut& txout, const isminefilter& filter) const\n@@ -1259,7 +1259,7 @@ bool CWallet::IsChange(const CTxOut& txout) const\n     // a better way of identifying which outputs are 'the send' and which are\n     // 'the change' will need to be implemented (maybe extend CWalletTx to remember\n     // which output, if any, was change).\n-    if (::IsMine(*this, txout.scriptPubKey))\n+    if (::IsMine(*this, *this, txout.scriptPubKey))\n     {\n         CTxDestination address;\n         if (!ExtractDestination(txout.scriptPubKey, address))\n@@ -3128,7 +3128,7 @@ bool CWallet::SetAddressBook(const CTxDestination& address, const std::string& s\n         if (!strPurpose.empty()) /* update purpose only if requested */\n             mapAddressBook[address].purpose = strPurpose;\n     }\n-    NotifyAddressBookChanged(this, address, strName, ::IsMine(*this, address) != ISMINE_NO,\n+    NotifyAddressBookChanged(this, address, strName, ::IsMine(*this, *this, address) != ISMINE_NO,\n                              strPurpose, (fUpdated ? CT_UPDATED : CT_NEW) );\n     if (!strPurpose.empty() && !CWalletDB(*dbw).WritePurpose(CBitcoinAddress(address).ToString(), strPurpose))\n         return false;\n@@ -3149,7 +3149,7 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n         mapAddressBook.erase(address);\n     }\n \n-    NotifyAddressBookChanged(this, address, \"\", ::IsMine(*this, address) != ISMINE_NO, \"\", CT_DELETED);\n+    NotifyAddressBookChanged(this, address, \"\", ::IsMine(*this, *this, address) != ISMINE_NO, \"\", CT_DELETED);\n \n     CWalletDB(*dbw).ErasePurpose(CBitcoinAddress(address).ToString());\n     return CWalletDB(*dbw).EraseName(CBitcoinAddress(address).ToString());\n@@ -3836,6 +3836,11 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n+bool CWallet::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n+{\n+    return CCryptoKeyStore::GetPubKey(address, vchPubKeyOut) || CWatchOnlyStore::GetPubKey(address, vchPubKeyOut);\n+}\n+\n std::string CWallet::GetWalletHelpString(bool showDebug)\n {\n     std::string strUsage = HelpMessageGroup(_(\"Wallet options:\"));"
      },
      {
        "sha": "655d4c42210046473396185f67c6ecb4de1b5e51",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f63dad288e5d37a7f5b1e34e452c916f2535a821/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f63dad288e5d37a7f5b1e34e452c916f2535a821",
        "patch": "@@ -650,7 +650,7 @@ class CAccountingEntry\n  * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n  * and provides the ability to create new transactions.\n  */\n-class CWallet : public CCryptoKeyStore, public CValidationInterface\n+class CWallet : public CCryptoKeyStore, public CWatchOnlyStore, public CValidationInterface\n {\n private:\n     static std::atomic<bool> fFlushScheduled;\n@@ -901,6 +901,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! Get all destination values matching a prefix.\n     std::vector<std::string> GetDestValues(const std::string& prefix) const;\n \n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n+\n     //! Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnly(const CScript& dest, int64_t nCreateTime);\n     bool RemoveWatchOnly(const CScript &dest) override;"
      }
    ]
  },
  {
    "sha": "6b89306611bcc7b1348f02e94ccad04b863213b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Yjg5MzA2NjExYmNjN2IxMzQ4ZjAyZTk0Y2NhZDA0Yjg2MzIxM2I2",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-08-07T13:25:19Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-08-08T01:00:07Z"
      },
      "message": "[Refactor] Replace calls of ::IsMine to CWallet::IsMine",
      "tree": {
        "sha": "6e6f5e9bc976832e1188421c1afc56539a50f721",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e6f5e9bc976832e1188421c1afc56539a50f721"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b89306611bcc7b1348f02e94ccad04b863213b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b89306611bcc7b1348f02e94ccad04b863213b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b89306611bcc7b1348f02e94ccad04b863213b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b89306611bcc7b1348f02e94ccad04b863213b6/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f63dad288e5d37a7f5b1e34e452c916f2535a821",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f63dad288e5d37a7f5b1e34e452c916f2535a821",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f63dad288e5d37a7f5b1e34e452c916f2535a821"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 26,
      "deletions": 20
    },
    "files": [
      {
        "sha": "8bba588155e1fa4c1598fef92ebd048040fb745a",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b89306611bcc7b1348f02e94ccad04b863213b6/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b89306611bcc7b1348f02e94ccad04b863213b6/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=6b89306611bcc7b1348f02e94ccad04b863213b6",
        "patch": "@@ -83,7 +83,7 @@ class AddressTablePriv\n             for (const std::pair<CTxDestination, CAddressBookData>& item : wallet->mapAddressBook)\n             {\n                 const CBitcoinAddress& address = item.first;\n-                bool fMine = IsMine(*wallet, *wallet, address.Get());\n+                bool fMine = wallet->IsMine(GetScriptForDestination(address.Get()));\n                 AddressTableEntry::Type addressType = translateTransactionType(\n                         QString::fromStdString(item.second.purpose), fMine);\n                 const std::string& strName = item.second.name;"
      },
      {
        "sha": "12a2f98e1af6b67e938c04eb243b530a54e858cb",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b89306611bcc7b1348f02e94ccad04b863213b6/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b89306611bcc7b1348f02e94ccad04b863213b6/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=6b89306611bcc7b1348f02e94ccad04b863213b6",
        "patch": "@@ -99,7 +99,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n                     strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + tr(\"unknown\") + \"<br>\";\n                     strHTML += \"<b>\" + tr(\"To\") + \":</b> \";\n                     strHTML += GUIUtil::HtmlEscape(rec->address);\n-                    QString addressOwned = (::IsMine(*wallet, *wallet, address) == ISMINE_SPENDABLE) ? tr(\"own address\") : tr(\"watch-only\");\n+                    QString addressOwned = (wallet->IsMine(GetScriptForDestination(address)) == ISMINE_SPENDABLE) ? tr(\"own address\") : tr(\"watch-only\");\n                     if (!wallet->mapAddressBook[address].name.empty())\n                         strHTML += \" (\" + addressOwned + \", \" + tr(\"label\") + \": \" + GUIUtil::HtmlEscape(wallet->mapAddressBook[address].name) + \")\";\n                     else"
      },
      {
        "sha": "bd46d33316593b4c757c49f5d6f068faf757adf3",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b89306611bcc7b1348f02e94ccad04b863213b6/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b89306611bcc7b1348f02e94ccad04b863213b6/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=6b89306611bcc7b1348f02e94ccad04b863213b6",
        "patch": "@@ -51,7 +51,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                 sub.idx = i; // vout index\n                 sub.credit = txout.nValue;\n                 sub.involvesWatchAddress = mine & ISMINE_WATCH_ONLY;\n-                if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*wallet, address))\n+                if (ExtractDestination(txout.scriptPubKey, address) && wallet->IsMine(txout.scriptPubKey))\n                 {\n                     // Received by Bitcoin Address\n                     sub.type = TransactionRecord::RecvWithAddress;"
      },
      {
        "sha": "c3ff839f955f0243efc660bb7c7fb2c3ce1971d3",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b89306611bcc7b1348f02e94ccad04b863213b6/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b89306611bcc7b1348f02e94ccad04b863213b6/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=6b89306611bcc7b1348f02e94ccad04b863213b6",
        "patch": "@@ -221,7 +221,7 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         ret.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n \n #ifdef ENABLE_WALLET\n-        isminetype mine = pwallet ? IsMine(*pwallet, *pwallet, dest) : ISMINE_NO;\n+        isminetype mine = pwallet ? ::IsMine(*pwallet, *pwallet, dest) : ISMINE_NO;\n         ret.push_back(Pair(\"ismine\", bool(mine & ISMINE_SPENDABLE)));\n         ret.push_back(Pair(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY)));\n         UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);"
      },
      {
        "sha": "532ed5512bc858a069a4ada9c6debf28568caf5c",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b89306611bcc7b1348f02e94ccad04b863213b6/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b89306611bcc7b1348f02e94ccad04b863213b6/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=6b89306611bcc7b1348f02e94ccad04b863213b6",
        "patch": "@@ -182,7 +182,7 @@ UniValue abortrescan(const JSONRPCRequest& request)\n void ImportAddress(CWallet*, const CBitcoinAddress& address, const std::string& strLabel);\n void ImportScript(CWallet* const pwallet, const CScript& script, const std::string& strLabel, bool isRedeemScript)\n {\n-    if (!isRedeemScript && ::IsMine(*pwallet, *pwallet, script) == ISMINE_SPENDABLE) {\n+    if (!isRedeemScript && pwallet->IsMine(script) == ISMINE_SPENDABLE) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n     }\n \n@@ -782,7 +782,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n             CBitcoinAddress redeemAddress = CBitcoinAddress(CScriptID(redeemScript));\n             CScript redeemDestination = GetScriptForDestination(redeemAddress.Get());\n \n-            if (::IsMine(*pwallet, *pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n+            if (pwallet->IsMine(redeemDestination) == ISMINE_SPENDABLE) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n             }\n \n@@ -875,7 +875,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n \n                 CScript pubKeyScript = GetScriptForDestination(pubKeyAddress.Get());\n \n-                if (::IsMine(*pwallet, *pwallet, pubKeyScript) == ISMINE_SPENDABLE) {\n+                if (pwallet->IsMine(pubKeyScript) == ISMINE_SPENDABLE) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n                 }\n \n@@ -893,7 +893,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n                 // TODO Is this necessary?\n                 CScript scriptRawPubKey = GetScriptForRawPubKey(pubKey);\n \n-                if (::IsMine(*pwallet, *pwallet, scriptRawPubKey) == ISMINE_SPENDABLE) {\n+                if (pwallet->IsMine(scriptRawPubKey) == ISMINE_SPENDABLE) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n                 }\n \n@@ -967,7 +967,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n \n             // Import scriptPubKey only.\n             if (pubKeys.size() == 0 && keys.size() == 0) {\n-                if (::IsMine(*pwallet, *pwallet, script) == ISMINE_SPENDABLE) {\n+                if (pwallet->IsMine(script) == ISMINE_SPENDABLE) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n                 }\n "
      },
      {
        "sha": "06ff97af88e0561dc116b632be9938889ded2f1e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b89306611bcc7b1348f02e94ccad04b863213b6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b89306611bcc7b1348f02e94ccad04b863213b6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6b89306611bcc7b1348f02e94ccad04b863213b6",
        "patch": "@@ -284,7 +284,7 @@ UniValue setaccount(const JSONRPCRequest& request)\n         strAccount = AccountFromValue(request.params[1]);\n \n     // Only add the account if the address is yours.\n-    if (IsMine(*pwallet, *pwallet, address.Get())) {\n+    if (pwallet->IsMine(GetScriptForDestination(address.Get()))) {\n         // Detect when changing the account of an address that is the 'unused current key' of another account:\n         if (pwallet->mapAddressBook.count(address.Get())) {\n             std::string strOldAccount = pwallet->mapAddressBook[address.Get()].name;\n@@ -641,7 +641,7 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     CScript scriptPubKey = GetScriptForDestination(address.Get());\n-    if (!IsMine(*pwallet, *pwallet, scriptPubKey)) {\n+    if (!pwallet->IsMine(scriptPubKey)) {\n         return ValueFromAmount(0);\n     }\n \n@@ -715,7 +715,7 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n         for (const CTxOut& txout : wtx.tx->vout)\n         {\n             CTxDestination address;\n-            if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*pwallet, *pwallet, address) && setAddress.count(address)) {\n+            if (ExtractDestination(txout.scriptPubKey, address) && pwallet->IsMine(GetScriptForDestination(address)) && setAddress.count(address)) {\n                 if (wtx.GetDepthInMainChain() >= nMinDepth)\n                     nAmount += txout.nValue;\n             }\n@@ -1267,7 +1267,7 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n             if (!ExtractDestination(txout.scriptPubKey, address))\n                 continue;\n \n-            isminefilter mine = IsMine(*pwallet, *pwallet, address);\n+            isminefilter mine = pwallet->IsMine(GetScriptForDestination(address));\n             if(!(mine & filter))\n                 continue;\n \n@@ -1469,7 +1469,7 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n         for (const COutputEntry& s : listSent)\n         {\n             UniValue entry(UniValue::VOBJ);\n-            if (involvesWatchonly || (::IsMine(*pwallet, *pwallet, s.destination) & ISMINE_WATCH_ONLY)) {\n+            if (involvesWatchonly || (pwallet->IsMine(GetScriptForDestination(s.destination)) & ISMINE_WATCH_ONLY)) {\n                 entry.push_back(Pair(\"involvesWatchonly\", true));\n             }\n             entry.push_back(Pair(\"account\", strSentAccount));\n@@ -1500,7 +1500,7 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n             if (fAllAccounts || (account == strAccount))\n             {\n                 UniValue entry(UniValue::VOBJ);\n-                if (involvesWatchonly || (::IsMine(*pwallet, *pwallet, r.destination) & ISMINE_WATCH_ONLY)) {\n+                if (involvesWatchonly || (pwallet->IsMine(GetScriptForDestination(r.destination)) & ISMINE_WATCH_ONLY)) {\n                     entry.push_back(Pair(\"involvesWatchonly\", true));\n                 }\n                 entry.push_back(Pair(\"account\", account));\n@@ -1720,7 +1720,7 @@ UniValue listaccounts(const JSONRPCRequest& request)\n \n     std::map<std::string, CAmount> mapAccountBalances;\n     for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n-        if (IsMine(*pwallet, *pwallet, entry.first) & includeWatchonly) {  // This address belongs to me\n+        if (pwallet->IsMine(GetScriptForDestination(entry.first)) & includeWatchonly) {  // This address belongs to me\n             mapAccountBalances[entry.second.name] = 0;\n         }\n     }"
      },
      {
        "sha": "20fca33a3bc1f756a5d2743872ea2fd28a51d80f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b89306611bcc7b1348f02e94ccad04b863213b6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b89306611bcc7b1348f02e94ccad04b863213b6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6b89306611bcc7b1348f02e94ccad04b863213b6",
        "patch": "@@ -1240,7 +1240,12 @@ CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n \n isminetype CWallet::IsMine(const CTxOut& txout) const\n {\n-    return ::IsMine(*this, *this, txout.scriptPubKey);\n+    return IsMine(txout.scriptPubKey);\n+}\n+\n+isminetype CWallet::IsMine(const CScript& scriptPubKey) const\n+{\n+    return ::IsMine(*this, *this, scriptPubKey);\n }\n \n CAmount CWallet::GetCredit(const CTxOut& txout, const isminefilter& filter) const\n@@ -1259,7 +1264,7 @@ bool CWallet::IsChange(const CTxOut& txout) const\n     // a better way of identifying which outputs are 'the send' and which are\n     // 'the change' will need to be implemented (maybe extend CWalletTx to remember\n     // which output, if any, was change).\n-    if (::IsMine(*this, *this, txout.scriptPubKey))\n+    if (IsMine(txout.scriptPubKey))\n     {\n         CTxDestination address;\n         if (!ExtractDestination(txout.scriptPubKey, address))\n@@ -3128,7 +3133,7 @@ bool CWallet::SetAddressBook(const CTxDestination& address, const std::string& s\n         if (!strPurpose.empty()) /* update purpose only if requested */\n             mapAddressBook[address].purpose = strPurpose;\n     }\n-    NotifyAddressBookChanged(this, address, strName, ::IsMine(*this, *this, address) != ISMINE_NO,\n+    NotifyAddressBookChanged(this, address, strName, IsMine(GetScriptForDestination(address)) != ISMINE_NO,\n                              strPurpose, (fUpdated ? CT_UPDATED : CT_NEW) );\n     if (!strPurpose.empty() && !CWalletDB(*dbw).WritePurpose(CBitcoinAddress(address).ToString(), strPurpose))\n         return false;\n@@ -3149,7 +3154,7 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n         mapAddressBook.erase(address);\n     }\n \n-    NotifyAddressBookChanged(this, address, \"\", ::IsMine(*this, *this, address) != ISMINE_NO, \"\", CT_DELETED);\n+    NotifyAddressBookChanged(this, address, \"\", IsMine(GetScriptForDestination(address)) != ISMINE_NO, \"\", CT_DELETED);\n \n     CWalletDB(*dbw).ErasePurpose(CBitcoinAddress(address).ToString());\n     return CWalletDB(*dbw).EraseName(CBitcoinAddress(address).ToString());"
      },
      {
        "sha": "d2b575f9cf817e8acb88929ac90bee4f68587eb0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b89306611bcc7b1348f02e94ccad04b863213b6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b89306611bcc7b1348f02e94ccad04b863213b6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6b89306611bcc7b1348f02e94ccad04b863213b6",
        "patch": "@@ -1007,6 +1007,7 @@ class CWallet : public CCryptoKeyStore, public CWatchOnlyStore, public CValidati\n      */\n     CAmount GetDebit(const CTxIn& txin, const isminefilter& filter) const;\n     isminetype IsMine(const CTxOut& txout) const;\n+    isminetype IsMine(const CScript& scriptPubKey) const;\n     CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const;\n     bool IsChange(const CTxOut& txout) const;\n     CAmount GetChange(const CTxOut& txout) const;"
      }
    ]
  }
]