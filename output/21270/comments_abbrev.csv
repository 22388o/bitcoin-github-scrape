DrahtBot,2021-02-23 00:55:49,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21236 (Net processing: Extract `addr` send functionality into MaybeSendAddr() by jnewbery)\n* #21235 (p2p: Clarify discon",https://github.com/bitcoin/bitcoin/pull/21270#issuecomment-783788519,783788519,
DrahtBot,2021-03-04 10:01:33,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/21270#issuecomment-790492000,790492000,
jnewbery,2021-03-06 18:01:38,Concept ACK. Will review after rebase.,https://github.com/bitcoin/bitcoin/pull/21270#issuecomment-792000937,792000937,
dongcarl,2021-03-08 20:36:52,"Pushed a0741fa4d5acb567122d0d43c725f8f64fd75eaf -> 38c325b1df093b2ff380df93c3a518286c531f32\n- Rebased over master",https://github.com/bitcoin/bitcoin/pull/21270#issuecomment-793058721,793058721,
dongcarl,2021-03-08 20:57:11,"Pushed 38c325b1df093b2ff380df93c3a518286c531f32 -> a67983cd6d8e61565da4e03f3ba401d0148fe195\n- Addressed https://github.com/bitcoin/bitcoin/pull/21270#commitcomment-47985104 in prepended commit\n- Fixed namespace brace syntax mistake in ""net_processing: Move some static functions to PeerManager""",https://github.com/bitcoin/bitcoin/pull/21270#issuecomment-793071459,793071459,
laanwj,2021-03-11 10:46:21,Code review ACK a67983cd6d8e61565da4e03f3ba401d0148fe195,https://github.com/bitcoin/bitcoin/pull/21270#issuecomment-796645222,796645222,
jnewbery,2021-03-11 13:33:04,"> Question: I forget if this was already mentioned somewhere, but why isn't LookupBlockIndex a const member function? Otherwise could be passing const BlockManager&\n\nI can't see any reason why `LookupBlockIndex` shouldn't be a const function. Changing all the places that `BlockManager&` is passed to pass `const BlockManager&` seems like it'd be a big improvement and indicate to the reader that",https://github.com/bitcoin/bitcoin/pull/21270#issuecomment-796738048,796738048,
dongcarl,2021-03-12 22:12:30,"Thanks everyone for the diligent reviews! I will prepend commits in Bundle 5 when I get the chance and link back to the convo here, we can continue the convos over on the Bundle 5 thread!",https://github.com/bitcoin/bitcoin/pull/21270#issuecomment-797786186,797786186,
glozow,2021-03-11 00:53:25,"I think this line would give jnewbery a heart attack... \n\n```suggestion\n    GenerateCoinbaseCommitment(block,\n                               WITH_LOCK(::cs_main,\n                                         assert(std::addressof(g_chainman.m_blockman) == std::addressof(blockman));\n                                         return blockman.LookupBlockIndex(block.hashPrevBlock)),\n           ",https://github.com/bitcoin/bitcoin/pull/21270#discussion_r591987692,591987692,src/miner.cpp
laanwj,2021-03-11 08:04:52,"This is a really strange C++ construction to me, to have assertions and return statements inside a function argument. It is likely out of scope of this PR to refactor it though. I'm not sure splitting it up over multiple lines makes it much more insightful.\n(the change here didn't make it much worse)",https://github.com/bitcoin/bitcoin/pull/21270#discussion_r592140891,592140891,src/miner.cpp
MarcoFalke,2021-03-11 08:56:05,"The assert will go away eventually, if I understood correctly, so the line is only temporarily longer than it previously was",https://github.com/bitcoin/bitcoin/pull/21270#discussion_r592173932,592173932,src/miner.cpp
laanwj,2021-03-11 10:49:59,Right :smile: ,https://github.com/bitcoin/bitcoin/pull/21270#discussion_r592257102,592257102,src/miner.cpp
ghostofjnewbery,2021-03-11 11:15:34,"I had a heart attack, but I've returned from beyond the grave to relay this warning from the underworld. Do not make 150 column function calls containing asserts and return statements, lest one day you should have to read and understand that code.\n\nConsider doing this instead. It's a lot less spooky:\n\n```suggestion\n    CBlockIndex* index;\n    {\n        LOCK(::cs_main);\n        asse",https://github.com/bitcoin/bitcoin/pull/21270#discussion_r592274113,592274113,src/miner.cpp
jnewbery,2021-03-11 11:36:15,"Did you consider changing the function signature here to accept a `CBlockIndex*`, which you fetch from blockman before calling the function? That seems like a more natural interface, and would avoid some of the difficult to read `WITH_LOCK()` in function calls.",https://github.com/bitcoin/bitcoin/pull/21270#discussion_r592287485,592287485,src/miner.cpp
jnewbery,2021-03-11 11:42:17,No need for this include. You can just forward declare `BlockManager`,https://github.com/bitcoin/bitcoin/pull/21270#discussion_r592291225,592291225,src/node/coinstats.h
jnewbery,2021-03-11 11:45:42,"Could this be changed to take just a `CChainstate&`, and get the `CCoinsView` and `BlockManager` from there?",https://github.com/bitcoin/bitcoin/pull/21270#discussion_r592293190,592293190,src/node/coinstats.h
jnewbery,2021-03-11 11:51:38,"Should this assert happen while holding `cs_main`? Both `ChainstateActive()` and `ActiveChainstate()` take cs_main, but there's a race condition where it changes between those locks.",https://github.com/bitcoin/bitcoin/pull/21270#discussion_r592296942,592296942,src/node/interfaces.cpp
jnewbery,2021-03-11 11:55:35,This second assert seems unnecessary. cs_main is held throughout this function. Same below for `findCommonAncestor`.,https://github.com/bitcoin/bitcoin/pull/21270#discussion_r592299232,592299232,src/node/interfaces.cpp
jnewbery,2021-03-11 11:56:23,Same comment as above about holding cs_main for this assert.,https://github.com/bitcoin/bitcoin/pull/21270#discussion_r592299738,592299738,src/node/interfaces.cpp
jnewbery,2021-03-11 11:59:15,Can you move the function comments to the declarations now that they're no longer static?,https://github.com/bitcoin/bitcoin/pull/21270#discussion_r592301704,592301704,src/net_processing.cpp
jnewbery,2021-03-11 12:00:40,None of these functions need to take `Consensus::Params&` now that they're members of `PeerManagerImpl`. They can just use `PeerManagerImpl.m_chainparams.consensus`.,https://github.com/bitcoin/bitcoin/pull/21270#discussion_r592302622,592302622,src/net_processing.cpp
jnewbery,2021-03-11 13:25:57,"This sequence of `m_chainman.ActiveChain()` function calls is repeatedly taking a `cs_main` lock and releasing it again (while holding `cs_main` the whole time). That's fine, and correct, but perhaps it'd be better to just take a local `const CChainstate&` variable once to avoid the multiple function calls.",https://github.com/bitcoin/bitcoin/pull/21270#discussion_r592357247,592357247,src/net_processing.cpp
MarcoFalke,2021-03-12 11:14:30,"This should really be a member variable, like the mempool. I'd doubt it would make sense to pass a different chainstate reference than the one the mempool is based on.",https://github.com/bitcoin/bitcoin/pull/21270#discussion_r593096212,593096212,src/miner.cpp
MarcoFalke,2021-03-12 11:15:09,Isn't params a member? Seems odd to pass twice,https://github.com/bitcoin/bitcoin/pull/21270#discussion_r593096545,593096545,src/net_processing.cpp
MarcoFalke,2021-03-12 11:15:57,"Any reason to prefer UB over a clean assert, like it is done for node.mempool above?",https://github.com/bitcoin/bitcoin/pull/21270#discussion_r593097032,593097032,src/node/coin.cpp
MarcoFalke,2021-03-12 11:17:27,same,https://github.com/bitcoin/bitcoin/pull/21270#discussion_r593097867,593097867,src/node/interfaces.cpp
MarcoFalke,2021-03-12 11:22:21,same,https://github.com/bitcoin/bitcoin/pull/21270#discussion_r593100570,593100570,src/node/transaction.cpp
MarcoFalke,2021-03-12 12:09:38,#21425,https://github.com/bitcoin/bitcoin/pull/21270#discussion_r593126224,593126224,src/net_processing.cpp
